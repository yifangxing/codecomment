{
  "org.apache.pdfbox.rendering.GlyphCache:getPathForCharacterCode(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:setFont(org.apache.pdfbox.pdmodel.font.PDFont)" : "* Set the font to be used for text formatting.\n     * \n     * @param font the font to be used.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:isDamaged()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setRichText(boolean)" : "* Set the richText bit.\n     *\n     * @param richText The value for the richText.",
  "org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddAndStrokePath:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* This will set the application to be launched or the document\n     * to be opened or printed. It is required if none of the entries\n     * Win, Mac or Unix is present. If this entry is absent and the\n     * viewer application does not understand any of the alternative\n     * entries it should do nothing.\n     *\n     * @param fs The file specification.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setRectDifferences(float,float,float,float)" : "* This will set the difference between the annotations \"outer\" rectangle defined by\n     * /Rect and the border.\n     * \n     * @param differenceLeft left difference from the annotations /Rect entry\n     * @param differenceTop top difference from the annotations /Rect entry\n     * @param differenceRight right difference from  the annotations /Rect entry\n     * @param differenceBottom bottom difference from the annotations /Rect entry\n     *",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getFractionalDisplay()" : "* This will return the value for the manner to display a fractional value.\r\n     *  \r\n     * @return the manner to display a fractional value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:<init>()" : "* Constructor.",
  "org.apache.pdfbox.filter.ASCII85OutputStream:flush()" : "* This will flush the data to the stream.\n     *\n     * @throws IOException If there is an error writing the data to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setStrokingColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Sets the stroking color space.\n     *\n     * @param colorSpace The new stroking color space.",
  "org.apache.pdfbox.text.PDFTextStripper:processPages(org.apache.pdfbox.pdmodel.PDPageTree)" : "* This will process all of the pages and the text that is in them.\n     *\n     * @param pages The pages object in the document.\n     *\n     * @throws IOException If there is an error parsing the text.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setPropBuild(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild)" : "* PDF signature build dictionary. Provides information about the signature handler.\n     *\n     * @param propBuild the prop build",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:flush()" : null,
  "org.apache.pdfbox.cos.COSFloat:hashCode()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getBitsPerFlag()" : "* The bits per flag of this shading. This will return -1 if one has not\r\n     * been set.\r\n     *\r\n     * @return The number of bits per flag.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:<init>(org.apache.pdfbox.cos.COSBase)" : "* Constructor.\n     *\n     * @param xfaBase The xfa resource.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:removeIssuer(byte[])" : "* Removes an issuer from the issuers list\n     *\n     * @param issuer A byte array containing DER-encoded X.509v3 certificate",
  "org.apache.pdfbox.pdfparser.BaseParser:skipLinebreak(int)" : "* Skip one line break, such as CR, LF or CRLF.\n     * \n     * @param linebreak the first character to be checked.\n     * \n     * @return true if a line break was found and removed.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.text.PDFTextStripper:resetEngine()" : null,
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace:getName()" : null,
  "org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:remove()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:<init>(org.apache.pdfbox.cos.COSDictionary,byte[],org.apache.pdfbox.pdmodel.PDResources)" : "* Creates an inline image from the given parameters and data.\r\n     *\r\n     * @param parameters the image parameters\r\n     * @param data the image data\r\n     * @param resources the current resources\r\n     * @throws IOException if the stream cannot be decoded",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:optimizedMergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction,org.apache.pdfbox.pdfwriter.compress.CompressParameters)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:setLeft(int)" : "* Set the left x-coordinate, a value of -1 implies that the current x-coordinate\n     * will be used.\n     * @param x The left x coordinate.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:setDefaultValue(org.apache.pdfbox.cos.COSBase)" : "* Sets the default of this field. This may be of any kind which is valid for this field's children.\n     *\n     * <p>\n     * <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value,\n     * without inheritance.\n     * \n     * @param value the default value",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setPV(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the page containing\n     * the annotation becomes visible in the viewer application's user interface.\n     *\n     * @param pv The action to be performed.",
  "org.apache.pdfbox.cos.COSDocument:getDocumentState()" : "* Returns the {@link COSDocumentState} of this {@link COSDocument}.\n     *\n     * @return The {@link COSDocumentState} of this {@link COSDocument}.\n     * @see COSDocumentState",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getLineDashPattern()" : "* This will get the dash pattern.\n     *\n     * @return null or the D value in the dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getFontBoxFont()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection:getCOSBase()" : "* @return the value for this direction",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new attribute object with a given dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeUserPassword(byte[],byte[],int,byte[],int,int,boolean)" : "* This will compute the user password hash.\n     *\n     * @param password The plain text password.\n     * @param owner The owner password hash.\n     * @param permissions The document permissions.\n     * @param id The document id.\n     * @param encRevision The revision of the encryption.\n     * @param keyLengthInBytes The length of the encryption key in bytes.\n     * @param encryptMetadata The encryption metadata\n     *\n     * @return The user password.\n     *\n     * @throws IOException if the password could not be computed",
  "org.apache.pdfbox.pdmodel.font.FontMappers:instance()" : "* Returns the singleton FontMapper instance.\n     * \n     * @return a singleton FontMapper instance",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getVersion()" : "* A text string indicating the version of the application implementation, as described by the\n     * <code>/Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in\n     * the format: major.minor.micro (for example 7.0.7).\n     *\n     * @return the application implementation version",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:toArray()" : "* {@inheritDoc}",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:acroFormLegacyMode(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : null,
  "org.apache.pdfbox.multipdf.PDFCloneUtility:cloneCOSBaseForNewDocument(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:toRGB(float[])" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:readRasterFromAny(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.cos.COSObject:<init>(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.ICOSParser)" : "* Constructor.\n     *\n     * @param object The object that this encapsulates.\n     * @param parser The parser to be used to load the object on demand\n     *",
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:toString()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setStemV(float)" : "* This will set the stem V for the font.\n     *\n     * @param stemV The new stem v for the font.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:getCIDFont()" : "* Returns the descendant CIDFont.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getColorModel()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(float[])" : "* Set the non stroking color.\n     * \n     * @see PDAbstractContentStream#setNonStrokingColor(java.awt.Color)\n     * @param components\n     *            the color components dependent on the color space being used.\n     * @throws IOException If there is an error writing to the content stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getArrayOfString(java.lang.String)" : "* Gets an array of strings.\n     * \n     * @param name the attribute name\n     * @return the array of strings",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:increaseLevel()" : "* Increase the level. Call this before running a potentially recursive operation.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setDimension(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDimension)" : "* Sets the dimension in which the specified transition effect shall occur. Only for {@link PDTransitionStyle#Split}\n     * and {@link PDTransitionStyle#Blinds}.\n     * \n     * @param dimension the dimension in which the specified transition effect shall occur",
  "org.apache.pdfbox.cos.COSObject:getObject()" : "* This will get the object that this object encapsulates.\n     *\n     * @return The encapsulated object.",
  "org.apache.pdfbox.pdmodel.PDResources:getShadingNames()" : "* Returns the names of the shading resources, if any.\r\n     * \r\n     * @return an iterable containing all names of available shadings",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitDestination:setFitBoundingBox(boolean)" : "* Set if this page destination should just fit the bounding box.  The default is false.\n     *\n     * @param fitBoundingBox A flag indicating if this should fit the bounding box.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:shouldTrackMousePosition()" : "* This will specify whether to track the mouse position when the URI is\n     * resolved. Default value: false. This entry applies only to actions\n     * triggered by the user's clicking an annotation; it is ignored for actions\n     * associated with outline items or with a document's OpenAction entry.\n     *\n     * @return A flag specifying whether to track the mouse position when the\n     * URI is resolved.",
  "org.apache.pdfbox.Loader:loadPDF(java.io.File,java.lang.String,java.io.InputStream,java.lang.String)" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the\n     * file.\n     * @param password password to be used for decryption\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param alias alias to be used for decryption when using public key security\n     * \n     * @return loaded document\n     * \n     * @throws IOException in case of a file reading or parsing error",
  "org.apache.pdfbox.Loader:loadPDF(java.io.File,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Parses a PDF.\n     * \n     * @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the\n     * file.\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering\n     * new/altered PDF streams\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the file required a non-empty password.\n     * @throws IOException in case of a file reading or parsing error",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:getTrailerCount()" : "* Returns the count of trailers.\r\n     *\r\n     * @return the count of trailers.",
  "org.apache.pdfbox.cos.COSDocument:getObjectsByType(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* This will get all dictionaries objects by type.\n     *\n     * @param type1 The first possible type of the object, mandatory.\n     * @param type2 The second possible type of the object, usually an abbreviation, optional.\n     *\n     * @return This will return all objects with the specified type(s).",
  "org.apache.pdfbox.pdmodel.interactive.TextAlign:valueOf(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setHolderFormStream(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Sets stream of holder form Stream\n     * \n     * @param holderFormStream the stream for the holder form",
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getDirectory()" : "* The dir to launch from.\n     *\n     * @return The dir of the executable/document to launch.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setInteriorColor(java.awt.Color)" : "* This will set interior color of the line endings defined in the LE entry.\n     *\n     * @param color The interior color of the line endings.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:closeAndFillAndStroke()" : "* Close, fill, and then stroke the path, using the nonzero winding number rule to determine the\n     * region to fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setContactInfo(java.lang.String)" : "* Sets the contact info provided by the signer to enable a recipient to contact the signer to\n     * verify the signature, e.g. a phone number.\n     *\n     * @param contactInfo the contact info to be used",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setO(java.lang.String)" : "* This will set the string specifying the operation to perform:\n     * open to open a document\n     * print to print a document\n     * If the F entry designates an application instead of a document, this entry\n     * is ignored and the application is launched. Default value: open.\n     *\n     * @param o The operation to perform.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(float)" : "* Set the non-stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.pdmodel.common.PDStream:createOutputStream(org.apache.pdfbox.cos.COSName)" : "* This will get a stream that can be written to, with the given filter.\n     *\n     * @param filter the filter to be used.\n     * @return An output stream to write data to.\n     * @throws IOException If an IO error occurs during writing.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:addSubstitute(java.lang.String,java.lang.String)" : "* Adds a top-priority substitute for the given font.\n     *\n     * @param match PostScript name of the font to match\n     * @param replace PostScript name of the font to use as a replacement",
  "org.apache.pdfbox.pdmodel.interactive.form.PDListBox:setTopIndex(java.lang.Integer)" : "* This will set top index \"TI\" value.\n     *\n     * @param topIndex the value for the top index, null will remove the value.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.rendering.PDFRenderer:renderImage(int,float,org.apache.pdfbox.rendering.ImageType)" : "* Returns the given page as an RGB or ARGB image at the given scale.\r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param scale the scaling factor, where 1 = 72 DPI\r\n     * @param imageType the type of image to return\r\n     * @return the rendered page image\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:<init>()" : "* Constructor to create empty page destination.\n     *",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormDefaultsProcessor:verifyOrCreateDefaults(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:listIterator(int)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLineCapStyle(int)" : "* Set the line cap style.\n     *\n     * @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line cap style.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getMacResFork()" : "* Get the mac ResFork.\n     *\n     * @return The mac ResFork.",
  "org.apache.pdfbox.pdfparser.BaseParser:isLF(int)" : "* This will tell if the next byte to be read is a line feed.\n     *\n     * @param c The character to check against line feed\n     * @return true if the next byte is 0x0A.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:scaleImage(java.awt.image.BufferedImage,int,int,int,boolean)" : "* High-quality image scaling.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:reset()" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeSHA256(byte[],byte[],byte[])" : null,
  "org.apache.pdfbox.filter.LZWFilter:createCodeTable()" : "* Init the code table with 1 byte entries and the EOD and CLEAR_TABLE markers.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isInvisible()" : "* Get the invisible flag.\n     * \n     * @return The invisible flag.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:changeDisplayProperties(int)" : "* Return true if the given {@code codepoint} is change display properties\n     * or deprecated characters as defined by\n     * <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.8\">RFC 3454,\n     * Appendix C.8</a>.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getTimeStamp()" : "* <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which\n     * is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff\n     * to indicate if a timestamp is required or optional.</p>\n     *\n     * @return the timestamp dictionary as PDSeedValueTimeStamp",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Paragraph:getText()" : "* Get the paragraph text.\n         *\n         * @return the text.",
  "org.apache.pdfbox.cos.COSDictionary:getNameAsString(java.lang.String,java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.contentstream.operator.text.NextLine:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.PDPage:hasContents()" : "* Returns true if this page has one or more content streams.\n     * \n     * @return true if the page has a non empty content stream, otherwise false",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType4:<init>(org.apache.pdfbox.cos.COSBase)" : "* Constructor.\n     *\n     * @param functionStream The function stream.\n     * @throws IOException if an I/O error occurs while reading the function",
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:setAfter(java.lang.String)" : "* This will set the javascript code the will get execute after the import.\n     *\n     * @param after A reference to some javascript code.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:removeObjectableKid(org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* Removes an objectable kid.\r\n     * \r\n     * @param objectable the objectable\r\n     * @return <code>true</code> if the kid was removed, <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:getFormattedValue(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDParentTreeValue:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:save(java.lang.String,org.apache.pdfbox.pdfwriter.compress.CompressParameters)" : "* Save the document to a file using the given compression.\n     * <p>\n     * Don't use the input file as target as this will produce a corrupted file.\n     * <p>\n     * If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)\n     * protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted.\n     * The same applies if your file was created from parts of another file and that\n     * one is to be used after saving.\n     * \n     * @param fileName The file to save as.\n     * @param compressParameters The parameters for the document's compression.\n     *\n     * @throws IOException if the output could not be written",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:setRight(int)" : "* Set the right x-coordinate, a value of -1 implies that the current x-coordinate\n     * will be used.\n     * @param x The right x coordinate.",
  "org.apache.pdfbox.pdmodel.PDStructureElementNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dic The COS dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:children()" : "* @return An {@link Iterable} view of the items children",
  "org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Sets the property list resource with the given name.\r\n     *\r\n     * @param name the name of the resource\r\n     * @param properties the property list to be added",
  "org.apache.pdfbox.contentstream.operator.state.SetLineCapStyle:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.font.PDMMType1Font:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates an MMType1Font from a Font dictionary in a PDF.\n     *\n     * @param fontDictionary font dictionary\n     * \n     * @throws IOException if the font could not be read",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:fill()" : "* Fills the path using the nonzero winding number rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getLegalAttestation()" : "* (Optional, PDF 1.6) An array of text strings that specifying possible legal\n     * attestations.\n     *\n     * @return the reasons that should be used by the signature handler",
  "org.apache.pdfbox.contentstream.operator.markedcontent.DrawObject:getName()" : null,
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:removeFont(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:toPaint(org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getArmStyle()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:toKeyValueList(java.util.List,java.util.List)" : "* Return two related lists as a single list with key value pairs.\n     * \n     * @param key the key elements\n     * @param value the value elements\n     * @return a sorted list of KeyValue elements.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setRolloverAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry)" : "* This will set a list of appearances. If you would like to set the single appearance then you should use the key\n     * \"default\", and when the PDF is written back to the filesystem then there will only be one stream.\n     *\n     * @param entry appearance stream or subdictionary",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:prepareAESInitializationVector(boolean,byte[],java.io.InputStream,java.io.OutputStream)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:getVertices()" : "* This will get the coordinates of the the vertices.\n     *\n     * @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:getRectDifference()" : "* This will get the rectangle difference rectangle. Giving the difference between the\n     * annotations rectangle and where the drawing occurs. (To take account of any effects applied\n     * through the BE entry for example)\n     *\n     * @return the rectangle difference",
  "org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:applyDifferences()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:setActions(org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions)" : "* Set the actions of the field.\n     * \n     * @param actions The field actions.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getStructureType()" : "* Returns the structure type (S).\n     * \n     * @return the structure type",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:computeParamsEllipse(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,double)" : "* Computes the alpha parameter for an ellipse curl.",
  "org.apache.pdfbox.pdmodel.common.PDStream:createInputStream(org.apache.pdfbox.filter.DecodeOptions)" : null,
  "org.apache.pdfbox.pdmodel.font.encoding.MacRomanEncoding:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setReadOnly(boolean)" : "* Set the readOnly flag.\n     * \n     * @param readOnly The new readOnly flag.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdfparser.COSParser:createRandomAccessReadView(long,long)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : "* Create the appearance entry for this annotation. Not having it may prevent display in some viewers. This method\n     * is for overriding in subclasses, the default implementation does nothing.\n     * \n     * @param document the related document",
  "org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup:apply()" : null,
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getLetterform()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:setValue(java.lang.String)" : "* Set the selected option given its name, and try to update the visual appearance.\n     * \n     * @param value Name of option to select\n     * @throws IOException if the value could not be set\n     * @throws IllegalArgumentException if the value is not a valid option.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The signature dictionary.",
  "org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setTextColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Set the RGB text color for this node.\n     *\n     * @param textColor The text color for this node.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     * \n     * @param fontDictionary the corresponding dictionary\n     * @throws IOException it something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getNeedAppearances()" : "* True if the viewing application should construct the appearances of all field widgets.\n     * The default value is false.\n     * \n     * @return the value of NeedAppearances, false if the value isn't set",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getStencilImage(java.awt.Paint)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:readTrueTypeFont(java.lang.String,java.io.File)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSound:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromFile(java.lang.String,org.apache.pdfbox.pdmodel.PDDocument)" : "* Create a PDImageXObject from an image file, see {@link #createFromFileByExtension(File, PDDocument)} for\r\n     * more details.\r\n     *\r\n     * @param imagePath the image file path.\r\n     * @param doc the document that shall use this PDImageXObject.\r\n     * @return a PDImageXObject.\r\n     * @throws IOException if there is an error when reading the file or creating the\r\n     * PDImageXObject, or if the image type is not supported.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:isValidAppearanceStream(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry)" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toRGB(float[])" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setNormalAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* This will set the normal appearance when there is only one appearance to be shown.\n     *\n     * @param ap The appearance stream to show.",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:handleAnnotations(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.pdmodel.PDResources,java.util.List,java.util.List,java.util.Map)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getRectDifference()" : "* This will get the rectangle difference rectangle. Giving the difference between the\n     * annotations rectangle and where the drawing occurs. (To take account of any effects applied\n     * through the BE entry for example)\n     *\n     * @return the rectangle difference",
  "org.apache.pdfbox.text.TextPosition:getWidth()" : "* This will get the width of the string when page rotation adjusted coordinates are used.\n     *\n     * @return The width of the text in display units.",
  "org.apache.pdfbox.cos.COSDocument:setStartXref(long)" : "* This method set the startxref value of the document. This will only \n     * be needed for incremental updates.\n     * \n     * @param startXrefValue the value for startXref",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:addElements(java.util.Iterator)" : null,
  "org.apache.pdfbox.multipdf.Overlay:loadPDF(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSBase)" : "* Constructor. Reads all data from the input stream and embeds it into the document with the\n     * given filters applied, if any. This method closes the InputStream.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Set a marked content point with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:getDiskCacheFile()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:setGamma(float)" : "* Set the gamma value.\n     *\n     * @param value The new gamma value.",
  "org.apache.pdfbox.cos.COSUpdateState:getOriginDocumentState()" : "* <p>\n     * Returns the {@link #originDocumentState}, that is linked to the managed {@link #updateInfo}.\n     * </p>\n     * <p>\n     * {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are\n     * allowed.\n     * </p>\n     * <p>\n     * As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates.\n     * </p>\n     *\n     * @return The {@link COSDocumentState} linked to this {@link COSUpdateState}.\n     * @see #setOriginDocumentState(COSDocumentState)",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setAppearanceDictionary(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary)" : "* This will set the appearance dictionary.\n     *\n     * @param ap The appearance dictionary.",
  "org.apache.pdfbox.rendering.TilingPaint:ceiling(double)" : "* Returns the closest integer which is larger than the given number.\n     * Uses BigDecimal to avoid floating point error which would cause gaps in the tiling.",
  "org.apache.pdfbox.cos.COSStream:getFilters()" : "* This will return the filters to apply to the byte stream.\n     * The method will return\n     * <ul>\n     * <li>null if no filters are to be applied\n     * <li>a COSName if one filter is to be applied\n     * <li>a COSArray containing COSNames if multiple filters are to be applied\n     * </ul>\n     *\n     * @return the COSBase object representing the filters",
  "org.apache.pdfbox.pdfwriter.compress.CompressParameters:getObjectStreamSize()" : "* Returns the number of objects, that can be contained in compressed object streams. Higher object stream sizes may\n     * cause PDF readers to slow down during the rendering of PDF documents, therefore a reasonable value should be\n     * selected.\n     *\n     * @return The number of objects, that can be contained in compressed object streams.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:isSpecified(java.lang.String)" : "* Is the attribute with the given name specified in this attribute object?\n     * \n     * @param name the attribute name\n     * @return <code>true</code> if the attribute is specified,\n     * <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.font.CMapManager:<init>()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getPropertiesNames()" : "* Returns the names of the property list resources, if any.\r\n     * \r\n     * @return an iterable containing all names of available property lists",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:getRole()" : "* Gets the role.\n     * \n     * @return the role",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a Line annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.text.TextPosition:hashCode()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getDefaultValue()" : "* Returns the default values, or an empty List. This list always contains a single item\n     * unless {@link #isMultiSelect()} is true.\n     *\n     * @return A non-null string.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setXFA(org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource)" : "* Set the XFA resource, this is only used for PDF 1.5+ forms.\n     *\n     * @param xfa The xfa resource.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:lineTo(java.awt.geom.Point2D$Double)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:getCOSObject()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:setXORMode(java.awt.Color)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:applyTransferFunction(java.awt.image.BufferedImage,org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:notifyChanged()" : "* Notifies the attribute object change listeners about a change in this\n     * attribute object.",
  "org.apache.pdfbox.contentstream.operator.text.SetTextRise:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.font.CMapManager:getPredefinedCMap(java.lang.String)" : "* Fetches the predefined CMap from disk (or cache).\r\n     *\r\n     * @param cMapName CMap name\r\n     * @return The predefined CMap, never null.\r\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setNoZoom(boolean)" : "* Set the noZoom flag.\n     *\n     * @param noZoom The new noZoom flag.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:isCFFFile(byte[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getBl()" : "* This will get an action to be performed when the annotation\n     * loses the input focus.\n     * The name Bl stands for \"blurred\".\n     *\n     * @return The Bl entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.cos.COSDictionary:getCOSDictionary(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is\n     * returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The COSDictionary.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:createChoiceSubType(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:addLast(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* Adds the given node to the bottom of the children list.\n     *\n     * @param newChild The node to add.\n     * @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next\n     * sibling)",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getPage()" : "* Returns document page.\n     * @return the page",
  "org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:getBaseEncoding()" : "* Returns the base encoding. Will be null for Type 3 fonts.\n     * \n     * @return the base encoding or null",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setValue(java.lang.String)" : "* Set the selected value of this field, and try to update the visual appearance.\n     *\n     * @param value The name of the selected item.\n     * @throws IOException if the value could not be set",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getStartColour()" : "* Gets the colour for the start edge.\n     * \n     * @return the colour for the start edge",
  "org.apache.pdfbox.cos.COSDictionary:getDate(java.lang.String,java.util.Calendar)" : "* This is a convenience method that will get the dictionary object that is expected to be a date.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid.\n     * @return The name converted to a date.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:clip()" : "* Intersects the current clipping path with the current path, using the nonzero rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.cos.COSNull:<init>()" : "* Constructor.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processPage(org.apache.pdfbox.pdmodel.PDPage)" : "* This will initialize and process the contents of the stream.\n     *\n     * @param page the page to process\n     * @throws IOException if there is an error accessing the stream",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:constructAppearances()" : null,
  "org.apache.pdfbox.filter.FilterFactory:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineCapStyle(int)" : "* Set the line cap style.\n     *\n     * @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line cap style.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setIDTree(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)" : "* Sets the ID tree.\n     * \n     * @param idTree the ID tree",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getSynchronous()" : "* Gets the synchronous flag. It specifyes whether to play the sound synchronously or\n     * asynchronously. When true, the reader allows no further user interaction other than canceling\n     * the sound until the sound has been completely played.\n     *\n     * @return Whether to play the sound synchronously (true) or asynchronously (false, also the\n     * default).",
  "org.apache.pdfbox.text.PDFTextStripper:writePageStart()" : "* Write something (if defined) at the start of a page.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.font.encoding.MacRomanEncoding:getEncodingName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAcroForm(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* Sets AcroForm\n     * \n     * @param acroForm the acro form to be used for the signature",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:beginMarkedContentSequence(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)" : "* Called when a marked content group begins\n     *\n     * @param tag indicates the role or significance of the sequence\n     * @param properties optional properties",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getGraphicsStackSize()" : "* @return Returns the size of the graphicsStack.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setInvisible(boolean)" : "* Set the invisible flag.\n     *\n     * @param invisible The new invisible flag.",
  "org.apache.pdfbox.pdmodel.PDPage:setMediaBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the mediaBox for this page.\n     * \n     * @param mediaBox The new mediaBox for this page.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:intersectClippingPath(java.awt.geom.Path2D,boolean)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getBorderEffect()" : "* This will retrieve the border effect dictionary, specifying effects to be applied used in\n     * drawing the line.\n     *\n     * @return The border effect dictionary",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextDecorationThickness(int)" : "* Sets the thickness of each line drawn as part of the text decoration\n     * (TextDecorationThickness).\n     * \n     * @param textDecorationThickness the text decoration thickness",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:generateBoundingBox()" : null,
  "org.apache.pdfbox.rendering.PDFRenderer:createDefaultRenderingHints(java.awt.Graphics2D)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:getFieldType()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:getBRange()" : "* This will get the valid range for the \"b\" component.\n     * If none is found  then the default will be returned, which is -100..100.\n     * @return the \"b\" range.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.cos.COSStream$1:close()" : "* {@inheritDoc}\n     *\n     * Called by PDFBox when the PDDocument is closed, this closes the stream and removes the data. You will usually not\n     * need this.\n     *\n     * @throws IOException if something went wrong when closing the stream",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new TrueType font from a Font dictionary.\n     *\n     * @param fontDictionary The font dictionary according to the PDF specification.\n     * \n     * @throws IOException if the font could not be created",
  "org.apache.pdfbox.pdmodel.PDDocument:importPage(org.apache.pdfbox.pdmodel.PDPage)" : "* This will import and copy the contents from another location. Currently the content stream is\n     * stored in a scratch file. The scratch file is associated with the document. If you are adding\n     * a page to this document from another document and want to copy the contents to this\n     * document's scratch file then use this method otherwise just use the {@link #addPage addPage()}\n     * method.\n     * <p>\n     * Unlike {@link #addPage addPage()}, this method creates a new PDPage object. If your page has\n     * annotations, and if these link to pages not in the target document, then the target document\n     * might become huge. What you need to do is to delete page references of such annotations. See\n     * <a href=\"http://stackoverflow.com/a/35477351/535646\">here</a> for how to do this.\n     * <p>\n     * Inherited (global) resources are ignored because these can contain resources not needed for\n     * this page which could bloat your document, see\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-28\">PDFBOX-28</a> and related issues.\n     * If you need them, call <code>importedPage.setResources(page.getResources());</code>\n     * <p>\n     * This method should only be used to import a page from a loaded document, not from a generated\n     * document because these can contain unfinished parts, e.g. font subsetting information.\n     *\n     * @param page The page to import.\n     * @return The page that was imported.\n     *\n     * @throws IOException If there is an error copying the page.",
  "org.apache.pdfbox.cos.COSArray:setInt(int,int)" : "* Set the value in the array as an integer.\n     *\n     * @param index The index into the array.\n     * @param value The value to set.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getViewArea()" : "* Get the ViewArea preference.  See BOUNDARY enumeration.\n     *\n     * @return the ViewArea preference.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:<init>(float,float,float,float)" : "* Constructor.\n     *\n     * @param x the x coordinate of the rectangle\n     * @param y the y coordinate of the rectangle\n     * @param width The width of the rectangle.\n     * @param height The height of the rectangle.",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:toUnicode(java.lang.String)" : "* Returns the Unicode character sequence for the given glyph name, or null if there isn't any.\r\n     *\r\n     * @param name PostScript glyph name\r\n     * @return Unicode character(s), or null.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getC()" : "* This will get a JavaScript action to be performed in order to recalculate\n     * the value of this field when that of another field changes. The order in which\n     * the document's fields are recalculated is defined by the CO entry in the\n     * interactive form dictionary.\n     * The name C stands for \"calculate\".\n     *\n     * @return The C entry of form field's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:setDefaultAppearanceString(java.lang.String)" : "* This will set the default appearance string.\n     *\n     * @param da The default appearance string.",
  "org.apache.pdfbox.cos.COSUpdateState:isAcceptingUpdates()" : "* Returns {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()}\n     * and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}.\n     *\n     * @return {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()}\n     * and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}.\n     * @see #originDocumentState\n     * @see COSDocumentState#isAcceptingUpdates()",
  "org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:getCOSObject()" : "* returns the dictionary.\n     *\n     * @return the dictionary",
  "org.apache.pdfbox.cos.COSDictionary:getInt(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if\n     * there is no value.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The integer value..",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getContents()" : "* Returns the /Contents string as a byte array, i.e. the embedded signature between the\n     * byterange gap.\n     *\n     * @return a byte array containing the signature, or an empty array if there isn't any.",
  "org.apache.pdfbox.rendering.TilingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : "* Not called in TexturePaint subclasses, which is why we wrap TexturePaint.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getCOSValue()" : "* Returns the COS value of this field.\n     *\n     * @return The COS value of the field, maybe <code>null</code>.\n     * @throws IOException If there is an error getting the value.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:toString()" : null,
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node:toString()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:getParagraphEnd()" : "* Returns the string which will be used at the end of a paragraph.\n     * \n     * @return the paragraph end string",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getFormType()" : "* This will get the form type, currently 1 is the only form type.\n     * @return The form type.",
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:setGuidelineStyle(java.lang.String)" : "* Set the style for the box.\n     *\n     * @param style The style for the box line.\n     * @see PDBoxStyle#GUIDELINE_STYLE_DASHED\n     * @see PDBoxStyle#GUIDELINE_STYLE_SOLID",
  "org.apache.pdfbox.pdmodel.PDDocument:getPage(int)" : "* Returns the page at the given 0-based index.\n     * <p>\n     * This method is too slow to get all the pages from a large PDF document\n     * (1000 pages or more). For such documents, use the iterator of\n     * {@link PDDocument#getPages()} instead.\n     *\n     * @param pageIndex the 0-based page index\n     * @return the page at the given index.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getHeight(int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:getName()" : "* This will get the name of the referenced page. A required parameter.\n     *\n     * @return The name of the referenced page.",
  "org.apache.pdfbox.filter.DecodeOptions:getSubsamplingOffsetY()" : "* When decoding an image, the vertical offset for subsampling\n     *\n     * @return The y-axis subsampling offset",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:setTintTransform(org.apache.pdfbox.pdmodel.common.function.PDFunction)" : "* Sets the tint transform function.\n     * @param tint the tint transform function",
  "org.apache.pdfbox.cos.COSArray:toCOSNameStringList()" : "* This will return a list of names if the COSArray consists of COSNames only.\n     * \n     * @return the list of names of the COSArray of COSNames",
  "org.apache.pdfbox.printing.PDFPrintable:setRenderingHints(java.awt.RenderingHints)" : "* Set the rendering hints. Use this to influence rendering quality and speed. If you don't set them yourself or\n     * pass null, PDFBox will decide <b><u>at runtime</u></b> depending on the destination.\n     *\n     * @param renderingHints rendering hints to be used to influence rendering quality and speed",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : "* Set an extended graphics state.\n     * \n     * @param state The extended graphics state to be added to the content stream\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:prepareEncryptionDictAES(org.apache.pdfbox.pdmodel.encryption.PDEncryption,org.apache.pdfbox.cos.COSName,byte[][])" : null,
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:get255Value(float)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:stroke()" : "* Stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates an empty page label dictionary for the given document.\n     * \n     * <p>\n     * Note that the page label dictionary won't be automatically added to the\n     * document; you will still need to do it manually (see\n     * {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}.\n     * </p>\n     * \n     * @param document\n     *            The document the page label dictionary is created for.\n     * @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)",
  "org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:remove()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:calculateMatrix(org.apache.pdfbox.pdmodel.common.PDRectangle,int)" : null,
  "org.apache.pdfbox.pdfparser.PDFStreamParser:parse()" : "* This will parse all the tokens in the stream. This will close the stream when it is finished parsing.\n     *\n     * @return All of the tokens in the stream.\n     * @throws IOException If there is an error while parsing the stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getProcSet()" : "* Gets ProcSet Array\n     * @return the PorocSet array",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:setSubType(java.lang.String)" : "* This will set the type of action that the actions dictionary describes.\n     *\n     * @param s The new type of action.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCacheCreateImpl:create()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isLegalAttestationRequired()" : "*\n    * @return true if the LegalAttestation is required",
  "org.apache.pdfbox.pdmodel.PDDocument:<init>(org.apache.pdfbox.cos.COSDocument)" : "* Constructor that uses an existing document. The COSDocument that is passed in must be valid.\n     * \n     * @param doc The COSDocument that this document wraps.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:createCloudyEllipse(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Creates a cloudy border for a Circle annotation.\n     * The ellipse is specified by the <code>RD</code> entry and the\n     * <code>Rect</code> entry that was passed in to the constructor.\n     *\n     * @param rd entry <code>RD</code>, or null if the entry does not exist\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getCurrentClippingPaths()" : "* This will get the current clipping path, as one or more individual paths. Do not modify the list or the paths!\n     *\n     * @return The current clipping paths.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:getFirstTrailer()" : "* Returns the first trailer if at least one exists.\r\n     * \r\n     * @return the first trailer or null",
  "org.apache.pdfbox.pdfparser.XrefParser:parseXrefTable(long)" : "* This will parse the xref table from the stream and add it to the state\n     * The XrefTable contents are ignored.\n     * @param startByteOffset the offset to start at\n     * @return false on parsing error\n     * @throws IOException If an IO error occurs.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setNonEFontNoWarn(boolean)" : "* If true, the reader should not display a warning about fonts not being embedded.\n     *\n     * @param noEmbedFontWarning true if there is a Legal dictionary in the catalog and the\n     * NonEmbeddedFonts attribute has a non-zero value\n     *\n     * Documentation says: (Optional; PDF 1.5) If there is a LegalPDF dictionary in the catalog of\n     * the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and\n     * the viewing application has a preference set to suppress the display of this warning then the\n     * value of this attribute will be set to true.\n     *\n     * @see\n     * <a href=\"https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/Acrobat_Signature_BuildDict.pdf#page=6\">Digital\n     * Signature Build Dictionary Specification</a>\n     * @see #getNonEFontNoWarn()\n     * @see COSName#NON_EFONT_NO_WARN",
  "org.apache.pdfbox.cos.COSArray:clear()" : "* This will remove all of the objects in the collection.",
  "org.apache.pdfbox.contentstream.operator.state.Concatenate:getName()" : null,
  "org.apache.pdfbox.pdfparser.BaseParser:isDigit()" : "* This will tell if the next byte is a digit or not.\n     *\n     * @return true if the next byte in the stream is a digit.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setMiterLimit(float)" : "* set the value of the miter limit.\n     *\n     * @param value The current miter limit.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:<init>()" : "* creates a new empty crypt filter dictionary.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getProvider()" : "* Returns the font service provider. Defaults to using FileSystemFontProvider.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getCurrentPage()" : "* Returns the current page.\n     * \n     * @return the current page",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(float,float,float)" : "* Set the stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.PDPageTree:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)" : "* Draw an image at the x,y coordinates, with the given size.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     * @param width The width to draw the image.\n     * @param height The height to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:values()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:getName()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setBorderStyle(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)" : "* This will set the border style dictionary, specifying the width and dash pattern used in drawing the annotation.\n     *\n     * @param bs the border style dictionary to set.\n     *",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getBounds()" : "* Returns all bounds values as COSArray.\n     * \n     * @return the bounds array.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:setOperation(java.lang.String)" : "* Set the operation to perform..\n     *\n     * @param op The operation to perform on the file.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:getStyle()" : "* Returns the numbering style for this page range.\n     * \n     * @return one of the STYLE_* constants",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(float)" : "* Set the stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.filter.DecodeResult:createDefault()" : "* Return a default DecodeResult.\n     *\n     * @return a default instance of DecodeResult",
  "org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSArray)" : "* Creates a new DictionaryEncoding for embedding.\n     *\n     * @param baseEncoding the base encoding of this encoding\n     * @param differences the differences of this encoding with regard to the base encoding",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getColSpan()" : "* Gets the number of columns in the enclosing table that shall be spanned\n     * by the cell (ColSpan). The default value is 1.\n     * \n     * @return the column span",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:addAll(java.util.Collection)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.rendering.PDFRenderer:renderImage(int,float)" : "* Returns the given page as an RGB image at the given scale.\r\n     * A scale of 1 will render at 72 DPI.\r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param scale the scaling factor, where 1 = 72 DPI\r\n     * @return the rendered page image\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:willBeSubset()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:encode(java.lang.String)" : "* Encodes the given string for use in a PDF content stream.\n     *\n     * @param text Any Unicode text.\n     * @return Array of PDF content stream bytes.\n     * @throws IOException If the text could not be encoded.\n     * @throws IllegalArgumentException if a character isn't supported by the font.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setWidgetFieldFlags(int)" : "* This will set the field flags that are associated with this field.\n     * The 'F' entry in the FDF field dictionary.\n     *\n     * @param f The new value for the field flags.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setPermissionBit(int,boolean)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a popup annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setFlatness(double)" : "* set the value of the flatness property.\n     *\n     * @param value The value of the flatness parameter.",
  "org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule:getName()" : null,
  "org.apache.pdfbox.pdmodel.PDPage:getArtBox()" : "* A rectangle, expressed in default user space units, defining the extent of the page's\n     * meaningful content (including potential white space) as intended by the page's creator The\n     * default is the CropBox.\n     * \n     * @return The ArtBox attribute.",
  "org.apache.pdfbox.util.Matrix:transform(org.apache.pdfbox.util.Vector)" : "* Transforms the given vector by this matrix.\n     *\n     * @param vector 2D vector\n     *\n     * @return the transformed vector.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setStartIndent(int)" : "* Sets the distance from the start edge of the reference area to that of\n     * the BLSE in the inline-progression direction (StartIndent).\n     * \n     * @param startIndent the start indent",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:removeColorSpace(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getCOSObject()" : "* This will get the underlying dictionary that this object wraps.\n     *\n     * @return The underlying info dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getDimension()" : "* @return The dimension in which the specified transition effect shall occur or the default\n     * {@link PDTransitionDimension#H} if no dimension is found.\n     * @see PDTransitionDimension",
  "org.apache.pdfbox.text.PDFTextStripper$LineItem:<init>(org.apache.pdfbox.text.TextPosition)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getWritingMode()" : "* Gets the writing mode (WritingMode). The default value is\n     * {@link #WRITING_MODE_LRTB}.\n     * \n     * @return the writing mode",
  "org.apache.pdfbox.text.PDFTextStripper:getIndentThreshold()" : "* returns the multiple of whitespace character widths for the current text which the current line start can be\n     * indented from the previous line start beyond which the current line start is considered to be a paragraph start.\n     * \n     * @return the number of whitespace character widths to use when detecting paragraph indents.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:curveTo1(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.multipdf.Splitter:processResources(org.apache.pdfbox.pdmodel.PDResources,java.util.Map,java.util.Map,java.util.Set)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:setDefaultValue(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)" : "* Sets the default value of this field to be the given signature.\n     *\n     * @param value is the PDSignatureField",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getAcroForm()" : "* Gets AcroForm\n     * @return the AcroForm",
  "org.apache.pdfbox.pdmodel.common.PDStream:setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata)" : "* Set the metadata for this object. This can be null.\n     * \n     * @param meta The meta data for this object.",
  "org.apache.pdfbox.text.PDFTextStripper:setLineSeparator(java.lang.String)" : "* Set the desired line separator for output text. The line.separator system property is used if the line separator\n     * preference is not set explicitly using this method.\n     *\n     * @param separator The desired line separator string.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getOutputCondition()" : null,
  "org.apache.pdfbox.contentstream.operator.markedcontent.EndMarkedContentSequence:getName()" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSInteger(java.io.OutputStream,org.apache.pdfbox.cos.COSInteger)" : "* Write the given {@link COSInteger} to the given stream.\n     *\n     * @param output The stream, that shall be written to.\n     * @param cosInteger The content, that shall be written.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setUnits(java.lang.String)" : "* This will set the label for the units.\r\n     * \r\n     * @param units the label for the units",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setV(float)" : "* (Optional) The minimum required capability of the signature field seed value\n     * dictionary parser. A value of 1 specifies that the parser shall be able to\n     * recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2\n     * specifies that it shall be able to recognize all seed value dictionary entries\n     * specified.\n     *\n     * @param minimumRequiredCapability is the minimum required capability of the\n     * signature field seed value dictionary parser",
  "org.apache.pdfbox.contentstream.operator.text.SetWordSpacing:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:getType()" : "* This will return the paint type.\n     * @return The type of object that this is.",
  "org.apache.pdfbox.multipdf.LayerUtility:importPageAsForm(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage)" : "* Imports a page from some PDF file as a Form XObject so it can be placed on another page\n     * in the target document.\n     * <p>\n     * You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to\n     * make sure that the graphics state is reset.\n     * \n     * @param sourceDoc the source PDF document that contains the page to be copied\n     * @param page the page in the source PDF document to be copied\n     * @return a Form XObject containing the original page's content\n     * @throws IOException if an I/O error occurs",
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:setDirectory(java.lang.String)" : "* Set the dir to launch from.\n     *\n     * @param dir The dir of the executable/document to launch.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:buildImageObject(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)" : "* Build the base image object from the IDATs and profile information",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The certificate seed value dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:setF(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* Set the F action.\n     *\n     * @param action Get the F action.",
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:setExtends(org.apache.pdfbox.pdmodel.common.PDObjectStream)" : "* A reference to an object stream, of which the current object stream is\n     * considered an extension.\n     *\n     * @param stream The object stream extension.",
  "org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:getLeading()" : "* Get the leading used for text formatting.\n     * \n     * @return the leading used for text formatting.",
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:from1Bit(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.Rectangle,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getColorSpace()" : "* This will get the color space or null if none exists.\n     *\n     * @return the color space for the shading\n     * @throws IOException if there is an error getting the color space",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:<init>(java.lang.Class)" : "* Constructor.\n     *\n     * @param valueClass The PD Model type of object that is the value.",
  "org.apache.pdfbox.util.DateConverter:parseDate(java.lang.String,java.text.ParsePosition)" : null,
  "org.apache.pdfbox.cos.COSArray:addAll(org.apache.pdfbox.cos.COSArray)" : "* This will add all objects to this array.\n     *\n     * @param objectList The list of objects to add.",
  "org.apache.pdfbox.contentstream.operator.state.Restore:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:removeZeroLengthSegments(java.awt.geom.Point2D$Double[])" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the non-stroking color and, if necessary, the non-stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:isStream()" : "* Returns true if this entry is an appearance stream.\n     * \n     * @return true if this entry is an appearance stream",
  "org.apache.pdfbox.pdmodel.font.encoding.Encoding:contains(java.lang.String)" : "* Determines if the encoding has a mapping for the given name value.\n     * \n     * @param name PostScript glyph name\n     * @return true if the encoding has a mapping for the given name value",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)" : "* Set the font and font size to draw text with.\n     *\n     * @param font The font to use.\n     * @param fontSize The font size to draw the text.\n     * @throws IOException If there is an error writing the font information.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isCombo()" : "* Determines if Combo is set.\n     * \n     * @return true if value the choice is a combo box..",
  "org.apache.pdfbox.util.NumberFormatUtil:formatPositiveNumber(long,int,boolean,byte[],int)" : "* Formats a positive integer number starting with the digit at {@code 10^exp}.\n     *\n     * @param number The number to format\n     * @param exp The start digit\n     * @param omitTrailingZeros Whether the formatting should stop if only trailing zeros are left.\n     * This is needed e.g. when formatting fractions of a number.\n     * @param asciiBuffer The buffer to write the ASCII digits to\n     * @param startOffset The start offset into the buffer to start writing\n     *\n     * @return The offset into the buffer which contains the first byte that was not filled by the\n     * method",
  "org.apache.pdfbox.text.TextPosition:getFontSize()" : "* This will get the font size that has been set with the \"Tf\" operator (Set text font and\n     * size). When the text is rendered, it may appear bigger or smaller depending on the current\n     * transformation matrix (set by the \"cm\" operator) and the text matrix (set by the \"Tm\"\n     * operator).\n     *\n     * @return The font size.",
  "org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.cos.COSArray:getInt(int,int)" : "* Get the value of the array as an integer, return the default if it does not exist.\n     *\n     * @param index The value of the array.\n     * @param defaultValue The value to return if the value is null.\n     * @return The value at the index or the defaultValue.",
  "org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:isDataEmpty()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:setExecuteParam(java.lang.String)" : "* Set the parameter to pass the executable.\n     *\n     * @param param The parameter for the executable.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.cos.COSIncrement:<init>(org.apache.pdfbox.cos.COSUpdateInfo)" : "* Creates a new {@link COSIncrement} for the given {@link COSUpdateInfo}, the increment will use it´s\n     * {@link COSDocumentState} as it´s own origin and shall collect all updates contained in the given\n     * {@link COSUpdateInfo}.<br>\n     * Should the given object be {@code null}, the resulting increment shall be empty.\n     *\n     * @param incrementOrigin The {@link COSUpdateInfo} serving as an update source for this {@link COSIncrement}.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:addSource(java.lang.String)" : "* Add a source file to the list of files to merge.\n     *\n     * @param source Full path and file name of source document.\n     * \n     * @throws FileNotFoundException If the file doesn't exist",
  "org.apache.pdfbox.cos.COSStream:getStreamCache()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getField(java.lang.String)" : "* This will get a field by name, possibly using the cache if setCache is true.\n     *\n     * @param fullyQualifiedName The name of the field to get.\n     * @return The field with that name of null if one was not found.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:createFromRGBImage(java.awt.image.BufferedImage,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:getDisplacement(int)" : "* Returns the displacement vector (w0, w1) in text space, for the given character. For horizontal text only the x\n     * component is used, for vertical text only the y component.\n     *\n     * @param code character code\n     * @return displacement vector\n     * @throws IOException if the data could not be read",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeEncryptedKeyRev56(byte[],boolean,byte[],byte[],byte[],byte[],int)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decryptStream(org.apache.pdfbox.cos.COSStream,long,long)" : "* This will decrypt a stream.\n     *\n     * @param stream The stream to decrypt.\n     * @param objNum The object number.\n     * @param genNum The object generation number.\n     *\n     * @throws IOException If there is an error getting the stream data.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor from an existing destination array.\n     *\n     * @param arr The destination array.",
  "org.apache.pdfbox.contentstream.operator.graphics.ClipNonZeroRule:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setAfterColour(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the colour for the after edge.\n     * \n     * @param colour the colour for the after edge",
  "org.apache.pdfbox.pdfparser.PDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Constructor.\n     * \n     * @param source input representing the pdf.\n     * @param decryptionPassword password to be used for decryption.\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param alias alias to be used for decryption when using public key security\n     * @param streamCacheCreateFunction a function to create an instance of the stream cache\n     *\n     * @throws IOException If something went wrong.",
  "org.apache.pdfbox.pdmodel.PDDocument:save(java.io.File)" : "* Save the document to a file using default compression.\n     * <p>\n     * Don't use the input file as target as this will produce a corrupted file.\n     * <p>\n     * If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)\n     * protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted.\n     * The same applies if your file was created from parts of another file and that\n     * one is to be used after saving.\n     * \n     * @param file The file to save as.\n     *\n     * @throws IOException if the output could not be written",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : "* Fills the clipping area with the given shading.\n     *\n     * @param shading Shading resource\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getCaptionHorizontalOffset()" : "* This will retrieve the horizontal offset of the caption.\n     * \n     * @return the horizontal offset of the caption",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a Form Image XObject for writing, in the given document.\n     * @param document The current document",
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getBlendChannelFunction()" : "* Returns the blend channel function, only available for separable blend modes.\r\n     * \r\n     * @return the blend channel function",
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getName()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:buildFontDescriptor(org.apache.fontbox.type1.Type1Font)" : "* Returns a PDFontDescriptor for the given PFB.\r\n     * \r\n     * @throws IOException if the font bounding box isn't available",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:endText()" : "* End some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest endText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.cos.COSDictionary:removeItem(org.apache.pdfbox.cos.COSName)" : "* This will remove an item for the dictionary. This will do nothing of the object does not exist.\n     *\n     * @param key The key to the item to remove from the dictionary.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:setRangeValues(org.apache.pdfbox.cos.COSArray)" : "* This will set the range values.\n     *\n     * @param rangeValues The new range values.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:isFD()" : "* This will return the value indication if the denominator of the fractional value is reduced/truncated .\r\n     * \r\n     * @return fd",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getHorizontalScaling()" : "* Get the value of the horizontalScaling.  The default is 100.  This value\n     * is the percentage value 0-100 and not 0-1.  So for mathematical operations\n     * you will probably need to divide by 100 first.\n     *\n     * @return The horizontalScaling.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setPaddings(float[])" : "* Sets the paddings for four sides separately (Padding).\n     * \n     * @param paddings the paddings (an array of four floats)",
  "org.apache.pdfbox.pdmodel.PDDocument:save(java.io.OutputStream)" : "* This will save the document to an output stream.\n     * <p>\n     * Don't use the input file as target as this will produce a corrupted file.\n     * <p>\n     * If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)\n     * protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted.\n     * The same applies if your file was created from parts of another file and that\n     * one is to be used after saving.\n     *\n     * @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream},\n     * unless it is already buffered.\n     *\n     * @throws IOException if the output could not be written",
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getBBox()" : null,
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:setNumberOfObjects(int)" : "* Set the number of objects.\n     *\n     * @param n The new number of objects.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:insertGeneratedListboxAppearance(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,org.apache.pdfbox.pdmodel.common.PDRectangle,org.apache.pdfbox.pdmodel.font.PDFont,float)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.StrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getColumnCount()" : "* Gets the number of columns in the content of the grouping element\n     * (ColumnCount). The default value is 1.\n     * \n     * @return the column count",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setNonStrokingAlphaConstant(java.lang.Float)" : "* This will set the non stroking alpha constant.\n     *\n     * @param alpha The new non stroking alpha constant.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:encode(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getCOSObject()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new instance based on a given {@link COSDictionary}.\n     * @param props the dictionary",
  "org.apache.pdfbox.text.PDFTextStripperByArea:processTextPosition(org.apache.pdfbox.text.TextPosition)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:clipToRange(float,float,float)" : "* Clip the given input value to the given range.\n     * \n     * @param x the input value\n     * @param rangeMin the min value of the range\n     * @param rangeMax the max value of the range\n\n     * @return the clipped value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getRectDifferences()" : "* This will get the margin between the annotations \"outer\" rectangle defined by\n     * /Rect and the border.\n     * \n     * @return the differences. If the entry hasn't been set am empty array is returned.",
  "org.apache.pdfbox.text.TextPosition:setUnicode(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isHidden()" : "* Get the hidden flag.\n     * \n     * @return The hidden flag.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:hasGlyph(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(float,float,float,float)" : "* Set the stroking color in the DeviceCMYK color space. Range is 0..1\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionTypeIdentity:<init>(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteHeader(org.apache.pdfbox.cos.COSDocument)" : "* This will write the header to the PDF document.\n     *\n     * @param doc The document to get the data from.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,int)" : "* Constructor.\n     *\n     * @param document Already created PDDocument of your PDF document.\n     * @param image the image to be used for the visible signature\n     * @param page The 1-based page number for which the page size should be calculated.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getHeight(int)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Round:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.text.PDFTextStripper$LineItem:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getLineDashPattern()" : "* This will get the current line dash pattern.\n     *\n     * @return The line dash pattern.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFixedPitch(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getTargetDirectory()" : "* Get the target directory. If this entry is absent, the current document is the target file\n     * containing the destination.\n     *\n     * @return the target directory or null if the current document is the target file containing\n     * the destination.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:buildPagesWidgetsMap(java.util.List,org.apache.pdfbox.pdmodel.PDPageTree)" : "* Build a map of page => set of widgets to be flattened\n     *\n     * @param fields a list of fields to be flattened\n     * @param pages the page tree\n     * @return\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:setTemplateReference(org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference)" : "* This will set the template reference.\n     *\n     * @param tRef The template reference.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:<init>(float[],org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Creates a PDColor containing the given color component values and pattern name.\r\n     * @param components array of color component values\r\n     * @param patternName the name of a pattern in a pattern dictionary\r\n     * @param colorSpace color space in which the pattern/components are defined",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:removeXObject(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:getParent()" : "* This will retrieve the markup annotation which this popup relates to.\n     *\n     * @return The parent markup annotation.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getVersion()" : "* Returns the PDF specification version this document conforms to.\n     *\n     * @return the PDF version (e.g. \"1.4\")",
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:isRequired()" : "* @return true if the field is required to have a value at the time it is exported by a\n     * submit-form action.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getNameInFont(java.lang.String)" : "* Maps a PostScript glyph name to the name in the underlying font, for example when\n     * using a TTF font we might map \"W\" to \"uni0057\".",
  "org.apache.pdfbox.filter.JBIG2Filter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int,org.apache.pdfbox.filter.DecodeOptions)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:hasExplicitWidth(int)" : null,
  "org.apache.pdfbox.util.Version:getVersion()" : "* Returns the version of PDFBox.\r\n     * \r\n     * @return the version of PDFBox",
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getDefaultValue()" : "* Returns the default value, if any.\n     *\n     * @return A signature dictionary.",
  "org.apache.pdfbox.cos.COSDictionary:getEmbeddedDate(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,java.util.Calendar)" : "* This is a convenience method that will get the dictionary object that is expected to be a date.\n     *\n     * @param embedded The embedded dictionary to get.\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was\n     * invalid.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.filter.DecodeOptions:<init>(java.awt.Rectangle)" : "* Constructs an instance specifying the region of the image that should be decoded. The actual\n     * region will be clipped to the dimensions of the image.\n     *\n     * @param sourceRegion Region of the source image that should be decoded",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:setUserProperties(boolean)" : "* Set if the structure elements contain user properties.\n     *\n     * @param userProps The new value for this property.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:setColorantNames(java.util.List)" : "* Sets the list of colorants\n     * @param names the list of colorants",
  "org.apache.pdfbox.cos.COSDictionary:setFloat(org.apache.pdfbox.cos.COSName,float)" : "* This is a convenience method that will convert the value to a COSFloat object.\n     *\n     * @param key The key to the object,\n     * @param value The int value for the name.",
  "org.apache.pdfbox.filter.ASCII85InputStream:reset()" : "* Unsupported.\n     *\n     * @throws IOException telling that this is an unsupported action.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isOwnerPassword(java.lang.String,byte[],byte[],int,byte[],int,int,boolean)" : "* Check for owner password.\n     *\n     * @param password The owner password.\n     * @param user The u entry of the encryption dictionary.\n     * @param owner The o entry of the encryption dictionary.\n     * @param permissions The set of permissions on the document.\n     * @param id The document id.\n     * @param encRevision The encryption algorithm revision.\n     * @param keyLengthInBytes The encryption key length in bytes.\n     * @param encryptMetadata The encryption metadata\n     *\n     * @return True If the ownerPassword param is the owner password.\n     *\n     * @throws IOException If there is an error accessing data.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:setOCGs(java.util.List)" : "* Set optional content groups as a list.\n     * \n     * @param ocgs list of optional content groups to set.",
  "org.apache.pdfbox.cos.COSArray:<init>(java.util.List)" : "* Use the given list to initialize the COSArray.\n     * \n     * @param cosObjectables the initial list of COSObjectables",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getStrokingAlphaConstant()" : "* This will get the stroking alpha constant.\n     *\n     * @return The stroking alpha constant or null if one has not been set.",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:isLineStart()" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getDenominator()" : "* This will return the precision or denominator of a fractional amount.\r\n     * \r\n     * @return the precision or denominator",
  "org.apache.pdfbox.rendering.GroupGraphics:drawString(java.text.AttributedCharacterIterator,float,float)" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:applyGSUBRules(org.apache.fontbox.ttf.gsub.GsubWorker,java.io.ByteArrayOutputStream,org.apache.pdfbox.pdmodel.font.PDType0Font,java.lang.String)" : "* Retrieve the glyph IDs for the characters in the specified word, after applying any relevant\n     * GSUB rules. The encoded glyph IDs are also written to the specified output stream.\n     *\n     * @param gsubWorker The GSUB worker which defines the GSUB transformations to apply.\n     * @param out The output stream to write the glyph IDs to.\n     * @param font The font whose cmap table will be used to map characters to glyph IDs.\n     * @param word The word which is being converted from characters to glyph IDs.\n     * @return The glyph IDs for the characters in the specified word, after applying any relevant\n     * GSUB rules.\n     * @throws IllegalStateException If we cannot find a glyph ID for any characters in the\n     * specified word.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setString(java.lang.String,java.lang.String)" : "* Sets a string attribute value.\n     * \n     * @param name the attribute name\n     * @param value the string attribute value",
  "org.apache.pdfbox.cos.COSDictionary:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* visitor pattern double dispatch method.\n     *\n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If there is an error visiting this object.",
  "org.apache.pdfbox.pdmodel.PDResources:getExtGState(org.apache.pdfbox.cos.COSName)" : "* Returns the extended graphics state resource with the given name, or null if none exists.\r\n     *\r\n     * @param name Name of the graphics state resource.\r\n     * @return the extended graphics state with the given name or null",
  "org.apache.pdfbox.contentstream.operator.state.SetLineJoinStyle:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:updateStructParentEntries(org.apache.pdfbox.pdmodel.PDPage,int)" : "* Update the StructParents and StructParent values in a PDPage.\n     *\n     * @param page the new page\n     * @param structParentOffset the offset which should be applied",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createAcroFormDictionary(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField)" : null,
  "org.apache.pdfbox.text.TextPosition:isDiacritic()" : "* @return True if the current character is a diacritic char.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setTextLineMatrix(org.apache.pdfbox.util.Matrix)" : "* @param value The textLineMatrix to set.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:fillAndStrokeEvenOdd()" : "* Fill and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall produce the same result as constructing two identical path objects, painting\n     * the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:addRect(float,float,float,float)" : "* Add a rectangle to the current path.\n     *\n     * @param x The lower left x coordinate.\n     * @param y The lower left y coordinate.\n     * @param width The width of the rectangle.\n     * @param height The height of the rectangle.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdfparser.FDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead)" : "* Constructs parser for given file using memory buffer.\n     * \n     * @param source the source of the pdf to be parsed\n     * \n     * @throws IOException If something went wrong.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getConvertedContents(java.io.InputStream)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setNamedDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination)" : "* This will set a named destination in the current document that provides the page number of\n     * the file attachment annotation.\n     *\n     * @param dest a named destination or null if the entry is to be removed.",
  "org.apache.pdfbox.text.PDFTextStripper:writeString(java.lang.String)" : "* Write a Java string to the output stream.\n     *\n     * @param text The text to write to the stream.\n     * @throws IOException If there is an error when writing the text.",
  "org.apache.pdfbox.pdmodel.encryption.RC4Cipher:write(byte[],int,int,java.io.OutputStream)" : "* This will encrypt and write the data.\n     *\n     * @param data The data to encrypt.\n     * @param offset The offset into the array to start reading data from.\n     * @param len The number of bytes to attempt to read.\n     * @param output The stream to write to.\n     *\n     * @throws IOException If there is an error writing to the output stream.",
  "org.apache.pdfbox.filter.Predictor$PredictorOutputStream:write(int)" : null,
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:getPageRangeCount()" : "* Returns the number of page label ranges.\n     * \n     * <p>\n     * This will be always &gt;= 1, as the required default entry for the page\n     * range starting at the first page is added automatically by this\n     * implementation (see PDF32000-1:2008, p. 375).\n     * </p>\n     * \n     * @return the number of page label ranges.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:hasExplicitWidth(int)" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:remove(org.apache.pdfbox.cos.COSDictionary)" : "* Removes the given COS page.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getMDP()" : "* <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P\n     * and whose value is an integer between 0 and 3. A value of 0 defines the\n     * signatures as an author signature. The value 1 through 3 shall be used for\n     * certification signatures and correspond to the value of P in a DocMDP transform\n     * parameters dictionary.</p>\n     *\n     * <p>If this MDP key is not present or the MDP dictionary does not contain a P\n     * entry, no rules shall be defined regarding the type of signature or its\n     * permissions.</p>\n     *\n     * @return the mdp dictionary as PDSeedValueMDP",
  "org.apache.pdfbox.pdfparser.BaseParser:isEOL(int)" : "* This will tell if the next byte to be read is an end of line byte.\n     *\n     * @param c The character to check against end of line\n     * @return true if the next byte is 0x0A or 0x0D.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : "* Adds the given shading to the resources of the current page and returns the name for the\r\n     * new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param shading the shading to add\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser:parse(org.apache.pdfbox.pdfparser.XrefTrailerResolver)" : "* Parses through the unfiltered stream and populates the xrefTable HashMap.\n     * \n     * @param resolver resolver to read the xref/trailer information\n     * @throws IOException If there is an error while parsing the stream.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:isEmbedded()" : null,
  "org.apache.pdfbox.contentstream.operator.text.SetWordSpacing:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:<init>(java.lang.String)" : "* Creates a new optional content group (OCG).\n     * @param name the name of the content group",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:setMatrix(java.awt.geom.AffineTransform)" : "* Sets the optional Matrix entry for the function based shading.\n     *\n     * @param transform the transformation matrix",
  "org.apache.pdfbox.pdfparser.PDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String)" : "* Constructor.\n     * Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param source input representing the pdf.\n     * @param decryptionPassword password to be used for decryption.\n     * @param keyStore key store to be used for decryption when using public key security \n     * @param alias alias to be used for decryption when using public key security\n     *\n     * @throws IOException If something went wrong.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:getListNumbering()" : "* Gets the list numbering (ListNumbering). The default value is\n     * {@link #LIST_NUMBERING_NONE}.\n     * \n     * @return the list numbering",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)" : "* Draw an image at the x,y coordinates, with the given size.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     * @param width The width to draw the image.\n     * @param height The height to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:getSignature()" : "* This will get the signature or null if there is none.\n     *\n     * @return The signature.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isNoZoom()" : "* Get the noZoom flag.\n     *\n     * @return The noZoom flag.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:<init>()" : null,
  "org.apache.pdfbox.cos.COSBase:setDirect(boolean)" : "* Set the state true, if the dictionary should be written as a direct object and not indirect.\n     * \n     * @param direct set it true, for writing direct object",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setCaptionVerticalOffset(float)" : "* This will set the vertical offset of the caption.\n     * \n     * @param offset vertical offset of the caption",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:<init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead)" : "* Constructor that uses an existing document. The COSDocument that is passed in must be valid.\n     *\n     * @param doc The COSDocument that this document wraps.\n     * @param source The source that will be closed when this document gets closed, can be null.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Atan:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setIssuer(java.util.List)" : "* (Optional) A list of array of bytes containing DER-encoded X.509v3 certificates of acceptable\n     * issuers. If the signer’s certificate chains up to any of the specified issuers (either\n     * directly or indirectly), the certificate is considered acceptable for signing.\n     *\n     * @param issuers A list of byte array containing DER-encoded X.509v3 certificates",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:getFile()" : "* This will get the file in which the destination is located.\n     *\n     * @return The F entry of the specific remote go-to action dictionary.\n     *\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:getRemaining()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:setStructureElement(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement)" : "* Sets the structure element.\n     * \n     * @param structureElement the structure element",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceGrayColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.PDFontSetting:getFont()" : "* This will get the font for this font setting.\n     *\n     * @return The font for this setting of null if one was not found.\n     *\n     * @throws IOException If there is an error getting the font.",
  "org.apache.pdfbox.filter.CCITTFaxFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getPerms()" : "* Get the Perms entry in the encryption dictionary.\n     *\n     * @return A 16 byte array or null if there is no Perms entry.\n     *\n     * @throws IOException If there is an error accessing the data.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:<init>()" : "* Package-private constructor, for embedding.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Line:calculateWidth(org.apache.pdfbox.pdmodel.font.PDFont,float)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:dispose()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:createFont(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new PDFont instance with the appropriate subclass.\n     *\n     * @param dictionary a font dictionary\n     * @return a PDFont instance, based on the SubType entry of the dictionary\n     * @throws IOException if something goes wrong",
  "org.apache.pdfbox.contentstream.operator.graphics.MoveTo:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:<init>(java.io.InputStream,int,int,long,boolean)" : "* Creates a CCITTFaxDecoderStream.\n     * This constructor may be used for CCITT streams embedded in PDF files,\n     * which use EncodedByteAlign.\n     *\n     * @param stream the compressed CCITT stream.\n     * @param columns the number of columns in the stream.\n     * @param type the type of stream, must be one of {@code COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE},\n     *             {@code COMPRESSION_CCITT_T4} or {@code COMPRESSION_CCITT_T6}.\n     * @param options CCITT T.4 or T.6 options.\n     * @param byteAligned enable byte alignment used in PDF files (EncodedByteAlign).",
  "org.apache.pdfbox.rendering.TilingPaint:getImage(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.AffineTransform,java.awt.geom.Rectangle2D)" : "* Returns the pattern image in parent stream coordinates.",
  "org.apache.pdfbox.filter.Predictor$PredictorOutputStream:flush()" : null,
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getName()" : null,
  "org.apache.pdfbox.Loader:loadPDF(byte[])" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used\n     * to read the data.\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the PDF required a non-empty password.\n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.pdmodel.font.CIDSystemInfo:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isDoNotSpellCheck()" : "* Determines if DoNotSpellCheck is set.\n     * \n     * @return true if spell checker is disabled.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isUserPassword56(byte[],byte[],int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:hashCode()" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:setStartxref(long)" : "* This will set the start xref.\n     *\n     * @param newStartxref The new start xref attribute.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:initFringe(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:getARange()" : "* This will get the valid range for the \"a\" component.\n     * If none is found then the default will be returned, which is -100..100.\n     * @return the \"a\" range.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:beginText()" : "* Begin some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest beginText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:contains(org.apache.pdfbox.cos.COSBase)" : "* Returns true, if the given {@link COSBase} is a registered object of this compression pool.\n     *\n     * @param object The object, that shall be checked.\n     * @return True, if the given {@link COSBase} is a registered object of this compression pool.",
  "org.apache.pdfbox.util.NumberFormatUtil:formatFloatFast(float,int,byte[])" : "* Fast variant to format a floating point value to a ASCII-string. The format will fail if the\n     * value is greater than {@link Long#MAX_VALUE}, smaller or equal to {@link Long#MIN_VALUE}, is\n     * {@link Float#NaN}, infinite or the number of requested fraction digits is greater than\n     * {@link #MAX_FRACTION_DIGITS}.\n     * \n     * When the number contains more fractional digits than {@code maxFractionDigits} the value will\n     * be rounded. Rounding is done to the nearest possible value, with the tie breaking rule of \n     * rounding away from zero.\n     * \n     * @param value The float value to format\n     * @param maxFractionDigits The maximum number of fraction digits used\n     * @param asciiBuffer The output buffer to write the formatted value to\n     *\n     * @return The number of bytes used in the buffer or {@code -1} if formatting failed",
  "org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators$IfElse:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode,boolean,boolean)" : "* Create a new PDPage content stream.\n     *\n     * @param document The document the page is part of.\n     * @param sourcePage The page to write the contents to.\n     * @param appendContent Indicates whether content will be overwritten, appended or prepended.\n     * @param compress Tell if the content stream should compress the page contents.\n     * @param resetContext Tell if the graphic context should be reset. This is only relevant when\n     * the appendContent parameter is set to {@link AppendMode#APPEND}. You should use this when\n     * appending to an existing stream, because the existing stream may have changed graphic\n     * properties (e.g. scaling, rotation).\n     * @throws IOException If there is an error writing to the page contents.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSound:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.CloseFillNonZeroAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdfparser.BaseParser:parseCOSNumber()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getColourByIndex(int)" : "* Gets the colour by edge index.\n     * \n     * @param index edge index\n     * @return the colour",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:isDamaged()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:draw(java.awt.Shape)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setInteger(java.lang.String,int)" : "* Sets an integer.\n     * \n     * @param name the attribute name\n     * @param value the integer",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getStemH()" : "* This will get the stemH for the font.\n     *\n     * @return The stem h value.",
  "org.apache.pdfbox.cos.COSDictionary:getFlag(org.apache.pdfbox.cos.COSName,int)" : "* Gets the boolean value from the flags at the given bit position.\n     *\n     * @param field The COSName of the field to get the flag from.\n     * @param bitFlag the bitPosition to get the value from.\n     *\n     * @return true if the number at bitPos is '1'",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setK(org.apache.pdfbox.cos.COSBase)" : "* Sets the K entry.\n     * \n     * @param k the K value",
  "org.apache.pdfbox.util.Hex:getChars(short)" : "* Returns the characters corresponding to the ASCII hex encoding of the given short.\n     * \n     * @param num the short value to be converted\n     * @return the ASCII hex encoding of the given short value",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDParentTreeValue:toString()" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionTypeIdentity:getFunctionType()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getWidth()" : "* Get the width from a type3 charproc stream.\n     *\n     * @return the glyph width.\n     * @throws IOException if the stream could not be read, or did not have d0 or d1 as first\n     * operator, or if their first argument was not a number.",
  "org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:getFontEncoding()" : "* Returns the font's encoding.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLink:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.cos.COSArray:of(float[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setHidden(boolean)" : "* Set the hidden flag.\n     * \n     * @param hidden The new hidden flag.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setPages(java.util.List)" : "* This will set the list of pages. This should be a list of FDFPage objects.\n     *\n     *\n     * @param pages The list of pages.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getRectangle()" : "* The rectangle associated with this annotation.\n     *\n     * @return The annotation rectangle.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addSubject(byte[])" : "* (Optional) byte array containing DER-encoded X.509v3 certificate that is acceptable for\n     * signing. works like {@link #setSubject(List)} but one byte array\n     *\n     * @param subject byte array containing DER-encoded X.509v3 certificate",
  "org.apache.pdfbox.text.PDFTextStripper:startArticle()" : "* Start a new article, which is typically defined as a column on a single page (also referred to as a bead). This\n     * assumes that the primary direction of text is left to right. Default implementation is to do nothing. Subclasses\n     * may provide additional information.\n     *\n     * @throws IOException If there is any error writing to the stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getID()" : "* This is the FDF id.\n     *\n     * @return The FDF ID.",
  "org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getTriangles()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setCalcOrder(java.util.List)" : "* Set the calculation order in which field values should be recalculated when the value of any\n     * field changes. (Read about \"Trigger Events\" in the PDF specification)\n     *\n     * @param fields The field list.",
  "org.apache.pdfbox.rendering.PDFRenderer:renderImageWithDPI(int,float,org.apache.pdfbox.rendering.ImageType)" : "* Returns the given page as an RGB image at the given DPI.\r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param dpi the DPI (dots per inch) to render at\r\n     * @param imageType the type of image to return\r\n     * @return the rendered page image\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createSignatureField(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setLineCapStyle(int)" : "* Set the line cap style.\n     *\n     * @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line cap style.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:codeToGID(int)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.MoveTo:getName()" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromFloat(org.apache.pdfbox.cos.COSFloat)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)" : "* Constructor. Internal PDFBox use only! If you need to get the document catalog, call\n     * {@link PDDocument#getDocumentCatalog()}.\n     *\n     * @param doc The document that this catalog is part of.\n     * @param rootDictionary The root dictionary that this object wraps.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:appendCertInfo(java.lang.StringBuilder,org.bouncycastle.cms.KeyTransRecipientId,java.security.cert.X509Certificate,org.bouncycastle.cert.X509CertificateHolder)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)" : "* Compute the encryption key.\n     *\n     * @param password The password to compute the encrypted key.\n     * @param o The O entry of the encryption dictionary.\n     * @param u The U entry of the encryption dictionary.\n     * @param oe The OE entry of the encryption dictionary.\n     * @param ue The UE entry of the encryption dictionary.\n     * @param permissions The permissions for the document.\n     * @param id The document id.\n     * @param encRevision The revision of the encryption algorithm.\n     * @param keyLengthInBytes The length of the encryption key in bytes.\n     * @param encryptMetadata The encryption metadata\n     * @param isOwnerPassword whether the password given is the owner password (for revision 6)\n     *\n     * @return The encrypted key bytes.\n     *\n     * @throws IOException If there is an error with encryption.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:getTargetDirectory()" : "* Get the target directory.\n     *\n     * @return the target directory or null if there is none.",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setNames(java.util.Map)" : "* Set the names for this node. This method will set the appropriate upper and lower limits\n     * based on the keys in the map and take care of the ordering.\n     *\n     * @param names map of names to objects, or <code>null</code> for nothing.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanFillInForm(boolean)" : "* Set if the user can fill in interactive form fields (including signature fields) even if\n     * {@link #canModifyAnnotations() canModifyAnnotations()} returns false. Therefore, if you want\n     * to prevent a user from filling in interactive form fields, you need to call\n     * {@link #setCanModifyAnnotations(boolean) setCanModifyAnnotations(false)} as well.\n     *<p>\n     * This method will have no effect if the object is in read only mode.\n     *\n     * @param allowFillingInForm A boolean determining if the user can fill in interactive forms.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing marked content reference.\r\n     * \r\n     * @param dictionary the page dictionary",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:getObject(int)" : "* Returns the object at the specified position.\n     * \n     * @param index the position\n     * @return the object\n     * @throws IndexOutOfBoundsException if the index is out of range",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:getPathArray(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:getPubSec()" : "* A build data dictionary for the PubSec software module\n     * that was used to create the parent signature.\n     *\n     * @return the PubSec as PDPropBuildPubSec object",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getPC()" : "* This will get an action to be performed when the page containing\n     * the annotation is closed. The action is executed before the C action\n     * in the page's additional actions dictionary, if present.\n     *\n     * @return The PC entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createInnerFormResource()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for reading.\r\n     *\r\n     * @param resourceDictionary The cos dictionary for this resource.",
  "org.apache.pdfbox.text.PDFTextStripper:parseBidiFile(java.io.InputStream)" : "* This method parses the bidi file provided as inputstream.\n     * \n     * @param inputStream - The bidi file as inputstream\n     * @throws IOException if any line could not be read by the LineNumberReader",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:computeRecipientsField(byte[])" : null,
  "org.apache.pdfbox.cos.COSStream:createOutputStream(org.apache.pdfbox.cos.COSBase)" : "* Returns a new OutputStream for writing stream data, using and the given filters.\n     * \n     * @param filters COSArray or COSName of filters to be used.\n     * @return OutputStream for un-encoded stream data.\n     * @throws IOException If the output stream could not be created.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:getPattern(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.util.Matrix:clone()" : "* Clones this object.\n     * @return cloned matrix as an object.",
  "org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine:getPage()" : "* Returns the page.\r\n     * \r\n     * @return the current page",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : "* Sets the extended graphics state resource with the given name.\r\n     *\r\n     * @param name the name of the resource\r\n     * @param extGState the extended graphics state to be added",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setTitle(java.lang.String)" : "* Sets the title (T).\n     * \n     * @param title the title",
  "org.apache.pdfbox.pdfparser.PDFParser:createDocument()" : "* Create the resulting document. Maybe overwritten if the parser uses another class as document.\n     * \n     * @return the resulting document\n     * @throws IOException if the method is called before parsing the document",
  "org.apache.pdfbox.contentstream.operator.graphics.CloseFillEvenOddAndStrokePath:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setExternalData(org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary)" : "* This will set the external data dictionary.\n     * \n     * @param externalData the external data dictionary",
  "org.apache.pdfbox.contentstream.operator.graphics.ClipEvenOddRule:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:getSamples()" : "* Get all sample values of this function.\n         *\n         * @return an array with all samples.",
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:<init>()" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:hasNext()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setSignatureRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Sets SignatureRectangle\n     * \n     * @param signatureRectangle the rectangle to be used for the signature",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setFilter(org.apache.pdfbox.cos.COSName)" : "* (Optional) The signature handler that shall be used to sign the signature field.\n     *\n     * @param filter is the filter that shall be used by the signature handler",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType3Font:readCode(java.io.InputStream)" : null,
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:write(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toString()" : null,
  "org.apache.pdfbox.filter.ASCII85InputStream:close()" : "* This will close the underlying stream and release any resources.\n     *\n     * @throws IOException If there is an error closing the underlying stream.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:generateBoundingBox()" : null,
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:setProvider(org.apache.pdfbox.pdmodel.font.FontProvider)" : "* Sets the font service provider.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.text.PDFTextStripper:matchListItemPattern(org.apache.pdfbox.text.PDFTextStripper$PositionWrapper)" : "* returns the list item Pattern object that matches the text at the specified PositionWrapper or null if the text\n     * does not match such a pattern. The list of Patterns tested against is given by the {@link #getListItemPatterns()}\n     * method. To add to the list, simply override that method (if sub-classing) or explicitly supply your own list\n     * using {@link #setListItemPatterns(List)}.\n     * \n     * @param pw position\n     * @return the matching pattern",
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:enqueueKids(org.apache.pdfbox.pdmodel.interactive.form.PDField)" : null,
  "org.apache.pdfbox.util.filetypedetector.FileTypeDetector:detectFileType(java.io.BufferedInputStream)" : "* Examines the a file's first bytes and estimates the file's type.\n     * <p>\n     * Requires a {@link BufferedInputStream} in order to mark and reset the stream to the position\n     * at which it was provided to this method once completed.\n     * <p>\n     * Requires the stream to contain at least eight bytes.\n     *\n     * @param inputStream a buffered input stream of the file to examine.\n     * @return the file type.\n     * @throws IOException if an IO error occurred or the input stream ended unexpectedly.",
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:getDoc()" : "* Returns the dictionary's \"Doc\" entry, that is, a map of key value pairs to be added to the document's JavaScript\n     * name tree.\n     * \n     * @return Map of named \"JavaScript\" dictionaries.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setRotation(int)" : "* This will set the clockwise rotation in degrees.\n     * \n     * @param rotation The number of degrees of clockwise rotation.",
  "org.apache.pdfbox.pdmodel.PDPage:getMatrix()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:hasGlyph(int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDParentTreeValue:<init>(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setLineDashPattern(org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern)" : "* This will set the dash pattern for the graphics state.\n     *\n     * @param dashPattern The dash pattern",
  "org.apache.pdfbox.pdfwriter.COSWriter:getStartxref()" : "* This will get the current start xref.\n     *\n     * @return The current start xref.",
  "org.apache.pdfbox.cos.COSDocumentState:setParsing(boolean)" : "* Sets the {@link #parsing} state of the document.\n     *\n     * @param parsing The {@link #parsing} state to set.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setByteRange(int[])" : "* Sets the byte range.\n     *\n     * @param range the byte range to be used",
  "org.apache.pdfbox.rendering.PageDrawer:endPath()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* This will set the file in which the destination is located.\n     *\n     * @param fs The file specification.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:fillPagesAnnotationMap(java.util.Map,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getInReplyTo()" : "* This will retrieve the annotation to which this one is \"In Reply To\" the actual relationship\n     * is specified by the RT entry.\n     *\n     * @return the other annotation or null if there is none.\n     * @throws IOException if there is an error creating the other annotation.",
  "org.apache.pdfbox.pdfparser.PDFObjectStreamParser:parseAllObjects()" : "* Parse all compressed objects. The stream is closed after parsing.\n     * \n     * @return a map containing all parsed objects using the object number as key\n     * @throws IOException if there is an error while parsing the stream",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFlags()" : "* This will get the font flags.\n     *\n     * @return The font flags.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitDestination:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor from an existing destination array.\n     *\n     * @param arr The destination array.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:<init>(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.PDResources)" : "* Creates a new DeviceN color space from the given COS array.\n     * \n     * @param deviceN an array containing the color space information\n     * @param resources resources, can be null.\n     * \n     * @throws IOException if the colorspace could not be created",
  "org.apache.pdfbox.pdmodel.PDDocument:addSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions)" : "* Add parameters of signature to be created externally. See\n     * {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external\n     * signature creation scenario details.\n     * <p>\n     * Only one signature may be added in a document. To sign several times,\n     * load document, add signature, save incremental and close again.\n     *\n     * @param sigObject is the PDSignatureField model\n     * @param options signature options\n     * @throws IOException if there is an error creating required fields\n     * @throws IllegalStateException if one attempts to add several signature\n     * fields.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:popNumber()" : "* Pops a number (int or real) from the stack. If it's neither data type, a\n     * ClassCastException is thrown.\n     * @return the number",
  "org.apache.pdfbox.cos.COSDocument:setDecrypted()" : "* Signals that the document is decrypted completely.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:isPermissionBitOn(int)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addReal(float)" : "* Adds a real value.\n     * @param value the value",
  "org.apache.pdfbox.text.PDFTextStripper:writeParagraphSeparator()" : "* writes the paragraph separator string to the output.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.cos.COSArray:indexOf(org.apache.pdfbox.cos.COSBase)" : "* This will return the index of the entry or -1 if it is not found.\n     *\n     * @param object The object to search for.\n     * @return The index of the object or -1.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font)" : "* Constructor.\n     *\n     * @param fontDictionary The font dictionary according to the PDF specification.",
  "org.apache.pdfbox.pdfwriter.COSWriter:<init>(java.io.OutputStream,org.apache.pdfbox.io.RandomAccessRead,java.util.Set)" : "* Constructor for incremental updates with a list of objects to write. This allows to\n     * include objects even if there is no path of objects that have\n     * {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only\n     * dictionaries are supported; if you need to update other objects classes, then add their\n     * parent dictionary.\n     *\n     * @param outputStream output stream where the new PDF data will be written.\n     * @param inputData random access read containing source PDF data.\n     * @param objectsToWrite objects that <b>must</b> be part of the incremental saving.\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.filter.CryptFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:isStroke()" : "* Returns true if this mode strokes text.\r\n     * \r\n     * @return true if this mode strokes text",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:currentChar()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getInterpolate()" : null,
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:getStart()" : "* Returns the start value for page numbering in this page range.\n     * \n     * @return a positive integer the start value for numbering.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)" : "* set a marked content point.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getLabelPositionToValue()" : "* This will return a value indicating the ordering of the label specified by U to the calculated unit value.\r\n     * \r\n     * @return label position",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getCaptionStyle()" : "* This will retrieve the caption positioning.\n     * \n     * @return the caption positioning",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setCharacterSet(java.lang.String)" : "* This will set the character set for the font.\n     *\n     * @param charSet The new character set for the font.",
  "org.apache.pdfbox.cos.COSDictionary:getInt(java.lang.String,int)" : "* This is a convenience method that will get the dictionary object that is expected to be an integer. If the\n     * dictionary value is null then the default value will be returned.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The integer value.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.filter.ASCII85InputStream:read()" : "* This will read the next byte from the stream.\n     *\n     * @return The next byte read from the stream.\n     *\n     * @throws IOException If there is an error reading from the wrapped stream.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildWidths(org.apache.pdfbox.cos.COSDictionary)" : "* Build widths with Identity CIDToGIDMap (for embedding full font).",
  "org.apache.pdfbox.multipdf.PDFCloneUtility:cloneCOSStream(org.apache.pdfbox.cos.COSStream)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getGuidelineWidth()" : "* Get the width of the of the guideline in default user space units.\n     * The default is 1.\n     *\n     * @return The width of the guideline.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:zoom(float)" : "* Zoom signature image with some percent.\n     * \n     * @param percent increase (positive value) or decrease (negative value) image with x percent.\n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:createInputStream(org.apache.pdfbox.filter.DecodeOptions)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:moveTo(double,double)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:getState()" : "* This will retrieve the annotation state.\n     * \n     * @return the annotation state",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:read(byte[],int,int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getFontMatrix()" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:checkSignatureField(java.util.Iterator,org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField)" : "* Check if the field already exists in the field list.\n     *\n     * @param fieldIterator iterator on all fields.\n     * @param signatureField the signature field.\n     * @return true if the field already existed in the field list, false if not.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSound:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:getWidths(int[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:setAlternateFieldName(java.lang.String)" : "* This will set the alternate name of the field (\"shall be used in place of the actual field\n     * name wherever the field shall be identified in the user interface (such as in error or status\n     * messages referring to the field)\"). The text appears as a tool tip in Adobe Reader. Because\n     * of the usage for error or status messages, it should be different for each field.\n     *\n     * @param alternateFieldName the alternate name of the field.",
  "org.apache.pdfbox.pdfparser.BaseParser:isSpace()" : "* This will tell if the next byte is a space or not.\n     *\n     * @return true if the next byte in the stream is a space character.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setParentTreeNextKey(int)" : "* Sets the next key in the parent tree. This is a number greater than any existing key, and\n     * which shall be used for the next entry to be added to the tree.\n     * \n     * @param parentTreeNextkey The next key in the parent tree.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:copyIntoGraphicsState(org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState)" : "* This will implement the gs operator.\n     *\n     * @param gs The state to copy this dictionaries values into.\n     *\n     * @throws IOException If there is an error copying font information.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setIssuerRequired(boolean)" : "* set true if Issuer shall be required as a constraint on signature.\n     *\n     * @param flag if true, the specified Issuer shall be enforced as a constraint.",
  "org.apache.pdfbox.cos.COSDictionary:setItem(java.lang.String,org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ).\n     *\n     * @param key The key to the dictionary object.\n     * @param value The value to the dictionary object.",
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setPage(int)" : "* This will set the page.\n     *\n     * @param page The page number.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getPath(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline:<init>()" : "* Default Constructor.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getAlphaImage(java.awt.image.BufferedImage)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:getIgnoreContentStreamSpaceGlyphs()" : "* Determines whether spaces in the content stream text rendering instructions will be ignored\n     * during text extraction.\n     *\n     * @return true is space glyphs in the content stream text rendering instructions will be\n     * ignored - default is false",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getCOSObject()" : "* Convert this standard java object to a COS dictionary.\n     *\n     * @return The COS dictionary that matches this Java object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:<init>(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:getDocument()" : "* This will get the low level document.\n     * \n     * @return The document that this layer sits on top of.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:checkChunkSane(org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$Chunk)" : "* Check if the chunk is sane, i.e. CRC matches and offsets and lengths in the\n     * byte array",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setPreviousURI(org.apache.pdfbox.pdmodel.interactive.action.PDActionURI)" : "* This will set the previous URI action, in case it needs to be retrieved at later date.\n     *\n     * @param pa The previous URI.",
  "org.apache.pdfbox.cos.COSArray:setFloatArray(float[])" : "* Clear the current contents of the COSArray and set it with the float[].\n     *\n     * @param value The new value of the float array.",
  "org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:getNonStrokingPaint()" : "* Returns the non-stroking AWT Paint. You may need to call this if you override\r\n     * {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See\r\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-5093\">PDFBOX-5093</a> for more.\r\n     *\r\n     * @return The non-stroking AWT Paint.\r\n     * @throws IOException if the non-stroking AWT Paint could not be created",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItemIterator:<init>(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : null,
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:setMetadata(org.apache.pdfbox.cos.COSStream)" : "* Sets the metadata stream that is associated with this color space.\n     * @param metadata the new metadata stream",
  "org.apache.pdfbox.text.PDFTextStripper:writePageEnd()" : "* Write something (if defined) at the end of a page.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.cos.COSInputStream:getDecodeResult()" : "* Returns the result of the last filter, for use by repair mechanisms.\n     * \n     * @return the result of the last filter",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getDocument()" : "* This will get the document associated with this form.\n     *\n     * @return The PDF document.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getActions()" : "* Get the additional actions for this field. This will return null if there are no additional actions for this\n     * field. As of PDF 1.6 this is only used for Widget Annotations.\n     *\n     * @return The actions of the field.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getInnerForm()" : "* Gets inner form that is in this location:\n     * <b> AcroForm/DR/XObject/{holder form name}/Resources/XObject/{inner name} </b>\n     * By default inner form name starts with \"n\". Then we add number of form\n     * to the name.\n     * @return the inner form",
  "org.apache.pdfbox.util.StringUtil:splitOnSpace(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getPath(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:restoreGraphicsState()" : "* Q operator. Restores the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:insertAfter(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPage)" : "* Insert a page after another page within a page tree.\r\n     *\r\n     * @param newPage the page to be inserted.\r\n     * @param prevPage the page that is to be before the new page.\r\n     * @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page\r\n     * tree.",
  "org.apache.pdfbox.pdfparser.PDFXRefStream:writeStreamData(java.io.OutputStream,int[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setInnerForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* sets inner form to this location: <b> AcroForm/DR/XObject/{holder form name}/Resources/XObject/{destination} </b>\n     * \n     * @param innerForm the inner form",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:isTrueTypeFile(byte[])" : null,
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:getColorSpace()" : "* Returns the non-stroking color space.\n     * @return The non-stroking color space.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:displayDocTitle()" : "* Get the display doc title preference.\n     *\n     * @return the display doc title preference.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setOptions(java.util.List)" : "* This will set the display values - the 'Opt' key.\n     * \n     * <p>\n     * The Opt array specifies the list of options in the choice field either\n     * as an array of text strings representing the display value \n     * or as an array of a two-element array where the\n     * first element is the export value and the second the display value.\n     * </p>\n     * <p>\n     * To set both the export and the display value use {@link #setOptions(List, List)}\n     * </p> \n     *\n     * @param displayValues List containing all possible options.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setSubFilter(org.apache.pdfbox.cos.COSName)" : "* Set a subfilter that specify the signature that should be used.\n     *\n     * @param subfilter the subfilter that shall be used.",
  "org.apache.pdfbox.pdfparser.COSParser:getAccessPermission()" : "* This will get the AccessPermission. The document must be parsed before this is called.\n     *\n     * @return The access permission of document that was parsed.\n     *\n     * @throws IOException If there is an error getting the document.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getSignatureText()" : "* returns visible signature text\n     * @return the visible signature's text",
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:setF(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed before\n     * the field is formatted to display its current value. This\n     * allows the field's value to be modified before formatting.\n     *\n     * @param f The action to be performed.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getEncodeForParameter(int)" : "* Get the encode for the input parameter.\n     *\n     * @param paramNum The function parameter number.\n     *\n     * @return The encode parameter range or null if none is set.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:fillEvenOdd()" : "* Fills the path using the even-odd winding rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.text.PDFTextStripper:getAddMoreFormatting()" : "* This will tell if the text stripper should add some more text formatting.\n     * \n     * @return true if some more text formatting will be added",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setStemH(float)" : "* This will set the stem H for the font.\n     *\n     * @param stemH The new stem h for the font.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext:isDataEmpty()" : null,
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:addGlyphIds(java.util.Set)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:getFile()" : "* This will get the file in which the destination is located.\n     *\n     * @return The F entry of the specific thread action dictionary.\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(float,float,float)" : "* Set the stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getBBox()" : "* An array of four numbers in the form coordinate system (see\n     * below), giving the coordinates of the left, bottom, right, and top edges,\n     * respectively, of the pattern's bounding box.\n     *\n     * @return The BBox of the pattern.",
  "org.apache.pdfbox.pdmodel.PDPage:getContents()" : "* Returns the content stream(s) of this page as a single input stream.\n     *\n     * @return An InputStream, never null. Multiple content streams are concatenated and separated\n     * with a newline. An empty stream is returned if the page doesn't have any content stream.\n     * @throws IOException If the stream could not be read",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFilename()" : "* <p>Preferred method for getting the filename.\n     * It will determinate the recommended file name.</p>\n     * <p>First of all we try to get the unicode filename if it exist.\n     * If it doesn't exist we take a look at the DOS, MAC UNIX filenames.\n     * If no one exist the required F entry will be returned.</p>\n     *\n     * @return The preferred file name.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getEndPointEndingStyle()" : "* This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section.\n     *\n     * @return The ending style for the end point, LE_NONE if missing, never null.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getValueFor(org.apache.pdfbox.cos.COSName)" : "* Returns the selected values, or an empty List, for the given key.",
  "org.apache.pdfbox.text.PDFTextStripperByArea:removeRegion(java.lang.String)" : "* Delete a region to group text by. If the region does not exist, this method does nothing.\n     *\n     * @param regionName The name of the region to delete.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setCallout(float[])" : "* This will set the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the\n     * intent is FreeTextCallout.\n     *\n     * @param callout An array of four or six numbers specifying a callout line attached to the free\n     * text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and\n     * ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent\n     * the starting and ending coordinates of the line.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:fillEvenOdd()" : "* Fills the path using the even-odd winding rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.PDRange:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor assumes a starting index of 0.\n     *\n     * @param range The array that describes the range.",
  "org.apache.pdfbox.cos.COSArray:set(int,int)" : "* This will set an object at a specific index.\n     *\n     * @param index zero based index into array.\n     * @param intVal The object to set.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getBitsPerCoordinate()" : "* The bits per coordinate of this shading. This will return -1 if one has\n     * not been set.\n     *\n     * @return the number of bits per coordinate",
  "org.apache.pdfbox.rendering.ImageType$4:toBufferedImageType()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:createWidgetDictionarySet(java.util.List)" : "* Return a set of all annotation widget dictionaries related to the fields to be flattened.\n     *\n     * @param fields\n     * @return",
  "org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param r The FDF named page reference dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:coordinates(float,float)" : "*\n     * @param x - x coordinate\n     * @param y - y coordinate\n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.printing.PDFPrintable:getRotatedCropBox(org.apache.pdfbox.pdmodel.PDPage)" : "* This will find the CropBox with rotation applied, for this page by looking up the hierarchy\n     * until it finds them.\n     *\n     * @return The CropBox at this level in the hierarchy.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite:createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getHeight()" : null,
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getFormat()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAcroFormDictionary(org.apache.pdfbox.cos.COSDictionary)" : "* Acroform have its Dictionary, so we here set the Dictionary which is in this location: <b> AcroForm/DR </b>\n     * \n     * @param acroFormDictionary the current acroform dictionary",
  "org.apache.pdfbox.rendering.GroupGraphics:setPaint(java.awt.Paint)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getLineEndingStyle()" : "* This will retrieve the line ending style.\n     *\n     * @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if\n     * missing, never null.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getResources()" : "* This will get the resources for this pattern.\n     * This will return null if no resources are available at this level.\n     * @return The resources for this pattern.",
  "org.apache.pdfbox.pdmodel.graphics.PDXObject:getStream()" : "* Returns the stream.\r\n     * @return The stream for this object.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:getC()" : "* This will get an action to be performed when the page\n     * is closed. This action applies to the page being closed,\n     * and is executed before any other page opened.\n     *\n     * @return The C entry of page object's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getAlternateColorSpace()" : "* This will get the alternate color space for this separation.\n     *\n     * @return The alternate color space.\n     *\n     * @throws IOException If there is an error getting the alternate color\n     * space.",
  "org.apache.pdfbox.pdmodel.PDResources:getNames(org.apache.pdfbox.cos.COSName)" : "* Returns the resource names of the given kind.",
  "org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:writeTo(java.io.OutputStream)" : "* Writes the CMap as ASCII to the given output stream.\n     *\n     * @param out ASCII output stream\n     * @throws IOException if the stream could not be written",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setXStep(float)" : "* This will set the XStep value.\n     * @param xStep The new XStep value.",
  "org.apache.pdfbox.multipdf.PageExtractor:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a new instance of PageExtractor\n     * @param sourceDocument The document to split.",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:loadList(java.io.InputStream)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor\n     *\n     * @param a the action dictionary",
  "org.apache.pdfbox.util.Vector:getX()" : "* Returns the x magnitude.\n     * \n     * @return the x magnitude",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setRecipients(byte[][])" : "* This will set the Recipients field of the dictionary. This field contains an array\n     * of string.\n     * @param recipients the array of bytes arrays to put in the Recipients field.\n     * @throws IOException If there is an error setting the data.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.PDDocumentNameDestinationDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The dictionary of names and corresponding destinations.",
  "org.apache.pdfbox.contentstream.operator.state.SetLineMiterLimit:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:setRevisionNumber(java.lang.Object,int)" : "* Sets the revision number of a specified object.\n     * \n     * @param object the object\n     * @param revisionNumber the revision number",
  "org.apache.pdfbox.cos.COSArray:removeObject(org.apache.pdfbox.cos.COSBase)" : "* This will remove an element from the array.\n     * This method will also remove a reference to the object.\n     *\n     * @param o The object to remove.\n     * @return <code>true</code> if the object was removed, <code>false</code>\n     *  otherwise",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(java.awt.Color)" : "* Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:newLineAtOffset(float,float)" : "* The Td operator.\n     * Move to the start of the next line, offset from the start of the current line by (tx, ty).\n     *\n     * @param tx The x translation.\n     * @param ty The y translation.\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:codeToGID(int)" : "* Returns the GID for the given character code.\n     *\n     * @param code character code\n     * @return GID\n     * @throws IOException if the mapping could not be read",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getOpenAction()" : "* Get the Document Open Action for this object.\n     *\n     * @return The action to perform when the document is opened.\n     * @throws IOException If there is an error creating the destination or action.",
  "org.apache.pdfbox.rendering.TilingPaintFactory$TilingPaintParameter:toString()" : null,
  "org.apache.pdfbox.cos.COSDictionary:getCOSArray(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a COSArray. Null is\n     * returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The COSArray.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getPageHeight()" : "* \n     * @return page height",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:getRangeValues()" : "* Returns all ranges for the output values as COSArray .\n     * Required for type 0 and type 4 functions\n     * @return the ranges array.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:setTimestampRequired(boolean)" : "* Sets if a timestamp is reuqired or not.\n     * \n     * @param flag true if a timestamp is required",
  "org.apache.pdfbox.pdmodel.PDDocument:prepareVisibleSignature(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:<init>(org.apache.pdfbox.cos.COSArray)" : "* Creates a new gamma from a COS array.\n     * @param array the array containing the XYZ values",
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:saslPrep(java.lang.String,boolean)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType3Font:checkFontMatrixValues(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:addFirst(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* Adds the given node to the top of the children list.\n     * \n     * @param newChild The node to add.\n     * @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next\n     * sibling)",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getFieldFlags()" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:getRenderState(org.apache.pdfbox.rendering.RenderDestination)" : "* @param destination to be rendered\n     * @return state or null if undefined",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:getFile()" : "* This will get the file in which the destination is located.\n     *\n     * @return The F entry of the specific Submit-From action dictionary.\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.PDPage:setTransition(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition)" : "* @param transition The new transition to set on this page.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:getDomainValues()" : "* Returns all domains for the input values as COSArray.\n     * Required for all function types.\n     * @return the domains array.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getColorSpace()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:setFringe(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing\n     * occurs. (To take account of any effects applied through the BE entry for example)\n     *\n     * @param fringe the fringe",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:<init>()" : "* Default Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getListOfByteArraysFromCOSArray(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setLanguage(java.lang.String)" : "* Sets the Language for the document.\n     *\n     * @param language The new document language.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getKeyUsage()" : "* Returns list of key usages of certificate strings where each string is 9 characters long and each character is\n     * one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string\n     * represents a key usage:\n     * <ol>\n     * <li>digitalSignature</li>\n     * <li>non-Repudiation</li>\n     * <li>keyEncipherment</li>\n     * <li>dataEncipherment</li>\n     * <li>keyAgreement</li>\n     * <li>keyCertSign</li>\n     * <li>cRLSign</li>\n     * <li>encipherOnly</li>\n     * <li>decipherOnly</li>\n     * </ol>\n     * \n     * @return list of key usages of certificate strings",
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$And:applyforInteger(int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getLeading()" : "* Get the value of the leading.\n     *\n     * @return The leading.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:getFontName()" : "* Get the font name\n     * \n     * @return the font name to use for resource lookup",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:setBitsPerComponent(int)" : "* Set the number of bits per component.\n     *\n     * @param bitsPerComponent the number of bits per component",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile)" : "* Set the embedded file for this spec. You should also call\n     * {@link #setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFileUnicode(PDEmbeddedFile)}\n     * for cross-platform and cross-language compatibility.\n     *\n     * @param file The file to be embedded.",
  "org.apache.pdfbox.pdmodel.common.PDMetadata:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* This will create a new PDMetadata object with the /Type and /Subtype entries for a document\n     * level metadata object.\n     *\n     * @param document The document that the stream will be part of.",
  "org.apache.pdfbox.pdfparser.EndstreamFilterStream:filter(byte[],int,int)" : "* Write CR and/or LF that were kept, then writes len bytes from the \n     * specified byte array starting at offset off to this output stream,\n     * except trailing CR, CR LF, or LF. No filtering will be done for the\n     * entire stream if the beginning is assumed to be ASCII.\n     * @param b byte array.\n     * @param off offset.\n     * @param len length of segment to write.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:close()" : "* This will close the underlying COSDocument object.\n     *\n     * @throws IOException If there is an error releasing resources.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:getPdfStructure()" : "* Returns the PDFTemplateStructure object.\n     * \n     * @return the template for the structure",
  "org.apache.pdfbox.cos.COSObject:setToNull()" : "* Sets the referenced object to COSNull and removes the initially assigned parser.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:equals(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:<init>(java.lang.String)" : "* Constructor. Will apply encoding-specific conversions to the output text.\n     *\n     * @param encoding The encoding that the output will be written in.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:isNChannel()" : "* Returns true if this color space has the NChannel subtype.\n     * @return true if subtype is NChannel",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createSignatureRectangle(org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField,org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setLineWidth(java.lang.Float)" : "* This will set the line width.\n     *\n     * @param width The line width for the object.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdfwriter.compress.CompressParameters)" : "* <p>\n     * Constructs an object that can be used to compress the contents of a given {@link PDDocument}. It provides the\n     * means to:\n     * </p>\n     * <ul>\n     * <li>Compress the COSStructure of the document, by streaming {@link COSBase}s to compressed\n     * {@link COSWriterObjectStream}s</li>\n     * </ul>\n     *\n     * @param document The document, that shall be compressed.\n     * @param parameters The configuration of the compression operations, that shall be applied.\n     * @throws IOException Shall be thrown if a compression operation failed.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setSize(int)" : "* Set the size of the embedded file.\n     *\n     * @param size The size of the embedded file.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setTitle(java.lang.String)" : "* Set a unique title for an annotation.\n     *\n     * @param title The annotation title.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getInnerFormName()" : "* Gets name of inner form\n     * @return the inner forms's name",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontFile3()" : "* A stream containing a font program that is not true type or type 1.\n     *\n     * @return A stream containing a font program.",
  "org.apache.pdfbox.text.PDFTextStripper:setArticleEnd(java.lang.String)" : "* Sets the string which will be used at the end of an article.\n     * \n     * @param articleEndValue the article end string",
  "org.apache.pdfbox.pdmodel.font.encoding.SymbolEncoding:getCOSObject()" : null,
  "org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSubsamplingX(int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllPaddings(int)" : "* Sets the same padding for all four sides (Padding).\n     * \n     * @param padding the padding",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:<init>()" : "* Creates a new optional content properties dictionary.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setStringFilterName(org.apache.pdfbox.cos.COSName)" : "* Set the string filter name.\n     * \n     * @param stringFilterName the string filter name.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:getEndPointEndingStyle()" : "* This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section.\n     *\n     * @return The ending style for the end point.",
  "org.apache.pdfbox.cos.COSName:toString()" : null,
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getSaturationRGB(float[],float[],float[])" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Draws the given Form XObject at the current location.\n     *\n     * @param form Form XObject\n     * @throws IOException if the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.rendering.GroupGraphics:backdropRemoval(int,int,int,float)" : "* Computes the backdrop removal equation.\n     * <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code>",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:<init>(org.apache.pdfbox.cos.COSBase)" : "* Constructor.\n     *\n     * @param function The function.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:toString()" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:listIterator()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdfwriter.COSWriter:fillGapsWithFreeEntries()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setWP(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed\n     * before printing a document.\n     * The name WP stands for \"will print\".\n     *\n     * @param wp The action to be performed.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor using the given shading dictionary.\n     *\n     * @param shadingDictionary the dictionary for this shading",
  "org.apache.pdfbox.rendering.GroupGraphics:hit(java.awt.Rectangle,java.awt.Shape,boolean)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setLineHeight(float)" : "* Sets the element’s preferred height in the block-progression direction\n     * (LineHeight).\n     * \n     * @param lineHeight the line height",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:writeEOL()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setSignatureField(org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField)" : "* Sets signature field\n     * \n     * @param signatureField the current signature field",
  "org.apache.pdfbox.pdfparser.BruteForceParser:findString(char[])" : "* Search for the given string. The search starts at the current position and returns the start position if the\n     * string was found. -1 is returned if there isn't any further occurrence of the given string. After returning the\n     * current position is either the end of the string or the end of the input.\n     * \n     * @param string the string to be searched\n     * @return the start position of the found string\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.cos.COSBase:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeAffineTransform(java.awt.geom.AffineTransform)" : "* Writes an AffineTransform to the content stream as an array.\n     * \n     * @param transform AffineTransfrom to be added to the content stream\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setLeaderExtend(float)" : "* This will set the length of the leader line extensions.\n     * \n     * @param leaderExtend length of the leader line extensions",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:updatePageReferences(org.apache.pdfbox.multipdf.PDFCloneUtility,java.util.Map,java.util.Map)" : "* Update the Pg and Obj references to the new (merged) page.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:clear()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeRC4key(byte[],int,int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:getWidth(int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference)" : "* Removes an object reference kid.\n     * \n     * @param objectReference the object reference",
  "org.apache.pdfbox.util.Matrix:checkFloatValues(float[])" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)" : "* Set the font and font size to draw text with.\n     *\n     * @param font The font to use.\n     * @param fontSize The font size to draw the text.\n     * @throws IOException If there is an error writing the font information.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:getFringe()" : "* This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs.\n     * (To take account of any effects applied through the BE entry for example)\n     *\n     * @return the rectangle difference",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setRectDifferences(float,float,float,float)" : "* This will set the difference between the annotations \"outer\" rectangle defined by\n     * /Rect and the border.\n     * \n     * @param differenceLeft left difference from the annotations /Rect entry\n     * @param differenceTop top difference from the annotations /Rect entry\n     * @param differenceRight right difference from  the annotations /Rect entry\n     * @param differenceBottom bottom difference from the annotations /Rect entry\n     *",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:is_sRGB(java.awt.color.ICC_Profile)" : "* Returns true if the given profile represents sRGB.\n     * (unreliable on the data of ColorSpace.CS_sRGB in openjdk)",
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:getJavaScript()" : "* Get the document level JavaScript name tree. When the document is opened, all the JavaScript\n     * actions in it shall be executed, defining JavaScript functions for use by other scripts in\n     * the document.\n     *\n     * @return The document level JavaScript name tree.",
  "org.apache.pdfbox.contentstream.operator.text.SetFontAndSize:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:isItalic()" : "* A flag telling if the text should be italic.\n     *\n     * @return The italic flag.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setNeedAppearances(java.lang.Boolean)" : "* Set the NeedAppearances value. If this is false, PDFBox will create appearances for all field\n     * widget.\n     * \n     * @param value the value for NeedAppearances",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:hasMore()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:isEdit()" : "* Determines if Edit is set.\n     * \n     * @return true if the combo box shall include an editable text box as well as a drop-down list.",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)" : "* Adds the given image to the resources of the current page and returns the name for the\r\n     * new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param image the image to add\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getDate()" : "* Modification date.\n     *\n     * @return The date as a string.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:setB(float)" : "* Sets the b value of the tristimulus.\n     * @param b he b value for the tristimulus",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:computeVersionNumber()" : "* Computes the version number of the {@link SecurityHandler} based on the encryption key\n     * length. See PDF Spec 1.6 p 93 and\n     * <a href=\"https://www.adobe.com/content/dam/acom/en/devnet/pdf/adobe_supplement_iso32000.pdf\">PDF\n     * 1.7 Supplement ExtensionLevel: 3</a> and\n     * <a href=\"http://intranet.pdfa.org/wp-content/uploads/2016/08/ISO_DIS_32000-2-DIS4.pdf\">PDF\n     * Spec 2.0</a>.\n     *\n     * @return The computed version number.",
  "org.apache.pdfbox.cos.COSDictionary:keySet()" : "* Returns the names of the entries in this dictionary. The returned set is in the order the entries were added to\n     * the dictionary.\n     *\n     * @since Apache PDFBox 1.1.0\n     * @return names of the entries in this dictionary",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getDecodeValues()" : "* Returns all decode values as COSArray.\n     *\n     * @return the decode array",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:fetchCMapUCS2()" : "* Fetches the corresponding UCS2 CMap if the font's CMap is predefined.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setDownAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry)" : "* This will set a list of appearances. If you would like to set the single appearance then you should use the key\n     * \"default\", and when the PDF is written back to the filesystem then there will only be one stream.\n     *\n     * @param entry appearance stream or subdictionary",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)" : "* Draw an image at the origin with the given transformation matrix.\n     *\n     * @param image The image to draw.\n     * @param matrix The transformation matrix to apply to the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getStencilImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.Paint)" : "* Returns an ARGB image filled with the given paint and using the given image as a mask.\r\n     * @param paint the paint to fill the visible portions of the image with\r\n     * @return a masked image filled with the given paint\r\n     * @throws IOException if the image cannot be read\r\n     * @throws IllegalStateException if the image is not a stencil.",
  "org.apache.pdfbox.text.PDFTextStripper:setEndBookmark(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* Set the bookmark where the text extraction should stop.\n     *\n     * @param aEndBookmark The ending bookmark.",
  "org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:<init>(java.awt.geom.Point2D[],float[][])" : "* Constructor of a patch for type 6 shading.\n     *\n     * @param points 12 control points\n     * @param color 4 corner colors",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setIntent(java.lang.String)" : "* The intent of the annotation.\n     * \n     * @param intent The annotation's intent.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:setName(java.lang.String)" : "* This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX\n     * constants for valid values.\n     *\n     * @param name The name of the annotation",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setCheckSum(java.lang.String)" : "* Set the check sum.\n     *\n     * @param checksum The checksum of the file.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(byte[])" : "* This will append raw commands to the content stream.\n     *\n     * @param commands The commands to append to the stream.\n     * @throws IOException If an error occurs while writing to the stream.\n     * @deprecated Usage of this method is discouraged.",
  "org.apache.pdfbox.pdmodel.common.PDRange:<init>(org.apache.pdfbox.cos.COSArray,int)" : "* Constructor with an index into an array.  Because some arrays specify\n     * multiple ranges ie [ 0,1,  0,2,  2,3 ] It is convenient for this\n     * class to take an index into an array.  So if you want this range to\n     * represent 0,2 in the above example then you would say <code>new PDRange( array, 1 )</code>.\n     *\n     * @param range The array that describes the index\n     * @param index The range index into the array for the start of the range.",
  "org.apache.pdfbox.rendering.GroupGraphics:drawString(java.lang.String,float,float)" : null,
  "org.apache.pdfbox.contentstream.operator.Operator:getOperator(java.lang.String)" : "* This is used to create/cache operators in the system.\n     *\n     * @param operator The operator for the system.\n     *\n     * @return The operator that matches the operator keyword.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:<init>(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.cos.COSObjectKey:<init>(long,int,int)" : "* Constructor.\n     *\n     * @param num The object number.\n     * @param gen The object generation number.\n     * @param index The index within a compressed object stream",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:isSubsettingPermitted(org.apache.fontbox.ttf.TrueTypeFont)" : "* Returns true if the fsType in the OS/2 table permits subsetting.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Neg:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile)" : "* Set the embedded Unicode file for this spec. If you call this, then do not forget to also\n     * call\n     * {@link #setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFile(PDEmbeddedFile)}\n     * or the attachment will not be visible on some viewers.\n     *\n     * @param file The Unicode file to be embedded.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBBox()" : "* Gets the bounding box.\n     * \n     * @return the bounding box.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:encode(int)" : null,
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceRGBColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a new empty PDStream object.\n     * \n     * @param document The document that the stream will be part of.",
  "org.apache.pdfbox.rendering.PageDrawer:isAllZeroDash(float[])" : null,
  "org.apache.pdfbox.filter.FlateFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.cos.COSBase:getKey()" : "* This will return the COSObjectKey of an indirect object.\n     * \n     * @return the COSObjectKey",
  "org.apache.pdfbox.text.PDFTextStripper:writeParagraphStart()" : "* Write something (if defined) at the start of a paragraph.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:hideMenubar()" : "* Get the menubar preference.\n     *\n     * @return the menubar preference.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getUnderlyingColorSpace()" : "* Returns the underlying color space, if this is an uncolored tiling pattern, otherwise null.\n     * \n     * @return the underlying color space or null",
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getWS()" : "* This will get a JavaScript action to be performed\n     * before saving a document.\n     * The name WS stands for \"will save\".\n     *\n     * @return The WS entry of document catalog's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(java.awt.Color)" : "* Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.contentstream.operator.graphics.ClosePath:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:setHidden(boolean)" : "* Specifies whether the property shall be hidden.\n     * \n     * @param hidden <code>true</code> if the property shall be hidden,\n     * <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:toString()" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:assignSignatureRectangle(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.contentstream.operator.DrawObject:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getTriangles()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getFilter()" : "* Returns the filter.\n     * @return the filter",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:getFile()" : "* This will get the file name.\n     *\n     * @return The file name.",
  "org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:setOption(java.lang.String)" : "* This will set the string for an available option.\n     *\n     * @param opt One of the available options.",
  "org.apache.pdfbox.cos.COSDictionary:asUnmodifiableDictionary()" : "* Returns an unmodifiable view of this dictionary.\n     * \n     * @return an unmodifiable view of this dictionary",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:closeAndStroke()" : "* Close and stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.cos.COSFloat:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getCapHeight()" : "* This will get the CapHeight for the font.\n     *\n     * @return The cap height.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:<init>()" : "* Creates the default signature options.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getPattern(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Returns the pattern for the given color.\n     * \n     * @param color color containing a pattern name\n     * @return pattern for the given color\n     * @throws java.io.IOException if the pattern name was not found.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getPath(int)" : null,
  "org.apache.pdfbox.cos.COSIncrement:add(org.apache.pdfbox.cos.COSBase)" : "* The given object and actual {COSBase}s shall be part of the increment and must be added to {@link #objects},\n     * if possible.<br>\n     * {@code null} values shall be skipped.\n     *\n     * @param object The {@link COSBase} to add to {@link #objects}.\n     * @see #objects",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:getSubtype()" : null,
  "org.apache.pdfbox.cos.COSDictionary:setDate(org.apache.pdfbox.cos.COSName,java.util.Calendar)" : "* Set the date object.\n     *\n     * @param key The key to the date.\n     * @param date The date to set.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getKeywords()" : "* This will get the keywords of the document.  This will return null if no keywords exists.\n     *\n     * @return The keywords of the document.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(float,float,float)" : "* Set the non-stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getFunctions()" : "* Returns all functions values as COSArray.\n     * \n     * @return the functions array.",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:copyShortsToBytes(short[],int,byte[],byte[],int)" : null,
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser$ObjectNumbers:next()" : null,
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient:getX509()" : "* Returns the X509 certificate of the recipient.\n     *\n     * @return The X509 certificate",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNumberOrName(java.lang.String,java.lang.String)" : "* Gets a number or a name value.\n     * \n     * @param name the attribute name\n     * @param defaultValue the default name\n     * @return a Float or a String",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:drawGraph(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:findFontOrSubstitute()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getWidthFromFont(int)" : null,
  "org.apache.pdfbox.util.DateConverter:<init>()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setTextRise(float)" : "* Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or\n     * subscripts.\n     *\n     * @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its\n     * default location. 0 restores the default location.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.contentstream.operator.graphics.EndPath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Orientation)" : "* Creates a new PDFPageable with the given page orientation.\n     *\n     * @param document the document to print\n     * @param orientation page orientation policy",
  "org.apache.pdfbox.util.Hex:decodeBase64(java.lang.String)" : "* Decode a base64 String.\n     *\n     * @param base64Value a base64 encoded String.\n     *\n     * @return the decoded String as a byte array.\n     *\n     * @throws IllegalArgumentException if this isn't a base64 encoded string.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:isCachingFields()" : "* This will tell if this acro form is caching the fields.\n     *\n     * @return true if the fields are being cached.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor using the given shading dictionary.\n     *\n     * @param shadingDictionary the dictionary for this shading",
  "org.apache.pdfbox.contentstream.operator.text.NextLine:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setStrokingOverprintControl(boolean)" : "* This will set the overprint control(OP).\n     *\n     * @param op The overprint control.",
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:endMarkedContentSequence()" : null,
  "org.apache.pdfbox.cos.COSDictionary:getValues()" : "* This will get all of the values for the dictionary.\n     *\n     * @return All the values for the dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setTitlePopup(java.lang.String)" : "* Set the string used as the title of the popup window shown when open and active (by convention this identifies\n     * who added the annotation).\n     *\n     * @param t The title of the popup.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decryptDictionary(org.apache.pdfbox.cos.COSDictionary,long,long)" : "* This will decrypt a dictionary.\n     *\n     * @param dictionary The dictionary to decrypt.\n     * @param objNum The object number.\n     * @param genNum The object generation number.\n     *\n     * @throws IOException If there is an error creating a new string.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:isWhitePoint()" : "* Tests if the current point is the white point.\n     *\n     * @return true if the current point is the white point.",
  "org.apache.pdfbox.rendering.TilingPaintFactory$TilingPaintParameter:<init>(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.AffineTransform)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getName(java.lang.String,java.lang.String)" : "* Gets a name value.\n     * \n     * @param name the attribute name\n     * @param defaultValue the default value\n     * @return the name value",
  "org.apache.pdfbox.cos.COSDictionary:getBoolean(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,boolean)" : "* This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert\n     * it to a primitive boolean.\n     *\n     * @param firstKey The first key to the item in the dictionary.\n     * @param secondKey The second key to the item in the dictionary.\n     * @param defaultValue The value returned if the entry is null.\n     *\n     * @return The entry converted to a boolean.",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter:processLines(java.util.List,boolean)" : "* Process lines for output. \n     *\n     * Process lines for an individual paragraph and generate the \n     * commands for the content stream to show the text.\n     * \n     * @param lines the lines to process.\n     * @throws IOException if there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:setVisualSignature(java.io.InputStream)" : "* Reads the visual signature from the given input stream.\n     *\n     * @param is the input stream containing the visual signature\n     * @throws IOException when something went wrong during parsing",
  "org.apache.pdfbox.cos.COSBoolean:getBoolean(java.lang.Boolean)" : "* This will get the boolean value.\n     *\n     * @param value Parameter telling which boolean value to get.\n     *\n     * @return The single boolean instance that matches the parameter.",
  "org.apache.pdfbox.text.TextPosition:getWidthOfSpace()" : "* This will get the width of a space character. This is useful for some algorithms such as the\n     * text stripper, that need to know the width of a space character.\n     *\n     * @return The width of a space character.",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Adds the given property list to the resources of the current page and returns the name for\r\n     * the new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param properties the property list to add\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getSeedValueCertificate()" : "* (Optional) A certificate seed value dictionary containing information about the certificate\n     * to be used when signing.\n     *\n     * @return dictionary",
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromNull(org.apache.pdfbox.cos.COSNull)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : "* Shows the given annotation.\n     *\n     * @param annotation An annotation on the current page.\n     * @throws IOException If an error occurred reading the annotation",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:decreaseLevel()" : "* Decrease the level. Call this after running a potentially recursive operation. A log message\n     * is shown if the level is below 0. This can happen if the level is not decreased after an\n     * operation is done, e.g. by using a \"finally\" block.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextDecorationThickness()" : "* Gets the thickness of each line drawn as part of the text decoration\n     * (TextDecorationThickness).\n     * \n     * @return the text decoration thickness",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getHeight()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getCOSObject()" : "* Convert this standard java object to a COS object.\n     * @return the cos object that matches this Java object",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed:setN(java.lang.String)" : "* This will set the name of the action to be performed.\n     *\n     * @param name The name of the action to be performed.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:curveTo1(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getV()" : "* This will get a JavaScript action to be performed\n     * when the field's value is changed. This allows the\n     * new value to be checked for validity.\n     * The name V stands for \"validate\".\n     *\n     * @return The V entry of form field's additional actions dictionary.",
  "org.apache.pdfbox.filter.Predictor:decodePredictorRow(int,int,int,int,byte[],byte[])" : "* Decodes a single line of data in-place.\n     * @param predictor Predictor value for the current line\n     * @param colors Number of color components, from decode parameters.\n     * @param bitsPerComponent Number of bits per components, from decode parameters.\n     * @param columns Number samples in a row, from decode parameters.\n     * @param actline Current (active) line to decode. Data will be decoded in-place,\n     *                i.e. - the contents of this buffer will be modified.\n     * @param lastline The previous decoded line. When decoding the first line, this\n     *                 parameter should be an empty byte array of the same length as\n     *                 <code>actline</code>.",
  "org.apache.pdfbox.cos.COSArray:add(org.apache.pdfbox.cos.COSBase)" : "* This will add an object to the array.\n     *\n     * @param object The object to add to the array.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:importFDF(org.apache.pdfbox.pdmodel.fdf.FDFField)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:endMarkedContentSequence()" : "* Called when a marked content group ends",
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:getDests()" : "* Get the destination named tree node. The values in this name tree will be\n     * PDPageDestination objects.\n     *\n     * @return The destination name tree node.",
  "org.apache.pdfbox.pdmodel.encryption.RC4Cipher:setKey(byte[])" : "* This will reset the key to be used.\n     *\n     * @param key The RC4 key used during encryption.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:getVertices()" : "* This will get the coordinates of the vertices.\n     *\n     * @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setRectDifferences(float)" : "* This will set the difference between the annotations \"outer\" rectangle defined by /Rect and\n     * the border.\n     *\n     * <p>\n     * This will set an equal difference for all sides</p>\n     *\n     * @param difference from the annotations /Rect entry",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getCustomMetadataValue(java.lang.String)" : "*  This will get the value of a custom metadata information field for the document.\n     *  This will return null if one is not found.\n     *\n     * @param fieldName Name of custom metadata field from pdf document.\n     *\n     * @return String Value of metadata field",
  "org.apache.pdfbox.cos.COSArray:getString(int,java.lang.String)" : "* Get an entry in the array that is expected to be a COSName.\n     * @param index The index into the array.\n     * @param defaultValue The value to return if it is null.\n     * @return The value at the index or defaultValue if none is found.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSDictionary(java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : "* Write the given {@link COSDictionary} to the given stream.\n     *\n     * @param output The stream, that shall be written to.\n     * @param cosDictionary The content, that shall be written.",
  "org.apache.pdfbox.rendering.GroupGraphics:setTransform(java.awt.geom.AffineTransform)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getOpenInNewWindow()" : "* This will specify whether to open the destination document in a new window, in the same\n     * window, or behave in accordance with the current user preference.\n     *\n     * @return A flag specifying how to open the destination document.",
  "org.apache.pdfbox.rendering.GroupGraphics:clearRect(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getAlternateIcon()" : "* This will retrieve the alternate icon.\n     * \n     * @return the alternate icon.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getBBox()" : "* An array of four numbers in the form coordinate system (see below),\n     * giving the coordinates of the left, bottom, right, and top edges, respectively,\n     * of the form XObject's bounding box.\n     * These boundaries are used to clip the form XObject and to determine its size for caching.\n     * @return The BBox of the form.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:canPrintFaithful()" : "* This will tell if the user can print the document in a faithful format or in a degraded\n     * format (if print is enabled).\n     *\n     * @return true If supplied with the user password they are allowed to print the document in a\n     * faithful format.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawComment(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isKeyUsageRequired()" : "*\n     * @return true if the KeyUsage is required",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isLockedContents()" : "* Get the LockedContents flag.\n     *\n     * @return The LockedContents flag.\n     * @see #setLockedContents(boolean)",
  "org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.cos.COSStream)" : "* Creates a PDStream which wraps the given COSStream.\n     * \n     * @param str The stream parameter.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:<init>()" : "* Default constructor.\n     *",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getGsubData()" : "* Returns the GSubData if present.\n     * \n     * @return the GSubData if present",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getColor()" : "* This will retrieve the color used in drawing various elements. As of PDF 1.6 these are :\n     * <ul>\n     * <li>Background of icon when closed</li>\n     * <li>Title bar of popup window</li>\n     * <li>Border of a link annotation</li>\n     * </ul>\n     *\n     * @return Color object representing the colour\n     *",
  "org.apache.pdfbox.filter.ASCII85OutputStream:write(int)" : "* This will write a single byte.\n     *\n     * @param b The byte to write.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setHideMenubar(boolean)" : "* Set the menubar preference.\n     *\n     * @param value Set the menubar preference.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getNormalizedPath(int)" : null,
  "org.apache.pdfbox.rendering.PDFRenderer:renderImageWithDPI(int,float)" : "* Returns the given page as an RGB image at the given DPI.\r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param dpi the DPI (dots per inch) to render at\r\n     * @return the rendered page image\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.PDPage:getCropBox()" : "* A rectangle, expressed in default user space units, defining the visible region of default user space. When the\n     * page is displayed or printed, its contents are to be clipped (cropped) to this rectangle.\n     * \n     * @return the cropbox of the page",
  "org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:getSupplement()" : null,
  "org.apache.pdfbox.rendering.PageDrawer:isHiddenOrVisibilityExpression(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getAnnotation()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:getPage()" : "* This will get the page for this destination. A page destination can either reference a page\n     * (for a local destination) or a page number (when doing a remote destination to another PDF).\n     * If this object is referencing by page number then this method will return null and\n     * {@link #getPageNumber()} should be used.\n     *\n     * @return The page for this destination.",
  "org.apache.pdfbox.pdmodel.font.encoding.MacExpertEncoding:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getBaseFont()" : "* Returns the PostScript name of the font.\n     * \n     * @return the PostScript name of the font",
  "org.apache.pdfbox.pdfparser.COSParser:parseObjectStreamObject(long,org.apache.pdfbox.cos.COSObjectKey)" : "* Parse the object with the given key from the object stream with the given number.\n     * \n     * @param objstmObjNr the number of the offset stream\n     * @param key the key of the object to be parsed\n     * @return the parsed object\n     * @throws IOException if something went wrong when parsing the object",
  "org.apache.pdfbox.rendering.PageDrawer:closePath()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:extractNonStrokingColor(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:isHiddenOCG(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList:create(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a property list from the given dictionary.\n     * \n     * @param dict COS dictionary\n     * @return a new instance of a PDPropertyList using the given dictionary",
  "org.apache.pdfbox.pdfparser.PDFObjectStreamParser:privateReadObjectNumbers()" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:clipEvenOdd()" : "* Intersects the current clipping path with the current path, using the even-odd rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:<init>(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle)" : "* creates a new transition with the given style.\n     * \n     * @param style the style to be used to create the new transition",
  "org.apache.pdfbox.pdfparser.COSParser:parseFDFHeader()" : "* Parse the header of a fdf.\n     * \n     * @return true if a FDF header was found\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.Loader:loadFDF(java.io.File)" : "* This will load a document from a file.\n     *\n     * @param file The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to\n     * read the file.\n     *\n     * @return The document that was loaded.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:getPDStream()" : "* Returns the underlying PDStream.\n     * @return The stream.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:getRaster(int,int,int,int)" : null,
  "org.apache.pdfbox.rendering.PDFRenderer:renderPageToGraphics(int,java.awt.Graphics2D,float,float,org.apache.pdfbox.rendering.RenderDestination)" : "* Renders a given page to an AWT Graphics2D instance.\r\n     * <p>\r\n     * Known problems:\r\n     * <ul>\r\n     * <li>rendering of PDF files with transparencies is not supported on Ubuntu, see\r\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-4581\">PDFBOX-4581</a> and\r\n     * <a href=\"https://bugs.openjdk.java.net/browse/JDK-6689349\">JDK-6689349</a>. Rendering will\r\n     * not abort, but the pages will be rendered incorrectly.</li>\r\n     * <li>Clipping the Graphics2D will not work properly, see\r\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-4583\">PDFBOX-4583</a>.</li>\r\n     * </ul>\r\n     * If you encounter these problems, then you should render into an image by using the\r\n     * {@link #renderImage(int) renderImage} methods.\r\n     * \r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param graphics the Graphics2D on which to draw the page\r\n     * @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI\r\n     * @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI\r\n     * @param destination controlling visibility of optional content groups\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setAlphaConstant(double)" : "* set the value of the stroke alpha constant property.\n     *\n     * @param value The value of the stroke alpha constant parameter.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllTBorderStyles(java.lang.String)" : "* Sets the same table border style for all four sides (TBorderStyle). The\n     * value should be one of:\n     * <ul>\n     *   <li>{@link #BORDER_STYLE_NONE},</li>\n     *   <li>{@link #BORDER_STYLE_HIDDEN},</li>\n     *   <li>{@link #BORDER_STYLE_DOTTED},</li>\n     *   <li>{@link #BORDER_STYLE_DASHED},</li>\n     *   <li>{@link #BORDER_STYLE_SOLID},</li>\n     *   <li>{@link #BORDER_STYLE_DOUBLE},</li>\n     *   <li>{@link #BORDER_STYLE_GROOVE},</li>\n     *   <li>{@link #BORDER_STYLE_RIDGE},</li>\n     *   <li>{@link #BORDER_STYLE_INSET},</li>\n     *   <li>{@link #BORDER_STYLE_OUTSET}.</li>\n     * </ul>\n     * \n     * @param tBorderStyle the table border style",
  "org.apache.pdfbox.rendering.TilingPaintFactory:create(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.AffineTransform)" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)" : "* This constructor is to be used if the array doesn't exist, but is to be created and added to\n     * the parent dictionary as soon as the first element is added to the array.\n     *\n     * @param dictionary The dictionary that holds the item, and will hold the array if an item is\n     * added.\n     * @param dictionaryKey The key into the dictionary to set the item.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:setOpenInNewWindow(org.apache.pdfbox.pdmodel.interactive.action.OpenMode)" : "* This will specify whether to open the destination document in a new window.\n     *\n     * @param value The flag value.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setNonStrokeAlphaConstant(double)" : "* set the value of the non-stroke alpha constant property.\n     *\n     * @param value The value of the non-stroke alpha constant parameter.",
  "org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:calcColorTable()" : "* Calculate the color on the axial line and store them in an array.\r\n     *\r\n     * @return an array, index denotes the relative position, the corresponding\r\n     * value is the color on the axial line\r\n     * @throws IOException if the color conversion fails.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:<init>()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setSetFieldFlags(java.lang.Integer)" : "* This will set the field flags that are associated with this field.\n     * The 'SetFf' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the \"set field flags\".",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Adds the given form to the resources of the current page and returns the name for the\r\n     * new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param form the form to add\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:setStart(int)" : "* Sets the start value for page numbering in this page range.\n     * \n     * @param start\n     *            a positive integer representing the start value.\n     * @throws IllegalArgumentException\n     *             if {@code start} is not a positive integer",
  "org.apache.pdfbox.text.PDFTextStripper:getSortByPosition()" : "* This will tell if the text stripper should sort the text tokens before writing to the stream.\n     *\n     * @return true If the text tokens will be sorted before being written.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:toString()" : null,
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:<init>()" : "* Default Constructor.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,boolean,boolean,boolean)" : "* Private. Creates a new PDType0Font font for embedding.\n     *\n     * @param document\n     * @param ttf\n     * @param embedSubset\n     * @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf\n     * parameter was created in the load() method, false when the ttf parameter was passed to the\n     * load() method.\n     * @param vertical whether to enable vertical substitutions.\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setSmoothness(double)" : "* set the value of the smoothness property.\n     *\n     * @param value The value of the smoothness parameter.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setColSpan(int)" : "* Sets the number of columns in the enclosing table that shall be spanned\n     * by the cell (ColSpan).\n     * \n     * @param colSpan the column span",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setCreator(java.lang.String)" : "* This will set the creator of the document.\n     *\n     * @param creator The new creator for the document.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getColumnWidths()" : "* Gets the desired width of the columns, measured in default user space\n     * units in the inline-progression direction (ColumnWidths).\n     * \n     * @return the column widths (Float or array of floats)",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:readCode(java.io.InputStream)" : null,
  "org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:allowDestinationRange(java.lang.String,java.lang.String)" : null,
  "org.apache.pdfbox.pdfparser.COSParser:readObjectMarker()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getOptions()" : "* This will return a list of options for a choice field.\n     * The values in the list will be 1 of 2 types:<ul>\n     *     <li><code>String</code> </li>\n     *     <li>{@link FDFOptionElement}</li>\n     * </ul>\n     *\n     * @return A list of all options.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$IDiv:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getVolume()" : "* Sets the volume.\n     *\n     * @return The volume at which to play the sound, in the range −1.0 to 1.0. Default value: 1.0.",
  "org.apache.pdfbox.rendering.GroupGraphics:getClipBounds()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:getCheckedState()" : "* Gets the checked state. The default value is {@link #CHECKED_STATE_OFF}.\n     * \n     * @return the checked state",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setFilter(org.apache.pdfbox.cos.COSName)" : "* Set the filter.\n     *\n     * @param filter the filter to be used",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Create a graphics state from an existing dictionary.\n     *\n     * @param dictionary The existing graphics state.",
  "org.apache.pdfbox.pdmodel.encryption.RC4Cipher:swap(int[],int,int)" : "* This will swap two values in an array.\n     *\n     * @param data The array to swap from.\n     * @param firstIndex The index of the first element to swap.\n     * @param secondIndex The index of the second element to swap.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:isShouldProcessColorOperators()" : "* Tells whether color operators should be processed. To be used in some OperatorProcessor\n     * classes.\n     *\n     * @return true if color operators should be processed, false if not, e.g. in type3 charprocs\n     * with d1 or in uncolored tiling patterns.",
  "org.apache.pdfbox.pdmodel.PDDocument:isEncrypted()" : "* This will tell if this document is encrypted or not.\n     * \n     * @return true If this document is encrypted.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getAverageFontWidth()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a Form Image XObject for writing, in the given document.\n     * \n     * @param document The current document",
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getOutputConditionIdentifier()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getFunction()" : "* This will return the function used to convert the color values.\n     *\n     * @return the function\n     * @throws java.io.IOException if we were not able to create the function.",
  "org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String)" : "* Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams.\n     *\n     * @param randomAccessRead random access read representing the pdf to be loaded. To pass an\n     * InputStream, wrap it into a {@link RandomAccessReadBuffer}.\n     * @param password password to be used for decryption\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param alias alias to be used for decryption when using public key security\n     * \n     * @return loaded document\n     * \n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:getDocumentCatalog()" : "* This will get the document CATALOG. This is guaranteed to not return null.\n     * \n     * @return The documents /Root dictionary",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:getWidgetDefaultAppearanceString(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getContents()" : "* Get the \"contents\" of the field.\n     * \n     * @return the value of the contents.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanExtractForAccessibility(boolean)" : "* Set if the user can extract content from the document for accessibility purposes.\n     * <p>\n     * This method will have no effect if the object is in read only mode.\n     *\n     * @param allowExtraction A boolean determining if the user can extract content\n     *                        from the document.",
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:setBefore(java.lang.String)" : "* This will set the javascript code the will get execute before the import.\n     *\n     * @param before A reference to some javascript code.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:<init>()" : "* Creates a new DeviceN Process Dictionary.",
  "org.apache.pdfbox.multipdf.Overlay:loadPDFs()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:getDropThreshold()" : "* the minimum whitespace, as a multiple of the max height of the current characters beyond which the current line\n     * start is considered to be a paragraph start.\n     * \n     * @return the character height multiple for max allowed whitespace between lines in the same paragraph.",
  "org.apache.pdfbox.text.PDFTextStripper:getAverageCharTolerance()" : "* Get the current character width-based tolerance value that is being used to estimate where spaces in text should\n     * be added. Note that the default value for this has been determined from trial and error.\n     * \n     * @return The current tolerance / scaling factor",
  "org.apache.pdfbox.pdmodel.PDDocument:addSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions)" : "* This will add a signature to the document. If the 0-based page number in the options\n     * parameter is smaller than 0 or larger than max, the nearest valid page number will be used\n     * (i.e. 0 or max) and no exception will be thrown.\n     * <p>\n     * Only one signature may be added in a document. To sign several times,\n     * load document, add signature, save incremental and close again.\n     *\n     * @param sigObject is the PDSignatureField model\n     * @param signatureInterface is an interface whose implementation provides\n     * signing capabilities. Can be null if external signing if used.\n     * @param options signature options\n     * @throws IOException if there is an error creating required fields\n     * @throws IllegalStateException if one attempts to add several signature\n     * fields.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)" : "* Set the text rendering mode. This determines whether showing text shall cause glyph outlines\n     * to be stroked, filled, used as a clipping boundary, or some combination of the three.\n     *\n     * @param rm The text rendering mode.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setMiterLimit(float)" : "* Set the miter limit.\n     *\n     * @param miterLimit the new miter limit.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is \\u2264 0.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:transform(java.awt.geom.AffineTransform)" : "* \n     * @param affineTransform the affine transformation\n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getCOSObject()" : "* This will get the underlying dictionary that this class acts on.\n     *\n     * @return The underlying dictionary for this class.",
  "org.apache.pdfbox.filter.FlateFilterDecoderStream:fetch()" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:saveGraphicsState()" : "* Pushes the current graphics state to the stack.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:setBorderEffect(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary)" : "* This will set the border effect dictionary, specifying effects to be applied when drawing the\n     * line. This is supported by PDF 1.5 and higher.\n     *\n     * @param be The border effect dictionary to set.\n     *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:insertInnerFormToHolderResources(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject,org.apache.pdfbox.pdmodel.PDResources)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setStructParent(int)" : "* Sets the key of this XObject in the structural parent tree.\r\n     * @param key the new key for this XObject",
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:getName()" : "* This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is\n     * NOTE.\n     *\n     * @return The name of this annotation, see the NAME_XXX constants.",
  "org.apache.pdfbox.multipdf.Splitter:cloneRoleMap(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:setIntensity(float)" : "* This will set the intensity of the applied effect.\n     *\n     * @param i the intensity of the effect values 0 to 2",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:toString()" : null,
  "org.apache.pdfbox.cos.COSString:<init>(byte[],boolean)" : "* Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file,\n     * or to create a new byte string.\n     *\n     * @param bytes The raw bytes of the PDF text string or byte string.\n     * @param forceHex forces the hexadecimal presentation of the string if set to true\n     *",
  "org.apache.pdfbox.cos.COSDocument:getLinearizedDictionary()" : "* Get the dictionary containing the linearization information if the pdf is linearized.\n     * \n     * @return the dictionary containing the linearization information",
  "org.apache.pdfbox.cos.COSBoolean:writePDF(java.io.OutputStream)" : "* This will write this object out to a PDF stream.\n     *\n     * @param output The stream to write this object out to.\n     *\n     * @throws IOException If an error occurs while writing out this object.",
  "org.apache.pdfbox.rendering.PageDrawer:isRectangular(java.awt.geom.GeneralPath)" : "* Returns true if the given path is rectangular.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingContext:dispose()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:setDecodeValues(org.apache.pdfbox.cos.COSArray)" : "* This will set the decode values.\n     *\n     * @param decodeValues the new decode values",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setFlyAreaOpaque(boolean)" : "* @param opaque If true, the area that shall be flown in is rectangular and opaque. Only for\n     * {@link PDTransitionStyle#Fly}.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getParentTree()" : "* Returns the parent tree.<p>\n     * The keys correspond to a single page of the document or to an individual object, e.g. an\n     * annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b>\n     * entry.<p>\n     * The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a\n     * dictionary for individual objects like an annotation or an XObject, and an array for a page\n     * object or a content stream containing marked-content sequences identified by an MCID.\n     *\n     * @return the parent tree.",
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:isSeparableBlendMode()" : "* Determines if the blend mode is a separable blend mode.\r\n     * \r\n     * @return true for separable blend modes",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeObjectsToStream(org.apache.pdfbox.cos.COSStream)" : "* Writes all prepared {@link COSObject}s to the given {@link COSStream}.\n     *\n     * @param stream The stream for the compressed objects.\n     * @return The given {@link COSStream} of this object stream.\n     * @throws IOException Shall be thrown, if writing the object stream failed.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:inverse(float)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:getStartPage()" : "* This is the page that the text extraction will start on. The pages start at page 1. For example in a 5 page PDF\n     * document, if the start page is 1 then all pages will be extracted. If the start page is 4 then pages 4 and 5 will\n     * be extracted. The default value is 1.\n     *\n     * @return Value of property startPage.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getGroup(java.lang.String)" : "* Returns the first optional content group of the given name.\n     *\n     * @param name the group name\n     * @return the optional content group or null, if there is no such group",
  "org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setCombo(boolean)" : "* Set the Combo bit.\n     *\n     * @param combo The value for Combo.",
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getXHeight()" : null,
  "org.apache.pdfbox.pdfparser.BruteForceParser:isInfo(org.apache.pdfbox.cos.COSDictionary)" : "* Tell if the dictionary is an info dictionary.\n     * \n     * @param dictionary the dictionary to be checked\n     * @return true if the given dictionary is an info dictionary",
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:setOnNewLine(boolean)" : "* This will set a flag telling if we are on a newline.\n     *\n     * @param newOnNewLine The new value for the onNewLine attribute.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitDestination:fitBoundingBox()" : "* A flag indicating if this page destination should just fit bounding box of the PDF.\n     *\n     * @return true If the destination should fit just the bounding box.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setAppearanceCharacteristics(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary)" : "* Sets the appearance characteristics dictionary.\n     * \n     * @param appearanceCharacteristics the appearance characteristics dictionary",
  "org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:<init>(org.apache.pdfbox.cos.COSString)" : "* Constructor.\n     *\n     * @param dest The named destination.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setWordSpacing(float)" : "* Set the word spacing. The value shall be added to the horizontal or vertical component of the\n     * ASCII SPACE character, depending on the writing mode.\n     * <p>\n     * This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF\n     * specification tells why: \"Word spacing shall be applied to every occurrence of the\n     * single-byte character code 32 in a string when using a simple font or a composite font that\n     * defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32\n     * in multiple-byte codes.\"\n     *\n     * @param spacing word spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.PDDocument:setAllSecurityToBeRemoved(boolean)" : "* Activates/Deactivates the removal of all security when writing the pdf.\n     * \n     * @param removeAllSecurity remove all security if set to true",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getCodePageRange2()" : null,
  "org.apache.pdfbox.util.DateConverter:parseTZoffset(java.lang.String,java.util.GregorianCalendar,java.text.ParsePosition)" : null,
  "org.apache.pdfbox.cos.COSArray:getInt(int)" : "* Get the value of the array as an integer.\n     *\n     * @param index The index into the list.\n     *\n     * @return The value at that index or -1 if does not exist.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setWidth(int)" : "* Sets the width of the element’s content rectangle in the\n     * inline-progression direction (Width).\n     * \n     * @param width the width",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceRGBColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : "* RG Set the stroking colour space to DeviceRGB and set the colour to\n     * use for stroking operations.\n     *\n     * @param operator The operator that is being executed.\n     * @param arguments List\n     * @throws IOException If the color space cannot be read.",
  "org.apache.pdfbox.text.PDFTextStripper:writeWordSeparator()" : "* Write the word separator value to the output stream.\n     * \n     * @throws IOException If there is a problem writing out the word separator to the document.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:setFontSize(float)" : "* Set the font size.\n     * \n     * @param fontSize the font size.",
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getRGBImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.Rectangle,int,org.apache.pdfbox.cos.COSArray)" : "* Returns the content of the given image as an AWT buffered image with an RGB color space.\r\n     * If a color key mask is provided then an ARGB image is returned instead.\r\n     * This method never returns null.\r\n     * @param pdImage the image to read\r\n     * @param region The region of the source image to get, or null if the entire image is needed.\r\n     *               The actual region will be clipped to the dimensions of the source image.\r\n     * @param subsampling The amount of rows and columns to advance for every output pixel, a value\r\n     * of 1 meaning every pixel will be read. It must not be larger than the image width or height.\r\n     * @param colorKey an optional color key mask\r\n     * @return content of this image as an (A)RGB buffered image\r\n     * @throws IOException if the image cannot be read",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:getOnValues()" : "* Get the values to set individual buttons within a group to the on state.\n     * \n     * <p>The On value could be an arbitrary string as long as it is within the limitations of\n     * a PDF name object. The Off value shall always be 'Off'. If not set or not part of the normal\n     * appearance keys 'Off' is the default</p>\n     *\n     * @return the potential values setting the check box to the On state. \n     *         If an empty Set is returned there is no appearance definition.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getCurrentTransformationMatrix()" : "* Get the value of the CTM.\n     *\n     * @return The current transformation matrix.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:setT(org.apache.pdfbox.cos.COSBase)" : "* @param t annotation or annotations",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:isEmbedded()" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setMacCreator(java.lang.String)" : "* Set the mac Creator.\n     *\n     * @param macCreator The mac Creator.",
  "org.apache.pdfbox.pdfparser.BaseParser:skipWhiteSpaces()" : "* Skip the upcoming CRLF or LF which are supposed to follow a stream. Trailing spaces are removed as well.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getHighestXRefObjectNumber()" : "* Returns the highest object number, that is registered in this compression pool.\n     *\n     * @return The highest object number, that is registered in this compression pool.",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:setNumbers(java.util.Map)" : "* Set the numbers for this node. This method will set the appropriate upper and lower limits\n     * based on the keys in the map and take care of the ordering.\n     *\n     * @param numbers The map of numbers to objects, or <code>null</code> for nothing.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getJPEGImageWriter()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:<init>()" : "* Default constructor.\n     *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setBorderColour(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* This will set the border color.\n     * \n     * @param c the border color",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:yAxis(float)" : "*\n     * @param yAxis y coordinate\n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.contentstream.operator.Operator:getName()" : "* This will get the name of the operator.\n     *\n     * @return The string representation of the operation.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:setPatternType(int)" : "* This will set the pattern type.\n     * @param patternType The new pattern type.",
  "org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdfparser.PDFXRefStream:addTrailerInfo(org.apache.pdfbox.cos.COSDictionary)" : "* Copy all Trailer Information to this file.\n     * \n     * @param trailerDict dictionary to be added as trailer info",
  "org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Index:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.cos.COSInteger:getInvalid(boolean)" : null,
  "org.apache.pdfbox.contentstream.operator.Operator:setImageParameters(org.apache.pdfbox.cos.COSDictionary)" : "* This will set the image parameters, this is only valid for BI operators.\n     *\n     * @param params The image parameters.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getStartPointEndingStyle()" : "* This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section.\n     *\n     * @return The ending style for the start point, LE_NONE if missing, never null.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processTilingPattern(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColor,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Process the given tiling pattern.\n     *\n     * @param tilingPattern the tiling pattern\n     * @param color color to use, if this is an uncoloured pattern, otherwise null.\n     * @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null.\n     * @throws IOException if there is an error reading or parsing the tiling pattern content stream.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setDisplayDocTitle(boolean)" : "* Set the display doc title preference.\n     *\n     * @param value Set the display doc title preference.",
  "org.apache.pdfbox.text.PDFTextStripper:writeLine(java.util.List)" : "* Write a list of string containing a whole line of a document.\n     * \n     * @param line a list with the words of the given line\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)" : "* Constructor creates an instance to be used for fill operations.\n     *\n     * @param shading the shading type to be used\n     * @param cm the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:setCatalog(org.apache.pdfbox.pdmodel.fdf.FDFCatalog)" : "* This will set the FDF catalog for this FDF document.\n     *\n     * @param cat The FDF catalog.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getRelationship()" : "* Get the relationship between the current document and the target (which may be an\n     * intermediate target).\n     *\n     * @return the relationship as a name. Valid values are P (the target is the parent of the\n     * current document) and C (the target is a child of the current document). Invalid values or\n     * null are also returned.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeOperand(float)" : "* Writes a real number to the content stream.\n     * \n     * @param real the real number to be added to the content stream\n     * \n     * @throws IOException If the underlying stream has a problem being written to.\n     * @throws IllegalArgumentException if the parameter is not a finite number",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:setDecodeValues(org.apache.pdfbox.cos.COSArray)" : "* This will set the decode values.\n     *\n     * @param decodeValues the new decode values",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination)" : "* The new destination value. Either this or the action entry should be set, but not both.\n     *\n     * @param dest The updated destination.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getTransfer()" : "* This will get the transfer function of the /TR dictionary.\n     *\n     * @return The transfer function. According to the PDF specification, this is either a single\n     * function (which applies to all process colorants) or an array of four functions (which apply\n     * to the process colorants individually). The name Identity may be used to represent the\n     * identity function.",
  "org.apache.pdfbox.text.PDFTextStripper:getLineSeparator()" : "* This will get the line separator.\n     *\n     * @return The desired line separator string.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImageFormResources()" : "* Gets image form resources\n     * @return the image form's resources",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEBasedColorSpace:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.util.Vector:getY()" : "* Returns the y magnitude.\n     * \n     * @return the y magnitude",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getSpaceAfter()" : "* Gets the amount of extra space following the after edge of the BLSE in\n     * the block-progression direction (SpaceAfter). The default value is 0.\n     * \n     * @return the space after",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:fromDictionary(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Creates a COSField subclass from the given COS field. This is for reading fields from PDFs.\n     *\n     * @param form the form that the field is part of\n     * @param field the dictionary representing a field element\n     * @param parent the parent node of the node to be created, or null if root.\n     * @return a new PDField instance",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setTemplate(org.apache.pdfbox.pdmodel.PDDocument)" : "* Wets PDDocument template. This represents a digital signature that can be attached to a document\n     * \n     * @param template the document used as template",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setE(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the cursor\n     * enters the annotation's active area.\n     *\n     * @param e The action to be performed.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getSuffix()" : "* This will get the suffix for this image type, e.g. jpg/png.\r\n     * @return The image suffix or null if not available.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setCharacterSpacing(float)" : "* Set the character spacing. The value shall be added to the horizontal or vertical component\n     * of the glyph's displacement, depending on the writing mode.\n     *\n     * @param spacing character spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:getAFM(java.lang.String)" : "* Returns the metrics for font specified by fontName. Loads the font metrics if not already\r\n     * loaded.\r\n     *\r\n     * @param fontName name of font; either a base name or alias\r\n     * @return the font metrics or null if the name is not one of the known names\r\n     * @throws IllegalArgumentException if no metrics exist for that font.",
  "org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Bitshift:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRowType2()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getBitsPerComponent()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.cos.COSArray:<init>(java.util.ArrayList,boolean)" : null,
  "org.apache.pdfbox.cos.COSArray:growToSize(int)" : "* This will add null values until the size of the array is at least\n     * as large as the parameter.  If the array is already larger than the\n     * parameter then nothing is done.\n     *\n     * @param size The desired size of the array.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:create(org.apache.pdfbox.cos.COSDictionary)" : "* Creates an attribute object.\n     * \n     * @param dictionary the dictionary\n     * @return the attribute object",
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : null,
  "org.apache.pdfbox.filter.Filter:getDecodeParams(org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isLocked()" : "* Get the locked flag.\n     *\n     * @return The locked flag.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawInsert(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:<init>(java.lang.String,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode)" : "* Constructor with required values.\n     *\n     * @param structureType The structure type. Constants are available in the\n     * {@link StandardStructureTypes} class.\n     * @param parent The parent structure node.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getWordSpacing()" : "* Get the value of the wordSpacing.\n     *\n     * @return The wordSpacing.",
  "org.apache.pdfbox.cos.COSArray:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$And:applyForBoolean(boolean,boolean)" : null,
  "org.apache.pdfbox.util.Matrix:getShearY()" : "* Returns the y-shear element of this matrix.\n     * \n     * @return the y-shear element of the matrix",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:popResources(org.apache.pdfbox.pdmodel.PDResources)" : "* Pops the current resources, replacing them with the given resources.",
  "org.apache.pdfbox.pdmodel.PDPage:getThreadBeads()" : "* This will get a list of PDThreadBead objects, which are article threads in the document. This\n     * will return an empty list if there are no thread beads.\n     *\n     * @return A list of article threads on this page, never null. The returned list is backed by\n     * the beads COSArray, so any adding or deleting in this list will change the document too.",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:isSymbolic()" : "* Returns true if the font is a symbolic (that is, it does not use the Adobe Standard Roman character set).\r\n     * \r\n     * @return true if the font is a symbolic",
  "org.apache.pdfbox.util.DateConverter:skipString(java.lang.String,java.lang.String,java.text.ParsePosition)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildToUnicodeCMap(java.util.Map)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor\n     *\n     * @param a the action dictionary",
  "org.apache.pdfbox.pdfwriter.COSWriter:write(org.apache.pdfbox.pdmodel.fdf.FDFDocument)" : "* This will write the fdf document.\n     *\n     * @param doc The document to write.\n     *\n     * @throws IOException If an error occurs while generating the data.",
  "org.apache.pdfbox.pdfwriter.compress.COSObjectPool:getObject(org.apache.pdfbox.cos.COSObjectKey)" : "* Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey}, or null if no object is\n     * registered for that key.\n     *\n     * @param key The {@link COSObjectKey} a registered {@link COSBase} shall be found for.\n     * @return The {@link COSBase}, that is registered for the given {@link COSObjectKey}, or null if no object is\n     * registered for that key.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getFlatnessTolerance()" : "* This will get the flatness tolerance.\n     *\n     * @return The flatness tolerance or null if one has not been set.",
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:setFractionalSpaceToAllocate(org.apache.pdfbox.pdmodel.common.PDRange)" : "* This will set frational space to allocate.\n     *\n     * @param space The space to allocate.",
  "org.apache.pdfbox.pdmodel.common.PDRange:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.printing.PDFPrintable:print(java.awt.Graphics,java.awt.print.PageFormat,int)" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:<init>(java.util.List,org.apache.pdfbox.cos.COSArray)" : "* Create the COSArrayList specifying the List and the backing COSArray.\n     * \n     * <p>User of this constructor need to ensure that the entries in the List and\n     * the backing COSArray are matching i.e. the COSObject of the List entry is\n     * included in the COSArray.\n     *   \n     * <p>If the number of entries in the List and the COSArray differ\n     * it is assumed that the List has been filtered. In that case the COSArrayList\n     * shall only be used for reading purposes and no longer for updating.\n     * \n     * @param actualList The list of standard java objects\n     * @param cosArray The COS array object to sync to.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:lineTo(float,float)" : "* Draw a line from the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setNonFullScreenPageMode(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$NON_FULL_SCREEN_PAGE_MODE)" : "* Set the non full screen page mode preference.\n     *\n     * @param value Set the non full screen page mode preference.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:<init>(org.apache.pdfbox.cos.COSName,java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:appendRawCommands(java.io.OutputStream,java.lang.String)" : null,
  "org.apache.pdfbox.util.DateConverter:parseBigEndianDate(java.lang.String,java.text.ParsePosition)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:drawPaperclip(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : "* Draw a paperclip. Shape is from\n     * <a href=\"https://raw.githubusercontent.com/Iconscout/unicons/master/svg/line/paperclip.svg\">Iconscout</a>\n     * (Apache licensed).\n     *\n     * @param contentStream\n     * @throws IOException",
  "org.apache.pdfbox.pdfwriter.compress.CompressParameters:<init>(int)" : "* Sets the number of objects, that can be contained in compressed object streams. Higher object stream sizes may\n     * cause PDF readers to slow down during the rendering of PDF documents, therefore a reasonable value should be\n     * selected. A value of 0 disables the compression.\n     *\n     * @param objectStreamSize The number of objects, that can be contained in compressed object streams.\n     *",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:intersectClippingPath(java.awt.geom.GeneralPath)" : "* Modify the current clipping path by intersecting it with the given path.\n     * @param path path to intersect with the clipping path",
  "org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getPatchCoordinatesColor(org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve,org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve,org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve,org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve)" : null,
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:<init>(java.io.File,org.apache.pdfbox.pdmodel.font.FontFormat,java.lang.String,org.apache.pdfbox.pdmodel.font.CIDSystemInfo,int,int,int,int,int,byte[],org.apache.pdfbox.pdmodel.font.FileSystemFontProvider,java.lang.String,long)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils$KeyValue:getKey()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getOperation()" : "* Get the operation to perform on the file.  This method will not return null,\n     * OPERATION_OPEN is the default.\n     *\n     * @return The operation to perform for the file.\n     * @see PDWindowsLaunchParams#OPERATION_OPEN\n     * @see PDWindowsLaunchParams#OPERATION_PRINT",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter:<init>(org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* This will set the file in which the destination is located.\n     *\n     * @param fs The file specification.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNumberOrArrayOfNumber(java.lang.String,float)" : "* Gets a number or an array of numbers.\n     * \n     * @param name the attribute name\n     * @param defaultValue the default value\n     * @return a Float or an array of floats",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getAverageCharacterWidth()" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildWidths(java.util.TreeMap)" : "* Builds widths with a custom CIDToGIDMap (for embedding font subset).",
  "org.apache.pdfbox.filter.DecodeResult:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShading,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : "* Constructor creates an instance to be used for fill operations.\n     *\n     * @param shading the shading type to be used\n     * @param colorModel the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSound:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getMetadataKeys()" : "* This will get the keys of all metadata information fields for the document.\n     *\n     * @return all metadata key strings.\n     * @since Apache PDFBox 1.3.0",
  "org.apache.pdfbox.pdfparser.BaseParser:readInt()" : "* This will read an integer from the stream.\n     *\n     * @return The integer that was read from the stream.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.font.CIDSystemInfo:getOrdering()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:setColor(java.awt.Color)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:getD()" : null,
  "org.apache.pdfbox.util.filetypedetector.ByteTrie$ByteTrieNode:getValue()" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:getStandardOutput()" : "* This will get the standard output stream.\n     *\n     * @return The standard output stream.",
  "org.apache.pdfbox.multipdf.Splitter:split(org.apache.pdfbox.pdmodel.PDDocument)" : "* This will take a document and split into several other documents.\n     *\n     * @param document The document to split.\n     *\n     * @return A list of all the split documents. These should all be saved before closing any\n     * documents, including the source document. Any further operations should be made after\n     * reloading them, to avoid problems due to resource sharing. For the same reason, they should\n     * not be saved with encryption.\n     *\n     * @throws IOException If there is an IOError",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:setURL(java.lang.String)" : "* Sets the URL.\n     * @param url the URL to be set as URL",
  "org.apache.pdfbox.filter.CryptFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setOptionalContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Sets the optional content group or optional content membership dictionary.\n     *\n     * @param oc The optional content group or optional content membership dictionary.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setWordSpacing(float)" : "* Set the word spacing. The value shall be added to the horizontal or vertical component of the\n     * ASCII SPACE character, depending on the writing mode.\n     * <p>\n     * This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF\n     * specification tells why: \"Word spacing shall be applied to every occurrence of the\n     * single-byte character code 32 in a string when using a simple font or a composite font that\n     * defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32\n     * in multiple-byte codes.\"\n     *\n     * @param spacing word spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(java.awt.Color)" : "* Set the stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a new ICC color space with an empty stream.\n     * @param doc the document to store the ICC data",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getBBox()" : "* Returns the <code>BBox</code> entry (bounding box) for the\n     * appearance stream form XObject.\n     *\n     * @return Bounding box for appearance stream form XObject.",
  "org.apache.pdfbox.cos.COSName:writePDF(java.io.OutputStream)" : "* This will output this string as a PDF object.\n     * \n     * @param output The stream to write to.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.filter.Predictor$PredictorOutputStream:write(byte[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:getValue()" : "* Returns the selected value.\n     * \n     * <p>Off is the default value which will also be returned if the\n     * value hasn't been set at all.\n     * \n     * @return A non-null string.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTPaddings(float[])" : "* Sets the table paddings for four sides separately (TPadding).\n     * \n     * @param tPaddings the table paddings (an array of four floats)",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:getOCGs()" : "* Get a list of optional content groups.\n     * \n     * @return List of optional content groups, never null.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setPrintClip(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY)" : "* Set the PrintClip preference.  See BOUNDARY enumeration.\n     *\n     * @param value Set the PrintClip preference.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:setMappingName(java.lang.String)" : "* This will set the mapping name of the field.\n     * \n     * @param mappingName the mapping name of the field",
  "org.apache.pdfbox.cos.COSUpdateState:toIncrement()" : "* Uses the managed {@link #updateInfo} as the base object of a new {@link COSIncrement}.\n     *\n     * @return A {@link COSIncrement} based on the managed {@link #updateInfo}.\n     * @see COSUpdateInfo\n     * @see COSIncrement",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getIssuer()" : "* Returns list of array of bytes of DER-encoded X.509v3 certificates\n     * \n     * @return list of array of bytes of DER-encoded X.509v3 certificates",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextDecorationColor(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the colour to be used for drawing text decorations\n     * (TextDecorationColor).\n     * \n     * @param textDecorationColor the text decoration colour",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setRectDifference(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the rectangle difference rectangle. Giving the difference between the\n     * annotations rectangle and where the drawing occurs. (To take account of any effects applied\n     * through the BE entry for example)\n     *\n     * @param rd the rectangle difference\n     *",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createPage(org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getSize()" : "* Get the size of the embedded file.\n     *\n     * @return The size of the embedded file.",
  "org.apache.pdfbox.filter.DecodeResult:setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setCharacterSpacing(float)" : "* Set the character spacing. The value shall be added to the horizontal or vertical component\n     * of the glyph's displacement, depending on the writing mode.\n     *\n     * @param spacing character spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:getFontSize()" : "* Get the fontSize used for text formatting.\n     * \n     * @return the fontSize used for text formatting.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:setTransformationMatrix(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:fillAndStrokeEvenOdd()" : "* Fill and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall produce the same result as constructing two identical path objects, painting\n     * the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.rendering.PDFRenderer:renderPageToGraphics(int,java.awt.Graphics2D,float,float)" : "* Renders a given page to an AWT Graphics2D instance.\r\n     * <p>\r\n     * Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)}\r\n     * before using this.\r\n     *\r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param graphics the Graphics2D on which to draw the page\r\n     * @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI\r\n     * @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.rendering.PageDrawer:getStroke()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:setTargetDirectory(org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory)" : "* Sets the target directory.\n     * \n     * @param targetDirectory the target directory",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getArcSegment(double,double,double,double,double,double,java.util.ArrayList,boolean)" : "* Creates a single Bézier curve that represents a section of an elliptical\n     * arc. The sweep angle of the section must not be larger than 90 degrees.\n     * If argument `out` is null, this writes the results to the instance\n     * variable `output`.",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:setArticleStart()" : "* Sets the isArticleStart() flag to true.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:getCOSObject()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:getGlyphList()" : "* Returns the glyphlist.\r\n     * \r\n     * @return the glyphlist",
  "org.apache.pdfbox.rendering.PageDrawer:drawPage(java.awt.Graphics2D,org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Draws the page to the requested context.\r\n     * \r\n     * @param g The graphics context to draw onto.\r\n     * @param pageSize The size of the page to draw.\r\n     * @throws IOException If there is an IO error while drawing the page.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getCOSObject()" : "* Interface method for COSObjectable.\n     * \n     * @return This object as a standard COS object.",
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getGlyphBBox()" : "* Calculate the bounding box of this glyph. This will work only if the first operator in the\n     * stream is d1.\n     *\n     * @return the bounding box of this glyph, or null if the first operator is not d1.\n     * @throws IOException If an io error occurs while parsing the stream.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getNumberOfColorComponents()" : "* The number of color components of this shading.\n     *\n     * @return number of color components of this shading\n     * \n     * @throws IOException if the data could not be read",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getLocation()" : "* Returns the CPU host name or physical location of the signing.\n     *\n     * @return the location",
  "org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSName)" : "* Constructor. Reads all data from the input stream and embeds it into the document with the\n     * given filter applied. This method closes the InputStream.\n     *\n     * @param doc The document that will hold the stream.\n     * @param input The stream parameter.\n     * @param filter Filter to apply to the stream.\n     * @throws IOException If there is an error creating the stream in the document.",
  "org.apache.pdfbox.util.XMLUtil:<init>()" : "* Utility class, should not be instantiated.\n     *",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getConversionFactor()" : "* This will return the conversion factor.\r\n     * \r\n     * @return the conversion factor",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getDownAppearance()" : "* Get the annotations down appearance.\n     * \n     * <p>\n     * This will get the annotations down appearance. If this is not existent an\n     * empty appearance entry will be created.\n     * \n     * @return the appearance entry representing the down appearance.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:prepareNormalAppearanceStream(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)" : "* Constructor creates an instance to be used for fill operations.\r\n     *\r\n     * @param shading the shading type to be used\r\n     * @param colorModel the color model to be used\r\n     * @param xform transformation for user to device space\r\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\r\n     * @param deviceBounds the bounds of the area to paint, in device units\r\n     * @throws IOException if there is an error getting the color space or doing color conversion.",
  "org.apache.pdfbox.cos.COSInteger:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setRevision(int)" : "* This will set the R entry of the encryption dictionary.<br><br>\n     * See PDF Reference 1.4 Table 3.14.  <br><br>\n     *\n     * <b>Note: This value is used to decrypt the pdf document.  If you change this when\n     * the document is encrypted then decryption will fail!.</b>\n     *\n     * @param revision The new encryption version.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setDate(java.lang.String)" : "* The annotation modification date.\n     *\n     * @param date The date to store in the FDF annotation.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setParent(org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField)" : "* Set the parent field of a widget annotation. This is only required if this widget annotation\n     * is one of multiple children in a field, and not to be set otherwise. You will usually not\n     * need this, because in most cases, fields have only one widget and share a common dictionary.\n     * A usage can be found in the CreateMultiWidgetsForm example.\n     *\n     * @param field the parent field.\n     * @throws IllegalArgumentException if setParent() was called for a field that shares a\n     * dictionary with its only widget.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getSubtype()" : "* Get the subtype(mimetype) for the embedded file.\n     *\n     * @return The type of embedded file.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeEncryptedKeyRev234(byte[],byte[],int,byte[],boolean,int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getCOSObject()" : "* Convert this standard java object to a COS dictionary.\n     *\n     * @return The COS dictionary that matches this Java object.",
  "org.apache.pdfbox.cos.COSDocument:addXRefTable(java.util.Map)" : "* Populate XRef HashMap with given values.\n     * Each entry maps ObjectKeys to byte offsets in the file.\n     * @param xrefTableValues  xref table entries to be added",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setMiterLimit(float)" : "* Set the miter limit.\n     *\n     * @param miterLimit the new miter limit.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is \\u2264 0.",
  "org.apache.pdfbox.contentstream.operator.state.Save:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.filter.DecodeResult:<init>(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(float)" : "* Set the stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getStructureTreeRoot()" : "* Returns the structure tree root.\n     * \n     * @return the structure tree root",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getStringFilterName()" : "* Returns the name of the filter which is used for de/encrypting strings.\n     * Default value is \"Identity\".\n     * \n     * @return the name of the filter",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeKEntries(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromFile(org.apache.pdfbox.pdmodel.PDDocument,java.io.File)" : "* Creates a new CCITT Fax compressed image XObject from the first image of a TIFF file. Only\r\n     * single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF\r\n     * files you have, use\r\n     * {@link LosslessFactory#createFromImage(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage)}\r\n     * or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) }\r\n     * instead.\r\n     *\r\n     * @param document the document to create the image as part of.\r\n     * @param file the  TIFF file which contains a suitable CCITT compressed image\r\n     * @return a new Image XObject\r\n     * @throws IOException if there is an error reading the TIFF data.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)" : "* Begin a marked content sequence with a reference to the marked content identifier (MCID).\n     *\n     * @param tag the tag to be added to the content stream\n     * @param mcid the marked content identifier (MCID)\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:<init>()" : "* Default Constructor.\n     *",
  "org.apache.pdfbox.pdmodel.font.CIDFontMapping:<init>(org.apache.fontbox.ttf.OpenTypeFont,org.apache.fontbox.FontBoxFont,boolean)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:doNotScroll()" : "* @return true if the field is not suppose to scroll.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setStartColour(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the colour for the start edge.\n     * \n     * @param colour the colour for the start edge",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setValue(java.lang.Object)" : "* You should pass a String, or a List&lt;String&gt; to set the value.\n     *\n     * @param value The value that should populate when imported.\n     *\n     * @throws IOException If there is an error setting the value.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:buildDecodeParams(org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.font.FontCache:addFont(org.apache.pdfbox.pdmodel.font.FontInfo,org.apache.fontbox.FontBoxFont)" : "* Adds the given FontBox font to the cache.\n     * \n     * @param info the FontInfo to be used as key\n     * @param font the font to be cached",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:getFontDescriptor()" : "* Returns the font descriptor.",
  "org.apache.pdfbox.pdmodel.font.encoding.MacRomanEncoding:<init>()" : "* Constructor.",
  "org.apache.pdfbox.cos.COSIncrement:addProcessedObject(org.apache.pdfbox.cos.COSObject)" : "* The given {@link COSObject} has been processed, or is being processed. It shall be added to\n     * {@link #processedObjects} to skip it, should it be encountered again.<br>\n     * {@code null} values shall be ignored.\n     *\n     * @param base The {@link COSObject} to add to {@link #processedObjects}.\n     * @see #processedObjects",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Set the page that this bead is part of.  This is a required property and must be\n     * set when creating a new bead.  The PDPage object also has a list of beads in the natural\n     * reading order.  It is recommended that you add this object to that list as well.\n     *\n     * @param page The page that this bead is on.",
  "org.apache.pdfbox.text.PDFTextStripper:startArticle(boolean)" : "* Start a new article, which is typically defined as a column on a single page (also referred to as a bead).\n     * Default implementation is to do nothing. Subclasses may provide additional information.\n     *\n     * @param isLTR true if primary direction of text is left to right.\n     * @throws IOException If there is any error writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setGroup(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes)" : "* Sets the transparency group attributes dictionary.\n     *\n     * @param group a transparency group attributes dictionary.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)" : "* Draw an image at the origin with the given transformation matrix.\n     *\n     * @param image The image to draw.\n     * @param matrix The transformation matrix to apply to the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDPage:getRotation()" : "* Returns the rotation angle in degrees by which the page should be rotated\n     * clockwise when displayed or printed. Valid values in a PDF must be a\n     * multiple of 90.\n     *\n     * @return The rotation angle in degrees in normalized form (0, 90, 180 or\n     * 270) or 0 if invalid or not set at this level.",
  "org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:<init>()" : "* Default constructor",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing document outline.\n     *\n     * @param dic The storage dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:addPath(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,java.awt.geom.GeneralPath)" : null,
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getBytes()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.rendering.PageDrawer:transferClip(java.awt.Graphics2D)" : "* Transfer clip to the destination device. Override this if you want to avoid to do slow\r\n     * intersecting operations but want the destination device to do this (e.g. SVG). You can get\r\n     * the individual clippings via {@link PDGraphicsState#getCurrentClippingPaths()}. See\r\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-5258\">PDFBOX-5258</a> for sample code.\r\n     *\r\n     * @param graphics graphics device",
  "org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.PDXObject)" : "* Sets the XObject resource with the given name.\r\n     *\r\n     * @param name the name of the resource\r\n     * @param xobject the XObject to be added",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createAppearanceDictionary(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject,org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField)" : null,
  "org.apache.pdfbox.rendering.PDFRenderer:transform(java.awt.Graphics2D,int,org.apache.pdfbox.pdmodel.common.PDRectangle,float,float)" : null,
  "org.apache.pdfbox.multipdf.Overlay:createStream(java.lang.String)" : null,
  "org.apache.pdfbox.filter.FilterFactory:getFilter(java.lang.String)" : "* Returns a filter instance given its name as a string.\n     * @param filterName the name of the filter to retrieve\n     * @return the filter that matches the name\n     * @throws IOException if the filter name was invalid",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:getURL()" : "* Returns the URL.\n     * \n     * @return the URL",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:createFontDescriptor(org.apache.fontbox.ttf.TrueTypeFont)" : "* Creates a new font descriptor dictionary for the given TTF.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : "* Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a\n     * font for AcroForm, then use the 3-parameter constructor instead.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param input An input stream of a TrueType font. It will be closed before returning.\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font stream.",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:setHangingIndent()" : "* Sets the isHangingIndent() flag to true.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getWC()" : "* This will get a JavaScript action to be performed\n     * before closing a document.\n     * The name WC stands for \"will close\".\n     *\n     * @return The WC entry of document catalog's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:<init>()" : "* Default constructor.\n     *",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getCreationDate()" : "* The annotation create date.\n     *\n     * @return The date of the creation of the annotation date\n     *\n     * @throws IOException If there is an error converting the string to a Calendar object.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:getSubtype()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:setStartPointEndingStyle(java.lang.String)" : "* This will set the line ending style for the start point, see the LE_ constants for the possible values.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setRubyAlign(java.lang.String)" : "* Sets the justification of the lines within a ruby assembly (RubyAlign).\n     * The value should be one of:\n     * <ul>\n     *   <li>{@link #RUBY_ALIGN_START},</li>\n     *   <li>{@link #RUBY_ALIGN_CENTER},</li>\n     *   <li>{@link #RUBY_ALIGN_END},</li>\n     *   <li>{@link #RUBY_ALIGN_JUSTIFY},</li>\n     *   <li>{@link #RUBY_ALIGN_DISTRIBUTE},</li>\n     * </ul>\n     * \n     * @param rubyAlign the ruby alignment",
  "org.apache.pdfbox.pdmodel.font.UniUtil:<init>()" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareEncryptionDictAES(org.apache.pdfbox.pdmodel.encryption.PDEncryption,org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getLeaderLength()" : "* This will retrieve the length of the leader line.\n     * \n     * @return the length of the leader line",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getNonStrokingColor()" : "* Returns the non-stroking color.\n     *\n     * @return The non-stroking color",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:getCOSObject()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)" : "* Creates a new lossless encoded image XObject from a BufferedImage.\n     * <p>\n     * <u>New for advanced users from 2.0.12 on:</u><br>\n     * If you created your image with a non standard ICC colorspace, it will be\n     * preserved. (If you load images in java using ImageIO then no need to read\n     * this segment) However a new colorspace will be created for each image. So\n     * if you create a PDF with several such images, consider replacing the\n     * colorspace with a common object to save space. This is done with\n     * {@link PDImageXObject#getColorSpace()} and\n     * {@link PDImageXObject#setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) PDImageXObject.setColorSpace()}\n     *\n     * @param document the document where the image will be created\n     * @param image the BufferedImage to embed\n     * @return a new image XObject\n     * @throws IOException if something goes wrong",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:saveDiskCache()" : "* Saves the font metadata cache to disk.",
  "org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:getGlyphList()" : "* Returns the font's glyph list.",
  "org.apache.pdfbox.util.IterativeMergeSort:merge(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)" : "* Merges two sorted subarrays arr and aux into the order specified by cmp and places the\n     * ordered result back into into arr array.\n     *\n     * @param <T>\n     * @param arr Array containing source data to be sorted and target for destination data\n     * @param aux Array containing copy of source data to be sorted\n     * @param from Start index of left data run so that Left run is arr[from : mid-1].\n     * @param mid End index of left data run and start index of right run data so that Left run is\n     * arr[from : mid-1] and Right run is arr[mid : to]\n     * @param to End index of right run data so that Right run is arr[mid : to]\n     * @param cmp the comparator to determine the order of the list.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getPropBuild()" : "* PDF signature build dictionary. Provides information about the signature handler.\n     *\n     * @return the pdf signature build dictionary.",
  "org.apache.pdfbox.filter.ASCII85Filter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.common.PDRange:setMax(float)" : "* This will set the maximum value for the range.\n     *\n     * @param max The new maximum for the range.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:closeAndFillAndStrokeEvenOdd()" : "* Close, fill, and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStrokeEvenOdd() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setChangeYs(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])" : "* This will set the changes along the y-axis.\r\n     * \r\n     * @param changeYs changes along the y-axis",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:signatureText(java.lang.String)" : "* \n     * @param signatureText - adds the text on visible signature\n     * @return the signature design",
  "org.apache.pdfbox.rendering.GroupGraphics:rotate(double)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getLanguage()" : "* Gets the language (Lang).\r\n     * \r\n     * @return the language",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptDataAESother(byte[],java.io.InputStream,java.io.OutputStream,boolean)" : "* Encrypt or decrypt data with AES with key length other than 256 bits.\n     *\n     * @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}.\n     * @param data The data to encrypt.\n     * @param output The output to write the encrypted data to.\n     * @param decrypt true to decrypt the data, false to encrypt it.\n     *\n     * @throws IOException If there is an error reading the data.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.contentstream.operator.state.SetMatrix:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(float,float,float,float)" : "* Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setPrinted(boolean)" : "* Set the printed flag.\n     *\n     * @param printed The new printed flag.",
  "org.apache.pdfbox.contentstream.operator.color.SetColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawParagraph(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:isDynamicXfa(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* Test for dynamic XFA content.\n     * \n     * @param acroForm the AcroForm\n     * @return true if there is a dynamic XFA form.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setKnockoutFlag(boolean)" : "* Set the value of the knockout.\n     *\n     * @param value The knockout.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeRoleMap(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.multipdf.PDFCloneUtility)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getAlternateFieldName()" : "* Gets the alternate name of the field (\"shall be used in place of the actual field name\n     * wherever the field shall be identified in the user interface (such as in error or status\n     * messages referring to the field)\").\n     *\n     * @return the alternate name of the field",
  "org.apache.pdfbox.text.LegacyPDFStreamEngine:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getOpaqueImage(java.awt.Rectangle,int)" : "* Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject\r\n     * is a mask then the buffered image will contain the raw mask.\r\n     * \r\n     * @param region The region of the source image to get, or null if the entire image is needed. The actual region\r\n     * will be clipped to the dimensions of the source image.\r\n     * \r\n     * @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every\r\n     * pixel will be read. It must not be larger than the image width or height.\r\n     * \r\n     * @return the image without any masks applied\r\n     * @throws IOException if the image cannot be read",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:getPage()" : "* Gets the page.\r\n     * \r\n     * @return the page",
  "org.apache.pdfbox.filter.FlateFilterDecoderStream:reset()" : "* Unsupported.\n     *\n     * @throws IOException always throw as reset is an unsupported feature.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:setExtend(org.apache.pdfbox.cos.COSArray)" : "* Sets the optional Extend entry for this shading.\n     *\n     * @param newExtend the extend array",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:getCOSObject()" : null,
  "org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,java.lang.String)" : "* Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams.\n     *\n     * @param randomAccessRead random access read representing the pdf to be loaded. To pass an\n     * InputStream, wrap it into a {@link RandomAccessReadBuffer}.\n     * @param password password to be used for decryption\n     *\n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.rendering.PageDrawer:showType3Glyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDType3Font,int,org.apache.pdfbox.util.Vector)" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryption,org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)" : "* Prepares everything to decrypt the document.\n     *\n     * Only if decryption of single objects is needed this should be called.\n     *\n     * @param encryption  encryption dictionary\n     * @param documentIDArray  document id\n     * @param decryptionMaterial Information used to decrypt the document.\n     *\n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException If there is an error accessing data.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getSetWidgetFieldFlags()" : "* This will get the 'SetF' entry of the FDF field dictionary.\n     * If it is not present then this method will return null.\n     *\n     * @return The field flags.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:setStartPointEndingStyle(java.lang.String)" : "* This will set the line ending style for the start point, see the LE_ constants for the possible values.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:getComponents()" : "* Returns the names of the color components.\n     * @return the names of the color components",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:userPropertyChanged(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty)" : "* Notify a possible change of user properties.\n     * \n     * @param userProperty the user property which might have be changed",
  "org.apache.pdfbox.pdmodel.PDPage:getContentsForRandomAccess()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getF()" : "* This will get a JavaScript action to be performed before\n     * the field is formatted to display its current value. This\n     * allows the field's value to be modified before formatting.\n     *\n     * @return The F entry of form field's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Exp:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:pngFilterSub(int,int)" : null,
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:mapName(java.lang.String,org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : "* Adds an alias name for a standard font to the map of known aliases to the map of aliases (alias as key, standard\r\n     * name as value). We want a single lookup in tbaseNamehe map to find the font both by a base name or an alias.\r\n     *\r\n     * @param alias an alias for the font\r\n     * @param baseName  the font name of the Standard 14 font",
  "org.apache.pdfbox.pdfparser.BaseParser:isClosing(int)" : "* This will tell if the next character is a closing brace( close of PDF array ).\n     *\n     * @param c The character to check against end of line\n     * @return true if the next byte is ']', false otherwise.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:createButtonSubType(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getBackground()" : "* This will retrieve the background color.\n     * \n     * @return the background color.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setVersion(java.lang.String)" : "* A text string indicating the version of the application implementation, as described by the\n     * <code>Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in\n     * the format: major.minor.micro (for example 7.0.7).\n     * <p>\n     * NOTE: Version value is specific for build data dictionary when used as the <code>App</code>\n     * dictionary in a build properties dictionary.\n     * </p>\n     *\n     * @param applicationVersion the application implementation version",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getAverageWidth()" : "* This will get the average width for the font.\n     *\n     * @return The average width value.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAcroFormFields(java.util.List)" : "* Sets acroFormFields\n     * \n     * @param acroFormFields a list of acroform fields",
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.rendering.GroupGraphics:setRenderingHints(java.util.Map)" : null,
  "org.apache.pdfbox.cos.COSDictionary:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setEncoding(java.lang.String)" : "* This will set the encoding.\n     *\n     * @param encoding The new encoding.",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:getInstructionSequence()" : "* Returns the instruction sequence that has been build from the syntactic elements.\n     * @return the instruction sequence",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getThousandsSeparator()" : "* This will return the text to be used between orders of thousands in display of numerical values.\r\n     * \r\n     * @return thousands separator",
  "org.apache.pdfbox.multipdf.LayerUtility:wrapInSaveRestore(org.apache.pdfbox.pdmodel.PDPage)" : "* Some applications may not wrap their page content in a save/restore (q/Q) pair which can\n     * lead to problems with coordinate system transformations when content is appended. This\n     * method lets you add a q/Q pair around the existing page's content.\n     * @param page the page\n     * @throws IOException if an I/O error occurs",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:newLine()" : "* Move to the start of the next line of text. Requires the leading (see {@link #setLeading})\n     * to have been set.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.PDPostScriptXObject:<init>(org.apache.pdfbox.cos.COSStream)" : "* Creates a PostScript XObject.\n     * @param stream The XObject stream",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:setFirstChild(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)" : "* Set the first child, this will be maintained by this class.\n     *\n     * @param outlineNode The new first child.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.contentstream.operator.graphics.ClipEvenOddRule:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:importFDF(org.apache.pdfbox.pdmodel.fdf.FDFDocument)" : "* This method will import an entire FDF document into the PDF document\n     * that this acroform is part of.\n     *\n     * @param fdf The FDF document to import.\n     *\n     * @throws IOException If there is an error doing the import.",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:getZapfDingbats()" : "* Returns the Zapf Dingbats glyph list.\r\n     * \r\n     * @return the Zapf Dingbats glyph list",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:<init>(float,float)" : "* Constructor.\n     *\n     * @param width The width of the rectangle.\n     * @param height The height of the rectangle.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setNonStrokingOverprintControl(boolean)" : "* This will set the overprint control(OP).\n     *\n     * @param op The overprint control.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\r\n     *\r\n     * @param fontDictionary Font dictionary.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeBytes(byte[])" : "* Writes binary data to the content stream.\n     * \n     * @param data as byte formatted to be added to the content stream\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeInto(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.multipdf.PDFCloneUtility,java.util.Set)" : "* This will add all of the dictionaries keys/values to this dictionary, but\n     * only if they are not in an exclusion list and if they don't already\n     * exist. If a key already exists in this dictionary then nothing is\n     * changed.\n     *\n     * @param src The source dictionary to get the keys/values from.\n     * @param dst The destination dictionary to merge the keys/values into.\n     * @param exclude Names of keys that shall be skipped.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showFontGlyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector)" : "* Called when a glyph is to be processed. This method is intended for overriding in subclasses,\n     * the default implementation does nothing.\n     *\n     * @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub>\n     * @param font the current font\n     * @param code internal PDF character code for the glyph\n     * @param displacement the displacement (i.e. advance) of the glyph in text space\n     * @throws IOException if the glyph cannot be processed",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:getDomain()" : "* This will get the optional Domain values of a function based shading.\n     *\n     * @return the domain values",
  "org.apache.pdfbox.pdmodel.font.PDFont:getType()" : "* This will always return \"Font\" for fonts.\n     * \n     * @return The type of object that this is.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7:generatePatch(java.awt.geom.Point2D[],float[][])" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:appendKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement)" : "* Appends a structure element kid and sets the parent property (/P) to this.\r\n     * \r\n     * @param structureElement the structure element",
  "org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle,int)" : "* Constructor creates an instance to be used for fill operations.\n     *\n     * @param shading the shading type to be used\n     * @param colorModel the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @param deviceBounds device bounds\n     * @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.Loader:loadPDF(java.io.File,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Parses a PDF.\n     * \n     * @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the\n     * file.\n     * @param password password to be used for decryption\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param alias alias to be used for decryption when using public key security\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering\n     * new/altered PDF streams\n     * \n     * @return loaded document\n     * \n     * @throws IOException in case of a file reading or parsing error",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:isCIDSubtype(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Dup:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getFontBoxFont(java.lang.String,org.apache.pdfbox.pdmodel.font.PDFontDescriptor)" : "* Finds a font with the given PostScript name, or a suitable substitute, or null. This allows\n     * any font to be substituted with a PFB, TTF or OTF.\n     *\n     * @param fontDescriptor the FontDescriptor of the font to find",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:getColorSpace(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:isMarked()" : "* Tells if this is a tagged PDF.\n     *\n     * @return true If this is a tagged PDF.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:writeXML(java.io.Writer)" : "* This will write this element as an XML document.\n     *\n     * @param output The stream to write the xml to.\n     *\n     * @throws IOException If there is an error writing the XML.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:arrayToString(java.lang.Object[])" : "* Creates a String representation of an Object array.\n     * \n     * @param array the Object array\n     * @return the String representation",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setAutomaticStrokeAdjustment(boolean)" : "* This will set the automatic stroke adjustment flag.\n     *\n     * @param sa The new automatic stroke adjustment flag.",
  "org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPointWithProperties:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setMacSubtype(java.lang.String)" : "* Set the mac subtype.\n     *\n     * @param macSubtype The mac subtype.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getFirstChild()" : "* @return The first child or null if there is no child.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:createInteriorColorStyles()" : null,
  "org.apache.pdfbox.cos.COSDictionary:getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)" : "* This is a convenience method that will get the dictionary object that is expected to be an integer. If the\n     * dictionary value is null then the default value will be returned.\n     *\n     * @param firstKey The first key to the item in the dictionary.\n     * @param secondKey The second key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The integer value.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setRevisionNumber(int)" : "* Sets the revision number (R).\n     * \n     * @param revisionNumber the revision number",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getAscent()" : "* This will get the ascent for the font.\n     *\n     * @return The ascent.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getSmoothnessTolerance()" : "* This will get the smothness tolerance.\n     *\n     * @return The smothness tolerance or null if one has not been set.",
  "org.apache.pdfbox.pdmodel.PDResources:isImageXObject(org.apache.pdfbox.cos.COSName)" : "* Tells whether the XObject resource with the given name is an image.\r\n     *\r\n     * @param name Name of the XObject resource.\r\n     * @return true if it is an image XObject, false if not.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:close()" : "* Closes the visual signature COSDocument, if any. Do not call this before you're saved your\n     * signed PDF document, or saving will fail because COSStream objects held both by the\n     * COSDocument and by the signed document would no longer be available.\n     *\n     * @throws IOException if the document could not be closed",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:generateBoundingBox()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:hasFontOrSizeChanged(org.apache.pdfbox.text.TextPosition,org.apache.pdfbox.text.TextPosition)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:prepend(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* Prepends the child to the linked list of children. This method only adjust pointers but doesn't take care of the\n     * Count key in the parent hierarchy.\n     * \n     * @param newChild",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getGamma()" : "* Returns the gamma value.\n     * If none is present then the default of 1,1,1 will be returned.\n     * @return the gamma value",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:getFields()" : "* An array identifying which fields to include in the submission or which to exclude, depending\n     * on the setting of the Include/Exclude flag in the Flags entry\n     *\n     * @return the array of fields",
  "org.apache.pdfbox.pdmodel.graphics.shading.Line:calcLine(int,int,int,int)" : "* Calculate the points of a line with Bresenham's line algorithm\n     * <a\n     * href=\"http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\">Bresenham's\n     * line algorithm</a>\n     *\n     * @param x0 coordinate\n     * @param y0 coordinate\n     * @param x1 coordinate\n     * @param y1 coordinate\n     * @return all the points on the rasterized line from (x0, y0) to (x1, y1)",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getNormalizedPath(int)" : null,
  "org.apache.pdfbox.cos.COSStream:createRawOutputStream()" : "* Returns a new OutputStream for writing encoded PDF data. Experts only!\n     * \n     * @return OutputStream for raw PDF stream data.\n     * @throws IOException If the output stream could not be created.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.multipdf.Overlay:overlay(java.util.Map)" : "* This will add overlays to a document.\n     *\n     * @param specificPageOverlayMap Optional map of overlay files of which the first page will be\n     * used for specific pages of the input document. The page numbers are 1-based. The map must be\n     * empty (but not null) if no specific mappings are used.\n     *\n     * @return The modified input PDF document, which has to be saved and closed by the caller. If\n     * the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)}\n     * then it is that object that is returned.\n     *\n     * @throws IOException if something went wrong.\n     * @throws IllegalArgumentException if the input document is missing.",
  "org.apache.pdfbox.pdmodel.PDDocument:subsetDesignatedFonts()" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:newLine()" : "* Move to the start of the next line of text. Requires the leading (see {@link #setLeading})\n     * to have been set.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.contentstream.operator.graphics.ShadingFill:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptString(org.apache.pdfbox.cos.COSString,long,int)" : "* This will encrypt a string.\n     *\n     * @param string the string to encrypt.\n     * @param objNum The object number.\n     * @param genNum The object generation number.\n     *\n     * @return the encrypted COSString\n     * \n     * @throws IOException If an error occurs writing the new string.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getRevision()" : "* The software module revision number, corresponding to the Date attribute.\n     *\n     * @return the revision of the software module",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:<init>()" : "* Default Constructor",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getStatus()" : "* This will get the status string to be displayed as the result of an action.\n     *\n     * @return The status.",
  "org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:<init>()" : "* Creates an empty encoding.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setToggleNoView(boolean)" : "* Set the toggleNoView flag.\n     * \n     * @param toggleNoView The new toggleNoView flag.",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:scanWhitespace()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setOpenInNewWindow(org.apache.pdfbox.pdmodel.interactive.action.OpenMode)" : "* This will specify whether to open the destination document in a new window.\n     *\n     * @param value The flag value.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:addComment(java.lang.String)" : "* Write a comment line.\n     *\n     * @param comment the comment to be added to the content stream\n     * \n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line\n     * could be ordinary PDF content.",
  "org.apache.pdfbox.cos.COSObjectKey:getInternalHash()" : "* Return the internal hash value which is based on the number and the generation.\n     * \n     * @return the internal hash value",
  "org.apache.pdfbox.cos.COSDocument:getEncryptionDictionary()" : "* This will get the encryption dictionary if the document is encrypted or null if the document\n     * is not encrypted.\n     *\n     * @return The encryption dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:<init>()" : "* Default Constructor.\r\n     *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setCaptionPositioning(java.lang.String)" : "* This will set the caption positioning. Allowed values are: \"Inline\" and \"Top\"\n     * \n     * @param captionPositioning caption positioning",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.filter.DCTFilter:readImageRaster(javax.imageio.ImageReader,javax.imageio.ImageReadParam)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:setLineDashPattern(org.apache.pdfbox.cos.COSArray,int)" : "* @param array dash array\n     * @param phase dash phase",
  "org.apache.pdfbox.rendering.GroupGraphics:drawString(java.lang.String,int,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setHeight(float)" : "* Sets the height of the element’s content rectangle in the\n     * block-progression direction (Height).\n     * \n     * @param height the height",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setURL(java.lang.String)" : "* (Optional) A URL, the use for which is defined by the URLType entry.\n     *\n     * @param url String of the URL",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Creates a new soft mask.\r\n     *\r\n     * @param dictionary The soft mask dictionary.\r\n     * @param resourceCache Resource cache, may be null.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:createDERForRecipient(byte[],java.security.cert.X509Certificate)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setFunction(org.apache.pdfbox.cos.COSArray)" : "* This will set the functions COSArray for the color conversion.\n     *\n     * @param newFunctions the new COSArray containing all functions",
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:overlaps(java.awt.geom.Point2D,java.awt.geom.Point2D)" : null,
  "org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:getBBox()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getJustification()" : "* This will get the form of quadding (justification) of the annotation text.\n     * \n     * @return The quadding of the text.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:getVisualSignature()" : "* Get the visual signature.\n     *\n     * @return the visual signature",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:<init>()" : "* Constructor. Defaults all values to 0, 0, 0.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Mod:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : "* Fills the clipping area with the given shading.\n     *\n     * @param shading Shading resource\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.util.Matrix:<init>(float,float,float,float,float,float)" : "* Creates a transformation matrix with the given 6 elements. Transformation matrices are\n     * discussed in 8.3.3, \"Common Transformations\" and 8.3.4, \"Transformation Matrices\" of the PDF\n     * specification. For simple purposes (rotate, scale, translate) it is recommended to use the\n     * static methods below.\n     *\n     * Produces the following matrix:\n     * a b 0\n     * c d 0\n     * e f 1\n     *\n     * @see Matrix#getRotateInstance(double, float, float)\n     * @see Matrix#getScaleInstance(float, float)\n     * @see Matrix#getTranslateInstance(float, float)\n     *\n     * @param a the X coordinate scaling element (m00) of the 3x3 matrix\n     * @param b the Y coordinate shearing element (m10) of the 3x3 matrix\n     * @param c the X coordinate shearing element (m01) of the 3x3 matrix\n     * @param d the Y coordinate scaling element (m11) of the 3x3 matrix\n     * @param e the X coordinate translation element (m02) of the 3x3 matrix\n     * @param f the Y coordinate translation element (m12) of the 3x3 matrix",
  "org.apache.pdfbox.filter.IdentityFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setWordSpacing(float)" : "* Set the word spacing. The value shall be added to the horizontal or vertical component of the\n     * ASCII SPACE character, depending on the writing mode.\n     * <p>\n     * This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF\n     * specification tells why: \"Word spacing shall be applied to every occurrence of the\n     * single-byte character code 32 in a string when using a simple font or a composite font that\n     * defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32\n     * in multiple-byte codes.\"\n     *\n     * @param spacing word spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Xor:applyForBoolean(boolean,boolean)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:removeKeyUsage(java.lang.String)" : "* Removes a key usage extension\n     *\n     * @param keyUsageExtension ASCII string that consists of {0, 1, X}",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Ceiling:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFlags(int)" : "* This will set the font flags.\n     *\n     * @param flags The new font flags.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:getStyle()" : "* This will retrieve the border effect, see the STYLE_* constants for valid values.\n     *\n     * @return the effect of the border or {@link #STYLE_SOLID} if none is found.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:getLeft()" : "* Get the left x coordinate.  A return value of -1 implies that the current x-coordinate\n     * will be used.\n     *\n     * @return The left x coordinate.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdfparser.xref.FreeXReference:toString()" : "* Returns a string representation of this crossreference stream entry.\n     *\n     * @return A string representation of this crossreference stream entry.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getOrder()" : "* Get the order of interpolation between samples. Valid values are 1 and 3,\n     * specifying linear and cubic spline interpolation, respectively. Default\n     * is 1. See p.170 in PDF spec 1.7.\n     *\n     * @return order of interpolation.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:remove(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isNoRotate()" : "* Get the noRotate flag.\n     *\n     * @return The noRotate flag.",
  "org.apache.pdfbox.cos.COSArray:get(int)" : "* This will get an object from the array.  This will NOT dereference\n     * the COS object.\n     *\n     * @param index The index into the array to get the object.\n     *\n     * @return The object at the requested index.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFontEmbedder:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary,org.apache.fontbox.ttf.TrueTypeFont,org.apache.pdfbox.pdmodel.font.encoding.Encoding)" : "* Creates a new TrueType font embedder for the given TTF as a PDTrueTypeFont.\r\n     *\r\n     * @param document The parent document\r\n     * @param dict Font dictionary\r\n     * @param ttf TrueType font\r\n     * @param encoding The PostScript encoding vector to be used for embedding.\r\n     * @throws IOException if the TTF could not be read",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Constructor.\n     *\n     * @param doc The document that this form is part of.",
  "org.apache.pdfbox.pdmodel.ResourceCacheFactory:createResourceCache()" : "* Create an instance of a resource cache using the provided function. Returns null if the function is set to null.\n     * \n     * @return an instance of a resource cache.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStrikeOut:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:textAlign(int)" : null,
  "org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Parses a PDF.\n     *\n     * @param randomAccessRead random access read representing the pdf to be loaded. To pass an\n     * InputStream, wrap it into a {@link RandomAccessReadBuffer}.\n     * @param password password to be used for decryption\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering\n     * new/altered PDF streams\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:getOnValue(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getTransfer2()" : "* This will get the transfer function of the /TR2 dictionary.\n     *\n     * @return The transfer function. According to the PDF specification, this is either a single\n     * function (which applies to all process colorants) or an array of four functions (which apply\n     * to the process colorants individually). The name Identity may be used to represent the\n     * identity function, and the name Default denotes the transfer function that was in effect at\n     * the start of the page.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setWritingMode(java.lang.String)" : "* Sets the writing mode (WritingMode). The value should be one of:\n     * <ul>\n     *   <li>{@link #WRITING_MODE_LRTB},</li>\n     *   <li>{@link #WRITING_MODE_RLTB},</li>\n     *   <li>{@link #WRITING_MODE_TBRL}.</li>\n     * </ul>\n     * \n     * @param writingMode the writing mode",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:toString()" : null,
  "org.apache.pdfbox.pdfparser.PDFStreamParser:readOperator()" : "* This will read an operator from the stream.\n     *\n     * @return The operator that was read from the stream.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdfparser.FDFParser:initialParse()" : "* The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset)\n     * to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref\n     * at the beginning of the file. Last the root object is parsed.\n     * \n     * @throws IOException If something went wrong.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)" : "* Draw an inline image at the x,y coordinates, with the default size of the image.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getPositivePolygon(java.awt.geom.Point2D$Double[])" : "* Makes a polygon whose direction is the same as the positive angle\n     * direction in the coordinate system.\n     * The polygon must not intersect itself.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:setExportValues(java.util.List)" : null,
  "org.apache.pdfbox.multipdf.Splitter:processPages()" : "* Interface method to handle the start of the page processing.\n     *\n     * @throws IOException If an IO error occurs.",
  "org.apache.pdfbox.pdmodel.PDStructureElementNameTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setX(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the cursor\n     * exits the annotation's active area.\n     *\n     * @param x The action to be performed.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getPV()" : "* This will get an action to be performed when the page containing\n     * the annotation becomes visible in the viewer application's user interface.\n     *\n     * @return The PV entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:isOverwrite()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor to create empty page destination.\n     *\n     * @param arr A page destination array.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:readInt(byte[],int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getDecode()" : null,
  "org.apache.pdfbox.Loader:loadPDF(byte[],java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Parses a PDF.\n     * \n     * @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used\n     * to read the data.\n     * @param password password to be used for decryption\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param alias alias to be used for decryption when using public key security\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering\n     * new/altered PDF streams\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.pdmodel.graphics.PDFontSetting:getFontSize()" : "* This will get the size of the font.\n     *\n     * @return The size of the font.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode,boolean)" : "* Create a new PDPage content stream. If the appendContent parameter is set to\n     * {@link AppendMode#APPEND}, you may want to use\n     * {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)}\n     * instead, with the fifth parameter set to true.\n     *\n     * @param document The document the page is part of.\n     * @param sourcePage The page to write the contents to.\n     * @param appendContent Indicates whether content will be overwritten, appended or prepended.\n     * @param compress Tell if the content stream should compress the page contents.\n     * @throws IOException If there is an error writing to the page contents.",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:<init>(org.apache.pdfbox.pdmodel.font.encoding.GlyphList,java.io.InputStream)" : "* Creates a new GlyphList from multiple glyph list files.\r\n     *\r\n     * @param glyphList an existing glyph list to be copied\r\n     * @param input glyph list in Adobe format\r\n     * @throws IOException if the glyph list could not be read",
  "org.apache.pdfbox.pdfwriter.COSWriter:addObjectToWrite(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:restoreGraphicsStack(java.util.Deque)" : "* Restores the entire graphics stack.\n     * \n     * @param snapshot the graphics state to be restored\n     *",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFlagBit(int,boolean)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getStencilImage(java.awt.Paint)" : "* {@inheritDoc}\r\n     * The returned images are not cached.",
  "org.apache.pdfbox.pdmodel.PDPage:setContents(org.apache.pdfbox.pdmodel.common.PDStream)" : "* This will set the contents of this page.\n     * \n     * @param contents The new contents of the page.",
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getContrast()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getFieldIterator()" : "* Returns an iterator which walks all fields in the field tree, in order.\n     * \n     * @return an iterator which walks all fields in the field tree",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getTextMatrix()" : "* @return Returns the textMatrix.",
  "org.apache.pdfbox.pdmodel.font.FontCache:getFont(org.apache.pdfbox.pdmodel.font.FontInfo)" : "* Returns the FontBox font associated with the given FontInfo.\n     * \n     * @param info the FontInfo of the cached font\n     * \n     * @return the cached font if available, otherwise null",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:appendBead(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead)" : "* Append a bead after this bead.  This will correctly set the next/previous beads in the\n     * linked list.\n     *\n     * @param append The bead to insert.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : "* Fills the clipping area with the given shading.\n     *\n     * @param shading Shading resource\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getSuffix()" : "* Returns the suffix for this image type, e.g. jpg/png.\r\n     *\r\n     * @return The image suffix.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:clampColors(java.awt.color.ICC_ColorSpace,float[])" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getScope()" : "* Gets the scope (Scope). It shall reflect whether the header cell applies\n     * to the rest of the cells in the row that contains it, the column that\n     * contains it, or both the row and the column that contain it.\n     * \n     * @return the scope",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setPreviousSibling(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)" : "* Set the previous sibling, this will be maintained by this class.\n     *\n     * @param outlineNode The new previous sibling.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:size()" : "* {@inheritDoc}",
  "org.apache.pdfbox.multipdf.Overlay:overlayPage(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.multipdf.Overlay$LayoutPage,org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.multipdf.PDFCloneUtility)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getDuration()" : "* @return The duration in seconds of the transition effect or the default 1 if no duration is found.",
  "org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode:<init>()" : "* Constructor.",
  "org.apache.pdfbox.cos.COSFloat:<init>(java.lang.String)" : "* Constructor.\n     *\n     * @param aFloat The primitive float object that this object wraps.\n     *\n     * @throws IOException If aFloat is not a float.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setIntent(java.lang.String)" : "* This will set the intent of the annotation The values and meanings are specific to the actual annotation See the\n     * IT_* constants for the annotation classes.\n     *\n     * @param it the intent",
  "org.apache.pdfbox.pdfparser.xref.NormalXReference:getThirdColumnValue()" : "* Returns the value for the third column of the crossreference stream entry. (This is the generation number of the\n     * set {@link COSObjectKey} - for entries of this type.)\n     *\n     * @return The value for the third column of the crossreference stream entry.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getCalcOrder()" : "* Return the calculation order in which field values should be recalculated when the value of\n     * any field changes. (Read about \"Trigger Events\" in the PDF specification)\n     *\n     * @return field list. Note these objects may not be identical to PDField objects retrieved from\n     * other methods (depending on cache setting). The best strategy is to call\n     * {@link #getCOSObject()} to check for identity. The list is not backed by the /CO COSArray in\n     * the document.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getEncodeForParameter(int)" : "* Get the encode for the input parameter.\n     *\n     * @param n The function parameter number.\n     *\n     * @return The encode parameter range or null if none is set.",
  "org.apache.pdfbox.cos.COSOutputStream:close()" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Shows a form from the content stream.\n     *\n     * @param form form XObject\n     * @throws IOException if the form cannot be processed",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setMarkInfo(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo)" : "* Set information about the doc's usage of tagged features.\n     *\n     * @param markInfo The new MarkInfo data.",
  "org.apache.pdfbox.rendering.PDFRenderer:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a new PDFRenderer.\r\n     * @param document the document to render",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getOptionalContent()" : "* This will get the optional content group or optional content membership dictionary for the\n     * annotation.\n     *\n     * @return The optional content group or optional content membership dictionary or null if there\n     * is none.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:setBaseState(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState)" : "* Sets the base state for optional content groups.\n     * @param state the base state",
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:loadMetrics(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : "* Loads the metrics for the base font specified by name. Metric file must exist in the pdfbox jar under\r\n     * /org/apache/pdfbox/resources/afm/\r\n     *\r\n     * @param fontName one of the standard 14 font names for which to load the metrics.\r\n     * @throws IOException if no metrics exist for that font.",
  "org.apache.pdfbox.util.DateConverter:parseSimpleDate(java.lang.String,java.lang.String[],java.text.ParsePosition)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setPopup(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup)" : "* This will set the popup annotation used for entering/editing the text for this annotation.\n     *\n     * @param popup the popup annotation.",
  "org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getParentKey()" : "* Returns the {@link COSObjectKey} of the object stream, that is containing the object.\n     *\n     * @return The {@link COSObjectKey} of the object stream, that is containing the object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:findFont(org.apache.pdfbox.pdmodel.font.FontFormat,java.lang.String)" : "* Finds a font with the given PostScript name, or a suitable substitute, or null.\n     *\n     * @param postScriptName PostScript font name",
  "org.apache.pdfbox.util.Hex:writeHexBytes(byte[],java.io.OutputStream)" : "* Writes the given byte array as hex value to the given output stream.\n     * @param bytes the byte array to be written\n     * @param output the output stream to be written to\n     * @throws IOException exception if anything went wrong",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:removeProperties(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getCOSObject()" : "* Returns the underlying dictionary.",
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteObjects()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:setOpen(boolean)" : "* This will set the initial state of the annotation, open or closed.\n     *\n     * @param open Boolean value, true = open false = closed.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:<init>(java.awt.color.ColorSpace)" : "* Creates a new JPX color space from the given AWT color space.\n     * @param colorSpace AWT color space from a JPX image",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:getPdVisibleSignature()" : "* this method gets visible signature configuration object\n     * @return the visible signature configuration.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setCharacterSpacing(float)" : "* Set the character spacing. The value shall be added to the horizontal or vertical component\n     * of the glyph's displacement, depending on the writing mode.\n     *\n     * @param spacing character spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:getEncodingName()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:getInteriorColor()" : "* This will get interior color of the drawn area.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$True:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getFunctionsArray()" : "* Provide the function(s) of the shading dictionary as array.\n     *\n     * @return an array containing the function(s).\n     * @throws IOException if we were unable to create a function.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getXStep()" : "* This will return the XStep value.\n     * @return The XStep value",
  "org.apache.pdfbox.pdmodel.font.PDFont:loadFontDescriptor()" : null,
  "org.apache.pdfbox.contentstream.operator.text.SetTextLeading:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setEndIndent(int)" : "* Sets the distance from the end edge of the BLSE to that of the reference\n     * area in the inline-progression direction (EndIndent).\n     * \n     * @param endIndent the end indent",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the non-stroking color and, if necessary, the non-stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setCenterWindow(boolean)" : "* Set the center window preference.\n     *\n     * @param value Set the center window preference.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createBackgroundLayerForm(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.common.PDRectangle)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getDecodeArray(org.apache.pdfbox.pdmodel.graphics.image.PDImage)" : null,
  "org.apache.pdfbox.pdfparser.PDFXRefStream:getWEntry()" : "* determines the minimal length required for all the lengths.\n     * \n     * @return the length information",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:toRGB(float[])" : null,
  "org.apache.pdfbox.pdmodel.PDPage:setBleedBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the BleedBox for this page.\n     * \n     * @param bleedBox The new BleedBox for this page.",
  "org.apache.pdfbox.cos.COSDictionary:getDate(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The name converted to a date.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:transform(org.apache.pdfbox.util.Matrix)" : "* The cm operator. Concatenates the given matrix with the current transformation matrix (CTM),\n     * which maps user space coordinates used within a PDF content stream into output device\n     * coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2\n     * Coordinate Spaces.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:setLeft(int)" : "* Set the left x-coordinate, a value of -1 implies that the current x-coordinate\n     * will be used.\n     * @param x The left x coordinate.",
  "org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial:getPassword()" : "* Returns the password.\n     *\n     * @return The password used to decrypt the document.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isRightAttached()" : "* Is the artifact attached to the right edge?\n     * \n     * @return <code>true</code> if the artifact is attached to the right edge,\n     * <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildCIDToGIDMap(java.util.TreeMap)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:setBitsPerCoordinate(int)" : "* Set the number of bits per coordinate.\n     *\n     * @param bitsPerCoordinate the number of bits per coordinate",
  "org.apache.pdfbox.cos.COSObject:<init>(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.ICOSParser)" : "* Constructor.\n     *\n     * @param key The object number of the encapsulated object.\n     * @param parser The parser to be used to load the object on demand\n     *",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:setNamedDestination(java.lang.String)" : "* Set the named destination.\n     *\n     * @param dest The new named destination.\n     *\n     * @throws IOException If there is an error setting the named destination.",
  "org.apache.pdfbox.cos.COSDictionary:setFlag(org.apache.pdfbox.cos.COSName,int,boolean)" : "* Sets the given boolean value at bitPos in the flags.\n     *\n     * @param field The COSName of the field to set the value into.\n     * @param bitFlag the bit position to set the value in.\n     * @param value the value the bit position should have.",
  "org.apache.pdfbox.contentstream.operator.state.SetLineWidth:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : "* Executes the instruction sequence.\n     * @param context the execution context",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createInnerForm(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDRectangle)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setNumber(java.lang.String,int)" : "* Sets an integer number.\n     * \n     * @param name the attribute name\n     * @param value the integer number",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:isEmbedded()" : "* {@inheritDoc}\n     * \n     * @return true because type 3 fonts are embedded by design.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:rebuildTrailer(java.util.Map)" : "* Rebuild the trailer dictionary if startxref can't be found.\n     *\n     * @param xrefTable the cross reference table of the pdf\n     * \n     * @return the rebuild trailer dictionary\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setInvisible(boolean)" : "* Set the invisible flag.\n     * \n     * @param invisible The new invisible flag.",
  "org.apache.pdfbox.cos.COSUpdateInfo:isNeedToBeUpdated()" : "* Get the update state for the COSWriter. This indicates whether an object is to be written\n     * when there is an incremental save.\n     *\n     * @return the update state.",
  "org.apache.pdfbox.multipdf.PDFCloneUtility:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a new instance for the given target document.\n     * \n     * @param dest the destination PDF document that will receive the clones",
  "org.apache.pdfbox.pdmodel.PDDocument:<init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead)" : "* Constructor that uses an existing document. The COSDocument that is passed in must be valid.\n     * \n     * @param doc The COSDocument that this document wraps.\n     * @param source input representing the pdf",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)" : "* Method to convert the COS value in the number tree to the PD Model object. The default\n     * implementation will simply use reflection to create the correct object type. Subclasses can\n     * do whatever they want.\n     *\n     * @param base The COS object to convert.\n     * @return The converted PD Model object.\n     * @throws IOException If there is an error during creation.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:setFilename(java.lang.String)" : "* Set the file to launch.\n     *\n     * @param file The executable/document to launch.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:valueOf(org.apache.pdfbox.cos.COSName)" : "* Returns the base state represented by the given {@link COSName}.\n         * @param state the state name\n         * @return the state enum value",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : "* Fills the clipping area with the given shading.\n     *\n     * @param shading Shading resource\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a new PDFPrintable.\n     *\n     * @param document the document to print",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getCaption()" : "* This will retrieve if the contents are shown as a caption or not.\n     *\n     * @return boolean if the content is shown as a caption.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShading,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : "* Constructor.\n     *\n     * @param shading the shading type to be used\n     * @param cm the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @throws java.io.IOException if there is an error getting the color space\n     * or doing background color conversion.",
  "org.apache.pdfbox.cos.COSBase:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:getH()" : "* A flag indicating whether to hide the annotation or show it\n     *\n     * @return true if annotation is hidden",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:from8bit(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster,java.awt.Rectangle,int,int,int)" : null,
  "org.apache.pdfbox.cos.COSString:<init>(byte[])" : "* Creates a new PDF string from a byte array. This method can be used to read a string from\n     * an existing PDF file, or to create a new byte string.\n     *\n     * @param bytes The raw bytes of the PDF text string or byte string.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForObjects()" : "* Brute force search for every object in the pdf.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.text.PDFTextStripper:normalize(java.util.List)" : "* Normalize the given list of TextPositions.\n     * \n     * @param line list of TextPositions\n     * @return a list of strings, one string for every word",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)" : "* Creates an page label dictionary for a document using the information in\n     * the given COS dictionary.\n     * \n     * <p>\n     * Note that the page label dictionary won't be automatically added to the\n     * document; you will still need to do it manually (see\n     * {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}.\n     * </p>\n     * \n     * @param document\n     *            The document the page label dictionary is created for.\n     * @param dict\n     *            an existing page label dictionary\n     * @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)\n     * @throws IOException\n     *             If something goes wrong during the number tree conversion.",
  "org.apache.pdfbox.text.PDFTextStripper:startDocument(org.apache.pdfbox.pdmodel.PDDocument)" : "* This method is available for subclasses of this class. It will be called before processing of the document start.\n     *\n     * @param document The PDF document that is being processed.\n     * @throws IOException If an IO error occurs.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getDocumentOutline()" : "* Get the outline associated with this document or null if it does not exist.\n     *\n     * @return The document's outline.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getFloatItem(org.apache.pdfbox.cos.COSName)" : "* This will get a float item from the dictionary.\n     *\n     * @param key The key to the item.\n     *\n     * @return The value for that item.",
  "org.apache.pdfbox.Loader:<init>()" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(float,float,float,float)" : "* Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:readEncodingFromFont()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:writeToStream(byte[],org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Writes the stream to the actual stream in the COSStream.\n     *\n     * @throws IOException If there is an error writing to the stream",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:setCoords(float[])" : "* Set the coordinates of individual words or group of words.\n     * \n     * The quadliterals shall encompasses a word or group of contiguous words in the text underlying the annotation. The\n     * coordinates for each quadrilateral shall be given in the order x1 y1 x2 y2 x3 y3 x4 y4.\n     *\n     * @param coords an array of 8 \uDBFF\uDC0D n numbers specifying the coordinates of n quadrilaterals.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dic The COS dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:updateByOption(java.lang.String)" : null,
  "org.apache.pdfbox.text.TextPosition:getDir()" : "* Return the direction/orientation of the string in this object based on its text matrix. Only\n     * angles of 0, 90, 180, or 270 are supported. To get other angles, use this code:\n     * <pre>\n     * TextPosition text = ...\n     * Matrix m = text.getTextMatrix().clone();\n     * m.concatenate(text.getFont().getFontMatrix());\n     * int angle = (int) Math.round(Math.toDegrees(Math.atan2(m.getShearY(), m.getScaleY())));\n     * </pre>\n     *\n     * @return The direction of the text (0, 90, 180, or 270).",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the non-stroking color and, if necessary, the non-stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdfparser.BaseParser:parseDirObject()" : "* This will parse a directory object from the stream.\n     *\n     * @return The parsed object.\n     *\n     * @throws IOException If there is an error during parsing.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:create(org.apache.pdfbox.cos.COSDictionary)" : "* Create the correct PD Model shading based on the COS base shading.\n     *\n     * @param shadingDictionary the COS shading dictionary\n     * @return the newly created shading resources object\n     * @throws IOException if we are unable to create the PDShading object",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setClearWidgetFieldFlags(java.lang.Integer)" : "* This will set the field flags that are associated with this field.\n     * The 'ClrF' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the \"clear widget field flags\".",
  "org.apache.pdfbox.cos.COSInputStream:create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream)" : "* Creates a new COSInputStream from an encoded input stream.\n     *\n     * @param filters Filters to be applied.\n     * @param parameters Filter parameters.\n     * @param in Encoded input stream.\n     * @return Decoded stream.\n     * @throws IOException If the stream could not be read.",
  "org.apache.pdfbox.text.PDFTextStripper:setWordSeparator(java.lang.String)" : "* Set the desired word separator for output text. The PDFBox text extraction algorithm will output a space\n     * character if there is enough space between two words. By default a space character is used. If you need and\n     * accurate count of characters that are found in a PDF document then you might want to set the word separator to\n     * the empty string.\n     *\n     * @param separator The desired page separator string.",
  "org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:writeString(java.lang.String,java.util.List)" : "* Write a Java string to the output stream. The default implementation will ignore the <code>textPositions</code>\n     * and just calls {@link #writeString(String)}.\n     *\n     * @param text The text to write to the stream.\n     * @param textPositions The TextPositions belonging to the text.\n     * @throws IOException If there is an error when writing the text.",
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:sortByKey(java.util.List)" : "* Sort two related lists simultaneously by the elements in the value parameter.\n     * \n     * @param pairs a list of KeyValue elements",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setFilters(java.util.List)" : "* Sets which filters are applied to this stream.\r\n     *\r\n     * @param filters the filters to apply to this stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setDefaultAppearance(java.lang.String)" : "* Set the default appearance string.\n     *\n     * @param appearance The new default appearance string.",
  "org.apache.pdfbox.text.TextPosition:getXScale()" : "* This will get the X scaling factor. This is dependent on the current transformation matrix\n     * (set by the \"cm\" operator), the text matrix (set by the \"Tm\" operator) and the font size (set\n     * by the \"Tf\" operator).\n     *\n     * @return The X scaling factor.",
  "org.apache.pdfbox.util.Matrix:getRotateInstance(double,float,float)" : "* Convenience method to create a rotated instance.\n     *\n     * @param theta The angle of rotation measured in radians\n     * @param tx The x translation.\n     * @param ty The y translation.\n     * @return A new matrix with the rotation and the x/y translating.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the non-stroking color and, if necessary, the non-stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setPageLayout(org.apache.pdfbox.pdmodel.PageLayout)" : "* Sets the page layout.\n     *\n     * @param layout The new page layout.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getEncode()" : "* Returns all encode values as COSArray.\n     * \n     * @return the encode array.",
  "org.apache.pdfbox.cos.COSNumber:isFloat(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setTrapped(java.lang.String)" : "* This will set the trapped of the document.  This will be\n     * 'True', 'False', or 'Unknown'.\n     *\n     * @param value The new trapped value for the document.\n     * \n     * @throws IllegalArgumentException if the parameter is invalid.",
  "org.apache.pdfbox.cos.COSString:toHexString()" : "* This will take this string and create a hex representation of the bytes that make the string.\n     *\n     * @return A hex string representing the bytes in this string.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.PDFontSetting:setFontSize(float)" : "* This will set the size of the font.\n     *\n     * @param size The new size of the font.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getName()" : null,
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:getColorSpace()" : "* Returns the stroking color space.\n     * @return The stroking color space.",
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Lt:compare(java.lang.Number,java.lang.Number)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:closeAndStroke()" : "* Close and stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:isAppendOnly()" : "* Determines if AppendOnly is set.\n     * \n     * @return true if the document contains signatures that may be invalidated if the file is saved.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setWidthAuto()" : "* Sets the width of the element’s content rectangle in the\n     * inline-progression direction (Width) to {@link #WIDTH_AUTO}.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getBoundingBox()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:getTextAlign(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:chooseDataRowToWrite()" : "* We look which row encoding is the \"best\" one, ie. has the lowest sum. We don't implement\n         * anything fancier to choose the right row encoding. This is just the recommend algorithm\n         * in the spec. The get the perfect encoding you would need to do a brute force check how\n         * all the different encoded rows compress in the zip stream together. You have would have\n         * to check 5*image-height permutations...\n         *\n         * @return the \"best\" row encoding of the row encodings",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getPolygonCloudRadius()" : null,
  "org.apache.pdfbox.cos.COSUpdateInfo:setNeedToBeUpdated(boolean)" : "* Set the update state of the dictionary for the COSWriter. This indicates whether an object is\n     * to be written when there is an incremental save.\n     *\n     * @param flag the update state.",
  "org.apache.pdfbox.cos.COSDictionary:addAll(org.apache.pdfbox.cos.COSDictionary)" : "* This will add all of the dictionaries keys/values to this dictionary. Existing key/value pairs will be\n     * overwritten.\n     *\n     * @param dict The dictionaries to get the key/value pairs from.",
  "org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve:<init>(java.awt.geom.Point2D[],int)" : "* Constructor of CubicBezierCurve\n     *\n     * @param ctrlPnts 4 control points [p0, p1, p2, p3]\n     * @param l dividing level, if l = 0, one cubic Bezier curve is divided\n     * into 2^0 = 1 segments, if l = n, one cubic Bezier curve is divided into\n     * 2^n segments",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setSymbolic(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.printing.PDFPageable:getPrintable(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getDefaultAppearance()" : "* Get the default appearance.\n     * \n     * This is an inheritable attribute.\n     * \n     * The default appearance contains a set of default graphics and text operators\n     * to define the field’s text size and color.\n     * \n     * @return the DA element of the dictionary object",
  "org.apache.pdfbox.contentstream.operator.color.SetColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:buildSignature()" : "* start building of visible signature\n     *\n     * @throws IOException if the output could not be written",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:getFields()" : "* An array identifying which fields to include in the submission or which to exclude, depending\n     * on the setting of the Include/Exclude flag in the Flags entry\n     *\n     * @return the array of fields",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setContents(java.lang.String)" : "* Set the contents, or a description, for an annotation.\n     *\n     * @param contents The annotation contents, or a description.",
  "org.apache.pdfbox.pdmodel.fixup.AbstractFixup:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:setAttributes(org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes)" : "* Sets the color space attributes.\n     * If null is passed in then all attribute will be removed.\n     * @param attributes the color space attributes, or null",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getCYX()" : "* This will return the CYX factor.\r\n     * \r\n     * @return CYX factor",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isReadOnly()" : "* Get the readOnly flag.\n     *\n     * @return The readOnly flag.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(java.lang.String)" : "* This will append raw commands to the content stream.\n     *\n     * @param commands The commands to append to the stream.\n     * @throws IOException If an error occurs while writing to the stream.\n     * @deprecated Usage of this method is discouraged.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:toList()" : "* This will return then underlying COSArray.\n     * \n     * @return the COSArray",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:setInteriorColor(java.awt.Color)" : "* This will set interior color of the drawn area.\n     *\n     * @param color The interior color of the circle.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:getExportValues()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(float,float,float,float)" : "* Set the stroking color in the DeviceCMYK color space. Range is 0..1\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.cos.COSArray:remove(int)" : "* This will remove an element from the array.\n     *\n     * @param i The index of the object to remove.\n     *\n     * @return The object that was removed.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:getDownAppearance()" : "* This will return a list of appearances. In the case where there is only one appearance the map will contain one\n     * entry whose key is the string \"default\". If there is no rollover appearance then the normal appearance will be\n     * returned. Which means that this method will never return null.\n     *\n     * @return A list of key(java.lang.String) value(PDAppearanceStream) pairs",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5,org.apache.pdfbox.util.Matrix)" : "* Constructor.\n     *\n     * @param shading the shading resources\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setCreationDate(java.util.Calendar)" : "* Set the creation date.\n     *\n     * @param creation The new creation date.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getPartialName()" : "* Returns the partial name of the field.\n     * \n     * @return the name of the field",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp:getName()" : "* This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is\n     * DRAFT.\n     *\n     * @return The name of this rubber stamp, see the NAME_XXX constants.",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:isRootNode()" : "* Determines if this is a root node or not.\n     * \n     * @return true if this is a root node",
  "org.apache.pdfbox.pdmodel.common.PDStream:setFileDecodeParams(java.util.List)" : "* This will set the list of decode params.\n     * \n     * @param decodeParams The list of decode params.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:getLineWidth()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:fillAndStrokeEvenOdd()" : "* Fill and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall produce the same result as constructing two identical path objects, painting\n     * the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:closeAndFillAndStroke()" : "* Close, fill, and then stroke the path, using the nonzero winding number rule to determine the\n     * region to fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for subclasses.\n     * \n     * @param dict the dictionary to be used to create an instance of PDPropertyList",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setName(java.lang.String)" : "* The name of the software module that was used to create the signature.\n     *\n     * @param name is the name of the software module",
  "org.apache.pdfbox.pdfparser.PDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String)" : "* Constructor.\n     * Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param source input representing the pdf.\n     * @param decryptionPassword password to be used for decryption.\n     * @throws IOException If something went wrong.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setID(org.apache.pdfbox.cos.COSArray)" : "* This will set the FDF id.\n     *\n     * @param id The new id for the FDF.",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:setStartxref(long)" : "* Sets the byte position of the first XRef\r\n     * (has to be called after very last startxref was read).\r\n     * This is used to resolve chain of active XRef/trailer.\r\n     *\r\n     * In case startxref position is not found we output a\r\n     * warning and use all XRef/trailer objects combined\r\n     * in byte position order.\r\n     * Thus for incomplete PDF documents with missing\r\n     * startxref one could call this method with parameter value -1.\r\n     * \r\n     * @param startxrefBytePosValue starting position of the first XRef\r\n     *",
  "org.apache.pdfbox.rendering.PageDrawer:fillAndStrokePath(int)" : "* Fills and then strokes the path.\r\n     *\r\n     * @param windingRule The winding rule this path will use.\r\n     * @throws IOException If there is an IO error while filling the path.",
  "org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern)" : "* Sets the pattern resource with the given name.\r\n     *\r\n     * @param name the name of the resource\r\n     * @param pattern the pattern to be added",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:toString()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setStencil(boolean)" : null,
  "org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.cos.COSDictionary:forEach(java.util.function.BiConsumer)" : "* Convenience method that calls {@link Map#forEach(java.util.function.BiConsumer) Map.forEach(BiConsumer)}.\n     *\n     * @param action The action to be performed for each entry\n     *",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setWidth(int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextIndent()" : "* Gets the additional distance in the inline-progression direction from the\n     * start edge of the BLSE, as specified by StartIndent, to that of the first\n     * line of text (TextIndent). The default value is 0.\n     * \n     * @return the text indent",
  "org.apache.pdfbox.rendering.PageDrawer:endTextClip()" : "* End buffering the text clipping path, if any.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:createInputStream()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace:toString()" : null,
  "org.apache.pdfbox.multipdf.LayerUtility:transferDict(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,java.util.Set)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:setName(java.lang.String)" : "* Sets the property name.\n     * \n     * @param name the property name",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:writeRun(int,boolean)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:<init>(org.w3c.dom.Element)" : "* This will create an FDF dictionary from an XFDF XML document.\n     *\n     * @param fdfXML The XML document that contains the XFDF data.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Draws the given Form XObject at the current location.\n     *\n     * @param form Form XObject\n     * @throws IOException if the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getHeight(int)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setOutputIntents(java.util.List)" : "* Replace the list of OutputIntents of the document.\n     *\n     * @param outputIntents the list of OutputIntents, if the list is empty all OutputIntents are\n     * removed.",
  "org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dic The COS dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:findBinaryOffsetAfterExec(byte[],int)" : null,
  "org.apache.pdfbox.cos.COSDictionary:getInt(java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if\n     * there is no value.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The integer value.",
  "org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeTokens(java.lang.Object[])" : "* Writes a series of tokens followed by a new line.\n     * \n     * @param tokens The tokens to write to the stream.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setContents(java.lang.String)" : "* Set the \"contents\" of the field.\n     * \n     * @param value the value of the contents.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo:getDestination()" : "* This will get the destination to jump to.\n     *\n     * @return The D entry of the specific go-to action dictionary.\n     *\n     * @throws IOException If there is an error creating the destination.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getRectDifference()" : "* Returns the updated <code>RD</code> entry for Square and Circle annotations.\n     *\n     * @return Annotation <code>RD</code> value.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getName()" : null,
  "org.apache.pdfbox.contentstream.operator.state.SetFlatness:getName()" : null,
  "org.apache.pdfbox.cos.COSDocument:createCOSStream()" : "* Creates a new COSStream using the current configuration for scratch files.\n     * \n     * @return the new COSStream",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:getOpen()" : "* This will retrieve the initial state of the annotation, open Or closed (default closed).\n     *\n     * @return The initial state, true = open false = closed",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createAcroForm(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.cos.COSDictionary:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(float,float,float,float)" : "* Set the stroking color in the DeviceCMYK color space. Range is 0..1\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.PDPageTree:getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)" : "* Returns the given attribute, inheriting from parent tree nodes if necessary.\r\n     *\r\n     * @param node page object\r\n     * @param key the key to look up\r\n     * @return COS value for the given key",
  "org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setPC(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the page containing\n     * the annotation is closed. The action is executed before the C action\n     * in the page's additional actions dictionary, if present.\n     *\n     * @param pc The action to be performed.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getQ()" : "* This will get the 'quadding' or justification of the text to be displayed.\n     * <br>\n     * 0 - Left (default)<br>\n     * 1 - Centered<br>\n     * 2 - Right<br>\n     * Please see the QUADDING_CONSTANTS in {@link PDVariableText }.\n     *\n     * @return The justification of the text strings.",
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:applyColorKeyMask(java.awt.image.BufferedImage,java.awt.image.BufferedImage)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getExpandedForm()" : "* Gets the expanded form (E).\r\n     * \r\n     * @return the expanded form",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:getFont(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:edgeEquationValue(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:insertBefore(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference,java.lang.Object)" : "* Inserts an object reference kid before a reference kid.\n     * \n     * @param objectReference the object reference\n     * @param refKid the reference kid",
  "org.apache.pdfbox.text.PDFTextStripperByArea:extractRegions(org.apache.pdfbox.pdmodel.PDPage)" : "* Process the page to extract the region text.\n     *\n     * @param page The page to extract the regions from.\n     * @throws IOException If there is an error while extracting text.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setSort(boolean)" : "* Set the Sort bit.\n     * \n     * @see #isSort()\n     * @param sort The value for Sort.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getNumberOfComponents()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:processTextPosition(org.apache.pdfbox.text.TextPosition)" : "* This will process a TextPosition object and add the text to the list of characters on a page. It takes care of\n     * overlapping text.\n     *\n     * @param text The text to process.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareEncryptionDictRev234(java.lang.String,java.lang.String,org.apache.pdfbox.pdmodel.encryption.PDEncryption,int,org.apache.pdfbox.pdmodel.PDDocument,int,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setColor(java.lang.String,org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets a colour.\n     * \n     * @param name the attribute name\n     * @param value the colour",
  "org.apache.pdfbox.pdfparser.XrefParser:parseStartXref()" : "* This will parse the startxref section from the stream. The startxref value is ignored.\n     *\n     * @return the startxref value or -1 on parsing error\n     * @throws IOException If an IO error occurs.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getHival()" : null,
  "org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPointWithProperties:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getClassNames()" : "* Returns the class names together with their revision numbers (C).\n     * \n     * @return the class names as a list, never null.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllTPaddings(int)" : "* Sets the same table padding for all four sides (TPadding).\n     * \n     * @param tPadding the table padding",
  "org.apache.pdfbox.pdfwriter.COSWriter:detectPossibleSignature(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:createObjectStreams()" : "* Creates {@link COSWriterObjectStream}s for all currently registered objects of this pool, that have been marked\n     * as fit for being compressed in this manner. Such object streams may be added to a PDF document and shall be\n     * declared in a document's {@link PDFXRefStream} accordingly. The objects contained in such a stream must not be\n     * added to the document separately.\n     *\n     * @return The created {@link COSWriterObjectStream}s for all currently registered compressible objects.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:initFringe(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getSignedContent(java.io.InputStream)" : "* Return the signed content of the document. This is not a PDF file, nor is it the PDF file\n     * before signing, it is the byte sequence made of the input minus the area where the signature\n     * bytes will be. See \"The ByteRange and signature value\" in the document\n     * <a href=\"https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5\">Digital\n     * Signatures in a PDF</a>.\n     *\n     * @param pdfFile The signed pdf file as InputStream. It will be closed in this method.\n     * @return a byte array containing only the signed part of the content\n     * @throws IOException if the pdfFile can't be read",
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:getCryptFilterMethod()" : "* This will return the crypt filter method. \n     * Allowed values are: NONE, V2, AESV2, AESV3\n     *\n     * @return the name of the crypt filter method.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:clipEvenOdd()" : "* Intersects the current clipping path with the current path, using the even-odd rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:injectProcSetArray(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.Loader:loadFDF(java.io.InputStream)" : "* This will load a document from an input stream. The stream is loaded to the memory to establish random access to\n     * the data.\n     *\n     * @param input The stream that contains the document. To read the stream\n     * {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used\n     *\n     * @return The document that was loaded.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.rendering.PageDrawerParameters:<init>(org.apache.pdfbox.rendering.PDFRenderer,org.apache.pdfbox.pdmodel.PDPage,boolean,org.apache.pdfbox.rendering.RenderDestination,java.awt.RenderingHints,float)" : "* Package-private constructor.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setNextBead(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead)" : "* Set the next bead in the thread.\n     *\n     * @param next The next bead.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getInterpolate()" : null,
  "org.apache.pdfbox.rendering.PageDrawer:isHiddenOCMD(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:isBold()" : "* A flag telling if the text should be bold.\n     *\n     * @return The bold flag.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareEncryptionDictRev6(java.lang.String,java.lang.String,org.apache.pdfbox.pdmodel.encryption.PDEncryption,int)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:closeAndStroke()" : "* Close and stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:createFontInfoByName(java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:addToSubset(int)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.Operators:getOperator(java.lang.String)" : "* Returns the operator for the given operator name.\n     * @param operatorName the operator name\n     * @return the operator (or null if there's no such operator",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:pngFilterUp(int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdfparser.COSParser:parsePDFHeader()" : "* Parse the header of a pdf.\n     * \n     * @return true if a PDF header was found\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getCaptionHorizontalOffset()" : "* This will retrieve the horizontal offset of the caption.\n     * \n     * @return the horizontal offset of the caption",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:getEndPointEndingStyle()" : "* This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section.\n     *\n     * @return The ending style for the end point, LE_NONE if missing, never null.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:restoreGraphicsState()" : "* Q operator. Restores the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:toGeneralPath()" : "* Returns a general path equivalent to this rectangle. This method avoids the problems caused by Rectangle2D not\n     * working well with -ve rectangles.\n     * \n     * @return a general path equivalent to this rectangle",
  "org.apache.pdfbox.filter.ASCII85InputStream:<init>(java.io.InputStream)" : "* Constructor.\n     *\n     * @param is The input stream to actually read from.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:setG(float)" : "* Sets the g value of the tristimulus.\n     * @param g the g value for the tristimulus",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:<init>(org.apache.fontbox.util.BoundingBox)" : "* Constructor.\n     *\n     * @param box the bounding box to be used for the rectangle",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,boolean)" : "* Loads a TTF to be embedded into a document as a Type 0 font.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param ttf A TrueType font.\n     * @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for\n     * AcroForm.\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font stream.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setMiterLimit(float)" : "* Set the miter limit.\n     *\n     * @param miterLimit the new miter limit.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is \\u2264 0.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getType1Font()" : "* Returns the embedded or substituted Type 1 font, or null if there is none.\n     * \n     * @return the embedded or substituted Type 1 font or null",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:toRGB()" : "* Returns the packed RGB value for this color, if any.\r\n     * @return RGB\r\n     * @throws IOException if the color conversion fails\r\n     * @throws UnsupportedOperationException if this color value is a pattern.",
  "org.apache.pdfbox.filter.DCTFilter:fromBGRtoRGB(java.awt.image.Raster)" : null,
  "org.apache.pdfbox.pdfparser.COSParser:setLenient(boolean)" : "* Change the parser leniency flag.\n     *\n     * This method can only be called before the parsing of the file.\n     *\n     * @param lenient try to handle malformed PDFs.\n     *",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:hasWidths()" : "* Returns true if widths are present in the font descriptor.\n     * \n     * @return true if widths are present in the font descriptor",
  "org.apache.pdfbox.pdmodel.common.PDTypedDictionaryWrapper:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new instance with a given COS dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.filter.DCTFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)" : "* Begin a marked content sequence with a reference to the marked content identifier (MCID).\n     *\n     * @param tag the tag to be added to the content stream\n     * @param mcid the marked content identifier (MCID)\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:<init>(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.PDResources)" : "* Creates a new indexed color space from the given PDF array.\n     * \n     * @param indexedArray the array containing the indexed parameters\n     * @param resources the resources, can be null. Allows to use its cache for the colorspace.\n     * @throws IOException if the colorspace could not be created",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:setH(boolean)" : "* @param h hide flag",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setNextSibling(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)" : "* Set the next sibling, this will be maintained by this class.\n     *\n     * @param outlineNode The new next sibling.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildVerticalMetrics(org.apache.pdfbox.cos.COSDictionary)" : "* Build vertical metrics with Identity CIDToGIDMap (for embedding full font).",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:addRect(float,float,float,float)" : "* Add a rectangle to the current path.\n     *\n     * @param x The lower left x coordinate.\n     * @param y The lower left y coordinate.\n     * @param width The width of the rectangle.\n     * @param height The height of the rectangle.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createInputStream()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getAverageFontWidth()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getDestination()" : "* Get the page destination of this node.\n     *\n     * @return The page destination of this node.\n     * @throws IOException If there is an error creating the destination.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:canExtractForAccessibility()" : "* This will tell if the user can extract text and images from the PDF document\n     * for accessibility purposes.\n     *\n     * @return true If supplied with the user password they are allowed to extract content\n     *              from the PDF document",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isURLRequired()" : "*\n     * @return true if the URL is required",
  "org.apache.pdfbox.rendering.GroupGraphics:fillPolygon(int[],int[],int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setRowSpan(int)" : "* Sets the number of rows in the enclosing table that shall be spanned by\n     * the cell (RowSpan).\n     * \n     * @param rowSpan the row span",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:pageHeight(float)" : "* \n     * @param templateHeight\n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.rendering.PageDrawer:setRenderingHints()" : "* Sets high-quality rendering hints on the current Graphics2D.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:getColorSpace()" : "* Returns the color space in which this color value is defined.\r\n     * \r\n     * @return the color space in which this color value is defined",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getWidthFromFont(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getO()" : "* This will get the string specifying the operation to perform:\n     * open to open a document\n     * print to print a document\n     * If the F entry designates an application instead of a document, this entry\n     * is ignored and the application is launched. Default value: open.\n     *\n     * @return The O entry of the specific Windows launch parameter dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setArrayOfString(java.lang.String,java.lang.String[])" : "* Sets an array of strings.\n     * \n     * @param name the attribute name\n     * @param values the array of strings",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:getFringe()" : "* This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing\n     * occurs.\n     *\n     * @return the rectangle difference",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The signature dictionary.",
  "org.apache.pdfbox.pdfparser.XrefParser:checkXRefOffset(long)" : "* Check if the cross reference table/stream can be found at the current offset.\n     * \n     * @param startXRefOffset\n     * @return the revised offset\n     * @throws IOException",
  "org.apache.pdfbox.contentstream.operator.state.SetLineWidth:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:getPositionVector(int)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.DrawObject:getName()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:getLowerLeftY()" : "* This will get the lower left y coordinate.\n     *\n     * @return The lower left y.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.pdfparser.COSParser:getEncryption()" : "* This will get the encryption dictionary. The document must be parsed before this is called.\n     *\n     * @return The encryption dictionary of the document that was parsed.\n     *\n     * @throws IOException If there is an error getting the document.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getStemV()" : "* This will get the stemV for the font.\n     *\n     * @return The stem v value.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:encodeGlyphId(int)" : null,
  "org.apache.pdfbox.filter.LZWFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:setInteriorColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* This will set interior color.\n     *\n     * @param ic color.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)" : "* Begin a marked content sequence.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.fdf.FDFPage:getPageInfo()" : "* This will get the FDF page info object.\n     *\n     * @return The Page info.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:setValue(java.lang.String)" : "* Sets the plain text value of this field.\n     * \n     * @param value Plain text\n     * @throws IOException if the value could not be set",
  "org.apache.pdfbox.rendering.PageDrawer:getRenderer()" : "* Returns the parent renderer.\r\n     * \r\n     * @return the parent renderer",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getTitle()" : "* Get the annotation title.\n     *\n     * @return The title of the annotation.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityProvider:<init>()" : null,
  "org.apache.pdfbox.cos.COSStream:toTextString()" : "* Returns the contents of the stream as a PDF \"text string\".\n     * \n     * @return the PDF string representation of the stream content",
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForObjStreams(java.util.Map)" : "* Brute force search for all objects streams of a pdf.\n     * \n     * @param xrefTable the cross reference table of the document\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:getType()" : "* Returns the type.\r\n     * \r\n     * @return the type",
  "org.apache.pdfbox.cos.COSObjectKey:getNumber()" : "* This will get the object number.\n     *\n     * @return The object number.",
  "org.apache.pdfbox.pdfparser.xref.FreeXReference:getThirdColumnValue()" : "* Returns the value for the third column of the crossreference stream entry. (This is the generation number of the\n     * set next free {@link COSObjectKey} - for entries of this type.)\n     *\n     * @return The value for the third column of the crossreference stream entry.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getPreviousBead()" : "* This will get the previous bead.  If this bead is the first bead in the list then this\n     * will return the last bead.\n     *\n     * @return The previous bead in the list or the last bead if this is the first bead.",
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:<init>(byte[])" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getTextState()" : "* This will get the graphics text state.\n     *\n     * @return The graphics text state.",
  "org.apache.pdfbox.contentstream.operator.graphics.EndPath:getName()" : null,
  "org.apache.pdfbox.cos.COSUpdateState:update(boolean)" : "* Sets the {@link #updated} state of the managed {@link #updateInfo} to the given state.<br>\n     * This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}.\n     *\n     * @param updated The state to set for {@link #updated}.\n     * @see #update(boolean)\n     * @see #updated\n     * @see #isAcceptingUpdates()",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:getF()" : "* Get the F action.\n     *\n     * @return The F action.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:getTop()" : "* Get the top y coordinate.  A return value of -1 implies that the current y-coordinate\n     * will be used.\n     *\n     * @return The top y coordinate.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isAddRevInfoRequired()" : "*\n    * @return true if the AddRevInfo is required",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:iterator()" : "* {@inheritDoc}",
  "org.apache.pdfbox.util.Version:<init>()" : null,
  "org.apache.pdfbox.contentstream.operator.DrawObject:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getNonEFontNoWarn()" : "* If there is a LegalPDF dictionary in the catalog\n     * of the PDF file and the NonEmbeddedFonts attribute in this dictionary\n     * has a non zero value, and the viewing application has a preference\n     * set to suppress the display of this warning then the value of this\n     * attribute will be set to true.\n     *\n     * @return true if NonEFontNoWarn is set to true\n     * @see #setNonEFontNoWarn(boolean)",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getSubFilter()" : "* Get the name of the subfilter.\n     *\n     * @return The subfilter name contained in this encryption dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:defaultIfNull(java.lang.Float,float)" : "* Returns the provided default value in case 'standard' value is <code>null</code>. To be used\n     * in cases unboxing may lead to a NPE.\n     *\n     * @param standardValue 'standard' value\n     * @param defaultValue default value\n     *\n     * @return 'standard' value if not <code>null</code> otherwise default value",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setMaximumFractionDigits(int)" : "* Sets the maximum number of digits allowed for fractional numbers.\n     * \n     * @see NumberFormat#setMaximumFractionDigits(int)\n     * @param fractionDigitsNumber the maximum number of digits allowed for fractional numbers",
  "org.apache.pdfbox.Loader:loadPDF(byte[],java.lang.String,java.io.InputStream,java.lang.String)" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used\n     * to read the data.\n     * @param password password to be used for decryption\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param alias alias to be used for decryption when using public key security\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification:createFS(org.apache.pdfbox.cos.COSBase)" : "* A file specification can either be a COSString or a COSDictionary.  This\n     * will create the file specification either way.\n     *\n     * @param base The cos object that describes the fs.\n     *\n     * @return The file specification for the COSBase object.\n     *\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:encode(int)" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:updateParentEntry(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)" : "* Update the P reference to the new parent dictionary.\n     *\n     * @param kArray the kids array\n     * @param newParent the new parent\n     * @param newStructureType the new structure type in /S or null so it doesn't get replaced",
  "org.apache.pdfbox.multipdf.LayerUtility:appendFormAsLayer(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject,java.awt.geom.AffineTransform,java.lang.String)" : "* Places the given form over the existing content of the indicated page (like an overlay).\n     * The form is enveloped in a marked content section to indicate that it's part of an\n     * optional content group (OCG), here used as a layer. This optional group is returned and\n     * can be enabled and disabled through methods on {@link PDOptionalContentProperties}.\n     * <p>\n     * You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before calling this method to make\n     * sure that the graphics state is reset.\n     *\n     * @param targetPage the target page\n     * @param form the form to place\n     * @param transform the transformation matrix that controls the placement of your form. You'll\n     * need this if your page has a crop box different than the media box, or if these have negative\n     * coordinates, or if you want to scale or adjust your form.\n     * @param layerName the name for the layer/OCG to produce\n     * @return the optional content group that was generated for the form usage\n     * @throws IOException if an I/O error occurs",
  "org.apache.pdfbox.cos.COSDictionary:getDictionaryString(org.apache.pdfbox.cos.COSBase,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:getNumberOfRecipients()" : "* Returns the number of recipients\n     * @return the number of recipients",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getAlternateDescription()" : "* Returns the alternate description (Alt).\n     * \n     * @return the alternate description",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getRgbBackground()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:fillAndStroke()" : "* Fill and then stroke the path, using the nonzero winding number rule to determine the region\n     * to fill. This shall produce the same result as constructing two identical path objects,\n     * painting the first with {@link #fill() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.cos.COSIncrement:contains(org.apache.pdfbox.cos.COSBase)" : "* Returns {@code true}, if the given {@link COSBase} is already known to and has been processed by this\n     * {@link COSIncrement}.\n     *\n     * @param base The {@link COSBase} to check.\n     * @return {@code true}, if the given {@link COSBase} is already known to and has been processed by this\n     * {@link COSIncrement}.\n     * @see #objects\n     * @see #processedObjects",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getDecodeForParameter(int)" : "* Get the decode for the input parameter.\n     *\n     * @param paramNum the function parameter number\n     * @return the decode parameter range or null if none is set",
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForXRefStreams()" : "* Brute force search for all /XRef entries (streams).\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.rendering.GroupGraphics:getDeviceConfiguration()" : null,
  "org.apache.pdfbox.util.XMLUtil:parse(java.io.InputStream,boolean)" : "* This will parse an XML stream and create a DOM document.\n     *\n     * @param is The stream to get the XML from.\n     * @param nsAware activates namespace awareness of the parser\n     * @return The DOM document.\n     * @throws IOException It there is an error creating the dom.",
  "org.apache.pdfbox.pdfwriter.COSWriter:writeString(org.apache.pdfbox.cos.COSString,java.io.OutputStream)" : "* This will output the given byte getString as a PDF object.\n     *\n     * @param string COSString to be written\n     * @param output The stream to write to.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDField#PDField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:calculatePageSizeFromRandomAccessRead(org.apache.pdfbox.io.RandomAccessRead,int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:getInkList()" : "* Get the paths making up the freehand \"scribble\".\n     *\n     * @see #setInkList(List)\n     * @return the List of arrays representing the paths.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getShadingColorSpace()" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* creates a new encryption dictionary from the low level dictionary provided.\n     * @param dictionary a COS encryption dictionary",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:findDestinationPage(org.apache.pdfbox.pdmodel.PDDocument)" : "* This method will attempt to find the page in this PDF document that this outline points to.\n     * If the outline does not point to anything then this method will return null. If the outline\n     * is an action that is not a GoTo action then this method will also return null.\n     *\n     * @param doc The document to get the page from.\n     *\n     * @return The page that this outline will go to when activated or null if it does not point to\n     * anything.\n     * @throws IOException If there is an error when trying to find the page.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sub:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setPrintScaling(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$PRINT_SCALING)" : "* Set the PrintScaling preference.  See PRINT_SCALING enumeration.\n     *\n     * @param value Set the PrintScaling preference.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setCurrentAccessPermission(org.apache.pdfbox.pdmodel.encryption.AccessPermission)" : "* Sets the access permissions.\n     *\n     * @param currentAccessPermission The access permissions to be set.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:lineTo(float,float)" : "* Draw a line from the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint:getName()" : null,
  "org.apache.pdfbox.cos.COSName:getName()" : "* This will get the name of this COSName object.\n     * \n     * @return The name of the object.",
  "org.apache.pdfbox.rendering.GroupGraphics:getFontRenderContext()" : null,
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:toDebugString()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)" : "* Constructor creates an instance to be used for fill operations.\n     *\n     * @param shading the shading type to be used\n     * @param cm the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.filter.CCITTFaxFilter:readFromDecoderStream(org.apache.pdfbox.filter.CCITTFaxDecoderStream,byte[])" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getEncoding()" : "* The encoding to be used for a FDF field. The default is PDFDocEncoding and this method will never return null.\n     *\n     * @return The encoding value.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : null,
  "org.apache.pdfbox.pdfparser.COSParser:isString(byte[])" : "* Checks if the given string can be found at the current offset.\n     * \n     * @param string the bytes of the string to look for\n     * @return true if the bytes are in place, false if not\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:toUnicode(int,org.apache.pdfbox.pdmodel.font.encoding.GlyphList)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getFlag3Edge()" : null,
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:probablyBarcodeFont(org.apache.pdfbox.pdmodel.font.PDFontDescriptor)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Log:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setDecryptMetadata(boolean)" : "* Set whether to decrypt meta data.\n     *\n     * @param decryptMetadata true if meta data has to be decrypted.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setRectDifferences(float)" : "* This will set the difference between the annotations \"outer\" rectangle defined by\n     * /Rect and the border.\n     * \n     * <p>This will set an equal difference for all sides</p>\n     * \n     * @param difference from the annotations /Rect entry",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getContents()" : "* Gets the contents of the marked content sequence. Can be\r\n     * <ul>\r\n     *   <li>{@link TextPosition},</li>\r\n     *   <li>{@link PDMarkedContent}, or</li>\r\n     *   <li>{@link PDXObject}.</li>\r\n     * </ul>\r\n     * \r\n     * @return the contents of the marked content sequence",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColor(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the color to be used for drawing text and the default value for the\n     * colour of table borders and text decorations (Color).\n     * \n     * @param color the colour",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:addObject(java.lang.Object,int)" : "* Adds an object with a specified revision number.\n     * \n     * @param object the object\n     * @param revisionNumber the revision number",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setModDate(java.util.Calendar)" : "* Set the mod date.\n     *\n     * @param mod The new creation mod.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setDefaultCryptFilterDictionary(org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary)" : "* Sets the default crypt filter (for public-key security handler).\n     *\n     * @param defaultFilterDictionary the standard crypt filter to set",
  "org.apache.pdfbox.pdmodel.interactive.form.PDListBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:clip()" : "* Intersects the current clipping path with the current path, using the nonzero rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormGenerateAppearancesProcessor:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getBackground()" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:increaseParents(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.cos.COSDictionary:setEmbeddedInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)" : "* This is a convenience method that will convert the value to a COSInteger object.\n     *\n     * @param embeddedDictionary The embedded dictionary.\n     * @param key The key to the object,\n     * @param value The int value for the name.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)" : "* Draw an inline image at the x,y coordinates and a certain width and height.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     * @param width The width of the inline image to draw.\n     * @param height The height of the inline image to draw.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.contentstream.operator.MissingOperandException:<init>(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setHorizontalScaling(float)" : "* Set the horizontal scaling to scale / 100.\n     *\n     * @param scale number specifying the percentage of the normal width. Default value: 100 (normal\n     * width).\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:clonedPoint2DArray(java.awt.geom.Point2D[])" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:isHidden()" : "* Shall the property be hidden?\n     * \n     * @return <code>true</code> if the property shall be hidden,\n     * <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setPassword(boolean)" : "* Set the password bit.\n     *\n     * @param password The value for the password.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)" : "* Begin a marked content sequence.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdfparser.XrefParser:parseXref(org.apache.pdfbox.cos.COSDocument,long)" : "* Parses cross reference tables.\n     * \n     * @param document the corresponding COS document of the pdf.\n     * @param startXRefOffset start offset of the first table\n     * \n     * @return the trailer dictionary\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getNameInFont(java.lang.String)" : "* Maps a PostScript glyph name to the name in the underlying font, for example when\n     * using a TTF font we might map \"W\" to \"uni0057\".",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(float)" : "* Set the stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.filter.DecodeResult:getJPXSMask()" : null,
  "org.apache.pdfbox.filter.DecodeResult:setJPXSMask(java.awt.image.BufferedImage)" : null,
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:convert(java.util.Map)" : "* This will take a map&lt;java.lang.String,org.apache.pdfbox.pdmodel.COSObjectable&gt;\n     * and convert it into a COSDictionary.\n     *\n     * @param someMap A map containing COSObjectables\n     *\n     * @return A proper COSDictionary",
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:inappropriateForCanonical(int)" : "* Return true if the given {@code codepoint} is inappropriate for\n     * canonical representation characters as defined by\n     * <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.7\">RFC 3454,\n     * Appendix C.7</a>.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:checkConverterState(org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)" : "* Check if the converter state is sane.\n     *\n     * @param state the parsed converter state\n     * @return true if the state seems plausible",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getHolderForm()" : "* Gets Holder form.\n     * That form is here <b> AcroForm/DR/XObject/{holder form name} </b>\n     * By default, name stars with FRM. We also add number of form\n     * to the name.\n     * @return the holder form",
  "org.apache.pdfbox.pdfwriter.COSWriter:setOutput(java.io.OutputStream)" : "* This will set the output stream.\n     *\n     * @param newOutput The new output stream.",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:<init>(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:getDomain()" : "* This will get the optional Domain values for this shading.\n     *\n     * @return the domain values",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:setLabelItem(int,org.apache.pdfbox.pdmodel.common.PDPageLabelRange)" : "* Sets the page label range beginning at the specified start page.\n     * \n     * @param startPage\n     *            the 0-based index of the page representing the start of the\n     *            page label range.\n     * @param item\n     *            the page label item to set.\n     * @throws IllegalArgumentException if the startPage parameter is &lt; 0.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:nextRange()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:setDropThreshold(float)" : "* sets the minimum whitespace, as a multiple of the max height of the current characters beyond which the current\n     * line start is considered to be a paragraph start. The default value is 2.5.\n     *\n     * @param dropThresholdValue the character height multiple for max allowed whitespace between lines in the same\n     * paragraph.",
  "org.apache.pdfbox.cos.COSDictionary:setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)" : "* This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ).\n     *\n     * @param key The key to the dictionary object.\n     * @param value The value to the dictionary object.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setUserEncryptionKey(byte[])" : "* This will set the UE entry in the standard encryption dictionary.\n     *\n     * @param ue A 32 byte array or null if there is no user encryption key.\n     *\n     * @throws IOException If there is an error setting the data.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:isEmpty()" : "* Detects whether there are no properties in the attribute object.\n     * \n     * @return <code>true</code> if the attribute object is empty,\n     *  <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.PDDocument:<init>(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Creates an empty PDF document. You need to add at least one page for the document to be valid.\n     *\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache for buffering PDF streams",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFileDos()" : "* Get the embedded dos file.\n     *\n     * @return The embedded dos file for this file spec.",
  "org.apache.pdfbox.filter.DCTFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Creates a PDColor containing the given pattern name.\r\n     * @param patternName the name of a pattern in a pattern dictionary\r\n     * @param colorSpace color space in which the pattern is defined",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getAntiAlias()" : "* This will return the AntiAlias value.\n     *\n     * @return the AntiAlias value",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)" : "* set a marked content point.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getDate()" : "* The build date of the software module. This string is normally produced by the compiler that\n     * is used to compile the software, for example using the Date and Time preprocessor flags. As\n     * such, this not likely to be in PDF Date format.\n     *\n     * @return the build date of the software module",
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:setC(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed in order to recalculate\n     * the value of this field when that of another field changes. The order in which\n     * the document's fields are recalculated is defined by the CO entry in the\n     * interactive form dictionary.\n     * The name C stands for \"calculate\".\n     *\n     * @param c The action to be performed.",
  "org.apache.pdfbox.pdmodel.PDPage:clipToMediaBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Clips the given box to the bounds of the media box.",
  "org.apache.pdfbox.rendering.PageDrawer:isContentRendered()" : null,
  "org.apache.pdfbox.util.Matrix:getTranslateInstance(float,float)" : "* Convenience method to create a translating instance.\n     *\n     * Produces the following matrix:\n     * 1 0 0\n     * 0 1 0\n     * x y 1\n     *\n     * @param x The x translating operator.\n     * @param y The y translating operator.\n     * @return A new matrix with just the x/y translating.",
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteBodyCompressed(org.apache.pdfbox.cos.COSDocument)" : "* This will write the compressed body of the document.\n     *\n     * @param document The document to write the body for.\n     * @throws IOException If there is an error writing the data.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setRoleMap(java.util.Map)" : "* Sets the role map.\n     * \n     * @param roleMap the role map",
  "org.apache.pdfbox.text.PDFTextStripper$LineItem:isWordSeparator()" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:set(int,java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getContactInfo()" : "* Returns the contact info provided by the signer to enable a recipient to contact the signer\n     * to verify the signature, e.g. a phone number.\n     *\n     * @return the contact info",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new Table attribute object with a given dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getContents(java.io.InputStream)" : "* Will return the embedded signature between the byterange gap.\n     *\n     * @param pdfFile The signed pdf file as InputStream. It will be closed in this method.\n     * @return a byte array containing the signature\n     * @throws IOException if the pdfFile can't be read\n     * @throws IndexOutOfBoundsException if the byterange array is not long enough",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Sets the page on which some or all of the content items designated by\n     *  the K entry shall be rendered (Pg).\n     * @param page the page on which some or all of the content items designated\n     *  by the K entry shall be rendered.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionMovie:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:createShadedTriangleList(int,int,org.apache.pdfbox.pdmodel.graphics.shading.Vertex[][])" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setSecurityHandler(org.apache.pdfbox.pdmodel.encryption.SecurityHandler)" : "* Sets the security handler used in this encryption dictionary\n     * @param securityHandler new security handler",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getAction()" : "* Get the action to be performed when this annotation is to be activated. Either this or the\n     * destination entry should be set, but not both.\n     *\n     * @return The action to be performed when this annotation is activated.",
  "org.apache.pdfbox.pdmodel.PDDocument:prepareNonVisibleSignature(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:saveGraphicsState()" : "* q operator. Saves the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getRangeForComponent(int)" : "* Returns the range for a certain component number.\n     * This will never return null.\n     * If it is not present then the range 0..1 will be returned.\n     * @param n the component number to get the range for\n     * @return the range for this component",
  "org.apache.pdfbox.pdmodel.PDPageTree:getKids(org.apache.pdfbox.cos.COSDictionary)" : "* Helper to get kids from malformed PDFs.\r\n     * @param node page tree node\r\n     * @return list of kids",
  "org.apache.pdfbox.cos.COSDictionary:getNameAsString(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string. Null is returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:setDoc(java.util.Map)" : "* Sets the dictionary's \"Doc\" entry.\n     * \n     * @param map Map of named \"JavaScript\" dictionaries.",
  "org.apache.pdfbox.contentstream.operator.text.SetCharSpacing:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setFormatterRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Sets formatter rectangle\n     * \n     * @param formatterRectangle the rectangle to be used to the formatter",
  "org.apache.pdfbox.cos.COSDocument:getStartXref()" : "* Return the startXref Position of the parsed document. This will only be needed for incremental updates.\n     * \n     * @return a long with the old position of the startxref",
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:getExtends()" : "* A reference to an object stream, of which the current object stream is\n     * considered an extension.\n     *\n     * @return The object that this stream is an extension.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:setLowerLeftX(float)" : "* This will set the lower left x coordinate.\n     *\n     * @param value The lower left x.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setKeyLength(int)" : "* Setter of the property keyLength.\n     *\n     * @param keyLen The keyLength to set in bits.",
  "org.apache.pdfbox.rendering.GroupGraphics:drawLine(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setSubtype(java.lang.String)" : "* Set the subtype for this embedded file.  This should be a mime type value.  Optional.\n     *\n     * @param mimeType The mimeType for the file.",
  "org.apache.pdfbox.pdmodel.font.encoding.SymbolEncoding:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:<init>(org.apache.pdfbox.cos.COSStream)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:fixType0Subtype(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.graphics.PDFontSetting:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructs a font setting from an existing array.\n     *\n     * @param fs The new font setting value.",
  "org.apache.pdfbox.rendering.GroupGraphics:create()" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getAngles()" : "* This will return the angles.\r\n     * \r\n     * @return angles",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getSubFilter()" : "* If <b>SubFilter</b> is not null and the {@link #isSubFilterRequired()} indicates this\n     * entry is a required constraint, then the first matching encodings shall be used when\n     * signing; otherwise, signing shall not take place. If {@link #isSubFilterRequired()}\n     * indicates that this is an optional constraint, then the first matching encoding shall\n     * be used if it is available. If it is not available, a different encoding may be used\n     * instead.\n     *\n     * @return the subfilter that shall be used by the signature handler",
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:setScaleOption(java.lang.String)" : "* This will set the scale option for the icon. Set the SCALE_OPTION_XXX constants.\n     *\n     * @param option The scale option.",
  "org.apache.pdfbox.cos.COSStream:createInputStream()" : "* Returns a new InputStream which reads the decoded stream data.\n     * \n     * @return InputStream containing decoded stream data.\n     * @throws IOException If the stream could not be read.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:setUpperRightY(float)" : "* This will set the upper right y coordinate.\n     *\n     * @param value The upper right y.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setViewArea(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY)" : "* Set the ViewArea preference.  See BOUNDARY enumeration.\n     *\n     * @param value Set the ViewArea preference.",
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:nonAsciiSpace(char)" : "* Return true if the given {@code ch} is a non-ASCII space character\n     * as defined by <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.1.2\">RFC 3454,\n     * Appendix C.1.2</a>.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:newLine()" : "* Move to the start of the next line of text. Requires the leading (see {@link #setLeading})\n     * to have been set.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.cos.COSInteger:equals(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.multipdf.Overlay:calculateAffineTransform(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Calculate the transform to be used when positioning the overlay. The default implementation\n     * centers on the destination. Override this method to do your own, e.g. move to a corner, or\n     * rotate.\n     *\n     * @param page The page that will get the overlay.\n     * @param overlayMediaBox The overlay media box.\n     * @return The affine transform to be used.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage)" : "* Create a new PDPage content stream. This constructor overwrites all existing content streams\n     * of this page.\n     *\n     * @param document The document the page is part of.\n     * @param sourcePage The page to write the contents to.\n     * @throws IOException If there is an error writing to the page contents.",
  "org.apache.pdfbox.rendering.GroupGraphics:scale(double,double)" : null,
  "org.apache.pdfbox.contentstream.operator.text.MoveText:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)" : "* Begin a marked content sequence.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:isSRGB()" : "* Internal accessor to support indexed raw images.\n     * @return true if this colorspace is sRGB.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setFileSelect(boolean)" : "* Set the file select bit.\n     *\n     * @param fileSelect The value for the fileSelect.",
  "org.apache.pdfbox.rendering.PageDrawerParameters:getRenderer()" : "* Returns the renderer.\n     * \n     * @return the renderer",
  "org.apache.pdfbox.multipdf.Splitter$KCloner:createClone(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary)" : "* Creates a clone of the source.\n         *\n         * @param src source dictionary or array.\n         * @param dstParent for the /P entry; parameter needed because arrays don't keep a parent.\n         * @param currentPageDict used to remember whether we have a page parent somewhere or not.\n         * Starts with null.\n         * @return a clone, or null if source is null or if there is no clone because it belongs to a\n         * different page or to no page.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Floor:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:setGroupEnabled(java.lang.String,boolean)" : "* Enables or disables all optional content groups with the given name.\n     *\n     * @param groupName the group name\n     * @param enable true to enable, false to disable\n     * @return true if at least one group with this name already had an on or off setting, false\n     * otherwise",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setFileDescription(java.lang.String)" : "* Set the file description.\n     * \n     * @param description The file description",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setMiterLimit(float)" : "* Set the miter limit.\n     *\n     * @param miterLimit the new miter limit.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is \\u2264 0.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setNonStrokingColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Sets the non-stroking color space.\n     *\n     * @param colorSpace The new non-stroking color space.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:getShading(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.cos.COSDictionary:setLong(java.lang.String,long)" : "* This is a convenience method that will convert the value to a COSInteger object.\n     *\n     * @param key The key to the object,\n     * @param value The int value for the name.",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:load(java.lang.String,int)" : "* Loads a glyph list from disk.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:setVerticesPerRow(int)" : "* Set the number of vertices per row.\r\n     *\r\n     * @param verticesPerRow the number of vertices per row",
  "org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeObject(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getPageWidth()" : "* \n     * @return page width",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:setOpen(boolean)" : "* This will set initial state of the annotation, open or closed.\n     *\n     * @param open Boolean value, true = open false = closed",
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:generatePartialName()" : "* Generate a unique name for the signature.\n     * \n     * @return the signature's unique name",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getCryptFilterDictionary(org.apache.pdfbox.cos.COSName)" : "* Returns the crypt filter with the given name.\n     * \n     * @param cryptFilterName the name of the crypt filter\n     * \n     * @return the crypt filter with the given name if available",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new marked content object.\r\n     * \r\n     * @param tag the tag\r\n     * @param properties the properties",
  "org.apache.pdfbox.pdmodel.PDDocument:findSignatureField(java.util.Iterator,org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)" : "* Search acroform fields for signature field with specific signature dictionary.\n     * \n     * @param fieldIterator iterator on all fields.\n     * @param sigObject signature object (the /V part).\n     * @return a signature field if found, or null if none was found.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getBorderStyle()" : "* This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the\n     * annotation.\n     *\n     * @return the border style dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:getOpenInNewWindow()" : "* This will specify whether to open the destination document in a new window, in the same\n     * window, or behave in accordance with the current user preference.\n     *\n     * @return A flag specifying how to open the destination document.",
  "org.apache.pdfbox.contentstream.operator.graphics.StrokePath:getName()" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:setTextMatrix(org.apache.pdfbox.util.Matrix)" : "* @param value The textMatrix to set.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isUserPassword(java.lang.String,byte[],byte[],int,byte[],int,int,boolean)" : "* Check if a plaintext password is the user password.\n     *\n     * @param password The plaintext password.\n     * @param user The u entry of the encryption dictionary.\n     * @param owner The o entry of the encryption dictionary.\n     * @param permissions The permissions set in the PDF.\n     * @param id The document id used for encryption.\n     * @param encRevision The revision of the encryption algorithm.\n     * @param keyLengthInBytes The length of the encryption key in bytes.\n     * @param encryptMetadata The encryption metadata\n     *\n     * @return true If the plaintext password is the user password.\n     *\n     * @throws IOException If there is an error accessing data.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getLineHeight()" : "* Gets the element’s preferred height in the block-progression direction\n     * (LineHeight). The default value is {@link #LINE_HEIGHT_NORMAL}.\n     * \n     * @return the line height (a Float or a String)",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* This will set the file in which the destination is located.\n     *\n     * @param fs The file specification.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getMiterLimit()" : "* Get the value of the miter limit.\n     *\n     * @return The current miter limit.",
  "org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead)" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF new streams.\n     * \n     * @param randomAccessRead random access read representing the pdf to be loaded. To pass an\n     * InputStream, wrap it into a {@link RandomAccessReadBuffer}.\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the PDF required a non-empty password.\n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:encode(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionMovie:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.printing.PDFPrintable:setSubsamplingAllowed(boolean)" : "* Sets a value instructing the renderer whether it is allowed to subsample images before\n     * drawing. The subsampling frequency is determined according to image size and requested scale.\n     *\n     * Subsampling may be faster and less memory-intensive in some cases, but it may also lead to\n     * loss of quality, especially in images with high spatial frequency.\n     *\n     * @param subsamplingAllowed The new value indicating if subsampling is allowed.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:setInteriorColor(java.awt.Color)" : "* This will set interior color of the drawn area.\n     *\n     * @param color The interior color of the drawn area.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getShadingType()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param p The params dictionary.",
  "org.apache.pdfbox.contentstream.operator.graphics.ClipNonZeroRule:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextDecorationType(java.lang.String)" : "* Sets the type of text decoration (TextDecorationType). The value should\n     * be one of:\n     * <ul>\n     *   <li>{@link #TEXT_DECORATION_TYPE_NONE},</li>\n     *   <li>{@link #TEXT_DECORATION_TYPE_UNDERLINE},</li>\n     *   <li>{@link #TEXT_DECORATION_TYPE_OVERLINE},</li>\n     *   <li>{@link #TEXT_DECORATION_TYPE_LINE_THROUGH}.</li>\n     * </ul>\n     * \n     * @param textDecorationType the type of text decoration",
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getNumberOfComponents()" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getTextMatrix()" : "* @return Returns the textMatrix.",
  "org.apache.pdfbox.pdmodel.font.CMapManager:parseCMap(org.apache.pdfbox.io.RandomAccessRead)" : "* Parse the given CMap.\r\n     *\r\n     * @param randomAccessRead the source of the CMap to be read\r\n     * @return the parsed CMap",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:getCOSObject()" : "* Convert this standard java object to a COS dictionary.\n     *\n     * @return The COS dictionary that matches this Java object.",
  "org.apache.pdfbox.util.Vector:toString()" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeAcroForm(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:getName()" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : "* Set an extended graphics state.\n     * \n     * @param state The extended graphics state to be added to the content stream\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.PDDocumentNameDestinationDictionary:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos dictionary for this object.",
  "org.apache.pdfbox.Loader:loadPDF(java.io.File,java.lang.String)" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the\n     * file.\n     * @param password password to be used for decryption\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException in case of a file reading or parsing error",
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:<init>()" : null,
  "org.apache.pdfbox.cos.COSOutputStream:write(byte[],int,int)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setCreationDate(java.util.Calendar)" : "* This will set the creation date of the document.\n     *\n     * @param date The new creation date for the document.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getCOSObject()" : "* This will get the underlying dictionary.\n     *\n     * @return the dictionary for this shading.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getColorSpace(org.apache.pdfbox.cos.COSName,boolean)" : "* Returns the color space resource with the given name, or null if none exists. This method is\r\n     * for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}.\r\n     *\r\n     * @param name Name of the color space resource.\r\n     * @param wasDefault if current color space was used by a default color space. This parameter is\r\n     * to\r\n     * @return a new color space.\r\n     * @throws IOException if something went wrong.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:loadVertical(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,boolean)" : "* Loads a TTF to be embedded into a document as a vertical Type 0 font.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param input A TrueType font.\n     * @param embedSubset True if the font will be subset before embedding\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeKid(org.apache.pdfbox.cos.COSInteger)" : "* Removes a marked-content identifier kid.\n     * \n     * @param markedContentIdentifier the marked-content identifier",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getIntermediateCurlTemplate(double,double)" : "* Returns a template for intermediate curls in a cloudy polygon.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:overlaps(java.awt.geom.Point2D,java.awt.geom.Point2D)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:registerHandler(java.lang.String,java.lang.Class,java.lang.Class)" : "* Registers a security handler.\n     *\n     * If the security handler was already registered an exception is thrown.\n     * If another handler was previously registered for the same filter name or\n     * for the same policy name, an exception is thrown\n     *\n     * @param name the name of the filter\n     * @param securityHandler security handler class to register\n     * @param protectionPolicy protection policy class to register",
  "org.apache.pdfbox.cos.COSUpdateState:update(java.lang.Iterable)" : "* <p>\n     * Shall call {@link #update()} for this {@link COSUpdateState} and shall\n     * {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated}\n     * state and {@link #originDocumentState}.\n     * </p>\n     * <p>\n     * This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}.\n     * </p>\n     *\n     * @param children The children that shall also be updated.\n     * @see #update()\n     * @see #setOriginDocumentState(COSDocumentState)",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:getPatternName()" : "* Returns the pattern name from this color value.\r\n     * @return the pattern name from this color value",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showGlyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector)" : "* Called when a glyph is to be processed. This method is intended for overriding in subclasses,\n     * the default implementation does nothing.\n     *\n     * @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub>\n     * @param font the current font\n     * @param code internal PDF character code for the glyph\n     * @param displacement the displacement (i.e. advance) of the glyph in text space\n     * @throws IOException if the glyph cannot be processed",
  "org.apache.pdfbox.text.PDFTextStripper:getSpacingTolerance()" : "* Get the current space width-based tolerance value that is being used to estimate where spaces in text should be\n     * added. Note that the default value for this has been determined from trial and error.\n     * \n     * @return The current tolerance / scaling factor",
  "org.apache.pdfbox.contentstream.operator.graphics.ShadingFill:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:isEmpty()" : null,
  "org.apache.pdfbox.pdfparser.COSParser:prepareDecryption()" : "* Prepare for decryption.\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:getApp()" : "* A build data dictionary for the viewing application software\n     * module that was used to create the parent signature.\n     *\n     * @return the App as PDPropBuildApp object",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:mappedToNothing(char)" : "* Return true if the given {@code ch} is a \"commonly mapped to nothing\" character\n     * as defined by <a href=\"https://tools.ietf.org/html/rfc3454#appendix-B.1\">RFC 3454,\n     * Appendix B.1</a>.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getThread()" : "* This will get the thread that this bead is part of.  This is only required\n     * for the first bead in a thread, so other beads 'may' return null.\n     *\n     * @return The thread that this bead is part of.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(java.lang.String,java.awt.image.BufferedImage,int)" : "* Constructor.\n     *\n     * @param filename Path of the PDF file\n     * @param image the image to be used for the visible signature\n     * @param page The 1-based page number for which the page size should be calculated.\n     * @throws IOException if the new instance of PDVisibleSignDesigner could not be created",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:converterToCOSArray(java.util.List)" : "* This will convert a list of COSObjectables to an array list of COSBase objects.\n     *\n     * @param cosObjectableList A list of COSObjectable.\n     *\n     * @return A list of COSBase.\n     * @throws IllegalArgumentException if an object type is not supported for conversion to a\n     * COSBase object.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:addType1Font(java.io.File)" : "* Adds a Type 1 font to the file cache. To reduce memory, the parsed font is not cached.",
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Or:applyForBoolean(boolean,boolean)" : null,
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:isNonZeroBoundingBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:addXObject(org.apache.pdfbox.pdmodel.graphics.PDXObject)" : "* Adds an XObject to the contents.\r\n     * \r\n     * @param xobject the XObject",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference)" : "* Removes a marked-content reference kid.\n     * \n     * @param markedContentReference the marked-content reference",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontFamily(java.lang.String)" : "* This will set the font family.\n     *\n     * @param fontFamily The font family.",
  "org.apache.pdfbox.pdmodel.font.PDPanose:<init>(byte[])" : null,
  "org.apache.pdfbox.rendering.SoftMask$SoftPaintContext:dispose()" : null,
  "org.apache.pdfbox.pdmodel.common.PDRectangle:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor.\n     *\n     * @param array An array of numbers as specified in the PDF Reference for a rectangle type.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:isMultiLine()" : null,
  "org.apache.pdfbox.pdfparser.xref.AbstractXReference:getType()" : "* Returns the {@link XReferenceType} of this crossreference stream entry.\n     *\n     * @return The {@link XReferenceType} of this crossreference stream entry.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:getTop()" : "* Get the top y coordinate.  Return values of 0 or -1 imply that the current y-coordinate\n     * will be used.\n     *\n     * @return The top y coordinate.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setReadOnly()" : "* Locks the access permission read only (ie, the setters will have no effects).\n     * After that, the object cannot be unlocked.\n     * This method is used for the currentAccessPermission of a document to avoid\n     * users to change access permission.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:isReadOnly()" : "* \n     * @return true if the field is readonly",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:setThreadInfo(org.apache.pdfbox.pdmodel.PDDocumentInformation)" : "* Set the thread info, can be null.\n     *\n     * @param info The info dictionary about this thread.",
  "org.apache.pdfbox.contentstream.operator.graphics.ClosePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getLeaderExtend()" : "* This will retrieve the length of the leader line extensions.\n     * \n     * @return the length of the leader line extensions",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:setAttribute(java.lang.String,org.apache.pdfbox.cos.COSBase)" : "* Sets an attribute.\n     * \n     * @param attrName the attribute name\n     * @param attrValue the attribute value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp:setName(java.lang.String)" : "* This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX\n     * constants for valid values.\n     *\n     * @param name The name of the rubber stamp.",
  "org.apache.pdfbox.pdfparser.COSParser:getLength(org.apache.pdfbox.cos.COSBase)" : "* Returns length value referred to or defined in given object.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllPaddings(float)" : "* Sets the same padding for all four sides (Padding).\n     * \n     * @param padding the padding",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getKids()" : "* Return the children of this node.  This list will contain PDNameTreeNode objects.\n     *\n     * @return The list of children or null if there are no children.",
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)" : "* Creates a new CCITT group 4 (T6) compressed image XObject from a b/w BufferedImage. This\r\n     * compression technique usually results in smaller images than those produced by {@link LosslessFactory#createFromImage(PDDocument, BufferedImage)\r\n     * }.\r\n     *\r\n     * @param document the document to create the image as part of.\r\n     * @param image the image.\r\n     * @return a new image XObject.\r\n     * @throws IOException if there is an error creating the image.\r\n     * @throws IllegalArgumentException if the BufferedImage is not a b/w image.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* This will set the file in which the destination is located.\n     *\n     * @param fs The file specification.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:calcColor(java.awt.geom.Point2D)" : "* Calculate the color of a point.\n     *\n     * @param p the target point\n     * @return an array denotes the point's color",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getBoundingBox()" : null,
  "org.apache.pdfbox.pdfparser.XrefParser:parseXrefObjStream(long,boolean)" : "* Parses an xref object stream starting with indirect object id.\n     * \n     * @return value of PREV item in dictionary or <code>-1</code> if no such item exists",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:<init>(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.rendering.SoftMask:<init>(java.awt.Paint,java.awt.image.BufferedImage,java.awt.geom.Rectangle2D,org.apache.pdfbox.pdmodel.graphics.color.PDColor,org.apache.pdfbox.pdmodel.common.function.PDFunction)" : "* Creates a new soft mask paint.\n     *\n     * @param paint underlying paint.\n     * @param mask soft mask\n     * @param bboxDevice bbox of the soft mask in the underlying Graphics2D device space\n     * @param backdropColor the color to be used outside the transparency group’s bounding box; if\n     * null, black will be used.\n     * @param transferFunction the transfer function, may be null.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:closeTemplate(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.PDXObject:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSName)" : "* Creates a new XObject of the given subtype for writing.\r\n     * @param document The document in which to create the XObject.\r\n     * @param subtype The subtype of the new XObject.",
  "org.apache.pdfbox.cos.COSName:hashCode()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:getBorderEffect()" : "* This will retrieve the border effect dictionary, specifying effects to be applied used in\n     * drawing the line.\n     *\n     * @return The border effect dictionary",
  "org.apache.pdfbox.cos.COSInputStream:create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.filter.DecodeOptions)" : "* Creates a new COSInputStream from an encoded input stream.\n     *\n     * @param filters Filters to be applied.\n     * @param parameters Filter parameters.\n     * @param in Encoded input stream.\n     * @param options decode options for the encoded stream\n     * @return Decoded stream.\n     * @throws IOException If the stream could not be read.",
  "org.apache.pdfbox.pdmodel.font.encoding.ZapfDingbatsEncoding:getEncodingName()" : null,
  "org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:add(int,java.lang.String)" : "* Adds the given CID to Unicode mapping.\n     *\n     * @param cid CID\n     * @param text Unicode text, up to 512 bytes.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources)" : "* Creates a color space given a name or array. Abbreviated device color names are not supported\n     * here, please replace them first.\n     *\n     * @param colorSpace the color space COS object\n     * @param resources the current resources.\n     * @return a new color space\n     * @throws MissingResourceException if the color space is missing in the resources dictionary\n     * @throws IOException if the color space is unknown or cannot be created",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:setTintTransform(org.apache.pdfbox.pdmodel.common.function.PDFunction)" : "* This will set the tint transform function.\n     *\n     * @param tint The tint transform function.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:<init>(org.apache.pdfbox.cos.COSName)" : "* Constructor.\n     *\n     * @param dest The named destination.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setBl(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the annotation\n     * loses the input focus.\n     * The name Bl stands for \"blurred\".\n     *\n     * @param bl The action to be performed.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBackgroundColor()" : "* Gets the background colour (BackgroundColor).\n     * \n     * @return the background colour",
  "org.apache.pdfbox.text.LegacyPDFStreamEngine:processTextPosition(org.apache.pdfbox.text.TextPosition)" : "* A method provided as an event interface to allow a subclass to perform some specific\r\n     * functionality when text needs to be processed.\r\n     *\r\n     * @param text The text to be processed.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:write(java.lang.String)" : "* Writes a string to the content stream as ASCII.\n     * \n     * @param text the text to be added to the content stream\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getCMap()" : "* Returns the font's CMap.\n     * \n     * @return the font's CMap",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param javaScript The FDF java script.",
  "org.apache.pdfbox.pdmodel.font.CIDFontMapping:isCIDFont()" : "* Returns true if this is a CID font.\n     * \n     * @return true if the mapped font is a CID font",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:flattenEllipse(double,double,double,double)" : "* Flattens an ellipse into a polygon.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:calcPixelTable(java.util.List,int[][],java.awt.Rectangle)" : "* Get the points from the triangles, calculate their color and add point-color mappings.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getRawRaster()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getWidth()" : null,
  "org.apache.pdfbox.filter.IdentityFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildCIDSet(java.util.TreeMap)" : "* Builds the CIDSet entry, required by PDF/A. This lists all CIDs in the font, including those\n     * that don't have a GID.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setLineJoinStyle(int)" : "* Set the line join style.\n     *\n     * @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line join style.",
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:write(byte[],int,int)" : "* This will write some byte to the stream.\n     *\n     * @param b The source byte array.\n     * @param off The offset into the array to start writing.\n     * @param len The number of bytes to write.\n     *\n     * @throws IOException If the underlying stream throws an exception.",
  "org.apache.pdfbox.rendering.PageDrawer:showTransparencyGroup(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:getValue()" : null,
  "org.apache.pdfbox.pdmodel.PDPage:getContentStreams()" : "* Returns the content streams which make up this page.\n     * \n     * @return content stream iterator",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a PDFontDescriptor from a COS dictionary.\n     *\n     * @param desc The wrapped COS Dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getNamedDestination()" : "* If the value in the /P entry is a string, this will get a named destination in the current\n     * document that provides the page number of the file attachment annotation.\n     *\n     * @return a named destination or null if the /P entry value is missing or not a string.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:drawBasicEllipse(double,double,double,double)" : "* Draws an ellipse without a cloudy border effect.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:setDomain(org.apache.pdfbox.cos.COSArray)" : "* Sets the optional Domain entry for the function based shading.\n     *\n     * @param newDomain the domain array",
  "org.apache.pdfbox.filter.ASCIIHexFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Ne:isEqual(java.lang.Object,java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:getFormattedValue()" : "* Returns the string for the property value.\n     * \n     * @return the string for the property value",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setFontSetting(org.apache.pdfbox.pdmodel.graphics.PDFontSetting)" : "* This will set the font setting for this graphics state.\n     *\n     * @param fs The new font setting.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getRectangle()" : "* Returns the updated <code>Rect</code> entry for the annotation.\n     * The rectangle completely contains the cloudy border.\n     *\n     * @return Annotation <code>Rect</code>.",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addName(java.lang.String)" : "* Add a name (ex. an operator)\n     * @param name the name",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setName(java.lang.String)" : "* Sets the name of the person or authority signing the document. According to the PDF\n     * specification, this value should be used only when it is not possible to extract the name\n     * from the signature.\n     *\n     * @param name the name to be used",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setPreRelease(boolean)" : "* A flag that can be used by the signature handler or software module to\n     * indicate that this signature was created with unrelease software.\n     *\n     * @param preRelease is true if the signature was created with a unrelease\n     *                   software, otherwise false.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getItalicAngle()" : "* This will get the italic angle for the font.\n     *\n     * @return The italic angle.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setMPD(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP)" : "* <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P\n     * and whose value is an integer between 0 and 3. A value of 0 defines the\n     * signatures as an author signature. The value 1 through 3 shall be used for\n     * certification signatures and correspond to the value of P in a DocMDP transform\n     * parameters dictionary.</p>\n     *\n     * <p>If this MDP key is not present or the MDP dictionary does not contain a P\n     * entry, no rules shall be defined regarding the type of signature or its\n     * permissions.</p>\n     *\n     * @param mdp dictionary",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setInterpolate(boolean)" : null,
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:clearOutputBuffer()" : null,
  "org.apache.pdfbox.rendering.PageDrawerParameters:getRenderingHints()" : "* @return the rendering hints.",
  "org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:calcPixelTableArray(java.awt.Rectangle)" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:stroke()" : "* Stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils$KeyValue:<init>(java.lang.String,java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getCmapLookup()" : "* Returns the CMap lookup table if present.\n     * \n     * @return the CMap lookup table if present",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquiggly:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setEmbeddedFDFs(java.util.List)" : "* This will set the list of embedded FDFs. This should be a list of PDFileSpecification objects.\n     *\n     *\n     * @param embedded The list of embedded FDFs.",
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:setGuidelineWidth(float)" : "* Set the guideline width.\n     *\n     * @param width The width in default user space units.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:fetch()" : null,
  "org.apache.pdfbox.contentstream.operator.markedcontent.EndMarkedContentSequence:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:getLastSignatureDictionary()" : "* This will return the last signature from the field tree. Note that this may not be the\n     * last in time when empty signature fields are created first but signed after other fields.\n     * \n     * @return the last signature as <code>PDSignatureField</code>.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:createInputStream(java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getClearFieldFlags()" : "* This will get the 'ClrFf' entry of the FDF field dictionary.\n     * If it is not present then this method will return null.\n     *\n     * @return The field flags.",
  "org.apache.pdfbox.cos.COSDictionary:setDate(java.lang.String,java.util.Calendar)" : "* Set the value of a date entry in the dictionary.\n     *\n     * @param key The key to the date value.\n     * @param date The date value.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getStartPointEndingStyle()" : "* This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section.\n     *\n     * @return The ending style for the start point.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getStrokingColor()" : "* Returns the stroking color.\n     *\n     * @return stroking color",
  "org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial:<init>(java.lang.String)" : "* Create a new standard decryption material with the given password.\n     *\n     * @param pwd The password.",
  "org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:setPreferAES(boolean)" : "* Set whether AES encryption is preferred when several encryption methods are available for the chosen key length.\n     * The default is false. This setting is only relevant if the key length is 128 bits.\n     *\n     * @param preferAES indicates whether AES encryption is preferred or not",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:isGroupEnabled(java.lang.String)" : "* Indicates whether <em>at least one</em> optional content group with this name is enabled.\n     * There may be disabled optional content groups with this name even if this function returns\n     * true.\n     *\n     * @param groupName the group name\n     * @return true if at least one group is enabled",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getMacCreator()" : "* Get the mac Creator.\n     *\n     * @return The mac Creator.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getColorSpaceFromAWT(java.awt.image.BufferedImage)" : null,
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.util.Matrix:transform(java.awt.geom.Point2D)" : "* Transforms the given point by this matrix.\n     *\n     * @param point point to transform",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getType()" : "* This will return the type.\n     *\n     * @return the type of object that this is",
  "org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSubsamplingOffsetY(int)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showType3Glyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDType3Font,int,org.apache.pdfbox.util.Vector)" : "* Called when a glyph is to be processed. This method is intended for overriding in subclasses,\n     * the default implementation does nothing.\n     *\n     * @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub>\n     * @param font the current font\n     * @param code internal PDF character code for the glyph\n     * @param displacement the displacement (i.e. advance) of the glyph in text space\n     * @throws IOException if the glyph cannot be processed",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor #2.\n     *\n     *  @param a The action dictionary.",
  "org.apache.pdfbox.rendering.PageDrawerParameters:getPage()" : "* Returns the page.\n     * \n     * @return the page",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getIDTree()" : "* Returns the ID tree.\n     * \n     * @return the ID tree",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:codePointToName(int)" : "* Returns the name for the given Unicode code point.\r\n     *\r\n     * @param codePoint Unicode code point\r\n     * @return PostScript glyph name, or \".notdef\"",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)" : "* Draw an inline image at the x,y coordinates, with the default size of the image.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:addRectDifferences(org.apache.pdfbox.pdmodel.common.PDRectangle,float[])" : "* Get a rectangle enlarged by the differences.\n     *\n     * <p>\n     * Creates a new rectangle with differences added to each side. If there are no valid\n     * differences, then the original rectangle is returned.\n     *\n     * @param rectangle the rectangle.\n     * @param differences the differences to apply.\n     * @return the padded rectangle.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[])" : "* Creates a new JPEG Image XObject from a byte array containing JPEG data.\r\n     *\r\n     * @param document the document where the image will be created\r\n     * @param byteArray bytes of JPEG image\r\n     * @return a new Image XObject\r\n     *\r\n     * @throws IOException if the input stream cannot be read",
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:setY(float)" : "* Sets the y value of the tristimulus.\n     * @param y the y value for the tristimulus",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:<init>(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Constructor with a given page size to initialize the clipping path.\n     * @param page the size of the page",
  "org.apache.pdfbox.cos.COSDocument:getObjectsByType(java.util.List,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:<init>()" : "* Constructor, creates a new FDF document.\n     *",
  "org.apache.pdfbox.cos.COSDictionary:getNameAsString(org.apache.pdfbox.cos.COSName,java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.font.FontMapping:getFont()" : "* Returns the mapped, FontBox font. This is never null.\n     * \n     * @return the mapped font",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:getTemplateReference()" : "* This is the template reference.\n     *\n     * @return The template reference.",
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:getMappedFontName(java.lang.String)" : "* Returns the base name of the font which the given font name maps to.\r\n     *\r\n     * @param fontName name of font, either a base name or an alias\r\n     * @return the base name or null if this is not one of the known names",
  "org.apache.pdfbox.pdfparser.COSParser:getBruteForceParser()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)" : "* Begin a marked content sequence with a reference to the marked content identifier (MCID).\n     *\n     * @param tag the tag to be added to the content stream\n     * @param mcid the marked content identifier (MCID)\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setHeaders(java.lang.String[])" : "* Sets the headers (Headers). An array of byte strings, where each string\n     * shall be the element identifier (see the\n     * {@link org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement#getElementIdentifier()}) for a TH structure\n     * element that shall be used as a header associated with this cell.\n     * \n     * @param headers the headers",
  "org.apache.pdfbox.filter.FlateFilterDecoderStream:<init>(java.io.InputStream)" : "* Constructor.\n     *\n     * @param inputStream The input stream to actually read from.",
  "org.apache.pdfbox.pdmodel.PDPageTree$SearchContext:<init>(org.apache.pdfbox.pdmodel.PDPage)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isSubjectRequired()" : "*\n     * @return true if the Subject is required",
  "org.apache.pdfbox.contentstream.operator.graphics.CloseAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawKey(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getDuplex()" : "* Get the Duplex preference.  See DUPLEX enumeration.\n     *\n     * @return the Duplex preference.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:setBitsPerComponent(int)" : "* Set the number of bits per component.\n     *\n     * @param bitsPerComponent the number of bits per component",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:<init>(float[],org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Creates a PDColor containing the given color component values.\r\n     * @param components array of color component values\r\n     * @param colorSpace color space in which the components are defined",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:encode()" : "* Tries to compress the image using a predictor.\n         *\n         * @return the image or null if it is not possible to encoded the image (e.g. not supported\n         * raster format etc.)",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setSubjectDNRequired(boolean)" : "* set true if subject DN shall be required as a constraint on signature.\n     *\n     * @param flag if true, the specified Subject DN shall be enforced as a constraint.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial:getPrivateKey()" : "* returns The private key that will be used to open the document protection.\n     * @return The private key.\n     * @throws KeyStoreException If there is an error accessing the key.",
  "org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:getEncryptionKeyLength()" : "* Get the length of the secrete key that will be used to encrypt\n     * document data.\n     *\n     * @return The length (in bits) of the encryption key.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:readEncoding()" : null,
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getPrintArea()" : "* Get the PrintArea preference.  See BOUNDARY enumeration.\n     *\n     * @return the PrintArea preference.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getBorderEffect()" : "* This will retrieve the border style dictionary, describing the effect applied to the border described by the BS\n     * entry.\n     *\n     * @return the border effect dictionary.",
  "org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:setUpperRightY(float)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:getNamedDestination()" : "* This will get the name of the destination.\n     *\n     * @return The name of the destination.",
  "org.apache.pdfbox.pdfwriter.COSWriter:writeExternalSignature(byte[])" : "* Write externally created signature of PDF data obtained via {@link #getDataToSign()} method.\n     *\n     * @param cmsSignature CMS signature byte array\n     * @throws IllegalStateException if PDF is not prepared for external signing\n     * @throws IOException if source data stream is closed",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getNormalAppearanceAsContentStream()" : "* Get the annotations normal appearance content stream.\n     * \n     * <p>\n     * This will get the annotations normal appearance content stream, to 'draw' to. It will be\n     * uncompressed.\n     *\n     * @return the appearance entry representing the normal appearance.\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:save(java.io.File)" : "* This will save this document to the filesystem.\n     *\n     * @param fileName The file to save as.\n     *\n     * @throws IOException If there is an error saving the document.",
  "org.apache.pdfbox.multipdf.Splitter:cloneIDTree(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)" : null,
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getNormalizedPath(int)" : null,
  "org.apache.pdfbox.filter.FlateFilterDecoderStream:close()" : "* This will close the underlying stream and release any resources.\n     *\n     * @throws IOException If there is an error closing the underlying stream.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:showText(java.lang.String)" : "* Shows the given text at the location specified by the current text matrix.\n     *\n     * @param text The Unicode text to show.\n     * @throws IOException If an io exception occurs.\n     * @throws IllegalArgumentException if a character isn't supported by the current font",
  "org.apache.pdfbox.pdmodel.PDDocument:close()" : "* This will close the underlying COSDocument object.\n     * \n     * @throws IOException If there is an error releasing resources.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getRGBImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,org.apache.pdfbox.cos.COSArray)" : "* Returns the content of the given image as an AWT buffered image with an RGB color space.\r\n     * If a color key mask is provided then an ARGB image is returned instead.\r\n     * This method never returns null.\r\n     * @param pdImage the image to read\r\n     * @param colorKey an optional color key mask\r\n     * @return content of this image as an RGB buffered image\r\n     * @throws IOException if the image cannot be read",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setLength(int)" : "* This will set the number of bits to use for the encryption algorithm.\n     *\n     * @param length The new key length.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getAcroForm()" : "* This will get the acroform that this field is part of.\n     * \n     * @return The form this field is on.",
  "org.apache.pdfbox.filter.ASCII85OutputStream:close()" : "* This will close the stream.\n     *\n     * @throws IOException If there is an error closing the wrapped stream.",
  "org.apache.pdfbox.cos.COSDictionary:getObjectFromPath(java.lang.String)" : "* Nice method, gives you every object you want Arrays works properly too. Try \"P/Annots/[k]/Rect\" where k means the\n     * index of the Annots array.\n     *\n     * @param objPath the relative path to the object.\n     * @return the object",
  "org.apache.pdfbox.pdfparser.BaseParser:readObjectNumber()" : "* This will read a long from the Stream and throw an {@link IOException} if\n     * the long value is negative or has more than 10 digits (i.e. : bigger than\n     * {@link #OBJECT_NUMBER_THRESHOLD})\n     *\n     * @return the object number being read.\n     * @throws IOException if an I/O error occurs",
  "org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:<init>(org.apache.fontbox.afm.FontMetrics)" : "* Creates an encoding from the given AFM font metrics.\n     *\n     * @param fontMetrics AFM font metrics.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(float,float,float)" : "* Set the stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:getType()" : "* Gets the type (Type).\n     * \n     * @return the type",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createImageFormStream(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:findFieldType(org.apache.pdfbox.cos.COSDictionary,java.util.Set)" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup:<init>(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Creates a Transparency Group for reading.\n     * @param stream The XObject stream",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:getTrailer()" : "* Gets the resolved trailer. Might return <code>null</code> in case\r\n     * {@link #setStartxref(long)} was not called before.\r\n     *\r\n     * @return the trailer if available",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setCustomMetadataValue(java.lang.String,java.lang.String)" : "* Set the custom metadata value.\n     *\n     * @param fieldName The name of the custom metadata field.\n     * @param fieldValue The value to the custom metadata field.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:removeV45filters()" : "* remove CF, StmF, and StrF entries. This is to be called if V is not 4 or 5.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getName()" : null,
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getFallbackFontName(org.apache.pdfbox.pdmodel.font.PDFontDescriptor)" : "* Attempts to find a good fallback based on the font descriptor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setP(java.lang.String)" : "* This will set a parameter string to be passed to the application designated by the F entry.\n     * This entry should be omitted if F designates a document.\n     *\n     * @param p The parameter string.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setExpandedForm(java.lang.String)" : "* Sets the expanded form (E).\n     * \n     * @param expandedForm the expanded form",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:assignGlyphList(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : null,
  "org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:getPhase()" : "* Returns the dash phase.\n     * This specifies the distance into the dash pattern at which to start the dash.\n     * @return the dash phase",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:hasGlyph(int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setColor(java.awt.Color)" : "* Set the annotation color.\n     *\n     * @param c The annotation color.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setSubFilter(java.util.List)" : "* (Optional) An array of names indicating encodings to use when signing. The first name\n     * in the array that matches an encoding supported by the signature handler shall be the\n     * encoding that is actually used for signing.\n     *\n     * @param subfilter is the name that shall be used for encoding",
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing BoxStyle element.\n     *\n     * @param dic The existing dictionary.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getFunctionType()" : "* {@inheritDoc}",
  "org.apache.pdfbox.util.Hex:writeHexByte(byte,java.io.OutputStream)" : "* Writes the given byte as hex value to the given output stream.\n     * @param b the byte to be written\n     * @param output the output stream to be written to\n     * @throws IOException exception if anything went wrong",
  "org.apache.pdfbox.pdmodel.PDResources:<init>()" : "* Constructor for embedding.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:isDamaged()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators:<init>()" : null,
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getFontBoxFont()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setLineCapStyle(int)" : "* This will set the line cap style for the graphics state.\n     *\n     * @param style The new line cap style to set.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setAction(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* Set the annotation action. As of PDF 1.6 this is only used for Widget Annotations\n     * \n     * @param action The annotation action.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setXHeight(float)" : "* This will set the x height for the font.\n     *\n     * @param xHeight The new x height for the font.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getColor(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.text.TextPosition:getYScale()" : "* This will get the Y scaling factor. This is dependent on the current transformation matrix\n     * (set by the \"cm\" operator), the text matrix (set by the \"Tm\" operator) and the font size (set\n     * by the \"Tf\" operator).\n     *\n     * @return The Y scaling factor.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:curveTo(float,float,float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdfwriter.COSWriter:getXRefRanges(java.util.List)" : "* check the xref entries and write out the ranges.  The format of the\n     * returned array is exactly the same as the pdf specification.  See section\n     * 7.5.4 of ISO32000-1:2008, example 1 (page 40) for reference.\n     * <p>\n     * example: 0 1 2 5 6 7 8 10\n     * <p>\n     * will create a array with follow ranges\n     * <p>\n     * 0 3 5 4 10 1\n     * <p>\n     * this mean that the element 0 is followed by two other related numbers \n     * that represent a cluster of the size 3. 5 is follow by three other\n     * related numbers and create a cluster of size 4. etc.\n     * \n     * @param xRefEntriesList list with the xRef entries that was written\n     * @return a integer array with the ranges",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setFilter(java.lang.String)" : "* Sets the filter entry of the encryption dictionary.\n     *\n     * @param filter The filter name.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:resetBuffer()" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font)" : "* Constructor.\n     * \n     * @param fontDictionary The font dictionary according to the PDF specification.\n     * @param parent The parent font.\n     * @throws IOException if the font could not be read",
  "org.apache.pdfbox.pdmodel.font.FontMapping:isFallback()" : "* Returns true if the mapped font is a fallback, i.e. a substitute based on basic font style, such as bold/italic,\n     * rather than font name.\n     * \n     * @return true if the mapped font is a fallback",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getCreationDate()" : "* This will retrieve the date and time the annotation was created.\n     *\n     * @return the creation date/time.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:getIDATInputStream(org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)" : "* Build an input stream for the IDAT data. May need to concat multiple IDAT\n     * chunks.\n     *\n     * @param state the converter state.\n     * @return a input stream with the IDAT data.",
  "org.apache.pdfbox.rendering.PageDrawer:applySoftMaskToPaint(java.awt.Paint,org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSName)" : "* {@inheritDoc}",
  "org.apache.pdfbox.rendering.PageDrawer:appendRectangle(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setEndPointEndingStyle(java.lang.String)" : "* This will set the line ending style for the end point, see the LE_ constants for the possible values.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:loadDiskCache(java.util.List)" : "* Loads the font metadata cache from disk.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : "* Creates a new Type 1 font for embedding.\n     *\n     * @param doc PDF document to write to\n     * @param pfbIn PFB file stream\n     * @throws IOException if the font could not be read",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setProducer(java.lang.String)" : "* This will set the producer of the document.\n     *\n     * @param producer The new producer for the document.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a Caret annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setLeading(float)" : "* Sets the text leading.\n     *\n     * @param leading The leading in unscaled text units.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decryptString(org.apache.pdfbox.cos.COSString,long,long)" : "* This will decrypt a string.\n     *\n     * @param string the string to decrypt.\n     * @param objNum The object number.\n     * @param genNum The object generation number.\n     * \n     * @return the decrypted COSString",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getName()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getColorSpaceNames()" : "* Returns the names of the color space resources, if any.\r\n     * \r\n     * @return an iterable containing all names of available colorspaces",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getContents()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeClassName(java.lang.String)" : "* Removes a class name.\n     * \n     * @param className the class name",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setDocumentOutline(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline)" : "* Sets the document outlines.\n     *\n     * @param outlines The new document outlines.",
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser$ObjectNumbers:<init>(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.AppendRectangleToPath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextIndent(int)" : "* Sets the additional distance in the inline-progression direction from the\n     * start edge of the BLSE, as specified by StartIndent, to that of the first\n     * line of text (TextIndent).\n     * \n     * @param textIndent the text indent",
  "org.apache.pdfbox.cos.COSDictionary:getBoolean(java.lang.String,boolean)" : "* This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert\n     * it to a primitive boolean.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value returned if the entry is null.\n     *\n     * @return The value converted to a boolean.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:getC1()" : "* Returns the C1 values of the function, 1 if empty.\n     *\n     * @return a COSArray with the C1 values",
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor from COS object.\n     * @param array the array containing the XYZ values",
  "org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:getRaster(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setDoNotSpellCheck(boolean)" : "* Set the DoNotSpellCheck bit.\n     *\n     * @param doNotSpellCheck The value for DoNotSpellCheck.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:toString()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setOverprintMode(int)" : "* set the value of the overprint mode property.\n     *\n     * @param value The value of the overprint mode parameter.",
  "org.apache.pdfbox.rendering.GroupGraphics:getPaint()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getP()" : "* This will get a parameter string to be passed to the application designated by the F entry.\n     * This entry should be omitted if F designates a document.\n     *\n     * @return The P entry of the specific Windows launch parameter dictionary.",
  "org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Roll:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addKeyUsage(java.lang.String)" : "* (Optional; PDF 1.7) specifies an acceptable key-usage extension that must be presennt in the\n     * signing certificate for works like {@link #setKeyUsage(List)} but takes only one string\n     *\n     * @param keyUsageExtension String that consist only of {0, 1, X}",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setBorderStyle(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)" : "* This will set the border style dictionary, specifying the width and dash pattern used in drawing the line.\n     *\n     * @param bs the border style dictionary to set. \n     *",
  "org.apache.pdfbox.contentstream.operator.Operator:getImageParameters()" : "* This will get the image parameters, this is only valid for BI operators.\n     *\n     * @return The image parameters.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.font.PDFont)" : null,
  "org.apache.pdfbox.cos.PDFDocEncoding:getBytes(java.lang.String)" : "* Returns the given string encoded with PDFDocEncoding.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllTPaddings(float)" : "* Sets the same table padding for all four sides (TPadding).\n     * \n     * @param tPadding the table padding",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:getLowerLeftX()" : "* This will get the lower left x coordinate.\n     *\n     * @return The lower left x.",
  "org.apache.pdfbox.pdfwriter.COSWriter:isNeedToBeUpdated(org.apache.pdfbox.cos.COSBase)" : "* Convenience method, so that we get false for types that can't be updated.\n     * \n     * @param base\n     * @return",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:setShading(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : "* This will set the shading resources for this pattern.\n     * @param shadingResources The new shading resources for this pattern.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:setComponentRangeArray(org.apache.pdfbox.pdmodel.common.PDRange,int)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:getEmbeddedFiles()" : "* Get the embedded files named tree node. The values in this name tree will\n     * be PDComplexFileSpecification objects.\n     *\n     * @return The embedded files name tree node.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:constructAppearances()" : null,
  "org.apache.pdfbox.util.Hex:getBytes(byte[])" : "* Returns the bytes corresponding to the ASCII hex encoding of the given bytes.\n     * \n     * @param bytes the bytey to be converted\n     * @return the ASCII hex encoding of the given bytes",
  "org.apache.pdfbox.pdmodel.common.PDStream:createInputStream(java.util.List)" : "* This will get a stream with some filters applied but not others. This is\n     * useful when doing images, ie filters = [flate,dct], we want to remove\n     * flate but leave dct\n     * \n     * @param stopFilters  A list of filters to stop decoding at.\n     * @return A stream with decoded data.\n     * @throws IOException If there is an error processing the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextAlign(java.lang.String)" : "* Sets the alignment, in the inline-progression direction, of text and\n     * other content within lines of the BLSE (TextAlign). The value should be\n     * one of:\n     * <ul>\n     *   <li>{@link #TEXT_ALIGN_START},</li>\n     *   <li>{@link #TEXT_ALIGN_CENTER},</li>\n     *   <li>{@link #TEXT_ALIGN_END},</li>\n     *   <li>{@link #TEXT_ALIGN_JUSTIFY}.</li>\n     * </ul>\n     * \n     * @param textIndent the text alignment",
  "org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:setBase(java.lang.String)" : "* This will set the base URI to be used in resolving relative URI references.\n     * URI actions within the document may specify URIs in partial form, to be interpreted\n     * relative to this base address. If no base URI is specified, such partial URIs\n     * will be interpreted relative to the location of the document itself.\n     * The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described\n     * in the HTML 4.01 Specification.\n     *\n     * @param base The base URI to be used.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:validateAndEnsureAcroFormResources()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getFormatterRectangle()" : "* Gets formatter rectangle\n     * @return the formatter rectangle",
  "org.apache.pdfbox.pdmodel.PDResources:getShading(org.apache.pdfbox.cos.COSName)" : "* Returns the shading resource with the given name, or null if none exists.\r\n     *\r\n     * @param name Name of the shading resource.\r\n     * @return the shading state with the given name or null\r\n     * \r\n     * @throws IOException if something went wrong.",
  "org.apache.pdfbox.pdfparser.BaseParser:parseCOSDictionary(boolean)" : "* This will parse a PDF dictionary.\n     *\n     * @param isDirect indicates whether the dictionary to be read is a direct object\n     * @return The parsed dictionary, never null.\n     *\n     * @throws IOException If there is an error reading the stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setCallout(float[])" : "* This will set the coordinates of the callout line.\n     *\n     * @param callout An array of four or six numbers specifying a callout line attached to the free\n     * text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and\n     * ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent\n     * the starting and ending coordinates of the line.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:isRadiosInUnison()" : "*\n     * @return true If the flag is set for radios in unison.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:hideWindowUI()" : "* Get the window UI preference.\n     *\n     * @return the window UI preference.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:addComment(java.lang.String)" : "* Write a comment line.\n     *\n     * @param comment the comment to be added to the content stream\n     * \n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line\n     * could be ordinary PDF content.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getEncodeValues()" : "* Returns all encode values as COSArray.\n     * \n     * @return the encode array.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:getThreadInfo()" : "* Get info about the thread, or null if there is nothing.\n     *\n     * @return The thread information.",
  "org.apache.pdfbox.filter.JBIG2Filter:logLevigoDonated()" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getPageMode()" : "* Returns the page display mode.\n     * \n     * @return the PageMode of the document, if not present PageMode.USE_NONE is returned",
  "org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:getSelectedIndex()" : "* This will get the selected index.\n     * <p>\n     * A RadioButton might have multiple same value options which are not selected jointly if\n     * they are not set in unison {@link #isRadiosInUnison()}.</p>\n     * \n     * <p>\n     * The method will return the first selected index or -1 if no option is selected.</p>\n     * \n     * @return the first selected index or -1.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setAlternateCaption(java.lang.String)" : "* This will set the alternate caption.\n     * \n     * @param caption the alternate caption",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setTextKnockoutFlag(boolean)" : "* This will set the text knockout flag.\n     *\n     * @param tk The text knockout flag.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:<init>(org.apache.pdfbox.cos.COSBase)" : "* Constructor.\n     *\n     * @param functionStream The function .",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBWithAttributes(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getLine()" : "* This will retrieve the start and end coordinates of the line (or leader line if LL entry is set).\n     *\n     * @return array of floats [x1, y1, x2, y2] line start and end points in default user space.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:arrayToString(float[])" : "* Creates a String representation of a float array.\n     * \n     * @param array the float array\n     * @return the String representation",
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:getNames()" : "* Returns the set of known font names, including aliases.\r\n     * \r\n     * @return the set of known font names",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:saveXFDF(java.lang.String)" : "* This will save this document to the filesystem.\n     *\n     * @param fileName The file to save as.\n     *\n     * @throws IOException If there is an error saving the document.",
  "org.apache.pdfbox.pdmodel.encryption.RC4Cipher:<init>()" : "* Constructor.",
  "org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequence:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Or:applyforInteger(int,int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setHidden(boolean)" : "* Set the hidden flag.\n     *\n     * @param hidden The new hidden flag.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:toRGBImageAWT(java.awt.image.WritableRaster,java.awt.color.ColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setReplyType(java.lang.String)" : "* This will set the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the\n     * available values.\n     *\n     * @param rt the reply type.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getSubject()" : "* Get the description of the annotation.\n     *\n     * @return The subject of the annotation.",
  "org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getLineWidth()" : "* Get the value of the line width.\n     *\n     * @return The current line width.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:getShadingType()" : null,
  "org.apache.pdfbox.cos.COSDictionary:getFloat(java.lang.String,float)" : "* This is a convenience method that will get the dictionary object that is expected to be a float. If the\n     * dictionary value is null then the default value will be returned.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The float value.",
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteIncrement()" : "* Write an incremental update for a non signature case. This can be used for e.g. augmenting\n     * signatures.\n     *\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getFilter()" : "* Get the name of the filter.\n     *\n     * @return The filter name contained in this encryption dictionary.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setFile(java.lang.String)" : "* This will set the file name. You should also call\n     * {@link #setFileUnicode(java.lang.String) setFileUnicode(String)} for cross-platform and\n     * cross-language compatibility.\n     *\n     * @param file The name of the file.",
  "org.apache.pdfbox.rendering.PageDrawer:getStrokingPaint()" : null,
  "org.apache.pdfbox.multipdf.Overlay:getLayoutPage(org.apache.pdfbox.pdmodel.PDDocument)" : "* Create a LayoutPage object from the first page of the given document.\n     *\n     * @param doc\n     * @return\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.PDPage:setArtBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the ArtBox for this page.\n     * \n     * @param artBox The new ArtBox for this page.",
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:<init>(java.io.OutputStream,long)" : "* Constructor.\n     *\n     * @param out The underlying stream to write to.\n     * @param position The current position of output stream.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[],java.lang.String,org.apache.pdfbox.pdmodel.graphics.image.CustomFactory)" : "* Create a PDImageXObject from an image byte array. This overloaded version allows providing \r\n     * a custom factory to handle specific image formats, such as BMP and GIF, or to act as a \r\n     * fallback strategy when the default converters (e.g., for PNG or TIFF) fail.\r\n     *\r\n     * @param document the document that shall use this PDImageXObject.\r\n     * @param byteArray bytes from an image file.\r\n     * @param name name of image file for exception messages, can be null.\r\n     * @param customFactory optional factory used to handle BMP, GIF, or fallback cases \r\n     *                       (e.g., for PNG or TIFF). If {@code null}, this method delegates to\r\n     *                       {@link #createFromByteArray(PDDocument, byte[], String)}.\r\n     * @return a PDImageXObject.\r\n     * @throws IOException if there is an error when reading the file or creating the\r\n     * PDImageXObject.\r\n     * @throws IllegalArgumentException if the image type is not supported.",
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite:getInstance(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode,float)" : "* Creates a blend composite\r\n     *\r\n     * @param blendMode Desired blend mode\r\n     * @param constantAlpha Constant alpha, must be in the inclusive range\r\n     * [0.0...1.0] or it will be clipped.\r\n     * @return a blend composite.\r\n     * @throws IllegalArgumentException if blendMode is null.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor using the given shading dictionary.\r\n     *\r\n     * @param shadingDictionary the dictionary for this shading",
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:asciiControl(char)" : "* Return true if the given {@code ch} is an ASCII control character\n     * as defined by <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.2.1\">RFC 3454,\n     * Appendix C.2.1</a>.",
  "org.apache.pdfbox.pdfparser.BaseParser:parseCOSString()" : "* This will parse a PDF string.\n     *\n     * @return The parsed PDF string.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Word:setAttributes(java.text.AttributedString)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:curveTo(float,float,float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.cos.COSDocument:getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)" : "* This will get an object from the pool.\n     *\n     * @param key The object key.\n     *\n     * @return The object in the pool or a new one if it has not been parsed yet.",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.filter.DecodeResult:getParameters()" : "* Returns the stream parameters, repaired using the embedded stream data.\n     * @return the repaired stream parameters, or an empty dictionary",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:getLabelsByPageIndices()" : "* Returns a mapping with 0-based page indices as keys and corresponding\n     * page labels as values as an array. The array will have exactly as much\n     * entries as the document has pages.\n     * \n     * @return an array mapping from 0-based page indices to labels.",
  "org.apache.pdfbox.pdmodel.encryption.MessageDigests:getMD5()" : "* @return MD5 message digest",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:getBBox()" : "* This will retrieve the rectangle specifying the location of the viewport.\n     * \n     * @return the location",
  "org.apache.pdfbox.pdmodel.PDDocument:<init>()" : "* Creates an empty PDF document.\n     * You need to add at least one page for the document to be valid.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:showText(java.lang.String)" : "* Shows the given text at the location specified by the current text matrix.\n     *\n     * @param text The Unicode text to show.\n     * @throws IOException If an io exception occurs.\n     * @throws IllegalArgumentException if a character isn't supported by the current font",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:removeKid(org.apache.pdfbox.cos.COSBase)" : "* Removes a COS base kid.\r\n     * \r\n     * @param object the COS base\r\n     * @return <code>true</code> if the kid was removed, <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getAttributes()" : "* Returns the attributes together with their revision numbers (A).\n     * \n     * @return the attributes as a list, never null.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:adjustForRotation()" : "* Adjust signature for page rotation. This is optional, call this after all x and y coordinates\n     * have been set if you want the signature to be positioned regardless of page orientation.\n     *\n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing structure element.\n     * \n     * @param dic The existing dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setEndColour(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the colour for the end edge.\n     * \n     * @param colour the colour for the end edge",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:<init>()" : "* Constructor.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:getColor()" : "* Returns the non-stroking color.\n     * @return The non-stroking color.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:close()" : "* Close the content stream.  This must be called when you are done with this object.\n     *\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.contentstream.operator.OperatorName:<init>()" : "* private constructor",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Set the rectangle associated with this annotation.\n     *\n     * @param rectangle The annotation rectangle.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getWidthFromFont(int)" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:next()" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:setGroupEnabled(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup,boolean)" : "* Enables or disables an optional content group.\n     * @param group the group object\n     * @param enable true to enable, false to disable\n     * @return true if the group already had an on or off setting, false otherwise",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getLowerLimit()" : "* Get the lowest value for a key in the name map.\n     *\n     * @return The lowest value for a key in the map.",
  "org.apache.pdfbox.text.PDFTextStripper:handleLineSeparation(org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,float)" : "* handles the line separator for a new line given the specified current and previous TextPositions.\n     * \n     * @param current the current text position\n     * @param lastPosition the previous text position\n     * @param lastLineStartPosition the last text position that followed a line separator.\n     * @param maxHeightForLine max height for positions since lastLineStartPosition\n     * @return start position of the last line\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Create a target directory from an existing dictionary.\n     *\n     * @param dictionary The existing graphics state.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:setStyle(java.lang.String)" : "* This will set the border effect, see the STYLE_* constants for valid values.\n     *\n     * @param s the border effect to use",
  "org.apache.pdfbox.pdmodel.font.UniUtil:getUniNameOfCodePoint(int)" : null,
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getCodePageRange1()" : null,
  "org.apache.pdfbox.pdfparser.PDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead)" : "* Constructor.\n     * Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param source source representing the pdf.\n     * @throws IOException If something went wrong.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:computeHash(java.io.InputStream)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:isTrueTypeCollectionFile(byte[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setConstantOpacity(float)" : "* This will set the constant opacity value used when rendering the annotation (excluing any popup).\n     *\n     * @param ca the constant opacity value.",
  "org.apache.pdfbox.pdmodel.PDPage:setViewports(java.util.List)" : "* Set the viewports.\n     *\n     * @param viewports A list of viewports, or null if the entry is to be deleted.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:load(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,org.apache.pdfbox.pdmodel.font.encoding.Encoding)" : "* Loads a TTF to be embedded into a document as a simple font.\n     *\n     * <p>\n     * <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use\n     * {@link PDType0Font#load(PDDocument, InputStream)} instead.\n     * </p>\n     * \n     * @param doc The PDF document that will hold the embedded font.\n     * @param ttf A true type font\n     * @param encoding The PostScript encoding vector to be used for embedding.\n     * @return a PDTrueTypeFont instance.\n     * @throws IOException If there is an error loading the data.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:setReferencedObject(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : "* Sets the referenced annotation.\r\n     * \r\n     * @param annotation the referenced annotation",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getContents(byte[])" : "* Will return the embedded signature between the byterange gap.\n     *\n     * @param pdfFile The signed pdf file as byte array\n     * @return a byte array containing the signature\n     * @throws IOException if the pdfFile can't be read\n     * @throws IndexOutOfBoundsException if the byterange array is not long enough",
  "org.apache.pdfbox.text.PDFTextStripper:getSeparateByBeads()" : "* This will tell if the text stripper should separate by beads.\n     *\n     * @return If the text will be grouped by beads.",
  "org.apache.pdfbox.cos.COSDictionary:getDictionaryObject(java.lang.String)" : "* This will get an object from this dictionary. If the object is a reference then it will dereference it and get it\n     * from the document. If the object is COSNull then null will be returned.\n     *\n     * @param key The key to the object that we are getting.\n     *\n     * @return The object that matches the key.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextDecorationThickness(float)" : "* Sets the thickness of each line drawn as part of the text decoration\n     * (TextDecorationThickness).\n     * \n     * @param textDecorationThickness the text decoration thickness",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getName()" : "* Get the annotation name.\n     *\n     * @return The unique name of the annotation.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:encodeForGsub(org.apache.fontbox.ttf.gsub.GsubWorker,java.util.Set,org.apache.pdfbox.pdmodel.font.PDType0Font,java.lang.String)" : "* Retrieve the encoded glyph IDs for the characters in the specified text, after applying any\n     * relevant GSUB rules. The glyph IDs used are also added to the specified glyph ID set.\n     *\n     * @param gsubWorker The GSUB worker which defines the GSUB transformations to apply.\n     * @param glyphIds The set of glyph IDs which is to be populated with the glyph IDs found in the\n     * text.\n     * @param font The font whose cmap table will be used to map characters to glyph IDs.\n     * @param text The text which is being converted from characters to glyph IDs.\n     * @return The encoded glyph IDs for the characters in the specified text, after applying any\n     * relevant GSUB rules.\n     * @throws IOException If there is an error during encoding.\n     * @throws IllegalStateException If we cannot find a glyph ID for any characters in the\n     * specified text.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:codeToGID(int)" : "* Returns the GID for the given character code.\n     *\n     * @param code character code\n     * @return GID for the given character code\n     * \n     * @throws IOException if the data could not be read",
  "org.apache.pdfbox.cos.COSDictionary:getBoolean(org.apache.pdfbox.cos.COSName,boolean)" : "* This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert\n     * it to a primitive boolean.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value returned if the entry is null.\n     *\n     * @return The entry converted to a boolean.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setRotation(int)" : "* This will set the rotation.\n     * \n     * @param rotation the rotation as a multiple of 90",
  "org.apache.pdfbox.contentstream.operator.markedcontent.EndMarkedContentSequence:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:createBlendModeMap()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setLockedContents(boolean)" : "* Set the LockedContents flag. If set, do not allow the contents of the annotation to be\n     * modified by the user. This flag does not restrict deletion of the annotation or changes to\n     * other annotation properties, such as position and size.\n     *\n     * @param lockedContents The new LockedContents flag value.\n     * @see\n     * <a href=\"https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=393\">PDF\n     * 32000-1:2008 12.5.3, Table 165</a>\n     * @see #isLockedContents()\n     * @see #FLAG_LOCKED_CONTENTS\n     * @since PDF 1.7",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setPaintType(int)" : "* This will set the paint type.\n     * @param paintType The new paint type.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setInnterFormStream(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Sets inner form stream\n     * \n     * @param innerFormStream the stream of the inner form",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:setParent(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup)" : "* This will set the markup annotation which this popup relates to.\n     *\n     * @param annot the markup annotation.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getBitsPerSample()" : "* Get the number of bits that the output value will take up.  \n     * \n     * Valid values are 1,2,4,8,12,16,24,32.\n     *\n     * @return Number of bits for each output value.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getRolloverCaption()" : "* This will retrieve the rollover caption.\n     * \n     * @return the rollover caption.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:getStyle()" : "* This will retrieve the border style, see the STYLE_* constants for valid values.\n     *\n     * @return the style of the border",
  "org.apache.pdfbox.text.PDFTextStripper:setAverageCharTolerance(float)" : "* Set the character width-based tolerance value that is used to estimate where spaces in text should be added. Note\n     * that the default value for this has been determined from trial and error. Setting this value larger will reduce\n     * the number of spaces added.\n     * \n     * @param averageCharToleranceValue average tolerance / scaling factor to use",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawCircles(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addBoolean(boolean)" : "* Adds a bool value.\n     * @param value the value",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:setRangeForComponent(org.apache.pdfbox.pdmodel.common.PDRange,int)" : "* Sets the range for this color space.\n     * @param range the new range for the a component\n     * @param n the component to set the range for",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:curveTo(float,float,float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:isHangingIndent()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:getStringWidth(java.lang.String)" : "* Returns the width of the given Unicode string.\n     *\n     * @param text The text to get the width of.\n     * @return The width of the string in 1/1000 units of text space.\n     * @throws IOException If there is an error getting the width information.\n     * @throws IllegalArgumentException if a character isn't supported by the font.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:setNext(java.util.List)" : "* This will set the next action, or sequence of actions, to be performed after this one.\n     * The value is either a single action dictionary or an array of action dictionaries\n     * to be performed in order.\n     *\n     * @param next The Next action or sequence of actions.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getTitle()" : "* Get the title of this node.\n     *\n     * @return The title of this node.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:beginText()" : "* Begin some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest beginText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getValue(java.lang.Integer)" : "* Returns the value corresponding to an index in the number tree.\n     *\n     * @param index The index in the number tree.\n     *\n     * @return The value corresponding to the index.\n     *\n     * @throws IOException If there is a problem creating the values.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:<init>()" : "* creates a new empty encryption dictionary.",
  "org.apache.pdfbox.pdfwriter.COSWriter:getObjectKey(org.apache.pdfbox.cos.COSBase)" : "* This will get the object key for the object.\n     *\n     * @param obj The object to get the key for.\n     *\n     * @return The object key for the object.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getVersion()" : "* This will return the V entry of the encryption dictionary.<br><br>\n     * See PDF Reference 1.4 Table 3.13.\n     *\n     * @return The encryption version to use.",
  "org.apache.pdfbox.util.DateConverter:toCalendar(org.apache.pdfbox.cos.COSString)" : "* Returns the Calendar for a given COS string containing a date,\n     * or {@code null} if it cannot be parsed.\n     *\n     * The returned value will have 0 for DST_OFFSET.\n     * \n     * @param text A COS string containing a date.\n     * @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getPaintType()" : "* This will return the paint type.\n     * @return The paint type",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSBase,int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Creates an Image XObject in the given document using the given filtered stream. This\r\n     * constructor is for internal PDFBox use and is not for PDF generation. Users who want to\r\n     * create images should look at {@link #createFromFileByExtension(File, PDDocument) }.\r\n     *\r\n     * @param document the current document\r\n     * @param encodedStream an encoded stream of image data\r\n     * @param cosFilter the filter or a COSArray of filters\r\n     * @param width the image width\r\n     * @param height the image height\r\n     * @param bitsPerComponent the bits per component\r\n     * @param initColorSpace the color space\r\n     * @throws IOException if there is an error creating the XObject.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:restoreGraphicsState()" : "* Q operator. Restores the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getProperties()" : "* Gets the properties.\r\n     * \r\n     * @return the properties",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:appendObjectableKid(org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* Appends an objectable kid.\r\n     * \r\n     * @param objectable the objectable",
  "org.apache.pdfbox.cos.COSArray:setString(int,java.lang.String)" : "* Set the value in the array as a string.\n     * @param index The index into the array.\n     * @param string The string to set in the array.",
  "org.apache.pdfbox.pdfparser.PDFXRefStream:<init>(org.apache.pdfbox.cos.COSDocument)" : "* Create a fresh XRef stream like for a fresh file or an incremental update.\n     * \n     * @param cosDocument the COSDocmernt to be used to create a new COSStream",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:readCode(java.io.InputStream)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:exportFDF()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport:setSignature(byte[])" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:closePath()" : "* Closes the current subpath.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFileAttachment:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawStyle(java.lang.String,org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float,boolean,boolean,boolean)" : "* Draw a line ending style.\n     * \n     * @param style\n     * @param cs\n     * @param x\n     * @param y\n     * @param width\n     * @param hasStroke\n     * @param hasBackground\n     * @param ending false if left, true if right of an imagined horizontal line (important for\n     * arrows).\n     *\n     * @throws IOException",
  "org.apache.pdfbox.cos.COSArray:indexOfObject(org.apache.pdfbox.cos.COSBase)" : "* This will return the index of the entry or -1 if it is not found.\n     * This method will also find references to indirect objects.\n     *\n     * @param object The object to search for.\n     * @return The index of the object or -1.",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getCreationDate()" : "* This will get the creation date of the document.  This will return null if no creation date exists.\n     *\n     * @return The creation date of the document.",
  "org.apache.pdfbox.text.PDFTextStripper:normalizeAdd(java.util.List,java.lang.StringBuilder,java.util.List,org.apache.pdfbox.text.PDFTextStripper$LineItem)" : "* Used within {@link #normalize(List)} to handle a {@link TextPosition}.\n     * \n     * @return The StringBuilder that must be used when calling this method.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.cos.COSDocument:getVersion()" : "* This will get the version extracted from the header of this PDF document.\n     *\n     * @return The header version.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:<init>()" : "* Constructor.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:operatorException(org.apache.pdfbox.contentstream.operator.Operator,java.util.List,java.io.IOException)" : "* Called when an exception is thrown by an operator.\n     *\n     * @param operator The unknown operator.\n     * @param operands The list of operands.\n     * @param exception the excpetion which occured when processing the operator\n     * \n     * @throws IOException if there is an error processing the operator exception",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a Type 1 font from a Font dictionary in a PDF.\n     * \n     * @param fontDictionary font dictionary.\n     * @throws IOException if there was an error initializing the font.\n     * @throws IllegalArgumentException if /FontFile3 was used.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:getPageIndices()" : "* Get an ordered set of page indices having a page label range.\n     *\n     * @return set of page indices.",
  "org.apache.pdfbox.pdmodel.PDResources:getPatternNames()" : "* Returns the names of the pattern resources, if any.\r\n     * \r\n     * @return an iterable containing all names of available patterns",
  "org.apache.pdfbox.pdmodel.font.encoding.Encoding:overwrite(int,java.lang.String)" : "* This will add a character encoding. An already existing mapping is overwritten when creating\n     * the reverse mapping. Should only be used during construction of the class.\n     *\n     * @see Encoding#add(int, String)\n     *\n     * @param code character code\n     * @param name PostScript glyph name",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:<init>()" : "* Constructor, creates PDF template structure.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(float,float,float,float)" : "* Set the stroking color in the DeviceCMYK color space. Range is 0..1\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.cos.COSArray:toList()" : "*  Return contents of COSArray as a Java List.\n     *\n     *  @return the COSArray as List",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:removeShading(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.cos.COSOutputStream:write(int)" : null,
  "org.apache.pdfbox.cos.COSDictionary:setName(java.lang.String,java.lang.String)" : "* This is a convenience method that will convert the value to a COSName object. If it is null then the object will\n     * be removed.\n     *\n     * @param key The key to the object,\n     * @param value The string value for the name.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setValue(org.apache.pdfbox.cos.COSBase)" : "* Sets the COS value of this field.\n     *\n     * @param value COS value.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processTransparencyGroup(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)" : "* Processes a transparency group stream.\n     * \n     * @param group transparency group to be processed\n     * @throws IOException if the transparency group cannot be processed",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:clip()" : "* Intersects the current clipping path with the current path, using the nonzero rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getFont(org.apache.pdfbox.pdmodel.font.FontFormat,java.lang.String)" : "* Finds the named font with the given format.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getGroup()" : "* Returns the transparency group attributes dictionary.\n     *\n     * @return the transparency group attributes dictionary, never null.",
  "org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)" : null,
  "org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:getCOSObject()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setHorizontalScaling(float)" : "* Set the horizontal scaling to scale / 100.\n     *\n     * @param scale number specifying the percentage of the normal width. Default value: 100 (normal\n     * width).\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:insertSiblingAfter(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* Insert a single sibling after this node.\n     *\n     * @param newSibling The item to insert.\n     * @throws IllegalArgumentException if the given sibling node is part of a list \n     * (i.e. if it has a previous or a next sibling)",
  "org.apache.pdfbox.rendering.GroupGraphics:setClip(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setAppearanceStreamReference(org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference)" : "* This will set the named page references.\n     *\n     * @param ref The named page references.",
  "org.apache.pdfbox.pdmodel.PDPage:setActions(org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions)" : "* Set the page actions.\n     * \n     * @param actions The actions for the page.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getFont()" : "* Get the value of the font.\n     *\n     * @return The font.",
  "org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:getFunction()" : "* Returns the function.\r\n     *\r\n     * @return the function\r\n     * @throws java.io.IOException if we were not able to create the function.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:hasGlyph(int)" : null,
  "org.apache.pdfbox.cos.COSString:<init>(java.lang.String,boolean)" : "* Creates a new <i>text string</i> from a Java String.\n     *\n     * @param text The string value of the object.\n     * @param forceHex forces the hexadecimal presentation of the string if set to true\n     *",
  "org.apache.pdfbox.text.TextPosition:getXRot(float)" : "* Return the X starting coordinate of the text, adjusted by the given rotation amount.\n     * The rotation adjusts where the 0,0 location is relative to the text.\n     *\n     * @param rotation Rotation to apply (0, 90, 180, or 270).  0 will perform no adjustments.\n     * @return X coordinate",
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getDS()" : "* This will get a JavaScript action to be performed\n     * after saving a document.\n     * The name DS stands for \"did save\".\n     *\n     * @return The DS entry of document catalog's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(float,float,float)" : "* Set the non-stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.font.encoding.Encoding:getCodeToNameMap()" : "* Returns an unmodifiable view of the code -&gt; name mapping.\n     * \n     * @return the code -&gt; name map",
  "org.apache.pdfbox.contentstream.operator.state.SetLineJoinStyle:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getWidth(int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getAverageCharacterWidth()" : null,
  "org.apache.pdfbox.rendering.PageDrawer:getDashArray(org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getUserEncryptionKey()" : "* This will get the UE entry in the standard encryption dictionary.\n     *\n     * @return A 32 byte array or null if there is no user encryption key.\n     *\n     * @throws IOException If there is an error accessing the data.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setDestination(org.apache.pdfbox.pdmodel.PDPage)" : "* A convenience method that will create an XYZ destination using only the defaults.\n     *\n     * @param page The page to refer to.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:getZoom()" : "* Get the zoom value.  Return values of 0 or -1 imply that the current zoom\n     * will be used.\n     *\n     * @return The zoom value for the page.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:retrievePageNumber()" : "* Returns the page number for this destination, regardless of whether this is a page number or\n     * a reference to a page.\n     *\n     * @see org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem\n     * @return the 0-based page number, or -1 if the destination type is unknown.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:importFDF(org.apache.pdfbox.pdmodel.fdf.FDFField)" : null,
  "org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:getFont()" : "* Get the font used for text formatting.\n     * \n     * @return the font used for text formatting.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)" : "* Set the font and font size to draw text with.\n     *\n     * @param font The font to use.\n     * @param fontSize The font size to draw the text.\n     * @throws IOException If there is an error writing the font information.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(org.apache.pdfbox.io.RandomAccessRead,java.awt.image.BufferedImage,int)" : "* Constructor.\n     *\n     * @param documentSource Original PDF document as RandomAccessRead\n     * @param image the image to be used for the visible signature\n     * @param page The 1-based page number for which the page size should be calculated.\n     * @throws IOException if the new instance of PDVisibleSignDesigner could not be created",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEFDictionary()" : null,
  "org.apache.pdfbox.pdfparser.BaseParser:readString()" : "* This will read the next string from the stream.\n     *\n     * @return The string that was read from the stream, never null.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.cos.COSInteger:intValue()" : "* Polymorphic access to value as int\n     * This will get the integer value of this object.\n     *\n     * @return The int value of this object,",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllBorderColors(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the same border colour for all four sides (BorderColor).\n     * \n     * @param borderColor the border colour",
  "org.apache.pdfbox.pdfparser.BaseParser:readUntilEndOfCOSDictionary()" : "* Keep reading until the end of the dictionary object or the file has been hit, or until a '/'\n     * has been found.\n     *\n     * @return true if the end of the object or the file has been found, false if not, i.e. that the\n     * caller can continue to parse the dictionary at the current position.\n     *\n     * @throws IOException if there is a reading error.",
  "org.apache.pdfbox.text.PDFTextStripper:setPageEnd(java.lang.String)" : "* Sets the string which will be used at the end of a page.\n     * \n     * @param pageEndValue the page end string",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getPostScriptName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDListBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDField#PDField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setOverprintMode(java.lang.Integer)" : "* This will set the overprint mode(OPM).\n     *\n     * @param overprintMode The overprint mode",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setStatus(java.lang.String)" : "* This will set the status string.\n     *\n     * @param status The new status string.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isOwnerPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)" : "* Check for owner password.\n     *\n     * @param ownerPassword The owner password.\n     * @param user The u entry of the encryption dictionary.\n     * @param owner The o entry of the encryption dictionary.\n     * @param permissions The set of permissions on the document.\n     * @param id The document id.\n     * @param encRevision The encryption algorithm revision.\n     * @param keyLengthInBytes The encryption key length in bytes.\n     * @param encryptMetadata The encryption metadata\n     *\n     * @return True If the ownerPassword param is the owner password.\n     *\n     * @throws IOException If there is an error accessing data.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFileUnicode()" : "* Get the embedded unicode file.\n     *\n     * @return The embedded unicode file for this file spec.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:save(java.io.OutputStream)" : "* This will save the document to an output stream.\n     *\n     * @param output The stream to write to.\n     *\n     * @throws IOException If there is an error writing the document.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:setEncodeValues(org.apache.pdfbox.cos.COSArray)" : "* This will set the encode values.\n     *\n     * @param encodeValues The new encode values.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getDefaultWidth()" : "* This will get the default width. The default value for the default width is 1000.\n     *\n     * @return The default width for the glyphs in this font.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:readEncodingFromFont()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setAppearanceState(java.lang.String)" : "* This will set the annotations appearance state name.\n     * \n     * @param as The name of the appearance stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setAlternateDescription(java.lang.String)" : "* Sets the alternate description (Alt).\n     * \n     * @param alternateDescription the alternate description",
  "org.apache.pdfbox.text.PDFTextStripper:setParagraphEnd(java.lang.String)" : "* Sets the string which will be used at the end of a paragraph.\n     * \n     * @param s the paragraph end string",
  "org.apache.pdfbox.util.Matrix:multiply(org.apache.pdfbox.util.Matrix)" : "* This method multiplies this Matrix with the specified other Matrix, storing the product in a \n     * new instance. It is allowed to have (other == this).\n     *\n     * @param other the second operand Matrix in the multiplication; required\n     * @return the product of the two matrices.",
  "org.apache.pdfbox.text.PDFTextStripper:endArticle()" : "* End an article. Default implementation is to do nothing. Subclasses may provide additional information.\n     *\n     * @throws IOException If there is any error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The dictionary that holds the name information.",
  "org.apache.pdfbox.pdmodel.encryption.RC4Cipher:write(java.io.InputStream,java.io.OutputStream)" : "* This will encrypt and write the data.\n     *\n     * @param data The data to encrypt.\n     * @param output The stream to write to.\n     *\n     * @throws IOException If there is an error writing to the output stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:saveXFDF(java.io.File)" : "* This will save this document to the filesystem.\n     *\n     * @param fileName The file to save as.\n     *\n     * @throws IOException If there is an error saving the document.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:encodeImageToJPEGStream(java.awt.image.BufferedImage,float,int)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:curveTo(float,float,float,float,float,float)" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:subList(int,int)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(java.awt.Color)" : "* Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:getVisualSignatureAsStream(org.apache.pdfbox.cos.COSDocument)" : null,
  "org.apache.pdfbox.pdmodel.encryption.MessageDigests:getSHA1()" : "* @return SHA-1 message digest",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:setUpperLimit(java.lang.Integer)" : "* Set the highest value for the key in the map.\n     *\n     * @param upper The new highest value for a key in the map.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForXRef(long)" : "* Search for the offset of the given xref table/stream among those found by a brute force search.\n     * \n     * @param xrefOffset the given offset to be searched for\n     * \n     * @return the offset of the xref entry\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setDoNotScroll(boolean)" : "* Set the doNotScroll bit.\n     *\n     * @param doNotScroll The value for the doNotScroll.",
  "org.apache.pdfbox.Loader:loadXFDF(java.io.File)" : "* This will load a document from a file.\n     *\n     * @param file The name of the file to load.\n     *\n     * @return The document that was loaded.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getPositionVector(int)" : null,
  "org.apache.pdfbox.multipdf.Overlay:createContentStreamList(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setHighlightingMode(java.lang.String)" : "* Sets the highlighting mode.\n     * <dl>\n     * <dt><code>N</code></dt>\n     * <dd>(None) No highlighting.</dd>\n     * <dt><code>I</code></dt>\n     * <dd>(Invert) Invert the contents of the annotation rectangle.</dd>\n     * <dt><code>O</code></dt>\n     * <dd>(Outline) Invert the annotation's border.</dd>\n     * <dt><code>P</code></dt>\n     * <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of\n     * the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd>\n     * <dt><code>T</code></dt>\n     * <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd>\n     * </dl>\n     * \n     * @param highlightingMode the highlighting mode the defined values",
  "org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:isEmbedded()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getStartIndent()" : "* Gets the distance from the start edge of the reference area to that of\n     * the BLSE in the inline-progression direction (StartIndent). The default value is 0.\n     * \n     * @return the start indent",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getEndColour()" : "* Gets the colour for the end edge.\n     * \n     * @return the colour for the end edge",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:readEncoding()" : "* Reads the Encoding from the Font dictionary or the embedded or substituted font file.\r\n     * Must be called at the end of any subclass constructors.\r\n     *\r\n     * @throws IOException if the font file could not be read",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:addSource(org.apache.pdfbox.io.RandomAccessRead)" : "* Add a source to the list of documents to merge.\n     *\n     * @param source RandomAccessRead representing source document. To pass an InputStream, wrap it\n     * into a {@link RandomAccessReadBuffer}.",
  "org.apache.pdfbox.cos.COSFloat:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* Visitor pattern double dispatch method.\n     *\n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If an error occurs while visiting this object.",
  "org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:setMarked(boolean)" : "* Set if this is a tagged PDF.\n     *\n     * @param value The new marked value.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:setAppearanceValue(java.lang.String)" : "* This is the public method for setting the appearance stream.\n     *\n     * @param apValue the String value which the appearance should represent\n     * @throws IOException If there is an error creating the stream.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getCharProcs()" : "* Returns the dictionary containing all streams to be used to render the glyphs.\n     * \n     * @return the dictionary containing all glyph streams.",
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteObject(org.apache.pdfbox.cos.COSBase)" : "* This will write a COS object.\n     *\n     * @param obj The object to write.\n     *\n     * @throws IOException if the output cannot be written",
  "org.apache.pdfbox.pdmodel.font.encoding.Encoding:getName(int)" : "* This will take a character code and get the name from the code.\n     * \n     * @param code character code\n     * @return PostScript glyph name",
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getR()" : "* Returns the r value of the tristimulus.\n     * @return the R value.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setIconFit(org.apache.pdfbox.pdmodel.fdf.FDFIconFit)" : "* This will set the icon fit 'IF' entry.\n     *\n     * @param fit The icon fit object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:isEmbedded()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:getParagraphStart()" : "* Returns the string which will be used at the beginning of a paragraph.\n     * \n     * @return the paragraph start string",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:setInteriorColor(java.awt.Color)" : "* This will set interior color of the line endings defined in the LE entry.\n     *\n     * @param color The interior color of the line endings.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getContentsForRandomAccess()" : null,
  "org.apache.pdfbox.util.Matrix:getTranslateX()" : "* Returns the x-translation element of this matrix.\n     * \n     * @return the x-translation element of the matrix",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setCommitOnSelChange(boolean)" : "* Set the CommitOnSelChange bit.\n     *\n     * @param commitOnSelChange The value for CommitOnSelChange.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType4:eval(float[])" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:processSetFontColor(java.util.List)" : "* Process the font color operator.\n     * \n     * This is assumed to be an RGB color.\n     * \n     * @param operands the color components\n     * @throws IOException in case of the color components not matching",
  "org.apache.pdfbox.pdmodel.common.PDStream:toByteArray()" : "* This will copy the stream into a byte array.\n     * \n     * @return The byte array of the filteredStream.\n     * @throws IOException if an I/O error occurs.",
  "org.apache.pdfbox.multipdf.Overlay:getLayoutPage(int,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:addClassName(java.lang.String)" : "* Adds a class name.\n     * \n     * @param className the class name",
  "org.apache.pdfbox.pdmodel.font.encoding.StandardEncoding:<init>()" : "* Constructor.",
  "org.apache.pdfbox.util.Matrix:toCOSArray()" : "* Returns a COS array which represent the geometric relevant components of the matrix. The last column of the\n     * matrix is ignored, only the first two columns are returned. This is analog to the Matrix(COSArray) constructor.\n     * \n     * @return a COSArray representing the geometric relevant components of the matrix",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setCustomSecureRandom(java.security.SecureRandom)" : "* Set the custom SecureRandom.\n     * \n     * @param customSecureRandom the custom SecureRandom for AES encryption",
  "org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:<init>()" : "* Constructor.\n     *",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:<init>(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject)" : "* Creates a new user property.\n     * \n     * @param userAttributeObject the user attribute object",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream$Tree:fill(int,int,org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node)" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:<init>()" : "* Instantiate a new PDFMergerUtility.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.pdmodel.font.encoding.Encoding)" : "* Creates a new Type 1 font for embedding.\n     *\n     * @param doc PDF document to write to\n     * @param pfbIn PFB file stream\n     * @param encoding encoding to be used for the font\n     * @throws IOException if the font could not be read",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:setTrackMousePosition(boolean)" : "* This will specify whether to track the mouse position when the URI is\n     * resolved.\n     *\n     * @param value The flag value.",
  "org.apache.pdfbox.pdmodel.PDPageTree:findPage(org.apache.pdfbox.pdmodel.PDPageTree$SearchContext,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:getOrdering()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getWidth()" : "* Gets the width of the element’s content rectangle in the\n     * inline-progression direction (Width). The default value is\n     * {@link #WIDTH_AUTO}.\n     * \n     * @return the width (a Float or a String)",
  "org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isSymbolic()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cos:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:moveTo(float,float)" : "* Move the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:getFontColor()" : "* Returns the font color",
  "org.apache.pdfbox.pdfparser.COSParser:lastIndexOf(char[],byte[],int)" : "* Searches last appearance of pattern within buffer. Lookup before _lastOff and goes back until 0.\n     * \n     * @param pattern pattern to search for\n     * @param buf buffer to search pattern in\n     * @param endOff offset (exclusive) where lookup starts at\n     * \n     * @return start offset of pattern within buffer or <code>-1</code> if pattern could not be found",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a Link annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdfparser.xref.NormalXReference:getByteOffset()" : "* Returns the byte offset of the {@link COSObject} in the PDF file.\n     *\n     * @return The byte offset of the {@link COSObject} in the PDF file.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)" : "* The Tm operator. Sets the text matrix to the given values.\n     * A current text matrix will be replaced with the new one.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.PDDocument:removePage(int)" : "* Remove the page from the document. Do not use this method if other pages link to this one or\n     * if your document has a structure tree for accessibility unless you are able to fix these as\n     * well. In such cases it is better to use the splitter() class which will do these fixes.\n     * \n     * @param pageNumber 0 based index to page number.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:readEncodingFromFont()" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:eval(float[])" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:<init>()" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setStringFilterName(org.apache.pdfbox.cos.COSName)" : "* Sets the name of the filter which is used for de/encrypting strings.\n     * \n     * @param stringFilterName the name of the filter",
  "org.apache.pdfbox.pdmodel.common.PDStream:getCOSObject()" : "* Get the cos stream associated with this object.\n     *\n     * @return The cos object that matches this Java object.\n     *",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getDests()" : "* @return The named destinations dictionary for this document or null if none exists.",
  "org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getStrokingOverprintControl()" : "* This will get the overprint control.\n     *\n     * @return The overprint control or null if one has not been set.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineWidth(float)" : "* Set line width to the given value.\n     *\n     * @param lineWidth The width which is used for drawing.\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setItalic(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.rendering.PageDrawer:drawTilingPattern(java.awt.Graphics2D,org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,org.apache.pdfbox.util.Matrix)" : "* Draws the pattern stream to the requested context.\r\n     *\r\n     * @param g The graphics context to draw onto.\r\n     * @param pattern The tiling pattern to be used.\r\n     * @param colorSpace color space for this tiling.\r\n     * @param color color for this tiling.\r\n     * @param patternMatrix the pattern matrix\r\n     * @throws IOException If there is an IO error while drawing the page.",
  "org.apache.pdfbox.pdmodel.PDPage:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setOverprint(boolean)" : "* set the value of the overprint property.\n     *\n     * @param value The value of the overprint parameter.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:eval(float[])" : "* Performs exponential interpolation\n     *\n     * {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setTarget(java.lang.String)" : "* This will set the target frame in the browser to open this document.\n     *\n     * @param target The new target frame.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:closeNode()" : "* Close this node.\n     *",
  "org.apache.pdfbox.cos.COSDictionary:getString(java.lang.String,java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be a\n     * string.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The default value to return.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:equals(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:intToBigEndian(int,byte[],int)" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:getPreparedKeys()" : "* Returns all {@link COSObjectKey}s, that shall be added to the object stream, when\n     * {@link COSWriterObjectStream#writeObjectsToStream(COSStream)} is called.\n     *\n     * @return All {@link COSObjectKey}s, that shall be added to the object stream.",
  "org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)" : "* Constructor creates an instance to be used for fill operations.\r\n     *\r\n     * @param shading the shading type to be used\r\n     * @param colorModel the color model to be used\r\n     * @param xform transformation for user to device space\r\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\r\n     * @param deviceBounds the bounds of the area to paint, in device units\r\n     * @throws IOException if there is an error getting the color space or doing color conversion.",
  "org.apache.pdfbox.cos.COSStream:hasData()" : "* Indicates whether the stream contains any data or not.\n     * \n     * @return true if the stream contains any data",
  "org.apache.pdfbox.contentstream.operator.state.SetLineWidth:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:<init>()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getEmbeddedFDFs()" : "* This will get the list of embedded FDF entries, or null if the entry is null. This will return a list of\n     * PDFileSpecification objects.\n     *\n     * @return A list of embedded FDF files.\n     *\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.text.PDFTextStripper:getPageEnd()" : "* Returns the string which will be used at the end of a page.\n     * \n     * @return the page end string",
  "org.apache.pdfbox.pdmodel.PDStructureElementNameTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.LineTo:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getViewClip()" : "* Get the ViewClip preference.  See BOUNDARY enumeration.\n     *\n     * @return the ViewClip preference.",
  "org.apache.pdfbox.filter.ASCIIHexFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getName(java.lang.String)" : "* Gets a name value.\n     * \n     * @param name the attribute name\n     * @return the name value",
  "org.apache.pdfbox.cos.COSDictionary:containsValue(java.lang.Object)" : "* @see java.util.Map#containsValue(java.lang.Object)\n     *\n     * @param value The value to find in the map.\n     *\n     * @return true if the map contains this value.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:getC0()" : "* Returns the C0 values of the function, 0 if empty.\n     *\n     * @return a COSArray with the C0 values",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor using the given shading dictionary.\n     *\n     * @param shadingDictionary the dictionary for this shading",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:fill()" : null,
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser:parseValue(byte[],int,int)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:shear(double,double)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:fillAndStroke()" : "* Fill and then stroke the path, using the nonzero winding number rule to determine the region\n     * to fill. This shall produce the same result as constructing two identical path objects,\n     * painting the first with {@link #fill() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveCapHeight(org.apache.pdfbox.pdmodel.font.PDFont)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineWidthOnDemand(float)" : "* Sets the line width. The command is only emitted if the lineWidth is\n     * different to 1.\n     * \n     * @param lineWidth the line width of the path.\n     * @throws IOException If there is an error writing to the content stream.\n     * @see PDAbstractContentStream#setLineWidth(float)",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)" : "* Draw an inline image at the x,y coordinates and a certain width and height.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     * @param width The width of the inline image to draw.\n     * @param height The height of the inline image to draw.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isSubjectDNRequired()" : "*\n     * @return true if the Subject DN is required",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getAppearanceStreamReference()" : "* This will get named page references.\n     *\n     * @return The named page references or <code>null</code>.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getFields()" : "* This will get the list of FDF Fields. This will return a list of FDFField objects.\n     *\n     * @return A list of FDF fields.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setStructureTreeRoot(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)" : "* Sets the document's structure tree root.\n     *\n     * @param treeRoot The new structure tree.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setBorderStyle(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)" : "* This will set the border style dictionary, specifying the width and dash pattern used in drawing the line.\n     *\n     * @param bs the border style dictionary to set.\n     *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6:toPaint(org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.StandardStructureTypes:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getValue()" : "* Returns the signature contained in this field.\n     * \n     * @return A signature dictionary.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setOpenAction(org.apache.pdfbox.pdmodel.common.PDDestinationOrAction)" : "* Sets the Document Open Action for this object.\n     *\n     * @param action The action you want to perform.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:getCoords()" : "* Get the coordinates of individual words or group of words.\n     * \n     * @see #setCoords(float[])\n     * @return the array of 8 \uDBFF\uDC0D n numbers specifying the coordinates of n quadrilaterals.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.PDFont:getSpaceWidth()" : "* Determines the width of the space character. This is very important for text extraction.\n     *\n     * @return the width of the space character",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getAdditionalActions()" : "* This will get a list of additional actions that will get executed based on events.\n     *\n     * @return The 'AA' entry in this FDF field dictionary or null.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTBorderStyle()" : "* Gets the style of the border drawn on each edge of a table cell\n     * (TBorderStyle).\n     * \n     * @return the border style.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getFontMatrix()" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:toCIDSystemInfo(java.lang.String,java.lang.String,int)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:markedContentPoint(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)" : "* Handles MP and DP operators.\n     *\n     * @param tag indicates the role or significance of the sequence\n     * @param properties optional properties",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setLineEndingStyle(java.lang.String)" : "* This will set the line ending style.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve:getPoints(int)" : null,
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:getNumberOfObjects()" : "* Get the number of compressed object.\n     *\n     * @return The number of compressed objects.",
  "org.apache.pdfbox.cos.COSDocument:createCOSStream(org.apache.pdfbox.cos.COSDictionary,long,long)" : "* Creates a new COSStream using the current configuration for scratch files. Not for public use.\n     * Only COSParser should call this method.\n     * \n     * @param dictionary    the corresponding dictionary\n     * @param startPosition the start position within the source\n     * @param streamLength  the stream length\n     * @return the new COSStream\n     * @throws IOException if the random access view can't be read",
  "org.apache.pdfbox.pdfwriter.COSWriter:write(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface)" : "* This will write the pdf document. If signature should be created externally,\n     * {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method.\n     *\n     * @param doc The document to write.\n     * @param signInterface class to be used for signing; {@code null} if external signing would be performed\n     *                      or there will be no signing at all\n     *\n     * @throws IOException If an error occurs while generating the data.\n     * @throws IllegalStateException If the document has an encryption dictionary but no protection\n     * policy.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:isPushButton()" : "* Determines if push button bit is set.\n     * \n     * @return true if type of button field is a push button.",
  "org.apache.pdfbox.pdmodel.PDPage:setCropBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the CropBox for this page.\n     * \n     * @param cropBox The new CropBox for this page.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:getOnValue()" : "* Get the value which sets the check box to the On state.\n     * \n     * <p>The On value should be 'Yes' but other values are possible\n     * so we need to look for that. On the other hand the Off value shall\n     * always be 'Off'. If not set or not part of the normal appearance keys\n     * 'Off' is the default</p>\n     *\n     * @return the value setting the check box to the On state. \n     *          If an empty string is returned there is no appearance definition.",
  "org.apache.pdfbox.text.PDFTextStripper:writeText(org.apache.pdfbox.pdmodel.PDDocument,java.io.Writer)" : "* This will take a PDDocument and write the text of that document to the print writer.\n     *\n     * @param doc The document to get the data from.\n     * @param outputStream The location to put the text.\n     *\n     * @throws IOException If the doc is in an invalid state.",
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getLineDashPattern()" : "* Get the line dash pattern for this box style.  This is guaranteed to not\n     * return null.  The default is [3],0.\n     *\n     * @return The line dash pattern.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:edgeEquationValue(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)" : "* A line from point p1 to point p2 defines an equation, adjust the form of\n     * the equation to let the rhs equals 0, then calculate the lhs value by\n     * plugging the coordinate of p in the lhs expression.\n     *\n     * @param p target point\n     * @param p1 one end of a line\n     * @param p2 the other end of a line\n     * @return calculated value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getAppearanceCharacteristics()" : "* Returns the appearance characteristics dictionary.\n     * \n     * @return the appearance characteristics dictionary",
  "org.apache.pdfbox.contentstream.operator.markedcontent.DrawObject:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getCharSet()" : "* This will get the character set for the font.\n     *\n     * @return The character set value.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:setValue(org.apache.pdfbox.cos.COSBase)" : "* Sets the property value.\n     * \n     * @param value the property value",
  "org.apache.pdfbox.pdmodel.graphics.PDXObject:getCOSObject()" : "* Returns the stream.\r\n     * {@inheritDoc}",
  "org.apache.pdfbox.filter.DCTFilter:getAdobeTransformByBruteForce(javax.imageio.stream.ImageInputStream)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:isType1File(byte[])" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setBorderLine(float,org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary,org.apache.pdfbox.cos.COSArray)" : "* Convenience method for annotations: sets the line with and dash style.\n     *\n     * @param lineWidth The line width.\n     * @param bs The border style, may be null.\n     * @param border The border array, must have at least three entries. This is\n     * only used if the border style is null.\n     *\n     * @throws IOException If there is an error writing to the content stream.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:getType()" : "* This will return the type of the measure dictionary.\n     * It must be \"Measure\"\n     * \n     * @return the type",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setRevision(long)" : "* The software module revision number, corresponding to the Date attribute.\n     *\n     * @param revision is the software module revision number",
  "org.apache.pdfbox.rendering.GroupGraphics:fillRoundRect(int,int,int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:hasNext()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setDefaultValue(java.lang.String)" : "* Sets the default value of this field.\n     *\n     * @param value Plain text",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:getHeight()" : "* This will get the height of this rectangle as calculated by\n     * upperRightY - lowerLeftY.\n     *\n     * @return The height of this rectangle.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getDecodeForParameter(int)" : "* Get the decode for the input parameter.\n     *\n     * @param paramNum the function parameter number\n     * @return the decode parameter range or null if none is set",
  "org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getSecondColumnValue()" : "* Returns the value for the second column of the crossreference stream entry. (This is object number from the\n     * {@link COSObjectKey} of the object stream, that is containing the object represented by this entry - for entries\n     * of this type..)\n     *\n     * @return The value for the second column of the crossreference stream entry.",
  "org.apache.pdfbox.text.PDFTextStripper:setSortByPosition(boolean)" : "* The order of the text tokens in a PDF file may not be in the same as they appear visually on the screen. For\n     * example, a PDF writer may write out all text by font, so all bold or larger text, then make a second pass and\n     * write out the normal text.<br>\n     * The default is to <b>not</b> sort by position.<br>\n     * <br>\n     * A PDF writer could choose to write each character in a different order. By default PDFBox does <b>not</b> sort\n     * the text tokens before processing them due to performance reasons.\n     *\n     * @param newSortByPosition Tell PDFBox to sort the text positions.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:isDamaged()" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:beginText()" : "* Called when the BT operator is encountered. This method is for overriding in subclasses, the\n     * default implementation does nothing.\n     *\n     * @throws IOException if there was an error processing the text",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Set the rectangle on the page that this bead covers.\n     *\n     * @param rect The portion of the page that this bead covers.",
  "org.apache.pdfbox.rendering.GroupGraphics:drawPolygon(int[],int[],int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getChangeXs()" : "* This will return the changes along the x-axis.\r\n     * \r\n     * @return changes along the x-axis",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLineDashPattern(float[],float)" : "* Set the line dash pattern.\n     *\n     * @param pattern The pattern array\n     * @param phase The phase of the pattern\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:beginText()" : "* Begin some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest beginText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:sine(double,double)" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:<init>(int)" : "* Creates a new access permission object from a single integer.\n     *\n     * @param permissions The permission bits.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getOptionalContentGroups()" : "* Returns the collection of all optional content groups.\n     * @return the optional content groups",
  "org.apache.pdfbox.pdmodel.fdf.FDFPageInfo:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getDefaultValue()" : "* Returns the default value of this field. This may be of any kind which is valid for this field's children.\n     *\n     * <p>\n     * <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value,\n     * without inheritance.\n     * \n     * @return the new default value",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextIndent(float)" : "* Sets the additional distance in the inline-progression direction from the\n     * start edge of the BLSE, as specified by StartIndent, to that of the first\n     * line of text (TextIndent).\n     * \n     * @param textIndent the text indent",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:hasMissingWidth()" : "* Returns true if the missing widths entry is present in the font descriptor.\n     * \n     * @return true if the missing widths entry is present in the font descriptor",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\r\n     * \r\n     * @param dictionary the corresponding dictionary",
  "org.apache.pdfbox.contentstream.operator.graphics.ClipNonZeroRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:isSuspect()" : "* Tells if this PDF contain 'suspect' tags.  See PDF Reference 1.6\n     * section 10.6 \"Logical Structure\" for more information about this property.\n     *\n     * @return true if the suspect flag has been set.",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:build()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getNormalCaption()" : "* This will retrieve the normal caption.\n     * \n     * @return the normal caption.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:create(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Create the correct PD Model pattern based on the COS base pattern.\n     * @param dictionary the COS pattern dictionary\n     * @param resourceCache the resource cache, may be null, useful for tiling patterns.\n     * @return the newly created pattern object\n     * @throws IOException If we are unable to create the PDPattern object.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getDisplacement(int)" : null,
  "org.apache.pdfbox.cos.COSDocument:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* visitor pattern double dispatch method.\n     *\n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If an error occurs while visiting this object.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getPageLayout()" : "* Returns the page layout.\n     * \n     * @return the PageLayout of the document, if not present PageLayout.SINGLE_PAGE is returned",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getNumberOfComponents()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawRightArrow(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:closePath()" : "* Closes the current subpath.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getValue(java.lang.String)" : "* The name to retrieve.\n     *\n     * @param name The name in the tree.\n     * @return The value of the name in the tree.\n     * @throws IOException If there is a problem creating the destinations.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:fillAndStroke()" : "* Fill and then stroke the path, using the nonzero winding number rule to determine the region\n     * to fill. This shall produce the same result as constructing two identical path objects,\n     * painting the first with {@link #fill() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getResourceCache()" : "* Returns the resource cache associated with the Resources, or null if there is none.\r\n     * \r\n     * @return the resource cache associated with the resources, or null",
  "org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode:<init>()" : "* Constructor.",
  "org.apache.pdfbox.rendering.PageDrawer:clampColor(float)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:getAttributeValue(java.lang.String,org.apache.pdfbox.cos.COSBase)" : "* Gets the attribute value for a given name.\n     * \n     * @param attrName the given attribute name\n     * @param defaultValue the default value\n     * @return the attribute value for a given name",
  "org.apache.pdfbox.cos.COSDictionary:getFloat(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned\n     * if there is no value.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The float value.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getGlyphOrientationVertical()" : "* Gets the orientation of glyphs when the inline-progression direction is\n     * top to bottom or bottom to top (GlyphOrientationVertical). The default\n     * value is {@link #GLYPH_ORIENTATION_VERTICAL_AUTO}.\n     * \n     * @return the vertical glyph orientation",
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:prohibited(int)" : "* Return true if the given {@code codepoint} is a prohibited character\n     * as defined by\n     * <a href=\"https://tools.ietf.org/html/rfc4013#section-2.3\">RFC 4013,\n     * Section 2.3</a>.",
  "org.apache.pdfbox.cos.COSStream:createInputStream(org.apache.pdfbox.filter.DecodeOptions)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float)" : "* Creates a new JPEG PDImageXObject from a BufferedImage and a given quality.\r\n     * <p>\r\n     * Do not read a JPEG image from a stream/file and call this method; you'll get more speed and\r\n     * quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument,\r\n     * java.io.InputStream) createFromStream()} instead.\r\n     * \r\n     * The image will be created with a dpi value of 72 to be stored in metadata.\r\n     * @param document the document where the image will be created\r\n     * @param image the BufferedImage to embed\r\n     * @param quality The desired JPEG compression quality; between 0 (best\r\n     * compression) and 1 (best image quality). See\r\n     * {@link ImageWriteParam#setCompressionQuality(float)} for more details.\r\n     * @return a new Image XObject\r\n     * @throws IOException if the JPEG data cannot be written",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* This will set the file in which the destination is located.\n     *\n     * @param fs The file specification.",
  "org.apache.pdfbox.contentstream.operator.text.ShowTextLine:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getOpacity()" : "* Get the opacity value.\n     *\n     * @return The opacity of the annotation.",
  "org.apache.pdfbox.cos.COSArray:addAll(int,java.util.Collection)" : "* Add the specified object at the ith location and push the rest to the\n     * right.\n     *\n     * @param i The index to add at.\n     * @param objectList The object to add at that index.",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:getFields()" : "* This will get a list of fields that are part of this template.\n     *\n     * @return A list of fields.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setBitsPerComponent(int)" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:validatePerms(org.apache.pdfbox.pdmodel.encryption.PDEncryption,int,boolean)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.CurveTo:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:addAttribute(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject)" : "* Adds an attribute object.\n     * \n     * @param attributeObject the attribute object",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImageFormStream()" : "* Gets Image form stream\n     * @return the image form's stream",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:parse(java.lang.CharSequence)" : "* Parses the given text into an instruction sequence representing a Type 4 function\n     * that can be executed.\n     * @param text the Type 4 function text\n     * @return the instruction sequence",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setName(java.lang.String)" : "* Set a unique name for an annotation.\n     *\n     * @param name The unique annotation name.",
  "org.apache.pdfbox.pdfwriter.COSWriter:prepareIncrement()" : null,
  "org.apache.pdfbox.pdmodel.ResourceCacheFactory:setResourceCacheCreateFunction(org.apache.pdfbox.pdmodel.ResourceCacheCreateFunction)" : "* Use the given function to create an instance of a resource cache. Caching is disabled if a null value is\n     * provided.",
  "org.apache.pdfbox.text.PDFTextStripper:getArticleEnd()" : "* Returns the string which will be used at the end of an article.\n     * \n     * @return the article end string",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:getNextChanges(int,boolean)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:<init>(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getStructParent()" : "* Returns the key of this XObject in the structural parent tree.\r\n     *\r\n     * @return this object's key the structural parent tree or -1 if there isn't any.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:getOnValues()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setPdSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)" : "* Sets PDSignatureField\n     * \n     * @param pdSignature the current PDSignature object",
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:markedContentPoint(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)" : "* Initialize the encoder and set all final fields",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getClassMap()" : "* Sets the ClassMap.\n     * \n     * @return the ClassMap, never null. The elements are either {@link PDAttributeObject} or lists\n     * of it.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setTitle(java.lang.String)" : "* Set the title for this node.\n     *\n     * @param title The new title for this node.",
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:getFDF()" : "* This will get the FDF dictionary.\n     *\n     * @return The FDF dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:getRegistry()" : null,
  "org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine:<init>(org.apache.pdfbox.pdmodel.PDPage)" : "* Constructor.\r\n     * \r\n     * @param page the page the content stream belongs to",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param doc The document that this form is part of.\n     * @param form The existing acroForm.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:getO()" : "* This will get an action to be performed when the page\n     * is opened. This action is independent of any that may be\n     * defined by the OpenAction entry in the document catalog,\n     * and is executed after such an action.\n     *\n     * @return The O entry of page object's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Draws the given Form XObject at the current location.\n     *\n     * @param form Form XObject\n     * @throws IOException if the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteBody(org.apache.pdfbox.cos.COSDocument)" : "* This will write the body of the document.\n     *\n     * @param doc The document to write the body for.\n     *\n     * @throws IOException If there is an error writing the data.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeLanguage(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:<init>(org.apache.pdfbox.cos.COSArray)" : "* Creates a new CalGray color space using the given COS array.\n     *\n     * @param array the COS array which represents this color space",
  "org.apache.pdfbox.pdfparser.COSParser:init(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:calculateFontSize(org.apache.pdfbox.pdmodel.font.PDFont,org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* My \"not so great\" method for calculating the fontsize. It does not work superb, but it\n     * handles ok.\n     * \n     * @return the calculated font-size\n     * @throws IOException If there is an error getting the font information.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setNoRotate(boolean)" : "* Set the noRotate flag.\n     * \n     * @param noRotate The new noRotate flag.",
  "org.apache.pdfbox.pdfwriter.COSWriter:writeString(byte[],java.io.OutputStream)" : "* This will output the given text/byte getString as a PDF object.\n     *\n     * @param bytes byte array representation of a string to be written\n     * @param output The stream to write to.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getMotion()" : "* @return The direction of motion for the specified transition effect or the default {@link PDTransitionMotion#I}\n     * if no motion is found.\n     * @see PDTransitionMotion",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:appendKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference)" : "* Appends a marked-content reference kid.\n     * \n     * @param markedContentReference the marked-content reference",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getAverageFontWidth()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:setInfo(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:setEmbeddedFiles(org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode)" : "* Set the named embedded files that are associated with this document.\n     *\n     * @param ef The new embedded files",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:attributeChanged(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject)" : "* Updates the revision number for the given attribute object.\n     * \n     * @param attributeObject the attribute object",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSFloat(java.io.OutputStream,org.apache.pdfbox.cos.COSFloat)" : "* Write the given {@link COSFloat} to the given stream.\n     *\n     * @param output The stream, that shall be written to.\n     * @param cosFloat The content, that shall be written.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:updateSelectedOptionsIndex(java.util.List,java.util.List)" : "* Update the 'I' key based on values set.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLineJoinStyle(int)" : "* Set the line join style.\n     *\n     * @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line join style.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getActions()" : "* Get the additional actions for this field. This will return null if there\n     * are no additional actions for this field.\n     *\n     * @return The actions of the field.",
  "org.apache.pdfbox.rendering.PageDrawer:adjustImage(java.awt.image.BufferedImage)" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:endMarkedContent()" : "* End a marked content sequence.\n     *\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.PDResources:createKey(org.apache.pdfbox.cos.COSName,java.lang.String)" : "* Returns a unique key for a new resource.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getGlyphName(int)" : "* Returns the name of the glyph with the given character code. This is done by looking up the\n     * code in the parent font's ToUnicode map and generating a glyph name from that.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isSubFilterRequired()" : "*\n     * @return true if the SubFilter is required",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBorderStyle()" : "* Gets the border style (BorderStyle). The default value is\n     * {@link #BORDER_STYLE_NONE}.\n     * \n     * @return the border styles (a String or an array of four Strings)",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getNumberOfComponents()" : null,
  "org.apache.pdfbox.filter.DecodeOptions:<init>(int)" : "* Constructs an instance specifying the image should be decoded using subsampling. The\n     * subsampling will be the same for the X and Y axes.\n     *\n     * @param subsampling The number of rows and columns to advance in the source for each pixel in\n     * the decoded image.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:<init>()" : "* Creates a new CalRGB color space.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:createObjectFromDic(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.cos.COSArray:addAll(java.util.Collection)" : "* This will add an object to the array.\n     *\n     * @param objectsList The object to add to the array.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setAllCap(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.pdfparser.BaseParser:isDigit(int)" : "* This will tell if the given value is a digit or not.\n     * \n     * @param c The character to be checked\n     * @return true if the next byte in the stream is a digit.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Line:addWord(org.apache.pdfbox.pdmodel.interactive.PlainText$Word)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial:getCertificate()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:getFont()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:removeContainedSpaces(java.util.List)" : "* Remove all space characters if contained within the adjacent letters",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:<init>(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getDirection()" : "* @return the direction in which the specified transition effect shall move. It can be either a {@link COSInteger}\n     * or {@link COSName#NONE}. Default to {@link COSInteger#ZERO}\n     * @see PDTransitionDirection",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:ensureDisplayProfile(java.awt.color.ICC_Profile)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:getP()" : "* Return the P value.\n     * \n     * @return the P value",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Div:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.rendering.ImageType$1:toBufferedImageType()" : null,
  "org.apache.pdfbox.text.TextPosition:getHeightDir()" : "* This will get the maximum height of all characters in this string.\n     *\n     * @return The maximum height of all characters in this string.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:convertPNGImage(org.apache.pdfbox.pdmodel.PDDocument,byte[])" : "* Try to convert a PNG into a PDImageXObject. If for any reason the PNG can not\n     * be converted, null is returned.\n     * <p>\n     * This usually means the PNG structure is damaged (CRC error, etc.) or it uses\n     * some features which can not be mapped to PDF.\n     *\n     * @param doc       the document to put the image in\n     * @param imageData the byte data of the PNG\n     * @return null or the PDImageXObject built from the png",
  "org.apache.pdfbox.pdmodel.PDPageTree$SearchContext:visitPage(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.common.PDRange:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Eq:isEqual(java.lang.Object,java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:<init>(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:getNext()" : "* This will get the next action, or sequence of actions, to be performed after this one.\n     * The value is either a single action dictionary or an array of action dictionaries\n     * to be performed in order.\n     *\n     * @return The Next action or sequence of actions.",
  "org.apache.pdfbox.text.PDFTextStripper:handleDirection(java.lang.String)" : "* Handles the LTR and RTL direction of the given words. The whole implementation stands and falls with the given\n     * word. If the word is a full line, the results will be the best. If the word contains of single words or\n     * characters, the order of the characters in a word or words in a line may wrong, due to RTL and LTR marks and\n     * characters!\n     * \n     * Based on http://www.nesterovsky-bros.com/weblog/2013/07/28/VisualToLogicalConversionInJava.aspx\n     * \n     * @param word The word that shall be processed\n     * @return new word with the correct direction of the containing characters",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setSpaceAfter(int)" : "* Sets the amount of extra space following the after edge of the BLSE in\n     * the block-progression direction (SpaceAfter).\n     * \n     * @param spaceAfter the space after",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:isOpenTypeFile(byte[])" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getWidthFromFont(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setBackground(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* This will set the background color.\n     * \n     * @param c the background color",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:getDomainForInput(int)" : "* This will get the range for a certain input parameter.  This is will never\n     * return null.  If it is not present then the range 0 to 0 will\n     * be returned.\n     *\n     * @param n The parameter number to get the domain for.\n     *\n     * @return The domain range for this component.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:createPixelTable(java.awt.Rectangle)" : "* Creates the pixel table.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeHash2A(byte[],byte[],byte[])" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptDataRC4(byte[],byte[],java.io.OutputStream)" : "* Encrypt or decrypt data with RC4.\n     *\n     * @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}.\n     * @param input The data to encrypt.\n     * @param output The output to write the encrypted data to.\n     *\n     * @throws IOException If there is an error reading the data.",
  "org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Parses a PDF.\n     * \n     * @param randomAccessRead random access read representing the pdf to be loaded. To pass an\n     * InputStream, wrap it into a {@link RandomAccessReadBuffer}.\n     * @param password password to be used for decryption\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param alias alias to be used for decryption when using public key security\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering\n     * new/altered PDF streams\n     * \n     * @return loaded document\n     * \n     * @throws IOException in case of a file reading or parsing error",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:setTextLineMatrix(org.apache.pdfbox.util.Matrix)" : "* @param value The textLineMatrix to set.",
  "org.apache.pdfbox.cos.COSString:getASCII()" : "* Returns the content of this string as a PDF <i>ASCII string</i>.\n     * \n     * @return the ASCII string representation of the COSString",
  "org.apache.pdfbox.util.DateConverter:restrainTZoffset(long)" : null,
  "org.apache.pdfbox.cos.COSObjectKey:computeInternalHash(long,int)" : "* Calculate the internal hash value for the given object number and generation number.\n     * \n     * @param num the object number\n     * @param gen the generation number\n     * @return the internal hash for the given values",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:getCOSObject()" : "* Convert this standard java object to a COS dictionary.\n     *\n     * @return The COS dictionary that matches this Java object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getDefaultStyleString()" : "* Get the default style string.\n     *\n     * The default style string defines the default style for rich text fields.\n     *\n     * @return the DS element of the dictionary object",
  "org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getDP()" : "* This will get a JavaScript action to be performed\n     * after printing a document.\n     * The name DP stands for \"did print\".\n     *\n     * @return The DP entry of document catalog's additional actions dictionary.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setVersion(int)" : "* This will set the V entry of the encryption dictionary.<br><br>\n     * See PDF Reference 1.4 Table 3.13.  <br><br>\n     * <b>Note: This value is used to decrypt the pdf document.  If you change this when\n     * the document is encrypted then decryption will fail!.</b>\n     *\n     * @param version The new encryption version.",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setUpperLimit(java.lang.String)" : "* Set the highest value for the key in the map.\n     *\n     * @param upper The new highest value for a key in the map.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:setRole(java.lang.String)" : "* Sets the role. The value of Role shall be one of the following:\n     * <ul>\n     *   <li>{@link #ROLE_RB},</li>\n     *   <li>{@link #ROLE_CB},</li>\n     *   <li>{@link #ROLE_PB},</li>\n     *   <li>{@link #ROLE_TV}.</li>\n     * </ul>\n     * \n     * @param role the role",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getFontSize()" : "* Get the value of the fontSize.\n     *\n     * @return The fontSize.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:setFirstBead(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead)" : "* This will set the first bead in the thread.  When this is set it will\n     * also set the thread property of the bead object.\n     *\n     * @param bead The first bead in the thread.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:addGlyphsToSubset(java.util.Set)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:collectPatches(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,int)" : "* Create a patch list from a data stream, the returned list contains all the patches contained in the data stream.\n     *\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading\n     * @return the obtained patch list\n     * @throws IOException when something went wrong",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeRevisionNumber(int)" : "* Computes the revision version of the StandardSecurityHandler to\n     * use regarding the version number and the permissions bits set.\n     * See PDF Spec 1.6 p98\n     * \n     * @param version The version number.\n     *\n     * @return The computed revision number.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setSignaturesExist(boolean)" : "* Set the SignaturesExist bit.\n     *\n     * @param signaturesExist The value for SignaturesExist.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getLineJoinStyle()" : "* This will get the line join style.\n     *\n     * @return null or the LJ value in the dictionary.",
  "org.apache.pdfbox.rendering.GroupGraphics:dispose()" : null,
  "org.apache.pdfbox.pdmodel.font.PDPanose:getPanose()" : "* Ten bytes for the PANOSE classification number for the font.\n     * \n     * @see <a href=\"http://www.monotype.com/services/pan1\">http://www.monotype.com/services/pan1</a>\n     * \n     * @return the PANOSE classification number",
  "org.apache.pdfbox.pdmodel.font.PDFont:toUnicode(int)" : "* Returns the Unicode character sequence which corresponds to the given character code.\n     *\n     * @param code character code\n     * @return Unicode character(s)",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getOpaqueImage()" : "* Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject\r\n     * is a mask then the buffered image will contain the raw mask.\r\n     * \r\n     * @return the image without any masks applied\r\n     * @throws IOException if the image cannot be read",
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:setScaleType(java.lang.String)" : "* This will set the scale type. See the SCALE_TYPE_XXX constants.\n     *\n     * @param scale The scale type.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:<init>(org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy)" : "* Constructor used for encryption.\n     *\n     * @param publicKeyProtectionPolicy The protection policy.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getRubyAlign()" : "* Gets the justification of the lines within a ruby assembly (RubyAlign).\n     * The default value is {@link #RUBY_ALIGN_DISTRIBUTE}.\n     * \n     * @return the ruby alignment",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:initColorConversionCache(org.apache.pdfbox.pdmodel.PDResources)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setItalicAngle(float)" : "* This will set the italic angle for the font.\n     *\n     * @param angle The new italic angle for the font.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getTarget()" : "* This will get the target frame in the browser to open this document.\n     *\n     * @return The target frame.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getCharProc(int)" : "* Returns the stream of the glyph for the given character code\n     * \n     * @param code character code\n     * @return the stream to be used to render the glyph",
  "org.apache.pdfbox.util.Vector:scale(float)" : "* Returns a new vector scaled by both x and y.\n     *\n     * @param sxy x and y scale\n     * @return a new vector scaled by both x and y",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontFamily()" : "* A string representing the preferred font family.\n     *\n     * @return The font family.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:nonAsciiControl(int)" : "* Return true if the given {@code ch} is a non-ASCII control character\n     * as defined by <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.2.2\">RFC 3454,\n     * Appendix C.2.2</a>.",
  "org.apache.pdfbox.pdfparser.BaseParser:parseCOSHexString()" : "* This will parse a PDF HEX string with fail fast semantic\n     * meaning that we stop if a not allowed character is found.\n     * This is necessary in order to detect malformed input and\n     * be able to skip to next object start.\n     *\n     * We assume starting '&lt;' was already read.\n     * \n     * @return The parsed PDF string.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getVerticalDisplacementVectorY(int)" : "* Returns the y-component of the vertical displacement vector (w1).\n     *\n     * @param code character code\n     * @return w1y",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:getDashStyle()" : "* This will retrieve the dash style used for drawing the border.\n     *\n     * @return the dash style of the border",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:indexOf(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Create a new appearance stream. Note that this is not actually a \"page\" content stream.\n     *\n     * @param doc The document the page is part of.\n     * @param appearance The appearance stream to write to.\n     * @throws IOException If there is an error writing to the page contents.",
  "org.apache.pdfbox.rendering.PageDrawer:fillPath(int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setCaptionStyle(java.lang.String)" : "* This will set the caption positioning. Allowed values are: \"Inline\" and \"Top\"\n     * \n     * @param captionStyle caption positioning",
  "org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:<init>()" : "* Creates a new ToUnicode CMap writer.",
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteTrailer(org.apache.pdfbox.cos.COSDocument)" : "* This will write the trailer to the PDF document.\n     *\n     * @param doc The document to create the trailer for.\n     *\n     * @throws IOException If there is an IOError while writing the document.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:getUserPassword(byte[],byte[],int,int)" : "* Get the user password based on the owner password.\n     *\n     * @param ownerPassword The plaintext owner password.\n     * @param owner The o entry of the encryption dictionary.\n     * @param encRevision The encryption revision number.\n     * @param length The key length.\n     *\n     * @return The u entry of the encryption dictionary.\n     *\n     * @throws IOException If there is an error accessing data while generating the user password.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor using the given shading dictionary.\r\n     *\r\n     * @param shadingDictionary the dictionary for this shading",
  "org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:getDefaultAppearanceString()" : "* This will get the string of default appearance string. A required element.\n     *\n     * @return A default appearance string.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:createColorSpace(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font,org.apache.fontbox.ttf.TrueTypeFont)" : "* Constructor.\n     * \n     * @param fontDictionary The font dictionary according to the PDF specification.\n     * @param parent The parent font.\n     * @param trueTypeFont The true type font used to create the parent font\n     * @throws IOException if the font could not be read",
  "org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Adds the given color space to the resources of the current page and returns the name for the\r\n     * new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param colorSpace the color space to add\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.cos.COSString:getForceHexForm()" : "* Returns true if the string is to be written in hex form.\n     * \n     * @return true if the COSString is written in hex form",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getNumberOfComponents()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setDownAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* This will set the down appearance when there is down appearance to be shown.\n     *\n     * @param ap The appearance stream to show.",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:estCompressSum(byte[])" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:getProcess()" : "* Returns the DeviceN Process Dictionary, or null if it is missing.\n     * @return the DeviceN Process Dictionary, or null if it is missing.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:extractFontDetails(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText)" : null,
  "org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:allowCodeRange(int,int)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:pushResources(org.apache.pdfbox.contentstream.PDContentStream)" : "* Pushes the given stream's resources, returning the previous resources.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSName(java.io.OutputStream,org.apache.pdfbox.cos.COSName)" : "* Write the given {@link COSName} to the given stream.\n     *\n     * @param output The stream, that shall be written to.\n     * @param cosName The content, that shall be written.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getFormatterRectangleParameters()" : "* \n     * @return formatter PDRectangle parameters",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getScope()" : "* Gets the scope (Scope). It shall reflect whether the header cell applies\n     * to the rest of the cells in the row that contains it, the column that\n     * contains it, or both the row and the column that contain it.\n     * \n     * @return the scope",
  "org.apache.pdfbox.cos.COSDocument:<init>(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Constructor that will use the provided function to create a stream cache for the storage of the PDF streams.\n     *\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache\n     *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(java.awt.Color)" : "* Set the stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:setInitialTransformationMatrix(org.apache.pdfbox.util.Matrix)" : "* Set the CTM that is valid at the time the ExtGState was activated.\r\n     *\r\n     * @param ctm the transformation matrix",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:interpolate(float,float,float,float,float)" : "* For a given value of x, interpolate calculates the y value \n     * on the line defined by the two points (xRangeMin , xRangeMax ) \n     * and (yRangeMin , yRangeMax ).\n     * \n     * @param x the to be interpolated value.\n     * @param xRangeMin the min value of the x range\n     * @param xRangeMax the max value of the x range\n     * @param yRangeMin the min value of the y range\n     * @param yRangeMax the max value of the y range\n     * @return the interpolated y value",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:getCatalog()" : "* This will get the FDF Catalog. This is guaranteed to not return null.\n     *\n     * @return The documents /Root dictionary",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:getName()" : "* Returns the property name.\n     * \n     * @return the property name",
  "org.apache.pdfbox.text.PDFTextStripper:endDocument(org.apache.pdfbox.pdmodel.PDDocument)" : "* This method is available for subclasses of this class. It will be called after processing of the document\n     * finishes.\n     *\n     * @param document The PDF document that is being processed.\n     * @throws IOException If an IO error occurs.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontFile2()" : "* A stream containing a true type font program.\n     *\n     * @return A stream containing a true type font program.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:<init>(org.apache.pdfbox.pdmodel.common.function.type4.Operators)" : "* Creates a new execution context.\n     * @param operatorSet the operator set",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:getInteriorColor()" : "* This will retrieve the interior color with which to fill the annotation’s line endings.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.util.DateConverter:toString(java.util.Calendar)" : "* Converts a Calendar to a string formatted as:\n     *     D:yyyyMMddHHmmss#hh'mm'  where # is Z, +, or -.\n     * \n     * @param cal The date to convert to a string. May be null.\n     * The DST_OFFSET is included when computing the output time zone.\n     *\n     * @return The date as a String to be used in a PDF document, \n     *      or null if the cal value is null",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor. Creates empty COSDictionary if dict is null.\n     *\n     * @param dict The dictionary that fulfils this file specification.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineDashPattern(float[],float)" : "* Set the line dash pattern.\n     *\n     * @param pattern The pattern array\n     * @param phase The phase of the pattern\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:showTextWithPositioning(java.lang.Object[])" : "* Shows the given text at the location specified by the current text matrix with the given\n     * interspersed positioning. This allows the user to efficiently position each glyph or sequence\n     * of glyphs.\n     *\n     * @param textWithPositioningArray An array consisting of String and Float types. Each String is\n     * output to the page using the current text matrix. Using the default coordinate system, each\n     * interspersed number adjusts the current text matrix by translating to the left or down for\n     * horizontal and vertical text respectively. The number is expressed in thousands of a text\n     * space unit, and may be negative.\n     *\n     * @throws IOException if an io exception occurs.",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)" : "* Draw an image at the x,y coordinates, with the default size of the image.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(float)" : "* This will append raw commands to the content stream.\n     *\n     * @param data Append a formatted float value to the stream.\n     * @throws IOException If an error occurs while writing to the stream.\n     * @deprecated Usage of this method is discouraged.",
  "org.apache.pdfbox.filter.JBIG2Filter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toRGBImage2(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.cos.COSString:parseHex(java.lang.String)" : "* This will create a COS string from a string of hex characters.\n     *\n     * @param hex A hex string.\n     * @return A cos string with the hex characters converted to their actual bytes.\n     * @throws IOException If there is an error with the hex string.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawDiamond(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float)" : "* Add a square diamond shape (corner on top) to the path.\n     *\n     * @param cs Content stream\n     * @param x\n     * @param y\n     * @param r Radius (to a corner)\n     * \n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getDefaultAppearance()" : "* Get the default appearance string.\n     *\n     * @return The default appearance of the annotation.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNameOrArrayOfName(java.lang.String,java.lang.String)" : "* Gets a name value or array of name values.\n     * \n     * @param name the attribute name\n     * @param defaultValue the default value\n     * @return a String or array of Strings",
  "org.apache.pdfbox.pdmodel.PDPage:getCOSObject()" : "* Convert this standard java object to a COS object.\n     * \n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.text.PDFTextStripper:multiplyFloat(float,float)" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSObjectPool:<init>(long)" : "* Creates a map of {@link COSBase} instances to {@link COSObjectKey}s, allowing bidirectional lookups. This\n     * constructor can be used for pre - initialized structures to start the assignment of new object numbers starting\n     * from the hereby given offset.\n     *\n     * @param highestXRefObjectNumber The highest known object number.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLink:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getHeaders()" : "* Gets the headers (Headers). An array of byte strings, where each string\n     * shall be the element identifier (see the\n     * {@link org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement#getElementIdentifier()}) for a TH structure\n     * element that shall be used as a header associated with this cell.\n     * \n     * @return the headers.",
  "org.apache.pdfbox.rendering.GroupGraphics:translate(int,int)" : null,
  "org.apache.pdfbox.util.DateConverter:skipOptionals(java.lang.String,java.text.ParsePosition,java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentNameDestinationDictionary:getDestination(java.lang.String)" : "* Returns the destination corresponding to the parameter.\n     *\n     * @param name The destination name.\n     * @return The destination for that name, or null if there isn't any.\n     * \n     * @throws IOException if something goes wrong when creating the destination object.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:makeLetterLabel(int)" : "* a..z, aa..zz, aaa..zzz ... labeling as described in PDF32000-1:2008,\n         * Table 159, Page 375.",
  "org.apache.pdfbox.cos.COSDictionary:containsKey(java.lang.String)" : "* @see java.util.Map#containsKey(Object)\n     *\n     * @param name The key to find in the map.\n     * @return true if the map contains this key.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:printMatches(java.util.PriorityQueue)" : "* For debugging. Prints all matches and returns the best match.",
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:setVersion(java.lang.String)" : "* This will set the version of the FDF document.\n     *\n     * @param version The new version for the FDF document.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isSerif()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:setRename(boolean)" : "* This will set if the fields can be renamed.\n     *\n     * @param value The flag value.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:insertBefore(org.apache.pdfbox.cos.COSInteger,java.lang.Object)" : "* Inserts a marked-content identifier kid before a reference kid.\n     * \n     * @param markedContentIdentifier the marked-content identifier\n     * @param refKid the reference kid",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:convertToRGB(float[])" : "* Convert color values from shading colorspace to RGB color values encoded\n     * into an integer.\n     *\n     * @param values color values in shading colorspace.\n     * @return RGB values encoded in an integer.\n     * @throws java.io.IOException if the color conversion fails.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setLineJoinStyle(int)" : "* Set the line join style.\n     *\n     * @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line join style.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:switchNodeCount()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:getNumberOfComponents()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$AbstractNumberComparisonOperator:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.contentstream.operator.text.SetTextLeading:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getAffineTransform()" : "* Gets AffineTransform\n     * @return the AffineTransform",
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:getCOSObject()" : "* Convert this standard java object to a COS object.\n     * @return the cos object that matches this Java object",
  "org.apache.pdfbox.rendering.ImageType$3:toBufferedImageType()" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the non-stroking color and, if necessary, the non-stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling)" : "* Creates a new PDFPrintable with the given page scaling.\n     *\n     * @param document the document to print\n     * @param scaling page scaling policy",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:initializeAppearanceContent(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Initialize the content of the appearance stream.\n     * \n     * Get settings like border style, border width and colors to be used to draw a rectangle and background color \n     * around the widget\n     * \n     * @param widget the field widget\n     * @param appearanceCharacteristics the appearance characteristics dictionary from the widget or\n     * null\n     * @param appearanceStream the appearance stream to be used\n     * @throws IOException in case we can't write to the appearance stream",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setMultiline(boolean)" : "* Set the multiline bit.\n     *\n     * @param multiline The value for the multiline.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFile()" : "* This will get the file name.\n     *\n     * @return The file name.",
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:privateUse(int)" : "* Return true if the given {@code codepoint} is a private use character\n     * as defined by <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.3\">RFC 3454,\n     * Appendix C.3</a>.",
  "org.apache.pdfbox.text.TextPosition:getYLowerLeftRot(float)" : "* This will get the y position of the character with 0,0 in lower left.\n     * This will be adjusted by the given rotation.\n     *\n     * @param rotation Rotation to apply to text to adjust the 0,0 location (0,90,180,270)\n     * @return The y coordinate of the text",
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:<init>(org.w3c.dom.Element)" : "* This will create an FDF catalog from an XFDF XML document.\n     *\n     * @param element The XML document that contains the XFDF data.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getPrintClip()" : "* Get the PrintClip preference.  See BOUNDARY enumeration.\n     *\n     * @return the PrintClip preference.",
  "org.apache.pdfbox.cos.COSDictionary:getIndirectObjectKeys(java.util.Collection)" : "* Collects all indirect objects numbers within this dictionary and all included dictionaries. It is used to avoid\n     * mixed up object numbers when importing an existing page to another pdf.\n     * \n     * Expert use only. You might run into an endless recursion if choosing a wrong starting point.\n     * \n     * @param indirectObjects a collection of already found indirect objects.\n     *",
  "org.apache.pdfbox.cos.COSIncrement:collect(org.apache.pdfbox.cos.COSArray)" : "* Collect all updates made to the given {@link COSArray} and it's contained structures.\n     *\n     * @param array The {@link COSDictionary} updates shall be collected for.\n     * @return Returns {@code true}, if the {@link COSArray}´s elements changed. A {@link COSArray} shall always be\n     * treated as a direct structure, that would require it´s parent to be updated instead.",
  "org.apache.pdfbox.filter.ASCII85OutputStream:setTerminator(char)" : "* This will set the terminating character.\n     *\n     * @param term The terminating character.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getDefaultCryptFilterDictionary()" : "* Returns the default crypt filter (for public-key security handler).\n     * \n     * @return the default crypt filter if available.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getDefaultStyle()" : "* Get the default style string.\n     *\n     * @return The default style of the annotation.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setCaptionVerticalOffset(float)" : "* This will set the vertical offset of the caption.\n     * \n     * @param offset vertical offset of the caption",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createHolderFormResources()" : null,
  "org.apache.pdfbox.rendering.PageDrawer:isHiddenVisibilityExpression(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:getCOSObject()" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getObjectStreamObjects()" : "* Returns all {@link COSBase}s that can be appended to an object stream. This list is only provided to enable\n     * reflections. Contained objects should indeed be added to a compressed document via an object stream, as can be\n     * created via calling: {@link COSWriterCompressionPool#createObjectStreams()}\n     *\n     * @return A list of all {@link COSBase}s, that can be added to an object stream.",
  "org.apache.pdfbox.pdmodel.PDPage:setUserUnit(float)" : "* Get the user unit. This is a positive number that shall give the size of default user space\n     * units, in multiples of 1/72 inch. This is supported by PDF 1.6 and higher.\n     *\n     * @param userUnit\n     * throws IllegalArgumentException if the parameter is not positive.",
  "org.apache.pdfbox.Loader:loadPDF(java.io.File)" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the\n     * file.\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the file required a non-empty password.\n     * @throws IOException in case of a file reading or parsing error",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isNonSymbolic()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:token(java.lang.CharSequence)" : "{@inheritDoc}",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:toRGB(float[])" : null,
  "org.apache.pdfbox.util.Matrix:getTranslateY()" : "* Returns the y-translation element of this matrix.\n     * \n     * @return the y-translation element of the matrix",
  "org.apache.pdfbox.filter.DCTFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int,org.apache.pdfbox.filter.DecodeOptions)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setOwnerEncryptionKey(byte[])" : "* This will set the OE entry in the standard encryption dictionary.\n     *\n     * @param oe A 32 byte array or null if there is no owner encryption key.\n     *\n     * @throws IOException If there is an error setting the data.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     * \n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:<init>(boolean)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:configureOutputProfile(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getFilter()" : "* If <b>Filter</b> is not null and the {@link #isFilterRequired()} indicates this entry is a\n     * required constraint, then the signature handler specified by this entry shall be used when\n     * signing; otherwise, signing shall not take place. If {@link #isFilterRequired()} indicates\n     * that this is an optional constraint, this handler may be used if it is available. If it is\n     * not available, a different handler may be used instead.\n     *\n     * @return the filter that shall be used by the signature handler",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getNormalAppearanceAsContentStream(boolean)" : "* Get the annotations normal appearance content stream.\n     * \n     * <p>\n     * This will get the annotations normal appearance content stream, to 'draw' to.\n     * \n     * @param compress whether the content stream is to be compressed. Set this to true when\n     * creating long content streams.\n     * @return the appearance entry representing the normal appearance.\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setAuthor(java.lang.String)" : "* This will set the author of the document.\n     *\n     * @param author The new author for the document.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:getType()" : "* returns the type of the external data dictionary. It must be \"ExData\", if present\n     * \n     * @return the type of the external data dictionary",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:computeRecipientInfo(java.security.cert.X509Certificate,byte[])" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.AppendRectangleToPath:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setListNumbering(java.lang.String)" : "* Sets the list numbering (ListNumbering). The value shall be one of the\n     * following:\n     * <ul>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_NONE},</li>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_DISC},</li>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_CIRCLE},</li>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_SQUARE},</li>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_DECIMAL},</li>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_UPPER_ROMAN},</li>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_LOWER_ROMAN},</li>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_UPPER_ALPHA},</li>\n     *   <li>{@link PDListAttributeObject#LIST_NUMBERING_LOWER_ALPHA}.</li>\n     * </ul>\n     * \n     * @param listNumbering the list numbering",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setDecode(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteObject(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)" : "* This will write a COS object for a predefined key.\n     *\n     * @param key The key of the object to write.\n     * @param obj The object to write.\n     *\n     * @throws IOException if the output cannot be written",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:read(byte[],int,int)" : null,
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.PDXObject)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setD(java.lang.String)" : "* This will set the string specifying the default directory in standard DOS syntax.\n     *\n     * @param d The default directory.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getWidgets()" : null,
  "org.apache.pdfbox.pdmodel.fixup.processor.AbstractProcessor:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:transform(java.awt.geom.AffineTransform)" : null,
  "org.apache.pdfbox.contentstream.operator.state.Save:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:create(org.apache.pdfbox.cos.COSBase)" : "* Create the correct PD Model function based on the COS base function.\n     *\n     * @param function The COS function dictionary.\n     *\n     * @return The PDModel Function object, never null.\n     *\n     * @throws IOException If we are unable to create the PDFunction object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:applyRectDiff(org.apache.pdfbox.pdmodel.common.PDRectangle,float)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.printing.PDFPageable:getPageFormat(int)" : "* {@inheritDoc}\n     * \n     * Returns the actual physical size of the pages in the PDF file. May not fit the local printer.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isPrinted()" : "* Get the printed flag.\n     * \n     * @return The printed flag.",
  "org.apache.pdfbox.pdfparser.EndstreamFilterStream:calculateLength()" : "* write out a single CR if one was kept. Don't write kept CR LF or LF, \n     * and then call the base method to flush.\n     *",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:getCOSObject()" : "* This will get the underlying dictionary.\n     * @return The dictionary for this pattern.",
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:processTextPosition(org.apache.pdfbox.text.TextPosition)" : "* This will process a TextPosition object and add the\n     * text to the list of characters on a page.  It takes care of\n     * overlapping text.\n     *\n     * @param text The text to process.",
  "org.apache.pdfbox.cos.COSArray:ofCOSStrings(java.util.List)" : "* This will take a list of string objects and return a COSArray of COSName objects.\n     *\n     * @param strings A list of strings\n     *\n     * @return An array of COSName objects",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeViewerPreferences(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.multipdf.PDFCloneUtility)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)" : "* Draw an image at the x,y coordinates, with the given size.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     * @param width The width to draw the image.\n     * @param height The height to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:endText()" : "* End some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest endText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getClearWidgetFieldFlags()" : "* This will get the 'ClrF' entry of the FDF field dictionary.\n     * If it is not present then this method will return null.\n     *\n     * @return The widget field flags.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:exportFDF()" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:add(org.apache.pdfbox.pdmodel.PDPage)" : "* Adds the given page to this page tree.\r\n     * \r\n     * @param page The page to add.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getRectangle()" : null,
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:getXObject(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:put(java.lang.Object,java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setLine(float[])" : "* This will set start and end coordinates of the line (or leader line if LL entry is set).\n     *\n     * @param line array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:newLineAtOffset(float,float)" : "* The Td operator.\n     * Move to the start of the next line, offset from the start of the current line by (tx, ty).\n     *\n     * @param tx The x translation.\n     * @param ty The y translation.\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageFormResources(org.apache.pdfbox.pdmodel.PDResources)" : "* Sets image form resource\n     * \n     * @param imageFormResources the resources of the image form",
  "org.apache.pdfbox.filter.ASCIIHexFilter:isEOD(int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:getDocument()" : "* This will get the low level document.\n     *\n     * @return The document that this layer sits on top of.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:fillEvenOdd()" : "* Fills the path using the even-odd winding rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:injectAppearanceStreams(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner)" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:truncateOrPad(byte[])" : "* This will take the password and truncate or pad it as necessary.\n     *\n     * @param password The password to pad or truncate.\n     *\n     * @return The padded or truncated password.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getAppearance()" : "* Get the annotations appearance dictionary.\n     * \n     * <p>\n     * This will get the annotations appearance dictionary. If this is not\n     * existent an empty appearance dictionary will be created.\n     * \n     * @return the annotations appearance dictionary",
  "org.apache.pdfbox.pdmodel.font.encoding.BuiltInEncoding:<init>(java.util.Map)" : "* Constructor.\n     *\n     * @param codeToName the given code to name mapping",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:toRGB(float[])" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setCaptionHorizontalOffset(float)" : "* This will set the horizontal offset of the caption.\n     * \n     * @param offset the horizontal offset of the caption",
  "org.apache.pdfbox.rendering.PageDrawer:drawGlyph(java.awt.geom.GeneralPath,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector,java.awt.geom.AffineTransform)" : "* Renders a glyph.\r\n     * \r\n     * @param path the GeneralPath for the glyph\r\n     * @param font the font\r\n     * @param code character code\r\n     * @param displacement the glyph's displacement (advance)\r\n     * @param at the transformation\r\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dic The COS dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Constructor.\n     *\n     * @param fontDictionary The font dictionary according to the PDF specification.\n     * @param resourceCache Resource cache, can be null.\n     * \n     * @throws IOException if the font could not be created",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:curveTo(float,float,float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.cos.COSDocument:<init>(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction,org.apache.pdfbox.cos.ICOSParser)" : "* Constructor that will use the provided function to create a stream cache for the storage of the PDF streams.\n     *\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache\n     * @param parser Parser to be used to parse the document on demand\n     *",
  "org.apache.pdfbox.pdfwriter.COSWriter:writeXrefEntry(org.apache.pdfbox.pdfparser.xref.XReferenceEntry)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:getDefaultValue()" : "* Returns the default value, if any.\n     *\n     * @return A non-null string.",
  "org.apache.pdfbox.cos.COSArray:add(org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* This will add an object to the array.\n     *\n     * @param object The object to add to the array.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getFlag1Edge()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:<init>()" : "* Creates a new empty page label range object.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:setBitsPerSample(int)" : "* Set the number of bits that the output value will take up. Valid values\n     * are 1,2,4,8,12,16,24,32.\n     *\n     * @param bps The number of bits for each output value.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decrypt(org.apache.pdfbox.cos.COSBase,long,long)" : "* This will dispatch to the correct method.\n     *\n     * @param obj The object to decrypt.\n     * @param objNum The object number.\n     * @param genNum The object generation Number.\n     * \n     * @return the encrypted/decrypted COS object\n     *\n     * @throws IOException If there is an error getting the stream data.",
  "org.apache.pdfbox.filter.JPXFilter:readJPX(java.io.InputStream,org.apache.pdfbox.filter.DecodeOptions,org.apache.pdfbox.filter.DecodeResult)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getCOSObject()" : "* Convert this standard java object to a COS dictionary.\n     *\n     * @return The COS dictionary that matches this Java object.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:updatePageReferences(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.cos.COSDictionary,java.util.Map)" : "* Update the Pg and Obj references to the new (merged) page.\n     *\n     * @param parentTreeEntry\n     * @param objMapping mapping between old and new references",
  "org.apache.pdfbox.contentstream.operator.text.SetTextRise:getName()" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:<init>()" : "* Constructor.\n     *",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanPrint(boolean)" : "* Set if the user can print.\n     * <p>\n     * This method will have no effect if the object is in read only mode.\n     *\n     * @param allowPrinting A boolean determining if the user can print.",
  "org.apache.pdfbox.pdfparser.COSParser:setEOFLookupRange(int)" : "* Sets how many trailing bytes of PDF file are searched for EOF marker and 'startxref' marker. If not set we use\n     * default value {@link #DEFAULT_TRAIL_BYTECOUNT}.\n     * \n     * <p>We check that new value is at least 16. However for practical use cases this value should not be lower than\n     * 1000; even 2000 was found to not be enough in some cases where some trailing garbage like HTML snippets followed\n     * the EOF marker.</p>\n     * \n     * <p>\n     * In case system property {@link #SYSPROP_EOFLOOKUPRANGE} is defined this value will be set on initialization but\n     * can be overwritten later.\n     * </p>\n     * \n     * @param byteCount number of trailing bytes",
  "org.apache.pdfbox.rendering.GroupGraphics:getRenderingHints()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:translate(double,double)" : null,
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getSerifStyle()" : null,
  "org.apache.pdfbox.cos.COSDictionary:setEmbeddedDate(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,java.util.Calendar)" : "* Set the date object.\n     *\n     * @param embedded The embedded dictionary.\n     * @param key The key to the date.\n     * @param date The date to set.",
  "org.apache.pdfbox.pdmodel.font.CIDSystemInfo:getRegistry()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:setScaleToFitAnnotation(boolean)" : "* This will tell the icon to scale.\n     *\n     * @param value The flag value.",
  "org.apache.pdfbox.pdfwriter.COSWriter:isCompress()" : "* Returns true, if the resulting document shall be compressed.\n     *\n     * @return True, if the resulting document shall be compressed.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:setRichTextValue(java.lang.String)" : "* Set the fields rich text value.\n     * \n     * <p>\n     * Setting the rich text value will not generate the appearance\n     * for the field.\n     * <br>\n     * You can set {@link PDAcroForm#setNeedAppearances(Boolean)} to\n     * signal a conforming reader to generate the appearance stream.\n     * </p>\n     * \n     * Providing null as the value will remove the default style string.\n     * \n     * @param richTextValue a rich text string",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getValue()" : "* Returns the selected values, or an empty List. This list always contains a single item\n     * unless {@link #isMultiSelect()} is true.\n     *\n     * @return A non-null string.",
  "org.apache.pdfbox.pdmodel.PDPage:getMediaBox()" : "* A rectangle, expressed in default user space units, defining the boundaries of the physical medium on which the\n     * page is intended to be displayed or printed.\n     * \n     * @return the media box of the page",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sin:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:setInteriorColor(java.awt.Color)" : "* This will set interior color of the drawn area.\n     *\n     * @param color The interior color of the circle.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setDefaultStyle(java.lang.String)" : "* Set the default style string.\n     *\n     * @param style The new default style string.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.OutputStream,org.apache.pdfbox.pdmodel.PDResources)" : "* Create a new appearance stream.\n     *\n     * @param document may be null\n     * @param outputStream The appearances output stream to write to.\n     * @param resources The resources to use",
  "org.apache.pdfbox.pdmodel.PDPageTree:indexOf(org.apache.pdfbox.pdmodel.PDPage)" : "* Returns the index of the given page, or -1 if it does not exist.\r\n     *\r\n     * @param page The page to search for.\r\n     * @return the zero-based index of the given page, or -1 if the page is not found.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setSubFilterRequired(boolean)" : "* set true if the subfilter shall be required.\n     * \n     * @param flag if true, the first supported SubFilter in the array shall be used when signing.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:setFlags(int)" : "* @param flags the flags",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getFo()" : "* This will get an action to be performed when the annotation\n     * receives the input focus.\n     *\n     * @return The Fo entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getDisplacement(int)" : null,
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser:initParserValues(org.apache.pdfbox.cos.COSStream)" : null,
  "org.apache.pdfbox.cos.COSDictionary:getLong(org.apache.pdfbox.cos.COSName,long)" : "* This is a convenience method that will get the dictionary object that is expected to be an integer. If the\n     * dictionary value is null then the default value will be returned.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The integer value.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getValueAsString()" : "* {@inheritDoc}\n     *\n     * <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns\n     * the local value, without inheritance.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:getFontTypeFromFont(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:openNode()" : "* This will set this node to be open when it is shown in the viewer. By default, when a new node is created it will\n     * be closed. This will do nothing if the node is already open.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:setTop(int)" : "* Set the top y-coordinate, a value of -1 implies that the current y-coordinate\n     * will be used.\n     * @param y The top ycoordinate.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeIDTree(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getKeyLength()" : "* Getter of the property keyLength.\n     * \n     * @return Returns the keyLength in bits.",
  "org.apache.pdfbox.rendering.PageDrawer:showAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getNormalizedPath(int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:<init>()" : "* Constructor for embedding.",
  "org.apache.pdfbox.cos.COSDictionary:getInt(org.apache.pdfbox.cos.COSName,int)" : "* This is a convenience method that will get the dictionary object that is expected to be an integer. If the\n     * dictionary value is null then the defaultvalue will be returned.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The integer value.",
  "org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:dispose()" : null,
  "org.apache.pdfbox.contentstream.operator.Operator:<init>(java.lang.String)" : "* Constructor.\n     *\n     * @param aOperator The operator that this object will represent.\n     * @throws IllegalArgumentException if the operator starts with \"/\".",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptStream(org.apache.pdfbox.cos.COSStream,long,int)" : "* This will encrypt a stream, but not the dictionary as the dictionary is\n     * encrypted by visitFromString() in COSWriter and we don't want to encrypt\n     * it twice.\n     *\n     * @param stream The stream to decrypt.\n     * @param objNum The object number.\n     * @param genNum The object generation number.\n     *\n     * @throws IOException If there is an error getting the stream data.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getFieldFlags()" : "* This will get the 'Ff' entry of the FDF field dictionary.\n     * If it is not present then this method will return null.\n     *\n     * @return The field flags.",
  "org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:encodeGlyphId(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:unCheck()" : "* Unchecks the check box.\n     * \n     * @throws IOException if the appearance couldn't be generated.",
  "org.apache.pdfbox.cos.COSUpdateState:setOriginDocumentState(org.apache.pdfbox.cos.COSDocumentState)" : "* <p>\n     * Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br>\n     * </p>\n     * <p>\n     * This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for\n     * all possibly contained substructures.\n     * </p>\n     * <p>\n     * Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to\n     * overwrite it.\n     * </p>\n     * <p>\n     * {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are\n     * allowed.\n     * </p>\n     * <p>\n     * As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates.\n     * </p>\n     *\n     * @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}.\n     * @see #originDocumentState\n     * @see #updated",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isForceBold()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:transform(org.apache.pdfbox.util.Matrix)" : "* Returns a path which represents this rectangle having been transformed by the given matrix. Note that the\n     * resulting path need not be rectangular.\n     * \n     * @param matrix the matrix to be used for the transformation\n     * @return the transformed rectangle",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getAnnotationFlags()" : "* This will get the flags for this field.\n     * \n     * @return flags The set of flags.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:create(org.apache.pdfbox.cos.COSBase)" : "* Creates a color space given a name or array.\n     * @param colorSpace the color space COS object\n     * @return a new color space\n     * @throws IOException if the color space is unknown or cannot be created",
  "org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.filter.JBIG2Filter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getStringOrStream(org.apache.pdfbox.cos.COSBase)" : "* Get a text or text stream.\n     *\n     * Some dictionary entries allow either a text or a text stream.\n     *\n     * @param base the potential text or text stream\n     * @return the text stream",
  "org.apache.pdfbox.cos.COSUpdateState:update(org.apache.pdfbox.cos.COSBase)" : "* <p>\n     * Shall call {@link #update()} for this {@link COSUpdateState} and shall\n     * {@link #setOriginDocumentState(COSDocumentState)} for the given child, initializing it´s {@link #updated} state\n     * and {@link #originDocumentState}.\n     * </p>\n     * <p>\n     * This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}.\n     * </p>\n     *\n     * @param child The child that shall also be updated.\n     * @see #update()\n     * @see #setOriginDocumentState(COSDocumentState)",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setOptions(java.util.List)" : "* This will set the options for the choice field.\n     * The objects in the list should either be <code>String</code> or {@link FDFOptionElement}.\n     *\n     * @param options The options to set.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7,org.apache.pdfbox.util.Matrix)" : "* Constructor.\n     *\n     * @param shading the shading resources\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getResources()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7:toPaint(org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getRoleMap()" : "* Returns the role map.\n     * \n     * @return the role map",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLineWidth(float)" : "* Set line width to the given value.\n     *\n     * @param lineWidth The width which is used for drawing.\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeLine()" : "* Writes a newline to the content stream as ASCII.\n     * \n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.PDPage:getStructParents()" : "* This will get the key of this Page in the structural parent tree.\n     * \n     * @return the integer key of the page's entry in the structural parent tree or -1 if\n     * there isn't any.",
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils$KeyValue:toString()" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:<init>()" : "* Creates a new optional content membership dictionary (OCMD).",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getHeight(int)" : null,
  "org.apache.pdfbox.contentstream.operator.text.ShowTextLine:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setFormType(int)" : "* Set the form type.\n     * @param formType The new form type.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setGlyphOrientationVertical(java.lang.String)" : "* Sets the orientation of glyphs when the inline-progression direction is\n     * top to bottom or bottom to top (GlyphOrientationVertical). The value\n     * should be one of:\n     * <ul>\n     *   <li>{@link #GLYPH_ORIENTATION_VERTICAL_AUTO},</li>\n     *   <li>{@link #GLYPH_ORIENTATION_VERTICAL_MINUS_180_DEGREES},</li>\n     *   <li>{@link #GLYPH_ORIENTATION_VERTICAL_MINUS_90_DEGREES},</li>\n     *   <li>{@link #GLYPH_ORIENTATION_VERTICAL_ZERO_DEGREES},</li>\n     *   <li>{@link #GLYPH_ORIENTATION_VERTICAL_90_DEGREES},</li>\n     *   <li>{@link #GLYPH_ORIENTATION_VERTICAL_180_DEGREES},</li>\n     *   <li>{@link #GLYPH_ORIENTATION_VERTICAL_270_DEGREES},</li>\n     *   <li>{@link #GLYPH_ORIENTATION_VERTICAL_360_DEGREES}.</li>\n     * </ul>\n     * \n     * @param glyphOrientationVertical the vertical glyph orientation",
  "org.apache.pdfbox.cos.COSArray:ofCOSNames(java.util.List)" : "* This will take a list of string objects and return a COSArray of COSName objects.\n     *\n     * @param strings A list of strings\n     *\n     * @return An array of COSName objects",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:initJPXValues()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setKeyUsage(java.util.List)" : "* (Optional; PDF 1.7) A List of ASCII strings, where each string specifies an acceptable\n     * key-usage extension that must be present in the signing certificate. Multiple strings specify\n     * a range of acceptable key-usage extensions; where each string 9 characters long and each\n     * character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't\n     * care. each index in the string represents a key usage:\n     * <ol>\n     * <li>digitalSignature</li>\n     * <li>non-Repudiation</li>\n     * <li>keyEncipherment</li>\n     * <li>dataEncipherment</li>\n     * <li>keyAgreement</li>\n     * <li>keyCertSign</li>\n     * <li>cRLSign</li>\n     * <li>encipherOnly</li>\n     * <li>decipherOnly</li>\n     * </ol>\n     *\n     * @param keyUsageExtensions list of ASCII strings that consists only of {0, 1, X}",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdfparser.COSParser:getObjectOffset(org.apache.pdfbox.cos.COSObjectKey,boolean)" : null,
  "org.apache.pdfbox.cos.COSIncrement:isExcluded(org.apache.pdfbox.cos.COSBase)" : "* Returns {@code true}, if the given {@link COSBase} has been excluded from the increment, and hence is contained\n     * in {@link #excluded}.\n     *\n     * @param base The {@link COSBase} to check for exclusion.\n     * @return {@code true}, if the given {@link COSBase} has been excluded from the increment, and hence is contained\n     * in {@link #excluded}.\n     * @see #excluded",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)" : "* The Tm operator. Sets the text matrix to the given values.\n     * A current text matrix will be replaced with the new one.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.contentstream.operator.graphics.DrawObject:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:getEndBookmark()" : "* Get the bookmark where text extraction should end, inclusive. Default is null.\n     *\n     * @return The ending bookmark.",
  "org.apache.pdfbox.filter.DecodeOptions:getSubsamplingOffsetX()" : "* When decoding an image, the horizontal offset for subsampling\n     *\n     * @return The x-axis subsampling offset",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getNonFullScreenPageMode()" : "* Get the non full screen page mode preference.\n     *\n     * @return the non full screen page mode preference.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:getRevisionNumbers()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getTextLineMatrix()" : "* @return Returns the textLineMatrix.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,boolean)" : "* Loads a TTF to be embedded into a document as a Type 0 font.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param input An input stream of a TrueType font. It will be closed before returning.\n     * @param embedSubset True if the font will be subset before embedding. Set this to false when\n     * creating a font for AcroForm.\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font stream.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isSort()" : "* Determines if Sort is set.\n     * \n     * <p>\n     * If set, the field’s option items shall be sorted alphabetically.\n     * The sorting has to be done when writing the PDF. PDF Readers are supposed to\n     * display the options in the order in which they occur in the Opt array. \n     * </p>\n     * \n     * @return true if the options are sorted.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setInnerFormName(org.apache.pdfbox.cos.COSName)" : "* Sets inner form name\n     * \n     * @param innerFormName the name of the inner form",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:getCOSObject()" : "* This will return the corresponding dictionary.\n     * \n     * @return the viewport dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getTitlePopup()" : "* Retrieve the string used as the title of the popup window shown when open and active (by convention this\n     * identifies who added the annotation).\n     *\n     * @return The title of the popup.",
  "org.apache.pdfbox.pdmodel.PDDocument:saveIncremental(java.io.OutputStream)" : "* Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not\n     * if the document was created in PDFBox itself. There must be a path of objects that have\n     * {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken\n     * care by PDFBox itself.\n     * <p>\n     * Other usages of this method are for experienced users only. You will usually never need it. It is useful only if\n     * you are required to keep the current revision and append the changes. A typical use case is changing a signed\n     * file without invalidating the signature.\n     * <p>\n     * If your modification includes annotations, make sure these link back to their page by calling\n     * {@link PDAnnotation#setPage(PDPage)}. Although this is optional,\n     * not doing it\n     * <a href=\"https://stackoverflow.com/questions/74836898/\">can cause trouble when PDFs get\n     * signed</a>. (PDFBox already does this for signature widget annotations)\n     * <p>\n     * Another problem with page-based modifications can occur if the page tree isn't flat: there\n     * won't be an closed update path from the catalog to the page. To fix this, add code like this:\n     * <pre>{@code\n     * COSDictionary parent = page.getCOSObject().getCOSDictionary(COSName.PARENT);\n     * while (parent != null)\n     * {\n     *     parent.setNeedToBeUpdated(true);\n     *     parent = parent.getCOSDictionary(COSName.PARENT);\n     * }\n     * }</pre>\n     * Don't use the input file as target as this will produce a corrupted file.\n     *\n     * @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source\n     * file or that one will be harmed!\n     * @throws IOException if the output could not be written\n     * @throws IllegalStateException if the document was not loaded from a file or a stream.",
  "org.apache.pdfbox.text.PDFTextStripperByArea:getTextForRegion(java.lang.String)" : "* Get the text for the region, this should be called after extractRegions().\n     *\n     * @param regionName The name of the region to get the text from.\n     * @return The text that was identified in that region.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setLegalAttestationRequired(boolean)" : "* set true if the LegalAttestation shall be required.\n     * \n     * @param flag if true, the LegalAttestation entry shall be used.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getImage()" : null,
  "org.apache.pdfbox.contentstream.operator.text.EndText:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getInitialTransformationMatrix()" : "* Returns the CTM at the time the ExtGState was activated.\r\n     *\r\n     * @return the transformation matrix",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setResources(org.apache.pdfbox.pdmodel.PDResources)" : "* This will set the resources for this page.\n     * @param resources The new resources for this page.",
  "org.apache.pdfbox.filter.RunLengthDecodeFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setHideToolbar(boolean)" : "* Set the toolbar preference.\n     *\n     * @param value Set the toolbar preference.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[],java.lang.String)" : "* Create a PDImageXObject from bytes of an image file. The file format is determined by the\r\n     * file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG.\r\n     * This is a convenience method that calls {@link JPEGFactory#createFromByteArray},\r\n     * {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with\r\n     * {@link LosslessFactory#createFromImage}. (The later can also be used to create a\r\n     * PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image\r\n     * directly from a PNG file without decoding it (when possible), which is faster. However the\r\n     * result size depends on the compression skill of the software that created the PNG file. If\r\n     * file size or bandwidth are important to you or to your clients, then create your PNG files\r\n     * with a tool that has implemented the\r\n     * <a href=\"https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/\">Zopfli\r\n     * algorithm</a>, or use the two-step process mentioned above.\r\n     *\r\n     * @param byteArray bytes from an image file.\r\n     * @param document the document that shall use this PDImageXObject.\r\n     * @param name name of image file for exception messages, can be null.\r\n     * @return a PDImageXObject.\r\n     * @throws IOException if there is an error when reading the file or creating the\r\n     * PDImageXObject.\r\n     * @throws IllegalArgumentException if the image type is not supported.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getRenderingMode()" : "* Get the value of the renderingMode.\n     *\n     * @return The renderingMode.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setFloatItem(org.apache.pdfbox.cos.COSName,java.lang.Float)" : "* This will set a float object.\n     *\n     * @param key The key to the data that we are setting.\n     * @param value The value that we are setting.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:createShortStyles()" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setDenominator(int)" : "* This will set the precision or denominator of a fractional amount.\r\n     * \r\n     * @param denominator the precision or denominator",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setRelationship(org.apache.pdfbox.cos.COSName)" : "* Set the relationship between the current document and the target (which may be an\n     * intermediate target).\n     *\n     * @param relationship Valid values are P (the target is the parent of the current document) and\n     * C (the target is a child of the current document).\n     *\n     * throws IllegalArgumentException if the parameter is not P or C.",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param t The FDF page template.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:setParent(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getDocument()" : "* Get the XFA content as W3C document.\n     * \n     * @see #getBytes()\n     * \n     * @return the XFA content\n     * \n     * @throws IOException if something went wrong when reading the XFA content.\n     *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isToggleNoView()" : "* Get the toggleNoView flag.\n     * \n     * @return The toggleNoView flag.",
  "org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeToken(org.apache.pdfbox.contentstream.operator.Operator)" : "*  Writes a single operator token.\n     *\n     * @param op The operator to write to the stream.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.PDPageTree:<init>()" : "* Constructor for embedding.",
  "org.apache.pdfbox.util.NumberFormatUtil:<init>()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new standard attribute object with a given dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(float,float,float)" : "* Set the non-stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveDescent(org.apache.pdfbox.pdmodel.font.PDFont)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getOptionsDisplayValues()" : "* This will get the display values from the options.\n     * \n     * <p>\n     * For options with an array of text strings the display value and export value\n     * are the same.<br>\n     * For options with an array of two-element arrays the display value is the \n     * second entry in the two-element array.\n     * </p>\n     * \n     * @return List containing all the display values.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setHorizontalScaling(float)" : "* Set the horizontal scaling to scale / 100.\n     *\n     * @param scale number specifying the percentage of the normal width. Default value: 100 (normal\n     * width).\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:generateBoundingBox()" : null,
  "org.apache.pdfbox.filter.LZWFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:isOnSameSideDD(java.awt.geom.Point2D)" : null,
  "org.apache.pdfbox.multipdf.PDFCloneUtility:cloneMerge(org.apache.pdfbox.pdmodel.common.COSObjectable,org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* Merges two objects of the same type by deep-cloning its members. <br>\n     * Base and target must be instances of the same class.\n     * \n     * @param base the base object to be cloned\n     * @param target the merge target\n     * @throws IOException if an I/O error occurs",
  "org.apache.pdfbox.pdfparser.BruteForceParser:searchForTrailerItems(org.apache.pdfbox.cos.COSDictionary)" : "* Search for the different parts of the trailer dictionary.\n     *\n     * @param trailer dictionary to be used as trailer dictionary\n     * @return true if the root was found, false if not.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getPrintScaling()" : "* Get the PrintScaling preference.  See PRINT_SCALING enumeration.\n     *\n     * @return the PrintScaling preference.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setAngles(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])" : "* This will set the angles.\r\n     * \r\n     * @param angles angles",
  "org.apache.pdfbox.filter.FilterFactory:getFilter(org.apache.pdfbox.cos.COSName)" : "* Returns a filter instance given its COSName.\n     * @param filterName the name of the filter to retrieve\n     * @return the filter that matches the name\n     * @throws IOException if the filter name was invalid",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setContents(byte[])" : "* Sets the contents.\n     *\n     * @param bytes contents to be used",
  "org.apache.pdfbox.rendering.PageDrawer:showFontGlyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getAction()" : "* Get the action to be performed when this annotation is to be activated.\n     *\n     * @return The action to be performed when this annotation is activated.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:getExtend()" : "* This will get the optional Extend values for this shading.\n     *\n     * @return the extend values",
  "org.apache.pdfbox.pdmodel.PDDocument:getNumberOfPages()" : "* This will return the total page count of the PDF document.\n     * \n     * @return The total number of pages in the PDF document.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:<init>(java.lang.String)" : "* Creates a Circle or Square annotation of the specified sub type.\n     *\n     * @param subType the subtype the annotation represents.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:setColorants(java.util.Map)" : "* Sets the colorant map.\n     * @param colorants the map of colorants",
  "org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:getFunction()" : "* Returns the function.\r\n     * \r\n     * @return the function\r\n     *\r\n     * @throws java.io.IOException if we were not able to create the function.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(float,float,float)" : "* Set the stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.rendering.GroupGraphics:fill(java.awt.Shape)" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getLineSloaps()" : "* This will return the sloaps of a line.\r\n     * \r\n     * @return the sloaps of a line",
  "org.apache.pdfbox.filter.FlateFilterDecoderStream:read(byte[],int,int)" : "* This will read a chunk of data.\n     *\n     * @param data The buffer to write data to.\n     * @param offset The offset into the data stream.\n     * @param length The number of byte to attempt to read.\n     *\n     * @return The number of bytes actually read.\n     *\n     * @throws IOException If there is an error reading data from the underlying stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for reading.\n     *\n     * @param dictionary The annotations dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:retrieveDimensions(java.io.ByteArrayInputStream)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isSmallCap()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getNormalizedPath(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getMetadata()" : "* Returns the metadata stream for this object, or null if there is no metadata stream.\n     * @return the metadata stream, or null if there is none",
  "org.apache.pdfbox.pdmodel.common.PDMetadata:<init>(org.apache.pdfbox.cos.COSStream)" : "* Constructor. This will <b>not</b> set up the /Type and /Subtype entries.\n     *\n     * @param str The stream parameter.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:buildIndexImage(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)" : "* Build a indexed image",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:getNumberOfOutputParameters()" : "* This will get the number of output parameters that\n     * have a range specified.  A range for output parameters\n     * is optional so this may return zero for a function\n     * that does have output parameters, this will simply return the\n     * number that have the range specified.\n     *\n     * @return The number of output parameters that have a range\n     * specified.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLeading(float)" : "* Sets the text leading.\n     *\n     * @param leading The leading in unscaled text units.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getTrapped()" : "* This will get the trapped value for the document.\n     * This will return null if one is not found.\n     *\n     * @return The trapped value for the document.",
  "org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float,boolean,org.apache.pdfbox.rendering.PDFRenderer)" : "* Creates a new PDFPrintable with the given page scaling and with optional page borders shown.\n     * The image will be rasterized at the given DPI before being sent to the printer.\n     *\n     * @param document the document to print\n     * @param scaling page scaling policy\n     * @param showPageBorder true if page borders are to be printed\n     * @param dpi if positive non-zero then the image will be rasterized at the given DPI. If\n     * set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.\n     * @param center true if the content is to be centered on the page (otherwise top-left).\n     * @param renderer the document renderer. Useful if {@link PDFRenderer} has been subclassed.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:getSubDictionary()" : "* Returns the entry as an appearance subdictionary.\n     *\n     * @return the entry as an appearance subdictionary\n     * \n     * @throws IllegalStateException if this entry is not an appearance subdictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:hashCode()" : "* {@inheritDoc}",
  "org.apache.pdfbox.filter.DecodeResult:getJPXColorSpace()" : "* Returns the embedded JPX color space, if any.\n     * @return the embedded JPX color space, or null if there is none.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getStandardStructureType()" : "* Returns the standard structure type, the actual structure type is mapped\n     * to in the role map.\n     * \n     * @return the standard structure type",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getMatrix()" : "* This will get the optional matrix of an XObjectForm. It maps the form space to user space.\n     * @return the form matrix if available, or the identity matrix.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setWordSpacing(float)" : "* Set the value of the wordSpacing.\n     *\n     * @param value The wordSpacing.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:<init>(java.lang.String)" : "* Default constructor.\n     * \n     * @param owner the owner of the attributes",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* creates a new transition for an existing dictionary\n     * \n     * @param dictionary the dictionary to be used for the new transition",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:setTop(int)" : "* Set the top y-coordinate, values 0 or -1 imply that the current y-coordinate\n     * will be used.\n     * @param y The top ycoordinate.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setRubyPosition(java.lang.String)" : "* Sets the placement of the RT structure element relative to the RB element\n     * in a ruby assembly (RubyPosition). The value should be one of:\n     * <ul>\n     *   <li>{@link #RUBY_POSITION_BEFORE},</li>\n     *   <li>{@link #RUBY_POSITION_AFTER},</li>\n     *   <li>{@link #RUBY_POSITION_WARICHU},</li>\n     *   <li>{@link #RUBY_POSITION_INLINE}.</li>\n     * </ul>\n     * \n     * @param rubyPosition the ruby position",
  "org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:getOperators()" : "* Returns the operator set used by this execution context.\n     * @return the operator set",
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Eq:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getPathFromOutlines(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:setupIndexedColorSpace(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$Chunk,org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,int)" : null,
  "org.apache.pdfbox.util.Matrix:<init>(float[])" : "* Constructor. This produces a matrix with the given array as data.\n     * The source array is not copied or cloned.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:computeLabels(org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelHandler,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getParent()" : "* Returns the parent in the structure hierarchy (P).\n     * \n     * @return the parent in the structure hierarchy",
  "org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:getFileSpecification()" : "* This will get the file specification of this reference. An optional parameter.\n     *\n     * @return The F entry for this dictionary.\n     *\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getPath(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.multipdf.PDFCloneUtility:cloneCOSDictionary(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.PDPage:getResources()" : "* A dictionary containing any resources required by the page.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getInteriorColor()" : "* This will retrieve the interior color of the line endings defined in the LE entry.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:updateBBox(double,double)" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:getRangeForOutput(int)" : "* This will get the range for a certain output parameters.  This is will never\n     * return null.  If it is not present then the range 0 to 0 will\n     * be returned.\n     *\n     * @param n The output parameter number to get the range for.\n     *\n     * @return The range for this component.",
  "org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateFinalPoint:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new instance based on a given {@link COSDictionary}.\n     * @param dict the dictionary",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:process()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getCIDSet()" : "* Get the CIDSet stream.\n     *\n     * @return A stream containing a CIDSet.",
  "org.apache.pdfbox.pdmodel.PDDocument:setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryption)" : "* This will set the encryption dictionary for this document.\n     * \n     * @param encryption The encryption dictionary(most likely a PDStandardEncryption object)",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showTextStrings(org.apache.pdfbox.cos.COSArray)" : "* Called when a string of text with spacing adjustments is to be shown.\n     *\n     * @param array array of encoded text strings and adjustments\n     * @throws IOException if there was an error showing the text",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryption,org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)" : "* Prepares everything to decrypt the document.\n     *\n     * @param encryption encryption dictionary, can be retrieved via\n     * {@link PDDocument#getEncryption()}\n     * @param documentIDArray document id which is returned via\n     * {@link org.apache.pdfbox.cos.COSDocument#getDocumentID()} (not used by\n     * this handler)\n     * @param decryptionMaterial Information used to decrypt the document.\n     *\n     * @throws IOException If there is an error accessing data. If verbose mode\n     * is enabled, the exception message will provide more details why the\n     * match wasn't successful.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Creates a new tiling pattern from the given COS dictionary.\n     * @param dictionary The COSDictionary for this pattern.\n     * @param resourceCache The resource cache, may be null",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getBackground()" : "* This will return the background.\n     *\n     * @return the background",
  "org.apache.pdfbox.pdfparser.PDFXRefStream:addEntry(org.apache.pdfbox.pdfparser.xref.XReferenceEntry)" : "* Add an new entry to the XRef stream.\n     * \n     * @param entry new entry to be added",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getDefaultAppearance()" : "* Get the default appearance.\n     * \n     * @return a string describing the default appearance.",
  "org.apache.pdfbox.pdfparser.BaseParser:readGenerationNumber()" : "* This will read a integer from the Stream and throw an {@link IllegalArgumentException} if the integer value\n     * has more than the maximum object revision (i.e. : bigger than {@link #GENERATION_NUMBER_THRESHOLD})\n     * @return the generation number being read.\n     * @throws IOException if an I/O error occurs",
  "org.apache.pdfbox.pdmodel.PDDocument:save(java.io.File,org.apache.pdfbox.pdfwriter.compress.CompressParameters)" : "* Save the document using the given compression.\n     * <p>\n     * Don't use the input file as target as this will produce a corrupted file.\n     * <p>\n     * If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)\n     * protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted.\n     * The same applies if your file was created from parts of another file and that\n     * one is to be used after saving.\n     *\n     * @param file The file to save as.\n     * @param compressParameters The parameters for the document's compression.\n     * @throws IOException if the output could not be written",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:setAttachmentName(java.lang.String)" : "* Set the name used to draw the attachment icon. See the ATTACHMENT_NAME_XXX constants.\n     *\n     * @param name The name of the visual icon to draw.",
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:getFirstByteOffset()" : "* The byte offset (in the decoded stream) of the first compressed object.\n     *\n     * @return The byte offset to the first object.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBWithTintTransform(float[])" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setWordSpacing(float)" : "* Set the word spacing. The value shall be added to the horizontal or vertical component of the\n     * ASCII SPACE character, depending on the writing mode.\n     * <p>\n     * This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF\n     * specification tells why: \"Word spacing shall be applied to every occurrence of the\n     * single-byte character code 32 in a string when using a simple font or a composite font that\n     * defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32\n     * in multiple-byte codes.\"\n     *\n     * @param spacing word spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:toLongName(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:addGroup(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup)" : "* Adds an optional content group (OCG).\n     * @param ocg the optional content group",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)" : "* The Tm operator. Sets the text matrix to the given values.\n     * A current text matrix will be replaced with the new one.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param f The FDF field.",
  "org.apache.pdfbox.pdfparser.BaseParser:isWhitespace()" : "* This will tell if the next byte is whitespace or not.\n     *\n     * @return true if the next byte in the stream is a whitespace character.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:writeXML(java.io.Writer)" : "* This will write this element as an XML document.\n     *\n     * @param output The stream to write the xml to.\n     *\n     * @throws IOException If there is an error writing the XML.",
  "org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:setTriangleList(java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getBaseFont()" : "* Returns the PostScript name of the font.\n     * \n     * @return the PostScript name of the font",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:getBlackPoint()" : "* This will return the BlackPoint tristimulus. This is an optional field\n     * but has defaults so this will never return null. A default of 0,0,0 will\n     * be returned if the pdf does not have any values yet.\n     *\n     * @return the blackpoint tristimulus",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getAlternateCaption()" : "* This will retrieve the alternate caption.\n     * \n     * @return the alternate caption.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:toRGBImageAWT(java.awt.image.WritableRaster,java.awt.color.ColorSpace)" : "* Returns the (A)RGB equivalent of the given raster, using the given AWT color space\n     * to perform the conversion.\n     * @param raster the source raster\n     * @param colorSpace the AWT\n     * @return an (A)RGB buffered image",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setVRequired(boolean)" : "* set true if the V entry shall be required.\n     * \n     * @param flag if true, the V entry shall be used.",
  "org.apache.pdfbox.pdmodel.PDPage:getBBox()" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:closeAndFillAndStrokeEvenOdd()" : "* Close, fill, and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStrokeEvenOdd() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setHideWindowUI(boolean)" : "* Set the window UI preference.\n     *\n     * @param value Set the window UI preference.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isInvisible()" : "* Get the invisible flag.\n     *\n     * @return The invisible flag.",
  "org.apache.pdfbox.pdfparser.BaseParser:readLong()" : "* This will read an long from the stream.\n     *\n     * @return The long that was read from the stream.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.cos.COSDictionary:getEmbeddedString(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string.\n     *\n     * @param embedded The embedded dictionary.\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The default value to return.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setAreas(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])" : "* This will set the areas.\r\n     * \r\n     * @param areas areas",
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:<init>()" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getDecodeValues()" : "* Returns all decode values as COSArray.\n     * \n     * @return the decode array.",
  "org.apache.pdfbox.rendering.GroupGraphics:getFontMetrics(java.awt.Font)" : null,
  "org.apache.pdfbox.cos.COSFloat:writePDF(java.io.OutputStream)" : "* This will output this string as a PDF object.\n     *\n     * @param output The stream to write to.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getTransformedAppearanceBBox(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Calculate the transformed appearance box.\n     * \n     * Apply the Matrix (or an identity transform) to the BBox of\n     * the appearance stream\n     * \n     * @param appearanceStream\n     * @return the transformed rectangle",
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:iterator()" : "* Returns an iterator which walks all pages in the tree, in order.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:curveTo2(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using the current point and (x2, y2) as the Bézier control points.\n     *\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IllegalStateException If the method was called within a text block.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isFileSelect()" : "* @return true if the field is a file select field.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     * \n     * @param dict dictionary",
  "org.apache.pdfbox.pdfparser.BaseParser:isEndOfName(int)" : "* Determine if a character terminates a PDF name.\n     *\n     * @param ch The character\n     * @return true if the character terminates a PDF name, otherwise false.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getColorOrFourColors(java.lang.String)" : "* Gets a single colour or four colours.\n     * \n     * @param name the attribute name\n     * @return the single ({@link PDGamma}) or a ({@link PDFourColours})",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getStructParents()" : "* This will get the key of this XObjectForm in the structural parent tree. Required if the form\n     * XObject contains marked-content sequences that are structural content items.\n     *\n     * @return the integer key of the XObjectForm's entry in the structural parent tree or -1 if\n     * there isn't any.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCacheCreateImpl:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:readCode(java.io.InputStream)" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:addSources(java.util.List)" : "* Add a list of sources to the list of documents to merge.\n     *\n     * @param sourcesList List of RandomAccessRead objects representing source documents",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:indexOfPageTree(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:createCIDFont()" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.DrawObject:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:getComposite()" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:addComment(java.lang.String)" : "* Write a comment line.\n     *\n     * @param comment the comment to be added to the content stream\n     * \n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line\n     * could be ordinary PDF content.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:setFringe(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing\n     * occurs. (To take account of any effects applied through the BE entry for example)\n     *\n     * @param fringe the fringe",
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:xobject(org.apache.pdfbox.pdmodel.graphics.PDXObject)" : null,
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getHolderFormResources()" : "* Gets Holder form resources\n     * @return the holder form's resources",
  "org.apache.pdfbox.cos.COSName:<init>(java.lang.String)" : "* Private constructor. This will limit the number of COSName objects that are created.\n     * \n     * @param aName The name of the COSName object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup:setQuadPoints(float[])" : "* This will set the set of quadpoints which encompass the areas of this annotation.\n     *\n     * @param quadPoints an array representing the set of area covered",
  "org.apache.pdfbox.multipdf.PageExtractor:<init>(org.apache.pdfbox.pdmodel.PDDocument,int,int)" : "* Creates a new instance of PageExtractor\n     * @param sourceDocument The document to split.\n     * @param startPage The first page you want extracted (1-based, inclusive)\n     * @param endPage The last page you want extracted (1-based, inclusive)",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.pdmodel.PDDocument:save(java.io.OutputStream,org.apache.pdfbox.pdfwriter.compress.CompressParameters)" : "* Save the document using the given compression.\n     * <p>\n     * Don't use the input file as target as this will produce a corrupted file.\n     * <p>\n     * If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)\n     * protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted.\n     * The same applies if your file was created from parts of another file and that\n     * one is to be used after saving.\n     *\n     * @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream},\n     * unless it is already buffered.\n     * @param compressParameters The parameters for the document's compression.\n     * @throws IOException if the output could not be written",
  "org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy:getOwnerPassword()" : "* Returns the owner password.\n     * @return the owner password",
  "org.apache.pdfbox.cos.COSDictionary:getCOSName(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a name. Default is\n     * returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The COS name.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:getWhitepoint()" : "* This will return the whitepoint tristimulus. As this is a required field\n     * this will never return null. A default of 1,1,1 will be returned if the\n     * pdf does not have any values yet.\n     *\n     * @return the whitepoint tristimulus",
  "org.apache.pdfbox.util.DateConverter:updateZoneId(java.util.TimeZone)" : "* Update the zone ID based on the raw offset. This is either GMT, GMT+hh:mm or GMT-hh:mm, where\n     * n is between 1 and 14. The highest negative hour is -14, the highest positive hour is 12.\n     * Zones that don't fit in this schema are set to zone ID \"unknown\".\n     *\n     * @param tz the time zone to update.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getRecipientStringAt(int)" : "* returns the COSString contained in the Recipients field at position i.\n     *\n     * @param i the position in the Recipients field array.\n     *\n     * @return a COSString object containing information about the recipient number i.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawArrow(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float)" : "* Add the two arms of a horizontal arrow.\n     * \n     * @param cs Content stream\n     * @param x\n     * @param y\n     * @param len The arm length. Positive goes to the right, negative goes to the left.\n     * \n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:getXrefTable()" : "* Gets the resolved xref table. Might return <code>null</code> in case\r\n     *  {@link #setStartxref(long)} was not called before.\r\n     *\r\n     * @return the xrefTable if available",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:readVertex(javax.imageio.stream.ImageInputStream,long,long,org.apache.pdfbox.pdmodel.common.PDRange,org.apache.pdfbox.pdmodel.common.PDRange,org.apache.pdfbox.pdmodel.common.PDRange[],org.apache.pdfbox.util.Matrix,java.awt.geom.AffineTransform)" : "* Read a vertex from the bit input stream performs interpolations.\n     *\n     * @param input bit input stream\n     * @param maxSrcCoord max value for source coordinate (2^bits-1)\n     * @param maxSrcColor max value for source color (2^bits-1)\n     * @param rangeX dest range for X\n     * @param rangeY dest range for Y\n     * @param colRangeTab dest range array for colors\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @param xform the affine transformation\n     * @return a new vertex with the flag and the interpolated values\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:hashCode()" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeObject(java.io.OutputStream,org.apache.pdfbox.cos.COSBase,boolean)" : "* This method prepares and writes COS data to the object stream by selecting appropriate specialized methods for\n     * the content.\n     *\n     * @param output The stream, that shall be written to.\n     * @param object The content, that shall be written.\n     * @param topLevel True, if the currently written object is a top level entry of this object stream.\n     * @throws IOException Shall be thrown, when an exception occurred for the write operation.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getSize()" : "* The \"Size\" entry, which is the number of samples in each input dimension\n     * of the sample table.\n     *\n     * @return A List of java.lang.Integer objects.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination:create(org.apache.pdfbox.cos.COSBase)" : "* This will create a new destination depending on the type of COSBase\n     * that is passed in.\n     *\n     * @param base The base level object.\n     *\n     * @return A new destination.\n     *\n     * @throws IOException If the base cannot be converted to a Destination.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getYStep()" : "* This will return the YStep value.\n     * @return The YStep value",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setInnerFormResources(org.apache.pdfbox.pdmodel.PDResources)" : "* Sets inner form resource\n     * \n     * @param innerFormResources the rsesources of the inner form",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getxAxis()" : "* \n     * @return xAxis - gets x coordinates",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:setURI(java.lang.String)" : "* This will set the uniform resource identifier to resolve, encoded in\n     * 7-bit ASCII.\n     *\n     * @param uri The uniform resource identifier.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:acroFormJoinFieldsMode(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:setRegistryName(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getResources()" : "* This will get the resources for this Form XObject.\n     * This will return null if no resources are available.\n     * \n     * @return The resources for this Form XObject.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser:readNextValue(byte[])" : null,
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:setTrailer(org.apache.pdfbox.cos.COSDictionary)" : "* Adds trailer information for current XRef object.\r\n     *\r\n     * @param trailer the current document trailer dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getPopup()" : "* This will retrieve the popup annotation used for entering/editing the text for this annotation.\n     *\n     * @return the popup annotation.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setSubjectRequired(boolean)" : "* set true if subject shall be required as a constraint on signature.\n     *\n     * @param flag if true, the specified Subject shall be enforced as a constraint.",
  "org.apache.pdfbox.pdfparser.COSParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Constructor for encrypted pdfs.\n     * \n     * @param source input representing the pdf.\n     * @param password password to be used for decryption.\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param keyAlias alias to be used for decryption when using public key security\n     * @param streamCacheCreateFunction a function to create an instance of the stream cache\n     *\n     * @throws IOException if the source data could not be read",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:addTrueTypeFontImpl(org.apache.fontbox.ttf.FontHeaders,java.io.File,java.lang.String)" : "* Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.",
  "org.apache.pdfbox.pdmodel.PDPageTree:getCount()" : "* Returns the number of leaf nodes (page objects) that are descendants of this root within the page tree.\r\n     * \r\n     * @return the number of leaf nodes, 0 if not present",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setColourByIndex(int,org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the colour by edge index.\n     * \n     * @param index the edge index\n     * @param colour the colour",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.filter.Predictor$PredictorOutputStream:flipRows()" : "* Flips the row buffers (to avoid copying), and resets the current-row index\n         * and predictorRead flag",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getColor(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setJustification(java.lang.String)" : "* This will set the form of quadding (justification) of the annotation text.\n     * \n     * @param justification The quadding of the text.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:adjustUserKey(byte[])" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:fill()" : "* Fills the path using the nonzero winding number rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:getVisibilityPolicy()" : "* Get the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default).\n     *\n     * @return the visibility policy, never null.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getQ()" : "* This will get the document-wide default value for the quadding/justification of variable text\n     * fields. \n     * <p>\n     * 0 - Left(default)<br>\n     * 1 - Centered<br>\n     * 2 - Right<br>\n     * See the QUADDING constants of {@link PDVariableText}.\n     *\n     * @return The justification of the variable text fields.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:getInteriorColor()" : "* This will retrieve the interior color of the drawn area.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.cos.COSArray:iterator()" : "* Get access to the list.\n     *\n     * @return an iterator over the array elements",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getGroup()" : "* Returns the G entry of the soft mask object\r\n     * \r\n     * @return form containing the transparency group\r\n     * @throws IOException if the group could not be read",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getDefaultFont()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:isVisibleAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.cos.COSBase:isDirect()" : "* If the state is set true, the dictionary will be written direct into the called object. \n     * This means, no indirect object will be created.\n     * \n     * @return the state",
  "org.apache.pdfbox.cos.COSBoolean:getValue()" : "* This will get the value that this object wraps.\n     *\n     * @return The boolean value of this object.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:<init>()" : "* Creates a group object with /Transparency subtype entry.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFileMac()" : "* Get the embedded Mac file.\n     *\n     * @return The embedded Mac file for this file spec.",
  "org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSArray)" : "* Constructor. Reads all data from the input stream and embeds it into the document with the\n     * given filters applied. This method closes the InputStream.\n     *\n     * @param doc The document that will hold the stream.\n     * @param input The stream parameter.\n     * @param filters Filters to apply to the stream.\n     * @throws IOException If there is an error creating the stream in the document.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:<init>()" : "* Default constructor.\n     *",
  "org.apache.pdfbox.rendering.PageDrawer:isHiddenAndVisibilityExpression(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setNames(org.apache.pdfbox.pdmodel.PDDocumentNameDictionary)" : "* Sets the names dictionary for the document.\n     *\n     * @param names The names dictionary that is associated with this document.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(float,float,float,float)" : "* Set the stroking color in the DeviceCMYK color space. Range is 0..1\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdfparser.BaseParser:parseCOSArray()" : "* This will parse a PDF array object.\n     *\n     * @return The parsed PDF array.\n     *\n     * @throws IOException If there is an error parsing the stream.",
  "org.apache.pdfbox.text.PDFTextStripper:setPageStart(java.lang.String)" : "* Sets the string which will be used at the beginning of a page.\n     * \n     * @param pageStartValue the page start string",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:outputCurlTemplate(java.awt.geom.Point2D$Double[],double,double)" : "* Writes the curl template points to the output and applies translation (x, y).",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:getSymbolicFlag()" : "* Returns the value of the symbolic flag, allowing for the fact that the result may be indeterminate.\r\n     * \r\n     * @return the value of the isSymbolic flag form the font descriptor",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getSubjectDN()" : "* Returns list of maps that contains subject distinguished names like [(cn: John Doe, o: Doe), (cn: John Smith)]\n     * both keys are typically of the form 'cn', 'o', 'email', '2.5.4.43'; and values are text strings.\n     * \n     * @return list maps that contains subject distinguished names",
  "org.apache.pdfbox.pdfparser.COSParser:dereferenceCOSObject(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:endText()" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:concat(byte[],byte[],byte[])" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:add(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Mul:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:getPaint(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Returns an AWT paint for the given PDColor.\r\n     * \r\n     * @param color The color to get a paint for. This can be an actual color or a pattern.\r\n     * @return an AWT paint for the given PDColor\r\n     * \r\n     * @throws IOException if the AWT paint could not be created",
  "org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:dispose()" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setWordSpacing(float)" : "* Set the word spacing. The value shall be added to the horizontal or vertical component of the\n     * ASCII SPACE character, depending on the writing mode.\n     * <p>\n     * This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF\n     * specification tells why: \"Word spacing shall be applied to every occurrence of the\n     * single-byte character code 32 in a string when using a simple font or a composite font that\n     * defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32\n     * in multiple-byte codes.\"\n     *\n     * @param spacing word spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.PDPage:setResources(org.apache.pdfbox.pdmodel.PDResources)" : "* This will set the resources for this page.\n     * \n     * @param resources The new resources for this page.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setName(java.lang.String,java.lang.String)" : "* Sets a name value.\n     * \n     * @param name the attribute name\n     * @param value the name value",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:<init>(org.apache.pdfbox.cos.COSStream)" : "* Creates a Form XObject for reading.\n     * @param stream The XObject stream",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:curveTo1(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getReplyType()" : "* This will retrieve the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for\n     * the available values.\n     *\n     * @return the relationship.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:saveGraphicsState()" : "* q operator. Saves the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getParentTreeNextKey()" : "* Returns The next key for the parent tree. This is a number greater than any existing key, and\n     * which shall be used for the next entry to be added to the tree.\n     *\n     * @return The next key for the parent tree",
  "org.apache.pdfbox.contentstream.operator.text.EndText:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getTextColor()" : "* Get the RGB text color of this node.  Default is black and this method\n     * will never return null.\n     *\n     * @return The structure element of this node.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getName()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getFringe()" : "* This will get the fringe. Giving the difference between the annotations rectangle and where\n     * the drawing occurs. (To take account of any effects applied through the BE entry for example)\n     *\n     * @return the rectangle difference",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getResources()" : "* @return the stream' resources. This is mainly to be used by the {@link OperatorProcessor}\n     * classes.",
  "org.apache.pdfbox.filter.CCITTFaxFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSArray(java.io.OutputStream,org.apache.pdfbox.cos.COSArray)" : "* Write the given {@link COSArray} to the given stream.\n     *\n     * @param output The stream, that shall be written to.\n     * @param cosArray The content, that shall be written.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:getCoords()" : "* This will get the Coords values for this shading.\n     *\n     * @return the coordinate values",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:xAxis(float)" : "*\n     * @param xAxis  - x coordinate \n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.contentstream.operator.text.SetCharSpacing:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:setPaintType(int)" : "* This will set the paint type.\n     * @param paintType The new paint type.",
  "org.apache.pdfbox.rendering.PDFRenderer:createPageDrawer(org.apache.pdfbox.rendering.PageDrawerParameters)" : "* Returns a new PageDrawer instance, using the given parameters. May be overridden.\r\n     * \r\n     * @param parameters parameters to be used when creating the PageDrawer instance\r\n     * @return a new PageDrawer instance\r\n     * \r\n     * @throws IOException id the PageDrawer instance could not be created",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getPI()" : "* This will get an action to be performed when the page containing the annotation\n     * is no longer visible in the viewer application's user interface.\n     *\n     * @return The PI entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromDocument(org.apache.pdfbox.cos.COSDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getCOSObject()" : "* This will get the underlying dictionary that this object wraps.\n     *\n     * @return The underlying info dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getBorder()" : "* This will retrieve the border array. If none is available then it will create and return a\n     * default array, which is [0 0 1]. The array consists of at least three numbers defining the\n     * horizontal corner radius, vertical corner radius, and border width. The array may have a\n     * fourth element, an optional dash array defining a pattern of dashes and gaps that shall be\n     * used in drawing the border. If the array has less than three elements, the original array\n     * will be copied and missing elements with value 0 will be added.\n     *\n     * @return the border array, never null.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(float)" : "* Set the stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream:<init>(org.apache.pdfbox.cos.COSStream)" : "* Creates a Form XObject for reading.\n     * \n     * @param stream The XObject stream",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:getCOSObject()" : "* {@inheritDoc}",
  "org.apache.pdfbox.Loader:loadPDF(byte[],java.lang.String)" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used\n     * to read the data.\n     * @param password password to be used for decryption\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setPO(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the page containing\n     * the annotation is opened. The action is executed after the O action\n     * in the page's additional actions dictionary and the OpenAction entry\n     * in the document catalog, if such actions are present.\n     *\n     * @param po The action to be performed.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:setAlternateColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Sets the alternate color space.\n     * @param colorSpace The alternate color space.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:getCOSObject()" : "* Returns the underlying dictionary.\n     * \n     * @return the underlying dictionary.",
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromStream(org.apache.pdfbox.cos.COSStream)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getColor()" : "* Get the annotation color.\n     *\n     * @return The annotation color, or null if there is none.",
  "org.apache.pdfbox.contentstream.PDContentStream:getContentsForStreamParsing()" : "* Returns this stream's content, if any.\n     * \n     * The random access capabilities of the returned instance is supposed to be limited. Peek/rewind operations are\n     * limited to a small range of data and not the whole set of data. Seek operations aren't supported at all.\n     * \n     * @return A RandomAccessRead or null.\n     * @throws IOException If the content could not be read",
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:getBefore()" : "* This will get the javascript that is executed before the import.\n     *\n     * @return Some javascript code.",
  "org.apache.pdfbox.contentstream.operator.graphics.LineTo:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setActions(org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions)" : "* Sets the additional actions for the document.\n     *\n     * @param actions The actions that are associated with this document.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:addAll(int,java.util.Collection)" : "* {@inheritDoc}",
  "org.apache.pdfbox.cos.COSDocument:setTrailer(org.apache.pdfbox.cos.COSDictionary)" : "* // MIT added, maybe this should not be supported as trailer is a persistence construct.\n     * This will set the document trailer.\n     *\n     * @param newTrailer the document trailer dictionary",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextDecorationType()" : "* Gets the type of text decoration (TextDecorationType). The default value\n     * is {@link #TEXT_DECORATION_TYPE_NONE}.\n     * \n     * @return the type of text decoration",
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getK()" : "* This will get a JavaScript action to be performed when the user\n     * types a keystroke into a text field or combo box or modifies the\n     * selection in a scrollable list box. This allows the keystroke to\n     * be checked for validity and rejected or modified.\n     *\n     * @return The K entry of form field's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getDifferences()" : "* This will get the incremental updates since the PDF was last opened.\n     *\n     * @return The differences entry of the FDF dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getOptionalContent()" : "* This will get the optional content group or optional content membership dictionary.\r\n     *\r\n     * @return The optional content group or optional content membership dictionary or null if there\r\n     * is none.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:getDefaultRangeArray()" : "* creates a range array with default values (-100..100 -100..100).\n     * @return the new range array.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationHighlight:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setFields(java.util.List)" : "* Set the documents root fields.\n     *\n     * @param fields The fields that are part of the documents root fields.",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : "* Adds the given extended graphics state to the resources of the current page and returns the\r\n     * name for the new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param extGState the extended graphics state to add\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getU()" : "* This will get an action to be performed when the mouse button\n     * is released inside the annotation's active area.\n     * The name U stands for \"up\".\n     *\n     * @return The U entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:setAlternateName(java.lang.String)" : "* Sets the alternate name of the field (Desc).\n     * \n     * @param alternateName the alternate name of the field",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:getColorants(org.apache.pdfbox.pdmodel.PDResources)" : "* Returns a map of colorants and their associated Separation color space.\n     * @param resources resources, can be null.\n     * @return map of colorants to color spaces, never null.\n     * @throws IOException If there is an error reading a color space",
  "org.apache.pdfbox.cos.COSObjectKey:getGeneration()" : "* This will get the object generation number.\n     *\n     * @return The object generation number.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:<init>(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)" : "* Constructor used for encryption.\n     *\n     * @param protectionPolicy The protection policy.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:getFontInfo()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getXObject(org.apache.pdfbox.cos.COSName)" : "* Returns the XObject resource with the given name, or null if none exists.\r\n     * \r\n     * @param name Name of the XObject resource.\r\n     * @return the XObject with the given name or null\r\n     * \r\n     * @throws IOException if something went wrong.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:calcLevel()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getFilename()" : "* The file to launch.\n     *\n     * @return The executable/document to launch.",
  "org.apache.pdfbox.pdmodel.PDResources:isAllowedCache(org.apache.pdfbox.pdmodel.graphics.PDXObject)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:size()" : "* Returns the size.\n     * \n     * @return the size",
  "org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequenceWithProperties:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:setShouldSeparateByBeads(boolean)" : "* Set if the text stripper should group the text output by a list of beads. The default value is true!\n     *\n     * @param aShouldSeparateByBeads The new grouping of beads.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setArrayOfNumber(java.lang.String,float[])" : "* Sets an array of float numbers.\n     * \n     * @param name the attribute name\n     * @param values the float numbers",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBorderThickness()" : "* Gets the border thickness (BorderThickness).\n     * \n     * @return the border thickness (a Float or an array of four floats)",
  "org.apache.pdfbox.cos.COSNull:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* Visitor pattern double dispatch method.\n     *\n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If an error occurs while visiting this object.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param fdfDictionary The FDF documents catalog.",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceCMYKColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdfparser.PDFStreamParser:<init>(byte[])" : "* Constructor.\n     *\n     * @param bytes the bytes to parse.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getPageNumber()" : "* If the value in the /P entry is an integer, this will get the page number (zero-based) in the\n     * current document containing the file attachment annotation.\n     *\n     * @return the zero based page number or -1 if the /P entry value is missing or not a number.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getName()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1Font:repairLength2(byte[],int,int)" : "* Some Type 1 fonts have an invalid Length2, see PDFBOX-3475. A negative /Length2 brings an\n     * IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of\n     * padding.\n     *\n     * @param bytes Type 1 stream bytes\n     * @param length1 Length1 from the Type 1 stream\n     * @param length2 Length2 from the Type 1 stream\n     * @return repaired Length2 value",
  "org.apache.pdfbox.multipdf.Splitter:getDestinationDocument()" : "* The source PDF document.\n     * \n     * @return current destination pdf",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:parseStreamElement(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getAlternateColorSpace()" : "* Returns a list of alternate color spaces for non-conforming readers.\n     * WARNING: Do not use the information in a conforming reader.\n     * @return A list of alternateColorSpace color spaces.\n     * @throws IOException If there is an error getting the alternateColorSpace color spaces.",
  "org.apache.pdfbox.text.TextPosition:getYDirAdj()" : "* This will get the y position of the text, adjusted so that 0,0 is upper left and it is\n     * adjusted based on the text direction.\n     * This method ignores the page rotation but takes the\n     * text rotation and adjusts the coordinates to awt. This is useful when doing text extraction,\n     * to compare the glyph positions when imagining these to be horizontal. See also\n     * <a href=\"https://stackoverflow.com/questions/57067372/\">this answer by Michael Klink</a> for\n     * further details and\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-4597\">PDFBOX-4597</a> for a sample\n     * file.\n     *\n     * @return The adjusted y coordinate of the character.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:<init>()" : "* Constructor.",
  "org.apache.pdfbox.util.DateConverter:formatTZoffset(long,java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getAnnotationIndex()" : "* If the value in the /A entry is an integer, this will get the index (zero-based) of the\n     * annotation in the /Annots array of the page specified by the /P entry.\n     *\n     * @return the zero based page number or -1 if the /P entry value is missing or not a number.",
  "org.apache.pdfbox.text.PDFTextStripper$WordWithTextPositions:<init>(java.lang.String,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:truncate127(byte[])" : null,
  "org.apache.pdfbox.rendering.PageDrawer:beginTextClip()" : "* Begin buffering the text clipping path, if any.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getD()" : "* This will get an action to be performed when the mouse button\n     * is pressed inside the annotation's active area.\n     * The name D stands for \"down\".\n     *\n     * @return The d entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:write(int)" : "* This will write a single byte to the stream.\n     *\n     * @param b The byte to write to the stream.\n     *\n     * @throws IOException If there is an error writing to the underlying stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getPreRelease()" : "* A flag that can be used by the signature handler or software module to\n     * indicate that this signature was created with unrelease software.\n     *\n     * @return true if the software module or signature handler was a pre release.",
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[],int)" : "* Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored\r\n     * in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If\r\n     * you're not sure what TIFF files you have, use\r\n     * {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }\r\n     * or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) }\r\n     * instead.\r\n     *\r\n     * @param document the document to create the image as part of.\r\n     * @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed\r\n     * image\r\n     * @param number TIFF image number, starting from 0\r\n     * @return a new Image XObject\r\n     * @throws IOException if there is an error reading the TIFF data.",
  "org.apache.pdfbox.text.TextPosition:contains(org.apache.pdfbox.text.TextPosition)" : "* Determine if this TextPosition logically contains another (i.e. they overlap and should be\n     * rendered on top of each other).\n     *\n     * @param tp2 The other TestPosition to compare against\n     * @return True if tp2 is contained in the bounding box of this text.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)" : "* Draw an inline image at the x,y coordinates, with the default size of the image.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators:<init>()" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setAES(boolean)" : "* Set to true if AES for encryption and decryption should be used.\n     *\n     * @param aesValue if true AES will be used\n     *",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter:format()" : "* Format the text block.\n     * \n     * @throws IOException if there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getHolderFormStream()" : "* Sets HolderFormStream\n     * @return the holder form stream",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:encode(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isNoRotate()" : "* Get the noRotate flag.\n     * \n     * @return The noRotate flag.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:curveTo(float,float,float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Ln:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.cos.COSArray:getString(int)" : "* Get the value of the array as a string.\n     *\n     * @param index The index into the array.\n     * @return The string or null if it does not exist.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:createCloudyPolygon(float[][])" : "* Creates a cloudy border for a Polygon annotation.\n     *\n     * @param path polygon path\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:encodeRow()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setSubject(java.lang.String)" : "* A short description of the annotation.\n     *\n     * @param subject The annotation subject.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getString(java.lang.String)" : "* Gets a string attribute value.\n     * \n     * @param name the attribute name\n     * @return the string attribute value",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:readPNGFloat(byte[],int)" : null,
  "org.apache.pdfbox.pdmodel.common.PDStream:getFilters()" : "* This will get the list of filters that are associated with this stream.\n     * \n     * @return A (possibly empty) list of all encoding filters to apply to this stream, never null.",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler:newLine(java.lang.CharSequence)" : "{@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getPreviousSibling()" : "* Return the previous sibling or null if there is no sibling.\n     *\n     * @return The previous sibling.",
  "org.apache.pdfbox.pdmodel.PDPage:getTransition()" : "* @return The page transition associated with this page or null if no transition is defined",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setActualText(java.lang.String)" : "* Sets the actual text (ActualText).\n     * \n     * @param actualText the actual text",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawUpLeftArrow(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getModificationDate()" : "* This will get the modification date of the document.  This will return null if no modification date exists.\n     *\n     * @return The modification date of the document.",
  "org.apache.pdfbox.cos.COSNull:writePDF(java.io.OutputStream)" : "* This will output this string as a PDF object.\n     *\n     * @param output The stream to write to.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText:<init>(java.util.List)" : "* Construct the text block from a list of values.\n     * \n     * Constructs the text block from a list of values treating each\n     * entry as an individual {@link Paragraph}.\n     * \n     * @param listValue the text block string.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cvi:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : "* Set an extended graphics state.\n     * \n     * @param state The extended graphics state to be added to the content stream\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:getFilter()" : "* A build data dictionary for the signature handler that was\n     * used to create the parent signature.\n     *\n     * @return the Filter as PDPropBuildFilter object",
  "org.apache.pdfbox.pdfwriter.compress.COSObjectPool:contains(org.apache.pdfbox.cos.COSObjectKey)" : "* Returns true, if a {@link COSBase} is registered for the given {@link COSObjectKey}.\n     *\n     * @param key The {@link COSObjectKey} that shall be checked for a registered {@link COSBase}.\n     * @return True, if a {@link COSBase} is registered for the given {@link COSObjectKey}.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:check()" : "* Checks the check box.\n     * \n     * @throws IOException if the appearance couldn't be generated.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSound:<init>()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:readEncoding()" : "* Reads the font's Encoding entry, which should be a CMap name/stream.",
  "org.apache.pdfbox.pdfwriter.COSWriter:write(org.apache.pdfbox.pdmodel.PDDocument)" : "* This will write the pdf document. If signature should be created externally,\n     * {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method.\n     *\n     * @param doc The document to write.\n     *\n     * @throws IOException If an error occurs while generating the data.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setLeaderLineLength(float)" : "* This will set the length of the leader line.\n     * \n     * @param leaderLineLength length of the leader line",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:setOpacity(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getTag()" : "* Gets the tag.\r\n     * \r\n     * @return the tag",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:convertPng(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)" : "* Convert the image using the state.\n     *\n     * @param doc   the document to put the image in\n     * @param state the parser state containing the PNG chunks.\n     * @return null or the converted image",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.PDXObject,java.lang.String)" : "* Adds the given XObject to the resources of the current page and returns the name for the\r\n     * new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param xobject the XObject to add\r\n     * @param prefix the prefix to be used when creating the resource name\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getProtectionPolicy()" : "* Returns the set {@link ProtectionPolicy} or null.\n     *\n     * @return The set {@link ProtectionPolicy}.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isMultiSelect()" : "* Determines if MultiSelect is set.\n     * \n     * @return true if multi select is allowed.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getLength()" : "* This will return the Length entry of the encryption dictionary.<br><br>\n     * The length in <b>bits</b> for the encryption algorithm.  This will return a multiple of 8.\n     *\n     * @return The length in bits for the encryption algorithm",
  "org.apache.pdfbox.cos.COSArray:getName(int,java.lang.String)" : "* Get an entry in the array that is expected to be a COSName.\n     * @param index The index into the array.\n     * @param defaultValue The value to return if it is null.\n     * @return The value at the index or defaultValue if none is found.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:constructAppearances()" : "* Create the appearance entry for this annotation. Not having it may prevent display in some\n     * viewers. This method is for overriding in subclasses, the default implementation does\n     * nothing.\n     *",
  "org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:setChildren(java.util.List)" : "* Sets the child fields.\n     *\n     * @param children The list of child fields.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:getLength()" : "* This will return the Length entry of the crypt filter dictionary.<br><br>\n     * The length in <b>bits</b> for the crypt filter algorithm. This will return a multiple of 8.\n     *\n     * @return The length in bits for the encryption algorithm",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:lastIndexOf(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:isEncryptMetaData()" : "* Will get the EncryptMetaData dictionary info.\n     * \n     * @return true if EncryptMetaData is explicitly set to false (the default is true)",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getLeaderOffset()" : "* This will retrieve the length of the leader line offset.\n     * \n     * @return the length of the leader line offset",
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getSeedValue()" : "* <p>(Optional; PDF 1.5) A seed value dictionary containing information\n     * that constrains the properties of a signature that is applied to the\n     * field.</p>\n     *\n     * @return the seed value dictionary as PDSeedValue",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a Rubber Stamp annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdfparser.COSParser:<init>(org.apache.pdfbox.io.RandomAccessRead)" : "* Default constructor.\n     *\n     * @param source input representing the pdf.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildVerticalHeader(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.cos.COSDictionary:setLong(org.apache.pdfbox.cos.COSName,long)" : "* This is a convenience method that will convert the value to a COSInteger object.\n     *\n     * @param key The key to the object,\n     * @param value The int value for the name.",
  "org.apache.pdfbox.cos.COSUpdateState:update(org.apache.pdfbox.cos.COSArray)" : "* <p>\n     * Shall call {@link #update()} for this {@link COSUpdateState} and shall\n     * {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated}\n     * state and {@link #originDocumentState}.\n     * </p>\n     * <p>\n     * This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}.\n     * </p>\n     *\n     * @param children The children that shall also be updated.\n     * @see #update()\n     * @see #setOriginDocumentState(COSDocumentState)",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBorderThicknesses(float[])" : "* Sets the border thicknesses for four sides separately (BorderThickness).\n     * \n     * @param borderThicknesses the border thickness (an array of four floats)",
  "org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:calcColorTable()" : "* Calculate the color on the line that connects two circles' centers and store the result in an\r\n     * array.\r\n     *\r\n     * @return an array, index denotes the relative position, the corresponding value the color",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:flatten(java.util.List,boolean)" : "* This will flatten the specified form fields.\n     * \n     * <p>\n     * Flattening a form field will take the current appearance and make that part of the pages content stream. All form\n     * fields and annotations associated are removed.\n     * </p>\n     * \n     * <p>\n     * Invisible and hidden fields will be skipped and will not become part of the page content stream\n     * </p>\n     * \n     * @param fields a list of fields to be flattened\n     * @param refreshAppearances if set to true the appearances for the form field widgets will be updated\n     * @throws IOException if something went wrong flattening the fields",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:text(org.apache.pdfbox.pdmodel.interactive.PlainText)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getPDStream()" : "* Get the underlying ICC profile stream.\n     * @return the underlying ICC profile stream",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setInteriorColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* This will set interior color of the line endings defined in the LE entry. color is in DeviceRGB color space.\n     *\n     * @param ic color in the DeviceRGB color space.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:createFont(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Creates a new PDFont instance with the appropriate subclass.\n     *\n     * @param dictionary a font dictionary\n     * @param resourceCache resource cache, only useful for type 3 fonts, can be null\n     * @return a PDFont instance, based on the SubType entry of the dictionary\n     * @throws IOException if something goes wrong",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)" : "* Creates a new JPEG PDImageXObject from a BufferedImage.\r\n     * <p>\r\n     * Do not read a JPEG image from a stream/file and call this method; you'll get more speed and\r\n     * quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument,\r\n     * java.io.InputStream) createFromStream()} instead.\r\n     *\r\n     * @param document the document where the image will be created\r\n     * @param image the BufferedImage to embed\r\n     * @return a new Image XObject\r\n     * @throws IOException if the JPEG data cannot be written",
  "org.apache.pdfbox.rendering.PageDrawer:intersectShadingBBox(org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.Area)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getOCProperties()" : "* Get the optional content properties dictionary associated with this document.\n     *\n     * @return the optional properties dictionary or null if it is not present",
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromName(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:transform(org.apache.pdfbox.util.Matrix)" : "* The cm operator. Concatenates the given matrix with the current transformation matrix (CTM),\n     * which maps user space coordinates used within a PDF content stream into output device\n     * coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2\n     * Coordinate Spaces.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getRepeat()" : "* Gets whether to repeat the sound indefinitely.\n     *\n     * @return Whether to repeat the sound indefinitely (default: false).",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:setBaseColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Sets the base color space.\n     * @param base the base color space",
  "org.apache.pdfbox.text.PDFTextStripper:getListItemPatterns()" : "* returns a list of regular expression Patterns representing different common list item formats. For example\n     * numbered items of form:\n     * <ol>\n     * <li>some text</li>\n     * <li>more text</li>\n     * </ol>\n     * or\n     * <ul>\n     * <li>some text</li>\n     * <li>more text</li>\n     * </ul>\n     * etc., all begin with some character pattern. The pattern \"\\\\d+\\.\" (matches \"1.\", \"2.\", ...) or \"\\[\\\\d+\\]\"\n     * (matches \"[1]\", \"[2]\", ...).\n     * <p>\n     * This method returns a list of such regular expression Patterns.\n     * \n     * @return a list of Pattern objects.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForXRefTables()" : "* Brute force search for all xref entries (tables).\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getFields()" : "* This will return all of the documents root fields.\n     * \n     * A field might have children that are fields (non-terminal field) or does not\n     * have children which are fields (terminal fields).\n     * \n     * The fields within an AcroForm are organized in a tree structure. The documents root fields \n     * might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields\n     * mark branches which contents can be retrieved using {@link PDNonTerminalField#getChildren()}.\n     * \n     * @return A list of the documents root fields, never null. If there are no fields then this\n     * method returns an empty list.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:getAttributeNames()" : "* Gets the attribute names.\n     * \n     * @return the attribute names",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:<init>()" : "* Creates a new shading pattern.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:createCOSStream()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:getRight()" : "* Get the right x coordinate.  A return value of -1 implies that the current x-coordinate\n     * will be used.\n     *\n     * @return The right x coordinate.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setSound(org.apache.pdfbox.cos.COSStream)" : "* Sets the sound object.\n     * \n     * @param sound the sound object defining the sound that shall be played.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setDigestMethodRequired(boolean)" : "* set true if the DigestMethod shall be required.\n     * \n     * @param flag if true, one digest from the array shall be used.",
  "org.apache.pdfbox.pdfparser.XrefParser:checkXRefStreamOffset(long)" : "* Check if the cross reference stream can be found at the current offset.\n     * \n     * @param startXRefOffset the expected start offset of the XRef stream\n     * @return the revised offset\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:getStroke()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:createObject(org.apache.pdfbox.cos.COSBase)" : "* Creates an object for a kid of this structure node.\r\n     * The type of object depends on the type of the kid. It can be\r\n     * <ul>\r\n     * <li>a {@link PDStructureElement},</li>\r\n     * <li>a {@link PDObjectReference},</li>\r\n     * <li>a {@link PDMarkedContentReference},</li>\r\n     * <li>an {@link Integer}</li>\r\n     * </ul>\r\n     * \r\n     * @param kid the kid\r\n     * @return the object",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:escapeXML(java.lang.String)" : "* Escape special characters.\n     *\n     * @param input the string to be escaped.\n     *\n     * @return the resulting string",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:setImage(java.awt.image.BufferedImage)" : "* Set image and its height and width.\n     *\n     * @param image",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:setAppearanceContent(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Constructs and sets new contents for given appearance stream.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:<init>()" : "* Creates a new Lab color space.",
  "org.apache.pdfbox.cos.COSDocument:setHasHybridXRef()" : "* Marks the pdf as document using hybrid cross references.",
  "org.apache.pdfbox.pdmodel.PDPage:getActions()" : "* Get the page actions.\n     * \n     * @return The Actions for this Page",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getBoundingBox()" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:<init>()" : "* Create a new access permission object.\n     * By default, all permissions are granted.",
  "org.apache.pdfbox.rendering.GroupGraphics:fillOval(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Truncate:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:getFile()" : "* This will get the file in which the destination is located.\n     *\n     * @return The F entry of the specific embedded go-to action dictionary.\n     *\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setLineDashPattern(float[],float)" : "* Set the line dash pattern.\n     *\n     * @param pattern The pattern array\n     * @param phase The phase of the pattern\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2,org.apache.pdfbox.util.Matrix)" : "* Constructor.\r\n     *\r\n     * @param shadingType2 the shading resources\r\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[])" : "* Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored\r\n     * in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If\r\n     * you're not sure what TIFF files you have, use\r\n     * {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }\r\n     * or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) }\r\n     * instead.\r\n     *\r\n     * @param document the document to create the image as part of.\r\n     * @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed\r\n     * image\r\n     * @return a new Image XObject\r\n     * @throws IOException if there is an error reading the TIFF data.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:isIsolated()" : "* Returns true if this group is isolated. Isolated groups begin with the fully transparent image, non-isolated\n     * begin with the current backdrop.\n     * \n     * @return true if this group is isolated",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getUpperLimit()" : "* Get the highest value for a key in the number map.\n     *\n     * @return The highest value for a key in the map or null if missing.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:contains(java.awt.geom.Point2D)" : "* Whether a point is contained in this ShadedTriangle.\n     *\n     * @param p the target point\n     * @return false if p is outside of this triangle, otherwise true",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup:getQuadPoints()" : "* This will retrieve the set of quadpoints which encompass the areas of this annotation.\n     *\n     * @return An array of floats representing the quad points.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:evalFunction(float[])" : "* Convert the input values using the functions of the shading dictionary.\n     *\n     * @param input the input values\n     * @return the output values\n     * @throws IOException thrown if something went wrong",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:isDecryptMetadata()" : "* Returns true if meta data is to be decrypted.\n     *\n     * @return True if meta data has to be decrypted.",
  "org.apache.pdfbox.cos.COSIncrement:getObjects()" : "* Returns all indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s.<br>\n     * Calling this method will cause the increment to be initialized.\n     *\n     * @return All indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s.\n     * @see #objects",
  "org.apache.pdfbox.pdmodel.fdf.FDFPage:setPageInfo(org.apache.pdfbox.pdmodel.fdf.FDFPageInfo)" : "* This will set the page info.\n     *\n     * @param info The new page info dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:setFlags(int)" : "* @param flags the flags",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileDos()" : "* This will get the name representing a Dos file.\n     *\n     * @return The file name.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:canModify()" : "* This will tell if the user can modify contents of the document.\n     *\n     * @return true If supplied with the user password they are allowed to modify the document",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:createCipher(byte[],byte[],boolean)" : null,
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser:<init>(org.apache.pdfbox.cos.COSStream)" : "* Constructor.\n     *\n     * @param stream The stream to parse.\n     *\n     * @throws IOException If there is an error initializing the stream.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:<init>(java.lang.Object,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)" : "* This is a really special constructor.  Sometimes the PDF spec says\n     * that a dictionary entry can either be a single item or an array of those\n     * items.  But in the PDModel interface we really just want to always return\n     * a java.util.List.  In the case were we get the list and never modify it\n     * we don't want to convert to COSArray and put one element, unless we append\n     * to the list.  So here we are going to create this object with a single\n     * item instead of a list, but allow more items to be added and then converted\n     * to an array.\n     *\n     * @param actualObject The PDModel object.\n     * @param item The COS Model object.\n     * @param dictionary The dictionary that holds the item, and will hold the array if an item is added.\n     * @param dictionaryKey The key into the dictionary to set the item.",
  "org.apache.pdfbox.rendering.GroupGraphics:setPaintMode()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:createWord(java.lang.String,java.util.List)" : "* Used within {@link #normalize(List)} to create a single {@link WordWithTextPositions} entry.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)" : "* Set the font and font size to draw text with.\n     *\n     * @param font The font to use.\n     * @param fontSize The font size to draw the text.\n     * @throws IOException If there is an error writing the font information.",
  "org.apache.pdfbox.util.Matrix:getScalingFactorX()" : "* Returns the x-scaling factor of this matrix. This is calculated from the scale and shear.\n     *\n     * @return The x-scaling factor.",
  "org.apache.pdfbox.rendering.GroupGraphics:getTransform()" : null,
  "org.apache.pdfbox.cos.COSDictionary:setItem(java.lang.String,org.apache.pdfbox.cos.COSBase)" : "* This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ).\n     *\n     * @param key The key to the dictionary object.\n     * @param value The value to the dictionary object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getNormalIcon()" : "* This will retrieve the normal icon.\n     * \n     * @return the normal icon.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setAntiAlias(boolean)" : "* This will set the AntiAlias value.\n     *\n     * @param antiAlias the new AntiAlias value",
  "org.apache.pdfbox.text.PDFTextStripper$WordWithTextPositions:getText()" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.StrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:isChecked()" : "* This will tell if this radio button is currently checked or not.\n     * This is equivalent to calling {@link #getValue()}.\n     *\n     * @return true If this field is checked.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:generateBoundingBox()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:fromAny(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster,org.apache.pdfbox.cos.COSArray,java.awt.Rectangle,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getVerticesPerRow()" : "* The vertices per row of this shading. This will return -1 if one has not\r\n     * been set.\r\n     *\r\n     * @return the number of vertices per row",
  "org.apache.pdfbox.rendering.PageDrawer:clip(int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setPartialFieldName(java.lang.String)" : "* This will set the partial field name.\n     *\n     * @param partial The partial field name.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:<init>()" : "* Default Constructor.\n     *",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSound:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.common.PDStream:setFilters(java.util.List)" : "* This will set the filters that are part of this stream.\n     * \n     * @param filters The filters that are part of this stream.",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:sequenceToName(java.lang.String)" : "* Returns the name for a given sequence of Unicode characters.\r\n     *\r\n     * @param unicodeSequence sequence of Unicode characters\r\n     * @return PostScript glyph name, or \".notdef\"",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImageFormName()" : "* Gets image form name\n     * @return the image form's name",
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getInstance(org.apache.pdfbox.cos.COSBase)" : "* Determines the blend mode from the BM entry in the COS ExtGState.\r\n     *\r\n     * @param cosBlendMode name or array\r\n     * @return blending mode",
  "org.apache.pdfbox.util.Matrix:getScaleInstance(float,float)" : "* Convenience method to create a scaled instance.\n     *\n     * Produces the following matrix:\n     * x 0 0\n     * 0 y 0\n     * 0 0 1\n     *\n     * @param x The xscale operator.\n     * @param y The yscale operator.\n     * @return A new matrix with just the x/y scaling",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setAnnotations(java.util.List)" : "* This will set the list of annotations. This should be a list of FDFAnnotation objects.\n     *\n     *\n     * @param annots The list of annotations.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* Set the attached file.\n     *\n     * @param file The file that is attached.",
  "org.apache.pdfbox.contentstream.operator.text.ShowText:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor from an existing destination array.\n     *\n     * @param arr The destination array.",
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:<init>(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param cat The document that this dictionary is part of.\n     * @param names The names dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getGamma()" : "* This will get the gamma value. If none is present then the default of 1\n     * will be returned.\n     *\n     * @return The gamma value.",
  "org.apache.pdfbox.cos.COSStream:getFilterList()" : "* Returns the list of filters.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:hasAnyRevision3PermissionSet()" : "* Indicates if any revision 3 access permission is set or not.\n     * \n     * @return true if any revision 3 access permission is set",
  "org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateFinalPoint:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getPage()" : "* This will get the page number or null if it does not exist.\n     *\n     * @return The page number.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptDataAES256(java.io.InputStream,java.io.OutputStream,boolean)" : "* Encrypt or decrypt data with AES256.\n     *\n     * @param data The data to encrypt.\n     * @param output The output to write the encrypted data to.\n     * @param decrypt true to decrypt the data, false to encrypt it.\n     *\n     * @throws IOException If there is an error reading the data.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:getMatrix()" : "* This will get the optional Matrix of a function based shading.\n     *\n     * @return the matrix",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setElementIdentifier(java.lang.String)" : "* Sets the element identifier (ID).\n     * \n     * @param id the element identifier",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:createAngledStyles()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:codeToName(int)" : null,
  "org.apache.pdfbox.cos.COSArray:remove(org.apache.pdfbox.cos.COSBase)" : "* This will remove an element from the array.\n     *\n     * @param o The object to remove.\n     *\n     * @return <code>true</code> if the object was removed, <code>false</code>\n     *  otherwise",
  "org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:<init>(java.lang.String,java.lang.String,int)" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:prepareStreamObject(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)" : "* Prepares the given {@link COSObject} to be written to this object stream, using the given {@link COSObjectKey} as\n     * it's ID for indirect references.\n     *\n     * @param key The {@link COSObjectKey}, that shall be used for indirect references to the {@link COSObject}.\n     * @param object The {@link COSObject}, that shall be written to this object stream.",
  "org.apache.pdfbox.pdmodel.font.encoding.ZapfDingbatsEncoding:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdfparser.BaseParser:isEOF()" : "* This will tell if the end of the data is reached.\n     * \n     * @return true if the end of the data is reached.\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:getScaleOption()" : "* This will get the scale option. See the SCALE_OPTION_XXX constants. This is guaranteed to never return null.\n     * Default: Always\n     *\n     * @return The scale option.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isLocked()" : "* Get the locked flag.\n     * \n     * @return The locked flag.",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:getFieldFlags()" : null,
  "org.apache.pdfbox.rendering.PageDrawer:setClip()" : "* Sets the clipping path using caching for performance. We track lastClip manually because\r\n     * {@link Graphics2D#getClip()} returns a new object instead of the same one passed to\r\n     * {@link Graphics2D#setClip(java.awt.Shape) setClip()}. You may need to call this if you override\r\n     * {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See\r\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-5093\">PDFBOX-5093</a> for more.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getResources()" : "* Returns the optional resources of the type3 stream.\n     *\n     * @return the resources bound to be used when parsing the type3 stream",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:isRadioButton()" : "* Determines if radio button bit is set.\n     * \n     * @return true if type of button field is a radio button.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:getFlags()" : "* A set of flags specifying various characteristics of the action\n     *\n     * @return the flags",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationUnderline:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new  DeviceN Process Dictionary from the given attributes.\n     * @param attributes a DeviceN attributes dictionary",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getFont()" : "* {@inheritDoc}\r\n         * <p>\r\n         * The method returns null if there is there was an error opening the font.\r\n         *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setModifiedDate(java.util.Calendar)" : "* This will set the date and time the annotation was modified.\n     *\n     * @param c the date and time the annotation was created.",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:hasExplicitWidth(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:hasGroup(java.lang.String)" : "* Indicates whether a particular optional content group is found in the PDF file.\n     * @param groupName the group name\n     * @return true if the group exists, false otherwise",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:copyImageBytes(byte[],int,byte[],byte[],int)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators:<init>()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:setWhitePoint(org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus)" : "* This will set the whitepoint tristimulus. As this is a required field, null should not be\n     * passed into this function.\n     *\n     * @param whitepoint the whitepoint tristimulus.\n     * @throws IllegalArgumentException if null is passed as argument.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:addUserProperty(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty)" : "* Adds a user property.\n     * \n     * @param userProperty the user property",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getImage()" : "* \n     * @return image Image",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:<init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.pdfparser.COSParser)" : "* Constructor. Triggers a brute force search for all objects of the document.\n     *\n     * @param cosDocument the corresponding COS document\n     * @param cosParser the COSParser to be used for reading the pdf\n     * \n     * @throws IOException if the source data could not be read",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setModifiedDate(java.lang.String)" : "* This will set the date and time the annotation was modified.\n     *\n     * @param m the date and time the annotation was created. Date values used in a PDF shall\n     * conform to a standard date format, which closely follows that of the international standard\n     * ASN.1 (Abstract Syntax Notation One), defined in ISO/IEC 8824. A date shall be a text string\n     * of the form (D:YYYYMMDDHHmmSSOHH'mm). Alternatively, use\n     * {@link #setModifiedDate(java.util.Calendar)}",
  "org.apache.pdfbox.contentstream.operator.graphics.CloseAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)" : "* Set the text rendering mode. This determines whether showing text shall cause glyph outlines\n     * to be stroked, filled, used as a clipping boundary, or some combination of the three.\n     *\n     * @param rm The text rendering mode.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontFile()" : "* A stream containing a Type 1 font program.\n     *\n     * @return A stream containing a Type 1 font program.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getSubject()" : "* Returns list of byte arrays that contains DER-encoded X.509v3 certificates\n     * \n     * @return list of byte arrays containing DER-encoded X.509v3 certificates",
  "org.apache.pdfbox.pdfparser.BaseParser:skipLinebreak()" : "* Skip one line break, such as CR, LF or CRLF.\n     * \n     * @return true if a line break was found and removed.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.common.PDStream:setFileFilters(java.util.List)" : "* This will set the filters that are part of this stream.\n     * \n     * @param filters The filters that are part of this stream.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the stroking color and, if necessary, the stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFPage:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.cos.COSDictionary:containsKey(org.apache.pdfbox.cos.COSName)" : "* @see java.util.Map#containsKey(Object)\n     *\n     * @param name The key to find in the map.\n     * @return true if the map contains this key.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setReasonRequired(boolean)" : "* set true if the Reason shall be required.\n     * \n     * @param flag if true, the Reason entry shall be used.",
  "org.apache.pdfbox.contentstream.operator.state.EmptyGraphicsStackException:<init>()" : null,
  "org.apache.pdfbox.pdmodel.common.PDStream:createInputStream()" : "* This will get a stream that can be read from.\n     * \n     * @return An input stream that can be read from.\n     * @throws IOException If an IO error occurs during reading.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:<init>(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Create a new form XObject content stream.\n     *\n     * @param form The form XObject stream to write to.\n     * \n     * @throws IOException If there is an error writing to the form contents.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:toString()" : "* Returns a string representation of this crossreference stream entry.\n     *\n     * @return A string representation of this crossreference stream entry.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDTerminalField#PDTerminalField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:getExtGState(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getTrueTypeFont(java.lang.String,java.io.File)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setFlatnessTolerance(java.lang.Float)" : "* This will set the flatness tolerance.\n     *\n     * @param flatness The new flatness tolerance",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:getVisibleSignature()" : "* returns visible signature configuration object\n     * @return the input stream representing the visible signature.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:canPrint()" : "* This will tell if the user can print.\n     *\n     * @return true If supplied with the user password they are allowed to print.",
  "org.apache.pdfbox.contentstream.operator.text.NextLine:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDListBox:getTopIndex()" : "* This will get the top index \"TI\" value.\n     *\n     * @return the top index, default value 0.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:setInkList(float[][])" : "* Sets the paths that make this annotation.\n     *\n     * @param inkList An array of arrays, each representing a stroked path. Each array shall be a\n     * series of alternating horizontal and vertical coordinates. If the parameter is null the entry\n     * will be removed.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(float)" : "* Set the non-stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setDP(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed\n     * after printing a document.\n     * The name DP stands for \"did print\".\n     *\n     * @param dp The action to be performed.",
  "org.apache.pdfbox.cos.COSObjectKey:<init>(long,int)" : "* Constructor.\n     *\n     * @param num The object number.\n     * @param gen The object generation number.",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:copyIntToBytes(int[],int,byte[],byte[],int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setWC(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed\n     * before closing a document.\n     * The name WC stands for \"will close\".\n     *\n     * @param wc The action to be performed.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)" : "* Draw an inline image at the x,y coordinates and a certain width and height.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     * @param width The width of the inline image to draw.\n     * @param height The height of the inline image to draw.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdfparser.PDFObjectStreamParser:<init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.cos.COSDocument)" : "* Constructor.\n     *\n     * @param stream The stream to parse.\n     * @param document The document for the current parsing.\n     * @throws IOException If there is an error initializing the stream.",
  "org.apache.pdfbox.pdfparser.PDFStreamParser:hasNextSpaceOrReturn()" : "* Checks if the next char is a space or a return.\n     * \n     * @return true if the next char is a space or a return\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontBoundingBox()" : "* This will get the fonts bounding box.\n     *\n     * @return The fonts bounding box.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:getT()" : "* The annotation or annotations to be hidden or shown\n     *\n     * @return The T entry of the specific thread action dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getFlag2Edge()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:processOperator(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : "* This is used to handle an operation.\n     * \n     * @param operator The operation to perform.\n     * @param operands The list of arguments.\n     * @throws IOException If there is an error processing the operation.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:findFontBoxFont(java.lang.String)" : "* Finds a font with the given PostScript name, or a suitable substitute, or null.\n     *\n     * @param postScriptName PostScript font name",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:getIntensity()" : "* This will retrieve the intensity of the applied effect.\n     *\n     * @return the intensity value 0 to 2",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:evalFunction(float)" : "* Convert the input value using the functions of the shading dictionary.\n     *\n     * @param inputValue the input value\n     * @return the output values\n     * @throws IOException thrown if something went wrong",
  "org.apache.pdfbox.cos.COSDocument:<init>()" : "* Constructor. Uses main memory to buffer PDF streams.",
  "org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:getRaster(int,int,int,int)" : null,
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:read(byte[],int,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:isEntryChanged(java.lang.Object,java.lang.Object)" : "* Is the value changed?\n     * \n     * @param oldEntry old entry\n     * @param newEntry new entry\n     * @return <code>true</code> if the entry is changed, <code>false</code>\n     * otherwise",
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getContents()" : null,
  "org.apache.pdfbox.cos.PDFDocEncoding:set(int,char)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:cosine(double,double)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:drawArc(int,int,int,int,int,int)" : null,
  "org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent:getName()" : null,
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj:<init>()" : "*  Default constructor.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getD()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setInterpolate(boolean)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setScript(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setCoordSystemOrigin(float[])" : "* This will set the origin of the coordinate system.\r\n     * \r\n     * @param coordSystemOrigin the origin",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setFringe(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the fringe rectangle. Giving the difference between the annotations rectangle\n     * and where the drawing occurs. (To take account of any effects applied through the BE entry\n     * for example)\n     *\n     * @param fringe the fringe",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:setSubtype(java.lang.String)" : "* This will set the subtype of the external data dictionary.\n     * \n     * @param subtype the subtype of the external data dictionary",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setLineCap(int)" : "* set the value of the line cap.\n     *\n     * @param value The current line cap.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getSubstitutes(java.lang.String)" : "* Returns the substitutes for a given font.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:getStack()" : "* Returns the stack used by this execution context.\n     * @return the stack",
  "org.apache.pdfbox.pdmodel.PDPageTree:get(int,org.apache.pdfbox.cos.COSDictionary,int)" : "* Returns the given COS page using a depth-first search.\r\n     *\r\n     * @param pageNum 1-based page number\r\n     * @param node page tree node to search\r\n     * @param encountered number of pages encountered so far\r\n     * @return COS dictionary of the Page object\r\n     * @throws IllegalStateException if the requested page number isn't found\r\n     * @throws IndexOutOfBoundsException if the requested page number is higher than the page count",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createInnerFormStream(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* This will set the color used in drawing various elements. As of PDF 1.6 these are : Background of icon when\n     * closed Title bar of popup window Border of a link annotation\n     * \n     * Colour is in DeviceRGB colourspace\n     * \n     * @param c colour in the DeviceRGB colourspace\n     *",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:clipEvenOdd()" : "* Intersects the current clipping path with the current path, using the even-odd rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:addRect(float,float,float,float)" : "* Add a rectangle to the current path.\n     *\n     * @param x The lower left x coordinate.\n     * @param y The lower left y coordinate.\n     * @param width The width of the rectangle.\n     * @param height The height of the rectangle.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:isFlyAreaOpaque()" : "* @return true if the area that shall be flown in is rectangular and opaque. Default is false. Only for\n     * {@link PDTransitionStyle#Fly}.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getSignedContent(byte[])" : "* Return the signed content of the document. This is not a PDF file, nor is it the PDF file\n     * before signing, it is the byte sequence made of the input minus the area where the signature\n     * bytes will be. See \"The ByteRange and signature value\" in the document\n     * <a href=\"https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5\">Digital\n     * Signatures in a PDF</a>.\n     *\n     * @param pdfFile The signed pdf file as byte array\n     * @return a byte array containing only the signed part of the content\n     * @throws IOException if the pdfFile can't be read",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontStretch(java.lang.String)" : "* This will set the font stretch.\n     *\n     * @param fontStretch The new stretch for the font.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllBorderThicknesses(float)" : "* Sets the same border thickness for all four sides (BorderThickness).\n     * \n     * @param borderThickness the border thickness",
  "org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Exch:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setPageNumber(int)" : "* Set the page number (zero-based) in the current document containing the file attachment\n     * annotation.\n     *\n     * @param pageNumber the zero based page number. If this is &lt; 0 then the entry is removed.",
  "org.apache.pdfbox.cos.COSDictionary:setString(org.apache.pdfbox.cos.COSName,java.lang.String)" : "* This is a convenience method that will convert the value to a COSString object. If it is null then the object\n     * will be removed.\n     *\n     * @param key The key to the object,\n     * @param value The string value for the name.",
  "org.apache.pdfbox.cos.COSFloat:coerce(float)" : "* Check and coerce the value field to be between MIN_NORMAL and MAX_VALUE.\n     * \n     * @param floatValue the value to be checked\n     * @return the coerced value",
  "org.apache.pdfbox.pdmodel.common.PDMetadata:importXMPMetadata(byte[])" : "* Import an XMP stream into the PDF document.\n     *\n     * @param xmp The XMP data.\n     *\n     * @throws IOException If there is an error generating the XML document.",
  "org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeToken(org.apache.pdfbox.cos.COSBase)" : "* Writes a single operand token.\n     *\n     * @param base The operand to write to the stream.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.rendering.GroupGraphics:setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setInReplyTo(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : "* This will set the annotation to which this one is \"In Reply To\" the actual relationship is specified by the RT\n     * entry.\n     *\n     * @param irt the annotation this one is \"In Reply To\".",
  "org.apache.pdfbox.text.PDFTextStripperByArea:addRegion(java.lang.String,java.awt.geom.Rectangle2D)" : "* Add a new region to group text by.\n     *\n     * @param regionName The name of the region.\n     * @param rect The rectangle area to retrieve the text from. The y-coordinates are java\n     * coordinates (y == 0 is top), not PDF coordinates (y == 0 is bottom).",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setDefaultResources(org.apache.pdfbox.pdmodel.PDResources)" : "* This will set the default resources for the acroform.\n     *\n     * @param dr The new default resources.",
  "org.apache.pdfbox.pdfparser.xref.XReferenceType:getNumericValue()" : "* Returns the numeric representation of this type.\n     *\n     * @return The numeric representation of this type.",
  "org.apache.pdfbox.pdfparser.xref.NormalXReference:getSecondColumnValue()" : "* Returns the value for the second column of the crossreference stream entry. (This is byte offset of the\n     * {@link COSObject} in the PDF file - for entries of this type.)\n     *\n     * @return The value for the second column of the crossreference stream entry.",
  "org.apache.pdfbox.rendering.PDFRenderer:setRenderingHints(java.awt.RenderingHints)" : "* Set the rendering hints. Use this to influence rendering quality and speed. If you don't set them yourself or\r\n     * pass null, PDFBox will decide <b><u>at runtime</u></b> depending on the destination.\r\n     *\r\n     * @param renderingHints rendering hints to be used to influence rendering quality and speed",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:removeOID(byte[])" : "* removes an OID from the list\n     *\n     * @param oid Object Identifier of the certificate policy to be removed",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getStringOrStream(org.apache.pdfbox.cos.COSBase)" : "* Get a text as text stream.\n     *\n     * Some dictionary entries allow either a text or a text stream.\n     *\n     * @param base the potential text or text stream\n     * @return the text stream",
  "org.apache.pdfbox.cos.COSString:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getStdCryptFilterDictionary()" : "* Returns the standard crypt filter.\n     * \n     * @return the standard crypt filter if available.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:calculatePageSize(org.apache.pdfbox.pdmodel.PDDocument,int)" : "* Each page of document can be different sizes. This method calculates the page size based on\n     * the page media box.\n     * \n     * @param document\n     * @param page The 1-based page number for which the page size should be calculated.\n     * @throws IllegalArgumentException if the page argument is lower than 0.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:setGamma(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the gamma value.\n     * @param gamma the new gamma value",
  "org.apache.pdfbox.filter.Predictor:<init>()" : null,
  "org.apache.pdfbox.filter.Filter:findRasterReader(java.lang.String,java.lang.String)" : "* Finds a suitable image raster reader for an image format.\n     *\n     * @param formatName The image format to search for.\n     * @param errorCause The probably cause if something goes wrong.\n     * @return The image reader for the format.\n     * @throws MissingImageReaderException if no image reader is found.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setValue(java.lang.String)" : "* Set the plain text value of this field, and try to update the visual appearance.\n     * \n     * @param value Plain text\n     * @throws IOException if the value could not be set",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj:reset()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createProcSetArray()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:getCOSObject()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:writeParagraphEnd()" : "* Write something (if defined) at the end of a paragraph.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:getCOSObject()" : "* Returns the underlying dictionary.\r\n     * \r\n     * @return the dictionary",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getHighlightMode()" : "* Set the highlight mode for when the mouse is depressed. See the HIGHLIGHT_MODE_XXX constants.\n     *\n     * @return The string representation of the highlight mode.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:setOpenCount(int)" : "* Set the open count. This number is automatically managed for you when you add items to the outline.\n     *\n     * @param openCount The new open count.",
  "org.apache.pdfbox.contentstream.operator.state.SetLineJoinStyle:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a group object from a given dictionary\n     * @param dic {@link COSDictionary} object",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createImageFormResources()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontBoundingBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Set the fonts bounding box.\n     *\n     * @param rect The new bounding box.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:canFillInForm()" : "* This will tell if the user can fill in interactive form fields (including signature fields)\n     * even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false.\n     *\n     * @return true If supplied with the user password they are allowed to fill in form fields.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:getOpenInNewWindow()" : "* This will specify whether to open the destination document in a new window, in the same\n     * window, or behave in accordance with the current user preference.\n     *\n     * @return A flag specifying how to open the destination document.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setMacResFork(java.lang.String)" : "* Set the mac ResFork.\n     *\n     * @param macResFork The mac ResFork.",
  "org.apache.pdfbox.util.Hex:<init>()" : null,
  "org.apache.pdfbox.cos.COSDictionary:getString(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a\n     * string. Null is returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new ExportFormat attribute object with a given dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:getNumberOfInputParameters()" : "* This will get the number of input parameters that\n     * have a domain specified.\n     *\n     * @return The number of input parameters that have a domain\n     * specified.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getFontMatrix()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* Sets the value of a given named resource.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:shallComb()" : "* Determine if the appearance shall provide a comb output.\n     * \n     * <p>\n     * May be set only if the MaxLen entry is present in the text field dictionary\n     * and if the Multiline, Password, and FileSelect flags are clear.\n     * If set, the field shall be automatically divided into as many equally spaced positions,\n     * or combs, as the value of MaxLen, and the text is laid out into those combs.\n     * </p>\n     * \n     * @return the comb state",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:read()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.cos.COSInteger:longValue()" : "* Polymorphic access to value as int\n     * This will get the integer value of this object.\n     *\n     * @return The int value of this object,",
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:<init>(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:shouldScaleToFitAnnotation()" : "* This will tell if the icon should scale to fit the annotation bounds. Default: false\n     *\n     * @return A flag telling if the icon should scale.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getBorderStyle()" : "* This will retrieve the border style dictionary, specifying the width and dash pattern used in\n     * drawing the line.\n     *\n     * @return the border style dictionary.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(float)" : "* Set the non-stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:getColor()" : "* Returns the stroking color.\n     * @return The stroking color.",
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:<init>()" : "* Default Constructor.\n     *",
  "org.apache.pdfbox.pdmodel.font.PDFont:getSubType()" : "* This will get the subtype of font.\n     * \n     * @return the subtype",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Line:setWidth(float)" : null,
  "org.apache.pdfbox.util.filetypedetector.ByteTrie:getMaxDepth()" : "* Gets the maximum depth stored in this trie.\n     * @return",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getRolloverIcon()" : "* This will retrieve the rollover icon.\n     * \n     * @return the rollover icon",
  "org.apache.pdfbox.text.PDFTextStripper:endPage(org.apache.pdfbox.pdmodel.PDPage)" : "* End a page. Default implementation is to do nothing. Subclasses may provide additional information.\n     *\n     * @param page The page we are about to process.\n     *\n     * @throws IOException If there is any error writing to the stream.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getDescendantFont()" : "* Returns the descendant font.\n     * \n     * @return the descendant font",
  "org.apache.pdfbox.text.PDFTextStripper:setIgnoreContentStreamSpaceGlyphs(boolean)" : "* Instruct the algorithm to ignore any spaces in the text rendering instructions in the content\n     * stream, and instead rely purely on the algorithm to determine where word breaks are.\n     *\n     * This can improve text extraction results where the content stream is sorted by position and\n     * has text overlapping spaces, but could cause some word breaks to not be added to the output\n     *\n     * @param newIgnoreContentStreamSpaceGlyphs whether PDF Box should ignore context stream spaces",
  "org.apache.pdfbox.cos.COSFloat:formatString()" : "* Builds, if needed, and returns the string representation of the current value.\n     * @return current value as string.",
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:<init>(org.apache.pdfbox.cos.COSStream)" : "* Constructor.\n     *\n     * @param str The stream parameter.",
  "org.apache.pdfbox.pdmodel.graphics.PDXObject:<init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.cos.COSName)" : "* Creates a new XObject from the given stream and subtype.\r\n     * \r\n     * @param stream The stream to read.\r\n     * @param subtype the subtype to be used for this XObject",
  "org.apache.pdfbox.pdfparser.COSParser:parseObjectDynamically(org.apache.pdfbox.cos.COSObjectKey,boolean)" : "* Parse the object for the given object key.\n     * \n     * @param objKey key of object to be parsed\n     * @param requireExistingNotCompressedObj if <code>true</code> the object to be parsed must be defined in xref\n     * (comment: null objects may be missing from xref) and it must not be a compressed object within object stream\n     * (this is used to circumvent being stuck in a loop in a malicious PDF)\n     * \n     * @return the parsed object (which is also added to document object)\n     * \n     * @throws IOException If an IO error occurs.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:applyRectDifferences(org.apache.pdfbox.pdmodel.common.PDRectangle,float[])" : "* Get a rectangle with the differences applied to each side.\n     *\n     * <p>\n     * Creates a new rectangle with differences added to each side. If there are no valid\n     * differences, then the original rectangle is returned.\n     *\n     * @param rectangle the rectangle.\n     * @param differences the differences to apply.\n     * @return the padded rectangle.",
  "org.apache.pdfbox.text.PDFTextStripper:setArticleStart(java.lang.String)" : "* Sets the string which will be used at the beginning of an article.\n     * \n     * @param articleStartValue the article start string",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Process the given annotation with the specified appearance stream.\n     *\n     * @param annotation The annotation containing the appearance stream to process.\n     * @param appearance The appearance stream to process.\n     * @throws IOException If there is an error reading or parsing the appearance content stream.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getNonStrokingOverprintControl()" : "* This will get the overprint control for non stroking operations.  If this\n     * value is null then the regular overprint control value will be returned.\n     *\n     * @return The overprint control or null if one has not been set.",
  "org.apache.pdfbox.rendering.GroupGraphics:rotate(double,double,double)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getIconFit()" : "* This will get the icon fit that is associated with this field.\n     *\n     * @return The 'IF' entry.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setSubject(java.lang.String)" : "* This will set the short description of the subject of the annotation.\n     *\n     * @param subj short description of the subject.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getPages()" : "* This will get the list of FDF Pages. This will return a list of FDFPage objects.\n     *\n     * @return A list of FDF pages.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:subset()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:getShadedTriangles(org.apache.pdfbox.pdmodel.graphics.shading.CoordinateColorPair[][])" : "* An assistant method to accomplish type 6 and type 7 shading.\n     *\n     * @param patchCC all the crossing point coordinates and color of a grid\n     * @return a ShadedTriangle list which can compose the grid patch",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getBoundingBox()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getV()" : "* The minimum required capability of the signature field seed value\n     * dictionary parser. A value of 1 specifies that the parser shall be able to\n     * recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2\n     * specifies that it shall be able to recognize all seed value dictionary entries\n     * specified.\n     *\n     * @return the minimum required capability of the signature field seed value\n     * dictionary parser",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setParent(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)" : "* Sets the parent to the given node.\n     * \n     * @param parentNode the node to be set as parent",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getOTFFont(java.lang.String,java.io.File)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getDefaultStyleString()" : "* Get the default style string.\n     * \n     * The default style string defines the default style for\n     * rich text fields.\n     * \n     * @return the DS element of the dictionary object",
  "org.apache.pdfbox.rendering.GroupGraphics:drawPolyline(int[],int[],int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getLeaderLineExtensionLength()" : "* This will retrieve the length of the leader line extensions.\n     * \n     * @return the length of the leader line extensions",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareDocumentForEncryption(org.apache.pdfbox.pdmodel.PDDocument)" : "* Prepare document for encryption.\n     *\n     * @param document The document to encrypt.\n     *\n     * @throws IOException If there is an error accessing data.",
  "org.apache.pdfbox.multipdf.Splitter:setStartPage(int)" : "* This will set the start page.\n     *\n     * @param start the 1-based start page\n     * @throws IllegalArgumentException if the start page is smaller than one.",
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:<init>(org.apache.pdfbox.pdmodel.font.PDType3Font,org.apache.pdfbox.cos.COSStream)" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:remove(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.filter.JPXFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getE()" : "* This will get an action to be performed when the cursor\n     * enters the annotation's active area.\n     *\n     * @return The E entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : "* Constructor. Reads all data from the input stream and embeds it into the document. This\n     * method closes the InputStream.\n     *\n     * @param doc The document that will hold the stream.\n     * @param input The stream parameter.\n     * @throws IOException If there is an error creating the stream in the document.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:setDecodeValues(org.apache.pdfbox.cos.COSArray)" : "* This will set the decode values.\n     *\n     * @param decodeValues The new decode values.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:containsAll(java.util.Collection)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PageMode:stringValue()" : "* Returns the string value, as used in a PDF file.\n     * \n     * @return the string value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getConstantOpacity()" : "* This will retrieve the constant opacity value used when rendering the annotation (excluing any popup).\n     *\n     * @return the constant opacity value.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getPage()" : "* Get the page that this bead is part of.\n     *\n     * @return The page that this bead is part of.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:writeXML(java.io.Writer)" : "* This will write this element as an XML document.\n     *\n     * @param output The stream to write the xml to.\n     *\n     * @throws IOException If there is an error writing the XML.",
  "org.apache.pdfbox.cos.COSOutputStream:flush()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getBlendMode()" : "* Returns the blending mode stored in the COS dictionary\n     *\n     * @return the blending mode",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:<init>()" : "* Creates a new DeviceN colour space attributes dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial:<init>(java.security.KeyStore,java.lang.String,java.lang.String)" : null,
  "org.apache.pdfbox.text.TextPosition:getVisuallyOrderedUnicode()" : "* Same as {@link #getUnicode()} except that returned text is ensured to be\n     * visually ordered (i.e. same order you would see them displayed on screen when\n     * looking from left to right). This is important for Arabic/Hebrew where several\n     * unicode characters can be composed in one glyph with logical order (the order\n     * in which it would be normally typed from right to left).\n     * \n     * @return The string on the screen in visual order.",
  "org.apache.pdfbox.cos.COSObject:<init>(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSObjectKey)" : "* Constructor.\n     *\n     * @param object The object that this encapsulates.\n     * @param objectKey The COSObjectKey of the encapsulated object",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:toArray(java.lang.Object[])" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(float)" : "* Set the non-stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param fontDictionary The font dictionary according to the PDF specification.\n     * \n     * @throws IOException if the font could not be created",
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:setFirstByteOffset(int)" : "* The byte offset (in the decoded stream) of the first compressed object.\n     *\n     * @param n The byte offset to the first object.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isComb()" : "* @return true if the field is not suppose to comb the text display.",
  "org.apache.pdfbox.util.Matrix:<init>(java.awt.geom.AffineTransform)" : "* Creates a matrix with the same elements as the given AffineTransform.\n     * @param at matrix elements will be initialize with the values from this affine transformation, as follows:\n     *\n     *           scaleX shearY 0\n     *           shearX scaleY 0\n     *           transX transY 1\n     *",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Draws the given Form XObject at the current location.\n     *\n     * @param form Form XObject\n     * @throws IOException if the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setTextMatrix(org.apache.pdfbox.util.Matrix)" : "* @param value The textMatrix to set.",
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:setEncryptMetaData(boolean)" : "* Set the EncryptMetaData dictionary info.\n     *\n     * @param encryptMetaData true if EncryptMetaData shall be set.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getRise()" : "* Get the value of the rise.\n     *\n     * @return The rise.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getB()" : "* Returns the b value of the tristimulus.\n     * @return the B value",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setFilterRequired(boolean)" : "* set true if the filter shall be required.\n     * \n     * @param flag if true, the specified Filter shall be used when signing.",
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:setLength(int)" : "* This will set the number of bits to use for the crypt filter algorithm.\n     *\n     * @param length The new key length.",
  "org.apache.pdfbox.cos.COSStream:<init>(org.apache.pdfbox.io.RandomAccessStreamCache)" : "* Creates a new stream with an empty dictionary. Data is stored in the given scratch file.\n     *\n     * @param streamCache Stream cache for writing stream data.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBorderColors(org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours)" : "* Sets the border colours for four sides separately (BorderColor).\n     * \n     * @param borderColors the border colours",
  "org.apache.pdfbox.rendering.PageDrawer:adjustClip(java.awt.geom.GeneralPath)" : "* PDFBOX-5715 / PR#73: This was added to fix a problem with missing fine lines when printing\r\n     * on MacOS. Lines vanish because CPrinterJob sets graphics scale to 1 for Printable so after\r\n     * scaling lines often have a width smaller than 1 after scaling and clipping. This change\r\n     * enlarges the clip bounds to cover at least 1 point plus 0.5 on one and another side in the\r\n     * device space to allow to draw the linePath inside the clip. The linePath can consists from\r\n     * different lines but when its bounds width or height is less than 1.0 it seems safe to use a\r\n     * rectangle as a clip instead of the real path. A more detailed explanation can be read\r\n     * <a href=\"https://github.com/apache/pdfbox/pull/173\">here</a>.\r\n     *\r\n     * @param linePath\r\n     * @return",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:<init>(org.apache.pdfbox.cos.COSBase)" : "* Constructor.\n     *\n     * @param function The function.",
  "org.apache.pdfbox.pdmodel.PDDocument:registerTrueTypeFontForClosing(org.apache.fontbox.ttf.TrueTypeFont)" : "* For internal PDFBox use when creating PDF documents: register a TrueTypeFont to make sure it is closed when the\n     * PDDocument is closed to avoid memory leaks. Users don't have to call this method, it is done by the appropriate\n     * PDFont classes.\n     *\n     * @param ttf the TrueTypeFont to be registered",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionTypeIdentity:eval(float[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setFilename(java.lang.String)" : "* Sets the name of the file as found in the EmbeddedFiles name tree. This is only to be used if\n     * the target is a child of the current document.\n     *\n     * @param filename a filename or null if the entry is to be deleted.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:getFile()" : "* Return the attached file.\n     *\n     * @return The attached file.\n     *\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceCMYKColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:nonCharacterCodePoint(int)" : "* Return true if the given {@code codepoint} is a non-character\n     * code point as defined by\n     * <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.4\">RFC 3454,\n     * Appendix C.4</a>.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setTextRise(float)" : "* Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or\n     * subscripts.\n     *\n     * @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its\n     * default location. 0 restores the default location.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.filter.DCTFilter:getAdobeTransform(javax.imageio.metadata.IIOMetadata)" : null,
  "org.apache.pdfbox.cos.COSInteger:get(long)" : "* Returns a COSInteger instance with the given value.\n     *\n     * @param val integer value\n     * @return COSInteger instance",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setVolatile(boolean)" : "* Tell if the underlying file is volatile and should not be cached by the\n     * reader application.  Default: false\n     *\n     * @param fileIsVolatile The new value for the volatility of the file.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:getOwner()" : "* Returns the owner of the attributes.\n     * \n     * @return the owner of the attributes",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:curveTo2(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using the current point and (x2, y2) as the Bézier control points.\n     *\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IllegalStateException If the method was called within a text block.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:setParagraphStart()" : "* sets the isParagraphStart() flag to true.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getPath(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:getStandard14Width(int)" : null,
  "org.apache.pdfbox.text.LegacyPDFStreamEngine:computeFontHeight(org.apache.pdfbox.pdmodel.font.PDFont)" : "* Compute the font height. Override this if you want to use own calculations.\r\n     * \r\n     * @param font the font.\r\n     * @return the font height.\r\n     * \r\n     * @throws IOException if there is an error while getting the font bounding box.",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setReasons(java.util.List)" : "* (Optional) An array of text strings that specifying possible reasons for signing\n     * a document. If specified, the reasons supplied in this entry replace those used\n     * by conforming products.\n     *\n     * @param reasons is a list of possible text string that specifying possible reasons",
  "org.apache.pdfbox.cos.COSIncrement:exclude(org.apache.pdfbox.cos.COSBase[])" : "* The given {@link COSBase}s are not fit for inclusion in an increment and shall be added to {@link #excluded}.<br>\n     * {@code null} values shall be ignored.\n     *\n     * @param base The {@link COSBase}s to add to {@link #excluded}.\n     * @return The {@link COSIncrement} itself, to allow method chaining.\n     * @see #excluded",
  "org.apache.pdfbox.pdfparser.PDFXRefStream:setSize(long)" : "* Set the size of the XRef stream.\n     * \n     * @param streamSize size to bet set as stream size",
  "org.apache.pdfbox.rendering.PageDrawerParameters:isSubsamplingAllowed()" : "* Returns whether to allow subsampling of images.\n     * \n     * @return true if subsampling of images os allowed",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:initVertices(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setBlendMode(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode)" : "* Sets the blend mode in the current graphics state\n     *\n     * @param blendMode blend mode\n     * @throws IllegalArgumentException if blendMode is null.",
  "org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:isGray(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdfwriter.ContentStreamWriter:<init>(java.io.OutputStream)" : "* This will create a new content stream writer.\n     *\n     * @param out The stream to write the data to.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getBoundingBox()" : null,
  "org.apache.pdfbox.cos.COSDocument:<init>(org.apache.pdfbox.cos.ICOSParser)" : "* Constructor. Uses main memory to buffer PDF streams.\n     * \n     * @param parser Parser to be used to parse the document on demand",
  "org.apache.pdfbox.cos.COSFloat:longValue()" : "* This will get the long value of this object.\n     *\n     * @return The long value of this object,",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setAddRevInfoRequired(boolean)" : "* set true if the AddRevInfo shall be required.\n     * \n     * @param flag if true, the AddRevInfo shall be used.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:setFieldFlags(int)" : "* This will set the flags for this field.\n     * \n     * @param flags The new flags.",
  "org.apache.pdfbox.pdfparser.PDFXRefStream:getStream()" : "* Returns the stream of the XRef.\n     * @return the XRef stream\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:initFromRandomAccessRead(org.apache.pdfbox.io.RandomAccessRead)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:checkArray(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getBitsPerCoordinate()" : "* The bits per coordinate of this shading. This will return -1 if one has\n     * not been set.\n     *\n     * @return the number of bits per coordinate",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a circle annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setCharacterSpacing(float)" : "* Set the value of the characterSpacing.\n     *\n     * @param value The characterSpacing.",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:containsValue(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:readImageStream(java.io.InputStream)" : "* Read the image stream of the signature and set height and width.\n     *\n     * @param stream stream of your visible signature image\n     * @throws IOException If we can't read, flush, or close stream of image",
  "org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:getExportValues()" : "* This will get the (optional) export values.\n     * \n     * <p>The export values are defined in the field dictionaries /Opt key.</p>\n     * \n     * <p>The option values are used to define the export values\n     * for the field to \n     * <ul>\n     *  <li>hold values in non-Latin writing systems as name objects, which represent the field value, are limited\n     *      to PDFDocEncoding\n     *  </li>\n     *  <li>allow radio buttons having the same export value to be handled independently\n     *  </li>\n     * </ul>\n     * \n     * @return List containing all possible export values. If there is no /Opt entry an empty list will be returned.\n     * \n     * @see #getOnValues()",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getFile()" : "* The source file or target file: the PDF document file that this FDF file was exported from or is intended to be\n     * imported into.\n     *\n     * @return The F entry of the FDF dictionary.\n     *\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:<init>()" : "* Creates a new DeviceN color space.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getAfterColour()" : "* Gets the colour for the after edge.\n     * \n     * @return the colour for the after edge",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:removeSubject(byte[])" : "* removes a subject from the list\n     *\n     * @param subject byte array containing DER-encoded X.509v3 certificate",
  "org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Pop:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:setIndentThreshold(float)" : "* sets the multiple of whitespace character widths for the current text which the current line start can be\n     * indented from the previous line start beyond which the current line start is considered to be a paragraph start.\n     * The default value is 2.0.\n     *\n     * @param indentThresholdValue the number of whitespace character widths to use when detecting paragraph indents.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getLanguage()" : "* Returns the language for the document, or null.\n     * \n     * @return the language of the document if present, otherwise null",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnGap(int)" : "* Sets the desired space between all columns in the inline-progression\n     * direction (ColumnGap).\n     * \n     * @param columnGap the column gap",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:getPageIndicesByLabels()" : "* Returns a mapping with computed page labels as keys and corresponding\n     * 0-based page indices as values. The returned map will contain at most as\n     * much entries as the document has pages.\n     * \n     * <p>\n     * <strong>NOTE:</strong> If the document contains duplicate page labels,\n     * the returned map will contain <em>less</em> entries than the document has\n     * pages. The page index returned in this case is the <em>highest</em> index\n     * among all pages sharing the same label.\n     * </p>\n     * \n     * @return a mapping from labels to 0-based page indices.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getDefaultAppearanceString()" : "* Get the default appearance.\n     *\n     * This is an inheritable attribute.\n     *\n     * The default appearance contains a set of default graphics and text operators\n     * to define the field’s text size and color.\n     *\n     * @return the DA element of the dictionary object",
  "org.apache.pdfbox.pdfparser.PDFXRefStream:getIndexEntry()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:setVertices(float[])" : "* This will set the numbers that shall represent the alternating horizontal and vertical\n     * coordinates.\n     *\n     * @param points an array with the numbers that shall represent the alternating horizontal and\n     * vertical coordinates.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getCaptionVerticalOffset()" : "* This will retrieve the vertical offset of the caption.\n     * \n     * @return the vertical offset of the caption",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getBeforeColour()" : "* Gets the colour for the before edge.\n     * \n     * @return the colour for the before edge",
  "org.apache.pdfbox.pdfwriter.compress.COSObjectPool:getHighestXRefObjectNumber()" : "* Returns the highest known object number (see: {@link COSObjectKey} for further information), that is currently\n     * registered in this pool.\n     *\n     * @return The highest known object number (see: {@link COSObjectKey} for further information), that is currently\n     * registered in this pool.",
  "org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSourceRegion(java.awt.Rectangle)" : null,
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:<init>(java.io.OutputStream)" : "* Constructor.\n     *\n     * @param out The underlying stream to write to.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:getSubtype()" : "* returns the subtype of the external data dictionary.\n     * \n     * @return the subtype of the external data dictionary",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:toRGB(float[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setSignDate(java.util.Calendar)" : "* Set the sign date.\n     *\n     * @param cal the date to be used as sign date",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isBottomAttached()" : "* Is the artifact attached to the bottom edge?\n     * \n     * @return <code>true</code> if the artifact is attached to the bottom edge,\n     * <code>false</code> otherwise",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:encode2D()" : null,
  "org.apache.pdfbox.cos.COSOutputStream:write(byte[])" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getSummary()" : "* Gets the summary of the table’s purpose and structure.\n     * \n     * @return the summary",
  "org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor.\n     *\n     * @param o The option element.",
  "org.apache.pdfbox.pdmodel.fdf.FDFPage:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getEndPointEndingStyle()" : "* This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section.\n     *\n     * @return The ending style for the end point.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingPaint:getMatrix()" : "* @return the active Matrix of this paint",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getDefaultResources()" : "* This will get the default resources for the AcroForm.\n     *\n     * @return The default resources or null if there is none.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:closeAndFillAndStroke()" : "* Close, fill, and then stroke the path, using the nonzero winding number rule to determine the\n     * region to fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:calcSampleIndex(int[])" : "* calculate array index (structure described in p.171 PDF spec 1.7) in multiple dimensions.\n         *\n         * @param vector with coordinates\n         * @return index in flat array",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setBorderEffect(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary)" : "* This will set the border effect dictionary, specifying effects to be applied when drawing the\n     * line. This is supported by PDF 1.5 and higher.\n     *\n     * @param be The border effect dictionary to set.\n     *",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:getNextChangingElement(int,boolean)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:setBitsPerCoordinate(int)" : "* Set the number of bits per coordinate.\n     *\n     * @param bitsPerCoordinate the number of bits per coordinate",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:insertBefore(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference,java.lang.Object)" : "* Inserts a marked-content reference kid before a reference kid.\n     * \n     * @param markedContentReference the marked-content reference\n     * @param refKid the reference kid",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:isStencil()" : null,
  "org.apache.pdfbox.cos.COSArray:toCOSStringStringList()" : "* This will return a list of names if the COSArray consists of COSStrings only.\n     * \n     * @return the list of names of the COSArray of COSStrings",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:makeRomanLabel(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:toRGB(float[])" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getFontDescriptor()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getRotation()" : "* This will get the clockwise rotation in degrees.\n     * \n     * @return The number of degrees of clockwise rotation.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getGIDToCode()" : "* Inverts the font's code -&gt; GID mapping. Any duplicate (GID -&gt; code) mappings will be lost.\n     * \n     * @return the GID for the given code\n     * \n     * @throws IOException if the data could not be read",
  "org.apache.pdfbox.contentstream.operator.Operator:getImageData()" : "* This is the special case for the ID operator where there are just random\n     * bytes inlined the stream.\n     *\n     * @return Value of property imageData.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the stroking color and, if necessary, the stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:setARange(org.apache.pdfbox.pdmodel.common.PDRange)" : "* This will set the a range for the \"a\" component.\n     * @param range the new range for the \"a\" component, \n     * or null if defaults (-100..100) are to be set.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setLocation(java.lang.String)" : "* Sets the CPU host name or physical location of the signing.\n     *\n     * @param location the location to be used",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setOCProperties(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties)" : "* Sets the optional content properties dictionary. The document version is incremented to 1.5\n     * if lower.\n     *\n     * @param ocProperties the optional properties dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:buildTransparencyMaskFromIndexedData(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:setV(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed\n     * when the field's value is changed. This allows the\n     * new value to be checked for validity.\n     * The name V stands for \"validate\".\n     *\n     * @param v The action to be performed.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:setBitsPerCoordinate(int)" : "* Set the number of bits per coordinate.\n     *\n     * @param bitsPerCoordinate the number of bits per coordinate",
  "org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processChildStream(org.apache.pdfbox.contentstream.PDContentStream,org.apache.pdfbox.pdmodel.PDPage)" : "* Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}.\n     *\n     * @param contentStream the child content stream\n     * @param page the page to be used for processing\n     * @throws IOException if there is an exception while processing the stream",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:getPermissionBytesForPublicKey()" : null,
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getMidline()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:clip(java.awt.Shape)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getCOSObject()" : "{@inheritDoc}",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormDefaultsProcessor:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:setDests(org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode)" : "* Set the named destinations that are associated with this document.\n     *\n     * @param dests The destination names.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setFields(java.util.List)" : "* This will set the list of fields. This should be a list of FDFField objects.\n     *\n     * @param fields The list of fields.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:signatureImage(java.lang.String)" : "* Set the image for the signature.\n     *\n     * @param path Path of the image file.\n     * @return Visible Signature Configuration Object\n     * @throws IOException if the image for the signature could not be set",
  "org.apache.pdfbox.pdfparser.PDFStreamParser:close()" : "* Close the underlying resource.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setSerif(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.pdmodel.PDPageTree:remove(int)" : "* Removes the page with the given index from the page tree.\r\n     * @param index zero-based page index",
  "org.apache.pdfbox.rendering.PDFRenderer:renderImage(int)" : "* Returns the given page as an RGB image at 72 DPI\r\n     * @param pageIndex the zero-based index of the page to be converted.\r\n     * @return the rendered page image\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:cloudyPolygonImpl(java.awt.geom.Point2D$Double[],boolean)" : "* Cloudy polygon implementation.\n     *\n     * @param vertices polygon vertices; first and last point must be equal\n     * @param isEllipse specifies if the polygon represents an ellipse",
  "org.apache.pdfbox.cos.COSDocument:setEncryptionDictionary(org.apache.pdfbox.cos.COSDictionary)" : "* This will set the encryption dictionary, this should only be called when\n     * encrypting the document.\n     *\n     * @param encDictionary The encryption dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setEndIndent(float)" : "* Sets the distance from the end edge of the BLSE to that of the reference\n     * area in the inline-progression direction (EndIndent).\n     * \n     * @param endIndent the end indent",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getSetFieldFlags()" : "* This will get the 'SetFf' entry of the FDF field dictionary.\n     * If it is not present then this method will return null.\n     *\n     * @return The field flags.",
  "org.apache.pdfbox.pdmodel.PDPage:getTrimBox()" : "* A rectangle, expressed in default user space units, defining the intended dimensions of the\n     * finished page after trimming. The default is the CropBox.\n     * \n     * @return The TrimBox attribute.",
  "org.apache.pdfbox.text.PDFTextStripper:setEndPage(int)" : "* This will set the last page to be extracted by this class.\n     *\n     * @param endPageValue New value of 1-based endPage property.\n     *\n     * @throws IllegalArgumentException if the parameter is below 1.",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:nextChar()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setRepeat(boolean)" : "* A flag specifying whether to repeat the sound indefinitely.\n     *\n     * @param repeat Whether to repeat the sound indefinitely.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setTilingType(int)" : "* This will set the tiling type.\n     * @param tilingType The new tiling type.",
  "org.apache.pdfbox.cos.COSUpdateState:<init>(org.apache.pdfbox.cos.COSUpdateInfo)" : "* Creates a new {@link COSUpdateState} for the given {@link COSUpdateInfo}.\n     *\n     * @param updateInfo The {@link COSUpdateInfo}, that shall be managed by this {@link COSUpdateState}.",
  "org.apache.pdfbox.multipdf.LayerUtility:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a new instance.\n     * @param targetDoc the PDF document to modify",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setSubjectDN(java.util.List)" : "* (Optional; PDF 1.7) A list of maps, where each map contains key value pairs, that specify the\n     * Subject Distinguished Name (DN) that must be present within the certificate for it to be\n     * acceptable for signing. The certificate must at a minimum contain all the attributes\n     * specified in one of the maps entered.\n     *\n     * @param subjectDN list of maps that contains subject distinguished names",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getName()" : "* The name of the software module that was used to create the signature.\n     * @return the name of the software module",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getTrueTypeFont()" : "* Returns the embedded or substituted TrueType font.\n     * \n     * @return the embedded or substituted TrueType font",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getPatternType()" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:toDictionary(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:writePage()" : "* This will print the text of the processed page to \"output\". It will estimate, based on the coordinates of the\n     * text, where newlines and word spacings should be placed. The text will be sorted only if that feature was\n     * enabled.\n     *\n     * @throws IOException If there is an error writing the text.",
  "org.apache.pdfbox.cos.COSArray:toCOSNumberFloatList()" : "* This will return a list of float values if the COSArray consists of COSNumbers only.\n     * \n     * @return the list of float values of the COSArray of COSNumbers",
  "org.apache.pdfbox.pdmodel.PDPage:<init>()" : "* Creates a new PDPage instance for embedding, with a size of U.S. Letter (8.5 x 11 inches).",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:isEmpty()" : "* {@inheritDoc}",
  "org.apache.pdfbox.cos.PDFDocEncoding:containsChar(char)" : "* Returns true if the given character is available in PDFDocEncoding.\n     *\n     * @param character UTF-16 character",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getSubtype()" : "* This will retrieve the subtype of the annotation.\n     *\n     * @return The subtype of this annotation, see the SUB_TYPE_XXX constants.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata)" : "* Sets the metadata associated with this XObject, or null if there is none.\r\n     * @param meta the metadata associated with this object",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanModifyAnnotations(boolean)" : "* Set if the user can add or modify text annotations and fill in interactive forms fields and,\n     * if {@link #canModify() canModify()} returns true, create or modify interactive form fields\n     * (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns\n     * true, it is still possible to fill in interactive forms (including signature fields) even the\n     * parameter here is false.\n     * <p>\n     * This method will have no effect if the object is in read only mode.\n     *\n     * @param allowAnnotationModification A boolean determining the new setting.",
  "org.apache.pdfbox.contentstream.operator.text.SetFontAndSize:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getGuidelineStyle()" : "* Get the style for the guideline.  The default is \"S\" for solid.\n     *\n     * @return The guideline style.\n     * @see PDBoxStyle#GUIDELINE_STYLE_DASHED\n     * @see PDBoxStyle#GUIDELINE_STYLE_SOLID",
  "org.apache.pdfbox.cos.COSArray:getIndirectObjectKeys(java.util.Collection)" : "* Collects all indirect objects numbers within this COSArray and all included dictionaries. It is used to avoid\n     * mixed up object numbers when importing an existing page to another pdf.\n     * \n     * Expert use only. You might run into an endless recursion if choosing a wrong starting point.\n     * \n     * @param indirectObjects a collection of already found indirect objects.\n     *",
  "org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:<init>(org.apache.pdfbox.cos.COSArray,int)" : "* Creates a new line dash pattern from a dash array and phase.\n     * @param array the dash array\n     * @param phase the phase",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:calcFinalKey(long,long)" : "* Calculate the key to be used for RC4 and AES-128.\n     *\n     * @param objectNumber The data object number.\n     * @param genNumber The data generation number.\n     * @return the calculated key.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:adjustRectAndBBox(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,float,float)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:setFont(java.awt.Font)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)" : "* Draw an image at the x,y coordinates, with the default size of the image.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setTimeStamp(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp)" : "* <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which\n     * is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff\n     * to indicate if a timestamp is required or optional.</p>\n     *\n     * @param timestamp dictionary",
  "org.apache.pdfbox.cos.COSDocument:hasHybridXRef()" : "* Determines if the pdf has hybrid cross references, both plain tables and streams.\n     * \n     * @return true if the pdf has hybrid cross references",
  "org.apache.pdfbox.pdfparser.xref.NormalXReference:getReferencedKey()" : "* Returns the {@link COSObjectKey} of the object, that is described by this crossreference stream entry.\n     *\n     * @return The {@link COSObjectKey} of the object, that is described by this crossreference stream entry.",
  "org.apache.pdfbox.pdfparser.COSParser:isLenient()" : "* Return true if parser is lenient. Meaning auto healing capacity of the parser are used.\n     *\n     * @return true if parser is lenient",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:removePattern(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.multipdf.Splitter:getSourceDocument()" : "* The source PDF document.\n     * \n     * @return the pdf to be split",
  "org.apache.pdfbox.rendering.PageDrawer:setAnnotationFilter(org.apache.pdfbox.pdmodel.interactive.annotation.AnnotationFilter)" : "* Set the AnnotationFilter.\r\n     * \r\n     * <p>Allows to only render annotation accepted by the filter.\r\n     * \r\n     * @param annotationFilter the AnnotationFilter",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setHeaders(java.lang.String[])" : "* Sets the headers (Headers). An array of byte strings, where each string\n     * shall be the element identifier (see the\n     * {@link org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement#getElementIdentifier()}) for a TH structure\n     * element that shall be used as a header associated with this cell.\n     * \n     * @param headers the headers",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getChildren()" : "* Returns this field's children. These may be either terminal or non-terminal fields.\n     *\n     * @return the list of child fields. Be aware that this list is <i>not</i> backed by the\n     * children of the field, so adding or deleting has no effect on the PDF document until you call\n     * {@link #setChildren(java.util.List) setChildren()} with the modified list.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:calculateRanges(int[])" : null,
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForObjStreamOffsets()" : "* Search for all offsets of object streams within the given pdf\n     * \n     * @return a map of all offsets for object streams\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.rendering.PDFRenderer:isBitonal(java.awt.Graphics2D)" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:getIDTreeAsMap(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setFieldFlags(int)" : "* This will set the field flags that are associated with this field.\n     * The 'Ff' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the field flags.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:applyChange()" : "* Applies a value change to the field. Generates appearances if required and raises events.\n     * \n     * @throws IOException if the appearance couldn't be generated",
  "org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException:<init>(java.lang.String)" : "* Creates a new InvalidPasswordException.\n     * @param message A msg to go with this exception.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setModificationDate(java.util.Calendar)" : "* This will set the modification date of the document.\n     *\n     * @param date The new modification date for the document.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getLineEndingStyle()" : "* This will retrieve the line ending style.\n     *\n     * @return The ending style for the start point.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getObject(org.apache.pdfbox.cos.COSObjectKey)" : "* Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool.\n     *\n     * @param key The {@link COSObjectKey} a {@link COSBase} is registered for in this compression pool.\n     * @return The {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool, if\n     * such an object is contained.",
  "org.apache.pdfbox.rendering.PDFRenderer:isGroupEnabled(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup)" : "* Indicates whether an optional content group is enabled.\r\n     * @param group the group\r\n     * @return true if the group is enabled",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setPreviousBead(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead)" : "* Set the previous bead in the thread.\n     *\n     * @param previous The previous bead.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeAttribute(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject)" : "* Removes an attribute object.\n     * \n     * @param attributeObject the attribute object",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* @param dict The dictionary storage.",
  "org.apache.pdfbox.text.PDFTextStripper:writeCharacters(org.apache.pdfbox.text.TextPosition)" : "* Write the string in TextPosition to the output stream.\n     *\n     * @param text The text to write to the stream.\n     * @throws IOException If there is an error when writing the text.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getAppearanceEntryAsContentStream(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry,boolean)" : null,
  "org.apache.pdfbox.filter.FlateFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:setD(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.LineTo:getName()" : null,
  "org.apache.pdfbox.rendering.PageDrawer:beginText()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getCallout()" : "* This will get the coordinates of the callout line.\n     *\n     * @return An array of four or six numbers specifying a callout line attached to the free text\n     * annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending\n     * coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the\n     * starting and ending coordinates of the line.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setLineJoinStyle(int)" : "* Set the line join style.\n     *\n     * @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line join style.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)" : "* set a marked content point.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:getWidths()" : "* The widths of the characters. This will be null for the standard 14 fonts.\n     *\n     * @return The widths of the characters.",
  "org.apache.pdfbox.pdfparser.PDFStreamParser:isSpaceOrReturn(int)" : null,
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:addTrueTypeFont(java.io.File)" : "* Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.",
  "org.apache.pdfbox.cos.COSDocument:setHighestXRefObjectNumber(long)" : "* Internal PDFBox use only. Sets the object number of the highest XRef stream. This is needed\n     * to avoid reusing such a number in incremental saving.\n     *\n     * @param highestXRefObjectNumber The object number of the highest XRef stream.",
  "org.apache.pdfbox.rendering.PageDrawer:<init>(org.apache.pdfbox.rendering.PageDrawerParameters)" : "* Constructor.\r\n     *\r\n     * @param parameters Parameters for page drawing.\r\n     * @throws IOException If there is an error loading properties from the file.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setBitsPerComponent(int)" : null,
  "org.apache.pdfbox.cos.COSDictionary:getEmbeddedInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1\n     *\n     * @param embeddedDictionary The name of the embedded dictionary.\n     * @param key The key in the embedded dictionary.\n     *\n     * @return The value of the embedded integer.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:saveGraphicsStack()" : "* Saves the entire graphics stack.\n     * \n     * @return the saved graphics state stack.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceRGBColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.common.PDRectangle:getWidth()" : "* This will get the width of this rectangle as calculated by\n     * upperRightX - lowerLeftX.\n     *\n     * @return The width of this rectangle.",
  "org.apache.pdfbox.multipdf.Splitter$KCloner:removePossibleOrphanAnnotation(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:legacyMergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction,org.apache.pdfbox.pdfwriter.compress.CompressParameters)" : "* Merge the list of source documents, saving the result in the destination file.\n     *\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code>\n     * unrestricted main memory is used\n     * \n     * @throws IOException If there is an error saving the document.",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormDefaultsProcessor:process()" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getObjectFromEFDictionary(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.text.PDFTextStripperByArea:writePage()" : "* This will print the processed page text to the output stream.\n     *\n     * @throws IOException If there is an error writing the text.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$Chunk:getData()" : "* Get the data of this chunk as a byte array\n         *\n         * @return a byte-array with only the data of the chunk",
  "org.apache.pdfbox.rendering.GroupGraphics:getRenderingHint(java.awt.RenderingHints$Key)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)" : "* Set the text rendering mode. This determines whether showing text shall cause glyph outlines\n     * to be stroked, filled, used as a clipping boundary, or some combination of the three.\n     *\n     * @param rm The text rendering mode.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getCIDSystemInfo()" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getValue()" : "* Returns the COSBase value of the \"V\" entry.\n     *\n     * <p>\n     * <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value,\n     * without inheritance.\n     * \n     * @return the COSBase value of the \"V\" entry",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:setStateModel(java.lang.String)" : "* This will set the annotation state model. Allowed values are \"Marked\" and \"Review\"\n     * \n     * @param stateModel the annotation state model",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing object reference.\r\n     *\r\n     * @param theDictionary The existing dictionary.",
  "org.apache.pdfbox.rendering.TilingPaint:<init>(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,java.awt.geom.AffineTransform)" : "* Creates a new colored tiling Paint, i.e. one that has its own colors.\n     *\n     * @param drawer renderer to render the page\n     * @param pattern tiling pattern dictionary\n     * @param xform device scale transform\n     *\n     * @throws java.io.IOException if something goes wrong while drawing the pattern",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates an Image XObject in the given document. This constructor is for internal PDFBox use\r\n     * and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument)\r\n     * }.\r\n     *\r\n     * @param document the current document",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:getRolloverAppearance()" : "* This will return a list of appearances. In the case where there is only one appearance the map will contain one\n     * entry whose key is the string \"default\". If there is no rollover appearance then the normal appearance will be\n     * returned. Which means that this method will never return null.\n     *\n     * @return A list of key(java.lang.String) value(PDAppearanceStream) pairs",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getWidgetFieldFlags()" : "* This will get the 'F' entry of the FDF field dictionary.\n     * If it is not present then this method will return null.\n     *\n     * @return The widget field flags.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getLineWidth()" : "* This will get the line width.  This will return null if there is no line width\n     *\n     * @return null or the LW value of the dictionary.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:transform(org.apache.pdfbox.util.Matrix)" : "* The cm operator. Concatenates the given matrix with the current transformation matrix (CTM),\n     * which maps user space coordinates used within a PDF content stream into output device\n     * coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2\n     * Coordinate Spaces.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:setLineDashPattern(org.apache.pdfbox.cos.COSArray)" : "* Set the line dash pattern associated with this box style.\n     *\n     * @param dashArray The patter for this box style.",
  "org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setPI(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the page containing the annotation\n     * is no longer visible in the viewer application's user interface.\n     *\n     * @param pi The action to be performed.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:setMCID(int)" : "* Sets the marked content identifier.\r\n     * \r\n     * @param mcid the marked content identifier",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getNormalAppearance()" : "* Get the annotations normal appearance.\n     * \n     * <p>\n     * This will get the annotations normal appearance. If this is not existent\n     * an empty appearance entry will be created.\n     * \n     * @return the appearance entry representing the normal appearance.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:toString()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:toCOSArray()" : "* Returns the color component values as a COS array\r\n     * @return the color component values as a COS array",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new List attribute object with a given dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:save(java.lang.String)" : "* This will save this document to the filesystem.\n     *\n     * @param fileName The file to save as.\n     *\n     * @throws IOException If there is an error saving the document.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:addRect(float,float,float,float)" : "* Add a rectangle to the current path.\n     *\n     * @param x The lower left x coordinate.\n     * @param y The lower left y coordinate.\n     * @param width The width of the rectangle.\n     * @param height The height of the rectangle.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:encodeGlyphId(int)" : "* Returns the encoded value for the given glyph ID.\n     * \n     * @param glyphId the ID of the glyph to be encoded\n     * @return the encoded glyph ID",
  "org.apache.pdfbox.pdfparser.XrefParser:findObjectKey(org.apache.pdfbox.cos.COSObjectKey,long,java.util.Map)" : "* Check if the given object can be found at the given offset. Returns the provided object key if everything is ok.\n     * If the generation number differs it will be fixed and a new object key is returned.\n     * \n     * @param objectKey the key of object we are looking for\n     * @param offset the offset where to look\n     * @param xrefOffset a map with with all known xref entries\n     * @return returns the found/fixed object key\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:readLookupData()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getHeight(int)" : null,
  "org.apache.pdfbox.cos.COSArray:setName(int,java.lang.String)" : "* Set the value in the array as a name.\n     * @param index The index into the array.\n     * @param name The name to set in the array.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:<init>(org.apache.pdfbox.cos.COSArray)" : "* Creates a new indexed color space from the given PDF array.\n     * \n     * @param indexedArray the array containing the indexed parameters\n     * @throws IOException if the colorspace could not be created",
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:<init>(java.awt.geom.Point2D[],float[][])" : "* Constructor of a patch for type 7 shading.\n     *\n     * @param tcp 16 control points\n     * @param color 4 corner colors",
  "org.apache.pdfbox.text.PDFTextStripper:getSuppressDuplicateOverlappingText()" : "* @return Returns the suppressDuplicateOverlappingText.",
  "org.apache.pdfbox.cos.COSDictionary:setEmbeddedString(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,java.lang.String)" : "* This is a convenience method that will convert the value to a COSString object. If it is null then the object\n     * will be removed.\n     *\n     * @param embedded The embedded dictionary to set the item in.\n     * @param key The key to the object,\n     * @param value The string value for the name.",
  "org.apache.pdfbox.pdmodel.graphics.PDXObject:createXObject(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources)" : "* Creates a new XObject instance of the appropriate type for the COS stream.\r\n     *\r\n     * @param base The stream which is wrapped by this XObject.\r\n     * @param resources the resources of this XObject\r\n     * @return A new XObject instance.\r\n     * @throws java.io.IOException if there is an error creating the XObject.",
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:createStream(org.apache.pdfbox.pdmodel.PDDocument)" : "* This will create a new PDObjectStream object.\n     *\n     * @param document The document that the stream will be part of.\n     * @return A new stream object.",
  "org.apache.pdfbox.pdfwriter.COSWriter:<init>(java.io.OutputStream,org.apache.pdfbox.io.RandomAccessRead)" : "* COSWriter constructor for incremental updates. There must be a path of objects that have\n     * {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken\n     * care by PDFBox itself.\n     *\n     * @param outputStream output stream where the new PDF data will be written.\n     * @param inputData random access read containing source PDF data\n     *\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.fdf.FDFPage:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param p The FDF page.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setLeaderOffset(float)" : "* This will set the length of the leader line offset.\n     * \n     * @param leaderOffset length of the leader line offset",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setConversionFactor(float)" : "* This will set the conversion factor.\r\n     * \r\n     * @param conversionFactor the conversion factor",
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:surrogateCodePoint(int)" : "* Return true if the given {@code codepoint} is a surrogate\n     * code point as defined by\n     * <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.5\">RFC 3454,\n     * Appendix C.5</a>.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getInheritableAttribute(org.apache.pdfbox.cos.COSName)" : "* Returns the given attribute, inheriting from parent nodes if necessary.\n     *\n     * @param key the key to look up\n     * @return COS value for the given key",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination)" : "* Set the page destination for this node.\n     *\n     * @param dest The new page destination for this node.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getMatrix()" : "* Returns the linear interpretation matrix, which is an array of nine numbers.\n     * If the underlying dictionary contains null then the identity matrix will be returned.\n     * @return the linear interpretation matrix",
  "org.apache.pdfbox.pdfparser.XrefParser:calculateXRefFixedOffset(long)" : "* Try to find a fixed offset for the given xref table/stream.\n     * \n     * @param objectOffset the given offset where to look at\n     * @return the fixed offset\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColorSpaceStack(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Create a new appearance stream.\n     *\n     * @param appearance\n     *            The appearance stream to write to.\n     * @throws IOException If there is an error writing to the content stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createFormatterRectangle(int[])" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:<init>()" : "* Default Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:endText()" : "* Called when the ET operator is encountered. This method is for overriding in subclasses, the\n     * default implementation does nothing.\n     *\n     * @throws IOException if there was an error processing the text",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:closePath()" : "* Closes the current subpath.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getLowerLimit()" : "* Get the lowest value for a key in the number map.\n     *\n     * @return The lowest value for a key in the map or null if missing.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:setColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the non-stroking color.\n     * @param color The new non-stroking color.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setMotion(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionMotion)" : "* Sets the direction of motion for the specified transition effect. Only for {@link PDTransitionStyle#Split},\n     * {@link PDTransitionStyle#Blinds} and {@link PDTransitionStyle#Fly}.\n     * \n     * @param motion the direction of motion for the specified transition effect",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setSubject(java.util.List)" : "* (Optional) A list of byte arrays containing DER-encoded X.509v3 certificates that are\n     * acceptable for signing. if\n     * <b>Subject</b> is not null and {@link #isSubjectRequired()} is true then the subject\n     * constraint is enforced on the subjects in this array subjects.\n     *\n     * @param subjects list of byte arrays containing DER-encoded X.509v3 certificates that are\n     * acceptable for signing.",
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteXRefTable()" : null,
  "org.apache.pdfbox.pdmodel.font.FontInfo:getCodePageRange()" : "* Returns the ulCodePageRange1 and ulCodePageRange1 field of the \"OS/2\" table, or 0.\n     * \n     * @return the CodePageRange of the font",
  "org.apache.pdfbox.contentstream.operator.graphics.AppendRectangleToPath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getExtGStateNames()" : "* Returns the names of the extended graphics state resources, if any.\r\n     * \r\n     * @return an iterable containing all names of available extended graphics states",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:getNumberOfComponents()" : "* {@inheritDoc}",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:setLineStart()" : "* Sets the isLineStart() flag to true.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:xfaIsDynamic()" : "* This will tell if the AcroForm is a dynamic XFA form.\n     *\n     * @return true if the AcroForm is a dynamic XFA form",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:parseReal(java.lang.String)" : "* Parses a value of type \"real\".\n     * @param token the token to be parsed\n     * @return the parsed value",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:makeCrcTable()" : null,
  "org.apache.pdfbox.multipdf.PageExtractor:getEndPage()" : "* Gets the last page number (inclusive) to be extracted.\n     * @return the last page number which should be extracted",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:fillAndStrokeEvenOdd()" : "* Fill and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall produce the same result as constructing two identical path objects, painting\n     * the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:newLine()" : "* Move to the start of the next line of text. Requires the leading (see {@link #setLeading})\n     * to have been set.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:addOperator(org.apache.pdfbox.contentstream.operator.OperatorProcessor)" : "* Adds an operator processor to the engine.\n     *\n     * @param op operator processor",
  "org.apache.pdfbox.cos.COSArray:growToSize(int,org.apache.pdfbox.cos.COSBase)" : "* This will add the object until the size of the array is at least\n     * as large as the parameter.  If the array is already larger than the\n     * parameter then nothing is done.\n     *\n     * @param size The desired size of the array.\n     * @param object The object to fill the array with.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBWithTintTransform(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBackgroundColor(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the background colour (BackgroundColor).\n     * \n     * @param backgroundColor the background colour",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getPermissions()" : "* This will get the permissions bit mask.\n     *\n     * @return The permissions bit mask.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:hideToolbar()" : "* Get the toolbar preference.\n     *\n     * @return the toolbar preference.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:setPDPropBuildApp(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict)" : "* Set the build data dictionary for the viewing application\n     * software module.\n     *\n     * @param app is the PDPropBuildApp",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setNoZoom(boolean)" : "* Set the noZoom flag.\n     * \n     * @param noZoom The new noZoom flag.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:setRectDifferences(float)" : "* This will set the difference between the annotations \"outer\" rectangle defined by\n     * /Rect and boundaries of the underlying.\n     * \n     * <p>This will set an equal difference for all sides</p>\n     * \n     * @param difference from the annotations /Rect entry",
  "org.apache.pdfbox.contentstream.operator.text.EndText:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:setStandardOutput(org.apache.pdfbox.pdfwriter.COSStandardOutputStream)" : "* This will set the standard output stream.\n     *\n     * @param newStandardOutput The new standard output stream.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:isVolatile()" : "* Get if the file is volatile.  Default: false\n     *\n     * @return True if the file is volatile attribute is set.",
  "org.apache.pdfbox.util.filetypedetector.FileTypeDetector:detectFileType(byte[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:<init>(org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateBuilder)" : "* Constructor.\n     * \n     * @param templateBuilder the template builder",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:token(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1Font:<init>(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : "* Creates a Type 1 standard 14 font for embedding.\n     *\n     * @param baseFont One of the standard 14 PostScript names, e.g. {@link FontName#HELVETICA_BOLD}.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:addStructure(org.apache.pdfbox.cos.COSBase)" : "* Attempts to find yet unregistered streams and dictionaries in the given structure.\n     *\n     * @param current The object to be added for compressing.\n     * @throws IOException Shall be thrown, if compressing the object failed.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getEndIndent()" : "* Gets the distance from the end edge of the BLSE to that of the reference\n     * area in the inline-progression direction (EndIndent). The default value\n     * is 0.\n     * \n     * @return the end indent",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(float,float,float,float)" : "* Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:setWidth(float)" : "* This will set the border width in points, 0 = no border.\n     *\n     * There is a bug in Adobe Reader DC, float values are ignored for text field widgets. As a\n     * workaround, floats that are integers (e.g. 2.0) are written as integer in the PDF.\n     * <p>\n     * In Adobe Acrobat DC, the values are shown as \"0 = Invisible, 1 = Thin, 2 = Medium, 3 = Thick\"\n     * for widget and link annotations.\n     *\n     * @param w float the width in points",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:style(org.apache.pdfbox.pdmodel.interactive.AppearanceStyle)" : null,
  "org.apache.pdfbox.cos.COSDocument:setDocumentID(org.apache.pdfbox.cos.COSArray)" : "* This will set the document ID. This should be an array of two strings. This method cannot be\n     * used to remove the document id by passing null or an empty array; it will be recreated. Only\n     * the first existing string is used when writing, the second one is always recreated. If you\n     * don't want this, you'll have to modify the {@code COSWriter} class, look for {@link COSName#ID}.\n     *\n     * @param id The document id.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)" : "* Draw an image at the x,y coordinates, with the default size of the image.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showTextString(byte[])" : "* Called when a string of text is to be shown.\n     *\n     * @param string the encoded text\n     * @throws IOException if there was an error showing the text",
  "org.apache.pdfbox.filter.DecodeOptions:getSourceRegion()" : "* When decoding an image, the part of the image that should be decoded, or null if the entire\n     * image is needed.\n     *\n     * @return The source region to decode, or null if the entire image should be decoded",
  "org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getStructParent()" : "* This will get the key of this annotation in the structural parent tree.\n     *\n     * @return the integer key of the annotation's entry in the structural parent tree or -1 if\n     * there isn't any.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSBoolean(java.io.OutputStream,org.apache.pdfbox.cos.COSBoolean)" : "* Write the given {@link COSBoolean} to the given stream.\n     *\n     * @param output The stream, that shall be written to.\n     * @param cosBoolean The content, that shall be written.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType4:getFunctionType()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFontEmbedder:getFontEncoding()" : "* Returns the font's encoding.",
  "org.apache.pdfbox.text.PDFTextStripperByArea:<init>()" : "* Constructor.\n     * @throws IOException If there is an error loading properties.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setTransfer(org.apache.pdfbox.cos.COSBase)" : "* This will set the transfer function of the /TR dictionary.\n     *\n     * @param transfer The transfer function. According to the PDF specification, this is either a\n     * single function (which applies to all process colorants) or an array of four functions (which\n     * apply to the process colorants individually). The name Identity may be used to represent the\n     * identity function.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isUserPassword234(byte[],byte[],byte[],int,byte[],int,int,boolean)" : null,
  "org.apache.pdfbox.pdmodel.PDPage:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Creates a new instance of PDPage for reading.\n     *\n     * @param pageDictionary A page dictionary in a PDF document.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:decode1D()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:getBase()" : "* This will get the base URI to be used in resolving relative URI references.\n     * URI actions within the document may specify URIs in partial form, to be interpreted\n     * relative to this base address. If no base URI is specified, such partial URIs\n     * will be interpreted relative to the location of the document itself.\n     * The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described\n     * in the HTML 4.01 Specification.\n     *\n     * @return The URI entry of the specific URI dictionary.",
  "org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:create2ByteGrayAlphaImage(int,int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:getFontDescriptor(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setAction(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set the action that is associated with this field.\n     *\n     * @param a The new action.",
  "org.apache.pdfbox.util.Vector:<init>(float,float)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData:getFile()" : "* This will get the file in which the destination is located.\n     *\n     * @return The F entry of the specific Submit-From action dictionary.\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4,org.apache.pdfbox.util.Matrix)" : "* Constructor.\n     *\n     * @param shading the shading resources\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:hashCode()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setQ(int)" : "* This will set the document-wide default value for the quadding/justification of variable text\n     * fields. See the QUADDING constants of {@link PDVariableText}.\n     *\n     * @param q The justification of the variable text fields.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getLine()" : "* This will retrieve the start and end coordinates of the line (or leader line if LL entry is set).\n     *\n     * @return array of floats [x1, y1, x2, y2] line start and end points in default user space.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:addRecipient(org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient)" : "* Adds a new recipient to the recipients list.\n     * @param recipient A new recipient.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setFD(boolean)" : "* This will set the value indication if the denominator of the fractional value is reduced/truncated .\r\n     * The denominator may not be reduced/truncated if true\r\n     * @param fd fd",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:setDefaultValue(java.lang.String)" : "* Sets the default value.\n     *\n     * @param value Name of option to select\n     * @throws IllegalArgumentException if the value is not a valid option.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:setDomain(org.apache.pdfbox.cos.COSArray)" : "* Sets the optional Domain entry for this shading.\n     *\n     * @param newDomain the domain array",
  "org.apache.pdfbox.pdmodel.common.PDStream:getFileDecodeParams()" : "* Get the list of decode parameters. Each entry in the list will refer to\n     * an entry in the filters list.\n     * \n     * @return The list of decode parameters.\n     * @throws IOException if there is an error retrieving the parameters.",
  "org.apache.pdfbox.pdfparser.xref.AbstractXReference:getFirstColumnValue()" : "* Returns the value for the first column of the crossreference stream entry. (The numeric representation of this\n     * entry's (The numeric representation of this entry's {@link XReferenceType}.)\n     *\n     * @return The value for the first column of the crossreference stream entry.",
  "org.apache.pdfbox.multipdf.Splitter:createNewDocument()" : "* Create a new document to write the split contents to.\n     *\n     * @return the newly created PDDocument. \n     * @throws IOException If there is an problem creating the new document.",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:nextXrefObj(long,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)" : "* Signals that a new XRef object (table or stream) starts.\r\n     * @param startBytePos the offset to start at\r\n     * @param type the type of the Xref object",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setCreationDate(java.util.Calendar)" : "* Set the creation date.\n     *\n     * @param date The date the annotation was created.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getTrueTypeFont()" : "* Returns the embedded or substituted TrueType font. May be an OpenType font if the font is not embedded.\n     * \n     * @return the embedded or substituted TrueType font",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:checkValue(java.lang.String)" : "* Checks value.\n     *\n     * @param value Name of radio button to select\n     * @throws IllegalArgumentException if the value is not a valid option.",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler:whitespace(java.lang.CharSequence)" : "{@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:getArea(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:cloudyRectangleImpl(double,double,double,double,boolean)" : "* Cloudy rectangle implementation is based on converting the rectangle\n     * to a polygon.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getParser(org.apache.pdfbox.io.RandomAccessRead,boolean)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:moveTo(float,float)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getAnnotations()" : "* This will get the list of FDF Annotations. This will return a list of FDFAnnotation objects or null if the entry\n     * is not set.\n     *\n     * @return A list of FDF annotations.\n     *\n     * @throws IOException If there is an error creating the annotation list.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setStructParents(int)" : "* This will set the key for this XObjectForm in the structural parent tree.\n     * @param structParent The new key for this XObjectForm.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllColumnWidths(float)" : "* Sets the same column width for all columns (ColumnWidths).\n     * \n     * @param columnWidth the column width",
  "org.apache.pdfbox.contentstream.operator.graphics.CloseFillNonZeroAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getBoundingBox()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setClassNames(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions)" : "* Sets the class names together with their revision numbers (C).\n     * \n     * @param classNames the class names",
  "org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Orientation,boolean,float)" : "* Creates a new PDFPageable with the given page orientation and with optional page borders\n     * shown. The image will be rasterized at the given DPI before being sent to the printer if\n     * non-zero.\n     *\n     * @param document the document to print\n     * @param orientation page orientation policy\n     * @param showPageBorder true if page borders are to be printed\n     * @param dpi if non-zero then the image will be rasterized at the given DPI",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setBlendMode(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode)" : "* Set the blending mode.\n     * \n     * @param bm blend mode",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setOID(java.util.List)" : "* (Optional) A list of byte arrays that contain Object Identifiers (OIDs) of the certificate\n     * policies that must be present in the signing certificate. This field is only applicable if\n     * the value of Issuer is not empty.\n     *\n     * @param oidByteStrings list of byte arrays that contain OIDs",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getHeight()" : "* Gets the height of the element’s content rectangle in the\n     * block-progression direction (Height). The default value is\n     * {@link #HEIGHT_AUTO}.\n     * \n     * @return the height (a Float or a String)",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createThumbnail(org.apache.pdfbox.cos.COSStream)" : "* Creates a thumbnail Image XObject from the given COSBase and name.\r\n     * @param cosStream the COS stream\r\n     * @return an XObject",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getGraphicsState()" : "* @return Returns the graphicsState.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setItalic(boolean)" : "* Set the italic property of the text.\n     *\n     * @param italic The new italic flag.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:<init>()" : "* Create a new CalGray color space.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isOwnerPassword56(byte[],byte[],byte[],int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:<init>(float[][])" : "* Constructor of Patch.\n     *\n     * @param color 4 corner's colors",
  "org.apache.pdfbox.multipdf.Splitter:cloneTreeElement(java.util.Map,java.util.Map,int)" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy:getUserPassword()" : "* Returns the user password.\n     * @return the user password",
  "org.apache.pdfbox.filter.FilterFactory:getAllFilters()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:setFitBoundingBox(boolean)" : "* Set if this page destination should just fit the bounding box.  The default is false.\n     *\n     * @param fitBoundingBox A flag indicating if this should fit the bounding box.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:getB()" : null,
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl$FontMatch:<init>(org.apache.pdfbox.pdmodel.font.FontInfo)" : null,
  "org.apache.pdfbox.rendering.TilingPaint:<init>(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.AffineTransform)" : "* Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored\n     * tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint.\n     *\n     * @param drawer renderer to render the page\n     * @param pattern tiling pattern dictionary\n     * @param colorSpace color space for this tiling\n     * @param color color for this tiling\n     * @param xform device scale transform\n     *\n     * @throws java.io.IOException if something goes wrong while drawing the pattern",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:<init>(org.w3c.dom.Document)" : "* This will create an FDF document from an XFDF XML document.\n     *\n     * @param doc The XML document that contains the XFDF data.\n     * @throws IOException If there is an error reading from the dom.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setCYX(float)" : "* This will set the CYX factor.\r\n     * \r\n     * @param cyx CYX factor",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new instance based on a given {@link COSDictionary}.\n     * @param dict the dictionary",
  "org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:getType1Font()" : "* Returns the Type 1 font.",
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:setFDF(org.apache.pdfbox.pdmodel.fdf.FDFDictionary)" : "* This will set the FDF document.\n     *\n     * @param fdf The new FDF dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:setInteriorColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* This will set interior color of the line endings defined in the LE entry.\n     *\n     * @param ic color.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:getComponents()" : "* Returns the components of this color value.\r\n     * @return the components of this color value, never null.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getBitsPerComponent()" : "* The bits per component of this shading. This will return -1 if one has not been set.\n     *\n     * @return the number of bits per component",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:readBit()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getContents()" : "* Get the text, or a description, of the annotation.\n     *\n     * @return The text, or a description, of the annotation.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:remove(int)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:create(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.PDResources)" : "* Creates a new ICC color space using the PDF array, optionally using a resource cache.\n     *\n     * @param iccArray the ICC stream object.\n     * @param resources resources to use as cache, or null for no caching.\n     * @return an ICC color space.\n     * @throws IOException if there is an error reading the ICC profile or if the parameter is\n     * invalid.",
  "org.apache.pdfbox.pdmodel.PDDocument:setHighestImportedObjectNumber(org.apache.pdfbox.pdmodel.PDPage)" : "* Determine the highest object number from the imported page to avoid mixed up numbers when saving the new pdf.\n     * \n     * @param importedPage the imported page.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:extractMatte(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)" : "* Extract the matte color from a softmask.\r\n     * \r\n     * @param softMask\r\n     * @return the matte color.\r\n     * @throws IOException if the color conversion fails.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:toString()" : null,
  "org.apache.pdfbox.util.Matrix:createMatrix(org.apache.pdfbox.cos.COSBase)" : "* Convenience method to be used when creating a matrix from unverified data. If the parameter\n     * is a COSArray with at least six numbers, a Matrix object is created from the first six\n     * numbers and returned. If not, then the identity Matrix is returned.\n     *\n     * @param base a COS object, preferably a COSArray with six numbers.\n     *\n     * @return a Matrix object.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setRichContents(java.lang.String)" : "* This will set the rich text stream which is displayed in the popup window.\n     *\n     * @param rc the rich text stream.",
  "org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The FDF annotation.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)" : "* The Tm operator. Sets the text matrix to the given values.\n     * A current text matrix will be replaced with the new one.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:getCOSObject()" : "* returns the dictionary.\n     *\n     * @return the dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.multipdf.Overlay:createOverlayStream(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.multipdf.Overlay$LayoutPage,org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setHeight(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict a border style dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getFilename()" : "* Get the name of the file as found in the EmbeddedFiles name tree. This is only to be used if\n     * the target is a child of the current document.\n     *\n     * @return a filename or null if there is none.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:lineTo(double,double)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setAnnotationFlags(int)" : "* This will set the flags for this field.\n     * \n     * @param flags The new flags.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)" : "* Draw an inline image at the x,y coordinates, with the default size of the image.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport:<init>(org.apache.pdfbox.pdfwriter.COSWriter)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:showTextWithPositioning(java.lang.Object[])" : "* Shows the given text at the location specified by the current text matrix with the given\n     * interspersed positioning. This allows the user to efficiently position each glyph or sequence\n     * of glyphs.\n     *\n     * @param textWithPositioningArray An array consisting of String and Float types. Each String is\n     * output to the page using the current text matrix. Using the default coordinate system, each\n     * interspersed number adjusts the current text matrix by translating to the left or down for\n     * horizontal and vertical text respectively. The number is expressed in thousands of a text\n     * space unit, and may be negative.\n     *\n     * @throws IOException if an io exception occurs.",
  "org.apache.pdfbox.util.XMLUtil:getNodeValue(org.w3c.dom.Element)" : "* This will get the text value of an element.\n     *\n     * @param node The node to get the text value for.\n     * @return The text of the node.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:getMaxLen()" : "* Returns the maximum number of characters of the text field.\n     * \n     * @return the maximum number of characters, returns -1 if the value isn't present",
  "org.apache.pdfbox.filter.Filter:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getEncryptionKey()" : "* Returns the current encryption key data.\n     *\n     * @return The current encryption key data.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getFontBoxFont()" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setCharacterSpacing(float)" : "* Set the character spacing. The value shall be added to the horizontal or vertical component\n     * of the glyph's displacement, depending on the writing mode.\n     *\n     * @param spacing character spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDField#PDField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Line:getInterWordSpacing(float)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:toPaint(org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:tokenize()" : null,
  "org.apache.pdfbox.cos.COSFloat:<init>(float,java.lang.String)" : "* An internal constructor to avoid formatting for the predefined constants.\n     *\n     * @param aFloat\n     * @param valueString",
  "org.apache.pdfbox.util.Matrix:transformPoint(float,float)" : "* Transforms the given point by this matrix.\n     *\n     * @param x x-coordinate\n     * @param y y-coordinate\n     *\n     * @return the transformed point.",
  "org.apache.pdfbox.cos.COSDictionary:getLong(java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned\n     * if there is no value.\n     *\n     * @param key The key to the item in the dictionary.\n     *\n     * @return The long value.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:getAttributeValue(java.lang.String)" : "* Gets the attribute value for a given name.\n     * \n     * @param attrName the given attribute name\n     * @return the attribute value for a given name",
  "org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.font.PDFont)" : "* Sets the font resource with the given name.\r\n     *\r\n     * @param name the name of the resource\r\n     * @param font the font to be added",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getFlyScale()" : "* @return The starting or ending scale at which the changes shall be drawn or the default 1 if no scale is found.\n     * Only for {@link PDTransitionStyle#Fly}.",
  "org.apache.pdfbox.text.PDFTextStripper:isParagraphSeparation(org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,float)" : "* tests the relationship between the last text position, the current text position and the last text position that\n     * followed a line separator to decide if the gap represents a paragraph separation. This should <i>only</i> be\n     * called for consecutive text positions that first pass the line separation test.\n     * <p>\n     * This base implementation tests to see if the lastLineStartPosition is null OR if the current vertical position\n     * has dropped below the last text vertical position by at least 2.5 times the current text height OR if the current\n     * horizontal position is indented by at least 2 times the current width of a space character.\n     * </p>\n     * <p>\n     * This also attempts to identify text that is indented under a hanging indent.\n     * </p>\n     * <p>\n     * This method sets the isParagraphStart and isHangingIndent flags on the current position object.\n     * </p>\n     *\n     * @param position the current text position. This may have its isParagraphStart or isHangingIndent flags set upon\n     * return.\n     * @param lastPosition the previous text position (should not be null).\n     * @param lastLineStartPosition the last text position that followed a line separator, or null.\n     * @param maxHeightForLine max height for text positions since lasLineStartPosition.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isToggleNoView()" : "* Get the toggleNoView flag.\n     *\n     * @return The toggleNoView flag.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:getLeft()" : "* Get the left x coordinate.  A return value of -1 implies that the current x-coordinate\n     * will be used.\n     *\n     * @return The left x coordinate.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setDoNotSpellCheck(boolean)" : "* Set the doNotSpellCheck bit.\n     *\n     * @param doNotSpellCheck The value for the doNotSpellCheck.",
  "org.apache.pdfbox.contentstream.operator.graphics.MoveTo:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:setInkList(java.util.List)" : "* Set the paths making up the freehand \"scribble\".\n     * \n     * The ink annotation is made up of one ore more disjoint paths. Each array entry is an array representing a stroked\n     * path, being a series of alternating horizontal and vertical coordinates in default user space.\n     * \n     * @param inklist the List of arrays representing the paths.",
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromBoolean(org.apache.pdfbox.cos.COSBoolean)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:isEmbedded()" : null,
  "org.apache.pdfbox.contentstream.operator.state.SetMatrix:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:potentiallyNotifyChanged(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase)" : "* Notifies the attribute object change listeners if the attribute is changed.\n     * \n     * @param oldBase old value\n     * @param newBase new value",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getPartialFieldName()" : "* This will get the \"T\" entry in the field dictionary. A partial field name.\n     * Where the fully qualified field name is a concatenation of the parent's fully qualified\n     * field name and \".\" as a separator. For example<br>\n     * Address.State<br>\n     * Address.City<br>\n     *\n     * @return The partial field name.",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:scanToken()" : null,
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the BBox (bounding box) for this Pattern.\n     * @param bbox The new BBox for this Pattern.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getFontMatrix()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,int)" : "* Constructor.\n     *\n     * @param document Already created PDDocument of your PDF document.\n     * @param imageStream Image as a stream.\n     * @param page The 1-based page number for which the page size should be calculated.\n     * @throws IOException If we can't read, flush, or can't close stream.",
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromRandomAccessImpl(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.io.RandomAccessRead,int)" : "* Creates a new CCITT Fax compressed image XObject from a TIFF file.\r\n     * \r\n     * @param document the document to create the image as part of.\r\n     * @param reader the random access TIFF file which contains a suitable CCITT\r\n     * compressed image\r\n     * @param number TIFF image number, starting from 0\r\n     * @return a new Image XObject, or null if no such page\r\n     * @throws IOException if there is an error reading the TIFF data.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:<init>(float[])" : "* Constructor from COS object.\n     * @param array the array containing the XYZ values",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:toString()" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanModify(boolean)" : "* Set if the user can modify the document.\n     * <p>\n     * This method will have no effect if the object is in read only mode.\n     *\n     * @param allowModifications A boolean determining if the user can modify the document.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getElementIdentifier()" : "* Returns the element identifier (ID).\n     * \n     * @return the element identifier",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setWidth(int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param cat The FDF documents catalog.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:findLabels(org.apache.pdfbox.pdmodel.common.PDNumberTreeNode)" : null,
  "org.apache.pdfbox.pdmodel.font.FontMappers:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getArc(double,double,double,double,double,double,java.util.ArrayList,boolean)" : "* Creates one or more Bézier curves that represent an elliptical arc.\n     * Angles are in radians.\n     * The arc will always proceed in the positive angle direction.\n     * If the argument `out` is null, this writes the results to the instance\n     * variable `output`.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getPath(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     * \n     * @param dictionary Dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a PDWidget from a COSDictionary, expected to be a correct object definition for a field in PDF.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdfparser.BaseParser:getObjectKey(long,int)" : "* Returns the object key for the given combination of object and generation number. The object key from the cross\n     * reference table/stream will be reused if available. Otherwise a newly created object will be returned.\n     * \n     * @param num the given object number\n     * @param gen the given generation number\n     * \n     * @return the COS object key",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getDefaultPositionVector(int)" : "* Returns the default position vector (v).\n     *\n     * @param cid CID",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:inappropriateForPlainText(int)" : "* Return true if the given {@code codepoint} is inappropriate for plain\n     * text characters as defined by\n     * <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.6\">RFC 3454,\n     * Appendix C.6</a>.",
  "org.apache.pdfbox.rendering.GroupGraphics:setClip(java.awt.Shape)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:getInvLookupTable()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getExecuteParam()" : "* A parameter to pass the executable.\n     *\n     * @return The parameter to pass the executable.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setAverageWidth(float)" : "* This will set the average width for the font.\n     *\n     * @param averageWidth The new average width for the font.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:getStructureElement()" : "* Gets the structure element.\n     * \n     * @return the structure element",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:setSymbol(java.lang.String)" : "* This will set the symbol that shall be associated with the caret.\n     * \n     * @param symbol the symbol",
  "org.apache.pdfbox.pdfparser.PDFObjectStreamParser:readObjectNumbers()" : "* Read all object numbers from the compressed object stream. The stream is closed after reading the object numbers.\n     * \n     * @return a map off all object numbers and the corresponding offset within the object stream.\n     * @throws IOException if there is an error while parsing the stream",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setClearFieldFlags(java.lang.Integer)" : "* This will set the field flags that are associated with this field.\n     * The 'ClrFf' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the \"clear field flags\".",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getType2CharString(int)" : "* Returns the Type 2 charstring for the given CID, or null if the substituted font does not contain Type 2\n     * charstrings.\n     *\n     * @param cid CID\n     * @return the Type 2 charstring for the given CID or null\n     * \n     * @throws IOException if the charstring could not be read",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:closeAndFillAndStrokeEvenOdd()" : "* Close, fill, and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStrokeEvenOdd() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addInteger(int)" : "* Adds an int value.\n     * @param value the value",
  "org.apache.pdfbox.text.PDFTextStripper:getArticleStart()" : "* Returns the string which will be used at the beginning of an article.\n     * \n     * @return the article start string",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport:getContent()" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:clipToRange(float[])" : "* Clip the given input values to the ranges.\n     * \n     * @param inputValues the input values\n     * @return the clipped values",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:<init>(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Creates a PDColor containing the given color value.\r\n     * @param array a COS array containing the color value\r\n     * @param colorSpace color space in which the color value is defined",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:getCOSObject()" : "* This will get the underlying dictionary that this object wraps.\n     *\n     * @return The underlying info dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:getOnValueForWidget(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getColor()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getCOSObject()" : "* returns the dictionary.\n     * \n     * @return the dictionary",
  "org.apache.pdfbox.rendering.GroupGraphics:clipRect(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:showText(java.lang.String)" : "* Shows the given text at the location specified by the current text matrix.\n     *\n     * @param text The Unicode text to show.\n     * @throws IOException If an io exception occurs.\n     * @throws IllegalArgumentException if a character isn't supported by the current font",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)" : "* Draw an inline image at the x,y coordinates and a certain width and height.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     * @param width The width of the inline image to draw.\n     * @param height The height of the inline image to draw.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:flatten()" : "* This will flatten all form fields.\n     * \n     * <p>\n     * Flattening a form field will take the current appearance and make that part of the pages content stream. All form\n     * fields and annotations associated are removed.\n     * </p>\n     * \n     * <p>\n     * Invisible and hidden fields will be skipped and will not become part of the page content stream\n     * </p>\n     * \n     * <p>\n     * The appearances for the form fields widgets will <strong>not</strong> be generated\n     * </p>\n     * \n     * @throws IOException if something went wrong flattening the fields",
  "org.apache.pdfbox.pdmodel.PageLayout:fromString(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getActualText()" : "* Returns the actual text (ActualText).\n     * \n     * @return the actual text",
  "org.apache.pdfbox.cos.COSStream$2:close()" : "* {@inheritDoc}\n     *\n     * Called by PDFBox when the PDDocument is closed, this closes the stream and removes the data. You will usually not\n     * need this.\n     *\n     * @throws IOException if something went wrong when closing the stream",
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils$KeyValue:getValue()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setAdditionalActions(org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions)" : "* This will set the additional actions that are associated with this field.\n     *\n     * @param aa The additional actions.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:moveTo(float,float)" : "* Move the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdfparser.BaseParser:readExpectedString(char[],boolean)" : "* Reads given pattern from {@link #source}. Skipping whitespace at start and end if wanted.\n     * \n     * @param expectedString pattern to be skipped\n     * @param skipSpaces if set to true spaces before and after the string will be skipped\n     * @throws IOException if pattern could not be read",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setProtectionPolicy(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)" : "* Sets the {@link ProtectionPolicy} to the given value.\n     * @param protectionPolicy The {@link ProtectionPolicy}, that shall be set.",
  "org.apache.pdfbox.filter.DCTFilter:getNumChannels(javax.imageio.ImageReader)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:shouldSkipAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanExtractContent(boolean)" : "* Set if the user can extract content from the document.\n     * <p>\n     * This method will have no effect if the object is in read only mode.\n     *\n     * @param allowExtraction A boolean determining if the user can extract content\n     *                        from the document.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getData()" : "* Returns the inline image data.\r\n     * \r\n     * @return the inline image data",
  "org.apache.pdfbox.util.NumberFormatUtil:getExponent(long)" : "* Returns the highest exponent of 10 where {@code 10^exp < number} for numbers > 0",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getStandard14Width(int)" : null,
  "org.apache.pdfbox.cos.PDFDocEncoding:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new Pattern dictionary from the given COS dictionary.\n     * @param dictionary The COSDictionary for this pattern.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing outline item.\n     *\n     * @param dic The storage dictionary.",
  "org.apache.pdfbox.pdmodel.PDDocument:assignAcroFormDefaultResource(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:initPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Initializes the stream engine for the given page.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAffineTransform(java.awt.geom.AffineTransform)" : "* Sets AffineTransform\n     * \n     * @param affineTransform the affine transformation to be used for the signature",
  "org.apache.pdfbox.multipdf.Overlay:processPages(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Sets Image form. Image form will be in this structure: <b>/AcroForm/DR/{holder form}/Resources/XObject /{inner\n     * form} /Resources/XObject/{image form name}.</b> By default we start image form name with \"img\". Then we add\n     * number of image form to the form name. Sets image form\n     * \n     * @param imageForm the image form",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.PDResources:getColorSpace(org.apache.pdfbox.cos.COSName)" : "* Returns the color space resource with the given name, or null if none exists.\r\n     * \r\n     * @param name Name of the color space resource.\r\n     * @return a new color space.\r\n     * @throws IOException if something went wrong.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getCurrentClippingPath()" : "* This will get the current clipping path. Do not modify this Area object!\n     *\n     * @return The current clipping path.",
  "org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a new PDFPageable.\n     *\n     * @param document the document to print",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setDefaultAppearance(java.lang.String)" : "* Set the default appearance.\n     *\n     * @param daValue a string describing the default appearance.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:getType()" : "* This will get the type of PDF object that the actions dictionary describes.\n     * If present must be Action for an action dictionary.\n     *\n     * @return The Type of PDF object.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getAppearanceDictionary()" : "* This will get the appearance dictionary that specifies the appearance of a pushbutton field.\n     *\n     * @return The AP entry of this dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isTopAttached()" : "* Is the artifact attached to the top edge?\n     * \n     * @return <code>true</code> if the artifact is attached to the top edge,\n     * <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:getCOSObject()" : "* returns the dictionary.\n     *\n     * @return the dictionary",
  "org.apache.pdfbox.cos.COSDictionary:getCOSDictionary(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is\n     * returned if the entry does not exist in the dictionary.\n     *\n     * @param firstKey The first key to the item in the dictionary.\n     * @param secondKey The second key to the item in the dictionary.\n     * @return The COSDictionary.",
  "org.apache.pdfbox.pdmodel.common.PDStream:getFileFilters()" : "* This will get the list of filters that are associated with this stream. The list is empty if there are none.\n     * \n     * @return A list of all encoding filters to apply to this stream.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:<init>()" : "* Creates a new PDFStreamEngine.",
  "org.apache.pdfbox.text.PDFTextStripper:getStartBookmark()" : "* Get the bookmark where text extraction should start, inclusive. Default is null.\n     *\n     * @return The starting bookmark.",
  "org.apache.pdfbox.pdfparser.COSParser:checkPagesDictionary(org.apache.pdfbox.cos.COSDictionary,java.util.Set)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.text.LegacyPDFStreamEngine:processPage(org.apache.pdfbox.pdmodel.PDPage)" : "* This will initialize and process the contents of the stream.\r\n     *\r\n     * @param page the page to process\r\n     * @throws java.io.IOException if there is an error accessing the stream.",
  "org.apache.pdfbox.cos.COSStream:<init>()" : "* Creates a new stream with an empty dictionary.\n     * <p>\n     * Try to avoid using this constructor because it creates a new scratch file in memory. Instead,\n     * use {@link COSDocument#createCOSStream() document.getDocument().createCOSStream()} which will\n     * use the existing scratch file (in memory or in temp file) of the document.\n     * </p>",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDVariableText)" : "* Constructs a COSAppearance from the given field.\n     *\n     * @param field the field which you wish to control the appearance of\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquiggly:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:clipRegion(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.Rectangle)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getNonStrokingColorSpace()" : "* Returns the non-stroking color space.\n     *\n     * @return The non-stroking color space.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:clip()" : "* Intersects the current clipping path with the current path, using the nonzero rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:appendKid(int)" : "* Appends a marked-content sequence kid.\n     * \n     * @param mcid the marked-content id (MCID).\n     * @throws IllegalArgumentException if the mcid is negative.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:endText()" : "* End some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest endText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.cos.COSArray:size()" : "* This will get the size of this array.\n     *\n     * @return The number of elements in the array.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:insertGeneratedListboxSelectionHighlight(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,org.apache.pdfbox.pdmodel.font.PDFont,float)" : null,
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:willBeSubset()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:parseInt(java.lang.String)" : "* Parses a value of type \"int\".\n     * @param token the token to be parsed\n     * @return the parsed value",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setHolderFormResources(org.apache.pdfbox.pdmodel.PDResources)" : "* Sets holder form resources\n     * \n     * @param holderFormResources the resources of the holder form",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getOS()" : "* Indicates the operating system. The string format isn't specified yet. In its PDF Signature\n     * Build Dictionary Specifications Adobe differently specifies the value type to store operating\n     * system string:<ul>\n     * <li>Specification for PDF v1.5 specifies type as string;</li>\n     * <li>Specification for PDF v1.7 specifies type as array and provided example for\n     * <code>/PropBuild</code> dictionary indicate it as array of names.</li>\n     * </ul>\n     * This method supports both types to retrieve the value.\n     *\n     * @return the operating system id or name.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:toByteArray()" : null,
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setYStep(float)" : "* This will set the YStep value.\n     * @param yStep The new YStep value.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:resolveTransformationMatrix(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : null,
  "org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:writeLine(java.io.BufferedWriter,java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.pdmodel.font.encoding.Encoding)" : "* This will load a PFB to be embedded into a document.\r\n     *\r\n     * @param doc The PDF document that will hold the embedded font.\r\n     * @param dict The Font dictionary to write to.\r\n     * @param pfbStream The pfb input.\r\n     * @throws IOException If there is an error loading the data.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new tiling pattern from the given COS dictionary.\n     * @param dictionary The COSDictionary for this pattern.",
  "org.apache.pdfbox.util.Matrix:scale(float,float)" : "* Scales this matrix by the given factors.\n     *\n     * @param sx x-scale\n     * @param sy y-scale",
  "org.apache.pdfbox.contentstream.operator.OperatorProcessor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : "* Creates a new OperatorProcessor.\n     * \n     * @param context the processing context to be used",
  "org.apache.pdfbox.pdmodel.encryption.SecurityProvider:getProvider()" : "* Returns the provider to be used for advanced encrypting/decrypting. Default is the BouncyCastleProvider.\n     * \n     * @return the security provider",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setAnnotationIndex(int)" : "* This will set the index (zero-based) of the annotation in the /Annots array of the page\n     * specified by the /P entry.\n     *\n     * @param index the zero based index. If this is &lt; 0 then the entry is removed.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getRevision()" : "* This will return the R entry of the encryption dictionary.<br><br>\n     * See PDF Reference 1.4 Table 3.14.\n     *\n     * @return The encryption revision to use.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addOID(byte[])" : "* works like {@link #setOID(List)} but for one object\n     *\n     * @param oid Object Identifier of a certificate policy to be added",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setTargetDirectory(org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory)" : "* Sets the target directory.\n     *\n     * @param targetDirectory the target directory or null if the current document is the target\n     * file containing the destination.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:clone()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getXObjectNames()" : "* Returns the names of the XObject resources, if any.\r\n     * \r\n     * @return an iterable containing all names of available xobjects",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setDefaultValue(java.lang.String)" : "* Sets the default value of this field.\n     *\n     * @param value The name of the selected item.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:getFlag3Color()" : "* Get implicit color for flag = 3.\n     *\n     * @return color",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:setVisibleSignature(java.io.InputStream)" : "* sets configuration object of visible signature\n     * \n     * @param visibleSignature the stream of the visible signature",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getURI()" : "* Returns the document-level URI.\n     * \n     * @return the document level URI if present, otherwise null",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:wrapLines(boolean)" : null,
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:getGlyphPath(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName,java.lang.String)" : "* Returns the path for the character with the given name for the specified Standard 14 font. The mapped font is\r\n     * cached. The path may differ in different environments as it depends on the mapped font.\r\n     *\r\n     * @param baseName name of the standard 14 font\r\n     * @param glyphName name of glyph\r\n     * @return the mapped font\r\n     * \r\n     * @throws IOException if the data could not be read",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDField#PDField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.cos.COSDocument:close()" : "* This will close all storage and delete the tmp files.\n     *\n     * @throws IOException If there is an error close resources.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:init()" : "* Lazy load the ICC profile, because it's slow.\n     * \n     * @throws IOException if the ICC profile could not be initialized",
  "org.apache.pdfbox.pdmodel.PDDocument:save(java.lang.String)" : "* Save the document to a file using default compression.\n     * <p>\n     * Don't use the input file as target as this will produce a corrupted file.\n     * <p>\n     * If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)\n     * protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted.\n     * The same applies if your file was created from parts of another file and that\n     * one is to be used after saving.\n     *\n     * @param fileName The file to save as.\n     *\n     * @throws IOException if the output could not be written",
  "org.apache.pdfbox.pdfparser.COSParser:getSecurityHandler()" : "* This will get the security handler. The document must be parsed before this is called.\n     *\n     * @return The security handler of the document that was parsed.",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:subset()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getContentStream()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getFullyQualifiedName()" : "* Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields.\n     * \n     * @return the name of the field",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setNoRotate(boolean)" : "* Set the noRotate flag.\n     *\n     * @param noRotate The new noRotate flag.",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getNames()" : "* This will return a map of names on this level. The key will be a string,\n     * and the value will depend on where this class is being used.\n     *\n     * @return ordered map of COS objects or <code>null</code> if the dictionary\n     * contains no 'Names' entry on this level.\n     *\n     * @throws IOException If there is an error while creating the sub types.\n     * @see #getKids()",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getInlineAlign()" : "* Gets the alignment, in the inline-progression direction, of content\n     * within the table cell (InlineAlign). The default value is\n     * {@link #INLINE_ALIGN_START}.\n     * \n     * @return the inline alignment",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildVerticalMetrics(java.util.TreeMap)" : "* Builds vertical metrics with a custom CIDToGIDMap (for embedding font subset).",
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:isEncryptMetaData()" : "* Will get the EncryptMetaData dictionary info.\n     *\n     * @return true if EncryptMetaData is explicitly set (the default is true)",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:writeXML(java.io.Writer)" : "* This will write this element as an XML document.\n     *\n     * @param output The stream to write the xml to.\n     *\n     * @throws IOException If there is an error writing the XML.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getPathFromOutlines(int)" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler:comment(java.lang.CharSequence)" : "{@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:getURI()" : "* This will get the uniform resource identifier to resolve. It should be encoded in 7-bit\n     * ASCII, but UTF-8 and UTF-16 are supported too.\n     *\n     * @return The URI entry of the specific URI action dictionary or null if there isn't any.",
  "org.apache.pdfbox.cos.COSDictionary:getCOSName(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a name. Null is returned\n     * if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The COS name.",
  "org.apache.pdfbox.util.XMLUtil:parse(java.io.InputStream)" : "* This will parse an XML stream and create a DOM document.\n     *\n     * @param is The stream to get the XML from.\n     * @return The DOM document.\n     * @throws IOException It there is an error creating the dom.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setMiterLimit(java.lang.Float)" : "* This will set the miter limit for the graphics state.\n     *\n     * @param miterLimit The new miter limit value",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getDecode()" : null,
  "org.apache.pdfbox.pdfparser.XrefParser:getXrefTable()" : "* Returns the resulting cross reference table.\n     * \n     * @return",
  "org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDField#PDField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Ge:compare(java.lang.Number,java.lang.Number)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:convertListOfByteArraysToCOSArray(java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType3Font:hasGlyph(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:codeToCID(int)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:close()" : "* Close the content stream.  This must be called when you are done with this object.\n     *\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList:<init>()" : "* Constructor for subclasses.",
  "org.apache.pdfbox.rendering.GroupGraphics:setStroke(java.awt.Stroke)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:<init>()" : "* Constructor #1.",
  "org.apache.pdfbox.pdmodel.PDDocument:setVersion(float)" : "* Sets the PDF specification version for this document.\n     *\n     * @param newVersion the new PDF version (e.g. 1.4f)\n     *",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setOIDRequired(boolean)" : "* set true if OID shall be required as a constraint on signature.\n     *\n     * @param flag if true, the specified OID shall be enforced as a constraint.",
  "org.apache.pdfbox.pdmodel.common.PDStream:setDecodedStreamLength(int)" : "* Set the decoded stream length.\n     *\n     * @param decodedStreamLength the decoded stream length",
  "org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:remove(org.apache.pdfbox.pdmodel.PDPage)" : "* Removes the given page from the page tree.\r\n     *\r\n     * @param page The page to remove.",
  "org.apache.pdfbox.pdmodel.common.PDStream:getDecodedStreamLength()" : "* Get the decoded stream length.\n     *\n     * @return the decoded stream length",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setLabelSuffixString(java.lang.String)" : "* This will set the text to be concatenated after the label specified by U.\r\n     * \r\n     * @param labelSuffixString label suffix",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getMiterLimit()" : "* This will get the miter limit.\n     *\n     * @return null or the ML value in the dictionary.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getOutputIntents()" : "* Get the list of OutputIntents defined in the document.\n     *\n     * @return The list of PDOutputIntent, never null.",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getActualText()" : "* Gets the actual text (ActualText).\r\n     * \r\n     * @return the actual text",
  "org.apache.pdfbox.text.PDFTextStripper:matchPattern(java.lang.String,java.util.List)" : "* iterates over the specified list of Patterns until it finds one that matches the specified string. Then returns\n     * the Pattern.\n     * <p>\n     * Order of the supplied list of patterns is important as most common patterns should come first. Patterns should be\n     * strict in general, and all will be used with case sensitivity on.\n     * </p>\n     * \n     * @param string the string to be searched\n     * @param patterns list of patterns\n     * @return matching pattern",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:preparePredictorPDImage(java.io.ByteArrayOutputStream,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getRenderingIntent()" : "* This will get the rendering intent.\n     *\n     * @return null or the RI value in the dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:<init>(org.apache.pdfbox.cos.COSString,org.apache.pdfbox.pdmodel.PDResources)" : "* Constructor for reading an existing DA string.\n     * \n     * @param defaultResources DR entry\n     * @param defaultAppearance DA entry\n     * @throws IOException If the DA could not be parsed",
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getRectangle()" : "* The rectangle on the page that this bead is part of.\n     *\n     * @return The part of the page that this bead covers.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getAverageFontWidth()" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getOwnerKey()" : "* This will get the O entry in the standard encryption dictionary.\n     *\n     * @return A 32 byte array or null if there is no owner key.\n     *\n     * @throws IOException If there is an error accessing the data.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:showTextWithPositioning(java.lang.Object[])" : "* Shows the given text at the location specified by the current text matrix with the given\n     * interspersed positioning. This allows the user to efficiently position each glyph or sequence\n     * of glyphs.\n     *\n     * @param textWithPositioningArray An array consisting of String and Float types. Each String is\n     * output to the page using the current text matrix. Using the default coordinate system, each\n     * interspersed number adjusts the current text matrix by translating to the left or down for\n     * horizontal and vertical text respectively. The number is expressed in thousands of a text\n     * space unit, and may be negative.\n     *\n     * @throws IOException if an io exception occurs.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:setReferencedObject(org.apache.pdfbox.pdmodel.graphics.PDXObject)" : "* Sets the referenced XObject.\r\n     * \r\n     * @param xobject the referenced XObject",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:saveGraphicsState()" : "* q operator. Saves the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:setZ(float)" : "* Sets the z value of the tristimulus.\n     * @param z the z value for the tristimulus",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLink:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getRawRaster()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Gt:compare(java.lang.Number,java.lang.Number)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getPropertyStringValue(java.lang.String)" : "* Return the properties String value.\n     * <p>\n     * Allows to retrieve the\n     * low level date for validation purposes.\n     * </p> \n     * \n     * @param propertyKey the dictionaries key\n     * @return the properties value",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isAllCap()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:readVerticalDisplacements()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:<init>()" : "* Instantiate a new PDFTextStripper object.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:setPageNumber(int)" : "* Set the page number for a remote destination. For an internal destination, call \n     * {@link #setPage(PDPage) setPage(PDPage page)}.\n     *\n     * @param pageNumber The page for a remote destination.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:parseArrayElement(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:fillRect(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getGroupNames()" : "* Lists all optional content group names.\n     * @return an array of all names",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:encode(int)" : null,
  "org.apache.pdfbox.pdfparser.PDFParser:load(java.io.File,java.lang.String)" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param file file to be loaded\n     * @param password password to be used for decryption\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException in case of a file reading or parsing error\n     * \n     * @deprecated use {@link Loader#loadPDF(File, String)} instead",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getShading()" : null,
  "org.apache.pdfbox.cos.COSFloat:floatValue()" : "* The value of the float object that this one wraps.\n     *\n     * @return The value of this object.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:isEdgeALine(java.awt.geom.Point2D[])" : "* Whether the for control points are on a line.\n     *\n     * @param ctl an edge's control points, the size of ctl is 4\n     * @return true when 4 control points are on a line, otherwise false",
  "org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent:fromString(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:fillAndStroke()" : "* Fill and then stroke the path, using the nonzero winding number rule to determine the region\n     * to fill. This shall produce the same result as constructing two identical path objects,\n     * painting the first with {@link #fill() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShading,org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.multipdf.Splitter:cloneStructureTree(org.apache.pdfbox.pdmodel.PDDocument)" : "* Clone the structure tree from the source to the current destination document. This must be\n     * called after all pages are processed.\n     *\n     * @param destinationDocument\n     * @throws IOException",
  "org.apache.pdfbox.cos.COSString:getBytes()" : "* Returns the raw bytes of the string using a new byte array. Best used with a PDF <i>byte string</i>.\n     * \n     * @return a clone of the underlying byte[] representation of the COSString",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:showText(java.lang.String)" : "* Shows the given text at the location specified by the current text matrix.\n     *\n     * @param text The Unicode text to show.\n     * @throws IOException If an io exception occurs.\n     * @throws IllegalArgumentException if a character isn't supported by the current font",
  "org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:getBounds()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setLine(float[])" : "* This will set start and end coordinates of the line (or leader line if LL entry is set).\n     *\n     * @param l array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:setStyle(java.lang.String)" : "* Sets the numbering style for this page range.\n     * \n     * @param style\n     *            one of the STYLE_* constants or {@code null} if no page\n     *            numbering is desired.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata)" : "* Sets the metadata for this object. This can be null.\n     *\n     * @param meta The meta data for this object.",
  "org.apache.pdfbox.cos.COSDictionary:clear()" : "* This will clear all items in the map.",
  "org.apache.pdfbox.rendering.ImageType$5:toBufferedImageType()" : null,
  "org.apache.pdfbox.pdfparser.PDFObjectStreamParser:privateReadObjectOffsets()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.multipdf.PDFCloneUtility:hasSelfReference(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase)" : "* Check whether an element (of an array or a dictionary) points to its parent.\n     *\n     * @param parent COSArray or COSDictionary\n     * @param value an element",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.text.PDFTextStripper:within(float,float,float)" : "* This will determine of two floating point numbers are within a specified variance.\n     *\n     * @param first The first number to compare to.\n     * @param second The second number to compare to.\n     * @param variance The allowed variance.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:initStyles(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:parsePNGChunks(byte[])" : "* Parse the PNG structure into the PNGConverterState. If we can't handle\n     * something, this method will return null.\n     *\n     * @param imageData the byte array with the PNG data\n     * @return null or the converter state with all relevant chunks",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : "* Constructor creates an instance to be used for fill operations.\n     *\n     * @param shading the shading type to be used\n     * @param colorModel the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setHorizontalScaling(float)" : "* Set the horizontal scaling to scale / 100.\n     *\n     * @param scale number specifying the percentage of the normal width. Default value: 100 (normal\n     * width).\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* This will set the color space for the shading.\n     *\n     * @param colorSpace the color space",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:<init>()" : "* Default constructor, creates blank graphics state.",
  "org.apache.pdfbox.contentstream.operator.graphics.LegacyFillNonZeroRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getPath(int)" : null,
  "org.apache.pdfbox.cos.COSOutputStream:<init>(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.OutputStream,org.apache.pdfbox.io.RandomAccessStreamCache)" : "* Creates a new COSOutputStream writes to an encoded COS stream.\n     * \n     * @param filters Filters to apply.\n     * @param parameters Filter parameters.\n     * @param output Encoded stream.\n     * @param streamCache Stream cache to use.\n     * \n     * @throws IOException If there was an error creating a temporary buffer",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:readColorTable()" : null,
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:isFontSymbolic()" : "* Internal implementation of isSymbolic, allowing for the fact that the result may be indeterminate.\r\n     * \r\n     * @return true if isSymbolic",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:beginOutput(double,double)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setKids(java.util.List)" : "* Set the children of this named tree.\n     *\n     * @param kids The children of this named tree. These have to be in sorted order. Because of\n     * that, it is usually easier to call {@link #setNames(Map)} with a map and pass a single\n     * element list here.",
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.font.encoding.Encoding:contains(int)" : "* Determines if the encoding has a mapping for the given code value.\n     * \n     * @param code character code\n     * @return if the encoding has a mapping for the given code value\n     *",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItemIterator:next()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:getStartPointEndingStyle()" : "* This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section.\n     *\n     * @return The ending style for the start point, LE_NONE if missing, never null.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(int)" : "* This will append raw commands to the content stream.\n     *\n     * @param data Append a raw byte to the stream.\n     * @throws IOException If an error occurs while writing to the stream.\n     * @deprecated Usage of this method is discouraged.",
  "org.apache.pdfbox.pdmodel.PDResources:getIndirect(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* Returns the resource with the given name and kind as an indirect object, or null.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:<init>(boolean)" : "* Constructor providing a parameter to enable/disable the stable object cache.\n     * \n     * @param enableStableCache enables/disables the stable object cache\n     *",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing MarkInfo element.\n     *\n     * @param dic The existing dictionary.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processType3Stream(org.apache.pdfbox.pdmodel.font.PDType3CharProc,org.apache.pdfbox.util.Matrix)" : "* Processes a Type 3 character stream.\n     *\n     * @param charProc Type 3 character procedure\n     * @param textRenderingMatrix the Text Rendering Matrix\n     * @throws IOException if there is an error reading or parsing the character content stream.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getMix()" : "* Gets the flag specifying whether to mix this sound with any other sound already playing. If\n     * this flag is false, any previously playing sound shall be stopped before starting this sound;\n     * this can be used to stop a repeating sound (see Repeat).\n     *\n     * @return whether to mix this sound with any other sound already playing (default: false).",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setU(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the mouse button\n     * is released inside the annotation's active area.\n     * The name U stands for \"up\".\n     *\n     * @param u The action to be performed.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceRGBColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.Loader:loadFDF(java.lang.String)" : "* This will load a document from a file.\n     *\n     * @param filename The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used\n     * to read the file.\n     *\n     * @return The document that was loaded.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:<init>(org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool)" : "* Creates an object stream for compressible objects from the given {@link COSWriterCompressionPool}. The objects\n     * must first be prepared for this object stream, by adding them via calling\n     * {@link COSWriterObjectStream#prepareStreamObject(COSObjectKey, COSBase)} and will be written to this\n     * {@link COSStream}, when {@link COSWriterObjectStream#writeObjectsToStream(COSStream)} is called.\n     *\n     * @param compressionPool The compression pool an object stream shall be created for.",
  "org.apache.pdfbox.text.TextPosition:combineDiacritic(java.lang.String)" : "* Combine the diacritic, for example, convert non-combining diacritic characters to their\n     * combining counterparts.\n     *\n     * @param str String to normalize\n     * @return Normalized string",
  "org.apache.pdfbox.util.DateConverter:toISO8601(java.util.Calendar)" : "* Converts the date to ISO 8601 string format:\n     *     yyyy-mm-ddThh:MM:ss#hh:mm    (where '#\" is '+' or '-').\n     *\n     * @param cal The date to convert.  Must not be null.\n     * The DST_OFFSET is included in the output value.\n     * \n     * @return The date represented as an ISO 8601 string.",
  "org.apache.pdfbox.cos.COSArray:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:addFirstIntermediateCurl(double,double,double,double,double)" : "* Generates the first intermediate curl for a cloudy polygon.",
  "org.apache.pdfbox.pdfparser.BaseParser:isCR(int)" : "* This will tell if the next byte to be read is a carriage return.\n     *\n     * @param c The character to check against carriage return\n     * @return true if the next byte is 0x0D.",
  "org.apache.pdfbox.cos.COSDictionary:getEmbeddedDate(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string. Null is returned if the entry does not exist in the dictionary.\n     *\n     * @param embedded The embedded dictionary to get.\n     * @param key The key to the item in the dictionary.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getCOSObject()" : "* This will get the dictionary associated with this encryption dictionary.\n     *\n     * @return The COS dictionary that this object wraps.",
  "org.apache.pdfbox.cos.COSDocument:getObjectsByType(org.apache.pdfbox.cos.COSName)" : "* This will get all dictionaries objects by type.\n     *\n     * @param type The type of the object.\n     *\n     * @return This will return all objects with the specified type.",
  "org.apache.pdfbox.util.Matrix:<init>(org.apache.pdfbox.cos.COSArray)" : "* Creates a matrix from a 6-element (a b c d e f) COS array.\n     *\n     * @param array source array, elements must be or extend COSNumber",
  "org.apache.pdfbox.pdmodel.PDDocument:getSignatureDictionaries()" : "* Retrieve all signature dictionaries from the document.\n     * \n     * @return a <code>List</code> of <code>PDSignatureField</code>s",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:needsSubset()" : "* Returns true if the font needs to be subset.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:eval(float[])" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font)" : "* Constructor.\n     * \n     * @param fontDictionary The font dictionary according to the PDF specification.\n     * @param parent The parent font.\n     * \n     * @throws IOException if the font could not be read",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:drawTag(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:setValue(java.lang.String)" : "* <b>This will throw an UnsupportedOperationException if used as the signature fields\n     * value can't be set using a String</b>\n     * \n     * @param value the plain text value.\n     * \n     * @throws UnsupportedOperationException in all cases!",
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForLastEOFMarker()" : "* Brute force search for the last EOF marker.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:hasCaption()" : "* This will retrieve whether the text specified by the /Contents or /RC entries shall be\n     * shown as a caption in the appearance of the line.\n     *\n     * @return boolean if the contents shall be shown as a caption (default: false).",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setOS(java.lang.String)" : "* Indicates the operating system. The string format isn't specified yet. Value will be stored\n     * as first item of the array, as specified in PDF Signature Build Dictionary Specification for\n     * PDF v1.7.\n     *\n     * @param os is a string with the system id or name.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.contentstream.operator.state.SetLineCapStyle:getName()" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:getPermissionBytes()" : "* The returns an integer representing the access permissions.\n     * This integer can be used for standard PDF encryption as specified\n     * in the PDF specifications.\n     *\n     * @return the integer representing the access permissions",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decryptArray(org.apache.pdfbox.cos.COSArray,long,long)" : "* This will decrypt an array.\n     *\n     * @param array The array to decrypt.\n     * @param objNum The object number.\n     * @param genNum The object generation number.\n     *\n     * @throws IOException If there is an error accessing the data.",
  "org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getFlag1Edge()" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(float,float,float)" : "* Set the non-stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:setExportValues(java.util.List)" : "* This will set the export values.\n     * \n     * @see #getExportValues()\n     * @param values List containing all possible export values. Supplying null or an empty list will remove the Opt entry.",
  "org.apache.pdfbox.pdmodel.font.encoding.MacOSRomanEncoding:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:toPaint(org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getNumberOfComponents()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:<init>()" : "* Constructor for embedding.",
  "org.apache.pdfbox.pdfparser.FDFParser:parse()" : "* This will parse the stream and populate the FDFDocument object.\n     *\n     * @return the parsed FDFDocument\n     * @throws IOException If there is an error reading from the stream or corrupt data is found.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setRichText(org.apache.pdfbox.cos.COSString)" : "* This will set the rich text value.\n     *\n     * @param rv The rich text value for the stream.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setMaxWidth(float)" : "* This will set the max width for the font.\n     *\n     * @param maxWidth The new max width for the font.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:curveTo2(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using the current point and (x2, y2) as the Bézier control points.\n     *\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IllegalStateException If the method was called within a text block.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setAnnotationName(java.lang.String)" : "* This will set the name, a string intended to uniquely identify each annotation within a page. Not to be confused\n     * with some annotations Name entry which impact the default image drawn for them.\n     * \n     * @param nm The identifying name for the annotation.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:<init>()" : "* Default Constructor.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getPath(int)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:endText()" : "* End some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest endText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:setXRef(org.apache.pdfbox.cos.COSObjectKey,long)" : "* Populate XRef HashMap of current XRef object.\r\n     * Will add an Xreftable entry that maps ObjectKeys to byte offsets in the file.\r\n     * @param objKey The objkey, with id and gen numbers\r\n     * @param offset The byte offset in this file",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setDefaultStyleString(java.lang.String)" : "* Set the default style string.\n     *\n     * Providing null as the value will remove the default style string.\n     *\n     * @param defaultStyleString a string describing the default style.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNumber(java.lang.String)" : "* Gets a number value.\n     * \n     * @param name the attribute name\n     * @return the number value",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:getDeg()" : null,
  "org.apache.pdfbox.multipdf.Overlay:addOriginalContent(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.cos.COSDocument:isEncrypted()" : "* This will tell if this is an encrypted document.\n     *\n     * @return true If this document is encrypted.",
  "org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPointWithProperties:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:setFontSize(float)" : "* Set the font size to be used for formatting.\n     * \n     * @param fontSize the font size.",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor that is used for a preexisting dictionary.\n     *\n     * @param dic The underlying dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSound:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a sound annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : "* Set an extended graphics state.\n     * \n     * @param state The extended graphics state to be added to the content stream\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItemIterator:remove()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getRichContents()" : "* This will retrieve the rich text stream which is displayed in the popup window.\n     *\n     * @return the rich text stream.",
  "org.apache.pdfbox.text.PDFTextStripper:setSpacingTolerance(float)" : "* Set the space width-based tolerance value that is used to estimate where spaces in text should be added. Note\n     * that the default value for this has been determined from trial and error. Setting this value larger will reduce\n     * the number of spaces added.\n     * \n     * @param spacingToleranceValue tolerance / scaling factor to use",
  "org.apache.pdfbox.pdmodel.PDDocument:getDocumentId()" : "* Provides the document ID. This is not the trailer document ID but the time used to create it.\n     * Use {@link COSDocument#getDocumentID()} for the trailer document ID. Read\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-1613\">PDFBOX-1613</a> for more details\n     * about the purpose.\n     *\n     * @return the document ID",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:toString()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setSoftMask(org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask)" : "* Sets the current soft mask\n     *\n     * @param softMask soft mask",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getLineCapStyle()" : "* This will get the line cap style.\n     *\n     * @return null or the LC value of the dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:toRGB(float[])" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:getBackground()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setBackground(org.apache.pdfbox.cos.COSArray)" : "* This will set the background.\n     *\n     * @param newBackground the new background",
  "org.apache.pdfbox.pdmodel.PDDocument:addSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)" : "* Add parameters of signature to be created externally using default signature options. See\n     * {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external\n     * signature creation scenario details.\n     * <p>\n     * Only one signature may be added in a document. To sign several times,\n     * load document, add signature, save incremental and close again.\n     *\n     * @param sigObject is the PDSignatureField model\n     * @throws IOException if there is an error creating required fields\n     * @throws IllegalStateException if one attempts to add several signature\n     * fields.",
  "org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getObjectStreamIndex()" : "* Returns the index of the {@link COSObject} in it's containing object stream.\n     *\n     * @return The index of the {@link COSObject} in it's containing object stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBaselineShift(int)" : "* Sets the distance by which the element’s baseline shall be shifted\n     * relative to that of its parent element (BaselineShift).\n     * \n     * @param baselineShift the baseline shift",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:lineTo(float,float)" : "* Draw a line from the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setCacheFields(boolean)" : "* This will tell this form to cache the fields into a Map structure\n     * for fast access via the getField method.  The default is false.  You would\n     * want this to be false if you were changing the COSDictionary behind the scenes,\n     * otherwise setting this to true is acceptable.\n     *\n     * @param cache A boolean telling if we should cache the fields.",
  "org.apache.pdfbox.cos.COSDictionary:getLong(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned\n     * if there is no value.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The long value.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextDecorationColor()" : "* Gets the colour to be used for drawing text decorations\n     * (TextDecorationColor).\n     * \n     * @return the text decoration colour",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getNormalAppearanceStream()" : "* Returns the appearance stream for this annotation, if any. The annotation state is taken into account, if\n     * present.\n     * \n     * @return the appearance stream",
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:getCOSObject()" : "* This will get the dictionary associated with this crypt filter dictionary.\n     *\n     * @return The COS dictionary that this object wraps.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:evalFunctionAndConvertToRGB(float[])" : "* Convert color to RGB color value, using function if required, then convert from the shading\n     * color space to an RGB value, which is encoded into an integer.",
  "org.apache.pdfbox.pdmodel.PDResources:hasColorSpace(org.apache.pdfbox.cos.COSName)" : "* Returns true if the given color space name exists in these resources.\r\n     *\r\n     * @param name Name of the color space resource.\r\n     * @return true if the given color space name exists in these resources, otherwise false",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:moveTo(float,float)" : "* Move the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:getAlternateName()" : "* Gets the alternate name of the field (Desc).\n     * \n     * @return the alternate name of the field",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)" : "* The Tm operator. Sets the text matrix to the given values.\n     * A current text matrix will be replaced with the new one.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteXRefInc(org.apache.pdfbox.cos.COSDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getD()" : "* This will get the string specifying the default directory in standard DOS syntax.\n     *\n     * @return The D entry of the specific Windows launch parameter dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setMatrix(java.awt.geom.AffineTransform)" : "* Sets the optional Matrix entry for the form XObject.\n     * @param transform the transformation matrix",
  "org.apache.pdfbox.text.TextPosition:getIndividualWidths()" : "* Get the widths of each individual character.\n     *\n     * @return An array that has the same length as the CharacterCodes array.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawCrossHairs(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.text.PDFTextStripper$LineItem:getWordSeparator()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:<init>()" : "* Default Constructor",
  "org.apache.pdfbox.pdfparser.COSParser:checkPages(org.apache.pdfbox.cos.COSDictionary)" : "* Check if all entries of the pages dictionary are present. Those which can't be dereferenced are removed.\n     * \n     * @param root the root dictionary of the pdf\n     * @throws java.io.IOException if the page tree root is null",
  "org.apache.pdfbox.pdmodel.common.PDStream:internalGetDecodeParams(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.common.PDRectangle:getUpperRightX()" : "* This will get the upper right x coordinate.\n     *\n     * @return The upper right x .",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getContentStream()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:getOwnerUserProperties()" : "* Returns the user properties.\n     * \n     * @return the user properties",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:setMatrix(org.apache.pdfbox.util.Matrix)" : "* Sets the linear interpretation matrix.\n     * Passing in null will clear the matrix.\n     * @param matrix the new linear interpretation matrix, or null",
  "org.apache.pdfbox.filter.FlateFilterDecoderStream:read()" : "* This will read the next byte from the stream.\n     *\n     * @return The next byte read from the stream.\n     *\n     * @throws IOException If there is an error reading from the wrapped stream.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:isVertical()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.CoordinateColorPair:<init>(java.awt.geom.Point2D,float[])" : "* Constructor.\n     *\n     * @param p point\n     * @param c color",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:potentiallyNotifyChanged(java.lang.Object,java.lang.Object)" : "* Notifies the user attribute object if the user property is changed.\n     * \n     * @param oldEntry old entry\n     * @param newEntry new entry",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getNumberOfComponents()" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\r\n     * \r\n     * @param dictionary the corresponding dictionary",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:decode2D()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:setFontDescriptor(org.apache.pdfbox.pdmodel.font.PDFontDescriptor)" : "* Sets the font descriptor when embedding a font.\n     *\n     * @param fontDescriptor font descriptor of the embedded font",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:<init>()" : "* Constructor for embedding.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setCreationDate(java.util.Calendar)" : "* This will set the date and time the annotation was created.\n     *\n     * @param creationDate the date and time the annotation was created.",
  "org.apache.pdfbox.util.Matrix:concatenate(org.apache.pdfbox.util.Matrix)" : "* Concatenates (premultiplies) the given matrix to this matrix.\n     *\n     * @param matrix The matrix to concatenate.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getX()" : "* This will get an action to be performed when the cursor\n     * exits the annotation's active area.\n     *\n     * @return The X entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getStructureElement()" : "* Get the structure element of this node.\n     *\n     * @return The structure element of this node.",
  "org.apache.pdfbox.cos.COSDocument:getStreamCache(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineJoinStyle(int)" : "* Set the line join style.\n     *\n     * @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line join style.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setLineDashPattern(float[],float)" : "* Set the line dash pattern.\n     *\n     * @param pattern The pattern array\n     * @param phase The phase of the pattern\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.text.PDFTextStripper:startPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Start a new page. Default implementation is to do nothing. Subclasses may provide additional information.\n     *\n     * @param page The page we are about to process.\n     *\n     * @throws IOException If there is any error writing to the stream.",
  "org.apache.pdfbox.contentstream.operator.state.SetLineCapStyle:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRun(org.apache.pdfbox.filter.CCITTFaxDecoderStream$Tree)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:endMarkedContentSequence()" : null,
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:saslPrepStored(java.lang.String)" : "* Return the {@code SASLPrep}-canonicalised version of the given\n     * @code str} for use as a stored string. This implements the {@code SASLPrep} algorithm defined\n     * in\n     * <a href=\"https://tools.ietf.org/html/rfc4013\">RFC 4013</a>.\n     *\n     * @param str The string to canonicalise.\n     * @return The canonicalised string.\n     * @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the\n     * requirements for bidirectional character handling.\n     * @see <a href=\"https://tools.ietf.org/html/rfc3454#section-7\">RFC 3454, Section 7</a> for\n     * discussion of what a stored string is.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setAttributes(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions)" : "* Sets the attributes together with their revision numbers (A).\n     * \n     * @param attributes the attributes",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:initCallout(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:setDefaultStyleString(java.lang.String)" : "* Set the default style string.\n     * \n     * Providing null as the value will remove the default style string.\n     * \n     * @param defaultStyleString a string describing the default style.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setScope(java.lang.String)" : "* Sets the scope (Scope). It shall reflect whether the header cell applies\n     * to the rest of the cells in the row that contains it, the column that\n     * contains it, or both the row and the column that contain it. The value\n     * shall be one of the following:\n     * <ul>\n     *   <li>{@link #SCOPE_ROW},</li>\n     *   <li>{@link #SCOPE_COLUMN}, or</li>\n     *   <li>{@link #SCOPE_BOTH}.</li>\n     * </ul>\n     * \n     * @param scope the scope",
  "org.apache.pdfbox.contentstream.operator.graphics.EndPath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isItalic()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:setFontColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Set the font color.\n     * \n     * @param fontColor the fontColor to use.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:<init>(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.PDResources)" : "* Creates an Image XObject with the given stream as its contents and current color spaces. This\r\n     * constructor is for internal PDFBox use and is not for PDF generation. Users who want to\r\n     * create images should look at {@link #createFromFileByExtension(File, PDDocument) }.\r\n     *\r\n     * @param stream the XObject stream to read\r\n     * @param resources the current resources",
  "org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:writeLineSeparator()" : "* Write the line separator value to the output stream.\n     * \n     * @throws IOException If there is a problem writing out the line separator to the document.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:<init>(org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy)" : "* Constructor used for encryption.\n     *\n     * @param standardProtectionPolicy The protection policy.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(java.awt.Color)" : "* Set the stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:getShading()" : "* This will get the shading resources for this pattern.\n     * @return The shading resources for this pattern.\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processOperator(java.lang.String,java.util.List)" : "* This is used to handle an operation.\n     * \n     * @param operation The operation to perform.\n     * @param arguments The list of arguments.\n     * @throws IOException If there is an error processing the operation.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:usesUserProperties()" : "* Tells if structure elements use user properties.\n     *\n     * @return A boolean telling if the structure elements use user properties.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getBitsPerComponent()" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setPerms(byte[])" : "* Set the Perms entry in the encryption dictionary.\n     *\n     * @param perms A 16 byte array.\n     *\n     * @throws IOException If there is an error setting the data.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getCOSObject()" : null,
  "org.apache.pdfbox.util.IterativeMergeSort:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:isFill()" : "* Returns true if this mode fills text.\r\n     * \r\n     * @return true if this mode fills text",
  "org.apache.pdfbox.util.Matrix:getScaleY()" : "* Returns the y-scaling element of this matrix.\n     *\n     * @see #getScalingFactorY()\n     * \n     * @return the y-scaling element of the matrix",
  "org.apache.pdfbox.pdfparser.xref.FreeXReference:getReferencedKey()" : "* Returns the {@link COSObjectKey} of the object, that is described by this crossreference stream entry.\n     *\n     * @return The {@link COSObjectKey} of the object, that is described by this crossreference stream entry.",
  "org.apache.pdfbox.cos.COSDocument:isXRefStream()" : "* Determines if the trailer is a XRef stream or not.\n     * \n     * @return true if the trailer is a XRef stream",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setHeight(int)" : "* Sets the height of the element’s content rectangle in the\n     * block-progression direction (Height).\n     * \n     * @param height the height",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getFieldTree()" : "* Return the field tree representing all form fields\n     * \n     * @return the field tree representing all form fields",
  "org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float,int)" : "* Creates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata.\r\n     * <p>\r\n     * Do not read a JPEG image from a stream/file and call this method; you'll get more speed and\r\n     * quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument,\r\n     * java.io.InputStream) createFromStream()} instead.\r\n     * \r\n     * @param document the document where the image will be created\r\n     * @param image the BufferedImage to embed\r\n     * @param quality The desired JPEG compression quality; between 0 (best\r\n     * compression) and 1 (best image quality). See\r\n     * {@link ImageWriteParam#setCompressionQuality(float)} for more details.\r\n     * @param dpi the desired dpi (resolution) value of the JPEG to be stored in metadata. This\r\n     * value has no influence on image content or size.\r\n     * @return a new Image XObject\r\n     * @throws IOException if the JPEG data cannot be written",
  "org.apache.pdfbox.cos.COSDictionary:getString(java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be a\n     * string. Null is returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:restoreGraphicsState()" : "* Q operator. Restores the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isNoZoom()" : "* Get the noZoom flag.\n     * \n     * @return The noZoom flag.",
  "org.apache.pdfbox.pdfparser.PDFStreamParser:parseNextToken()" : "* This will parse the next token in the stream.\n     *\n     * @return The next token in the stream or null if there are no more tokens in the stream.\n     *\n     * @throws IOException If an io error occurs while parsing the stream.",
  "org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:isPreferAES()" : "* Tell whether AES encryption is preferred when several encryption methods are available for\n     * the chosen key length. The default is false. This setting is only relevant if the key length\n     * is 128 bits.\n     *\n     * @return true if AES encryption is preferred",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setPageLabels(org.apache.pdfbox.pdmodel.common.PDPageLabels)" : "* Sets the page label descriptor for the document.\n     *\n     * @param labels the new page label descriptor to set.",
  "org.apache.pdfbox.pdmodel.PDPageTree:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for reading.\r\n     *\r\n     * @param root A page tree root.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the rectangle for this annotation.\n     * \n     * @param rectangle The new rectangle values.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getPatchCoordinatesColor()" : null,
  "org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequenceWithProperties:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:doWriteSignature()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Vertex:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor from an existing destination array.\n     *\n     * @param arr The destination array.",
  "org.apache.pdfbox.pdmodel.PDDocument:checkSignatureAnnotation(java.util.List,org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)" : "* Check if the widget already exists in the annotation list.\n     *\n     * @param annotations the list of PDAnnotation fields.\n     * @param widget the annotation widget.\n     * @return true if the widget already existed in the annotation list, false if not.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:getTop()" : "* Get the top y coordinate.  A return value of -1 implies that the current y-coordinate\n     * will be used.\n     *\n     * @return The top y coordinate.",
  "org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:getEncodingName()" : null,
  "org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Orientation,boolean)" : "* Creates a new PDFPageable with the given page orientation and with optional page borders\n     * shown.\n     *\n     * @param document the document to print\n     * @param orientation page orientation policy\n     * @param showPageBorder true if page borders are to be printed",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setBorderStyle(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)" : "* This will set the border style dictionary, specifying the width and dash pattern used in drawing the line.\n     *\n     * @param bs the border style dictionary to set.\n     *",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:addComment(java.lang.String)" : "* Write a comment line.\n     *\n     * @param comment the comment to be added to the content stream\n     * \n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line\n     * could be ordinary PDF content.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:newLineAtOffset(float,float)" : "* The Td operator.\n     * Move to the start of the next line, offset from the start of the current line by (tx, ty).\n     *\n     * @param tx The x translation.\n     * @param ty The y translation.\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:setHighValue(int)" : "* Sets the highest value that is allowed. This cannot be higher than 255.\n     * @param high the highest value for the lookup table",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:getSubType()" : "* This will get the type of action that the actions dictionary describes.\n     *\n     * @return The S entry of actions dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontFile3(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Set a stream containing a font program that is not true type or type 1.\n     *\n     * @param stream The font program stream.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:fitBoundingBox()" : "* A flag indicating if this page destination should just fit bounding box of the PDF.\n     *\n     * @return true If the destination should fit just the bounding box.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setDigestMethod(java.util.List)" : "* <p>(Optional, PDF 1.7) An array of names indicating acceptable digest\n     * algorithms to use when signing. The value shall be one of <b>SHA1</b>,\n     * <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default\n     * value is implementation-specific.</p>\n     *\n     * <p>This property is only applicable if the digital credential signing contains RSA\n     * public/privat keys</p>\n     *\n     * @param digestMethod is a list of possible names of the digests, that should be\n     * used for signing.",
  "org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Copy:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setPageMode(org.apache.pdfbox.pdmodel.PageMode)" : "* Sets the page mode.\n     *\n     * @param mode The new page mode.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setPermissions(int)" : "* This will set the permissions bit mask.\n     *\n     * @param permissions The new permissions bit mask",
  "org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:calculateInputValues(double,double)" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setChangeXs(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])" : "* This will set the changes along the x-axis.\r\n     * \r\n     * @param changeXs changes along the x-axis",
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getRawRaster(org.apache.pdfbox.pdmodel.graphics.image.PDImage)" : "* Extract the raw unconverted raster of the given image\r\n     * @param pdImage  The image to get the raw raster data from\r\n     * @return the raw raster of this image\r\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:setPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Set the page for a local destination. For an external destination, call {@link #setPageNumber(int) setPageNumber(int pageNumber)}.\n     *\n     * @param page The page for a local destination.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBlockAlign()" : "* Gets the alignment, in the block-progression direction, of content within\n     * the table cell (BlockAlign). The default value is\n     * {@link #BLOCK_ALIGN_BEFORE}.\n     * \n     * @return the block alignment",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:isGrayImage(java.awt.image.BufferedImage)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:read(byte[])" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSString(java.io.OutputStream,org.apache.pdfbox.cos.COSString)" : "* Write the given {@link COSString} to the given stream.\n     *\n     * @param output The stream, that shall be written to.\n     * @param cosString The content, that shall be written.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type6ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)" : "* Constructor creates an instance to be used for fill operations.\n     *\n     * @param shading the shading type to be used\n     * @param colorModel the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @param deviceBounds device bounds\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.PDDocument:getPages()" : "* Returns the page tree.\n     * \n     * @return the page tree",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1,org.apache.pdfbox.util.Matrix)" : "* Constructor.\n     *\n     * @param shading the shading resources\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.rendering.PageDrawer:showTransparencyGroupOnGraphics(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup,java.awt.Graphics2D)" : "* For advanced users, to extract the transparency group into a separate graphics device.\r\n     * \r\n     * @param form the transparency group to be extracted\r\n     * @param graphics the target graphics device\r\n     * @throws IOException if the transparency group could not be extracted",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadingPaint:getShading()" : "* @return the PDShading of this paint",
  "org.apache.pdfbox.pdmodel.encryption.MessageDigests:getSHA256()" : "* @return SHA-256 message digest",
  "org.apache.pdfbox.pdmodel.PDPage:getContentsForStreamParsing()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:setEndPointEndingStyle(java.lang.String)" : "* This will set the line ending style for the end point, see the LE_ constants for the possible values.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.cos.COSObjectKey:equals(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.PlainText:getParagraphs()" : "* Get the list of paragraphs.\n     * \n     * @return the paragraphs.",
  "org.apache.pdfbox.cos.COSIncrement:iterator()" : "* Return an iterator for the determined {@link #objects} contained in this {@link COSIncrement}.\n     *\n     * @return An iterator for the determined {@link #objects} contained in this {@link COSIncrement}.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:isVertical()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:getPageStart()" : "* Returns the string which will be used at the beginning of a page.\n     * \n     * @return the page start string",
  "org.apache.pdfbox.rendering.PageDrawer:shadingFill(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setStructureElement(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement)" : "* Set the structure element for this node.\n     *\n     * @param structureElement The new structure element for this node.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getTextKnockoutFlag()" : "/**\n     * This will get the text knockout flag.\n     *\n     * @return The text knockout flag.",
  "org.apache.pdfbox.util.Matrix:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getInnerFormStream()" : "* Gets Inner form Stream.\n     * @return the inner form stream",
  "org.apache.pdfbox.pdmodel.PDPage:getAnnotations()" : "* This will return a list of the annotations for this page.\n     *\n     * @return List of the PDAnnotation objects, never null. The returned list is backed by the\n     * annotations COSArray, so any adding or deleting in this list will change the document too.\n     * \n     * @throws IOException If there is an error while creating the annotation list.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:searchNearestValue(java.util.List,long)" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getFont(org.apache.pdfbox.cos.COSName)" : "* Returns the font resource with the given name, or null if none exists.\r\n     *\r\n     * @param name Name of the font resource.\r\n     * @return the font with the given name or null\r\n     * \r\n     * @throws IOException if something went wrong.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setLockedContents(boolean)" : "* Set the LockedContents flag.\n     * \n     * @param lockedContents The new LockedContents flag.",
  "org.apache.pdfbox.cos.COSInteger:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* visitor pattern double dispatch method.\n     *\n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If an error occurs while visiting this object.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getThreads()" : "* Returns the document's article threads.\n     * \n     * @return a list of all threads of the document",
  "org.apache.pdfbox.cos.COSDocument:getDocumentID()" : "* This will get the document ID.\n     *\n     * @return The document id.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:interpolate(float,long,float,float)" : "* Calculate the interpolation, see p.345 pdf spec 1.7.\n     *\n     * @param src src value\n     * @param srcMax max src value (2^bits-1)\n     * @param dstMin min dst value\n     * @param dstMax max dst value\n     * @return interpolated value",
  "org.apache.pdfbox.contentstream.operator.graphics.CurveTo:getName()" : null,
  "org.apache.pdfbox.rendering.PageDrawer:hasBlendMode(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup,java.util.Set)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setAlphaSource(boolean)" : "* set the value of the alpha source property.\n     *\n     * @param value The value of the alpha source parameter.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators:<init>()" : null,
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:getLastTrailer()" : "* Returns the last trailer if at least one exists.\r\n     * \r\n     * @return the last trailer ir null",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getParent()" : "* Get the parent field to this field, or null if none exists.\n     * \n     * @return The parent field.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setLabelPositionToValue(java.lang.String)" : "* This will set the value indicating the ordering of the label specified by U to the calculated\r\n     * unit value. Possible values are \"S\", \"P\" and null.\r\n     *\r\n     * @param labelPositionToValue label position",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.common.PDRectangle:createRetranslatedRectangle()" : "* This will create a translated rectangle based off of this rectangle, such\n     * that the new rectangle retains the same dimensions(height/width), but the\n     * lower left x,y values are zero. <br>\n     * 100, 100, 400, 400 (llx, lly, urx, ury ) <br>\n     * will be translated to 0,0,300,300\n     *\n     * @return A new rectangle that has been translated back to the origin.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,java.io.OutputStream)" : "* Create a new appearance stream.\n     *\n     * @param appearance\n     *            The appearance stream to add to.\n     * @param outputStream\n     *            The appearances output stream to write to.",
  "org.apache.pdfbox.text.TextPosition:<init>(int,float,float,org.apache.pdfbox.util.Matrix,float,float,float,float,float,java.lang.String,int[],org.apache.pdfbox.pdmodel.font.PDFont,float,int)" : "* Constructor.\n     *\n     * @param pageRotation rotation of the page that the text is located in\n     * @param pageWidth width of the page that the text is located in\n     * @param pageHeight height of the page that the text is located in\n     * @param textMatrix text rendering matrix for start of text (in display units)\n     * @param endX x coordinate of the end position\n     * @param endY y coordinate of the end position\n     * @param maxHeight Maximum height of text (in display units)\n     * @param individualWidth The width of the given character/string. (in text units)\n     * @param spaceWidth The width of the space character. (in display units)\n     * @param unicode The string of Unicode characters to be displayed.\n     * @param charCodes An array of the internal PDF character codes for the glyphs in this text.\n     * @param font The current font for this text position.\n     * @param fontSize The new font size.\n     * @param fontSizeInPt The font size in pt units (see {@link #getFontSizeInPt()} for details).",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:readEncodingFromFont()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isHidden()" : "* Get the hidden flag.\n     *\n     * @return The hidden flag.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createInputStream(org.apache.pdfbox.filter.DecodeOptions)" : null,
  "org.apache.pdfbox.contentstream.operator.text.MoveText:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setComb(boolean)" : "* Set the comb bit.\n     *\n     * @param comb The value for the comb.",
  "org.apache.pdfbox.util.Matrix:rotate(double)" : "* Rotates this matrix by the given factors.\n     *\n     * @param theta The angle of rotation measured in radians",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontWeight(float)" : "* Set the weight of the font.\n     *\n     * @param fontWeight The new weight of the font.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:handleBorderBox(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle,float)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getCheckSum()" : "* Get the check sum of the embedded file.\n     *\n     * @return The check sum of the file.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getStrokingJavaComposite()" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getCOSObject()" : "* This will get the underlying dictionary that this object wraps.\n     *\n     * @return The underlying info dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getBytesFromPacket(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdfparser.COSParser:parseFileObject(java.lang.Long,org.apache.pdfbox.cos.COSObjectKey)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getSecureRandom()" : "* Returns a SecureRandom If customSecureRandom is not defined, instantiate a new SecureRandom\n     * \n     * @return SecureRandom",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImage()" : "* Gets the image of visible signature\n     * @return the image making up the visible signature",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeObjectReference(java.io.OutputStream,org.apache.pdfbox.cos.COSObjectKey)" : "* Write the given {@link COSObjectKey} to the given stream.\n     *\n     * @param output The stream, that shall be written to.\n     * @param indirectReference The content, that shall be written.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setInlineAlign(java.lang.String)" : "* Sets the alignment, in the inline-progression direction, of content\n     * within the table cell (InlineAlign). The value should be one of\n     * <ul>\n     *   <li>{@link #INLINE_ALIGN_START},</li>\n     *   <li>{@link #INLINE_ALIGN_CENTER},</li>\n     *   <li>{@link #INLINE_ALIGN_END}.</li>\n     * </ul>\n     * \n     * @param inlineAlign the inline alignment",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImageName()" : "* Gets visible signature image name\n     * @return the visible signature's image name",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getOwnerEncryptionKey()" : "* This will get the OE entry in the standard encryption dictionary.\n     *\n     * @return A 32 byte array or null if there is no owner encryption key.\n     *\n     * @throws IOException If there is an error accessing the data.",
  "org.apache.pdfbox.filter.MissingImageReaderException:<init>(java.lang.String)" : null,
  "org.apache.pdfbox.rendering.PageDrawer:beginMarkedContentSequence(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node to be created",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getCreationDate()" : "* Get the creation date of the embedded file.\n     *\n     * @return The Creation date.\n     * @throws IOException If there is an error while constructing the date.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setResources(org.apache.pdfbox.pdmodel.PDResources)" : "* This will set the resources for this pattern.\n     * @param resources The new resources for this pattern.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getImage()" : "* {@inheritDoc}\r\n     * The returned images are cached via a SoftReference.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:clipToRect(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Transforms the given rectangle using the CTM and then intersects it with the current\n     * clipping area.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:getInteriorColor()" : "* This will retrieve the interior color.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getTitle()" : "* This will get the title of the document.  This will return null if no title exists.\n     *\n     * @return The title of the document.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setToggleNoView(boolean)" : "* Set the toggleNoView flag.\n     *\n     * @param toggleNoView The new toggleNoView flag.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:load(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.pdmodel.font.encoding.Encoding)" : "* Loads a TTF to be embedded into a document as a simple font.\n     * \n     * <p>\n     * <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use\n     * {@link PDType0Font#load(PDDocument, File)} instead.\n     * </p>\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param randomAccessRead the source of the TTF.\n     * @param encoding The PostScript encoding vector to be used for embedding.\n     * @return a PDTrueTypeFont instance.\n     * @throws IOException If there is an error loading the data.",
  "org.apache.pdfbox.pdfwriter.compress.COSObjectPool:getKey(org.apache.pdfbox.cos.COSBase)" : "* Returns the {@link COSObjectKey} for a given registered {@link COSBase}. Returns null if such an object is not\n     * registered.\n     *\n     * @param object The {@link COSBase} a {@link COSObjectKey} shall be determined for.\n     * @return key The {@link COSObjectKey}, that matches the registered {@link COSBase}, or null if such an object is\n     * not registered.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getIntent()" : "* This will retrieve the intent of the annotation The values and meanings are specific to the actual annotation See\n     * the IT_* constants for the annotation classes.\n     *\n     * @return the intent",
  "org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSubsamplingOffsetX(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:getFlag1Color()" : "* Get the implicit color for flag = 1.\n     *\n     * @return color",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:setPDPropBuildFilter(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict)" : "* Set the build data dictionary for the signature handler.\n     * This entry is optional but is highly recommended for the signatures.\n     *\n     * @param filter is the PDPropBuildFilter",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getOptionsExportValues()" : "* This will get the export values from the options.\n     * \n     * <p>\n     * For options with an array of text strings the display value and export value\n     * are the same.<br>\n     * For options with an array of two-element arrays the export value is the \n     * first entry in the two-element array.\n     * </p>\n     *\n     * @return List containing all export values.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:setB(org.apache.pdfbox.cos.COSBase)" : "* @param b The destination.",
  "org.apache.pdfbox.pdmodel.common.PDStream:getFile()" : "* This will get the file specification for this stream. This is only\n     * required for external files.\n     * \n     * @return The file specification.\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:<init>()" : "* Creates a new line dash pattern, with no dashes and a phase of 0.",
  "org.apache.pdfbox.contentstream.operator.text.BeginText:getName()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:getPattern(org.apache.pdfbox.cos.COSName)" : "* Returns the pattern resource with the given name, or null if none exists.\r\n     * \r\n     * @param name Name of the pattern resource.\r\n     * @return the pattern with the given name or null\r\n     * \r\n     * @throws IOException if something went wrong.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setNoView(boolean)" : "* Set the noView flag.\n     *\n     * @param noView The new noView flag.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getWidthFromFont(int)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawShape(float,boolean,boolean)" : "* Draw a shape.\n     *\n     * <p>\n     * Dependent on the lineWidth and whether or not there is a background to be generated there are\n     * different commands to be used for draw a shape.\n     *\n     * @param lineWidth the line width of the path.\n     * @param hasStroke shall there be a stroking color.\n     * @param hasFill shall there be a fill color.\n     * @throws IOException If there is an error writing to the content stream.",
  "org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setLineWidth(float)" : "* Set line width to the given value.\n     *\n     * @param lineWidth The width which is used for drawing.\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getMissingWidth()" : "* This will get the missing width for the font from the /MissingWidth dictionary entry.\n     *\n     * @return The missing width value, or 0 if there is no such dictionary entry.",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:write(int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setStartPointEndingStyle(java.lang.String)" : "* This will set the line ending style for the start point, see the LE_ constants for the possible values.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)" : "* Set the font and font size to draw text with.\n     *\n     * @param font The font to use.\n     * @param fontSize The font size to draw the text.\n     * @throws IOException If there is an error writing the font information.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setBorderEffect(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary)" : "* This will set the border effect dictionary, specifying effects to be applied when drawing the\n     * line. This is supported by PDF 1.6 and higher.\n     *\n     * @param be The border effect dictionary to set.\n     *",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:createFromCOSObject(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.PDResources)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing structure element.\n     *\n     * @param dic The existing dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:getObjects()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getColorSpace()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:removeBackdrop(java.awt.image.BufferedImage,int,int)" : "* Computes backdrop removal.\n     * The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008\n     * standard. It returns the final color <code>C</code> for each pixel in the group:<br>\n     *     <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br>\n     * where<br>\n     *     <code>Cn</code> is the group color including backdrop (read from <code>groupImage</code>),<br>\n     *     <code>C0</code> is the backdrop color,<br>\n     *     <code>alpha0</code> is the backdrop alpha,<br>\n     *     <code>alphagn</code> is the group alpha excluding backdrop (read the\n     *           alpha channel from <code>groupAlphaImage</code>)<br>\n     * <p>\n     * The alpha of the result is equal to <code>alphagn</code>, i.e., the alpha\n     * channel of <code>groupAlphaImage</code>.\n     * <p>\n     * The <code>backdrop</code> image may be much larger than <code>groupImage</code> if,\n     * for example, the current page is used as the backdrop. Only a specific rectangular\n     * region of <code>backdrop</code> is used in the backdrop removal: upper-left corner\n     * is at <code>(offsetX, offsetY)</code>; width and height are equal to those of\n     * <code>groupImage</code>.\n     *\n     * @param backdrop group backdrop\n     * @param offsetX backdrop left X coordinate\n     * @param offsetY backdrop upper Y coordinate",
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:getVersion()" : "* This will get the version that was specified in the catalog dictionary.\n     *\n     * @return The FDF version.",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:isStandard14()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:fill()" : "* Fills the path using the nonzero winding number rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setRichText(org.apache.pdfbox.cos.COSStream)" : "* This will set the rich text value.\n     *\n     * @param rv The rich text value for the stream.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:isEmpty()" : null,
  "org.apache.pdfbox.pdmodel.encryption.RC4Cipher:write(byte[],java.io.OutputStream)" : "* This will encrypt and write the data.\n     *\n     * @param data The data to encrypt.\n     * @param output The stream to write to.\n     *\n     * @throws IOException If there is an error writing to the output stream.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setShadingType(int)" : "* This will set the shading type.\n     *\n     * @param shadingType the new shading type",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColorOnDemand(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Set the stroking color.\n     * \n     * <p>\n     * The command is only emitted if the color is not null and the number of components is &gt; 0.\n     * \n     * @param color The colorspace to write.\n     * @return true if the stroking color was set successfully\n     * \n     * @throws IOException If there is an error writing to the content stream.\n     * @see PDAbstractContentStream#setStrokingColor(PDColor)",
  "org.apache.pdfbox.contentstream.operator.graphics.ClosePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.cos.COSStream:getLength()" : "* Returns the length of the encoded stream.\n     *\n     * @return length in bytes",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the stroking color and, if necessary, the stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getSummary()" : "* Gets the summary of the table’s purpose and structure.\n     * \n     * @return the summary",
  "org.apache.pdfbox.pdmodel.font.PDFont:loadUnicodeCmap()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:setOutputConditionIdentifier(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getBorderColour()" : "* This will retrieve the border color.\n     * \n     * @return the border color.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:getFontsToSubset()" : "* Returns the list of fonts which will be subset before the document is saved.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getColor()" : "* Gets the color to be used for drawing text and the default value for the\n     * colour of table borders and text decorations (Color).\n     * \n     * @return the colour",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getTemplate()" : "* Gets PDDocument template.\n     * This represents a digital signature\n     *  that can be attached to a document\n     * @return the template",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:appendKid(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent)" : "* Appends a marked-content sequence kid.\n     * \n     * @param markedContent the marked-content sequence with the MCID.\n     * @throws IllegalArgumentException if the mcid is negative or doesn't exist.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:appendKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference)" : "* Appends an object reference kid.\n     * \n     * @param objectReference the object reference",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setStencil(boolean)" : null,
  "org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSubsamplingY(int)" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:writeDictionary(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getLastChild()" : "* @return The last child or null if there is no child.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:setPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Sets the page on which the object shall be rendered. This is optional and overrides the /PG\r\n     * entry in the structure element containing the object reference; shall be used if the\r\n     * structure element contained no such entry.\r\n     *\r\n     * @param page",
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:getPrefix()" : "* Returns the page label prefix for this page range.\n     * \n     * @return the page label prefix for this page range, or {@code null} if no\n     *         prefix has been defined.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRow()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setSummary(java.lang.String)" : "* Sets the summary of the table’s purpose and structure.\n     * \n     * @param summary the summary",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.util.Matrix:getScalingFactorY()" : "* Returns the y-scaling factor of this matrix. This is calculated from the scale and shear.\n     *\n     * @return The y-scaling factor.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setSummary(java.lang.String)" : "* Sets the summary of the table’s purpose and structure.\n     * \n     * @param summary the summary",
  "org.apache.pdfbox.pdmodel.PDResources:get(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* Returns the resource with the given name and kind, or null.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getValueAsString()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setStartIndent(float)" : "* Sets the distance from the start edge of the reference area to that of\n     * the BLSE in the inline-progression direction (StartIndent).\n     * \n     * @param startIndent the start indent",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:getWidgets()" : "* Returns the widget annotations associated with this field.\n     *\n     * @return The list of widget annotations. Be aware that this list is <i>not</i> backed by the\n     * actual widget collection of the field, so adding or deleting has no effect on the PDF\n     * document until you call {@link #setWidgets(java.util.List) setWidgets()} with the modified\n     * list.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getContentStream()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext:dispose()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isLeftAttached()" : "* Is the artifact attached to the left edge?\n     * \n     * @return <code>true</code> if the artifact is attached to the left edge,\n     * <code>false</code> otherwise",
  "org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeTokens(java.util.List)" : "* This will write out the list of tokens to the stream.\n     *\n     * @param tokens The tokens to write to the stream.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFontEmbedder:setWidths(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.encoding.GlyphList)" : "* Sets the glyph widths in the font dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getFontBoxFont()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:getDestination()" : "* This will get the destination to jump to.\n     *\n     * @return The D entry of the specific go-to action dictionary.\n     *\n     * @throws IOException If there is an error creating the destination.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getPanose()" : null,
  "org.apache.pdfbox.rendering.SoftMask$SoftPaintContext:getRaster(int,int,int,int)" : null,
  "org.apache.pdfbox.cos.COSDictionary:setString(java.lang.String,java.lang.String)" : "* This is a convenience method that will convert the value to a COSString object. If it is null then the object\n     * will be removed.\n     *\n     * @param key The key to the object,\n     * @param value The string value for the name.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getFamilyKind()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* This will set the file specification.\n     *\n     * @param fs The file specification.",
  "org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:dispose()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:containsKey(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getCOSObject()" : "* Convert this standard java object to a COS dictionary.\n     *\n     * @return The COS dictionary that matches this Java object.",
  "org.apache.pdfbox.contentstream.operator.graphics.ClipEvenOddRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.text.TextPosition:getFont()" : "* This will get the font for the text being drawn.\n     *\n     * @return The font size.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:toRGB(float[])" : null,
  "org.apache.pdfbox.text.PDFTextStripper:getWordSeparator()" : "* This will get the word separator.\n     *\n     * @return The desired word separator string.",
  "org.apache.pdfbox.pdmodel.common.PDStream:createOutputStream()" : "* This will get a stream that can be written to.\n     * \n     * @return An output stream to write data to.\n     * @throws IOException If an IO error occurs during writing.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:initVertices(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getXFA()" : "* Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms.\n     *\n     * @return The xfa resource or null if it does not exist.",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:putAll(java.util.Map)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDResources:getProperties(org.apache.pdfbox.cos.COSName)" : "* Returns the property list resource with the given name, or null if none exists.\r\n     * \r\n     * @param name Name of the property list resource.\r\n     * @return the property list with the given name or null",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setViewerPreferences(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences)" : "* Sets the viewer preferences.\n     *\n     * @param prefs The new viewer preferences.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setMiterLimit(float)" : "* Set the miter limit.\n     *\n     * @param miterLimit the new miter limit.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is \\u2264 0.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:setSuppressDuplicateOverlappingText(boolean)" : "* By default the text stripper will attempt to remove text that overlapps each other. Word paints the same\n     * character several times in order to make it look bold. By setting this to false all text will be extracted, which\n     * means that certain sections will be duplicated, but better performance will be noticed.\n     *\n     * @param suppressDuplicateOverlappingTextValue The suppressDuplicateOverlappingText to set.",
  "org.apache.pdfbox.rendering.PageDrawer:isHiddenNotVisibilityExpression(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getChangeYs()" : "* This will return the changes along the y-axis.\r\n     * \r\n     * @return changes along the y-axis",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStrikeOut:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.font.encoding.ZapfDingbatsEncoding:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getRowSpan()" : "* Gets the number of rows in the enclosing table that shall be spanned by\n     * the cell (RowSpan). The default value is 1.\n     * \n     * @return the row span",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getWeightClass()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:copyArea(int,int,int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Set a marked content point with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.rendering.PageDrawer:drawBufferedImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.BufferedImage,java.awt.geom.AffineTransform)" : null,
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:getMappedFont(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : "* Returns the mapped font for the specified Standard 14 font. The mapped font is cached.\r\n     *\r\n     * @param baseName name of the standard 14 font\r\n     * @return the mapped font",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.cos.COSDocument)" : "* Creates a new empty PDStream object.\n     *\n     * @param document The document that the stream will be part of.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getNumberOfComponents()" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:<init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.pdmodel.encryption.AccessPermission)" : "* Constructor that uses an existing document. The COSDocument that is passed in must be valid.\n     * \n     * @param doc The COSDocument that this document wraps.\n     * @param source input representing the pdf\n     * @param permission he access permissions of the pdf\n     *",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:getRecipientsIterator()" : "* Returns an iterator to browse the list of recipients.\n     * Object found in this iterator are <code>PublicKeyRecipient</code>.\n     * @return The recipients list iterator.",
  "org.apache.pdfbox.pdmodel.font.CIDSystemInfo:getSupplement()" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getBaseFont()" : "* The PostScript name of the font.\n     *\n     * @return The postscript name of the font.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getHeight()" : "* \n     * @return signature image height",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser:parse(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)" : "* Parses a Type 4 function and sends the syntactic elements to the given\n     * syntax handler.\n     * @param input the text source\n     * @param handler the syntax handler",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:closeAndFillAndStroke()" : "* Close, fill, and then stroke the path, using the nonzero winding number rule to determine the\n     * region to fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:getPageNumber()" : "* This will get the page number for this destination. A page destination can either reference a\n     * page (for a local destination) or a page number (when doing a remote destination to another\n     * PDF). If this object is referencing by page number then this method will return that number,\n     * otherwise -1 will be returned.\n     *\n     * @return The zero-based page number for this destination.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setOwnerKey(byte[])" : "* This will set the O entry in the standard encryption dictionary.\n     *\n     * @param o A 32 byte array or null if there is no owner key.\n     *\n     * @throws IOException If there is an error setting the data.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getCOSObject()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)" : "* Draw an inline image at the x,y coordinates, with the default size of the image.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:<init>()" : "* Default constructor, creates target directory.",
  "org.apache.pdfbox.pdmodel.font.PDFont:readCMap(org.apache.pdfbox.cos.COSBase)" : "* Reads a CMap given a COS Stream or Name. May return null if a predefined CMap does not exist.\n     *\n     * @param base COSName or COSStream\n     * @return the CMap if present\n     * \n     * @throws IOException if the CMap could not be read",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:moveTo(float,float)" : "* Move the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)" : "* Draw an image at the origin with the given transformation matrix.\n     *\n     * @param image The image to draw.\n     * @param matrix The transformation matrix to apply to the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:setUpperRightX(float)" : "* This will set the upper right x coordinate.\n     *\n     * @param value The upper right x .",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isScript()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:get(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean)" : "* Creates a new PDFPrintable with the given page scaling and with optional page borders shown.\n     *\n     * @param document the document to print\n     * @param scaling page scaling policy\n     * @param showPageBorder true if page borders are to be printed",
  "org.apache.pdfbox.util.StringUtil:tokenizeOnSpace(java.lang.String)" : "* Split at spaces but keep them\n     *\n     * @param s\n     * @return",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:getInteriorColor()" : "* This will retrieve the interior color of the line endings defined in the LE entry.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createSignatureImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)" : null,
  "org.apache.pdfbox.cos.COSObjectKey:hashCode()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getWinLaunchParams()" : "* This will get a dictionary containing Windows-specific launch parameters.\n     *\n     * @return The Win entry of of the specific launch action dictionary.",
  "org.apache.pdfbox.contentstream.operator.OperatorProcessor:checkArrayTypesClass(java.util.List,java.lang.Class)" : "* Check whether all operands list elements are an instance of a specific class.\n     *\n     * @param operands The operands list.\n     * @param clazz The expected class.\n     * @return true if all operands list elements are an instance of the given class",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getTilingType()" : "* This will return the tiling type.\n     * @return The tiling type",
  "org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:getD()" : null,
  "org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:fromFontBox(org.apache.fontbox.encoding.Encoding)" : "* Creates an encoding from the given FontBox encoding.\n     *\n     * @param encoding FontBox encoding\n     * @return the encoding created from the given FontBox encoding",
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* Constructor for reading.\n     *\n     * @param acroForm the AcroForm containing the fields.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : "* Calculate a bounding rectangle around the areas of this shading context.\n     * \n     * @param xform the affine transformation\n     * @param matrix the pattern matrix\n     * @return Bounding rectangle or null, if not supported by this shading type.\n     * @throws java.io.IOException if the bounds could not be created",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getAcroForm(org.apache.pdfbox.pdmodel.fixup.PDDocumentFixup)" : "* Get the documents AcroForm. This will return null if no AcroForm is part of the document.\n     *\n     * Dependent on setting <code>acroFormFixup</code> some fixing/changes will be done to the AcroForm.\n     * If you need to ensure that there are no fixes applied call <code>getAcroForm</code> with <code>null</code>.\n     * \n     * Using <code>getAcroForm(PDDocumentFixup acroFormFixup)</code> might change the original content and\n     * subsequent calls with <code>getAcroForm(null)</code> will return the changed content.\n     * \n     * @param acroFormFixup the fix up action or null\n     * @return The document's AcroForm.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:newLineAtOffset(float,float)" : "* The Td operator.\n     * Move to the start of the next line, offset from the start of the current line by (tx, ty).\n     *\n     * @param tx The x translation.\n     * @param ty The y translation.\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setReason(java.lang.String)" : "* Sets the reason for the signing, such as (I agree...).\n     *\n     * @param reason the reason to be used",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getPreviousURI()" : "* This will set the previous URI action, in case it's needed.\n     *\n     * @return The previous URI.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:setNoExport(boolean)" : "* sets the field to be not exported.\n     * \n     * @param noExport The new flag for noExport.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* Draws the given Form XObject at the current location.\n     *\n     * @param form Form XObject\n     * @throws IOException if the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:setRadiosInUnison(boolean)" : "* From the PDF Spec <br>\n     * If set, a group of radio buttons within a radio button field that use the same value for the on state will turn\n     * on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually\n     * exclusive (the same behavior as HTML radio buttons).\n     *\n     * @param radiosInUnison The new flag for radiosInUnison.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:getBoundary()" : "* get the boundary of a triangle.\n     *\n     * @return {xmin, xmax, ymin, ymax}",
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getLuminosityRGB(float[],float[],float[])" : null,
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:calculateLimits()" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:saveGraphicsState()" : "* q operator. Saves the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.multipdf.Overlay:close()" : "* Close all input documents which were used for the overlay and opened by this class.\n     *\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup:<init>(java.lang.String)" : "* Creates a TextMarkup annotation of the specified sub type.\n     *\n     * @param subType the subtype the annotation represents",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getTrueTypeFont(java.lang.String,org.apache.pdfbox.pdmodel.font.PDFontDescriptor)" : "* Finds a TrueType font with the given PostScript name, or a suitable substitute, or null.\n     *\n     * @param fontDescriptor FontDescriptor",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:clipEvenOdd()" : "* Intersects the current clipping path with the current path, using the even-odd rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:getRectDifferences()" : "* This will get the margin between the annotations \"outer\" rectangle defined by\n     * /Rect and the boundaries of the underlying caret.\n     * \n     * @return the differences. If the entry hasn't been set am empty array is returned.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:exportFDF()" : "* This will export all FDF form data.\n     *\n     * @return An FDF document used to export the document.\n     * @throws IOException If there is an error when exporting the document.",
  "org.apache.pdfbox.cos.COSArray:toCOSNumberIntegerList()" : "* This will return a list of int values if the COSArray consists of COSNumbers only.\n     * \n     * @return the list of int values of the COSArray of COSNumbers",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setWidth(float)" : "* Sets the width of the element’s content rectangle in the\n     * inline-progression direction (Width).\n     * \n     * @param width the width",
  "org.apache.pdfbox.Loader:loadXFDF(java.io.InputStream)" : "* This will load a document from an input stream. The stream is loaded to the memory to establish random access to\n     * the data.\n     *\n     * @param input The stream that contains the document.\n     *\n     * @return The document that was loaded.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.cos.COSDictionary:getUpdateState()" : "* Returns the current {@link COSUpdateState} of this {@link COSDictionary}.\n     *\n     * @return The current {@link COSUpdateState} of this {@link COSDictionary}.\n     * @see COSUpdateState",
  "org.apache.pdfbox.cos.COSBoolean:toString()" : "* Return a string representation of this object.\n     *\n     * @return The string value of this object.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:stroke()" : "* Stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getXHeight()" : "* This will get the x height for the font.\n     *\n     * @return The x height.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Set a marked content point with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:next()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnWidths(float[])" : "* Sets the column widths for the columns separately (ColumnWidths).\n     * \n     * @param columnWidths the column widths",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:contains(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeOperand(org.apache.pdfbox.cos.COSName)" : "* Writes a COSName to the content stream.\n     * \n     * @param name the name to be added to the content stream\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setLineDashPattern(org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern)" : "* This will set the current line dash pattern.\n     *\n     * @param value The new line dash pattern.",
  "org.apache.pdfbox.text.PDFTextStripper:setListItemPatterns(java.util.List)" : "* use to supply a different set of regular expression patterns for matching list item starts.\n     *\n     * @param patterns list of patterns",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getKids()" : "* This will get the list of kids. This will return a list of FDFField objects.\n     * This will return null if the underlying list is null.\n     *\n     * @return The list of kids.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getImage(java.awt.Rectangle,int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:initFringe(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:<init>()" : "* Instantiate a new PDFMarkedContentExtractor object.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getCIDSystemInfo()" : "* Returns the CIDSystemInfo, or null if it is missing (which isn't allowed but could happen).\n     * \n     * @return the CIDSystemInfo, or null",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setStreamFilterName(org.apache.pdfbox.cos.COSName)" : "* Sets the name of the filter which is used for de/encrypting streams.\n     * \n     * @param streamFilterName the name of the filter",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:getLine()" : "* Get the line of a triangle.\n     *\n     * @return points of the line, or null if this triangle isn't a line",
  "org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:getOption()" : "* This will get the string of one of the available options. A required element.\n     *\n     * @return An available option.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.Loader:loadXFDF(java.lang.String)" : "* This will load a document from a file.\n     *\n     * @param filename The name of the file to load.\n     *\n     * @return The document that was loaded.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setDuration(float)" : "* @param duration The duration of the transition effect, in seconds.",
  "org.apache.pdfbox.filter.JPXFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int,org.apache.pdfbox.filter.DecodeOptions)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setMix(boolean)" : "* The flag specifying whether to mix this sound with any other sound already playing. If this\n     * flag is false, any previously playing sound shall be stopped before starting this sound; this\n     * can be used to stop a repeating sound (see Repeat). Default value: false.\n     *\n     * @param mix whether to mix this sound with any other sound already playing.\n     * (false).",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:getFontSize()" : "* Returns the font size.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:addRect(float,float,float,float)" : "* Add a rectangle to the current path.\n     *\n     * @param x The lower left x coordinate.\n     * @param y The lower left y coordinate.\n     * @param width The width of the rectangle.\n     * @param height The height of the rectangle.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary,org.apache.fontbox.ttf.TrueTypeFont,boolean)" : "* Creates a new TrueType font for embedding.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream$Tree:fill(int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getNonStrokingJavaComposite()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isNoView()" : "* Get the noView flag.\n     * \n     * @return The noView flag.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:collectTriangles(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:copyNeededResourcesTo(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Copies any needed resources from the document’s DR dictionary into the stream’s Resources\n     * dictionary. Resources with the same name shall be left intact.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:getStartPointEndingStyle()" : "* This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section.\n     *\n     * @return The ending style for the start point.",
  "org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext:calcPixelTableArray(java.awt.Rectangle)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:readlong(char,org.apache.pdfbox.io.RandomAccessRead)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setDS(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed\n     * after saving a document.\n     * The name DS stands for \"did save\".\n     *\n     * @param ds The action to be performed.",
  "org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequence:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.util.Hex:getBytes(byte)" : "* Returns the bytes corresponding to the ASCII hex encoding of the given byte.\n     * \n     * @param b the byte to be converted\n     * @return the ASCII hex encoding of the given byte",
  "org.apache.pdfbox.cos.COSArray:isEmpty()" : "* Returns true if the container is empty, false otherwise.\n     *\n     * @return true if the container is empty, false otherwise",
  "org.apache.pdfbox.pdfwriter.COSWriter:getDataToSign()" : "* Return the stream of PDF data to be signed. Clients should use this method only to create\n     * signatures externally. {@link #write(PDDocument)} method should have been called prior. The\n     * created signature should be set using {@link #writeExternalSignature(byte[])}.\n     * <p>\n     * When {@link SignatureInterface} instance is used, COSWriter obtains and writes the signature\n     * itself.\n     * </p>\n     *\n     * @return data stream to be signed\n     * @throws IllegalStateException if PDF is not prepared for external signing\n     * @throws IOException if input data is closed",
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$False:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnknown:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates an arbitrary annotation from a COSDictionary, expected to be a correct object definition for some sort of\n     * annotation.\n     *\n     * @param dic The dictionary which represents this Annotation.",
  "org.apache.pdfbox.pdmodel.common.PDStream:getMetadata()" : "* Get the metadata that is part of the document catalog. This will return\n     * null if there is no meta data for this object.\n     * \n     * @return The metadata for this object.\n     * @throws IllegalStateException if the value of the metadata entry is different from a stream\n     *                               or null",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormGenerateAppearancesProcessor:process()" : null,
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:encodeRowType6()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getContentsForRandomAccess()" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:insertBefore(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPage)" : "* Insert a page before another page within a page tree.\r\n     *\r\n     * @param newPage the page to be inserted.\r\n     * @param nextPage the page that is to be after the new page.\r\n     * @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page\r\n     * tree.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:<init>()" : "* Constructor.\n     *\n     * Initializes to 0,0,0,0",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getTemplateHeight()" : "* \n     * @return template height",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getWidth(int)" : null,
  "org.apache.pdfbox.cos.COSFloat:equals(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.util.DateConverter:newGreg()" : null,
  "org.apache.pdfbox.cos.COSDictionary:getCOSStream(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a COSStream. Null is\n     * returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The COSStream.",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:getUpperRightY()" : "* This will get the upper right y coordinate.\n     *\n     * @return The upper right y.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:setMeasure(org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary)" : "* This will set the measure dictionary.\n     * \n     * @param measure the measure dictionary",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:hasGlyph(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getAlphaSourceFlag()" : "* This will get the alpha source flag (“alpha is shape”), that specifies whether the current\n     * soft mask and alpha constant shall be interpreted as shape values (true) or opacity values\n     * (false).\n     *\n     * @return The alpha source flag.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:setFitBoundingBox(boolean)" : "* Set if this page destination should just fit the bounding box.  The default is false.\n     *\n     * @param fitBoundingBox A flag indicating if this should fit the bounding box.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Line:calcColor(java.awt.Point)" : "* Calculate the color of a point on a rasterized line by linear\n     * interpolation.\n     *\n     * @param p target point, p should always be contained in linePoints\n     * @return color",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setLineEndingStyle(java.lang.String)" : "* This will set the line ending style.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setFo(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the annotation\n     * receives the input focus.\n     *\n     * @param fo The action to be performed.",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:ensureFontResources(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.interactive.form.PDVariableText)" : null,
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceCMYKColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setLeaderLength(float)" : "* This will set the length of the leader line.\n     * \n     * @param leaderLength length of the leader line",
  "org.apache.pdfbox.util.Hex:getString(byte)" : "* Returns a hex string of the given byte.\n     * \n     * @param b the byte to be converted\n     * @return the hex string representing the given byte",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:requireSingleNode(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* @param node\n     * @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next\n     * sibling)",
  "org.apache.pdfbox.contentstream.operator.state.SetFlatness:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.cos.COSBoolean:<init>(boolean)" : "* Constructor.\n     *\n     * @param aValue The boolean value.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getHeight(int)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(float,float,float,float)" : "* Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setTextColor(java.awt.Color)" : "* Set the RGB text color for this node.\n     *\n     * @param textColor The text color for this node.",
  "org.apache.pdfbox.contentstream.operator.text.SetTextRise:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:<init>()" : "* Creates a new Indexed color space.\n     * Default DeviceRGB, hival 255.",
  "org.apache.pdfbox.pdfwriter.COSWriter:writeString(byte[],boolean,java.io.OutputStream)" : "* This will output the given text/byte string as a PDF object.\n     *\n     * @param output The stream to write to.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setWinLaunchParams(org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams)" : "* This will set a dictionary containing Windows-specific launch parameters.\n     *\n     * @param win The action to be performed.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isVRequired()" : "*\n    * @return true if the V entry is required",
  "org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:popReal()" : "* Pops a number from the stack and returns it as a real value. If the value is not of a\n     * numeric type, a ClassCastException is thrown.\n     * @return the real value",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getStringWidth(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getBytesFromStream(org.apache.pdfbox.cos.COSStream)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the stroking color and, if necessary, the stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:createFromGrayImage(java.awt.image.BufferedImage,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setLineSloaps(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])" : "* This will set the sloaps of a line.\r\n     * \r\n     * @param lineSloaps the sloaps of a line",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setJavaScript(org.apache.pdfbox.pdmodel.fdf.FDFJavaScript)" : "* This will set the JavaScript entry.\n     *\n     * @param js The javascript entries.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:setExtendedGraphicsState(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : "* This will set the external graphics state for this pattern.\n     * @param extendedGraphicsState The new extended graphics state for this pattern.",
  "org.apache.pdfbox.pdfparser.BaseParser:readString(int)" : "* This will read the next string from the stream up to a certain length.\n     *\n     * @param length The length to stop reading at.\n     *\n     * @return The string that was read from the stream of length 0 to length.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:pngFilterAverage(int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getyAxis()" : "*\n     * @return yAxis",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getRecipientsLength()" : "* Returns the number of recipients contained in the Recipients field of the dictionary.\n     *\n     * @return the number of recipients contained in the Recipients field.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getPage()" : "* Returns the page on which some or all of the content items designated by\n     *  the K entry shall be rendered (Pg).\n     * \n     * @return the page on which some or all of the content items designated by\n     *  the K entry shall be rendered",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setOptionalContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Sets the optional content group or optional content membership dictionary.\r\n     *\r\n     * @param oc The optional content group or optional content membership dictionary.",
  "org.apache.pdfbox.pdfwriter.compress.CompressParameters:<init>()" : null,
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setFitWindow(boolean)" : "* Set the fit window preference.\n     *\n     * @param value Set the fit window preference.",
  "org.apache.pdfbox.pdmodel.font.PDFont:getToUnicodeCMap()" : "* Get the /ToUnicode CMap.\n     *\n     * @return The /ToUnicode CMap or null if there is none.",
  "org.apache.pdfbox.cos.COSArray:removeAll(java.util.Collection)" : "* This will remove all of the objects in the collection.\n     *\n     * @param objectsList The list of objects to remove from the collection.",
  "org.apache.pdfbox.pdmodel.PDDocument:getVersion()" : "* Returns the PDF specification version this document conforms to.\n     *\n     * @return the PDF version (e.g. 1.4f)",
  "org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:getValueFromArray(int,int)" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:toCOSObjectList(java.util.Collection)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:getStateModel()" : "* This will retrieve the annotation state model.\n     * \n     * @return the annotation state model",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:clampColor(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:tintTransform(float[],int[])" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:getOwnerAccessPermission()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getLineCap()" : "* Get the value of the line cap.\n     *\n     * @return The current line cap.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawNote(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.graphics.PDFontSetting:<init>()" : "* Creates a blank font setting, font will be null, size will be 1.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict a border style dictionary.",
  "org.apache.pdfbox.pdmodel.fdf.FDFPage:getTemplates()" : "* This will get a list of FDFTemplage objects that describe the named pages that serve as templates.\n     *\n     * @return A list of templates.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setAppendOnly(boolean)" : "* Set the AppendOnly bit.\n     *\n     * @param appendOnly The value for AppendOnly.",
  "org.apache.pdfbox.cos.COSObjectKey:getStreamIndex()" : "* The index within a compressed object stream.\n     * \n     * @return the index within a compressed object stream if applicable otherwise -1",
  "org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:setC(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the page\n     * is closed. This action applies to the page being closed,\n     * and is executed before any other page opened.\n     *\n     * @param c The action to be performed.",
  "org.apache.pdfbox.pdmodel.common.PDStream:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* Set the file specification.\n     * \n     * @param f The file specification.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)" : "* Sets the image of visible signature\n     * @param image Image XObject",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getMaxWidth()" : "* This will get the max width for the font.\n     *\n     * @return The max width value.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setSelectedOptionsIndex(java.util.List)" : "* This will set the indices of the selected options - the 'I' key.\n     * <p>\n     * This method is preferred over {@link #setValue(List)} for choice fields which\n     * <ul>\n     *  <li>do support multiple selections</li>\n     *  <li>have export values with the same value</li>\n     * </ul>\n     * <p>\n     * Setting the index will set the value too.\n     *\n     * @param values List containing the indices of all selected options.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node to be created",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setFontSize(float)" : "* Set the value of the fontSize.\n     *\n     * @param value The fontSize.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:isValueChanged(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase)" : "* Is the value changed?\n     * \n     * @param oldValue old value\n     * @param newValue new value\n     * @return <code>true</code> if the value is changed, <code>false</code>\n     * otherwise",
  "org.apache.pdfbox.util.Matrix:createAffineTransform()" : "* Create an affine transform from this matrix's values.\n     *\n     * @return An affine transform with this matrix's values.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setDefaultAppearance(java.lang.String)" : "* Set the default appearance.\n     * \n     * @param daValue a string describing the default appearance",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setArrayOfName(java.lang.String,java.lang.String[])" : "* Sets an array of name values.\n     * \n     * @param name the attribute name\n     * @param values the array of name values",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:getReferencedObject()" : "* Gets a higher-level object for the referenced object.\r\n     * Currently this method may return a {@link PDAnnotation},\r\n     * a {@link PDXObject} or <code>null</code>.\r\n     * \r\n     * @return a higher-level object for the referenced object",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:convertBasicTypesToMap(org.apache.pdfbox.cos.COSDictionary)" : "* This will take a COS dictionary and convert it into COSDictionaryMap.  All cos\n     * objects will be converted to their primitive form.\n     *\n     * @param map The COS mappings.\n     * @return A standard java map.\n     * @throws IOException If there is an error during the conversion.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setCapHeight(float)" : "* This will set the cap height for the font.\n     *\n     * @param capHeight The new cap height for the font.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getBBox()" : "* An array of four numbers in the form coordinate system (see below),\n     * giving the coordinates of the left, bottom, right, and top edges,\n     * respectively, of the shading's bounding box.\n     *\n     * @return the BBox of the form",
  "org.apache.pdfbox.cos.COSName:accept(org.apache.pdfbox.cos.ICOSVisitor)" : null,
  "org.apache.pdfbox.multipdf.PDFCloneUtility:cloneMergeCOSBase(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:cloudyEllipseImpl(double,double,double,double)" : "* Cloudy ellipse implementation.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:setFields(org.apache.pdfbox.cos.COSArray)" : "* @param array the array of fields",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.AnnotationBorder:getAnnotationBorder(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)" : null,
  "org.apache.pdfbox.text.TextPosition:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.filter.JPXFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : "* {@inheritDoc}",
  "org.apache.pdfbox.contentstream.operator.graphics.CurveTo:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:setFont(org.apache.pdfbox.pdmodel.font.PDFont)" : "* Set the font.\n     * \n     * @param font the font to use.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for an existing structure node.\r\n     *\r\n     * @param dictionary The existing dictionary.",
  "org.apache.pdfbox.pdfparser.COSParser:parseCOSStream(org.apache.pdfbox.cos.COSDictionary)" : "* This will read a COSStream from the input stream using length attribute within dictionary. If\n     * length attribute is a indirect reference it is first resolved to get the stream length. This\n     * means we copy stream data without testing for 'endstream' or 'endobj' and thus it is no\n     * problem if these keywords occur within stream. We require 'endstream' to be found after\n     * stream data is read.\n     *\n     * @param dic dictionary that goes with this stream.\n     *\n     * @return parsed pdf stream.\n     *\n     * @throws IOException if an error occurred reading the stream, like problems with reading\n     * length attribute, stream does not end with 'endstream' after data read, stream too short etc.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:hasGlyph(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setHolderForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* In the structure, form will be contained by XObject in the <b>AcroForm/DR/ </b>\n     * \n     * @param holderForm the holder form",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:fillWhitepointCache(org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setSmoothnessTolerance(java.lang.Float)" : "* This will set the smoothness tolerance.\n     *\n     * @param smoothness The new smoothness tolerance",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getLineJoin()" : "* Get the value of the line join.\n     *\n     * @return The current line join value.",
  "org.apache.pdfbox.text.TextPosition:createDiacritics()" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getModDate()" : "* Get the mod date of the embedded file.\n     *\n     * @return The mod date.\n     * @throws IOException If there is an error while constructing the date.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getBitsPerCoordinate()" : "* The bits per coordinate of this shading. This will return -1 if one has\n     * not been set.\n     *\n     * @return the number of bits per coordinate",
  "org.apache.pdfbox.rendering.PageDrawer:showForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdfparser.BaseParser:decodeBuffer(java.io.ByteArrayOutputStream)" : "* Tries to decode the buffer content to an UTF-8 String. If that fails, tries the alternative Encoding.\n     * \n     * @param buffer the {@link ByteArrayOutputStream} containing the bytes to decode\n     * @return the decoded String",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler:generateAppearanceStreams()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setPlacement(java.lang.String)" : "* Sets the positioning of the element with respect to the enclosing\n     * reference area and other content (Placement). The value should be one of:\n     * <ul>\n     *   <li>{@link #PLACEMENT_BLOCK},</li>\n     *   <li>{@link #PLACEMENT_INLINE},</li>\n     *   <li>{@link #PLACEMENT_BEFORE},</li>\n     *   <li>{@link #PLACEMENT_START},</li>\n     *   <li>{@link #PLACEMENT_END}.</li>\n     * </ul>\n     * \n     * @param placement the placement",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:moveTo(java.awt.geom.Point2D$Double)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getColorImage(java.awt.image.BufferedImage)" : null,
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:getProperties(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Paragraph:getLines(org.apache.pdfbox.pdmodel.font.PDFont,float,float)" : "* Break the paragraph into individual lines.\n         *\n         * @param font the font used for rendering the text.\n         * @param fontSize the fontSize used for rendering the text.\n         * @param width the width of the box holding the content.\n         * @return the individual lines.\n         * @throws IOException",
  "org.apache.pdfbox.rendering.GlyphCache:<init>(org.apache.pdfbox.pdmodel.font.PDVectorFont)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.ShadingFill:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getSoftMask()" : "* Returns the soft mask stored in the COS dictionary\n     *\n     * @return the soft mask or null if there isn't any.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:<init>(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,double,double,org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Creates a new <code>CloudyBorder</code> that writes to the specified\n     * content stream.\n     *\n     * @param stream content stream\n     * @param intensity intensity of cloudy effect (entry <code>I</code>); typically 1.0 or 2.0\n     * @param lineWidth line width for annotation border (entry <code>W</code>)\n     * @param rect annotation rectangle (entry <code>Rect</code>)",
  "org.apache.pdfbox.pdfparser.PDFXRefStream:writeNumber(java.io.OutputStream,long,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:getWidth()" : "* This will retrieve the border width in points, 0 = no border.\n     *\n     * @return The width of the border in points.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setWidgetDictionary(org.apache.pdfbox.cos.COSDictionary)" : "* Sets Widget Dictionary.\n     * \n     * @param widgetDictionary the widget dictionary",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setTrustedMode(boolean)" : "* If true, the application was in trusted mode when signing took place.\n     *\n     * @param trustedMode true if the application is in trusted mode.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:getNumberOfComponents()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:isNChannel()" : "* Returns true if this is an NChannel (PDF 1.6) color space.\n     * @return true if this is an NChannel color space.",
  "org.apache.pdfbox.multipdf.Splitter:setEndPage(int)" : "* This will set the end page.\n     *\n     * @param end the 1-based end page\n     * @throws IllegalArgumentException if the end page is smaller than one.",
  "org.apache.pdfbox.multipdf.PDFCloneUtility:cloneCOSArray(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptDataRC4(byte[],java.io.InputStream,java.io.OutputStream)" : "* Encrypt or decrypt data with RC4.\n     *\n     * @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}.\n     * @param input The data to encrypt.\n     * @param output The output to write the encrypted data to.\n     *\n     * @throws IOException If there is an error reading the data.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontName(java.lang.String)" : "* This will set the font name.\n     *\n     * @param fontName The new name for the font.",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getMCID()" : "* Gets the marked-content identifier.\r\n     * \r\n     * @return the marked-content identifier, or -1 if it doesn't exist.",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:addToSubset(int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:setOwner(java.lang.String)" : "* Sets the owner of the attributes.\n     * \n     * @param owner the owner of the attributes",
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getCOSArray()" : "* Convert this standard java object to a COS object.\n     * @return the cos object that matches this Java object",
  "org.apache.pdfbox.util.DateConverter:parseTimeField(java.lang.String,java.text.ParsePosition,int,int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:loadVertical(org.apache.pdfbox.pdmodel.PDDocument,java.io.File)" : "* Loads a TTF to be embedded into a document as a vertical Type 0 font.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param file A TrueType font.\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font file.",
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromArray(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:getInteriorColor()" : "* This will retrieve the interior color of the drawn area color is in DeviceRGB color space.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:getPage()" : "* Get the 0-based page number.\n     *\n     * @return the page number",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setProcSet(org.apache.pdfbox.cos.COSArray)" : "* Sets ProcSet Array\n     * \n     * @param procSet the current ProcSet array",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setLineWidth(float)" : "* Set line width to the given value.\n     *\n     * @param lineWidth The width which is used for drawing.\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)" : "* Create a child node object.\n     *\n     * @param dic The dictionary for the child node object to refer to.\n     * @return The new child node object.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:setBitsPerFlag(int)" : "* Set the number of bits per flag.\r\n     *\r\n     * @param bitsPerFlag the number of bits per flag",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node:walk(boolean)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:setListNumbering(java.lang.String)" : "* Sets the list numbering (ListNumbering). The value shall be one of the\n     * following:\n     * <ul>\n     *   <li>{@link #LIST_NUMBERING_NONE},</li>\n     *   <li>{@link #LIST_NUMBERING_DISC},</li>\n     *   <li>{@link #LIST_NUMBERING_CIRCLE},</li>\n     *   <li>{@link #LIST_NUMBERING_SQUARE},</li>\n     *   <li>{@link #LIST_NUMBERING_DECIMAL},</li>\n     *   <li>{@link #LIST_NUMBERING_UPPER_ROMAN},</li>\n     *   <li>{@link #LIST_NUMBERING_LOWER_ROMAN},</li>\n     *   <li>{@link #LIST_NUMBERING_UPPER_ALPHA},</li>\n     *   <li>{@link #LIST_NUMBERING_LOWER_ALPHA}.</li>\n     * </ul>\n     * \n     * @param listNumbering the list numbering",
  "org.apache.pdfbox.rendering.GroupGraphics:drawString(java.text.AttributedCharacterIterator,int,int)" : null,
  "org.apache.pdfbox.pdmodel.PDPage:setAnnotations(java.util.List)" : "* This will set the list of annotations. Although this is optional, you should take care that\n     * any newly created annotations link back to this page by calling\n     * {@link PDAnnotation#setPage(org.apache.pdfbox.pdmodel.PDPage)}. Not doing it\n     * <a href=\"https://stackoverflow.com/questions/74836898/\">can cause trouble when PDFs get\n     * signed</a>.\n     *\n     * @param annotations The new list of annotations.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setEndPointEndingStyle(java.lang.String)" : "* This will set the line ending style for the end point, see the LE_ constants for the possible values.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:resolveFieldsFromWidgets(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a Link annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdfwriter.COSWriter:writeArray(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:closeAndFillAndStrokeEvenOdd()" : "* Close, fill, and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStrokeEvenOdd() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.filter.ASCII85InputStream:read(byte[],int,int)" : "* This will read a chunk of data.\n     *\n     * @param data The buffer to write data to.\n     * @param offset The offset into the data stream.\n     * @param len The number of byte to attempt to read.\n     *\n     * @return The number of bytes actually read.\n     *\n     * @throws IOException If there is an error reading data from the underlying stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:getXRefEntries()" : "* This will get the xref entries.\n     *\n     * @return All available xref entries.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFile()" : "* Get the embedded file.\n     *\n     * @return The embedded file for this file spec.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getPO()" : "* This will get an action to be performed when the page containing\n     * the annotation is opened. The action is executed after the O action\n     * in the page's additional actions dictionary and the OpenAction entry\n     * in the document catalog, if such actions are present.\n     *\n     * @return The PO entry of annotation's additional actions dictionary.",
  "org.apache.pdfbox.util.filetypedetector.ByteTrie$ByteTrieNode:setValue(java.lang.Object)" : null,
  "org.apache.pdfbox.cos.COSDictionary:getEmbeddedString(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string. Null is returned if the entry does not exist in the dictionary.\n     *\n     * @param embedded The embedded dictionary.\n     * @param key The key to the item in the dictionary.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(float,float,float,float)" : "* Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.\n     *\n     * @param c The cyan value.\n     * @param m The magenta value.\n     * @param y The yellow value.\n     * @param k The black value.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:getCOSObject()" : null,
  "org.apache.pdfbox.rendering.SoftMask$SoftPaintContext:getColorModel()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:setX(float)" : "* Sets the x value of the tristimulus.\n     * @param x the x value for the tristimulus",
  "org.apache.pdfbox.pdmodel.font.encoding.MacExpertEncoding:getEncodingName()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1Font:codeToName(int)" : null,
  "org.apache.pdfbox.cos.COSIncrement:updateDifferentOrigin(org.apache.pdfbox.cos.COSUpdateState)" : "* Check whether the given {@link COSUpdateState}´s {@link COSDocumentState} differs from the {@link COSIncrement}´s\n     * known {@link #incrementOrigin}.<br>\n     * Should that be the case, the {@link COSUpdateState} originates from another {@link COSDocument} and must be added\n     * to the {@link COSIncrement}, hence call {@link COSUpdateState#update()}.\n     *\n     * @param updateState The {@link COSUpdateState} that shall be updated, if it's originating from another\n     *                    {@link COSDocument}.\n     * @see #incrementOrigin",
  "org.apache.pdfbox.pdfparser.COSParser:parseHeader(java.lang.String,java.lang.String)" : null,
  "org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Parses a PDF.\n     * \n     * @param randomAccessRead random access read representing the pdf to be loaded. To pass an\n     * InputStream, wrap it into a {@link RandomAccessReadBuffer}.\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering\n     * new/altered PDF streams\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the PDF required a non-empty password.\n     * @throws IOException In case of a reading or parsing error.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:hasGlyph(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDResources:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Constructor for reading.\r\n     *\r\n     * @param resourceDictionary The cos dictionary for this resource.\r\n     * @param resourceCache The document's resource cache, may be null.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(java.io.InputStream)" : "* Constructor usable for signing existing signature fields.\n     *\n     * @param imageStream image as a stream\n     * @throws IOException if the new instance of PDVisibleSignDesigner could not be created",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setLabelPrefixString(java.lang.String)" : "* This will set the text to be concatenated to the left of the label specified by U.\r\n     * @param labelPrefixString label prefix",
  "org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:transform(org.apache.pdfbox.util.Matrix)" : "* The cm operator. Concatenates the given matrix with the current transformation matrix (CTM),\n     * which maps user space coordinates used within a PDF content stream into output device\n     * coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2\n     * Coordinate Spaces.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new DictionaryEncoding for a Type 3 font from a PDF.\n     *\n     * @param fontEncoding The Type 3 encoding dictionary.",
  "org.apache.pdfbox.rendering.PDFRenderer:hasBlendMode(org.apache.pdfbox.pdmodel.PDPage)" : null,
  "org.apache.pdfbox.contentstream.operator.OperatorProcessor:getContext()" : "* Returns the processing context.\n     * \n     * @return the processing context",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:getName()" : "* This will retrieve the name of the viewport.\n     * \n     * @return the name of the viewport",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:setLastChild(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)" : "* Set the last child, this will be maintained by this class.\n     *\n     * @param outlineNode The new last child.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:isOutside255Interval(int)" : null,
  "org.apache.pdfbox.pdmodel.font.encoding.BuiltInEncoding:getEncodingName()" : null,
  "org.apache.pdfbox.util.Matrix:toString()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getFontMatrix()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:removeKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement)" : "* Removes a structure element kid and if successful also removes the parent property (/P).\r\n     *\r\n     * @param structureElement the structure element\r\n     * @return <code>true</code> if the kid was removed, <code>false</code> otherwise.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createWidgetDictionary(org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField,org.apache.pdfbox.pdmodel.PDResources)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getMetadata()" : "* Get the metadata that is part of the document catalog. This will return null if there is no\n     * meta data for this object.\n     *\n     * @return The metadata for this object.",
  "org.apache.pdfbox.pdmodel.common.PDTypedDictionaryWrapper:<init>(java.lang.String)" : "* Creates a new instance with a given type.\n     * \n     * @param type the type (Type)",
  "org.apache.pdfbox.pdmodel.fdf.FDFPageInfo:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param p The FDF page.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:applyTextAdjustment(float,float)" : "* Applies a text position adjustment from the TJ operator. May be overridden in subclasses.\n     *\n     * @param tx x-translation\n     * @param ty y-translation",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cvr:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getTransfer()" : "* This will get the transfer function.\n     *\n     * @return The transfer function. According to the PDF specification, this is either a single\n     * function (which applies to all process colorants) or an array of four functions (which apply\n     * to the process colorants individually). The name Identity may be used to represent the\n     * identity function, and the name Default denotes the transfer function that was in effect at\n     * the start of the page.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:isGroupEnabled(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup)" : "* Indicates whether an optional content group is enabled.\n     * @param group the group object\n     * @return true if the group is enabled",
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos dictionary for this object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:incrementRevisionNumber()" : "* Increments th revision number.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createInputStream(java.util.List)" : null,
  "org.apache.pdfbox.contentstream.operator.text.SetCharSpacing:getName()" : null,
  "org.apache.pdfbox.filter.DecodeOptions:setSourceRegion(java.awt.Rectangle)" : "* Sets the region of the source image that should be decoded. The region will be clipped to the\n     * dimensions of the source image. Setting this value to null will result in the entire image\n     * being decoded.\n     *\n     * @param sourceRegion The source region to decode, or null if the entire image should be\n     * decoded.",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:canAssembleDocument()" : "* This will tell if the user can insert/rotate/delete pages.\n     *\n     * @return true If supplied with the user password they are allowed to assemble the document.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Set a marked content point with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:setCryptFilterMethod(org.apache.pdfbox.cos.COSName)" : "* This will set the crypt filter method. \n     * Allowed values are: NONE, V2, AESV2, AESV3\n     *\n     * @param cfm name of the crypt filter method.\n     *",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Merge the list of source documents, saving the result in the destination file. The source\n     * list is not reset after merge. If you want to merge one document at a time, then it's better\n     * to use\n     * {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}.\n     *\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code>\n     * unrestricted main memory is used\n     * \n     * @throws IOException If there is an error saving the document.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:<init>(org.apache.pdfbox.cos.COSArray)" : "* Constructor from an existing destination array.\n     *\n     * @param arr The destination array.",
  "org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeObject(java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setMinimumRevision(long)" : "* The software module revision number, used to determinate the minimum version of software that\n     * is required in order to process this signature.\n     * <p>\n     * NOTE: this entry is deprecated for PDF v1.7\n     * </p>\n     *\n     * @param revision is the software module revision number",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setBold(boolean)" : "* Set the bold property of the text.\n     *\n     * @param bold The new bold flag.",
  "org.apache.pdfbox.filter.LZWFilter:calculateChunk(int,boolean)" : "* Calculate the appropriate chunk size\n     *\n     * @param tabSize the size of the code table\n     * @param earlyChange true for early chunk increase\n     *\n     * @return a value between 9 and 12",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getSignatureField()" : "* Gets Signature field\n     * @return the signature field",
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:getColorSpace(org.apache.pdfbox.pdmodel.PDResources)" : "* Returns the group color space or null if it isn't defined.\n     *\n     * @param resources useful for its cache. Can be null.\n     * @return the group color space.\n     * @throws IOException if the colorspace could not be created",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setFieldFlags(java.lang.Integer)" : "* This will set the field flags that are associated with this field.\n     * The 'Ff' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the field flags.",
  "org.apache.pdfbox.multipdf.Splitter$KCloner:createArrayClone(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:addComment(java.lang.String)" : "* Write a comment line.\n     *\n     * @param comment the comment to be added to the content stream\n     * \n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line\n     * could be ordinary PDF content.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getNextSibling()" : "* @return The next sibling or null if there is no next sibling.",
  "org.apache.pdfbox.contentstream.operator.markedcontent.DrawObject:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:setSeedValue(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue)" : "* <p>(Optional; PDF 1.) A seed value dictionary containing information\n     * that constrains the properties of a signature that is applied to the\n     * field.</p>\n     *\n     * @param sv is the seed value dictionary as PDSeedValue",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setFont(org.apache.pdfbox.pdmodel.font.PDFont)" : "* Set the value of the font.\n     *\n     * @param value The font.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:<init>()" : null,
  "org.apache.pdfbox.cos.COSStream:createRawInputStream()" : "* Returns a new InputStream which reads the encoded PDF stream data. Experts only!\n     * \n     * @return InputStream containing raw, encoded PDF stream data.\n     * @throws IOException If the stream could not be read.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDField#PDField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getWidthForCID(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getExternalData()" : "* This will return the external data dictionary.\n     * \n     * @return the external data dictionary",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:showTextWithPositioning(java.lang.Object[])" : "* Shows the given text at the location specified by the current text matrix with the given\n     * interspersed positioning. This allows the user to efficiently position each glyph or sequence\n     * of glyphs.\n     *\n     * @param textWithPositioningArray An array consisting of String and Float types. Each String is\n     * output to the page using the current text matrix. Using the default coordinate system, each\n     * interspersed number adjusts the current text matrix by translating to the left or down for\n     * horizontal and vertical text respectively. The number is expressed in thousands of a text\n     * space unit, and may be negative.\n     *\n     * @throws IOException if an io exception occurs.",
  "org.apache.pdfbox.pdfparser.COSParser:readUntilEndStream(org.apache.pdfbox.pdfparser.EndstreamFilterStream)" : "* This method will read through the current stream object until\n     * we find the keyword \"endstream\" meaning we're at the end of this\n     * object. Some pdf files, however, forget to write some endstream tags\n     * and just close off objects with an \"endobj\" tag so we have to handle\n     * this case as well.\n     * \n     * This method is optimized using buffered IO and reduced number of\n     * byte compare operations.\n     * \n     * @param out  stream we write out to.\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.rendering.PDFRenderer:renderImage(int,float,org.apache.pdfbox.rendering.ImageType,org.apache.pdfbox.rendering.RenderDestination)" : "* Returns the given page as an RGB or ARGB image at the given scale.\r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param scale the scaling factor, where 1 = 72 DPI\r\n     * @param imageType the type of image to return\r\n     * @param destination controlling visibility of optional content groups\r\n     * @return the rendered page image\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.filter.LZWFilter:createInitialCodeTable()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:pngFilterPaeth(int,int,int,int)" : null,
  "org.apache.pdfbox.cos.UnmodifiableCOSDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:<init>(java.util.Map,org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for this map.\n     *\n     * @param actualsMap The map with standard java objects as values.\n     * @param dicMap The map with COSBase objects as values.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor using the given shading dictionary.\n     *\n     * @param shadingDictionary the dictionary for this shading",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getQuadPoints()" : "* This will retrieve the set of quadpoints which encompass the areas of this annotation which will activate.\n     *\n     * @return An array of floats representing the quad points.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isMultiline()" : "* @return true if the field is multiline",
  "org.apache.pdfbox.rendering.PageDrawerParameters:getDestination()" : "* @return the destination",
  "org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:calcLevel()" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:codeToCID(int)" : "* Returns the CID for the given character code. If not found then CID 0 is returned.\n     *\n     * @param code character code\n     * @return CID",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo:setDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination)" : "* This will set the destination to jump to.\n     *\n     * @param d The destination.\n     * \n     * @throws IllegalArgumentException if the destination is not a page dictionary object.",
  "org.apache.pdfbox.cos.COSUpdateState:dereferenceChild(org.apache.pdfbox.cos.COSBase)" : "* This shall {@link #setOriginDocumentState(COSDocumentState, boolean)} for the dereferenced child,\n     * initializing its {@link #originDocumentState}.\n     * <p>\n     * This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo} and will never change\n     * the child´s {@link #updated} state.\n     * </p>\n     *\n     * @param child The child, that has been dereferenced.\n     * @see #setOriginDocumentState(COSDocumentState, boolean)",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:getState()" : "* This will retrieve the annotation state.\n     * \n     * @return the annotation state",
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getG()" : "* Returns the g value of the tristimulus.\n     * @return the g value",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the stroking color and, if necessary, the stroking color space.\n     *\n     * @param color Color in a specific color space.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:getNextRefChanges(int,boolean)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getOCGs()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getOptions()" : "* This will get the option values \"Opt\".\n     * \n     * <p>\n     * For a choice field the options array can either be an array\n     * of text strings or an array of a two-element arrays.<br>\n     * The method always only returns either the text strings or,\n     * in case of two-element arrays, an array of the first element of \n     * the two-element arrays\n     * </p>   \n     * <p>\n     * Use {@link #getOptionsExportValues()} and {@link #getOptionsDisplayValues()}\n     * to get the entries of two-element arrays.\n     * </p>\n     * \n     * @return List containing the export values.",
  "org.apache.pdfbox.filter.LZWFilter:doLZWDecode(java.io.InputStream,java.io.OutputStream,boolean)" : null,
  "org.apache.pdfbox.contentstream.operator.state.SetLineMiterLimit:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Line:getWidth()" : null,
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:<init>()" : "* Creates a new tiling pattern.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setSubFilter(java.lang.String)" : "* Set the subfilter entry of the encryption dictionary.\n     *\n     * @param subfilter The value of the subfilter field.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:<init>(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.PDResources)" : "* Creates a new Separation color space from a PDF color space array.\n     * @param separation an array containing all separation information.\n     * @param resources resources, can be null.\n     * @throws IOException if the color space or the function could not be created.",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:setFields(java.util.List)" : "* This will set a list of fields for this template.\n     *\n     * @param fields The list of fields to set for this template.",
  "org.apache.pdfbox.pdfparser.XrefParser:checkXrefOffsets()" : "* Check the XRef table by dereferencing all objects and fixing the offset if necessary.\n     * \n     * @throws IOException if something went wrong.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setClassMap(java.util.Map)" : "* Sets the ClassMap.\n     * \n     * @param classMap null, or a map whose elements are either {@link PDAttributeObject} or lists\n     * of it.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:isNodeOpen()" : "* @return true if this node count is greater than zero, false otherwise.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveRotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:calculatePageSizeFromFile(java.lang.String,int)" : null,
  "org.apache.pdfbox.cos.COSStream:createView()" : "* Returns a new RandomAccessRead which reads the decoded stream data.\n     * \n     * @return RandomAccessRead containing decoded stream data.\n     * @throws IOException If the stream could not be read.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getTitle()" : "* Returns the title (T).\n     * \n     * @return the title",
  "org.apache.pdfbox.cos.COSObjectKey:compareTo(org.apache.pdfbox.cos.COSObjectKey)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFCatalog:setSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)" : "* This will set the signature that is associated with this catalog.\n     *\n     * @param sig The new signature.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setLineHeightNormal()" : "* Sets the element’s preferred height in the block-progression direction\n     * (LineHeight) to {@link #LINE_HEIGHT_NORMAL}.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processSoftMask(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)" : "* Processes a soft mask transparency group stream.\n     * \n     * @param group transparency group used for the soft mask\n     * @throws IOException if the transparency group cannot be processed",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationUnderline:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isLockedContents()" : "* Get the LockedContents flag.\n     *\n     * @return The LockedContents flag.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:getFontHeader(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary,java.lang.Class)" : "* Constructor.\n     *\n     * @param dict The dictionary that holds the number information.\n     * @param valueClass The PD Model type of object that is the value.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:getLeft()" : "* Get the left x coordinate.  Return values of 0 or -1 imply that the current x-coordinate\n     * will be used.\n     *\n     * @return The left x coordinate.",
  "org.apache.pdfbox.text.PDFTextStripper:fillBeadRectangles(org.apache.pdfbox.pdmodel.PDPage)" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Creates a Transparency Group for writing, in the given document.\n     * @param document The current document",
  "org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:<init>(int,org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSObjectKey)" : "* Prepares a object stream entry reference for the given {@link COSObject} in a PDF's crossreference stream\n     * ({@link PDFXRefStream}).\n     *\n     * @param objectStreamIndex The index of the {@link COSObject} in the containing object stream.\n     * @param key The {@link COSObjectKey}, that is represented by this entry.\n     * @param object The {@link COSObject}, that is represented by this entry.\n     * @param parentKey The {@link COSObjectKey} of the object stream, that is containing the object.",
  "org.apache.pdfbox.pdmodel.PDDocument:addSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface)" : "* Add a signature to be created using the instance of given interface.\n     * <p>\n     * Only one signature may be added in a document. To sign several times,\n     * load document, add signature, save incremental and close again.\n     * \n     * @param sigObject is the PDSignatureField model\n     * @param signatureInterface is an interface whose implementation provides\n     * signing capabilities. Can be null if external signing if used.\n     * @throws IOException if there is an error creating required fields\n     * @throws IllegalStateException if one attempts to add several signature\n     * fields.",
  "org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* creates a new crypt filter dictionary from the low level dictionary provided.\n     * @param d the low level dictionary that will be managed by the newly created object",
  "org.apache.pdfbox.pdfparser.BaseParser:skipSpaces()" : "* This will skip all spaces and comments that are present.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6:generatePatch(java.awt.geom.Point2D[],float[][])" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDParentTreeValue:<init>(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileDescription()" : "* This will get the description.\n     *\n     * @return The file description.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setSetWidgetFieldFlags(int)" : "* This will set the widget field flags that are associated with this field.\n     * The 'SetF' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the \"set widget field flags\".",
  "org.apache.pdfbox.rendering.PDFRenderer:setSubsamplingAllowed(boolean)" : "* Sets a value instructing the renderer whether it is allowed to subsample images before\r\n     * drawing. The subsampling frequency is determined according to image size and requested scale.\r\n     *\r\n     * Subsampling may be faster and less memory-intensive in some cases, but it may also lead to\r\n     * loss of quality, especially in images with high spatial frequency.\r\n     *\r\n     * @param subsamplingAllowed The new value indicating if subsampling is allowed.",
  "org.apache.pdfbox.rendering.GroupGraphics:drawGlyphVector(java.awt.font.GlyphVector,float,float)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getPadding()" : "* Gets the padding (Padding). The default value is 0.\n     * \n     * @return the padding (a Float or an array of float)",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for reading.\n     * \n     * @param entry the dictionary of the appearance entry",
  "org.apache.pdfbox.pdmodel.font.encoding.Encoding:getNameToCodeMap()" : "* Returns an unmodifiable view of the name -&gt; code mapping. More than one name may map to\n     * the same code.\n     *\n     * @return the name -&gt; code map",
  "org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:getDashArray()" : "* Returns the dash array.\n     * @return the dash array, never null.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:<init>(org.apache.pdfbox.pdmodel.font.FontCache)" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setCurrentTransformationMatrix(org.apache.pdfbox.util.Matrix)" : "* Set the value of the CTM.\n     *\n     * @param value The current transformation matrix.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setDecimalSeparator(java.lang.String)" : "* This will set the text to be used as the decimal point in displaying numerical values.\r\n     * \r\n     * @param decimalSeparator decimal separator",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)" : "* Draw an inline image at the x,y coordinates and a certain width and height.\n     *\n     * @param inlineImage The inline image to draw.\n     * @param x The x-coordinate to draw the inline image.\n     * @param y The y-coordinate to draw the inline image.\n     * @param width The width of the inline image to draw.\n     * @param height The height of the inline image to draw.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:toString()" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Set a marked content point with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(java.awt.Color)" : "* Set the stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getRichText()" : "* This will set the rich text that is associated with this field.\n     *\n     * @return The rich text XHTML stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:getPage()" : "* Get the page on which the object shall be rendered.\r\n     *\r\n     * @return the referenced page or null.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getStrokingColorSpace()" : "* Returns the stroking color space.\n     *\n     * @return The stroking color space.",
  "org.apache.pdfbox.pdmodel.PDDocument:assignAppearanceDictionary(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:ensureStream()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:setBlackPoint(org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus)" : "* This will set the BlackPoint tristimulus.\n     *\n     * @param blackpoint the BlackPoint tristimulus",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels:getPageLabelRange(int)" : "* Returns the page label range starting at the given page, or {@code null}\n     * if no such range is defined.\n     * \n     * @param startPage\n     *            the 0-based page index representing the start page of the page\n     *            range the item is defined for.\n     * @return the page label range or {@code null} if no label range is defined\n     *         for the given start page.",
  "org.apache.pdfbox.text.TextPosition:getHeight()" : "* This will get the maximum height of all characters in this string.\n     *\n     * @return The maximum height of all characters in this string.",
  "org.apache.pdfbox.cos.COSString:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* Visitor pattern double dispatch method.\n     * \n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If an error occurs while visiting this object.",
  "org.apache.pdfbox.rendering.PageDrawer:strokePath()" : null,
  "org.apache.pdfbox.rendering.PageDrawer:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:isTimestampRequired()" : "* Indicates if a timestamp is required.\n     * \n     * @return true if a timestamp is required",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:transformWidth(float)" : "* Transforms a width using the CTM.\n     * \n     * @param width the width to be transformed\n     * \n     * @return the transformed width",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor using the given shading dictionary.\r\n     *\r\n     * @param shadingDictionary the dictionary for this shading",
  "org.apache.pdfbox.pdfwriter.COSWriter:<init>(java.io.OutputStream)" : "* COSWriter constructor.\n     *\n     * @param outputStream The output stream to write the PDF.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getTrustedMode()" : "* If true, the application was in trusted mode when signing took place.\n     *\n     * @return true if the application was in trusted mode while signing.\n     *              default: false",
  "org.apache.pdfbox.pdfwriter.COSWriter:<init>(java.io.OutputStream,org.apache.pdfbox.pdfwriter.compress.CompressParameters)" : "* COSWriter constructor.\n     *\n     * @param outputStream The output stream to write the PDF.\n     * @param compressParameters The configuration for the document's compression.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeOwnerPassword(byte[],byte[],int,int)" : "* Compute the owner entry in the encryption dictionary.\n     *\n     * @param ownerPassword The plaintext owner password.\n     * @param userPassword The plaintext user password.\n     * @param encRevision The revision number of the encryption algorithm.\n     * @param length The length of the encryption key.\n     *\n     * @return The o entry of the encryption dictionary.\n     *\n     * @throws IOException if the owner password could not be computed",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:setLowerLimit(java.lang.Integer)" : "* Set the lowest value for the key in the map.\n     *\n     * @param lower The new lowest value for a key in the map.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:loadICCProfile()" : "* Load the ICC profile, or init alternateColorSpace color space.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getNumComponentsFromImageMetadata(javax.imageio.ImageReader)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequenceWithProperties:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite$BlendCompositeContext:compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:<init>(float,float)" : "* Constructor for immutable rectangle.\n     *\n     * @param width The width of the rectangle.\n     * @param height The height of the rectangle.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setLanguage(java.lang.String)" : "* Sets the language (Lang).\n     * \n     * @param language the language",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getRawImage()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setLegalAttestation(java.util.List)" : "* (Optional, PDF 1.6) An array of text strings that specifying possible legal\n     * attestations.\n     *\n     * @param legalAttestation is a list of possible text string that specifying possible\n     * legal attestations.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawZapf(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream,int,int,java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)" : "* Begin a marked content sequence.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setLeading(float)" : "* Sets the text leading.\n     *\n     * @param leading The leading in unscaled text units.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getCaptionPositioning()" : "* This will retrieve the caption positioning.\n     * \n     * @return the caption positioning",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new soft mask.\r\n     *\r\n     * @param dictionary The soft mask dictionary.",
  "org.apache.pdfbox.pdmodel.PDPage:setThreadBeads(java.util.List)" : "* This will set the list of thread beads.\n     * \n     * @param beads A list of PDThreadBead objects or null.",
  "org.apache.pdfbox.cos.COSDictionary:setBoolean(org.apache.pdfbox.cos.COSName,boolean)" : "* This will set an item in the dictionary.\n     *\n     * @param key The key to the dictionary object.\n     * @param value The value to the dictionary object.",
  "org.apache.pdfbox.pdmodel.PDPage:setStructParents(int)" : "* This will set the key for this page in the structural parent tree.\n     * \n     * @param structParents The new key for this page.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setHighlightMode(java.lang.String)" : "* Set the highlight mode. See the HIGHLIGHT_MODE_XXX constants.\n     *\n     * @param mode The new highlight mode.",
  "org.apache.pdfbox.cos.COSObject:toString()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getWeight()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setClearWidgetFieldFlags(int)" : "* This will set the field flags that are associated with this field.\n     * The 'ClrF' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the \"clear field flags\".",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getAlternateDescription()" : "* Gets the alternate description (Alt).\r\n     * \r\n     * @return the alternate description",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setFourColors(java.lang.String,org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours)" : "* Sets four colours.\n     * \n     * @param name the attribute name\n     * @param value the four colours",
  "org.apache.pdfbox.pdmodel.PDDocument:protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)" : "* Protects the document with a protection policy. The document content will be really\n     * encrypted when it will be saved. This method only marks the document for encryption. It also\n     * calls {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was set to true\n     * previously and logs a warning.\n     * <p>\n     * Do not use the document after saving, because the structures are encrypted.\n     * The same applies if your file was created from parts of another file and that\n     * one is to be used after saving.\n     *\n     * @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy\n     * @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy\n     *\n     * @param policy The protection policy.\n     * @throws IOException if there isn't any suitable security handler.",
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.blend.BlendMode$BlendChannelFunction,org.apache.pdfbox.pdmodel.graphics.blend.BlendMode$BlendFunction)" : "* Private constructor due to the limited set of possible blend modes.\r\n     * \r\n     * @param name the corresponding COSName of the blend mode\r\n     * @param blendChannel the blend function for separable blend modes\r\n     * @param blend the blend function for non-separable blend modes",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setTitle(java.lang.String)" : "* This will set the title of the document.\n     *\n     * @param title The new title for the document.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getParser(org.apache.pdfbox.io.RandomAccessRead,boolean)" : null,
  "org.apache.pdfbox.pdmodel.graphics.PDXObject:<init>(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.cos.COSName)" : "* Creates a new XObject from the given stream and subtype.\r\n     * \r\n     * @param stream The stream to read.\r\n     * @param subtype the subtype to be used for this XObject",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:removeUserProperty(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty)" : "* Removes a user property.\n     * \n     * @param userProperty the user property",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Word:getText()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(org.apache.pdfbox.io.RandomAccessRead,java.io.InputStream,int)" : "* Constructor.\n     *\n     * @param documentSource Original PDF document as RandomAccessRead\n     * @param imageStream Image as a stream\n     * @param page The 1-based page number for which the page size should be calculated.\n     * @throws IOException if the new instance of PDVisibleSignDesigner could not be created",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:setColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the stroking color.\n     * @param color The new stroking color.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setNonSymbolic(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:toPaint(org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getMinimumRevision()" : "* The software module revision number, used to determinate the minimum version of software that\n     * is required in order to process this signature.\n     * <p>\n     * NOTE: this entry is deprecated for PDF v1.7\n     * </p>\n     *\n     * @return the revision of the software module",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setClearFieldFlags(int)" : "* This will set the field flags that are associated with this field.\n     * The 'ClrFf' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the \"clear field flags\".",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setLocked(boolean)" : "* Set the locked flag.\n     *\n     * @param locked The new locked flag.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchTriggered()" : "* Indicates wether the brute force search for objects was triggered.\n     * \n     * @return true if the search was triggered",
  "org.apache.pdfbox.pdmodel.font.PDFont:isStandard14()" : "* Returns true if this font is one of the \"Standard 14\" fonts and receives special handling.\n     * \n     * @return true if this font is one of the \"Standard 14\" fonts",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:isParagraphStart()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setSubtype(java.lang.String)" : "* This will set the sub type (and hence appearance, AP taking precedence) For this annotation. See the SUB_TYPE_XXX\n     * constants for valid values.\n     *\n     * @param subType The subtype of the annotation",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:addMarkedContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent)" : "* Adds a marked content to the contents.\r\n     * \r\n     * @param markedContent the marked content",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getRolloverAppearance()" : "* Get the annotations rollover appearance.\n     * \n     * <p>\n     * This will get the annotations rollover appearance. If this is not\n     * existent an empty appearance entry will be created.\n     * \n     * @return the appearance entry representing the rollover appearance.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getColorSpaceType()" : "* Returns the type of the color space in the ICC profile. If the ICC profile is invalid, the\n     * type of the alternate colorspace is returned, which will be one of\n     * {@link ColorSpace#TYPE_GRAY TYPE_GRAY}, {@link ColorSpace#TYPE_RGB TYPE_RGB},\n     * {@link ColorSpace#TYPE_CMYK TYPE_CMYK}, or -1 if that one is invalid.\n     *\n     * @return an ICC color space type. See {@link ColorSpace#getType()} and the static values of\n     * {@link ColorSpace} for more details.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getDistances()" : "* This will return the distances.\r\n     * \r\n     * @return distances",
  "org.apache.pdfbox.cos.COSDictionary:getItem(org.apache.pdfbox.cos.COSName)" : "* This will do a lookup into the dictionary.\n     *\n     * @param key The key to the object.\n     *\n     * @return The item that matches the key.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:close()" : "* Close the content stream.  This must be called when you are done with this object.\n     *\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:isBadPath(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setDate(java.lang.String)" : "* The build date of the software module. This string is normally produced by the compiler.\n     *\n     * @param date is the build date of the software module",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:<init>(java.io.InputStream,int[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.text.TextPosition:mergeDiacritic(org.apache.pdfbox.text.TextPosition)" : "* Merge a single character TextPosition into the current object. This is to be used only for\n     * cases where we have a diacritic that overlaps an existing TextPosition. In a graphical\n     * display, we could overlay them, but for text extraction we need to merge them. Use the\n     * contains() method to test if two objects overlap.\n     *\n     * @param diacritic TextPosition to merge into the current TextPosition.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTPadding()" : "* Gets the offset to account for the separation between the table cell’s\n     * content rectangle and the surrounding border (TPadding). The default\n     * value is 0.\n     * \n     * @return the table padding (a Float or an array of float)",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:getName()" : "* Returns the PDF name for the state.\n         * @return the name of the state",
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup:<init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Creates a Transparency Group for reading.\n     * \n     * @param stream The XObject stream\n     * @param cache the cache to be used for the resources",
  "org.apache.pdfbox.cos.COSDictionary:entrySet()" : "* Returns the name-value entries in this dictionary. The returned set is in the order the entries were added to the\n     * dictionary.\n     *\n     * @since Apache PDFBox 1.1.0\n     * @return name-value entries in this dictionary",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:findNamedDestinationPage(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination)" : "* Find the page destination from a named destination.\n     * @param namedDest the named destination.\n     * @return a PDPageDestination object or null if not found.\n     * @throws IOException if there is an error creating the PDPageDestination object.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceGrayColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getColorantNames()" : "* Returns the list of colorants.\n     * @return the list of colorants",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanAssembleDocument(boolean)" : "* Set if the user can insert/rotate/delete pages.\n     * <p>\n     * This method will have no effect if the object is in read only mode.\n     *\n     * @param allowAssembly A boolean determining if the user can assemble the document.",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:<init>(java.io.OutputStream,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingContext:getRaster(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBWithAttributes(float[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveBoundingBox(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* Resolve the bounding box.\n     * \n     * @param fieldWidget the annotation widget.\n     * @param appearanceStream the annotations appearance stream.\n     * @return the resolved boundingBox.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setURLRequired(boolean)" : "* set true if URL shall be required as a constraint on signature.\n     *\n     * @param flag if true, the specified URL shall be enforced as a constraint.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setSpaceAfter(float)" : "* Sets the amount of extra space following the after edge of the BLSE in\n     * the block-progression direction (SpaceAfter).\n     * \n     * @param spaceAfter the space after",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:isOutsideOneInterval(double)" : null,
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setLowerLimit(java.lang.String)" : "* Set the lowest value for the key in the map.\n     *\n     * @param lower The new lowest value for a key in the map.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:<init>()" : "* Default constructor",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getContents()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isPrinted()" : "* Get the printed flag.\n     *\n     * @return The printed flag.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBlockAlign(java.lang.String)" : "* Sets the alignment, in the block-progression direction, of content within\n     * the table cell (BlockAlign). The value should be one of:\n     * <ul>\n     *   <li>{@link #BLOCK_ALIGN_BEFORE},</li>\n     *   <li>{@link #BLOCK_ALIGN_MIDDLE},</li>\n     *   <li>{@link #BLOCK_ALIGN_AFTER},</li>\n     *   <li>{@link #BLOCK_ALIGN_JUSTIFY}.</li>\n     * </ul>\n     * \n     * @param blockAlign the block alignment",
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromInt(org.apache.pdfbox.cos.COSInteger)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:getValue()" : "* Returns the value of this field, or an empty string.\n     * \n     * @return A non-null string.",
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:parseWidth(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.util.Matrix:<init>()" : "* Constructor. This produces an identity matrix.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setDistances(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])" : "* This will set the distances.\r\n     * \r\n     * @param distances distances",
  "org.apache.pdfbox.text.PDFTextStripper:setParagraphStart(java.lang.String)" : "* Sets the string which will be used at the beginning of a paragraph.\n     * \n     * @param s the paragraph start string",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:scanNewLine()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setLeading(float)" : "* This will set the leading for the font.\n     *\n     * @param leading The new leading for the font.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getInnerFormResources()" : "* Gets inner form Resource\n     * @return the inner form's resources",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getTintTransform()" : "* This will get the tint transform function.\n     *\n     * @return The tint transform function.\n     *\n     * @throws IOException if there is an error creating the function.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setLineWidth(float)" : "* set the value of the line width.\n     *\n     * @param value The current line width.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:getMatrix()" : "* Returns the pattern matrix, or the identity matrix is none is available.\n     * \n     * @return the pattern matrix",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:size()" : "* {@inheritDoc}",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:appendDocument(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDDocument)" : "* append all pages from source to destination.\n     *\n     * @param destination the document to receive the pages\n     * @param source the document originating the new pages\n     *\n     * @throws IOException If there is an error accessing data from either\n     * document.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getWidthFromFont(int)" : null,
  "org.apache.pdfbox.cos.COSDocument:isClosed()" : "* Returns true if this document has been closed.\n     * \n     * @return true if the document is already closed, false otherwise",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setEncryptionKey(byte[])" : "* Sets the current encryption key data.\n     *\n     * @param encryptionKey The encryption key data to set.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setThousandsSeparator(java.lang.String)" : "* This will set the text to be used between orders of thousands in display of numerical values.\r\n     * \r\n     * @param thousandsSeparator thousands separator",
  "org.apache.pdfbox.util.filetypedetector.ByteTrie:setDefaultValue(java.lang.Object)" : "* Sets the default value to use in {@link ByteTrie#find(byte[])} when no path matches.\n     * @param defaultValue",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.text.PDFTextStripper:beginMarkedContentSequence(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:setBitsPerComponent(int)" : "* Set the number of bits per component.\n     *\n     * @param bitsPerComponent the number of bits per component",
  "org.apache.pdfbox.cos.COSFloat:intValue()" : "* This will get the integer value of this object.\n     *\n     * @return The int value of this object,",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:showText(java.lang.String)" : "* Shows the given text at the location specified by the current text matrix.\n     *\n     * @param text The Unicode text to show.\n     * @throws IOException If an io exception occurs.\n     * @throws IllegalArgumentException if a character isn't supported by the current font",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:setOpenInNewWindow(org.apache.pdfbox.pdmodel.interactive.action.OpenMode)" : "* This will specify whether to open the destination document in a new window.\n     *\n     * @param value The flag value.",
  "org.apache.pdfbox.filter.DecodeOptions:getSubsamplingY()" : "* When decoding an image, the number of rows to advance in the source for every pixel decoded.\n     *\n     * @return The y-axis subsampling value",
  "org.apache.pdfbox.multipdf.Overlay:overlayDocuments(java.util.Map)" : "* This will add overlays documents to a document. If you created the overlay documents with\n     * subsetted fonts, you need to save them first so that the subsetting gets done.\n     *\n     * @param specificPageOverlayDocumentMap Optional map of overlay documents for specific pages. The\n     * page numbers are 1-based. The map must be empty (but not null) if no specific mappings are\n     * used.\n     *\n     * @return The modified input PDF document, which has to be saved and closed by the caller. If\n     * the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)}\n     * then it is that object that is returned.\n     *\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getPages()" : "* Returns all pages in the document, as a page tree.\n     * \n     * @return PDPageTree providing all pages of the document",
  "org.apache.pdfbox.pdfparser.BaseParser:isHexDigit(char)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.filter.ASCIIHexFilter:isWhitespace(int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getShadingType()" : null,
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getBlendFunction()" : "* Returns the blend function, only available for non separable blend modes.\r\n     * \r\n     * @return the blend function",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getLabelPrefixString()" : "* This will return the text to be concatenated to the left of the label specified by U.\r\n     * @return label prefix",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction,org.apache.pdfbox.pdfwriter.compress.CompressParameters)" : "* Merge the list of source documents, saving the result in the destination file. The source\n     * list is not reset after merge. If you want to merge one document at a time, then it's better\n     * to use\n     * {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}.\n     *\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code>\n     * unrestricted main memory is used\n     * @param compressParameters defines if compressed object streams are enabled\n     * \n     * @throws IOException If there is an error saving the document.",
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getNumbers()" : "* This will return a map of numbers on this level. The key will be a java.lang.Integer, the\n     * value will depend on where this class is being used.\n     *\n     * @return A map of COS objects.\n     *\n     * @throws IOException If there is a problem creating the values.",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getAuthor()" : "* This will get the author of the document.  This will return null if no author exists.\n     *\n     * @return The author of the document.",
  "org.apache.pdfbox.cos.COSStream:checkClosed()" : "* Throws if the random access backing store has been closed. Helpful for catching cases where\n     * a user tries to use a COSStream which has outlived its COSDocument.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setVisualSignature(org.apache.pdfbox.cos.COSDocument)" : "* \n     * Sets COSDocument of visible Signature.\n     * \n     * @see org.apache.pdfbox.cos.COSDocument\n     * @param visualSignature the visual signature",
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:getAfter()" : "* This will get the javascript that is executed after the import.\n     *\n     * @return Some javascript code.",
  "org.apache.pdfbox.multipdf.Overlay:createLayoutPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Create a LayoutPage object from given PDPage object.\n     *\n     * @return\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Create a PDImageXObject using the Flate filter.\n     * \n     * @param document The document.\n     * @param byteArray array with data.\n     * @param width the image width\n     * @param height the image height\n     * @param bitsPerComponent the bits per component\n     * @param initColorSpace the color space\n     * @return the newly created PDImageXObject with the data compressed.\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:getPairableItems(org.apache.pdfbox.cos.COSBase,int)" : "* Return either one of a list which can have two-element arrays entries.\n     * <p>\n     * Some entries in a dictionary can either be an array of elements\n     * or an array of two-element arrays. This method will either return\n     * the elements in the array or in case of two-element arrays, the element\n     * designated by the pair index\n     * </p>\n     * <p>\n     * An {@link IllegalArgumentException} will be thrown if the items contain\n     * two-element arrays and the index is not 0 or 1.\n     * </p>\n     * \n     * @param items the array of elements or two-element arrays\n     * @param pairIdx the index into the two-element array\n     * @return a List of single elements",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(float,float,float)" : "* Set the stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:reshapeControlPoints(java.awt.geom.Point2D[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setRichContents(java.lang.String)" : "* This will set the rich text stream which is displayed in the popup window.\n     *\n     * @param rc the rich text stream.",
  "org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy:<init>(java.lang.String,java.lang.String,org.apache.pdfbox.pdmodel.encryption.AccessPermission)" : "* Creates an new instance of the standard protection policy\n     * in order to protect a PDF document with passwords.\n     *\n     * @param ownerPassword The owner password.\n     * @param userPassword The user password.\n     * @param permissions The access permissions given to the user.",
  "org.apache.pdfbox.cos.COSString:getString()" : "* Returns the content of this string as a PDF <i>text string</i>.\n     * \n     * @return the PDF string representation of the COSString",
  "org.apache.pdfbox.text.TextPosition:completelyContains(org.apache.pdfbox.text.TextPosition)" : "* Determine if this TextPosition perfectly contains another (i.e. the other TextPosition\n     * overlaps 100% with this one and fits entirely inside its bounding box when they are rendered\n     * on top of each other).\n     *\n     * @param tp2 The other TestPosition to compare against\n     * @return True if tp2 is contained completely inside the bounding box of this text.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:setDomainValues(org.apache.pdfbox.cos.COSArray)" : "* This will set the domain values.\n     *\n     * @param domainValues The new domain values.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationUnderline:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:setLowerLeftX(float)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:isCharSetMatch(org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo,org.apache.pdfbox.pdmodel.font.FontInfo)" : "* Returns true if the character set described by CIDSystemInfo is present in the given font.\n     * Only applies to Adobe-GB1, Adobe-CNS1, Adobe-Japan1, Adobe-Korea1, as per the PDF spec.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:getDescendantFont(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting data from the element.",
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:nextState()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:updateCrc(byte[],int,int)" : null,
  "org.apache.pdfbox.cos.COSDictionary:setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ).\n     *\n     * @param key The key to the dictionary object.\n     * @param value The value to the dictionary object.",
  "org.apache.pdfbox.pdfparser.PDFParser:initialParse()" : "* The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset)\n     * to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref\n     * at the beginning of the file. Last the root object is parsed.\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException If something went wrong.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setBorder(org.apache.pdfbox.cos.COSArray)" : "* This will set the border array.\n     * \n     * @param borderArray the border array to set.",
  "org.apache.pdfbox.pdfparser.BaseParser:readLine()" : "* This will read bytes until the first end of line marker occurs.\n     * NOTE: The EOL marker may consists of 1 (CR or LF) or 2 (CR and CL) bytes\n     * which is an important detail if one wants to unread the line.\n     *\n     * @return The characters between the current position and the end of the line.\n     *\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:readCode(java.io.InputStream)" : null,
  "org.apache.pdfbox.cos.COSObject:<init>(org.apache.pdfbox.cos.COSBase)" : "* Constructor.\n     *\n     * @param object The object that this encapsulates.\n     *",
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:extractFromTiff(org.apache.pdfbox.io.RandomAccessRead,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new PrintField attribute object with a given dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:isDamaged()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Le:compare(java.lang.Number,java.lang.Number)" : null,
  "org.apache.pdfbox.util.Hex:decodeHex(java.lang.String)" : "* Decodes a hex String into a byte array.\n     *\n     * @param s A String with ASCII hex.\n     * @return decoded byte array.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:getSelectedExportValues()" : "* This will get the selected export values.\n     * <p>\n     * A RadioButton might have an export value to allow field values\n     * which can not be encoded as PDFDocEncoding or for the same export value \n     * being assigned to multiple RadioButtons in a group.<br>\n     * To define an export value the RadioButton must define options {@link #setExportValues(List)}\n     * which correspond to the individual items within the RadioButton.</p>\n     * <p>\n     * The method will either return the corresponding values from the options entry or in case there\n     * is no such entry the fields value</p>\n     * \n     * @return the export value of the field.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setMultiSelect(boolean)" : "* Set the MultiSelect bit.\n     *\n     * @param multiSelect The value for MultiSelect.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:setUserProperties(java.util.List)" : "* Sets the user properties.\n     * \n     * @param userProperties the user properties",
  "org.apache.pdfbox.cos.COSDictionary:size()" : "* This will return the number of elements in this dictionary.\n     *\n     * @return The number of elements in the dictionary.",
  "org.apache.pdfbox.pdfparser.PDFStreamParser:hasNoFollowingBinData()" : "* Looks up an amount of bytes if they contain only ASCII characters (no\n     * control sequences etc.), and that these ASCII characters begin with a\n     * sequence of 1-3 non-blank characters between blanks\n     *\n     * @return <code>true</code> if next bytes are probably printable ASCII\n     * characters starting with a PDF operator, otherwise <code>false</code>",
  "org.apache.pdfbox.pdmodel.PageLayout:stringValue()" : "* Returns the string value, as used in a PDF file.\r\n     * \r\n     * @return the string value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:hasNext()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getReason()" : "* Returns the reason for the signing, such as (I agree...).\n     *\n     * @return the reason",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setColSpan(int)" : "* Sets the number of columns in the enclosing table that shall be spanned\n     * by the cell (ColSpan).\n     * \n     * @param colSpan the column span",
  "org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding:getEncodingName()" : null,
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeMarkInfo(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLeading(float)" : "* Sets the text leading.\n     *\n     * @param leading The leading in unscaled text units.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.filter.DCTFilter:clamp(float)" : null,
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:isOnNewLine()" : "* This will tell if we are on a newline.\n     *\n     * @return true If we are on a newline.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getLabelSuffixString()" : "* This will return the text to be concatenated after the label specified by U.\r\n     * \r\n     * @return label suffix",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:readPatch(javax.imageio.stream.ImageInputStream,boolean,java.awt.geom.Point2D[],float[][],long,long,org.apache.pdfbox.pdmodel.common.PDRange,org.apache.pdfbox.pdmodel.common.PDRange,org.apache.pdfbox.pdmodel.common.PDRange[],org.apache.pdfbox.util.Matrix,java.awt.geom.AffineTransform,int)" : "* Read a single patch from a data stream, a patch contains information of its coordinates and color parameters.\n     *\n     * @param input the image source data stream\n     * @param isFree whether this is a free patch\n     * @param implicitEdge implicit edge when a patch is not free, otherwise it's not used\n     * @param implicitCornerColor implicit colors when a patch is not free, otherwise it's not used\n     * @param maxSrcCoord the maximum coordinate value calculated from source data\n     * @param maxSrcColor the maximum color value calculated from source data\n     * @param rangeX range for coordinate x\n     * @param rangeY range for coordinate y\n     * @param colRange range for color\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @param xform transformation for user to device space\n     * @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading\n     * @return a single patch\n     * @throws IOException when something went wrong",
  "org.apache.pdfbox.pdfparser.BaseParser:parseCOSName()" : "* This will parse a PDF name from the stream.\n     *\n     * @return The parsed PDF name.\n     * @throws IOException If there is an error reading from the stream.",
  "org.apache.pdfbox.cos.COSArray:add(int,org.apache.pdfbox.cos.COSBase)" : "* Add the specified object at the ith location and push the rest to the\n     * right.\n     *\n     * @param i The index to add at.\n     * @param object The object to add at that index.",
  "org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getReferencedKey()" : "* Returns the {@link COSObjectKey} of the object, that is described by this crossreference stream entry.\n     *\n     * @return The {@link COSObjectKey} of the object, that is described by this crossreference stream entry.",
  "org.apache.pdfbox.text.PDFTextStripper:setStartPage(int)" : "* This will set the first page to be extracted by this class.\n     *\n     * @param startPageValue New value of 1-based startPage property.\n     * \n     * @throws IllegalArgumentException if the parameter is below 1.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showText(byte[])" : "* Process text from the PDF Stream. You should override this method if you want to\n     * perform an action when encoded text is being processed.\n     *\n     * @param string the encoded text\n     * @throws IOException if there is an error processing the string",
  "org.apache.pdfbox.pdmodel.common.PDStream:setDecodeParms(java.util.List)" : "* This will set the list of decode parameters.\n     * \n     * @param decodeParams The list of decode parameters.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:loadVertical(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,boolean)" : "* Loads a TTF to be embedded into a document as a vertical Type 0 font.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param ttf A TrueType font.\n     * @param embedSubset True if the font will be subset before embedding\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font stream.",
  "org.apache.pdfbox.cos.COSDocumentState:isAcceptingUpdates()" : "* Returns {@code true}, if the document´s {@link #parsing} is completed and it may be updated.\n     *\n     * @return {@code true}, if the document´s {@link #parsing} is completed and it may be updated.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:convXYZtoRGB(float,float,float)" : null,
  "org.apache.pdfbox.util.DateConverter:toCalendar(java.lang.String)" : "* Returns the Calendar for a given string containing a date,\n     * or {@code null} if it cannot be parsed.\n     *\n     * The returned value will have 0 for DST_OFFSET.\n     *\n     * @param text A COS string containing a date.\n     * @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.",
  "org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:getDifferences()" : "* Returns the Differences array.\n     * \n     * @return a map containing all differences",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setForceBold(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getStyle()" : "* @return the style for this transition\n     * @see PDTransitionStyle#valueOf(String)",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isRichText()" : "* @return true if the field is a rich text field.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDField#PDField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:getColorSpace()" : "* Returns the process color space\n     * @return the process color space\n     * @throws IOException if the color space cannot be read",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getIntent()" : "* Get the intent of the annotation.\n     * \n     * @return The intent of the annotation.",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:<init>()" : "* Default constructor.\n     *",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getCIDFont(java.lang.String,org.apache.pdfbox.pdmodel.font.PDFontDescriptor,org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo)" : "* Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null.\n     * This method can also map CJK fonts via their CIDSystemInfo (ROS).\n     * \n     * @param fontDescriptor FontDescriptor\n     * @param cidSystemInfo the CID system info, e.g. \"Adobe-Japan1\", if any.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Line:<init>(java.awt.Point,java.awt.Point,float[],float[])" : "* Constructor of class Line.\n     *\n     * @param p0 one end of a line\n     * @param p1 the other end of the line\n     * @param c0 color of point p0\n     * @param c1 color of point p1",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setReadingDirection(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$READING_DIRECTION)" : "* Set the reading direction preference.\n     *\n     * @param value Set the reading direction preference.",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:isEmbeddingPermitted(org.apache.fontbox.ttf.TrueTypeFont)" : "* Returns true if the fsType in the OS/2 table permits embedding.",
  "org.apache.pdfbox.rendering.TilingPaint:getAnchorRect(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern)" : "* Returns the anchor rectangle, which includes the XStep/YStep and scaling.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:transform(org.apache.pdfbox.util.Matrix)" : "* The cm operator. Concatenates the given matrix with the current transformation matrix (CTM),\n     * which maps user space coordinates used within a PDF content stream into output device\n     * coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2\n     * Coordinate Spaces.\n     *\n     * @param matrix the transformation matrix\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnGap(float)" : "* Sets the desired space between all columns in the inline-progression\n     * direction (ColumnGap).\n     * \n     * @param columnGap the column gap",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : "* Fills the clipping area with the given shading.\n     *\n     * @param shading Shading resource\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:applyMask(java.awt.image.BufferedImage,java.awt.image.BufferedImage,boolean,boolean,float[])" : "* @param image The image to apply the mask to as alpha channel.\r\n     * @param mask A mask image in 8 bit Gray. Even for a stencil mask image due to\r\n     * {@link #getOpaqueImage()} and {@link SampledImageReader}'s {@code from1Bit()} special\r\n     * handling of DeviceGray.\r\n     * @param interpolateMask interpolation flag of the mask image.\r\n     * @param isSoft {@code true} if a soft mask. If not stencil mask, then alpha will be inverted\r\n     * by this method.\r\n     * @param matte an optional RGB matte if a soft mask.\r\n     * @return an ARGB image (can be the altered original image)",
  "org.apache.pdfbox.rendering.TilingPaintFactory$TilingPaintParameter:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:width(float)" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:<init>()" : "* creates a new transition with default \"replace\" style {@link PDTransitionStyle#R}",
  "org.apache.pdfbox.util.Hex:getCharsUTF16BE(java.lang.String)" : "* Takes the characters in the given string, convert it to bytes in UTF16-BE format\n     * and build a char array that corresponds to the ASCII hex encoding of the resulting\n     * bytes.\n     *\n     * Example:\n     * <pre>\n     *   getCharsUTF16BE(\"ab\") == new char[]{'0','0','6','1','0','0','6','2'}\n     * </pre>\n     *\n     * @param text The string to convert\n     * @return The string converted to hex",
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree:iterator()" : "* Returns an iterator which walks all fields in the tree, in order.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setScaleRatio(java.lang.String)" : "* This will set the scale ration.\r\n     * \r\n     * @param scaleRatio the scale ratio.",
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Xor:applyforInteger(int,int)" : null,
  "org.apache.pdfbox.pdfparser.BaseParser:<init>(org.apache.pdfbox.io.RandomAccessRead)" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getF()" : "* This will get the file name to be launched or the document to be opened\n     * or printed, in standard Windows pathname format. If the name string includes\n     * a backslash character (\\), the backslash must itself be preceded by a backslash.\n     * This value must be a single string; it is not a file specification.\n     *\n     * @return The F entry of the specific Windows launch parameter dictionary.",
  "org.apache.pdfbox.filter.ASCII85Filter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser:close()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setRise(float)" : "* Set the value of the rise.\n     *\n     * @param value The rise.",
  "org.apache.pdfbox.pdfparser.xref.FreeXReference:getSecondColumnValue()" : "* Returns the value for the second column of the crossreference stream entry. (This is the object number of the set\n     * next free {@link COSObjectKey} - for entries of this type.)\n     *\n     * @return The value for the second column of the crossreference stream entry.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRowType4()" : null,
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:setKids(java.util.List)" : "* Set the children of this number tree.\n     *\n     * @param kids The children of this number tree. These have to be in sorted order. Because of\n     * that, it is usually easier to call {@link #setNumbers(Map)} with a map and pass a single\n     * element list here.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setRowSpan(int)" : "* Sets the number of rows in the enclosing table that shall be spanned by\n     * the cell (RowSpan).\n     * \n     * @param rowSpan the row span",
  "org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:popInt()" : "* Pops a value of type int from the stack. If the value is not of type int, a\n     * ClassCastException is thrown.\n     * @return the int value",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setVolume(float)" : "* Gets the volume at which to play the sound, in the range −1.0 to 1.0.\n     *\n     * @param volume The volume at which to play the sound, in the range −1.0 to 1.0.\n     * \n     * @throws IllegalArgumentException if the volume parameter is outside of the range −1.0 to 1.0.",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:saslPrepQuery(java.lang.String)" : "* Return the {@code SASLPrep}-canonicalised version of the given {@code str} for use as a query\n     * string. This implements the {@code SASLPrep} algorithm defined in\n     * <a href=\"https://tools.ietf.org/html/rfc4013\">RFC 4013</a>.\n     *\n     * @param str The string to canonicalise.\n     * @return The canonicalised string.\n     * @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the\n     * requirements for bidirectional character handling.\n     * @see <a href=\"https://tools.ietf.org/html/rfc3454#section-7\">RFC 3454, Section 7</a> for\n     * discussion of what a query string is.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getBaseFont()" : "* Returns the PostScript name of the font.\n     * \n     * @return the PostScript name of the font",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:hasXFA()" : "* This will tell if the AcroForm has XFA content.\n     *\n     * @return true if the AcroForm is an XFA form",
  "org.apache.pdfbox.cos.COSDocument:setIsXRefStream(boolean)" : "* Sets isXRefStream to the given value. You need to take care that the version of your PDF is\n     * 1.5 or higher.\n     *\n     * @param isXRefStreamValue the new value for isXRefStream",
  "org.apache.pdfbox.cos.COSDictionary:getDate(org.apache.pdfbox.cos.COSName,java.util.Calendar)" : "* This is a convenience method that will get the dictionary object that is expected to be a date.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid.\n     * @return The name converted to a date.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAction:setType(java.lang.String)" : "* This will set the type of PDF object that the actions dictionary describes.\n     * If present must be Action for an action dictionary.\n     *\n     * @param type The new Type for the PDF object.",
  "org.apache.pdfbox.multipdf.Splitter$KCloner:createDictionaryClone(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Vertex:<init>(java.awt.geom.Point2D,float[])" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setLineCapStyle(int)" : "* Set the line cap style.\n     *\n     * @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line cap style.",
  "org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPoint:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isFlagBitOn(int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getFontDescriptor()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:processAppearanceStringOperators(byte[])" : "* Processes the operators of the given content stream.\n     *\n     * @param content the content to parse.\n     * @throws IOException if there is an error reading or parsing the content stream.",
  "org.apache.pdfbox.cos.COSFloat:<init>(float)" : "* Constructor.\n     *\n     * @param aFloat The primitive float object that this object wraps.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:fillArc(int,int,int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:doNotSpellCheck()" : "* @return true if the field is not suppose to spell check.",
  "org.apache.pdfbox.pdfparser.xref.NormalXReference:<init>(long,org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)" : "* Prepares a normal reference for the given {@link COSObject} in a PDF's crossreference stream\n     * ({@link PDFXRefStream}).\n     *\n     * @param byteOffset The byte offset of the {@link COSObject} in the PDF file.\n     * @param key The {@link COSObjectKey}, that is represented by this entry.\n     * @param object The {@link COSObject}, that is represented by this entry.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$TextAttribute:<init>(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getBernsteinPolynomials(int)" : null,
  "org.apache.pdfbox.multipdf.Splitter:processAnnotations(org.apache.pdfbox.pdmodel.PDPage)" : "* Clone all annotations because of changes possibly made, and because the structure tree is\n     * cloned.\n     *\n     * @param imported\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:getInkList()" : "* Get one or more disjoint paths that make this annotation.\n     *\n     * @return An array of arrays, each representing a stroked path. Each array shall be a series of\n     * alternating horizontal and vertical coordinates.",
  "org.apache.pdfbox.contentstream.operator.state.Restore:getName()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:scanComment()" : null,
  "org.apache.pdfbox.pdmodel.PDPage:setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata)" : "* Set the metadata for this object. This can be null.\n     * \n     * @param meta The meta data for this object.",
  "org.apache.pdfbox.rendering.PDFRenderer:renderPageToGraphics(int,java.awt.Graphics2D)" : "* Renders a given page to an AWT Graphics2D instance at 72 DPI.\r\n     * <p>\r\n     * Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)}\r\n     * before using this.\r\n     *\r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param graphics the Graphics2D on which to draw the page\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.interactive.PlainText:<init>(java.lang.String)" : "* Construct the text block from a single value.\n     * \n     * Constructs the text block from a single value splitting\n     * into individual {@link Paragraph} when a new line character is \n     * encountered.\n     * \n     * @param textValue the text block string.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isPassword()" : "* @return true if the field is a password field.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)" : "* Encrypt or decrypt a set of data.\n     *\n     * @param objectNumber The data object number.\n     * @param genNumber The data generation number.\n     * @param data The data to encrypt.\n     * @param output The output to write the encrypted data to.\n     * @param decrypt true to decrypt the data, false to encrypt it.\n     *\n     * @throws IOException If there is an error reading the data.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:buildPDF(org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner)" : "* Build a PDF with a visible signature step by step, and return it as a stream.\n     *\n     * @param properties properties to be used for the creation\n     * @return InputStream stream containing the pdf holding the visible signature\n     * @throws IOException if the PDF could not be created",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:setLowerLeftY(float)" : "* This will set the lower left y coordinate.\n     *\n     * @param value The lower left y.",
  "org.apache.pdfbox.filter.Predictor$PredictorOutputStream:write(byte[],int,int)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:setJavascript(org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode)" : "* Set the named javascript entries that are associated with this document.\n     *\n     * @param js The new Javascript entries.",
  "org.apache.pdfbox.cos.COSDocument:getXrefTable()" : "* Returns the xrefTable which is a mapping of ObjectKeys\n     * to byte offsets in the file.\n     * @return mapping of ObjectsKeys to byte offsets",
  "org.apache.pdfbox.pdmodel.interactive.form.PDListBox:constructAppearances()" : null,
  "org.apache.pdfbox.contentstream.operator.text.BeginText:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:setVertices(float[])" : "* This will set the coordinates of the vertices.\n     *\n     * @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getRowSpan()" : "* Gets the number of rows in the enclosing table that shall be spanned by\n     * the cell (RowSpan). The default value is 1.\n     * \n     * @return the row span",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setAnnotationName(java.lang.String)" : "* This will get the value of the /NM entry in the annotation dictionary.\n     *\n     * @param name the /NM value of an annotation dictionary or null if the entry is to be removed.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:fillEvenOdd()" : "* Fills the path using the even-odd winding rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getAcroForm()" : "* Get the documents AcroForm. This will return null if no AcroForm is part of the document.\n     *\n     * @return The document's AcroForm.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:setDecodeValues(org.apache.pdfbox.cos.COSArray)" : "* This will set the decode values.\n     *\n     * @param decodeValues the new decode values",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:toUnicode(int)" : null,
  "org.apache.pdfbox.cos.COSDictionary:setName(org.apache.pdfbox.cos.COSName,java.lang.String)" : "* This is a convenience method that will convert the value to a COSName object. If it is null then the object will\n     * be removed.\n     *\n     * @param key The key to the object,\n     * @param value The string value for the name.",
  "org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators$If:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:getAppearanceStream()" : "* Returns the entry as an appearance stream.\n     *\n     * @return the entry as an appearance stream\n     * \n     * @throws IllegalStateException if this entry is not an appearance stream",
  "org.apache.pdfbox.pdmodel.PDPage:setTransition(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition,float)" : "* Convenient method to set a transition and the display duration\n     * \n     * @param transition The new transition to set on this page.\n     * @param duration The maximum length of time, in seconds, that the page shall be displayed during presentations\n     * before the viewer application shall automatically advance to the next page.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)" : "* Begin a marked content sequence with a reference to the marked content identifier (MCID).\n     *\n     * @param tag the tag to be added to the content stream\n     * @param mcid the marked content identifier (MCID)\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.PDPage:getMetadata()" : "* Get the metadata that is part of the document catalog. This will return null if there is\n     * no meta data for this object.\n     * \n     * @return The metadata for this object.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:curveTo2(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using the current point and (x2, y2) as the Bézier control points.\n     *\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IllegalStateException If the method was called within a text block.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createImageForm(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDRectangle,java.awt.geom.AffineTransform,org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setRenderingIntent(org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent)" : "* This will set the rendering intent.\n     *\n     * @param value The new rendering intent.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getOutlineItem(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getReasons()" : "* If the Reasons array is provided and {@link #isReasonRequired()} indicates that\n     * Reasons is a required constraint, one of the reasons in the array shall be used\n     * for the signature dictionary; otherwise signing shall not take place. If the\n     * {@link #isReasonRequired()} indicates Reasons is an optional constraint, one of\n     * the reasons in the array may be chose or a custom reason can be provided.\n     *\n     * @return the reasons that should be used by the signature handler",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:updateByValue(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isDigestMethodRequired()" : "*\n    * @return true if the DigestMethod is required",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:loadVertical(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : "* Loads a TTF to be embedded into a document as a vertical Type 0 font.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param input A TrueType font.\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font stream.",
  "org.apache.pdfbox.rendering.TilingPaintFactory:<init>(org.apache.pdfbox.rendering.PageDrawer)" : null,
  "org.apache.pdfbox.cos.COSDictionary:getLong(java.lang.String,long)" : "* This is a convenience method that will get the dictionary object that is expected to be an integer. If the\n     * dictionary value is null then the default value will be returned.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The integer value.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)" : "* Draw an image at the origin with the given transformation matrix.\n     *\n     * @param image The image to draw.\n     * @param matrix The transformation matrix to apply to the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:getDefaultValue()" : "* Returns the default value of this field, or an empty string.\n     *\n     * @return A non-null string.",
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getStrokeVariation()" : null,
  "org.apache.pdfbox.pdfparser.BaseParser:checkForEndOfString(int)" : "* This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this\n     * format: /Title ( (5) /Creator which was patched in 1 place.\n     *\n     * However it missed the case where the number of opening and closing parenthesis isn't balanced\n     *\n     * The second bug was in this format /Title (c:\\) /Producer\n     *\n     * @param bracesParameter the number of braces currently open.\n     *\n     * @return the corrected value of the brace counter\n     * @throws IOException",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:getCurrentSequence()" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getNextBead()" : "* This will get the next bead.  If this bead is the last bead in the list then this\n     * will return the first bead.\n     *\n     * @return The next bead in the list or the first bead if this is the last bead.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getNormalizedPath(int)" : null,
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:keySet()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getFlag2Edge()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getNonStrokingAlphaConstant()" : "* This will get the non stroking alpha constant.\n     *\n     * @return The non stroking alpha constant or null if one has not been set.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:createDescendantFont(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font)" : "* Creates a new PDCIDFont instance with the appropriate subclass.\n     *\n     * @param dictionary descendant font dictionary\n     * @return a PDCIDFont instance, based on the SubType entry of the dictionary\n     * @throws IOException if something goes wrong",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:removeExtState(org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setBorderEffect(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary)" : "* This will set the border effect dictionary, describing the effect applied to the border described by the BS\n     * entry.\n     *\n     * @param be the border effect dictionary to set.\n     *",
  "org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy:getPermissions()" : "* Returns the access permissions\n     * @return the access permissions",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:toRGB(float[])" : null,
  "org.apache.pdfbox.filter.RunLengthDecodeFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : null,
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:containsName(java.lang.String)" : "* Returns true if the given font name is one of the known names, including alias.\r\n     *\r\n     * @param fontName the name of font, either a base name or alias\r\n     * @return true if the name is one of the known names",
  "org.apache.pdfbox.multipdf.Splitter:setSplitAtPage(int)" : "* This will tell the splitting algorithm where to split the pages.  The default\n     * is 1, so every page will become a new document.  If it was two then each document would\n     * contain 2 pages.  If the source document had 5 pages it would split into\n     * 3 new documents, 2 documents containing 2 pages and 1 document containing one\n     * page.\n     *\n     * @param split The number of pages each split document should contain.\n     * @throws IllegalArgumentException if the page is smaller than one.",
  "org.apache.pdfbox.text.TextPosition:insertDiacritic(int,org.apache.pdfbox.text.TextPosition)" : "* Inserts the diacritic TextPosition to the str of this TextPosition and updates the widths\n     * array to include the extra character width.\n     *\n     * @param i current character\n     * @param diacritic The diacritic TextPosition",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setViewClip(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY)" : "* Set the ViewClip preference.  See BOUNDARY enumeration.\n     *\n     * @param value Set the ViewClip preference.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:getVertices()" : "* This will retrieve the numbers that shall represent the alternating horizontal and vertical\n     * coordinates.\n     *\n     * @return An array of floats representing the alternating horizontal and vertical coordinates.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:crc(byte[],int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite:<init>(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode,float)" : null,
  "org.apache.pdfbox.filter.ASCII85OutputStream:transformASCII85()" : "* This will transform the next four ascii bytes.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setStrokingAlphaConstant(java.lang.Float)" : "* This will set the stroking alpha constant.\n     *\n     * @param alpha The new stroking alpha constant.",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:getTextPosition()" : "* Returns the underlying TextPosition object.\n         * \n         * @return the text position",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEBasedColorSpace:toRGBImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageName(org.apache.pdfbox.cos.COSName)" : "* Sets visible signature image name\n     * \n     * @param imageName the name of the image",
  "org.apache.pdfbox.text.TextPositionComparator:compare(org.apache.pdfbox.text.TextPosition,org.apache.pdfbox.text.TextPosition)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:getBottom()" : "* Get the bottom y coordinate.  A return value of -1 implies that the current y-coordinate\n     * will be used.\n     *\n     * @return The bottom y coordinate.",
  "org.apache.pdfbox.cos.COSDictionary:getItem(java.lang.String)" : "* This will do a lookup into the dictionary.\n     * \n     * @param key The key to the object.\n     *\n     * @return The item that matches the key.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:<init>(org.apache.pdfbox.cos.COSArray)" : "* Creates a new CalRGB color space using the given COS array.\n     * @param rgb the cos array which represents this color space",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:setFields(org.apache.pdfbox.cos.COSArray)" : "* @param array the array of fields",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:closePath()" : "* Closes the current subpath.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setLineWidth(float)" : "* Set line width to the given value.\n     *\n     * @param lineWidth The width which is used for drawing.\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.util.IterativeMergeSort:sort(java.util.List,java.util.Comparator)" : "* Sorts this list according to the order induced by the specified\n     * {@link Comparator}.\n     * \n     * @param  <T> the class of the objects in the list\n     * @param  list the list to be sorted.\n     * @param  cmp the comparator to determine the order of the list.\n     *",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getSelectedOptionsIndex()" : "* This will get the indices of the selected options - the 'I' key.\n     * <p>\n     * This is only needed if a choice field allows multiple selections and\n     * two different items have the same export value or more than one values\n     * is selected.\n     * </p>\n     * <p>The indices are zero-based</p>\n     *\n     * @return List containing the indices of all selected options.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.pdmodel.font.encoding.Encoding)" : "* Loads a TTF to be embedded into a document as a simple font.\n     *\n     * <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use\n     * {@link PDType0Font#load(PDDocument, InputStream)} instead.</p>\n     * \n     * @param doc The PDF document that will hold the embedded font.\n     * @param input A TTF file stream\n     * @param encoding The PostScript encoding vector to be used for embedding.\n     * @return a PDTrueTypeFont instance.\n     * @throws IOException If there is an error loading the data.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:stroke()" : "* Stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.filter.Predictor$PredictorOutputStream:<init>(java.io.OutputStream,int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStrikeOut:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:enqueueKids(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)" : "* Returns true if the node is a page tree node (i.e. and intermediate).",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:refreshAppearances(java.util.List)" : "* Refreshes the appearance streams and appearance dictionaries for the widget annotations of the specified fields.\n     * \n     * @param fields a list of fields to be refreshed\n     * @throws IOException if the appearance streams could not be refreshed",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawCircle2(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float)" : "* Add a circle shape to the path in counterclockwise direction. You'll need this e.g. when\n     * drawing a doughnut shape. See \"Nonzero Winding Number Rule\" for more information.\n     *\n     * @param cs Content stream\n     * @param x\n     * @param y\n     * @param r Radius\n     *\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.rendering.PageDrawer:lineTo(float,float)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getActions()" : "* @return The Additional Actions for this Document",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setNormalAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry)" : "* This will set a list of appearances. If you would like to set the single appearance then you should use the key\n     * \"default\", and when the PDF is written back to the filesystem then there will only be one stream.\n     *\n     * @param entry appearance stream or subdictionary",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:getAdobeGlyphList()" : "* Returns the Adobe Glyph List (AGL).\r\n     * \r\n     * @return the Adobe glyph list",
  "org.apache.pdfbox.pdmodel.font.PDFont:getFontDescriptor()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:getFlags()" : "* A set of flags specifying various characteristics of the action\n     *\n     * @return the flags",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getRichTextValue()" : "* Get the fields rich text value.\n     * \n     * @return the rich text value string",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:readCIDToGIDMap()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:setGuideLineColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Set the color space instance for this box style.  This must be a\n     * PDDeviceRGB!\n     *\n     * @param color The new colorspace value.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getFile()" : "* This will get the application to be launched or the document\n     * to be opened or printed. It is required if none of the entries\n     * Win, Mac or Unix is present. If this entry is absent and the\n     * viewer application does not understand any of the alternative\n     * entries it should do nothing.\n     *\n     * @return The F entry of the specific launch action dictionary.\n     *\n     * @throws IOException If there is an error creating the file spec.",
  "org.apache.pdfbox.cos.COSString:hashCode()" : null,
  "org.apache.pdfbox.cos.COSDictionary:getDictionaryObject(org.apache.pdfbox.cos.COSName)" : "* This will get an object from this dictionary. If the object is a reference then it will dereference it and get it\n     * from the document. If the object is COSNull then null will be returned.\n     *\n     * @param key The key to the object that we are getting.\n     *\n     * @return The object that matches the key.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup$RenderState:valueOf(org.apache.pdfbox.cos.COSName)" : "* Returns the base state represented by the given {@link COSName}.\n         *\n         * @param state the state name\n         * @return the state enum value",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:fillAndStrokeEvenOdd()" : "* Fill and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall produce the same result as constructing two identical path objects, painting\n     * the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.font.PDFont:getFontMatrix()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:getFractionalSpaceToAllocate()" : "* This is guaranteed to never return null.<br>\n     *\n     * To quote the PDF Spec \"An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to\n     * allocate at the left and bottom of the icon. A value of [0.0 0.0] positions the icon at the bottom-left corner of\n     * the annotation rectangle; a value of [0.5 0.5] centers it within the rectangle. This entry is used only if the\n     * icon is scaled proportionally. Default value: [0.5 0.5].\"\n     *\n     * @return The fractional space to allocate.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:lineTo(float,float)" : "* Draw a line from the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.contentstream.operator.text.ShowText:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.text.TextPosition:getUnicode()" : "* Return the string of characters stored in this object. The length can be different than the\n     * CharacterCodes length e.g. if ligatures are used (\"fi\", \"fl\", \"ffl\") where one glyph\n     * represents several unicode characters.\n     *\n     * @return The string on the screen.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getMacStyle()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setTransfer2(org.apache.pdfbox.cos.COSBase)" : "* This will set the transfer function of the /TR2 dictionary.\n     *\n     * @param transfer2 The transfer function. According to the PDF specification, this is either a\n     * single function (which applies to all process colorants) or an array of four functions (which\n     * apply to the process colorants individually). The name Identity may be used to represent the\n     * identity function, and the name Default denotes the transfer function that was in effect at\n     * the start of the page.",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addProc(org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence)" : "* Adds a proc (sub-sequence of instructions).\n     * @param child the child proc",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getUserKey()" : "* This will get the U entry in the standard encryption dictionary.\n     *\n     * @return A 32 byte array or null if there is no user key.\n     *\n     * @throws IOException If there is an error accessing the data.",
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream:close()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:insertObjectableBefore(org.apache.pdfbox.pdmodel.common.COSObjectable,java.lang.Object)" : "* Inserts an objectable kid before a reference kid.\r\n     * \r\n     * @param newKid the objectable\r\n     * @param refKid the reference kid",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getFamilyClass()" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:getColorSpace()" : "* Returns the group color space or null if it isn't defined.\n     *\n     * @return the group color space.\n     * @throws IOException if the colorspace could not be created",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:reversePolygon(java.awt.geom.Point2D$Double[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveGlyphHeight(org.apache.pdfbox.pdmodel.font.PDFont,int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setAscent(float)" : "* This will set the ascent for the font.\n     *\n     * @param ascent The new ascent for the font.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)" : "* Draw an image at the origin with the given transformation matrix.\n     *\n     * @param image The image to draw.\n     * @param matrix The transformation matrix to apply to the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.util.Matrix:multiplyArrays(float[],float[])" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:<init>()" : "* Creates a new Separation color space.",
  "org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:getFont()" : "* Returns the font.",
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:beginText()" : "* Begin some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest beginText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequence:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:<init>(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Creates a Form XObject for reading.\n     * @param stream The XObject stream",
  "org.apache.pdfbox.pdmodel.graphics.PDFontSetting:setFont(org.apache.pdfbox.pdmodel.font.PDFont)" : "* This will set the font for this font setting.\n     *\n     * @param font The new font.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getLeading()" : "* This will get the leading for the font.\n     *\n     * @return The leading.",
  "org.apache.pdfbox.cos.COSDictionary:setInt(java.lang.String,int)" : "* This is a convenience method that will convert the value to a COSInteger object.\n     *\n     * @param key The key to the object,\n     * @param value The int value for the name.",
  "org.apache.pdfbox.pdfwriter.COSWriter:writeXrefRange(long,long)" : null,
  "org.apache.pdfbox.filter.Predictor:wrapPredictor(java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)" : "* Wraps and <code>OutputStream</code> in a predictor decoding stream as necessary.\n     * If no predictor is specified by the parameters, the original stream is returned as is.\n     *\n     * @param out The stream to which decoded data should be written\n     * @param decodeParams Decode parameters for the stream\n     * @return An <code>OutputStream</code> is returned, which will write decoded data\n     * into the given stream. If no predictor is specified, the original stream is returned.",
  "org.apache.pdfbox.pdmodel.font.PDFont:toString()" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:add(int,java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDDocument:addPage(org.apache.pdfbox.pdmodel.PDPage)" : "* This will add a page to the document. This is a convenience method, that will add the page to the root of the\n     * hierarchy and set the parent of the page to the root.\n     * \n     * @param page The page to add to the document.",
  "org.apache.pdfbox.util.filetypedetector.ByteTrie:find(byte[])" : "* Return the most specific value stored for this byte sequence. If not found, returns\n     * <code>null</code> or a default values as specified by calling\n     * {@link ByteTrie#setDefaultValue}.\n     * @param bytes\n     * @return",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:closeAndFillAndStrokeEvenOdd()" : "* Close, fill, and then stroke the path, using the even-odd rule to determine the region to\n     * fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStrokeEvenOdd() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:setTop(int)" : "* Set the top y-coordinate, a value of -1 implies that the current y-coordinate\n     * will be used.\n     * @param y The top ycoordinate.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEBasedColorSpace:toString()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getDescent()" : "* This will get the descent for the font.\n     *\n     * @return The descent.",
  "org.apache.pdfbox.filter.DecodeOptions:getSubsamplingX()" : "* When decoding an image, the number of columns to advance in the source for every pixel\n     * decoded.\n     *\n     * @return The x-axis subsampling value",
  "org.apache.pdfbox.rendering.PageDrawer:getCurrentPoint()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getExpandedForm()" : "* Returns the expanded form (E).\n     * \n     * @return the expanded form",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:updatePageReferences(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.cos.COSArray,java.util.Map)" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:getFunctionType()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:processSetFont(java.util.List)" : "* Process the set font and font size operator.\n     * \n     * @param operands the font name and size\n     * @throws IOException in case there are missing operators or the font is not within the resources",
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getSignature()" : "* Get the signature dictionary.\n     * \n     * @return the signature dictionary\n     *",
  "org.apache.pdfbox.pdmodel.fdf.FDFPageInfo:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setStartPointEndingStyle(java.lang.String)" : "* This will set the line ending style for the start point, see the LE_ constants for the possible values.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawCircle(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float)" : "* Add a circle shape to the path in clockwise direction.\n     *\n     * @param cs Content stream\n     * @param x\n     * @param y\n     * @param r Radius\n     * \n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:constructAppearances()" : null,
  "org.apache.pdfbox.rendering.PageDrawerParameters:getImageDownscalingOptimizationThreshold()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a TextMarkup annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontName()" : "* Get the font name.\n     *\n     * @return The name of the font.",
  "org.apache.pdfbox.contentstream.operator.graphics.CloseFillEvenOddAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:restoreGraphicsState()" : "* Pops the current graphics state from the stack.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setOptionalContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Sets the optional content group or optional content membership dictionary for the annotation.\n     *\n     * @param oc The optional content group or optional content membership dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getAppearanceState()" : "* Returns the annotations appearance state, which selects the applicable appearance stream from an appearance\n     * subdictionary.\n     * \n     * @return the annotations appearance state",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:setValue(int)" : "* Set the selected option given its index, and try to update the visual appearance.\n     * \n     * NOTE: this method is only usable if there are export values and used for \n     * radio buttons with FLAG_RADIOS_IN_UNISON not set.\n     * \n     * @param index index of option to be selected\n     * @throws IOException if the value could not be set\n     * @throws IllegalArgumentException if the index provided is not a valid index.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:concat(byte[],byte[])" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:<init>()" : null,
  "org.apache.pdfbox.pdmodel.PDPage:getUserUnit()" : "* Get the user unit. This is a positive number that shall give the size of default user space\n     * units, in multiples of 1/72 inch, or 1 if it hasn't been set. This is supported by PDF 1.6\n     * and higher.\n     *\n     * @return the user unit.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getHeight(int)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)" : "* Begin a marked content sequence.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setSeedValueCertificate(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate)" : "* (Optional) A certificate seed value dictionary containing information about the certificate\n     * to be used when signing.\n     *\n     * @param certificate dictionary",
  "org.apache.pdfbox.pdmodel.PDPageTree:get(int)" : "* Returns the page at the given index.\r\n     *\r\n     * @param index zero-based index\r\n     * @return the page at the given index\r\n     * \r\n     * @throws IllegalStateException if the requested index isn't found or doesn't point to a valid page dictionary\r\n     * @throws IndexOutOfBoundsException if the requested index is higher than the page count",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:setCheckedState(java.lang.String)" : "* Sets the checked state. The value shall be one of:\n     * <ul>\n     *   <li>{@link #CHECKED_STATE_ON},</li>\n     *   <li>{@link #CHECKED_STATE_OFF} (default), or</li>\n     *   <li>{@link #CHECKED_STATE_NEUTRAL}.</li>\n     * </ul>\n     * \n     * @param checkedState the checked state",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:setReadOnly(boolean)" : "* sets the field to be read-only.\n     * \n     * @param readonly The new flag for readonly.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:setBRange(org.apache.pdfbox.pdmodel.common.PDRange)" : "* This will set the \"b\" range for this color space.\n     * @param range the new range for the \"b\" component,\n     * or null if defaults (-100..100) are to be set.",
  "org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setFunction(org.apache.pdfbox.pdmodel.common.function.PDFunction)" : "* This will set the function for the color conversion.\n     *\n     * @param newFunction the new function",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:<init>(org.apache.pdfbox.cos.COSString)" : "* Constructor.\n     *\n     * @param fileName The file that this spec represents.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.File)" : "* Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a\n     * font for AcroForm, then use the 3-parameter constructor instead.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param file A TrueType font.\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font file.",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:setMatrix(java.awt.geom.AffineTransform)" : "* Sets the optional Matrix entry for the Pattern.\n     * @param transform the transformation matrix",
  "org.apache.pdfbox.rendering.GroupGraphics:setComposite(java.awt.Composite)" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:showTextInternal(java.lang.String)" : "* Outputs a string using the correct encoding and subsetting as required.\n     *\n     * @param text The Unicode text to show.\n     * \n     * @throws IOException If an io exception occurs.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setSynchronous(boolean)" : "* A flag specifying whether to play the sound synchronously or asynchronously. When true, the\n     * reader allows no further user interaction other than canceling the sound until the sound has\n     * been completely played.\n     *\n     * @param synchronous Whether to play the sound synchronously (true) or asynchronously (false).",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getFontMatches(org.apache.pdfbox.pdmodel.font.PDFontDescriptor,org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo)" : "* Returns a list of matching fonts, scored by suitability. Positive scores indicate matches\n     * for certain attributes, while negative scores indicate mismatches. Zero scores are neutral.\n     * \n     * @param fontDescriptor FontDescriptor, always present.\n     * @param cidSystemInfo Font's CIDSystemInfo, may be null.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setPage(org.apache.pdfbox.pdmodel.PDPage)" : "* This will set the corresponding page for this annotation. This is optional but recommended.\n     * Not doing it <a href=\"https://stackoverflow.com/questions/74836898/\">can cause trouble when\n     * PDFs get signed</a>.\n     *\n     * @param page is the corresponding page",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawHelp(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getSoftMask()" : "* Returns the Soft Mask Image XObject associated with this image, or null if there is none.\r\n     * \r\n     * @return the SMask Image XObject, or null.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setURI(org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary)" : "* Sets the document level URI.\n     *\n     * @param uri The new document level URI.",
  "org.apache.pdfbox.rendering.GroupGraphics:drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)" : null,
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceGrayColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:mapPNGRenderIntent(int)" : "* Map the renderIntent int to a PDF render intent. See also\n     * https://www.w3.org/TR/2003/REC-PNG-20031110/#11sRGB\n     *\n     * @param renderIntent the PNG render intent\n     * @return the matching PDF Render Intent or null",
  "org.apache.pdfbox.util.Hex:getHighNibble(byte)" : "* Get the high nibble of the given byte.\n     * \n     * @param b the given byte\n     * @return the high nibble",
  "org.apache.pdfbox.filter.Filter:getCompressionLevel()" : "* @return the ZIP compression level configured for PDFBox",
  "org.apache.pdfbox.cos.COSString:<init>(java.lang.String)" : "* Creates a new <i>text string</i> from a Java String.\n     *\n     * @param text The string value of the object.",
  "org.apache.pdfbox.pdfparser.COSParser:validateStreamLength(long)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:sortByValue(java.util.List)" : "* Sort two related lists simultaneously by the elements in the key parameter.\n     * \n     * @param pairs a list of KeyValue elements",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawNewParagraph(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.multipdf.Splitter$KCloner:hasMCIDs(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:codeToGID(int)" : "* Returns the GID for the given character code.\n     *\n     * @param code character code\n     * @return GID (glyph index)\n     * @throws IOException if the data could not be read",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setActions(org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions)" : "* Set the actions of the field.\n     *\n     * @param actions The field actions.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:appendKid(org.apache.pdfbox.cos.COSBase)" : "* Appends a COS base kid.\r\n     * \r\n     * @param object the COS base",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getFontMatrix()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:setStartBookmark(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* Set the bookmark where text extraction should start, inclusive.\n     *\n     * @param aStartBookmark The starting bookmark.",
  "org.apache.pdfbox.pdmodel.font.FontInfo:toString()" : null,
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:processPage(org.apache.pdfbox.pdmodel.PDPage)" : "* This will initialize and process the contents of the stream.\r\n     *\r\n     * @param page the page to process\r\n     * @throws java.io.IOException if there is an error accessing the stream.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setTextRise(float)" : "* Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or\n     * subscripts.\n     *\n     * @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its\n     * default location. 0 restores the default location.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.contentstream.operator.text.ShowTextLine:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNumber(java.lang.String,float)" : "* Gets a number value.\n     * \n     * @param name the attribute name\n     * @param defaultValue the default value\n     * @return the number value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getRectangle()" : "* The annotation rectangle, defining the location of the annotation on the page in default user space units. This\n     * is usually required and should not return null on valid PDF documents. But where this is a parent form field with\n     * children, such as radio button collections then the rectangle will be null.\n     * \n     * @return The Rect value of this annotation.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeOpenAction(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.multipdf.PDFCloneUtility)" : null,
  "org.apache.pdfbox.contentstream.operator.state.Save:getName()" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setThreads(java.util.List)" : "* Sets the list of threads for this pdf document.\n     *\n     * @param threads The list of threads, or null to clear it.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:getFringe()" : "* This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs.\n     * (To take account of any effects applied through the BE entry for example)\n     *\n     * @return the rectangle difference",
  "org.apache.pdfbox.pdfparser.XrefParser:<init>(org.apache.pdfbox.pdfparser.COSParser)" : "* Default constructor.\n     *\n     * @param cosParser the parser to be used to read the pdf.\n     *",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:toRawImage(java.awt.image.WritableRaster,java.awt.color.ColorSpace)" : "* Returns the given raster as BufferedImage with the given awtColorSpace using a\n     * ComponentColorModel.\n     * @param raster the source raster\n     * @param awtColorSpace the AWT colorspace\n     * @return a BufferedImage in this colorspace",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTBorderStyles(java.lang.String[])" : "* Sets the style of the border drawn on each edge of a table cell (TBorderStyle). The values should be of:\n     * <ul>\n     * <li>{@link #BORDER_STYLE_NONE},</li>\n     * <li>{@link #BORDER_STYLE_HIDDEN},</li>\n     * <li>{@link #BORDER_STYLE_DOTTED},</li>\n     * <li>{@link #BORDER_STYLE_DASHED},</li>\n     * <li>{@link #BORDER_STYLE_SOLID},</li>\n     * <li>{@link #BORDER_STYLE_DOUBLE},</li>\n     * <li>{@link #BORDER_STYLE_GROOVE},</li>\n     * <li>{@link #BORDER_STYLE_RIDGE},</li>\n     * <li>{@link #BORDER_STYLE_INSET},</li>\n     * <li>{@link #BORDER_STYLE_OUTSET}.</li>\n     * </ul>\n     * \n     * @param tBorderStyles the table border styles",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeOperand(int)" : "* Writes an integer number to the content stream.\n     * \n     * @param integer the integer to be added to the content stream\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:resolveNonRootField(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,java.util.Map)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:calcDeg(java.awt.geom.Point2D[])" : "* Calculate the degree value of a triangle.\n     *\n     * @param p 3 vertices coordinates\n     * @return number of unique points in the 3 vertices of a triangle, 3, 2 or\n     * 1",
  "org.apache.pdfbox.multipdf.LayerUtility:importPageAsForm(org.apache.pdfbox.pdmodel.PDDocument,int)" : "* Imports a page from some PDF file as a Form XObject so it can be placed on another page\n     * in the target document.\n     * <p>\n     * You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to\n     * make sure that the graphics state is reset.\n     * \n     * @param sourceDoc the source PDF document that contains the page to be copied\n     * @param pageNumber the 0-based page number of the page to be copied\n     * @return a Form XObject containing the original page's content\n     * @throws IOException if an I/O error occurs",
  "org.apache.pdfbox.cos.COSArray:ofCOSIntegers(java.util.List)" : "* This will take a list of integer objects and return a COSArray of COSInteger objects.\n     *\n     * @param integer A list of integers\n     *\n     * @return An array of COSInteger objects",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFileAttachment:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontWeight()" : "* The weight of the font.  According to the PDF spec \"possible values are\n     * 100, 200, 300, 400, 500, 600, 700, 800 or 900\"  Where a higher number is\n     * more weight and appears to be more bold.\n     *\n     * @return The font weight.",
  "org.apache.pdfbox.rendering.PDFRenderer:renderPageToGraphics(int,java.awt.Graphics2D,float)" : "* Renders a given page to an AWT Graphics2D instance.\r\n     * <p>\r\n     * Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)}\r\n     * before using this.\r\n     *\r\n     * @param pageIndex the zero-based index of the page to be converted\r\n     * @param graphics the Graphics2D on which to draw the page\r\n     * @param scale the scaling factor, where 1 = 72 DPI\r\n     * @throws IOException if the PDF cannot be read",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Not:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.util.Hex:getHexValue(char)" : "* Converts a given character to its corresponding hexadecimal value. Valid characters are '0'-'9', 'A'-'F', or\n     * 'a'-'f'. Returns -256 for invalid characters.\n     * <p>\n     * The value of -256 is chosen so that to hex digits can be combined before checking for an invalid hex string\n     *\n     * @param c the character to be converted to a hexadecimal value\n     * @return the hexadecimal value of the character, or -256 if the character is invalid",
  "org.apache.pdfbox.text.TextPosition:getWidthRot(float)" : "* Get the length or width of the text, based on a given rotation.\n     *\n     * @param rotation Rotation that was used to determine coordinates (0,90,180,270)\n     * @return Width of text in display units",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getBorderStyle()" : "* This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line.\n     *\n     * @return the border style dictionary.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileUnicode()" : "* This will get the unicode file name.\n     *\n     * @return The file name.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:<init>()" : "* Default constructor",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setHorizontalScaling(float)" : "* Set the value of the horizontalScaling.\n     *\n     * @param value The horizontalScaling.",
  "org.apache.pdfbox.cos.COSIncrement:collect(org.apache.pdfbox.cos.COSDictionary)" : "* Collect all updates made to the given {@link COSDictionary} and it's contained structures.\n     *\n     * @param dictionary The {@link COSDictionary} updates shall be collected for.\n     * @return Returns {@code true}, if the {@link COSDictionary} represents a direct child structure, that would\n     * require it´s parent to be updated instead.",
  "org.apache.pdfbox.pdfparser.BaseParser:parseCOSDictionaryValue()" : "* This will parse a PDF dictionary value.\n     *\n     * @return The parsed Dictionary object.\n     *\n     * @throws IOException If there is an error parsing the dictionary object.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:closePath()" : "* Closes the current subpath.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAppearanceDictionary(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary)" : "* Sets AppearanceDictionary That is <b>/AP</b> entry the appearance dictionary.\n     * \n     * @param appearanceDictionary the appearance dictionary",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node:set(boolean,org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFileAttachment:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:getGlyphList(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Sets document page\n     * \n     * @param page the current page",
  "org.apache.pdfbox.pdmodel.common.PDRectangle:getCOSArray()" : "* This will get the underlying array for this rectangle.\n     *\n     * @return The cos array.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:setAlternateColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* This will set the alternate color space.\n     *\n     * @param cs The alternate color space.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:skip(long)" : null,
  "org.apache.pdfbox.pdmodel.PDPageTree:sanitizeType(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:initFringe(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setRectDifference(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the rectangle difference rectangle. Giving the difference between the\n     * annotations rectangle and where the drawing occurs. (To take account of any effects applied\n     * through the BE entry for example)\n     *\n     * @param rd the rectangle difference\n     *",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getWidth()" : "* \n     * @return signature image width",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllColumnWidths(int)" : "* Sets the same column width for all columns (ColumnWidths).\n     * \n     * @param columnWidth the column width",
  "org.apache.pdfbox.cos.COSName:getPDFName(java.lang.String)" : "* This will get a COSName object with that name.\n     * \n     * @param aName The name of the object.\n     * \n     * @return A COSName with the specified name.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a FreeText annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float)" : "* Creates a new PDFPrintable with the given page scaling and with optional page borders shown.\n     * The image will be rasterized at the given DPI before being sent to the printer.\n     *\n     * @param document the document to print\n     * @param scaling page scaling policy\n     * @param showPageBorder true if page borders are to be printed\n     * @param dpi if positive non-zero then the image will be rasterized at the given DPI. If\n     * set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getKey(org.apache.pdfbox.cos.COSBase)" : "* Returns the {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool.\n     *\n     * @param object The {@link COSBase} a {@link COSObjectKey} is registered for in this compression pool.\n     * @return The {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool, if\n     * such an object is contained.",
  "org.apache.pdfbox.cos.COSDictionary:setFloat(java.lang.String,float)" : "* This is a convenience method that will convert the value to a COSFloat object.\n     *\n     * @param key The key to the object,\n     * @param value The int value for the name.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setWidgetFieldFlags(java.lang.Integer)" : "* This will set the widget field flags that are associated with this field.\n     * The 'F' entry in the FDF field dictionary.\n     *\n     * @param f The new value for the field flags.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getDecodeForParameter(int)" : "* Get the decode for the input parameter.\n     *\n     * @param paramNum The function parameter number.\n     *\n     * @return The decode parameter range or null if none is set.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:getStateModel()" : "* This will retrieve the annotation state model.\n     * \n     * @return the annotation state model",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.cos.COSUpdateState:isUpdated()" : "* Returns the actual {@link #updated} state of the managed {@link #updateInfo}.\n     *\n     * @return The actual {@link #updated} state of the managed {@link #updateInfo}\n     * @see #updated",
  "org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Abs:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getProportion()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:<init>(org.apache.pdfbox.pdmodel.PDResources)" : "* Creates a new pattern color space.\n     * \n     * @param resources The current resources.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:fillAndStroke()" : "* Fill and then stroke the path, using the nonzero winding number rule to determine the region\n     * to fill. This shall produce the same result as constructing two identical path objects,\n     * painting the first with {@link #fill() } and the second with {@link #stroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromFile(org.apache.pdfbox.pdmodel.PDDocument,java.io.File,int)" : "* Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file. Only\r\n     * single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF\r\n     * files you have, use\r\n     * {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }\r\n     * or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) }\r\n     * instead.\r\n     *\r\n     * @param document the document to create the image as part of.\r\n     * @param file the TIFF file which contains a suitable CCITT compressed image\r\n     * @param number TIFF image number, starting from 0\r\n     * @return a new Image XObject\r\n     * @throws IOException if there is an error reading the TIFF data.",
  "org.apache.pdfbox.text.PDFTextStripper:getOutput()" : "* The output stream that is being written to.\n     *\n     * @return The stream that output is being written to.",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getParent()" : "* Returns the parent node.\n     * \n     * @return parent node",
  "org.apache.pdfbox.cos.COSDocument:setVersion(float)" : "* This will set the header version of this PDF document.\n     *\n     * @param versionValue The version of the PDF document.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:stroke()" : "* Stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:read()" : null,
  "org.apache.pdfbox.filter.Predictor$PredictorOutputStream:decodeAndWriteRow()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:setFormattedValue(java.lang.String)" : "* Sets the string for the property value.\n     * \n     * @param formattedValue the string for the property value",
  "org.apache.pdfbox.pdmodel.PDDocument:saveIncrementalForExternalSigning(java.io.OutputStream)" : "* Save PDF incrementally without closing for external signature creation scenario. The general sequence is:\n     * \n     * <pre>\n     *    PDDocument pdDocument = ...;\n     *    OutputStream outputStream = ...;\n     *    SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults\n     *    PDSignature pdSignature = ...;\n     *\n     *    // add signature parameters to be used when creating signature dictionary\n     *    pdDocument.addSignature(pdSignature, signatureOptions);\n     *    // prepare PDF for signing and obtain helper class to be used\n     *    ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream);\n     *    // get data to be signed\n     *    InputStream dataToBeSigned = externalSigningSupport.getContent();\n     *    // invoke signature service\n     *    byte[] signature = sign(dataToBeSigned);\n     *    // set resulted CMS signature\n     *    externalSigningSupport.setSignature(signature);\n     *\n     *    // last step is to close the document\n     *    pdDocument.close();\n     * </pre>\n     * <p>\n     * Note that after calling this method, only {@code close()} method may invoked for {@code PDDocument} instance and\n     * only AFTER {@link ExternalSigningSupport} instance is used.\n     * </p>\n     * <p>\n     * Don't use the input file as target as this will produce a corrupted file.\n     *\n     * @param output stream to write the final PDF. It will be closed when the document is closed. It <i><b>must\n     * never</b></i> point to the source file or that one will be harmed!\n     * @return instance to be used for external signing and setting CMS signature\n     * @throws IOException if the output could not be written\n     * @throws IllegalStateException if the document was not loaded from a file or a stream or signature options were\n     * not set.",
  "org.apache.pdfbox.util.Matrix:translate(float,float)" : "* Translates this matrix by the given amount.\n     *\n     * @param tx x-translation\n     * @param ty y-translation",
  "org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule:getName()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getBaseFont()" : "* Returns the PostScript name of the font.\n     * \n     * @return the PostScript name of the font",
  "org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateFinalPoint:getName()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:<init>(java.awt.image.BufferedImage,java.awt.Graphics2D)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:getBorderEffect()" : "* This will retrieve the border effect dictionary, specifying effects to be applied used in\n     * drawing the line.\n     *\n     * @return The border effect dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:canExtractContent()" : "* This will tell if the user can extract text and images from the PDF document.\n     *\n     * @return true If supplied with the user password they are allowed to extract content\n     *              from the PDF document",
  "org.apache.pdfbox.pdfparser.BruteForceParser:getBFCOSObjectOffsets()" : "* Returns all found objects of a brute force search.\n     * \n     * @return map containing all found objects of a brute force search\n     * \n     * @throws IOException if something went wrong\n     *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:curveTo(double,double,double,double,double,double)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setNonStrokingOverprint(boolean)" : "* set the value of the non stroking overprint property.\n     *\n     * @param value The value of the non stroking overprint parameter.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the rectangle specifying the location of the viewport.\n     * \n     * @param rectangle the rectangle specifying the location.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getCallout()" : "* This will get the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the\n     * intent is FreeTextCallout.\n     *\n     * @return An array of four or six numbers specifying a callout line attached to the free text\n     * annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending\n     * coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the\n     * starting and ending coordinates of the line.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromFileByContent(java.io.File,org.apache.pdfbox.pdmodel.PDDocument)" : "* Create a PDImageXObject from an image file. The file format is determined by the file\r\n     * content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This\r\n     * is a convenience method that calls {@link JPEGFactory#createFromStream},\r\n     * {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with\r\n     * {@link LosslessFactory#createFromImage}. (The later can also be used to create a\r\n     * PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image\r\n     * directly from a PNG file without decoding it (when possible), which is faster. However the\r\n     * result size depends on the compression skill of the software that created the PNG file. If\r\n     * file size or bandwidth are important to you or to your clients, then create your PNG files\r\n     * with a tool that has implemented the\r\n     * <a href=\"https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/\">Zopfli\r\n     * algorithm</a>, or use the two-step process mentioned above.\r\n     *\r\n     * @param file the image file.\r\n     * @param doc the document that shall use this PDImageXObject.\r\n     * @return a PDImageXObject.\r\n     * @throws IOException if there is an error when reading the file or creating the\r\n     * PDImageXObject.\r\n     * @throws IllegalArgumentException if the image type is not supported.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColorSpaceStack(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getCaptionVerticalOffset()" : "* This will retrieve the vertical offset of the caption.\n     * \n     * @return the vertical offset of the caption",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)" : "* Constructor creates an instance to be used for fill operations.\n     *\n     * @param shading the shading type to be used\n     * @param colorModel the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @param deviceBounds device bounds\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.rendering.GroupGraphics:drawOval(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getFunctionType()" : "* {@inheritDoc}",
  "org.apache.pdfbox.util.Matrix:getShearX()" : "* Returns the x-shear element of this matrix.\n     * \n     * @return the x-sheard element of the matrix",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2:generateBoundingBox()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:getSubtype()" : "* Gets the subtype (Subtype).\n     * \n     * @return the subtype",
  "org.apache.pdfbox.filter.DecodeOptions:<init>()" : "* Constructs an empty DecodeOptions instance",
  "org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:<init>()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:saveGraphicsState()" : "* q operator. Saves the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getCoordSystemOrigin()" : "* This will return the origin of the coordinate system.\r\n     * \r\n     * @return the origin",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:<init>(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : "* Constructor for Standard 14.",
  "org.apache.pdfbox.cos.COSUpdateState:update()" : "* Calls {@link #update(boolean)} with {@code true} as the new update state.<br>\n     * This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}.\n     *\n     * @see #update(boolean)\n     * @see #updated\n     * @see #isAcceptingUpdates()",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:computeParamsPolygon(double,double,double,double,double,double[])" : "* Computes parameters for a cloudy polygon: n, alpha, and dx.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:isCatalog(org.apache.pdfbox.cos.COSDictionary)" : "* Tell if the dictionary is a PDF or FDF catalog.\n     * \n     * @param dictionary the dictionary to be tested\n     * @return true if the given dictionary is a root dictionary",
  "org.apache.pdfbox.pdmodel.DefaultResourceCacheCreateImpl:<init>(boolean)" : "* Constructor providing a parameter to enable/disable the stable object cache.\n     * \n     * @param enableStableCache enables/disables the stable object cache\n     *",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getVisualSignature()" : "* Gets COSDocument of visible Signature.\n     * @see org.apache.pdfbox.cos.COSDocument\n     * @return the visual signature",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getViewerPreferences()" : "* Get the viewer preferences associated with this document or null if they do not exist.\n     *\n     * @return The document's viewer preferences.",
  "org.apache.pdfbox.pdfparser.PDFStreamParser:<init>(org.apache.pdfbox.contentstream.PDContentStream)" : "* Constructor.\n     *\n     * @param pdContentstream The content stream to parse.\n     * @throws IOException If there is an error initializing the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:setVertices(float[])" : "* This will set the numbers that shall represent the alternating horizontal and vertical\n     * coordinates.\n     *\n     * @param points an array with the numbers that shall represent the alternating horizontal and\n     * vertical coordinates.",
  "org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:setLowerLeftY(float)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.common.PDRange:getMin()" : "* This will get the minimum value of the range.\n     *\n     * @return The min value.",
  "org.apache.pdfbox.multipdf.Overlay:createOverlayXObject(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.multipdf.Overlay$LayoutPage,org.apache.pdfbox.multipdf.PDFCloneUtility)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:buildFontDescriptor(org.apache.fontbox.afm.FontMetrics)" : "* Returns a PDFontDescriptor for the given AFM. Used only for Standard 14 fonts.\r\n     *\r\n     * @param metrics AFM",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,boolean)" : "* Create a new appearance stream.\n     *\n     * @param appearance The appearance stream to write to.\n     * @param compress whether the content stream is to be compressed. Set this to true when\n     * creating long content streams.\n     * @throws IOException If there is an error writing to the content stream.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setLineJoinStyle(int)" : "* This will set the line join style.\n     *\n     * @param style The new line join style.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:getName(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:<init>()" : "* Creates a new Pattern dictionary.",
  "org.apache.pdfbox.pdmodel.fdf.FDFPage:setTemplates(java.util.List)" : "* A list of FDFTemplate objects.\n     *\n     * @param templates A list of templates for this Page.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getCMapUCS2()" : "* Returns the font's UCS2 CMap, only present this font uses a predefined CMap.\n     * \n     * @return the font's UCS2 CMap if present",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getInteriorColor()" : "* This will retrieve the interior color of the line endings defined in the LE entry. color is in DeviceRGB color\n     * space.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:getUserPassword234(byte[],byte[],int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getDestOutputIntent()" : null,
  "org.apache.pdfbox.rendering.PDFRenderer:getPageImage()" : "* Returns the image to which the current page is being rendered.\r\n     * May be null if the page is rendered to a Graphics2D object\r\n     * instead of a BufferedImage.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:create(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a node in the structure tree. Can be either a structure tree root,\r\n     *  or a structure element.\r\n     * \r\n     * @param node the node dictionary\r\n     * @return the structure node",
  "org.apache.pdfbox.pdmodel.encryption.RC4Cipher:write(byte,java.io.OutputStream)" : "* This will encrypt and write the next byte.\n     *\n     * @param aByte The byte to encrypt.\n     * @param output The stream to write to.\n     *\n     * @throws IOException If there is an error writing to the output stream.",
  "org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setDirection(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection)" : "* Sets the direction in which the specified transition effect shall move. Only for {@link PDTransitionStyle#Wipe},\n     * {@link PDTransitionStyle#Glitter}, {@link PDTransitionStyle#Fly}, {@link PDTransitionStyle#Cover},\n     * {@link PDTransitionStyle#Uncover} and {@link PDTransitionStyle#Push}.\n     * \n     * @param direction the direction in which the specified transition effect shall move",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:width(float)" : "* \n     * @param width signature image width\n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern)" : "* Adds the given pattern to the resources of the current page and returns the name for the\r\n     * new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param pattern the pattern to add\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.pdmodel.font.encoding.GlyphList:<init>(java.io.InputStream,int)" : "* Creates a new GlyphList from a glyph list file.\r\n     *\r\n     * @param numberOfEntries number of expected values used to preallocate the correct amount of memory\r\n     * @param input glyph list in Adobe format\r\n     * @throws IOException if the glyph list could not be read",
  "org.apache.pdfbox.cos.COSInteger:floatValue()" : "* polymorphic access to value as float.\n     *\n     * @return The float value of this object.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createAffineTransform(java.awt.geom.AffineTransform)" : null,
  "org.apache.pdfbox.pdmodel.font.Standard14Fonts:mapName(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : "* Adds a standard font name to the map of known aliases, to simplify the logic of finding\r\n     * font metrics by name. We want a single lookup in the map to find the font both by a base name or\r\n     * an alias.\r\n     *\r\n     * @see #getAFM\r\n     * @param baseName the font name of the Standard 14 font",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getDecimalSeparator()" : "* This will return the text to be used as the decimal point in displaying numerical values.\r\n     * \r\n     * @return decimal separator",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:<init>(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdfparser.BaseParser:getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)" : null,
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:setAction(java.lang.String)" : "* @param sAction The JavaScript.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new DeviceN colour space attributes dictionary from the given dictionary.\n     * @param attributes a dictionary that has all of the attributes",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(java.lang.String,java.io.InputStream,int)" : "* Constructor.\n     *\n     * @param filename Path of the PDF file\n     * @param imageStream image as a stream\n     * @param page The 1-based page number for which the page size should be calculated.\n     * @throws IOException if the new instance of PDVisibleSignDesigner could not be created",
  "org.apache.pdfbox.multipdf.Splitter:processPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Interface to start processing a new page.\n     *\n     * @param page The page that is about to get processed.\n     *\n     * @throws IOException If there is an error creating the new document.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a square annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPoint:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.PageMode:fromString(java.lang.String)" : null,
  "org.apache.pdfbox.filter.Filter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int,org.apache.pdfbox.filter.DecodeOptions)" : "* Decodes data, with optional DecodeOptions. Not all filters support all options, and so\n     * callers should check the options' <code>honored</code> flag to test if they were applied.\n     *\n     * @param encoded the encoded byte stream\n     * @param decoded the stream where decoded data will be written\n     * @param parameters the parameters used for decoding\n     * @param index the index to the filter being decoded\n     * @param options additional options for decoding\n     * @return repaired parameters dictionary, or the original parameters dictionary\n     * @throws IOException if the stream cannot be decoded",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(java.awt.Color)" : "* Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:setPage(org.apache.pdfbox.pdmodel.PDPage)" : "* Sets the page.\r\n     * \r\n     * @param page the page",
  "org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:initialOffset(float,float)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setLineJoin(int)" : "* Get the value of the line join.\n     *\n     * @param value The current line join",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(double)" : "* This will append raw commands to the content stream.\n     *\n     * @param data Append a formatted double value to the stream.\n     * @throws IOException If an error occurs while writing to the stream.\n     * @deprecated Usage of this method is discouraged.",
  "org.apache.pdfbox.rendering.GroupGraphics:getClip()" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:getSignatureFields()" : "* Retrieve all signature fields from the document.\n     * \n     * @return a <code>List</code> of <code>PDSignatureField</code>s",
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:getZ()" : "* Returns the z value of the tristimulus.\n     * @return the Z value",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:isNoExport()" : "* \n     * @return true if the field is not to be exported.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setCaption(boolean)" : "* This will set if the contents are shown as a caption to the line.\n     *\n     * @param cap Boolean value.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:createCloudyRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Creates a cloudy border for a rectangular annotation.\n     * The rectangle is specified by the <code>RD</code> entry and the\n     * <code>Rect</code> entry that was passed in to the constructor.\n     * <p>\n     * This can be used for Square and FreeText annotations. However, this does\n     * not produce the text and the callout line for FreeTexts.\n     *\n     * @param rd entry <code>RD</code>, or null if the entry does not exist\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getLevel()" : "* Get the current level. This can be used to decide whether a recursion has done too deep and\n     * an operation should be skipped to avoid a stack overflow.\n     *\n     * @return the current level.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:newSecurityHandlerForPolicy(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)" : "* Returns a new security handler for the given protection policy, or null none is available.\n     * @param policy the protection policy for which to create a security handler\n     * @return a new SecurityHandler instance, or null if none is available",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getSubFilter()" : "* Returns the subfilter.\n     *\n     * @return the subfilter",
  "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getCOSName()" : "* The blend mode name from the BM object.\r\n     *\r\n     * @return name of blend mode.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType0:isDamaged()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType3Font:isFontSymbolic()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getColor(java.lang.String)" : "* Gets a colour.\n     * \n     * @param name the attribute name\n     * @return the colour",
  "org.apache.pdfbox.pdmodel.PDPage:removePageResourceFromCache()" : "* Remove all page resources from the cache to avoid relying on the implementation of the Cache. Does make sense\n     * after processing a page.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.text.PDFTextStripper$LineItem:getTextPosition()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setValue(java.util.List)" : "* Sets the entry \"V\" to the given values. Requires {@link #isMultiSelect()} to be true.\n     * \n     * @param values the list of values\n     * @throws IOException if the appearance couldn't be generated.",
  "org.apache.pdfbox.pdmodel.font.PDFont:toUnicode(int,org.apache.pdfbox.pdmodel.font.encoding.GlyphList)" : "* Returns the Unicode character sequence which corresponds to the given character code.\n     *\n     * @param code character code\n     * @param customGlyphList a custom glyph list to use instead of the Adobe Glyph List\n     * @return Unicode character(s)",
  "org.apache.pdfbox.util.filetypedetector.ByteTrie:addPath(java.lang.Object,byte[][])" : "* Store the given value at the specified path.\n     * @param value\n     * @param parts",
  "org.apache.pdfbox.contentstream.operator.text.SetWordSpacing:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:newSecurityHandler(java.lang.Class,java.lang.Class[],java.lang.Object[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getSubject()" : "* This will retrieve the short description of the subject of the annotation.\n     *\n     * @return the subject.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new page label range object from the given dictionary.\n     * \n     * @param dict\n     *            the base dictionary for the new object.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(float)" : "* Set the non-stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getNumberOfComponents()" : null,
  "org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted:getName()" : null,
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:within(float,float,float)" : "* This will determine of two floating point numbers are within a specified variance.\n     *\n     * @param first The first number to compare to.\n     * @param second The second number to compare to.\n     * @param variance The allowed variance.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isNoView()" : "* Get the noView flag.\n     *\n     * @return The noView flag.",
  "org.apache.pdfbox.cos.COSArray:retainAll(java.util.Collection)" : "* This will retain all of the objects in the collection.\n     *\n     * @param objectsList The list of objects to retain from the collection.",
  "org.apache.pdfbox.cos.COSArray:getName(int)" : "* Get the value of the array as a string.\n     *\n     * @param index The index into the array.\n     * @return The name converted to a string or null if it does not exist.",
  "org.apache.pdfbox.text.PDFTextStripper:getText(org.apache.pdfbox.pdmodel.PDDocument)" : "* This will return the text of a document. See writeText. <br>\n     * NOTE: The document must not be encrypted when coming into this method.\n     *\n     * <p>IMPORTANT: By default, text extraction is done in the same sequence as the text in the PDF page content stream.\n     * PDF is a graphic format, not a text format, and unlike HTML, it has no requirements that text one on page\n     * be rendered in a certain order. The order is the one that was determined by the software that created the\n     * PDF. To get text sorted from left to right and top to botton, use {@link #setSortByPosition(boolean)}.\n     * \n     * @param doc The document to get the text from.\n     * @return The text of the PDF document.\n     * @throws IOException if the doc state is invalid or it is encrypted.",
  "org.apache.pdfbox.pdfwriter.COSWriter:visitFromString(org.apache.pdfbox.cos.COSString)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:importFDF(org.apache.pdfbox.pdmodel.fdf.FDFField)" : "* This will import a fdf field from a fdf document.\n     * \n     * @param fdfField The fdf field to import.\n     * @throws IOException If there is an error importing the data for this field.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getLeaderLineLength()" : "* This will retrieve the length of the leader line.\n     * \n     * @return the length of the leader line",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:closeAndStroke()" : "* Close and stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.cos.COSObject:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* visitor pattern double dispatch method.\n     *\n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If an error occurs while visiting this object.",
  "org.apache.pdfbox.util.Matrix:getScaleX()" : "* Returns the x-scaling element of this matrix.\n     * \n     * @see #getScalingFactorX()\n     * \n     * @return the x-scaling element of the matrix",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:toRGB(float[])" : null,
  "org.apache.pdfbox.cos.COSInteger:writePDF(java.io.OutputStream)" : "* This will output this string as a PDF object.\n     *\n     * @param output The stream to write to.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:getColor()" : null,
  "org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.PDPage:hashCode()" : null,
  "org.apache.pdfbox.filter.ASCII85OutputStream:<init>(java.io.OutputStream)" : "* Constructor.\n     *\n     * @param out The output stream to write to.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getNames()" : "* @return The names dictionary for this document or null if none exist.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getFlag3Edge()" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(float[])" : "* Set the stroking color.\n     * \n     * @see PDAbstractContentStream#setStrokingColor(java.awt.Color)\n     * @param components\n     *            the color components dependent on the color space being used.\n     * @throws IOException If there is an error writing to the content stream.",
  "org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:curveTo2(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using the current point and (x2, y2) as the Bézier control points.\n     *\n     * @param x2 x coordinate of the point 2\n     * @param y2 y coordinate of the point 2\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IllegalStateException If the method was called within a text block.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getSubType()" : "* Returns the subtype of the soft mask (Alpha, Luminosity) - S entry\r\n     * \r\n     * @return the subtype of the soft mask",
  "org.apache.pdfbox.pdmodel.common.PDPageLabelRange:setPrefix(java.lang.String)" : "* Sets the page label prefix for this page range.\n     * \n     * @param prefix\n     *            the page label prefix for this page range, or {@code null} to\n     *            unset the prefix.",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setSubject(java.lang.String)" : "* This will set the subject of the document.\n     *\n     * @param subject The new subject for the document.",
  "org.apache.pdfbox.pdmodel.common.function.type4.StackOperators:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getTransferFunction()" : "* Returns the transfer function.\r\n     * \r\n     * @return the transfer function\r\n     * @throws IOException If we are unable to create the PDFunction object.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:create(org.apache.pdfbox.cos.COSDictionary)" : "* Create the correct FDFAnnotation.\n     *\n     * @param fdfDic The FDF dictionary.\n     *\n     * @return A newly created FDFAnnotation",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:isDamaged()" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor that is used for a preexisting dictionary.\n     *\n     * @param b The underlying dictionary.",
  "org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:setUpperRightX(float)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:getCOSObject()" : "* Returns the corresponding dictionary.\n     * @return the dictionary",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getTransform()" : "* @return Affine Transform parameters for PDF Matrix",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(float)" : "* Set the stroking color in the DeviceGray color space. Range is 0..1.\n     *\n     * @param g The gray value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameter is invalid.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,java.io.OutputStream)" : "* Create a new appearance stream. Note that this is not actually a \"page\" content stream.\n     *\n     * @param doc The document the appearance is part of.\n     * @param appearance The appearance stream to add to.\n     * @param outputStream The appearances output stream to write to.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setWS(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed\n     * before saving a document.\n     * The name WS stands for \"will save\".\n     *\n     * @param ws The action to be performed.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:curveTo1(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getName()" : null,
  "org.apache.pdfbox.multipdf.LayerUtility:getDocument()" : "* Returns the PDF document we work on.\n     * @return the PDF document",
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanPrintFaithful(boolean)" : "* Set if the user can print the document in a faithful format or in a degraded format (if print\n     * is enabled). The PDF version must be 1.5 or higher.\n     * <p>\n     * This method will have no effect if the object is in read only mode.\n     *\n     * @param canPrintFaithful A boolean determining if the user can print the document in a\n     * faithful format.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:removeRecipient(org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient)" : "* Removes a recipient from the recipients list.\n     * @param recipient The recipient to remove.\n     * @return true If a recipient was found and removed.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setCryptFilterDictionary(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary)" : "* Sets the crypt filter with the given name.\n     * \n     * @param cryptFilterName the name of the crypt filter\n     * @param cryptFilterDictionary the crypt filter to set",
  "org.apache.pdfbox.pdmodel.PDDocument:removePage(org.apache.pdfbox.pdmodel.PDPage)" : "* Remove the page from the document. Do not use this method if other pages link to this one or\n     * if your document has a structure tree for accessibility unless you are able to fix these as\n     * well. In such cases it is better to use the splitter() class which will do these fixes.\n     *\n     * @param page The page to remove from the document.",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:getDocumentIDBytes(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.util.Matrix:hashCode()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources,boolean)" : "* Creates a color space given a name or array. Abbreviated device color names are not supported\n     * here, please replace them first. This method is for PDFBox internal use only, others should\n     * use {@link #create(COSBase, PDResources)}.\n     *\n     * @param colorSpace the color space COS object\n     * @param resources the current resources.\n     * @param wasDefault if current color space was used by a default color space.\n     * @return a new color space.\n     * @throws MissingResourceException if the color space is missing in the resources dictionary\n     * @throws IOException if the color space is unknown or cannot be created.",
  "org.apache.pdfbox.filter.Filter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)" : "* Encodes data.\n     * @param input the byte stream to encode\n     * @param encoded the stream where encoded data will be written\n     * @param parameters the parameters used for encoding\n     * @param index the index to the filter being encoded\n     * @throws IOException if the stream cannot be encoded",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getOID()" : "* Returns A list of array of bytes that contain Object Identifiers (OIDs) of the certificate policies that must be\n     * present in the signing certificate\n     * \n     * @return list of array of bytes that contain Object Identifiers of the certificate policies",
  "org.apache.pdfbox.util.DateConverter:adjustTimeZoneNicely(java.util.GregorianCalendar,java.util.TimeZone)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:setColorantName(java.lang.String)" : "* Sets the colorant name.\n     * @param name the name of the colorant",
  "org.apache.pdfbox.pdmodel.common.PDRange:getMax()" : "* This will get the maximum value of the range.\n     *\n     * @return The max value.",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:buildFontFile2(java.io.InputStream)" : null,
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:createFSIgnored(java.io.File,org.apache.pdfbox.pdmodel.font.FontFormat,java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setTextRise(float)" : "* Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or\n     * subscripts.\n     *\n     * @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its\n     * default location. 0 restores the default location.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.text.PDFTextStripper:getCurrentPageNo()" : "* Get the current page number that is being processed.\n     *\n     * @return A 1 based number representing the current page.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Type6ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setDifferences(org.apache.pdfbox.cos.COSStream)" : "* This will set the differences stream.\n     *\n     * @param diff The new differences stream.",
  "org.apache.pdfbox.contentstream.operator.text.BeginText:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:getMCID()" : "* Gets the marked content identifier.\r\n     * \r\n     * @return the marked content identifier",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:endMarkedContent()" : "* End a marked content sequence.\n     *\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setMaxLen(int)" : "* Sets the maximum number of characters of the text field.\n     * \n     * @param maxLen the maximum number of characters",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:isEmpty()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:getBBox()" : "* Gets the artifact's bounding box (BBox).\n     * \n     * @return the artifact's bounding box",
  "org.apache.pdfbox.cos.COSDictionary:getCOSObject(org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be a COSObject. Null is\n     * returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The COSObject.",
  "org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getUpperLimit()" : "* Get the highest value for a key in the name map.\n     *\n     * @return The highest value for a key in the map.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary,org.apache.fontbox.ttf.TrueTypeFont,boolean,org.apache.pdfbox.pdmodel.font.PDType0Font,boolean)" : "* Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2.\n     *\n     * @param document parent document\n     * @param dict font dictionary\n     * @param ttf True Type Font\n     * @param parent parent Type 0 font\n     * @throws IOException if the TTF could not be read",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getMarkInfo()" : "* Get info about doc's usage of tagged features. This will return null if there is no\n     * information.\n     *\n     * @return The new mark info.",
  "org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:<init>(org.apache.pdfbox.cos.COSDictionary,boolean,org.apache.pdfbox.pdmodel.font.encoding.Encoding)" : "* Creates a new DictionaryEncoding from a PDF.\n     *\n     * @param fontEncoding The encoding dictionary.\n     * @param isNonSymbolic True if the font is non-symbolic. False for Type 3 fonts.\n     * @param builtIn The font's built-in encoding. Null for Type 3 fonts.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getSignDate()" : "* Returns the sign date.\n     *\n     * @return the sign date",
  "org.apache.pdfbox.pdmodel.PDPage:getViewports()" : "* Get the viewports.\n     *\n     * @return a list of viewports or null if there is no /VP entry.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setHorizontalScaling(float)" : "* Set the horizontal scaling to scale / 100.\n     *\n     * @param scale number specifying the percentage of the normal width. Default value: 100 (normal\n     * width).\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:getNumberTreeAsMap(org.apache.pdfbox.pdmodel.common.PDNumberTreeNode)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:setLeft(int)" : "* Set the left x-coordinate, values 0 or -1 imply that the current x-coordinate\n     * will be used.\n     * @param x The left x coordinate.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:setR(float)" : "* Sets the r value of the tristimulus.\n     * @param r the r value for the tristimulus",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:setState(java.lang.String)" : "* This will set the annotation state.\n     * \n     * @param state the annotation state",
  "org.apache.pdfbox.text.LegacyPDFStreamEngine:showGlyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector)" : "* Called when a glyph is to be processed. The heuristic calculations here were originally\r\n     * written by Ben Litchfield for PDFStreamEngine.",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:hashCode()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setCharacterSpacing(float)" : "* Set the character spacing. The value shall be added to the horizontal or vertical component\n     * of the glyph's displacement, depending on the writing mode.\n     *\n     * @param spacing character spacing\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:writeCRLF()" : "* This will write a CRLF to the stream.\n     *\n     * @throws IOException If there is an error writing the data to the stream.",
  "org.apache.pdfbox.contentstream.operator.state.SetFlatness:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:endText()" : "* End some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest endText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:getShadingType()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:refreshAppearances()" : "* Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields.\n     * \n     * @throws IOException if the appearance streams could not be refreshed",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setInteriorColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* This will set interior color of the drawn area color is in DeviceRGB colorspace.\n     *\n     * @param ic color in the DeviceRGB color space.\n     *",
  "org.apache.pdfbox.cos.COSDictionary:setInt(org.apache.pdfbox.cos.COSName,int)" : "* This is a convenience method that will convert the value to a COSInteger object.\n     *\n     * @param key The key to the object,\n     * @param value The int value for the name.",
  "org.apache.pdfbox.pdmodel.font.PDType3CharProc:getMatrix()" : null,
  "org.apache.pdfbox.multipdf.Overlay:getLayoutPages(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SaslPrep:tagging(int)" : "* Return true if the given {@code codepoint} is a tagging character\n     * as defined by\n     * <a href=\"https://tools.ietf.org/html/rfc3454#appendix-C.9\">RFC 3454,\n     * Appendix C.9</a>.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawUpArrow(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextAlign()" : "* Gets the alignment, in the inline-progression direction, of text and\n     * other content within lines of the BLSE (TextAlign). The default value is\n     * {@link #TEXT_ALIGN_START}.\n     * \n     * @return the text alignment",
  "org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getThirdColumnValue()" : "* Returns the value for the third column of the crossreference stream entry. (This is index of the\n     * {@link COSObject} in the containing object stream - for entries of this type.)\n     *\n     * @return The value for the third column of the crossreference stream entry.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     * \n     * @param dictionary the corresponding dictionary",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getOpenCount()" : "* Get the number of open nodes or a negative number if this node is closed.\n     * See PDF Reference 32000-1:2008 table 152 and 153 for more details. This\n     * value is updated as you append children and siblings.\n     *\n     * @return The Count attribute of the outline dictionary.",
  "org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForTrailer(org.apache.pdfbox.cos.COSDictionary)" : "* Brute force search for all trailer marker.\n     * \n     * @param trailer dictionary to be used as trailer dictionary\n     * \n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getMacSubtype()" : "* Get the mac subtype.\n     *\n     * @return The mac subtype.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setLeaderLineOffsetLength(float)" : "* This will set the length of the leader line offset.\n     * \n     * @param leaderLineOffsetLength length of the leader line offset",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : "* Constructor. Internal PDFBox use only! If you need to get the document catalog, call\n     * {@link PDDocument#getDocumentCatalog()}.\n     *\n     * @param doc The document that this catalog is part of.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:getLineWidth()" : null,
  "org.apache.pdfbox.cos.COSIncrement:collect(org.apache.pdfbox.cos.COSBase)" : "* Collect all updates made to the given {@link COSBase} and it's contained structures.<br>\n     * This shall forward all {@link COSUpdateInfo} objects to the proper specialized collection methods.\n     *\n     * @param base The {@link COSBase} updates shall be collected for.\n     * @return Returns {@code true}, if the {@link COSBase} represents a direct child structure, that would require it´s\n     * parent to be updated instead.\n     * @see #collect(COSDictionary)\n     * @see #collect(COSArray)\n     * @see #collect(COSObject)",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:<init>(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern)" : "* Create a new tiling pattern content stream.\n     *\n     * @param pattern The tiling pattern stream to write to.\n     * \n     * @throws IOException If there is an error writing to the form contents.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:close()" : "* Close the content stream.  This must be called when you are done with this object.\n     *\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getFontBBox()" : "* This will get the fonts bounding box from its dictionary.\n     *\n     * @return The fonts bounding box.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:equals(java.lang.Object)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : "* Sets the shading resource with the given name.\r\n     *\r\n     * @param name the name of the resource\r\n     * @param shading the shading to be added",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getBoundingBox()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The signature dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setLineHeightAuto()" : "* Sets the element’s preferred height in the block-progression direction\n     * (LineHeight) to {@link #LINE_HEIGHT_AUTO}.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)" : "* Set the value of the renderingMode.\n     *\n     * @param renderingMode The renderingMode.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setFileUnicode(java.lang.String)" : "* This will set the unicode file name. If you call this, then do not forget to also call\n     * {@link #setFile(java.lang.String) setFile(String)} or the attachment will not be visible on\n     * some viewers.\n     *\n     * @param file The name of the file.",
  "org.apache.pdfbox.pdmodel.font.encoding.BuiltInEncoding:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getKids()" : "* Return the children of this node.  This list will contain PDNumberTreeNode objects.\n     *\n     * @return The list of children or null if there are no children.",
  "org.apache.pdfbox.util.Matrix:getValues()" : "* Return a single dimension array of all values in the matrix.\n     *\n     * @return The values of this matrix.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getSecurityHandler()" : "* Returns the security handler specified in the dictionary's Filter entry.\n     * @return a security handler instance\n     * @throws IOException if there is no security handler available which matches the Filter",
  "org.apache.pdfbox.pdmodel.fdf.FDFDocument:saveXFDF(java.io.Writer)" : "* This will save the document to an output stream and close the stream.\n     *\n     * @param output The stream to write to.\n     *\n     * @throws IOException If there is an error writing the document.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getCOSObject()" : "* This will get the dictionary associated with this field.\n     * \n     * @return the dictionary that this class wraps.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:finish()" : null,
  "org.apache.pdfbox.pdmodel.encryption.MessageDigests:<init>()" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve:getCubicBezierCurve()" : "* Get sampled points of this cubic Bezier curve.\n     *\n     * @return sampled points",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:setRectDifferences(float,float,float,float)" : "* This will set the difference between the annotations \"outer\" rectangle defined by\n     * /Rect and the border.\n     * \n     * @param differenceLeft left difference from the annotations /Rect entry\n     * @param differenceTop top difference from the annotations /Rect entry\n     * @param differenceRight right difference from  the annotations /Rect entry\n     * @param differenceBottom bottom difference from the annotations /Rect entry\n     *",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:constructAppearances()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setCIDSet(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Set a stream containing a CIDSet.\n     *\n     * @param stream The font program stream.",
  "org.apache.pdfbox.util.Hex:getString(byte[])" : "* Returns a hex string of the given byte array.\n     * \n     * @param bytes the bytes to be converted\n     * @return the hex string representing the given bytes",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:addOutputIntent(org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent)" : "* Add an OutputIntent to the list.  If there is not OutputIntent, the list is created and the\n     * first  element added.\n     *\n     * @param outputIntent the OutputIntent to add.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:moveTo(float,float)" : "* Move the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.PDFontSetting:getCOSObject()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:<init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Creates a Form XObject for reading.\n     * \n     * @param stream The XObject stream\n     * @param cache the cache to be used for the resources",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed:getN()" : "* This will get the name of the action to be performed.\n     *\n     * @return The name of the action to be performed.",
  "org.apache.pdfbox.pdfwriter.COSWriter:addXRefEntry(org.apache.pdfbox.pdfparser.xref.XReferenceEntry)" : "* add an entry in the x ref table for later dump.\n     *\n     * @param entry The new entry to add.",
  "org.apache.pdfbox.pdfparser.PDFParser:load(java.io.File)" : "* Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.\n     * \n     * @param file file to be loaded\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the file required a non-empty password.\n     * @throws IOException in case of a file reading or parsing error\n     * \n     * @deprecated use {@link Loader#loadPDF(File)} instead",
  "org.apache.pdfbox.pdmodel.PDPage:removeResources(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:toString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isOIDRequired()" : "*\n     * @return true if the OID is required",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Word:getAttributes()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:setIcon(java.lang.String)" : "* This will set the icon (and hence appearance, AP taking precedence) For this annotation. See the\n     * PDAnnotationText.NAME_XXX constants for valid values.\n     *\n     * @param icon The name of the annotation",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.cos.COSDictionary:getKeyForValue(java.lang.Object)" : "* Search in the map for the value that matches the parameter and return the first key that maps to that value.\n     *\n     * @param value The value to search for in the map.\n     * @return The key for the value in the map or null if it does not exist.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the BBox (bounding box) for this Shading.\n     *\n     * @param newBBox the new BBox",
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:getScaleType()" : "* This will get the scale type. See the SCALE_TYPE_XXX constants. This is guaranteed to never return null. Default:\n     * Proportional\n     *\n     * @return The scale type.",
  "org.apache.pdfbox.pdmodel.PDPage:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new instance of PDPage for reading.\n     * \n     * @param pageDictionary A page dictionary in a PDF document.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.common.PDStream:getLength()" : "* This will get the length of the filtered/compressed stream. This is\n     * readonly in the PD Model and will be managed by this class.\n     * \n     * @return The length of the filtered stream.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getPanose()" : "* Returns the Panose entry of the Style dictionary, if any.\n     *\n     * @return A Panose wrapper object.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)" : "* Draw an image at the x,y coordinates, with the default size of the image.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:isClip()" : "* Returns true if this mode clips text.\r\n     * \r\n     * @return true if this mode clips text",
  "org.apache.pdfbox.pdmodel.fdf.FDFTemplate:shouldRename()" : "* A flag telling if the fields imported from the template may be renamed if there are conflicts.\n     *\n     * @return A flag telling if the fields can be renamed.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeOperator(java.lang.String)" : "* Writes a string to the content stream as ASCII.\n     * \n     * @param text the text to be added to the content stream followed by a newline\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the stroking color.\n     *\n     * @param color The new stroking color",
  "org.apache.pdfbox.pdfparser.PDFParser:parse(boolean)" : "* This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is\n     * done parsing.\n     *\n     * @param lenient activate leniency if set to true\n     * @return the populated PDDocument\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException If there is an error reading from the stream or corrupt data is found.",
  "org.apache.pdfbox.pdfparser.COSParser:getStartxrefOffset()" : "* Looks for and parses startxref. We first look for last '%%EOF' marker (within last\n     * {@link #DEFAULT_TRAIL_BYTECOUNT} bytes (or range set via {@link #setEOFLookupRange(int)}) and go back to find\n     * <code>startxref</code>.\n     * \n     * @return the offset of StartXref\n     * @throws IOException If something went wrong.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getFieldType()" : "* {@inheritDoc}\n     *\n     * <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns\n     * the local value, without inheritance.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:getIcon()" : "* This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is\n     * NOTE.\n     *\n     * @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getInteger(java.lang.String,int)" : "* Gets an integer.\n     * \n     * @param name the attribute name\n     * @param defaultValue the default value\n     * @return the integer",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItemIterator:hasNext()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:initRgbColorTable()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getScriptingHandler()" : "* Set a handler to support JavaScript actions in the form.\n     * \n     * @return scriptingHandler the handler to support JavaScript actions in the form",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getBitsPerComponent()" : "* The bits per component of this shading. This will return -1 if one has not been set.\n     *\n     * @return the number of bits per component",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getInitialColor()" : null,
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:getXrefType()" : "* Returns the XRefTxpe of the resolved trailer.\r\n     * \r\n     * @return the XRefType or null.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:repairLength1(byte[],int)" : "* Some Type 1 fonts have an invalid Length1, which causes the binary segment of the font\n     * to be truncated, see PDFBOX-2350, PDFBOX-3677.\n     *\n     * @param bytes Type 1 stream bytes\n     * @param length1 Length1 from the Type 1 stream\n     * @return repaired Length1 value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setRolloverCaption(java.lang.String)" : "* This will set the rollover caption.\n     * \n     * @param caption the rollover caption",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getColorantName()" : "* Returns the colorant name.\n     * @return the name of the colorant",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:collectTriangles(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:toString()" : null,
  "org.apache.pdfbox.pdmodel.font.encoding.Encoding:getInstance(org.apache.pdfbox.cos.COSName)" : "* This will get an encoding by name. May return null.\n     *\n     * @param name The name of the encoding to get.\n     * @return The encoding that matches the name.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:hasGlyph(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:<init>(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Creates a new uncolored tiling pattern color space.\n     * \n     * @param resources The current resources.\n     * @param colorSpace The underlying color space.",
  "org.apache.pdfbox.contentstream.operator.graphics.CloseAndStrokePath:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getColumnGap()" : "* Gets the desired space between adjacent columns in the inline-progression\n     * direction (ColumnGap).\n     * \n     * @return the column gap (FLoat or array of floats)",
  "org.apache.pdfbox.cos.COSStream:createOutputStream()" : "* Returns a new OutputStream for writing stream data, using the current filters.\n     *\n     * @return OutputStream for un-encoded stream data.\n     * @throws IOException If the output stream could not be created.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The signature dictionary.",
  "org.apache.pdfbox.pdmodel.PDResources:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache,java.util.Map)" : "* Constructor for reading.\r\n     *\r\n     * @param resourceDictionary The cos dictionary for this resource.\r\n     * @param resourceCache The document's resource cache, may be null.\r\n     * @param directFontCache The document's direct font cache. Must be mutable",
  "org.apache.pdfbox.cos.COSDictionary:getNameAsString(java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string. Null is returned if the entry does not exist in the dictionary.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.cos.COSObject:isDereferenced()" : "* Returns {@code true}, if the hereby referenced {@link COSBase} has already been parsed and loaded.\n     *\n     * @return {@code true}, if the hereby referenced {@link COSBase} has already been parsed and loaded.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getScaleRatio()" : "* This will return the scale ration.\r\n     * \r\n     * @return the scale ratio.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:addNameTag(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getAutomaticStrokeAdjustment()" : "* This will get the automatic stroke adjustment flag.\n     *\n     * @return The automatic stroke adjustment flag or null if one has not been set.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:hasChildren()" : "* @return true if the node has at least one child",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:setZoom(float)" : "* Set the zoom value for the page, values 0 or -1 imply that the current zoom\n     * will be used.\n     * @param zoom The zoom value.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColorOnDemand(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Set the non stroking color.\n     * \n     * <p>\n     * The command is only emitted if the color is not null and the number of components is &gt; 0.\n     * \n     * @param color The colorspace to write.\n     * @return true if the non stroking color was set successfully\n     * \n     * @throws IOException If there is an error writing to the content stream.\n     * @see PDAbstractContentStream#setNonStrokingColor(PDColor)",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:addText(org.apache.pdfbox.text.TextPosition)" : "* Adds a text position to the contents.\r\n     * \r\n     * @param text the text position",
  "org.apache.pdfbox.pdmodel.common.PDRange:setMin(float)" : "* This will set the minimum value for the range.\n     *\n     * @param min The new minimum for the range.",
  "org.apache.pdfbox.cos.COSName:equals(java.lang.Object)" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:setBackground(java.awt.Color)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:createField(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Creates a COSField subclass from the given field.\n     *\n     * @param form the form that the field is part of\n     * @param field the dictionary representing a field element\n     * @param parent the parent node of the node to be created \n     * @return the corresponding PDField instance",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:newLine()" : "* Move to the start of the next line of text. Requires the leading (see {@link #setLeading})\n     * to have been set.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:fromInt(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode,boolean,boolean,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.PDResources)" : null,
  "org.apache.pdfbox.cos.COSDictionary:getEmbeddedInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)" : "* Get an integer from an embedded dictionary. Useful for 1-1 mappings.\n     *\n     * @param embeddedDictionary The name of the embedded dictionary.\n     * @param key The key in the embedded dictionary.\n     * @param defaultValue The value if there is no embedded dictionary or it does not contain the key.\n     *\n     * @return The value of the embedded integer.",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:setKeywords(java.lang.String)" : "* This will set the keywords of the document.\n     *\n     * @param keywords The new keywords for the document.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isFilterRequired()" : "*\n     * @return true if the Filter is required",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getK()" : "* Returns the K entry. This can be a dictionary representing a structure element, or an array\n     * of them. To get it as a list of PDStructureElement objects, use {@link #getKids()} instead.\n     *\n     * @return the K entry.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setLineCapStyle(int)" : "* Set the line cap style.\n     *\n     * @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalArgumentException If the parameter is not a valid line cap style.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setOptions(java.util.List,java.util.List)" : "* This will set the display and export values - the 'Opt' key.\n     *\n     * <p>\n     * This will set both, the export value and the display value\n     * of the choice field. If either one of the parameters is null or an \n     * empty list is supplied the options will\n     * be removed.\n     * </p>\n     * <p>\n     * An {@link IllegalArgumentException} will be thrown if the\n     * number of items in the list differ.\n     * </p>\n     *\n     * @see #setOptions(List)\n     * @param exportValues List containing all possible export values.\n     * @param displayValues List containing all possible display values.",
  "org.apache.pdfbox.contentstream.operator.text.SetTextLeading:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:getFirstBead()" : "* Get the first bead in the thread, or null if it has not been set yet.  This\n     * is a required field for this object.\n     *\n     * @return The first bead in the thread.",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontFile(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Set the type 1 font program.\n     *\n     * @param type1Stream The type 1 stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createHolderFormStream(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:hasProtectionPolicy()" : "* Returns whether a protection policy has been set.\n     *\n     * @return true if a protection policy has been set.",
  "org.apache.pdfbox.cos.COSBase:setKey(org.apache.pdfbox.cos.COSObjectKey)" : "* Set the COSObjectKey of an indirect object.\n     * \n     * @param key the COSObjectKey of the indirect object",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setURLType(java.lang.String)" : "* (Optional; PDF 1.7) A name indicating the usage of the URL entry. There are standard uses and\n     * there can be implementation-specific uses for this URL. The following value specifies a valid\n     * standard usage:\n     * <ul>\n     * <li>Browser, The URL references content that should be displayed in a web browser to allow\n     * enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL\n     * bit is ignored for this usage.</li>\n     * <li>ASSP, The URL references a signature web service that can be used for server-based\n     * signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this\n     * implies that the credential used when signing must come from this server.</li>\n     * </ul>\n     * Third parties can extend the use of this attribute with their own attribute values, which\n     * must conform to the guidelines specified in\n     * <a href=\"http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=681\">PDF\n     * Spec 1.7 Appendix E (PDF Name Registry)</a>\n     * if urlType is not set the default is Browser for URL\n     *\n     * @param urlType String of the urlType",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory:createAction(org.apache.pdfbox.cos.COSDictionary)" : "* This will create the correct type of action based on the type specified\n     * in the dictionary.\n     *\n     * @param action An action dictionary.\n     *\n     * @return An action of the correct type.",
  "org.apache.pdfbox.text.TextPosition:getY()" : "* This will get the page rotation adjusted x position of the character.\n     * This is adjusted based on page rotation so that the upper left is 0,0 which is\n     * unlike PDF coordinates, which start at the bottom left. See also\n     * <a href=\"https://stackoverflow.com/questions/57067372/\">this answer by Michael Klink</a> for\n     * further details and\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-4597\">PDFBOX-4597</a> for a sample\n     * file.\n     *\n     * @return The adjusted y coordinate of the character.",
  "org.apache.pdfbox.filter.Filter:decode(java.io.InputStream,java.util.List,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.filter.DecodeOptions,java.util.List)" : "* Decodes data, with optional DecodeOptions. Not all filters support all options, and so callers should check the\n     * options' <code>honored</code> flag to test if they were applied.\n     *\n     * @param encoded the input stream holding the encoded data\n     * @param filterList list of filters to be used for decoding\n     * @param parameters the parameters used for decoding\n     * @param options additional options for decoding\n     * @param results list of optional decoding results for each filter\n     * @return the decoded stream data\n     * @throws IOException if the stream cannot be decoded\n     * @throws IllegalArgumentException if filterList is empty",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.File,org.apache.pdfbox.pdmodel.font.encoding.Encoding)" : "* Loads a TTF to be embedded into a document as a simple font.\n     * \n     * <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use\n     * {@link PDType0Font#load(PDDocument, File)} instead.</p>\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param file A TTF file.\n     * @param encoding The PostScript encoding vector to be used for embedding.\n     * @return a PDTrueTypeFont instance.\n     * @throws IOException If there is an error loading the data.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:getParent()" : "* Returns the Type 0 font which is the parent of this font.\n     *\n     * @return parent Type 0 font",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setParentTree(org.apache.pdfbox.pdmodel.common.PDNumberTreeNode)" : "* Sets the parent tree.<p>\n     * The keys correspond to a single page of the document or to an individual object, e.g. an\n     * annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b>\n     * entry.<p>\n     * The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a\n     * dictionary for individual objects like an annotation or an XObject, and an array for a page\n     * object or a content stream containing marked-content sequences identified by an MCID.\n     * <p>\n     * To create an empty parent tree, call {@code new PDNumberTreeNode(PDParentTreeValue.class)}.\n     *\n     * @param parentTree the parent tree",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getDefaultAppearance()" : "* Get the default appearance.\n     * \n     * @return the DA element of the dictionary object",
  "org.apache.pdfbox.text.TextPosition:toString()" : "* Show the string data for this text position.\n     *\n     * @return A human readable form of this object.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDTerminalField#PDTerminalField(PDAcroForm)\n     *\n     * @param acroForm The acroForm for this field.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:isPrepend()" : null,
  "org.apache.pdfbox.pdfwriter.COSWriter:write(org.apache.pdfbox.cos.COSDocument)" : "* This will write the pdf document.\n     *\n     * @throws IOException If an error occurs while generating the data.\n     * @param doc The document to write.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace:getName()" : null,
  "org.apache.pdfbox.filter.Predictor:calcSetBitSeq(int,int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new instance with a given COS dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.multipdf.Overlay:float2String(float)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setAcroForm(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* Sets the AcroForm for this catalog.\n     *\n     * @param acroForm The new AcroForm.",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:addFontFromWidget(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : "* Add font resources from the widget to the AcroForm to make sure embedded fonts are being used\r\n     * and not added by ensureFontResources potentially using a fallback font.\r\n     * \r\n     * @param acroFormResources AcroForm default resources, should not be null.\r\n     * @param annotation annotation, should not be null.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getCharacterSpacing()" : "* Get the value of the characterSpacing.\n     *\n     * @return The current characterSpacing.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setAction(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* Set the annotation action. Either this or the destination entry should be set, but not both.\n     *\n     * @param action The annotation action.\n     *",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:getVertices()" : "* This will retrieve the numbers that shall represent the alternating horizontal and vertical\n     * coordinates.\n     *\n     * @return An array of floats representing the alternating horizontal and vertical coordinates.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getWidthFromFont(int)" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:canModifyAnnotations()" : "* This will tell if the user can add or modify text annotations and fill in interactive forms\n     * fields and, if {@link #canModify() canModify()} returns true, create or modify interactive\n     * form fields (including signature fields). Note that if\n     * {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in\n     * interactive forms (including signature fields) even if this method here returns false.\n     *\n     * @return true If supplied with the user password they are allowed to modify annotations.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createJPEG(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float,int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.filter.DecodeOptions:setFilterSubsampled(boolean)" : "* Used internally by filters to signal they have applied subsampling as requested by this\n     * options instance.\n     *\n     * @param filterSubsampled Value specifying if the filter could meet the requested options.\n     * Usually a filter will only call this with the value <code>true</code>, as the default value\n     * for the flag is <code>false</code>.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)" : "* Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary.\n     *\n     * @param tag the tag to be added to the content stream\n     * @param propertyList property list to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getListNumbering()" : "* Gets the list numbering (ListNumbering). The default value is\n     * {@link PDListAttributeObject#LIST_NUMBERING_NONE}.\n     * \n     * @return the list numbering",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setFractionalDisplay(java.lang.String)" : "* This will set the value for the manner to display a fractional value.\r\n     * Allowed values are \"D\", \"F\", \"R\", \"T\" and null.\r\n     * \r\n     * @param fractionalDisplay the manner to display a fractional value",
  "org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:addLinePoints(org.apache.pdfbox.pdmodel.graphics.shading.Line,int[][])" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getSound()" : "* Gets the sound object.\n     * \n     * @return The sound object defining the sound that shall be played.",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getPath(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllBorderStyles(java.lang.String)" : "* Sets the same border style for all four sides (BorderStyle). The value\n     * should be one of:\n     * <ul>\n     *   <li>{@link #BORDER_STYLE_NONE},</li>\n     *   <li>{@link #BORDER_STYLE_HIDDEN},</li>\n     *   <li>{@link #BORDER_STYLE_DOTTED},</li>\n     *   <li>{@link #BORDER_STYLE_DASHED},</li>\n     *   <li>{@link #BORDER_STYLE_SOLID},</li>\n     *   <li>{@link #BORDER_STYLE_DOUBLE},</li>\n     *   <li>{@link #BORDER_STYLE_GROOVE},</li>\n     *   <li>{@link #BORDER_STYLE_RIDGE},</li>\n     *   <li>{@link #BORDER_STYLE_INSET},</li>\n     *   <li>{@link #BORDER_STYLE_OUTSET}.</li>\n     * </ul>\n     * \n     * @param borderStyle the border style",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:insertBefore(org.apache.pdfbox.cos.COSBase,java.lang.Object)" : "* Inserts an COS base kid before a reference kid.\r\n     * \r\n     * @param newKid the COS base\r\n     * @param refKid the reference kid",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isFixedPitch()" : "* A convenience method that checks the flag bit.\n     *\n     * @return The flag value.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:setSubtype(java.lang.String)" : "* This will set the subtype of the measure dictionary.\n     * @param subtype the subtype of the measure dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setPrinted(boolean)" : "* Set the printed flag.\n     * \n     * @param printed The new printed flag.",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:setVisibilityPolicy(org.apache.pdfbox.cos.COSName)" : "* Sets the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default).\n     * \n     * @param visibilityPolicy the visibility policy name",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:fallbackToAlternateColorSpace(java.lang.Exception)" : null,
  "org.apache.pdfbox.cos.COSDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Copy Constructor. This will make a shallow copy of this dictionary.\n     *\n     * @param dict The dictionary to copy.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:addSource(java.io.File)" : "* Add a source file to the list of files to merge.\n     *\n     * @param source File representing source document\n     * \n     * @throws FileNotFoundException If the file doesn't exist",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getAppearance()" : "* This will get the appearance dictionary associated with this annotation. This may return null.\n     * \n     * @return This annotations appearance.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:encode(int)" : null,
  "org.apache.pdfbox.cos.COSDocument:getHighestXRefObjectNumber()" : "* Internal PDFBox use only. Get the object number of the highest XRef stream. This is needed to\n     * avoid reusing such a number in incremental saving.\n     *\n     * @return The object number of the highest XRef stream, or 0 if there was no XRef stream.",
  "org.apache.pdfbox.cos.COSDictionary:getItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* This is a special case of getItem that takes multiple keys, it will handle the situation\n     * where multiple keys could get the same value, ie if either CS or ColorSpace is used to get\n     * the colorspace. This will get an object from this dictionary.\n     *\n     * @param firstKey The first key to try.\n     * @param secondKey The second key to try.\n     *\n     * @return The object that matches the key.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:isEmbedded()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:setName(java.lang.String)" : "* This will set the name of the referenced page.\n     *\n     * @param name The referenced page name.",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRowType6()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:findKid(java.lang.String[],int)" : "* This will find one of the child elements. The name array are the components of the name to search down the tree\n     * of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end\n     * point based on the name array.\n     * \n     * @param name An array that picks the path to the field.\n     * @param nameIndex The index into the array.\n     * @return The field at the endpoint or null if none is found.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBorderStyles(java.lang.String[])" : "* Sets the border styles for four sides separately (BorderStyle). The\n     * values should be of:\n     * <ul>\n     *   <li>{@link #BORDER_STYLE_NONE},</li>\n     *   <li>{@link #BORDER_STYLE_HIDDEN},</li>\n     *   <li>{@link #BORDER_STYLE_DOTTED},</li>\n     *   <li>{@link #BORDER_STYLE_DASHED},</li>\n     *   <li>{@link #BORDER_STYLE_SOLID},</li>\n     *   <li>{@link #BORDER_STYLE_DOUBLE},</li>\n     *   <li>{@link #BORDER_STYLE_GROOVE},</li>\n     *   <li>{@link #BORDER_STYLE_RIDGE},</li>\n     *   <li>{@link #BORDER_STYLE_INSET},</li>\n     *   <li>{@link #BORDER_STYLE_OUTSET}.</li>\n     * </ul>\n     * \n     * @param borderStyles the border styles (an array of four Strings)",
  "org.apache.pdfbox.contentstream.operator.Operator:toString()" : "* This will print a string rep of this class.\n     *\n     * @return A string rep of this class.",
  "org.apache.pdfbox.rendering.SoftMask:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:isOwnerPermission()" : "* This will tell if the access permission corresponds to owner\n     * access permission (no restriction).\n     *\n     * @return true if the access permission does not restrict the use of the document",
  "org.apache.pdfbox.pdmodel.common.PDMetadata:exportXMPMetadata()" : "* Extract the XMP metadata.\n     * To persist changes back to the PDF you must call importXMPMetadata.\n     *\n     * @return A stream to get the xmp data from.\n     *\n     * @throws IOException If there is an error parsing the XMP data.",
  "org.apache.pdfbox.multipdf.Overlay:createCombinedContentStream(org.apache.pdfbox.cos.COSBase)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:getValueAsString()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:<init>(java.lang.String)" : "* Constructor.\r\n     *\r\n     * @param type the type",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:fillEvenOdd()" : "* Fills the path using the even-odd winding rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGB(float[])" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.Loader:loadPDF(java.io.File,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)" : "* Parses a PDF.\n     * \n     * @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the\n     * file.\n     * @param password password to be used for decryption\n     * @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering\n     * new/altered PDF streams\n     * \n     * @return loaded document\n     * \n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException in case of a file reading or parsing error",
  "org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:intValue()" : "* Returns the integer value of this mode, as used in a PDF file.\r\n     * \r\n     * @return the integer value of this mode",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getParent()" : "* @return The parent of this node or null if there is no parent.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getBorderStyle()" : "* This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line.\n     *\n     * @return the border style dictionary.",
  "org.apache.pdfbox.contentstream.operator.DrawObject:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:setKids(java.util.List)" : "* Sets the kids (K).\r\n     * \r\n     * @param kids the kids",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:setSuspect(boolean)" : "* Set the value of the suspects property.  See PDF Reference 1.6\n     * section 10.6 \"Logical Structure\" for more information about this\n     * property.\n     *\n     * @param suspect The new \"Suspects\" value.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getDefaultFont()" : "* Provide standard 14 Helvetica font as default if there isn't any font available.  \n     * @return the default font",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:getCurrentTrailer()" : "* Returns the trailer last set by {@link #setTrailer(COSDictionary)}.\r\n     * \r\n     * @return the current trailer.\r\n     *",
  "org.apache.pdfbox.util.IterativeMergeSort:iterativeMergeSort(java.lang.Object[],java.util.Comparator)" : "* Sorts the array using iterative (bottom-up) merge sort.\n     *\n     * @param <T> the class of the objects in the list\n     * @param arr the array of objects to be sorted.\n     * @param cmp the comparator to determine the order of the list.",
  "org.apache.pdfbox.cos.COSDictionary:getString(org.apache.pdfbox.cos.COSName,java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be a\n     * string.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The default value to return.\n     * @return The name converted to a string.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.filter.CCITTFaxFilter:invertBitmap(byte[])" : null,
  "org.apache.pdfbox.cos.COSArray:set(int,org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* This will set an object at a specific index.\n     *\n     * @param index zero based index into array.\n     * @param object The object to set.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Line:getWords()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:getPath()" : "* PDF 2.0: This will retrieve the arrays that shall represent the alternating horizontal\n     * and vertical coordinates for path building.\n     *\n     * @return An array of float arrays, each supplying the operands for a path building operator\n     * (m, l or c). The first array should have 2 elements, the others should have 2 or 6 elements.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:<init>(org.apache.pdfbox.cos.COSArray)" : "* Creates a new CalRGB color space using the given COS array.\n     *\n     * @param rgb the cos array which represents this color space",
  "org.apache.pdfbox.cos.COSObjectKey:toString()" : null,
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : "* Returns the appearance stream to process for the given annotation. May be used to render\n     * a specific appearance such as \"hover\".\n     *\n     * @param annotation The current annotation.\n     * @return The stream to process.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:setEndPointEndingStyle(java.lang.String)" : "* This will set the line ending style for the end point, see the LE_ constants for the possible values.\n     *\n     * @param style The new style.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a default attribute object with a given dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdfparser.BaseParser:readStringNumber()" : "* This method is used to read a token by the {@linkplain #readInt()} and the {@linkplain #readLong()} method. Valid\n     * delimiters are any non digit values.\n     *\n     * @return the token to parse as integer or long by the calling method.\n     * @throws IOException throws by the {@link #source} methods.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)" : "* set a marked content point.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:setK(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set a JavaScript action to be performed when the user\n     * types a keystroke into a text field or combo box or modifies the\n     * selection in a scrollable list box. This allows the keystroke to\n     * be checked for validity and rejected or modified.\n     *\n     * @param k The action to be performed.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getRegistryName()" : null,
  "org.apache.pdfbox.pdmodel.encryption.RC4Cipher:fixByte(byte)" : "* This will ensure that the value for a byte &gt;=0.\n     *\n     * @param aByte The byte to test against.\n     *\n     * @return A value &gt;=0 and &lt; 256",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:get(int)" : "* {@inheritDoc}",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:unsupportedOperator(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : "* Called when an unsupported operator is encountered.\n     *\n     * @param operator The unknown operator.\n     * @param operands The list of operands.\n     * \n     * @throws IOException if there is an error processing the unsupported operator",
  "org.apache.pdfbox.cos.COSDictionary:getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* This is a convenience method that will get the dictionary object that is expected to be an integer. If the\n     * dictionary value is null then the default value -1 will be returned.\n     *\n     * @param firstKey The first key to the item in the dictionary.\n     * @param secondKey The second key to the item in the dictionary.\n     * @return The integer value.",
  "org.apache.pdfbox.pdfparser.BaseParser:isSpace(int)" : "* This will tell if the given value is a space or not.\n     * \n     * @param c The character to check against space\n     * @return true if the next byte in the stream is a space character.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:setAlternateColorSpaces(java.util.List)" : "* Sets the list of alternateColorSpace color spaces.\n     *\n     * @param list the list of color space objects",
  "org.apache.pdfbox.pdmodel.common.COSArrayList:removeAll(java.util.Collection)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:setValue(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)" : "* Sets the value of this field to be the given signature.\n     * \n     * @param value is the PDSignatureField\n     * \n     * @throws IOException if the new value could not be applied",
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:createCOSStreamwithIccProfile(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:fitBoundingBox()" : "* A flag indicating if this page destination should just fit bounding box of the PDF.\n     *\n     * @return true If the destination should fit just the bounding box.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:endMarkedContent()" : "* End a marked content sequence.\n     *\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.filter.CCITTFaxDecoderStream:read()" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageFormName(org.apache.pdfbox.cos.COSName)" : "* Sets image form name\n     * \n     * @param imageFormName the name of the image form",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageFormStream(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Sets image form stream\n     * \n     * @param imageFormStream the stream of the image form",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontStretch()" : "* A string representing the preferred font stretch.\n     * According to the PDF Spec:\n     * The font stretch value; it must be one of the following (ordered from\n     * narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed,\n     * Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded.\n     *\n     * @return The stretch of the font.",
  "org.apache.pdfbox.pdmodel.font.FontInfo:getWeightClassAsPanose()" : "* Returns the usWeightClass field as a Panose Weight.\n     * \n     * @return the WeightClass of the font as Panose weight",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:endMarkedContent()" : "* End a marked content sequence.\n     *\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:isArticleStart()" : null,
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:getStreamFilterName()" : "* Returns the name of the filter which is used for de/encrypting streams.\n     * Default value is \"Identity\".\n     * \n     * @return the name of the filter",
  "org.apache.pdfbox.pdmodel.interactive.form.PDTextField:getValueAsString()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)" : "* @see PDField#PDField(PDAcroForm)\n     *\n     * @param acroForm The acroform.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.common.PDRectangle:toString()" : "* This will return a string representation of this rectangle.\n     *\n     * @return This object as a string.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:drawPushPin(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)" : null,
  "org.apache.pdfbox.cos.COSName:compareTo(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:getName()" : "* Returns the name of the optional content group.\n     * @return the name",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getSoftMask()" : "* returns the current softmask\n     *\n     * @return softMask",
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor that is used for a preexisting dictionary.\n     *\n     * @param t The underlying dictionary.",
  "org.apache.pdfbox.pdmodel.PDResources:getFontNames()" : "* Returns the names of the font resources, if any.\r\n     * \r\n     * @return an iterable containing all names of available fonts",
  "org.apache.pdfbox.pdmodel.font.encoding.MacExpertEncoding:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getImage(java.awt.Rectangle,int)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getSpaceBefore()" : "* Gets the amount of extra space preceding the before edge of the BLSE in\n     * the block-progression direction (SpaceBefore). The default value is 0.\n     * \n     * @return the space before",
  "org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getAnnotationName()" : "* If the value in the /A entry is a string, this will get the value of the /NM entry in the\n     * annotation dictionary.\n     *\n     * @return the /NM value of an annotation dictionary or null if the /A entry value is missing or\n     * not a string.",
  "org.apache.pdfbox.text.TextPosition:getWidthDirAdj()" : "* This will get the width of the string when text direction adjusted coordinates are used.\n     *\n     * @return The width of the text in display units.",
  "org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3,org.apache.pdfbox.util.Matrix)" : "* Constructor.\r\n     *\r\n     * @param shading the shading resources\r\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setRenderingIntent(java.lang.String)" : "* This will set the rendering intent for the graphics state.\n     *\n     * @param ri The new rendering intent",
  "org.apache.pdfbox.pdfparser.xref.FreeXReference:<init>(org.apache.pdfbox.cos.COSObjectKey,long)" : "* Sets the given {@link COSObjectKey} as a free reference in a PDF's crossreference stream ({@link PDFXRefStream}).\n     *\n     * @param key The key, that shall be set as the free reference of the document.\n     * @param nextFreeObject The object number of the next free object.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createTemplate(org.apache.pdfbox.pdmodel.PDPage)" : "* Creates a PDDocument and adds the page parameter to it and keeps this as a template in the PDF template\n     * Structure.\n     *\n     * @param page the page to be added\n     * @throws IOException if the document could not be created",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The signature dictionary.",
  "org.apache.pdfbox.cos.COSDictionary:getFloat(org.apache.pdfbox.cos.COSName,float)" : "* This is a convenience method that will get the dictionary object that is expected to be an float. If the\n     * dictionary value is null then the default value will be returned.\n     *\n     * @param key The key to the item in the dictionary.\n     * @param defaultValue The value to return if the dictionary item is null.\n     * @return The float value.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:addValueToArray(java.awt.Point,int,int[][])" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:reshapeControlPoints(java.awt.geom.Point2D[])" : null,
  "org.apache.pdfbox.pdmodel.common.PDStream:getDecodeParms()" : "* Get the list of decode parameters. Each entry in the list will refer to\n     * an entry in the filters list.\n     * \n     * @return The list of decode parameters.\n     * @throws IOException if there is an error retrieving the parameters.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getMask()" : "* Returns the Mask Image XObject associated with this image, or null if there is none.\r\n     * \r\n     * @return Mask Image XObject",
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setDescent(float)" : "* This will set the descent for the font.\n     *\n     * @param descent The new descent for the font.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:getCOSObject()" : "* Returns the stream.\n     * @return The stream for this object.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDColor:initComponents(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.common.COSArrayList:retainAll(java.util.Collection)" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:next()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:peek()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toString()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createRawStream(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : "* Creates a COS stream from raw (encoded) data.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:setVertices(float[])" : "* This will set the coordinates of the the vertices.\n     *\n     * @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.",
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getTopLevelObjects()" : "* Returns all {@link COSBase}s, that must be added to the document's top level container. Those objects are not\n     * valid to be added to an object stream.\n     *\n     * @return A list of all top level {@link COSBase}s.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setAction(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* Set the action for this node.\n     *\n     * @param action The new action for this node.",
  "org.apache.pdfbox.multipdf.PageExtractor:getStartPage()" : "* Gets the first page number to be extracted.\n     * @return the first page number which should be extracted",
  "org.apache.pdfbox.rendering.TilingPaintFactory$TilingPaintParameter:hashCode()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setMissingWidth(float)" : "* This will set the missing width for the font.\n     *\n     * @param missingWidth The new missing width for the font.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:toUnicode(int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getRoleMap()" : "* Returns the role map.\n     * \n     * @return the role map",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:getExtendedGraphicsState()" : "* This will get the external graphics state for this pattern.\n     * @return The extended graphics state for this pattern.",
  "org.apache.pdfbox.contentstream.operator.text.MoveText:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBorderColors()" : "* Gets the border colour (BorderColor).\n     * \n     * @return a single border colour ({@link PDGamma}) or four border colours\n     *  ({@link PDFourColours})",
  "org.apache.pdfbox.filter.DecodeOptions:<init>(int,int,int,int)" : "* Constructs an instance specifying the region of the image that should be decoded. The actual\n     * region will be clipped to the dimensions of the image.\n     *\n     * @param x x-coordinate of the top-left corner of the region to be decoded\n     * @param y y-coordinate of the top-left corner of the region to be decoded\n     * @param width Width of the region to be decoded\n     * @param height Height of the region to be decoded",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getFilters()" : "* Returns A list of filters applied to this stream.\r\n     *\r\n     * @return A (possibly empty) list of filters applied to this stream, never null.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getPage()" : "* This will retrieve the corresponding page of this annotation. See also\n     * <a href=\"https://stackoverflow.com/a/36894982/535646\">this answer</a> about what to do if\n     * the page isn't available.\n     *\n     * @return The corresponding page or null if not available.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:isStencil()" : null,
  "org.apache.pdfbox.cos.COSInteger:isValid()" : "* Indicates whether this instance represents a valid value.\n     * \n     * @return true if the value is valid",
  "org.apache.pdfbox.filter.DecodeOptions:isFilterSubsampled()" : "* Flag used by the filter to specify if it performed subsampling.\n     *\n     * Some filters may be unable or unwilling to apply subsampling, and so the caller must check\n     * this flag <b>after</b> decoding.\n     *\n     * @return True if the filter applied the options specified by this instance, false otherwise.",
  "org.apache.pdfbox.util.Matrix:translate(org.apache.pdfbox.util.Vector)" : "* Translates this matrix by the given vector.\n     *\n     * @param vector 2D vector",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:setVisualSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties)" : "* Reads the visual signature from the given visual signature properties\n     *\n     * @param visSignatureProperties the <code>PDVisibleSigProperties</code> object containing the\n     * visual signature\n     *\n     * @throws IOException when something went wrong during parsing",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:setName(java.lang.String)" : "* Sets the name of the optional content group.\n     * @param name the name",
  "org.apache.pdfbox.text.PDFTextStripper:setAddMoreFormatting(boolean)" : "* There will some additional text formatting be added if addMoreFormatting is set to true. Default is false.\n     * \n     * @param newAddMoreFormatting Tell PDFBox to add some more text formatting",
  "org.apache.pdfbox.cos.COSIncrement:collect(org.apache.pdfbox.cos.COSObject)" : "* Collect all updates made to the given {@link COSObject} and it's contained structures.\n     *\n     * @param object The {@link COSObject} updates shall be collected for.\n     * @return Always returns {@code false}. {@link COSObject}s by definition are indirect and shall never cause a\n     * parent structure to be updated.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getAnnotationName()" : "* This will get the name, a string intended to uniquely identify each annotation within a page. Not to be confused\n     * with some annotations Name entry which impact the default image drawn for them.\n     * \n     * @return The identifying name for the Annotation.",
  "org.apache.pdfbox.pdfparser.xref.NormalXReference:isObjectStream()" : "* Returns true, if the referenced object is an object stream.\n     *\n     * @return True, if the referenced object is an object stream.",
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:getEncoding()" : "* Returns the Encoding.\r\n     * \r\n     * @return encoding",
  "org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:<init>()" : null,
  "org.apache.pdfbox.pdmodel.PDPage:setTrimBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the TrimBox for this page.\n     * \n     * @param trimBox The new TrimBox for this page.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:mergeOutputIntents(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.multipdf.PDFCloneUtility)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createHolderForm(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDRectangle)" : null,
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:getContainedObjectNumbers(int)" : "Returns object numbers which are referenced as contained\r\n     *  in object stream with specified object number.\r\n     *  \r\n     *  This will scan resolved xref table for all entries having negated\r\n     *  stream object number as value.\r\n     *\r\n     *  @param objstmObjNr  object number of object stream for which contained object numbers\r\n     *                      should be returned\r\n     *                       \r\n     *  @return set of object numbers referenced for given object stream\r\n     *          or <code>null</code> if {@link #setStartxref(long)} was not\r\n     *          called before so that no resolved xref table exists",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getBitsPerComponent()" : "* The bits per component of this shading. This will return -1 if one has not been set.\n     *\n     * @return the number of bits per component",
  "org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getInitialColor()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)" : null,
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:writeFontInfo(java.io.BufferedWriter,org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:intersectClippingPath(java.awt.geom.Area)" : "* Modify the current clipping path by intersecting it with the given path.\n     *\n     * @param area area to intersect with the clipping path",
  "org.apache.pdfbox.text.PDFMarkedContentExtractor:beginMarkedContentSequence(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setFlyScale(float)" : "* @param scale The starting or ending scale at which the changes shall be drawn. Only for\n     * {@link PDTransitionStyle#Fly}.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getName()" : "* Returns the name of the person or authority signing the document. According to the PDF\n     * specification, this value should be used only when it is not possible to extract the name\n     * from the signature.\n     *\n     * @return the name",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getValue()" : "* This will get the value for the field. The return type will either be: <ul>\n     * <li>String: for Checkboxes, Radio Button, Textfields</li>\n     * <li>List&lt;String&gt;: for a Choice Field</li>\n     * </ul>\n     * @return The value of the field.\n     * @throws IOException If there is an error getting the value.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:beginText()" : "* Begin some text operations.\n     *\n     * @throws IOException If there is an error writing to the stream or if you attempt to\n     *         nest beginText calls.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getNumberOfColorComponents()" : "* The number of color components of this shading.\n     *\n     * @return number of color components of this shading\n     * \n     * @throws IOException if the data could not be read",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getCOSObject()" : "* This will get the underlying dictionary that this class acts on.\n     *\n     * @return The underlying dictionary for this class.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:setPDPropBuildPubSec(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict)" : "* Set the build data dictionary for the PubSec Software module.\n     *\n     * @param pubSec is the PDPropBuildPubSec",
  "org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:getValueAsString()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:overlap(float,float,float,float)" : null,
  "org.apache.pdfbox.cos.COSUpdateState:setOriginDocumentState(org.apache.pdfbox.cos.COSDocumentState,boolean)" : "* <p>\n     * Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br>\n     * </p>\n     * <p>\n     * This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for\n     * all possibly contained substructures.\n     * </p>\n     * <p>\n     * Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to\n     * overwrite it.\n     * </p>\n     * <p>\n     * {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are\n     * allowed.\n     * </p>\n     * <p>\n     * As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates.\n     * </p>\n     * <p>\n     * Additionally to {@link #setOriginDocumentState(COSDocumentState)}, this shall also deny changing\n     * {@link #updated}, should the flag {@code dereferencing} indicate, that this is caused by dereferencing a\n     * {@link COSObject}.\n     * </p>\n     *\n     * @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}.\n     * @param dereferencing       {@code true}, if this update of the {@link COSDocumentState} is caused by\n     *                            dereferencing a {@link COSObject}.\n     * @see #originDocumentState\n     * @see #updated",
  "org.apache.pdfbox.contentstream.operator.state.Restore:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileMac()" : "* This will get the name representing a Mac file.\n     *\n     * @return The file name.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:rinterpolate()" : "* Calculate the interpolation.\n         *\n         * @return interpolated result sample",
  "org.apache.pdfbox.multipdf.LayerUtility:importOcProperties(org.apache.pdfbox.pdmodel.PDDocument)" : "* Imports OCProperties from source document to target document so hidden layers can still be\n     * hidden after import.\n     *\n     * @param srcDoc The source PDF document that contains the /OCProperties to be copied.\n     * @throws IOException If an I/O error occurs.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:clip()" : "* Intersects the current clipping path with the current path, using the nonzero rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getHeaders()" : "* Gets the headers (Headers). An array of byte strings, where each string\n     * shall be the element identifier (see the\n     * {@link org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement#getElementIdentifier()}) for a TH structure\n     * element that shall be used as a header associated with this cell.\n     * \n     * @return the headers.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.io.RandomAccessRead,boolean,boolean)" : "* Loads a TTF to be embedded into a document as a Type 0 font.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param randomAccessRead source of a TrueType font.\n     * @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for\n     * AcroForm.\n     * @param vertical whether to enable vertical substitutions.\n     * @return A Type0 font with a CIDFontType2 descendant.\n     * @throws IOException If there is an error reading the font stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isReadOnly()" : "* Get the readOnly flag.\n     * \n     * @return The readOnly flag.",
  "org.apache.pdfbox.rendering.GroupGraphics:<init>(java.awt.image.BufferedImage,java.awt.Graphics2D,java.awt.image.BufferedImage,java.awt.Graphics2D)" : null,
  "org.apache.pdfbox.filter.CCITTFaxEncoderStream$Code:<init>(int,int)" : null,
  "org.apache.pdfbox.filter.LZWFilter:checkIndexBounds(java.util.List,long,javax.imageio.stream.MemoryCacheImageInputStream)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:parseStampAnnotationAppearanceXML(org.w3c.dom.Element)" : "* This will create an Appearance dictionary from an appearance XML element.\n     *\n     * @param appearanceXML The XML element that contains the appearance data.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorN:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSNull(java.io.OutputStream)" : "* Write {@link COSNull} to the given stream.\n     *\n     * @param output The stream, that shall be written to.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setQ(int)" : "* This will set the quadding/justification of the text. Please see the QUADDING_CONSTANTS\n     * in {@link PDVariableText }.\n     *\n     * @param q The new text justification.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getAreas()" : "* This will return the areas.\r\n     * \r\n     * @return areas",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:getAttachmentName()" : "* This is the name used to draw the type of attachment. See the ATTACHMENT_NAME_XXX constants.\n     *\n     * @return The name that describes the visual cue for the attachment.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationHighlight:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getRawImage()" : null,
  "org.apache.pdfbox.text.PDFTextStripper:processPage(org.apache.pdfbox.pdmodel.PDPage)" : "* This will process the contents of a page.\n     *\n     * @param page The page to process.\n     *\n     * @throws IOException If there is an error processing the page.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:fitWindow()" : "* Get the fit window preference.\n     *\n     * @return the fit window preference.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setTransfer(org.apache.pdfbox.cos.COSBase)" : "* This will set the transfer function.\n     *\n     * @param transfer The transfer function. According to the PDF specification, this is either a\n     * single function (which applies to all process colorants) or an array of four functions (which\n     * apply to the process colorants individually). The name Identity may be used to represent the\n     * identity function, and the name Default denotes the transfer function that was in effect at\n     * the start of the page.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setSetWidgetFieldFlags(java.lang.Integer)" : "* This will set the widget field flags that are associated with this field.\n     * The 'SetF' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the \"set widget field flags\".",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:generateNormalAppearance()" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:closeAndFillAndStroke()" : "* Close, fill, and then stroke the path, using the nonzero winding number rule to determine the\n     * region to fill. This shall have the same effect as the sequence {@link #closePath() }\n     * and then {@link #fillAndStroke() }.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:getNumber(int,java.lang.String)" : null,
  "org.apache.pdfbox.pdfparser.xref.AbstractXReference:<init>(org.apache.pdfbox.pdfparser.xref.XReferenceType)" : "* Creates a crossreference stream entry of the given {@link XReferenceType}.\n     *\n     * @param type The {@link XReferenceType} of the crossreference stream entry.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setHeight(int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setStructureType(java.lang.String)" : "* Sets the structure type (S).\n     * \n     * @param structureType the structure type",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:showTextWithPositioning(java.lang.Object[])" : "* Shows the given text at the location specified by the current text matrix with the given\n     * interspersed positioning. This allows the user to efficiently position each glyph or sequence\n     * of glyphs.\n     *\n     * @param textWithPositioningArray An array consisting of String and Float types. Each String is\n     * output to the page using the current text matrix. Using the default coordinate system, each\n     * interspersed number adjusts the current text matrix by translating to the left or down for\n     * horizontal and vertical text respectively. The number is expressed in thousands of a text\n     * space unit, and may be negative.\n     *\n     * @throws IOException if an io exception occurs.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     * \n     * @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdfparser.XrefParser:validateXrefOffsets(java.util.Map)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getDestination()" : "* Get the destination to be displayed when the annotation is activated. Either this or the\n     * action entry should be set, but not both.\n     *\n     * @return The destination for this annotation.\n     *\n     * @throws IOException If there is an error creating the destination.",
  "org.apache.pdfbox.rendering.GroupGraphics:drawRoundRect(int,int,int,int,int,int)" : null,
  "org.apache.pdfbox.pdfparser.BruteForceParser:compareCOSObjects(org.apache.pdfbox.cos.COSObject,java.lang.Long,org.apache.pdfbox.cos.COSObject)" : null,
  "org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setThread(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread)" : "* Set the thread that this bead is part of.  This is only required for the\n     * first bead in a thread.  Note: This property is set for you by the PDThread.setFirstBead() method.\n     *\n     * @param thread The thread that this bead is part of.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:<init>()" : null,
  "org.apache.pdfbox.pdfparser.BaseParser:parseCOSDictionaryNameValuePair(org.apache.pdfbox.cos.COSDictionary)" : null,
  "org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:getN()" : "* Returns the exponent of the function.\n     *\n     * @return the float value of the exponent",
  "org.apache.pdfbox.pdmodel.PDPage:getAnnotations(org.apache.pdfbox.pdmodel.interactive.annotation.AnnotationFilter)" : "* This will return a list of the annotations for this page.\n     *\n     * @param annotationFilter the annotation filter provided allowing to filter out specific annotations\n     * @return List of the PDAnnotation objects, never null. The returned list is backed by the\n     * annotations COSArray, so any adding or deleting in this list will change the document too.\n     * \n     * @throws IOException If there is an error while creating the annotation list.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Word:<init>(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getValueAsString()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:getKids()" : "* Returns a list of objects for the kids (K).\r\n     * \r\n     * @return a list of objects for the kids, never null.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:getY()" : "* Returns the y value of the tristimulus.\n     * @return the Y value",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:<init>()" : "* Constructor.",
  "org.apache.pdfbox.cos.COSStream:<init>(org.apache.pdfbox.io.RandomAccessStreamCache,org.apache.pdfbox.io.RandomAccessReadView)" : "* Creates a new stream with an empty dictionary. Data is read from the given random accessview. Written data is\n     * stored in the given scratch file.\n     *\n     * @param streamCache Stream cache for writing stream data.\n     * @param randomAccessReadView source for the data to be read\n     * @throws IOException if the length of the random access view isn't available",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:getCOSDictionary()" : "* Returns the underlying COS dictionary.\n     * @return the dictionary that this object wraps",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:getPatternType()" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:codeToCID(int)" : "* Returns the CID for the given character code. If not found then CID 0 is returned.\n     *\n     * @param code character code\n     * @return CID for the given character code",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processTilingPattern(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColor,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.util.Matrix)" : "* Process the given tiling pattern. Allows the pattern matrix to be overridden for custom\n     * rendering.\n     *\n     * @param tilingPattern the tiling pattern\n     * @param color color to use, if this is an uncoloured pattern, otherwise null.\n     * @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null.\n     * @param patternMatrix the pattern matrix, may be overridden for custom rendering.\n     * @throws IOException if there is an error reading or parsing the tiling pattern content stream.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setType(org.apache.pdfbox.cos.COSName)" : "* Set the dictionary type.\n     *\n     * @param type is the dictionary type.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:addSubstitutes(java.lang.String,java.util.List)" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:addObjectToPool(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)" : "* Adds the given {@link COSBase} to this pool, using the given {@link COSObjectKey} as it's referencable ID. This\n     * method shall determine an appropriate key, for yet unregistered objects, to register them. Depending on the type\n     * of object, it shall either be appended as-is or shall be appended to a compressed {@link COSWriterObjectStream}.\n     *\n     * @param key The {@link COSObjectKey} that shall be used as the {@link COSBase}s ID, if possible.\n     * @param base The {@link COSBase}, that shall be registered in this pool.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processOperator(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : "* This is used to handle an operation.\n     * \n     * @param operator The operation to perform.\n     * @param operands The list of arguments.\n     * @throws IOException If there is an error processing the operation.",
  "org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:<init>(org.apache.pdfbox.text.TextPosition)" : "* Constructs a PositionWrapper around the specified TextPosition object.\n         *\n         * @param position the text position.",
  "org.apache.pdfbox.pdmodel.PDDocument:setDocumentInformation(org.apache.pdfbox.pdmodel.PDDocumentInformation)" : "* This will set the document information for this document.\n     * <p>\n     * In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other\n     * document level metadata, a metadata stream should be used instead, see\n     * {@link PDDocumentCatalog#setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata) PDDocumentCatalog#setMetadata(PDMetadata)}.\n     *\n     * @param info The updated document information.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getCurrentAccessPermission()" : "* Returns the access permissions that were computed during document decryption.\n     * The returned object is in read only mode.\n     *\n     * @return the access permissions or null if the document was not decrypted.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getInfo()" : null,
  "org.apache.pdfbox.pdmodel.MissingResourceException:<init>(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:getRevisionNumber(int)" : "* Returns the revision number at the specified position.\n     * \n     * @param index the position\n     * @return the revision number\n     * @throws IndexOutOfBoundsException if the index is out of range",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnCount(int)" : "* Sets the number of columns in the content of the grouping element\n     * (ColumnCount).\n     * \n     * @param columnCount the column count",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getReadingDirection()" : "* Get the reading direction preference.\n     *\n     * @return the reading direction preference.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(float,float,float)" : "* Set the non-stroking color in the DeviceRGB color space. Range is 0..1.\n     *\n     * @param r The red value.\n     * @param g The green value.\n     * @param b The blue value.\n     * @throws IOException If an IO error occurs while writing to the stream.\n     * @throws IllegalArgumentException If the parameters are invalid.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getQ()" : "* This will get the 'quadding' or justification of the text to be displayed.\n     * \n     * This is an inheritable attribute.\n     * <br>\n     * 0 - Left (default)<br>\n     * 1 - Centered<br>\n     * 2 - Right<br>\n     * Please see the QUADDING_CONSTANTS.\n     *\n     * @return The justification of the text strings.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getStructureTreeRoot()" : "* Get the document's structure tree root, or null if none exists.\n     * \n     * @return the structure tree root if present, otherwise null",
  "org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getBaseState()" : "* Returns the base state for optional content groups.\n     * @return the base state",
  "org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:getX()" : "* Returns the x value of the tristimulus.\n     * @return the X value",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:append(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* Appends the child to the linked list of children. This method only adjust pointers but doesn't take care of the\n     * Count key in the parent hierarchy.\n     * \n     * @param newChild",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getNumberOfColorComponents()" : "* The number of color components of this shading.\n     *\n     * @return number of color components of this shading\n     * \n     * @throws IOException if the data could not be read",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)" : "* Sets the non-stroking color.\n     *\n     * @param color The new non-stroking color",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:newLineAtOffset(float,float)" : "* The Td operator.\n     * Move to the start of the next line, offset from the start of the current line by (tx, ty).\n     *\n     * @param tx The x translation.\n     * @param ty The y translation.\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was not allowed to be called at this time.",
  "org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:allowCIDToUnicodeRange(java.util.Map$Entry,java.util.Map$Entry)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getRubyPosition()" : "* Gets the placement of the RT structure element relative to the RB element\n     * in a ruby assembly (RubyPosition). The default value is\n     * {@link #RUBY_POSITION_BEFORE}.\n     * \n     * @return the ruby position",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createVisualSignature(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:available()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)" : null,
  "org.apache.pdfbox.cos.COSArray:getObject(int)" : "* This will get an object from the array.  This will dereference the object.\n     * If the object is COSNull then null will be returned.\n     *\n     * @param index The index into the array to get the object.\n     *\n     * @return The object at the requested index.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFontEmbedder:buildSubset(java.io.InputStream,java.lang.String,java.util.Map)" : null,
  "org.apache.pdfbox.pdmodel.PDPage:getIndirectResourceObjects(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:<init>(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)" : "* Constructor for Standard 14.",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:setVersion(java.lang.String)" : "* Sets the PDF specification version this document conforms to.\n     *\n     * @param version the PDF version (e.g. \"1.4\")",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:fill()" : "* Fills the path using the nonzero winding number rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:getLen(java.awt.geom.Point2D,java.awt.geom.Point2D)" : "* Calculate the distance from point ps to point pe.\n     *\n     * @param ps one end of a line\n     * @param pe the other end of the line\n     * @return length of the line",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createSignature(org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField,org.apache.pdfbox.pdmodel.PDPage,java.lang.String)" : null,
  "org.apache.pdfbox.cos.COSUpdateInfo:toIncrement()" : "* Uses this {@link COSUpdateInfo} as the base object of a new {@link COSIncrement}.\n     *\n     * @return A {@link COSIncrement} based on this {@link COSUpdateInfo}.\n     * @see COSIncrement",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processStreamOperators(org.apache.pdfbox.contentstream.PDContentStream)" : "* Processes the operators of the given content stream.\n     *\n     * @param contentStream to content stream to parse.\n     * @throws IOException if there is an error reading or parsing the content stream.",
  "org.apache.pdfbox.cos.COSArray:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* Visitor pattern double dispatch method.\n     *\n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If an error occurs while visiting this object.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setF(java.lang.String)" : "* This will set the file name to be launched or the document to be opened\n     * or printed, in standard Windows pathname format. If the name string includes\n     * a backslash character (\\), the backslash must itself be preceded by a backslash.\n     * This value must be a single string; it is not a file specification.\n     *\n     * @param f The file name to be launched.",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.font.PDFont)" : "* Adds the given font to the resources of the current page and returns the name for the\r\n     * new resources. Returns the existing resource name if the given item already exists.\r\n     *\r\n     * @param font the font to add\r\n     * @return the name of the resource in the resources dictionary",
  "org.apache.pdfbox.cos.PDFDocEncoding:toString(byte[])" : "* Returns the string representation of the given PDFDocEncoded bytes.",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColorN:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Orientation,boolean,float,boolean)" : "* Creates a new PDFPageable with the given page orientation and with optional page borders\n     * shown. The image will be rasterized at the given DPI before being sent to the printer if\n     * non-zero, and optionally be centered.\n     *\n     * @param document the document to print\n     * @param orientation page orientation policy\n     * @param showPageBorder true if page borders are to be printed\n     * @param dpi if non-zero then the image will be rasterized at the given DPI\n     * @param center true if the content is to be centered on the page (otherwise top-left).",
  "org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setLeading(float)" : "* Set the value of the leading.\n     *\n     * @param value The leading.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setLocked(boolean)" : "* Set the locked flag.\n     * \n     * @param locked The new locked flag.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBaselineShift(float)" : "* Sets the distance by which the element’s baseline shall be shifted\n     * relative to that of its parent element (BaselineShift).\n     * \n     * @param baselineShift the baseline shift",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setLeaderLineExtensionLength(float)" : "* This will set the length of the leader line extensions.\n     * \n     * @param leaderLineExtensionLength length of the leader line extensions",
  "org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:rinterpol(int[],int)" : "* Do a linear interpolation if the two coordinates can be known, or\n         * call itself recursively twice.\n         *\n         * @param coord coord partially set coordinate (not set from step\n         * upwards); gets fully filled in the last call (\"leaf\"), where it is\n         * used to get the correct sample\n         * @param step between 0 (first call) and dimension - 1\n         * @return interpolated result sample",
  "org.apache.pdfbox.cos.COSNumber:get(java.lang.String)" : "* This factory method will get the appropriate number object.\n     *\n     * @param number The string representation of the number.\n     *\n     * @return A number object, either float or int.\n     *\n     * @throws IOException If the string is not a number.",
  "org.apache.pdfbox.multipdf.Splitter:splitAtPage(int)" : "* Check if it is necessary to create a new document.\n     * By default a split occurs at every page.  If you wanted to split\n     * based on some complex logic then you could override this method.  For example.\n     * <code>\n     * protected void splitAtPage()\n     * {\n     *     // will split at pages with prime numbers only\n     *     return isPrime(pageNumber);\n     * }\n     * </code>\n     * @param pageNumber the 0-based page number to be checked as splitting page\n     * \n     * @return true If a new document should be created.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:generateDownAppearance()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:setWidgets(java.util.List)" : "* Sets the field's widget annotations.\n     *\n     * @param children The list of widget annotations.",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getSubject()" : "* This will get the subject of the document.  This will return null if no subject exists.\n     *\n     * @return The subject of the document.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getInitialColor()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:<init>(java.lang.String)" : "* Constructor.\n     *\n     * @param js Some javascript code.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:setEdit(boolean)" : "* Set the Edit bit.\n     *\n     * @param edit The value for Edit.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:setO(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the page\n     * is opened. This action is independent of any that may be\n     * defined by the OpenAction entry in the document catalog,\n     * and is executed after such an action.\n     *\n     * @param o The action to be performed.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getICCProfile()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:setState(java.lang.String)" : "* This will set the annotation state.\n     * \n     * @param state the annotation state",
  "org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:<init>(org.apache.pdfbox.cos.COSArray)" : "* Creates a new ICC color space using the PDF array.\n     *\n     * @param iccArray the ICC stream object.\n     * @throws IOException if there is an error reading the ICC profile or if the parameter is\n     * invalid.",
  "org.apache.pdfbox.pdfparser.XrefTrailerResolver:reset()" : "* Reset all data so that it can be used to rebuild the trailer.\r\n     *",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3:toPaint(org.apache.pdfbox.util.Matrix)" : null,
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getProducer()" : "* This will get the producer of the document.  This will return null if no producer exists.\n     *\n     * @return The producer of the document.",
  "org.apache.pdfbox.contentstream.operator.graphics.CloseFillEvenOddAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.cos.COSString:toString()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)" : "* Set the text rendering mode. This determines whether showing text shall cause glyph outlines\n     * to be stroked, filled, used as a clipping boundary, or some combination of the three.\n     *\n     * @param rm The text rendering mode.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.PlainText$Paragraph:<init>(java.lang.String)" : null,
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl$FontMatch:compareTo(org.apache.pdfbox.pdmodel.font.FontMapperImpl$FontMatch)" : null,
  "org.apache.pdfbox.pdmodel.font.CIDSystemInfo:<init>(java.lang.String,java.lang.String,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setLineHeight(int)" : "* Sets the element’s preferred height in the block-progression direction\n     * (LineHeight).\n     * \n     * @param lineHeight the line height",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:createAnnotation(org.apache.pdfbox.cos.COSBase)" : "* Create the correct annotation from the base COS object.\n     *\n     * @param base The COS object that is the annotation.\n     * @return The correctly typed annotation object, never null.\n     *\n     * @throws IOException If the annotation type is unknown.",
  "org.apache.pdfbox.multipdf.PDFCloneUtility:cloneForNewDocument(org.apache.pdfbox.cos.COSBase)" : "* Deep-clones the given object for inclusion into a different PDF document identified by the destination parameter.\n     * \n     * Expert use only, don’t use it if you don’t know exactly what you are doing.\n     * \n     * @param base the initial object as the root of the deep-clone operation\n     * @return the cloned instance of the base object\n     * @throws IOException if an I/O error occurs",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceGrayColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.cos.COSDictionary:getFloat(java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned\n     * if there is no value.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The float value.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:setStyle(java.lang.String)" : "* This will set the border style, see the STYLE_* constants for valid values.\n     *\n     * @param s the border style to use",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getDigestMethod()" : "* An array of names indicating acceptable digest algorithms to use when\n     * signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>,\n     * <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific.\n     *\n     * @return the digest method that shall be used by the signature handler",
  "org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:<init>(org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.common.PDMetadata:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : "* Constructor. Reads all data from the input stream and embeds it into the document, this will\n     * close the InputStream. The /Type and /Subtype entries for a document level metadata object\n     * will be created.\n     *\n     * @param doc The document that will hold the stream.\n     * @param str The stream parameter.\n     * @throws IOException If there is an error creating the stream in the document.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllBorderThicknesses(int)" : "* Sets the same border thickness for all four sides (BorderThickness).\n     * \n     * @param borderThickness the border thickness",
  "org.apache.pdfbox.multipdf.PageExtractor:extract()" : "* This will take a document and extract the desired pages into a new \n     * document.  Both startPage and endPage are included in the extracted \n     * document.  If the endPage is greater than the number of pages in the \n     * source document, it will go to the end of the document.  If startPage is\n     * less than 1, it'll start with page 1.  If startPage is greater than \n     * endPage or greater than the number of pages in the source document, a \n     * blank document will be returned.\n     * \n     * @return The extracted document\n     * @throws IOException If there is an IOError",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject)" : "* Creates a user property with a given dictionary.\n     * \n     * @param dictionary the dictionary\n     * @param userAttributeObject the user attribute object",
  "org.apache.pdfbox.pdfparser.COSParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String)" : "* Constructor for encrypted pdfs.\n     * \n     * @param source input representing the pdf.\n     * @param password password to be used for decryption.\n     * @param keyStore key store to be used for decryption when using public key security\n     * @param keyAlias alias to be used for decryption when using public key security\n     *\n     * @throws IOException if the source data could not be read",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:setD(org.apache.pdfbox.cos.COSBase)" : "* @param d The destination.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:create(org.apache.pdfbox.cos.COSBase)" : "* Creates a new soft mask.\r\n     *\r\n     * @param dictionary SMask\r\n     * \r\n     * @return the newly created instance of PDSoftMask",
  "org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new shading pattern from the given COS dictionary.\n     * @param resourceDictionary The COSDictionary for this pattern resource.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getLeaderLineOffsetLength()" : "* This will retrieve the length of the leader line offset.\n     * \n     * @return the length of the leader line offset",
  "org.apache.pdfbox.contentstream.operator.state.SetMatrix:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)" : "* Set the text rendering mode. This determines whether showing text shall cause glyph outlines\n     * to be stroked, filled, used as a clipping boundary, or some combination of the three.\n     *\n     * @param rm The text rendering mode.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShading,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)" : "* Constructor.\n     *\n     * @param shading the shading type to be used\n     * @param cm the color model to be used\n     * @param xform transformation for user to device space\n     * @param matrix the pattern matrix concatenated with that of the parent content stream\n     * @throws IOException if there is an error getting the color space or doing background color conversion.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.font.PDFont:getStandard14AFM()" : "* Returns the AFM if this is a Standard 14 font.\n     * \n     * @return the AFM",
  "org.apache.pdfbox.cos.COSBoolean:accept(org.apache.pdfbox.cos.ICOSVisitor)" : "* visitor pattern double dispatch method.\n     *\n     * @param visitor The object to notify when visiting this object.\n     * @throws IOException If an error occurs while visiting this object.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getRevisionNumber()" : "* Returns the revision number (R).\n     * \n     * @return the revision number",
  "org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeObject(org.apache.pdfbox.contentstream.operator.Operator)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setSpaceBefore(int)" : "* Sets the amount of extra space preceding the before edge of the BLSE in\n     * the block-progression direction (SpaceBefore).\n     * \n     * @param spaceBefore the space before",
  "org.apache.pdfbox.pdfwriter.compress.CompressParameters:isCompress()" : "* Indicates whether the creation of compressed object streams is enabled or not.\n     * \n     * @return true if compression is enabled.",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:getTag(java.util.Map)" : "* Returns an uppercase 6-character unique tag for the given subset.",
  "org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:getImage()" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.printing.PDFPrintable:getRotatedMediaBox(org.apache.pdfbox.pdmodel.PDPage)" : "* This will find the MediaBox with rotation applied, for this page by looking up the hierarchy\n     * until it finds them.\n     *\n     * @return The MediaBox at this level in the hierarchy.",
  "org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getJavaScript()" : "* This will get the java script entry.\n     *\n     * @return The java script entry describing javascript commands.",
  "org.apache.pdfbox.pdfparser.BaseParser:isWhitespace(int)" : "* This will tell if a character is whitespace or not.  These values are\n     * specified in table 1 (page 12) of ISO 32000-1:2008.\n     * @param c The character to check against whitespace\n     * @return true if the character is a whitespace character.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a new Layout attribute object with a given dictionary.\n     * \n     * @param dictionary the dictionary",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary)" : "* This will set the appearance associated with this annotation.\n     * \n     * @param appearance The appearance dictionary for this annotation.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addKeyUsage(char,char,char,char,char,char,char,char,char)" : "* works like {@link #addKeyUsage(String)} but enters each character separately\n     *\n     * @param digitalSignature char that is one of {0, 1, X}\n     * @param nonRepudiation char that is one of {0, 1, X}\n     * @param keyEncipherment char that is one of {0, 1, X}\n     * @param dataEncipherment char that is one of {0, 1, X}\n     * @param keyAgreement char that is one of {0, 1, X}\n     * @param keyCertSign char that is one of {0, 1, X}\n     * @param cRLSign char that is one of {0, 1, X}\n     * @param encipherOnly char that is one of {0, 1, X}\n     * @param decipherOnly char that is one of {0, 1, X}",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Create a graphics state from an existing dictionary.\n     *\n     * @param dictionary The existing graphics state.\n     * @param resourceCache Resource cache, may be null.",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBaselineShift()" : "* Gets the distance by which the element’s baseline shall be shifted\n     * relative to that of its parent element (BaselineShift). The default value\n     * is 0.\n     * \n     * @return the baseline shift",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getColSpan()" : "* Gets the number of columns in the enclosing table that shall be spanned\n     * by the cell (ColSpan). The default value is 1.\n     * \n     * @return the column span",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:toString()" : null,
  "org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : "* Sets the color space resource with the given name.\r\n     *\r\n     * @param name the name of the resource\r\n     * @param colorSpace the color space to be added",
  "org.apache.pdfbox.cos.COSStream:close()" : "* {@inheritDoc}\n     *\n     * Called by PDFBox when the PDDocument is closed, this closes the stream and removes the data. You will usually not\n     * need this.\n     *\n     * @throws IOException if something went wrong when closing the stream",
  "org.apache.pdfbox.pdfparser.PDFParser:parse()" : "* This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is\n     * done parsing. Lenient mode is active by default.\n     *\n     * @return the populated PDDocument\n     *\n     * @throws InvalidPasswordException If the password is incorrect.\n     * @throws IOException If there is an error reading from the stream or corrupt data is found.",
  "org.apache.pdfbox.pdmodel.common.PDRange:<init>()" : "* Constructor with an initial range of 0..1.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:setDefaultAppearance(java.lang.String)" : "* Set the default appearance.\n     * \n     * This will set the local default appearance for the variable text field only, not \n     * affecting a default appearance in the parent hierarchy.\n     * \n     * Providing null as the value will remove the local default appearance.\n     * <p>\n     * This method can also be used to change the font of a field, by replacing the font name from\n     * this string with another font name found in the AcroForm default resources <u>before</u>\n     * calling {@link #setValue(java.lang.String) setValue(String)}, see also\n     * <a href=\"https://stackoverflow.com/questions/47995062/pdfbox-api-how-to-handle-cyrillic-values\">this\n     * stackoverflow answer</a>. For example, \"/Helv 10 Tf 0 g\" can be replaced with \"/F1 10 Tf 0\n     * g\". Performance may go down (see\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-4508\">PDFBOX-4508)</a> if this is done\n     * for many fields and with a very large font (e.g. ArialUni); to avoid this, save and reload\n     * the file after changing all fields.\n     *\n     * @param daValue a string describing the default appearance",
  "org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setDecode(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:setValue(org.apache.pdfbox.cos.COSBase)" : "* Sets the value of this field. This may be of any kind which is valid for this field's children.\n     *\n     * <p>\n     * <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value,\n     * without inheritance.\n     * \n     * @param object the new value",
  "org.apache.pdfbox.pdmodel.PDDocument:isAllSecurityToBeRemoved()" : "* Indicates if all security is removed or not when writing the pdf.\n     * \n     * @return returns true if all security shall be removed otherwise false",
  "org.apache.pdfbox.pdmodel.PDDocumentCatalog:getPageLabels()" : "* Returns the page labels descriptor of the document.\n     *\n     * @return the page labels descriptor of the document.\n     * @throws IOException If there is a problem retrieving the page labels.",
  "org.apache.pdfbox.pdmodel.PDPage:<init>(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Creates a new instance of PDPage for embedding.\n     * \n     * @param mediaBox The MediaBox of the page.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:<init>(org.apache.pdfbox.cos.COSName)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getAverageFontWidth()" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:getResourceCache()" : "* Returns the resource cache associated with this document, or null if there is none.\n     * \n     * @return the resource cache of the document",
  "org.apache.pdfbox.filter.LZWFilter:findPatternCode(java.util.List,byte[])" : "* Find a matching pattern in the code table.\n     *\n     * @param codeTable The LZW code table.\n     * @param pattern The pattern to be searched for.\n     * @return The index of the matching pattern or -1 if nothing is found.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getInitialColor()" : null,
  "org.apache.pdfbox.cos.COSDictionary:getDate(java.lang.String)" : "* This is a convenience method that will get the dictionary object that is expected to be a name and convert it to\n     * a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid.\n     *\n     * @param key The key to the item in the dictionary.\n     * @return The name converted to a date.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getDefaultDecode(int)" : null,
  "org.apache.pdfbox.text.PDFTextStripper:normalizeWord(java.lang.String)" : "* Normalize certain Unicode characters. For example, convert the single \"fi\" ligature to \"f\" and \"i\". Also\n     * normalises Arabic and Hebrew presentation forms.\n     *\n     * @param word Word to normalize\n     * @return Normalized word",
  "org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:hashCode()" : null,
  "org.apache.pdfbox.cos.COSDocument:getTrailer()" : "* This will get the document trailer.\n     *\n     * @return the document trailer dict",
  "org.apache.pdfbox.contentstream.operator.state.SetLineMiterLimit:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getRichContents()" : "* This will retrieve the rich text stream which is displayed in the popup window.\n     *\n     * @return the rich text stream.",
  "org.apache.pdfbox.pdfwriter.compress.COSObjectPool:contains(org.apache.pdfbox.cos.COSBase)" : "* Returns true, if the given {@link COSBase} is a registered object of this pool.\n     *\n     * @param object The {@link COSBase} that shall be checked.\n     * @return True, if such a {@link COSBase} is registered in this pool.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getHighlightingMode()" : "* Returns the highlighting mode. Default value: <code>I</code>\n     * <dl>\n     * <dt><code>N</code></dt>\n     * <dd>(None) No highlighting.</dd>\n     * <dt><code>I</code></dt>\n     * <dd>(Invert) Invert the contents of the annotation rectangle.</dd>\n     * <dt><code>O</code></dt>\n     * <dd>(Outline) Invert the annotation's border.</dd>\n     * <dt><code>P</code></dt>\n     * <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of\n     * the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd>\n     * <dt><code>T</code></dt>\n     * <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd>\n     * </dl>\n     * \n     * @return the highlighting mode",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)" : "* Begin a marked content sequence with a reference to the marked content identifier (MCID).\n     *\n     * @param tag the tag to be added to the content stream\n     * @param mcid the marked content identifier (MCID)\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.PDDocumentInformation:getCreator()" : "* This will get the creator of the document.  This will return null if no creator exists.\n     *\n     * @return The creator of the document.",
  "org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:setEncryptionKeyLength(int)" : "* set the length in (bits) of the secret key that will be\n     * used to encrypt document data.\n     * The default value is 40 bits, which provides a low security level\n     * but is compatible with old versions of Acrobat Reader.\n     *\n     * @param l the length in bits (must be 40, 128 or 256)",
  "org.apache.pdfbox.cos.COSDictionary:setBoolean(java.lang.String,boolean)" : "* This will set an item in the dictionary.\n     *\n     * @param key The key to the dictionary object.\n     * @param value The value to the dictionary object.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:getCOSObject()" : "* This will return the corresponding dictionary.\n     * \n     * @return the measure dictionary",
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:getPos()" : "* This will get the current position in the stream.\n     *\n     * @return The current position in the stream.",
  "org.apache.pdfbox.cos.COSObject:isObjectNull()" : "* Indicates if the referenced object is present or not.\n     * \n     * @return true if the indirect object is dereferenced",
  "org.apache.pdfbox.filter.Predictor:getBitSeq(int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getOverprintMode()" : "* This will get the overprint control mode.\n     *\n     * @return The overprint control mode or null if one has not been set.",
  "org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:<init>(java.awt.geom.Point2D[],float[][])" : "* Constructor.\n     *\n     * @param p an array of the 3 vertices of a triangle\n     * @param c an array of color corresponding the vertex array p",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(java.awt.Color)" : "* Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:getNormalAppearance()" : "* This will return a list of appearances. In the case where there is only one appearance the map will contain one\n     * entry whose key is the string \"default\".\n     *\n     * @return A list of key(java.lang.String) value(PDAppearanceStream) pairs",
  "org.apache.pdfbox.util.filetypedetector.FileTypeDetector:<init>()" : null,
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFileUnix()" : "* Get the embedded Unix file.\n     *\n     * @return The embedded file for this file spec.",
  "org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:create(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)" : "* Creates a marked-content sequence.\r\n     * \r\n     * @param tag the tag\r\n     * @param properties the properties\r\n     * @return the marked-content sequence",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getContentsForRandomAccess()" : null,
  "org.apache.pdfbox.pdmodel.common.PDRectangle:contains(float,float)" : "* Method to determine if the x/y point is inside this rectangle.\n     * @param x The x-coordinate to test.\n     * @param y The y-coordinate to test.\n     * @return True if the point is inside this rectangle.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:getValue()" : "* Returns the property value.\n     * \n     * @return the property value",
  "org.apache.pdfbox.pdmodel.common.PDTypedDictionaryWrapper:getType()" : "* Gets the type.\n     * \n     * @return the type",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setTextRise(float)" : "* Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or\n     * subscripts.\n     *\n     * @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its\n     * default location. 0 restores the default location.\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getInitialMatrix()" : "* Gets the stream's initial matrix.\n     * \n     * @return the initial matrix",
  "org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getType1Font(java.lang.String,java.io.File)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addIssuer(byte[])" : "* array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the\n     * signer’s certificate chains up to any of the specified issuers (either directly or\n     * indirectly), the certificate is considered acceptable for signing.\n     *\n     * @param issuer A byte array containing DER-encoded X.509v3 certificate",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)" : "* Set an extended graphics state.\n     * \n     * @param state The extended graphics state to be added to the content stream\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:setLeading(float)" : "* Set the leading used for text formatting.\n     * \n     * @param leading the leading to be used.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:getMeasure()" : "* This will retrieve the measure dictionary.\n     * \n     * @return the measure dictionary",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)" : "* Constructor.\n     *  @param acroForm The form that this field is part of.\n     * @param field the PDF object to represent as a field.\n     * @param parent the parent node of the node",
  "org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:setOutputCondition(java.lang.String)" : null,
  "org.apache.pdfbox.cos.UnmodifiableCOSDictionary:setNeedToBeUpdated(boolean)" : "* {@inheritDoc}",
  "org.apache.pdfbox.text.PDFTextStripper$WordWithTextPositions:getTextPositions()" : null,
  "org.apache.pdfbox.pdmodel.encryption.AccessPermission:<init>(byte[])" : null,
  "org.apache.pdfbox.pdmodel.font.PDSimpleFont:subset()" : null,
  "org.apache.pdfbox.pdmodel.PDDocument:saveIncremental(java.io.OutputStream,java.util.Set)" : "* Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not\n     * if the document was created in PDFBox itself. This allows to include objects even if there is no path of objects\n     * that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries\n     * are supported; if you need to update other objects classes, then add their parent dictionary.\n     * <p>\n     * This method is for experienced users only. You will usually never need it. It is useful only if you are required\n     * to keep the current revision and append the changes. A typical use case is changing a signed file without\n     * invalidating the signature. To know which objects are getting changed, you need to have some understanding of the\n     * PDF specification, and look at the saved file with an editor to verify that you are updating the correct objects.\n     * You should also inspect the page and document structures of the file with PDFDebugger.\n     * <p>\n     * If your modification includes annotations, make sure these link back to their page by calling\n     * {@link PDAnnotation#setPage(PDPage)}. Although this is optional,\n     * not doing it\n     * <a href=\"https://stackoverflow.com/questions/74836898/\">can cause trouble when PDFs get\n     * signed</a>. (PDFBox already does this for signature widget annotations)\n     * <p>\n     * Don't use the input file as target as this will produce a corrupted file.\n     *\n     * @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source\n     * file or that one will be harmed!\n     * @param objectsToWrite objects that <b>must</b> be part of the incremental saving.\n     * @throws IOException if the output could not be written\n     * @throws IllegalStateException if the document was not loaded from a file or a stream.",
  "org.apache.pdfbox.pdmodel.font.PDType0Font:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor for reading a Type0 font from a PDF file.\n     * \n     * @param fontDictionary The font dictionary according to the PDF specification.\n     * @throws IOException if the descendant font is missing.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The annotations dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:setDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination)" : "* This will set the destination to jump to.\n     *\n     * @param d The destination.\n     *\n     * @throws IllegalArgumentException if the destination is not a page dictionary object.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:insertBefore(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement,java.lang.Object)" : "* Inserts a structure element kid before a reference kid.\r\n     * \r\n     * @param newKid the structure element\r\n     * @param refKid the reference kid",
  "org.apache.pdfbox.pdmodel.font.encoding.StandardEncoding:getCOSObject()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setSmallCap(boolean)" : "* A convenience method that sets the flag bit.\n     *\n     * @param flag The flag value.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:prepareDocumentForEncryption(org.apache.pdfbox.pdmodel.PDDocument)" : "* Prepare the document for encryption.\n     *\n     * @param doc The document that will be encrypted.\n     *\n     * @throws IOException If there is an error while encrypting.",
  "org.apache.pdfbox.text.TextPosition:getX()" : "* This will get the page rotation adjusted x position of the character.\n     * This is adjusted based on page rotation so that the upper left is 0,0 which is\n     * unlike PDF coordinates, which start at the bottom left. See also\n     * <a href=\"https://stackoverflow.com/questions/57067372/\">this answer by Michael Klink</a> for\n     * further details and\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-4597\">PDFBOX-4597</a> for a sample\n     * file.\n     *\n     * @return The x coordinate of the character.",
  "org.apache.pdfbox.rendering.PageDrawer:getSubsampling(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.geom.AffineTransform)" : "* Calculates the subsampling frequency for a given PDImage based on the current transformation\r\n     * and its calculated transform. Extend this method if you want to use your own strategy.\r\n     *\r\n     * @param pdImage PDImage to be drawn\r\n     * @param at Transform that will be applied to the image when drawing\r\n     * @return The rounded-down ratio of image pixels to drawn pixels. Returned value will always be\r\n     * &gt;=1.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:updateParentOpenCount(int)" : "* The count parameter needs to be updated when you add, remove, open or close outline items.\n     *\n     * @param delta The amount to update by.",
  "org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor:getGraphicsContext()" : "* GraphicsOperatorProcessor uses a spezialized engine.\n     * \n     * @return PDFGraphicsStreamEngine to be used for processing",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:logIfStrongEncryptionMissing()" : null,
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setLeading(float)" : "* Sets the text leading.\n     *\n     * @param leading The leading in unscaled text units.\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     * \n     * @param dictionary the corresponding dictionary",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:scanFonts(java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitDestination:<init>()" : "* Default constructor.\n     *",
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:writeEOL()" : "* This will write an EOL to the stream.\n     *\n     * @throws IOException If there is an error writing to the stream",
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:getMappingName()" : "* Gets the mapping name of the field.\n     * \n     * The mapping name shall be used when exporting interactive form field\n     * data from the document.\n     * \n     * @return the mapping name of the field",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:closeAndStroke()" : "* Close and stroke the path.\n     * \n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:getCOSObject()" : "* Convert this standard java object to a COS object.\n     *\n     * @return The cos object that matches this Java object.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:<init>(org.w3c.dom.Element)" : "* This will create an FDF field from an XFDF XML document.\n     *\n     * @param fieldXML The XML document that contains the XFDF data.\n     * @throws IOException If there is an error reading from the dom.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)" : null,
  "org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setKids(java.util.List)" : "* This will set the list of kids.\n     *\n     * @param kids A list of FDFField objects.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:removeFields(java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setKeyUsageRequired(boolean)" : "* set true if KeyUsage shall be required as a constraint on signature.\n     *\n     * @param flag if true, the specified KeyUsage shall be enforced as a constraint.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:writeTo(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float)" : "* Write font name, font size and color from the /DA string to the given content stream.\n     *\n     * @param contents The content stream.\n     * @param zeroFontSize The calculated font size to use if the /DA string has a size 0\n     * (autosize). Otherwise the size from the /DA string is used.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:getAction()" : "* This will get the action that is associated with this field.\n     *\n     * @return The 'A' entry in the FDF field dictionary.",
  "org.apache.pdfbox.pdmodel.font.PDCIDFont:readWidths()" : null,
  "org.apache.pdfbox.contentstream.operator.text.ShowText:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* Sets the bounding box.\n     * \n     * @param bbox the bounding box",
  "org.apache.pdfbox.cos.COSArray:getUpdateState()" : "* Returns the current {@link COSUpdateState} of this {@link COSArray}.\n     *\n     * @return The current {@link COSUpdateState} of this {@link COSArray}.\n     * @see COSUpdateState",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:close()" : "* Close the content stream.  This must be called when you are done with this object.\n     *\n     * @throws IOException If the underlying stream has a problem being written to.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param dict The signature dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getURL()" : "* returns String of the URL\n     * \n     * @return string of the URL",
  "org.apache.pdfbox.cos.COSStream:accept(org.apache.pdfbox.cos.ICOSVisitor)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.pdmodel.common.PDObjectStream:getType()" : "* Get the type of this object, should always return \"ObjStm\".\n     *\n     * @return The type of this object.",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileUnix()" : "* This will get the name representing a Unix file.\n     *\n     * @return The file name.",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setStreamFilterName(org.apache.pdfbox.cos.COSName)" : "* Set the stream filter name.\n     * \n     * @param streamFilterName the stream filter name.",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:curveTo1(float,float,float,float)" : "* Append a cubic Bézier curve to the current path. The curve extends from the current point to\n     * the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points.\n     *\n     * @param x1 x coordinate of the point 1\n     * @param y1 y coordinate of the point 1\n     * @param x3 x coordinate of the point 3\n     * @param y3 y coordinate of the point 3\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:<init>(java.lang.String)" : "* Default constructor.\n     *\n     * @param dest The named destination.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:setLineDashPattern(float[],float)" : "* Set the line dash pattern.\n     *\n     * @param pattern The pattern array\n     * @param phase The phase of the pattern\n     * @throws IOException If the content stream could not be written.",
  "org.apache.pdfbox.cos.COSDictionary:getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)" : "* This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where\n     * multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will\n     * get an object from this dictionary. If the object is a reference then it will dereference it and get it from the\n     * document. If the object is COSNull then null will be returned.\n     *\n     * @param firstKey The first key to try.\n     * @param secondKey The second key to try.\n     *\n     * @return The object that matches the key.",
  "org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:setFileSpecification(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)" : "* This will set the file specification for this named page reference.\n     *\n     * @param fs The file specification to set.",
  "org.apache.pdfbox.contentstream.operator.graphics.CloseFillNonZeroAndStrokePath:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDGamma:<init>()" : "* Creates a new gamma.\n     * Defaults all values to 0, 0, 0.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:applyPadding(org.apache.pdfbox.pdmodel.common.PDRectangle,float)" : "* Apply padding to a box.\n     * \n     * @param box box\n     * @return the padded box.",
  "org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceCMYKColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setDuplex(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$DUPLEX)" : "* Set the Duplex preference.  See DUPLEX enumeration.\n     *\n     * @param value Set the Duplex preference.",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:getPath(int)" : null,
  "org.apache.pdfbox.cos.COSBoolean:getBoolean(boolean)" : "* This will get the boolean value.\n     *\n     * @param value Parameter telling which boolean value to get.\n     *\n     * @return The single boolean instance that matches the parameter.",
  "org.apache.pdfbox.pdmodel.interactive.TextAlign:getTextAlign()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getMatrix()" : "* Returns the <code>Matrix</code> entry for the appearance stream form XObject.\n     *\n     * @return Matrix for appearance stream form XObject.",
  "org.apache.pdfbox.pdmodel.font.encoding.SymbolEncoding:getEncodingName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:addCornerCurl(double,double,double,double,double,double,double,boolean)" : "* Creates a corner curl for polygons and ellipses.",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:fill()" : "* Fills the path using the nonzero winding number rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:isOnSameSideCC(java.awt.geom.Point2D)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:setPartialName(java.lang.String)" : "* This will set the partial name of the field.\n     * \n     * @param name The new name for the field.\n     * @throws IllegalArgumentException If the name contains a period character.",
  "org.apache.pdfbox.cos.COSArray:set(int,org.apache.pdfbox.cos.COSBase)" : "* This will set an object at a specific index.\n     *\n     * @param index zero based index into array.\n     * @param object The object to set.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:getLineWidth()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setSpaceBefore(float)" : "* Sets the amount of extra space preceding the before edge of the BLSE in\n     * the block-progression direction (SpaceBefore).\n     * \n     * @param spaceBefore the space before",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeHash2B(byte[],byte[],byte[])" : null,
  "org.apache.pdfbox.pdfparser.xref.NormalXReference:toString()" : "* Returns a string representation of this crossreference stream entry.\n     *\n     * @return A string representation of this crossreference stream entry.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:richContentsToString(org.w3c.dom.Node,boolean)" : null,
  "org.apache.pdfbox.pdmodel.font.PDFont:getAverageFontWidth()" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:remove()" : null,
  "org.apache.pdfbox.pdmodel.PDPage:getBleedBox()" : "* A rectangle, expressed in default user space units, defining the region to which the contents\n     * of the page should be clipped when output in a production environment. The default is the\n     * CropBox.\n     * \n     * @return The BleedBox attribute.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:endMarkedContent()" : "* End a marked content sequence.\n     *\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.shading.PDShading)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getURLType()" : "* A name indicating the usage of the URL entry. There are standard uses and there can be\n     * implementation-specific use for this URL. The following value specifies a valid standard\n     * usage:\n     * <ul>\n     * <li>Browser, The URL references content that should be displayed in a web browser to allow\n     * enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL\n     * bit is ignored for this usage.</li>\n     * <li>ASSP, The URL references a signature web service that can be used for server-based\n     * signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this\n     * implies that the credential used when signing must come from this server.</li>\n     * </ul>\n     *\n     * @return string of URL type",
  "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:setQ(int)" : "* This will set the quadding/justification of the text.  See QUADDING constants.\n     *\n     * @param q The new text justification.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient:getPermission()" : "* Returns the access permission granted to the recipient.\n     *\n     * @return The access permission object.",
  "org.apache.pdfbox.pdmodel.font.encoding.StandardEncoding:getEncodingName()" : null,
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)" : "* Draw an image at the x,y coordinates, with the given size.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     * @param width The width to draw the image.\n     * @param height The height to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.cos.COSName,java.lang.String,org.apache.pdfbox.pdmodel.common.COSObjectable)" : "* Adds the given resource if it does not already exist.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:transformedPoint(float,float)" : "* Transforms a point using the CTM.\n     * \n     * @param x the x-coordinate of the point to be transformed\n     * @param y the y-coordinate of the point to be transformed\n     * \n     * @return the transformed point",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:processStream(org.apache.pdfbox.contentstream.PDContentStream)" : "* Process a content stream.\n     *\n     * @param contentStream the content stream\n     * @throws IOException if there is an exception while processing the stream",
  "org.apache.pdfbox.cos.COSName:isEmpty()" : "* Returns true if the name is the empty string.\n     * @return true if the name is the empty string.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getEllipseCloudRadius()" : null,
  "org.apache.pdfbox.rendering.GroupGraphics:addRenderingHints(java.util.Map)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Patch:getFlag2Color()" : "* Get implicit color for flag = 2.\n     *\n     * @return color",
  "org.apache.pdfbox.pdfparser.COSParser:isString(char[])" : "* Checks if the given string can be found at the current offset.\n     * \n     * @param string the bytes of the string to look for\n     * @return true if the bytes are in place, false if not\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdfparser.xref.AbstractXReference:compareTo(org.apache.pdfbox.pdfparser.xref.XReferenceEntry)" : "* Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer\n     * as this object is less than, equal to, or greater than the specified object.\n     *\n     * @param xReferenceEntry the object to be compared.\n     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than\n     * the specified object.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setReadOnly(boolean)" : "* Set the readOnly flag.\n     *\n     * @param readOnly The new readOnly flag.",
  "org.apache.pdfbox.filter.Filter:findImageReader(java.lang.String,java.lang.String)" : "* Finds a suitable image reader for an image format.\n     *\n     * @param formatName The image format to search for.\n     * @param errorCause The probably cause if something goes wrong.\n     * @return The image reader for the format.\n     * @throws MissingImageReaderException if no image reader is found.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setQuadPoints(float[])" : "* This will set the set of quadpoints which encompass the areas of this annotation which will activate.\n     *\n     * @param quadPoints an array representing the set of area covered.",
  "org.apache.pdfbox.pdfparser.PDFXrefStreamParser$ObjectNumbers:hasNext()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:setDashStyle(org.apache.pdfbox.cos.COSArray)" : "* This will set the dash style used for drawing the border.\n     *\n     * @param dashArray the dash style to use",
  "org.apache.pdfbox.pdmodel.PDDocument:getCurrentAccessPermission()" : "* Returns the access permissions granted when the document was decrypted. If the document was not decrypted this\n     * method returns the access permission for a document owner (ie can do everything). The returned object is in read\n     * only mode so that permissions cannot be changed. Methods providing access to content should rely on this object\n     * to verify if the current user is allowed to proceed.\n     * \n     * @return the access permissions for the current user on the document.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:<init>(byte[],int[])" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDField:setRequired(boolean)" : "* sets the flag whether the field is to be required to have a value at the time it is exported\n     * by a submit-form action.\n     *\n     * @param required The new flag for required.",
  "org.apache.pdfbox.contentstream.operator.state.Concatenate:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:readshort(char,org.apache.pdfbox.io.RandomAccessRead)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getBytes()" : "* Get the XFA content as byte array.\n     * \n     * The XFA is either a stream containing the entire XFA resource or an array specifying individual packets that\n     * together make up the XFA resource.\n     * \n     * A packet is a pair of a string and stream. The string contains the name of the XML element and the stream\n     * contains the complete text of this XML element. Each packet represents a complete XML element, with the exception\n     * of the first and last packet, which specify begin and end tags for the xdp:xdp element. [IS0 32000-1:2008:\n     * 12.7.8]\n     * \n     * @return the XFA content\n     * @throws IOException if the XFA content could not be created",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setNormalCaption(java.lang.String)" : "* This will set the normal caption.\n     * \n     * @param caption the normal caption",
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getFontSetting()" : "* This will get the font setting of the graphics state.\n     *\n     * @return The font setting.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:getStructure()" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:getSymbol()" : "* This will retrieve the symbol that shall be associated with the caret.\n     * \n     * @return the symbol",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setStrokeAdjustment(boolean)" : "* set the value of the stroke adjustment.\n     *\n     * @param value The value of the stroke adjustment parameter.",
  "org.apache.pdfbox.pdmodel.fdf.FDFField:setSetFieldFlags(int)" : "* This will set the field flags that are associated with this field.\n     * The 'SetFf' entry in the FDF field dictionary.\n     *\n     * @param ff The new value for the \"set field flags\".",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:setP(int)" : "* Set the P value.\n     * \n     * @param p the value to be set as P",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setOpacity(float)" : "* Set the annotation opacity.\n     *\n     * @param opacity The new opacity value.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)" : "* set a marked content point.\n     *\n     * @param tag the tag to be added to the content stream\n     * @throws IOException If the content stream could not be written",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:<init>()" : "* Default constructor.\n     *",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:height(float)" : "* \n     * @param height signature image height\n     * @return Visible Signature Configuration Object",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isReasonRequired()" : "*\n    * @return true if the Reason is required",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getCOSObject()" : "* This will return the dictionary.\r\n     * \r\n     * @return the number format dictionary",
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildSubset(java.io.InputStream,java.lang.String,java.util.Map)" : "* Rebuild a font subset.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationHighlight:<init>(org.w3c.dom.Element)" : "* Constructor.\n     *\n     * @param element An XFDF element.\n     *\n     * @throws IOException If there is an error extracting information from the element.",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.ResourceCache)" : "* Creates a new soft mask.\r\n     *\r\n     * @param dictionary SMask\r\n     * @param resourceCache Resource cache, may be null.\r\n     * \r\n     * @return the newly created instance of PDSoftMask",
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:clear()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:setStateModel(java.lang.String)" : "* This will set the annotation state model. Allowed values are \"Marked\" and \"Review\"\n     * \n     * @param stateModel the annotation state model",
  "org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getBackdropColor()" : "* Returns the backdrop color.\r\n     * \r\n     * @return the backdrop color",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the BBox (bounding box) for this form.\n     * @param bbox The new BBox for this form.",
  "org.apache.pdfbox.pdmodel.fdf.FDFIconFit:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param f The icon fit dictionary.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setParent(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode)" : "* Sets the parent in the structure hierarchy (P).\n     * \n     * @param structureNode the parent in the structure hierarchy",
  "org.apache.pdfbox.text.PDFTextStripper:getCharactersByArticle()" : "* Character strings are grouped by articles. It is quite common that there will only be a single article. This\n     * returns a List that contains List objects, the inner lists will contain TextPosition objects.\n     *\n     * @return A double List of TextPositions for all text strings on the page.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:parseDictElement(org.w3c.dom.Element)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setHeightAuto()" : "* Sets the height of the element’s content rectangle in the\n     * block-progression direction (Height) to {@link #HEIGHT_AUTO}.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setStructParent(int)" : "* This will set the key for this annotation in the structural parent tree.\n     * \n     * @param structParent The new key for this annotation.",
  "org.apache.pdfbox.cos.COSInteger:<init>(long,boolean)" : "* constructor.\n     *\n     * @param val The integer value of this object.\n     * @param valid indicates if the value is valid.",
  "org.apache.pdfbox.pdmodel.font.PDType3Font:getWidth(int)" : null,
  "org.apache.pdfbox.pdmodel.graphics.shading.Type6ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6,org.apache.pdfbox.util.Matrix)" : "* Constructor.\n     *\n     * @param shading the shading resources\n     * @param matrix the pattern matrix concatenated with that of the parent content stream",
  "org.apache.pdfbox.pdmodel.font.PDFontFactory:isPfbFile(byte[])" : null,
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:newSecurityHandlerForFilter(java.lang.String)" : "* Returns a new security handler for the given Filter name, or null none is available.\n     * @param name the Filter name from the PDF encryption dictionary\n     * @return a new SecurityHandler instance, or null if none is available",
  "org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setD(org.apache.pdfbox.pdmodel.interactive.action.PDAction)" : "* This will set an action to be performed when the mouse button\n     * is pressed inside the annotation's active area.\n     * The name D stands for \"down\".\n     *\n     * @param d The action to be performed.",
  "org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroAndStrokePath:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getUnits()" : "* This will return the label for the units.\r\n     * \r\n     * @return the label for the units",
  "org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:setFile(java.lang.String)" : "* This will set the file name.\n     *\n     * @param fileName The name of the file.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:getTextLineMatrix()" : "* @return Returns the textLineMatrix.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getPlacement()" : "* Gets the positioning of the element with respect to the enclosing\n     * reference area and other content (Placement). The default value is\n     * {@link #PLACEMENT_INLINE}.\n     * \n     * @return the placement",
  "org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)" : "* Draw an image at the x,y coordinates, with the given size.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     * @param width The width to draw the image.\n     * @param height The height to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:isKnockout()" : "* Returns true if this group is a knockout. A knockout group blends with original backdrop, a non-knockout group\n     * blends with the current backdrop.\n     * \n     * @return true if this group is a knockout",
  "org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace:getName()" : null,
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:toRawImage(java.awt.image.WritableRaster)" : null,
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquiggly:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a An existing FDF Annotation.",
  "org.apache.pdfbox.multipdf.PDFMergerUtility:hasOnlyDocumentsOrParts(org.apache.pdfbox.cos.COSArray)" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:isSubDictionary()" : "* Returns true if this entry is an appearance subdictionary.\n     * \n     * @return true if this entry is an appearance subdictionary",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:getPreferredSignatureSize()" : "* Get the preferred size of the signature.\n     *\n     * @return the preferred size of the signature in bytes.",
  "org.apache.pdfbox.pdfparser.PDFObjectStreamParser:parseObject(long)" : "* Search for/parse the object with the given object number. The stream is closed after parsing the object with the\n     * given number.\n     * \n     * @param objectNumber the number of the object to b e parsed\n     * @return the parsed object or null if the object with the given number can't be found\n     * @throws IOException if there is an error while parsing the stream",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:<init>()" : null,
  "org.apache.pdfbox.text.TextPosition:getXDirAdj()" : "* This will get the text direction adjusted x position of the character.\n     * This is adjusted based on text direction so that the first character\n     * in that direction is in the upper left at 0,0.\n     * This method ignores the page rotation but takes the text rotation (see\n     * {@link #getDir() getDir()}) and adjusts the coordinates to awt. This is useful when doing\n     * text extraction, to compare the glyph positions when imagining these to be horizontal. See also\n     * <a href=\"https://stackoverflow.com/questions/57067372/\">this answer by Michael Klink</a> for\n     * further details and\n     * <a href=\"https://issues.apache.org/jira/browse/PDFBOX-4597\">PDFBOX-4597</a> for a sample\n     * file.\n     *\n     * @return The x coordinate of the text.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getDecodeForParameter(int)" : "* Get the decode for the input parameter.\n     *\n     * @param paramNum the function parameter number\n     * @return the decode parameter range or null if none is set",
  "org.apache.pdfbox.util.Hex:getLowNibble(byte)" : "* Get the low nibble of the given byte.\n     * \n     * @param b the given byte\n     * @return the low nibble",
  "org.apache.pdfbox.rendering.PageDrawer:hasTransparency(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)" : null,
  "org.apache.pdfbox.pdfwriter.compress.COSObjectPool:put(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)" : "* Update the key and object maps.\n     *\n     * @param key The key, that shall be added.\n     * @param object The object, that shall be added.\n     * @return The actual key, the object has been added for.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:updateParentOpenCountForAddedChild(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : null,
  "org.apache.pdfbox.util.Matrix:concatenate(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.util.Matrix)" : "* Produces a copy of the first matrix, with the second matrix concatenated.\n     *\n     * @param a The matrix to copy.\n     * @param b The matrix to concatenate.\n     * \n     * @return a copy of the first matrix with the second matrix concatenated",
  "org.apache.pdfbox.multipdf.Overlay$LayoutPage:<init>(org.apache.pdfbox.pdmodel.common.PDRectangle,org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.cos.COSDictionary,short)" : null,
  "org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setAlphaSourceFlag(boolean)" : "* This will set the alpha source flag (“alpha is shape”), that specifies whether the current\n     * soft mask and alpha constant shall be interpreted as shape values (true) or opacity values\n     * (false).\n     *\n     * @param alpha The alpha source flag.",
  "org.apache.pdfbox.pdmodel.font.encoding.Encoding:add(int,java.lang.String)" : "* This will add a character encoding. An already existing mapping is preserved when creating\n     * the reverse mapping. Should only be used during construction of the class.\n     * \n     * @see #overwrite(int, String)\n     * \n     * @param code character code\n     * @param name PostScript glyph name",
  "org.apache.pdfbox.pdmodel.PDStructureElementNameTreeNode:<init>()" : "* Constructor.",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromFileByExtension(java.io.File,org.apache.pdfbox.pdmodel.PDDocument)" : "* Create a PDImageXObject from an image file. The file format is determined by the file name\r\n     * suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is\r\n     * a convenience method that calls {@link JPEGFactory#createFromStream},\r\n     * {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with\r\n     * {@link LosslessFactory#createFromImage}. (The later can also be used to create a\r\n     * PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image\r\n     * directly from a PNG file without decoding it (when possible), which is faster. However the\r\n     * result size depends on the compression skill of the software that created the PNG file. If\r\n     * file size or bandwidth are important to you or to your clients, then create your PNG files\r\n     * with a tool that has implemented the\r\n     * <a href=\"https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/\">Zopfli\r\n     * algorithm</a>, or use the two-step process mentioned above.\r\n     *\r\n     * @param file the image file.\r\n     * @param doc the document that shall use this PDImageXObject.\r\n     * @return a PDImageXObject.\r\n     * @throws IOException if there is an error when reading the file or creating the\r\n     * PDImageXObject.\r\n     * @throws IllegalArgumentException if the image type is not supported.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:setCoords(org.apache.pdfbox.cos.COSArray)" : "* Sets the Coords entry for this shading.\n     *\n     * @param newCoords the coordinates array",
  "org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:clone()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setRolloverAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)" : "* This will set the rollover appearance when there is rollover appearance to be shown.\n     *\n     * @param ap The appearance stream to show.",
  "org.apache.pdfbox.pdmodel.font.FontMapperImpl:getPostScriptNames(java.lang.String)" : "* Gets alternative names, as seen in some PDFs, e.g. PDFBOX-142.",
  "org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)" : "* Draw an image at the x,y coordinates, with the default size of the image.\n     *\n     * @param image The image to draw.\n     * @param x The x-coordinate to draw the image.\n     * @param y The y-coordinate to draw the image.\n     *\n     * @throws IOException If there is an error writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnGaps(float[])" : "* Sets the desired space between adjacent columns in the inline-progression\n     * direction (ColumnGap), the first element specifying the space between the\n     * first and second columns, the second specifying the space between the\n     * second and third columns, and so on.\n     * \n     * @param columnGaps the column gaps",
  "org.apache.pdfbox.pdmodel.encryption.SecurityHandler:isAES()" : "* True if AES is used for encryption and decryption.\n     *\n     * @return true if AEs is used",
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isUserPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)" : "* Check if a plaintext password is the user password.\n     *\n     * @param password The plaintext password.\n     * @param user The u entry of the encryption dictionary.\n     * @param owner The o entry of the encryption dictionary.\n     * @param permissions The permissions set in the PDF.\n     * @param id The document id used for encryption.\n     * @param encRevision The revision of the encryption algorithm.\n     * @param keyLengthInBytes The length of the encryption key in bytes.\n     * @param encryptMetadata The encryption metadata.\n     *\n     * @return true If the plaintext password is the user password.\n     *\n     * @throws IOException If there is an error accessing data.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:getCOSObject()" : "* Convert this standard java object to a COS dictionary.\n     *\n     * @return The COS dictionary that matches this Java object.",
  "org.apache.pdfbox.pdmodel.PDDocument:getEncryption()" : "* This will get the encryption dictionary for this document. This will still return the parameters if the document\n     * was decrypted. As the encryption architecture in PDF documents is pluggable this returns an abstract class,\n     * but the only supported subclass at this time is a\n     * PDStandardEncryption object.\n     *\n     * @return The encryption dictionary(most likely a PDStandardEncryption object)",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getRotation()" : "* This will retrieve the rotation of the annotation widget. It must be a multiple of 90. Default is 0\n     * \n     * @return the rotation",
  "org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:getName()" : null,
  "org.apache.pdfbox.pdmodel.PDPage:setContents(java.util.List)" : "* This will set the contents of this page.\n     *\n     * @param contents Array of new contents of the page.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isCommitOnSelChange()" : "* Determines if CommitOnSelChange is set.\n     * \n     * @return true if value shall be committed as soon as a selection is made.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:getInteriorColor()" : "* This will retrieve the interior color of the drawn area.\n     *\n     * @return object representing the color.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,org.apache.pdfbox.pdmodel.font.encoding.Encoding,boolean)" : "* Creates a new TrueType font for embedding.",
  "org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:addTrueTypeCollection(java.io.File)" : "* Adds a TTC or OTC to the file cache. To reduce memory, the parsed font is not cached.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:generateRolloverAppearance()" : null,
  "org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontFile2(org.apache.pdfbox.pdmodel.common.PDStream)" : "* Set the true type font program.\n     *\n     * @param ttfStream The true type stream.",
  "org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(java.awt.Color)" : "* Set the stroking color using an AWT color. Conversion uses the default sRGB color space.\n     *\n     * @param color The color to set.\n     * @throws IOException If an IO error occurs while writing to the stream.",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setBeforeColour(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)" : "* Sets the colour for the before edge.\n     * \n     * @param colour the colour for the before edge",
  "org.apache.pdfbox.contentstream.operator.Operator:setImageData(byte[])" : "* This will set the image data, this is only used for the ID operator.\n     *\n     * @param imageDataArray New value of property imageData.",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setStdCryptFilterDictionary(org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary)" : "* Sets the standard crypt filter.\n     * \n     * @param cryptFilterDictionary the standard crypt filter to set",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:centerWindow()" : "* Get the center window preference.\n     *\n     * @return the center window preference.",
  "org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:setFringe(org.apache.pdfbox.pdmodel.common.PDRectangle)" : "* This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing\n     * occurs.\n     *\n     * @param fringe the fringe",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getModifiedDate()" : "* This will retrieve the date and time the annotation was modified.\n     * \n     * @return the modified date/time (often in date format, but can be an arbitrary string).",
  "org.apache.pdfbox.pdmodel.PDPageTree:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.PDDocument)" : "* Constructor for reading.\r\n     *\r\n     * @param root A page tree root.\r\n     * @param document The document which contains \"root\".",
  "org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:constructAppearances()" : null,
  "org.apache.pdfbox.filter.DCTFilter:fromYCCKtoCMYK(java.awt.image.Raster)" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getColorKeyMask()" : "* Returns the color key mask array associated with this image, or null if there is none.\r\n     * @return Mask Image XObject",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setScope(java.lang.String)" : "* Sets the scope (Scope). It shall reflect whether the header cell applies\n     * to the rest of the cells in the row that contains it, the column that\n     * contains it, or both the row and the column that contain it. The value\n     * shall be one of the following:\n     * <ul>\n     *   <li>{@link PDTableAttributeObject#SCOPE_ROW},</li>\n     *   <li>{@link PDTableAttributeObject#SCOPE_COLUMN}, or</li>\n     *   <li>{@link PDTableAttributeObject#SCOPE_BOTH}.</li>\n     * </ul>\n     * \n     * @param scope the scope",
  "org.apache.pdfbox.pdfparser.COSParser:retrieveTrailer()" : "* Read the trailer information and provide a COSDictionary containing the trailer information.\n     * \n     * @return a COSDictionary containing the trailer information\n     * @throws IOException if something went wrong",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getMetadata()" : "* Returns the metadata associated with this XObject, or null if there is none.\r\n     * @return the metadata associated with this object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:getRectDifferences()" : "* This will get the differences between the annotations \"outer\" rectangle defined by\n     * /Rect and the border.\n     * \n     * @return the differences. If the entry hasn't been set am empty array is returned.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:setVisualSignature(java.io.File)" : "* Reads the visual signature from the given file.\n     *\n     * @param file the file containing the visual signature\n     * @throws IOException when something went wrong during parsing",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setPrintArea(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY)" : "* Set the PrintArea preference.  See BOUNDARY enumeration.\n     *\n     * @param value Set the PrintArea preference.",
  "org.apache.pdfbox.multipdf.Splitter:createNewDocumentIfNecessary()" : "* Helper method for creating new documents at the appropriate pages.\n     *\n     * @throws IOException If there is an error creating the new document.",
  "org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:<init>()" : "* Creates a new PublicKeyProtectionPolicy with an empty recipients list.",
  "org.apache.pdfbox.pdmodel.graphics.color.PDLab:<init>(org.apache.pdfbox.cos.COSArray)" : "* Creates a new Lab color space from a PDF array.\n     * @param lab the color space array",
  "org.apache.pdfbox.pdfwriter.COSWriter:writeReference(org.apache.pdfbox.cos.COSBase)" : "* visitFromObjRef method comment.\n     *\n     * @param obj The object that is being visited.\n     *\n     * @throws IOException If there is an exception while visiting this object.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setCaption(boolean)" : "* This will set if the contents are shown as a caption to the line.\n     *\n     * @param cap Boolean value.",
  "org.apache.pdfbox.pdmodel.font.PDFont:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param fontDictionary Font dictionary.",
  "org.apache.pdfbox.pdmodel.PDDocument:getDocumentInformation()" : "* This will get the document info dictionary. If it doesn't exist, an empty document info\n     * dictionary is created in the document trailer.\n     * <p>\n     * In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other\n     * document level metadata, a metadata stream should be used instead, see\n     * {@link PDDocumentCatalog#getMetadata()}.\n     *\n     * @return The documents /Info dictionary, never null.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getPolygonDirection(java.awt.geom.Point2D$Double[])" : "* Returns the direction of the specified polygon.\n     * A positive value indicates that the polygon's direction is the same as the\n     * direction of positive angles in the coordinate system.\n     * A negative value indicates the opposite direction.\n     *\n     * The polygon must not intersect itself. A 2-point polygon is not acceptable.\n     * This is based on the \"shoelace formula\".",
  "org.apache.pdfbox.cos.COSArray:toFloatArray()" : "* This will take an COSArray of numbers and convert it to a float[].\n     *\n     * @return This COSArray as an array of float numbers.",
  "org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPoint:getName()" : null,
  "org.apache.pdfbox.pdmodel.common.function.type4.Operators:<init>()" : "* Creates a new Operators object with the default set of operators.",
  "org.apache.pdfbox.pdfparser.XrefParser:parseTrailer()" : "* This will parse the trailer from the stream and add it to the state.\n     *\n     * @return false on parsing error\n     * @throws IOException If an IO error occurs.",
  "org.apache.pdfbox.contentstream.PDFStreamEngine:showTransparencyGroup(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)" : "* Shows a transparency group from the content stream.\n     *\n     * @param form transparency group (form) XObject\n     * @throws IOException if the transparency group cannot be processed",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getPaddedRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle,float)" : "* Get a padded rectangle.\n     * \n     * <p>Creates a new rectangle with padding applied to each side.\n     * .\n     * @param rectangle the rectangle.\n     * @param padding the padding to apply.\n     * @return the padded rectangle.",
  "org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor using the given shading dictionary.\r\n     *\r\n     * @param shadingDictionary the dictionary for this shading",
  "org.apache.pdfbox.contentstream.operator.text.SetFontAndSize:getName()" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.cos.COSInputStream:<init>(java.io.InputStream,java.util.List)" : "* Constructor.\n     * \n     * @param input decoded stream\n     * @param decodeResults results of decoding",
  "org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getWidth()" : null,
  "org.apache.pdfbox.pdmodel.graphics.image.PDImage:getCOSObject()" : "* Convert this image to a COS object.\r\n     *\r\n     * @return The cos object that matches this image object.",
  "org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:<init>(org.apache.pdfbox.pdmodel.PDDocumentCatalog)" : "* Constructor.\n     *\n     * @param cat The document catalog that this dictionary is part of.",
  "org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)" : null,
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getByteRange()" : "* Read out the byterange from the file.\n     *\n     * @return an integer array with the byterange, or an empty array if there is none.",
  "org.apache.pdfbox.rendering.ImageType$2:toBufferedImageType()" : null,
  "org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isOwnerPassword234(byte[],byte[],byte[],int,byte[],int,int,boolean)" : null,
  "org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getGuidelineColor()" : "* Get the RGB color to be used for the guidelines.  This is guaranteed to\n     * not return null. The default color is [0,0,0].\n     *\n     *@return The guideline color.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor.\n     *\n     * @param a The action dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:<init>()" : "* Default constructor.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:getLineWidth()" : null,
  "org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:<init>(org.apache.pdfbox.pdmodel.common.PDPageLabelRange,int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDType0Font:getPositionVector(int)" : null,
  "org.apache.pdfbox.pdmodel.common.COSDictionaryMap:entrySet()" : "* {@inheritDoc}",
  "org.apache.pdfbox.pdmodel.PDPage:setRotation(int)" : "* This will set the rotation for this page.\n     * \n     * @param rotation The new rotation for this page in degrees.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory:<init>()" : "* Utility Class.",
  "org.apache.pdfbox.pdmodel.common.function.PDFunction:<init>(org.apache.pdfbox.cos.COSBase)" : "* Constructor.\n     *\n     * @param function The function stream.\n     *",
  "org.apache.pdfbox.pdmodel.font.PDType1CFont:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setCaptionHorizontalOffset(float)" : "* This will set the horizontal offset of the caption.\n     * \n     * @param offset the horizontal offset of the caption",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Creates a Text annotation from a COSDictionary, expected to be a correct object definition.\n     *\n     * @param field the PDF object to represent as a field.",
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:insertGeneratedAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,java.io.OutputStream)" : "* Generate and insert text content and clipping around it.",
  "org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:setName(java.lang.String)" : "* This will set the name of the viewport.\n    *  \n    * @param name the name of the viewport",
  "org.apache.pdfbox.pdmodel.encryption.PDEncryption:setUserKey(byte[])" : "* This will set the U entry in the standard encryption dictionary.\n     *\n     * @param u A 32 byte array.\n     *\n     * @throws IOException If there is an error setting the data.",
  "org.apache.pdfbox.pdfwriter.COSStandardOutputStream:writeLF()" : "* This will write a Linefeed to the stream.\n     *\n     * @throws IOException If there is an error writing to the underlying stream.",
  "org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float,boolean)" : "* Creates a new PDFPrintable with the given page scaling and with optional page borders shown.\n     * The image will be rasterized at the given DPI before being sent to the printer.\n     *\n     * @param document the document to print\n     * @param scaling page scaling policy\n     * @param showPageBorder true if page borders are to be printed\n     * @param dpi if positive non-zero then the image will be rasterized at the given DPI. If\n     * set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.\n     * @param center true if the content is to be centered on the page (otherwise top-left).",
  "org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:setFontName(org.apache.pdfbox.cos.COSName)" : "* Set the font name.\n     * \n     * @param fontName the font name to use for resource lookup",
  "org.apache.pdfbox.pdfparser.BaseParser:readExpectedChar(char)" : "* Read one char and throw an exception if it is not the expected value.\n     *\n     * @param ec the char value that is expected.\n     * @throws IOException if the read char is not the expected value or if an\n     * I/O error occurs.",
  "org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getOptionalContent()" : "* This will get the optional content group or optional content membership dictionary.\n     *\n     * @return The optional content group or optional content membership dictionary or null if there\n     * is none.",
  "org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:isSignaturesExist()" : "* Determines if SignaturesExist is set.\n     * \n     * @return true if the document contains at least one signature.",
  "org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode:getName()" : null,
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:setBottom(int)" : "* Set the bottom y-coordinate, a value of -1 implies that the current y-coordinate\n     * will be used.\n     * @param y The bottom y coordinate.",
  "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getLanguage()" : "* Returns the language (Lang).\n     * \n     * @return the language",
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isAttached(java.lang.String)" : "* Is the artifact attached to the given edge?\n     * \n     * @param edge the edge\n     * @return <code>true</code> if the artifact is attached to the given edge,\n     * <code>false</code> otherwise",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:insertSiblingBefore(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)" : "* Insert a single sibling before this node.\n     *\n     * @param newSibling The item to insert.\n     * @throws IllegalArgumentException if the given sibling node is part of a list \n     * (i.e. if it has a previous or a next sibling)",
  "org.apache.pdfbox.pdmodel.PDPatternContentStream:clipEvenOdd()" : "* Intersects the current clipping path with the current path, using the even-odd rule.\n     *\n     * @throws IOException If the content stream could not be written\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getAction()" : "* Get the action of this node.\n     *\n     * @return The action of this node.",
  "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:extractCmapTable()" : "* extract all useful \"cmap\" subtables.",
  "org.apache.pdfbox.text.PDFTextStripper:getEndPage()" : "* This will get the last page that will be extracted. This is inclusive, for example if a 5 page PDF an endPage\n     * value of 5 would extract the entire document, an end page of 2 would extract pages 1 and 2. This defaults to\n     * Integer.MAX_VALUE such that all pages of the pdf will be extracted.\n     *\n     * @return Value of property endPage.",
  "org.apache.pdfbox.pdmodel.font.CIDFontMapping:getTrueTypeFont()" : "* Returns a TrueType font when isCIDFont() is true, otherwise null.\n     * \n     * @return the mapped TrueType font or null",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setNoView(boolean)" : "* Set the noView flag.\n     * \n     * @param noView The new noView flag.",
  "org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:getAction()" : "* @return The Javascript Code.",
  "org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromStream(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)" : "* Creates a new JPEG Image XObject from an input stream containing JPEG data.\r\n     * \r\n     * The input stream data will be preserved and embedded in the PDF file without modification.\r\n     * @param document the document where the image will be created\r\n     * @param stream a stream of JPEG data\r\n     * @return a new Image XObject\r\n     * \r\n     * @throws IOException if the input stream cannot be read",
  "org.apache.pdfbox.cos.COSObject:getUpdateState()" : "* Returns the current {@link COSUpdateState} of this {@link COSObject}.\n     *\n     * @return The current {@link COSUpdateState} of this {@link COSObject}.\n     * @see COSUpdateState",
  "org.apache.pdfbox.pdmodel.PDFormContentStream:lineTo(float,float)" : "* Draw a line from the current position to the given coordinates.\n     *\n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @throws IOException If the content stream could not be written.\n     * @throws IllegalStateException If the method was called within a text block.",
  "org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isIssuerRequired()" : "*\n     * @return true if the Issuer is required",
  "org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:addToSubset(int)" : null,
  "org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getWP()" : "* This will get a JavaScript action to be performed\n     * before printing a document.\n     * The name WP stands for \"will print\".\n     *\n     * @return The WP entry of document catalog's additional actions dictionary.",
  "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:getOpen()" : "* This will retrieve the initial state of the annotation, open Or closed (default closed).\n     *\n     * @return The initial state, true = open false = closed.",
  "org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:<init>(org.apache.pdfbox.cos.COSDictionary)" : "* Constructor that is used for a preexisting dictionary.\n     *\n     * @param dic The underlying dictionary.",
  "org.apache.pdfbox.multipdf.Splitter:fixDestinations(org.apache.pdfbox.pdmodel.PDDocument)" : "* Replace the page destinations, if the source and destination pages are in the target\n     * document. This must be called after all pages (and its annotations) are processed.\n     *\n     * @param destinationDocument",
  "org.apache.pdfbox.pdmodel.font.PDType1Font:hasGlyph(int)" : null,
  "org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:getVerticalMetrics(int[])" : null,
  "org.apache.pdfbox.pdmodel.PDPageContentStream:restoreGraphicsState()" : "* Q operator. Restores the current graphics state.\n     * @throws IOException If an error occurs while writing to the stream.",
  "org.apache.pdfbox.contentstream.operator.state.Concatenate:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)" : null,
  "org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:insertGeneratedCombAppearance(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,org.apache.pdfbox.pdmodel.font.PDFont,float)" : "* Generate the appearance for comb fields.\n     * \n     * @param contents the content stream to write to\n     * @param appearanceStream the appearance stream used\n     * @param font the font to be used\n     * @param fontSize the font size to be used\n     * @throws IOException",
  "org.apache.pdfbox.filter.Predictor:calculateRowLength(int,int,int)" : null,
  "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setNumber(java.lang.String,float)" : "* Sets a float number.\n     * \n     * @param name the attribute name\n     * @param value the float number"
}