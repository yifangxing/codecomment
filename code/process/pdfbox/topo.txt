org.apache.pdfbox.cos.COSDocumentState:isAcceptingUpdates()
org.apache.pdfbox.cos.COSUpdateState:isAcceptingUpdates()
java.util.ArrayList:iterator()
java.util.LinkedHashMap:values()
org.apache.pdfbox.cos.COSUpdateState:update(boolean)
org.apache.pdfbox.cos.COSObject:isDereferenced()
org.apache.pdfbox.cos.COSArray:iterator()
java.util.Iterator:next()
java.util.Iterator:hasNext()
java.util.Collection:iterator()
org.apache.pdfbox.cos.COSDictionary:getValues()
org.apache.pdfbox.cos.COSUpdateState:update()
org.apache.pdfbox.cos.COSUpdateState:setOriginDocumentState(org.apache.pdfbox.cos.COSDocumentState,boolean)
java.lang.Object:<init>()
org.apache.logging.log4j.Logger:error(org.apache.logging.log4j.util.Supplier,java.lang.Throwable)
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.cos.COSUpdateState:dereferenceChild(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSObject:getUpdateState()
org.apache.pdfbox.cos.COSUpdateState:<init>(org.apache.pdfbox.cos.COSUpdateInfo)
org.apache.pdfbox.cos.COSBase:<init>()
org.apache.pdfbox.cos.COSObject:getObject()
java.util.LinkedHashMap:get(java.lang.Object)
org.apache.pdfbox.cos.COSUpdateState:setOriginDocumentState(org.apache.pdfbox.cos.COSDocumentState)
org.apache.pdfbox.cos.COSObject:<init>(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.ICOSParser)
org.apache.pdfbox.cos.COSDictionary:getUpdateState()
java.util.LinkedHashMap:remove(java.lang.Object)
org.apache.pdfbox.cos.COSNumber:<init>()
org.apache.pdfbox.cos.COSDictionary:getDictionaryObject(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSUpdateState:update(org.apache.pdfbox.cos.COSBase)
java.util.LinkedHashMap:put(java.lang.Object,java.lang.Object)
org.apache.pdfbox.cos.COSObject:<init>(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.cos.COSBase:getKey()
org.apache.pdfbox.cos.COSBase:isDirect()
org.apache.pdfbox.cos.COSDictionary:removeItem(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSInteger:<init>(long,boolean)
org.apache.pdfbox.cos.COSDictionary:getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
java.io.ByteArrayOutputStream:toByteArray()
java.io.ByteArrayOutputStream:write(int)
java.lang.Integer:intValue()
java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)
java.lang.Integer:valueOf(int)
java.lang.Character:valueOf(char)
java.lang.String:toCharArray()
java.io.ByteArrayOutputStream:<init>(int)
java.lang.String:length()
java.util.Map:containsKey(java.lang.Object)
org.apache.pdfbox.cos.COSDictionary:setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSInteger:get(long)
org.apache.pdfbox.cos.COSDictionary:getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.pdmodel.interactive.form.PDField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
java.io.IOException:<init>(java.lang.String)
java.util.ArrayList:get(int)
java.util.ArrayList:size()
java.lang.String:makeConcatWithConstants(java.lang.String)
java.lang.String:valueOf(java.lang.Object)
java.util.HashMap:get(java.lang.Object)
java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)
java.lang.String:getBytes(java.nio.charset.Charset)
org.apache.pdfbox.cos.PDFDocEncoding:getBytes(java.lang.String)
org.apache.pdfbox.cos.PDFDocEncoding:containsChar(char)
org.apache.pdfbox.cos.COSDictionary:setInt(org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.cos.COSDictionary:getInt(org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
java.lang.StringBuilder:toString()
java.lang.StringBuilder:append(char)
java.lang.StringBuilder:<init>(int)
java.util.List:add(java.lang.Object)
org.apache.pdfbox.filter.Filter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int,org.apache.pdfbox.filter.DecodeOptions)
org.apache.logging.log4j.Logger:warn(java.lang.String)
java.util.ArrayList:add(java.lang.Object)
java.util.ArrayList:contains(java.lang.Object)
java.util.List:iterator()
java.util.ArrayList:<init>()
java.util.HashSet:size()
java.util.HashSet:<init>(java.util.Collection)
java.util.List:size()
java.lang.IllegalArgumentException:<init>(java.lang.String)
java.util.List:isEmpty()
org.apache.pdfbox.cos.COSDictionary:getLong(org.apache.pdfbox.cos.COSName,long)
java.io.FilterInputStream:<init>(java.io.InputStream)
java.lang.IllegalStateException:<init>(java.lang.String)
org.apache.pdfbox.cos.COSStream:checkClosed()
java.lang.Class:getName()
org.apache.pdfbox.cos.COSArray:get(int)
org.apache.pdfbox.cos.COSArray:size()
org.apache.pdfbox.filter.FilterFactory:getFilter(org.apache.pdfbox.cos.COSName)
java.util.ArrayList:<init>(int)
org.apache.pdfbox.cos.COSStream:getFilters()
org.apache.pdfbox.cos.COSFloat:<init>(float)
org.apache.pdfbox.cos.COSString:<init>(java.lang.String,boolean)
org.apache.pdfbox.cos.COSArray:<init>(java.util.ArrayList,boolean)
java.util.stream.Stream:collect(java.util.stream.Collector)
java.util.stream.Collectors:toCollection(java.util.function.Supplier)
java.util.function.Supplier:get()
java.util.stream.Stream:map(java.util.function.Function)
java.util.function.Function:apply()
java.util.List:stream()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFlags(int)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFlags()
java.util.Map:put(java.lang.Object,java.lang.Object)
java.lang.ref.WeakReference:<init>(java.lang.Object)
java.lang.ref.Cleaner:register(java.lang.Object,java.lang.Runnable)
java.lang.Runnable:run(java.lang.String)
org.apache.pdfbox.cos.COSName:<init>(java.lang.String)
java.lang.ref.WeakReference:get()
java.util.Map:get(java.lang.Object)
java.util.LinkedHashMap:<init>()
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.cos.PDFDocEncoding:toString(byte[])
java.lang.String:<init>(byte[],int,int,java.nio.charset.Charset)
org.apache.pdfbox.filter.Filter:decode(java.io.InputStream,java.util.List,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.filter.DecodeOptions,java.util.List)
org.apache.pdfbox.cos.COSInputStream:<init>(java.io.InputStream,java.util.List)
java.util.Collections:emptyList()
org.apache.fontbox.cmap.CMapParser:parse(org.apache.pdfbox.io.RandomAccessRead)
org.apache.fontbox.cmap.CMapParser:<init>()
org.apache.pdfbox.cos.COSStream:createRawInputStream()
org.apache.pdfbox.cos.COSStream:getFilterList()
org.apache.fontbox.cmap.CMap:getName()
org.apache.fontbox.cmap.CMapParser:parsePredefined(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:setFloat(org.apache.pdfbox.cos.COSName,float)
org.apache.pdfbox.cos.COSString:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.common.PDRectangle:getCOSArray()
org.apache.pdfbox.cos.COSArray:<init>(java.util.List)
java.util.List:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
org.apache.fontbox.util.BoundingBox:getUpperRightY()
org.apache.fontbox.util.BoundingBox:getUpperRightX()
org.apache.fontbox.util.BoundingBox:getLowerLeftY()
org.apache.fontbox.util.BoundingBox:getLowerLeftX()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFlagBit(int,boolean)
org.apache.pdfbox.cos.COSName:getPDFName(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:<init>()
org.apache.pdfbox.pdmodel.interactive.form.PDButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.cos.COSString:getString()
org.apache.pdfbox.cos.COSName:getName()
org.apache.pdfbox.util.Vector:<init>(float,float)
java.util.HashMap:put(java.lang.Object,java.lang.Object)
java.lang.Float:valueOf(float)
org.apache.pdfbox.cos.COSArray:getObject(int)
org.apache.pdfbox.cos.COSDictionary:getCOSArray(org.apache.pdfbox.cos.COSName)
org.apache.logging.log4j.Logger:warn(java.lang.String,java.lang.Object,java.lang.Object)
org.apache.logging.log4j.Logger:warn(java.lang.String,java.lang.Object)
java.util.HashMap:<init>()
org.apache.pdfbox.cos.COSInputStream:create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.filter.DecodeOptions)
java.util.LinkedHashMap:containsKey(java.lang.Object)
java.lang.String:equals(java.lang.Object)
java.lang.Throwable:addSuppressed(java.lang.Throwable)
org.apache.pdfbox.pdmodel.font.CMapManager:parseCMap(org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.cos.COSStream:createView()
org.apache.pdfbox.pdmodel.font.CMapManager:getPredefinedCMap(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setStemV(float)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setCharacterSet(java.lang.String)
org.apache.fontbox.afm.FontMetrics:getCharacterSet()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setAverageWidth(float)
org.apache.fontbox.afm.FontMetrics:getAverageCharacterWidth()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setXHeight(float)
org.apache.fontbox.afm.FontMetrics:getXHeight()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setCapHeight(float)
org.apache.fontbox.afm.FontMetrics:getCapHeight()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setDescent(float)
org.apache.fontbox.afm.FontMetrics:getDescender()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setAscent(float)
org.apache.fontbox.afm.FontMetrics:getAscender()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setItalicAngle(float)
org.apache.fontbox.afm.FontMetrics:getItalicAngle()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontBoundingBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.common.PDRectangle:<init>(org.apache.fontbox.util.BoundingBox)
org.apache.fontbox.afm.FontMetrics:getFontBBox()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setSymbolic(boolean)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setNonSymbolic(boolean)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontFamily(java.lang.String)
org.apache.fontbox.afm.FontMetrics:getFamilyName()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontName(java.lang.String)
org.apache.fontbox.afm.FontMetrics:getFontName()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:<init>()
org.apache.fontbox.afm.FontMetrics:getEncodingScheme()
java.io.BufferedInputStream:close()
org.apache.fontbox.afm.AFMParser:parse(boolean)
org.apache.fontbox.afm.AFMParser:<init>(java.io.InputStream)
java.io.BufferedInputStream:<init>(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName:getName()
java.io.OutputStream:write(byte[])
org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDListBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
java.util.Set:remove(java.lang.Object)
org.apache.pdfbox.cos.COSDictionary:getCOSDictionary(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSDictionary:getNameAsString(org.apache.pdfbox.cos.COSName)
java.util.Set:add(java.lang.Object)
java.util.ArrayList:isEmpty()
org.apache.fontbox.ttf.TrueTypeFont:getName()
org.apache.pdfbox.pdmodel.font.CIDFontMapping:getTrueTypeFont()
org.apache.pdfbox.pdmodel.font.CIDFontMapping:isCIDFont()
org.apache.pdfbox.pdmodel.font.FontMappers:instance()
org.apache.fontbox.ttf.TTFParser:<init>(boolean)
org.apache.fontbox.ttf.OTFParser:<init>(boolean)
java.lang.String:<init>(byte[],java.nio.charset.Charset)
org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.cos.COSDictionary:getCOSStream(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.PDCIDFont:readVerticalDisplacements()
org.apache.pdfbox.pdmodel.font.PDCIDFont:readWidths()
org.apache.pdfbox.cos.COSStream:createInputStream(org.apache.pdfbox.filter.DecodeOptions)
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.cos.COSDictionary:containsKey(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSDictionary:getCOSDictionary(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSName:equals(java.lang.Object)
java.lang.String:contains(java.lang.CharSequence)
org.apache.pdfbox.cos.COSDictionary:getCOSName(org.apache.pdfbox.cos.COSName)
org.apache.fontbox.cmap.CMap:getOrdering()
org.apache.fontbox.cmap.CMap:hasUnicodeMappings()
org.apache.pdfbox.pdmodel.font.PDFont:readCMap(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:buildFontDescriptor(org.apache.fontbox.afm.FontMetrics)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:<init>(org.apache.pdfbox.cos.COSDictionary)
java.lang.IllegalArgumentException:<init>(java.lang.Throwable)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:loadMetrics(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
java.io.OutputStream:write(int)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeBytes(byte[])
org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:createButtonSubType(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:createChoiceSubType(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:findFieldType(org.apache.pdfbox.cos.COSDictionary,java.util.Set)
java.util.HashSet:<init>()
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.cos.COSDictionary:getString(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSArray:isEmpty()
java.lang.CharSequence:charAt(int)
java.lang.CharSequence:length()
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList:<init>(org.apache.pdfbox.cos.COSDictionary)
java.lang.Enum:valueOf(java.lang.Class,java.lang.String)
org.apache.pdfbox.util.Hex:getLowNibble(byte)
org.apache.pdfbox.util.Hex:getHighNibble(byte)
java.lang.Math:abs(float)
org.apache.fontbox.ttf.TrueTypeFont:getUnicodeCmapLookup(boolean)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:findFontOrSubstitute()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontName()
org.apache.logging.log4j.Logger:warn(org.apache.logging.log4j.util.Supplier,java.lang.Throwable)
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.pdmodel.font.PDCIDFontType2)
org.apache.fontbox.ttf.TrueTypeFont:close()
org.apache.fontbox.ttf.TTFParser:parse(org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getParser(org.apache.pdfbox.io.RandomAccessRead,boolean)
org.apache.pdfbox.pdmodel.common.PDStream:getCOSObject()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontFile()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontFile3()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontFile2()
org.apache.fontbox.ttf.OpenTypeFont:isSupportedOTF()
org.apache.pdfbox.pdmodel.font.PDCIDFont:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font)
java.awt.geom.AffineTransform:<init>(float,float,float,float,float,float)
java.lang.Number:floatValue()
java.util.List:get(int)
org.apache.pdfbox.util.Matrix:<init>(float,float,float,float,float,float)
org.apache.logging.log4j.Logger:debug(java.lang.String,java.lang.Throwable)
org.apache.fontbox.FontBoxFont:getFontMatrix()
org.apache.fontbox.cff.CFFCIDFont:getFontMatrix()
java.util.HashMap:<init>(int)
org.apache.pdfbox.pdmodel.font.PDType1Font:getBaseFont()
org.apache.pdfbox.cos.COSStream:createInputStream()
org.apache.pdfbox.pdmodel.font.PDFont:loadUnicodeCmap()
org.apache.pdfbox.pdmodel.font.PDFont:loadFontDescriptor()
org.apache.pdfbox.pdmodel.font.Standard14Fonts:getAFM(java.lang.String)
org.apache.pdfbox.util.NumberFormatUtil:formatPositiveNumber(long,int,boolean,byte[],int)
org.apache.pdfbox.util.NumberFormatUtil:getExponent(long)
java.lang.Math:abs(double)
java.lang.Float:isInfinite(float)
java.lang.Float:isNaN(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeLine()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:write(java.lang.String)
java.text.NumberFormat:format(long)
org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:createField(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:currentChar()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:hasMore()
java.util.ArrayList:<init>(java.util.Collection)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSDictionary:getItem(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:valueOf(java.lang.String)
java.lang.String:toUpperCase()
org.apache.pdfbox.cos.COSDictionary:setString(org.apache.pdfbox.cos.COSName,java.lang.String)
org.apache.pdfbox.util.Hex:writeHexByte(byte,java.io.OutputStream)
java.io.IOException:<init>(java.lang.String,java.lang.Throwable)
java.lang.String:replace(java.lang.CharSequence,java.lang.CharSequence)
java.lang.String:replaceFirst(java.lang.String,java.lang.String)
java.lang.String:matches(java.lang.String)
java.lang.String:substring(int)
java.lang.String:startsWith(java.lang.String)
org.apache.pdfbox.cos.COSFloat:coerce(float)
java.lang.Float:parseFloat(java.lang.String)
java.lang.String:charAt(int)
java.util.LinkedHashMap:keySet()
org.apache.pdfbox.pdmodel.font.PDType0Font:getBaseFont()
org.apache.pdfbox.cos.COSDictionary:getInt(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font,org.apache.fontbox.ttf.TrueTypeFont)
java.awt.geom.AffineTransform:scale(double,double)
org.apache.pdfbox.util.Matrix:createAffineTransform()
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getFontMatrix()
org.apache.fontbox.cff.CFFCIDFont:getName()
org.apache.fontbox.ttf.CFFTable:getFont()
org.apache.fontbox.ttf.OpenTypeFont:getCFF()
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.pdmodel.font.PDFontDescriptor)
org.apache.fontbox.cff.CFFParser:parse(org.apache.pdfbox.io.RandomAccessRead)
org.apache.fontbox.cff.CFFParser:<init>()
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:applyDifferences()
java.util.Map:putAll(java.util.Map)
org.apache.pdfbox.pdmodel.font.encoding.Encoding:getInstance(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.encoding.Encoding:<init>()
org.apache.fontbox.type1.Type1Font:getFontMatrix()
org.apache.pdfbox.pdmodel.font.PDType1Font:getName()
org.apache.logging.log4j.Logger:isWarnEnabled()
org.apache.pdfbox.pdmodel.font.PDType1Font:findBinaryOffsetAfterExec(byte[],int)
java.lang.Math:max(int,int)
org.apache.pdfbox.pdmodel.common.PDStream:createInputStream()
org.apache.pdfbox.pdmodel.font.PDFont:<init>(org.apache.pdfbox.cos.COSDictionary)
java.io.OutputStream:write(byte[],int,int)
java.text.NumberFormat:format(double)
org.apache.pdfbox.util.NumberFormatUtil:formatFloatFast(float,int,byte[])
java.text.NumberFormat:getMaximumFractionDigits()
java.lang.String:makeConcatWithConstants(float)
java.lang.Float:isFinite(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeOperator(java.lang.String)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeOperand(int)
org.apache.pdfbox.cos.COSArray:getUpdateState()
java.awt.color.ICC_Profile:getNumComponents()
org.apache.pdfbox.cos.COSDocument:getTrailer()
org.apache.pdfbox.pdmodel.PDDocument:getDocument()
java.io.FilterOutputStream:<init>(java.io.OutputStream)
java.lang.RuntimeException:<init>(java.lang.Throwable)
java.lang.reflect.Constructor:newInstance(java.lang.Object[])
java.lang.Class:getDeclaredConstructor(java.lang.Class[])
org.apache.logging.log4j.Logger:warn(java.lang.String,java.lang.Throwable)
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDField:getPartialName()
org.apache.pdfbox.pdmodel.interactive.form.PDField:fromDictionary(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField)
org.apache.pdfbox.cos.COSBase:getCOSObject()
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String,java.lang.String)
java.lang.String:substring(int,int)
java.text.SimpleDateFormat:format(java.util.Date)
java.util.Date:<init>()
java.text.SimpleDateFormat:setTimeZone(java.util.TimeZone)
java.util.SimpleTimeZone:<init>(int,java.lang.String)
org.apache.pdfbox.util.DateConverter:restrainTZoffset(long)
java.text.SimpleDateFormat:<init>(java.lang.String,java.util.Locale)
java.text.ParsePosition:setIndex(int)
java.lang.String:indexOf(int)
java.text.ParsePosition:getIndex()
java.util.GregorianCalendar:set(int,int)
java.util.GregorianCalendar:setLenient(boolean)
java.util.GregorianCalendar:<init>(java.util.TimeZone,java.util.Locale)
java.util.GregorianCalendar:add(int,int)
java.util.GregorianCalendar:get(int)
java.util.GregorianCalendar:setTimeZone(java.util.TimeZone)
java.lang.String:format(java.util.Locale,java.lang.String,java.lang.Object[])
java.util.TimeZone:setID(java.lang.String)
java.util.TimeZone:getRawOffset()
java.lang.Math:min(int,int)
java.lang.String:startsWith(java.lang.String,int)
java.util.ArrayList:set(int,java.lang.Object)
java.lang.Math:max(float,float)
java.lang.Math:min(float,float)
java.util.Arrays:copyOf(float[],int)
org.apache.pdfbox.cos.COSArray:toFloatArray()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:nextChar()
java.lang.AssertionError:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:peek()
org.apache.pdfbox.pdmodel.graphics.PDXObject:<init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSArray:toList()
java.util.Collections:singletonList(java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList:create(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSArray:getName(int,java.lang.String)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:valueOf(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getD()
org.apache.pdfbox.util.Hex:writeHexBytes(byte[],java.io.OutputStream)
java.io.ByteArrayOutputStream:writeBytes(byte[])
org.apache.pdfbox.pdmodel.font.PDType0Font:encodeGlyphId(int)
org.apache.fontbox.ttf.gsub.GsubWorker:applyTransforms(java.util.List)
java.lang.String:makeConcatWithConstants(java.lang.String,int,java.lang.String)
java.lang.Integer:toHexString(int)
java.lang.String:<init>(int[],int,int)
java.lang.Character:isValidCodePoint(int)
java.lang.String:valueOf(char)
java.lang.Character:isBmpCodePoint(int)
org.apache.fontbox.ttf.CmapLookup:getGlyphId(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getCmapLookup()
java.util.stream.IntStream:toArray()
java.lang.String:codePoints()
java.lang.String:split(java.lang.String)
java.lang.Long:valueOf(long)
org.apache.logging.log4j.Logger:debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)
org.apache.logging.log4j.Logger:debug(java.lang.String,org.apache.logging.log4j.util.Supplier[])
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.pdfparser.PDFStreamParser)
org.apache.pdfbox.pdfparser.PDFStreamParser:isSpaceOrReturn(int)
java.lang.Long:parseLong(java.lang.String)
org.apache.pdfbox.cos.COSFloat:<init>(java.lang.String)
org.apache.pdfbox.cos.COSNumber:isFloat(java.lang.String)
java.util.concurrent.ConcurrentMap:putIfAbsent(java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentMap:get(java.lang.Object)
org.apache.pdfbox.contentstream.operator.Operator:<init>(java.lang.String)
java.nio.charset.CharsetDecoder:onUnmappableCharacter(java.nio.charset.CodingErrorAction)
java.nio.charset.CharsetDecoder:onMalformedInput(java.nio.charset.CodingErrorAction)
java.nio.charset.Charset:newDecoder()
org.apache.pdfbox.cos.COSDictionary:setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)
org.apache.pdfbox.cos.COSDictionary:containsKey(java.lang.String)
java.lang.String:makeConcatWithConstants(java.lang.String,int)
java.util.Set:size()
org.apache.pdfbox.cos.COSDictionary:keySet()
java.util.LinkedHashMap:entrySet()
java.util.Map$Entry:getKey()
java.lang.Object:equals(java.lang.Object)
java.util.Map$Entry:getValue()
java.util.Set:iterator()
java.util.LinkedHashMap:containsValue(java.lang.Object)
org.apache.pdfbox.pdmodel.font.PDType0Font:getName()
org.apache.fontbox.cmap.CMap:getRegistry()
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String,int)
org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:getSupplement()
org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:getOrdering()
org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:getRegistry()
org.apache.pdfbox.pdmodel.font.PDCIDFont:getCIDSystemInfo()
org.apache.fontbox.cmap.CMap:hasCIDMappings()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font)
org.apache.pdfbox.cos.COSDictionary:getCOSName(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
java.util.List:contains(java.lang.Object)
java.util.Arrays:equals(byte[],byte[])
org.apache.logging.log4j.Logger:error(java.lang.String,java.lang.Throwable)
java.io.IOException:getMessage()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:getAdobeGlyphList()
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDType1Font:getFontMatrix()
org.apache.fontbox.FontBoxFont:getName()
org.apache.pdfbox.pdmodel.font.FontMapping:isFallback()
org.apache.pdfbox.pdmodel.font.FontMapping:getFont()
org.apache.fontbox.type1.Type1Font:createWithSegments(byte[],byte[])
java.util.Arrays:copyOfRange(byte[],int,int)
java.lang.String:makeConcatWithConstants(int,int,int)
org.apache.fontbox.type1.Type1Font:createWithPFB(byte[])
org.apache.pdfbox.pdmodel.font.PDType1Font:repairLength2(byte[],int,int)
org.apache.pdfbox.pdmodel.font.PDType1Font:repairLength1(byte[],int)
org.apache.pdfbox.pdmodel.common.PDStream:toByteArray()
org.apache.pdfbox.pdmodel.font.PDSimpleFont:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.fontbox.cff.CFFType1Font:getFontMatrix()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getBaseFont()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeOperand(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLineJoinStyle(int)
java.util.Arrays:copyOf(byte[],int)
org.apache.pdfbox.cos.COSArray:add(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSArray:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:create(org.apache.pdfbox.cos.COSBase)
java.lang.String:makeConcatWithConstants(int)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getNumberOfComponents()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSStream$1:<init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)
org.apache.pdfbox.cos.COSOutputStream:<init>(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.OutputStream,org.apache.pdfbox.io.RandomAccessStreamCache)
org.apache.pdfbox.cos.COSStream:getStreamCache()
org.apache.pdfbox.cos.COSStream:<init>(org.apache.pdfbox.io.RandomAccessStreamCache)
java.lang.String:codePointCount(int,int)
org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:allowCodeRange(int,int)
java.lang.String:codePointAt(int)
java.lang.String:isEmpty()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:newSecurityHandler(java.lang.Class,java.lang.Class[],java.lang.Object[])
org.apache.pdfbox.cos.COSDocumentState:setParsing(boolean)
org.apache.pdfbox.cos.COSDocument:getDocumentState()
org.apache.pdfbox.pdmodel.ResourceCacheFactory:createResourceCache()
org.apache.pdfbox.cos.COSDocument:getStreamCache(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.cos.COSDocumentState:<init>()
org.apache.logging.log4j.Logger:error(java.lang.String,java.lang.Object)
org.apache.pdfbox.pdmodel.interactive.form.PDField:getFullyQualifiedName()
java.util.Set:contains(java.lang.Object)
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getChildren()
org.apache.pdfbox.pdmodel.interactive.form.PDField:getCOSObject()
java.util.ArrayDeque:add(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:<init>(java.util.List,org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.util.DateConverter:formatTZoffset(long,java.lang.String)
java.util.Calendar:get(int)
org.apache.pdfbox.util.DateConverter:skipOptionals(java.lang.String,java.text.ParsePosition,java.lang.String)
java.text.SimpleDateFormat:parse(java.lang.String,java.text.ParsePosition)
java.text.SimpleDateFormat:setCalendar(java.util.Calendar)
org.apache.pdfbox.util.DateConverter:newGreg()
java.text.ParsePosition:<init>(int)
org.apache.pdfbox.util.DateConverter:adjustTimeZoneNicely(java.util.GregorianCalendar,java.util.TimeZone)
java.util.TimeZone:getID()
java.util.TimeZone:getTimeZone(java.lang.String)
java.lang.String:trim()
org.apache.pdfbox.util.DateConverter:updateZoneId(java.util.TimeZone)
java.util.SimpleTimeZone:setRawOffset(int)
org.apache.pdfbox.util.DateConverter:parseTimeField(java.lang.String,java.text.ParsePosition,int,int)
org.apache.pdfbox.util.DateConverter:skipString(java.lang.String,java.lang.String,java.text.ParsePosition)
java.util.GregorianCalendar:getTimeInMillis()
java.util.GregorianCalendar:set(int,int,int,int,int,int)
java.lang.StringBuilder:append(java.lang.CharSequence,int,int)
java.lang.StringBuilder:append(java.lang.Object)
java.lang.Character:isMirrored(int)
java.text.Bidi:getRunLimit(int)
java.text.Bidi:getRunStart(int)
java.lang.StringBuilder:<init>()
java.text.Bidi:reorderVisually(byte[],int,java.lang.Object[],int,int)
java.text.Bidi:getRunLevel(int)
java.text.Bidi:getRunCount()
java.text.Bidi:getBaseLevel()
java.text.Bidi:isMixed()
java.text.Bidi:<init>(java.lang.String,int)
java.io.IOException:getCause()
org.apache.pdfbox.contentstream.operator.Operator:getName()
java.awt.geom.Path2D:clone()
java.awt.geom.Point2D$Float:<init>(float,float)
org.apache.pdfbox.util.Matrix:<init>(float[])
float[]:clone()
java.lang.Object:clone()
org.apache.pdfbox.cos.COSArray:set(int,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.common.PDRectangle:<init>(float,float,float,float)
org.apache.logging.log4j.Logger:debug(java.lang.String)
org.apache.pdfbox.pdmodel.common.PDRectangle:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.PDPageTree:getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:scanToken()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:scanComment()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:scanWhitespace()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:scanNewLine()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:nextState()
java.lang.StringBuilder:setLength(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDResources:get(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:<init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.common.PDStream:getFilters()
org.apache.pdfbox.pdmodel.graphics.PDXObject:<init>(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.rendering.PageDrawer:isHiddenNotVisibilityExpression(org.apache.pdfbox.cos.COSArray)
java.lang.String:hashCode()
org.apache.pdfbox.cos.COSArray:getName(int)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:toDictionary(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getBaseState()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup$RenderState:valueOf(java.lang.String)
org.apache.pdfbox.contentstream.operator.OperatorProcessor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.pdfwriter.COSWriter:writeString(byte[],boolean,java.io.OutputStream)
java.lang.Character:charCount(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:willBeSubset()
java.util.Set:addAll(java.util.Collection)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:applyGSUBRules(org.apache.fontbox.ttf.gsub.GsubWorker,java.io.ByteArrayOutputStream,org.apache.pdfbox.pdmodel.font.PDType0Font,java.lang.String)
java.lang.String:isBlank()
org.apache.pdfbox.util.StringUtil:tokenizeOnSpace(java.lang.String)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:containsName(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:getFloat(org.apache.pdfbox.cos.COSName,float)
org.apache.pdfbox.cos.COSArray:toCOSNumberFloatList()
org.apache.pdfbox.pdfparser.PDFStreamParser:readOperator()
org.apache.pdfbox.pdfparser.PDFStreamParser:hasNoFollowingBinData()
org.apache.pdfbox.pdfparser.PDFStreamParser:hasNextSpaceOrReturn()
java.io.ByteArrayOutputStream:<init>()
java.lang.String:makeConcatWithConstants(java.lang.String,long)
java.lang.String:makeConcatWithConstants(java.lang.String,char)
java.lang.Character:toString(char)
org.apache.pdfbox.contentstream.operator.Operator:setImageData(byte[])
org.apache.pdfbox.contentstream.operator.Operator:getImageData()
org.apache.pdfbox.contentstream.operator.Operator:setImageParameters(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSNumber:get(java.lang.String)
java.lang.Character:isDigit(char)
org.apache.pdfbox.contentstream.operator.Operator:getOperator(java.lang.String)
org.apache.pdfbox.pdfparser.PDFStreamParser:close()
org.apache.pdfbox.pdfparser.BaseParser:<init>(org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.contentstream.PDContentStream:getContentsForStreamParsing()
org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)
org.apache.pdfbox.pdmodel.PDResources:createKey(org.apache.pdfbox.cos.COSName,java.lang.String)
org.apache.pdfbox.cos.COSDictionary:entrySet()
org.apache.pdfbox.cos.COSDictionary:getKeyForValue(java.lang.Object)
org.apache.pdfbox.cos.COSDictionary:containsValue(java.lang.Object)
org.apache.pdfbox.pdmodel.font.PDType0Font:fetchCMapUCS2()
org.apache.pdfbox.pdmodel.font.PDType0Font:readEncoding()
org.apache.pdfbox.pdmodel.font.PDFontFactory:createDescendantFont(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.PDType0Font)
org.apache.pdfbox.pdmodel.font.PDFontFactory:isCFFFile(byte[])
org.apache.pdfbox.pdmodel.font.PDFontFactory:isPfbFile(byte[])
org.apache.pdfbox.pdmodel.font.PDFontFactory:isType1File(byte[])
org.apache.pdfbox.pdmodel.font.PDFontFactory:isOpenTypeFile(byte[])
org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:<init>(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:<init>(org.apache.pdfbox.cos.COSName,java.lang.String)
org.apache.pdfbox.pdmodel.font.PDFontFactory:isTrueTypeCollectionFile(byte[])
org.apache.pdfbox.pdmodel.font.PDFontFactory:isTrueTypeFile(byte[])
org.apache.pdfbox.pdmodel.font.PDFontFactory:getFontHeader(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDFontFactory:getDescendantFont(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDType3Font:readEncoding()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getBaseFont()
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.pdmodel.font.PDTrueTypeFont)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getParser(org.apache.pdfbox.io.RandomAccessRead,boolean)
org.apache.pdfbox.pdmodel.font.PDType1Font:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDType1CFont:getFontMatrix()
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.pdmodel.font.PDType1CFont)
java.lang.Class:getSimpleName()
org.apache.fontbox.cff.CFFFont:getClass()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getName()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:curveTo(float,float,float,float,float,float)
java.lang.Math:max(double,double)
java.lang.Math:min(double,double)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:moveTo(float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineJoinStyle(int)
org.apache.pdfbox.cos.COSStream$2:<init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)
java.util.Collections:unmodifiableMap(java.util.Map)
org.apache.pdfbox.filter.DecodeResult:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSString:getBytes()
java.awt.image.ColorConvertOp:<init>(java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.common.PDRange:<init>(org.apache.pdfbox.cos.COSArray,int)
org.apache.pdfbox.pdmodel.common.PDRange:<init>()
java.awt.color.ICC_Profile:getInstance(byte[])
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:intToBigEndian(int,byte[],int)
java.awt.color.ICC_Profile:getData()
java.awt.color.ICC_Profile:getProfileClass()
java.awt.color.ICC_Profile:getData(int)
java.lang.Exception:getLocalizedMessage()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getAlternateColorSpace()
org.apache.pdfbox.cos.COSDictionary:setName(org.apache.pdfbox.cos.COSName,java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getVersion()
org.apache.pdfbox.pdmodel.PDDocument:getDocumentCatalog()
org.apache.pdfbox.cos.COSDocument:getVersion()
java.io.InputStream:close()
java.io.OutputStream:close()
java.io.InputStream:transferTo(java.io.OutputStream)
org.apache.pdfbox.cos.COSStream:createOutputStream(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSDocument:createCOSStream()
org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:allowDestinationRange(java.lang.String,java.lang.String)
java.io.BufferedWriter:write(int)
java.io.BufferedWriter:write(java.lang.String)
java.lang.Math:round(float)
org.apache.fontbox.ttf.HeaderTable:getUnitsPerEm()
org.apache.fontbox.ttf.TrueTypeFont:getHeader()
org.apache.fontbox.ttf.VerticalHeaderTable:getAdvanceHeightMax()
org.apache.fontbox.ttf.VerticalHeaderTable:getAscender()
org.apache.fontbox.ttf.TrueTypeFont:getVerticalHeader()
org.apache.pdfbox.pdmodel.common.PDRectangle:getLowerLeftX()
org.apache.pdfbox.pdmodel.common.PDRectangle:getUpperRightX()
org.apache.pdfbox.cos.COSString:<init>(byte[],boolean)
org.apache.pdfbox.pdmodel.encryption.RC4Cipher:swap(int[],int,int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:newSecurityHandlerForFilter(java.lang.String)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getFilter()
org.apache.pdfbox.cos.COSDocument:isEncrypted()
java.util.HashMap:computeIfAbsent(java.lang.Object,java.util.function.Function)
java.util.function.Function:apply(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdmodel.PDDocument:<init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.pdmodel.encryption.AccessPermission)
org.apache.pdfbox.cos.COSDocument:setDecrypted()
org.apache.pdfbox.cos.COSDocument:<init>(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction,org.apache.pdfbox.cos.ICOSParser)
org.apache.pdfbox.pdfparser.COSParser:setEOFLookupRange(int)
java.lang.Integer:parseInt(java.lang.String)
java.lang.System:getProperty(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:enqueueKids(org.apache.pdfbox.pdmodel.interactive.form.PDField)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getFields()
java.util.Collections:newSetFromMap(java.util.Map)
java.util.IdentityHashMap:<init>()
java.util.ArrayDeque:<init>()
org.apache.pdfbox.util.DateConverter:toString(java.util.Calendar)
org.apache.pdfbox.util.DateConverter:parseSimpleDate(java.lang.String,java.lang.String[],java.text.ParsePosition)
org.apache.pdfbox.util.DateConverter:parseTZoffset(java.lang.String,java.util.GregorianCalendar,java.text.ParsePosition)
org.apache.pdfbox.util.DateConverter:parseBigEndianDate(java.lang.String,java.text.ParsePosition)
org.apache.pdfbox.cos.COSBoolean:getBoolean(boolean)
java.io.Writer:write(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:getParagraphStart()
java.util.regex.Matcher:matches()
java.util.regex.Pattern:matcher(java.lang.CharSequence)
java.util.regex.Pattern:compile(java.lang.String)
org.apache.pdfbox.util.Matrix:getTranslateX()
org.apache.pdfbox.util.Matrix:getTranslateY()
java.lang.Float:compare(float,float)
org.apache.pdfbox.util.Matrix:getScaleX()
org.apache.pdfbox.util.Matrix:getShearX()
org.apache.pdfbox.util.Matrix:getShearY()
org.apache.pdfbox.util.Matrix:getScaleY()
org.apache.pdfbox.text.PDFTextStripper:handleDirection(java.lang.String)
java.lang.StringBuilder:reverse()
java.lang.StringBuilder:<init>(java.lang.String)
java.text.Normalizer:normalize(java.lang.CharSequence,java.text.Normalizer$Form)
java.lang.StringBuilder:append(java.lang.String)
org.apache.pdfbox.contentstream.PDFStreamEngine:unsupportedOperator(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.PDFStreamEngine:operatorException(org.apache.pdfbox.contentstream.operator.Operator,java.util.List,java.io.IOException)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:intersectClippingPath(java.awt.geom.Path2D,boolean)
java.awt.geom.Path2D$Double:<init>(java.awt.Shape)
java.awt.geom.GeneralPath:closePath()
java.awt.geom.GeneralPath:lineTo(double,double)
java.awt.geom.GeneralPath:moveTo(double,double)
java.awt.geom.Point2D$Float:getY()
java.awt.geom.Point2D$Float:getX()
java.awt.geom.GeneralPath:<init>()
org.apache.pdfbox.util.Matrix:transformPoint(float,float)
org.apache.pdfbox.pdmodel.common.PDRectangle:getUpperRightY()
org.apache.pdfbox.pdmodel.common.PDRectangle:getLowerLeftY()
java.util.ArrayDeque:peek()
org.apache.pdfbox.util.Matrix:clone()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:clone()
org.apache.pdfbox.pdmodel.PDResources:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)
java.awt.geom.GeneralPath:lineTo(float,float)
java.awt.geom.GeneralPath:moveTo(float,float)
org.apache.pdfbox.pdmodel.common.PDRectangle:setUpperRightY(float)
org.apache.pdfbox.pdmodel.common.PDRectangle:setUpperRightX(float)
org.apache.pdfbox.pdmodel.common.PDRectangle:setLowerLeftY(float)
org.apache.pdfbox.pdmodel.common.PDRectangle:setLowerLeftX(float)
org.apache.pdfbox.pdmodel.common.PDRectangle:<init>()
org.apache.pdfbox.pdmodel.PDPage:getMediaBox()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:tokenize()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:<init>(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)
java.util.Stack:push(java.lang.Object)
java.util.Stack:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler:<init>()
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:<init>(org.apache.pdfbox.cos.COSDictionary)
java.awt.Graphics2D:addRenderingHints(java.util.Map)
org.apache.pdfbox.pdmodel.PDResources:hasColorSpace(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.PDXObject:getCOSObject()
org.apache.pdfbox.pdmodel.graphics.PDPostScriptXObject:<init>(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup:<init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.PDResources:getResourceCache()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:<init>(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.PDResources)
java.util.Collections:emptySet()
java.util.stream.Stream:noneMatch(java.util.function.Predicate)
java.util.stream.Stream:anyMatch(java.util.function.Predicate)
java.util.stream.Stream:allMatch(java.util.function.Predicate)
java.util.function.Predicate:test()
java.util.ArrayList:stream()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:getVisibilityPolicy()
java.util.List:forEach(java.util.function.Consumer)
java.util.function.Consumer:accept(org.apache.pdfbox.rendering.PageDrawer,java.util.List)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:getOCGs()
org.apache.pdfbox.rendering.PageDrawer:isHiddenVisibilityExpression(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:isGroupEnabled(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getOCProperties()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup$RenderState:valueOf(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.contentstream.operator.color.SetColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.pdfwriter.COSWriter:writeString(byte[],java.io.OutputStream)
org.apache.pdfbox.pdmodel.font.PDFont:encode(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType0Font:addGlyphsToSubset(java.util.Set)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:encodeForGsub(org.apache.fontbox.ttf.gsub.GsubWorker,java.util.Set,org.apache.pdfbox.pdmodel.font.PDType0Font,java.lang.String)
java.util.ArrayDeque:isEmpty()
org.apache.pdfbox.pdmodel.font.PDFont:isStandard14()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getMissingWidth()
org.apache.pdfbox.pdmodel.font.PDFont:getFontDescriptor()
org.apache.pdfbox.pdmodel.font.PDFont:getWidths()
java.lang.Float:floatValue()
org.apache.pdfbox.pdfparser.PDFStreamParser:parseNextToken()
org.apache.pdfbox.pdfparser.PDFStreamParser:<init>(org.apache.pdfbox.contentstream.PDContentStream)
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.cos.COSName,java.lang.String,org.apache.pdfbox.pdmodel.common.COSObjectable)
java.math.BigDecimal:toPlainString()
java.math.BigDecimal:stripTrailingZeros()
java.math.BigDecimal:<init>(java.lang.String)
java.lang.String:valueOf(float)
java.lang.Iterable:iterator()
org.apache.pdfbox.pdmodel.font.PDType0Font:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDFontFactory:fixType0Subtype(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:getSubtype()
org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:isCIDSubtype(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.PDFontFactory:getFontTypeFromFont(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.PDFontFactory:getFontDescriptor(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDType3Font:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDMMType1Font:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDType1CFont:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:curveTo(float,float,float,float,float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:updateBBox(double,double)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:moveTo(float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:beginOutput(double,double)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:getCOSObject()
org.apache.pdfbox.cos.COSStream:createRawOutputStream()
org.apache.pdfbox.cos.UnmodifiableCOSDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.DecodeResult:createDefault()
java.awt.image.WritableRaster:getPixel(int,int,int[])
java.awt.image.BufferedImage:getRaster()
java.awt.image.WritableRaster:setPixel(int,int,int[])
java.io.IOException:<init>(java.lang.Throwable)
java.awt.image.Raster:createBandedRaster(int,int,int,int,java.awt.Point)
java.awt.Point:<init>(int,int)
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getHival()
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:readLookupData()
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:<init>()
java.awt.image.ComponentColorModel:<init>(java.awt.color.ColorSpace,boolean,boolean,int,int)
java.awt.color.ICC_ColorSpace:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDColor:<init>(float[],org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.common.PDRange:getMin()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getRangeForComponent(int)
java.awt.color.ICC_ColorSpace:<init>(java.awt.color.ICC_Profile)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:ensureDisplayProfile(java.awt.color.ICC_Profile)
java.awt.color.ICC_ColorSpace:getProfile()
java.awt.color.ColorSpace:getInstance(int)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:is_sRGB(java.awt.color.ICC_Profile)
java.awt.color.ICC_Profile:getInstance(java.io.InputStream)
java.io.IOException:getLocalizedMessage()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:fallbackToAlternateColorSpace(java.lang.Exception)
org.apache.pdfbox.cos.COSDocument:setVersion(float)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setVersion(java.lang.String)
java.lang.Float:toString(float)
org.apache.logging.log4j.Logger:error(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocument:getVersion()
org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSBase)
java.io.BufferedWriter:flush()
org.apache.pdfbox.util.Hex:getCharsUTF16BE(java.lang.String)
java.io.BufferedWriter:write(char[])
org.apache.pdfbox.util.Hex:getChars(short)
java.lang.Integer:shortValue()
java.lang.Math:ceil(double)
org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:allowCIDToUnicodeRange(java.util.Map$Entry,java.util.Map$Entry)
java.util.TreeMap:entrySet()
org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:writeLine(java.io.BufferedWriter,java.lang.String)
java.io.BufferedWriter:<init>(java.io.Writer)
java.io.OutputStreamWriter:<init>(java.io.OutputStream,java.nio.charset.Charset)
java.util.TreeMap:put(java.lang.Object,java.lang.Object)
java.util.TreeMap:<init>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:getVerticalMetrics(int[])
org.apache.fontbox.ttf.VerticalMetricsTable:getTopSideBearing(int)
org.apache.fontbox.ttf.GlyphData:getYMaximum()
org.apache.fontbox.ttf.HorizontalMetricsTable:getAdvanceWidth(int)
org.apache.fontbox.ttf.VerticalMetricsTable:getAdvanceHeight(int)
org.apache.fontbox.ttf.GlyphTable:getGlyph(int)
org.apache.fontbox.ttf.TrueTypeFont:getHorizontalMetrics()
org.apache.fontbox.ttf.TrueTypeFont:getVerticalMetrics()
org.apache.fontbox.ttf.TrueTypeFont:getGlyph()
org.apache.fontbox.ttf.TrueTypeFont:getNumberOfGlyphs()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildVerticalHeader(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:getWidths(int[])
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getFsType()
org.apache.fontbox.ttf.TrueTypeFont:getOS2Windows()
org.apache.pdfbox.pdmodel.common.PDRectangle:getWidth()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontBoundingBox()
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getTypoDescender()
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getTypoAscender()
java.lang.Math:round(double)
java.awt.geom.Rectangle2D:getMaxY()
java.awt.geom.GeneralPath:getBounds2D()
org.apache.fontbox.ttf.TrueTypeFont:getPath(java.lang.String)
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getHeight()
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getCapHeight()
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getVersion()
org.apache.fontbox.ttf.HorizontalHeaderTable:getDescender()
org.apache.fontbox.ttf.HorizontalHeaderTable:getAscender()
org.apache.fontbox.ttf.HeaderTable:getYMax()
org.apache.fontbox.ttf.HeaderTable:getXMax()
org.apache.fontbox.ttf.HeaderTable:getYMin()
org.apache.fontbox.ttf.HeaderTable:getXMin()
org.apache.fontbox.ttf.PostScriptTable:getItalicAngle()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontWeight(float)
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getWeightClass()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setScript(boolean)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setSerif(boolean)
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getFamilyClass()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setItalic(boolean)
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getFsSelection()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFixedPitch(boolean)
org.apache.fontbox.ttf.HorizontalHeaderTable:getNumberOfHMetrics()
org.apache.fontbox.ttf.PostScriptTable:getIsFixedPitch()
org.apache.fontbox.ttf.TrueTypeFont:getHorizontalHeader()
org.apache.fontbox.ttf.TrueTypeFont:getPostScript()
org.apache.pdfbox.cos.COSString:<init>(byte[])
java.util.stream.Collectors:toList()
org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification:<init>()
org.apache.pdfbox.cos.COSObjectKey:computeInternalHash(long,int)
org.apache.pdfbox.pdmodel.encryption.RC4Cipher:write(byte,java.io.OutputStream)
java.security.SecureRandom:<init>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSDocument:getEncryptionDictionary()
org.apache.pdfbox.pdmodel.PDDocument:isEncrypted()
java.util.Hashtable:put(java.lang.Object,java.lang.Object)
org.apache.pdfbox.cos.COSDocument:getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)
java.util.Map:keySet()
org.apache.pdfbox.cos.COSDocument:getXrefTable()
java.util.HashSet:addAll(java.util.Collection)
java.util.Arrays:asList(java.lang.Object[])
org.apache.pdfbox.pdmodel.PDDocument:setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryption)
org.apache.pdfbox.pdfparser.PDFParser:createDocument()
org.apache.pdfbox.pdfparser.PDFParser:initialParse()
org.apache.pdfbox.pdfparser.COSParser:init(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
java.io.EOFException:<init>(java.lang.String)
java.io.InputStream:read()
org.apache.pdfbox.util.Matrix:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.util.Matrix:<init>()
java.util.Objects:nonNull(java.lang.Object)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:getCOSObject()
org.apache.pdfbox.cos.COSDictionary:setFloat(java.lang.String,float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:getCOSObject()
org.apache.pdfbox.cos.COSDictionary:setName(java.lang.String,java.lang.String)
java.lang.String:format(java.lang.String,java.lang.Object[])
org.w3c.dom.Node:getNodeName()
org.w3c.dom.Node:getNodeValue()
org.w3c.dom.NamedNodeMap:item(int)
org.w3c.dom.NamedNodeMap:getLength()
org.w3c.dom.Node:getAttributes()
org.w3c.dom.Text:getData()
org.w3c.dom.CDATASection:getData()
org.w3c.dom.NodeList:item(int)
org.w3c.dom.NodeList:getLength()
org.w3c.dom.Node:getChildNodes()
org.apache.pdfbox.cos.COSDictionary:setDate(org.apache.pdfbox.cos.COSName,java.util.Calendar)
org.apache.pdfbox.util.DateConverter:parseDate(java.lang.String,java.text.ParsePosition)
org.apache.pdfbox.cos.COSDictionary:setFlag(org.apache.pdfbox.cos.COSName,int,boolean)
org.apache.pdfbox.cos.COSArray:of(float[])
java.awt.Color:getRGBColorComponents(float[])
org.apache.pdfbox.util.Hex:getHexValue(char)
org.apache.pdfbox.cos.COSDictionary:setBoolean(org.apache.pdfbox.cos.COSName,boolean)
java.lang.Boolean:parseBoolean(java.lang.String)
org.apache.logging.log4j.Logger:debug(java.lang.String,java.lang.Object,java.lang.Object)
org.w3c.dom.Element:getTagName()
org.w3c.dom.Element:getChildNodes()
org.apache.logging.log4j.Logger:debug(java.lang.String,java.lang.Object)
org.w3c.dom.Element:getAttribute(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:getParagraphEnd()
org.apache.pdfbox.text.PDFTextStripper:writeParagraphStart()
org.apache.pdfbox.text.PDFTextStripper:matchPattern(java.lang.String,java.util.List)
org.apache.pdfbox.text.PDFTextStripper:getListItemPatterns()
org.apache.pdfbox.text.TextPosition:getUnicode()
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:getTextPosition()
org.apache.pdfbox.text.TextPosition:getWidthRot(float)
org.apache.pdfbox.text.TextPosition:getXRot(float)
org.apache.pdfbox.text.TextPosition:getDir()
org.apache.pdfbox.text.TextPosition:getYLowerLeftRot(float)
java.lang.Character:getDirectionality(int)
org.apache.pdfbox.text.PDFTextStripper$WordWithTextPositions:<init>(java.lang.String,java.util.List)
org.apache.pdfbox.text.PDFTextStripper:normalizeWord(java.lang.String)
java.util.Comparator:compare(java.lang.Object,java.lang.Object)
java.util.ArrayList:clear()
org.apache.pdfbox.contentstream.PDFStreamEngine:processOperator(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getPaintType()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:intersectClippingPath(java.awt.geom.GeneralPath)
org.apache.pdfbox.pdmodel.common.PDRectangle:transform(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getCurrentTransformationMatrix()
org.apache.pdfbox.contentstream.PDFStreamEngine:getGraphicsState()
org.apache.pdfbox.util.Matrix:checkFloatValues(float[])
org.apache.pdfbox.util.Matrix:multiplyArrays(float[],float[])
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:clone()
java.util.ArrayDeque:<init>(int)
org.apache.pdfbox.pdmodel.PDResources:<init>()
org.apache.pdfbox.pdmodel.PDPage:getResources()
org.apache.pdfbox.pdmodel.common.PDRectangle:toGeneralPath()
org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:<init>()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:getInitialColor()
org.apache.pdfbox.pdmodel.PDPage:clipToMediaBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:getInstructionSequence()
org.apache.pdfbox.pdmodel.common.function.type4.Parser:parse(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:<init>()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.rendering.PageDrawer:setRenderingHints()
java.math.BigDecimal:intValue()
java.math.BigDecimal:setScale(int,java.math.RoundingMode)
java.math.BigDecimal:valueOf(double)
java.lang.Math:sqrt(double)
java.lang.Math:pow(double,double)
java.awt.geom.AffineTransform:getTranslateY()
java.awt.geom.AffineTransform:getTranslateX()
java.awt.geom.AffineTransform:getScaleY()
java.awt.geom.AffineTransform:getShearX()
java.awt.geom.AffineTransform:getShearY()
java.awt.geom.AffineTransform:getScaleX()
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDResources:isAllowedCache(org.apache.pdfbox.pdmodel.graphics.PDXObject)
org.apache.pdfbox.pdmodel.graphics.PDXObject:createXObject(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.PDResources:getIndirect(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDResources:getNames(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:<init>(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.rendering.PageDrawer:isHiddenOCMD(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary)
org.apache.pdfbox.rendering.PDFRenderer:isGroupEnabled(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup)
org.apache.pdfbox.rendering.PageDrawer:getRenderer()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:getRenderState(org.apache.pdfbox.rendering.RenderDestination)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getCOSObject()
org.apache.pdfbox.cos.COSDictionary:getFlag(org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.pdmodel.PDPageTree:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:showTextInternal(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDFont:getWidth(int)
java.io.ByteArrayInputStream:available()
java.io.ByteArrayInputStream:<init>(byte[])
java.util.ArrayDeque:push(java.lang.Object)
java.util.ArrayDeque:pop()
org.apache.fontbox.util.BoundingBox:<init>(float,float,float,float)
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getGlyphBBox()
org.apache.pdfbox.pdmodel.font.PDType3CharProc:<init>(org.apache.pdfbox.pdmodel.font.PDType3Font,org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.font.PDType3Font:getCharProcs()
org.apache.fontbox.util.BoundingBox:<init>()
org.apache.pdfbox.pdmodel.font.PDType3Font:getFontBBox()
java.util.HashMap:getOrDefault(java.lang.Object,java.lang.Object)
org.apache.pdfbox.cos.COSName:writePDF(java.io.OutputStream)
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
java.lang.String:valueOf(long)
org.apache.pdfbox.cos.COSFloat:formatString()
org.apache.pdfbox.cos.COSString:getForceHexForm()
org.apache.pdfbox.pdmodel.graphics.color.PDColor:initComponents(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.cos.COSUpdateState:update(java.lang.Iterable)
java.util.ArrayList:addAll(java.util.Collection)
java.lang.ref.SoftReference:<init>(java.lang.Object)
org.apache.pdfbox.pdmodel.font.PDFontFactory:createFont(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)
java.lang.ref.SoftReference:get()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:curveTo(double,double,double,double,double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:moveTo(double,double)
java.awt.geom.Point2D$Double:<init>(double,double)
java.lang.Double:compare(double,double)
java.lang.Math:sin(double)
java.lang.Math:cos(double)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:lineTo(float,float)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setHeight(int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setWidth(int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setBitsPerComponent(int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createRawStream(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.cos.COSDictionary:asUnmodifiableDictionary()
org.apache.pdfbox.filter.DecodeResult:getJPXSMask()
org.apache.pdfbox.filter.DecodeResult:getJPXColorSpace()
org.apache.pdfbox.filter.DecodeResult:getParameters()
org.apache.pdfbox.cos.COSInputStream:getDecodeResult()
java.io.InputStream:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:initRgbColorTable()
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:readColorTable()
org.apache.pdfbox.pdmodel.graphics.color.PDSpecialColorSpace:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:loadICCProfile()
org.apache.pdfbox.pdmodel.graphics.color.PDCIEBasedColorSpace:<init>()
org.apache.pdfbox.pdmodel.PDDocument:setVersion(float)
org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:writeTo(java.io.OutputStream)
org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:add(int,java.lang.String)
org.apache.fontbox.ttf.CmapLookup:getCharCodes(int)
org.apache.fontbox.ttf.MaximumProfileTable:getNumGlyphs()
org.apache.fontbox.ttf.TrueTypeFont:getMaximumProfile()
org.apache.pdfbox.pdmodel.font.ToUnicodeWriter:<init>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildVerticalMetrics(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildWidths(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getCOSObject()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:toCIDSystemInfo(java.lang.String,java.lang.String,int)
org.apache.fontbox.ttf.TrueTypeFont:getUnicodeCmapLookup()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontFile2(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.fontbox.ttf.TrueTypeFont:getOriginalDataSize()
java.io.InputStream:reset()
java.io.InputStream:markSupported()
java.io.InputStream:read(byte[])
java.io.InputStream:mark(int)
org.apache.fontbox.ttf.TrueTypeFont:getOriginalData()
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:isEmbeddingPermitted(org.apache.fontbox.ttf.TrueTypeFont)
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:createFontDescriptor(org.apache.fontbox.ttf.TrueTypeFont)
org.apache.pdfbox.pdmodel.fdf.FDFField:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSStream:toTextString()
java.lang.StringBuilder:append(int)
org.apache.pdfbox.cos.COSArray:toCOSStringStringList()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:<init>(org.apache.pdfbox.cos.COSString)
org.apache.pdfbox.cos.COSObjectKey:<init>(long,int,int)
org.apache.pdfbox.cos.COSUpdateState:isUpdated()
org.apache.pdfbox.pdmodel.encryption.RC4Cipher:write(byte[],int,int,java.io.OutputStream)
org.apache.pdfbox.pdmodel.encryption.RC4Cipher:fixByte(byte)
javax.crypto.Cipher:init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)
javax.crypto.spec.IvParameterSpec:<init>(byte[])
javax.crypto.spec.SecretKeySpec:<init>(byte[],java.lang.String)
javax.crypto.Cipher:getInstance(java.lang.String)
java.security.SecureRandom:nextBytes(byte[])
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getSecureRandom()
java.lang.String:makeConcatWithConstants(int,int)
java.io.InputStream:readNBytes(byte[],int,int)
java.security.MessageDigest:getInstance(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:<init>(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:<init>(org.apache.pdfbox.cos.COSString)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitDestination:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDAction:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSound:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnknown:<init>(org.apache.pdfbox.cos.COSDictionary)
java.util.Collection:add(java.lang.Object)
java.util.Collection:contains(java.lang.Object)
org.apache.pdfbox.cos.COSDocument:setTrailer(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSDocument:<init>(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.cos.COSDocument:setHighestXRefObjectNumber(long)
org.apache.pdfbox.cos.COSDocument:accept(org.apache.pdfbox.cos.ICOSVisitor)
java.security.MessageDigest:digest()
java.security.MessageDigest:update(byte[])
java.lang.Long:toString(long)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:hasProtectionPolicy()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getSecurityHandler()
org.apache.pdfbox.pdmodel.PDDocument:getEncryption()
org.apache.pdfbox.pdmodel.PDDocument:isAllSecurityToBeRemoved()
java.lang.Long:longValue()
java.lang.System:currentTimeMillis()
org.apache.pdfbox.pdmodel.PDDocument:getDocumentId()
org.apache.pdfbox.pdfwriter.COSWriter:prepareIncrement()
org.apache.pdfbox.cos.COSDocument:getHighestXRefObjectNumber()
java.util.function.Consumer:accept(org.apache.pdfbox.pdfwriter.COSWriter)
org.apache.pdfbox.cos.COSIncrement:exclude(org.apache.pdfbox.cos.COSBase[])
org.apache.pdfbox.pdfparser.PDFParser:parse(boolean)
org.apache.pdfbox.pdfparser.COSParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.cos.COSDictionary:getBoolean(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,boolean)
java.util.HashSet:add(java.lang.Object)
java.util.HashSet:contains(java.lang.Object)
org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree:iterator()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getFieldTree()
org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node:walk(boolean)
org.apache.pdfbox.filter.CCITTFaxDecoderStream:readBit()
org.apache.pdfbox.util.Matrix:createMatrix(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.font.PDType3Font:checkFontMatrixValues(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setBorderStyle(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:setDashStyle(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setBorderEffect(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:setIntensity(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:setStyle(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:setStyle(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:getWidth()
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:setWidth(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:<init>()
org.w3c.dom.Node:getTextContent()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setRichContents(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:richContentsToString(org.w3c.dom.Node,boolean)
javax.xml.xpath.XPath:evaluate(java.lang.String,java.lang.Object,javax.xml.namespace.QName)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setContents(java.lang.String)
javax.xml.xpath.XPath:evaluate(java.lang.String,java.lang.Object)
javax.xml.xpath.XPathFactory:newXPath()
javax.xml.xpath.XPathFactory:newInstance()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setIntent(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setSubject(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setOpacity(float)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setCreationDate(java.util.Calendar)
org.apache.pdfbox.util.DateConverter:toCalendar(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setTitle(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setName(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setToggleNoView(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setLocked(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setReadOnly(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setNoView(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setNoRotate(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setNoZoom(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setPrinted(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setHidden(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setInvisible(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setDate(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setColor(java.awt.Color)
java.awt.Color:<init>(int)
java.lang.Integer:parseInt(java.lang.String,int)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setPage(int)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:<init>()
java.lang.String:getBytes(java.lang.String)
org.w3c.dom.Document:getInputEncoding()
org.w3c.dom.Document:getXmlEncoding()
org.w3c.dom.Element:getOwnerDocument()
org.apache.pdfbox.cos.COSStream:createOutputStream()
org.apache.pdfbox.util.Hex:decodeHex(java.lang.String)
org.w3c.dom.Element:getTextContent()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:parseDictElement(org.w3c.dom.Element)
org.apache.pdfbox.cos.COSStream:<init>()
org.apache.logging.log4j.util.Supplier:get(org.w3c.dom.Element)
javax.xml.parsers.FactoryConfigurationError:getMessage()
javax.xml.parsers.DocumentBuilder:parse(java.io.InputStream)
javax.xml.parsers.DocumentBuilderFactory:newDocumentBuilder()
javax.xml.parsers.DocumentBuilderFactory:setNamespaceAware(boolean)
javax.xml.parsers.DocumentBuilderFactory:setExpandEntityReferences(boolean)
javax.xml.parsers.DocumentBuilderFactory:setXIncludeAware(boolean)
javax.xml.parsers.DocumentBuilderFactory:setFeature(java.lang.String,boolean)
javax.xml.parsers.DocumentBuilderFactory:newInstance()
org.apache.pdfbox.cos.COSArray:setName(int,java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDAction:setType(java.lang.String)
java.util.function.Consumer:accept(org.apache.pdfbox.cos.COSArray)
java.lang.Class:cast(java.lang.Object)
java.util.function.Function:apply(java.lang.Class)
java.util.stream.Stream:filter(java.util.function.Predicate)
java.lang.Class:isInstance(java.lang.Object)
java.util.function.Predicate:test(java.lang.Class)
java.util.Objects:requireNonNull(java.lang.Object)
java.util.Collection:stream()
org.apache.pdfbox.text.PDFTextStripper:writeParagraphEnd()
org.apache.pdfbox.text.PDFTextStripper:getLineSeparator()
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:setParagraphStart()
org.apache.pdfbox.text.PDFTextStripper:matchListItemPattern(org.apache.pdfbox.text.PDFTextStripper$PositionWrapper)
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:isHangingIndent()
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:setHangingIndent()
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:isParagraphStart()
org.apache.pdfbox.text.TextPosition:getWidth()
org.apache.pdfbox.text.TextPosition:getWidthOfSpace()
org.apache.pdfbox.text.PDFTextStripper:getIndentThreshold()
org.apache.pdfbox.text.TextPosition:getXDirAdj()
org.apache.pdfbox.text.PDFTextStripper:multiplyFloat(float,float)
org.apache.pdfbox.text.PDFTextStripper:getDropThreshold()
org.apache.pdfbox.text.TextPosition:getYDirAdj()
org.apache.pdfbox.text.PDFTextStripper:getWordSeparator()
org.apache.pdfbox.text.PDFTextStripper:writeString(java.lang.String)
org.apache.pdfbox.text.TextPosition:getVisuallyOrderedUnicode()
org.apache.pdfbox.text.PDFTextStripper$LineItem:getTextPosition()
java.util.List:clear()
org.apache.pdfbox.text.PDFTextStripper:createWord(java.lang.String,java.util.List)
org.apache.pdfbox.text.PDFTextStripper$LineItem:isWordSeparator()
org.apache.pdfbox.pdmodel.font.PDFont:getCOSObject()
org.apache.pdfbox.text.PDFTextStripper:getArticleStart()
org.apache.pdfbox.text.TextPosition:getHeightDir()
org.apache.pdfbox.text.TextPosition:getWidthDirAdj()
org.apache.pdfbox.util.IterativeMergeSort:merge(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)
java.lang.Object[]:clone()
org.apache.pdfbox.contentstream.PDFStreamEngine:popResources(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.contentstream.PDFStreamEngine:restoreGraphicsStack(java.util.Deque)
org.apache.pdfbox.contentstream.PDFStreamEngine:processStreamOperators(org.apache.pdfbox.contentstream.PDContentStream)
org.apache.pdfbox.contentstream.PDFStreamEngine:clipToRect(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.util.Matrix:concatenate(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.contentstream.PDFStreamEngine:saveGraphicsStack()
org.apache.pdfbox.contentstream.PDFStreamEngine:pushResources(org.apache.pdfbox.contentstream.PDContentStream)
org.apache.pdfbox.pdmodel.PDPage:getMatrix()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:<init>(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.PDPage:getCropBox()
java.util.ArrayDeque:clear()
org.apache.pdfbox.pdmodel.PDPageTree:getKids(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDPageTree:isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)
java.util.HashSet:clear()
java.lang.IndexOutOfBoundsException:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:parse(java.lang.CharSequence)
org.apache.pdfbox.pdmodel.common.function.PDFunction:<init>(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSDictionary:getFloat(org.apache.pdfbox.cos.COSName)
java.util.Objects:requireNonNullElseGet(java.lang.Object,java.util.function.Supplier)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getInstance(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:<init>(org.apache.pdfbox.cos.COSDictionary)
java.awt.Graphics2D:dispose()
org.apache.pdfbox.rendering.PageDrawer:drawTilingPattern(java.awt.Graphics2D,org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.util.Matrix:translate(float,float)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getBBox()
org.apache.pdfbox.util.Matrix:getScaleInstance(float,float)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getXStep()
java.awt.Graphics2D:scale(double,double)
java.awt.Graphics2D:translate(int,int)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getYStep()
java.awt.image.BufferedImage:createGraphics()
java.awt.image.BufferedImage:<init>(int,int,int)
org.apache.pdfbox.rendering.TilingPaint:ceiling(double)
org.apache.pdfbox.util.Matrix:getScalingFactorY()
org.apache.pdfbox.util.Matrix:getScalingFactorX()
org.apache.pdfbox.util.Matrix:<init>(java.awt.geom.AffineTransform)
java.awt.geom.Rectangle2D:getHeight()
java.awt.geom.Rectangle2D:getWidth()
java.awt.geom.Rectangle2D$Float:<init>(float,float,float,float)
java.lang.Math:signum(float)
org.apache.pdfbox.pdmodel.common.PDRectangle:getHeight()
org.apache.pdfbox.util.Matrix:multiply(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.PDResources:getXObject(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDResources:getXObjectNames()
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getResources()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream:<init>(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:isStream()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.rendering.PageDrawer:isHiddenOCG(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getOptionalContent()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isInvisible()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isHidden()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isNoView()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isPrinted()
java.util.WeakHashMap:<init>()
org.apache.pdfbox.contentstream.operator.markedcontent.EndMarkedContentSequence:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequenceWithProperties:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequence:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.ShowTextLine:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateFinalPoint:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.ClipEvenOddRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.ClipNonZeroRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetLineWidth:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.SetWordSpacing:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.SetTextRise:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetMatrix:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.SetTextLeading:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.ShowText:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.SetFontAndSize:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.MoveText:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.SetCharSpacing:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.text.NextLine:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.ShadingFill:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorN:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetStrokingColorN:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.StrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.CloseAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceRGBColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceRGBColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.AppendRectangleToPath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.state.Restore:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.state.Save:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.EndPath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetLineMiterLimit:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.MoveTo:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.LineTo:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceCMYKColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceCMYKColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetLineCapStyle:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetLineJoinStyle:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetFlatness:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.ClosePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceGrayColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceGrayColor:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.LegacyFillNonZeroRule:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.text.EndText:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.DrawObject:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.state.Concatenate:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.CurveTo:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.text.BeginText:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.CloseFillEvenOddAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.operator.graphics.CloseFillNonZeroAndStrokePath:<init>(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine)
org.apache.pdfbox.contentstream.PDFStreamEngine:<init>()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getPages()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:showText(java.lang.String)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:newLineAtOffset(float,float)
org.apache.pdfbox.pdmodel.font.PDFont:getStringWidth(java.lang.String)
java.lang.Character:isWhitespace(char)
org.apache.pdfbox.pdmodel.interactive.PlainText$Word:getText()
java.text.AttributedCharacterIterator:getAttribute(java.text.AttributedCharacterIterator$Attribute)
java.text.AttributedString:getIterator()
org.apache.pdfbox.pdmodel.interactive.PlainText$Word:getAttributes()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColorSpaceStack(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:isOutsideOneInterval(double)
org.apache.pdfbox.pdmodel.font.PDType3Font:generateBoundingBox()
org.apache.pdfbox.pdmodel.font.encoding.Encoding:getName(int)
org.apache.pdfbox.pdmodel.graphics.color.PDColor:getPatternName()
org.apache.pdfbox.pdmodel.graphics.color.PDColor:getComponents()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeOperand(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:getName(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDColor:getColorSpace()
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.logging.log4j.Logger:info(java.lang.String,java.lang.Object)
org.apache.fontbox.ttf.gsub.GsubWorkerFactory:getGsubWorker(org.apache.fontbox.ttf.CmapLookup,org.apache.fontbox.ttf.model.GsubData)
org.apache.pdfbox.pdmodel.font.PDType0Font:getGsubData()
org.apache.pdfbox.pdmodel.PDDocument:getFontsToSubset()
org.apache.pdfbox.cos.COSBoolean:writePDF(java.io.OutputStream)
org.apache.pdfbox.cos.COSInteger:writePDF(java.io.OutputStream)
org.apache.pdfbox.cos.COSFloat:writePDF(java.io.OutputStream)
org.apache.pdfbox.pdfwriter.COSWriter:writeString(org.apache.pdfbox.cos.COSString,java.io.OutputStream)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:setFontColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.graphics.color.PDColor:<init>(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.cos.COSArray:addAll(java.util.Collection)
java.util.Arrays:toString(java.lang.Object[])
java.util.List:toArray()
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:setFontSize(float)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:setFont(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:setFontName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDResources:getFont(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:getZapfDingbats()
java.util.concurrent.ConcurrentHashMap:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getArcSegment(double,double,double,double,double,double,java.util.ArrayList,boolean)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:lineTo(float,float)
java.lang.Math:abs(int)
java.util.HashSet:<init>(int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSBase,int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.filter.Filter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:initJPXValues()
java.io.ByteArrayInputStream:<init>(byte[],int,int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:<init>(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:isStencil()
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:checkArray(org.apache.pdfbox.cos.COSArray)
java.awt.color.ICC_Profile:getInstance(int)
java.lang.Byte:valueOf(byte)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:readInt(byte[],int)
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:<init>(byte[])
org.apache.pdfbox.pdmodel.font.FontInfo:<init>()
java.lang.Long:toHexString(long)
java.util.zip.CRC32:getValue()
java.util.zip.CRC32:update(byte[],int,int)
java.util.zip.CRC32:<init>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildToUnicodeCMap(java.util.Map)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:createCIDFont()
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary,org.apache.fontbox.ttf.TrueTypeFont,boolean)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:<init>(java.util.Map,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:isSubDictionary()
org.apache.pdfbox.pdmodel.fdf.FDFField:getKids()
org.apache.pdfbox.pdmodel.fdf.FDFField:getRichText()
org.apache.pdfbox.pdmodel.fdf.FDFField:escapeXML(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFField:getValue()
org.apache.pdfbox.pdmodel.fdf.FDFField:getPartialFieldName()
org.apache.pdfbox.util.Hex:getString(byte[])
org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification:createFS(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.cos.COSBase:setKey(org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.cos.COSObjectKey:equals(java.lang.Object)
java.util.Hashtable:computeIfAbsent(java.lang.Object,java.util.function.Function)
java.util.function.Function:apply(org.apache.pdfbox.pdfwriter.COSWriter)
org.apache.pdfbox.cos.COSObjectKey:<init>(long,int)
org.apache.pdfbox.cos.COSUpdateInfo:isNeedToBeUpdated()
java.util.HashMap:containsKey(java.lang.Object)
org.apache.pdfbox.pdmodel.encryption.RC4Cipher:write(java.io.InputStream,java.io.OutputStream)
org.apache.pdfbox.pdmodel.encryption.RC4Cipher:setKey(byte[])
javax.crypto.Cipher:doFinal()
javax.crypto.Cipher:update(byte[],int,int)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:createCipher(byte[],byte[],boolean)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:prepareAESInitializationVector(boolean,byte[],java.io.InputStream,java.io.OutputStream)
org.apache.pdfbox.pdmodel.encryption.MessageDigests:getMD5()
javax.crypto.CipherInputStream:close()
javax.crypto.CipherInputStream:transferTo(java.io.OutputStream)
javax.crypto.CipherInputStream:<init>(java.io.InputStream,javax.crypto.Cipher)
org.apache.pdfbox.pdfparser.BaseParser:isCR(int)
org.apache.pdfbox.pdfparser.BaseParser:isLF(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination:create(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSDictionary:getDictionaryObject(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentNameDestinationDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getCOSObject()
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:<init>(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionMovie:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:<init>(org.apache.pdfbox.cos.COSDictionary)
java.util.LinkedHashMap:putAll(java.util.Map)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:createAnnotation(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.common.COSArrayList:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)
java.lang.Math:max(long,long)
java.util.Optional:orElse(java.lang.Object)
java.util.stream.Stream:max(java.util.Comparator)
java.lang.Long:compare(long,long)
java.util.Comparator:compare()
org.apache.pdfbox.cos.COSObjectKey:getNumber()
java.util.HashSet:stream()
org.apache.pdfbox.cos.COSDictionary:getIndirectObjectKeys(java.util.Collection)
org.apache.pdfbox.pdmodel.PDPage:getCOSObject()
java.util.function.Consumer:accept(java.util.List)
org.apache.pdfbox.pdmodel.common.PDMetadata:<init>(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getCOSObject()
org.apache.pdfbox.pdmodel.PDDocumentInformation:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDocument:<init>(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.pdfwriter.COSWriter:write(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface)
org.apache.pdfbox.pdfwriter.COSWriter:setStandardOutput(org.apache.pdfbox.pdfwriter.COSStandardOutputStream)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:<init>(java.io.OutputStream)
org.apache.pdfbox.pdfwriter.COSWriter:setOutput(java.io.OutputStream)
java.util.Hashtable:<init>()
java.util.HashSet:iterator()
org.apache.pdfbox.pdfparser.PDFParser:parse()
org.apache.pdfbox.pdfparser.PDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.cos.COSDictionary:getBoolean(org.apache.pdfbox.cos.COSName,boolean)
org.apache.pdfbox.multipdf.PDFCloneUtility:cloneForNewDocument(org.apache.pdfbox.cos.COSBase)
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.cos.COSDictionary)
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.PDPageTree$SearchContext:visitPage(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary,java.lang.Class)
java.lang.Exception:getMessage()
org.apache.logging.log4j.Logger:error(java.lang.String,org.apache.logging.log4j.util.Supplier[])
org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getField(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fixup.AbstractFixup:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.filter.CCITTFaxDecoderStream:getNextChangingElement(int,boolean)
org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRun(org.apache.pdfbox.filter.CCITTFaxDecoderStream$Tree)
org.apache.pdfbox.pdmodel.font.PDType3Font:getFontMatrix()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:setCoords(float[])
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:<init>(org.w3c.dom.Element)
org.apache.pdfbox.cos.COSDictionary:setItem(java.lang.String,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:parseStreamElement(org.w3c.dom.Element)
java.lang.String:equalsIgnoreCase(java.lang.String)
org.apache.logging.log4j.Logger:warn(java.lang.String,org.apache.logging.log4j.util.Supplier[])
org.apache.logging.log4j.util.Supplier:get(org.w3c.dom.NodeList)
org.apache.logging.log4j.util.Supplier:get(java.lang.String)
org.apache.pdfbox.util.XMLUtil:parse(java.io.InputStream,boolean)
java.util.Base64$Decoder:decode(java.lang.String)
java.util.regex.Matcher:replaceAll(java.lang.String)
java.util.Base64:getDecoder()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:setInteriorColor(java.awt.Color)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:setEndPointEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:setStartPointEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:setVertices(float[])
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:setVertices(float[])
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:setFringe(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:setFringe(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.action.PDAction:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setFringe(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setCallout(float[])
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:setFringe(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.cos.COSArray:ofCOSStrings(java.util.List)
java.util.function.Consumer:accept(org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.PDPage:getIndirectResourceObjects(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.text.PDFTextStripper:getPageEnd()
org.apache.pdfbox.text.PDFTextStripper:getArticleEnd()
org.apache.pdfbox.text.PDFTextStripper:writeParagraphSeparator()
org.apache.pdfbox.text.PDFTextStripper:writeLineSeparator()
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:isLineStart()
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:isArticleStart()
org.apache.pdfbox.text.PDFTextStripper:isParagraphSeparation(org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,float)
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:setLineStart()
org.apache.pdfbox.text.PDFTextStripper:writeWordSeparator()
org.apache.pdfbox.text.PDFTextStripper:writeString(java.lang.String,java.util.List)
org.apache.pdfbox.text.PDFTextStripper$WordWithTextPositions:getTextPositions()
org.apache.pdfbox.text.PDFTextStripper$WordWithTextPositions:getText()
java.util.LinkedList:add(java.lang.Object)
java.lang.StringBuilder:length()
org.apache.pdfbox.text.PDFTextStripper:normalizeAdd(java.util.List,java.lang.StringBuilder,java.util.List,org.apache.pdfbox.text.PDFTextStripper$LineItem)
java.util.LinkedList:<init>()
org.apache.pdfbox.text.PDFTextStripper:within(float,float,float)
org.apache.pdfbox.pdmodel.font.PDFont:hashCode()
org.apache.pdfbox.text.TextPosition:getFont()
org.apache.pdfbox.text.TextPosition:getFontSize()
org.apache.pdfbox.text.PDFTextStripper:startArticle(boolean)
java.util.Iterator:remove()
org.apache.pdfbox.text.TextPosition:completelyContains(org.apache.pdfbox.text.TextPosition)
java.util.ListIterator:set(java.lang.Object)
java.util.ListIterator:next()
java.util.List:listIterator()
org.apache.pdfbox.util.IterativeMergeSort:iterativeMergeSort(java.lang.Object[],java.util.Comparator)
org.apache.pdfbox.text.PDFTextStripper:getPageStart()
org.apache.pdfbox.contentstream.PDFStreamEngine:processStream(org.apache.pdfbox.contentstream.PDContentStream)
org.apache.pdfbox.pdmodel.PDPage:hasContents()
org.apache.pdfbox.contentstream.PDFStreamEngine:initPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDPage:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.PDDocument:getResourceCache()
org.apache.pdfbox.pdmodel.PDPageTree:sanitizeType(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDPageTree:get(int,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4:<init>(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:<init>(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:<init>(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:<init>(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.common.function.PDFunctionTypeIdentity:<init>(org.apache.pdfbox.cos.COSBase)
java.awt.image.BufferedImage:setRGB(int,int,int)
java.awt.image.BufferedImage:getRGB(int,int)
org.apache.pdfbox.rendering.GroupGraphics:backdropRemoval(int,int,int,float)
java.awt.image.DataBufferInt:getData()
java.awt.image.WritableRaster:getDataBuffer()
java.awt.image.BufferedImage:getType()
java.awt.image.BufferedImage:getHeight()
java.awt.image.BufferedImage:getWidth()
java.awt.Graphics2D:translate(double,double)
java.awt.Graphics2D:transform(java.awt.geom.AffineTransform)
java.awt.Graphics2D:clearRect(int,int,int,int)
java.awt.Graphics2D:setBackground(java.awt.Color)
java.awt.Graphics2D:<init>()
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getBlendMode()
org.apache.pdfbox.pdmodel.PDResources:getExtGState(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDResources:getExtGStateNames()
java.lang.Boolean:valueOf(boolean)
java.lang.Boolean:booleanValue()
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:getCOSObject()
java.awt.image.BufferedImage:<init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)
java.awt.image.Raster:createInterleavedRaster(java.awt.image.DataBuffer,int,int,int,int,int[],java.awt.Point)
java.awt.image.DataBufferByte:<init>(int)
java.awt.geom.Area:reset()
java.awt.geom.Area:intersect(java.awt.geom.Area)
java.awt.geom.Rectangle2D:intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)
java.awt.geom.Path2D:getBounds2D()
java.awt.geom.Area:<init>(java.awt.Shape)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:<init>(org.apache.pdfbox.cos.COSDictionary)
java.awt.TexturePaint:<init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)
org.apache.pdfbox.rendering.TilingPaint:getImage(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.AffineTransform,java.awt.geom.Rectangle2D)
org.apache.pdfbox.rendering.TilingPaint:getAnchorRect(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern)
org.apache.pdfbox.util.Matrix:concatenate(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:create(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary)
java.awt.Graphics2D:setTransform(java.awt.geom.AffineTransform)
java.awt.Graphics2D:rotate(double,double,double)
java.lang.Math:toRadians(double)
java.awt.Graphics2D:getTransform()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getRectangle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:constructAppearances()
org.apache.pdfbox.rendering.PageDrawer:hasTransparency(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:getAppearanceStream()
org.apache.pdfbox.pdmodel.PDPage:getRotation()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isNoRotate()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:getNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getAppearance()
org.apache.pdfbox.rendering.PageDrawer:shouldSkipAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.rendering.PageDrawerParameters:getImageDownscalingOptimizationThreshold()
org.apache.pdfbox.rendering.PageDrawerParameters:getRenderingHints()
org.apache.pdfbox.rendering.PageDrawerParameters:getDestination()
org.apache.pdfbox.rendering.PageDrawerParameters:isSubsamplingAllowed()
org.apache.pdfbox.rendering.PageDrawerParameters:getRenderer()
org.apache.pdfbox.rendering.TilingPaintFactory:<init>(org.apache.pdfbox.rendering.PageDrawer)
org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine:<init>(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.rendering.PageDrawerParameters:getPage()
java.awt.DisplayMode:getBitDepth()
java.awt.GraphicsDevice:getDisplayMode()
java.awt.GraphicsConfiguration:getDevice()
java.awt.Graphics2D:getDeviceConfiguration()
org.apache.pdfbox.pdmodel.PDDocument:getPages()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:showText(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.PlainText$Line:getWords()
org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:getLeading()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:newLineAtOffset(float,float)
org.apache.pdfbox.pdmodel.interactive.PlainText$Line:getInterWordSpacing(float)
java.util.List:indexOf(java.lang.Object)
org.apache.pdfbox.pdmodel.interactive.PlainText$Line:getWidth()
org.apache.pdfbox.pdmodel.interactive.PlainText$Line:addWord(org.apache.pdfbox.pdmodel.interactive.PlainText$Word)
org.apache.pdfbox.pdmodel.interactive.PlainText$Word:setAttributes(java.text.AttributedString)
org.apache.pdfbox.pdmodel.interactive.PlainText$Word:<init>(java.lang.String)
java.text.AttributedString:addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)
java.text.AttributedString:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.PlainText$Line:setWidth(float)
org.apache.pdfbox.pdmodel.interactive.PlainText$Line:calculateWidth(org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.interactive.PlainText$Line:<init>()
java.text.BreakIterator:next()
java.text.BreakIterator:first()
java.text.BreakIterator:setText(java.lang.String)
java.text.BreakIterator:getLineInstance()
org.apache.pdfbox.pdmodel.interactive.TextAlign:getTextAlign()
org.apache.pdfbox.pdmodel.interactive.TextAlign:values()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:endText()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:beginText()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(float)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:getEncoding()
org.apache.pdfbox.pdmodel.font.PDType3Font:getBoundingBox()
org.apache.pdfbox.pdmodel.font.PDType3Font:getCharProc(int)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:fill()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:addRect(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(float,float,float)
java.lang.String:replace(char,char)
org.apache.pdfbox.pdmodel.interactive.PlainText$Paragraph:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isMultiline()
java.text.NumberFormat:setGroupingUsed(boolean)
java.text.NumberFormat:setMaximumFractionDigits(int)
org.apache.fontbox.ttf.gsub.GsubWorkerFactory:<init>()
java.text.NumberFormat:getNumberInstance(java.util.Locale)
org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeObject(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.contentstream.operator.Operator:getImageParameters()
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:processSetFontColor(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:processSetFont(java.util.List)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:assignGlyphList(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
org.apache.pdfbox.pdmodel.font.PDFont:<init>(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
java.util.ArrayList:toArray(java.util.function.IntFunction)
java.util.function.IntFunction:apply()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getArc(double,double,double,double,double,double,java.util.ArrayList,boolean)
java.lang.Math:acos(double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:lineTo(double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:reversePolygon(java.awt.geom.Point2D$Double[])
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getPolygonDirection(java.awt.geom.Point2D$Double[])
java.awt.geom.Point2D:getX()
java.awt.geom.Point2D:getY()
org.apache.pdfbox.pdmodel.graphics.shading.Line:calcLine(int,int,int,int)
java.awt.image.WritableRaster:setPixel(int,int,float[])
java.awt.image.WritableRaster:getPixel(int,int,float[])
org.apache.pdfbox.cos.COSArray:add(org.apache.pdfbox.pdmodel.common.COSObjectable)
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:readlong(char,org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:readshort(char,org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
javax.imageio.stream.MemoryCacheImageInputStream:close()
javax.imageio.stream.MemoryCacheImageInputStream:readBits(int)
javax.imageio.stream.MemoryCacheImageInputStream:<init>(java.io.InputStream)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$Chunk:getData()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getHeight()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getWidth()
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:getIDATInputStream(org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:buildDecodeParams(org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.common.PDStream:createOutputStream(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getColorSpace()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:create(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:createCOSStreamwithIccProfile(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:mapPNGRenderIntent(int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:readPNGFloat(byte[],int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:updateCrc(byte[],int,int)
java.lang.NumberFormatException:getMessage()
javax.imageio.metadata.IIOMetadata:getAsTree(java.lang.String)
javax.imageio.ImageReader:getImageMetadata(int)
org.apache.pdfbox.filter.MissingImageReaderException:<init>(java.lang.String)
javax.imageio.ImageReader:dispose()
javax.imageio.ImageReader:canReadRaster()
javax.imageio.ImageIO:getImageReadersByFormatName(java.lang.String)
javax.imageio.ImageWriter:dispose()
javax.imageio.ImageWriter:getDefaultWriteParam()
javax.imageio.ImageIO:getImageWritersBySuffix(java.lang.String)
java.util.concurrent.ConcurrentHashMap:put(java.lang.Object,java.lang.Object)
java.lang.Integer:parseInt(java.lang.CharSequence,int,int,int)
java.util.concurrent.ConcurrentHashMap:get(java.lang.Object)
org.apache.fontbox.cmap.CMap:toUnicode(int)
org.apache.fontbox.cmap.CMap:toUnicode(int,int)
java.lang.String:toLowerCase(java.util.Locale)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getPostScriptNames(java.lang.String)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:<init>(java.io.File,org.apache.pdfbox.pdmodel.font.FontFormat,java.lang.String,org.apache.pdfbox.pdmodel.font.CIDSystemInfo,int,int,int,int,int,byte[],org.apache.pdfbox.pdmodel.font.FileSystemFontProvider,java.lang.String,long)
java.io.File:lastModified()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:computeHash(java.io.InputStream)
java.nio.file.Files:newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])
java.io.File:toPath()
org.apache.pdfbox.pdmodel.PDDocument:registerTrueTypeFontForClosing(org.apache.fontbox.ttf.TrueTypeFont)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:getCIDFont()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary,org.apache.fontbox.ttf.TrueTypeFont,boolean,org.apache.pdfbox.pdmodel.font.PDType0Font,boolean)
org.apache.fontbox.ttf.TrueTypeFont:getGsubData()
org.apache.fontbox.ttf.TrueTypeFont:enableVerticalSubstitutions()
org.apache.pdfbox.pdmodel.font.PDFont:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:getSubDictionary()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getAppearanceState()
org.apache.pdfbox.pdmodel.fdf.FDFField:writeXML(java.io.Writer)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getFields()
org.apache.pdfbox.cos.COSString:toHexString()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getID()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getFile()
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:setFDF(org.apache.pdfbox.pdmodel.fdf.FDFDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
javax.crypto.Cipher:getMaxAllowedKeyLength(java.lang.String)
java.security.MessageDigest:update(byte[],int,int)
java.security.MessageDigest:update(byte)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:truncateOrPad(byte[])
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSUpdateState:update(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.PDResources:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache,java.util.Map)
org.apache.pdfbox.pdmodel.graphics.PDXObject:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:<init>(org.apache.pdfbox.cos.COSDictionary)
java.lang.String:valueOf(int)
org.apache.pdfbox.cos.COSObjectKey:getGeneration()
org.apache.pdfbox.pdfwriter.COSWriter:getStandardOutput()
org.apache.pdfbox.pdfwriter.COSWriter:getObjectKey(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.COSWriter:isNeedToBeUpdated(org.apache.pdfbox.cos.COSBase)
java.util.Hashtable:get(java.lang.Object)
java.util.ArrayDeque:contains(java.lang.Object)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:setOnNewLine(boolean)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:isOnNewLine()
org.apache.pdfbox.pdfwriter.COSWriter:getXRefEntries()
org.apache.pdfbox.pdfparser.xref.AbstractXReference:<init>(org.apache.pdfbox.pdfparser.xref.XReferenceType)
org.apache.pdfbox.pdfwriter.compress.COSObjectPool:contains(org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.pdfwriter.compress.COSObjectPool:getKey(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.compress.COSObjectPool:contains(org.apache.pdfbox.cos.COSBase)
java.io.OutputStream:flush()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptDataRC4(byte[],java.io.InputStream,java.io.OutputStream)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptDataAESother(byte[],java.io.InputStream,java.io.OutputStream,boolean)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:calcFinalKey(long,long)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptDataAES256(java.io.InputStream,java.io.OutputStream,boolean)
java.util.LinkedHashMap:forEach(java.util.function.BiConsumer)
org.apache.pdfbox.pdfparser.COSParser:isString(char[])
org.apache.pdfbox.pdfparser.BruteForceParser:findString(char[])
org.apache.pdfbox.cos.COSInteger:longValue()
java.lang.Math:abs(long)
java.util.HashMap:putIfAbsent(java.lang.Object,java.lang.Object)
org.apache.pdfbox.cos.COSObjectKey:getInternalHash()
java.util.HashMap:size()
java.util.Map:size()
java.util.Map:isEmpty()
java.lang.String:makeConcatWithConstants(char,char,long)
org.apache.pdfbox.pdfparser.BaseParser:isDigit(int)
org.apache.pdfbox.pdfparser.BaseParser:isEOL(int)
org.apache.pdfbox.pdfparser.BaseParser:isWhitespace(int)
java.io.ByteArrayOutputStream:toString(java.nio.charset.Charset)
org.apache.logging.log4j.Logger:debug(org.apache.logging.log4j.util.Supplier,java.lang.Throwable)
org.apache.logging.log4j.util.Supplier:get()
java.nio.CharBuffer:toString()
java.nio.charset.CharsetDecoder:decode(java.nio.ByteBuffer)
java.nio.ByteBuffer:wrap(byte[])
org.apache.pdfbox.pdmodel.PDPage:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:getCOSObject()
org.apache.pdfbox.pdmodel.PDDocumentNameDestinationDictionary:getDestination(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getDests()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:getNamedDestination()
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:getDests()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getNames()
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory:createAction(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSDictionary:addAll(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDPage:getAnnotations(org.apache.pdfbox.pdmodel.interactive.annotation.AnnotationFilter)
org.apache.pdfbox.pdmodel.PDDocument:setHighestImportedObjectNumber(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDPageTree:add(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDPage:getContentsForRandomAccess()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getMetadata()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setMarkInfo(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getMarkInfo()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setLanguage(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getLanguage()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setViewerPreferences(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getViewerPreferences()
org.apache.pdfbox.pdmodel.PDDocument:setDocumentInformation(org.apache.pdfbox.pdmodel.PDDocumentInformation)
org.apache.pdfbox.pdmodel.PDDocument:getDocumentInformation()
org.apache.pdfbox.multipdf.Splitter:getSourceDocument()
org.apache.pdfbox.pdmodel.PDDocument:<init>()
org.apache.pdfbox.pdfwriter.COSWriter:write(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdfwriter.COSWriter:<init>(java.io.OutputStream,org.apache.pdfbox.pdfwriter.compress.CompressParameters)
org.apache.pdfbox.pdmodel.PDDocument:subsetDesignatedFonts()
org.apache.pdfbox.cos.COSDocument:setIsXRefStream(boolean)
org.apache.pdfbox.cos.COSDocument:isClosed()
org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.cos.COSDictionary:getBoolean(java.lang.String,boolean)
org.apache.pdfbox.cos.COSDictionary:setBoolean(java.lang.String,boolean)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getKids()
java.util.LinkedHashMap:<init>(java.util.Map)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getNames()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:<init>()
org.apache.pdfbox.pdmodel.PDStructureElementNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSArray:setInt(int,int)
org.apache.pdfbox.multipdf.PDFMergerUtility:updatePageReferences(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.cos.COSDictionary,java.util.Map)
org.apache.pdfbox.pdmodel.PDPageTree:findPage(org.apache.pdfbox.pdmodel.PDPageTree$SearchContext,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDPageTree$SearchContext:<init>(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSInteger:intValue()
org.apache.logging.log4j.Logger:error(java.lang.String,java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:enqueueKids(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getCOSObject()
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PageMode:values()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.PDFMergerUtility:acroFormLegacyMode(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getAcroForm(org.apache.pdfbox.pdmodel.fixup.PDDocumentFixup)
org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:hasXFA()
org.apache.pdfbox.filter.CCITTFaxDecoderStream:decode2D()
org.apache.pdfbox.filter.CCITTFaxDecoderStream:resetBuffer()
org.apache.pdfbox.filter.CCITTFaxDecoderStream:decode1D()
org.apache.pdfbox.filter.CCITTFaxEncoderStream:clearOutputBuffer()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setTextLineMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setTextMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getMatrix()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setCurrentTransformationMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:parseStampAnnotationAppearanceXML(org.w3c.dom.Element)
org.w3c.dom.Element:getNodeName()
org.w3c.dom.Document:getDocumentElement()
org.apache.pdfbox.util.XMLUtil:parse(java.io.InputStream)
org.apache.logging.log4j.util.Supplier:get(byte[])
org.apache.pdfbox.util.Hex:decodeBase64(java.lang.String)
org.apache.logging.log4j.util.Supplier:get(javax.xml.xpath.XPathExpressionException)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:initStyles(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:initVertices(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:setInteriorColor(java.awt.Color)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:initVertices(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:initFringe(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:setInteriorColor(java.awt.Color)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:initFringe(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:setInteriorColor(java.awt.Color)
org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:setURI(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:<init>()
org.w3c.dom.NamedNodeMap:getNamedItem(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setCaptionStyle(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setCaptionVerticalOffset(float)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setCaptionHorizontalOffset(float)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setCaption(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setInteriorColor(java.awt.Color)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setEndPointEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setStartPointEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setLeaderOffset(float)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setLeaderExtend(float)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setLeaderLength(float)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:setLine(float[])
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:setInkList(java.util.List)
org.w3c.dom.Node:getFirstChild()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setLineEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:initFringe(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setRotation(int)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:initCallout(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setDefaultStyle(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setDefaultAppearance(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:setJustification(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:setSymbol(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:initFringe(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:setStateModel(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:setState(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:setIcon(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFField:setKids(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFField:setRichText(org.apache.pdfbox.cos.COSString)
org.apache.pdfbox.pdmodel.fdf.FDFField:setValue(java.lang.Object)
org.apache.pdfbox.util.XMLUtil:getNodeValue(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFField:setPartialFieldName(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFField:<init>()
org.apache.pdfbox.pdmodel.PDPage:removeResources(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.text.PDFTextStripper:writePageEnd()
org.apache.pdfbox.text.PDFTextStripper:endArticle()
org.apache.pdfbox.text.PDFTextStripper$LineItem:<init>(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.PDFTextStripper$LineItem:getWordSeparator()
java.lang.String:endsWith(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:handleLineSeparation(org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,org.apache.pdfbox.text.PDFTextStripper$PositionWrapper,float)
org.apache.pdfbox.text.PDFTextStripper:writeLine(java.util.List)
org.apache.pdfbox.text.PDFTextStripper:normalize(java.util.List)
org.apache.pdfbox.text.PDFTextStripper:overlap(float,float,float,float)
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:setArticleStart()
org.apache.pdfbox.text.PDFTextStripper:getAverageCharTolerance()
org.apache.pdfbox.text.PDFTextStripper:getSpacingTolerance()
org.apache.pdfbox.text.TextPosition:getIndividualWidths()
org.apache.pdfbox.text.TextPosition:getHeight()
org.apache.pdfbox.text.TextPosition:getY()
org.apache.pdfbox.text.TextPosition:getX()
org.apache.pdfbox.text.PDFTextStripper:hasFontOrSizeChanged(org.apache.pdfbox.text.TextPosition,org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.PDFTextStripper:getIgnoreContentStreamSpaceGlyphs()
org.apache.pdfbox.text.PDFTextStripper$PositionWrapper:<init>(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.PDFTextStripper:startArticle()
org.apache.pdfbox.text.PDFTextStripper:removeContainedSpaces(java.util.List)
org.apache.pdfbox.util.IterativeMergeSort:sort(java.util.List,java.util.Comparator)
java.util.List:sort(java.util.Comparator)
org.apache.pdfbox.text.TextPositionComparator:<init>()
org.apache.pdfbox.text.PDFTextStripper:getSortByPosition()
org.apache.pdfbox.text.PDFTextStripper:writePageStart()
org.apache.pdfbox.contentstream.PDFStreamEngine:processPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.util.Matrix:getTranslateInstance(float,float)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getRectangle()
org.apache.pdfbox.pdmodel.PDPage:getThreadBeads()
org.apache.pdfbox.pdmodel.PDPageTree:get(int)
java.awt.Color:getBlue()
java.awt.Color:getGreen()
java.awt.Color:getRed()
org.apache.pdfbox.pdmodel.graphics.color.PDColor:toRGB()
org.apache.pdfbox.pdmodel.common.function.PDFunction:create(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getCOSObject()
java.awt.Shape:getBounds2D()
java.awt.geom.AffineTransform:createTransformedShape(java.awt.Shape)
java.awt.geom.AffineTransform:<init>(java.awt.geom.AffineTransform)
java.awt.geom.Rectangle2D$Double:<init>(double,double,double,double)
java.awt.Graphics2D:drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)
java.awt.image.BufferedImage:getGraphics()
java.awt.geom.AffineTransform:isIdentity()
java.awt.geom.AffineTransform:preConcatenate(java.awt.geom.AffineTransform)
java.awt.geom.AffineTransform:getTranslateInstance(double,double)
java.awt.geom.Rectangle2D:getMinY()
java.awt.geom.Rectangle2D:getMinX()
java.awt.Rectangle:<init>(int,int)
org.apache.pdfbox.rendering.GroupGraphics:removeBackdrop(java.awt.image.BufferedImage,int,int)
java.util.Deque:pop()
org.apache.pdfbox.rendering.PageDrawer:access$100(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)
java.util.Deque:push(java.lang.Object)
org.apache.pdfbox.rendering.PageDrawer:access$000(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)
org.apache.pdfbox.rendering.GroupGraphics:translate(double,double)
org.apache.pdfbox.rendering.GroupGraphics:transform(java.awt.geom.AffineTransform)
org.apache.pdfbox.rendering.GroupGraphics:scale(double,double)
org.apache.pdfbox.rendering.GroupGraphics:translate(int,int)
org.apache.pdfbox.rendering.GroupGraphics:clearRect(int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:setBackground(java.awt.Color)
org.apache.pdfbox.rendering.GroupGraphics:<init>(java.awt.image.BufferedImage,java.awt.Graphics2D)
java.awt.Graphics2D:drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)
java.util.Deque:peek()
org.apache.pdfbox.rendering.PDFRenderer:getPageImage()
java.util.Deque:isEmpty()
org.apache.pdfbox.rendering.PageDrawer:hasBlendMode(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup,java.util.Set)
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:isIsolated()
org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:create2ByteGrayAlphaImage(int,int)
org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:isGray(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:getColorSpace(org.apache.pdfbox.pdmodel.PDResources)
java.awt.geom.Rectangle2D:getMaxX()
java.lang.Math:floor(double)
java.awt.geom.AffineTransform:getScaleInstance(double,double)
java.awt.geom.Rectangle2D:getY()
java.awt.geom.Rectangle2D:getX()
java.awt.geom.Rectangle2D:isEmpty()
java.awt.geom.Area:getBounds2D()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getCurrentClippingPath()
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:create(org.apache.pdfbox.cos.COSDictionary)
java.util.WeakHashMap:put(java.lang.Object,java.lang.Object)
org.apache.pdfbox.rendering.TilingPaint:<init>(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.AffineTransform)
java.util.WeakHashMap:get(java.lang.Object)
org.apache.pdfbox.rendering.TilingPaintFactory$TilingPaintParameter:<init>(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.PDResources:getPattern(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.rendering.PageDrawer:showAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
java.awt.Graphics2D:getClip()
org.apache.pdfbox.rendering.PageDrawer:setAnnotationFilter(org.apache.pdfbox.pdmodel.interactive.annotation.AnnotationFilter)
org.apache.pdfbox.rendering.PageDrawer:<init>(org.apache.pdfbox.rendering.PageDrawerParameters)
java.awt.RenderingHints:put(java.lang.Object,java.lang.Object)
java.awt.RenderingHints:<init>(java.util.Map)
org.apache.pdfbox.rendering.PDFRenderer:isBitonal(java.awt.Graphics2D)
java.awt.Graphics2D:rotate(double)
org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float,boolean,org.apache.pdfbox.rendering.PDFRenderer)
org.apache.pdfbox.rendering.PDFRenderer:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:close()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:restoreGraphicsState()
org.apache.pdfbox.pdmodel.interactive.PlainText$Paragraph:getText()
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter:processLines(java.util.List,boolean)
org.apache.pdfbox.pdmodel.interactive.PlainText$Paragraph:getLines(org.apache.pdfbox.pdmodel.font.PDFont,float,float)
org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:getFontSize()
org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:getFont()
org.apache.pdfbox.pdmodel.interactive.PlainText:getParagraphs()
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter:<init>(org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder)
org.apache.pdfbox.pdmodel.interactive.TextAlign:valueOf(int)
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getQ()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:endText()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:beginText()
org.apache.fontbox.util.BoundingBox:getHeight()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getAscent()
org.apache.pdfbox.pdmodel.interactive.form.PDListBox:getTopIndex()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(float)
java.lang.Math:floorDiv(int,int)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:getMaxLen()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isFileSelect()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isPassword()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isComb()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveGlyphHeight(org.apache.pdfbox.pdmodel.font.PDFont,int)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:getFontColor()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:getFont()
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:getFontSize()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:fill()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:addRect(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:applyPadding(org.apache.pdfbox.pdmodel.common.PDRectangle,float)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getDescent()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getCapHeight()
org.apache.pdfbox.pdmodel.font.PDFont:getFontMatrix()
org.apache.pdfbox.pdmodel.interactive.PlainText:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:isMultiLine()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:clip()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:saveGraphicsState()
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.common.PDRectangle:createRetranslatedRectangle()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.OutputStream,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeObject(org.apache.pdfbox.contentstream.operator.Operator)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColorSpaceStack(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:processOperator(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.pdfparser.PDFStreamParser:<init>(byte[])
org.apache.pdfbox.cos.COSArray:ofCOSIntegers(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isMultiSelect()
java.lang.String:compareTo(java.lang.String)
java.util.ArrayList:remove(java.lang.Object)
java.awt.geom.AffineTransform:getMatrix(double[])
java.util.ArrayList:add(int,java.lang.Object)
org.apache.pdfbox.pdmodel.PDDocument:<init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.pdfparser.PDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String)
java.awt.geom.AffineTransform:<init>()
org.apache.pdfbox.pdmodel.font.PDSimpleFont:<init>(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:outputCurlTemplate(java.awt.geom.Point2D$Double[],double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getIntermediateCurlTemplate(double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:addFirstIntermediateCurl(double,double,double,double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:addCornerCurl(double,double,double,double,double,double,double,boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:sine(double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:cosine(double,double)
java.lang.Math:atan2(double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:computeParamsPolygon(double,double,double,double,double,double[])
java.awt.geom.Point2D$Double:distance(java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getPolygonCloudRadius()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getEllipseCloudRadius()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:lineTo(java.awt.geom.Point2D$Double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:moveTo(java.awt.geom.Point2D$Double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getPositivePolygon(java.awt.geom.Point2D$Double[])
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:removeZeroLengthSegments(java.awt.geom.Point2D$Double[])
java.awt.geom.AffineTransform:transform(java.awt.geom.Point2D,java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.common.PDRange:getMax()
javax.imageio.stream.ImageInputStream:readBits(int)
org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:convertToRGB(float[])
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getBackground()
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getColorSpace()
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:edgeEquationValue(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.Line:<init>(java.awt.Point,java.awt.Point,float[],float[])
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:overlaps(java.awt.geom.Point2D,java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:calcDeg(java.awt.geom.Point2D[])
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:getArea(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)
float[][]:clone()
java.awt.geom.Point2D[]:clone()
java.lang.Double:valueOf(double)
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getDecodeValues()
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getCOSObject()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:applyColorKeyMask(java.awt.image.BufferedImage,java.awt.image.BufferedImage)
java.awt.image.WritableRaster:setDataElements(int,int,java.lang.Object)
org.apache.pdfbox.filter.DecodeOptions:isFilterSubsampled()
org.apache.pdfbox.filter.DecodeOptions:setSourceRegion(java.awt.Rectangle)
org.apache.pdfbox.filter.DecodeOptions:<init>(int)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getDecodeArray(org.apache.pdfbox.pdmodel.graphics.image.PDImage)
java.awt.image.DataBufferByte:getData()
java.awt.Rectangle:<init>(int,int,int,int)
java.awt.image.BufferedImage:getTransparency()
java.awt.color.ColorSpace:getNumComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getPDStream()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:<init>(org.apache.pdfbox.pdmodel.PDDocument)
java.awt.color.ColorSpace:getType()
java.awt.image.ColorModel:getColorSpace()
java.awt.image.BufferedImage:getColorModel()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:estCompressSum(byte[])
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:pngFilterSub(int,int)
java.lang.System:getProperty(java.lang.String,java.lang.String)
java.io.ByteArrayOutputStream:size()
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:extractFromTiff(org.apache.pdfbox.io.RandomAccessRead,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:buildTransparencyMaskFromIndexedData(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:setupIndexedColorSpace(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$Chunk,org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:buildImageObject(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:crc(byte[],int,int)
java.awt.image.Raster:getNumDataElements()
javax.imageio.ImageReader:readRaster(int,javax.imageio.ImageReadParam)
javax.imageio.ImageIO:setUseCache(boolean)
org.apache.logging.log4j.Logger:info(java.lang.String)
java.io.ByteArrayInputStream:reset()
javax.imageio.stream.ImageInputStream:close()
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getNumComponentsFromImageMetadata(javax.imageio.ImageReader)
javax.imageio.ImageReader:getHeight(int)
javax.imageio.ImageReader:getWidth(int)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory$Dimensions:<init>()
javax.imageio.ImageReader:setInput(java.lang.Object)
javax.imageio.ImageIO:createImageInputStream(java.lang.Object)
org.apache.pdfbox.filter.Filter:findRasterReader(java.lang.String,java.lang.String)
java.awt.image.BufferedImage:setData(java.awt.image.Raster)
java.awt.image.BufferedImage:getAlphaRaster()
java.lang.UnsupportedOperationException:<init>(java.lang.String)
java.awt.image.ColorModel:hasAlpha()
java.awt.color.ColorSpace:isCS_sRGB()
java.awt.image.ColorModel:getNumComponents()
javax.imageio.stream.ImageOutputStream:close()
javax.imageio.ImageWriter:write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)
javax.imageio.IIOImage:<init>(java.awt.image.RenderedImage,java.util.List,javax.imageio.metadata.IIOMetadata)
org.w3c.dom.Element:setAttribute(java.lang.String,java.lang.String)
java.lang.Integer:toString(int)
org.w3c.dom.Element:getElementsByTagName(java.lang.String)
javax.imageio.ImageWriter:getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)
javax.imageio.ImageTypeSpecifier:<init>(java.awt.image.RenderedImage)
javax.imageio.ImageWriteParam:setCompressionQuality(float)
javax.imageio.ImageWriteParam:setCompressionMode(int)
javax.imageio.ImageWriter:setOutput(java.lang.Object)
javax.imageio.ImageIO:createImageOutputStream(java.lang.Object)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getJPEGImageWriter()
java.awt.image.ColorConvertOp:filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:toUnicode(java.lang.String)
java.util.Map:entrySet()
java.util.Collections:max(java.util.Collection)
java.util.Collections:min(java.util.Collection)
org.apache.pdfbox.pdmodel.font.encoding.Encoding:getCodeToNameMap()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFontEmbedder:getFontEncoding()
org.apache.logging.log4j.Logger:warn(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getTrueTypeFont()
org.apache.pdfbox.pdmodel.font.PDType0Font:codeToCID(int)
org.apache.pdfbox.pdmodel.font.PDFont:toUnicode(int)
org.apache.fontbox.cmap.CMap:toCID(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getCMap()
org.apache.pdfbox.pdmodel.font.FontMapperImpl:createFontInfoByName(java.util.List)
java.io.File:canWrite()
java.io.File:isDirectory()
java.io.File:<init>(java.lang.String)
org.apache.logging.log4j.Logger:trace(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
org.apache.fontbox.ttf.FontHeaders:getFontSubFamily()
org.apache.fontbox.ttf.FontHeaders:getFontFamily()
org.apache.logging.log4j.Logger:isTraceEnabled()
org.apache.fontbox.ttf.FontHeaders:getNonOtfTableGCID142()
org.apache.pdfbox.pdmodel.font.CIDSystemInfo:<init>(java.lang.String,java.lang.String,int)
org.apache.fontbox.ttf.FontHeaders:getOtfSupplement()
org.apache.fontbox.ttf.FontHeaders:getOtfOrdering()
org.apache.fontbox.ttf.FontHeaders:getOtfRegistry()
org.apache.fontbox.ttf.FontHeaders:isOpenTypePostScript()
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getPanose()
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getCodePageRange2()
org.apache.fontbox.ttf.OS2WindowsMetricsTable:getCodePageRange1()
org.apache.fontbox.ttf.FontHeaders:getOS2Windows()
org.apache.fontbox.ttf.FontHeaders:getHeaderMacStyle()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:createFSIgnored(java.io.File,org.apache.pdfbox.pdmodel.font.FontFormat,java.lang.String)
org.apache.fontbox.ttf.FontHeaders:getName()
org.apache.fontbox.ttf.FontHeaders:getError()
org.apache.pdfbox.pdmodel.font.PDType0Font:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,boolean,boolean,boolean)
java.lang.Iterable:forEach(java.util.function.Consumer)
java.util.function.Consumer:accept(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.PDResources:getFontNames()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getNormalAppearanceStream()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:writeXML(java.io.Writer)
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:getFDF()
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:setCatalog(org.apache.pdfbox.pdmodel.fdf.FDFCatalog)
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:<init>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:logIfStrongEncryptionMissing()
java.math.BigInteger:intValue()
java.math.BigInteger:mod(java.math.BigInteger)
java.math.BigInteger:<init>(java.lang.String)
java.math.BigInteger:<init>(int,byte[])
javax.crypto.Cipher:doFinal(byte[])
java.security.MessageDigest:digest(byte[])
org.apache.pdfbox.pdmodel.encryption.MessageDigests:getSHA256()
java.io.ByteArrayOutputStream:reset()
java.io.ByteArrayOutputStream:write(byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeEncryptedKeyRev234(byte[],byte[],int,byte[],boolean,int,int)
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:getCOSObject()
org.bouncycastle.jce.provider.BouncyCastleProvider:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSArray:getInt(int,int)
java.lang.StringBuilder:insert(int,char)
java.lang.StringBuilder:insert(int,java.lang.String)
java.lang.StringBuilder:appendCodePoint(int)
java.lang.Integer:signum(int)
org.apache.pdfbox.cos.COSArray:addAll(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:toLongName(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.PDResources:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getDefaultResources()
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:<init>(org.apache.pdfbox.pdmodel.PDDocument)
java.util.function.Consumer:accept(java.util.Set)
org.apache.pdfbox.pdmodel.interactive.form.PDField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getValue()
org.apache.pdfbox.pdfwriter.COSWriter:writeReference(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.COSWriter:addObjectToWrite(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:calculateRanges(int[])
org.apache.pdfbox.pdfparser.xref.FreeXReference:getReferencedKey()
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:writeEOL()
org.apache.pdfbox.pdfwriter.COSWriter:addXRefEntry(org.apache.pdfbox.pdfparser.xref.XReferenceEntry)
org.apache.pdfbox.pdfparser.xref.NormalXReference:<init>(long,org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:getPos()
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSNull(java.io.OutputStream)
org.apache.pdfbox.pdfwriter.compress.COSObjectPool:getObject(org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.pdfwriter.compress.COSObjectPool:put(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getCOSObject()
org.apache.logging.log4j.Logger:error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)
java.io.IOException:getClass()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)
java.io.InputStream:readNBytes(int)
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.cos.COSString,long,java.io.IOException)
org.apache.pdfbox.cos.COSDictionary:forEach(java.util.function.BiConsumer)
java.util.function.BiConsumer:accept(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.cos.COSStream:<init>(org.apache.pdfbox.io.RandomAccessStreamCache,org.apache.pdfbox.io.RandomAccessReadView)
org.apache.pdfbox.pdfparser.EndstreamFilterStream:calculateLength()
org.apache.pdfbox.pdfparser.EndstreamFilterStream:filter(byte[],int,int)
org.apache.pdfbox.pdfparser.COSParser:isString(byte[])
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForLastEOFMarker()
org.apache.pdfbox.pdfparser.COSParser:readObjectMarker()
java.util.NoSuchElementException:<init>()
org.apache.pdfbox.pdfparser.PDFXrefStreamParser$ObjectNumbers:<init>(org.apache.pdfbox.cos.COSArray)
java.util.Arrays:toString(int[])
java.util.List:remove(java.lang.Object)
org.apache.pdfbox.pdfparser.BruteForceParser:searchNearestValue(java.util.List,long)
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForXRefStreams()
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForXRefTables()
org.apache.pdfbox.pdfparser.BruteForceParser:<init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.pdfparser.COSParser)
org.apache.pdfbox.pdfparser.BaseParser:getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.pdfparser.BaseParser:getObjectKey(long,int)
org.apache.pdfbox.pdfparser.BaseParser:readExpectedChar(char)
org.apache.pdfbox.pdfparser.BaseParser:isDigit()
org.apache.pdfbox.pdfparser.BaseParser:skipSpaces()
org.apache.pdfbox.pdfparser.BaseParser:decodeBuffer(java.io.ByteArrayOutputStream)
org.apache.pdfbox.pdfparser.BaseParser:isHexDigit(char)
org.apache.pdfbox.pdfparser.BaseParser:isEndOfName(int)
org.apache.pdfbox.pdmodel.PDPage:setAnnotations(java.util.List)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:getParent()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setPopup(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:setParent(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getPopup()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getPage()
org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo:setDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination)
org.apache.pdfbox.pdmodel.interactive.action.PDAction:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:getPage()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:findNamedDestinationPage(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setAction(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo:getDestination()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getAction()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getDestination()
org.apache.pdfbox.cos.COSDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDPage:getAnnotations()
org.apache.pdfbox.pdmodel.PDPage:setRotation(int)
org.apache.pdfbox.pdmodel.PDPage:setMediaBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.PDPage:setCropBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.PDDocument:addPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDPage:setContents(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.pdfbox.pdmodel.PDPage:getContents()
org.apache.pdfbox.multipdf.Splitter:createNewDocument()
org.apache.pdfbox.multipdf.Splitter:splitAtPage(int)
java.io.BufferedOutputStream:close()
org.apache.pdfbox.pdmodel.PDDocument:save(java.io.OutputStream,org.apache.pdfbox.pdfwriter.compress.CompressParameters)
java.io.BufferedOutputStream:<init>(java.io.OutputStream)
java.io.FileOutputStream:<init>(java.io.File)
java.io.File:getName()
java.io.File:length()
java.io.File:exists()
org.apache.pdfbox.Loader:loadPDF(java.io.File,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setDisplayDocTitle(boolean)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:displayDocTitle()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setCenterWindow(boolean)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:centerWindow()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setFitWindow(boolean)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:fitWindow()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setHideWindowUI(boolean)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:hideWindowUI()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setHideMenubar(boolean)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:hideMenubar()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setHideToolbar(boolean)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:hideToolbar()
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeInto(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.multipdf.PDFCloneUtility,java.util.Set)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:usesUserProperties()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:setSuspect(boolean)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:isSuspect()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:setMarked(boolean)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setIDTree(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)
org.apache.pdfbox.multipdf.PDFMergerUtility:getIDTreeAsMap(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)
org.apache.pdfbox.pdmodel.PDStructureElementNameTreeNode:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getIDTree()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setK(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.multipdf.PDFMergerUtility:updateParentEntry(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.multipdf.PDFMergerUtility:hasOnlyDocumentsOrParts(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getK()
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:setLowerLimit(java.lang.Integer)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:setUpperLimit(java.lang.Integer)
java.util.Collections:sort(java.util.List)
org.apache.pdfbox.multipdf.PDFMergerUtility:updatePageReferences(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.cos.COSArray,java.util.Map)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDParentTreeValue:getCOSObject()
java.util.Map:values()
org.apache.pdfbox.pdmodel.PDPageTree:indexOf(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setOpenAction(org.apache.pdfbox.pdmodel.common.PDDestinationOrAction)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getOpenAction()
java.util.function.Consumer:accept(int,java.util.List)
org.apache.pdfbox.pdmodel.PDPage:setStructParents(int)
org.apache.pdfbox.pdmodel.PDPage:getStructParents()
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getKids()
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getNumbers()
org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:<init>(org.apache.pdfbox.pdmodel.PDPageTree,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:addOutputIntent(org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent)
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getOutputConditionIdentifier()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getOutputIntents()
java.util.ArrayList:remove(int)
org.apache.pdfbox.pdmodel.PDPageTree:getCount()
org.apache.pdfbox.pdmodel.PageMode:stringValue()
org.apache.pdfbox.pdmodel.PageMode:fromString(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:setLastChild(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setPreviousSibling(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setNextSibling(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getNextSibling()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.PDFCloneUtility:cloneMergeCOSBase(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.multipdf.PDFMergerUtility:acroFormJoinFieldsMode(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getAcroForm()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:xfaIsDynamic()
java.awt.geom.AffineTransform:translate(double,double)
org.apache.pdfbox.multipdf.Overlay:createContentStreamList(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRowType6()
org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRowType4()
org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRowType2()
org.apache.pdfbox.filter.CCITTFaxEncoderStream:write(int,int)
org.apache.pdfbox.cos.COSUpdateState:getOriginDocumentState()
java.util.LinkedHashSet:contains(java.lang.Object)
org.apache.pdfbox.contentstream.PDFStreamEngine:processType3Stream(org.apache.pdfbox.pdmodel.font.PDType3CharProc,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setAnnotations(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationUnderline:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStrikeOut:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquiggly:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSound:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLink:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationHighlight:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFileAttachment:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setFields(java.util.List)
org.apache.logging.log4j.util.Supplier:get(org.w3c.dom.Node)
org.apache.pdfbox.pdmodel.fdf.FDFField:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setID(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.cos.COSString:parseHex(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:setFile(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:<init>()
org.apache.pdfbox.pdmodel.PDPage:removePageResourceFromCache()
org.apache.pdfbox.text.PDFTextStripper:endPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.text.PDFTextStripper:writePage()
org.apache.pdfbox.text.LegacyPDFStreamEngine:processPage(org.apache.pdfbox.pdmodel.PDPage)
java.util.HashMap:clear()
java.util.ArrayList:ensureCapacity(int)
org.apache.pdfbox.text.PDFTextStripper:fillBeadRectangles(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.text.PDFTextStripper:startPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDDocument:getPage(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:getPageNumber()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getAction()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getDestination()
java.awt.Graphics2D:setClip(java.awt.Shape)
java.awt.Rectangle:<init>()
java.awt.geom.PathIterator:isDone()
java.awt.geom.Area:getPathIterator(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite:<init>(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode,float)
java.awt.AlphaComposite:getInstance(int,float)
org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:getDashArray()
org.apache.pdfbox.rendering.SoftMask:<init>(java.awt.Paint,java.awt.image.BufferedImage,java.awt.geom.Rectangle2D,org.apache.pdfbox.pdmodel.graphics.color.PDColor,org.apache.pdfbox.pdmodel.common.function.PDFunction)
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getTransferFunction()
org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:getBounds()
org.apache.pdfbox.rendering.PageDrawer:adjustImage(java.awt.image.BufferedImage)
java.awt.Graphics:dispose()
java.awt.Graphics:drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:getImage()
org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:<init>(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup,boolean,org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getInitialTransformationMatrix()
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getBackdropColor()
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getSubType()
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:getGroup()
org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:getShading()
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getUnderlyingColorSpace()
org.apache.pdfbox.rendering.TilingPaintFactory:create(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getPattern(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
java.awt.Color:<init>(float,float,float)
org.apache.pdfbox.rendering.PageDrawer:clampColor(float)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getColorantName()
java.awt.Color:<init>(int,int,int,int)
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:getCOSObject()
org.apache.pdfbox.rendering.PageDrawer:drawPage(java.awt.Graphics2D,org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.rendering.PDFRenderer:createPageDrawer(org.apache.pdfbox.rendering.PageDrawerParameters)
org.apache.pdfbox.rendering.PageDrawerParameters:<init>(org.apache.pdfbox.rendering.PDFRenderer,org.apache.pdfbox.pdmodel.PDPage,boolean,org.apache.pdfbox.rendering.RenderDestination,java.awt.RenderingHints,float)
org.apache.pdfbox.rendering.PDFRenderer:createDefaultRenderingHints(java.awt.Graphics2D)
org.apache.pdfbox.rendering.PDFRenderer:transform(java.awt.Graphics2D,int,org.apache.pdfbox.pdmodel.common.PDRectangle,float,float)
java.awt.Graphics2D:drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.PDFRenderer:hasBlendMode(org.apache.pdfbox.pdmodel.PDPage)
java.lang.String:makeConcatWithConstants(float,float,float)
org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float,boolean)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:close()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:restoreGraphicsState()
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter:format()
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:build()
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:textAlign(int)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:getTextAlign(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:initialOffset(float,float)
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:wrapLines(boolean)
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:width(float)
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:text(org.apache.pdfbox.pdmodel.interactive.PlainText)
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:style(org.apache.pdfbox.pdmodel.interactive.AppearanceStyle)
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$Builder:<init>(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:setLeading(float)
org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:setFontSize(float)
org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:setFont(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.pdmodel.interactive.AppearanceStyle:<init>()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:insertGeneratedListboxAppearance(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,org.apache.pdfbox.pdmodel.common.PDRectangle,org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:insertGeneratedCombAppearance(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:shallComb()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveDescent(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveCapHeight(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:writeTo(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:insertGeneratedListboxSelectionHighlight(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:calculateFontSize(org.apache.pdfbox.pdmodel.font.PDFont,org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:getFontName()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:clip()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:saveGraphicsState()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getBorderStyle()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveBoundingBox(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,java.io.OutputStream)
org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeObject(java.lang.Object)
org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:closeAndStroke()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLineWidth(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getColor(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.util.Matrix:getRotateInstance(double,float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getRotation()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getAppearanceCharacteristics()
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:processAppearanceStringOperators(byte[])
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setSelectedOptionsIndex(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:getPairableItems(org.apache.pdfbox.cos.COSBase,int)
org.apache.pdfbox.cos.COSName:compareTo(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSArray:remove(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:writeAffineTransform(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.PDPageContentStream:restoreGraphicsState()
org.apache.pdfbox.pdmodel.common.PDStream:createOutputStream()
org.apache.pdfbox.cos.COSArray:add(int,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:isPrepend()
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:isOverwrite()
org.apache.pdfbox.pdmodel.PDPage:setResources(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getOpenCount()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDocument:<init>(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfparser.PDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String)
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:closePath()
java.lang.String:toUpperCase(java.util.Locale)
java.lang.Integer:toString(int,int)
org.apache.pdfbox.pdmodel.font.PDType1Font:getFontBoxFont()
org.apache.pdfbox.pdmodel.font.PDType1Font:<init>(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
java.awt.geom.PathIterator:next()
java.awt.geom.PathIterator:currentSegment(double[])
java.awt.geom.Ellipse2D$Double:getPathIterator(java.awt.geom.AffineTransform,double)
java.awt.geom.Ellipse2D$Double:<init>(double,double,double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:cloudyPolygonImpl(java.awt.geom.Point2D$Double[],boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getRectangle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:<init>()
org.apache.pdfbox.pdmodel.graphics.shading.Patch:getFlag3Color()
org.apache.pdfbox.pdmodel.graphics.shading.Patch:getFlag2Color()
org.apache.pdfbox.pdmodel.graphics.shading.Patch:getFlag1Color()
org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:readPatch(javax.imageio.stream.ImageInputStream,boolean,java.awt.geom.Point2D[],float[][],long,long,org.apache.pdfbox.pdmodel.common.PDRange,org.apache.pdfbox.pdmodel.common.PDRange,org.apache.pdfbox.pdmodel.common.PDRange[],org.apache.pdfbox.util.Matrix,java.awt.geom.AffineTransform,int)
org.apache.logging.log4j.Logger:error(java.lang.Object)
org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShading,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:<init>(java.awt.geom.Point2D[],float[][])
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getBitsPerComponent()
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getBitsPerCoordinate()
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getNumberOfColorComponents()
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getDecodeForParameter(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getFunctionsArray()
org.apache.pdfbox.pdmodel.graphics.shading.CoordinateColorPair:<init>(java.awt.geom.Point2D,float[])
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getBernsteinPolynomials(int)
org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve:getCubicBezierCurve()
org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve:getPoints(int)
java.awt.image.DataBuffer:getDataType()
org.apache.pdfbox.filter.DecodeOptions:<init>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:fromAny(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster,org.apache.pdfbox.cos.COSArray,java.awt.Rectangle,int,int,int)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:from8bit(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster,java.awt.Rectangle,int,int,int)
java.util.Arrays:equals(float[],float[])
java.awt.image.Raster:createInterleavedRaster(int,int,int,int,java.awt.Point)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:from1Bit(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.Rectangle,int,int,int)
java.awt.Rectangle:getHeight()
java.awt.Rectangle:getWidth()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:clipRegion(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.Rectangle)
java.awt.Graphics2D:setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)
java.awt.image.ImagingOpException:getMessage()
java.awt.image.AffineTransformOp:filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)
java.awt.image.AffineTransformOp:<init>(java.awt.geom.AffineTransform,int)
java.awt.image.BufferedImage:getRGB(int,int,int,int,int[],int,int)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:preparePredictorPDImage(java.io.ByteArrayOutputStream,int)
java.util.zip.Deflater:end()
java.util.zip.DeflaterOutputStream:close()
java.util.zip.DeflaterOutputStream:write(byte[],int,int)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:chooseDataRowToWrite()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:pngFilterPaeth(int,int,int,int)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:pngFilterAverage(int,int,int)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:pngFilterUp(int,int)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:copyShortsToBytes(short[],int,byte[],byte[],int)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:copyIntToBytes(int[],int,byte[],byte[],int)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:copyImageBytes(byte[],int,byte[],byte[],int)
java.util.Arrays:fill(byte[],byte)
java.awt.image.WritableRaster:getDataElements(int,int,int,int,java.lang.Object)
java.util.zip.DeflaterOutputStream:<init>(java.io.OutputStream,java.util.zip.Deflater)
java.util.zip.Deflater:<init>(int)
org.apache.pdfbox.filter.Filter:getCompressionLevel()
java.awt.image.WritableRaster:getTransferType()
java.awt.image.ColorModel:getNumColorComponents()
javax.imageio.stream.MemoryCacheImageOutputStream:close()
javax.imageio.stream.MemoryCacheImageOutputStream:flush()
javax.imageio.stream.MemoryCacheImageOutputStream:getBitOffset()
javax.imageio.stream.MemoryCacheImageOutputStream:writeBits(long,int)
javax.imageio.stream.MemoryCacheImageOutputStream:<init>(java.io.OutputStream)
java.awt.image.ColorModel:getPixelSize()
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromRandomAccessImpl(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.io.RandomAccessRead,int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:buildIndexImage(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:checkChunkSane(org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$Chunk)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$Chunk:<init>()
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState:<init>()
org.apache.pdfbox.util.filetypedetector.ByteTrie$ByteTrieNode:getValue()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setDecode(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:retrieveDimensions(java.io.ByteArrayInputStream)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getAlphaImage(java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getColorSpaceFromAWT(java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:encodeImageToJPEGStream(java.awt.image.BufferedImage,float,int)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:getColorImage(java.awt.image.BufferedImage)
java.lang.Float:floatToIntBits(float)
java.awt.image.WritableRaster:getHeight()
java.awt.image.WritableRaster:getWidth()
org.apache.pdfbox.cos.COSArray:toCOSNameStringList()
java.io.BufferedReader:close()
java.io.BufferedReader:readLine()
java.io.BufferedReader:ready()
java.io.BufferedReader:<init>(java.io.Reader)
java.io.InputStreamReader:<init>(java.io.InputStream,java.nio.charset.Charset)
org.apache.pdfbox.pdmodel.font.PDType3CharProc:parseWidth(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.fontbox.type1.Type1Font:getBlueValues()
org.apache.fontbox.type1.Type1Font:getItalicAngle()
org.apache.fontbox.type1.Type1Font:getFamilyName()
org.apache.fontbox.type1.Type1Font:getName()
org.apache.fontbox.type1.Type1Font:getFontBBox()
org.apache.fontbox.type1.Type1Font:getEncoding()
java.util.Map:forEach(java.util.function.BiConsumer)
org.apache.pdfbox.pdmodel.font.encoding.Encoding:add(int,java.lang.String)
java.util.function.BiConsumer:accept(org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding)
org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:<init>()
org.apache.fontbox.encoding.Encoding:getCodeToNameMap()
org.apache.pdfbox.pdmodel.font.PDCIDFont:getDefaultWidth()
org.apache.fontbox.ttf.CmapSubtable:getPlatformEncodingId()
org.apache.fontbox.ttf.CmapSubtable:getPlatformId()
org.apache.fontbox.ttf.CmapTable:getCmaps()
org.apache.fontbox.ttf.TrueTypeFont:getCmap()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFontEmbedder:setWidths(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.font.encoding.GlyphList)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isFlagBitOn(int)
org.apache.fontbox.ttf.OpenTypeFont:isPostScript()
org.apache.pdfbox.pdmodel.font.PDType0Font:toUnicode(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:codeToCID(int)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:setProvider(org.apache.pdfbox.pdmodel.font.FontProvider)
java.io.BufferedWriter:newLine()
java.io.File:getAbsolutePath()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getBytes()
org.apache.pdfbox.pdmodel.font.CIDSystemInfo:getSupplement()
org.apache.pdfbox.pdmodel.font.CIDSystemInfo:getOrdering()
org.apache.pdfbox.pdmodel.font.CIDSystemInfo:getRegistry()
java.io.File:<init>(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:isBadPath(java.lang.String)
org.apache.logging.log4j.util.Supplier:get(java.io.File)
org.apache.logging.log4j.Logger:trace(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)
org.apache.fontbox.type1.Type1Font:getWeight()
java.io.FileInputStream:close()
org.apache.fontbox.type1.Type1Font:createWithPFB(java.io.InputStream)
java.io.FileInputStream:<init>(java.io.File)
org.apache.fontbox.ttf.TrueTypeCollection:processAllFontHeaders(java.io.File,org.apache.fontbox.ttf.TrueTypeCollection$TrueTypeFontHeadersProcessor)
org.apache.fontbox.ttf.TrueTypeCollection$TrueTypeFontHeadersProcessor:process(org.apache.pdfbox.pdmodel.font.FileSystemFontProvider,java.io.File,java.lang.String)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:addTrueTypeFontImpl(org.apache.fontbox.ttf.FontHeaders,java.io.File,java.lang.String)
org.apache.fontbox.ttf.OTFParser:parseTableHeaders(org.apache.pdfbox.io.RandomAccessRead)
java.lang.String:toLowerCase()
java.io.File:getPath()
org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getDefaultAppearance()
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:resolveNonRootField(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary,java.util.Map)
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:addFontFromWidget(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.cos.COSDictionary:getString(org.apache.pdfbox.cos.COSName,java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:writeXML(java.io.Writer)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:getCatalog()
java.util.Deque:add(java.lang.Object)
java.util.function.Consumer:accept(java.util.Deque)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:getDocument()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeHash2B(byte[],byte[],byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:concat(byte[],byte[],byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:truncate127(byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:adjustUserKey(byte[])
java.security.MessageDigest:isEqual(byte[],byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeUserPassword(byte[],byte[],int,byte[],int,int,boolean)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeRC4key(byte[],int,int)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setCryptFilterDictionary(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:tagging(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:changeDisplayProperties(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:inappropriateForCanonical(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:inappropriateForPlainText(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:surrogateCodePoint(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:nonCharacterCodePoint(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:privateUse(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:nonAsciiControl(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:asciiControl(char)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:nonAsciiSpace(char)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:isPermissionBitOn(int)
org.bouncycastle.asn1.cms.KeyTransRecipientInfo:<init>(org.bouncycastle.asn1.cms.RecipientIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1OctetString)
org.bouncycastle.asn1.cms.RecipientIdentifier:<init>(org.bouncycastle.asn1.cms.IssuerAndSerialNumber)
org.bouncycastle.asn1.DEROctetString:<init>(byte[])
javax.crypto.Cipher:init(int,java.security.Key)
java.security.cert.X509Certificate:getPublicKey()
java.lang.RuntimeException:<init>(java.lang.String,java.lang.Throwable)
javax.crypto.Cipher:getInstance(java.lang.String,java.security.Provider)
org.apache.pdfbox.pdmodel.encryption.SecurityProvider:getProvider()
org.bouncycastle.asn1.ASN1ObjectIdentifier:getId()
org.bouncycastle.asn1.x509.AlgorithmIdentifier:getAlgorithm()
org.bouncycastle.asn1.cms.IssuerAndSerialNumber:<init>(org.bouncycastle.asn1.x500.X500Name,java.math.BigInteger)
org.bouncycastle.asn1.ASN1Integer:getValue()
org.bouncycastle.asn1.x509.TBSCertificate:getSerialNumber()
org.bouncycastle.asn1.x509.TBSCertificate:getIssuer()
org.bouncycastle.asn1.x509.SubjectPublicKeyInfo:getAlgorithm()
org.bouncycastle.asn1.x509.TBSCertificate:getSubjectPublicKeyInfo()
org.bouncycastle.asn1.ASN1InputStream:close()
org.bouncycastle.asn1.x509.TBSCertificate:getInstance(java.lang.Object)
org.bouncycastle.asn1.ASN1InputStream:readObject()
org.bouncycastle.asn1.ASN1InputStream:<init>(byte[])
java.security.cert.X509Certificate:getTBSCertificate()
org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:<init>()
org.apache.pdfbox.cos.COSBoolean:getValue()
org.apache.pdfbox.cos.COSFloat:floatValue()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:create(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getSize()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getBitsPerSample()
org.apache.pdfbox.cos.COSArray:getInt(int)
org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:makeRomanLabel(int)
org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:makeLetterLabel(int)
org.apache.pdfbox.cos.COSArray:getString(int,java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:getZ()
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:getY()
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:getX()
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:isStencil()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:createColorSpace(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDocument:assignAcroFormDefaultResource(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDocument:assignAppearanceDictionary(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDocument:assignSignatureRectangle(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.cos.COSDictionary)
java.util.Set:stream()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setNormalAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:generatePartialName()
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getSignature()
org.apache.pdfbox.cos.COSNull:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.pdfwriter.COSWriter:writeDictionary(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:<init>(java.io.InputStream,int[])
org.apache.pdfbox.pdfparser.xref.FreeXReference:getThirdColumnValue()
org.apache.pdfbox.pdfparser.xref.FreeXReference:getSecondColumnValue()
org.apache.pdfbox.pdfparser.PDFXRefStream:writeNumber(java.io.OutputStream,long,int)
java.util.TreeSet:iterator()
java.util.TreeSet:addAll(java.util.Collection)
java.util.TreeSet:add(java.lang.Object)
java.util.TreeSet:<init>()
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:writeCRLF()
org.apache.pdfbox.pdfparser.xref.FreeXReference:<init>(org.apache.pdfbox.cos.COSObjectKey,long)
org.apache.pdfbox.pdfparser.xref.NormalXReference:getReferencedKey()
java.util.stream.Stream:sorted()
org.apache.pdfbox.pdfwriter.COSWriter:doWriteObject(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSArray(java.io.OutputStream,org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSName(java.io.OutputStream,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSBoolean(java.io.OutputStream,org.apache.pdfbox.cos.COSBoolean)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSInteger(java.io.OutputStream,org.apache.pdfbox.cos.COSInteger)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSFloat(java.io.OutputStream,org.apache.pdfbox.cos.COSFloat)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSString(java.io.OutputStream,org.apache.pdfbox.cos.COSString)
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getKey(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:contains(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeObjectReference(java.io.OutputStream,org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:addElements(java.util.Iterator)
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:addObjectToPool(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.compress.CompressParameters:<init>(int)
org.apache.pdfbox.cos.COSBase:setDirect(boolean)
org.apache.pdfbox.cos.COSObjectKey:getStreamIndex()
java.util.stream.Stream:count()
java.util.stream.Stream:distinct()
org.apache.pdfbox.pdfparser.PDFObjectStreamParser:privateReadObjectOffsets()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decryptArray(org.apache.pdfbox.cos.COSArray,long,long)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decryptStream(org.apache.pdfbox.cos.COSStream,long,long)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decryptString(org.apache.pdfbox.cos.COSString,long,long)
org.apache.pdfbox.cos.COSDocument:createCOSStream(org.apache.pdfbox.cos.COSDictionary,long,long)
org.apache.pdfbox.cos.COSDictionary:setLong(org.apache.pdfbox.cos.COSName,long)
org.apache.pdfbox.pdfparser.COSParser:readUntilEndStream(org.apache.pdfbox.pdfparser.EndstreamFilterStream)
org.apache.pdfbox.pdfparser.EndstreamFilterStream:<init>()
org.apache.pdfbox.pdfparser.COSParser:validateStreamLength(long)
org.apache.pdfbox.pdfparser.COSParser:getLength(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForObjects()
org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial:<init>()
org.apache.pdfbox.pdfparser.PDFObjectStreamParser:privateReadObjectNumbers()
java.util.HashMap:forEach(java.util.function.BiConsumer)
java.util.function.BiConsumer:accept(java.util.Map)
java.util.HashMap:entrySet()
org.apache.pdfbox.pdfparser.XrefParser:findObjectKey(org.apache.pdfbox.cos.COSObjectKey,long,java.util.Map)
org.apache.pdfbox.pdfparser.PDFXrefStreamParser:close()
org.apache.pdfbox.pdfparser.XrefTrailerResolver:setXRef(org.apache.pdfbox.cos.COSObjectKey,long)
org.apache.pdfbox.pdfparser.PDFXrefStreamParser:parseValue(byte[],int,int)
org.apache.pdfbox.pdfparser.PDFXrefStreamParser$ObjectNumbers:next()
org.apache.pdfbox.pdfparser.PDFXrefStreamParser:readNextValue(byte[])
org.apache.pdfbox.pdfparser.PDFXrefStreamParser$ObjectNumbers:hasNext()
org.apache.pdfbox.pdfparser.PDFXrefStreamParser:initParserValues(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj:<init>()
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForXRef(long)
org.apache.pdfbox.pdfparser.COSParser:getBruteForceParser()
java.lang.StringBuilder:deleteCharAt(int)
org.apache.pdfbox.cos.COSInteger:isValid()
org.apache.pdfbox.pdfparser.BaseParser:parseCOSDictionaryValue()
org.apache.pdfbox.pdfparser.BaseParser:parseCOSName()
org.apache.pdfbox.cos.COSArray:set(int,org.apache.pdfbox.pdmodel.common.COSObjectable)
java.util.function.BiConsumer:accept(org.apache.pdfbox.multipdf.Splitter,java.util.Map)
java.util.function.BiConsumer:accept(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.Splitter:cloneTreeElement(java.util.Map,java.util.Map,int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getStructParent()
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getStructParents()
org.apache.pdfbox.multipdf.Splitter$KCloner:createArrayClone(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.Splitter:processAnnotations(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDDocument:importPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.multipdf.Splitter:getDestinationDocument()
org.apache.pdfbox.multipdf.Splitter:createNewDocumentIfNecessary()
org.apache.pdfbox.pdmodel.PDDocument:save(java.io.File,org.apache.pdfbox.pdfwriter.compress.CompressParameters)
org.apache.pdfbox.Loader:loadPDF(java.io.File,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeViewerPreferences(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.multipdf.PDFCloneUtility)
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeLanguage(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog)
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeMarkInfo(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog)
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeIDTree(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeRoleMap(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.multipdf.PDFCloneUtility)
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeKEntries(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setParentTreeNextKey(int)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:setNumbers(java.util.Map)
org.apache.pdfbox.multipdf.PDFMergerUtility:updatePageReferences(org.apache.pdfbox.multipdf.PDFCloneUtility,java.util.Map,java.util.Map)
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeOpenAction(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.multipdf.PDFCloneUtility)
org.apache.pdfbox.multipdf.PDFMergerUtility:updateStructParentEntries(org.apache.pdfbox.pdmodel.PDPage,int)
org.apache.pdfbox.pdmodel.PDResources:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.PDFMergerUtility:getNumberTreeAsMap(org.apache.pdfbox.pdmodel.common.PDNumberTreeNode)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getParentTreeNextKey()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getParentTree()
org.apache.pdfbox.pdmodel.PDPageTree:iterator()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setParentTree(org.apache.pdfbox.pdmodel.common.PDNumberTreeNode)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:<init>(java.lang.Class)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setStructureTreeRoot(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:<init>()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getStructureTreeRoot()
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeOutputIntents(org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.multipdf.PDFCloneUtility)
org.apache.pdfbox.cos.COSArray:remove(int)
org.apache.pdfbox.pdmodel.PDDocument:getNumberOfPages()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setPageMode(org.apache.pdfbox.pdmodel.PageMode)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getPageMode()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:insertSiblingAfter(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setDocumentOutline(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getDocumentOutline()
org.apache.pdfbox.pdmodel.PDDocumentNameDestinationDictionary:getCOSObject()
org.apache.pdfbox.multipdf.PDFCloneUtility:cloneMerge(org.apache.pdfbox.pdmodel.common.COSObjectable,org.apache.pdfbox.pdmodel.common.COSObjectable)
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:getCOSObject()
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeAcroForm(org.apache.pdfbox.multipdf.PDFCloneUtility,org.apache.pdfbox.pdmodel.PDDocumentCatalog,org.apache.pdfbox.pdmodel.PDDocumentCatalog)
org.apache.pdfbox.multipdf.PDFMergerUtility:isDynamicXfa(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.multipdf.PDFCloneUtility:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.Overlay:createStream(java.lang.String)
org.apache.pdfbox.multipdf.Overlay:float2String(float)
org.apache.pdfbox.multipdf.Overlay:calculateAffineTransform(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.PDXObject,java.lang.String)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setMatrix(java.awt.geom.AffineTransform)
java.awt.geom.AffineTransform:rotate(double)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setFormType(int)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setResources(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.multipdf.Overlay$LayoutPage:<init>(org.apache.pdfbox.pdmodel.common.PDRectangle,org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.cos.COSDictionary,short)
org.apache.pdfbox.multipdf.Overlay:createCombinedContentStream(org.apache.pdfbox.cos.COSBase)
java.util.LinkedHashMap:size()
org.apache.pdfbox.filter.Predictor:calcSetBitSeq(int,int,int,int)
org.apache.pdfbox.filter.Predictor:getBitSeq(int,int,int)
javax.imageio.metadata.IIOMetadataNode:getElementsByTagName(java.lang.String)
org.apache.pdfbox.filter.CCITTFaxDecoderStream:decodeRow()
org.apache.pdfbox.filter.CCITTFaxEncoderStream:writeRun(int,boolean)
org.apache.pdfbox.filter.CCITTFaxEncoderStream:getNextRefChanges(int,boolean)
org.apache.pdfbox.filter.CCITTFaxEncoderStream:getNextChanges(int,boolean)
org.apache.pdfbox.cos.COSIncrement:updateDifferentOrigin(org.apache.pdfbox.cos.COSUpdateState)
org.apache.pdfbox.cos.COSIncrement:contains(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.util.DateConverter:toCalendar(org.apache.pdfbox.cos.COSString)
org.apache.pdfbox.contentstream.PDFStreamEngine:showFontGlyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector)
org.apache.pdfbox.contentstream.PDFStreamEngine:showType3Glyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDType3Font,int,org.apache.pdfbox.util.Vector)
org.apache.pdfbox.util.Vector:getY()
org.apache.pdfbox.util.Vector:getX()
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent:values()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:<init>(org.w3c.dom.Element)
org.apache.pdfbox.cos.COSDocument:<init>()
org.apache.pdfbox.pdfparser.COSParser:<init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String)
org.apache.pdfbox.contentstream.operator.DrawObject:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.text.TextPosition:combineDiacritic(java.lang.String)
java.lang.Character:isSurrogatePair(char,char)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.text.PDFTextStripper:processPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:findDestinationPage(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.rendering.PageDrawer:transferClip(java.awt.Graphics2D)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getCurrentClippingPaths()
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite:getInstance(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode,float)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getCOSObject()
java.awt.BasicStroke:<init>(float,int,int,float,float[],float)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getMiterLimit()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getLineJoin()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getLineCap()
org.apache.pdfbox.rendering.PageDrawer:getDashArray(org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern)
org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:getPhase()
java.awt.Stroke:createStrokedShape()
org.apache.pdfbox.rendering.PageDrawer:isAllZeroDash(float[])
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getLineDashPattern()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getLineWidth()
org.apache.pdfbox.rendering.PageDrawer:applySoftMaskToPaint(java.awt.Paint,org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getSoftMask()
org.apache.pdfbox.rendering.PageDrawer:getPaint(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getStrokingColor()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getNonStrokingColor()
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:getMatrix()
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getBBox()
java.awt.geom.GeneralPath:getPathIterator(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:getBaseEncoding()
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:getDifferences()
org.apache.pdfbox.rendering.PDFRenderer:renderPageToGraphics(int,java.awt.Graphics2D,float,float,org.apache.pdfbox.rendering.RenderDestination)
org.apache.pdfbox.rendering.PDFRenderer:renderImage(int,float,org.apache.pdfbox.rendering.ImageType,org.apache.pdfbox.rendering.RenderDestination)
java.lang.Enum:<init>(java.lang.String,int)
org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float)
java.io.ByteArrayOutputStream:close()
org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getBytesFromStream(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:writeToStream(byte[],org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:insertGeneratedAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,java.io.OutputStream)
java.util.List:subList(int,int)
org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeTokens(java.lang.Object[])
org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeTokens(java.util.List)
org.apache.pdfbox.pdfparser.PDFStreamParser:parse()
org.apache.pdfbox.pdfwriter.ContentStreamWriter:<init>(java.io.OutputStream)
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:copyNeededResourcesTo(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:closeAndStroke()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineWidth(float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getBorderColour()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getBackground()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:calculateMatrix(org.apache.pdfbox.pdmodel.common.PDRectangle,int)
org.apache.pdfbox.pdmodel.common.PDRectangle:<init>(float,float)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:resolveRotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getDocument()
org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString:<init>(org.apache.pdfbox.cos.COSString,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getScriptingHandler()
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getF()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:updateSelectedOptionsIndex(java.util.List,java.util.List)
java.util.List:containsAll(java.util.Collection)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getOptions()
java.util.LinkedHashSet:add(java.lang.Object)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:getOnValueForWidget(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)
java.util.LinkedHashSet:addAll(java.util.Collection)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:getExportValues()
java.util.LinkedHashSet:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:getCOSObject()
org.apache.pdfbox.pdmodel.PDDocument:getSignatureFields()
org.apache.pdfbox.cos.COSArray:removeObject(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.form.PDField:getParent()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:transform(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.util.Matrix:scale(float,float)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getTransformedAppearanceBBox(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode,boolean,boolean,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:createWidgetDictionarySet(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:fillPagesAnnotationMap(java.util.Map,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:setOpenCount(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:isNodeOpen()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getParent()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getOutlineItem(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSArray:growToSize(int,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:pageHeight(float)
org.apache.pdfbox.pdfwriter.COSWriter:write(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfwriter.COSWriter:<init>(java.io.OutputStream)
org.apache.pdfbox.pdfparser.PDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead)
java.io.FilterInputStream:skip(long)
org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:<init>(org.apache.pdfbox.cos.COSArray,int)
org.apache.pdfbox.cos.COSDictionary:getNameAsString(org.apache.pdfbox.cos.COSName,java.lang.String)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:fillAndStroke()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLineCapStyle(int)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setMiterLimit(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:closeAndFillAndStroke()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getCOSName()
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setFloatItem(org.apache.pdfbox.cos.COSName,java.lang.Float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:closePath()
org.apache.pdfbox.pdmodel.font.UniUtil:getUniNameOfCodePoint(int)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:getGlyphList(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
org.apache.fontbox.FontBoxFont:getPath(java.lang.String)
org.apache.fontbox.FontBoxFont:hasGlyph(java.lang.String)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:getMappedFont(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:stroke()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLineDashPattern(float[],float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:computeParamsEllipse(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:flattenEllipse(double,double,double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:cloudyRectangleImpl(double,double,double,double,boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:drawBasicEllipse(double,double,double,double)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:setTransformationMatrix(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setNormalAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:createCOSStream()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:<init>()
org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:collectPatches(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,int)
org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShading,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:createShadedTriangleList(int,int,org.apache.pdfbox.pdmodel.graphics.shading.Vertex[][])
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getBitsPerComponent()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getBitsPerCoordinate()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getNumberOfColorComponents()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getVerticesPerRow()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getDecodeForParameter(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getBitsPerComponent()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getBitsPerCoordinate()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getNumberOfColorComponents()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getDecodeForParameter(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getBitsPerFlag()
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:evalFunction(float[])
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getFunction()
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getPatchCoordinatesColor()
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:isOnSameSideDD(java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:isOnSameSideCC(java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getPatchCoordinatesColor(org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve,org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve,org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve,org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve)
org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve:<init>(java.awt.geom.Point2D[],int)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:readRasterFromAny(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getRGBImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.Rectangle,int,org.apache.pdfbox.cos.COSArray)
java.awt.image.WritableRaster:setPixels(int,int,int,int,int[])
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:clampColor(int)
java.awt.image.WritableRaster:getPixels(int,int,int,int,int[])
java.awt.image.WritableRaster:setSamples(int,int,int,int,int,int[])
java.awt.image.WritableRaster:getSamples(int,int,int,int,int,int[])
java.awt.image.DataBuffer:setElem(int,int)
java.awt.image.DataBuffer:getElem(int)
java.awt.image.DataBuffer:getSize()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getInterpolate()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:scaleImage(java.awt.image.BufferedImage,int,int,int,boolean)
org.apache.pdfbox.cos.COSStream:close()
org.apache.pdfbox.cos.COSStream:getLength()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:createFromRGBImage(java.awt.image.BufferedImage,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getBitsPerComponent()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:encode()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory$PredictorEncoder:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:createFromGrayImage(java.awt.image.BufferedImage,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:isGrayImage(java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[],int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:convertPng(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:checkConverterState(org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$PNGConverterState)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:parsePNGChunks(byte[])
org.apache.pdfbox.util.filetypedetector.ByteTrie:find(byte[])
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromFile(org.apache.pdfbox.pdmodel.PDDocument,java.io.File,int)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[])
java.io.InputStream:readAllBytes()
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createJPEG(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float,int)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:tintTransform(float[],int[])
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toRGBImage2(java.awt.image.WritableRaster)
int[]:clone()
java.lang.StringBuilder:append(float)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getColorantNames()
org.apache.pdfbox.pdmodel.common.function.PDFunction:getCOSObject()
java.lang.Object:toString()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:loadList(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getWidth()
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getCOSObject()
org.apache.fontbox.type1.Type1Font:hasGlyph(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType1Font:isEmbedded()
org.apache.fontbox.type1.Type1Font:getWidth(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontFile(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.fontbox.pfb.PfbParser:getLengths()
org.apache.fontbox.pfb.PfbParser:size()
org.apache.fontbox.pfb.PfbParser:getInputStream()
org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:buildFontDescriptor(org.apache.fontbox.type1.Type1Font)
org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:fromFontBox(org.apache.fontbox.encoding.Encoding)
org.apache.fontbox.pfb.PfbParser:<init>(byte[])
org.apache.fontbox.cff.CFFType1Font:hasGlyph(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDCIDFont:getWidthForCID(int)
org.apache.fontbox.ttf.TTFParser:<init>()
org.apache.fontbox.ttf.TrueTypeFont:nameToGID(java.lang.String)
org.apache.fontbox.ttf.CmapSubtable:getGlyphId(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:extractCmapTable()
org.apache.fontbox.cff.Type2CharString:getPath()
org.apache.fontbox.cff.CFFFont:getType2CharString(int)
org.apache.fontbox.cff.CFFCharset:getGIDForSID(int)
org.apache.fontbox.cff.CFFCharset:getSID(java.lang.String)
org.apache.fontbox.cff.CFFFont:getCharset()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFontEmbedder:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary,org.apache.fontbox.ttf.TrueTypeFont,org.apache.pdfbox.pdmodel.font.encoding.Encoding)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:<init>()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isSymbolic()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:codeToGID(int)
org.apache.fontbox.cff.CFFType1Font:getType2CharString(int)
org.apache.fontbox.cff.CFFCIDFont:getType2CharString(int)
java.util.Collections:unmodifiableSet(java.util.Set)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontFamily()
org.apache.pdfbox.pdmodel.font.PDPanose:<init>(byte[])
org.apache.pdfbox.pdmodel.font.FontInfo:getCodePageRange()
java.lang.String:indexOf(java.lang.String)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getSubstitutes(java.lang.String)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getFont(org.apache.pdfbox.pdmodel.font.FontFormat,java.lang.String)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getProvider()
java.io.BufferedWriter:close()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:writeFontInfo(java.io.BufferedWriter,org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo)
java.io.FileWriter:<init>(java.io.File,java.nio.charset.Charset)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:getDiskCacheFile()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:addType1Font(java.io.File)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:addTrueTypeCollection(java.io.File)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:addTrueTypeFont(java.io.File)
java.util.HashSet:isEmpty()
java.util.HashSet:remove(java.lang.Object)
java.io.File:equals(java.lang.Object)
java.lang.Long:parseLong(java.lang.String,int)
org.apache.pdfbox.pdmodel.font.FontFormat:valueOf(java.lang.String)
java.lang.String:split(java.lang.String,int)
java.io.FileReader:<init>(java.io.File,java.nio.charset.Charset)
org.apache.fontbox.ttf.TrueTypeCollection:close()
org.apache.fontbox.ttf.TrueTypeCollection:getFontByName(java.lang.String)
org.apache.fontbox.ttf.TrueTypeCollection:<init>(java.io.File)
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:ensureFontResources(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.interactive.form.PDVariableText)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setFields(java.util.List)
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:handleAnnotations(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.pdmodel.PDResources,java.util.List,java.util.List,java.util.Map)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setDefaultResources(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setDefaultAppearance(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getDefaultAppearance()
java.io.Writer:close()
org.apache.pdfbox.pdmodel.fdf.FDFDocument:writeXML(java.io.Writer)
org.apache.pdfbox.pdfwriter.COSWriter:write(org.apache.pdfbox.pdmodel.fdf.FDFDocument)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeHash2A(byte[],byte[],byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeSHA256(byte[],byte[],byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isUserPassword234(byte[],byte[],byte[],int,byte[],int,int,boolean)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:getUserPassword234(byte[],byte[],int,int)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setStringFilterName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setStreamFilterName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setStdCryptFilterDictionary(org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary)
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:setLength(int)
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:setCryptFilterMethod(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:<init>()
java.lang.Character:isDefined(int)
java.lang.Character:getName(int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:prohibited(int)
java.nio.CharBuffer:wrap(char[],int,int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:mappedToNothing(char)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:canPrintFaithful()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:canAssembleDocument()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:canExtractForAccessibility()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:canFillInForm()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setPermissionBit(int,boolean)
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.bouncycastle.asn1.cms.ContentInfo:toASN1Primitive()
org.bouncycastle.asn1.cms.ContentInfo:<init>(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)
org.bouncycastle.asn1.cms.EnvelopedData:<init>(org.bouncycastle.asn1.cms.OriginatorInfo,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.cms.EncryptedContentInfo,org.bouncycastle.asn1.ASN1Set)
org.bouncycastle.asn1.cms.EncryptedContentInfo:<init>(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1OctetString)
org.bouncycastle.asn1.x509.AlgorithmIdentifier:<init>(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)
org.bouncycastle.asn1.ASN1ObjectIdentifier:<init>(java.lang.String)
org.bouncycastle.asn1.DERSet:<init>(org.bouncycastle.asn1.ASN1Encodable)
org.bouncycastle.asn1.cms.RecipientInfo:<init>(org.bouncycastle.asn1.cms.KeyTransRecipientInfo)
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:computeRecipientInfo(java.security.cert.X509Certificate,byte[])
javax.crypto.SecretKey:getEncoded()
javax.crypto.Cipher:init(int,java.security.Key,java.security.AlgorithmParameters)
javax.crypto.KeyGenerator:generateKey()
javax.crypto.KeyGenerator:init(int)
java.security.AlgorithmParameters:getEncoded(java.lang.String)
java.security.AlgorithmParameterGenerator:generateParameters()
javax.crypto.KeyGenerator:getInstance(java.lang.String,java.security.Provider)
java.security.AlgorithmParameterGenerator:getInstance(java.lang.String,java.security.Provider)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:getCOSObject()
org.apache.pdfbox.cos.COSArray:indexOfObject(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.logging.log4j.Logger:error(java.lang.Object,java.lang.Throwable)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:convertBasicTypesToMap(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getParent()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getRevisionNumber()
java.util.Stack:peek()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:calcSampleIndex(int[])
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:getSamples()
org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:getNumber(int,java.lang.String)
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:getStart()
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:getStyle()
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:getPrefix()
org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:hasNext()
org.apache.pdfbox.cos.COSArray:setString(int,java.lang.String)
org.apache.pdfbox.cos.COSArray:getString(int)
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:fillWhitepointCache(org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus)
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:getWhitepoint()
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getData()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getBitsPerComponent()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getDecode()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getColorSpace()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getHeight()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getWidth()
java.util.function.BiConsumer:accept(org.apache.pdfbox.pdmodel.common.PDPageLabels)
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:setStyle(java.lang.String)
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:<init>()
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:<init>(java.io.OutputStream,long)
org.apache.pdfbox.pdmodel.PDDocument:checkSignatureAnnotation(java.util.List,org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)
org.apache.pdfbox.pdmodel.common.COSArrayList:toList()
org.apache.pdfbox.pdmodel.PDDocument:prepareVisibleSignature(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdmodel.PDDocument:prepareNonVisibleSignature(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:getVisualSignature()
org.apache.pdfbox.pdmodel.PDDocument:checkSignatureField(java.util.Iterator,org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setAppendOnly(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setSignaturesExist(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:getPage()
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:setValue(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.PDDocument:findSignatureField(java.util.Iterator,org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getFieldIterator()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setAcroForm(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setByteRange(int[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setContents(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:getPreferredSignatureSize()
org.apache.pdfbox.pdfwriter.COSWriter:visitFromArray(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.util.Hex:getBytes(byte[])
java.io.SequenceInputStream:<init>(java.io.InputStream,java.io.InputStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:<init>(byte[],int[])
org.apache.pdfbox.pdfparser.PDFXRefStream:writeStreamData(java.io.OutputStream,int[])
org.apache.pdfbox.pdfparser.PDFXRefStream:getWEntry()
org.apache.pdfbox.pdfparser.PDFXRefStream:getIndexEntry()
java.util.function.BiConsumer:accept(org.apache.pdfbox.pdfparser.PDFXRefStream)
java.util.TreeSet:contains(java.lang.Object)
org.apache.pdfbox.cos.COSDictionary:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.cos.COSDocument:isXRefStream()
org.apache.pdfbox.pdfwriter.COSWriter:writeXrefEntry(org.apache.pdfbox.pdfparser.xref.XReferenceEntry)
org.apache.pdfbox.pdfwriter.COSWriter:writeXrefRange(long,long)
org.apache.pdfbox.pdfwriter.COSWriter:getXRefRanges(java.util.List)
org.apache.pdfbox.pdfwriter.COSWriter:setStartxref(long)
org.apache.pdfbox.pdfwriter.COSWriter:fillGapsWithFreeEntries()
org.apache.pdfbox.pdfwriter.COSWriter:doWriteObject(org.apache.pdfbox.cos.COSBase)
java.util.ArrayDeque:removeFirst()
java.util.Collections:unmodifiableList(java.util.List)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeObject(java.io.OutputStream,org.apache.pdfbox.cos.COSBase,boolean)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:prepareStreamObject(org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:<init>(org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool)
org.apache.pdfbox.pdfwriter.compress.CompressParameters:getObjectStreamSize()
org.apache.pdfbox.pdfwriter.compress.COSObjectPool:getHighestXRefObjectNumber()
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:addStructure(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.compress.COSObjectPool:<init>(long)
org.apache.pdfbox.pdfwriter.compress.CompressParameters:<init>()
org.apache.pdfbox.pdfwriter.compress.CompressParameters:isCompress()
org.apache.logging.log4j.util.Supplier:get(long)
java.util.stream.Stream:forEach(java.util.function.Consumer)
java.util.function.Consumer:accept(java.util.Map)
org.apache.pdfbox.pdfparser.PDFObjectStreamParser:parseAllObjects()
org.apache.pdfbox.pdfparser.PDFObjectStreamParser:<init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.cos.COSDocument)
java.util.Map:remove(java.lang.Object)
java.lang.String:makeConcatWithConstants(long,int,java.lang.Long,java.lang.String)
org.apache.logging.log4j.Logger:warn(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decrypt(org.apache.pdfbox.cos.COSBase,long,long)
java.lang.String:makeConcatWithConstants(java.lang.Long)
org.apache.pdfbox.pdfparser.COSParser:parseCOSStream(org.apache.pdfbox.cos.COSDictionary)
java.lang.String:makeConcatWithConstants(long,int,long,int,java.lang.Long)
java.lang.String:makeConcatWithConstants(long,int)
org.apache.pdfbox.pdfparser.BruteForceParser:getBFCOSObjectOffsets()
java.security.GeneralSecurityException:getClass()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getCurrentAccessPermission()
org.apache.pdfbox.cos.COSDocument:getDocumentID()
org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial:<init>(java.security.KeyStore,java.lang.String,java.lang.String)
java.security.KeyStore:load(java.io.InputStream,char[])
java.security.KeyStore:getInstance(java.lang.String)
org.apache.pdfbox.pdfparser.PDFObjectStreamParser:readObjectNumbers()
org.apache.pdfbox.pdfparser.COSParser:getSecurityHandler()
java.util.function.Consumer:accept()
java.util.function.Predicate:test(java.util.Map)
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForObjStreamOffsets()
org.apache.pdfbox.pdfparser.BruteForceParser:isInfo(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdfparser.BruteForceParser:compareCOSObjects(org.apache.pdfbox.cos.COSObject,java.lang.Long,org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdfparser.BruteForceParser:isCatalog(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSDictionary:getCOSObject(org.apache.pdfbox.cos.COSName)
java.util.HashMap:putAll(java.util.Map)
java.util.Collections:reverse(java.util.List)
java.util.HashMap:keySet()
java.util.Map:clear()
org.apache.pdfbox.pdfparser.XrefParser:validateXrefOffsets(java.util.Map)
org.apache.pdfbox.pdfparser.XrefTrailerResolver:getXrefTable()
org.apache.pdfbox.cos.COSDictionary:getLong(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdfparser.PDFXrefStreamParser:parse(org.apache.pdfbox.pdfparser.XrefTrailerResolver)
org.apache.pdfbox.pdfparser.PDFXrefStreamParser:<init>(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdfparser.XrefTrailerResolver:setTrailer(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdfparser.XrefTrailerResolver:nextXrefObj(long,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)
java.lang.String:makeConcatWithConstants(long)
org.apache.pdfbox.pdfparser.XrefParser:calculateXRefFixedOffset(long)
org.apache.pdfbox.pdfparser.XrefParser:checkXRefStreamOffset(long)
java.lang.StringBuilder:charAt(int)
java.lang.String:makeConcatWithConstants(java.lang.String,char,long)
java.lang.String:<init>(char[])
org.apache.pdfbox.pdfparser.BaseParser:checkForEndOfString(int)
java.lang.String:makeConcatWithConstants(char,long)
org.apache.pdfbox.pdfparser.BaseParser:parseCOSHexString()
org.apache.pdfbox.pdfparser.BaseParser:readUntilEndOfCOSDictionary()
org.apache.pdfbox.pdfparser.BaseParser:parseCOSDictionaryNameValuePair(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:setPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.multipdf.Splitter:cloneIDTree(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)
org.apache.pdfbox.multipdf.Splitter:cloneRoleMap(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setClassMap(java.util.Map)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getClassMap()
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getUpperLimit()
org.apache.pdfbox.multipdf.Splitter:processResources(org.apache.pdfbox.pdmodel.PDResources,java.util.Map,java.util.Map,java.util.Set)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getStructParent()
org.apache.pdfbox.multipdf.Splitter$KCloner:createClone(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.Splitter$KCloner:<init>(org.apache.pdfbox.multipdf.Splitter,org.apache.pdfbox.pdmodel.PDPageTree)
org.apache.pdfbox.multipdf.Splitter:processPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDDocument:close()
org.apache.pdfbox.pdmodel.PDDocument:save(java.lang.String,org.apache.pdfbox.pdfwriter.compress.CompressParameters)
org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.Loader:loadPDF(java.io.File)
org.apache.pdfbox.multipdf.PDFMergerUtility:appendDocument(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.Overlay:createOverlayStream(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.multipdf.Overlay$LayoutPage,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.multipdf.Overlay:createOverlayXObject(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.multipdf.Overlay$LayoutPage,org.apache.pdfbox.multipdf.PDFCloneUtility)
org.apache.pdfbox.multipdf.Overlay:createLayoutPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.cos.COSDictionary:size()
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList:getCOSObject()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setOCProperties(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getCOSObject()
org.apache.pdfbox.filter.Predictor$PredictorOutputStream:flipRows()
org.apache.pdfbox.filter.Predictor:decodePredictorRow(int,int,int,int,byte[],byte[])
java.lang.String:makeConcatWithConstants(long,int,long)
java.lang.String:makeConcatWithConstants(long,long)
javax.imageio.stream.MemoryCacheImageInputStream:getStreamPosition()
org.apache.pdfbox.filter.Predictor:calculateRowLength(int,int,int)
org.apache.pdfbox.filter.DecodeResult:setJPXSMask(java.awt.image.BufferedImage)
org.apache.pdfbox.filter.DecodeResult:setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:<init>(java.awt.color.ColorSpace)
java.awt.image.BufferedImage:getSampleModel()
java.awt.image.WritableRaster:getNumBands()
javax.imageio.ImageReader:read(int,javax.imageio.ImageReadParam)
org.apache.pdfbox.filter.DecodeOptions:setFilterSubsampled(boolean)
javax.imageio.ImageReadParam:setSourceSubsampling(int,int,int,int)
org.apache.pdfbox.filter.DecodeOptions:getSubsamplingOffsetY()
org.apache.pdfbox.filter.DecodeOptions:getSubsamplingOffsetX()
org.apache.pdfbox.filter.DecodeOptions:getSubsamplingY()
org.apache.pdfbox.filter.DecodeOptions:getSubsamplingX()
javax.imageio.ImageReadParam:setSourceRegion(java.awt.Rectangle)
org.apache.pdfbox.filter.DecodeOptions:getSourceRegion()
javax.imageio.ImageReader:getDefaultReadParam()
javax.imageio.ImageReader:setInput(java.lang.Object,boolean,boolean)
org.apache.pdfbox.filter.Filter:<init>()
java.awt.image.Raster:getPixels(int,int,int,int,int[])
java.awt.image.Raster:getHeight()
java.awt.image.Raster:getWidth()
java.awt.image.Raster:createCompatibleWritableRaster()
org.apache.pdfbox.filter.DCTFilter:clamp(float)
java.awt.image.Raster:getPixel(int,int,int[])
javax.imageio.stream.ImageInputStream:read(byte[])
javax.imageio.stream.ImageInputStream:readUnsignedShort()
javax.imageio.stream.ImageInputStream:getStreamPosition()
javax.imageio.stream.ImageInputStream:read()
javax.imageio.stream.ImageInputStream:seek(long)
java.lang.Integer:valueOf(java.lang.String)
javax.imageio.IIOException:<init>(java.lang.String)
org.apache.pdfbox.filter.DCTFilter:getNumChannels(javax.imageio.ImageReader)
org.apache.pdfbox.filter.CCITTFaxDecoderStream:fetch()
java.util.Arrays:fill(byte[],int,int,byte)
org.apache.pdfbox.filter.CCITTFaxEncoderStream:encode2D()
java.io.FilterOutputStream:flush()
org.apache.pdfbox.filter.ASCII85OutputStream:transformASCII85()
org.apache.pdfbox.cos.COSIncrement:collect(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.cos.COSDictionary:getDate(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.contentstream.PDFStreamEngine:showGlyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector)
org.apache.pdfbox.pdmodel.font.PDFont:getDisplacement(int)
org.apache.pdfbox.util.Matrix:translate(org.apache.pdfbox.util.Vector)
org.apache.pdfbox.pdmodel.font.PDFont:getPositionVector(int)
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getWordSpacing()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getTextMatrix()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getRise()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getCharacterSpacing()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getHorizontalScaling()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getFontSize()
org.apache.pdfbox.contentstream.PDFStreamEngine:getDefaultFont()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getFont()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getTextState()
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.ResourceCache)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getFloatItem(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.font.PDFontFactory:createFont(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.PDFontSetting:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getStrokingOverprintControl()
org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent:fromString(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:getNameAsString(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setSoftMask(org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setNonStrokeAlphaConstant(double)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setAlphaConstant(double)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setBlendMode(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getContents()
org.apache.pdfbox.Loader:loadPDF(byte[],java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:<init>(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFDocument:<init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.pdfparser.FDFParser:initialParse()
org.apache.pdfbox.pdfparser.COSParser:<init>(org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.util.filetypedetector.ByteTrie$ByteTrieNode:setValue(java.lang.Object)
org.apache.pdfbox.util.filetypedetector.ByteTrie$ByteTrieNode:<init>()
java.util.Arrays:hashCode(float[])
org.apache.pdfbox.text.LegacyPDFStreamEngine:<init>()
java.util.StringTokenizer:nextToken()
java.util.StringTokenizer:countTokens()
java.util.StringTokenizer:<init>(java.lang.String,java.lang.String)
java.io.LineNumberReader:readLine()
java.io.LineNumberReader:<init>(java.io.Reader)
org.apache.pdfbox.text.TextPosition:insertDiacritic(int,org.apache.pdfbox.text.TextPosition)
org.apache.logging.log4j.Logger:info(java.lang.String,java.lang.Object,java.lang.Object)
java.lang.Character:getType(char)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getProperties()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.text.PDFTextStripper:endDocument(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.text.PDFTextStripper:processPages(org.apache.pdfbox.pdmodel.PDPageTree)
org.apache.pdfbox.text.PDFTextStripper:startDocument(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.text.PDFTextStripper:getAddMoreFormatting()
org.apache.pdfbox.text.PDFTextStripper:resetEngine()
org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPointWithProperties:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPoint:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
org.apache.pdfbox.contentstream.operator.markedcontent.DrawObject:<init>(org.apache.pdfbox.contentstream.PDFStreamEngine)
java.util.HashMap:<init>(java.util.Map)
org.apache.pdfbox.pdmodel.font.PDFont:getAverageFontWidth()
java.lang.IllegalArgumentException:getMessage()
org.apache.fontbox.cmap.CMap:getSpaceMapping()
org.apache.fontbox.util.BoundingBox:setLowerLeftY(float)
java.awt.Graphics2D:fill(java.awt.Shape)
java.awt.Graphics2D:setPaint(java.awt.Paint)
org.apache.pdfbox.rendering.PageDrawer$TransparencyGroup:getBBox()
org.apache.pdfbox.rendering.PageDrawer:setClip()
java.awt.Graphics2D:setComposite(java.awt.Composite)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getNonStrokingJavaComposite()
org.apache.pdfbox.rendering.PageDrawer:isContentRendered()
java.awt.GraphicsDevice:getType()
java.awt.image.BufferedImage:getScaledInstance(int,int,int)
java.awt.Graphics2D:getRenderingHint(java.awt.RenderingHints$Key)
org.apache.pdfbox.rendering.PageDrawer:applyTransferFunction(java.awt.image.BufferedImage,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getTransfer()
org.apache.pdfbox.pdmodel.graphics.image.PDImage:getCOSObject()
java.awt.image.ByteLookupTable:<init>(int,byte[])
java.awt.geom.AffineTransform:getDeterminant()
java.awt.geom.GeneralPath:<init>(java.awt.Shape)
java.awt.Rectangle:getCenterY()
java.awt.Rectangle:getCenterX()
java.awt.Rectangle:getY()
java.awt.Rectangle:getX()
java.awt.geom.GeneralPath:getBounds()
java.awt.geom.AffineTransform:getType()
java.awt.geom.GeneralPath:reset()
java.awt.Graphics2D:draw(java.awt.Shape)
java.awt.Graphics2D:setStroke(java.awt.Stroke)
org.apache.pdfbox.rendering.PageDrawer:getStroke()
org.apache.pdfbox.rendering.PageDrawer:getStrokingPaint()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getStrokingJavaComposite()
org.apache.pdfbox.rendering.PageDrawer:getNonStrokingPaint()
org.apache.pdfbox.rendering.PageDrawer:intersectShadingBBox(org.apache.pdfbox.pdmodel.graphics.color.PDColor,java.awt.geom.Area)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getNonStrokingColorSpace()
org.apache.pdfbox.rendering.PageDrawer:isRectangular(java.awt.geom.GeneralPath)
java.awt.geom.GeneralPath:setWindingRule(int)
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:isClip()
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:isStroke()
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:isFill()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getRenderingMode()
org.apache.logging.log4j.util.Supplier:get(int,java.lang.String)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:isStandard14()
java.util.function.Consumer:accept(java.awt.geom.GeneralPath)
java.awt.geom.GeneralPath:<init>(int,int)
org.apache.pdfbox.rendering.PDFRenderer:renderPageToGraphics(int,java.awt.Graphics2D,float,float)
org.apache.pdfbox.rendering.PDFRenderer:renderImage(int,float,org.apache.pdfbox.rendering.ImageType)
org.apache.pdfbox.rendering.ImageType:<init>(java.lang.String,int)
org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean)
java.awt.print.Book:<init>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection:<init>(java.lang.String,int,int)
org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getBytesFromPacket(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:setAppearanceContent(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:initializeAppearanceContent(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.common.PDStream:getLength()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:prepareNormalAppearanceStream(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:isValidAppearanceStream(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:getWidgetDefaultAppearanceString(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget)
java.lang.String:replaceAll(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:getFormattedValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getDefaultAppearanceString()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:validateAndEnsureAcroFormResources()
org.apache.pdfbox.pdmodel.fdf.FDFField:getClearFieldFlags()
org.apache.pdfbox.pdmodel.fdf.FDFField:getSetFieldFlags()
org.apache.pdfbox.pdmodel.interactive.form.PDField:setFieldFlags(int)
org.apache.pdfbox.pdmodel.fdf.FDFField:getFieldFlags()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setValue(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFField:getCOSValue()
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getValueFor(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils$KeyValue:<init>(java.lang.String,java.lang.String)
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:getOnValues()
org.apache.pdfbox.pdmodel.interactive.form.PDButton:getOnValue(int)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:updateByValue(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocument:getSignatureDictionaries()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:removeFields(java.util.List)
org.apache.pdfbox.pdmodel.PDPageContentStream:close()
org.apache.pdfbox.pdmodel.PDPageContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.PDPageContentStream:transform(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:resolveTransformationMatrix(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.PDPageContentStream:saveGraphicsState()
org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode,boolean,boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:isVisibleAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:buildPagesWidgetsMap(java.util.List,org.apache.pdfbox.pdmodel.PDPageTree)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:refreshAppearances(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getNeedAppearances()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:updateParentOpenCount(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:setFirstChild(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getFirstChild()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:hasChildren()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getPreviousSibling()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:getLastChild()
org.apache.pdfbox.cos.COSArray:growToSize(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:<init>()
org.apache.pdfbox.pdmodel.PDPageTree:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:setImage(java.awt.image.BufferedImage)
javax.imageio.ImageIO:read(java.io.InputStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:calculatePageSize(org.apache.pdfbox.pdmodel.PDDocument,int)
java.io.InputStream:available()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:getVisualSignatureAsStream(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getVisualSignature()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getInnerFormName()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImageName()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImageFormName()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getProcSet()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImage()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImageFormResources()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getImageFormStream()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getInnerForm()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getInnerFormStream()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getInnerFormResources()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getHolderForm()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getHolderFormResources()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getHolderFormStream()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getImage()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getFormatterRectangle()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getFormatterRectangleParameters()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getAffineTransform()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getTransform()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getSignatureField()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getAcroForm()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getTemplate()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:getPage()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getPageHeight()
org.apache.pdfbox.cos.COSObject:isObjectNull()
java.util.HashMap:values()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:initFromRandomAccessRead(org.apache.pdfbox.io.RandomAccessRead)
java.io.ByteArrayOutputStream:write(byte[],int,int)
java.io.FilterInputStream:read(byte[],int,int)
java.lang.Math:min(long,long)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:nextRange()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:getRemaining()
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:getDashStyle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary:getStyle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getBorder()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.AnnotationBorder:<init>()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:fillAndStroke()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:transform(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineCapStyle(int)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setMiterLimit(float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:adjustRectAndBBox(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:closeAndFillAndStroke()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setBlendMode(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setNonStrokingAlphaConstant(java.lang.Float)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setStrokingAlphaConstant(java.lang.Float)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setAlphaSourceFlag(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:addPath(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,java.awt.geom.GeneralPath)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:getGlyphPath(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName,java.lang.String)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:stroke()
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getResources()
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getContentStream()
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setResources(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getContentStream()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getRectangle()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:finish()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:applyRectDiff(org.apache.pdfbox.pdmodel.common.PDRectangle,float)
org.apache.pdfbox.cos.COSDictionary:getFloat(java.lang.String,float)
org.apache.pdfbox.cos.COSDictionary:getNameAsString(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineWidthOnDemand(float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLineDashPattern(float[],float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(float[])
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(float[])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getBorderStyle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:getVertices()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:getPath()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getBorderStyle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getDefaultAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:cloudyEllipseImpl(double,double,double,double)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:setRectDifferences(float,float,float,float)
java.util.Set:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
java.util.Set:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setRectDifferences(float,float,float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getAppearanceEntryAsContentStream(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry,boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getColor(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler:generateAppearanceStreams()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup:setQuadPoints(float[])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.PDDocument)
java.text.AttributedCharacterIterator$Attribute:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle,int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:collectTriangles(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShading,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:collectTriangles(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.logging.log4j.util.Supplier:get(java.awt.geom.NoninvertibleTransformException,org.apache.pdfbox.util.Matrix)
java.awt.geom.AffineTransform:concatenate(java.awt.geom.AffineTransform)
java.awt.geom.AffineTransform:createInverse()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:getMatrix()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:getDomain()
org.apache.pdfbox.pdmodel.graphics.shading.Line:calcColor(java.awt.Point)
org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:addValueToArray(java.awt.Point,int,int[][])
org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:evalFunctionAndConvertToRGB(float[])
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:calcColorTable()
java.awt.Rectangle:getMinY()
java.awt.Rectangle:getMaxY()
java.awt.Rectangle:getMinX()
java.awt.Rectangle:getMaxX()
java.awt.geom.AffineTransform:clone()
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getTriangles()
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:calcLevel()
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:reshapeControlPoints(java.awt.geom.Point2D[])
org.apache.pdfbox.pdmodel.graphics.shading.Patch:<init>(float[][])
org.apache.pdfbox.pdmodel.graphics.shading.ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShading,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getTriangles()
org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:calcLevel()
org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:reshapeControlPoints(java.awt.geom.Point2D[])
java.awt.geom.Rectangle2D$Float:<init>()
java.awt.geom.Rectangle2D$Double:add(java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:calcColorTable()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:getExtend()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:getDomain()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:getCoords()
java.awt.Graphics2D:fillRect(int,int,int,int)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getRawRaster(org.apache.pdfbox.pdmodel.graphics.image.PDImage)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:extractMatte(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getOpaqueImage(java.awt.Rectangle,int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:applyMask(java.awt.image.BufferedImage,java.awt.image.BufferedImage,boolean,boolean,float[])
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getColorKeyMask()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getMask()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getSoftMask()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[])
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:convertPNGImage(org.apache.pdfbox.pdmodel.PDDocument,byte[])
org.apache.pdfbox.util.filetypedetector.FileTypeDetector:detectFileType(byte[])
java.io.BufferedInputStream:reset()
java.io.BufferedInputStream:read(byte[])
java.io.BufferedInputStream:mark(int)
org.apache.pdfbox.util.filetypedetector.ByteTrie:getMaxDepth()
java.io.BufferedInputStream:markSupported()
javax.imageio.ImageIO:read(java.io.File)
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromFile(org.apache.pdfbox.pdmodel.PDDocument,java.io.File)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromStream(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
java.lang.String:lastIndexOf(int)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float,int)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:getDefaultRangeArray()
org.apache.pdfbox.pdmodel.graphics.color.PDLab:inverse(float)
java.awt.color.ICC_ColorSpace:getMaxValue(int)
java.awt.color.ICC_ColorSpace:getMinValue(int)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBWithTintTransform(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBWithTintTransform(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:isNChannel()
java.awt.color.ColorSpace:fromCIEXYZ(float[])
java.awt.color.ColorSpace:toCIEXYZ(float[])
java.awt.image.WritableRaster:getMinY()
java.awt.image.WritableRaster:getMinX()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getICCProfile()
org.apache.pdfbox.pdmodel.common.function.PDFunction:getRangeValues()
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:get255Value(float)
org.apache.pdfbox.pdmodel.font.encoding.MacRomanEncoding:<init>()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:<init>(java.io.InputStream,int)
java.util.Map:hashCode()
org.apache.pdfbox.pdmodel.font.PDType3Font:getWidthFromFont(int)
org.apache.fontbox.type1.Type1Font:getPath(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType1Font:getNameInFont(java.lang.String)
org.apache.fontbox.afm.CharMetric:getName()
org.apache.fontbox.afm.CharMetric:getCharacterCode()
org.apache.fontbox.afm.FontMetrics:getCharMetrics()
org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:getType1Font()
org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:getGlyphList()
org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:getFontEncoding()
org.apache.pdfbox.pdmodel.font.PDType1FontEmbedder:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.pdmodel.font.encoding.Encoding)
org.apache.pdfbox.pdmodel.font.PDType1CFont:isEmbedded()
org.apache.fontbox.cff.CFFType1Font:getFontBBox()
org.apache.pdfbox.pdmodel.font.PDType1CFont:hasGlyph(java.lang.String)
org.apache.fontbox.cff.CFFType1Font:getPath(java.lang.String)
org.apache.fontbox.cmap.CMap:getWMode()
org.apache.pdfbox.pdmodel.font.PDCIDFont:getDefaultPositionVector(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.io.RandomAccessRead,boolean,boolean)
org.apache.fontbox.ttf.GlyphData:getPath()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getName()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:codeToGID(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getPathFromOutlines(int)
java.util.HashMap:isEmpty()
org.apache.fontbox.ttf.TrueTypeFont:getFontBBox()
java.util.function.BiConsumer:accept(org.apache.pdfbox.pdmodel.font.encoding.BuiltInEncoding)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,org.apache.pdfbox.pdmodel.font.encoding.Encoding,boolean)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:getMappedFontName(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:getSymbolicFlag()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setCIDSet(org.apache.pdfbox.pdmodel.common.PDStream)
java.util.TreeMap:lastKey()
java.util.TreeMap:get(java.lang.Object)
java.util.TreeMap:keySet()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getPathFromOutlines(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getGlyphName(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getType2CharString(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:codeToCID(int)
org.apache.fontbox.FontBoxFont:getFontBBox()
org.apache.fontbox.cff.CFFCIDFont:getFontBBox()
org.apache.pdfbox.pdmodel.font.Standard14Fonts:getNames()
org.apache.pdfbox.pdmodel.font.FontMapperImpl:addSubstitutes(java.lang.String,java.util.List)
java.util.PriorityQueue:add(java.lang.Object)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontWeight()
org.apache.pdfbox.pdmodel.font.FontInfo:getWeightClassAsPanose()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getWeight()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getSerifStyle()
org.apache.pdfbox.pdmodel.font.FontMapperImpl:probablyBarcodeFont(org.apache.pdfbox.pdmodel.font.PDFontDescriptor)
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getFamilyKind()
org.apache.pdfbox.pdmodel.font.PDPanose:getPanose()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getPanose()
org.apache.pdfbox.pdmodel.font.FontMapperImpl$FontMatch:<init>(org.apache.pdfbox.pdmodel.font.FontInfo)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:isCharSetMatch(org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo,org.apache.pdfbox.pdmodel.font.FontInfo)
java.util.PriorityQueue:<init>(int)
org.apache.pdfbox.pdmodel.font.FontMapping:<init>(org.apache.fontbox.FontBoxFont,boolean)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isSerif()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isItalic()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isFixedPitch()
org.apache.pdfbox.pdmodel.font.FontMapperImpl:findFont(org.apache.pdfbox.pdmodel.font.FontFormat,java.lang.String)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:saveDiskCache()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:scanFonts(java.util.List)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:loadDiskCache(java.util.List)
org.apache.logging.log4j.Logger:trace(java.lang.String,java.lang.Object)
java.io.File:<init>(java.net.URI)
org.apache.fontbox.util.autodetect.FontFileFinder:find()
org.apache.fontbox.util.autodetect.FontFileFinder:<init>()
org.apache.logging.log4j.Logger:trace(java.lang.String)
org.apache.pdfbox.pdmodel.font.FontProvider:<init>()
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org.apache.fontbox.ttf.OTFParser:parse(org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:readTrueTypeFont(java.lang.String,java.io.File)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setNeedAppearances(java.lang.Boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:refreshAppearances()
org.apache.pdfbox.pdmodel.fixup.processor.AbstractProcessor:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:resolveFieldsFromWidgets(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormDefaultsProcessor:verifyOrCreateDefaults(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
java.lang.Object:getClass()
java.lang.Number:longValue()
org.apache.pdfbox.pdmodel.fdf.FDFDocument:saveXFDF(java.io.Writer)
java.io.FileOutputStream:close()
org.apache.pdfbox.pdmodel.fdf.FDFDocument:save(java.io.OutputStream)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationUnderline:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStrikeOut:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquiggly:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSound:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLink:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationHighlight:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFileAttachment:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isOwnerPassword56(byte[],byte[],byte[],int)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isOwnerPassword234(byte[],byte[],byte[],int,byte[],int,int,boolean)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isUserPassword56(byte[],byte[],int)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareEncryptionDictAES(org.apache.pdfbox.pdmodel.encryption.PDEncryption,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setUserKey(byte[])
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setOwnerKey(byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeOwnerPassword(byte[],byte[],int,int)
org.apache.pdfbox.cos.COSDocument:setDocumentID(org.apache.pdfbox.cos.COSArray)
java.math.BigInteger:toByteArray()
java.math.BigInteger:valueOf(long)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setPerms(byte[])
java.security.SecureRandom:nextInt()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setOwnerEncryptionKey(byte[])
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setUserEncryptionKey(byte[])
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:concat(byte[],byte[])
org.apache.pdfbox.pdmodel.encryption.SaslPrep:saslPrep(java.lang.String,boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:hasAnyRevision3PermissionSet()
org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy:getPermissions()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getPerms()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeEncryptedKeyRev56(byte[],boolean,byte[],byte[],byte[],byte[],int)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanPrintFaithful(boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanPrint(boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanModifyAnnotations(boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanModify(boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanFillInForm(boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanExtractForAccessibility(boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanExtractContent(boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setCanAssembleDocument(boolean)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:<init>()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getRevision()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getCryptFilterDictionary(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:getEncryptionKeyLength()
org.apache.pdfbox.pdmodel.encryption.RC4Cipher:<init>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:registerHandler(java.lang.String,java.lang.Class,java.lang.Class)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setDefaultCryptFilterDictionary(org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary)
org.bouncycastle.asn1.ASN1Primitive:encodeTo(java.io.OutputStream,java.lang.String)
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:createDERForRecipient(byte[],java.security.cert.X509Certificate)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:getPermissionBytesForPublicKey()
org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient:getPermission()
org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient:getX509()
org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:getRecipientsIterator()
org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:getNumberOfRecipients()
org.bouncycastle.cert.X509CertificateHolder:getIssuer()
org.bouncycastle.cms.KeyTransRecipientId:getIssuer()
java.math.BigInteger:toString(int)
java.security.cert.X509Certificate:getSerialNumber()
org.bouncycastle.cms.KeyTransRecipientId:getSerialNumber()
java.security.KeyStoreException:<init>(java.lang.String,java.lang.Throwable)
java.security.KeyStoreException:<init>(java.lang.String)
java.security.KeyStore:containsAlias(java.lang.String)
java.security.KeyStore:getKey(java.lang.String,char[])
java.util.Enumeration:nextElement()
java.security.KeyStore:aliases()
java.security.KeyStore:size()
java.security.KeyStore:getCertificate(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getCOSArray()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getColumnWidths()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getColumnGap()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getColumnCount()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getGlyphOrientationVertical()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getRubyPosition()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getRubyAlign()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextDecorationType()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextDecorationThickness()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextDecorationColor()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getLineHeight()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBaselineShift()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTPadding()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTBorderStyle()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getInlineAlign()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBlockAlign()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getHeight()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getWidth()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBBox()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextAlign()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getTextIndent()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getEndIndent()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getStartIndent()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getSpaceAfter()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getSpaceBefore()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getColor()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getPadding()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBorderThickness()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBorderStyle()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBorderColors()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getBackgroundColor()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getWritingMode()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:getPlacement()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:getRevisionNumbers()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:userPropertyChanged(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:isEntryChanged(java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:getOwner()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:removeKid(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:insertBefore(org.apache.pdfbox.cos.COSBase,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:appendKid(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:createObjectFromDic(org.apache.pdfbox.cos.COSDictionary)
java.util.Collections:emptyMap()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:getRoleMap()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getStructureTreeRoot()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:getObjects()
java.util.List:set(int,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:getCOSObject()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:attributeChanged(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:getStructureElement()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Eq:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$AbstractNumberComparisonOperator:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addName(java.lang.String)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addReal(float)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:parseReal(java.lang.String)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addInteger(int)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:parseInt(java.lang.String)
java.util.function.Predicate:test(java.lang.Object)
java.util.Stack:pop()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addProc(org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:getCurrentSequence()
java.util.Stack:isEmpty()
org.apache.pdfbox.pdmodel.common.function.type4.Operators:getOperator(java.lang.String)
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:getOperators()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:getStack()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getEncode()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getDecodeValues()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:rinterpol(int[],int)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getEncodeValues()
org.apache.pdfbox.cos.COSDictionary:getEmbeddedString(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEFDictionary()
org.apache.pdfbox.pdmodel.common.COSArrayList:<init>(java.lang.Object,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:next()
org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:<init>(org.apache.pdfbox.pdmodel.common.PDPageLabelRange,int)
java.util.Set:toArray(java.util.function.IntFunction)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setUpperLimit(java.lang.String)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getUpperLimit()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setLowerLimit(java.lang.String)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getLowerLimit()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:isRootNode()
java.util.LinkedHashMap:clear()
java.util.ArrayList:addAll(int,java.util.Collection)
java.util.Collection:forEach(java.util.function.Consumer)
java.util.Collection:size()
org.apache.pdfbox.pdmodel.DefaultResourceCacheCreateImpl:<init>(boolean)
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.PDResources:getColorSpace(org.apache.pdfbox.cos.COSName,boolean)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:intValue()
java.util.zip.Inflater:<init>(boolean)
org.apache.pdfbox.pdmodel.common.PDPageLabels:findLabels(org.apache.pdfbox.pdmodel.common.PDNumberTreeNode)
org.apache.pdfbox.pdmodel.common.PDPageLabels:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.PageLayout:values()
java.util.ArrayDeque:addAll(java.util.Collection)
org.apache.pdfbox.pdfwriter.COSWriter:<init>(java.io.OutputStream,org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.pdmodel.PDPageTree:remove(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDocument:addSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions)
org.apache.pdfbox.pdfwriter.COSWriter:writeArray(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.cos.COSName:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.pdfwriter.COSWriter:detectPossibleSignature(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSStream:hasData()
org.apache.pdfbox.pdfwriter.COSWriter:writeExternalSignature(byte[])
org.apache.pdfbox.pdfwriter.COSWriter:getDataToSign()
java.io.ByteArrayOutputStream:flush()
java.lang.String:makeConcatWithConstants(java.lang.String,int,long,long)
java.lang.String:makeConcatWithConstants(long,long,long)
org.apache.pdfbox.pdfparser.PDFXRefStream:getStream()
org.apache.pdfbox.pdfparser.PDFXRefStream:setSize(long)
org.apache.pdfbox.pdfparser.PDFXRefStream:addTrailerInfo(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdfparser.PDFXRefStream:addEntry(org.apache.pdfbox.pdfparser.xref.XReferenceEntry)
java.util.function.Consumer:accept(org.apache.pdfbox.pdfparser.PDFXRefStream)
org.apache.pdfbox.pdfparser.PDFXRefStream:<init>(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfwriter.COSWriter:doWriteTrailer(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfwriter.COSWriter:doWriteXRefTable()
org.apache.pdfbox.cos.COSDocument:getStartXref()
org.apache.pdfbox.cos.COSDocument:hasHybridXRef()
org.apache.pdfbox.pdfwriter.COSWriter:doWriteObjects()
org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:<init>(int,org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:getPreparedKeys()
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeObjectsToStream(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:createObjectStreams()
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getHighestXRefObjectNumber()
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getTopLevelObjects()
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getObject(org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:getObjectStreamObjects()
org.apache.pdfbox.pdfwriter.compress.COSWriterCompressionPool:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdfwriter.compress.CompressParameters)
org.apache.pdfbox.pdfwriter.COSWriter:isCompress()
org.apache.pdfbox.cos.COSObjectKey:compareTo(org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.cos.COSObject:setToNull()
org.apache.pdfbox.pdfparser.COSParser:parseObjectStreamObject(long,org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.pdfparser.COSParser:parseFileObject(java.lang.Long,org.apache.pdfbox.cos.COSObjectKey)
org.apache.pdfbox.pdfparser.COSParser:getObjectOffset(org.apache.pdfbox.cos.COSObjectKey,boolean)
org.apache.pdfbox.pdfparser.COSParser:prepareDecryption()
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForObjStreams(java.util.Map)
org.apache.pdfbox.pdfparser.BruteForceParser:searchForTrailerItems(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchForTrailer(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdfparser.XrefTrailerResolver:getTrailer()
java.util.stream.Stream:reduce(java.util.function.BinaryOperator)
java.lang.Long:max(long,long)
java.util.function.BinaryOperator:apply()
org.apache.pdfbox.cos.COSDocument:addXRefTable(java.util.Map)
org.apache.pdfbox.pdfparser.XrefTrailerResolver:setStartxref(long)
java.util.function.BiConsumer:accept(org.apache.pdfbox.pdfparser.XrefTrailerResolver)
org.apache.pdfbox.pdfparser.XrefTrailerResolver:<init>()
java.util.Optional:get()
java.util.Optional:isPresent()
org.apache.pdfbox.pdfparser.XrefParser:checkXrefOffsets()
org.apache.pdfbox.pdfparser.XrefTrailerResolver:getXrefType()
org.apache.pdfbox.cos.COSDocument:setHasHybridXRef()
org.apache.pdfbox.pdfparser.XrefParser:parseXrefObjStream(long,boolean)
org.apache.pdfbox.pdfparser.XrefTrailerResolver:getCurrentTrailer()
org.apache.pdfbox.pdfparser.XrefParser:parseTrailer()
org.apache.pdfbox.pdfparser.XrefParser:parseXrefTable(long)
org.apache.pdfbox.cos.COSDocument:setStartXref(long)
org.apache.pdfbox.pdfparser.XrefParser:checkXRefOffset(long)
org.apache.pdfbox.pdfparser.XrefParser:parseStartXref()
org.apache.pdfbox.pdfparser.COSParser:lastIndexOf(char[],byte[],int)
java.lang.String:makeConcatWithConstants(long,java.lang.String)
org.apache.pdfbox.pdfparser.BaseParser:readStringNumber()
java.lang.String:makeConcatWithConstants(char,int,char,int,long,long)
org.apache.pdfbox.pdfparser.BaseParser:readString()
org.apache.pdfbox.pdfparser.BaseParser:parseCOSNumber()
org.apache.pdfbox.cos.COSObject:<init>(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfparser.BaseParser:readExpectedString(char[],boolean)
org.apache.pdfbox.pdfparser.BaseParser:parseCOSString()
org.apache.pdfbox.pdfparser.BaseParser:parseCOSDictionary(boolean)
org.apache.pdfbox.multipdf.Splitter:fixDestinations(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.Splitter:cloneStructureTree(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.Splitter:processPages()
org.apache.pdfbox.multipdf.PDFMergerUtility:optimizedMergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction,org.apache.pdfbox.pdfwriter.compress.CompressParameters)
org.apache.pdfbox.multipdf.PDFMergerUtility:legacyMergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction,org.apache.pdfbox.pdfwriter.compress.CompressParameters)
org.apache.pdfbox.multipdf.PDFCloneUtility:hasSelfReference(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.multipdf.Overlay:overlayPage(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.multipdf.Overlay$LayoutPage,org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.multipdf.PDFCloneUtility)
org.apache.pdfbox.multipdf.Overlay:addOriginalContent(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.multipdf.Overlay:getLayoutPage(int,int)
org.apache.pdfbox.multipdf.Overlay:getLayoutPages(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.Overlay:getLayoutPage(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.Overlay:loadPDF(java.lang.String)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:endMarkedContent()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getOCGs()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:setName(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList:<init>()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getGroupNames()
org.apache.fontbox.util.BoundingBox:setUpperRightY(float)
org.apache.fontbox.util.BoundingBox:setUpperRightX(float)
org.apache.fontbox.util.BoundingBox:setLowerLeftX(float)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getMatrix()
org.apache.pdfbox.multipdf.LayerUtility:transferDict(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,java.util.Set)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:<init>(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.pdfbox.multipdf.LayerUtility:importOcProperties(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.filter.Predictor$PredictorOutputStream:decodeAndWriteRow()
org.apache.pdfbox.filter.LZWFilter:calculateChunk(int,boolean)
org.apache.pdfbox.filter.LZWFilter:checkIndexBounds(java.util.List,long,javax.imageio.stream.MemoryCacheImageInputStream)
org.apache.pdfbox.filter.LZWFilter:createCodeTable()
org.apache.pdfbox.filter.Predictor$PredictorOutputStream:<init>(java.io.OutputStream,int,int,int,int)
java.awt.image.DataBufferUShort:getData()
org.apache.pdfbox.filter.JPXFilter:readJPX(java.io.InputStream,org.apache.pdfbox.filter.DecodeOptions,org.apache.pdfbox.filter.DecodeResult)
java.awt.image.Raster:getDataBuffer()
java.awt.image.BufferedImage:getData()
org.apache.pdfbox.filter.JBIG2Filter:logLevigoDonated()
javax.imageio.ImageReader:getClass()
java.util.zip.DataFormatException:getMessage()
java.util.zip.Inflater:inflate(byte[])
java.util.zip.Inflater:setInput(byte[],int,int)
java.util.zip.Inflater:needsInput()
java.util.zip.Inflater:finished()
java.io.FilterInputStream:close()
java.util.zip.Inflater:end()
org.apache.pdfbox.filter.JBIG2Filter:<init>()
org.apache.pdfbox.filter.JPXFilter:<init>()
org.apache.pdfbox.filter.CryptFilter:<init>()
org.apache.pdfbox.filter.RunLengthDecodeFilter:<init>()
org.apache.pdfbox.filter.ASCII85Filter:<init>()
org.apache.pdfbox.filter.ASCIIHexFilter:<init>()
org.apache.pdfbox.filter.LZWFilter:<init>()
org.apache.pdfbox.filter.CCITTFaxFilter:<init>()
org.apache.pdfbox.filter.DCTFilter:<init>()
org.apache.pdfbox.filter.FlateFilter:<init>()
org.apache.pdfbox.filter.DCTFilter:fromBGRtoRGB(java.awt.image.Raster)
org.apache.pdfbox.filter.DCTFilter:fromYCCKtoCMYK(java.awt.image.Raster)
org.apache.pdfbox.filter.DCTFilter:getAdobeTransformByBruteForce(javax.imageio.stream.ImageInputStream)
org.apache.pdfbox.filter.DCTFilter:getAdobeTransform(javax.imageio.metadata.IIOMetadata)
java.awt.image.Raster:getNumBands()
org.apache.pdfbox.filter.DCTFilter:readImageRaster(javax.imageio.ImageReader,javax.imageio.ImageReadParam)
java.io.OutputStream:<init>()
org.apache.pdfbox.filter.CCITTFaxDecoderStream:read(byte[],int,int)
org.apache.pdfbox.filter.CCITTFaxEncoderStream:fill()
org.apache.pdfbox.filter.CCITTFaxEncoderStream:writeEOL()
org.apache.pdfbox.filter.CCITTFaxEncoderStream:encodeRowType6()
org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node:set(boolean,org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node)
org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node:<init>()
java.io.FilterOutputStream:close()
org.apache.pdfbox.filter.ASCII85OutputStream:flush()
org.apache.pdfbox.cos.COSIncrement:<init>(org.apache.pdfbox.cos.COSUpdateInfo)
java.io.FilterOutputStream:write(byte[],int,int)
org.apache.pdfbox.cos.COSIncrement:collect(org.apache.pdfbox.cos.COSBase)
java.util.List:addAll(java.util.Collection)
java.util.ArrayList:removeAll(java.util.Collection)
org.apache.pdfbox.cos.COSDocument:getObjectsByType(java.util.List,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
java.util.Arrays:hashCode(byte[])
org.apache.pdfbox.cos.COSDictionary:getDate(org.apache.pdfbox.cos.COSName,java.util.Calendar)
org.apache.pdfbox.contentstream.PDFStreamEngine:showText(byte[])
org.apache.pdfbox.contentstream.PDFStreamEngine:applyTextAdjustment(float,float)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getTextLineMatrix()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setLineDashPattern(org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getTransfer2()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setTransfer(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getTransfer()
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:setInitialTransformationMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getSoftMask()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setKnockoutFlag(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getTextKnockoutFlag()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setAlphaSource(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getAlphaSourceFlag()
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getNonStrokingAlphaConstant()
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getStrokingAlphaConstant()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setStrokeAdjustment(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getAutomaticStrokeAdjustment()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setSmoothness(double)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getSmoothnessTolerance()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setFlatness(double)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getFlatnessTolerance()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setFontSize(float)
org.apache.pdfbox.pdmodel.graphics.PDFontSetting:getFontSize()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setFont(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.pdmodel.graphics.PDFontSetting:getFont()
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getFontSetting()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setNonStrokingOverprint(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getNonStrokingOverprintControl()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setOverprint(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setOverprintMode(int)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getOverprintMode()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setRenderingIntent(org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getRenderingIntent()
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getLineDashPattern()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setMiterLimit(float)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getMiterLimit()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setLineJoin(int)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getLineJoinStyle()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setLineCap(int)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getLineCapStyle()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setLineWidth(float)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:defaultIfNull(java.lang.Float,float)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getLineWidth()
java.util.ArrayDeque:size()
org.apache.pdfbox.contentstream.PDFStreamEngine:processTransparencyGroup(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:addXObject(org.apache.pdfbox.pdmodel.graphics.PDXObject)
org.apache.pdfbox.filter.FilterFactory:getFilter(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getFilters()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setStrokingColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:setNonStrokingColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.Loader:loadPDF(byte[],java.lang.String,java.io.InputStream,java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:<init>(org.w3c.dom.Document)
org.apache.pdfbox.pdfparser.FDFParser:parse()
org.apache.pdfbox.pdfparser.FDFParser:<init>(org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.util.filetypedetector.ByteTrie:addPath(java.lang.Object,byte[][])
org.apache.pdfbox.util.filetypedetector.ByteTrie:setDefaultValue(java.lang.Object)
org.apache.pdfbox.util.filetypedetector.ByteTrie:<init>()
org.apache.pdfbox.util.filetypedetector.FileType:$values()
org.apache.pdfbox.util.filetypedetector.FileType:<init>(java.lang.String,int)
org.apache.logging.log4j.LogManager:getLogger(java.lang.Class)
java.util.Properties:getProperty(java.lang.String,java.lang.String)
java.util.Properties:load(java.io.InputStream)
java.util.Properties:<init>()
java.lang.String:makeConcatWithConstants(float,float)
java.util.regex.Pattern:split(java.lang.CharSequence)
java.lang.String:makeConcatWithConstants(float,float,float,float,float,float)
java.awt.geom.Point2D:setLocation(double,double)
org.apache.pdfbox.text.TextPositionComparator:compare(org.apache.pdfbox.text.TextPosition,org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.TextPosition:createDiacritics()
java.util.Arrays:hashCode(int[])
org.apache.pdfbox.util.Matrix:hashCode()
java.util.Arrays:equals(int[],int[])
java.util.Objects:equals(java.lang.Object,java.lang.Object)
java.util.function.BiConsumer:accept(org.apache.pdfbox.text.PDFTextStripperByArea,org.apache.pdfbox.text.TextPosition)
java.io.StringWriter:<init>()
java.io.StringWriter:toString()
java.util.HashMap:remove(java.lang.Object)
org.apache.pdfbox.text.PDFTextStripper:setShouldSeparateByBeads(boolean)
org.apache.pdfbox.text.PDFTextStripper:<init>()
org.apache.pdfbox.text.PDFTextStripper:parseBidiFile(java.io.InputStream)
java.lang.System:lineSeparator()
java.util.List:remove(int)
org.apache.pdfbox.text.TextPosition:mergeDiacritic(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.TextPosition:contains(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.TextPosition:isDiacritic()
org.apache.pdfbox.pdmodel.common.PDRectangle:contains(float,float)
java.util.TreeMap:computeIfAbsent(java.lang.Object,java.util.function.Function)
java.util.SortedSet:isEmpty()
java.util.TreeSet:subSet(java.lang.Object,java.lang.Object)
java.util.SortedMap:values()
java.util.TreeMap:subMap(java.lang.Object,java.lang.Object)
org.apache.pdfbox.text.TextPosition:setUnicode(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getActualText()
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:create(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.text.PDFTextStripper:writeText(org.apache.pdfbox.pdmodel.PDDocument,java.io.Writer)
org.apache.pdfbox.text.PDFTextStripper$LineItem:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:addText(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.PDFMarkedContentExtractor:within(float,float,float)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:addMarkedContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent)
org.apache.pdfbox.text.PDFMarkedContentExtractor:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:<init>(org.apache.pdfbox.pdmodel.font.encoding.GlyphList,java.io.InputStream)
org.apache.pdfbox.text.LegacyPDFStreamEngine:processTextPosition(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.TextPosition:<init>(int,float,float,org.apache.pdfbox.util.Matrix,float,float,float,float,float,java.lang.String,int[],org.apache.pdfbox.pdmodel.font.PDFont,float,int)
org.apache.pdfbox.pdmodel.font.PDFont:toUnicode(int,org.apache.pdfbox.pdmodel.font.encoding.GlyphList)
org.apache.logging.log4j.Logger:warn(java.lang.Object,java.lang.Throwable)
org.apache.pdfbox.pdmodel.font.PDFont:getSpaceWidth()
org.apache.pdfbox.text.LegacyPDFStreamEngine:computeFontHeight(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.fontbox.ttf.TrueTypeFont:getUnitsPerEm()
org.apache.pdfbox.pdmodel.font.PDType0Font:getDescendantFont()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getTrueTypeFont()
java.awt.geom.AffineTransform:hashCode()
java.awt.TexturePaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.rendering.SoftMask$SoftPaintContext:<init>(org.apache.pdfbox.rendering.SoftMask,java.awt.PaintContext)
java.awt.Paint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
java.awt.PaintContext:dispose()
java.awt.image.ColorModel:getAlpha(java.lang.Object)
java.awt.image.ColorModel:getBlue(java.lang.Object)
java.awt.image.ColorModel:getGreen(java.lang.Object)
java.awt.image.ColorModel:getRed(java.lang.Object)
java.awt.image.Raster:getDataElements(int,int,java.lang.Object)
java.awt.image.ColorModel:createCompatibleWritableRaster(int,int)
org.apache.pdfbox.rendering.SoftMask$SoftPaintContext:getColorModel()
java.awt.PaintContext:getColorModel()
java.awt.PaintContext:getRaster(int,int,int,int)
org.apache.pdfbox.rendering.RenderDestination:$values()
org.apache.pdfbox.rendering.RenderDestination:<init>(java.lang.String,int)
org.apache.pdfbox.rendering.PageDrawer:showTransparencyGroupOnGraphics(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup,java.awt.Graphics2D)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getOptionalContent()
java.awt.geom.Area:isEmpty()
java.awt.geom.Rectangle2D:add(java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDResources:getShading(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.rendering.PageDrawer:drawBufferedImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.BufferedImage,java.awt.geom.AffineTransform)
java.awt.image.LookupOp:filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)
java.awt.image.LookupOp:<init>(java.awt.image.LookupTable,java.awt.RenderingHints)
org.apache.pdfbox.rendering.PageDrawer:getInvLookupTable()
java.awt.Graphics2D:setRenderingHints(java.util.Map)
java.awt.Graphics2D:getRenderingHints()
org.apache.pdfbox.rendering.PageDrawer:getSubsampling(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getOptionalContent()
java.awt.geom.GeneralPath:getCurrentPoint()
java.awt.geom.GeneralPath:curveTo(float,float,float,float,float,float)
org.apache.pdfbox.rendering.PageDrawer:adjustClip(java.awt.geom.GeneralPath)
org.apache.pdfbox.rendering.PageDrawer:strokePath()
org.apache.pdfbox.rendering.PageDrawer:fillPath(int)
java.awt.geom.GeneralPath:clone()
org.apache.pdfbox.rendering.PageDrawer:drawGlyph(java.awt.geom.GeneralPath,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector,java.awt.geom.AffineTransform)
org.apache.pdfbox.rendering.GlyphCache:getPathForCharacterCode(int)
org.apache.pdfbox.rendering.GlyphCache:<init>(org.apache.pdfbox.pdmodel.font.PDVectorFont)
org.apache.pdfbox.rendering.PageDrawer:endTextClip()
org.apache.pdfbox.rendering.PageDrawer:beginTextClip()
org.apache.pdfbox.rendering.PDFRenderer:renderPageToGraphics(int,java.awt.Graphics2D,float)
org.apache.pdfbox.rendering.PDFRenderer:renderImage(int,float)
org.apache.pdfbox.rendering.ImageType:$values()
org.apache.pdfbox.rendering.ImageType$5:<init>(java.lang.String,int)
org.apache.pdfbox.rendering.ImageType$4:<init>(java.lang.String,int)
org.apache.pdfbox.rendering.ImageType$3:<init>(java.lang.String,int)
org.apache.pdfbox.rendering.ImageType$2:<init>(java.lang.String,int)
org.apache.pdfbox.rendering.ImageType$1:<init>(java.lang.String,int)
java.awt.Graphics2D:shear(double,double)
java.awt.Graphics2D:hit(java.awt.Rectangle,java.awt.Shape,boolean)
java.awt.Graphics2D:getStroke()
java.awt.Graphics2D:getPaint()
java.awt.Graphics2D:getFontRenderContext()
java.awt.Graphics2D:getComposite()
java.awt.Graphics2D:getBackground()
java.awt.Graphics2D:drawString(java.lang.String,float,float)
java.awt.Graphics2D:drawString(java.text.AttributedCharacterIterator,float,float)
java.awt.Graphics2D:drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)
java.awt.Graphics2D:drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)
java.awt.Graphics2D:drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)
java.awt.Graphics2D:drawGlyphVector(java.awt.font.GlyphVector,float,float)
java.awt.Graphics2D:clip(java.awt.Shape)
java.awt.Graphics2D:setXORMode(java.awt.Color)
java.awt.Graphics2D:setPaintMode()
java.awt.Graphics2D:setFont(java.awt.Font)
java.awt.Graphics2D:setColor(java.awt.Color)
java.awt.Graphics2D:setClip(int,int,int,int)
java.awt.Graphics2D:getFontMetrics(java.awt.Font)
java.awt.Graphics2D:getFont()
java.awt.Graphics2D:getColor()
java.awt.Graphics2D:getClipBounds()
java.awt.Graphics2D:fillRoundRect(int,int,int,int,int,int)
java.awt.Graphics2D:fillPolygon(int[],int[],int)
java.awt.Graphics2D:fillOval(int,int,int,int)
java.awt.Graphics2D:fillArc(int,int,int,int,int,int)
java.awt.Graphics2D:drawString(java.lang.String,int,int)
java.awt.Graphics2D:drawString(java.text.AttributedCharacterIterator,int,int)
java.awt.Graphics2D:drawRoundRect(int,int,int,int,int,int)
java.awt.Graphics2D:drawPolyline(int[],int[],int)
java.awt.Graphics2D:drawPolygon(int[],int[],int)
java.awt.Graphics2D:drawOval(int,int,int,int)
java.awt.Graphics2D:drawLine(int,int,int,int)
java.awt.Graphics2D:drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)
java.awt.Graphics2D:drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)
java.awt.Graphics2D:drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)
java.awt.Graphics2D:drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)
java.awt.Graphics2D:drawArc(int,int,int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:<init>(java.awt.image.BufferedImage,java.awt.Graphics2D,java.awt.image.BufferedImage,java.awt.Graphics2D)
java.awt.Graphics2D:create()
java.awt.Graphics2D:copyArea(int,int,int,int,int,int)
java.awt.Graphics2D:clipRect(int,int,int,int)
org.apache.pdfbox.printing.Scaling:$values()
org.apache.pdfbox.printing.Scaling:<init>(java.lang.String,int)
java.awt.print.PrinterIOException:<init>(java.io.IOException)
java.awt.Graphics:drawRect(int,int,int,int)
java.awt.BasicStroke:<init>(float)
org.apache.pdfbox.rendering.PDFRenderer:setRenderingHints(java.awt.RenderingHints)
org.apache.pdfbox.rendering.PDFRenderer:setSubsamplingAllowed(boolean)
java.awt.print.PageFormat:getImageableY()
java.awt.print.PageFormat:getImageableX()
java.awt.print.PageFormat:getImageableHeight()
java.awt.print.PageFormat:getImageableWidth()
org.apache.pdfbox.printing.PDFPrintable:getRotatedCropBox(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling)
org.apache.pdfbox.printing.PDFPrintable:setRenderingHints(java.awt.RenderingHints)
org.apache.pdfbox.printing.PDFPrintable:setSubsamplingAllowed(boolean)
java.awt.print.PageFormat:setOrientation(int)
java.awt.print.PageFormat:setPaper(java.awt.print.Paper)
java.awt.print.PageFormat:<init>()
java.awt.print.Paper:setImageableArea(double,double,double,double)
java.awt.print.Paper:setSize(double,double)
java.awt.print.Paper:<init>()
org.apache.pdfbox.printing.PDFPrintable:getRotatedMediaBox(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Orientation,boolean,float,boolean)
org.apache.pdfbox.printing.Orientation:values()
org.apache.pdfbox.printing.Orientation:$values()
org.apache.pdfbox.printing.Orientation:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$READING_DIRECTION:$values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$READING_DIRECTION:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$PRINT_SCALING:$values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$PRINT_SCALING:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$NON_FULL_SCREEN_PAGE_MODE:$values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$NON_FULL_SCREEN_PAGE_MODE:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$DUPLEX:$values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$DUPLEX:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY:$values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle:$values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionMotion:$values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionMotion:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection:$values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection$1:<init>(java.lang.String,int,int)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDimension:$values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDimension:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection:getCOSBase()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:<init>(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setNextBead(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setPreviousBead(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getNextBead()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setThread(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread)
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:<init>()
org.apache.pdfbox.cos.COSDictionary:setString(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getCOSObject()
org.apache.pdfbox.cos.COSDictionary:getString(java.lang.String,java.lang.String)
org.apache.pdfbox.cos.COSDictionary:setInt(java.lang.String,int)
org.apache.pdfbox.cos.COSDictionary:getInt(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:getFloat(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:getString(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getBytes()
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getStringOrStream(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:setAppearanceValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:getValue()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDVariableText)
org.apache.pdfbox.pdmodel.fdf.FDFField:setValue(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.fdf.FDFField:getClearWidgetFieldFlags()
org.apache.pdfbox.pdmodel.fdf.FDFField:getSetWidgetFieldFlags()
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:getWidgets()
org.apache.pdfbox.pdmodel.fdf.FDFField:getWidgetFieldFlags()
org.apache.pdfbox.pdmodel.interactive.form.PDField:importFDF(org.apache.pdfbox.pdmodel.fdf.FDFField)
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getFieldType()
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getFieldFlags()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:getValue()
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getValue()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
java.lang.UnsupportedOperationException:<init>()
java.util.ArrayDeque:poll()
org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:hasNext()
org.apache.pdfbox.pdmodel.interactive.form.PDField:getInheritableAttribute(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getValue()
org.apache.pdfbox.cos.COSArray:toCOSNumberIntegerList()
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils$KeyValue:getValue()
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils$KeyValue:getKey()
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:sortByValue(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isSort()
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:toKeyValueList(java.util.List,java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:getOnValue()
org.apache.pdfbox.pdmodel.interactive.form.PDButton:getValue()
org.apache.pdfbox.pdmodel.interactive.form.PDButton:checkValue(java.lang.String)
java.lang.String:makeConcatWithConstants(int,java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:updateByOption(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:isCachingFields()
org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:<init>(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:flatten(java.util.List,boolean)
java.util.Comparator:comparing(java.util.function.Function)
java.lang.Iterable:iterator(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:switchNodeCount()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:updateParentOpenCountForAddedChild(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:prepend(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:requireSingleNode(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:append(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItemIterator:hasNext()
org.apache.pdfbox.pdmodel.graphics.color.PDColor:toCOSArray()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:<init>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:<init>()
org.apache.pdfbox.cos.COSArray:set(int,int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:indexOfPageTree(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:yAxis(float)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:xAxis(float)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:readImageStream(java.io.InputStream)
java.io.FileInputStream:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:calculatePageSizeFromRandomAccessRead(org.apache.pdfbox.io.RandomAccessRead,int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:calculatePageSizeFromFile(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:setVisibleSignature(java.io.InputStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:buildPDF(org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:getPdVisibleSignature()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:<init>(org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateBuilder)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setWidgetDictionary(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setVisualSignature(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:appendRawCommands(java.io.OutputStream,java.lang.String)
java.lang.String:makeConcatWithConstants(int,int,java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:getStructure()
org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.PDXObject)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageFormName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageFormResources(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImageFormStream(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setInnerFormName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setInnerForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setInnerFormResources(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setInnterFormStream(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAppearanceDictionary(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setHolderForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setHolderFormResources(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setHolderFormStream(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setFormatterRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setProcSet(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAffineTransform(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setSignatureRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getHeight()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getyAxis()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getTemplateHeight()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getWidth()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getxAxis()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAcroFormDictionary(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAcroFormFields(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setPdSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setSignatureField(org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setAcroForm(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setTemplate(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateStructure:setPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDPage:<init>(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getPageWidth()
org.apache.pdfbox.cos.COSDocument:close()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:setVisualSignature(java.io.InputStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:getVisibleSignature()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:toByteArray()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getByteRange()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getConvertedContents(java.io.InputStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:convertListOfByteArraysToCOSArray(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getListOfByteArraysFromCOSArray(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addKeyUsage(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSArray:ofCOSNames(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:read(byte[],int,int)
java.io.FilterInputStream:read()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.AnnotationBorder:getAnnotationBorder(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawKey(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawComment(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawUpLeftArrow(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawUpArrow(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawCrossHairs(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawRightArrow(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawNewParagraph(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawParagraph(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawHelp(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawInsert(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawCircles(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawZapf(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream,int,int,java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:drawNote(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText,org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:getName()
org.apache.pdfbox.pdmodel.PDFormContentStream:close()
org.apache.pdfbox.pdmodel.PDFormContentStream:fill()
org.apache.pdfbox.pdmodel.PDFormContentStream:addRect(float,float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.graphics.color.PDColor:<init>(float[],org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:<init>(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.PDResources:add(org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern)
org.apache.pdfbox.pdmodel.PDPatternContentStream:close()
org.apache.pdfbox.pdmodel.PDPatternContentStream:stroke()
org.apache.pdfbox.pdmodel.PDPatternContentStream:lineTo(float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:moveTo(float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setMiterLimit(float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setLineWidth(float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setLineJoinStyle(int)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setLineCapStyle(int)
org.apache.pdfbox.pdmodel.PDPatternContentStream:<init>(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setPaintType(int)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setTilingType(int)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setYStep(float)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setXStep(float)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:<init>()
org.apache.pdfbox.pdmodel.PDFormContentStream:<init>(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawShape(float,boolean,boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getMatrix()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getBBox()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:getRectDifference()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:createCloudyRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:<init>(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,double,double,org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:getIntensity()
org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary:getStyle()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setBorderLine(float,org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary,org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColorOnDemand(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColorOnDemand(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:getLineWidth()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:getEndPointEndingStyle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:getStartPointEndingStyle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:getInteriorColor()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:getVertices()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:createCloudyPolygon(float[][])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:getBorderEffect()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:getInteriorColor()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:getPathArray(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:getLineWidth()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getQuadPoints()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:getLineWidth()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getInteriorColor()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getCaptionVerticalOffset()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getCaptionHorizontalOffset()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getEndPointEndingStyle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getStartPointEndingStyle()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getCaptionPositioning()
org.apache.logging.log4j.util.Supplier:get(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:hasCaption()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getLeaderLineOffsetLength()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getLeaderLineExtensionLength()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getLeaderLineLength()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:getLine()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:getInkList()
org.apache.pdfbox.pdmodel.PDFormContentStream:lineTo(float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:curveTo(float,float,float,float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:moveTo(float,float)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setGroup(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes)
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:<init>()
org.apache.pdfbox.pdmodel.PDFormContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:extractFontDetails(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setRectDifference(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getRectDifference()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getRectDifferences()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getBorderEffect()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getLineEndingStyle()
java.util.regex.Matcher:group(int)
java.util.regex.Matcher:find()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getDefaultStyleString()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:extractNonStrokingColor(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getCallout()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:drawPushPin(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:drawTag(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:drawGraph(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:drawPaperclip(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:getAttachmentName()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:createCloudyEllipse(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:getLineWidth()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:setRectDifferences(float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:createAngledStyles()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:createInteriorColorStyles()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:createShortStyles()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:applyRectDifferences(org.apache.pdfbox.pdmodel.common.PDRectangle,float[])
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:addRectDifferences(org.apache.pdfbox.pdmodel.common.PDRectangle,float[])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setRectDifferences(float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getPaddedRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle,float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:getRectDifferences()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawCircle(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawDiamond(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawArrow(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setRolloverAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:getRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setDownAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:getDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getNormalAppearanceAsContentStream(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getColor()
org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSound:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setLine(float[])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setRectDifferences(float,float,float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:constructAppearances(org.apache.pdfbox.pdmodel.PDDocument)
java.util.Objects:hash(java.lang.Object[])
org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.OpenMode:values()
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:setAction(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:<init>()
org.apache.pdfbox.pdmodel.interactive.action.OpenMode:$values()
org.apache.pdfbox.pdmodel.interactive.action.OpenMode:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.TextAlign:$values()
org.apache.pdfbox.pdmodel.interactive.TextAlign:<init>(java.lang.String,int,int)
java.util.function.Consumer:accept(org.apache.pdfbox.pdmodel.interactive.PlainText)
org.apache.pdfbox.pdmodel.interactive.PlainText$TextAttribute:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:values()
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:$values()
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:<init>(java.lang.String,int,int)
org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent:$values()
org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent:<init>(java.lang.String,int,java.lang.String)
org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:getCOSObject()
java.awt.Color:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.Type6ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
java.awt.geom.AffineTransform:transform(float[],int,float[],int,int)
org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:dispose()
org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:getValueFromArray(int,int)
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:calcColor(java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:contains(java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:getBoundary()
org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:addLinePoints(org.apache.pdfbox.pdmodel.graphics.shading.Line,int[][])
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:getLine()
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:getDeg()
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:calculateInputValues(double,double)
java.util.Arrays:fill(int[],int)
java.awt.geom.Point2D:clone()
org.apache.pdfbox.pdmodel.graphics.shading.Patch:overlaps(java.awt.geom.Point2D,java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.Patch:edgeEquationValue(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.Vertex:<init>(java.awt.geom.Point2D,float[])
javax.imageio.stream.ImageInputStream:getBitOffset()
org.apache.logging.log4j.Logger:debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
org.apache.logging.log4j.Logger:isDebugEnabled()
org.apache.logging.log4j.util.Supplier:get(long,long,float,float)
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:interpolate(float,long,float,float)
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:<init>(java.awt.geom.Point2D[],float[][])
org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:<init>(java.awt.geom.Point2D[],float[][])
org.apache.pdfbox.pdmodel.graphics.shading.Type6ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:setBitsPerComponent(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:setBitsPerCoordinate(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:setDecodeValues(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingPaint:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:<init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2,java.awt.image.ColorModel,java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getContentsForRandomAccess()
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:<init>()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:setGroupEnabled(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup,boolean)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:getName()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:$values()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:<init>(java.lang.String,int,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:getName()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup$RenderState:$values()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup$RenderState:<init>(java.lang.String,int,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:makeCrcTable()
java.io.InputStream:read(byte[],int,int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:ensureStream()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getStencilImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.Paint)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getRawRaster()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:getRGBImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:createInputStream()
org.apache.pdfbox.pdmodel.common.PDStream:createInputStream(java.util.List)
org.apache.pdfbox.pdmodel.common.PDStream:createInputStream(org.apache.pdfbox.filter.DecodeOptions)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getRawRaster()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getImage(java.awt.Rectangle,int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[],java.lang.String,org.apache.pdfbox.pdmodel.graphics.image.CustomFactory)
org.apache.pdfbox.util.filetypedetector.FileTypeDetector:detectFileType(java.io.BufferedInputStream)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromFileByExtension(java.io.File,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float)
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getContentsForRandomAccess()
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:configureOutputProfile(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:setComponentRangeArray(org.apache.pdfbox.pdmodel.common.PDRange,int)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:getBRange()
org.apache.pdfbox.pdmodel.graphics.color.PDLab:getARange()
org.apache.pdfbox.pdmodel.graphics.color.PDLab:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:<init>(org.apache.pdfbox.cos.COSName)
java.awt.color.ColorSpace:getMaxValue(int)
java.awt.color.ColorSpace:getMinValue(int)
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getNumberOfComponents()
java.lang.String:makeConcatWithConstants(java.lang.String,int,int)
java.awt.image.IndexColorModel:<init>(int,int,byte[],byte[],byte[])
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:isSRGB()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getName()
java.awt.color.ICC_Profile:getColorSpaceType()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:clampColors(java.awt.color.ICC_ColorSpace,float[])
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:getComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:getColorSpace()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:getColorants(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:getProcess()
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:convert(java.util.Map)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:getCOSDictionary()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBWithAttributes(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBWithAttributes(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:isNChannel()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:toRGBImageAWT(java.awt.image.WritableRaster,java.awt.color.ColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:init()
org.apache.pdfbox.pdmodel.common.function.PDFunction:getNumberOfOutputParameters()
java.util.Arrays:fill(float[],float)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:<init>(org.apache.pdfbox.cos.COSDictionary)
java.util.Arrays:toString(float[])
org.apache.pdfbox.util.Matrix:getValues()
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getMatrix()
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getB()
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getG()
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getR()
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getGamma()
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getGamma()
java.awt.color.ColorSpace:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:createBlendModeMap()
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.blend.BlendMode$BlendChannelFunction,org.apache.pdfbox.pdmodel.graphics.blend.BlendMode$BlendFunction)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getLuminosityRGB(float[],float[],float[])
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getSaturationRGB(float[],float[],float[])
java.lang.String:makeConcatWithConstants(java.lang.String,boolean)
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite$BlendCompositeContext:<init>(org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite,java.awt.image.ColorModel,java.awt.image.ColorModel)
java.awt.image.ColorModel:getDataElements(float[],int,java.lang.Object)
java.awt.color.ColorSpace:fromRGB(float[])
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getBlendFunction()
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:getBlendChannelFunction()
java.awt.image.ColorModel:getNormalizedComponents(java.lang.Object,float[],int)
java.awt.color.ColorSpace:equals(java.lang.Object)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:isSeparableBlendMode()
java.awt.image.Raster:getMinY()
java.awt.image.Raster:getMinX()
org.apache.pdfbox.pdmodel.font.encoding.ZapfDingbatsEncoding:<init>()
org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding:<init>()
org.apache.pdfbox.pdmodel.font.encoding.SymbolEncoding:<init>()
org.apache.pdfbox.pdmodel.font.encoding.StandardEncoding:<init>()
org.apache.pdfbox.pdmodel.font.encoding.MacOSRomanEncoding:<init>()
org.apache.pdfbox.pdmodel.font.encoding.MacExpertEncoding:<init>()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:load(java.lang.String,int)
org.apache.pdfbox.pdmodel.font.encoding.StandardEncoding:getEncodingName()
org.apache.fontbox.ttf.TTFSubsetter:writeToStream(java.io.OutputStream)
org.apache.fontbox.ttf.TTFSubsetter:setPrefix(java.lang.String)
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:getTag(java.util.Map)
org.apache.fontbox.ttf.TTFSubsetter:getGIDMap()
org.apache.fontbox.ttf.TTFSubsetter:addGlyphIds(java.util.Set)
org.apache.fontbox.ttf.TTFSubsetter:forceInvisible(int)
org.apache.fontbox.ttf.TTFSubsetter:addAll(java.util.Set)
org.apache.fontbox.ttf.TTFSubsetter:<init>(org.apache.fontbox.ttf.TrueTypeFont,java.util.List)
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:isSubsettingPermitted(org.apache.fontbox.ttf.TrueTypeFont)
org.apache.fontbox.ttf.TTFParser:parseEmbedded(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:mapName(java.lang.String,org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:mapName(org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName)
java.util.EnumMap:<init>(java.lang.Class)
org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName:$values()
org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName:<init>(java.lang.String,int,java.lang.String)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getXHeight()
org.apache.pdfbox.util.Matrix:transform(org.apache.pdfbox.util.Vector)
org.apache.pdfbox.pdmodel.font.PDType3Font:getWidth(int)
org.apache.pdfbox.pdmodel.font.PDType3Font:getResources()
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getContentsForRandomAccess()
org.apache.pdfbox.pdmodel.font.PDType1Font:getPath(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType1Font:generateBoundingBox()
org.apache.fontbox.EncodedFont:getEncoding()
org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:<init>(org.apache.fontbox.afm.FontMetrics)
org.apache.pdfbox.pdmodel.font.PDType1Font:codeToName(int)
org.apache.pdfbox.pdmodel.font.encoding.Encoding:getNameToCodeMap()
org.apache.pdfbox.pdmodel.font.encoding.Encoding:contains(java.lang.String)
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:codePointToName(int)
org.apache.fontbox.afm.FontMetrics:getCharacterHeight(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType1Font:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.pdmodel.font.encoding.Encoding)
org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName:values()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getAverageCharacterWidth()
org.apache.fontbox.cff.Type1CharString:getWidth()
org.apache.fontbox.cff.CFFType1Font:getType1CharString(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType1CFont:getNameInFont(java.lang.String)
org.apache.fontbox.cff.Type1CharString:getBounds()
org.apache.pdfbox.pdmodel.font.PDType1CFont:codeToName(int)
org.apache.fontbox.cff.CFFType1Font:getWidth(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType1CFont:generateBoundingBox()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getPath(java.lang.String)
org.apache.fontbox.cmap.CMap:readCode(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDCIDFont:getWidth(int)
org.apache.pdfbox.pdmodel.font.PDCIDFont:getVerticalDisplacementVectorY(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:isVertical()
org.apache.pdfbox.util.Vector:scale(float)
org.apache.pdfbox.pdmodel.font.PDCIDFont:getPositionVector(int)
org.apache.pdfbox.pdmodel.font.PDCIDFont:getAverageFontWidth()
org.apache.pdfbox.pdmodel.font.PDCIDFont:hasExplicitWidth(int)
org.apache.pdfbox.pdmodel.font.PDCIDFont:getFontDescriptor()
org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,boolean)
java.util.function.BiConsumer:accept()
java.awt.geom.GeneralPath:transform(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:isEmbedded()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getPath(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getGIDToCode()
org.apache.fontbox.ttf.TrueTypeFont:hasGlyph(java.lang.String)
org.apache.fontbox.ttf.GlyphData:getBoundingBox()
org.apache.fontbox.ttf.TrueTypeFont:getAdvanceWidth(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:generateBoundingBox()
org.apache.pdfbox.pdmodel.font.encoding.BuiltInEncoding:<init>(java.util.Map)
org.apache.fontbox.ttf.PostScriptTable:getName(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:load(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.pdmodel.font.encoding.Encoding)
org.apache.fontbox.afm.FontMetrics:getCharacterWidth(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:toUnicode(int,org.apache.pdfbox.pdmodel.font.encoding.GlyphList)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:isFontSymbolic()
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:<init>(org.apache.pdfbox.cos.COSDictionary,boolean,org.apache.pdfbox.pdmodel.font.encoding.Encoding)
java.lang.Boolean:equals(java.lang.Object)
java.lang.String:makeConcatWithConstants(int,int,int,int,int,int,int,int,int,int)
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getXHeight()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getMidline()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getLetterform()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getArmStyle()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getStrokeVariation()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getContrast()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:getProportion()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildCIDSet(java.util.TreeMap)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildCIDToGIDMap(java.util.TreeMap)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildWidths(java.util.TreeMap)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:addNameTag(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildVerticalMetrics(java.util.TreeMap)
java.util.function.BiConsumer:accept(java.util.TreeMap)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder$State:$values()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder$State:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:isEmbedded()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getPath(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:encodeGlyphId(int)
org.apache.fontbox.cmap.CMap:getCodesFromUnicode(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType0Font:getCMapUCS2()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:generateBoundingBox()
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getAverageCharacterWidth()
org.apache.fontbox.cff.Type2CharString:getBounds()
org.apache.fontbox.FontBoxFont:getWidth(java.lang.String)
org.apache.fontbox.cff.Type2CharString:getWidth()
org.apache.fontbox.cff.CFFCharset:getGIDForCID(int)
org.apache.fontbox.cff.CFFCIDFont:getCharset()
org.apache.fontbox.cff.Type2CharString:getGID()
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getPath(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:generateBoundingBox()
org.apache.pdfbox.pdmodel.font.PDCIDFont:getBaseFont()
org.apache.pdfbox.pdmodel.font.FontMapperImpl:<init>()
org.apache.pdfbox.pdmodel.font.FontCache:<init>()
java.lang.String:makeConcatWithConstants(double,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.util.PriorityQueue:poll()
java.util.PriorityQueue:isEmpty()
java.io.PrintStream:println(java.lang.String)
java.util.PriorityQueue:peek()
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getFontMatches(org.apache.pdfbox.pdmodel.font.PDFontDescriptor,org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo)
org.apache.pdfbox.pdmodel.font.CIDFontMapping:<init>(org.apache.fontbox.ttf.OpenTypeFont,org.apache.fontbox.FontBoxFont,boolean)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getFallbackFontName(org.apache.pdfbox.pdmodel.font.PDFontDescriptor)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:findFontBoxFont(java.lang.String)
org.apache.pdfbox.pdmodel.font.FontMapperImpl$FontMatch:compareTo(org.apache.pdfbox.pdmodel.font.FontMapperImpl$FontMatch)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:<init>(org.apache.pdfbox.pdmodel.font.FontCache)
org.apache.pdfbox.pdmodel.font.FontFormat:$values()
org.apache.pdfbox.pdmodel.font.FontFormat:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getPostScriptName()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getFormat()
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String,java.lang.String,long)
org.apache.pdfbox.pdmodel.font.FontInfo:toString()
org.apache.pdfbox.pdmodel.font.FontCache:addFont(org.apache.pdfbox.pdmodel.font.FontInfo,org.apache.fontbox.FontBoxFont)
java.lang.RuntimeException:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getOTFFont(java.lang.String,java.io.File)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getTrueTypeFont(java.lang.String,java.io.File)
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getType1Font(java.lang.String,java.io.File)
org.apache.pdfbox.pdmodel.font.FontCache:getFont(org.apache.pdfbox.pdmodel.font.FontInfo)
org.apache.pdfbox.pdmodel.font.FontFormat:values()
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormGenerateAppearancesProcessor:process()
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormGenerateAppearancesProcessor:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:process()
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormDefaultsProcessor:process()
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormDefaultsProcessor:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFPageInfo:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:<init>(org.apache.pdfbox.cos.COSDictionary)
java.util.function.BiConsumer:accept(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.common.PDRange:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:setFractionalSpaceToAllocate(org.apache.pdfbox.pdmodel.common.PDRange)
org.apache.pdfbox.pdmodel.common.PDRange:setMax(float)
org.apache.pdfbox.pdmodel.common.PDRange:setMin(float)
org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.common.COSArrayList:converterToCOSArray(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:saveXFDF(java.io.File)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:save(java.io.File)
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:create(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFPage:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getStringOrStream(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isOwnerPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isUserPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)
org.apache.pdfbox.cos.COSDocument:setEncryptionDictionary(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareEncryptionDictRev234(java.lang.String,java.lang.String,org.apache.pdfbox.pdmodel.encryption.PDEncryption,int,org.apache.pdfbox.pdmodel.PDDocument,int,int)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareEncryptionDictRev6(java.lang.String,java.lang.String,org.apache.pdfbox.pdmodel.encryption.PDEncryption,int)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:saslPrepStored(java.lang.String)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setPermissions(int)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:getPermissionBytes()
org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy:getUserPassword()
org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy:getOwnerPassword()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setLength(int)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setRevision(int)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:removeV45filters()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setVersion(int)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setFilter(java.lang.String)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeRevisionNumber(int)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:<init>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:validatePerms(org.apache.pdfbox.pdmodel.encryption.PDEncryption,int,boolean)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)
org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:setReadOnly()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:<init>(int)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:getOwnerAccessPermission()
org.apache.pdfbox.pdmodel.encryption.SaslPrep:saslPrepQuery(java.lang.String)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getOwnerEncryptionKey()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getUserEncryptionKey()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getOwnerKey()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getUserKey()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:getDocumentIDBytes(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:getCryptFilterMethod()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getStdCryptFilterDictionary()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getLength()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getPermissions()
org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial:getPassword()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:isEncryptMetaData()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getStringFilterName()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getStreamFilterName()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getVersion()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:<init>(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:<init>()
org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:<init>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:<init>()
org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:isPreferAES()
java.util.Map$Entry:setValue(java.lang.Object)
org.apache.pdfbox.pdmodel.encryption.RC4Cipher:write(byte[],java.io.OutputStream)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setRecipients(byte[][])
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:prepareEncryptionDictAES(org.apache.pdfbox.pdmodel.encryption.PDEncryption,org.apache.pdfbox.cos.COSName,byte[][])
org.apache.pdfbox.pdmodel.encryption.MessageDigests:getSHA1()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setSubFilter(java.lang.String)
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:computeRecipientsField(byte[])
javax.crypto.KeyGenerator:init(int,java.security.SecureRandom)
javax.crypto.KeyGenerator:getInstance(java.lang.String)
org.bouncycastle.util.Arrays:copyOf(byte[],int)
org.apache.pdfbox.pdmodel.encryption.AccessPermission:<init>(byte[])
java.lang.String:makeConcatWithConstants(int,java.lang.String)
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:appendCertInfo(java.lang.StringBuilder,org.bouncycastle.cms.KeyTransRecipientId,java.security.cert.X509Certificate,org.bouncycastle.cert.X509CertificateHolder)
org.bouncycastle.cms.RecipientInformation:getContent(org.bouncycastle.cms.Recipient)
org.bouncycastle.cms.jcajce.JceKeyTransEnvelopedRecipient:<init>(java.security.PrivateKey)
org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial:getPrivateKey()
org.bouncycastle.cms.RecipientId:match(java.lang.Object)
org.bouncycastle.cms.RecipientInformation:getRID()
org.bouncycastle.cms.RecipientInformationStore:getRecipients()
org.bouncycastle.cms.CMSEnvelopedData:getRecipientInfos()
org.bouncycastle.cms.CMSEnvelopedData:<init>(byte[])
org.bouncycastle.cert.X509CertificateHolder:<init>(byte[])
java.security.cert.X509Certificate:getEncoded()
org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial:getCertificate()
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:isEncryptMetaData()
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:getLength()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getDefaultCryptFilterDictionary()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:canPrint()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:canModifyAnnotations()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:canModify()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:canExtractContent()
java.lang.reflect.Field:get(java.lang.Object)
java.lang.reflect.Modifier:isFinal(int)
java.lang.reflect.Field:getModifiers()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getSummary()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getScope()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getHeaders()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getColSpan()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:getRowSpan()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getCOSObject()
org.apache.pdfbox.cos.COSDictionary:setItem(java.lang.String,org.apache.pdfbox.pdmodel.common.COSObjectable)
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:getCOSObject()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.cos.COSDictionary:getInt(java.lang.String,int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:getAlternateName()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:getCheckedState()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:getRole()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:getListNumbering()
org.apache.pdfbox.pdmodel.common.PDRectangle:getCOSObject()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setColourByIndex(int,org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getColourByIndex(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getSummary()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getScope()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getHeaders()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getColSpan()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getRowSpan()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:getListNumbering()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:toString()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isAttached(java.lang.String)
java.util.List:of(java.lang.Object)
java.util.List:of(java.lang.Object,java.lang.Object,java.lang.Object)
java.util.StringJoiner:toString()
java.util.StringJoiner:add(java.lang.CharSequence)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:getRevisionNumber(int)
java.util.StringJoiner:<init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)
org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:equals(java.lang.Object)
org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:hashCode()
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String,java.lang.String,boolean)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:isHidden()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:getFormattedValue()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:getValue()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:getName()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:potentiallyNotifyChanged(java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:getOwnerUserProperties()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:toString()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setParent(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:removeObjectableKid(org.apache.pdfbox.pdmodel.common.COSObjectable)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:insertObjectableBefore(org.apache.pdfbox.pdmodel.common.COSObjectable,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:appendObjectableKid(org.apache.pdfbox.pdmodel.common.COSObjectable)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:createObject(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getMCID()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getRoleMap()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getStructureType()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setRevisionNumber(int)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:getObject(int)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:size()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:setRevisionNumber(java.lang.Object,int)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:addObject(java.lang.Object,int)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:setStructureElement(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:create(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setStructureType(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:getCOSObject()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:getMCID()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:getAttributeValue(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:getAttributeNames()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:notifyChanged()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:isValueChanged(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase)
java.util.Stack:addAll(java.util.Collection)
java.util.LinkedList:addFirst(java.lang.Object)
java.lang.Number:intValue()
java.util.Stack:get(int)
java.util.Stack:size()
java.util.Stack:subList(int,int)
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Eq:isEqual(java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$State:$values()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$State:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Roll:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Pop:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Index:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Exch:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Dup:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Copy:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators$IfElse:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators$If:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Xor:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$True:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Or:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Not:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Ne:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Lt:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Le:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Gt:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Ge:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$False:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Bitshift:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$And:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Truncate:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sub:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sin:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Round:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Neg:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Mul:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Mod:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Log:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Ln:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$IDiv:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Floor:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Exp:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Div:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cvr:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cvi:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cos:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Ceiling:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Atan:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Abs:<init>()
java.util.regex.Pattern:asMatchPredicate()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:token(java.lang.String)
java.lang.CharSequence:toString()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
java.lang.ClassCastException:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:popNumber()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:popReal()
java.lang.Number:doubleValue()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:popInt()
java.lang.Math:log10(double)
java.lang.Math:log(double)
java.lang.Math:toDegrees(double)
org.apache.pdfbox.pdmodel.common.function.type4.Operators:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext:<init>(org.apache.pdfbox.pdmodel.common.function.type4.Operators)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getBounds()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getEncodeForParameter(int)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getFunctions()
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String,float)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:getN()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:getC1()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:getC0()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getDecodeForParameter(int)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:rinterpolate()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol:<init>(org.apache.pdfbox.pdmodel.common.function.PDFunctionType0,float[],int[],int[])
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getEncodeForParameter(int)
org.apache.pdfbox.pdmodel.common.function.PDFunction:clipToRange(float,float,float)
org.apache.pdfbox.pdmodel.common.function.PDFunction:getDomainValues()
org.apache.pdfbox.cos.COSDictionary:setEmbeddedString(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,java.lang.String)
org.apache.pdfbox.cos.COSDictionary:getEmbeddedString(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:<init>(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getObjectFromEFDictionary(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFile()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileUnix()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileMac()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileDos()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileUnicode()
org.apache.pdfbox.pdmodel.common.PDStream:internalGetDecodeParams(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:<init>(float,float)
java.lang.String:makeConcatWithConstants(float,float,float,float)
java.util.TreeSet:<init>(java.util.Collection)
org.apache.pdfbox.pdmodel.common.PDPageLabels:computeLabels(org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelHandler,int)
java.util.TreeMap:forEach(java.util.function.BiConsumer)
java.util.TreeMap:size()
org.apache.pdfbox.pdmodel.common.PDObjectStream:<init>(org.apache.pdfbox.cos.COSStream)
java.lang.Integer:compareTo(java.lang.Integer)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getLowerLimit()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:calculateLimits()
java.util.function.Consumer:accept(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)
java.util.Map:toString()
org.apache.pdfbox.cos.COSDictionary:clear()
java.util.Map:containsValue(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:size()
org.apache.pdfbox.cos.COSArray:toString()
java.util.ArrayList:subList(int,int)
java.util.ArrayList:listIterator(int)
java.util.ArrayList:listIterator()
java.util.ArrayList:lastIndexOf(java.lang.Object)
java.util.ArrayList:indexOf(java.lang.Object)
java.util.ArrayList:hashCode()
java.util.ArrayList:equals(java.lang.Object)
org.apache.pdfbox.cos.COSArray:clear()
java.util.ArrayList:retainAll(java.util.Collection)
java.util.function.Consumer:accept(org.apache.pdfbox.pdmodel.common.COSArrayList)
org.apache.pdfbox.cos.COSArray:addAll(int,java.util.Collection)
org.apache.pdfbox.pdmodel.common.COSArrayList:toCOSObjectList(java.util.Collection)
java.util.Collection:isEmpty()
java.util.ArrayList:containsAll(java.util.Collection)
java.util.ArrayList:toArray(java.lang.Object[])
java.util.ArrayList:toArray()
org.apache.pdfbox.pdmodel.ResourceCacheFactory:setResourceCacheCreateFunction(org.apache.pdfbox.pdmodel.ResourceCacheCreateFunction)
org.apache.pdfbox.pdmodel.DefaultResourceCacheCreateImpl:<init>()
org.apache.pdfbox.pdmodel.PageMode:$values()
org.apache.pdfbox.pdmodel.PageMode:<init>(java.lang.String,int,java.lang.String)
org.apache.pdfbox.pdmodel.PageLayout:$values()
org.apache.pdfbox.pdmodel.PageLayout:<init>(java.lang.String,int,java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.PDResources:getColorSpace(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.MissingResourceException:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:<init>(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:createFromCOSObject(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:showTextWithPositioning(java.lang.Object[])
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setLeading(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:newLine()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setStrokingColor(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setNonStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:curveTo2(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:curveTo1(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:fillEvenOdd()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:fillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:closeAndFillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:clipEvenOdd()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:addComment(java.lang.String)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setCharacterSpacing(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setWordSpacing(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setHorizontalScaling(float)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setTextRise(float)
org.apache.pdfbox.pdmodel.PDPageTree:increaseParents(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:hasNext()
org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,java.io.OutputStream)
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:$values()
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.FlateFilterDecoderStream:<init>(java.io.InputStream)
org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.common.PDPageLabels:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PageLayout:stringValue()
org.apache.pdfbox.pdmodel.PageLayout:fromString(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:setSecurityHandler(org.apache.pdfbox.pdmodel.encryption.SecurityHandler)
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:newSecurityHandlerForPolicy(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)
org.apache.pdfbox.pdmodel.PDDocument:setAllSecurityToBeRemoved(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport:<init>(org.apache.pdfbox.pdfwriter.COSWriter)
org.apache.pdfbox.pdfwriter.COSWriter:<init>(java.io.OutputStream,org.apache.pdfbox.io.RandomAccessRead,java.util.Set)
org.apache.pdfbox.pdmodel.PDDocument:save(java.io.File)
org.apache.pdfbox.pdmodel.PDPageTree:remove(int)
org.apache.pdfbox.pdmodel.PDPageTree:remove(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:<init>()
org.apache.pdfbox.pdmodel.PDDocument:addSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions)
org.apache.pdfbox.pdmodel.DefaultResourceCache:<init>(boolean)
java.text.DecimalFormat:<init>(java.lang.String,java.text.DecimalFormatSymbols)
java.text.DecimalFormatSymbols:getInstance(java.util.Locale)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptString(org.apache.pdfbox.cos.COSString,long,int)
org.apache.pdfbox.pdfwriter.COSWriter:visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptStream(org.apache.pdfbox.cos.COSStream,long,int)
org.apache.pdfbox.cos.COSNull:writePDF(java.io.OutputStream)
org.apache.pdfbox.pdfwriter.COSWriter:doWriteSignature()
org.apache.pdfbox.pdfwriter.COSWriter:doWriteIncrement()
org.apache.pdfbox.pdfwriter.COSWriter:getStartxref()
org.apache.pdfbox.pdfwriter.COSWriter:doWriteXRefInc(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfwriter.COSWriter:doWriteBody(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfwriter.COSWriter:doWriteBodyCompressed(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfwriter.COSWriter:doWriteHeader(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfparser.xref.XReferenceType:$values()
org.apache.pdfbox.pdfparser.xref.XReferenceType:<init>(java.lang.String,int,int)
java.lang.String:makeConcatWithConstants(java.lang.String,int,int,java.lang.String)
org.apache.pdfbox.pdfparser.xref.XReferenceType:getNumericValue()
org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getObjectStreamIndex()
org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getParentKey()
java.lang.String:makeConcatWithConstants(java.lang.String,java.lang.String,int,long)
org.apache.pdfbox.pdfparser.xref.NormalXReference:isObjectStream()
org.apache.pdfbox.pdfparser.xref.NormalXReference:getByteOffset()
java.lang.String:makeConcatWithConstants(java.lang.String,long,int)
org.apache.pdfbox.pdfparser.xref.AbstractXReference:compareTo(org.apache.pdfbox.pdfparser.xref.XReferenceEntry)
org.apache.pdfbox.pdfparser.xref.AbstractXReference:getType()
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj:reset()
java.util.function.BiConsumer:accept(long,java.util.Set)
java.util.TreeSet:last()
java.util.TreeSet:first()
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType:$values()
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType:<init>(java.lang.String,int)
org.apache.pdfbox.Loader:loadPDF(java.io.File,java.lang.String)
org.apache.pdfbox.pdfparser.COSParser:parseHeader(java.lang.String,java.lang.String)
org.apache.pdfbox.pdfparser.COSParser:checkPagesDictionary(org.apache.pdfbox.cos.COSDictionary,java.util.Set)
org.apache.pdfbox.pdfparser.COSParser:parseObjectDynamically(org.apache.pdfbox.cos.COSObjectKey,boolean)
org.apache.pdfbox.pdfparser.BruteForceParser:bfSearchTriggered()
org.apache.pdfbox.pdfparser.BruteForceParser:rebuildTrailer(java.util.Map)
org.apache.pdfbox.pdfparser.COSParser:isLenient()
org.apache.pdfbox.pdfparser.XrefParser:getXrefTable()
org.apache.pdfbox.pdfparser.XrefParser:parseXref(org.apache.pdfbox.cos.COSDocument,long)
org.apache.pdfbox.pdfparser.XrefParser:<init>(org.apache.pdfbox.pdfparser.COSParser)
org.apache.pdfbox.pdfparser.COSParser:getStartxrefOffset()
java.nio.charset.Charset:forName(java.lang.String)
org.apache.pdfbox.pdfparser.BaseParser:readInt()
org.apache.pdfbox.pdfparser.BaseParser:readLong()
org.apache.pdfbox.pdfparser.BaseParser:isSpace(int)
org.apache.pdfbox.pdfparser.BaseParser:isClosing(int)
org.apache.pdfbox.pdfparser.BaseParser:parseDirObject()
org.apache.pdfbox.pdfparser.BaseParser:skipLinebreak(int)
org.apache.pdfbox.multipdf.Splitter$KCloner:removePossibleOrphanAnnotation(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.Splitter$KCloner:hasMCIDs(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.multipdf.Splitter:split(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.Splitter:setSplitAtPage(int)
org.apache.pdfbox.multipdf.PageExtractor:getStartPage()
org.apache.pdfbox.multipdf.PageExtractor:getEndPage()
org.apache.pdfbox.multipdf.Splitter:setEndPage(int)
org.apache.pdfbox.multipdf.Splitter:setStartPage(int)
org.apache.pdfbox.multipdf.Splitter:<init>()
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction,org.apache.pdfbox.pdfwriter.compress.CompressParameters)
org.apache.pdfbox.multipdf.PDFMergerUtility:addSource(java.io.File)
org.apache.pdfbox.multipdf.PDFMergerUtility$DocumentMergeMode:$values()
org.apache.pdfbox.multipdf.PDFMergerUtility$DocumentMergeMode:<init>(java.lang.String,int)
org.apache.pdfbox.multipdf.PDFMergerUtility$AcroFormMergeMode:$values()
org.apache.pdfbox.multipdf.PDFMergerUtility$AcroFormMergeMode:<init>(java.lang.String,int)
org.apache.pdfbox.multipdf.PDFCloneUtility:cloneCOSStream(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.multipdf.PDFCloneUtility:cloneCOSArray(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.multipdf.Overlay:processPages(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.Overlay:loadPDFs()
org.apache.pdfbox.multipdf.Overlay$Position:$values()
org.apache.pdfbox.multipdf.Overlay$Position:<init>(java.lang.String,int)
org.apache.pdfbox.pdmodel.PDPageContentStream:endMarkedContent()
org.apache.pdfbox.pdmodel.PDPageContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode,boolean)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:addGroup(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:hasGroup(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:<init>()
org.apache.pdfbox.multipdf.LayerUtility:importPageAsForm(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.multipdf.LayerUtility:getDocument()
org.apache.pdfbox.filter.Predictor$PredictorOutputStream:write(byte[],int,int)
org.apache.pdfbox.filter.LZWFilter:createInitialCodeTable()
org.apache.pdfbox.filter.LZWFilter:findPatternCode(java.util.List,byte[])
org.apache.pdfbox.filter.LZWFilter:doLZWDecode(java.io.InputStream,java.io.OutputStream,boolean)
org.apache.pdfbox.filter.Predictor:wrapPredictor(java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.JPXFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int,org.apache.pdfbox.filter.DecodeOptions)
org.apache.pdfbox.filter.JBIG2Filter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int,org.apache.pdfbox.filter.DecodeOptions)
org.apache.pdfbox.filter.FlateFilterDecoderStream:fetch()
org.apache.pdfbox.filter.FlateFilterDecoderStream:close()
org.apache.pdfbox.filter.FilterFactory:<init>()
org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:<init>(boolean)
org.apache.pdfbox.filter.DecodeOptions:<init>(java.awt.Rectangle)
org.apache.pdfbox.filter.DCTFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int,org.apache.pdfbox.filter.DecodeOptions)
org.apache.pdfbox.filter.IdentityFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.IdentityFilter:<init>()
org.apache.pdfbox.filter.IdentityFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.CCITTFaxEncoderStream:<init>(java.io.OutputStream,int,int,int)
org.apache.pdfbox.filter.CCITTFaxFilter:invertBitmap(byte[])
org.apache.pdfbox.filter.CCITTFaxFilter:readFromDecoderStream(org.apache.pdfbox.filter.CCITTFaxDecoderStream,byte[])
org.apache.pdfbox.filter.CCITTFaxDecoderStream:<init>(java.io.InputStream,int,int,long,boolean)
java.io.PushbackInputStream:unread(byte[],int,int)
java.io.PushbackInputStream:<init>(java.io.InputStream,int)
org.apache.pdfbox.filter.CCITTFaxEncoderStream$Code:<init>(int,int)
org.apache.pdfbox.filter.CCITTFaxEncoderStream:encodeRow()
org.apache.pdfbox.filter.CCITTFaxDecoderStream$Tree:fill(int,int,int)
java.lang.AssertionError:<init>(java.lang.Object)
org.apache.pdfbox.filter.CCITTFaxDecoderStream$Tree:fill(int,int,org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node)
org.apache.pdfbox.filter.CCITTFaxDecoderStream$Tree:<init>()
java.lang.String:makeConcatWithConstants(boolean,int,boolean)
org.apache.pdfbox.filter.ASCIIHexFilter:isEOD(int)
org.apache.pdfbox.filter.ASCIIHexFilter:isWhitespace(int)
org.apache.pdfbox.filter.ASCII85InputStream:read()
org.apache.pdfbox.filter.ASCII85OutputStream:close()
org.apache.pdfbox.filter.ASCII85OutputStream:<init>(java.io.OutputStream)
org.apache.pdfbox.filter.ASCII85InputStream:close()
org.apache.pdfbox.filter.ASCII85InputStream:<init>(java.io.InputStream)
org.apache.pdfbox.cos.PDFDocEncoding:set(int,char)
org.apache.pdfbox.cos.COSUpdateState:toIncrement()
java.lang.Boolean:getBoolean(java.lang.String)
java.io.FilterOutputStream:write(int)
org.apache.pdfbox.cos.COSOutputStream:write(byte[],int,int)
java.lang.Long:hashCode(long)
org.apache.pdfbox.cos.COSNull:<init>()
java.lang.ref.Cleaner:create()
java.util.concurrent.ConcurrentHashMap:<init>(int)
org.apache.pdfbox.cos.COSInteger:getInvalid(boolean)
org.apache.pdfbox.cos.COSIncrement:getObjects()
org.apache.pdfbox.cos.COSIncrement:add(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSIncrement:addProcessedObject(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.cos.COSIncrement:isExcluded(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSFloat:<init>(float,java.lang.String)
java.lang.Float:hashCode(float)
org.apache.pdfbox.cos.COSDocument:getObjectsByType(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
java.util.stream.Stream:sorted(java.util.Comparator)
java.util.Map$Entry:comparingByValue()
org.apache.pdfbox.cos.COSDictionary:getDictionaryString(org.apache.pdfbox.cos.COSBase,java.util.List)
org.apache.pdfbox.cos.COSDictionary:getEmbeddedInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.cos.COSDictionary:getEmbeddedDate(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,java.util.Calendar)
org.apache.pdfbox.cos.COSBoolean:<init>(boolean)
java.lang.String:valueOf(boolean)
org.apache.pdfbox.contentstream.PDFStreamEngine:processOperator(java.lang.String,java.util.List)
org.apache.pdfbox.contentstream.operator.MissingOperandException:<init>(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.PDFStreamEngine:showTextStrings(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.contentstream.PDFStreamEngine:getTextMatrix()
org.apache.pdfbox.contentstream.PDFStreamEngine:showTextString(byte[])
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setWordSpacing(float)
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setRise(float)
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:fromInt(int)
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setLeading(float)
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setHorizontalScaling(float)
org.apache.pdfbox.contentstream.PDFStreamEngine:getResources()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:setCharacterSpacing(float)
org.apache.pdfbox.pdmodel.graphics.state.PDTextState:getLeading()
org.apache.pdfbox.contentstream.PDFStreamEngine:setTextMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.contentstream.operator.text.MoveText:getName()
org.apache.pdfbox.contentstream.PDFStreamEngine:getTextLineMatrix()
org.apache.pdfbox.contentstream.PDFStreamEngine:endText()
org.apache.pdfbox.contentstream.PDFStreamEngine:setTextLineMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.contentstream.PDFStreamEngine:beginText()
org.apache.pdfbox.contentstream.PDFStreamEngine:setLineDashPattern(org.apache.pdfbox.cos.COSArray,int)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:copyIntoGraphicsState(org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState)
org.apache.pdfbox.contentstream.PDFStreamEngine:saveGraphicsState()
org.apache.pdfbox.contentstream.operator.state.EmptyGraphicsStackException:<init>()
org.apache.pdfbox.contentstream.PDFStreamEngine:restoreGraphicsState()
org.apache.pdfbox.contentstream.PDFStreamEngine:getGraphicsStackSize()
org.apache.pdfbox.contentstream.PDFStreamEngine:markedContentPoint(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDResources:getProperties(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.contentstream.PDFStreamEngine:endMarkedContentSequence()
org.apache.pdfbox.contentstream.PDFStreamEngine:showForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.contentstream.PDFStreamEngine:showTransparencyGroup(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)
org.apache.pdfbox.contentstream.PDFStreamEngine:decreaseLevel()
org.apache.pdfbox.contentstream.PDFStreamEngine:getLevel()
org.apache.pdfbox.contentstream.PDFStreamEngine:increaseLevel()
org.apache.pdfbox.text.PDFMarkedContentExtractor:xobject(org.apache.pdfbox.pdmodel.graphics.PDXObject)
org.apache.pdfbox.contentstream.PDFStreamEngine:beginMarkedContentSequence(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:isEmpty()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:<init>(org.apache.pdfbox.cos.COSDictionary,byte[],org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.contentstream.PDFStreamEngine:isShouldProcessColorOperators()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:getStrokingColorSpace()
org.apache.pdfbox.pdmodel.PDResources:isImageXObject(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.contentstream.PDFStreamEngine:processAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.contentstream.PDFStreamEngine:getAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.contentstream.PDFStreamEngine:processTilingPattern(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColor,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.Loader:loadPDF(byte[],java.lang.String)
org.apache.pdfbox.Loader:loadXFDF(java.io.InputStream)
org.apache.pdfbox.Loader:loadFDF(java.io.File)
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:getCOSObject()
org.apache.pdfbox.pdmodel.graphics.PDFontSetting:getCOSObject()
org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:getCOSObject()
org.apache.pdfbox.pdmodel.common.PDRange:getCOSObject()
org.apache.pdfbox.rendering.ImageType$5:toBufferedImageType()
org.apache.pdfbox.rendering.ImageType$4:toBufferedImageType()
org.apache.pdfbox.rendering.ImageType$3:toBufferedImageType()
org.apache.pdfbox.rendering.ImageType$2:toBufferedImageType()
org.apache.pdfbox.rendering.ImageType$1:toBufferedImageType()
org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:getType()
org.apache.pdfbox.pdmodel.interactive.form.PDField:getAcroForm()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getAnnotation()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:generateRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:generateDownAppearance()
org.apache.pdfbox.pdmodel.graphics.shading.ShadingPaint:getShading()
org.apache.pdfbox.pdmodel.graphics.shading.ShadingPaint:getMatrix()
org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:setTriangleList(java.util.List)
org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getShadingColorSpace()
org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getShading()
org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getRgbBackground()
org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getColorModel()
org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext:getBackground()
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getFlag3Edge()
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getFlag2Edge()
org.apache.pdfbox.pdmodel.graphics.shading.TensorPatch:getFlag1Edge()
org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getFlag3Edge()
org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getFlag2Edge()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getShadingType()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getShadingType()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:getShadingType()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:getShadingType()
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getPatternType()
org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:getPatternType()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDLab:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDCIEBasedColorSpace:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.PDXObject:getStream()
org.apache.pdfbox.pdmodel.font.encoding.ZapfDingbatsEncoding:getEncodingName()
org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding:getEncodingName()
org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:getEncodingName()
org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.encoding.SymbolEncoding:getEncodingName()
org.apache.pdfbox.pdmodel.font.encoding.StandardEncoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.encoding.MacRomanEncoding:getEncodingName()
org.apache.pdfbox.pdmodel.font.encoding.MacRomanEncoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.encoding.MacExpertEncoding:getEncodingName()
org.apache.pdfbox.pdmodel.font.encoding.MacExpertEncoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.encoding.BuiltInEncoding:getEncodingName()
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:needsSubset()
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:getFontDescriptor()
org.apache.pdfbox.pdmodel.font.PDType3Font:isEmbedded()
org.apache.pdfbox.pdmodel.font.PDType3Font:isDamaged()
org.apache.pdfbox.pdmodel.font.PDType1Font:getType1Font()
org.apache.pdfbox.pdmodel.font.PDType1Font:isDamaged()
org.apache.pdfbox.pdmodel.font.PDType1CFont:isDamaged()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getFontBoxFont()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:isDamaged()
org.apache.pdfbox.pdmodel.font.PDSimpleFont:getGlyphList()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getFontBoxFont()
org.apache.pdfbox.pdmodel.font.PDSimpleFont:willBeSubset()
org.apache.pdfbox.pdmodel.font.PDFont:setFontDescriptor(org.apache.pdfbox.pdmodel.font.PDFontDescriptor)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:isVertical()
org.apache.pdfbox.pdmodel.font.PDFont:getToUnicodeCMap()
org.apache.pdfbox.pdmodel.font.PDFont:getStandard14AFM()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:isDamaged()
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:isEmbedded()
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:isDamaged()
org.apache.pdfbox.pdmodel.font.PDCIDFont:getParent()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:getFontInfo()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getWeightClass()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getPanose()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getMacStyle()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getFamilyClass()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getCodePageRange2()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getCodePageRange1()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getCIDSystemInfo()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setStringFilterName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setStreamFilterName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setProtectionPolicy(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setKeyLength(int)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setEncryptionKey(byte[])
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setDecryptMetadata(boolean)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setCustomSecureRandom(java.security.SecureRandom)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setCurrentAccessPermission(org.apache.pdfbox.pdmodel.encryption.AccessPermission)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:setAES(boolean)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:isDecryptMetadata()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:isAES()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getProtectionPolicy()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getKeyLength()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:getEncryptionKey()
org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:setPreferAES(boolean)
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getTag()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler:whitespace(java.lang.CharSequence)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler:newLine(java.lang.CharSequence)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler:comment(java.lang.CharSequence)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Xor:applyforInteger(int,int)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Xor:applyForBoolean(boolean,boolean)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Or:applyforInteger(int,int)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Or:applyForBoolean(boolean,boolean)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$And:applyforInteger(int,int)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$And:applyForBoolean(boolean,boolean)
org.apache.pdfbox.pdmodel.common.function.PDFunctionTypeIdentity:eval(float[])
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4:getFunctionType()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:getFunctionType()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:getFunctionType()
org.apache.pdfbox.pdmodel.common.function.PDFunction:interpolate(float,float,float,float,float)
org.apache.pdfbox.pdmodel.common.function.PDFunction:getPDStream()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getFunctionType()
org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:getCOSObject()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getParent()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:isOutside255Interval(int)
org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getReferencedKey()
org.apache.pdfbox.cos.COSInteger:floatValue()
org.apache.pdfbox.cos.COSFloat:longValue()
org.apache.pdfbox.cos.COSFloat:intValue()
org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace:getName()
org.apache.pdfbox.contentstream.operator.text.ShowTextLine:getName()
org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted:getName()
org.apache.pdfbox.contentstream.operator.text.ShowText:getName()
org.apache.pdfbox.contentstream.operator.text.SetWordSpacing:getName()
org.apache.pdfbox.contentstream.operator.text.SetTextRise:getName()
org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode:getName()
org.apache.pdfbox.contentstream.operator.text.SetTextLeading:getName()
org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling:getName()
org.apache.pdfbox.contentstream.operator.text.SetFontAndSize:getName()
org.apache.pdfbox.contentstream.operator.text.SetCharSpacing:getName()
org.apache.pdfbox.contentstream.operator.text.NextLine:getName()
org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading:getName()
org.apache.pdfbox.contentstream.operator.text.EndText:getName()
org.apache.pdfbox.contentstream.operator.text.BeginText:getName()
org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent:getName()
org.apache.pdfbox.contentstream.operator.state.SetMatrix:getName()
org.apache.pdfbox.contentstream.operator.state.SetLineWidth:getName()
org.apache.pdfbox.contentstream.operator.state.SetLineMiterLimit:getName()
org.apache.pdfbox.contentstream.operator.state.SetLineJoinStyle:getName()
org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern:getName()
org.apache.pdfbox.contentstream.operator.state.SetLineCapStyle:getName()
org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters:getName()
org.apache.pdfbox.contentstream.operator.state.SetFlatness:getName()
org.apache.pdfbox.contentstream.operator.state.Save:getName()
org.apache.pdfbox.contentstream.operator.state.Restore:getName()
org.apache.pdfbox.contentstream.operator.state.Concatenate:getName()
org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPointWithProperties:getName()
org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPoint:getName()
org.apache.pdfbox.contentstream.operator.markedcontent.EndMarkedContentSequence:getName()
org.apache.pdfbox.contentstream.operator.markedcontent.DrawObject:getName()
org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequenceWithProperties:getName()
org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequence:getName()
org.apache.pdfbox.contentstream.operator.graphics.StrokePath:getName()
org.apache.pdfbox.contentstream.operator.graphics.ShadingFill:getName()
org.apache.pdfbox.contentstream.operator.graphics.MoveTo:getName()
org.apache.pdfbox.contentstream.operator.graphics.LineTo:getName()
org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule:getName()
org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroAndStrokePath:getName()
org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule:getName()
org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddAndStrokePath:getName()
org.apache.pdfbox.contentstream.operator.graphics.EndPath:getName()
org.apache.pdfbox.contentstream.operator.graphics.DrawObject:getName()
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint:getName()
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateFinalPoint:getName()
org.apache.pdfbox.contentstream.operator.graphics.CurveTo:getName()
org.apache.pdfbox.contentstream.operator.graphics.ClosePath:getName()
org.apache.pdfbox.contentstream.operator.graphics.CloseFillNonZeroAndStrokePath:getName()
org.apache.pdfbox.contentstream.operator.graphics.CloseFillEvenOddAndStrokePath:getName()
org.apache.pdfbox.contentstream.operator.graphics.CloseAndStrokePath:getName()
org.apache.pdfbox.contentstream.operator.graphics.ClipNonZeroRule:getName()
org.apache.pdfbox.contentstream.operator.graphics.ClipEvenOddRule:getName()
org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage:getName()
org.apache.pdfbox.contentstream.operator.graphics.AppendRectangleToPath:getName()
org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace:getName()
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace:getName()
org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:getName()
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:getName()
org.apache.pdfbox.contentstream.operator.DrawObject:getName()
org.apache.pdfbox.contentstream.operator.OperatorProcessor:getContext()
org.apache.pdfbox.text.PDFTextStripper:setWordSeparator(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:setSuppressDuplicateOverlappingText(boolean)
org.apache.pdfbox.text.PDFTextStripper:setStartBookmark(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.text.PDFTextStripper:setSpacingTolerance(float)
org.apache.pdfbox.text.PDFTextStripper:setSortByPosition(boolean)
org.apache.pdfbox.text.PDFTextStripper:setParagraphStart(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:setParagraphEnd(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:setPageStart(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:setPageEnd(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:setListItemPatterns(java.util.List)
org.apache.pdfbox.text.PDFTextStripper:setLineSeparator(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:setIndentThreshold(float)
org.apache.pdfbox.text.PDFTextStripper:setIgnoreContentStreamSpaceGlyphs(boolean)
org.apache.pdfbox.text.PDFTextStripper:setEndBookmark(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.text.PDFTextStripper:setDropThreshold(float)
org.apache.pdfbox.text.PDFTextStripper:setAverageCharTolerance(float)
org.apache.pdfbox.text.PDFTextStripper:setArticleStart(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:setArticleEnd(java.lang.String)
org.apache.pdfbox.text.PDFTextStripper:setAddMoreFormatting(boolean)
org.apache.pdfbox.text.PDFTextStripper:getSuppressDuplicateOverlappingText()
org.apache.pdfbox.text.PDFTextStripper:getStartPage()
org.apache.pdfbox.text.PDFTextStripper:getStartBookmark()
org.apache.pdfbox.text.PDFTextStripper:getSeparateByBeads()
org.apache.pdfbox.text.PDFTextStripper:getOutput()
org.apache.pdfbox.text.PDFTextStripper:getEndPage()
org.apache.pdfbox.text.PDFTextStripper:getEndBookmark()
org.apache.pdfbox.text.PDFTextStripper:getCurrentPageNo()
org.apache.pdfbox.text.PDFTextStripper:getCharactersByArticle()
org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine:getPage()
org.apache.pdfbox.contentstream.PDFStreamEngine:getInitialMatrix()
org.apache.pdfbox.contentstream.PDFStreamEngine:getCurrentPage()
org.apache.pdfbox.util.filetypedetector.FileTypeDetector:<clinit>()
org.apache.pdfbox.util.filetypedetector.FileTypeDetector:<init>()
org.apache.pdfbox.util.filetypedetector.FileType:<clinit>()
org.apache.pdfbox.util.filetypedetector.FileType:valueOf(java.lang.String)
org.apache.pdfbox.util.filetypedetector.FileType:values()
org.apache.pdfbox.util.XMLUtil:<init>()
org.apache.pdfbox.util.Version:<clinit>()
org.apache.pdfbox.util.Version:getVersion()
org.apache.pdfbox.util.Version:<init>()
org.apache.pdfbox.util.Vector:toString()
org.apache.pdfbox.util.StringUtil:<clinit>()
org.apache.pdfbox.util.StringUtil:splitOnSpace(java.lang.String)
org.apache.pdfbox.util.StringUtil:<init>()
org.apache.pdfbox.util.NumberFormatUtil:<init>()
org.apache.pdfbox.util.Matrix:equals(java.lang.Object)
org.apache.pdfbox.util.Matrix:toString()
org.apache.pdfbox.util.Matrix:toCOSArray()
org.apache.pdfbox.util.Matrix:transform(java.awt.geom.Point2D)
org.apache.pdfbox.util.Matrix:rotate(double)
org.apache.pdfbox.util.IterativeMergeSort:<init>()
org.apache.pdfbox.util.Hex:<clinit>()
org.apache.pdfbox.util.Hex:getBytes(byte)
org.apache.pdfbox.util.Hex:getString(byte)
org.apache.pdfbox.util.Hex:<init>()
org.apache.pdfbox.util.DateConverter:<clinit>()
org.apache.pdfbox.util.DateConverter:toISO8601(java.util.Calendar)
org.apache.pdfbox.util.DateConverter:<init>()
org.apache.pdfbox.text.TextPositionComparator:compare(java.lang.Object,java.lang.Object)
org.apache.pdfbox.text.TextPosition:<clinit>()
org.apache.pdfbox.text.TextPosition:hashCode()
org.apache.pdfbox.text.TextPosition:equals(java.lang.Object)
org.apache.pdfbox.text.TextPosition:toString()
org.apache.pdfbox.text.TextPosition:getYScale()
org.apache.pdfbox.text.TextPosition:getXScale()
java.awt.geom.Rectangle2D:contains(double,double)
org.apache.pdfbox.text.PDFTextStripperByArea:writePage()
org.apache.pdfbox.text.PDFTextStripperByArea:processTextPosition(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.PDFTextStripperByArea:extractRegions(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.text.PDFTextStripperByArea:getTextForRegion(java.lang.String)
org.apache.pdfbox.text.PDFTextStripperByArea:removeRegion(java.lang.String)
org.apache.pdfbox.text.PDFTextStripperByArea:addRegion(java.lang.String,java.awt.geom.Rectangle2D)
org.apache.pdfbox.text.PDFTextStripperByArea:<init>()
org.apache.pdfbox.text.PDFTextStripper:<clinit>()
org.apache.pdfbox.text.PDFTextStripper:setEndPage(int)
org.apache.pdfbox.text.PDFTextStripper:setStartPage(int)
org.apache.pdfbox.text.PDFTextStripper:processTextPosition(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.PDFTextStripper:endMarkedContentSequence()
org.apache.pdfbox.text.PDFTextStripper:beginMarkedContentSequence(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.text.PDFTextStripper:writeCharacters(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.PDFTextStripper:getText(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.text.PDFTextStripper$LineItem:<clinit>()
org.apache.pdfbox.text.PDFMarkedContentExtractor:processPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.text.PDFMarkedContentExtractor:processTextPosition(org.apache.pdfbox.text.TextPosition)
org.apache.pdfbox.text.PDFMarkedContentExtractor:markedContentPoint(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.text.PDFMarkedContentExtractor:endMarkedContentSequence()
org.apache.pdfbox.text.PDFMarkedContentExtractor:beginMarkedContentSequence(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.text.PDFMarkedContentExtractor:<init>()
org.apache.pdfbox.text.LegacyPDFStreamEngine:<clinit>()
org.apache.pdfbox.text.LegacyPDFStreamEngine:showGlyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector)
org.apache.pdfbox.rendering.TilingPaintFactory:<clinit>()
org.apache.pdfbox.rendering.TilingPaintFactory$TilingPaintParameter:toString()
org.apache.pdfbox.rendering.TilingPaintFactory$TilingPaintParameter:hashCode()
org.apache.pdfbox.rendering.TilingPaintFactory$TilingPaintParameter:equals(java.lang.Object)
org.apache.pdfbox.rendering.TilingPaint:<clinit>()
org.apache.pdfbox.rendering.TilingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.rendering.TilingPaint:<init>(org.apache.pdfbox.rendering.PageDrawer,org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,java.awt.geom.AffineTransform)
org.apache.pdfbox.rendering.SoftMask:<clinit>()
org.apache.pdfbox.rendering.SoftMask:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.rendering.SoftMask$SoftPaintContext:dispose()
org.apache.pdfbox.rendering.SoftMask$SoftPaintContext:getRaster(int,int,int,int)
org.apache.pdfbox.rendering.RenderDestination:<clinit>()
org.apache.pdfbox.rendering.RenderDestination:valueOf(java.lang.String)
org.apache.pdfbox.rendering.RenderDestination:values()
org.apache.pdfbox.rendering.PageDrawer:<clinit>()
java.awt.geom.GeneralPath:append(java.awt.Shape,boolean)
java.awt.geom.Area:<init>()
org.apache.pdfbox.rendering.PageDrawer:isHiddenOrVisibilityExpression(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.rendering.PageDrawer:isHiddenAndVisibilityExpression(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.rendering.PageDrawer:beginMarkedContentSequence(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.rendering.PageDrawer:showTransparencyGroup(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)
org.apache.pdfbox.rendering.PageDrawer:showForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.rendering.PageDrawer:shadingFill(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.rendering.PageDrawer:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage)
org.apache.pdfbox.rendering.PageDrawer:endPath()
org.apache.pdfbox.rendering.PageDrawer:closePath()
org.apache.pdfbox.rendering.PageDrawer:getCurrentPoint()
org.apache.pdfbox.rendering.PageDrawer:curveTo(float,float,float,float,float,float)
org.apache.pdfbox.rendering.PageDrawer:lineTo(float,float)
org.apache.pdfbox.rendering.PageDrawer:moveTo(float,float)
org.apache.pdfbox.rendering.PageDrawer:clip(int)
org.apache.pdfbox.rendering.PageDrawer:fillAndStrokePath(int)
org.apache.pdfbox.rendering.PageDrawer:appendRectangle(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)
org.apache.pdfbox.rendering.PageDrawer:showType3Glyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDType3Font,int,org.apache.pdfbox.util.Vector)
org.apache.pdfbox.rendering.PageDrawer:showFontGlyph(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.pdmodel.font.PDFont,int,org.apache.pdfbox.util.Vector)
org.apache.pdfbox.rendering.PageDrawer:endText()
org.apache.pdfbox.rendering.PageDrawer:beginText()
org.apache.pdfbox.rendering.PDFRenderer:renderPageToGraphics(int,java.awt.Graphics2D)
org.apache.pdfbox.rendering.PDFRenderer:renderImageWithDPI(int,float,org.apache.pdfbox.rendering.ImageType)
org.apache.pdfbox.rendering.PDFRenderer:renderImageWithDPI(int,float)
org.apache.pdfbox.rendering.PDFRenderer:renderImage(int)
org.apache.pdfbox.rendering.ImageType:<clinit>()
org.apache.pdfbox.rendering.ImageType:valueOf(java.lang.String)
org.apache.pdfbox.rendering.ImageType:values()
org.apache.pdfbox.rendering.GroupGraphics:shear(double,double)
org.apache.pdfbox.rendering.GroupGraphics:setTransform(java.awt.geom.AffineTransform)
org.apache.pdfbox.rendering.GroupGraphics:setStroke(java.awt.Stroke)
org.apache.pdfbox.rendering.GroupGraphics:setRenderingHints(java.util.Map)
org.apache.pdfbox.rendering.GroupGraphics:setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)
org.apache.pdfbox.rendering.GroupGraphics:setPaint(java.awt.Paint)
org.apache.pdfbox.rendering.GroupGraphics:setComposite(java.awt.Composite)
org.apache.pdfbox.rendering.GroupGraphics:rotate(double,double,double)
org.apache.pdfbox.rendering.GroupGraphics:rotate(double)
org.apache.pdfbox.rendering.GroupGraphics:hit(java.awt.Rectangle,java.awt.Shape,boolean)
org.apache.pdfbox.rendering.GroupGraphics:getTransform()
org.apache.pdfbox.rendering.GroupGraphics:getStroke()
org.apache.pdfbox.rendering.GroupGraphics:getRenderingHints()
org.apache.pdfbox.rendering.GroupGraphics:getRenderingHint(java.awt.RenderingHints$Key)
org.apache.pdfbox.rendering.GroupGraphics:getPaint()
org.apache.pdfbox.rendering.GroupGraphics:getFontRenderContext()
org.apache.pdfbox.rendering.GroupGraphics:getDeviceConfiguration()
org.apache.pdfbox.rendering.GroupGraphics:getComposite()
org.apache.pdfbox.rendering.GroupGraphics:getBackground()
org.apache.pdfbox.rendering.GroupGraphics:fill(java.awt.Shape)
org.apache.pdfbox.rendering.GroupGraphics:drawString(java.lang.String,float,float)
org.apache.pdfbox.rendering.GroupGraphics:drawString(java.text.AttributedCharacterIterator,float,float)
org.apache.pdfbox.rendering.GroupGraphics:drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)
org.apache.pdfbox.rendering.GroupGraphics:drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)
org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)
org.apache.pdfbox.rendering.GroupGraphics:drawGlyphVector(java.awt.font.GlyphVector,float,float)
org.apache.pdfbox.rendering.GroupGraphics:draw(java.awt.Shape)
org.apache.pdfbox.rendering.GroupGraphics:clip(java.awt.Shape)
org.apache.pdfbox.rendering.GroupGraphics:addRenderingHints(java.util.Map)
org.apache.pdfbox.rendering.GroupGraphics:setXORMode(java.awt.Color)
org.apache.pdfbox.rendering.GroupGraphics:setPaintMode()
org.apache.pdfbox.rendering.GroupGraphics:setFont(java.awt.Font)
org.apache.pdfbox.rendering.GroupGraphics:setColor(java.awt.Color)
org.apache.pdfbox.rendering.GroupGraphics:setClip(java.awt.Shape)
org.apache.pdfbox.rendering.GroupGraphics:setClip(int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:getFontMetrics(java.awt.Font)
org.apache.pdfbox.rendering.GroupGraphics:getFont()
org.apache.pdfbox.rendering.GroupGraphics:getColor()
org.apache.pdfbox.rendering.GroupGraphics:getClipBounds()
org.apache.pdfbox.rendering.GroupGraphics:getClip()
org.apache.pdfbox.rendering.GroupGraphics:fillRoundRect(int,int,int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:fillRect(int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:fillPolygon(int[],int[],int)
org.apache.pdfbox.rendering.GroupGraphics:fillOval(int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:fillArc(int,int,int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:drawString(java.lang.String,int,int)
org.apache.pdfbox.rendering.GroupGraphics:drawString(java.text.AttributedCharacterIterator,int,int)
org.apache.pdfbox.rendering.GroupGraphics:drawRoundRect(int,int,int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:drawPolyline(int[],int[],int)
org.apache.pdfbox.rendering.GroupGraphics:drawPolygon(int[],int[],int)
org.apache.pdfbox.rendering.GroupGraphics:drawOval(int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:drawLine(int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.GroupGraphics:drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)
org.apache.pdfbox.rendering.GroupGraphics:drawArc(int,int,int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:dispose()
org.apache.pdfbox.rendering.GroupGraphics:create()
org.apache.pdfbox.rendering.GroupGraphics:copyArea(int,int,int,int,int,int)
org.apache.pdfbox.rendering.GroupGraphics:clipRect(int,int,int,int)
org.apache.pdfbox.rendering.GlyphCache:<clinit>()
org.apache.pdfbox.printing.Scaling:<clinit>()
org.apache.pdfbox.printing.Scaling:valueOf(java.lang.String)
org.apache.pdfbox.printing.Scaling:values()
org.apache.pdfbox.printing.PDFPrintable:<clinit>()
org.apache.pdfbox.printing.PDFPrintable:print(java.awt.Graphics,java.awt.print.PageFormat,int)
org.apache.pdfbox.printing.PDFPrintable:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.printing.PDFPageable:getPrintable(int)
org.apache.pdfbox.printing.PDFPageable:getPageFormat(int)
org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Orientation,boolean,float)
org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Orientation,boolean)
org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Orientation)
org.apache.pdfbox.printing.PDFPageable:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.printing.PDFPageable$1:<clinit>()
org.apache.pdfbox.printing.Orientation:<clinit>()
org.apache.pdfbox.printing.Orientation:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setPrintScaling(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$PRINT_SCALING)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getPrintScaling()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setDuplex(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$DUPLEX)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getDuplex()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setPrintClip(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getPrintClip()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setPrintArea(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getPrintArea()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setViewClip(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getViewClip()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setViewArea(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getViewArea()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setReadingDirection(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$READING_DIRECTION)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getReadingDirection()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:setNonFullScreenPageMode(org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$NON_FULL_SCREEN_PAGE_MODE)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences:getNonFullScreenPageMode()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$READING_DIRECTION:<clinit>()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$READING_DIRECTION:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$READING_DIRECTION:values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$PRINT_SCALING:<clinit>()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$PRINT_SCALING:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$PRINT_SCALING:values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$NON_FULL_SCREEN_PAGE_MODE:<clinit>()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$NON_FULL_SCREEN_PAGE_MODE:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$NON_FULL_SCREEN_PAGE_MODE:values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$DUPLEX:<clinit>()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$DUPLEX:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$DUPLEX:values()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY:<clinit>()
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences$BOUNDARY:values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle:<clinit>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle:values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionMotion:<clinit>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionMotion:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionMotion:values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection:<clinit>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection:values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDimension:<clinit>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDimension:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDimension:values()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setFlyAreaOpaque(boolean)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:isFlyAreaOpaque()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setFlyScale(float)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getFlyScale()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setDuration(float)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getDuration()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setDirection(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getDirection()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setMotion(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionMotion)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getMotion()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:setDimension(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDimension)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getDimension()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:getStyle()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition:<init>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:setPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getPage()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:appendBead(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getPreviousBead()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:getThread()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead:<init>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:setFirstBead(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThreadBead)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:getFirstBead()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:setThreadInfo(org.apache.pdfbox.pdmodel.PDDocumentInformation)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:getThreadInfo()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDThread:<init>()
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:setMeasure(org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary)
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:getMeasure()
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:setName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:getName()
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:getBBox()
org.apache.pdfbox.pdmodel.interactive.measurement.PDViewportDictionary:<init>()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setCYX(float)
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getCYX()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setCoordSystemOrigin(float[])
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getCoordSystemOrigin()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setLineSloaps(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getLineSloaps()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setAngles(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getAngles()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setAreas(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getAreas()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setDistances(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getDistances()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setChangeYs(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getChangeYs()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setChangeXs(org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary[])
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getChangeXs()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:setScaleRatio(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:getScaleRatio()
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.interactive.measurement.PDRectlinearMeasureDictionary:<init>()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setLabelPositionToValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getLabelPositionToValue()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setLabelSuffixString(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getLabelSuffixString()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setLabelPrefixString(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getLabelPrefixString()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setDecimalSeparator(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getDecimalSeparator()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setThousandsSeparator(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getThousandsSeparator()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setFD(boolean)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:isFD()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setDenominator(int)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getDenominator()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setFractionalDisplay(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getFractionalDisplay()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setConversionFactor(float)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getConversionFactor()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:setUnits(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:getUnits()
org.apache.pdfbox.pdmodel.interactive.measurement.PDNumberFormatDictionary:<init>()
org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:setSubtype(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.measurement.PDMeasureDictionary:getSubtype()
org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource:getDocument()
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:setRichTextValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getRichTextValue()
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:setQ(int)
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:setDefaultStyleString(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:getDefaultStyleString()
org.apache.pdfbox.pdmodel.interactive.form.PDVariableText:setDefaultAppearance(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:getValueAsString()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:getDefaultValue()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setDefaultValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setMaxLen(int)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setRichText(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:isRichText()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setComb(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setDoNotScroll(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:doNotScroll()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setDoNotSpellCheck(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:doNotSpellCheck()
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setFileSelect(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setPassword(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:setMultiline(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDTextField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:applyChange()
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:setWidgets(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:exportFDF()
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:importFDF(org.apache.pdfbox.pdmodel.fdf.FDFField)
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:getFieldType()
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:getFieldFlags()
org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField:setActions(org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions)
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:<clinit>()
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:setSeedValue(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue)
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getSeedValue()
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getValueAsString()
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:getDefaultValue()
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:setDefaultValue(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)
org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField:setValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:getSelectedExportValues()
org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:getSelectedIndex()
org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:isRadiosInUnison()
org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:setRadiosInUnison(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:getOnValues()
org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:getValueAsString()
org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:setExportValues(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:getExportValues()
org.apache.pdfbox.pdmodel.interactive.form.PDPushButton:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:<clinit>()
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getWidgets()
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:setDefaultValue(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getDefaultValue()
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:setValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:setValue(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:getValueAsString()
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:setChildren(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:exportFDF()
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:importFDF(org.apache.pdfbox.pdmodel.fdf.FDFField)
org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDListBox:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.form.PDListBox:setTopIndex(java.lang.Integer)
org.apache.pdfbox.pdmodel.interactive.form.PDListBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree:<clinit>()
org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:remove()
org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree$FieldIterator:next()
org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory:<init>()
org.apache.pdfbox.pdmodel.interactive.form.PDField:toString()
org.apache.pdfbox.pdmodel.interactive.form.PDField:setMappingName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDField:getMappingName()
org.apache.pdfbox.pdmodel.interactive.form.PDField:setAlternateFieldName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDField:getAlternateFieldName()
org.apache.pdfbox.pdmodel.interactive.form.PDField:setPartialName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDField:findKid(java.lang.String[],int)
org.apache.pdfbox.pdmodel.interactive.form.PDField:getActions()
org.apache.pdfbox.pdmodel.interactive.form.PDField:isNoExport()
org.apache.pdfbox.pdmodel.interactive.form.PDField:setNoExport(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDField:isRequired()
org.apache.pdfbox.pdmodel.interactive.form.PDField:setRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDField:isReadOnly()
org.apache.pdfbox.pdmodel.interactive.form.PDField:setReadOnly(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:setEdit(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:isEdit()
org.apache.pdfbox.pdmodel.interactive.form.PDComboBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getValueAsString()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getDefaultValue()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setDefaultValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setCombo(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isCombo()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setCommitOnSelChange(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isCommitOnSelChange()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setDoNotSpellCheck(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:isDoNotSpellCheck()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setMultiSelect(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setSort(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getSelectedOptionsIndex()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getOptionsExportValues()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:getOptionsDisplayValues()
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setOptions(java.util.List,java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDChoice:setOptions(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:unCheck()
org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:check()
org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:isChecked()
org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox:<init>(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.form.PDButton:setExportValues(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:getValueAsString()
org.apache.pdfbox.pdmodel.interactive.form.PDButton:setDefaultValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:getDefaultValue()
org.apache.pdfbox.pdmodel.interactive.form.PDButton:setValue(int)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:setValue(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.form.PDButton:isRadioButton()
org.apache.pdfbox.pdmodel.interactive.form.PDButton:isPushButton()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:<clinit>()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setCalcOrder(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getCalcOrder()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:isAppendOnly()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:isSignaturesExist()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setQ(int)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getQ()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setXFA(org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:getXFA()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:setCacheFields(boolean)
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:flatten()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:exportFDF()
org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm:importFDF(org.apache.pdfbox.pdmodel.fdf.FDFDocument)
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:<clinit>()
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:sortByKey(java.util.List)
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils:<init>()
org.apache.pdfbox.pdmodel.interactive.form.FieldUtils$KeyValue:toString()
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper:<clinit>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:<clinit>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:children()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:closeNode()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:openNode()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:addFirst(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:addLast(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode:setParent(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItemIterator:remove()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItemIterator:next()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItemIterator:<init>(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setBold(boolean)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:isBold()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setItalic(boolean)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:isItalic()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setTextColor(java.awt.Color)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setTextColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getTextColor()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setStructureElement(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getStructureElement()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setAction(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setDestination(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:setTitle(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:getTitle()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:insertSiblingBefore(org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem:<init>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline:<init>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:setZoom(float)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:getZoom()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:setTop(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:getTop()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:setLeft(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination:getLeft()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:setFitBoundingBox(boolean)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:fitBoundingBox()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:setTop(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:getTop()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination:<init>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:setTop(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:getTop()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:setRight(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:getRight()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:setBottom(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:getBottom()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:setLeft(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:getLeft()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitRectangleDestination:<init>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:setFitBoundingBox(boolean)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:fitBoundingBox()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:setLeft(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:getLeft()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitHeightDestination:<init>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitDestination:setFitBoundingBox(boolean)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitDestination:fitBoundingBox()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitDestination:<init>()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:setPageNumber(int)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination:retrievePageNumber()
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:setNamedDestination(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:signatureText(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:getSignatureText()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:transform(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:height(float)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:width(float)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:coordinates(float,float)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:zoom(float)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:signatureImage(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:adjustForRotation()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(java.io.InputStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(org.apache.pdfbox.io.RandomAccessRead,java.awt.image.BufferedImage,int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(java.lang.String,java.awt.image.BufferedImage,int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(org.apache.pdfbox.io.RandomAccessRead,java.io.InputStream,int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner:<init>(java.lang.String,java.io.InputStream,int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:buildSignature()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:<clinit>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:closeTemplate(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createWidgetDictionary(org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createVisualSignature(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:injectAppearanceStreams(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:injectProcSetArray(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createBackgroundLayerForm(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createImageForm(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDRectangle,java.awt.geom.AffineTransform,org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createImageFormResources()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createImageFormStream(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:insertInnerFormToHolderResources(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createInnerForm(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createInnerFormResource()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createInnerFormStream(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createAppearanceDictionary(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject,org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createHolderForm(org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createHolderFormResources()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createHolderFormStream(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createFormatterRectangle(int[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createSignatureImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createProcSetArray()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createAffineTransform(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createSignatureRectangle(org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField,org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createAcroFormDictionary(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm,org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createSignature(org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField,org.apache.pdfbox.pdmodel.PDPage,java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createSignatureField(org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createAcroForm(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createTemplate(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigBuilder:createPage(org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:<clinit>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDFTemplateCreator:getPdfStructure()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport:setSignature(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport:getContent()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:close()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:setVisualSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions:setVisualSignature(java.io.File)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:<clinit>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setPropBuild(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getPropBuild()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getSignedContent(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getSignedContent(java.io.InputStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getContents(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getContents(java.io.InputStream)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getContents()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getSignDate()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getContactInfo()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getReason()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getLocation()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getName()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getSubFilter()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:getFilter()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setSignDate(java.util.Calendar)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setContactInfo(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setReason(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setLocation(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setSubFilter(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setFilter(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature:setType(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:setTimestampRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:isTimestampRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:setURL(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:getURL()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:setP(int)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:getP()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setURLType(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getURLType()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setURL(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getURL()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:removeOID(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addOID(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setOID(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getOID()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:removeIssuer(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addIssuer(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setIssuer(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getIssuer()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:removeKeyUsage(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addKeyUsage(char,char,char,char,char,char,char,char,char)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setKeyUsage(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getKeyUsage()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setSubjectDN(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getSubjectDN()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:removeSubject(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:addSubject(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setSubject(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:getSubject()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setURLRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isURLRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setKeyUsageRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isKeyUsageRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setSubjectDNRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isSubjectDNRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setOIDRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isOIDRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setIssuerRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isIssuerRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:setSubjectRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:isSubjectRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:<clinit>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setLegalAttestation(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getLegalAttestation()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setTimeStamp(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueTimeStamp)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getTimeStamp()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setSeedValueCertificate(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueCertificate)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getSeedValueCertificate()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setMPD(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValueMDP)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getMDP()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setReasons(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getReasons()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setV(float)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getV()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setDigestMethod(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getDigestMethod()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setSubFilter(java.util.List)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getSubFilter()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setFilter(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:getFilter()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setAddRevInfoRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isAddRevInfoRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setLegalAttestationRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isLegalAttestationRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setReasonRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isReasonRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setVRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isVRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setDigestMethodRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isDigestMethodRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setSubFilterRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isSubFilterRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:setFilterRequired(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:isFilterRequired()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setTrustedMode(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getTrustedMode()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setNonEFontNoWarn(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getNonEFontNoWarn()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setOS(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getOS()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setPreRelease(boolean)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getPreRelease()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setMinimumRevision(long)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getMinimumRevision()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setRevision(long)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getRevision()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getVersion()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setVersion(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setDate(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getDate()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:setName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:getName()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:setPDPropBuildApp(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:getApp()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:setPDPropBuildPubSec(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:getPubSec()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:setPDPropBuildFilter(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuildDataDict)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:getFilter()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild:<init>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:read(byte[])
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream:read()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDUnderlineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDStrikeoutAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquigglyAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSquareAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDSoundAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolylineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDPolygonAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLinkAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDInkAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDHighlightAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFreeTextAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDFileAttachmentAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCircleAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:generateNormalAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDCaretAppearanceHandler:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:handleBorderBox(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle,float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawCircle2(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:drawStyle(java.lang.String,org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float,float,float,boolean,boolean,boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:setOpacity(org.apache.pdfbox.pdmodel.PDAppearanceContentStream,float)
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getRolloverAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getDownAppearance()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getNormalAppearanceAsContentStream()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getColor()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler:getDefaultFont()
org.apache.pdfbox.pdmodel.interactive.annotation.handlers.CloudyBorder:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:setSubtype(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:getSubtype()
org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:getType()
org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setDownAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary:setRolloverAppearance(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getAlternateIcon()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getRolloverIcon()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getNormalIcon()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setAlternateCaption(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getAlternateCaption()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setRolloverCaption(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getRolloverCaption()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setNormalCaption(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:getNormalCaption()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setBackground(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setBorderColour(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary:setRotation(int)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setParent(org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setBorderStyle(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setActions(org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getActions()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setAction(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getAction()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setAppearanceCharacteristics(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:setHighlightingMode(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:getHighlightingMode()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup:getQuadPoints()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:setStateModel(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:getStateModel()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:setState(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:getState()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:setName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:getOpen()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:setOpen(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:getRectDifference()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setRectDifference(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:getBorderEffect()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setBorderEffect(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:getInteriorColor()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle:setInteriorColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSound:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSound:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp:getName()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp:setName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:getOpen()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:setOpen(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:setVertices(float[])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:setInteriorColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:setEndPointEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:setStartPointEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:setVertices(float[])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:setBorderEffect(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:setInteriorColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setBorderStyle(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setExternalData(org.apache.pdfbox.pdmodel.interactive.annotation.PDExternalDataDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getExternalData()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setIntent(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getIntent()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setReplyType(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getReplyType()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setSubject(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getSubject()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setInReplyTo(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getInReplyTo()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setCreationDate(java.util.Calendar)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getCreationDate()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setRichContents(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getRichContents()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setConstantOpacity(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getConstantOpacity()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:setTitlePopup(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup:getTitlePopup()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setQuadPoints(float[])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getPreviousURI()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setPreviousURI(org.apache.pdfbox.pdmodel.interactive.action.PDActionURI)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setHighlightMode(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:getHighlightMode()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:setBorderStyle(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setCaptionVerticalOffset(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setCaptionHorizontalOffset(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setCaptionPositioning(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setLeaderLineOffsetLength(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setLeaderLineExtensionLength(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setLeaderLineLength(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setCaption(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setInteriorColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setEndPointEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:setStartPointEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:setInkList(float[][])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setBorderEffect(org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setLineEndingStyle(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setCallout(float[])
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setRectDifferences(float)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setQ(int)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:getQ()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setDefaultStyleString(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:setDefaultAppearance(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:setAttachmentName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:getFile()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:constructAppearances()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:getRectDifferences()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret:<init>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setBorder(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setOptionalContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setAnnotationName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getAnnotationName()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setModifiedDate(java.util.Calendar)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setModifiedDate(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getModifiedDate()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setContents(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getContents()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setLockedContents(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isLockedContents()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setToggleNoView(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isToggleNoView()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setLocked(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isLocked()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setReadOnly(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isReadOnly()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setNoView(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setNoRotate(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setNoZoom(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:isNoZoom()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setPrinted(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setHidden(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setInvisible(boolean)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setAppearanceState(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setAnnotationFlags(int)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getAnnotationFlags()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setRectangle(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:getSubtype()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setSubtype(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:hashCode()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:equals(java.lang.Object)
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:setExecuteParam(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getExecuteParam()
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:setOperation(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getOperation()
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:setDirectory(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getDirectory()
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:setFilename(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:getFilename()
org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:setBase(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:getBase()
org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setAnnotationName(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getAnnotationName()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setAnnotationIndex(int)
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getAnnotationIndex()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setNamedDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination)
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getNamedDestination()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setPageNumber(int)
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getPageNumber()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setTargetDirectory(org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory)
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getTargetDirectory()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setFilename(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getFilename()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:setRelationship(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:getRelationship()
org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:setC(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:getC()
org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:setO(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:getO()
org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:setC(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getC()
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:setV(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getV()
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:setF(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:setK(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:getK()
org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setDP(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getDP()
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setWP(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getWP()
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setDS(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getDS()
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setWS(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getWS()
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:setWC(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:getWC()
org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setPI(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getPI()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setPV(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getPV()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setPC(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getPC()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setPO(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getPO()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setBl(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getBl()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setFo(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getFo()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setU(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getU()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setD(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getD()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setX(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getX()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:setE(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:getE()
org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:getCOSObject()
org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:setF(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:getF()
org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:setTrackMousePosition(boolean)
org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:shouldTrackMousePosition()
org.apache.pdfbox.pdmodel.interactive.action.PDActionURI:getURI()
org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:setB(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:getB()
org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:getFile()
org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:setD(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:getD()
org.apache.pdfbox.pdmodel.interactive.action.PDActionThread:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:setFlags(int)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:getFlags()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:setFields(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:getFields()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:getFile()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getMix()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setMix(boolean)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getRepeat()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setRepeat(boolean)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getSynchronous()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setSynchronous(boolean)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getVolume()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setVolume(float)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:getSound()
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:setSound(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.interactive.action.PDActionSound:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:setFlags(int)
org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:getFlags()
org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:setFields(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:getFields()
org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:setOpenInNewWindow(org.apache.pdfbox.pdmodel.interactive.action.OpenMode)
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:getOpenInNewWindow()
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:setD(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:getD()
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:getFile()
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo$1:<clinit>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed:setN(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed:getN()
org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionMovie:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setOpenInNewWindow(org.apache.pdfbox.pdmodel.interactive.action.OpenMode)
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getOpenInNewWindow()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setP(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getP()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setO(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getO()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setD(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getD()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setF(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getF()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setWinLaunchParams(org.apache.pdfbox.pdmodel.interactive.action.PDWindowsLaunchParams)
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getWinLaunchParams()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:getFile()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch$1:<clinit>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:getAction()
org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData:getFile()
org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:setH(boolean)
org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:getH()
org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:setT(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:getT()
org.apache.pdfbox.pdmodel.interactive.action.PDActionHide:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:setTargetDirectory(org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory)
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:getTargetDirectory()
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:setOpenInNewWindow(org.apache.pdfbox.pdmodel.interactive.action.OpenMode)
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:getOpenInNewWindow()
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:getFile()
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:setDestination(org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination)
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:getDestination()
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo:<init>()
org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo$1:<clinit>()
org.apache.pdfbox.pdmodel.interactive.action.PDAction:setNext(java.util.List)
org.apache.pdfbox.pdmodel.interactive.action.PDAction:getNext()
org.apache.pdfbox.pdmodel.interactive.action.PDAction:setSubType(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.action.PDAction:getSubType()
org.apache.pdfbox.pdmodel.interactive.action.PDAction:getType()
org.apache.pdfbox.pdmodel.interactive.action.OpenMode:<clinit>()
org.apache.pdfbox.pdmodel.interactive.action.OpenMode:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.TextAlign:<clinit>()
org.apache.pdfbox.pdmodel.interactive.TextAlign:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.interactive.PlainTextFormatter$1:<clinit>()
org.apache.pdfbox.pdmodel.interactive.PlainText:<init>(java.util.List)
org.apache.pdfbox.pdmodel.interactive.PlainText$TextAttribute:<clinit>()
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:<clinit>()
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent:<clinit>()
org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:<clinit>()
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask:create(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState:intersectClippingPath(java.awt.geom.Area)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:getCOSObject()
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setTransfer2(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setTransfer(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setTextKnockoutFlag(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setAutomaticStrokeAdjustment(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setSmoothnessTolerance(java.lang.Float)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setFlatnessTolerance(java.lang.Float)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setFontSetting(org.apache.pdfbox.pdmodel.graphics.PDFontSetting)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setOverprintMode(java.lang.Integer)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setNonStrokingOverprintControl(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setStrokingOverprintControl(boolean)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setRenderingIntent(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setLineDashPattern(org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setMiterLimit(java.lang.Float)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setLineJoinStyle(int)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setLineCapStyle(int)
org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState:setLineWidth(java.lang.Float)
org.apache.pdfbox.pdmodel.graphics.shading.Vertex:toString()
org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingPaint:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.shading.Type6ShadingPaint:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.Type6ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingContext:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingContext:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingPaint:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingContext:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingContext:getRaster(int,int,int,int)
org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingContext:dispose()
org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:getRaster(int,int,int,int)
org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:calcPixelTable(java.util.List,int[][],java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext:createPixelTable(java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.ShadedTriangle:toString()
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:getFunction()
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:getRaster(int,int,int,int)
org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext:dispose()
org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext:isDataEmpty()
org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext:dispose()
org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext:calcPixelTableArray(java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.Patch:clonedPoint2DArray(java.awt.geom.Point2D[])
org.apache.pdfbox.pdmodel.graphics.shading.Patch:getShadedTriangles(org.apache.pdfbox.pdmodel.graphics.shading.CoordinateColorPair[][])
org.apache.pdfbox.pdmodel.graphics.shading.Patch:isEdgeALine(java.awt.geom.Point2D[])
org.apache.pdfbox.pdmodel.graphics.shading.Patch:getLen(java.awt.geom.Point2D,java.awt.geom.Point2D)
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType:readVertex(javax.imageio.stream.ImageInputStream,long,long,org.apache.pdfbox.pdmodel.common.PDRange,org.apache.pdfbox.pdmodel.common.PDRange,org.apache.pdfbox.pdmodel.common.PDRange[],org.apache.pdfbox.util.Matrix,java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7:generatePatch(java.awt.geom.Point2D[],float[][])
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType7:toPaint(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6:generatePatch(java.awt.geom.Point2D[],float[][])
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType6:toPaint(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:setBitsPerComponent(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:setBitsPerCoordinate(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:setDecodeValues(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:toPaint(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5:setVerticesPerRow(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:setBitsPerComponent(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:setBitsPerCoordinate(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:setDecodeValues(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:toPaint(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4:setBitsPerFlag(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3:toPaint(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:toPaint(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:setCoords(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:setDomain(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2:setExtend(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:toPaint(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:setDomain(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1:setMatrix(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:evalFunction(float)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setFunction(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setFunction(org.apache.pdfbox.pdmodel.common.function.PDFunction)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getAntiAlias()
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setAntiAlias(boolean)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setBackground(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:setShadingType(int)
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:getType()
org.apache.pdfbox.pdmodel.graphics.shading.PDShading:<init>()
org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.PDMeshBasedShadingType:getBounds(java.awt.geom.AffineTransform,org.apache.pdfbox.util.Matrix,int)
org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:isDataEmpty()
org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:dispose()
org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext:calcPixelTableArray(java.awt.Rectangle)
org.apache.pdfbox.pdmodel.graphics.shading.CubicBezierCurve:toString()
org.apache.pdfbox.pdmodel.graphics.shading.CoonsPatch:getFlag1Edge()
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint:<clinit>()
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint:createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:<clinit>()
java.awt.geom.NoninvertibleTransformException:getMessage()
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:getFunction()
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:getRaster(int,int,int,int)
org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext:dispose()
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getContents()
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:getTilingType()
org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:setShading(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:setExtendedGraphicsState(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:getExtendedGraphicsState()
org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern:<init>()
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:setMatrix(java.awt.geom.AffineTransform)
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:setPatternType(int)
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:getType()
org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern:setPaintType(int)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:setGroupEnabled(java.lang.String,boolean)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:isGroupEnabled(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:setBaseState(org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getOptionalContentGroups()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties:getGroup(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:<clinit>()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties$BaseState:values()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:setVisibilityPolicy(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:setOCGs(java.util.List)
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentMembershipDictionary:<init>()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup:toString()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup$RenderState:<clinit>()
org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup$RenderState:values()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:<clinit>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader:<init>()
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:<clinit>()
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter:<init>()
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:read(byte[],int,int)
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:available()
org.apache.pdfbox.pdmodel.graphics.image.PNGConverter$MultipleInputStream:read()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getSuffix()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getStencilImage(java.awt.Paint)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getRawImage()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getImage(java.awt.Rectangle,int)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getImage()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:createInputStream(java.util.List)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:createInputStream(org.apache.pdfbox.filter.DecodeOptions)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setStencil(boolean)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setDecode(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setFilters(java.util.List)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setInterpolate(boolean)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:getInterpolate()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setWidth(int)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setHeight(int)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage:setBitsPerComponent(int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:<clinit>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setOptionalContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getSuffix()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setStencil(boolean)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getDecode()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setInterpolate(boolean)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:isEmpty()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createInputStream(java.util.List)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createInputStream(org.apache.pdfbox.filter.DecodeOptions)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createInputStream()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getOpaqueImage()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getStencilImage(java.awt.Paint)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getRawImage()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getImage()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setStructParent(int)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:getMetadata()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument,byte[],java.lang.String)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromFileByContent(java.io.File,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createFromFile(java.lang.String,org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:createThumbnail(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory:<init>()
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:<clinit>()
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory:<init>()
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:createFromImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)
org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory:<init>()
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:isKnockout()
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes:getColorSpace()
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup:<init>(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setOptionalContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:setStructParents(int)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getBBox()
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getContents()
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getGroup()
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject:getFormType()
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:setZ(float)
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:setY(float)
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:setX(float)
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:<init>(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:setTintTransform(org.apache.pdfbox.pdmodel.common.function.PDFunction)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:setAlternateColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:setColorantName(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getNumberOfComponents()
org.apache.pdfbox.pdmodel.graphics.color.PDPattern:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:setRegistryName(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getRegistryName()
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:setOutputConditionIdentifier(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:setOutputCondition(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getOutputCondition()
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:setInfo(java.lang.String)
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getInfo()
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:getDestOutputIntent()
org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:setBRange(org.apache.pdfbox.pdmodel.common.PDRange)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:setARange(org.apache.pdfbox.pdmodel.common.PDRange)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDLab:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDLab:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDLab:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getCOSObject()
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getInitialColor()
org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:setHighValue(int)
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:setBaseColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:setMetadata(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:setRangeForComponent(org.apache.pdfbox.pdmodel.common.PDRange,int)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:setAlternateColorSpaces(java.util.List)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getColorSpaceType()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getMetadata()
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:toRawImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDICCBased:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:setB(float)
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:setG(float)
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:setR(float)
org.apache.pdfbox.pdmodel.graphics.color.PDGamma:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNProcess:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:setColorants(java.util.Map)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:setTintTransform(org.apache.pdfbox.pdmodel.common.function.PDFunction)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getTintTransform()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:setAlternateColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getAlternateColorSpace()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:setAttributes(org.apache.pdfbox.pdmodel.graphics.color.PDDeviceNAttributes)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:setColorantNames(java.util.List)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:getDefaultDecode(int)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:initColorConversionCache(org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace:getCOSObject()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:toRGBImageAWT(java.awt.image.WritableRaster,java.awt.color.ColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:toRawImage(java.awt.image.WritableRaster,java.awt.color.ColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation:<init>(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN:<init>(org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.PDResources)
org.apache.pdfbox.pdmodel.graphics.color.PDColor:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDColor:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDColor:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:setMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:setGamma(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDCalRGB:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:setGamma(float)
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:toRGB(float[])
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:getName()
org.apache.pdfbox.pdmodel.graphics.color.PDCalGray:<init>()
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:<clinit>()
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:setBlackPoint(org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus)
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:setWhitePoint(org.apache.pdfbox.pdmodel.graphics.color.PDTristimulus)
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:getBlackPoint()
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:convXYZtoRGB(float,float,float)
org.apache.pdfbox.pdmodel.graphics.color.PDCIEDictionaryBasedColorSpace:isWhitePoint()
org.apache.pdfbox.pdmodel.graphics.color.PDCIEBasedColorSpace:toString()
org.apache.pdfbox.pdmodel.graphics.color.PDCIEBasedColorSpace:toRGBImage(java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:<clinit>()
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode:toString()
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite:<clinit>()
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite:createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite$BlendCompositeContext:compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)
org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern:toString()
org.apache.pdfbox.pdmodel.graphics.PDFontSetting:setFontSize(float)
org.apache.pdfbox.pdmodel.graphics.PDFontSetting:setFont(org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.pdmodel.graphics.PDFontSetting:<init>()
org.apache.pdfbox.pdmodel.font.encoding.ZapfDingbatsEncoding:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.ZapfDingbatsEncoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.SymbolEncoding:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.SymbolEncoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.encoding.StandardEncoding:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.MacRomanEncoding:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.MacOSRomanEncoding:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.MacExpertEncoding:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList:sequenceToName(java.lang.String)
org.apache.pdfbox.pdmodel.font.encoding.Encoding:contains(int)
org.apache.pdfbox.pdmodel.font.encoding.Encoding:overwrite(int,java.lang.String)
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:<clinit>()
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:getEncodingName()
org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding:<init>(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.font.encoding.BuiltInEncoding:getCOSObject()
org.apache.pdfbox.pdmodel.font.UniUtil:<init>()
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:subset()
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:addGlyphIds(java.util.Set)
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:addToSubset(int)
org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder:buildFontFile2(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.Standard14Fonts:<clinit>()
org.apache.pdfbox.pdmodel.font.Standard14Fonts:<init>()
org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName:<clinit>()
org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType3Font:<clinit>()
org.apache.pdfbox.pdmodel.font.PDType3Font:readCode(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDType3Font:encode(int)
org.apache.pdfbox.pdmodel.font.PDType3Font:getHeight(int)
org.apache.pdfbox.pdmodel.font.PDType3Font:getDisplacement(int)
org.apache.pdfbox.pdmodel.font.PDType3Font:getFontBoxFont()
org.apache.pdfbox.pdmodel.font.PDType3Font:hasGlyph(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType3Font:getPath(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType3Font:isFontSymbolic()
org.apache.pdfbox.pdmodel.font.PDType3Font:readEncodingFromFont()
org.apache.pdfbox.pdmodel.font.PDType3Font:getName()
org.apache.pdfbox.pdmodel.font.PDType3Font:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.font.PDType3CharProc:<clinit>()
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getBBox()
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getResources()
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getContents()
org.apache.pdfbox.pdmodel.font.PDType3CharProc:getContentStream()
org.apache.pdfbox.pdmodel.font.PDType1Font:<clinit>()
org.apache.pdfbox.pdmodel.font.PDType1Font:hasGlyph(int)
org.apache.pdfbox.pdmodel.font.PDType1Font:hasGlyph(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType1Font:getNormalizedPath(int)
org.apache.pdfbox.pdmodel.font.PDType1Font:getPath(int)
org.apache.pdfbox.pdmodel.font.PDType1Font:getBoundingBox()
org.apache.pdfbox.pdmodel.font.PDType1Font:readEncodingFromFont()
org.apache.pdfbox.pdmodel.font.PDType1Font:readCode(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDType1Font:getAverageFontWidth()
org.apache.pdfbox.pdmodel.font.PDType1Font:getWidthFromFont(int)
org.apache.pdfbox.pdmodel.font.PDType1Font:encode(int)
org.apache.pdfbox.pdmodel.font.PDType1Font:getHeight(int)
org.apache.pdfbox.pdmodel.font.PDType1Font:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDType1Font$1:<clinit>()
org.apache.pdfbox.pdmodel.font.PDType1CFont:<clinit>()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getAverageFontWidth()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getStringWidth(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDType1CFont:encode(int)
org.apache.pdfbox.pdmodel.font.PDType1CFont:getHeight(int)
org.apache.pdfbox.pdmodel.font.PDType1CFont:getWidthFromFont(int)
org.apache.pdfbox.pdmodel.font.PDType1CFont:readCode(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDType1CFont:readEncodingFromFont()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getBoundingBox()
org.apache.pdfbox.pdmodel.font.PDType1CFont:getNormalizedPath(int)
org.apache.pdfbox.pdmodel.font.PDType1CFont:getPath(int)
org.apache.pdfbox.pdmodel.font.PDType1CFont:hasGlyph(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:<clinit>()
org.apache.pdfbox.pdmodel.font.PDType0Font:hasGlyph(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getNormalizedPath(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getPath(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:toString()
org.apache.pdfbox.pdmodel.font.PDType0Font:isDamaged()
org.apache.pdfbox.pdmodel.font.PDType0Font:codeToGID(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:readCode(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDType0Font:getBoundingBox()
org.apache.pdfbox.pdmodel.font.PDType0Font:isEmbedded()
org.apache.pdfbox.pdmodel.font.PDType0Font:getWidthFromFont(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getStandard14Width(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getWidth(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getDisplacement(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getPositionVector(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getAverageFontWidth()
org.apache.pdfbox.pdmodel.font.PDType0Font:hasExplicitWidth(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:encode(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getHeight(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:getFontMatrix()
org.apache.pdfbox.pdmodel.font.PDType0Font:getFontDescriptor()
org.apache.pdfbox.pdmodel.font.PDType0Font:subset()
org.apache.pdfbox.pdmodel.font.PDType0Font:addToSubset(int)
org.apache.pdfbox.pdmodel.font.PDType0Font:loadVertical(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,boolean)
org.apache.pdfbox.pdmodel.font.PDType0Font:loadVertical(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,boolean)
org.apache.pdfbox.pdmodel.font.PDType0Font:loadVertical(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDType0Font:loadVertical(org.apache.pdfbox.pdmodel.PDDocument,java.io.File)
org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDType0Font:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.File)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFontEmbedder:buildSubset(java.io.InputStream,java.lang.String,java.util.Map)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:<clinit>()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:hasGlyph(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:hasGlyph(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getNormalizedPath(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getPath(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:encode(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getHeight(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getWidthFromFont(int)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:getBoundingBox()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:readCode(java.io.InputStream)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:readEncodingFromFont()
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:load(org.apache.pdfbox.pdmodel.PDDocument,org.apache.fontbox.ttf.TrueTypeFont,org.apache.pdfbox.pdmodel.font.encoding.Encoding)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.pdmodel.font.encoding.Encoding)
org.apache.pdfbox.pdmodel.font.PDTrueTypeFont:load(org.apache.pdfbox.pdmodel.PDDocument,java.io.File,org.apache.pdfbox.pdmodel.font.encoding.Encoding)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:<clinit>()
org.apache.pdfbox.pdmodel.font.PDSimpleFont:hasExplicitWidth(int)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:subset()
org.apache.pdfbox.pdmodel.font.PDSimpleFont:addToSubset(int)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:isNonZeroBoundingBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:getStandard14Width(int)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:toUnicode(int)
org.apache.pdfbox.pdmodel.font.PDSimpleFont:isSymbolic()
org.apache.pdfbox.pdmodel.font.PDSimpleFont:readEncoding()
org.apache.pdfbox.pdmodel.font.PDPanoseClassification:toString()
org.apache.pdfbox.pdmodel.font.PDFontFactory:<clinit>()
org.apache.pdfbox.pdmodel.font.PDFontFactory:<init>()
org.apache.pdfbox.pdmodel.font.PDFontFactory$FontType:<clinit>()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getCIDSet()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontFile3(org.apache.pdfbox.pdmodel.common.PDStream)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getCharSet()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setMissingWidth(float)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:hasMissingWidth()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:hasWidths()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setMaxWidth(float)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getMaxWidth()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getAverageWidth()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setStemH(float)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getStemH()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getStemV()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setLeading(float)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getLeading()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getItalicAngle()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setFontStretch(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:getFontStretch()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setForceBold(boolean)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isForceBold()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setSmallCap(boolean)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isSmallCap()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:setAllCap(boolean)
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isAllCap()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isNonSymbolic()
org.apache.pdfbox.pdmodel.font.PDFontDescriptor:isScript()
org.apache.pdfbox.pdmodel.font.PDFont:<clinit>()
org.apache.pdfbox.pdmodel.font.PDFont:toString()
org.apache.pdfbox.pdmodel.font.PDFont:equals(java.lang.Object)
org.apache.pdfbox.pdmodel.font.PDFont:getSubType()
org.apache.pdfbox.pdmodel.font.PDFont:getType()
org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:toString()
org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo:<init>(java.lang.String,java.lang.String,int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:<clinit>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder:buildSubset(java.io.InputStream,java.lang.String,java.util.Map)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder$State:<clinit>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder$State:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder$State:values()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:<clinit>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:hasGlyph(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getNormalizedPath(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:encode(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getWidthFromFont(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getHeight(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getBoundingBox()
org.apache.pdfbox.pdmodel.font.PDCIDFontType2:getFontMatrix()
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:<clinit>()
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getAverageFontWidth()
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getHeight(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getWidthFromFont(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:encodeGlyphId(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:encode(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:codeToGID(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:hasGlyph(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getNormalizedPath(int)
org.apache.pdfbox.pdmodel.font.PDCIDFontType0:getBoundingBox()
org.apache.pdfbox.pdmodel.font.PDCIDFont:<clinit>()
org.apache.pdfbox.pdmodel.font.PDCIDFont:getCOSObject()
org.apache.pdfbox.pdmodel.font.PDCIDFont:readCIDToGIDMap()
org.apache.pdfbox.pdmodel.font.PDCIDFont:getName()
org.apache.pdfbox.pdmodel.font.FontMappers:<init>()
org.apache.pdfbox.pdmodel.font.FontMappers$DefaultFontMapper:<clinit>()
org.apache.pdfbox.pdmodel.font.FontMappers$DefaultFontMapper:<init>()
org.apache.pdfbox.pdmodel.font.FontMapperImpl:<clinit>()
org.apache.pdfbox.pdmodel.font.FontMapperImpl:printMatches(java.util.PriorityQueue)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getCIDFont(java.lang.String,org.apache.pdfbox.pdmodel.font.PDFontDescriptor,org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getFontBoxFont(java.lang.String,org.apache.pdfbox.pdmodel.font.PDFontDescriptor)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:getTrueTypeFont(java.lang.String,org.apache.pdfbox.pdmodel.font.PDFontDescriptor)
org.apache.pdfbox.pdmodel.font.FontMapperImpl:addSubstitute(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.font.FontMapperImpl$FontMatch:compareTo(java.lang.Object)
org.apache.pdfbox.pdmodel.font.FontMapperImpl$DefaultFontProvider:<clinit>()
org.apache.pdfbox.pdmodel.font.FontMapperImpl$DefaultFontProvider:<init>()
org.apache.pdfbox.pdmodel.font.FontFormat:<clinit>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:<clinit>()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:toDebugString()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:toString()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo:getFont()
org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$1:<clinit>()
org.apache.pdfbox.pdmodel.font.CMapManager:<clinit>()
org.apache.pdfbox.pdmodel.font.CMapManager:<init>()
org.apache.pdfbox.pdmodel.font.CIDSystemInfo:toString()
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor:<clinit>()
org.apache.pdfbox.pdmodel.fixup.processor.AcroFormGenerateAppearancesProcessor:<clinit>()
org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup:apply()
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:setRename(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:shouldRename()
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:setFields(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:getFields()
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:setTemplateReference(org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference)
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:getTemplateReference()
org.apache.pdfbox.pdmodel.fdf.FDFTemplate:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFPageInfo:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFPageInfo:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFPage:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFPage:setPageInfo(org.apache.pdfbox.pdmodel.fdf.FDFPageInfo)
org.apache.pdfbox.pdmodel.fdf.FDFPage:getPageInfo()
org.apache.pdfbox.pdmodel.fdf.FDFPage:setTemplates(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFPage:getTemplates()
org.apache.pdfbox.pdmodel.fdf.FDFPage:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:setDefaultAppearanceString(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:getDefaultAppearanceString()
org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:setOption(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:getOption()
org.apache.pdfbox.pdmodel.fdf.FDFOptionElement:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:setFileSpecification(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:getFileSpecification()
org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:setName(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:getName()
org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:setDoc(java.util.Map)
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:getDoc()
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:setAfter(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:getAfter()
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:setBefore(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:getBefore()
org.apache.pdfbox.pdmodel.fdf.FDFJavaScript:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:setScaleToFitAnnotation(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:shouldScaleToFitAnnotation()
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:getFractionalSpaceToAllocate()
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:setScaleType(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:getScaleType()
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:setScaleOption(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:getScaleOption()
org.apache.pdfbox.pdmodel.fdf.FDFIconFit:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFField:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFField:setRichText(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.fdf.FDFField:setAdditionalActions(org.apache.pdfbox.pdmodel.interactive.action.PDAdditionalActions)
org.apache.pdfbox.pdmodel.fdf.FDFField:getAdditionalActions()
org.apache.pdfbox.pdmodel.fdf.FDFField:setAction(org.apache.pdfbox.pdmodel.interactive.action.PDAction)
org.apache.pdfbox.pdmodel.fdf.FDFField:getAction()
org.apache.pdfbox.pdmodel.fdf.FDFField:setOptions(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFField:getOptions()
org.apache.pdfbox.pdmodel.fdf.FDFField:setIconFit(org.apache.pdfbox.pdmodel.fdf.FDFIconFit)
org.apache.pdfbox.pdmodel.fdf.FDFField:getIconFit()
org.apache.pdfbox.pdmodel.fdf.FDFField:setAppearanceStreamReference(org.apache.pdfbox.pdmodel.fdf.FDFNamedPageReference)
org.apache.pdfbox.pdmodel.fdf.FDFField:getAppearanceStreamReference()
org.apache.pdfbox.pdmodel.fdf.FDFField:setAppearanceDictionary(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary)
org.apache.pdfbox.pdmodel.fdf.FDFField:getAppearanceDictionary()
org.apache.pdfbox.pdmodel.fdf.FDFField:setClearWidgetFieldFlags(int)
org.apache.pdfbox.pdmodel.fdf.FDFField:setClearWidgetFieldFlags(java.lang.Integer)
org.apache.pdfbox.pdmodel.fdf.FDFField:setSetWidgetFieldFlags(int)
org.apache.pdfbox.pdmodel.fdf.FDFField:setSetWidgetFieldFlags(java.lang.Integer)
org.apache.pdfbox.pdmodel.fdf.FDFField:setWidgetFieldFlags(int)
org.apache.pdfbox.pdmodel.fdf.FDFField:setWidgetFieldFlags(java.lang.Integer)
org.apache.pdfbox.pdmodel.fdf.FDFField:setClearFieldFlags(int)
org.apache.pdfbox.pdmodel.fdf.FDFField:setClearFieldFlags(java.lang.Integer)
org.apache.pdfbox.pdmodel.fdf.FDFField:setSetFieldFlags(int)
org.apache.pdfbox.pdmodel.fdf.FDFField:setSetFieldFlags(java.lang.Integer)
org.apache.pdfbox.pdmodel.fdf.FDFField:setFieldFlags(int)
org.apache.pdfbox.pdmodel.fdf.FDFField:setFieldFlags(java.lang.Integer)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:<clinit>()
org.apache.pdfbox.pdmodel.fdf.FDFDocument:close()
org.apache.pdfbox.pdmodel.fdf.FDFDocument:saveXFDF(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFDocument:save(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:<clinit>()
org.w3c.dom.Element:getNodeValue()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setJavaScript(org.apache.pdfbox.pdmodel.fdf.FDFJavaScript)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getJavaScript()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setEmbeddedFDFs(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getEmbeddedFDFs()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setTarget(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getTarget()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setDifferences(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getDifferences()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getAnnotations()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setEncoding(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getEncoding()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setPages(java.util.List)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getPages()
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:setStatus(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFDictionary:getStatus()
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:setSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:getSignature()
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:setVersion(java.lang.String)
org.apache.pdfbox.pdmodel.fdf.FDFCatalog:getVersion()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationUnderline:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationTextMarkup:getCoords()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:getStateModel()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:getState()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:getIcon()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationText:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStrikeOut:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:<clinit>()
javax.xml.xpath.XPathExpressionException:getMessage()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:parseArrayElement(org.w3c.dom.Element)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationStamp:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquiggly:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:getFringe()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:getInteriorColor()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSquare:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationSound:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:<clinit>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:getInteriorColor()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:getEndPointEndingStyle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:getStartPointEndingStyle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:getVertices()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolyline:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:<clinit>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:getInteriorColor()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:getVertices()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLink:<clinit>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLink:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getCaptionVerticalOffset()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getCaptionHorizontalOffset()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getCaptionStyle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getLeaderOffset()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getLeaderExtend()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getLeaderLength()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getCaption()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getInteriorColor()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getEndPointEndingStyle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getStartPointEndingStyle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:getLine()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationLine:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:<clinit>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:getInkList()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationInk:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationHighlight:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:<clinit>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getLineEndingStyle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getFringe()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getDefaultStyle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getDefaultAppearance()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getRotation()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getJustification()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:getCallout()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFreeText:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationFileAttachment:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:getFringe()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:getInteriorColor()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCircle:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:getSymbol()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:getFringe()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotationCaret:<init>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:<clinit>()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getCOSObject()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getBorderEffect()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getBorderStyle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getRichContents()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getIntent()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getSubject()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getOpacity()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getCreationDate()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getTitle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getContents()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getRectangle()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getName()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:setLockedContents(boolean)
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isLockedContents()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isToggleNoView()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isLocked()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isReadOnly()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isNoView()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isNoRotate()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isNoZoom()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isPrinted()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isHidden()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:isInvisible()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getDate()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getColor()
org.apache.pdfbox.pdmodel.fdf.FDFAnnotation:getPage()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:<clinit>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isOwnerPassword(java.lang.String,byte[],byte[],int,byte[],int,int,boolean)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:isUserPassword(java.lang.String,byte[],byte[],int,byte[],int,int,boolean)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:getUserPassword(byte[],byte[],int,int)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareDocumentForEncryption(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryption,org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:<init>(org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler:<init>()
org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy:<init>(java.lang.String,java.lang.String,org.apache.pdfbox.pdmodel.encryption.AccessPermission)
org.apache.pdfbox.pdmodel.encryption.SecurityProvider:<init>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory:<clinit>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:<clinit>()
java.lang.String:makeConcatWithConstants(int,long,java.lang.String)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:computeVersionNumber()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:decryptDictionary(org.apache.pdfbox.cos.COSDictionary,long,long)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler:encryptDataRC4(byte[],byte[],java.io.OutputStream)
org.apache.pdfbox.pdmodel.encryption.SaslPrep:<init>()
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:prepareDocumentForEncryption(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryption,org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:<init>(org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy)
org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler:<init>()
org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient:<init>()
org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:removeRecipient(org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient)
org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:addRecipient(org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient)
org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy:<init>()
org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy:setEncryptionKeyLength(int)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getRecipientStringAt(int)
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getRecipientsLength()
org.apache.pdfbox.pdmodel.encryption.PDEncryption:getSubFilter()
org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary:setEncryptMetaData(boolean)
org.apache.pdfbox.pdmodel.encryption.MessageDigests:<init>()
org.apache.pdfbox.pdmodel.encryption.AccessPermission:isOwnerPermission()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.StandardStructureTypes:<clinit>()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.StandardStructureTypes:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:toString()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setSummary(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setScope(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setHeaders(java.lang.String[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setColSpan(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:setRowSpan(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDTableAttributeObject:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setFourColors(java.lang.String,org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setColor(java.lang.String,org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getColorOrFourColors(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getColor(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setArrayOfNumber(java.lang.String,float[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setNumber(java.lang.String,int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setNumber(java.lang.String,float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNumberOrArrayOfNumber(java.lang.String,float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNumber(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNumber(java.lang.String,float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setInteger(java.lang.String,int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getInteger(java.lang.String,int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNumberOrName(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setArrayOfName(java.lang.String,java.lang.String[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setName(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getNameOrArrayOfName(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getName(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getName(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setArrayOfString(java.lang.String,java.lang.String[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getArrayOfString(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:setString(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:getString(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDStandardAttributeObject:isSpecified(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:toString()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:setAlternateName(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:setCheckedState(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:setRole(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDPrintFieldAttributeObject:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:toString()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:setListNumbering(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnWidths(float[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllColumnWidths(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllColumnWidths(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnGaps(float[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnGap(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnGap(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColumnCount(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setGlyphOrientationVertical(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setRubyPosition(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setRubyAlign(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextDecorationType(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextDecorationThickness(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextDecorationThickness(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextDecorationColor(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setLineHeight(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setLineHeight(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setLineHeightAuto()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setLineHeightNormal()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBaselineShift(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBaselineShift(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTPaddings(float[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllTPaddings(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllTPaddings(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTBorderStyles(java.lang.String[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllTBorderStyles(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setInlineAlign(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBlockAlign(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setHeight(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setHeight(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setHeightAuto()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setWidth(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setWidth(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setWidthAuto()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextAlign(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextIndent(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setTextIndent(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setEndIndent(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setEndIndent(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setStartIndent(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setStartIndent(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setSpaceAfter(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setSpaceAfter(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setSpaceBefore(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setSpaceBefore(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setColor(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setPaddings(float[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllPaddings(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllPaddings(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBorderThicknesses(float[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllBorderThicknesses(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllBorderThicknesses(float)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBorderStyles(java.lang.String[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllBorderStyles(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBorderColors(org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setAllBorderColors(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setBackgroundColor(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setWritingMode(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDLayoutAttributeObject:setPlacement(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setEndColour(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getEndColour()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setStartColour(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getStartColour()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setAfterColour(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getAfterColour()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:setBeforeColour(org.apache.pdfbox.pdmodel.graphics.color.PDGamma)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:getBeforeColour()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDFourColours:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:toString()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setSummary(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setScope(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setHeaders(java.lang.String[])
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setColSpan(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setRowSpan(int)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:setListNumbering(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDExportFormatAttributeObject:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:getSubtype()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isRightAttached()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isLeftAttached()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isBottomAttached()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:isTopAttached()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:getBBox()
org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDArtifactMarkedContent:getType()
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getCOSObject()
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:setLineDashPattern(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getLineDashPattern()
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:setGuidelineStyle(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getGuidelineStyle()
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:setGuidelineWidth(float)
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getGuidelineWidth()
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:setGuideLineColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:getGuidelineColor()
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.prepress.PDBoxStyle:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:toString()
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getExpandedForm()
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getAlternateDescription()
org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent:getLanguage()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions:toString()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:equals(java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:hashCode()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:toString()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:setHidden(boolean)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:setFormattedValue(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:setValue(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:setName(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty:<init>(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:toString()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:removeUserProperty(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:addUserProperty(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserProperty)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:setUserProperties(java.util.List)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDUserAttributeObject:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:<clinit>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot:setRoleMap(java.util.Map)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:removeKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:insertBefore(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:appendKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:setKids(java.util.List)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:getKids()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode:getType()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeKid(org.apache.pdfbox.cos.COSInteger)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:insertBefore(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:insertBefore(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:insertBefore(org.apache.pdfbox.cos.COSInteger,java.lang.Object)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:appendKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:appendKid(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:appendKid(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:appendKid(int)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getStandardStructureType()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setActualText(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getActualText()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setExpandedForm(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getExpandedForm()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setAlternateDescription(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getAlternateDescription()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setLanguage(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getLanguage()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setTitle(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getTitle()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:incrementRevisionNumber()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeClassName(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:addClassName(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setClassNames(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getClassNames()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:removeAttribute(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:addAttribute(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setAttributes(org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.Revisions)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getAttributes()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getPage()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:setElementIdentifier(java.lang.String)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:getElementIdentifier()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureElement:<init>(java.lang.String,org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureNode)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDParentTreeValue:toString()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDParentTreeValue:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDParentTreeValue:<init>(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:<clinit>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:setPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:getPage()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:setReferencedObject(org.apache.pdfbox.pdmodel.graphics.PDXObject)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:setReferencedObject(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:getReferencedObject()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDObjectReference:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:toString()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:setMCID(int)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:setPage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:getPage()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkedContentReference:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:getCOSObject()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:setUserProperties(boolean)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo:isMarked()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:toString()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:setAttribute(java.lang.String,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:getAttributeValue(java.lang.String,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject:<init>()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:arrayToString(float[])
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:arrayToString(java.lang.Object[])
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:potentiallyNotifyChanged(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:isEmpty()
org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDAttributeObject:setOwner(java.lang.String)
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Roll:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Pop:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Index:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Exch:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Dup:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Copy:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Ne:isEqual(java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Lt:compare(java.lang.Number,java.lang.Number)
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Le:compare(java.lang.Number,java.lang.Number)
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Gt:compare(java.lang.Number,java.lang.Number)
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Ge:compare(java.lang.Number,java.lang.Number)
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$Eq:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.RelationalOperators$AbstractNumberComparisonOperator:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.Parser:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer:<clinit>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$State:<clinit>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$State:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$State:values()
org.apache.pdfbox.pdmodel.common.function.type4.Operators:<clinit>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:<clinit>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder:token(java.lang.CharSequence)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence:addBoolean(boolean)
org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators$IfElse:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ConditionalOperators$If:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$True:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Not:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$False:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$Bitshift:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators:<init>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Truncate:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sub:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sin:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Round:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Neg:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Mul:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Mod:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Log:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Ln:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$IDiv:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Floor:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Exp:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Div:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cvr:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cvi:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Cos:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Ceiling:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Atan:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Abs:execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
org.apache.pdfbox.pdmodel.common.function.PDFunctionTypeIdentity:getFunctionType()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4:<clinit>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4:eval(float[])
org.apache.pdfbox.pdmodel.common.function.PDFunctionType3:eval(float[])
org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:toString()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType2:eval(float[])
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:<clinit>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:eval(float[])
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:setDecodeValues(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:setEncodeValues(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:setBitsPerSample(int)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0:getOrder()
org.apache.pdfbox.pdmodel.common.function.PDFunction:toString()
org.apache.pdfbox.pdmodel.common.function.PDFunction:clipToRange(float[])
org.apache.pdfbox.pdmodel.common.function.PDFunction:setDomainValues(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.common.function.PDFunction:getDomainForInput(int)
org.apache.pdfbox.pdmodel.common.function.PDFunction:getNumberOfInputParameters()
org.apache.pdfbox.pdmodel.common.function.PDFunction:setRangeValues(org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.common.function.PDFunction:getRangeForOutput(int)
org.apache.pdfbox.pdmodel.common.filespecification.PDSimpleFileSpecification:getFile()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setMacResFork(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getMacResFork()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setMacCreator(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getMacCreator()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setMacSubtype(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getMacSubtype()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setCheckSum(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getCheckSum()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setModDate(java.util.Calendar)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getModDate()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setCreationDate(java.util.Calendar)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getCreationDate()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setSize(int)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getSize()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:getSubtype()
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:setSubtype(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getCOSObject()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFileDescription()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setFileDescription(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFileUnicode()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFileUnix()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFileMac()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFileDos()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getEmbeddedFile()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:isVolatile()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setVolatile(boolean)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setFile(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:setFileUnicode(java.lang.String)
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:getFilename()
org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification:<init>()
org.apache.pdfbox.pdmodel.common.PDTypedDictionaryWrapper:getType()
org.apache.pdfbox.pdmodel.common.PDTypedDictionaryWrapper:<init>(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.common.PDTypedDictionaryWrapper:<init>(java.lang.String)
org.apache.pdfbox.pdmodel.common.PDStream:<clinit>()
org.apache.pdfbox.pdmodel.common.PDStream:setDecodedStreamLength(int)
org.apache.pdfbox.pdmodel.common.PDStream:getDecodedStreamLength()
org.apache.pdfbox.pdmodel.common.PDStream:setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata)
org.apache.pdfbox.pdmodel.common.PDStream:getMetadata()
org.apache.pdfbox.pdmodel.common.PDStream:setFileDecodeParams(java.util.List)
org.apache.pdfbox.pdmodel.common.PDStream:setFileFilters(java.util.List)
org.apache.pdfbox.pdmodel.common.PDStream:getFileFilters()
org.apache.pdfbox.pdmodel.common.PDStream:setFile(org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification)
org.apache.pdfbox.pdmodel.common.PDStream:getFile()
org.apache.pdfbox.pdmodel.common.PDStream:setDecodeParms(java.util.List)
org.apache.pdfbox.pdmodel.common.PDStream:getFileDecodeParams()
org.apache.pdfbox.pdmodel.common.PDStream:getDecodeParms()
org.apache.pdfbox.pdmodel.common.PDStream:setFilters(java.util.List)
org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSArray)
org.apache.pdfbox.pdmodel.common.PDStream:<init>(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdmodel.common.PDRectangle:<clinit>()
org.apache.pdfbox.pdmodel.common.PDRectangle:toString()
org.apache.pdfbox.pdmodel.common.PDRange:toString()
org.apache.pdfbox.pdmodel.common.PDPageLabels:getPageIndices()
org.apache.pdfbox.pdmodel.common.PDPageLabels:getLabelsByPageIndices()
org.apache.pdfbox.pdmodel.common.PDPageLabels:getPageIndicesByLabels()
org.apache.pdfbox.pdmodel.common.PDPageLabels:getCOSObject()
org.apache.pdfbox.pdmodel.common.PDPageLabels:setLabelItem(int,org.apache.pdfbox.pdmodel.common.PDPageLabelRange)
org.apache.pdfbox.pdmodel.common.PDPageLabels:getPageLabelRange(int)
org.apache.pdfbox.pdmodel.common.PDPageLabels:getPageRangeCount()
org.apache.pdfbox.pdmodel.common.PDPageLabels$LabelGenerator:remove()
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:getCOSObject()
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:setPrefix(java.lang.String)
org.apache.pdfbox.pdmodel.common.PDPageLabelRange:setStart(int)
org.apache.pdfbox.pdmodel.common.PDObjectStream:setExtends(org.apache.pdfbox.pdmodel.common.PDObjectStream)
org.apache.pdfbox.pdmodel.common.PDObjectStream:getExtends()
org.apache.pdfbox.pdmodel.common.PDObjectStream:setFirstByteOffset(int)
org.apache.pdfbox.pdmodel.common.PDObjectStream:getFirstByteOffset()
org.apache.pdfbox.pdmodel.common.PDObjectStream:setNumberOfObjects(int)
org.apache.pdfbox.pdmodel.common.PDObjectStream:getNumberOfObjects()
org.apache.pdfbox.pdmodel.common.PDObjectStream:getType()
org.apache.pdfbox.pdmodel.common.PDObjectStream:createStream(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:<clinit>()
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getCOSObject()
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:getValue(java.lang.Integer)
org.apache.pdfbox.pdmodel.common.PDNumberTreeNode:setKids(java.util.List)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:<clinit>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getCOSObject()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setNames(java.util.Map)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:getValue(java.lang.String)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setKids(java.util.List)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode:setParent(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)
org.apache.pdfbox.pdmodel.common.PDMetadata:importXMPMetadata(byte[])
org.apache.pdfbox.pdmodel.common.PDMetadata:exportXMPMetadata()
org.apache.pdfbox.pdmodel.common.PDMetadata:<init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)
org.apache.pdfbox.pdmodel.common.PDMetadata:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:setLowerLeftX(float)
org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:setLowerLeftY(float)
org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:setUpperRightX(float)
org.apache.pdfbox.pdmodel.common.PDImmutableRectangle:setUpperRightY(float)
org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper:getCOSObject()
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:hashCode()
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:toString()
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:equals(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:entrySet()
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:values()
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:keySet()
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:clear()
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:putAll(java.util.Map)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:remove(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:put(java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:get(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:containsValue(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:containsKey(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSDictionaryMap:isEmpty()
org.apache.pdfbox.pdmodel.common.COSArrayList:toString()
org.apache.pdfbox.pdmodel.common.COSArrayList:subList(int,int)
org.apache.pdfbox.pdmodel.common.COSArrayList:listIterator(int)
org.apache.pdfbox.pdmodel.common.COSArrayList:listIterator()
org.apache.pdfbox.pdmodel.common.COSArrayList:lastIndexOf(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:indexOf(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:remove(int)
org.apache.pdfbox.pdmodel.common.COSArrayList:add(int,java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:set(int,java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:get(int)
org.apache.pdfbox.pdmodel.common.COSArrayList:hashCode()
org.apache.pdfbox.pdmodel.common.COSArrayList:equals(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:clear()
org.apache.pdfbox.pdmodel.common.COSArrayList:retainAll(java.util.Collection)
org.apache.pdfbox.pdmodel.common.COSArrayList:removeAll(java.util.Collection)
org.apache.pdfbox.pdmodel.common.COSArrayList:addAll(int,java.util.Collection)
org.apache.pdfbox.pdmodel.common.COSArrayList:addAll(java.util.Collection)
org.apache.pdfbox.pdmodel.common.COSArrayList:containsAll(java.util.Collection)
org.apache.pdfbox.pdmodel.common.COSArrayList:remove(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:add(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:toArray(java.lang.Object[])
org.apache.pdfbox.pdmodel.common.COSArrayList:toArray()
org.apache.pdfbox.pdmodel.common.COSArrayList:iterator()
org.apache.pdfbox.pdmodel.common.COSArrayList:contains(java.lang.Object)
org.apache.pdfbox.pdmodel.common.COSArrayList:isEmpty()
org.apache.pdfbox.pdmodel.common.COSArrayList:size()
org.apache.pdfbox.pdmodel.common.COSArrayList:<init>()
org.apache.pdfbox.pdmodel.ResourceCacheFactory:<clinit>()
org.apache.pdfbox.pdmodel.ResourceCacheFactory:<init>()
org.apache.pdfbox.pdmodel.PageMode:<clinit>()
org.apache.pdfbox.pdmodel.PageMode:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.PageLayout:<clinit>()
org.apache.pdfbox.pdmodel.PageLayout:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.PDStructureElementNameTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDStructureElementNameTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern)
org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.PDResources:put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.PDResources:getPatternNames()
org.apache.pdfbox.pdmodel.PDResources:getShadingNames()
org.apache.pdfbox.pdmodel.PDResources:getPropertiesNames()
org.apache.pdfbox.pdmodel.PDResources:getColorSpaceNames()
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace:create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources,boolean)
org.apache.pdfbox.pdmodel.PDPatternContentStream:beginText()
org.apache.pdfbox.pdmodel.PDPatternContentStream:endText()
org.apache.pdfbox.pdmodel.PDPatternContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:showTextWithPositioning(java.lang.Object[])
org.apache.pdfbox.pdmodel.PDPatternContentStream:showText(java.lang.String)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setLeading(float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:newLine()
org.apache.pdfbox.pdmodel.PDPatternContentStream:newLineAtOffset(float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject)
org.apache.pdfbox.pdmodel.PDPatternContentStream:transform(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDPatternContentStream:saveGraphicsState()
org.apache.pdfbox.pdmodel.PDPatternContentStream:restoreGraphicsState()
org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setStrokingColor(float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setNonStrokingColor(float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:addRect(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:curveTo(float,float,float,float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:curveTo2(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:curveTo1(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:closeAndStroke()
org.apache.pdfbox.pdmodel.PDPatternContentStream:fill()
org.apache.pdfbox.pdmodel.PDPatternContentStream:fillEvenOdd()
org.apache.pdfbox.pdmodel.PDPatternContentStream:fillAndStroke()
org.apache.pdfbox.pdmodel.PDPatternContentStream:fillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDPatternContentStream:closeAndFillAndStroke()
org.apache.pdfbox.pdmodel.PDPatternContentStream:closeAndFillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDPatternContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.PDPatternContentStream:closePath()
org.apache.pdfbox.pdmodel.PDPatternContentStream:clip()
org.apache.pdfbox.pdmodel.PDPatternContentStream:clipEvenOdd()
org.apache.pdfbox.pdmodel.PDPatternContentStream:setLineDashPattern(float[],float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDPatternContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.pdmodel.PDPatternContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDPatternContentStream:endMarkedContent()
org.apache.pdfbox.pdmodel.PDPatternContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.PDPatternContentStream:addComment(java.lang.String)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setCharacterSpacing(float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setWordSpacing(float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setHorizontalScaling(float)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)
org.apache.pdfbox.pdmodel.PDPatternContentStream:setTextRise(float)
org.apache.pdfbox.pdmodel.PDPageTree:<clinit>()
org.apache.pdfbox.pdmodel.PDPageTree:getCOSObject()
org.apache.pdfbox.pdmodel.PDPageTree:insertAfter(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDPageTree:insertBefore(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDPageTree:<init>()
org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:remove()
org.apache.pdfbox.pdmodel.PDPageTree$PageIterator:next()
org.apache.pdfbox.pdmodel.PDPageContentStream:<clinit>()
org.apache.pdfbox.pdmodel.PDPageContentStream:beginText()
org.apache.pdfbox.pdmodel.PDPageContentStream:endText()
org.apache.pdfbox.pdmodel.PDPageContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:showTextWithPositioning(java.lang.Object[])
org.apache.pdfbox.pdmodel.PDPageContentStream:showText(java.lang.String)
org.apache.pdfbox.pdmodel.PDPageContentStream:setLeading(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:newLine()
org.apache.pdfbox.pdmodel.PDPageContentStream:newLineAtOffset(float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setStrokingColor(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setNonStrokingColor(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:addRect(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:curveTo(float,float,float,float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:curveTo2(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:curveTo1(float,float,float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:moveTo(float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:lineTo(float,float)
org.apache.pdfbox.pdmodel.PDPageContentStream:stroke()
org.apache.pdfbox.pdmodel.PDPageContentStream:closeAndStroke()
org.apache.pdfbox.pdmodel.PDPageContentStream:fill()
org.apache.pdfbox.pdmodel.PDPageContentStream:fillEvenOdd()
org.apache.pdfbox.pdmodel.PDPageContentStream:fillAndStroke()
org.apache.pdfbox.pdmodel.PDPageContentStream:fillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDPageContentStream:closeAndFillAndStroke()
org.apache.pdfbox.pdmodel.PDPageContentStream:closeAndFillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDPageContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.PDPageContentStream:closePath()
org.apache.pdfbox.pdmodel.PDPageContentStream:clip()
org.apache.pdfbox.pdmodel.PDPageContentStream:clipEvenOdd()
org.apache.pdfbox.pdmodel.PDPageContentStream:setLineWidth(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setLineJoinStyle(int)
org.apache.pdfbox.pdmodel.PDPageContentStream:setLineCapStyle(int)
org.apache.pdfbox.pdmodel.PDPageContentStream:setLineDashPattern(float[],float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setMiterLimit(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDPageContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.pdmodel.PDPageContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDPageContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDPageContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.PDPageContentStream:addComment(java.lang.String)
org.apache.pdfbox.pdmodel.PDPageContentStream:setCharacterSpacing(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setWordSpacing(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setHorizontalScaling(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)
org.apache.pdfbox.pdmodel.PDPageContentStream:setTextRise(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(float)
org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(double)
org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(int)
org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(byte[])
org.apache.pdfbox.pdmodel.PDPageContentStream:appendRawCommands(java.lang.String)
org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.PDPageContentStream:<init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:<clinit>()
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:valueOf(java.lang.String)
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode:values()
org.apache.pdfbox.pdmodel.PDPage:<clinit>()
org.apache.pdfbox.pdmodel.PDPage:setUserUnit(float)
org.apache.pdfbox.pdmodel.PDPage:getUserUnit()
org.apache.pdfbox.pdmodel.PDPage:setViewports(java.util.List)
org.apache.pdfbox.pdmodel.PDPage:getViewports()
org.apache.pdfbox.pdmodel.PDPage:hashCode()
org.apache.pdfbox.pdmodel.PDPage:equals(java.lang.Object)
org.apache.pdfbox.pdmodel.PDPage:setTransition(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition,float)
org.apache.pdfbox.pdmodel.PDPage:setTransition(org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition)
org.apache.pdfbox.pdmodel.PDPage:getTransition()
org.apache.pdfbox.pdmodel.PDPage:setActions(org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions)
org.apache.pdfbox.pdmodel.PDPage:getActions()
org.apache.pdfbox.pdmodel.PDPage:setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata)
org.apache.pdfbox.pdmodel.PDPage:getMetadata()
org.apache.pdfbox.pdmodel.PDPage:setThreadBeads(java.util.List)
org.apache.pdfbox.pdmodel.PDPage:setContents(java.util.List)
org.apache.pdfbox.pdmodel.PDPage:setArtBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.PDPage:getArtBox()
org.apache.pdfbox.pdmodel.PDPage:setTrimBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.PDPage:getTrimBox()
org.apache.pdfbox.pdmodel.PDPage:setBleedBox(org.apache.pdfbox.pdmodel.common.PDRectangle)
org.apache.pdfbox.pdmodel.PDPage:getBleedBox()
org.apache.pdfbox.pdmodel.PDPage:getBBox()
org.apache.pdfbox.pdmodel.PDPage:getContentsForStreamParsing()
org.apache.pdfbox.pdmodel.PDPage:getContentStreams()
org.apache.pdfbox.pdmodel.PDPage:<init>()
org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode:<init>()
org.apache.pdfbox.pdmodel.PDFormContentStream:beginText()
org.apache.pdfbox.pdmodel.PDFormContentStream:endText()
org.apache.pdfbox.pdmodel.PDFormContentStream:setFont(org.apache.pdfbox.pdmodel.font.PDFont,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:showTextWithPositioning(java.lang.Object[])
org.apache.pdfbox.pdmodel.PDFormContentStream:showText(java.lang.String)
org.apache.pdfbox.pdmodel.PDFormContentStream:setLeading(float)
org.apache.pdfbox.pdmodel.PDFormContentStream:newLine()
org.apache.pdfbox.pdmodel.PDFormContentStream:newLineAtOffset(float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:transform(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDFormContentStream:saveGraphicsState()
org.apache.pdfbox.pdmodel.PDFormContentStream:restoreGraphicsState()
org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setStrokingColor(float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setNonStrokingColor(float)
org.apache.pdfbox.pdmodel.PDFormContentStream:curveTo2(float,float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:curveTo1(float,float,float,float)
org.apache.pdfbox.pdmodel.PDFormContentStream:stroke()
org.apache.pdfbox.pdmodel.PDFormContentStream:closeAndStroke()
org.apache.pdfbox.pdmodel.PDFormContentStream:fillEvenOdd()
org.apache.pdfbox.pdmodel.PDFormContentStream:fillAndStroke()
org.apache.pdfbox.pdmodel.PDFormContentStream:fillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDFormContentStream:closeAndFillAndStroke()
org.apache.pdfbox.pdmodel.PDFormContentStream:closeAndFillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDFormContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.PDFormContentStream:closePath()
org.apache.pdfbox.pdmodel.PDFormContentStream:clip()
org.apache.pdfbox.pdmodel.PDFormContentStream:clipEvenOdd()
org.apache.pdfbox.pdmodel.PDFormContentStream:setLineWidth(float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setLineJoinStyle(int)
org.apache.pdfbox.pdmodel.PDFormContentStream:setLineCapStyle(int)
org.apache.pdfbox.pdmodel.PDFormContentStream:setLineDashPattern(float[],float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setMiterLimit(float)
org.apache.pdfbox.pdmodel.PDFormContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDFormContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.pdmodel.PDFormContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDFormContentStream:endMarkedContent()
org.apache.pdfbox.pdmodel.PDFormContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDFormContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDFormContentStream:setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.PDFormContentStream:addComment(java.lang.String)
org.apache.pdfbox.pdmodel.PDFormContentStream:setCharacterSpacing(float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setWordSpacing(float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setHorizontalScaling(float)
org.apache.pdfbox.pdmodel.PDFormContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)
org.apache.pdfbox.pdmodel.PDFormContentStream:setTextRise(float)
org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode:<init>()
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:setJavascript(org.apache.pdfbox.pdmodel.PDJavascriptNameTreeNode)
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:getJavaScript()
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:setEmbeddedFiles(org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode)
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:getEmbeddedFiles()
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:setDests(org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode)
org.apache.pdfbox.pdmodel.PDDocumentNameDictionary:<init>(org.apache.pdfbox.pdmodel.PDDocumentCatalog)
org.apache.pdfbox.pdmodel.PDDocumentInformation:setTrapped(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:setCustomMetadataValue(java.lang.String,java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getCustomMetadataValue(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getMetadataKeys()
org.apache.pdfbox.pdmodel.PDDocumentInformation:getTrapped()
org.apache.pdfbox.pdmodel.PDDocumentInformation:setModificationDate(java.util.Calendar)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getModificationDate()
org.apache.pdfbox.pdmodel.PDDocumentInformation:setCreationDate(java.util.Calendar)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getCreationDate()
org.apache.pdfbox.pdmodel.PDDocumentInformation:setProducer(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getProducer()
org.apache.pdfbox.pdmodel.PDDocumentInformation:setCreator(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getCreator()
org.apache.pdfbox.pdmodel.PDDocumentInformation:setKeywords(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getKeywords()
org.apache.pdfbox.pdmodel.PDDocumentInformation:setSubject(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getSubject()
org.apache.pdfbox.pdmodel.PDDocumentInformation:setAuthor(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getAuthor()
org.apache.pdfbox.pdmodel.PDDocumentInformation:setTitle(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:getTitle()
org.apache.pdfbox.pdmodel.PDDocumentInformation:getPropertyStringValue(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocumentInformation:<init>()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:<clinit>()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setPageLabels(org.apache.pdfbox.pdmodel.common.PDPageLabels)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getPageLabels()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setURI(org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getURI()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setPageLayout(org.apache.pdfbox.pdmodel.PageLayout)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getPageLayout()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setOutputIntents(java.util.List)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setNames(org.apache.pdfbox.pdmodel.PDDocumentNameDictionary)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setActions(org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getActions()
org.apache.pdfbox.pdmodel.PDDocumentCatalog:setThreads(java.util.List)
org.apache.pdfbox.pdmodel.PDDocumentCatalog:getThreads()
org.apache.pdfbox.pdmodel.PDDocument:<clinit>()
org.apache.pdfbox.pdmodel.PDDocument:getCurrentAccessPermission()
org.apache.pdfbox.pdmodel.PDDocument:protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy)
org.apache.pdfbox.pdmodel.PDDocument:saveIncrementalForExternalSigning(java.io.OutputStream)
org.apache.pdfbox.pdmodel.PDDocument:saveIncremental(java.io.OutputStream,java.util.Set)
org.apache.pdfbox.pdmodel.PDDocument:saveIncremental(java.io.OutputStream)
org.apache.pdfbox.pdmodel.PDDocument:save(java.io.OutputStream)
org.apache.pdfbox.pdmodel.PDDocument:save(java.lang.String)
org.apache.pdfbox.pdmodel.PDDocument:getLastSignatureDictionary()
org.apache.pdfbox.pdmodel.PDDocument:removePage(int)
org.apache.pdfbox.pdmodel.PDDocument:removePage(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.pdmodel.PDDocument:addSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface)
org.apache.pdfbox.pdmodel.PDDocument:addSignature(org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature)
org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode:createChildNode(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode:convertCOSToPD(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode:<init>()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:showTextWithPositioning(java.lang.Object[])
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setLeading(float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:newLine()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setTextMatrix(org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,float,float,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject,org.apache.pdfbox.util.Matrix)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage,float,float,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(float,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setStrokingColor(float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(java.awt.Color)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setNonStrokingColor(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:curveTo2(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:curveTo1(float,float,float,float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:fillEvenOdd()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:fillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:closeAndFillAndStrokeEvenOdd()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:clipEvenOdd()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:beginMarkedContent(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:endMarkedContent()
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setMarkedContentPoint(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setMarkedContentPointWithProperties(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:addComment(java.lang.String)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setCharacterSpacing(float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setWordSpacing(float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setHorizontalScaling(float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:setTextRise(float)
org.apache.pdfbox.pdmodel.PDAppearanceContentStream:<init>(org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)
org.apache.pdfbox.pdmodel.PDAbstractContentStream:<clinit>()
org.apache.pdfbox.pdmodel.PDAbstractContentStream:setMaximumFractionDigits(int)
org.apache.pdfbox.pdmodel.DefaultResourceCacheCreateImpl:create()
org.apache.pdfbox.pdmodel.DefaultResourceCache:removeXObject(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.PDXObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:getXObject(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:removeProperties(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList)
org.apache.pdfbox.pdmodel.DefaultResourceCache:getProperties(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:removePattern(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern)
org.apache.pdfbox.pdmodel.DefaultResourceCache:getPattern(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:removeShading(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.shading.PDShading)
org.apache.pdfbox.pdmodel.DefaultResourceCache:getShading(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:removeExtState(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState)
org.apache.pdfbox.pdmodel.DefaultResourceCache:getExtGState(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:removeColorSpace(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.pdmodel.DefaultResourceCache:getColorSpace(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:removeFont(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.font.PDFont)
org.apache.pdfbox.pdmodel.DefaultResourceCache:getFont(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdmodel.DefaultResourceCache:<init>()
org.apache.pdfbox.pdfwriter.compress.CompressParameters:<clinit>()
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:<clinit>()
org.apache.pdfbox.pdfwriter.compress.COSWriterObjectStream:writeCOSDictionary(java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeToken(org.apache.pdfbox.contentstream.operator.Operator)
org.apache.pdfbox.pdfwriter.ContentStreamWriter:writeToken(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.pdfwriter.COSWriter:<clinit>()
org.apache.pdfbox.pdfwriter.COSWriter:visitFromString(org.apache.pdfbox.cos.COSString)
org.apache.pdfbox.pdfwriter.COSWriter:visitFromStream(org.apache.pdfbox.cos.COSStream)
org.apache.pdfbox.pdfwriter.COSWriter:visitFromNull(org.apache.pdfbox.cos.COSNull)
org.apache.pdfbox.pdfwriter.COSWriter:visitFromName(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.pdfwriter.COSWriter:visitFromInt(org.apache.pdfbox.cos.COSInteger)
org.apache.pdfbox.pdfwriter.COSWriter:visitFromFloat(org.apache.pdfbox.cos.COSFloat)
org.apache.pdfbox.pdfwriter.COSWriter:visitFromDocument(org.apache.pdfbox.cos.COSDocument)
org.apache.pdfbox.pdfwriter.COSWriter:visitFromBoolean(org.apache.pdfbox.cos.COSBoolean)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:writeLF()
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:write(int)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream:write(byte[],int,int)
org.apache.pdfbox.pdfparser.xref.XReferenceType:<clinit>()
org.apache.pdfbox.pdfparser.xref.XReferenceType:valueOf(java.lang.String)
org.apache.pdfbox.pdfparser.xref.XReferenceType:values()
org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:toString()
org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getThirdColumnValue()
org.apache.pdfbox.pdfparser.xref.ObjectStreamXReference:getSecondColumnValue()
org.apache.pdfbox.pdfparser.xref.NormalXReference:toString()
org.apache.pdfbox.pdfparser.xref.NormalXReference:getThirdColumnValue()
org.apache.pdfbox.pdfparser.xref.NormalXReference:getSecondColumnValue()
org.apache.pdfbox.pdfparser.xref.FreeXReference:<clinit>()
org.apache.pdfbox.pdfparser.xref.FreeXReference:toString()
org.apache.pdfbox.pdfparser.xref.AbstractXReference:compareTo(java.lang.Object)
org.apache.pdfbox.pdfparser.xref.AbstractXReference:getFirstColumnValue()
org.apache.pdfbox.pdfparser.XrefTrailerResolver:<clinit>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver:reset()
org.apache.pdfbox.pdfparser.XrefTrailerResolver:getContainedObjectNumbers(int)
org.apache.pdfbox.pdfparser.XrefTrailerResolver:getTrailerCount()
org.apache.pdfbox.pdfparser.XrefTrailerResolver:getLastTrailer()
org.apache.pdfbox.pdfparser.XrefTrailerResolver:getFirstTrailer()
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType:<clinit>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType:valueOf(java.lang.String)
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType:values()
org.apache.pdfbox.pdfparser.XrefParser:<clinit>()
org.apache.pdfbox.pdfparser.PDFStreamParser:<clinit>()
org.apache.pdfbox.pdfparser.PDFParser:<clinit>()
org.apache.pdfbox.pdfparser.PDFParser:load(java.io.File,java.lang.String)
org.apache.pdfbox.pdfparser.PDFParser:load(java.io.File)
org.apache.pdfbox.pdfparser.PDFObjectStreamParser:parseObject(long)
org.apache.pdfbox.pdfparser.COSParser:<clinit>()
java.util.Map:putIfAbsent(java.lang.Object,java.lang.Object)
org.apache.pdfbox.pdfparser.COSParser:getAccessPermission()
org.apache.pdfbox.pdfparser.COSParser:getEncryption()
org.apache.pdfbox.pdfparser.COSParser:parseFDFHeader()
org.apache.pdfbox.pdfparser.COSParser:parsePDFHeader()
org.apache.pdfbox.pdfparser.COSParser:checkPages(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.pdfparser.COSParser:createRandomAccessReadView(long,long)
org.apache.pdfbox.pdfparser.COSParser:dereferenceCOSObject(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.pdfparser.COSParser:setLenient(boolean)
org.apache.pdfbox.pdfparser.COSParser:retrieveTrailer()
org.apache.pdfbox.pdfparser.BruteForceParser:<clinit>()
java.lang.Long:equals(java.lang.Object)
org.apache.pdfbox.pdfparser.BaseParser:<clinit>()
java.nio.charset.Charset:name()
org.apache.pdfbox.pdfparser.BaseParser:readGenerationNumber()
org.apache.pdfbox.pdfparser.BaseParser:readObjectNumber()
org.apache.pdfbox.pdfparser.BaseParser:isSpace()
org.apache.pdfbox.pdfparser.BaseParser:isWhitespace()
org.apache.pdfbox.pdfparser.BaseParser:isEOF()
org.apache.pdfbox.pdfparser.BaseParser:readLine()
org.apache.pdfbox.pdfparser.BaseParser:readString(int)
org.apache.pdfbox.pdfparser.BaseParser:parseCOSArray()
org.apache.pdfbox.pdfparser.BaseParser:skipLinebreak()
org.apache.pdfbox.pdfparser.BaseParser:skipWhiteSpaces()
org.apache.pdfbox.multipdf.Splitter:<clinit>()
org.apache.pdfbox.multipdf.Splitter$KCloner:createDictionaryClone(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.PageExtractor:extract()
org.apache.pdfbox.multipdf.PageExtractor:<init>(org.apache.pdfbox.pdmodel.PDDocument,int,int)
org.apache.pdfbox.multipdf.PageExtractor:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.multipdf.PDFMergerUtility:<clinit>()
org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation:setStructParent(int)
org.apache.pdfbox.multipdf.PDFMergerUtility:mergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.multipdf.PDFMergerUtility:addSources(java.util.List)
org.apache.pdfbox.multipdf.PDFMergerUtility:addSource(org.apache.pdfbox.io.RandomAccessRead)
org.apache.pdfbox.multipdf.PDFMergerUtility:addSource(java.lang.String)
org.apache.pdfbox.multipdf.PDFMergerUtility:<init>()
org.apache.pdfbox.multipdf.PDFMergerUtility$DocumentMergeMode:<clinit>()
org.apache.pdfbox.multipdf.PDFMergerUtility$DocumentMergeMode:valueOf(java.lang.String)
org.apache.pdfbox.multipdf.PDFMergerUtility$DocumentMergeMode:values()
org.apache.pdfbox.multipdf.PDFMergerUtility$AcroFormMergeMode:<clinit>()
org.apache.pdfbox.multipdf.PDFMergerUtility$AcroFormMergeMode:valueOf(java.lang.String)
org.apache.pdfbox.multipdf.PDFMergerUtility$AcroFormMergeMode:values()
org.apache.pdfbox.multipdf.PDFCloneUtility:<clinit>()
org.apache.pdfbox.multipdf.PDFCloneUtility:cloneCOSDictionary(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.multipdf.PDFCloneUtility:cloneCOSBaseForNewDocument(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.multipdf.Overlay:close()
org.apache.pdfbox.multipdf.Overlay:overlayDocuments(java.util.Map)
org.apache.pdfbox.multipdf.Overlay:overlay(java.util.Map)
org.apache.pdfbox.multipdf.Overlay:<init>()
org.apache.pdfbox.multipdf.Overlay$Position:<clinit>()
org.apache.pdfbox.multipdf.Overlay$Position:valueOf(java.lang.String)
org.apache.pdfbox.multipdf.Overlay$Position:values()
org.apache.pdfbox.multipdf.LayerUtility:<clinit>()
org.apache.pdfbox.multipdf.LayerUtility:appendFormAsLayer(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject,java.awt.geom.AffineTransform,java.lang.String)
org.apache.pdfbox.multipdf.LayerUtility:importPageAsForm(org.apache.pdfbox.pdmodel.PDDocument,int)
org.apache.pdfbox.multipdf.LayerUtility:wrapInSaveRestore(org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.multipdf.LayerUtility:<init>(org.apache.pdfbox.pdmodel.PDDocument)
org.apache.pdfbox.filter.RunLengthDecodeFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.RunLengthDecodeFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.Predictor:<init>()
org.apache.pdfbox.filter.Predictor$PredictorOutputStream:write(int)
org.apache.pdfbox.filter.Predictor$PredictorOutputStream:flush()
org.apache.pdfbox.filter.Predictor$PredictorOutputStream:write(byte[])
org.apache.pdfbox.filter.LZWFilter:<clinit>()
org.apache.pdfbox.filter.LZWFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.LZWFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.JPXFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.JPXFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.JBIG2Filter:<clinit>()
org.apache.pdfbox.filter.JBIG2Filter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.JBIG2Filter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.FlateFilterDecoderStream:<clinit>()
org.apache.pdfbox.filter.FlateFilterDecoderStream:reset()
org.apache.pdfbox.filter.FlateFilterDecoderStream:read(byte[],int,int)
org.apache.pdfbox.filter.FlateFilterDecoderStream:read()
org.apache.pdfbox.filter.FlateFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.FlateFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.FilterFactory:<clinit>()
org.apache.pdfbox.filter.FilterFactory:getAllFilters()
org.apache.pdfbox.filter.Filter:<clinit>()
org.apache.pdfbox.filter.Filter:findImageReader(java.lang.String,java.lang.String)
org.apache.pdfbox.filter.Filter:getDecodeParams(org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.DecodeResult:<init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace)
org.apache.pdfbox.filter.DecodeOptions:<clinit>()
org.apache.pdfbox.filter.DecodeOptions:<init>(int,int,int,int)
org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSubsamplingOffsetY(int)
org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSubsamplingOffsetX(int)
org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSubsamplingY(int)
org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSubsamplingX(int)
org.apache.pdfbox.filter.DecodeOptions$FinalDecodeOptions:setSourceRegion(java.awt.Rectangle)
org.apache.pdfbox.filter.DCTFilter:<clinit>()
org.apache.pdfbox.filter.DCTFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.DCTFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.CryptFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.CryptFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.CCITTFaxFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.CCITTFaxFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.CCITTFaxEncoderStream:<clinit>()
org.apache.pdfbox.filter.CCITTFaxEncoderStream:close()
org.apache.pdfbox.filter.CCITTFaxEncoderStream:flush()
org.apache.pdfbox.filter.CCITTFaxEncoderStream:write(int)
org.apache.pdfbox.filter.CCITTFaxDecoderStream:<clinit>()
org.apache.pdfbox.filter.CCITTFaxDecoderStream:reset()
org.apache.pdfbox.filter.CCITTFaxDecoderStream:skip(long)
org.apache.pdfbox.filter.CCITTFaxDecoderStream:read()
org.apache.pdfbox.filter.CCITTFaxDecoderStream$Node:toString()
org.apache.pdfbox.filter.ASCIIHexFilter:<clinit>()
org.apache.pdfbox.filter.ASCIIHexFilter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.ASCIIHexFilter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.filter.ASCII85OutputStream:write(int)
org.apache.pdfbox.filter.ASCII85OutputStream:setTerminator(char)
org.apache.pdfbox.filter.ASCII85InputStream:reset()
org.apache.pdfbox.filter.ASCII85InputStream:read(byte[],int,int)
org.apache.pdfbox.filter.ASCII85Filter:encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.filter.ASCII85Filter:decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)
org.apache.pdfbox.cos.UnmodifiableCOSDictionary:setNeedToBeUpdated(boolean)
org.apache.pdfbox.cos.PDFDocEncoding:<clinit>()
org.apache.pdfbox.cos.PDFDocEncoding:<init>()
org.apache.pdfbox.cos.COSUpdateInfo:toIncrement()
org.apache.pdfbox.cos.COSUpdateInfo:setNeedToBeUpdated(boolean)
org.apache.pdfbox.cos.COSString:<clinit>()
org.apache.pdfbox.cos.COSString:toString()
org.apache.pdfbox.cos.COSString:hashCode()
org.apache.pdfbox.cos.COSString:equals(java.lang.Object)
org.apache.pdfbox.cos.COSString:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.cos.COSString:getASCII()
org.apache.pdfbox.cos.COSStream:<clinit>()
org.apache.pdfbox.cos.COSStream:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.cos.COSStream$2:close()
org.apache.pdfbox.cos.COSStream$2:write(byte[],int,int)
org.apache.pdfbox.cos.COSStream$1:close()
org.apache.pdfbox.cos.COSStream$1:write(byte[],int,int)
org.apache.pdfbox.cos.COSOutputStream:close()
org.apache.pdfbox.cos.COSOutputStream:flush()
org.apache.pdfbox.cos.COSOutputStream:write(int)
org.apache.pdfbox.cos.COSOutputStream:write(byte[])
org.apache.pdfbox.cos.COSObjectKey:<clinit>()
org.apache.pdfbox.cos.COSObjectKey:compareTo(java.lang.Object)
org.apache.pdfbox.cos.COSObjectKey:toString()
org.apache.pdfbox.cos.COSObjectKey:hashCode()
org.apache.pdfbox.cos.COSObject:<clinit>()
org.apache.pdfbox.cos.COSObject:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.cos.COSObject:toString()
org.apache.pdfbox.cos.COSObject:<init>(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.ICOSParser)
org.apache.pdfbox.cos.COSNull:<clinit>()
org.apache.pdfbox.cos.COSName:<clinit>()
org.apache.pdfbox.cos.COSName:compareTo(java.lang.Object)
org.apache.pdfbox.cos.COSName:isEmpty()
org.apache.pdfbox.cos.COSName:hashCode()
org.apache.pdfbox.cos.COSName:toString()
org.apache.pdfbox.cos.COSInteger:<clinit>()
org.apache.pdfbox.cos.COSInteger:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.cos.COSInteger:toString()
org.apache.pdfbox.cos.COSInteger:equals(java.lang.Object)
org.apache.pdfbox.cos.COSInputStream:create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream)
org.apache.pdfbox.cos.COSIncrement:iterator()
org.apache.pdfbox.cos.COSIncrement:collect(org.apache.pdfbox.cos.COSObject)
org.apache.pdfbox.cos.COSIncrement:collect(org.apache.pdfbox.cos.COSDictionary)
org.apache.pdfbox.cos.COSFloat:<clinit>()
org.apache.pdfbox.cos.COSFloat:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.cos.COSFloat:toString()
org.apache.pdfbox.cos.COSFloat:hashCode()
org.apache.pdfbox.cos.COSFloat:equals(java.lang.Object)
org.apache.pdfbox.cos.COSDocument:<clinit>()
org.apache.pdfbox.cos.COSDocument:getObjectsByType(org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSDocument:getLinearizedDictionary()
org.apache.pdfbox.cos.COSDocument:<init>(org.apache.pdfbox.cos.ICOSParser)
org.apache.pdfbox.cos.COSDictionary:<clinit>()
org.apache.pdfbox.cos.COSDictionary:toString()
org.apache.pdfbox.cos.COSDictionary:getObjectFromPath(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:getItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSDictionary:getItem(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:getLong(java.lang.String,long)
org.apache.pdfbox.cos.COSDictionary:getLong(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSDictionary:getEmbeddedInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSDictionary:getEmbeddedDate(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)
org.apache.pdfbox.cos.COSDictionary:getDate(java.lang.String,java.util.Calendar)
org.apache.pdfbox.cos.COSDictionary:getDate(java.lang.String)
org.apache.pdfbox.cos.COSDictionary:setEmbeddedInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)
org.apache.pdfbox.cos.COSDictionary:setLong(java.lang.String,long)
org.apache.pdfbox.cos.COSDictionary:setEmbeddedDate(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,java.util.Calendar)
org.apache.pdfbox.cos.COSDictionary:setDate(java.lang.String,java.util.Calendar)
org.apache.pdfbox.cos.COSBoolean:<clinit>()
org.apache.pdfbox.cos.COSBoolean:toString()
org.apache.pdfbox.cos.COSBoolean:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.cos.COSBoolean:getBoolean(java.lang.Boolean)
java.lang.Integer:longValue()
org.apache.pdfbox.cos.COSArray:getIndirectObjectKeys(java.util.Collection)
org.apache.pdfbox.cos.COSArray:setFloatArray(float[])
org.apache.pdfbox.cos.COSArray:accept(org.apache.pdfbox.cos.ICOSVisitor)
org.apache.pdfbox.cos.COSArray:indexOf(org.apache.pdfbox.cos.COSBase)
org.apache.pdfbox.cos.COSArray:retainAll(java.util.Collection)
org.apache.pdfbox.cos.COSArray:removeAll(java.util.Collection)
org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.ShowTextLine:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.ShowText:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.SetWordSpacing:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.SetTextRise:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.SetTextLeading:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.SetFontAndSize:<clinit>()
org.apache.pdfbox.contentstream.operator.text.SetFontAndSize:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.SetCharSpacing:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.NextLine:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.MoveText:<clinit>()
org.apache.pdfbox.contentstream.operator.text.MoveText:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.EndText:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.text.BeginText:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetMatrix:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetLineWidth:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetLineMiterLimit:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetLineJoinStyle:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern:<clinit>()
org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetLineCapStyle:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters:<clinit>()
org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.SetFlatness:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.Save:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.Restore:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.state.Concatenate:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPointWithProperties:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.markedcontent.MarkedContentPoint:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.markedcontent.EndMarkedContentSequence:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.markedcontent.DrawObject:<clinit>()
org.apache.pdfbox.contentstream.operator.markedcontent.DrawObject:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequenceWithProperties:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.markedcontent.BeginMarkedContentSequence:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.StrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.ShadingFill:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.MoveTo:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.LineTo:<clinit>()
org.apache.pdfbox.contentstream.operator.graphics.LineTo:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor:getGraphicsContext()
org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.EndPath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.DrawObject:<clinit>()
org.apache.pdfbox.contentstream.operator.graphics.DrawObject:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint:<clinit>()
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateFinalPoint:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.CurveTo:<clinit>()
org.apache.pdfbox.contentstream.operator.graphics.CurveTo:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.ClosePath:<clinit>()
org.apache.pdfbox.contentstream.operator.graphics.ClosePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.CloseFillNonZeroAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.CloseFillEvenOddAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.CloseAndStrokePath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.ClipNonZeroRule:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.ClipEvenOddRule:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.graphics.AppendRectangleToPath:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceRGBColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceGrayColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceCMYKColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:getColorSpace()
org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:setColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.contentstream.operator.color.SetStrokingColor:getColor()
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceRGBColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceGrayColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceCMYKColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:getColorSpace()
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:setColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor)
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor:getColor()
org.apache.pdfbox.contentstream.operator.color.SetColor:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.operator.OperatorProcessor:checkArrayTypesClass(java.util.List,java.lang.Class)
org.apache.pdfbox.contentstream.operator.OperatorName:<init>()
org.apache.pdfbox.contentstream.operator.Operator:<clinit>()
org.apache.pdfbox.contentstream.operator.Operator:toString()
org.apache.pdfbox.contentstream.operator.DrawObject:<clinit>()
org.apache.pdfbox.contentstream.operator.DrawObject:process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)
org.apache.pdfbox.contentstream.PDFStreamEngine:<clinit>()
org.apache.pdfbox.contentstream.PDFStreamEngine:transformWidth(float)
org.apache.pdfbox.contentstream.PDFStreamEngine:transformedPoint(float,float)
org.apache.pdfbox.contentstream.PDFStreamEngine:processChildStream(org.apache.pdfbox.contentstream.PDContentStream,org.apache.pdfbox.pdmodel.PDPage)
org.apache.pdfbox.contentstream.PDFStreamEngine:showAnnotation(org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation)
org.apache.pdfbox.contentstream.PDFStreamEngine:processTilingPattern(org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern,org.apache.pdfbox.pdmodel.graphics.color.PDColor,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)
org.apache.pdfbox.contentstream.PDFStreamEngine:processSoftMask(org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup)
org.apache.pdfbox.contentstream.PDFStreamEngine:addOperator(org.apache.pdfbox.contentstream.operator.OperatorProcessor)
org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String)
org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,java.lang.String)
org.apache.pdfbox.Loader:loadPDF(org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.Loader:loadPDF(java.io.File,java.lang.String,java.io.InputStream,java.lang.String)
org.apache.pdfbox.Loader:loadPDF(java.io.File,org.apache.pdfbox.io.RandomAccessStreamCache$StreamCacheCreateFunction)
org.apache.pdfbox.Loader:loadPDF(byte[])
org.apache.pdfbox.Loader:loadXFDF(java.io.File)
org.apache.pdfbox.Loader:loadXFDF(java.lang.String)
org.apache.pdfbox.Loader:loadFDF(java.io.InputStream)
org.apache.pdfbox.Loader:loadFDF(java.lang.String)
org.apache.pdfbox.Loader:<init>()
