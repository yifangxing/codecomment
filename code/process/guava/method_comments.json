{
  "com.google.common.collect.SingletonImmutableBiMap:createKeySet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:createKeySet()" : null,
  "com.google.common.collect.EmptyContiguousSet:indexOf(java.lang.Object)" : null,
  "com.google.common.math.BigIntegerMath:floorPowerOfTwo(java.math.BigInteger)" : "* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code\n   * BigInteger.valueOf(2).pow(log2(x, FLOOR))}.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @since 20.0",
  "com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object)" : "* Returns an immutable set containing the given elements, minus duplicates, in the order each was\n   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n   * the first are ignored.",
  "com.google.common.primitives.Shorts$ShortConverter:doForward(java.lang.String)" : null,
  "com.google.common.base.FunctionalEquivalence:equals(java.lang.Object)" : null,
  "com.google.common.collect.DiscreteDomain$IntegerDomain:distance(java.lang.Integer,java.lang.Integer)" : null,
  "com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String)" : "* Returns the unsigned {@code byte} value represented by the given decimal string.\n   *\n   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}\n   *     value\n   * @throws NullPointerException if {@code string} is null (in contrast to {@link\n   *     Byte#parseByte(String)})\n   * @since 13.0",
  "com.google.common.base.Absent:isPresent()" : null,
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(java.util.Collection)" : null,
  "com.google.common.collect.EnumMultiset$Itr:next()" : null,
  "com.google.common.eventbus.SubscriberRegistry:getSubscribersForTesting(java.lang.Class)" : null,
  "com.google.common.collect.Multimaps:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)" : "* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the\n   * specified supplier. The keys and values of the entries are the result of applying the provided\n   * mapping functions to the input elements, accumulated in the encounter order of the stream.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP =\n   *     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n   *         .collect(\n   *             toMultimap(\n   *                  str -> str.charAt(0),\n   *                  str -> str.substring(1),\n   *                  MultimapBuilder.treeKeys().arrayListValues()::build));\n   *\n   * // is equivalent to\n   *\n   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP;\n   *\n   * static {\n   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build();\n   *     FIRST_LETTER_MULTIMAP.put('b', \"anana\");\n   *     FIRST_LETTER_MULTIMAP.put('a', \"pple\");\n   *     FIRST_LETTER_MULTIMAP.put('a', \"sparagus\");\n   *     FIRST_LETTER_MULTIMAP.put('c', \"arrot\");\n   *     FIRST_LETTER_MULTIMAP.put('c', \"herry\");\n   * }\n   * }\n   *\n   * <p>To collect to an {@link ImmutableMultimap}, use either {@link\n   * ImmutableSetMultimap#toImmutableSetMultimap} or {@link\n   * ImmutableListMultimap#toImmutableListMultimap}.\n   *\n   * @since 21.0",
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:getSuccessorInMultimap()" : null,
  "com.google.common.collect.Iterables:filter(java.lang.Iterable,com.google.common.base.Predicate)" : "* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate\n   * {@code retainIfTrue}. The returned iterable's iterator does not support {@code remove()}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter}.",
  "com.google.common.util.concurrent.AtomicDoubleArray:addAndGet(int,double)" : "* Atomically adds the given value to the element at index {@code i}.\n   *\n   * @param i the index\n   * @param delta the value to add\n   * @return the updated value",
  "com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray()" : null,
  "com.google.common.hash.Hashing:hmacSha256(java.security.Key)" : "* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the\n   * SHA-256 (256 hash bits) hash function and the given secret key.\n   *\n   * @param key the secret key\n   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC\n   * @since 20.0",
  "com.google.common.cache.LocalCache$Segment:recordLockedRead(com.google.common.cache.ReferenceEntry,long)" : "* Updates the eviction metadata that {@code entry} was just read. This currently amounts to\n     * adding {@code entry} to relevant eviction lists.\n     *\n     * <p>Note: this method should only be called under lock, as it directly manipulates the\n     * eviction queues. Unlocked reads should use {@link #recordRead}.",
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:entrySet()" : null,
  "com.google.common.collect.Tables$AbstractCell:hashCode()" : null,
  "com.google.common.graph.UndirectedGraphConnections:removePredecessor(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$HashIterator:nextEntry()" : null,
  "com.google.common.collect.Multisets$ImmutableEntry:getElement()" : null,
  "com.google.common.io.Resources:asCharSource(java.net.URL,java.nio.charset.Charset)" : "* Returns a {@link CharSource} that reads from the given URL using the given character set.\n   *\n   * @since 14.0",
  "com.google.common.collect.Queues:newLinkedBlockingQueue(java.lang.Iterable)" : "* Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, containing\n   * the elements of the specified iterable, in the order they are returned by the iterable's\n   * iterator.\n   *\n   * @param elements the elements that the queue should contain, in order\n   * @return a new {@code LinkedBlockingQueue} containing those elements",
  "com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[])" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:lowerKey(java.lang.Object)" : null,
  "com.google.common.hash.Hasher:putLong(long)" : null,
  "com.google.common.collect.CompactHashing:maskCombine(int,int,int)" : "Returns a new value combining the prefix and suffix using the given mask.",
  "com.google.common.io.PatternFilenameFilter:accept(java.io.File,java.lang.String)" : null,
  "com.google.common.collect.Multimaps$Entries:clear()" : null,
  "com.google.common.collect.ImmutableSortedSet:last()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:next()" : null,
  "com.google.common.collect.HashMultimap:create(int,int)" : "* Constructs an empty {@code HashMultimap} with enough capacity to hold the specified numbers of\n   * keys and values without rehashing.\n   *\n   * <p>You may also consider the equivalent {@code\n   * MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()}, which\n   * provides more control over the underlying data structure.\n   *\n   * @param expectedKeys the expected number of distinct keys\n   * @param expectedValuesPerKey the expected average number of values per key\n   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is\n   *     negative",
  "com.google.common.graph.Graphs:checkNonNegative(int)" : null,
  "com.google.common.cache.LocalCache$StrongValueReference:get()" : null,
  "com.google.common.io.Files:toString(java.io.File,java.nio.charset.Charset)" : "* Reads all characters from a file into a {@link String}, using the given character set.\n   *\n   * @param file the file to read from\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @return a string containing all the characters from the file\n   * @throws IOException if an I/O error occurs\n   * @deprecated Prefer {@code asCharSource(file, charset).read()}.",
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added\n   * @since 31.0",
  "com.google.common.base.Joiner$2:useForNull(java.lang.String)" : "* Returns a joiner with the same behavior as this one, except automatically substituting {@code\n   * nullText} for any provided null elements.",
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:containsKey(java.lang.Object)" : null,
  "com.google.common.base.Ascii:<init>()" : null,
  "com.google.common.collect.CompactLinkedHashMap:createWithExpectedSize(int)" : "* Creates a {@code CompactLinkedHashMap} instance, with a high enough \"initial capacity\" that it\n   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.\n   *\n   * @param expectedSize the number of elements you expect to add to the returned set\n   * @return a new, empty {@code CompactLinkedHashMap} with enough capacity to hold {@code\n   *     expectedSize} elements without resizing\n   * @throws IllegalArgumentException if {@code expectedSize} is negative",
  "com.google.common.reflect.Types$ParameterizedTypeImpl:toString()" : null,
  "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:hasNext()" : null,
  "com.google.common.collect.Ordering:binarySearch(java.util.List,java.lang.Object)" : "* {@link Collections#binarySearch(List, Object, Comparator) Searches} {@code sortedList} for\n   * {@code key} using the binary search algorithm. The list must be sorted using this ordering.\n   *\n   * @param sortedList the list to be searched\n   * @param key the key to be searched for\n   * @deprecated Use {@link Collections#binarySearch(List, Object, Comparator)} directly.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:getNext()" : null,
  "com.google.common.util.concurrent.AbstractFuture$Listener:<init>()" : null,
  "com.google.common.base.Platform:stringIsNullOrEmpty(java.lang.String)" : null,
  "com.google.common.math.Quantiles:checkIndex(int,int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:tailSet(java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap:createKeySet()" : null,
  "com.google.common.util.concurrent.AggregateFuture:decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection)" : null,
  "com.google.common.base.Functions$ForMapWithDefault:toString()" : null,
  "com.google.common.hash.Fingerprint2011:hashLength33To64(byte[],int,int)" : null,
  "com.google.common.collect.TreeRangeMap$1:clear()" : null,
  "com.google.common.primitives.Doubles:ensureCapacity(double[],int,int)" : "* Returns an array containing the same values as {@code array}, but guaranteed to be of a\n   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n   *\n   * @param array the source array\n   * @param minLength the minimum length the returned array must guarantee\n   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n   *     minLength}",
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:floor(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedSet:ceiling(java.lang.Object)" : "* @since 12.0",
  "com.google.common.graph.ImmutableGraph:incidentEdgeOrder()" : null,
  "com.google.common.collect.TreeRangeSet$Complement:add(com.google.common.collect.Range)" : null,
  "com.google.common.collect.Maps:immutableEnumMap(java.util.Map)" : "* Returns an immutable map instance containing the given entries. Internally, the returned map\n   * will be backed by an {@link EnumMap}.\n   *\n   * <p>The iteration order of the returned map follows the enum's iteration order, not the order in\n   * which the elements appear in the given map.\n   *\n   * @param map the map to make an immutable copy of\n   * @return an immutable map containing those entries\n   * @since 14.0",
  "com.google.common.collect.SortedLists$KeyPresentBehavior$3:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)" : null,
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:<init>()" : "Constructs an instance with all counts initialized to zero.",
  "com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long)" : "* Constructs a graph with the properties specified in {@code builder}, initialized with the given\n   * node map.",
  "com.google.common.collect.ContiguousSet:<init>(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:<init>(java.util.concurrent.ExecutorService)" : null,
  "com.google.common.collect.ImmutableRangeSet:copyOf(java.lang.Iterable)" : "* Returns an {@code ImmutableRangeSet} containing each of the specified disjoint ranges.\n   * Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and\n   * will be merged.\n   *\n   * @throws IllegalArgumentException if any ranges overlap or are empty\n   * @since 21.0",
  "com.google.common.hash.HashCode$IntHashCode:asBytes()" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:<init>(com.google.common.cache.LocalCache)" : null,
  "com.google.common.collect.Maps$DescendingMap:headMap(java.lang.Object,boolean)" : null,
  "com.google.common.util.concurrent.RateLimiter:canAcquire(long,long)" : null,
  "com.google.common.base.Converter$ConverterComposition:doForward(java.lang.Object)" : null,
  "com.google.common.base.Enums:stringConverter(java.lang.Class)" : "* Returns a serializable converter that converts between strings and {@code enum} values of type\n   * {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The\n   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of any\n   * enum constant in the specified enum.\n   *\n   * @since 16.0",
  "com.google.common.util.concurrent.AbstractService:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.FilteredMultimapValues:contains(java.lang.Object)" : null,
  "com.google.common.io.CharSource:asByteSource(java.nio.charset.Charset)" : "* Returns a {@link ByteSource} view of this char source that encodes chars read from this source\n   * as bytes using the given {@link Charset}.\n   *\n   * <p>If {@link ByteSource#asCharSource} is called on the returned source with the same charset,\n   * the default implementation of this method will ensure that the original {@code CharSource} is\n   * returned, rather than round-trip encoding. Subclasses that override this method should behave\n   * the same way.\n   *\n   * @since 20.0",
  "com.google.common.collect.TreeRangeMap:putAll(com.google.common.collect.RangeMap)" : null,
  "com.google.common.collect.StandardTable$CellIterator:next()" : null,
  "com.google.common.io.CharStreams:toString(java.lang.Readable)" : "* Reads all characters from a {@link Readable} object into a {@link String}. Does not close the\n   * {@code Readable}.\n   *\n   * @param r the object to read from\n   * @return a string containing all the characters\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.ImmutableSortedSet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:keySet()" : null,
  "com.google.common.io.ByteStreams:createBuffer()" : "Creates a new byte array for buffering reads or writes.",
  "com.google.common.collect.Ordering:from(com.google.common.collect.Ordering)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this",
  "com.google.common.collect.TableCollectors:<init>()" : null,
  "com.google.common.primitives.Booleans:hashCode(boolean)" : "* Returns a hash code for {@code value}; obsolete alternative to {@link\n   * Boolean#hashCode(boolean)}.\n   *\n   * @param value a primitive {@code boolean} value\n   * @return a hash code for the value",
  "com.google.common.util.concurrent.RateLimiter:create(double,java.time.Duration)" : "* Creates a {@code RateLimiter} with the specified stable throughput, given as \"permits per\n   * second\" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,\n   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum\n   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,\n   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it\n   * will gradually return to its \"cold\" state, i.e. it will go through the same warming up process\n   * as when it was first created.\n   *\n   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually\n   * fulfills the requests (e.g., a remote server) needs \"warmup\" time, rather than being\n   * immediately accessed at the stable (maximum) rate.\n   *\n   * <p>The returned {@code RateLimiter} starts in a \"cold\" state (i.e. the warmup period will\n   * follow), and if it is left unused for long enough, it will return to that state.\n   *\n   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many\n   *     permits become available per second\n   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,\n   *     before reaching its stable (maximum) rate\n   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code\n   *     warmupPeriod} is negative\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.AbstractMultiset$EntrySet:size()" : null,
  "com.google.common.collect.ImmutableSortedMap:orderedBy(java.util.Comparator)" : "* Returns a builder that creates immutable sorted maps with an explicit comparator. If the\n   * comparator has a more general type than the map's keys, such as creating a {@code\n   * SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder}\n   * constructor instead.\n   *\n   * @throws NullPointerException if {@code comparator} is null",
  "com.google.common.collect.ImmutableMapEntry:createEntryArray(int)" : "* Creates an {@code ImmutableMapEntry} array to hold parameterized entries. The result must never\n   * be upcast back to ImmutableMapEntry[] (or Object[], etc.), or allowed to escape the class.\n   *\n   * <p>The returned array has all its elements set to their initial null values. However, we don't\n   * declare it as {@code @Nullable ImmutableMapEntry[]} because our checker doesn't require newly\n   * created arrays to have a {@code @Nullable} element type even when they're created directly with\n   * {@code new ImmutableMapEntry[...]}, so it seems silly to insist on that only here.",
  "com.google.common.reflect.TypeResolver$WildcardCapturer:captureNullable(java.lang.reflect.Type)" : null,
  "com.google.common.collect.Serialization:populateMap(java.util.Map,java.io.ObjectInputStream)" : "* Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap}\n   * for the data format.",
  "com.google.common.collect.Tables:newCustomTable(java.util.Map,com.google.common.base.Supplier)" : "* Creates a table that uses the specified backing map and factory. It can generate a table based\n   * on arbitrary {@link Map} classes.\n   *\n   * <p>The {@code factory}-generated and {@code backingMap} classes determine the table iteration\n   * order. However, the table's {@code row()} method returns instances of a different class than\n   * {@code factory.get()} does.\n   *\n   * <p>Call this method only when the simpler factory methods in classes like {@link\n   * HashBasedTable} and {@link TreeBasedTable} won't suffice.\n   *\n   * <p>The views returned by the {@code Table} methods {@link Table#column}, {@link\n   * Table#columnKeySet}, and {@link Table#columnMap} have iterators that don't support {@code\n   * remove()}. Otherwise, all optional operations are supported. Null row keys, columns keys, and\n   * values are not supported.\n   *\n   * <p>Lookups by row key are often faster than lookups by column key, because the data is stored\n   * in a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still\n   * runs quickly, since the row key is provided. However, {@code column(columnKey).size()} takes\n   * longer, since an iteration across all row keys occurs.\n   *\n   * <p>Note that this implementation is not synchronized. If multiple threads access this table\n   * concurrently and one of the threads modifies the table, it must be synchronized externally.\n   *\n   * <p>The table is serializable if {@code backingMap}, {@code factory}, the maps generated by\n   * {@code factory}, and the table contents are all serializable.\n   *\n   * <p>Note: the table assumes complete ownership over of {@code backingMap} and the maps returned\n   * by {@code factory}. Those objects should not be manually updated and they should not use soft,\n   * weak, or phantom references.\n   *\n   * @param backingMap place to store the mapping from each row key to its corresponding column key\n   *     / value map\n   * @param factory supplier of new, empty maps that will each hold all column key / value mappings\n   *     for a given row key\n   * @throws IllegalArgumentException if {@code backingMap} is not empty\n   * @since 10.0",
  "com.google.common.collect.DescendingImmutableSortedSet:descendingSet()" : null,
  "com.google.common.graph.ForwardingValueGraph:allowsSelfLoops()" : null,
  "com.google.common.graph.GraphBuilder:directed()" : "Returns a {@link GraphBuilder} for building directed graphs.",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:hashCode()" : null,
  "com.google.common.collect.ForwardingListMultimap:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.io.ByteSource:slice(long,long)" : "* Returns a view of a slice of this byte source that is at most {@code length} bytes long\n   * starting at the given {@code offset}. If {@code offset} is greater than the size of this\n   * source, the returned source will be empty. If {@code offset + length} is greater than the size\n   * of this source, the returned source will contain the slice starting at {@code offset} and\n   * ending at the end of this source.\n   *\n   * @throws IllegalArgumentException if {@code offset} or {@code length} is negative",
  "com.google.common.collect.Range:gap(com.google.common.collect.Range)" : "* Returns the maximal range lying between this range and {@code otherRange}, if such a range\n   * exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping.\n   *\n   * <p>For example, the gap of {@code [1..5]} and {@code (7..10)} is {@code (5..7]}. The resulting\n   * range may be empty; for example, the gap between {@code [1..5)} {@code [5..7)} yields the empty\n   * range {@code [5..5)}.\n   *\n   * <p>The gap exists if and only if the two ranges are either disconnected or immediately adjacent\n   * (any intersection must be an empty range).\n   *\n   * <p>The gap operation is commutative.\n   *\n   * @throws IllegalArgumentException if this range and {@code otherRange} have a nonempty\n   *     intersection\n   * @since 27.0",
  "com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable)" : null,
  "com.google.common.collect.RegularImmutableSet:<init>(java.lang.Object[],int,java.lang.Object[],int)" : null,
  "com.google.common.collect.ImmutableEnumSet:writeReplace()" : null,
  "com.google.common.cache.LocalCache:entrySet()" : null,
  "com.google.common.collect.EnumMultiset:forEachEntry(java.util.function.ObjIntConsumer)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingEntry(java.lang.Object)" : null,
  "com.google.common.hash.HashCode$LongHashCode:writeBytesToImpl(byte[],int,int)" : null,
  "com.google.common.base.SmallCharMatcher:matches(char)" : null,
  "com.google.common.collect.Lists$TransformingRandomAccessList:removeIf(java.util.function.Predicate)" : null,
  "com.google.common.collect.Sets:newLinkedHashSetWithExpectedSize(int)" : "* Creates a {@code LinkedHashSet} instance, with a high enough \"initial capacity\" that it\n   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be\n   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed\n   * that the method isn't inadvertently <i>oversizing</i> the returned set.\n   *\n   * @param expectedSize the number of elements you expect to add to the returned set\n   * @return a new, empty {@code LinkedHashSet} with enough capacity to hold {@code expectedSize}\n   *     elements without resizing\n   * @throws IllegalArgumentException if {@code expectedSize} is negative\n   * @since 11.0",
  "com.google.common.hash.Funnels$IntegerFunnel:funnel(java.lang.Integer,com.google.common.hash.PrimitiveSink)" : null,
  "com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)" : "* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The\n   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all\n   * other methods are supported by the multimap and its views. When adding a key/value pair that\n   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code\n   * replaceValues()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the\n   * underlying multimap.\n   *\n   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every\n   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n   * copy.\n   *\n   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}.\n   *\n   * @since 14.0",
  "com.google.common.cache.LocalCache$LocalLoadingCache:getUnchecked(java.lang.Object)" : null,
  "com.google.common.primitives.Primitives:add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)" : null,
  "com.google.common.cache.RemovalNotification:wasEvicted()" : "* Returns {@code true} if there was an automatic removal due to eviction (the cause is neither\n   * {@link RemovalCause#EXPLICIT} nor {@link RemovalCause#REPLACED}).",
  "com.google.common.collect.EnumMultiset:elementSet()" : null,
  "com.google.common.reflect.TypeToken$TypeSet:classes()" : "Returns the types that are classes.",
  "com.google.common.collect.Multimaps$CustomMultimap:<init>(java.util.Map,com.google.common.base.Supplier)" : null,
  "com.google.common.collect.ImmutableSet$Indexed:createAsList()" : null,
  "com.google.common.collect.Multisets:iteratorImpl(com.google.common.collect.Multiset)" : "An implementation of {@link Multiset#iterator}.",
  "com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator)" : "* Combines two iterators into a single iterator. The returned iterator iterates across the\n   * elements in {@code a}, followed by the elements in {@code b}. The source iterators are not\n   * polled until necessary.\n   *\n   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n   * supports it.",
  "com.google.common.collect.AbstractMultimap$Entries:multimap()" : null,
  "com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.base.Strings:isNullOrEmpty(java.lang.String)" : "* Returns {@code true} if the given string is null or is the empty string.\n   *\n   * <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can\n   * use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms\n   * of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize \"in the other\n   * direction,\" converting empty strings to {@code null}, you can use {@link #emptyToNull}.\n   *\n   * @param string a string reference to check\n   * @return {@code true} if the string is null or is the empty string",
  "com.google.common.collect.ForwardingList:subList(int,int)" : null,
  "com.google.common.collect.ForwardingTable:column(java.lang.Object)" : null,
  "com.google.common.io.LittleEndianDataInputStream:readUTF()" : null,
  "com.google.common.collect.ForwardingMultimap:containsValue(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken:getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[])" : null,
  "com.google.common.reflect.TypeResolver:covariantly(java.lang.reflect.Type)" : "* Returns a resolver that resolves types \"covariantly\".\n   *\n   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code\n   * <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is\n   * {@code <?>}.",
  "com.google.common.primitives.Primitives:isWrapperType(java.lang.Class)" : "* Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as {@link\n   * Integer}.\n   *\n   * @see Class#isPrimitive",
  "com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.ImmutableNetwork)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this",
  "com.google.common.collect.Synchronized$SynchronizedMultiset:<init>(com.google.common.collect.Multiset,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSet:builderWithExpectedSize(int)" : "* Returns a new builder, expecting the specified number of distinct elements to be added.\n   *\n   * <p>If {@code expectedSize} is exactly the number of distinct elements added to the builder\n   * before {@link Builder#build} is called, the builder is likely to perform better than an unsized\n   * {@link #builder()} would have.\n   *\n   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,\n   * but not exactly, the number of distinct elements added to the builder.\n   *\n   * @since 23.1",
  "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:<init>(com.google.common.cache.LocalCache$Strength)" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:higher(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:higher(java.lang.Object)" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:inEdges(java.lang.Object)" : null,
  "com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesDiffering()" : null,
  "com.google.common.reflect.Invokable:getParameters()" : "* Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor\n   * of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden {@code\n   * this} parameter of the enclosing class is excluded from the returned parameters.",
  "com.google.common.collect.ForwardingImmutableMap:<init>()" : null,
  "com.google.common.util.concurrent.RateLimiter:create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)" : null,
  "com.google.common.cache.CacheBuilder:setValueStrength(com.google.common.cache.LocalCache$Strength)" : null,
  "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:copy()" : null,
  "com.google.common.collect.Ordering$ArbitraryOrdering:identityHashCode(java.lang.Object)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:scanJar(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)" : null,
  "com.google.common.reflect.Types$ClassOwnership$2:getOwnerType(java.lang.Class)" : null,
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordMisses(int)" : "* @since 11.0",
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,long,java.util.concurrent.TimeUnit,double)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:startAsync()" : "* @since 15.0",
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:withPadChar(char)" : null,
  "com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.Collection)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableIntArray} will contain.",
  "com.google.common.graph.Graphs:reachableNodes(com.google.common.graph.Graph,java.lang.Object)" : "* Returns the set of nodes that are reachable from {@code node}. Node B is defined as reachable\n   * from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A\n   * and ending at node B. Note that a node is always reachable from itself via a zero-length path.\n   *\n   * <p>This is a \"snapshot\" based on the current topology of {@code graph}, rather than a live view\n   * of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will\n   * not be updated after modifications to {@code graph}.\n   *\n   * @throws IllegalArgumentException if {@code node} is not present in {@code graph}\n   * @since 33.1.0 (present with return type {@code Set} since 20.0)",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,long)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.LinkedListMultimap$NodeIterator:hasPrevious()" : null,
  "com.google.common.collect.ImmutableMultimap$Values:size()" : null,
  "com.google.common.cache.LocalCache$KeySet:remove(java.lang.Object)" : null,
  "com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter:uncaughtException(java.lang.Thread,java.lang.Throwable)" : null,
  "com.google.common.collect.ForwardingCollection:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.graph.GraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder)" : "* Specifies the order of iteration for the elements of {@link Graph#edges()}, {@link\n   * Graph#adjacentNodes(Object)}, {@link Graph#predecessors(Object)}, {@link\n   * Graph#successors(Object)} and {@link Graph#incidentEdges(Object)}.\n   *\n   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For\n   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()\n   * stable} order.\n   *\n   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code\n   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.\n   * @since 29.0",
  "com.google.common.collect.ImmutableSortedMap$Builder:orderEntriesByValue(java.util.Comparator)" : "* Throws an {@code UnsupportedOperationException}.\n     *\n     * @since 19.0\n     * @deprecated Unsupported by ImmutableSortedMap.Builder.",
  "com.google.common.collect.Synchronized$SynchronizedCollection:toArray()" : null,
  "com.google.common.primitives.UnsignedInts:toString(int,int)" : "* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n   * unsigned.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedString(int, int)} instead.\n   *\n   * @param x the value to convert to a string.\n   * @param radix the radix to use while working with {@code x}\n   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}\n   *     and {@link Character#MAX_RADIX}.",
  "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putBytes(byte[],int,int)" : null,
  "com.google.common.collect.CompactHashSet:resizeEntries(int)" : "* Resizes the internal entries array to the specified capacity, which may be greater or less than\n   * the current capacity.",
  "com.google.common.primitives.Chars:fromBytes(byte,byte)" : "* Returns the {@code char} value whose byte representation is the given 2 bytes, in big-endian\n   * order; equivalent to {@code Chars.fromByteArray(new byte[] {b1, b2})}.\n   *\n   * @since 7.0",
  "com.google.common.primitives.ImmutableIntArray$AsList:equals(java.lang.Object)" : null,
  "com.google.common.cache.ForwardingCache:put(java.lang.Object,java.lang.Object)" : "* @since 11.0",
  "com.google.common.collect.ImmutableList$Builder:addAll(java.util.Iterator)" : "* Adds each element of {@code elements} to the {@code ImmutableList}.\n     *\n     * @param elements the {@code Iterator} to add to the {@code ImmutableList}\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.io.TempFileCreator$JavaNioCreator:createTempFile(java.lang.String)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:setNextInAccessQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.TreeTraverser$PostOrderIterator:expand(java.lang.Object)" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:<init>(java.io.File,java.lang.ClassLoader)" : null,
  "com.google.common.hash.Murmur3_32HashFunction:codePointToFourUtf8Bytes(int)" : null,
  "com.google.common.collect.Iterators$MergingIterator:hasNext()" : null,
  "com.google.common.primitives.UnsignedInteger:doubleValue()" : "* Returns the value of this {@code UnsignedInteger} as a {@code double}, analogous to a widening\n   * primitive conversion from {@code int} to {@code double}, and correctly rounded.",
  "com.google.common.collect.RegularImmutableSortedSet:descendingIterator()" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.cache.AbstractCache:invalidateAll(java.lang.Iterable)" : "* @since 11.0",
  "com.google.common.base.internal.Finalizer:getInheritableThreadLocalsField()" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,com.google.common.collect.ImmutableSet$Builder)" : null,
  "com.google.common.graph.EndpointPair$Unordered:isOrdered()" : null,
  "com.google.common.hash.BloomFilter:readFrom(java.io.InputStream,com.google.common.hash.Funnel)" : "* Reads a byte stream, which was written by {@linkplain #writeTo(OutputStream)}, into a {@code\n   * BloomFilter}.\n   *\n   * <p>The {@code Funnel} to be used is not encoded in the stream, so it must be provided here.\n   * <b>Warning:</b> the funnel provided <b>must</b> behave identically to the one used to populate\n   * the original Bloom filter!\n   *\n   * @throws IOException if the InputStream throws an {@code IOException}, or if its data does not\n   *     appear to be a BloomFilter serialized using the {@linkplain #writeTo(OutputStream)} method.",
  "com.google.common.graph.Graphs$TransposedGraph:successors(java.lang.Object)" : null,
  "com.google.common.collect.Tables:transformValues(com.google.common.collect.Table,com.google.common.base.Function)" : "* Returns a view of a table where each value is transformed by a function. All other properties\n   * of the table, such as iteration order, are left intact.\n   *\n   * <p>Changes in the underlying table are reflected in this view. Conversely, this view supports\n   * removal operations, and these are reflected in the underlying table.\n   *\n   * <p>It's acceptable for the underlying table to contain null keys, and even null values provided\n   * that the function is capable of accepting null input. The transformed table might contain null\n   * values, if the function sometimes gives a null result.\n   *\n   * <p>The returned table is not thread-safe or serializable, even if the underlying table is.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned\n   * table to be a view, but it means that the function will be applied many times for bulk\n   * operations like {@link Table#containsValue} and {@code Table.toString()}. For this to perform\n   * well, {@code function} should be fast. To avoid lazy evaluation when the returned table doesn't\n   * need to be a view, copy the returned table into a new table of your choosing.\n   *\n   * @since 10.0",
  "com.google.common.base.Strings:commonPrefix(java.lang.CharSequence,java.lang.CharSequence)" : "* Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) &&\n   * b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and\n   * {@code b} have no common prefix, returns the empty string.\n   *\n   * @since 11.0",
  "com.google.common.collect.Multimaps:asMap(com.google.common.collect.Multimap)" : "* Returns {@link Multimap#asMap multimap.asMap()}. This is provided for parity with the other\n   * more strongly-typed {@code asMap()} implementations.\n   *\n   * @since 15.0",
  "com.google.common.io.ByteStreams:<init>()" : null,
  "com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:isEmpty()" : null,
  "com.google.common.collect.Tables$TransformedTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.GraphBuilder:from(com.google.common.graph.Graph)" : "* Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}.\n   *\n   * <p>The \"queryable\" properties are those that are exposed through the {@link Graph} interface,\n   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},\n   * are not set in the new builder.",
  "com.google.common.graph.ForwardingValueGraph:outDegree(java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$Row:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:createEntrySet()" : null,
  "com.google.common.collect.EnumBiMap:clear()" : null,
  "com.google.common.collect.Serialization:populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)" : "* Populates a multiset by reading an input stream, as part of deserialization. See {@link\n   * #writeMultiset} for the data format.",
  "com.google.common.collect.TreeBasedTable:rowKeySet()" : "* {@inheritDoc}\n   *\n   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link\n   * Table} interface.",
  "com.google.common.base.Converter$ConverterComposition:correctedDoBackward(java.lang.Object)" : null,
  "com.google.common.io.CharSource:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.ReverseOrdering:max(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.BloomFilter:isCompatible(com.google.common.hash.BloomFilter)" : "* Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom\n   * filters to be compatible, they must:\n   *\n   * <ul>\n   *   <li>not be the same instance\n   *   <li>have the same number of hash functions\n   *   <li>have the same bit size\n   *   <li>have the same strategy\n   *   <li>have equal funnels\n   * </ul>\n   *\n   * @param that The Bloom filter to check for compatibility.\n   * @since 15.0",
  "com.google.common.collect.TreeRangeSet:asDescendingSetOfRanges()" : null,
  "com.google.common.collect.ImmutableSortedMultiset:pollLastEntry()" : "* {@inheritDoc}\n   *\n   * <p>This implementation is guaranteed to throw an {@link UnsupportedOperationException}.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.cache.LocalCache$SoftValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.Queues:newConcurrentLinkedQueue()" : "Creates an empty {@code ConcurrentLinkedQueue}.",
  "com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnLeft()" : null,
  "com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard)" : "* Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called\n   * only by a thread currently occupying this monitor.\n   *\n   * @throws InterruptedException if interrupted while waiting",
  "com.google.common.base.CharMatcher:and(com.google.common.base.CharMatcher)" : "* Returns a matcher that matches any character matched by both this matcher and {@code other}.",
  "com.google.common.graph.NetworkBuilder:undirected()" : "Returns a {@link NetworkBuilder} for building undirected networks.",
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object,boolean)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:entries()" : null,
  "com.google.common.cache.LocalCache$LoadingSerializationProxy:getAll(java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.ClosingFuture$8:toString()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:firstEntry()" : null,
  "com.google.common.collect.AbstractMultiset$EntrySet:iterator()" : null,
  "com.google.common.base.CharMatcher$None:matches(char)" : null,
  "com.google.common.graph.AbstractValueGraph:equals(java.lang.Object)" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:get(int)" : null,
  "com.google.common.collect.Multimaps$Keys:spliterator()" : null,
  "com.google.common.primitives.Ints:indexOf(int[],int,int,int)" : null,
  "com.google.common.base.CharMatcher:trimFrom(java.lang.CharSequence)" : "* Returns a substring of the input character sequence that omits all matching BMP characters from\n   * the beginning and from the end of the string. For example:\n   *\n   * {@snippet :\n   * CharMatcher.anyOf(\"ab\").trimFrom(\"abacatbab\")\n   * }\n   *\n   * ... returns {@code \"cat\"}.\n   *\n   * <p>Note that:\n   *\n   * {@snippet :\n   * CharMatcher.inRange('\\0', ' ').trimFrom(str)\n   * }\n   *\n   * ... is equivalent to {@link String#trim()}.",
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Synchronized$SynchronizedListMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.Multisets$ElementSet:isEmpty()" : null,
  "com.google.common.collect.ForwardingMultiset:count(java.lang.Object)" : null,
  "com.google.common.collect.Cut$AboveValue:typeAsLowerBound()" : null,
  "com.google.common.io.ByteSource$ByteArrayByteSource:openBufferedStream()" : null,
  "com.google.common.collect.SortedMultisets$NavigableElementSet:floor(java.lang.Object)" : null,
  "com.google.common.collect.Sets$FilteredNavigableSet:descendingSet()" : null,
  "com.google.common.primitives.Doubles:sortDescending(double[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order.\n   *\n   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats\n   * all NaN values as equal and 0.0 as greater than -0.0.\n   *\n   * @since 23.1",
  "com.google.common.graph.AbstractDirectedNetworkConnections:adjacentNodes()" : null,
  "com.google.common.reflect.Invokable:trySetAccessible()" : "See {@link java.lang.reflect.AccessibleObject#trySetAccessible()}.",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:<init>(int)" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:<init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)" : null,
  "com.google.common.base.Predicates:defensiveCopy(java.lang.Iterable)" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeChunkTo(java.lang.Appendable,byte[],int,int)" : null,
  "com.google.common.collect.Multimaps$CustomSetMultimap:unmodifiableCollectionSubclass(java.util.Collection)" : null,
  "com.google.common.graph.UndirectedNetworkConnections:of()" : null,
  "com.google.common.collect.MultimapBuilder$SetMultimapBuilder:<init>()" : null,
  "com.google.common.collect.CompactHashMap$Itr:incrementExpectedModCount()" : null,
  "com.google.common.eventbus.SubscriberRegistry:getSubscribers(java.lang.Object)" : "* Gets an iterator representing an immutable snapshot of all subscribers to the given event at\n   * the time this method is called.",
  "com.google.common.collect.Lists$RandomAccessReverseList:<init>(java.util.List)" : null,
  "com.google.common.base.CaseFormat$3:normalizeWord(java.lang.String)" : null,
  "com.google.common.io.CharSource$CharSequenceCharSource:readFirstLine()" : null,
  "com.google.common.collect.ImmutableMultiset:asList()" : null,
  "com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache)" : null,
  "com.google.common.collect.ImmutableMultimap$Keys:isPartialView()" : null,
  "com.google.common.collect.FilteredKeyMultimap:entryPredicate()" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:values()" : null,
  "com.google.common.collect.Multimaps:newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier)" : "* Creates a new {@code SortedSetMultimap} that uses the provided map and factory. It can generate\n   * a multimap based on arbitrary {@link Map} and {@link SortedSet} classes.\n   *\n   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration\n   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code\n   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}\n   * method returns instances of a different class than {@code factory.get()} does.\n   *\n   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code\n   * factory}, and the multimap contents are all serializable.\n   *\n   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if\n   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will\n   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link\n   * #synchronizedSortedSetMultimap}.\n   *\n   * <p>Call this method only when the simpler methods {@link TreeMultimap#create()} and {@link\n   * TreeMultimap#create(Comparator, Comparator)} won't suffice.\n   *\n   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by\n   * {@code factory}. Those objects should not be manually updated and they should not use soft,\n   * weak, or phantom references.\n   *\n   * @param map place to store the mapping from each key to its corresponding values\n   * @param factory supplier of new, empty sorted sets that will each hold all values for a given\n   *     key\n   * @throws IllegalArgumentException if {@code map} is not empty",
  "com.google.common.collect.ImmutableClassToInstanceMap$Builder:cast(java.lang.Class,java.lang.Object)" : null,
  "com.google.common.graph.EndpointPair$Unordered:equals(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:removeAll(java.util.Collection)" : null,
  "com.google.common.hash.AbstractHasher:putUnencodedChars(java.lang.CharSequence)" : null,
  "com.google.common.collect.MoreCollectors$ToOptionalState:getOptional()" : null,
  "com.google.common.collect.Multisets:difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "* Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the\n   * count of each element is the result of the <i>zero-truncated subtraction</i> of its count in\n   * the second multiset from its count in the first multiset, with elements that would have a count\n   * of 0 not included. The iteration order of the returned multiset matches that of the element set\n   * of {@code multiset1}, with repeated occurrences of the same element appearing consecutively.\n   *\n   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different\n   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).\n   *\n   * @since 14.0",
  "com.google.common.cache.ForwardingCache:getAllPresent(java.lang.Iterable)" : "* @since 11.0",
  "com.google.common.collect.CompactHashMap:getSuccessor(int)" : null,
  "com.google.common.hash.AbstractHasher:putLong(long)" : null,
  "com.google.common.util.concurrent.ServiceManager$Listener:healthy()" : "* Called when the service initially becomes healthy.\n     *\n     * <p>This will be called at most once after all the services have entered the {@linkplain\n     * State#RUNNING running} state. If any services fail during start up or {@linkplain\n     * State#FAILED fail}/{@linkplain State#TERMINATED terminate} before all other services have\n     * started {@linkplain State#RUNNING running} then this method will not be called.",
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:descendingEntryIterator()" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:add(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(java.lang.Iterable)" : "* Starts specifying how to combine {@link ClosingFuture}s into a single pipeline, assuming they\n   * all succeed. If any fail, the resulting pipeline will fail.\n   *\n   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from any of\n   *     the {@code futures}, or if any has already been {@linkplain #finishToFuture() finished}",
  "com.google.common.collect.RegularImmutableTable:checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.DenseImmutableTable$Row:getValue(int)" : null,
  "com.google.common.graph.ImmutableNetwork:nodeOrder()" : null,
  "com.google.common.collect.Maps$Values:retainAll(java.util.Collection)" : null,
  "com.google.common.util.concurrent.AbstractIdleService:awaitTerminated(long,java.util.concurrent.TimeUnit)" : "* @since 15.0",
  "com.google.common.util.concurrent.FluentFuture$TrustedFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:toString()" : null,
  "com.google.common.collect.NullsFirstOrdering:reverse()" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueSet:mask()" : null,
  "com.google.common.collect.Range:hashCode()" : "Returns a hash code for this range.",
  "com.google.common.primitives.ImmutableIntArray:isEmpty()" : "Returns {@code true} if there are no values in this array ({@link #length} is zero).",
  "com.google.common.collect.TreeRangeSet:create()" : "Creates an empty {@code TreeRangeSet} instance.",
  "com.google.common.collect.RegularImmutableAsList:internalArray()" : null,
  "com.google.common.collect.ImmutableSortedMultiset:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.ForwardingList:standardAdd(java.lang.Object)" : "* A sensible default implementation of {@link #add(Object)}, in terms of {@link #add(int,\n   * Object)}. If you override {@link #add(int, Object)}, you may wish to override {@link\n   * #add(Object)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.Iterators$PeekingImpl:next()" : null,
  "com.google.common.util.concurrent.AtomicDouble:longValue()" : "* Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive\n   * conversion.",
  "com.google.common.graph.AbstractNetwork:outDegree(java.lang.Object)" : null,
  "com.google.common.graph.ElementOrder:hashCode()" : null,
  "com.google.common.collect.Cut$AboveValue:typeAsUpperBound()" : null,
  "com.google.common.collect.ImmutableMapKeySet:contains(java.lang.Object)" : null,
  "com.google.common.collect.Maps$TransformedEntriesSortedMap:tailMap(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Futures$CallbackListener:<init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback)" : null,
  "com.google.common.collect.CompactLinkedHashSet:create()" : "Creates an empty {@code CompactLinkedHashSet} instance.",
  "com.google.common.collect.AbstractSetMultimap:<init>(java.util.Map)" : "* Creates a new multimap that uses the provided map.\n   *\n   * @param map place to store the mapping from each key to its corresponding values",
  "com.google.common.io.Closeables:close(java.io.Closeable,boolean)" : null,
  "com.google.common.collect.HashBasedTable:clear()" : null,
  "com.google.common.collect.ConcurrentHashMultiset$EntrySet:multiset()" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:removeOutEdge(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Any:indexIn(java.lang.CharSequence)" : null,
  "com.google.common.util.concurrent.AbstractService:notifyFailed(java.lang.Throwable)" : "* Invoke this method to transition the service to the {@link State#FAILED}. The service will\n   * <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically\n   * or otherwise cannot be started nor stopped.",
  "com.google.common.collect.Collections2:<init>()" : null,
  "com.google.common.eventbus.Dispatcher:immediate()" : "* Returns a dispatcher that dispatches events to subscribers immediately as they're posted\n   * without using an intermediate queue to change the dispatch order. This is effectively a\n   * depth-first dispatch order, vs. breadth-first when using a queue.",
  "com.google.common.collect.ImmutableBiMap:<init>()" : null,
  "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:valueComparator()" : null,
  "com.google.common.io.Resources:toByteArray(java.net.URL)" : "* Reads all bytes from a URL into a byte array.\n   *\n   * @param url the URL to read from\n   * @return a byte array containing all the bytes from the URL\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.Multimap:forEach(java.util.function.BiConsumer)" : "* Performs the given action for all key-value pairs contained in this multimap. If an ordering is\n   * specified by the {@code Multimap} implementation, actions will be performed in the order of\n   * iteration of {@link #entries()}. Exceptions thrown by the action are relayed to the caller.\n   *\n   * <p>To loop over all keys and their associated value collections, write {@code\n   * Multimaps.asMap(multimap).forEach((key, valueCollection) -> action())}.\n   *\n   * @since 21.0",
  "com.google.common.util.concurrent.AbstractFuture:addPendingString(java.lang.StringBuilder)" : null,
  "com.google.common.net.MediaType:parametersAsMap()" : null,
  "com.google.common.primitives.Floats:toArray(java.util.Collection)" : "* Returns an array containing each value of {@code collection}, converted to a {@code float}\n   * value in the manner of {@link Number#floatValue}.\n   *\n   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n   * Calling this method is as thread-safe as calling that method.\n   *\n   * @param collection a collection of {@code Number} instances\n   * @return an array containing the same values as {@code collection}, in the same order, converted\n   *     to primitives\n   * @throws NullPointerException if {@code collection} or any of its elements is null\n   * @since 1.0 (parameter was {@code Collection<Float>} before 12.0)",
  "com.google.common.collect.Maps$TransformedEntriesSortedMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap$KeySetView:iterator()" : null,
  "com.google.common.graph.MapIteratorCache:unmodifiableKeySet()" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceListener:starting()" : null,
  "com.google.common.cache.LocalCache:keySet()" : null,
  "com.google.common.collect.ImmutableMap$SerializedForm:readResolve()" : null,
  "com.google.common.collect.Collections2:toStringImpl(java.util.Collection)" : "An implementation of {@link Collection#toString()}.",
  "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:afterRanInterruptiblyFailure(java.lang.Throwable)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:throwCause(java.lang.Exception,boolean)" : null,
  "com.google.common.collect.Synchronized$SynchronizedSetMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:getValueReference()" : null,
  "com.google.common.graph.StandardMutableNetwork:addNodeInternal(java.lang.Object)" : "* Adds {@code node} to the graph and returns the associated {@link NetworkConnections}.\n   *\n   * @throws IllegalStateException if {@code node} is already present",
  "com.google.common.collect.ForwardingList:listIterator(int)" : null,
  "com.google.common.collect.Maps:newLinkedHashMap(java.util.Map)" : "* Creates a <i>mutable</i>, insertion-ordered {@code LinkedHashMap} instance with the same\n   * mappings as the specified map.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableMap#copyOf(Map)} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code LinkedHashMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @param map the mappings to be placed in the new map\n   * @return a new, {@code LinkedHashMap} initialized with the mappings from {@code map}",
  "com.google.common.collect.TreeMultiset$AvlNode:balanceFactor()" : null,
  "com.google.common.util.concurrent.ListeningExecutorService:invokeAny(java.util.Collection,java.time.Duration)" : "* Duration-based overload of {@link #invokeAny(Collection, long, TimeUnit)}.\n   *\n   * @since 32.1.0",
  "com.google.common.graph.AbstractNetwork:hashCode()" : null,
  "com.google.common.collect.FilteredEntryMultimap$AsMap:createKeySet()" : null,
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.AbstractMultiset:hashCode()" : "* {@inheritDoc}\n   *\n   * <p>This implementation returns the hash code of {@link Multiset#entrySet()}.",
  "com.google.common.collect.Iterators:paddedPartition(java.util.Iterator,int)" : "* Divides an iterator into unmodifiable sublists of the given size, padding the final iterator\n   * with null values if necessary. For example, partitioning an iterator containing {@code [a, b,\n   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer\n   * iterator containing two inner lists of three elements each, all in the original order.\n   *\n   * <p>The returned lists implement {@link java.util.RandomAccess}.\n   *\n   * @param iterator the iterator to return a partitioned view of\n   * @param size the desired size of each partition\n   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into\n   *     partitions (the final iterable may have trailing null elements)\n   * @throws IllegalArgumentException if {@code size} is nonpositive",
  "com.google.common.base.CharMatcher$Negated:<init>(com.google.common.base.CharMatcher)" : null,
  "com.google.common.base.internal.Finalizer:getFinalizeReferentMethod()" : "Looks up FinalizableReference.finalizeReferent() method.",
  "com.google.common.io.CountingInputStream:<init>(java.io.InputStream)" : "* Wraps another input stream, counting the number of bytes read.\n   *\n   * @param in the input stream to be wrapped",
  "com.google.common.collect.TreeRangeMap$1:put(com.google.common.collect.Range,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ClosingFuture:becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList)" : null,
  "com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:findInterruptibleMethods(java.lang.Class)" : null,
  "com.google.common.cache.LocalCache$LoadingSerializationProxy:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.cache.LocalCache$Segment:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)" : "* Copies {@code original} into a new entry chained to {@code newNext}. Returns the new entry,\n     * or {@code null} if {@code original} was already garbage collected.",
  "com.google.common.graph.ValueGraphBuilder:<init>(boolean)" : "Creates a new instance with the specified edge directionality.",
  "com.google.common.math.DoubleMath:fuzzyCompare(double,double,double)" : "* Compares {@code a} and {@code b} \"fuzzily,\" with a tolerance for nearly-equal values.\n   *\n   * <p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a,\n   * b)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as\n   * equal and greater than all other values (including {@link Double#POSITIVE_INFINITY}).\n   *\n   * <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link\n   * Comparable#compareTo} implementations. In particular, it is not transitive.\n   *\n   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN\n   * @since 13.0",
  "com.google.common.collect.Sets$DescendingSet:pollFirst()" : null,
  "com.google.common.collect.Maps$UnmodifiableBiMap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Enums$StringConverter:doBackward(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps:index(java.lang.Iterable,com.google.common.base.Function)" : "* Creates an index {@code ImmutableListMultimap} that contains the results of applying a\n   * specified function to each item in an {@code Iterable} of values. Each value will be stored as\n   * a value in the resulting multimap, yielding a multimap with the same size as the input\n   * iterable. The key used to store that value in the multimap will be the result of calling the\n   * function on that value. The resulting multimap is created as an immutable snapshot. In the\n   * returned multimap, keys appear in the order they are first encountered, and the values\n   * corresponding to each key appear in the same order as they are encountered.\n   *\n   * <p>For example,\n   *\n   * {@snippet :\n   * List<String> badGuys =\n   *     Arrays.asList(\"Inky\", \"Blinky\", \"Pinky\", \"Pinky\", \"Clyde\");\n   * Function<String, Integer> stringLengthFunction = ...;\n   * Multimap<Integer, String> index =\n   *     Multimaps.index(badGuys, stringLengthFunction);\n   * System.out.println(index);\n   * }\n   *\n   * <p>prints\n   *\n   * {@snippet :\n   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}\n   * }\n   *\n   * <p>The returned multimap is serializable if its keys and values are all serializable.\n   *\n   * @param values the values to use when constructing the {@code ImmutableListMultimap}\n   * @param keyFunction the function used to produce the key for each value\n   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code\n   *     keyFunction} on each value in the input collection to that value\n   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code\n   *     keyFunction} produces {@code null} for any key",
  "com.google.common.net.InternetDomainName:hasRegistrySuffix()" : "* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},\n   * including if it is a registry suffix itself. For example, returns {@code true} for {@code\n   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code\n   * google.invalid}.\n   *\n   * <p>Note that this method is equivalent to {@link #hasPublicSuffix()} because all registry\n   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.\n   *\n   * @since 23.3",
  "com.google.common.primitives.UnsignedInts$LexicographicalComparator:compare(int[],int[])" : null,
  "com.google.common.collect.LinkedHashMultiset:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable,java.util.Comparator)" : "* Returns an immutable map containing the given entries, with keys sorted by the provided\n   * comparator.\n   *\n   * @throws NullPointerException if any key or value in {@code map} is null\n   * @throws IllegalArgumentException if any two keys are equal according to the comparator\n   * @since 19.0",
  "com.google.common.cache.LocalCache$LocalManualCache:get(java.lang.Object,java.util.concurrent.Callable)" : null,
  "com.google.common.hash.Hashing$ConcatenatedHashFunction:makeHash(com.google.common.hash.Hasher[])" : null,
  "com.google.common.hash.Hashing:hmacSha512(java.security.Key)" : "* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the\n   * SHA-512 (512 hash bits) hash function and the given secret key.\n   *\n   * @param key the secret key\n   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC\n   * @since 20.0",
  "com.google.common.cache.LocalCache:newValueReference(com.google.common.cache.ReferenceEntry,java.lang.Object,int)" : null,
  "com.google.common.util.concurrent.ClosingFuture:withoutCloser(com.google.common.util.concurrent.AsyncFunction)" : "* Returns an {@link AsyncClosingFunction} that applies an {@link AsyncFunction} to an input,\n   * ignoring the DeferredCloser and returning a {@code ClosingFuture} derived from the returned\n   * {@link ListenableFuture}.\n   *\n   * <p>Use this method to pass a transformation to {@link #transformAsync(AsyncClosingFunction,\n   * Executor)} or to {@link #catchingAsync(Class, AsyncClosingFunction, Executor)} as long as it\n   * meets these conditions:\n   *\n   * <ul>\n   *   <li>It does not need to capture any {@link Closeable} objects by calling {@link\n   *       DeferredCloser#eventuallyClose(Object, Executor)}.\n   *   <li>It returns a {@link ListenableFuture}.\n   * </ul>\n   *\n   * <p>Example usage:\n   *\n   * {@snippet :\n   * // Result.getRowsFuture() returns a ListenableFuture.\n   * ClosingFuture<List<Row>> rowsFuture =\n   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);\n   * }\n   *\n   * @param function transforms the value of a {@code ClosingFuture} step to a {@link\n   *     ListenableFuture} with the value of a derived step",
  "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:get()" : null,
  "com.google.common.graph.ImmutableNetwork:<init>(com.google.common.graph.Network)" : null,
  "com.google.common.collect.RegularContiguousSet$SerializedForm:readResolve()" : null,
  "com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ImmutableValueGraph)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this",
  "com.google.common.util.concurrent.RateLimiter:setRate(double)" : "* Updates the stable rate of this {@code RateLimiter}, that is, the {@code permitsPerSecond}\n   * argument provided in the factory method that constructed the {@code RateLimiter}. Currently\n   * throttled threads will <b>not</b> be awakened as a result of this invocation, thus they do not\n   * observe the new rate; only subsequent requests will.\n   *\n   * <p>Note though that, since each request repays (by waiting, if necessary) the cost of the\n   * <i>previous</i> request, this means that the very next request after an invocation to {@code\n   * setRate} will not be affected by the new rate; it will pay the cost of the previous request,\n   * which is in terms of the previous rate.\n   *\n   * <p>The behavior of the {@code RateLimiter} is not modified in any other way, e.g. if the {@code\n   * RateLimiter} was configured with a warmup period of 20 seconds, it still has a warmup period of\n   * 20 seconds after this method invocation.\n   *\n   * @param permitsPerSecond the new stable rate of this {@code RateLimiter}\n   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero",
  "com.google.common.reflect.TypeToken:wrap()" : "* Returns the corresponding wrapper type if this is a primitive type; otherwise returns {@code\n   * this} itself. Idempotent.\n   *\n   * @since 15.0",
  "com.google.common.cache.LocalCache$LocalLoadingCache:get(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:copy()" : null,
  "com.google.common.io.Closeables:<init>()" : null,
  "com.google.common.collect.Cut$AboveAll:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.graph.StandardValueGraph:hasEdgeConnectingInternal(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:size()" : null,
  "com.google.common.collect.AbstractBiMap$KeySet:iterator()" : null,
  "com.google.common.base.Optional:toJavaUtil(com.google.common.base.Optional)" : "* Returns the equivalent {@code java.util.Optional} value to the given {@code\n   * com.google.common.base.Optional}, or {@code null} if the argument is null.\n   *\n   * <p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()}\n   * instead.\n   *\n   * <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it\n   * could refer to either the static or instance version of this method. Write out the lambda\n   * expression {@code o -> Optional.toJavaUtil(o)} instead.\n   *\n   * @since 21.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.io.ByteStreams:exhaust(java.io.InputStream)" : "* Reads and discards data from the given {@code InputStream} until the end of the stream is\n   * reached. Returns the total number of bytes read. Does not close the stream.\n   *\n   * @since 20.0",
  "com.google.common.reflect.ImmutableTypeToInstanceMap:put(com.google.common.reflect.TypeToken,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @deprecated unsupported operation\n   * @throws UnsupportedOperationException always",
  "com.google.common.base.FinalizableReferenceQueue$SystemLoader:loadFinalizer()" : null,
  "com.google.common.hash.AbstractByteHasher:update(byte[])" : "Updates this hasher with the given bytes.",
  "com.google.common.io.CharSource$StringCharSource:copyTo(java.lang.Appendable)" : null,
  "com.google.common.collect.ByFunctionOrdering:hashCode()" : null,
  "com.google.common.primitives.Shorts:indexOf(short[],short,int,int)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeChar(int)" : null,
  "com.google.common.collect.MapMakerInternalMap:valueEquivalence()" : null,
  "com.google.common.collect.Synchronized$SynchronizedBiMap:inverse()" : null,
  "com.google.common.cache.LocalCache$Segment:storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$CustomSetMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.base.CharMatcher$RangesMatcher:negate()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:<init>(double[])" : null,
  "com.google.common.graph.AbstractBaseGraph:edges()" : "* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and\n   * {@link #successors(Object)}.",
  "com.google.common.collect.HashBiMap:inverse()" : null,
  "com.google.common.collect.ForwardingNavigableSet:descendingSet()" : null,
  "com.google.common.collect.AbstractSequentialIterator:next()" : null,
  "com.google.common.base.Predicates:<init>()" : null,
  "com.google.common.collect.FluentIterable:index(com.google.common.base.Function)" : "* Creates an index {@code ImmutableListMultimap} that contains the results of applying a\n   * specified function to each item in this {@code FluentIterable} of values. Each element of this\n   * iterable will be stored as a value in the resulting multimap, yielding a multimap with the same\n   * size as this iterable. The key used to store that value in the multimap will be the result of\n   * calling the function on that value. The resulting multimap is created as an immutable snapshot.\n   * In the returned multimap, keys appear in the order they are first encountered, and the values\n   * corresponding to each key appear in the same order as they are encountered.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}\n   * behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve\n   * the order of entries.\n   *\n   * @param keyFunction the function used to produce the key for each value\n   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code\n   *     keyFunction} produces {@code null} for any key\n   * @since 14.0",
  "com.google.common.collect.ObjectArrays:fillArray(java.lang.Iterable,java.lang.Object[])" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:subList(int,int)" : null,
  "com.google.common.collect.Tables$ImmutableCell:getRowKey()" : null,
  "com.google.common.graph.UndirectedMultiNetworkConnections:edgesConnecting(java.lang.Object)" : null,
  "com.google.common.collect.TransformedListIterator:hasPrevious()" : null,
  "com.google.common.collect.Synchronized:setMultimap(com.google.common.collect.SetMultimap,java.lang.Object)" : null,
  "com.google.common.collect.MutableClassToInstanceMap:create(java.util.Map)" : "* Returns a new {@code MutableClassToInstanceMap} instance backed by a given empty {@code\n   * backingMap}. The caller surrenders control of the backing map, and thus should not allow any\n   * direct references to it to remain accessible.",
  "com.google.common.io.Files$FileByteSource:read()" : null,
  "com.google.common.io.Flushables:flush(java.io.Flushable,boolean)" : "* Flush a {@link Flushable}, with control over whether an {@code IOException} may be thrown.\n   *\n   * <p>If {@code swallowIOException} is true, then we don't rethrow {@code IOException}, but merely\n   * log it.\n   *\n   * @param flushable the {@code Flushable} object to be flushed.\n   * @param swallowIOException if true, don't propagate IO exceptions thrown by the {@code flush}\n   *     method\n   * @throws IOException if {@code swallowIOException} is false and {@link Flushable#flush} throws\n   *     an {@code IOException}.\n   * @see Closeables#close",
  "com.google.common.collect.ContiguousSet:closed(int,int)" : "* Returns a nonempty contiguous set containing all {@code int} values from {@code lower}\n   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code\n   * Range.closed(lower, upper)}.)\n   *\n   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}\n   * @since 23.0",
  "com.google.common.base.CaseFormat$1:normalizeWord(java.lang.String)" : null,
  "com.google.common.collect.AbstractTable:putAll(com.google.common.collect.Table)" : null,
  "com.google.common.primitives.Booleans:rotate(boolean[],int)" : "* Performs a right rotation of {@code array} of \"distance\" places, so that the first element is\n   * moved to index \"distance\", and the element at index {@code i} ends up at index {@code (distance\n   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Booleans.asList(array),\n   * distance)}, but is somewhat faster.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @since 32.0.0",
  "com.google.common.reflect.Types$JavaVersion$3:usedInGenericType(java.lang.reflect.Type)" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:<init>(java.util.Map,java.util.Map,int)" : null,
  "com.google.common.collect.ForwardingMultiset:standardHashCode()" : "* A sensible definition of {@link #hashCode} as {@code entrySet().hashCode()} . If you override\n   * {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.Collections2$FilteredCollection:createCombined(com.google.common.base.Predicate)" : null,
  "com.google.common.collect.ImmutableMap:equals(java.lang.Object)" : null,
  "com.google.common.base.FunctionalEquivalence:<init>(com.google.common.base.Function,com.google.common.base.Equivalence)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:isEmpty()" : null,
  "com.google.common.net.MediaType:createApplicationType(java.lang.String)" : "* Creates a media type with the \"application\" type and the given subtype.\n   *\n   * @throws IllegalArgumentException if subtype is invalid",
  "com.google.common.collect.Queues:newPriorityBlockingQueue()" : "* Creates an empty {@code PriorityBlockingQueue} with the ordering given by its elements' natural\n   * ordering.\n   *\n   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}\n   *     in 15.0)",
  "com.google.common.collect.ImmutableSortedMap$Builder:buildKeepingLast()" : "* Throws UnsupportedOperationException. A future version may support this operation. Then the\n     * value for any given key will be the one that was last supplied in a {@code put} operation for\n     * that key.\n     *\n     * @throws UnsupportedOperationException always\n     * @since 31.1\n     * @deprecated This method is not currently implemented, and may never be.",
  "com.google.common.primitives.ImmutableLongArray:subArray(int,int)" : "* Returns a new immutable array containing the values in the specified range.\n   *\n   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one\n   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,\n   * end).trimmed()}.",
  "com.google.common.io.LittleEndianDataOutputStream:writeLong(long)" : "* Writes a {@code long} as specified by {@link DataOutputStream#writeLong(long)}, except using\n   * little-endian byte order.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Comparable,boolean)" : null,
  "com.google.common.collect.DescendingImmutableSortedMultiset:descendingMultiset()" : null,
  "com.google.common.graph.ImmutableGraph:adjacentNodes(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultiset:entrySet()" : null,
  "com.google.common.collect.Synchronized$SynchronizedQueue:poll()" : null,
  "com.google.common.base.Enums:getIfPresent(java.lang.Class,java.lang.String)" : "* Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the\n   * constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing\n   * user input or falling back to a default enum constant. For example, {@code\n   * Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);}\n   *\n   * @since 12.0",
  "com.google.common.collect.Multisets:unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset)" : "* Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned\n   * multiset \"read through\" to the specified multiset, and attempts to modify the returned multiset\n   * result in an {@link UnsupportedOperationException}.\n   *\n   * <p>The returned multiset will be serializable if the specified multiset is serializable.\n   *\n   * @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated\n   * @return an unmodifiable view of the multiset\n   * @since 11.0",
  "com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:floorKey(java.lang.Object)" : null,
  "com.google.common.collect.JdkBackedImmutableBiMap:isPartialView()" : null,
  "com.google.common.collect.CompactLinkedHashMap:setLink(int,long)" : null,
  "com.google.common.base.Predicates:instanceOf(java.lang.Class)" : "* Returns a predicate that evaluates to {@code true} if the object being tested is an instance of\n   * the given class. If the object being tested is {@code null} this predicate evaluates to {@code\n   * false}.\n   *\n   * <p>If you want to filter an {@code Iterable} to narrow its type, consider using {@link\n   * com.google.common.collect.Iterables#filter(Iterable, Class)} in preference.\n   *\n   * <p><b>Warning:</b> contrary to the typical assumptions about predicates (as documented at\n   * {@link Predicate#apply}), the returned predicate may not be <i>consistent with equals</i>. For\n   * example, {@code instanceOf(ArrayList.class)} will yield different results for the two equal\n   * instances {@code Lists.newArrayList(1)} and {@code Arrays.asList(1)}.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code clazz::isInstance} or {@code x -> x instanceof\n   * Clazz}, but note that lambdas do not have human-readable {@link #toString()} representations\n   * and are not serializable.",
  "com.google.common.graph.MapIteratorCache:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:getReference(java.lang.ref.Reference)" : null,
  "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber:<init>(java.lang.Object,com.google.common.eventbus.Subscriber)" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:removeAll(java.util.Collection)" : null,
  "com.google.common.math.MathPreconditions:checkNoOverflow(boolean,java.lang.String,int,int)" : null,
  "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.stream.DoubleStream)" : "* Appends all values from {@code stream}, in order, to the end of the values the built {@link\n     * ImmutableDoubleArray} will contain.\n     *\n     * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:makeHash()" : null,
  "com.google.common.cache.LocalCache$StrongValueReference:waitForValue()" : null,
  "com.google.common.collect.ForwardingListIterator:add(java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap,com.google.common.collect.Range)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task:run()" : null,
  "com.google.common.cache.LocalCache$Segment:reclaimKey(com.google.common.cache.ReferenceEntry,int)" : "Removes an entry whose key has been garbage collected.",
  "com.google.common.base.Functions$FunctionForMapNoDefault:toString()" : null,
  "com.google.common.collect.ImmutableMultimap:entryIterator()" : null,
  "com.google.common.io.MultiReader:<init>(java.util.Iterator)" : null,
  "com.google.common.collect.ComparisonChain$1:result()" : "* Ends this comparison chain and returns its result: a value having the same sign as the first\n   * nonzero comparison result in the chain, or zero if every result was zero.",
  "com.google.common.graph.ImmutableNetwork$Builder:addNode(java.lang.Object)" : "* Adds {@code node} if it is not already present.\n     *\n     * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null.\n     *\n     * @return this {@code Builder} object",
  "com.google.common.collect.TreeMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.ForwardingMultiset:standardAdd(java.lang.Object)" : "* A sensible definition of {@link #add(Object)} in terms of {@link #add(Object, int)}. If you\n   * override {@link #add(Object, int)}, you may wish to override {@link #add(Object)} to forward to\n   * this implementation.\n   *\n   * @since 7.0",
  "com.google.common.escape.ArrayBasedUnicodeEscaper:escape(int)" : "* Escapes a single Unicode code point using the replacement array and safe range values. If the\n   * given character does not have an explicit replacement and lies outside the safe range then\n   * {@link #escapeUnsafe} is called.\n   *\n   * @return the replacement characters, or {@code null} if no escaping was required",
  "com.google.common.collect.AbstractTable:clear()" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:containsValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:getDelay(java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.ForwardingNavigableSet:standardLast()" : null,
  "com.google.common.cache.CacheBuilderSpec:toCacheBuilder()" : "Returns a CacheBuilder configured according to this instance's specification.",
  "com.google.common.collect.TreeRangeMap:coalescedRange(com.google.common.collect.Range,java.lang.Object)" : "Computes the coalesced range for the given range+value - does not mutate the map.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:getLockName()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:putFirst(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMultiset:delegate()" : null,
  "com.google.common.util.concurrent.AbstractService:awaitTerminated(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.base.Suppliers$SupplierOfInstance:<init>(java.lang.Object)" : null,
  "com.google.common.hash.AbstractCompositeHashFunction$1:putLong(long)" : null,
  "com.google.common.cache.LocalCache$ValueIterator:next()" : null,
  "com.google.common.collect.FilteredKeySetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherKey(java.lang.Object)" : null,
  "com.google.common.collect.GeneralRange:tooLow(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSetMultimap:entries()" : "* Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses\n   * the values for the first key, the values for the second key, and so on.",
  "com.google.common.collect.AbstractSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.\n   *\n   * <p>Any duplicates in {@code values} will be stored in the multimap once.",
  "com.google.common.collect.ImmutableRangeSet$AsSet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:crossOverUp(int,java.lang.Object)" : "* Moves an element one level up from a min level to a max level (or vice versa). Returns the\n     * new position of the element.",
  "com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.FilteredEntryMultimap:createKeySet()" : null,
  "com.google.common.collect.DiscreteDomain$LongDomain:minValue()" : null,
  "com.google.common.cache.CacheStats:loadSuccessCount()" : "* Returns the number of times {@link Cache} lookup methods have successfully loaded a new value.\n   * This is usually incremented in conjunction with {@link #missCount}, though {@code missCount} is\n   * also incremented when an exception is encountered during cache loading (see {@link\n   * #loadExceptionCount}). Multiple concurrent misses for the same key will result in a single load\n   * operation. This may be incremented not in conjunction with {@code missCount} if the load occurs\n   * as a result of a refresh or if the cache loader returned more items than was requested. {@code\n   * missCount} may also be incremented not in conjunction with this (nor {@link\n   * #loadExceptionCount}) on calls to {@code getIfPresent}.",
  "com.google.common.collect.ImmutableSortedMap:entrySet()" : "Returns an immutable set of the mappings in this map, sorted by the key ordering.",
  "com.google.common.base.CaseFormat$StringConverter:equals(java.lang.Object)" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:setValue(java.lang.Object)" : null,
  "com.google.common.collect.ArrayTable:row(java.lang.Object)" : "* Returns a view of all mappings that have the given row key. If the row key isn't in {@link\n   * #rowKeySet()}, an empty immutable map is returned.\n   *\n   * <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the\n   * column key with the corresponding value in the table. Changes to the returned map will update\n   * the underlying table, and vice versa.\n   *\n   * @param rowKey key of row to search for in the table\n   * @return the corresponding map from column keys to values",
  "com.google.common.graph.StandardMutableValueGraph:removeEdge(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.CollectSpliterators:flatMap(java.util.Spliterator,java.util.function.Function,int,long)" : "* Returns a {@code Spliterator} that iterates over the elements of the spliterators generated by\n   * applying {@code function} to the elements of {@code fromSpliterator}.",
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeLong(long)" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.ForwardingTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Converter$FunctionBasedConverter:doBackward(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:<init>()" : null,
  "com.google.common.collect.ImmutableSortedSet:descendingSet()" : "* @since 12.0",
  "com.google.common.util.concurrent.MoreExecutors:<init>()" : null,
  "com.google.common.collect.AbstractIndexedListIterator:nextIndex()" : null,
  "com.google.common.reflect.TypeResolver:<init>(com.google.common.reflect.TypeResolver$TypeTable)" : null,
  "com.google.common.cache.LocalCache$Segment:preWriteCleanup(long)" : "* Performs routine cleanup prior to executing a write. This should be called every time a write\n     * thread acquires the segment lock, immediately after acquiring the lock.\n     *\n     * <p>Post-condition: expireEntries has been run.",
  "com.google.common.collect.Count:addAndGet(int)" : null,
  "com.google.common.util.concurrent.ClosingFuture:submit(com.google.common.util.concurrent.ClosingFuture$ClosingCallable,java.util.concurrent.Executor)" : "* Starts a {@link ClosingFuture} pipeline by submitting a callable block to an executor.\n   *\n   * @throws java.util.concurrent.RejectedExecutionException if the task cannot be scheduled for\n   *     execution",
  "com.google.common.math.Quantiles:chooseNextSelection(int[],int,int,int,int)" : "* Chooses the next selection to do from the required selections. It is required that the array\n   * {@code allRequired} is sorted and that {@code allRequired[i]} are in the range [{@code from},\n   * {@code to}] for all {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. The\n   * value returned by this method is the {@code i} in that range such that {@code allRequired[i]}\n   * is as close as possible to the center of the range [{@code from}, {@code to}]. Choosing the\n   * value closest to the center of the range first is the most efficient strategy because it\n   * minimizes the size of the subranges from which the remaining selections must be done.",
  "com.google.common.cache.LocalCache:isLive(com.google.common.cache.ReferenceEntry,long)" : "* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}\n   * instead.",
  "com.google.common.hash.FarmHashFingerprint64:hashLength33To64(byte[],int,int)" : null,
  "com.google.common.util.concurrent.AtomicDouble:get()" : "* Gets the current value.\n   *\n   * @return the current value",
  "com.google.common.primitives.ImmutableLongArray$Builder:addAll(com.google.common.primitives.ImmutableLongArray)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableLongArray} will contain.",
  "com.google.common.collect.TreeRangeMap$SubRangeMap:equals(java.lang.Object)" : null,
  "com.google.common.collect.Tables$TransposeTable:rowMap()" : null,
  "com.google.common.util.concurrent.UncheckedTimeoutException:<init>(java.lang.Throwable)" : null,
  "com.google.common.collect.CompactHashMap:createKeySet()" : null,
  "com.google.common.collect.MultimapBuilder:hashKeys()" : "Uses a hash table to map keys to value collections.",
  "com.google.common.collect.Synchronized$SynchronizedTable:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingCollection:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.Iterators:contains(java.util.Iterator,java.lang.Object)" : "Returns {@code true} if {@code iterator} contains {@code element}.",
  "com.google.common.collect.LinkedHashMultimap:deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)" : null,
  "com.google.common.base.CharMatcher:whitespace()" : "* Determines whether a character is whitespace according to the latest Unicode standard, as\n   * illustrated <a\n   * href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n   * This is not the same definition used by other Java APIs. (See a <a\n   * href=\"https://docs.google.com/spreadsheets/d/1kq4ECwPjHX9B8QUCTPclgsDCXYaj7T-FlT4tB5q3ahk/edit\">comparison\n   * of several definitions of \"whitespace\"</a>.)\n   *\n   * <p>All Unicode White_Space characters are on the BMP and thus supported by this API.\n   *\n   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this matcher to keep it up to\n   * date.\n   *\n   * @since 19.0 (since 1.0 as constant {@code WHITESPACE})",
  "com.google.common.reflect.ClassPath$ResourceInfo:url()" : "* Returns the url identifying the resource.\n     *\n     * <p>See {@link ClassLoader#getResource}\n     *\n     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,\n     *     despite physically existing in the class path.",
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$EntryFactory$5:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* Creates a new entry.\n     *\n     * @param segment to create the entry for\n     * @param key of the entry\n     * @param hash of the key\n     * @param next entry in the same bucket",
  "com.google.common.base.FunctionalEquivalence:doEquivalent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.base.CharMatcher$AnyOf:<init>(java.lang.CharSequence)" : null,
  "com.google.common.collect.ComparisonChain$1:compareTrueFirst(boolean,boolean)" : "* Compares two {@code boolean} values, considering {@code true} to be less than {@code false},\n   * <i>if</i> the result of this comparison chain has not already been determined.\n   *\n   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#trueFirst()}. For example:\n   *\n   * <pre>\n   * Comparator.comparing(Foo::isBar, {@link Booleans#trueFirst()})\n   * </pre>\n   *\n   * @since 12.0",
  "com.google.common.collect.Synchronized$SynchronizedBiMap:<init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap)" : null,
  "com.google.common.cache.LocalCache$Segment:scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.collect.EmptyContiguousSet:<init>(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.collect.Streams:stream(com.google.common.base.Optional)" : "* If a value is present in {@code optional}, returns a stream containing only that element,\n   * otherwise returns an empty stream.",
  "com.google.common.collect.Queues:newConcurrentLinkedQueue(java.lang.Iterable)" : "* Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable, in\n   * the order they are returned by the iterable's iterator.",
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:entryIterator()" : null,
  "com.google.common.collect.Maps$DescendingMap:values()" : null,
  "com.google.common.collect.Lists$TransformingRandomAccessList:isEmpty()" : null,
  "com.google.common.collect.DenseImmutableTable$RowMap:keyToIndex()" : null,
  "com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard)" : "* Enters this monitor if the guard is satisfied. Blocks indefinitely acquiring the lock, but does\n   * not wait for the guard to be satisfied.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",
  "com.google.common.collect.Collections2$PermutationIterator:calculateNextPermutation()" : null,
  "com.google.common.io.Files$FileByteSink:toString()" : null,
  "com.google.common.hash.Funnels$UnencodedCharsFunnel:funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink)" : null,
  "com.google.common.collect.ImmutableMultiset:elementSet()" : "* @since 21.0 (present with return type {@code Set} since 2.0)",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.EnumBiMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.base.CharMatcher$Any:matches(char)" : null,
  "com.google.common.base.Predicates$InstanceOfPredicate:hashCode()" : null,
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.collect.CompactHashMap$KeySetView:spliterator()" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:iterator()" : null,
  "com.google.common.collect.NullsLastOrdering:hashCode()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner:<init>(boolean,java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.base.CharMatcher$InRange:matches(char)" : null,
  "com.google.common.util.concurrent.Striped$LargeLazyStriped:size()" : null,
  "com.google.common.io.ByteSource$EmptyByteSource:asCharSource(java.nio.charset.Charset)" : null,
  "com.google.common.collect.Maps$MapDifferenceImpl:areEqual()" : null,
  "com.google.common.graph.AbstractNetwork:adjacentEdges(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object)" : "Returns an immutable bimap containing a single entry.",
  "com.google.common.hash.BloomFilter:apply(java.lang.Object)" : "* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #mightContain}\n   *     instead.",
  "com.google.common.collect.TreeRangeMap$SubRangeMap:getEntry(java.lang.Comparable)" : null,
  "com.google.common.math.BigIntegerMath:factorial(int)" : "* Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1}\n   * if {@code n == 0}.\n   *\n   * <p><b>Warning:</b> the result takes <i>O(n log n)</i> space, so use cautiously.\n   *\n   * <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced\n   * multiplies. It also removes all the 2s from the intermediate products (shifting them back in at\n   * the end).\n   *\n   * @throws IllegalArgumentException if {@code n < 0}",
  "com.google.common.io.CharSource:concat(java.util.Iterator)" : "* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from\n   * the source will contain the concatenated data from the streams of the underlying sources.\n   *\n   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n   * close the open underlying stream.\n   *\n   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method\n   * is called. This will fail if the iterator is infinite and may cause problems if the iterator\n   * eagerly fetches data for each source when iterated (rather than producing sources that only\n   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if\n   * possible.\n   *\n   * @param sources the sources to concatenate\n   * @return a {@code CharSource} containing the concatenated data\n   * @throws NullPointerException if any of {@code sources} is {@code null}\n   * @since 15.0",
  "com.google.common.collect.TreeBasedTable:create(java.util.Comparator,java.util.Comparator)" : "* Creates an empty {@code TreeBasedTable} that is ordered by the specified comparators.\n   *\n   * @param rowComparator the comparator that orders the row keys\n   * @param columnComparator the comparator that orders the column keys",
  "com.google.common.collect.Iterables:removeAll(java.lang.Iterable,java.util.Collection)" : "* Removes, from an iterable, every element that belongs to the provided collection.\n   *\n   * <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and\n   * {@link Iterators#removeAll} otherwise.\n   *\n   * @param removeFrom the iterable to (potentially) remove elements from\n   * @param elementsToRemove the elements to remove\n   * @return {@code true} if any element was removed from {@code iterable}",
  "com.google.common.reflect.TypeToken:newArrayClassOrGenericArrayType(java.lang.reflect.Type)" : "* Creates an array class if {@code componentType} is a class, or else, a {@link\n   * GenericArrayType}. This is what Java7 does for generic array type parameters.",
  "com.google.common.cache.LocalCache$Segment:clearKeyReferenceQueue()" : null,
  "com.google.common.reflect.TypeResolver$TypeTable$1:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)" : "* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another\n     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which\n     * doesn't try to resolve any type variable on generic declarations that are already being\n     * resolved.\n     *\n     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",
  "com.google.common.collect.Queues:synchronizedQueue(java.util.Queue)" : "* Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee\n   * serial access, it is critical that <b>all</b> access to the backing queue is accomplished\n   * through the returned queue.\n   *\n   * <p>It is imperative that the user manually synchronize on the returned queue when accessing the\n   * queue's iterator:\n   *\n   * {@snippet :\n   * Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create());\n   * ...\n   * queue.add(element);  // Needn't be in synchronized block\n   * ...\n   * synchronized (queue) {  // Must synchronize on queue!\n   *   Iterator<E> i = queue.iterator(); // Must be in synchronized block\n   *   while (i.hasNext()) {\n   *     foo(i.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>Failure to follow this advice may result in non-deterministic behavior.\n   *\n   * <p>The returned queue will be serializable if the specified queue is serializable.\n   *\n   * @param queue the queue to be wrapped in a synchronized view\n   * @return a synchronized view of the specified queue\n   * @since 14.0",
  "com.google.common.collect.Iterators:tryFind(java.util.Iterator,com.google.common.base.Predicate)" : "* Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the\n   * given predicate, if such an element exists. If no such element is found, an empty {@link\n   * Optional} will be returned from this method and the iterator will be left exhausted: its {@code\n   * hasNext()} method will return {@code false}.\n   *\n   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}\n   * is matched in {@code iterator}, a NullPointerException will be thrown.\n   *\n   * @since 11.0",
  "com.google.common.collect.MapMaker:getInitialCapacity()" : null,
  "com.google.common.collect.ImmutableSortedMap:copyOfInternal(java.util.Map,java.util.Comparator)" : null,
  "com.google.common.primitives.UnsignedInteger:<init>(int)" : null,
  "com.google.common.primitives.Ints:tryParse(java.lang.String)" : "* Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}\n   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n   *\n   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of\n   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n   * and returns {@code null} if non-ASCII digits are present in the string.\n   *\n   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link\n   * Integer#parseInt(String)} accepts them.\n   *\n   * @param string the string representation of an integer value\n   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has\n   *     a length of zero or cannot be parsed as an integer value\n   * @throws NullPointerException if {@code string} is {@code null}\n   * @since 11.0",
  "com.google.common.reflect.Invokable$ConstructorInvokable:isVarArgs()" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated()" : "* @since 15.0",
  "com.google.common.graph.Graphs$TransposedNetwork:predecessors(java.lang.Object)" : null,
  "com.google.common.util.concurrent.TimeoutFuture:<init>(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.primitives.UnsignedInteger:minus(com.google.common.primitives.UnsignedInteger)" : "* Returns the result of subtracting this and {@code val}. If the result would be negative,\n   * returns the low 32 bits of the result.\n   *\n   * @since 14.0",
  "com.google.common.util.concurrent.FuturesGetChecked:getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class)" : "Implementation of {@link Futures#getChecked(Future, Class)}.",
  "com.google.common.reflect.TypeToken$TypeCollector$1:getRawType(java.lang.Object)" : null,
  "com.google.common.collect.Maps$MapDifferenceImpl:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:getConflictingStackTrace()" : null,
  "com.google.common.collect.Cut$BelowValue:isLessThan(java.lang.Comparable)" : null,
  "com.google.common.collect.ArrayListMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.cache.LocalCache$Strength$3:defaultEquivalence()" : "* Returns the default equivalence strategy used to compare and hash keys or values referenced\n     * at this strength. This strategy will be used unless the user explicitly specifies an\n     * alternate strategy.",
  "com.google.common.primitives.ImmutableDoubleArray$Builder:expandedCapacity(int,int)" : null,
  "com.google.common.collect.Range$RangeLexOrdering:compare(com.google.common.collect.Range,com.google.common.collect.Range)" : null,
  "com.google.common.math.Quantiles$Scale:indexes(java.util.Collection)" : "* Specifies multiple quantile indexes to be calculated, each index being the k in the kth\n     * q-quantile.\n     *\n     * @param indexes the quantile indexes, each of which must be in the inclusive range [0, q] for\n     *     q-quantiles; the order of the indexes is unimportant, duplicates will be ignored, and the\n     *     set will be snapshotted when this method is called\n     * @throws IllegalArgumentException if {@code indexes} is empty",
  "com.google.common.cache.CacheBuilder:weakKeys()" : "* Specifies that each key (not value) stored in the cache should be wrapped in a {@link\n   * WeakReference} (by default, strong references are used).\n   *\n   * <p><b>Warning:</b> when this method is used, the resulting cache will use identity ({@code ==})\n   * comparison to determine equality of keys. Its {@link Cache#asMap} view will therefore\n   * technically violate the {@link Map} specification (in the same way that {@link IdentityHashMap}\n   * does).\n   *\n   * <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size}, but\n   * will never be visible to read or write operations; such entries are cleaned up as part of the\n   * routine maintenance described in the class javadoc.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalStateException if the key strength was already set",
  "com.google.common.collect.ImmutableRangeSet$Builder:add(com.google.common.collect.Range)" : "* Add the specified range to this builder. Adjacent ranges are permitted and will be merged,\n     * but overlapping ranges will cause an exception when {@link #build()} is called.\n     *\n     * @throws IllegalArgumentException if {@code range} is empty",
  "com.google.common.collect.Multimaps:asMap(com.google.common.collect.SetMultimap)" : "* Returns {@link SetMultimap#asMap multimap.asMap()}, with its type corrected from {@code Map<K,\n   * Collection<V>>} to {@code Map<K, Set<V>>}.\n   *\n   * @since 15.0",
  "com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset:forwardMultiset()" : null,
  "com.google.common.collect.ImmutableList$SubList:subList(int,int)" : null,
  "com.google.common.collect.LinkedListMultimap:removeNode(com.google.common.collect.LinkedListMultimap$Node)" : "* Removes the specified node from the linked list. This method is only intended to be used from\n   * the {@code Iterator} classes. See also {@link LinkedListMultimap#removeAllNodes(Object)}.",
  "com.google.common.collect.Maps$AbstractFilteredMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.AbstractIterator:peek()" : "* Returns the next element in the iteration without advancing the iteration, according to the\n   * contract of {@link PeekingIterator#peek()}.\n   *\n   * <p>Implementations of {@code AbstractIterator} that wish to expose this functionality should\n   * implement {@code PeekingIterator}.",
  "com.google.common.collect.Synchronized$SynchronizedTable:values()" : null,
  "com.google.common.collect.Maps$SortedAsMapView:firstKey()" : null,
  "com.google.common.collect.TreeRangeSet:create(java.lang.Iterable)" : "* Returns a {@code TreeRangeSet} representing the union of the specified ranges.\n   *\n   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. An\n   * element will be contained in this {@code RangeSet} if and only if it is contained in at least\n   * one {@code Range} in {@code ranges}.\n   *\n   * @since 21.0",
  "com.google.common.reflect.Types$WildcardTypeImpl:getLowerBounds()" : null,
  "com.google.common.util.concurrent.FuturesGetChecked:wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)" : null,
  "com.google.common.collect.MapMakerInternalMap$ValueIterator:next()" : null,
  "com.google.common.util.concurrent.ListeningExecutorService:awaitTermination(java.time.Duration)" : "* Duration-based overload of {@link #awaitTermination(long, TimeUnit)}.\n   *\n   * @since 32.1.0",
  "com.google.common.collect.ImmutableSet:isHashCodeFast()" : "Returns {@code true} if the {@code hashCode()} method runs quickly.",
  "com.google.common.base.CaseFormat$2:normalizeWord(java.lang.String)" : null,
  "com.google.common.collect.TreeMultimap:asMap()" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link\n   * NavigableMap}, instead of the {@link java.util.Map} specified in the {@link Multimap}\n   * interface.\n   *\n   * @since 14.0 (present with return type {@code SortedMap} since 2.0)",
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added\n   * @since 31.0",
  "com.google.common.collect.AbstractBiMap$Inverse:values()" : null,
  "com.google.common.collect.TreeRangeSet:enclosesAll(com.google.common.collect.RangeSet)" : null,
  "com.google.common.collect.Multimaps$CustomSortedSetMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.IndexedImmutableSet:createAsList()" : null,
  "com.google.common.math.StatsAccumulator:<init>()" : "Creates a new accumulator.",
  "com.google.common.collect.CompoundOrdering:hashCode()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readLong()" : null,
  "com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:delegate()" : null,
  "com.google.common.io.AppendableWriter:write(int)" : null,
  "com.google.common.collect.Maps$IteratorBasedAbstractMap:entrySpliterator()" : null,
  "com.google.common.collect.MultimapBuilder$ArrayListSupplier:get()" : null,
  "com.google.common.cache.LocalCache$WriteThroughEntry:hashCode()" : null,
  "com.google.common.collect.SingletonImmutableList:isPartialView()" : null,
  "com.google.common.collect.Maps$EntrySet:remove(java.lang.Object)" : null,
  "com.google.common.hash.LittleEndianByteArray:<init>()" : "Deter instantiation of this class.",
  "com.google.common.escape.ArrayBasedUnicodeEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)" : null,
  "com.google.common.math.IntMath:saturatedMultiply(int,int)" : "* Returns the product of {@code a} and {@code b} unless it would overflow or underflow in which\n   * case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.\n   *\n   * @since 20.0",
  "com.google.common.collect.DiscreteDomain$BigIntegerDomain:distance(java.math.BigInteger,java.math.BigInteger)" : null,
  "com.google.common.collect.AbstractBiMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:removeIf(java.util.function.Predicate)" : null,
  "com.google.common.util.concurrent.ForwardingExecutorService:submit(java.util.concurrent.Callable)" : null,
  "com.google.common.collect.DenseImmutableTable$Row:keyToIndex()" : null,
  "com.google.common.collect.Sets$ImprovedAbstractSet:retainAll(java.util.Collection)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:unlock()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)" : null,
  "com.google.common.escape.ArrayBasedCharEscaper:escape(char)" : "* Escapes a single character using the replacement array and safe range values. If the given\n   * character does not have an explicit replacement and lies outside the safe range then {@link\n   * #escapeUnsafe} is called.\n   *\n   * @return the replacement characters, or {@code null} if no escaping was required",
  "com.google.common.graph.AbstractNetwork:connectedPredicate(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedLong:hashCode()" : null,
  "com.google.common.collect.ImmutableListMultimap:copyOf(com.google.common.collect.Multimap)" : "* Returns an immutable multimap containing the same mappings as {@code multimap}. The generated\n   * multimap's key and value orderings correspond to the iteration ordering of the {@code\n   * multimap.asMap()} view.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws NullPointerException if any key or value in {@code multimap} is null",
  "com.google.common.primitives.UnsignedLong:dividedBy(com.google.common.primitives.UnsignedLong)" : "* Returns the result of dividing this by {@code val}.\n   *\n   * @since 14.0",
  "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:shutdownNow()" : null,
  "com.google.common.base.Splitter:on(java.util.regex.Pattern)" : "* Returns a splitter that considers any subsequence matching {@code pattern} to be a separator.\n   * For example, {@code Splitter.on(Pattern.compile(\"\\r?\\n\")).split(entireFile)} splits a string\n   * into lines whether it uses DOS-style or UNIX-style line terminators.\n   *\n   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This\n   *     pattern may not match the empty string.\n   * @return a splitter, with default settings, that uses this pattern\n   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string",
  "com.google.common.collect.TreeRangeSet$Complement:remove(com.google.common.collect.Range)" : null,
  "com.google.common.collect.AbstractBiMap$Inverse:<init>(java.util.Map,com.google.common.collect.AbstractBiMap)" : null,
  "com.google.common.reflect.ClassPath$ResourceInfo:getFile()" : "Returns the file that includes this resource.",
  "com.google.common.graph.StandardMutableValueGraph:putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.CountingInputStream:mark(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:get(int)" : null,
  "com.google.common.collect.Lists:newCopyOnWriteArrayList(java.lang.Iterable)" : "* Creates a {@code CopyOnWriteArrayList} instance containing the given elements.\n   *\n   * @param elements the elements that the list should contain, in order\n   * @return a new {@code CopyOnWriteArrayList} containing those elements\n   * @since 12.0",
  "com.google.common.cache.LocalCache$HashIterator:advanceTo(com.google.common.cache.ReferenceEntry)" : "* Advances to the given entry. Returns true if the entry was valid, false if it should be\n     * skipped.",
  "com.google.common.cache.LocalCache$WeakEntry:setWriteTime(long)" : null,
  "com.google.common.collect.Maps$KeySet:isEmpty()" : null,
  "com.google.common.collect.CompactHashMap:adjustAfterRemove(int,int)" : "* Updates the index an iterator is pointing to after a call to remove: returns the index of the\n   * entry that should be looked at after a removal on indexRemoved, with indexBeforeRemove as the\n   * index that *was* the next entry that would be looked at.",
  "com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Graph,java.lang.Iterable)" : "* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph\n   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}\n   * from {@code graph} for which both nodes are contained by {@code nodes}.\n   *\n   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",
  "com.google.common.collect.Maps$UnmodifiableEntrySet:hashCode()" : null,
  "com.google.common.collect.ForwardingMultiset:standardCount(java.lang.Object)" : "* A sensible, albeit inefficient, definition of {@link #count} in terms of {@link #entrySet}. If\n   * you override {@link #entrySet}, you may wish to override {@link #count} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ForwardingSortedMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$KeySet:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:clear()" : null,
  "com.google.common.io.LittleEndianDataInputStream:readFloat()" : "* Reads a {@code float} as specified by {@link DataInputStream#readFloat()}, except using\n   * little-endian byte order.\n   *\n   * @return the next four bytes of the input stream, interpreted as a {@code float} in\n   *     little-endian byte order\n   * @throws IOException if an I/O error occurs",
  "com.google.common.reflect.Reflection:getPackageName(java.lang.String)" : "* Returns the package name of {@code classFullName} according to the Java Language Specification\n   * (section 6.7). Unlike {@link Class#getPackage}, this method only parses the class name, without\n   * attempting to define the {@link Package} and hence load files.",
  "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.lang.Iterable)" : "* Returns an immutable sorted set containing the given elements sorted by the given {@code\n   * Comparator}. When multiple elements are equivalent according to {@code compare()}, only the\n   * first one specified is included. This method iterates over {@code elements} at most once.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",
  "com.google.common.collect.EnumHashBiMap:create(java.util.Map)" : "* Constructs a new bimap with the same mappings as the specified map. If the specified map is an\n   * {@code EnumHashBiMap} or an {@link EnumBiMap}, the new bimap has the same key type as the input\n   * bimap. Otherwise, the specified map must contain at least one mapping, in order to determine\n   * the key type.\n   *\n   * @param map the map whose mappings are to be placed in this map\n   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an {@code EnumHashBiMap}\n   *     instance and contains no mappings",
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble:trySplit()" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:forEachEntry(java.util.function.ObjIntConsumer)" : null,
  "com.google.common.collect.Maps:toMap(java.lang.Iterable,com.google.common.base.Function)" : "* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value\n   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of\n   * the first appearance of each key in {@code keys}.\n   *\n   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code\n   * valueFunction} will be applied to more than one instance of that key and, if it is, which\n   * result will be mapped to that key in the returned map.\n   *\n   * <p>If {@code keys} is a {@link Set}, a live view can be obtained instead of a copy using {@link\n   * Maps#asMap(Set, Function)}.\n   *\n   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:\n   *\n   * {@snippet :\n   * import static com.google.common.collect.ImmutableMap.toImmutableMap;\n   * ...\n   * ImmutableMap<Color, String> colorNames =\n   *     allColors.stream().collect(toImmutableMap(c -> c, c -> c.toString()));\n   * }\n   *\n   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys\n   * and values in the map are.\n   *\n   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code\n   *     valueFunction} produces {@code null} for any key\n   * @since 14.0",
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:addAll(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableSortedSet:emptySet(java.util.Comparator)" : null,
  "com.google.common.graph.ImmutableGraph$Builder:putEdge(com.google.common.graph.EndpointPair)" : "* Adds an edge connecting {@code endpoints} (in the order, if any, specified by {@code\n     * endpoints}) if one is not already present.\n     *\n     * <p>If this graph is directed, {@code endpoints} must be ordered and the added edge will be\n     * directed; if it is undirected, the added edge will be undirected.\n     *\n     * <p>If this graph is directed, {@code endpoints} must be ordered.\n     *\n     * <p>If either or both endpoints are not already present in this graph, this method will\n     * silently {@link #addNode(Object) add} each missing endpoint to the graph.\n     *\n     * @return this {@code Builder} object\n     * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n     *     #allowsSelfLoops()}\n     * @throws IllegalArgumentException if the endpoints are unordered and the graph is directed",
  "com.google.common.collect.ImmutableMapKeySet:iterator()" : null,
  "com.google.common.collect.ObjectArrays:newArray(java.lang.Class,int)" : "* Returns a new array of the given length with the specified component type.\n   *\n   * @param type the component type\n   * @param length the length of the new array",
  "com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ValueGraph)" : "Returns an immutable copy of {@code graph}.",
  "com.google.common.io.ByteSource:copyTo(com.google.common.io.ByteSink)" : "* Copies the contents of this byte source to the given {@code ByteSink}.\n   *\n   * @return the number of bytes copied\n   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n   *     sink}",
  "com.google.common.base.CaseFormat$StringConverter:toString()" : null,
  "com.google.common.collect.Count:<init>(int)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:lock()" : null,
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:<init>(java.util.NavigableMap,com.google.common.collect.Range)" : null,
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:hashFloodingDetected(java.lang.Object[])" : "* Checks the whole hash table for poor hash distribution. Takes O(n) in the worst case, O(n /\n     * log n) on average.\n     *\n     * <p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many\n     * exactly matching hash codes, which would cause construction to take O(n^2), but can't detect\n     * e.g. hash codes adversarially designed to go into ascending table locations, which keeps\n     * construction O(n) (as desired) but then can have O(n) queries later.\n     *\n     * <p>If this returns false, then no query can take more than O(log n).\n     *\n     * <p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains\n     * operations take expected O(1) time but with high probability take O(log n) for at least some\n     * element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis)\n     *\n     * <p>This method may return {@code true} even on truly random input, but {@code\n     * ImmutableSetTest} tests that the probability of that is low.",
  "com.google.common.util.concurrent.Striped$LargeLazyStriped:<init>(int,com.google.common.base.Supplier)" : null,
  "com.google.common.math.DoubleMath:checkFinite(double)" : null,
  "com.google.common.collect.ImmutableSetMultimap$EntrySet:isPartialView()" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.MutableClassToInstanceMap:delegate()" : null,
  "com.google.common.collect.Synchronized$SynchronizedSet:<init>(java.util.Set,java.lang.Object)" : null,
  "com.google.common.math.DoubleUtils:getSignificand(double)" : null,
  "com.google.common.util.concurrent.AbstractFuture:getFutureValue(com.google.common.util.concurrent.ListenableFuture)" : "* Returns a value that satisfies the contract of the {@link #value} field based on the state of\n   * given future.\n   *\n   * <p>This is approximately the inverse of {@link #getDoneValue(Object)}",
  "com.google.common.base.Stopwatch:isRunning()" : "* Returns {@code true} if {@link #start()} has been called on this stopwatch, and {@link #stop()}\n   * has not been called since the last call to {@code start()}.",
  "com.google.common.collect.Iterables:contains(java.lang.Iterable,java.lang.Object)" : "* Returns {@code true} if {@code iterable} contains any element {@code o} for which {@code\n   * Objects.equals(o, element)} would return {@code true}. Otherwise returns {@code false}, even in\n   * cases where {@link Collection#contains} might throw {@link NullPointerException} or {@link\n   * ClassCastException}.",
  "com.google.common.collect.Synchronized$SynchronizedCollection:stream()" : null,
  "com.google.common.collect.AbstractBiMap$Inverse:checkValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)" : "* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May\n   * be called only by a thread currently occupying this monitor.\n   *\n   * @return whether the guard is now satisfied\n   * @throws InterruptedException if interrupted while waiting",
  "com.google.common.io.ReaderInputStream:grow(java.nio.CharBuffer)" : "Returns a new CharBuffer identical to buf, except twice the capacity.",
  "com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable:cancel(boolean)" : null,
  "com.google.common.hash.AbstractHashFunction:hashBytes(byte[],int,int)" : null,
  "com.google.common.collect.EmptyContiguousSet:range()" : null,
  "com.google.common.collect.Maps$IteratorBasedAbstractMap:entrySet()" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,char,char)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.graph.UndirectedMultiNetworkConnections:getReference(java.lang.ref.Reference)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:remove(java.lang.Object)" : null,
  "com.google.common.reflect.ClassPath:toFile(java.net.URL)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:areEqual(double,double)" : null,
  "com.google.common.io.AppendableWriter:<init>(java.lang.Appendable)" : "* Creates a new writer that appends everything it writes to {@code target}.\n   *\n   * @param target target to which to append output",
  "com.google.common.collect.EnumHashBiMap:clear()" : null,
  "com.google.common.collect.Multimaps$CustomMultimap:createCollection()" : null,
  "com.google.common.reflect.TypeToken:getCovariantTypeResolver()" : null,
  "com.google.common.base.Splitter:split(java.lang.CharSequence)" : "* Splits {@code sequence} into string components and makes them available through an {@link\n   * Iterator}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use\n   * {@link #splitToList(CharSequence)}. Java 8+ users may prefer {@link #splitToStream} instead.\n   *\n   * @param sequence the sequence of characters to split\n   * @return an iteration over the segments split from the parameter",
  "com.google.common.hash.AbstractByteHasher:putShort(short)" : null,
  "com.google.common.io.CharSource$CharSequenceCharSource:isEmpty()" : null,
  "com.google.common.graph.ImmutableNetwork:asGraph()" : null,
  "com.google.common.math.Stats:of(java.util.stream.DoubleStream)" : "* Returns statistics over a dataset containing the given values. The stream will be completely\n   * consumed by this method.\n   *\n   * <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect\n   * the values using {@link #toStats()} instead.\n   *\n   * @param values a series of values\n   * @since 28.2 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.MinMaxPriorityQueue$Heap:compareElements(int,int)" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:<init>(com.google.common.cache.CacheBuilder)" : null,
  "com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction)" : null,
  "com.google.common.collect.Maps$FilteredEntryMap:createKeySet()" : null,
  "com.google.thirdparty.publicsuffix.PublicSuffixType:getLeafNodeCode()" : null,
  "com.google.common.collect.Tables$TransposeTable:row(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Digit:<init>()" : null,
  "com.google.common.cache.LocalCache$WeightedWeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.util.concurrent.Striped$WeakSafeLock:newCondition()" : null,
  "com.google.common.collect.FluentIterable$3$1:get(int)" : "* Returns the element at the specified position in this fluent iterable.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note\n   * that this throws different exception types, and throws an exception if {@code null} would be\n   * returned).\n   *\n   * @param position position of the element to return\n   * @return the element at the specified position in this fluent iterable\n   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to\n   *     the size of this fluent iterable",
  "com.google.common.base.Stopwatch:createStarted()" : "* Creates (and starts) a new stopwatch using {@link System#nanoTime} as its time source.\n   *\n   * @since 15.0",
  "com.google.common.graph.UndirectedGraphConnections:ofImmutable(java.util.Map)" : null,
  "com.google.common.collect.ImmutableSetMultimap:emptySet(java.util.Comparator)" : null,
  "com.google.common.primitives.UnsignedBytes:checkedCast(long)" : "* Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if\n   * possible.\n   *\n   * @param value a value between 0 and 255 inclusive\n   * @return the {@code byte} value that, when treated as unsigned, equals {@code value}\n   * @throws IllegalArgumentException if {@code value} is negative or greater than 255",
  "com.google.common.graph.AbstractValueGraph:outDegree(java.lang.Object)" : null,
  "com.google.common.primitives.Floats:reverse(float[],int,int)" : "* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive. This is equivalent to {@code\n   * Collections.reverse(Floats.asList(array).subList(fromIndex, toIndex))}, but is likely to be\n   * more efficient.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 23.1",
  "com.google.common.collect.DescendingMultiset:toString()" : null,
  "com.google.common.collect.ImmutableMultimap:createValues()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:get(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>The returned collection is not serializable.",
  "com.google.common.collect.ForwardingMap:standardContainsKey(java.lang.Object)" : "* A sensible, albeit inefficient, definition of {@link #containsKey} in terms of the {@code\n   * iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to\n   * override {@link #containsKey} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:setResult(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:compute(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.util.concurrent.AbstractFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)" : "* {@inheritDoc}\n   *\n   * @since 10.0",
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readUTF()" : null,
  "com.google.common.reflect.TypeToken:<init>()" : "* Constructs a new type token of {@code T}.\n   *\n   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the\n   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * TypeToken<List<String>> t = new TypeToken<List<String>>() {};\n   * }",
  "com.google.common.collect.Synchronized$SynchronizedSortedMap:comparator()" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getPreviousInWriteQueue()" : null,
  "com.google.common.primitives.Bytes:<init>()" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:successors(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:count(java.util.Comparator,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:size()" : null,
  "com.google.common.collect.EnumMultiset:create(java.lang.Class)" : "Creates an empty {@code EnumMultiset}.",
  "com.google.common.collect.ImmutableAsList:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.reflect.Invokable:isVolatile()" : "Returns true if the field is volatile.",
  "com.google.common.primitives.ImmutableDoubleArray$AsList:spliterator()" : null,
  "com.google.common.collect.Sets$DescendingSet:tailSet(java.lang.Object)" : null,
  "com.google.common.collect.Ordering:sortedCopy(java.lang.Iterable)" : null,
  "com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[])" : null,
  "com.google.common.primitives.ImmutableIntArray$AsList:contains(java.lang.Object)" : null,
  "com.google.common.collect.MapMaker:<init>()" : "* Constructs a new {@code MapMaker} instance with default settings, including strong keys, strong\n   * values, and no automatic eviction of any kind.",
  "com.google.common.reflect.TypeToken:getRawType()" : "* Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by {@link\n   * java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by {@link\n   * java.lang.reflect.Method#getReturnType} of the same method object. Specifically:\n   *\n   * <ul>\n   *   <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned.\n   *   <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is\n   *       returned.\n   *   <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array\n   *       class. For example: {@code List<Integer>[] => List[]}.\n   *   <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound\n   *       is returned. For example: {@code <X extends Foo> => Foo}.\n   * </ul>",
  "com.google.common.collect.Lists$StringAsImmutableList:<init>(java.lang.String)" : null,
  "com.google.common.util.concurrent.MoreExecutors:shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)" : "* Shuts down the given executor service gradually, first disabling new submissions and later, if\n   * necessary, cancelling remaining tasks.\n   *\n   * <p>The method takes the following steps:\n   *\n   * <ol>\n   *   <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.\n   *   <li>awaits executor service termination for half of the specified timeout.\n   *   <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling\n   *       pending tasks and interrupting running tasks.\n   *   <li>awaits executor service termination for the other half of the specified timeout.\n   * </ol>\n   *\n   * <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link\n   * ExecutorService#shutdownNow()} and returns.\n   *\n   * <p>For a version of this method that waits <i>indefinitely</i>, use {@link\n   * ExecutorService#close}.\n   *\n   * @param service the {@code ExecutorService} to shut down\n   * @param timeout the maximum time to wait for the {@code ExecutorService} to terminate\n   * @param unit the time unit of the timeout argument\n   * @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false}\n   *     if the call timed out or was interrupted\n   * @since 17.0",
  "com.google.common.collect.Iterables:removeIf(java.lang.Iterable,com.google.common.base.Predicate)" : "* Removes, from an iterable, every element that satisfies the provided predicate.\n   *\n   * <p>Removals may or may not happen immediately as each element is tested against the predicate.\n   * The behavior of this method is not specified if {@code predicate} is dependent on {@code\n   * removeFrom}.\n   *\n   * <p><b>Java 8+ users:</b> if {@code removeFrom} is a {@link Collection}, use {@code\n   * removeFrom.removeIf(predicate)} instead.\n   *\n   * @param removeFrom the iterable to (potentially) remove elements from\n   * @param predicate a predicate that determines whether an element should be removed\n   * @return {@code true} if any elements were removed from the iterable\n   * @throws UnsupportedOperationException if the iterable does not support {@code remove()}.\n   * @since 2.0",
  "com.google.common.collect.MutableClassToInstanceMap:create()" : "* Returns a new {@code MutableClassToInstanceMap} instance backed by a {@link HashMap} using the\n   * default initial capacity and load factor.",
  "com.google.common.collect.ImmutableMultimap:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap$NodeIterator:set(java.util.Map$Entry)" : null,
  "com.google.common.collect.ImmutableTable$Builder:orderRowsBy(java.util.Comparator)" : "Specifies the ordering of the generated table's rows.",
  "com.google.common.base.Enums$StringConverter:equals(java.lang.Object)" : null,
  "com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:hashCode()" : null,
  "com.google.common.collect.ImmutableBiMap$Builder:<init>(int)" : null,
  "com.google.common.collect.Iterators:unmodifiableIterator(com.google.common.collect.UnmodifiableIterator)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this\n   * @since 10.0",
  "com.google.common.graph.StandardMutableNetwork:removeNode(java.lang.Object)" : null,
  "com.google.common.hash.Fingerprint2011:shiftMix(long)" : null,
  "com.google.common.collect.ImmutableMultimap:createAsMap()" : null,
  "com.google.common.collect.Collections2:safeContains(java.util.Collection,java.lang.Object)" : "* Delegates to {@link Collection#contains}. Returns {@code false} if the {@code contains} method\n   * throws a {@code ClassCastException} or {@code NullPointerException}.",
  "com.google.common.collect.DescendingMultiset:createEntrySet()" : null,
  "com.google.common.util.concurrent.RateLimiter:tryAcquire(long,java.util.concurrent.TimeUnit)" : "* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the\n   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit\n   * would not have been granted before the timeout expired.\n   *\n   * <p>This method is equivalent to {@code tryAcquire(1, timeout, unit)}.\n   *\n   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.\n   * @param unit the time unit of the timeout argument\n   * @return {@code true} if the permit was acquired, {@code false} otherwise\n   * @throws IllegalArgumentException if the requested number of permits is negative or zero",
  "com.google.common.io.AppendableWriter:append(java.lang.CharSequence,int,int)" : null,
  "com.google.common.collect.ImmutableListMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder)" : null,
  "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:processRemaining(java.nio.ByteBuffer)" : null,
  "com.google.common.util.concurrent.Futures$FutureCombiner:call(java.util.concurrent.Callable,java.util.concurrent.Executor)" : "* Creates the {@link ListenableFuture} which will return the result of calling {@link\n     * Callable#call} in {@code combiner} when all futures complete, using the specified {@code\n     * executor}.\n     *\n     * <p>If the combiner throws a {@code CancellationException}, the returned future will be\n     * cancelled.\n     *\n     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and returned as the cause of the new {@code\n     * ExecutionException} that gets thrown by the returned combined future.\n     *\n     * <p>Canceling this future will attempt to cancel all the component futures.\n     *\n     * @return a future whose result is based on {@code combiner} (or based on the input futures\n     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code\n     *     FutureCombiner}). Even if you don't care about the value of the future, you should\n     *     typically check whether it failed: See <a\n     *     href=\"https://errorprone.info/bugpattern/FutureReturnValueIgnored\">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",
  "com.google.common.collect.CompactHashMap:containsKey(java.lang.Object)" : null,
  "com.google.common.math.PairedStatsAccumulator:ensureInUnitRange(double)" : null,
  "com.google.common.reflect.TypeResolver$TypeVariableKey:equals(java.lang.Object)" : null,
  "com.google.common.io.CharSource$CharSequenceCharSource:<init>(java.lang.CharSequence)" : null,
  "com.google.common.base.CharMatcher:collapseFrom(java.lang.CharSequence,char)" : "* Returns a string copy of the input character sequence, with each group of consecutive matching\n   * BMP characters replaced by a single replacement character. For example:\n   *\n   * {@snippet :\n   * CharMatcher.anyOf(\"eko\").collapseFrom(\"bookkeeper\", '-')\n   * }\n   *\n   * ... returns {@code \"b-p-r\"}.\n   *\n   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching\n   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each\n   * character.\n   *\n   * @param sequence the character sequence to replace matching groups of characters in\n   * @param replacement the character to append to the result string in place of each group of\n   *     matching characters in {@code sequence}\n   * @return the new string",
  "com.google.common.util.concurrent.Monitor:signalNextWaiter()" : "* Signals some other thread waiting on a satisfied guard, if one exists.\n   *\n   * <p>We manage calls to this method carefully, to signal only when necessary, but never losing a\n   * signal, which is the classic problem of this kind of concurrency construct. We must signal if\n   * the current thread is about to relinquish the lock and may have changed the state protected by\n   * the monitor, thereby causing some guard to be satisfied.\n   *\n   * <p>In addition, any thread that has been signalled when its guard was satisfied acquires the\n   * responsibility of signalling the next thread when it again relinquishes the lock. Unlike a\n   * normal Condition, there is no guarantee that an interrupted thread has not been signalled,\n   * since the concurrency control must manage multiple Conditions. So this method must generally be\n   * called when waits are interrupted.\n   *\n   * <p>On the other hand, if a signalled thread wakes up to discover that its guard is still not\n   * satisfied, it does *not* need to call this method before returning to wait. This can only\n   * happen due to spurious wakeup (ignorable) or another thread acquiring the lock before the\n   * current thread can and returning the guard to the unsatisfied state. In the latter case the\n   * other thread (last thread modifying the state protected by the monitor) takes over the\n   * responsibility of signalling the next waiter.\n   *\n   * <p>This method must not be called from within a beginWaitingFor/endWaitingFor block, or else\n   * the current thread's guard might be mistakenly signalled, leading to a lost signal.",
  "com.google.common.base.Converter$ConverterComposition:correctedDoForward(java.lang.Object)" : null,
  "com.google.common.reflect.Invokable$MethodInvokable:isVarArgs()" : null,
  "com.google.common.io.CharSequenceReader:remaining()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:instance()" : null,
  "com.google.common.base.CharMatcher$ForPredicate:matches(char)" : null,
  "com.google.common.collect.LinkedListMultimap$NodeIterator:remove()" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:call()" : null,
  "com.google.common.util.concurrent.AbstractIdleService:awaitTerminated()" : "* @since 15.0",
  "com.google.common.collect.ImmutableMultiset:add(java.lang.Object,int)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.graph.AbstractGraphBuilder:<init>(boolean)" : "* Creates a new instance with the specified edge directionality.\n   *\n   * @param directed if true, creates an instance for graphs whose edges are each directed; if\n   *     false, creates an instance for graphs whose edges are each undirected.",
  "com.google.common.hash.Murmur3_32HashFunction:toString()" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addValue(boolean)" : "* Adds an unnamed value to the formatted output.\n     *\n     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a\n     * readable name.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",
  "com.google.common.primitives.Longs:tryParse(java.lang.String,int)" : "* Parses the specified string as a signed long value using the specified radix. The ASCII\n   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n   *\n   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of\n   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n   * and returns {@code null} if non-ASCII digits are present in the string.\n   *\n   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link\n   * Integer#parseInt(String)} accepts them.\n   *\n   * @param string the string representation of a long value\n   * @param radix the radix to use when parsing\n   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if\n   *     {@code string} has a length of zero or cannot be parsed as a long value\n   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >\n   *     Character.MAX_RADIX}\n   * @throws NullPointerException if {@code string} is {@code null}\n   * @since 19.0",
  "com.google.common.collect.ImmutableSet:copyOf(java.util.Iterator)" : "* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n   * each appears first in the source iterator.\n   *\n   * @throws NullPointerException if any of {@code elements} is null",
  "com.google.common.collect.Lists$CharSequenceAsList:<init>(java.lang.CharSequence)" : null,
  "com.google.common.collect.ImmutableSortedMultiset$Builder:setCount(java.lang.Object,int)" : "* Adds or removes the necessary occurrences of an element such that the element attains the\n     * desired count.\n     *\n     * @param element the element to add or remove occurrences of\n     * @param count the desired count of the element in this multiset\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code element} is null\n     * @throws IllegalArgumentException if {@code count} is negative",
  "com.google.common.collect.ImmutableMapValues$SerializedForm:readResolve()" : null,
  "com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys\n   * and values are the result of applying the provided mapping functions to the input elements.\n   * Entries appear in the result {@code ImmutableMap} in encounter order.\n   *\n   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code\n   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs\n   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which\n   * throws an {@code IllegalStateException}.)\n   *\n   * @since 21.0",
  "com.google.common.collect.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.ImmutableMapEntrySet:isPartialView()" : null,
  "com.google.common.collect.DenseImmutableTable:getValue(int)" : null,
  "com.google.common.collect.ImmutableRangeSet$SerializedForm:<init>(com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.FluentIterable:toMultiset()" : "* Returns an {@code ImmutableMultiset} containing all of the elements from this fluent iterable.\n   *\n   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to\n   * {@code stream.collect()}.\n   *\n   * @throws NullPointerException if any element is null\n   * @since 19.0",
  "com.google.common.collect.MapMakerInternalMap$Segment:clearReferenceQueue(java.lang.ref.ReferenceQueue)" : null,
  "com.google.common.primitives.Chars:indexOf(char[],char)" : "* Returns the index of the first appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code char} values, possibly empty\n   * @param target a primitive {@code char} value\n   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.escape.ArrayBasedEscaperMap:create(java.util.Map)" : "* Returns a new ArrayBasedEscaperMap for creating ArrayBasedCharEscaper or\n   * ArrayBasedUnicodeEscaper instances.\n   *\n   * @param replacements a map of characters to their escaped representations",
  "com.google.common.collect.RegularImmutableSortedMultiset:count(java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:previous()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.hash.Funnels$SinkAsStream:toString()" : null,
  "com.google.common.collect.FilteredEntryMultimap$Keys:entrySet()" : null,
  "com.google.common.collect.Maps:unmodifiableOrNull(java.util.Map$Entry)" : null,
  "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:run()" : null,
  "com.google.common.collect.ForwardingMultiset$StandardElementSet:iterator()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:copyOf(double[])" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.Multimaps$CustomListMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the factory and the backing map",
  "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:awaitTermination(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.util.concurrent.AtomicDoubleArray:getAndUpdate(int,java.util.function.DoubleUnaryOperator)" : "* Atomically updates the element at index {@code i} with the results of applying the given\n   * function to the current value.\n   *\n   * @param i the index to update\n   * @param updaterFunction the update function\n   * @return the previous value\n   * @since 31.1",
  "com.google.common.collect.ForwardingMap:standardContainsValue(java.lang.Object)" : "* A sensible definition of {@link #containsValue} in terms of the {@code iterator} method of\n   * {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link\n   * #containsValue} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:lastEntry()" : null,
  "com.google.common.collect.ImmutableListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.ForwardingMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.Cut$BelowValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.graph.ElementOrder:createMap(int)" : "Returns an empty mutable map whose keys will respect this {@link ElementOrder}.",
  "com.google.common.primitives.ImmutableLongArray:get(int)" : "* Returns the {@code long} value present at the given index.\n   *\n   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to\n   *     {@link #length}",
  "com.google.common.graph.AbstractDirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ArrayTable:columnMap()" : null,
  "com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.Charset,int)" : "* Creates a new input stream that will encode the characters from {@code reader} into bytes using\n   * the given character set. Malformed input and unmappable characters will be replaced.\n   *\n   * @param reader input source\n   * @param charset character set used for encoding chars to bytes\n   * @param bufferSize size of internal input and output buffers\n   * @throws IllegalArgumentException if bufferSize is non-positive",
  "com.google.common.collect.Multimaps$CustomSortedSetMultimap:createAsMap()" : null,
  "com.google.common.reflect.TypeToken:getSubtype(java.lang.Class)" : "* Returns subtype of {@code this} with {@code subclass} as the raw class. For example, if this is\n   * {@code Iterable<String>} and {@code subclass} is {@code List}, {@code List<String>} is\n   * returned.",
  "com.google.common.util.concurrent.AtomicLongMap:containsKey(java.lang.Object)" : "Returns true if this map contains a mapping for the specified key.",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollFirstEntry()" : null,
  "com.google.common.collect.Platform:newArray(java.lang.Object[],int)" : null,
  "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier:equals(java.lang.Object)" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:column(java.lang.Object)" : null,
  "com.google.common.collect.CompactLinkedHashSet:insertEntry(int,java.lang.Object,int,int)" : null,
  "com.google.common.collect.CartesianList:contains(java.lang.Object)" : null,
  "com.google.common.eventbus.EventBus:identifier()" : "* Returns the identifier for this event bus.\n   *\n   * @since 19.0",
  "com.google.common.collect.ForwardingMap:keySet()" : null,
  "com.google.common.collect.Collections2$FilteredCollection:clear()" : null,
  "com.google.common.collect.ArrayTable:set(int,int,java.lang.Object)" : "* Associates {@code value} with the specified row and column indices. The logic {@code\n   * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same\n   * behavior, but this method runs more quickly.\n   *\n   * @param rowIndex position of the row key in {@link #rowKeyList()}\n   * @param columnIndex position of the row key in {@link #columnKeyList()}\n   * @param value value to store in the table\n   * @return the previous value with the specified row and column\n   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than\n   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal\n   *     to the number of allowed column keys",
  "com.google.common.hash.BloomFilter:putAll(com.google.common.hash.BloomFilter)" : "* Combines this Bloom filter with another Bloom filter by performing a bitwise OR of the\n   * underlying data. The mutations happen to <b>this</b> instance. Callers must ensure the Bloom\n   * filters are appropriately sized to avoid saturating them.\n   *\n   * @param that The Bloom filter to combine this Bloom filter with. It is not mutated.\n   * @throws IllegalArgumentException if {@code isCompatible(that) == false}\n   * @since 15.0",
  "com.google.common.base.Converter$ReverseConverter:correctedDoForward(java.lang.Object)" : null,
  "com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Graph)" : "* Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset\n   * of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting\n   * and ending with the same node.\n   *\n   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",
  "com.google.common.hash.Murmur3_32HashFunction:<init>(int,boolean)" : null,
  "com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.lang.Iterable)" : "* Returns an immutable sorted multiset containing the given elements sorted by the given {@code\n   * Comparator}. This method iterates over {@code elements} at most once.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(java.lang.Object)" : null,
  "com.google.common.collect.Lists$ReverseList:listIterator(int)" : null,
  "com.google.common.net.InetAddresses:getTeredoInfo(java.net.Inet6Address)" : "* Returns the Teredo information embedded in a Teredo address.\n   *\n   * @param ip {@link Inet6Address} to be examined for embedded Teredo information\n   * @return extracted {@code TeredoInfo}\n   * @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address",
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added",
  "com.google.common.util.concurrent.AtomicDouble:compareAndSet(double,double)" : "* Atomically sets the value to the given updated value if the current value is <a\n   * href=\"#bitEquals\">bitwise equal</a> to the expected value.\n   *\n   * @param expect the expected value\n   * @param update the new value\n   * @return {@code true} if successful. False return indicates that the actual value was not\n   *     bitwise equal to the expected value.",
  "com.google.common.reflect.Invokable:isPackagePrivate()" : "Returns true if the element is package-private.",
  "com.google.common.collect.ImmutableMap:writeReplace()" : "* Returns a serializable form of this object. Non-public subclasses should not override this\n   * method. Publicly-accessible subclasses must override this method and should return a subclass\n   * of SerializedForm whose readResolve() method returns objects of the subclass type.",
  "com.google.common.base.CharMatcher$Or:toString()" : null,
  "com.google.common.primitives.ImmutableDoubleArray$Builder:add(double)" : "* Appends {@code value} to the end of the values the built {@link ImmutableDoubleArray} will\n     * contain.",
  "com.google.common.collect.ForwardingSortedMultiset:comparator()" : null,
  "com.google.common.util.concurrent.ListenableFutureTask:get(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.ForwardingList:standardListIterator()" : "* A sensible default implementation of {@link #listIterator()}, in terms of {@link\n   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override\n   * {@link #listIterator()} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ImmutableMapValues:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.hash.Funnels$SequentialFunnel:funnel(java.lang.Iterable,com.google.common.hash.PrimitiveSink)" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:parallelStream()" : null,
  "com.google.common.graph.Graphs:<init>()" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder)" : "* Recursively scan the given directory, adding resources for each file encountered. Symlinks\n     * which have already been traversed in the current tree path will be skipped to eliminate\n     * cycles; otherwise symlinks are traversed.\n     *\n     * @param directory the root of the directory to scan\n     * @param packagePrefix resource path prefix inside {@code classloader} for any files found\n     *     under {@code directory}\n     * @param currentPath canonical files already visited in the current directory tree path, for\n     *     cycle elimination",
  "com.google.common.collect.Synchronized$SynchronizedQueue:<init>(java.util.Queue,java.lang.Object)" : null,
  "com.google.common.hash.Funnels$StringCharsetFunnel:toString()" : null,
  "com.google.common.cache.AbstractLoadingCache:apply(java.lang.Object)" : null,
  "com.google.common.primitives.Bytes:indexOf(byte[],byte[])" : "* Returns the start position of the first occurrence of the specified {@code target} within\n   * {@code array}, or {@code -1} if there is no such occurrence.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n   * i, i + target.length)} contains exactly the same elements as {@code target}.\n   *\n   * @param array the array to search for the sequence {@code target}\n   * @param target the array to search for as a sub-sequence of {@code array}",
  "com.google.common.collect.Synchronized$SynchronizedSortedSet:last()" : null,
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:compareTo(java.util.concurrent.Delayed)" : null,
  "com.google.common.collect.Maps$KeySet:clear()" : null,
  "com.google.common.eventbus.Dispatcher$ImmediateDispatcher:dispatch(java.lang.Object,java.util.Iterator)" : null,
  "com.google.common.collect.TransformedListIterator:nextIndex()" : null,
  "com.google.common.collect.StandardRowSortedTable$RowSortedMap:lastKey()" : null,
  "com.google.common.util.concurrent.Monitor:enterInterruptibly()" : "* Enters this monitor. Blocks indefinitely, but may be interrupted.\n   *\n   * @throws InterruptedException if interrupted while waiting",
  "com.google.common.graph.EndpointPair:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.math.IntMath:isPowerOfTwo(int)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:tryStartTiming(com.google.common.util.concurrent.Service)" : "* Attempts to start the timer immediately prior to the service being started via {@link\n     * Service#startAsync()}.",
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object,boolean)" : null,
  "com.google.common.graph.EdgesConnecting:<init>(java.util.Map,java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:internalArrayStart()" : null,
  "com.google.common.util.concurrent.MoreExecutors:submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)" : "* Submits the task and adds a listener that adds the future to {@code queue} when it completes.",
  "com.google.common.collect.ImmutableTable$SerializedForm:readResolve()" : null,
  "com.google.common.collect.ImmutableMultimap$Keys:writeReplace()" : null,
  "com.google.common.collect.ImmutableBiMap:forcePut(java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the bimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.primitives.Floats:reverse(float[])" : "* Reverses the elements of {@code array}. This is equivalent to {@code\n   * Collections.reverse(Floats.asList(array))}, but is likely to be more efficient.\n   *\n   * @since 23.1",
  "com.google.common.collect.ImmutableTable$Builder:<init>()" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableTable#builder}.",
  "com.google.common.collect.ReverseOrdering:equals(java.lang.Object)" : null,
  "com.google.common.collect.Maps$NavigableKeySet:pollFirst()" : null,
  "com.google.common.util.concurrent.CollectionFuture$Present:<init>(java.lang.Object)" : null,
  "com.google.thirdparty.publicsuffix.TrieParser:parseFullString(java.lang.String)" : null,
  "com.google.common.base.CharMatcher:isSmall(int,int)" : null,
  "com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object[])" : "* Returns an unmodifiable list containing the specified first element and backed by the specified\n   * array of additional elements. Changes to the {@code rest} array will be reflected in the\n   * returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.\n   *\n   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,\n   * Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count.\n   *\n   * <p>The returned list is serializable and implements {@link RandomAccess}.\n   *\n   * @param first the first element\n   * @param rest an array of additional elements, possibly empty\n   * @return an unmodifiable list containing the specified elements",
  "com.google.common.hash.AbstractHashFunction:hashLong(long)" : null,
  "com.google.common.collect.ImmutableEnumSet:toString()" : null,
  "com.google.common.util.concurrent.Striped$SmallLazyStriped:getAt(int)" : null,
  "com.google.common.graph.ElementOrder:natural()" : "* Returns an instance which specifies that the natural ordering of the elements is guaranteed.",
  "com.google.common.eventbus.EventBus:post(java.lang.Object)" : "* Posts an event to all registered subscribers. This method will return successfully after the\n   * event has been posted to all subscribers, and regardless of any exceptions thrown by\n   * subscribers.\n   *\n   * <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not\n   * already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.\n   *\n   * @param event event to post.",
  "com.google.common.cache.ForwardingCache:invalidate(java.lang.Object)" : null,
  "com.google.common.math.StatsAccumulator:max()" : "* Returns the highest value in the dataset. The count must be non-zero.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it\n   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link\n   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values\n   * only then the result is the highest finite value. If it contains {@link\n   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.util.concurrent.ClosingFuture$Combiner:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * {@code ClosingFuture}-returning function to their values. The function can use a {@link\n     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those\n     * captured by the returned {@link ClosingFuture}).\n     *\n     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs\n     * fail, so will the returned step.\n     *\n     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be\n     * cancelled.\n     *\n     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown\n     * {@code ExecutionException} will be extracted and used as the failure of the derived step.\n     *\n     * <p>If the combiningCallable throws any other exception, it will be used as the failure of the\n     * derived step.\n     *\n     * <p>If an exception is thrown after the combiningCallable creates a {@code ClosingFuture},\n     * then none of the closeable objects in that {@code ClosingFuture} will be closed.\n     *\n     * <p>Usage guidelines for this method:\n     *\n     * <ul>\n     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a\n     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,\n     *       Executor)} instead, with a function that returns the next value directly.\n     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}\n     *       for every closeable object this step creates in order to capture it for later closing.\n     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code\n     *       ClosingFuture} call {@link #from(ListenableFuture)}.\n     * </ul>\n     *\n     * <p>The same warnings about doing heavyweight operations within {@link\n     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",
  "com.google.common.collect.Platform:preservesInsertionOrderOnAddsSet()" : "* Returns the platform preferred set implementation that preserves insertion order when used only\n   * for insertions.",
  "com.google.common.collect.ImmutableMap$Builder:<init>(int)" : null,
  "com.google.common.util.concurrent.ForwardingListeningExecutorService:delegate()" : null,
  "com.google.common.graph.AbstractDirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)" : null,
  "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:tryAdvance(java.util.function.Consumer)" : null,
  "com.google.common.io.ByteSource:contentEquals(com.google.common.io.ByteSource)" : "* Checks that the contents of this byte source are equal to the contents of the given byte\n   * source.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source or {@code other}",
  "com.google.common.io.ByteStreams:limit(java.io.InputStream,long)" : "* Wraps a {@link InputStream}, limiting the number of bytes which can be read.\n   *\n   * @param in the input stream to be wrapped\n   * @param limit the maximum number of bytes to be read\n   * @return a length-limited {@link InputStream}\n   * @since 14.0 (since 1.0 as com.google.common.io.LimitInputStream)",
  "com.google.common.net.InetAddresses:<init>()" : null,
  "com.google.common.collect.Multimaps$AsMap:createEntrySet()" : null,
  "com.google.common.collect.ByFunctionOrdering:toString()" : null,
  "com.google.common.collect.Maps:transformValues(java.util.NavigableMap,com.google.common.base.Function)" : "* Returns a view of a navigable map where each value is transformed by a function. All other\n   * properties of the map, such as iteration order, are left intact. For example, the code:\n   *\n   * {@snippet :\n   * NavigableMap<String, Integer> map = Maps.newTreeMap();\n   * map.put(\"a\", 4);\n   * map.put(\"b\", 9);\n   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);\n   * NavigableMap<String, Double> transformed =\n   *      Maps.transformNavigableValues(map, sqrt);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {a=2.0, b=3.0}}.\n   *\n   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports\n   * removal operations, and these are reflected in the underlying map.\n   *\n   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided\n   * that the function is capable of accepting null input. The transformed map might contain null\n   * values, if the function sometimes gives a null result.\n   *\n   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map\n   * to be a view, but it means that the function will be applied many times for bulk operations\n   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code\n   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a\n   * view, copy the returned map into a new map of your choosing.\n   *\n   * @since 13.0",
  "com.google.common.math.DoubleMath:isMathematicalInteger(double)" : "* Returns {@code true} if {@code x} represents a mathematical integer.\n   *\n   * <p>This is equivalent to, but not necessarily implemented as, the expression {@code\n   * !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x)}.",
  "com.google.common.collect.RegularImmutableSortedMultiset:<init>(java.util.Comparator)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:valueStrength()" : null,
  "com.google.common.collect.TreeRangeMap:span()" : null,
  "com.google.common.base.NullnessCasts:uncheckedCastNullableTToT(java.lang.Object)" : "* Accepts a {@code @Nullable T} and returns a plain {@code T}, without performing any check that\n   * that conversion is safe.\n   *\n   * <p>This method is intended to help with usages of type parameters that have {@linkplain\n   * ParametricNullness parametric nullness}. If a type parameter instead ranges over only non-null\n   * types (or if the type is a non-variable type, like {@code String}), then code should almost\n   * never use this method, preferring instead to call {@code requireNonNull} so as to benefit from\n   * its runtime check.\n   *\n   * <p>An example use case for this method is in implementing an {@code Iterator<T>} whose {@code\n   * next} field is lazily initialized. The type of that field would be {@code @Nullable T}, and the\n   * code would be responsible for populating a \"real\" {@code T} (which might still be the value\n   * {@code null}!) before returning it to callers. Depending on how the code is structured, a\n   * nullness analysis might not understand that the field has been populated. To avoid that problem\n   * without having to add {@code @SuppressWarnings}, the code can call this method.\n   *\n   * <p>Why <i>not</i> just add {@code SuppressWarnings}? The problem is that this method is\n   * typically useful for {@code return} statements. That leaves the code with two options: Either\n   * add the suppression to the whole method (which turns off checking for a large section of code),\n   * or extract a variable, and put the suppression on that. However, a local variable typically\n   * doesn't work: Because nullness analyses typically infer the nullness of local variables,\n   * there's no way to assign a {@code @Nullable T} to a field {@code T foo;} and instruct the\n   * analysis that that means \"plain {@code T}\" rather than the inferred type {@code @Nullable T}.\n   * (Even if supported added {@code @NonNull}, that would not help, since the problem case\n   * addressed by this method is the case in which {@code T} has parametric nullness -- and thus its\n   * value may be legitimately {@code null}.)",
  "com.google.common.collect.JdkBackedImmutableSet:isPartialView()" : null,
  "com.google.common.graph.AbstractGraph:incidentEdgeOrder()" : null,
  "com.google.common.collect.ComparisonChain$1:compare(java.lang.Object,java.lang.Object,java.util.Comparator)" : "* Compares two objects using a comparator, <i>if</i> the result of this comparison chain has not\n   * already been determined.",
  "com.google.common.collect.GeneralRange:hasLowerBound()" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:outDegree(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher:or(com.google.common.base.CharMatcher)" : "* Returns a matcher that matches any character matched by either this matcher or {@code other}.",
  "com.google.common.collect.Lists$StringAsImmutableList:get(int)" : null,
  "com.google.common.collect.Sets$CartesianSet:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:startupTimes()" : null,
  "com.google.common.collect.Lists:reverse(java.util.List)" : "* Returns a reversed view of the specified list. For example, {@code\n   * Lists.reverse(Arrays.asList(1, 2, 3))} returns a list containing {@code 3, 2, 1}. The returned\n   * list is backed by this list, so changes in the returned list are reflected in this list, and\n   * vice-versa. The returned list supports all of the optional list operations supported by this\n   * list.\n   *\n   * <p>The returned list is random-access if the specified list is random access.\n   *\n   * @since 7.0",
  "com.google.common.collect.ForwardingMapEntry:getValue()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner2:call(com.google.common.util.concurrent.ClosingFuture$Combiner2$ClosingFunction2,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * combining function to their values. The function can use a {@link DeferredCloser} to capture\n     * objects to be closed when the pipeline is done.\n     *\n     * <p>If this combiner was returned by {@link #whenAllSucceed(ClosingFuture, ClosingFuture)} and\n     * any of the inputs fail, so will the returned step.\n     *\n     * <p>If the function throws a {@code CancellationException}, the pipeline will be cancelled.\n     *\n     * <p>If the function throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and used as the failure of the derived step.",
  "com.google.common.collect.ImmutableRangeSet$AsSet:writeReplace()" : null,
  "com.google.common.primitives.UnsignedLongs:divide(long,long)" : "* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit\n   * quantities.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Long#divideUnsigned(long, long)} instead.\n   *\n   * @param dividend the dividend (numerator)\n   * @param divisor the divisor (denominator)\n   * @throws ArithmeticException if divisor is 0",
  "com.google.common.util.concurrent.ClosingFuture$Combiner5:call(com.google.common.util.concurrent.ClosingFuture$Combiner5$ClosingFunction5,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * combining function to their values. The function can use a {@link DeferredCloser} to capture\n     * objects to be closed when the pipeline is done.\n     *\n     * <p>If this combiner was returned by {@link #whenAllSucceed(ClosingFuture, ClosingFuture,\n     * ClosingFuture, ClosingFuture, ClosingFuture)} and any of the inputs fail, so will the\n     * returned step.\n     *\n     * <p>If the function throws a {@code CancellationException}, the pipeline will be cancelled.\n     *\n     * <p>If the function throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and used as the failure of the derived step.",
  "com.google.common.primitives.UnsignedLong:valueOf(java.lang.String)" : "* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an\n   * unsigned {@code long} value.\n   *\n   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}\n   *     value",
  "com.google.common.collect.Synchronized$SynchronizedMap:isEmpty()" : null,
  "com.google.common.collect.Range:apply(java.lang.Comparable)" : "* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}\n   *     instead.",
  "com.google.common.util.concurrent.CombinedFuture:interruptTask()" : null,
  "com.google.common.primitives.Doubles:reverse(double[],int,int)" : "* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive. This is equivalent to {@code\n   * Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))}, but is likely to be\n   * more efficient.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 23.1",
  "com.google.common.collect.MapMakerInternalMap$CleanupMapTask:<init>(com.google.common.collect.MapMakerInternalMap)" : null,
  "com.google.common.hash.HashCode$IntHashCode:padToLong()" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:addLeftChild(java.lang.Object,int)" : null,
  "com.google.common.primitives.Ints:checkedCast(long)" : "* Returns the {@code int} value that is equal to {@code value}, if possible.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Use {@link\n   * Math#toIntExact(long)} instead, but be aware that that method throws {@link\n   * ArithmeticException} rather than {@link IllegalArgumentException}.\n   *\n   * @param value any value in the range of the {@code int} type\n   * @return the {@code int} value that equals {@code value}\n   * @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or\n   *     less than {@link Integer#MIN_VALUE}",
  "com.google.common.collect.AbstractBiMap$EntrySet:delegate()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:expand()" : "Expands the table if possible.",
  "com.google.common.collect.AbstractIndexedListIterator:previousIndex()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:write(int)" : null,
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided\n   * @since 31.0",
  "com.google.common.primitives.Doubles$DoubleArrayAsList:toString()" : null,
  "com.google.common.collect.Maps:asMap(java.util.NavigableSet,com.google.common.base.Function)" : "* Returns a view of the navigable set as a map, mapping keys from the set according to the\n   * specified function.\n   *\n   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping\n   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code\n   * entrySet} views of the returned map iterate in the same order as the backing set.\n   *\n   * <p>Modifications to the backing set are read through to the returned map. The returned map\n   * supports removal operations if the backing set does. Removal operations write through to the\n   * backing set. The returned map does not support put operations.\n   *\n   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the\n   * set does not contain {@code null}, because the view cannot stop {@code null} from being added\n   * to the set.\n   *\n   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},\n   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for\n   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when\n   * calling methods on the resulting map view.\n   *\n   * @since 14.0",
  "com.google.common.io.MoreFiles:deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream)" : "* Secure method for deleting the contents of a directory using {@code SecureDirectoryStream}.\n   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",
  "com.google.common.base.Present:or(com.google.common.base.Optional)" : null,
  "com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[],int,int)" : null,
  "com.google.common.base.Equivalence:equivalent(java.lang.Object,java.lang.Object)" : "* Returns {@code true} if the given objects are considered equivalent.\n   *\n   * <p>This method describes an <i>equivalence relation</i> on object references, meaning that for\n   * all references {@code x}, {@code y}, and {@code z} (any of which may be null):\n   *\n   * <ul>\n   *   <li>{@code equivalent(x, x)} is true (<i>reflexive</i> property)\n   *   <li>{@code equivalent(x, y)} and {@code equivalent(y, x)} each return the same result\n   *       (<i>symmetric</i> property)\n   *   <li>If {@code equivalent(x, y)} and {@code equivalent(y, z)} are both true, then {@code\n   *       equivalent(x, z)} is also true (<i>transitive</i> property)\n   * </ul>\n   *\n   * <p>Note that all calls to {@code equivalent(x, y)} are expected to return the same result as\n   * long as neither {@code x} nor {@code y} is modified.",
  "com.google.common.math.DoubleUtils:nextDown(double)" : null,
  "com.google.common.cache.CacheBuilderSpec:toParsableString()" : "* Returns a string that can be used to parse an equivalent {@code CacheBuilderSpec}. The order\n   * and form of this representation is not guaranteed, except that reparsing its output will\n   * produce a {@code CacheBuilderSpec} equal to this instance.",
  "com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Object[])" : "* Appends the string representation of each of {@code parts}, using the previously configured\n   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n   * Iterable)}, except that it does not throw {@link IOException}.",
  "com.google.common.util.concurrent.AbstractIdleService:stopAsync()" : "* @since 15.0",
  "com.google.common.collect.ImmutableMultiset:copyOf(java.util.Iterator)" : "* Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n   * described in the class documentation.\n   *\n   * @throws NullPointerException if any of {@code elements} is null",
  "com.google.common.collect.MapMakerInternalMap$Segment:newEntryArray(int)" : null,
  "com.google.common.util.concurrent.ForwardingFluentFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)" : null,
  "com.google.common.graph.ImmutableNetwork:targetNodeFn(com.google.common.graph.Network)" : null,
  "com.google.common.reflect.Types:subtypeOf(java.lang.reflect.Type)" : "Returns a new {@link WildcardType} with {@code upperBound}.",
  "com.google.common.collect.Maps$MapDifferenceImpl:entriesOnlyOnRight()" : null,
  "com.google.common.base.Preconditions:<init>()" : null,
  "com.google.common.collect.Maps:safeGet(java.util.Map,java.lang.Object)" : "* Delegates to {@link Map#get}. Returns {@code null} on {@code ClassCastException} and {@code\n   * NullPointerException}.",
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap:createAsMap()" : null,
  "com.google.common.hash.HashCode$BytesHashCode:<init>(byte[])" : null,
  "com.google.common.base.AbstractIterator:tryToComputeNext()" : null,
  "com.google.common.reflect.Invokable:returning(com.google.common.reflect.TypeToken)" : "Explicitly specifies the return type of this {@code Invokable}.",
  "com.google.common.reflect.Invokable$ConstructorInvokable:mayNeedHiddenThis()" : null,
  "com.google.common.math.Stats:mean()" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of the\n   * values. The count must be non-zero.\n   *\n   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of\n   * the arithmetic mean of the population.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it\n   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the\n   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values\n   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.\n   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link\n   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.\n   *\n   * <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link\n   * Stats} instance.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added",
  "com.google.common.primitives.Booleans$BooleanArrayAsList:equals(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:toString()" : null,
  "com.google.common.cache.LocalCache$LocalLoadingCache:getAll(java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.Futures$CallbackListener:run()" : null,
  "com.google.common.collect.ImmutableRangeSet:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(java.time.Duration,java.time.Duration)" : "* Returns a {@link Scheduler} that schedules the task using the {@link\n     * ScheduledExecutorService#scheduleAtFixedRate} method.\n     *\n     * @param initialDelay the time to delay first execution\n     * @param period the period between successive executions of the task\n     * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.Sets$FilteredNavigableSet:ceiling(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Maps$DescendingMap:tailMap(java.lang.Object,boolean)" : null,
  "com.google.common.collect.CompactHashSet:createWithExpectedSize(int)" : "* Creates a {@code CompactHashSet} instance, with a high enough \"initial capacity\" that it\n   * <i>should</i> hold {@code expectedSize} elements without growth.\n   *\n   * @param expectedSize the number of elements you expect to add to the returned set\n   * @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize}\n   *     elements without resizing\n   * @throws IllegalArgumentException if {@code expectedSize} is negative",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(java.lang.String,java.lang.String,java.lang.Character)" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:<init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap)" : null,
  "com.google.common.net.HostSpecifier:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeMap:hashCode()" : null,
  "com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long,long)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.AbstractSortedMultiset:descendingIterator()" : null,
  "com.google.common.collect.DiscreteDomain$IntegerDomain:previous(java.lang.Integer)" : null,
  "com.google.common.cache.LocalCache$EntryFactory$4:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)" : null,
  "com.google.common.collect.AbstractSortedMultiset:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$KeySet:contains(java.lang.Object)" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap:builder()" : "Returns a new builder.",
  "com.google.common.collect.Multisets$ViewMultiset:iterator()" : null,
  "com.google.common.graph.Traverser$InsertionOrder$1:insertInto(java.util.Deque,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$KeySet:remove(java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap:keySet()" : null,
  "com.google.common.cache.CacheBuilder:getValueEquivalence()" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:contains(java.lang.Object)" : null,
  "com.google.common.collect.ArrayTable$ArrayMap:get(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken$ClassSet:readResolve()" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:submit(java.util.concurrent.Callable)" : null,
  "com.google.common.reflect.TypeParameter:equals(java.lang.Object)" : null,
  "com.google.common.reflect.AbstractInvocationHandler:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.math.LongMath:factorial(int)" : "* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if\n   * {@code n == 0}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.\n   *\n   * @throws IllegalArgumentException if {@code n < 0}",
  "com.google.common.hash.Murmur3_128HashFunction:<init>(int)" : null,
  "com.google.common.collect.Iterators$PeekingImpl:hasNext()" : null,
  "com.google.common.primitives.ImmutableLongArray$Builder:expandedCapacity(int,int)" : null,
  "com.google.common.collect.ForwardingBlockingDeque:putLast(java.lang.Object)" : null,
  "com.google.common.collect.Tables$TransposeTable:clear()" : null,
  "com.google.common.graph.StandardNetwork:incidentEdges(java.lang.Object)" : null,
  "com.google.common.collect.Collections2$TransformedCollection:<init>(java.util.Collection,com.google.common.base.Function)" : null,
  "com.google.common.collect.ImmutableMultiset$Builder:addAll(java.lang.Iterable)" : "* Adds each element of {@code elements} to the {@code ImmutableMultiset}.\n     *\n     * @param elements the {@code Iterable} to add to the {@code ImmutableMultiset}\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.graph.ElementOrder:sorted(java.util.Comparator)" : "* Returns an instance which specifies that the ordering of the elements is guaranteed to be\n   * determined by {@code comparator}.",
  "com.google.common.primitives.ImmutableDoubleArray:isEmpty()" : "Returns {@code true} if there are no values in this array ({@link #length} is zero).",
  "com.google.common.collect.HashMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.cache.AbstractCache:size()" : null,
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.util.concurrent.AtomicDouble:getAndAccumulate(double,java.util.function.DoubleBinaryOperator)" : "* Atomically updates the current value with the results of applying the given function to the\n   * current and given values.\n   *\n   * @param x the update value\n   * @param accumulatorFunction the accumulator function\n   * @return the previous value\n   * @since 31.1",
  "com.google.common.primitives.ImmutableIntArray:of(int)" : "Returns an immutable array containing a single value.",
  "com.google.common.base.CharMatcher:apply(java.lang.Character)" : "* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #matches}\n   *     instead.",
  "com.google.common.io.TempFileCreator$ThrowingCreator:createTempDir()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMultiset:standardRemove(java.lang.Object)" : "* A sensible definition of {@link #remove(Object)} in terms of {@link #remove(Object, int)}. If\n   * you override {@link #remove(Object, int)}, you may wish to override {@link #remove(Object)} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.base.AbstractIterator:endOfData()" : null,
  "com.google.common.collect.TreeMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.io.ByteStreams$LimitedInputStream:available()" : null,
  "com.google.common.collect.RegularImmutableTable:forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)" : "A factory that chooses the most space-efficient representation of the table.",
  "com.google.common.base.Functions:<init>()" : null,
  "com.google.common.cache.CacheLoader:loadAll(java.lang.Iterable)" : "* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link\n   * LoadingCache#getAll}.\n   *\n   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does\n   * contain will be cached, but {@code getAll} will throw an exception. If the returned map\n   * contains extra keys not present in {@code keys} then all returned entries will be cached, but\n   * only the entries for {@code keys} will be returned from {@code getAll}.\n   *\n   * <p>This method should be overridden when bulk retrieval is significantly more efficient than\n   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls\n   * to {@link LoadingCache#get} if this method is not overridden.\n   *\n   * @param keys the unique, non-null keys whose values should be loaded\n   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not\n   *     contain null values</b>\n   * @throws Exception if unable to load the result\n   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is\n   *     treated like any other {@code Exception} in all respects except that, when it is caught,\n   *     the thread's interrupt status is set\n   * @since 11.0",
  "com.google.common.collect.TreeMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:getDelegateIterator()" : null,
  "com.google.common.util.concurrent.AbstractTransformFuture:run()" : null,
  "com.google.common.base.Equivalence$EquivalentToPredicate:hashCode()" : null,
  "com.google.common.util.concurrent.MoreExecutors:useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:startUp()" : "* Start the service.\n   *\n   * <p>By default this method does nothing.",
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:delegate()" : null,
  "com.google.common.io.CharStreams$NullWriter:write(char[],int,int)" : null,
  "com.google.common.primitives.ImmutableIntArray$AsList:<init>(com.google.common.primitives.ImmutableIntArray)" : null,
  "com.google.common.collect.EnumMultiset:<init>(java.lang.Class)" : "Creates an empty {@code EnumMultiset}.",
  "com.google.common.collect.HashBiMap:values()" : null,
  "com.google.common.collect.MapMakerInternalMap:valueStrength()" : null,
  "com.google.common.collect.Multimaps$CustomSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)" : null,
  "com.google.common.hash.Hashing:murmur3_128()" : "* Returns a hash function implementing the <a\n   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">128-bit murmur3\n   * algorithm, x64 variant</a> (little-endian variant), using a seed value of zero.\n   *\n   * <p>The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F).",
  "com.google.common.collect.CompactHashing:getNext(int,int)" : "Returns the index, or 0 if the entry is \"null\".",
  "com.google.common.cache.LocalCache$SoftValueReference:waitForValue()" : null,
  "com.google.common.base.Predicates$NotPredicate:equals(java.lang.Object)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:create()" : "* Creates a new, empty {@code ConcurrentHashMultiset} using the default initial capacity, load\n   * factor, and concurrency settings.",
  "com.google.common.primitives.Longs:sortDescending(long[])" : "* Sorts the elements of {@code array} in descending order.\n   *\n   * @since 23.1",
  "com.google.common.reflect.Types$TypeVariableImpl:<init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])" : null,
  "com.google.common.io.LittleEndianDataOutputStream:writeChar(int)" : "* Writes a char as specified by {@link DataOutputStream#writeChar(int)}, except using\n   * little-endian byte order.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.escape.UnicodeEscaper:escapeSlow(java.lang.String,int)" : "* Returns the escaped form of a given literal string, starting at the given index. This method is\n   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is\n   * protected to allow subclasses to override the fastpath escaping function to inline their\n   * escaping test. See {@link CharEscaperBuilder} for an example usage.\n   *\n   * <p>This method is not reentrant and may only be invoked by the top level {@link\n   * #escape(String)} method.\n   *\n   * @param s the literal string to be escaped\n   * @param index the index to start escaping from\n   * @return the escaped form of {@code string}\n   * @throws NullPointerException if {@code string} is null\n   * @throws IllegalArgumentException if invalid surrogate characters are encountered",
  "com.google.common.hash.HashingOutputStream:hash()" : "* Returns the {@link HashCode} based on the data written to this stream. The result is\n   * unspecified if this method is called more than once on the same instance.",
  "com.google.common.hash.HashCode$BytesHashCode:writeBytesToImpl(byte[],int,int)" : null,
  "com.google.common.collect.RegularContiguousSet:equals(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher:matchesAnyOf(java.lang.CharSequence)" : "* Returns {@code true} if a character sequence contains at least one matching BMP character.\n   * Equivalent to {@code !matchesNoneOf(sequence)}.\n   *\n   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each\n   * character, until this returns {@code true} or the end is reached.\n   *\n   * @param sequence the character sequence to examine, possibly empty\n   * @return {@code true} if this matcher matches at least one character in the sequence\n   * @since 8.0",
  "com.google.common.util.concurrent.ServiceManager$Listener:failure(com.google.common.util.concurrent.Service)" : "* Called when a component service has {@linkplain State#FAILED failed}.\n     *\n     * @param service The service that failed.",
  "com.google.common.util.concurrent.Striped:semaphore(int,int)" : "* Creates a {@code Striped<Semaphore>} with eagerly initialized, strongly referenced semaphores,\n   * with the specified number of permits.\n   *\n   * @param stripes the minimum number of stripes (semaphores) required\n   * @param permits the number of permits in each semaphore\n   * @return a new {@code Striped<Semaphore>}",
  "com.google.common.collect.ImmutableSortedMap:createEntrySet()" : null,
  "com.google.common.util.concurrent.Futures:transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)" : "* Returns a new {@code Future} whose result is derived from the result of the given {@code\n   * Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and\n   * the function is not invoked). Example usage:\n   *\n   * {@snippet :\n   * ListenableFuture<QueryResult> queryFuture = ...;\n   * ListenableFuture<List<Row>> rowsFuture =\n   *     transform(queryFuture, QueryResult::getRows, executor);\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the warnings the {@link MoreExecutors#directExecutor} documentation.\n   *\n   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the\n   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel\n   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback\n   * in which it will attempt to cancel itself.\n   *\n   * <p>An example use of this method is to convert a serializable object returned from an RPC into\n   * a POJO.\n   *\n   * @param input The future to transform\n   * @param function A Function to transform the results of the provided future to the results of\n   *     the returned future.\n   * @param executor Executor to run the function in.\n   * @return A future that holds result of the transformation.\n   * @since 9.0 (in 2.0 as {@code compose})",
  "com.google.common.primitives.Chars$CharArrayAsList:subList(int,int)" : null,
  "com.google.common.io.CountingInputStream:reset()" : null,
  "com.google.common.collect.Sets:symmetricDifference(java.util.Set,java.util.Set)" : "* Returns an unmodifiable <b>view</b> of the symmetric difference of two sets. The returned set\n   * contains all elements that are contained in either {@code set1} or {@code set2} but not in\n   * both. The iteration order of the returned set is undefined.\n   *\n   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different\n   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a\n   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.\n   *\n   * @since 3.0",
  "com.google.common.collect.EnumMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:rebuildHashTable(int,java.lang.Object[],int)" : "Builds a new open-addressed hash table from the first n objects in elements.",
  "com.google.common.graph.Graph:predecessors(java.lang.Object)" : "* Returns a live view of all nodes in this graph adjacent to {@code node} which can be reached by\n   * traversing {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.\n   *\n   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.\n   *\n   * <p>If {@code node} is removed from the graph after this method is called, the {@code Set}\n   * {@code view} returned by this method will be invalidated, and will throw {@code\n   * IllegalStateException} if it is accessed in any way, with the following exceptions:\n   *\n   * <ul>\n   *   <li>{@code view.equals(view)} evaluates to {@code true} (but any other {@code equals()}\n   *       expression involving {@code view} will throw)\n   *   <li>{@code hashCode()} does not throw\n   *   <li>if {@code node} is re-added to the graph after having been removed, {@code view}'s\n   *       behavior is undefined\n   * </ul>\n   *\n   * @throws IllegalArgumentException if {@code node} is not an element of this graph",
  "com.google.common.collect.Interners$InternerImpl:intern(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap:isLiveForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : "* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}\n   * instead.",
  "com.google.common.cache.CacheStats:minus(com.google.common.cache.CacheStats)" : "* Returns a new {@code CacheStats} representing the difference between this {@code CacheStats}\n   * and {@code other}. Negative values, which aren't supported by {@code CacheStats} will be\n   * rounded up to zero.",
  "com.google.common.cache.CacheBuilderSpec:<init>(java.lang.String)" : null,
  "com.google.common.collect.CompactHashMap$MapEntry:updateLastKnownIndex()" : null,
  "com.google.common.collect.AbstractBiMap:setDelegates(java.util.Map,java.util.Map)" : "* Specifies the delegate maps going in each direction. Called by the constructor and by\n   * subclasses during deserialization.",
  "com.google.common.collect.Iterators:singletonIterator(java.lang.Object)" : "* Returns an iterator containing only {@code value}.\n   *\n   * <p>The {@link Iterable} equivalent of this method is {@link Collections#singleton}.",
  "com.google.common.collect.ForwardingSortedMultiset:standardPollFirstEntry()" : "* A sensible definition of {@link #pollFirstEntry()} in terms of {@code entrySet().iterator()}.\n   *\n   * <p>If you override {@link #entrySet()}, you may wish to override {@link #pollFirstEntry()} to\n   * forward to this implementation.",
  "com.google.common.primitives.ImmutableDoubleArray:stream()" : "* Returns a stream over the values in this array, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.Futures$InCompletionOrderFuture:pendingToString()" : null,
  "com.google.common.hash.HashingInputStream:reset()" : "* reset() is not supported for HashingInputStream.\n   *\n   * @throws IOException this operation is not supported",
  "com.google.common.collect.ForwardingMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:writeLock()" : null,
  "com.google.common.util.concurrent.AggregateFuture:afterDone()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,java.lang.Object)" : null,
  "com.google.common.util.concurrent.Striped$WeakSafeCondition:<init>(java.util.concurrent.locks.Condition,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock)" : null,
  "com.google.common.math.LongMath:isPrime(long)" : "* Returns {@code true} if {@code n} is a <a\n   * href=\"http://mathworld.wolfram.com/PrimeNumber.html\">prime number</a>: an integer <i>greater\n   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.\n   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be\n   * factored into smaller positive integers).\n   *\n   * <p>To test larger numbers, use {@link BigInteger#isProbablePrime}.\n   *\n   * @throws IllegalArgumentException if {@code n} is negative\n   * @since 20.0",
  "com.google.common.collect.ArrayTable$ArrayMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeMap:split(com.google.common.collect.Cut)" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:awaitTermination(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.primitives.Ints$LexicographicalComparator:compare(int[],int[])" : null,
  "com.google.common.graph.Traverser$Traversal:postOrder(java.util.Iterator)" : null,
  "com.google.common.collect.Synchronized:<init>()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * @param reference an object reference\n   * @param errorMessageTemplate a template for the exception message should the check fail. The\n   *     message is formed by replacing each {@code %s} placeholder in the template with an\n   *     argument. These are matched by position - the first {@code %s} gets {@code\n   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n   *     square braces. Unmatched placeholders will be left as-is.\n   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments\n   *     are converted to strings using {@link String#valueOf(Object)}.\n   * @return the non-null reference that was validated\n   * @throws NullPointerException if {@code reference} is null\n   * @see Verify#verifyNotNull Verify.verifyNotNull()",
  "com.google.common.collect.ImmutableBiMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder)" : null,
  "com.google.common.io.CharSource$AsByteSource:asCharSource(java.nio.charset.Charset)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorEntry(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableList:of()" : null,
  "com.google.common.util.concurrent.ImmediateFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.ImmutableMapEntrySet:isHashCodeFast()" : null,
  "com.google.common.collect.LinkedListMultimap:<init>()" : null,
  "com.google.common.collect.HashBasedTable:containsRow(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableSet:contains(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$StrongEntry:setValueReference(com.google.common.cache.LocalCache$ValueReference)" : null,
  "com.google.common.cache.LocalCache:usesValueReferences()" : null,
  "com.google.common.math.IntMath:isPrime(int)" : "* Returns {@code true} if {@code n} is a <a\n   * href=\"http://mathworld.wolfram.com/PrimeNumber.html\">prime number</a>: an integer <i>greater\n   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.\n   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be\n   * factored into smaller positive integers).\n   *\n   * <p>To test larger numbers, use {@link LongMath#isPrime} or {@link BigInteger#isProbablePrime}.\n   *\n   * @throws IllegalArgumentException if {@code n} is negative\n   * @since 20.0",
  "com.google.common.collect.ReverseNaturalOrdering:min(java.util.Iterator)" : null,
  "com.google.common.collect.ImmutableMultimap:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder} constructor.",
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:setWriteTime(long)" : null,
  "com.google.common.collect.StandardTable$TableSet:clear()" : null,
  "com.google.common.collect.HashMultiset:create(java.lang.Iterable)" : "* Creates a new {@code HashMultiset} containing the specified elements.\n   *\n   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.\n   *\n   * @param elements the elements that the multiset should contain",
  "com.google.common.collect.NullsLastOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.HashMultiset:forEachEntry(java.util.function.ObjIntConsumer)" : null,
  "com.google.common.collect.ImmutableList:replaceAll(java.util.function.UnaryOperator)" : "* Guaranteed to throw an exception and leave the list unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Sets:newHashSetWithExpectedSize(int)" : "* Returns a new hash set using the smallest initial table size that can hold {@code expectedSize}\n   * elements without resizing. Note that this is not what {@link HashSet#HashSet(int)} does, but it\n   * is what most users want and expect it to do.\n   *\n   * <p>This behavior can't be broadly guaranteed, but has been tested with OpenJDK 1.7 and 1.8.\n   *\n   * @param expectedSize the number of elements you expect to add to the returned set\n   * @return a new, empty hash set with enough capacity to hold {@code expectedSize} elements\n   *     without resizing\n   * @throws IllegalArgumentException if {@code expectedSize} is negative",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long,char)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.reflect.Invokable$MethodInvokable:getAnnotatedReturnType()" : null,
  "com.google.common.base.Converter$FunctionBasedConverter:hashCode()" : null,
  "com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)" : "* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each\n   * input element is mapped to one cell in the returned table, with the rows, columns, and values\n   * generated by applying the specified functions.\n   *\n   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time\n   * if the row, column, or value functions return null on any input.\n   *\n   * @since 21.0",
  "com.google.common.primitives.UnsignedLong:minus(com.google.common.primitives.UnsignedLong)" : "* Returns the result of subtracting this and {@code val}. If the result would have more than 64\n   * bits, returns the low 64 bits of the result.\n   *\n   * @since 14.0",
  "com.google.common.base.Absent:equals(java.lang.Object)" : null,
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:hash()" : null,
  "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$SetBuilderImpl)" : null,
  "com.google.common.primitives.UnsignedBytes:toString(byte,int)" : "* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n   * unsigned.\n   *\n   * @param x the value to convert to a string.\n   * @param radix the radix to use while working with {@code x}\n   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}\n   *     and {@link Character#MAX_RADIX}.\n   * @since 13.0",
  "com.google.common.collect.StandardRowSortedTable$RowSortedMap:comparator()" : null,
  "com.google.common.reflect.ClassPath$ResourceInfo:equals(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingDeque:getLast()" : null,
  "com.google.common.graph.MapRetrievalCache:addToCache(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Sets:newHashSet(java.lang.Iterable)" : "* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin\n   * convenience for creating an empty set then calling {@link Collection#addAll} or {@link\n   * Iterables#addAll}.\n   *\n   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link\n   * ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link\n   * FluentIterable} and call {@code elements.toSet()}.)\n   *\n   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)}\n   * instead.\n   *\n   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.\n   * Instead, use the {@code HashSet} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",
  "com.google.common.primitives.Ints$IntArrayAsList:toString()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : null,
  "com.google.common.collect.ArrayTable:cellSpliterator()" : null,
  "com.google.common.cache.CacheBuilder:softValues()" : "* Specifies that each value (not key) stored in the cache should be wrapped in a {@link\n   * SoftReference} (by default, strong references are used). Softly-referenced objects will be\n   * garbage-collected in a <i>globally</i> least-recently-used manner, in response to memory\n   * demand.\n   *\n   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache {@linkplain\n   * #maximumSize(long) maximum size} instead of using soft references. You should only use this\n   * method if you are well familiar with the practical consequences of soft references.\n   *\n   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})\n   * comparison to determine equality of values.\n   *\n   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},\n   * but will never be visible to read or write operations; such entries are cleaned up as part of\n   * the routine maintenance described in the class javadoc.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalStateException if the value strength was already set",
  "com.google.common.math.Quantiles$Scale:<init>(int)" : null,
  "com.google.common.collect.RegularContiguousSet:first()" : null,
  "com.google.common.graph.EndpointPair$Unordered:iterator()" : "Iterates in the order {@link #nodeU()}, {@link #nodeV()}.",
  "com.google.common.collect.Synchronized:listMultimap(com.google.common.collect.ListMultimap,java.lang.Object)" : null,
  "com.google.common.hash.HashCode$BytesHashCode:bits()" : null,
  "com.google.common.base.CharMatcher$Negated:matchesNoneOf(java.lang.CharSequence)" : null,
  "com.google.common.util.concurrent.AbstractIdleService:awaitRunning(java.time.Duration)" : "* @since 28.0",
  "com.google.common.collect.Collections2:isPermutation(java.util.List,java.util.List)" : "Returns {@code true} if the second list is a permutation of the first.",
  "com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard:isSatisfied()" : null,
  "com.google.common.collect.FilteredKeySetMultimap:createEntries()" : null,
  "com.google.common.collect.ImmutableBiMap:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder} constructor.",
  "com.google.common.base.Equivalence$Identity:doEquivalent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:createKeySet()" : null,
  "com.google.common.primitives.Floats:ensureCapacity(float[],int,int)" : "* Returns an array containing the same values as {@code array}, but guaranteed to be of a\n   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n   *\n   * @param array the source array\n   * @param minLength the minimum length the returned array must guarantee\n   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n   *     minLength}",
  "com.google.common.reflect.Types:getComponentType(java.lang.reflect.Type)" : null,
  "com.google.common.hash.MacHashFunction:supportsClone(javax.crypto.Mac)" : null,
  "com.google.common.graph.GraphBuilder:nodeOrder(com.google.common.graph.ElementOrder)" : "* Specifies the order of iteration for the elements of {@link Graph#nodes()}.\n   *\n   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",
  "com.google.common.collect.Collections2$TransformedCollection:isEmpty()" : null,
  "com.google.common.io.ByteSource:concat(java.util.Iterator)" : "* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from\n   * the source will contain the concatenated data from the streams of the underlying sources.\n   *\n   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n   * close the open underlying stream.\n   *\n   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method\n   * is called. This will fail if the iterator is infinite and may cause problems if the iterator\n   * eagerly fetches data for each source when iterated (rather than producing sources that only\n   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if\n   * possible.\n   *\n   * @param sources the sources to concatenate\n   * @return a {@code ByteSource} containing the concatenated data\n   * @throws NullPointerException if any of {@code sources} is {@code null}\n   * @since 15.0",
  "com.google.common.collect.Platform:tryWeakKeys(com.google.common.collect.MapMaker)" : "* Configures the given map maker to use weak keys, if possible; does nothing otherwise (i.e., in\n   * GWT). This is sometimes acceptable, when only server-side code could generate enough volume\n   * that reclamation becomes important.",
  "com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:setResult(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Maps$UnmodifiableBiMap:values()" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService$1:toString()" : null,
  "com.google.common.hash.HashCode:fromString(java.lang.String)" : "* Creates a {@code HashCode} from a hexadecimal ({@code base 16}) encoded string. The string must\n   * be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters.\n   *\n   * <p>This method accepts the exact format generated by {@link #toString}. If you require more\n   * lenient {@code base 16} decoding, please use {@link com.google.common.io.BaseEncoding#decode}\n   * (and pass the result to {@link #fromBytes}).\n   *\n   * @since 15.0",
  "com.google.common.collect.HashMultimap:create()" : "* Creates a new, empty {@code HashMultimap} with the default initial capacities.\n   *\n   * <p>You may also consider the equivalent {@code\n   * MultimapBuilder.hashKeys().hashSetValues().build()}, which provides more control over the\n   * underlying data structure.",
  "com.google.common.cache.LocalCache:compute(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.JdkBackedImmutableMultiset:count(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingQueue:remove()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:isPartialView()" : null,
  "com.google.common.collect.ImmutableRangeMap:remove(com.google.common.collect.Range)" : "* Guaranteed to throw an exception and leave the {@code RangeMap} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.CharMatcher$JavaDigit:matches(char)" : null,
  "com.google.common.util.concurrent.Atomics:<init>()" : null,
  "com.google.common.collect.Iterables:all(java.lang.Iterable,com.google.common.base.Predicate)" : "* Returns {@code true} if every element in {@code iterable} satisfies the predicate. If {@code\n   * iterable} is empty, {@code true} is returned.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch}.",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:upperCase()" : null,
  "com.google.common.collect.ForwardingListMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntryBiMap:unfiltered()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:removeAndGet(int)" : "Removes and returns the value at {@code index}.",
  "com.google.common.collect.AbstractSortedMultiset:<init>(java.util.Comparator)" : null,
  "com.google.common.base.Predicates:alwaysTrue()" : "* Returns a predicate that always evaluates to {@code true}.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code x -> true}, but note that lambdas do not have\n   * human-readable {@link #toString()} representations and are not serializable.",
  "com.google.common.collect.GeneralRange:getLowerBoundType()" : null,
  "com.google.common.collect.EnumBiMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:isShutdown()" : null,
  "com.google.common.primitives.UnsignedLongs:decode(java.lang.String)" : "* Returns the unsigned {@code long} value represented by the given string.\n   *\n   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:\n   *\n   * <ul>\n   *   <li>{@code 0x}<i>HexDigits</i>\n   *   <li>{@code 0X}<i>HexDigits</i>\n   *   <li>{@code #}<i>HexDigits</i>\n   *   <li>{@code 0}<i>OctalDigits</i>\n   * </ul>\n   *\n   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}\n   *     value\n   * @since 13.0",
  "com.google.common.base.Converter$ReverseConverter:<init>(com.google.common.base.Converter)" : null,
  "com.google.common.primitives.Doubles:lastIndexOf(double[],double,int,int)" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:spliterator()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)" : null,
  "com.google.common.collect.MapMaker:concurrencyLevel(int)" : "* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The\n   * table is internally partitioned to try to permit the indicated number of concurrent updates\n   * without contention. Because assignment of entries to these partitions is not necessarily\n   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to\n   * accommodate as many threads as will ever concurrently modify the table. Using a significantly\n   * higher value than you need can waste space and time, and a significantly lower value can lead\n   * to thread contention. But overestimates and underestimates within an order of magnitude do not\n   * usually have much noticeable impact. A value of one permits only one thread to modify the map\n   * at a time, but since read operations can proceed concurrently, this still yields higher\n   * concurrency than full synchronization. Defaults to 4.\n   *\n   * <p><b>Note:</b> Prior to Guava release 9.0, the default was 16. It is possible the default will\n   * change again in the future. If you care about this value, you should always choose it\n   * explicitly.\n   *\n   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive\n   * @throws IllegalStateException if a concurrency level was already set",
  "com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.cache.LocalCache:isEmpty()" : null,
  "com.google.common.collect.ImmutableMultiset$ElementSet:size()" : null,
  "com.google.common.collect.SortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* Stores a collection of values with the same key, replacing any existing values for that key.\n   *\n   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n   * returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the\n   * {@link Multimap} interface.\n   *\n   * <p>Any duplicates in {@code values} will be stored in the multimap once.",
  "com.google.common.reflect.TypeToken:any(java.lang.reflect.Type[])" : null,
  "com.google.common.util.concurrent.Monitor:<init>(boolean)" : "* Creates a monitor with the given ordering policy.\n   *\n   * @param fair whether this monitor should use a fair ordering policy rather than a non-fair (but\n   *     fast) one",
  "com.google.common.collect.TreeBasedTable$TreeRow:keySet()" : null,
  "com.google.common.collect.RegularImmutableList:isPartialView()" : null,
  "com.google.common.collect.ForwardingDeque:removeLast()" : null,
  "com.google.common.math.MathPreconditions:checkNonNegative(java.lang.String,java.math.BigInteger)" : null,
  "com.google.common.graph.ImmutableValueGraph$Builder:addNode(java.lang.Object)" : "* Adds {@code node} if it is not already present.\n     *\n     * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null.\n     *\n     * @return this {@code Builder} object",
  "com.google.common.collect.MinMaxPriorityQueue$Heap:verifyIndex(int)" : null,
  "com.google.common.collect.Lists$TransformingRandomAccessList:size()" : null,
  "com.google.common.collect.Streams:closeAll(java.util.stream.BaseStream[])" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:size()" : null,
  "com.google.common.collect.AbstractTable:createCellSet()" : null,
  "com.google.common.net.InetAddresses:hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)" : "* Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address\n   * types that contain an embedded IPv4 address.\n   *\n   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial\n   * spoofability. With other transition addresses spoofing involves (at least) infection of one's\n   * BGP routing table.\n   *\n   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address\n   * @return {@code true} if there is an embedded IPv4 client address\n   * @since 7.0",
  "com.google.common.util.concurrent.AtomicLongMap:removeIfZero(java.lang.Object)" : "* Atomically remove {@code key} from the map iff its associated value is 0.\n   *\n   * @since 20.0",
  "com.google.common.collect.Iterators:any(java.util.Iterator,com.google.common.base.Predicate)" : "* Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given\n   * predicate.",
  "com.google.common.io.FileBackedOutputStream:<init>(int,boolean)" : "* Creates a new instance that uses the given file threshold, and optionally resets the data when\n   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.\n   *\n   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file\n   * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link\n   *     ByteSource} returned by {@link #asByteSource} is finalized.\n   * @throws IllegalArgumentException if {@code fileThreshold} is negative",
  "com.google.common.primitives.Ints$IntArrayAsList:size()" : null,
  "com.google.common.collect.Multimaps$MapMultimap$1:size()" : null,
  "com.google.common.hash.AbstractHasher:putFloat(float)" : null,
  "com.google.common.base.Converter$ConverterComposition:<init>(com.google.common.base.Converter,com.google.common.base.Converter)" : null,
  "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:set(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableMap:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)" : "* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,\n     * and will cause {@link #build} to fail.",
  "com.google.common.base.Optional:presentInstances(java.lang.Iterable)" : "* Returns the value of each present instance from the supplied {@code optionals}, in order,\n   * skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are\n   * evaluated lazily.\n   *\n   * <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's\n   * {@code Optional} class; use {@code\n   * optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.\n   *\n   * <p><b>Java 9 users:</b> use {@code optionals.stream().flatMap(Optional::stream)} instead.\n   *\n   * @since 11.0 (generics widened in 13.0)",
  "com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$3:collectTypes(java.lang.Iterable)" : null,
  "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator:compare(byte[],byte[])" : null,
  "com.google.common.collect.Cut$AboveAll:describeAsUpperBound(java.lang.StringBuilder)" : null,
  "com.google.common.reflect.Types$JavaVersion$4:usedInGenericType(java.lang.reflect.Type)" : null,
  "com.google.common.base.Converter$FunctionBasedConverter:<init>(com.google.common.base.Function,com.google.common.base.Function)" : null,
  "com.google.common.collect.CompactHashSet:getSuccessor(int)" : null,
  "com.google.common.math.PairedStats:pearsonsCorrelationCoefficient()" : "* Returns the <a href=\"http://mathworld.wolfram.com/CorrelationCoefficient.html\">Pearson's or\n   * product-moment correlation coefficient</a> of the values. The count must greater than one, and\n   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code\n   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not\n   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to\n   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or\n   *     either the {@code x} and {@code y} dataset has zero population variance",
  "com.google.common.hash.AbstractStreamingHasher:hash()" : null,
  "com.google.common.cache.CacheBuilder$1:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:clear()" : null,
  "com.google.common.util.concurrent.AbstractListeningExecutorService:submit(java.util.concurrent.Callable)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:peek()" : null,
  "com.google.common.io.Files:getFileExtension(java.lang.String)" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Filename_extension\">file extension</a> for\n   * the given file name, or the empty string if the file has no extension. The result does not\n   * include the '{@code .}'.\n   *\n   * <p><b>Note:</b> This method simply returns everything after the last '{@code .}' in the file's\n   * name as determined by {@link File#getName}. It does not account for any filesystem-specific\n   * behavior that the {@link File} API does not already account for. For example, on NTFS it will\n   * report {@code \"txt\"} as the extension for the filename {@code \"foo.exe:.txt\"} even though NTFS\n   * will drop the {@code \":.txt\"} part of the name when the file is actually created on the\n   * filesystem due to NTFS's <a\n   * href=\"https://learn.microsoft.com/en-us/archive/blogs/askcore/alternate-data-streams-in-ntfs\">Alternate\n   * Data Streams</a>.\n   *\n   * @since 11.0",
  "com.google.common.collect.MinMaxPriorityQueue$Builder:ordering()" : null,
  "com.google.common.base.Equivalence$Wrapper:equals(java.lang.Object)" : "* Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped\n     * references is {@code true} and both wrappers use the {@link Object#equals(Object) same}\n     * equivalence.",
  "com.google.common.collect.Maps$MapDifferenceImpl:entriesInCommon()" : null,
  "com.google.common.io.CharSource:countBySkipping(java.io.Reader)" : null,
  "com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class)" : "* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code\n   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the\n   * given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b>\n   * Be sure to declare all of the checked exception types your try block can throw when calling an\n   * overload of this method so as to avoid losing the original exception type.\n   *\n   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,\n   * ...);} to ensure the compiler knows that it will throw.\n   *\n   * @return this method does not return; it always throws\n   * @throws IOException when the given throwable is an IOException\n   * @throws X1 when the given throwable is of the declared type X1\n   * @throws X2 when the given throwable is of the declared type X2",
  "com.google.common.collect.Iterators:toArray(java.util.Iterator,java.lang.Class)" : "* Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code\n   * hasNext()} method will return {@code false}.\n   *\n   * @param iterator the iterator to copy\n   * @param type the type of the elements\n   * @return a newly-allocated array into which all the elements of the iterator have been copied",
  "com.google.common.collect.EnumMultiset:add(java.lang.Object,int)" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:<init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)" : null,
  "com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMap:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.cache.CacheBuilderSpec$LongParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)" : null,
  "com.google.common.base.Joiner:join(java.lang.Iterable)" : "* Returns a string containing the string representation of each of {@code parts}, using the\n   * previously configured separator between each.",
  "com.google.common.collect.ImmutableMultimap$Values:iterator()" : null,
  "com.google.common.graph.StandardValueGraph:nodes()" : null,
  "com.google.common.base.Joiner:on(java.lang.String)" : "Returns a joiner which automatically places {@code separator} between consecutive elements.",
  "com.google.common.graph.MapRetrievalCache$CacheEntry:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:equals(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashSet:setHashTableMask(int)" : "Stores the hash table mask as the number of bits needed to represent an index.",
  "com.google.common.collect.Multisets:retainAllImpl(com.google.common.collect.Multiset,java.util.Collection)" : "An implementation of {@link Multiset#retainAll}.",
  "com.google.common.primitives.Floats$FloatConverter:doForward(java.lang.String)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:unsafeComparator()" : null,
  "com.google.common.collect.TreeMultiset:forEachEntry(java.util.function.ObjIntConsumer)" : null,
  "com.google.common.cache.CacheBuilder:lenientParsing()" : "* Enables lenient parsing. Useful for tests and spec parsing.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)",
  "com.google.common.cache.LocalCache$WriteQueue:offer(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.hash.LittleEndianByteArray:load64Safely(byte[],int,int)" : "* Similar to load64, but allows offset + 8 > input.length, padding the result with zeroes. This\n   * has to explicitly reverse the order of the bytes as it packs them into the result which makes\n   * it slower than the native version.\n   *\n   * @param input the input bytes\n   * @param offset the offset into the array at which to start reading\n   * @param length the number of bytes from the input to read\n   * @return a long of a concatenated 8 bytes",
  "com.google.common.math.IntMath:saturatedPow(int,int)" : null,
  "com.google.common.collect.Maps:toStringImpl(java.util.Map)" : "An implementation of {@link Map#toString}.",
  "com.google.common.collect.Multisets$UnmodifiableMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.collect.NullsLastOrdering:equals(java.lang.Object)" : null,
  "com.google.common.reflect.Invokable$MethodInvokable:getTypeParameters()" : null,
  "com.google.common.collect.ForwardingDeque:delegate()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long,char)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ForwardingMultiset:standardToString()" : "* A sensible definition of {@link #toString} as {@code entrySet().toString()} . If you override\n   * {@link #entrySet}, you may wish to override {@link #toString} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:set(java.lang.Object)" : null,
  "com.google.common.base.Splitter$SplittingIterator:computeNext()" : null,
  "com.google.common.base.Predicates$InPredicate:toString()" : null,
  "com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:readResolve()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:clear()" : null,
  "com.google.common.collect.HashBiMap$Inverse:clear()" : null,
  "com.google.common.collect.StandardTable:cellSet()" : "* {@inheritDoc}\n   *\n   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second\n   * row, and so on.\n   *\n   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the\n   * time the cell is returned by a method call to the set or its iterator.",
  "com.google.common.collect.MapMakerInternalMap:newSegmentArray(int)" : null,
  "com.google.common.io.CharSequenceReader:mark(int)" : null,
  "com.google.common.graph.NetworkBuilder:directed()" : "Returns a {@link NetworkBuilder} for building directed networks.",
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:ceiling(java.lang.Object)" : null,
  "com.google.common.util.concurrent.SettableFuture:<init>()" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.Iterators:emptyIterator()" : "* Returns the empty iterator.\n   *\n   * <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.",
  "com.google.common.collect.Multisets$UnmodifiableMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.primitives.UnsignedBytes:toString(byte)" : "* Returns a string representation of x, where x is treated as unsigned.\n   *\n   * @since 13.0",
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:createInverse()" : null,
  "com.google.common.collect.NullsFirstOrdering:hashCode()" : null,
  "com.google.common.collect.ImmutableBiMap$Builder:put(java.util.Map$Entry)" : "* Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will\n     * cause {@link #build} to fail.\n     *\n     * @since 19.0",
  "com.google.common.graph.Graphs$TransposedValueGraph:delegate()" : null,
  "com.google.common.collect.TreeRangeMap:subRangeMap(com.google.common.collect.Range)" : null,
  "com.google.common.util.concurrent.UncaughtExceptionHandlers:<init>()" : null,
  "com.google.common.reflect.ClassPath$ClassInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)" : null,
  "com.google.common.collect.HashBiMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.EmptyContiguousSet:headSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.collect.Synchronized$SynchronizedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:firstEntry()" : null,
  "com.google.common.collect.Iterators$PeekingImpl:remove()" : null,
  "com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier)" : "* Creates a {@link ScheduledExecutorService} that renames the {@link Thread threads} that its\n   * tasks run in.\n   *\n   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed\n   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}\n   * prevents the renaming then it will be skipped but the tasks will still execute.\n   *\n   * @param service The executor to decorate\n   * @param nameSupplier The source of names for each task",
  "com.google.common.cache.LocalCache$NullEntry:getAccessTime()" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:pollLastEntry()" : null,
  "com.google.common.base.Strings:lenientToString(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSet:copyOfEnumSet(java.util.EnumSet)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)" : "* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)\n   * awaitTermination(long, TimeUnit)} uninterruptibly.\n   *\n   * @since 30.0",
  "com.google.common.primitives.Booleans$BooleanArrayAsList:<init>(boolean[],int,int)" : null,
  "com.google.common.io.MoreFiles$PathByteSource:followLinks(java.nio.file.OpenOption[])" : null,
  "com.google.common.primitives.UnsignedInts:sortDescending(int[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order, interpreting them as unsigned 32-bit integers.\n   *\n   * @since 23.1",
  "com.google.common.collect.DiscreteDomain:<init>(boolean)" : "Private constructor for built-in DiscreteDomains supporting fast offset.",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection,int)" : null,
  "com.google.common.collect.AbstractBiMap:entrySet()" : null,
  "com.google.common.collect.JdkBackedImmutableBiMap:get(java.lang.Object)" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:descendingMultiset()" : null,
  "com.google.common.cache.ForwardingLoadingCache:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.CollectCollectors:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:asMap()" : null,
  "com.google.common.collect.ImmutableMap:remove(java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.graph.EndpointPair$Unordered:hashCode()" : null,
  "com.google.common.collect.ForwardingDeque:removeFirst()" : null,
  "com.google.common.base.NullnessCasts:<init>()" : null,
  "com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.base.CharMatcher:toString()" : "* Returns a string representation of this {@code CharMatcher}, such as {@code\n   * CharMatcher.or(WHITESPACE, JAVA_DIGIT)}.",
  "com.google.common.hash.Hashing:sipHash24(long,long)" : "* Returns a hash function implementing the <a href=\"https://131002.net/siphash/\">64-bit\n   * SipHash-2-4 algorithm</a> using the given seed.\n   *\n   * @since 15.0",
  "com.google.common.collect.Multisets$MultisetIteratorImpl:remove()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object,boolean)" : null,
  "com.google.common.base.CharMatcher$None:collapseFrom(java.lang.CharSequence,char)" : null,
  "com.google.common.collect.ForwardingMultimap:hashCode()" : null,
  "com.google.common.base.CaseFormat$4:normalizeWord(java.lang.String)" : null,
  "com.google.common.collect.Multisets$FilteredMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.Cut$AboveValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.net.MediaType:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultiset$Builder:buildJdkBacked()" : null,
  "com.google.common.collect.StandardTable:containsRow(java.lang.Object)" : null,
  "com.google.common.util.concurrent.UncheckedExecutionException:<init>(java.lang.Throwable)" : "* Creates a new instance with {@code null} as its detail message and the given cause. Prefer to\n   * provide a non-nullable {@code cause}, as many users expect to find one.",
  "com.google.common.collect.Multimaps:synchronizedMultimap(com.google.common.collect.Multimap)" : "* Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to\n   * guarantee serial access, it is critical that <b>all</b> access to the backing multimap is\n   * accomplished through the returned multimap.\n   *\n   * <p>It is imperative that the user manually synchronize on the returned multimap when accessing\n   * any of its collection views:\n   *\n   * {@snippet :\n   * Multimap<K, V> multimap = Multimaps.synchronizedMultimap(\n   *     HashMultimap.<K, V>create());\n   * ...\n   * Collection<V> values = multimap.get(key);  // Needn't be in synchronized block\n   * ...\n   * synchronized (multimap) {  // Synchronizing on multimap, not values!\n   *   Iterator<V> i = values.iterator(); // Must be in synchronized block\n   *   while (i.hasNext()) {\n   *     foo(i.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>Failure to follow this advice may result in non-deterministic behavior.\n   *\n   * <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link\n   * Multimap#replaceValues} methods return collections that aren't synchronized.\n   *\n   * <p>The returned multimap will be serializable if the specified multimap is serializable.\n   *\n   * @param multimap the multimap to be wrapped in a synchronized view\n   * @return a synchronized view of the specified multimap",
  "com.google.common.base.CharMatcher$Any:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)" : null,
  "com.google.common.collect.ImmutableSortedMultiset$Builder:<init>(java.util.Comparator)" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableSortedMultiset#orderedBy(Comparator)}.",
  "com.google.common.collect.Maps$Values:contains(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.base.CharMatcher$IsEither:matches(char)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultiset:elementSet()" : null,
  "com.google.common.collect.ImmutableSortedMap:createKeySet()" : null,
  "com.google.common.util.concurrent.Striped:bulkGet(java.lang.Iterable)" : "* Returns the stripes that correspond to the passed objects, in ascending (as per {@link\n   * #getAt(int)}) order. Thus, threads that use the stripes in the order returned by this method\n   * are guaranteed to not deadlock each other.\n   *\n   * <p>It should be noted that using a {@code Striped<L>} with relatively few stripes, and {@code\n   * bulkGet(keys)} with a relative large number of keys can cause an excessive number of shared\n   * stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed\n   * for a pair of them to match). Please consider carefully the implications of the number of\n   * stripes, the intended concurrency level, and the typical number of keys used in a {@code\n   * bulkGet(keys)} operation. See <a href=\"http://www.mathpages.com/home/kmath199.htm\">Balls in\n   * Bins model</a> for mathematical formulas that can be used to estimate the probability of\n   * collisions.\n   *\n   * @param keys arbitrary non-null keys\n   * @return the stripes corresponding to the objects (one per each object, derived by delegating to\n   *     {@link #get(Object)}; may contain duplicates), in an increasing index order.",
  "com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:<init>(float[],int,int)" : null,
  "com.google.common.collect.Collections2$FilteredCollection:<init>(java.util.Collection,com.google.common.base.Predicate)" : null,
  "com.google.common.util.concurrent.AggregateFuture:processCompleted(com.google.common.collect.ImmutableCollection)" : null,
  "com.google.common.util.concurrent.FakeTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.cache.LocalCache$WriteQueue:size()" : null,
  "com.google.common.collect.AbstractMultimap:entrySpliterator()" : null,
  "com.google.common.collect.ForwardingSortedMultiset:delegate()" : null,
  "com.google.common.collect.Ordering:nullsLast()" : null,
  "com.google.common.graph.ForwardingValueGraph:degree(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:readResolve()" : null,
  "com.google.common.collect.Iterators:indexOf(java.util.Iterator,com.google.common.base.Predicate)" : "* Returns the index in {@code iterator} of the first element that satisfies the provided {@code\n   * predicate}, or {@code -1} if the Iterator has no such elements.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code\n   * predicate.apply(Iterators.get(iterator, i))} returns {@code true}, or {@code -1} if there is no\n   * such index.\n   *\n   * <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will\n   * return {@code false}. Otherwise, the iterator will be set to the element which satisfies the\n   * {@code predicate}.\n   *\n   * @since 2.0",
  "com.google.common.collect.TransformedListIterator:add(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$KeySet:isEmpty()" : null,
  "com.google.common.io.LittleEndianDataInputStream:readLine()" : "This method will throw an {@link UnsupportedOperationException}.",
  "com.google.common.collect.ImmutableSortedMap:pollLastEntry()" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.CompactHashSet:create(java.util.Collection)" : "* Creates a <i>mutable</i> {@code CompactHashSet} instance containing the elements of the given\n   * collection in unspecified order.\n   *\n   * @param collection the elements that the set should contain\n   * @return a new {@code CompactHashSet} containing those elements (minus duplicates)",
  "com.google.common.base.VerifyException:<init>(java.lang.String)" : "Constructs a {@code VerifyException} with the message {@code message}.",
  "com.google.common.primitives.Longs:indexOf(long[],long,int,int)" : null,
  "com.google.common.reflect.TypeToken:getGenericInterfaces()" : "* Returns the generic interfaces that this type directly {@code implements}. This method is\n   * similar but different from {@link Class#getGenericInterfaces()}. For example, {@code new\n   * TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains {@code\n   * new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()} will\n   * return an array that contains {@code Iterable<T>}, where the {@code T} is the type variable\n   * declared by interface {@code Iterable}.\n   *\n   * <p>If this type is a type variable or wildcard, its upper bounds are examined and those that\n   * are either an interface or upper-bounded only by interfaces are returned. This means that the\n   * returned types could include type variables too.",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.cache.LocalCache:clear()" : null,
  "com.google.common.primitives.Floats:compare(float,float)" : "* Compares the two specified {@code float} values using {@link Float#compare(float, float)}. You\n   * may prefer to invoke that method directly; this method exists only for consistency with the\n   * other utilities in this package.\n   *\n   * <p><b>Note:</b> this method simply delegates to the JDK method {@link Float#compare}. It is\n   * provided for consistency with the other primitive types, whose compare methods were not added\n   * to the JDK until JDK 7.\n   *\n   * @param a the first {@code float} to compare\n   * @param b the second {@code float} to compare\n   * @return the result of invoking {@link Float#compare(float, float)}",
  "com.google.common.collect.TreeBasedTable$Factory:get()" : null,
  "com.google.common.primitives.Ints:sortDescending(int[])" : "* Sorts the elements of {@code array} in descending order.\n   *\n   * @since 23.1",
  "com.google.common.collect.SingletonImmutableList:iterator()" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:delegate()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:<init>(java.io.ByteArrayInputStream)" : null,
  "com.google.common.cache.LocalCache:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:asMapOfRanges()" : null,
  "com.google.common.cache.LocalCache$WeakEntry:setNextInAccessQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:getSortedSetDelegate()" : null,
  "com.google.common.collect.ImmutableSortedMap:values()" : "* Returns an immutable collection of the values in this map, sorted by the ordering of the\n   * corresponding keys.",
  "com.google.common.graph.AbstractBaseGraph:incidentEdgeOrder()" : null,
  "com.google.common.collect.ImmutableTable:copyOf(java.lang.Iterable)" : null,
  "com.google.common.collect.EnumMultiset:size()" : null,
  "com.google.common.collect.Multisets:immutableEntry(java.lang.Object,int)" : "* Returns an immutable multiset entry with the specified element and count. The entry will be\n   * serializable if {@code e} is.\n   *\n   * @param e the element to be associated with the returned entry\n   * @param n the count to be associated with the returned entry\n   * @throws IllegalArgumentException if {@code n} is negative",
  "com.google.common.collect.Maps$Values:iterator()" : null,
  "com.google.common.primitives.ImmutableIntArray:of(int,int,int,int)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.HashBasedTable:containsColumn(java.lang.Object)" : null,
  "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:escape(java.lang.String)" : null,
  "com.google.common.net.MediaType:createAudioType(java.lang.String)" : "* Creates a media type with the \"audio\" type and the given subtype.\n   *\n   * @throws IllegalArgumentException if subtype is invalid",
  "com.google.common.collect.ArrayTable:clear()" : "* Not supported. Use {@link #eraseAll} instead.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Use {@link #eraseAll}",
  "com.google.common.collect.CompactHashing:remove(java.lang.Object,java.lang.Object,int,java.lang.Object,int[],java.lang.Object[],java.lang.Object[])" : null,
  "com.google.common.base.CharMatcher:finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean)" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap:tailMap(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingListIterator:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Iterable)" : "* Appends the string representation of each of {@code parts}, using the previously configured\n   * separator between each, to {@code appendable}.",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long,int)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.AbstractMultiset:createElementSet()" : "* Creates a new instance of this multiset's element set, which will be returned by {@link\n   * #elementSet()}.",
  "com.google.common.collect.Maps:difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence)" : "* Computes the difference between two maps. This difference is an immutable snapshot of the state\n   * of the maps at the time this method is called. It will never change, even if the maps change at\n   * a later time.\n   *\n   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps\n   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.\n   *\n   * @param left the map to treat as the \"left\" map for purposes of comparison\n   * @param right the map to treat as the \"right\" map for purposes of comparison\n   * @param valueEquivalence the equivalence relationship to use to compare values\n   * @return the difference between the two maps\n   * @since 10.0",
  "com.google.common.collect.Maps$NavigableAsMapView:comparator()" : null,
  "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier:hashCode()" : null,
  "com.google.common.collect.Collections2$OrderedPermutationIterator:<init>(java.util.List,java.util.Comparator)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherEntry(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(double[])" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableDoubleArray} will contain.",
  "com.google.common.graph.ForwardingNetwork:inDegree(java.lang.Object)" : null,
  "com.google.common.collect.TopKSelector:topK()" : "* Returns the top {@code k} elements offered to this {@code TopKSelector}, or all elements if\n   * fewer than {@code k} have been offered, in the order specified by the factory used to create\n   * this {@code TopKSelector}.\n   *\n   * <p>The returned list is an unmodifiable copy and will not be affected by further changes to\n   * this {@code TopKSelector}. This method returns in O(k log k) time.",
  "com.google.common.collect.ArrayTable:create(com.google.common.collect.Table)" : "* Creates an {@code ArrayTable} with the mappings in the provided table.\n   *\n   * <p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with\n   * column key {@code c}, the returned table contains a mapping with row key {@code r} and column\n   * key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to\n   * {@code null} in the generated table.\n   *\n   * <p>The returned table allows subsequent {@code put} calls with the row keys in {@code\n   * table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put}\n   * with other keys leads to an {@code IllegalArgumentException}.\n   *\n   * <p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the\n   * row and column iteration ordering of the returned table.\n   *\n   * @throws NullPointerException if {@code table} has a null key",
  "com.google.common.math.StatsAccumulator:snapshot()" : "Returns an immutable snapshot of the current statistics.",
  "com.google.common.collect.AbstractSetMultimap:removeAll(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",
  "com.google.common.collect.Count:add(int)" : null,
  "com.google.common.collect.Maps$FilteredEntryMap$EntrySet:iterator()" : null,
  "com.google.common.collect.AbstractIndexedListIterator:hasNext()" : null,
  "com.google.common.primitives.Ints:sortDescending(int[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order.\n   *\n   * @since 23.1",
  "com.google.common.collect.TreeRangeSet$SubRangeSet:encloses(com.google.common.collect.Range)" : null,
  "com.google.common.collect.Multimaps:transformValues(com.google.common.collect.Multimap,com.google.common.base.Function)" : "* Returns a view of a multimap where each value is transformed by a function. All other\n   * properties of the multimap, such as iteration order, are left intact. For example, the code:\n   *\n   * {@snippet :\n   * Multimap<String, Integer> multimap =\n   *     ImmutableSetMultimap.of(\"a\", 2, \"b\", -3, \"b\", -3, \"a\", 4, \"c\", 6);\n   * Function<Integer, String> square = new Function<Integer, String>() {\n   *     public String apply(Integer in) {\n   *       return Integer.toString(in * in);\n   *     }\n   * };\n   * Multimap<String, String> transformed =\n   *     Multimaps.transformValues(multimap, square);\n   *   System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {a=[4, 16], b=[9, 9], c=[36]}}.\n   *\n   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view\n   * supports removal operations, and these are reflected in the underlying multimap.\n   *\n   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values\n   * provided that the function is capable of accepting null input. The transformed multimap might\n   * contain null values, if the function sometimes gives a null result.\n   *\n   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap\n   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,\n   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,\n   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a\n   * {@code Set}.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned\n   * multimap to be a view, but it means that the function will be applied many times for bulk\n   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to\n   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned\n   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your\n   * choosing.\n   *\n   * @since 7.0",
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:ensureTableCapacity(int)" : null,
  "com.google.common.collect.ImmutableMap:builderWithExpectedSize(int)" : "* Returns a new builder, expecting the specified number of entries to be added.\n   *\n   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link\n   * Builder#build} is called, the builder is likely to perform better than an unsized {@link\n   * #builder()} would have.\n   *\n   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,\n   * but not exactly, the number of entries added to the builder.\n   *\n   * @since 23.1",
  "com.google.common.collect.AbstractSortedKeySortedSetMultimap:keySet()" : null,
  "com.google.common.collect.Queues:newLinkedBlockingQueue(int)" : "* Creates an empty {@code LinkedBlockingQueue} with the given (fixed) capacity.\n   *\n   * @throws IllegalArgumentException if {@code capacity} is less than 1",
  "com.google.common.cache.CacheBuilderSpec$WriteDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.EmptyContiguousSet:iterator()" : null,
  "com.google.common.graph.DirectedGraphConnections:incidentEdgeIterator(java.lang.Object)" : null,
  "com.google.common.collect.CartesianList:<init>(com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.JdkBackedImmutableBiMap:<init>(com.google.common.collect.ImmutableList,java.util.Map,java.util.Map)" : null,
  "com.google.common.collect.ImmutableTable:equals(java.lang.Object)" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.Object)" : null,
  "com.google.common.collect.Iterables:toArray(java.lang.Iterable)" : "* Copies an iterable's elements into an array.\n   *\n   * @param iterable the iterable to copy\n   * @return a newly-allocated array into which all the elements of the iterable have been copied",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:isIntact()" : "* Returns {@code true} if the MinMax heap structure holds. This is only used in testing.\n   *\n   * <p>TODO(kevinb): move to the test class?",
  "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get()" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getKey()" : null,
  "com.google.common.graph.ForwardingValueGraph:predecessors(java.lang.Object)" : null,
  "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:characteristics()" : null,
  "com.google.common.primitives.Shorts:constrainToRange(short,short,short)" : "* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.\n   *\n   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned\n   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n   * value} is greater than {@code max}, {@code max} is returned.\n   *\n   * @param value the {@code short} value to constrain\n   * @param min the lower bound (inclusive) of the range to constrain {@code value} to\n   * @param max the upper bound (inclusive) of the range to constrain {@code value} to\n   * @throws IllegalArgumentException if {@code min > max}\n   * @since 21.0",
  "com.google.common.collect.Lists$TransformingSequentialList:removeIf(java.util.function.Predicate)" : null,
  "com.google.common.collect.AbstractMultimap:values()" : null,
  "com.google.common.collect.TreeRangeSet:removeAll(com.google.common.collect.RangeSet)" : null,
  "com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.util.Map)" : "* Appends the string representation of each entry of {@code map}, using the previously\n     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.",
  "com.google.common.primitives.UnsignedInts:divide(int,int)" : "* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit\n   * quantities.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Integer#divideUnsigned(int, int)} instead.\n   *\n   * @param dividend the dividend (numerator)\n   * @param divisor the divisor (denominator)\n   * @throws ArithmeticException if divisor is 0",
  "com.google.common.collect.ForwardingList:add(int,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:keySet()" : null,
  "com.google.common.io.MultiReader:close()" : null,
  "com.google.common.graph.GraphConstants:<init>()" : null,
  "com.google.common.io.LittleEndianDataInputStream:readAndCheckByte()" : "* Reads a byte from the input stream checking that the end of file (EOF) has not been\n   * encountered.\n   *\n   * @return byte read from input\n   * @throws IOException if an error is encountered while reading\n   * @throws EOFException if the end of file (EOF) is encountered.",
  "com.google.common.net.MediaType:withParameters(java.lang.String,java.lang.Iterable)" : "* <em>Replaces</em> all parameters with the given attribute with parameters using the given\n   * values. If there are no values, any existing parameters with the given attribute are removed.\n   *\n   * @throws IllegalArgumentException if either {@code attribute} or {@code values} is invalid\n   * @since 24.0",
  "com.google.common.collect.MapMakerInternalMap:get(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning(java.time.Duration)" : "* @since 28.0",
  "com.google.common.graph.AbstractNetwork:edgeIncidentNodesMap(com.google.common.graph.Network)" : null,
  "com.google.common.cache.AbstractLoadingCache:getUnchecked(java.lang.Object)" : null,
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double,com.google.common.math.LinearTransformation)" : null,
  "com.google.common.primitives.UnsignedBytes:lexicographicalComparatorJavaImpl()" : null,
  "com.google.common.base.Ascii:equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)" : "* Indicates whether the contents of the given character sequences {@code s1} and {@code s2} are\n   * equal, ignoring the case of any ASCII alphabetic characters between {@code 'a'} and {@code 'z'}\n   * or {@code 'A'} and {@code 'Z'} inclusive.\n   *\n   * <p>This method is significantly faster than {@link String#equalsIgnoreCase} and should be used\n   * in preference if at least one of the parameters is known to contain only ASCII characters.\n   *\n   * <p>Note however that this method does not always behave identically to expressions such as:\n   *\n   * <ul>\n   *   <li>{@code string.toUpperCase().equals(\"UPPER CASE ASCII\")}\n   *   <li>{@code string.toLowerCase().equals(\"lower case ascii\")}\n   * </ul>\n   *\n   * <p>due to case-folding of some non-ASCII characters (which does not occur in {@link\n   * String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the author\n   * probably wanted the behavior provided by this method rather than the subtle and sometimes\n   * surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}.\n   *\n   * @since 16.0",
  "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int,double)" : "* Creates a {@link BloomFilter} with the expected number of insertions and expected false\n   * positive probability.\n   *\n   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,\n   * will result in its saturation, and a sharp deterioration of its false positive probability.\n   *\n   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}\n   * is.\n   *\n   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n   * also relies on object identity of funnels.\n   *\n   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n   * @param expectedInsertions the number of expected insertions to the constructed {@code\n   *     BloomFilter}; must be positive\n   * @param fpp the desired false positive probability (must be positive and less than 1.0)\n   * @return a {@code BloomFilter}",
  "com.google.common.collect.AbstractBiMap:values()" : null,
  "com.google.common.collect.Multimaps$CustomSetMultimap:createCollection()" : null,
  "com.google.common.collect.HashBiMap$Inverse:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.Sets:equalsImpl(java.util.Set,java.lang.Object)" : "An implementation for {@link Set#equals(Object)}.",
  "com.google.common.util.concurrent.AtomicDoubleArray:writeObject(java.io.ObjectOutputStream)" : "* Saves the state to a stream (that is, serializes it).\n   *\n   * @serialData The length of the array is emitted (int), followed by all of its elements (each a\n   *     {@code double}) in the proper order.",
  "com.google.common.util.concurrent.Monitor:isSatisfied(com.google.common.util.concurrent.Monitor$Guard)" : "* Exactly like guard.isSatisfied(), but in addition signals all waiting threads in the (hopefully\n   * unlikely) event that isSatisfied() throws.",
  "com.google.common.collect.Maps$KeySet:<init>(java.util.Map)" : null,
  "com.google.common.base.Optional:absent()" : "* Returns an {@code Optional} instance with no contained reference.\n   *\n   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's\n   * {@code Optional.empty}.",
  "com.google.common.hash.AbstractHasher:putString(java.lang.CharSequence,java.nio.charset.Charset)" : null,
  "com.google.common.graph.StandardNetwork:incidentNodes(java.lang.Object)" : null,
  "com.google.common.collect.Queues:newPriorityQueue(java.lang.Iterable)" : "* Creates a {@code PriorityQueue} containing the given elements.\n   *\n   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},\n   * this priority queue will be ordered according to the same ordering.\n   *\n   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}\n   *     in 15.0)",
  "com.google.common.reflect.ClassPath:locationsFrom(java.lang.ClassLoader)" : "* Returns all locations that {@code classloader} and parent loaders load classes and resources\n   * from. Callers can {@linkplain LocationInfo#scanResources scan} individual locations selectively\n   * or even in parallel.",
  "com.google.common.collect.SingletonImmutableBiMap:createEntrySet()" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:size()" : null,
  "com.google.common.util.concurrent.TimeLimiter:newProxy(java.lang.Object,java.lang.Class,java.time.Duration)" : "* Returns an instance of {@code interfaceType} that delegates all method calls to the {@code\n   * target} object, enforcing the specified time limit on each call. This time-limited delegation\n   * is also performed for calls to {@link Object#equals}, {@link Object#hashCode}, and {@link\n   * Object#toString}.\n   *\n   * <p>If the target method call finishes before the limit is reached, the return value or\n   * exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is\n   * reached, the proxy will attempt to abort the call to the target, and will throw an {@link\n   * UncheckedTimeoutException} to the caller.\n   *\n   * <p>It is important to note that the primary purpose of the proxy object is to return control to\n   * the caller when the timeout elapses; aborting the target method call is of secondary concern.\n   * The particular nature and strength of the guarantees made by the proxy is\n   * implementation-dependent. However, it is important that each of the methods on the target\n   * object behaves appropriately when its thread is interrupted.\n   *\n   * <p>For example, to return the value of {@code target.someMethod()}, but substitute {@code\n   * DEFAULT_VALUE} if this method call takes over 50 ms, you can use this code:\n   *\n   * <pre>\n   *   TimeLimiter limiter = . . .;\n   *   TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50));\n   *   try {\n   *     return proxy.someMethod();\n   *   } catch (UncheckedTimeoutException e) {\n   *     return DEFAULT_VALUE;\n   *   }\n   * </pre>\n   *\n   * @param target the object to proxy\n   * @param interfaceType the interface you wish the returned proxy to implement\n   * @param timeout the maximum length of time that callers are willing to wait on each method call\n   *     to the proxy\n   * @return a time-limiting proxy\n   * @throws IllegalArgumentException if {@code interfaceType} is a regular class, enum, or\n   *     annotation type, rather than an interface\n   * @since 28.0",
  "com.google.common.primitives.ImmutableLongArray:copyOf(java.util.stream.LongStream)" : "* Returns an immutable array containing all the values from {@code stream}, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:toString()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:delegate()" : null,
  "com.google.common.collect.CompactHashSet:incrementModCount()" : null,
  "com.google.common.collect.Cut$BelowValue:describeAsLowerBound(java.lang.StringBuilder)" : null,
  "com.google.common.math.PairedStats:toByteArray()" : "* Gets a byte array representation of this instance.\n   *\n   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between\n   * versions.",
  "com.google.common.collect.CompactHashMap:size()" : null,
  "com.google.common.collect.ForwardingConcurrentMap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap:entryOf(java.lang.Object,java.lang.Object)" : "* Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry\n   * with those values.\n   *\n   * <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link\n   * UnsupportedOperationException}.",
  "com.google.common.collect.TreeMultiset:lastNode()" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:hashCode()" : null,
  "com.google.common.base.Preconditions:checkPositionIndex(int,int)" : "* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of\n   * size {@code size}. A position index may range from zero to {@code size}, inclusive.\n   *\n   * <p><b>Java 9 users:</b> consider using {@link java.util.Objects#checkIndex(index, size)}\n   * instead. However, note that {@code checkIndex()} throws {@code IndexOutOfBoundsException} when\n   * {@code size} is negative, while this method throws {@code IllegalArgumentException}.\n   *\n   * @param index a user-supplied index identifying a position in an array, list or string\n   * @param size the size of that array, list or string\n   * @return the value of {@code index}\n   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.collect.SingletonImmutableSet:contains(java.lang.Object)" : null,
  "com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException:<init>()" : null,
  "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:delegate()" : null,
  "com.google.common.primitives.ImmutableLongArray$AsList:hashCode()" : null,
  "com.google.common.collect.NaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)" : null,
  "com.google.common.reflect.Invokable:getDeclaringClass()" : null,
  "com.google.common.collect.Ordering:greatestOf(java.util.Iterator,int)" : "* Returns the {@code k} greatest elements from the given iterator according to this ordering, in\n   * order from greatest to least. If there are fewer than {@code k} elements present, all will be\n   * included.\n   *\n   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n   * elements are equivalent, it is undefined which will come first.\n   *\n   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.greatest(k,\n   * thisComparator))} instead.\n   *\n   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in\n   *     <i>descending order</i>\n   * @throws IllegalArgumentException if {@code k} is negative\n   * @since 14.0",
  "com.google.common.util.concurrent.ClosingFuture:from(com.google.common.util.concurrent.ListenableFuture)" : "* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.\n   *\n   * <p>{@code future}'s value will not be closed when the pipeline is done even if {@code V}\n   * implements {@link Closeable}. In order to start a pipeline with a value that will be closed\n   * when the pipeline is done, use {@link #submit(ClosingCallable, Executor)} instead.",
  "com.google.common.collect.CompactLinkedHashMap:allocArrays()" : null,
  "com.google.common.primitives.UnsignedInts:remainder(int,int)" : "* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit\n   * quantities.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Integer#remainderUnsigned(int, int)} instead.\n   *\n   * @param dividend the dividend (numerator)\n   * @param divisor the divisor (denominator)\n   * @throws ArithmeticException if divisor is 0",
  "com.google.common.collect.ForwardingCollection:standardClear()" : "* A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's\n   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link\n   * #clear} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:hasNext()" : null,
  "com.google.common.collect.ForwardingQueue:poll()" : null,
  "com.google.common.collect.ImmutableRangeMap:builder()" : "Returns a new builder for an immutable range map.",
  "com.google.common.primitives.ImmutableDoubleArray$AsList:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap:entrySet()" : "* Returns an immutable set of the mappings in this map. The iteration order is specified by the\n   * method used to create this map. Typically, this is insertion order.",
  "com.google.common.graph.ElementOrder:toString()" : null,
  "com.google.common.primitives.ImmutableLongArray:length()" : "Returns the number of values in this array.",
  "com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUp(int,java.lang.Object)" : "Bubbles a value from {@code index} up the appropriate heap if required.",
  "com.google.common.eventbus.Subscriber:invokeSubscriberMethod(java.lang.Object)" : "* Invokes the subscriber method. This method can be overridden to make the invocation\n   * synchronized.",
  "com.google.common.io.FileBackedOutputStream:write(byte[])" : null,
  "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:<init>(int)" : null,
  "com.google.common.util.concurrent.ServiceManager:isHealthy()" : "* Returns true if all services are currently in the {@linkplain State#RUNNING running} state.\n   *\n   * <p>Users who want more detailed information should use the {@link #servicesByState} method to\n   * get detailed information about which services are not running.",
  "com.google.common.collect.Sets$DescendingSet:delegate()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:sortedMap()" : null,
  "com.google.common.collect.TreeTraverser:preOrderTraversal(java.lang.Object)" : "* Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order traversal.\n   * That is, each node's subtrees are traversed after the node itself is returned.\n   *\n   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration\n   * is in progress or when the iterators generated by {@link #children} are advanced.\n   *\n   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPreOrder} instead, which has\n   *     the same behavior.",
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getPreviousInAccessQueue()" : null,
  "com.google.common.base.Splitter:splitToStream(java.lang.CharSequence)" : "* Splits {@code sequence} into string components and makes them available through an {@link\n   * Stream}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use\n   * {@link #splitToList(CharSequence)}.\n   *\n   * @param sequence the sequence of characters to split\n   * @return a stream over the segments split from the parameter\n   * @since 28.2 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.cache.CacheBuilder:getKeyEquivalence()" : null,
  "com.google.common.hash.AbstractHashFunction:newHasher(int)" : null,
  "com.google.common.collect.ForwardingMultimap:delegate()" : null,
  "com.google.common.collect.Maps$TransformedEntriesSortedMap:headMap(java.lang.Object)" : null,
  "com.google.common.eventbus.Subscriber:dispatchEvent(java.lang.Object)" : "Dispatches {@code event} to this subscriber using the proper executor.",
  "com.google.common.collect.SortedMultisets$NavigableElementSet:pollFirst()" : null,
  "com.google.common.collect.ArrayTable$ArrayMap:entrySpliterator()" : null,
  "com.google.common.collect.CompactHashSet:create()" : "Creates an empty {@code CompactHashSet} instance.",
  "com.google.common.collect.ImmutableRangeMap:span()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:lower(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:waitForValue()" : null,
  "com.google.common.collect.ImmutableRangeSet$ComplementRanges:isPartialView()" : null,
  "com.google.common.base.Predicates$NotPredicate:apply(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeSet:toImmutableRangeSet()" : "* Returns a {@code Collector} that accumulates the input elements into a new {@code\n   * ImmutableRangeSet}. As in {@link Builder}, overlapping ranges are not permitted and adjacent\n   * ranges will be merged.\n   *\n   * @since 23.1",
  "com.google.common.collect.ImmutableMap:containsValue(java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$Alphabet:ignoreCase()" : "Returns an equivalent {@code Alphabet} except it ignores case.",
  "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:fmix64(long)" : null,
  "com.google.common.graph.ForwardingGraph:degree(java.lang.Object)" : null,
  "com.google.common.math.LinearTransformation:<init>()" : "* Constructor for use by subclasses inside Guava.\n   *\n   * @deprecated Create instances by using the static factory methods of the class.",
  "com.google.common.util.concurrent.AbstractIdleService:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:minus(java.math.BigInteger,java.math.BigInteger)" : null,
  "com.google.common.collect.Range:toString()" : "* Returns a string representation of this range, such as {@code \"[3..5)\"} (other examples are\n   * listed in the class documentation).",
  "com.google.common.collect.SingletonImmutableList:<init>(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableSet:pollFirst()" : null,
  "com.google.common.collect.CompactHashSet:convertToHashFloodingResistantImplementation()" : null,
  "com.google.common.io.MultiReader:ready()" : null,
  "com.google.common.collect.FilteredKeyMultimap$Entries:delegate()" : null,
  "com.google.common.collect.ForwardingQueue:standardPoll()" : "* A sensible definition of {@link #poll} in terms of {@link #remove}. If you override {@link\n   * #remove}, you may wish to override {@link #poll} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.hash.Murmur3_32HashFunction:charToTwoUtf8Bytes(char)" : null,
  "com.google.common.cache.RemovalNotification:create(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)" : "* Creates a new {@code RemovalNotification} for the given {@code key}/{@code value} pair, with\n   * the given {@code cause} for the removal. The {@code key} and/or {@code value} may be {@code\n   * null} if they were already garbage collected.\n   *\n   * @since 19.0",
  "com.google.common.collect.TreeRangeMap$1:subRangeMap(com.google.common.collect.Range)" : null,
  "com.google.common.collect.CompactHashMap:createWithExpectedSize(int)" : "* Creates a {@code CompactHashMap} instance, with a high enough \"initial capacity\" that it\n   * <i>should</i> hold {@code expectedSize} elements without growth.\n   *\n   * @param expectedSize the number of elements you expect to add to the returned set\n   * @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize}\n   *     elements without resizing\n   * @throws IllegalArgumentException if {@code expectedSize} is negative",
  "com.google.common.primitives.ImmutableIntArray$Builder:<init>(int)" : null,
  "com.google.common.collect.ContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.CompactHashMap:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMapEntrySet:writeReplace()" : null,
  "com.google.common.util.concurrent.ForwardingFuture:isCancelled()" : null,
  "com.google.common.collect.EnumMultiset:count(java.lang.Object)" : null,
  "com.google.common.cache.CacheLoader$SupplierToCacheLoader:load(java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:create()" : "* Creates a new min-max priority queue with default settings: natural order, no maximum size, no\n   * initial contents, and an initial expected size of 11.",
  "com.google.common.primitives.Chars$CharArrayAsList:contains(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.util.Map)" : "* Associates all of the given map's keys and values in the built map. Duplicate keys, according\n     * to the comparator (which might be the keys' natural order), are not allowed, and will cause\n     * {@link #build} to fail.\n     *\n     * @throws NullPointerException if any key or value in {@code map} is null",
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compareFalseFirst(boolean,boolean)" : null,
  "com.google.common.collect.TreeMultiset:descendingMultiset()" : null,
  "com.google.common.collect.TreeRangeSet:clear()" : null,
  "com.google.common.collect.ImmutableEnumMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.reflect.TypeResolver:resolveTypes(java.lang.reflect.Type[])" : null,
  "com.google.common.collect.ArrayTable:containsRow(java.lang.Object)" : "* Returns {@code true} if the provided row key is among the row keys provided when the table was\n   * constructed.",
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:newHeader()" : null,
  "com.google.common.collect.Multimaps$CustomSetMultimap:createKeySet()" : null,
  "com.google.common.reflect.Types$ParameterizedTypeImpl:hashCode()" : null,
  "com.google.common.hash.BloomFilter:hashCode()" : null,
  "com.google.common.base.Suppliers$ThreadSafeSupplier:toString()" : null,
  "com.google.common.base.Converter$IdentityConverter:reverse()" : null,
  "com.google.common.hash.AbstractStreamingHasher:munch()" : null,
  "com.google.common.cache.CacheBuilderSpec$DurationParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.Object)" : null,
  "com.google.common.reflect.Invokable:isProtected()" : "Returns true if the element is protected.",
  "com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Lists$AbstractListWrapper:size()" : null,
  "com.google.common.io.CharSource$ConcatenatedCharSource:openStream()" : null,
  "com.google.common.cache.LocalCache$EntryFactory:copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.io.CharStreams:toStringBuilder(java.lang.Readable)" : "* Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance.\n   * Does not close the {@code Readable}.\n   *\n   * @param r the object to read from\n   * @return a {@link StringBuilder} containing all the characters\n   * @throws IOException if an I/O error occurs",
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:slope()" : null,
  "com.google.common.collect.Synchronized:multiset(com.google.common.collect.Multiset,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:createValues()" : null,
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.Lists:subListImpl(java.util.List,int,int)" : "An implementation of {@link List#subList(int, int)}.",
  "com.google.common.collect.ComparisonChain:compare(java.lang.Boolean,java.lang.Boolean)" : "* Discouraged synonym for {@link #compareFalseFirst}.\n   *\n   * @deprecated Use {@link #compareFalseFirst}; or, if the parameters passed are being either\n   *     negated or reversed, undo the negation or reversal and use {@link #compareTrueFirst}.\n   * @since 19.0",
  "com.google.common.cache.LocalCache$Segment:compute(java.lang.Object,int,java.util.function.BiFunction)" : null,
  "com.google.common.collect.ImmutableList:builderWithExpectedSize(int)" : "* Returns a new builder, expecting the specified number of elements to be added.\n   *\n   * <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link\n   * Builder#build} is called, the builder is likely to perform better than an unsized {@link\n   * #builder()} would have.\n   *\n   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,\n   * but not exactly, the number of elements added to the builder.\n   *\n   * @since 23.1",
  "com.google.common.hash.MessageDigestHashFunction$SerializedForm:readResolve()" : null,
  "com.google.common.collect.ImmutableTable:hashCode()" : null,
  "com.google.common.hash.Hasher:putBytes(byte[])" : null,
  "com.google.common.collect.ForwardingMultiset:standardRemoveAll(java.util.Collection)" : "* A sensible definition of {@link #removeAll} in terms of the {@code removeAll} method of {@link\n   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #removeAll}\n   * to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,int)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.CollectCollectors:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.collect.TreeBasedTable:<init>(java.util.Comparator,java.util.Comparator)" : null,
  "com.google.common.util.concurrent.MoreExecutors:directExecutor()" : "* Returns an {@link Executor} that runs each task in the thread that invokes {@link\n   * Executor#execute execute}, as in {@code ThreadPoolExecutor.CallerRunsPolicy}.\n   *\n   * <p>This executor is appropriate for tasks that are lightweight and not deeply chained.\n   * Inappropriate {@code directExecutor} usage can cause problems, and these problems can be\n   * difficult to reproduce because they depend on timing. For example:\n   *\n   * <ul>\n   *   <li>When a {@code ListenableFuture} listener is registered to run under {@code\n   *       directExecutor}, the listener can execute in any of three possible threads:\n   *       <ol>\n   *         <li>When a thread attaches a listener to a {@code ListenableFuture} that's already\n   *             complete, the listener runs immediately in that thread.\n   *         <li>When a thread attaches a listener to a {@code ListenableFuture} that's\n   *             <em>in</em>complete and the {@code ListenableFuture} later completes normally, the\n   *             listener runs in the thread that completes the {@code ListenableFuture}.\n   *         <li>When a listener is attached to a {@code ListenableFuture} and the {@code\n   *             ListenableFuture} gets cancelled, the listener runs immediately in the thread that\n   *             cancelled the {@code Future}.\n   *       </ol>\n   *       Given all these possibilities, it is frequently possible for listeners to execute in UI\n   *       threads, RPC network threads, or other latency-sensitive threads. In those cases, slow\n   *       listeners can harm responsiveness, slow the system as a whole, or worse. (See also the\n   *       note about locking below.)\n   *   <li>If many tasks will be triggered by the same event, one heavyweight task may delay other\n   *       tasks -- even tasks that are not themselves {@code directExecutor} tasks.\n   *   <li>If many such tasks are chained together (such as with {@code\n   *       future.transform(...).transform(...).transform(...)....}), they may overflow the stack.\n   *       (In simple cases, callers can avoid this by registering all tasks with the same {@link\n   *       MoreExecutors#newSequentialExecutor} wrapper around {@code directExecutor()}. More\n   *       complex cases may require using thread pools or making deeper changes.)\n   *   <li>If an exception propagates out of a {@code Runnable}, it is not necessarily seen by any\n   *       {@code UncaughtExceptionHandler} for the thread. For example, if the callback passed to\n   *       {@link Futures#addCallback} throws an exception, that exception will be typically be\n   *       logged by the {@link ListenableFuture} implementation, even if the thread is configured\n   *       to do something different. In other cases, no code will catch the exception, and it may\n   *       terminate whichever thread happens to trigger the execution.\n   * </ul>\n   *\n   * A specific warning about locking: Code that executes user-supplied tasks, such as {@code\n   * ListenableFuture} listeners, should take care not to do so while holding a lock. Additionally,\n   * as a further line of defense, prefer not to perform any locking inside a task that will be run\n   * under {@code directExecutor}: Not only might the wait for a lock be long, but if the running\n   * thread was holding a lock, the listener may deadlock or break lock isolation.\n   *\n   * <p>This instance is equivalent to:\n   *\n   * {@snippet :\n   * final class DirectExecutor implements Executor {\n   *   public void execute(Runnable r) {\n   *     r.run();\n   *   }\n   * }\n   * }\n   *\n   * <p>This should be preferred to {@link #newDirectExecutorService()} because implementing the\n   * {@link ExecutorService} subinterface necessitates significant performance overhead.\n   *\n   * @since 18.0",
  "com.google.common.io.CharSequenceReader:read()" : null,
  "com.google.common.collect.Lists$AbstractListWrapper:contains(java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$Row:entryIterator()" : null,
  "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.locks.Condition,long,java.util.concurrent.TimeUnit)" : "* Invokes {@code condition.}{@link Condition#await(long, TimeUnit) await(timeout, unit)}\n   * uninterruptibly.\n   *\n   * @since 23.6",
  "com.google.common.base.Suppliers$ThreadSafeSupplier:<init>(com.google.common.base.Supplier)" : null,
  "com.google.common.collect.Tables$TransformedTable:rowMap()" : null,
  "com.google.common.base.Charsets:<init>()" : null,
  "com.google.common.hash.HashingInputStream:read(byte[],int,int)" : "* Reads the specified bytes of data from the underlying input stream and updates the hasher with\n   * the bytes read.",
  "com.google.common.base.internal.Finalizer:<init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)" : "Constructs a new finalizer thread.",
  "com.google.common.collect.ForwardingObject:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.math.BigDecimalMath:roundToDouble(java.math.BigDecimal,java.math.RoundingMode)" : "* Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x}\n   * is precisely representable as a {@code double}, its {@code double} value will be returned;\n   * otherwise, the rounding will choose between the two nearest representable values with {@code\n   * mode}.\n   *\n   * <p>For the case of {@link RoundingMode#HALF_DOWN}, {@code HALF_UP}, and {@code HALF_EVEN},\n   * infinite {@code double} values are considered infinitely far away. For example, 2^2000 is not\n   * representable as a double, but {@code roundToDouble(BigDecimal.valueOf(2).pow(2000), HALF_UP)}\n   * will return {@code Double.MAX_VALUE}, not {@code Double.POSITIVE_INFINITY}.\n   *\n   * <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754\n   * default rounding mode: if the two nearest representable values are equally near, the one with\n   * the least significant bit zero is chosen. (In such cases, both of the nearest representable\n   * values are even integers; this method returns the one that is a multiple of a greater power of\n   * two.)\n   *\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not precisely representable as a {@code double}\n   * @since 30.0",
  "com.google.common.collect.LinkedHashMultimap$ValueSet:iterator()" : null,
  "com.google.common.hash.Hashing:hmacSha256(byte[])" : "* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the\n   * SHA-256 (256 hash bits) hash function and a {@link SecretKeySpec} created from the given byte\n   * array and the SHA-256 algorithm.\n   *\n   * @param key the key material of the secret key\n   * @since 20.0",
  "com.google.common.graph.ForwardingGraph:nodes()" : null,
  "com.google.common.collect.EnumMultiset:entrySet()" : null,
  "com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int,int)" : null,
  "com.google.common.base.CharMatcher$NamedFastMatcher:<init>(java.lang.String)" : null,
  "com.google.common.io.Java8Compatibility:<init>()" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:delegate()" : null,
  "com.google.common.collect.LinkedHashMultiset:create(java.lang.Iterable)" : "* Creates a new {@code LinkedHashMultiset} containing the specified elements.\n   *\n   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.\n   *\n   * @param elements the elements that the multiset should contain",
  "com.google.common.util.concurrent.AtomicDoubleArray:get(int)" : "* Gets the current value at position {@code i}.\n   *\n   * @param i the index\n   * @return the current value",
  "com.google.common.primitives.Shorts:reverse(short[])" : "* Reverses the elements of {@code array}. This is equivalent to {@code\n   * Collections.reverse(Shorts.asList(array))}, but is likely to be more efficient.\n   *\n   * @since 23.1",
  "com.google.common.collect.FluentIterable:concat(java.lang.Iterable,java.lang.Iterable)" : "* Returns a fluent iterable that combines two iterables. The returned iterable has an iterator\n   * that traverses the elements in {@code a}, followed by the elements in {@code b}. The source\n   * iterators are not polled until necessary.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input\n   * iterator supports it.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#concat}.\n   *\n   * @since 20.0",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Streams:mapWithIndex(java.util.stream.LongStream,com.google.common.collect.Streams$LongFunctionWithIndex)" : "* Returns a stream consisting of the results of applying the given function to the elements of\n   * {@code stream} and their indexes in the stream. For example,\n   *\n   * {@snippet :\n   * mapWithIndex(\n   *     LongStream.of(10, 11, 12),\n   *     (e, index) -> index + \":\" + e)\n   * }\n   *\n   * <p>...would return {@code Stream.of(\"0:10\", \"1:11\", \"2:12\")}.\n   *\n   * <p>The resulting stream is <a\n   * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n   * if and only if {@code stream} was efficiently splittable and its underlying spliterator\n   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream\n   * comes from a data structure supporting efficient indexed random access, typically an array or\n   * list.\n   *\n   * <p>The order of the resulting stream is defined if and only if the order of the original stream\n   * was defined.",
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:get(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultimap:createCollection()" : "* {@inheritDoc}\n   *\n   * <p>Creates an empty {@code TreeSet} for a collection of values for one key.\n   *\n   * @return a new {@code TreeSet} containing a collection of values for one key",
  "com.google.common.collect.Synchronized$SynchronizedMap:clear()" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:pred()" : null,
  "com.google.common.collect.Lists:charactersOf(java.lang.CharSequence)" : "* Returns a view of the specified {@code CharSequence} as a {@code List<Character>}, viewing\n   * {@code sequence} as a sequence of Unicode code units. The view does not support any\n   * modification operations, but reflects any changes to the underlying character sequence.\n   *\n   * @param sequence the character sequence to view as a {@code List} of characters\n   * @return an {@code List<Character>} view of the character sequence\n   * @since 7.0",
  "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:spliterator()" : null,
  "com.google.common.io.CharSource$ConcatenatedCharSource:isEmpty()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:addAll(int,java.util.Collection)" : null,
  "com.google.common.collect.ImmutableMap:checkNoConflict(boolean,java.lang.String,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ServiceManager:awaitHealthy(long,java.util.concurrent.TimeUnit)" : "* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more\n   * than the given time. The manager will become healthy after all the component services have\n   * reached the {@linkplain State#RUNNING running} state.\n   *\n   * @param timeout the maximum time to wait\n   * @param unit the time unit of the timeout argument\n   * @throws TimeoutException if not all of the services have finished starting within the deadline\n   * @throws IllegalStateException if the service manager reaches a state from which it cannot\n   *     become {@linkplain #isHealthy() healthy}.",
  "com.google.common.math.IntMath:ceilingPowerOfTwo(int)" : "* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to\n   * {@code checkedPow(2, log2(x, CEILING))}.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @throws ArithmeticException of the next-higher power of two is not representable as an {@code\n   *     int}, i.e. when {@code x > 2^30}\n   * @since 20.0",
  "com.google.common.collect.Multisets$FilteredMultiset:createEntrySet()" : null,
  "com.google.common.collect.StandardTable$Row$2:setValue(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap:createKeySet()" : null,
  "com.google.common.math.MathPreconditions:checkNonNegative(java.lang.String,double)" : null,
  "com.google.common.collect.ForwardingSortedMap:standardSubMap(java.lang.Object,java.lang.Object)" : "* A sensible default implementation of {@link #subMap(Object, Object)} in terms of {@link\n   * #headMap(Object)} and {@link #tailMap(Object)}. In some situations, you may wish to override\n   * {@link #subMap(Object, Object)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.util.concurrent.Striped:smear(int)" : null,
  "com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String)" : "* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as\n   * an unsigned {@code int} value.\n   *\n   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}\n   *     value",
  "com.google.common.collect.TreeMultiset:firstEntry()" : null,
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordLoadSuccess(long)" : null,
  "com.google.common.collect.Sets$FilteredSortedSet:first()" : null,
  "com.google.common.collect.ImmutableList$ReverseImmutableList:isPartialView()" : null,
  "com.google.common.hash.Funnels$SequentialFunnel:<init>(com.google.common.hash.Funnel)" : null,
  "com.google.common.net.InetAddresses:isMappedIPv4Address(java.lang.String)" : "* Evaluates whether the argument is an \"IPv4 mapped\" IPv6 address.\n   *\n   * <p>An \"IPv4 mapped\" address is anything in the range ::ffff:0:0/96 (sometimes written as\n   * ::ffff:0.0.0.0/96), with the last 32 bits interpreted as an IPv4 address.\n   *\n   * <p>For more on IPv4 mapped addresses see section 2.5.5.2 of <a target=\"_parent\"\n   * href=\"http://tools.ietf.org/html/rfc4291#section-2.5.5.2\">RFC 4291</a>.\n   *\n   * <p>Note: This method takes a {@code String} argument because {@link InetAddress} automatically\n   * collapses mapped addresses to IPv4. (It is actually possible to avoid this using one of the\n   * obscure {@link Inet6Address} methods, but it would be unwise to depend on such a\n   * poorly-documented feature.)\n   *\n   * <p>This method accepts non-ASCII digits. That is consistent with {@link InetAddress}, but not\n   * with various RFCs. If you want to accept ASCII digits only, you can use something like {@code\n   * CharMatcher.ascii().matchesAllOf(ipString)}.\n   *\n   * @param ipString {@code String} to be examined for embedded IPv4-mapped IPv6 address format\n   * @return {@code true} if the argument is a valid \"mapped\" address\n   * @since 10.0",
  "com.google.common.primitives.ImmutableDoubleArray:of(double,double)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:getSuccessorInValueSet()" : null,
  "com.google.common.hash.Hashing$LinearCongruentialGenerator:nextDouble()" : null,
  "com.google.common.collect.Tables$TransformedTable:rowKeySet()" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMapValues:<init>(java.util.Collection,java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:entryIterator()" : null,
  "com.google.common.primitives.UnsignedLong:fromLongBits(long)" : "* Returns an {@code UnsignedLong} corresponding to a given bit representation. The argument is\n   * interpreted as an unsigned 64-bit value. Specifically, the sign bit of {@code bits} is\n   * interpreted as a normal bit, and all other bits are treated as usual.\n   *\n   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},\n   * otherwise, the result will be equal to {@code 2^64 + bits}.\n   *\n   * <p>To represent decimal constants less than {@code 2^63}, consider {@link #valueOf(long)}\n   * instead.\n   *\n   * @since 14.0",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:self()" : null,
  "com.google.common.graph.Traverser:forGraph(com.google.common.graph.SuccessorsFunction)" : "* Creates a new traverser for the given general {@code graph}.\n   *\n   * <p>Traversers created using this method are guaranteed to visit each node reachable from the\n   * start node(s) at most once.\n   *\n   * <p>If you know that no node in {@code graph} is reachable by more than one path from the start\n   * node(s), consider using {@link #forTree(SuccessorsFunction)} instead.\n   *\n   * <p><b>Performance notes</b>\n   *\n   * <ul>\n   *   <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from\n   *       the start node), assuming that the node objects have <i>O(1)</i> {@code equals()} and\n   *       {@code hashCode()} implementations. (See the <a\n   *       href=\"https://github.com/google/guava/wiki/GraphsExplained#elements-must-be-useable-as-map-keys\">\n   *       notes on element objects</a> for more information.)\n   *   <li>While traversing, the traverser will use <i>O(n)</i> space (where <i>n</i> is the number\n   *       of nodes that have thus far been visited), plus <i>O(H)</i> space (where <i>H</i> is the\n   *       number of nodes that have been seen but not yet visited, that is, the \"horizon\").\n   * </ul>\n   *\n   * @param graph {@link SuccessorsFunction} representing a general graph that may have cycles.",
  "com.google.common.collect.CollectPreconditions:checkRemove(boolean)" : "* Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent\n   * error message.",
  "com.google.common.collect.TreeTraverser:preOrderIterator(java.lang.Object)" : null,
  "com.google.common.graph.DirectedGraphConnections:of(com.google.common.graph.ElementOrder)" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:elementSet()" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:rowMap()" : null,
  "com.google.common.util.concurrent.ExecutionError:<init>()" : "* Creates a new instance with {@code null} as its detail message and no cause.\n   *\n   * @deprecated Prefer {@linkplain ExecutionError(Error)} a constructor that accepts a cause: Users\n   *     of this class typically expect for instances to have a non-null cause. At the moment, you\n   *     can <i>usually</i> still preserve behavior by passing an explicit {@code null} cause. Note,\n   *     however, that passing an explicit {@code null} cause prevents anyone from calling {@link\n   *     #initCause} later, so it is not quite equivalent to using a constructor that omits the\n   *     cause.",
  "com.google.common.io.ByteStreams$LimitedInputStream:reset()" : null,
  "com.google.common.cache.LocalCache$ManualSerializationProxy:delegate()" : null,
  "com.google.common.base.CharMatcher$BitSetMatcher:<init>(java.util.BitSet,java.lang.String)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$LinkedStrongKeyDummyValueEntry:<init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)" : null,
  "com.google.common.io.LineBuffer:finish()" : "* Subclasses must call this method after finishing character processing, in order to ensure that\n   * any unterminated line in the buffer is passed to {@link #handleLine}.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.HashBiMap$Inverse:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap:sortedMap()" : null,
  "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:computeForWord(int)" : null,
  "com.google.common.reflect.Invokable$ConstructorInvokable:getAnnotatedParameterTypes()" : null,
  "com.google.common.graph.AbstractNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.TableCollectors$ImmutableTableCollectorState:toTable()" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingKey(java.lang.Object)" : null,
  "com.google.common.collect.Sets:newLinkedHashSet()" : "* Creates a <i>mutable</i>, empty {@code LinkedHashSet} instance.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSet#of()} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code LinkedHashSet} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @return a new, empty {@code LinkedHashSet}",
  "com.google.common.collect.ArrayTable:containsColumn(java.lang.Object)" : "* Returns {@code true} if the provided column key is among the column keys provided when the\n   * table was constructed.",
  "com.google.common.primitives.UnsignedBytes:<init>()" : null,
  "com.google.common.net.InetAddresses:getIsatapIPv4Address(java.net.Inet6Address)" : "* Returns the IPv4 address embedded in an ISATAP address.\n   *\n   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in ISATAP address\n   * @return {@link Inet4Address} of embedded IPv4 in an ISATAP address\n   * @throws IllegalArgumentException if the argument is not a valid IPv6 ISATAP address",
  "com.google.common.collect.JdkBackedImmutableSet:<init>(java.util.Set,com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.Sets:newCopyOnWriteArraySet(java.lang.Iterable)" : "* Creates a {@code CopyOnWriteArraySet} instance containing the given elements.\n   *\n   * @param elements the elements that the set should contain, in order\n   * @return a new {@code CopyOnWriteArraySet} containing those elements\n   * @since 12.0",
  "com.google.common.collect.EmptyContiguousSet$SerializedForm:<init>(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.collect.NullnessCasts:unsafeNull()" : "Returns {@code null} as any type, even one that does not include {@code null}.",
  "com.google.common.base.CharMatcher$Any:removeFrom(java.lang.CharSequence)" : null,
  "com.google.common.io.CharSource$CharSequenceCharSource:length()" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:comparator()" : null,
  "com.google.common.io.ByteStreams$LimitedInputStream:read(byte[],int,int)" : null,
  "com.google.common.primitives.Ints$IntArrayAsList:hashCode()" : null,
  "com.google.common.collect.ForwardingMultiset:standardIterator()" : "* A sensible definition of {@link #iterator} in terms of {@link #entrySet} and {@link\n   * #remove(Object)}. If you override either of these methods, you may wish to override {@link\n   * #iterator} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.NullsFirstOrdering:toString()" : null,
  "com.google.common.graph.ImmutableValueGraph$Builder:<init>(com.google.common.graph.ValueGraphBuilder)" : null,
  "com.google.common.graph.UndirectedGraphConnections:incidentEdgeIterator(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap:setValue(int,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableTable:isEmpty()" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:<init>(java.lang.Object,java.lang.Object,int,com.google.common.collect.LinkedHashMultimap$ValueEntry)" : null,
  "com.google.common.collect.ForwardingNavigableMap:descendingKeySet()" : null,
  "com.google.common.collect.ForwardingSortedSet:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putByte(byte)" : null,
  "com.google.common.collect.Maps$SortedAsMapView:lastKey()" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:iterator()" : null,
  "com.google.common.graph.ForwardingValueGraph:inDegree(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:<init>(java.util.Set,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedBiMap:delegate()" : null,
  "com.google.common.collect.Iterators:consumingIterator(java.util.Iterator)" : "* Returns a view of the supplied {@code iterator} that removes each element from the supplied\n   * {@code iterator} as it is returned.\n   *\n   * <p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator\n   * will fail on the first call to {@code next}. The returned {@link Iterator} is also not\n   * thread-safe.\n   *\n   * @param iterator the iterator to remove and return elements from\n   * @return an iterator that removes and returns elements from the supplied iterator\n   * @since 2.0",
  "com.google.common.reflect.ClassPath$ResourceInfo:getResourceName()" : "Returns the fully qualified name of the resource. Such as \"com/mycomp/foo/bar.txt\".",
  "com.google.common.cache.LocalCache$HashIterator:nextInTable()" : "Finds the next entry in the current table. Returns true if an entry was found.",
  "com.google.common.collect.Synchronized$SynchronizedCollection:add(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMultiset:hashCode()" : null,
  "com.google.common.cache.LocalCache$EntryFactory$7:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)" : null,
  "com.google.common.collect.JdkBackedImmutableBiMap:inverse()" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:inDegree(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMultiset:standardRetainAll(java.util.Collection)" : "* A sensible definition of {@link #retainAll} in terms of the {@code retainAll} method of {@link\n   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #retainAll}\n   * to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long,int)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.io.CharStreams:copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder)" : "* Copies all characters between the {@link Reader} and {@link StringBuilder} objects. Does not\n   * close or flush the reader.\n   *\n   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific\n   * types. CharBuffer has poor performance when being written into or read out of so round tripping\n   * all the bytes through the buffer takes a long time. With these specialized types we can just\n   * use a char array.\n   *\n   * @param from the object to read from\n   * @param to the object to write to\n   * @return the number of characters copied\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.collect.ImmutableSortedMap:writeReplace()" : null,
  "com.google.common.collect.LinkedListMultimap:create(com.google.common.collect.Multimap)" : "* Constructs a {@code LinkedListMultimap} with the same mappings as the specified {@code\n   * Multimap}. The new multimap has the same {@link Multimap#entries()} iteration order as the\n   * input multimap.\n   *\n   * @param multimap the multimap whose contents are copied to this multimap",
  "com.google.common.collect.Iterators:peekingIterator(com.google.common.collect.PeekingIterator)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this\n   * @since 10.0",
  "com.google.common.io.MoreFiles:concat(java.util.Collection,java.util.Collection)" : "* Concatenates the contents of the two given collections of exceptions. If either collection is\n   * null, the other collection is returned. Otherwise, the elements of {@code other} are added to\n   * {@code exceptions} and {@code exceptions} is returned.",
  "com.google.common.collect.Synchronized$SynchronizedTable:putAll(com.google.common.collect.Table)" : null,
  "com.google.thirdparty.publicsuffix.TrieParser:doParseTrieToBuilder(java.util.Deque,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder)" : "* Parses a trie node and returns the number of characters consumed.\n   *\n   * @param stack The prefixes that precede the characters represented by this node. Each entry of\n   *     the stack is in reverse order.\n   * @param encoded The serialized trie.\n   * @param start An index in the encoded serialized trie to begin reading characters from.\n   * @param builder A map builder to which all entries will be added.\n   * @return The number of characters consumed from {@code encoded}.",
  "com.google.common.collect.HashMultimap:<init>()" : null,
  "com.google.common.graph.AbstractValueGraph$1:edges()" : "* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and\n   * {@link #successors(Object)}.",
  "com.google.common.io.CharSink:writeFrom(java.lang.Readable)" : "* Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink.\n   * Does not close {@code readable} if it is {@code Closeable}.\n   *\n   * @return the number of characters written\n   * @throws IOException if an I/O error occurs while reading from {@code readable} or writing to\n   *     this sink",
  "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.Ordering:compound(java.util.Comparator)" : "* Returns an ordering which first uses the ordering {@code this}, but which in the event of a\n   * \"tie\", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by\n   * status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a\n   * compound ordering with three or more components, simply chain multiple calls to this method.\n   *\n   * <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to\n   * one created using {@link Ordering#compound(Iterable)} on the same component comparators.\n   *\n   * <p>The returned object is serializable if this object and {@code secondaryComparator} are both\n   * serializable.\n   *\n   * <p><b>Java 8+ users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead.\n   * Depending on what {@code secondaryComparator} is, one of the other overloads of {@code\n   * thenComparing} may be even more useful.",
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:pollFirstEntry()" : null,
  "com.google.common.collect.CollectCollectors:toImmutableEnumSetGeneric()" : null,
  "com.google.common.collect.MapMaker:setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength)" : null,
  "com.google.common.collect.ImmutableSortedSet:spliterator()" : null,
  "com.google.common.collect.StandardTable:column(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>The returned map's views have iterators that don't support {@code remove()}.",
  "com.google.common.collect.RegularImmutableAsList:internalArrayStart()" : null,
  "com.google.common.collect.Maps$MapDifferenceImpl:entriesOnlyOnLeft()" : null,
  "com.google.common.collect.RegularImmutableTable$CellSet:contains(java.lang.Object)" : null,
  "com.google.common.collect.SortedMultisets:<init>()" : null,
  "com.google.common.cache.LocalCache$WeakValueReference:getWeight()" : null,
  "com.google.common.io.FileBackedOutputStream:update(int)" : "* Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if\n   * so.",
  "com.google.common.collect.AbstractMultimap$Entries:spliterator()" : null,
  "com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable,boolean)" : "* @since 12.0",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:withPadChar(char)" : null,
  "com.google.common.collect.TreeRangeSet:isEmpty()" : null,
  "com.google.common.net.MediaType:<init>(java.lang.String,java.lang.String,com.google.common.collect.ImmutableListMultimap)" : null,
  "com.google.common.cache.CacheBuilder:getKeyStrength()" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:<init>(java.util.concurrent.ExecutorService)" : null,
  "com.google.common.math.LongMath:saturatedSubtract(long,long)" : null,
  "com.google.common.collect.StandardTable$Column$Values:removeAll(java.util.Collection)" : null,
  "com.google.common.util.concurrent.Futures:transformAsync(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)" : "* Returns a new {@code Future} whose result is asynchronously derived from the result of the\n   * given {@code Future}. If the given {@code Future} fails, the returned {@code Future} fails with\n   * the same exception (and the function is not invoked).\n   *\n   * <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced\n   * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.\n   * Example usage:\n   *\n   * {@snippet :\n   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n   * ListenableFuture<QueryResult> queryFuture =\n   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the warnings the {@link MoreExecutors#directExecutor} documentation.\n   *\n   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the\n   * input future and that of the future returned by the chain function. That is, if the returned\n   * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the\n   * other two is cancelled, the returned {@code Future} will receive a callback in which it will\n   * attempt to cancel itself.\n   *\n   * @param input The future to transform\n   * @param function A function to transform the result of the input future to the result of the\n   *     output future\n   * @param executor Executor to run the function in.\n   * @return A future that holds result of the function (if the input succeeded) or the original\n   *     input's failure (if not)\n   * @since 19.0 (in 11.0 as {@code transform})",
  "com.google.common.collect.EvictingQueue:create(int)" : "* Creates and returns a new evicting queue that will hold up to {@code maxSize} elements.\n   *\n   * <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the\n   * queue.",
  "com.google.common.hash.LittleEndianByteArray:store64(byte[],int,long)" : "* Store 8 bytes into the provided array at the indicated offset, using the value provided.\n   *\n   * @param sink the output byte array\n   * @param offset the offset into the array at which to start writing\n   * @param value the value to write",
  "com.google.common.base.AbstractIterator:remove()" : null,
  "com.google.common.base.Throwables:getCauseAs(java.lang.Throwable,java.lang.Class)" : "* Returns {@code throwable}'s cause, cast to {@code expectedCauseType}.\n   *\n   * <p>Prefer this method instead of manually casting an exception's cause. For example, {@code\n   * (IOException) e.getCause()} throws a {@link ClassCastException} that discards the original\n   * exception {@code e} if the cause is not an {@link IOException}, but {@code\n   * Throwables.getCauseAs(e, IOException.class)} keeps {@code e} as the {@link\n   * ClassCastException}'s cause.\n   *\n   * @throws ClassCastException if the cause cannot be cast to the expected type. The {@code\n   *     ClassCastException}'s cause is {@code throwable}.\n   * @since 22.0",
  "com.google.common.hash.HashCode$IntHashCode:<init>(int)" : null,
  "com.google.common.math.IntMath:sqrt(int,java.math.RoundingMode)" : "* Returns the square root of {@code x}, rounded with the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x < 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code\n   *     sqrt(x)} is not an integer",
  "com.google.common.graph.Graphs$TransposedValueGraph:predecessors(java.lang.Object)" : null,
  "com.google.common.collect.AbstractListMultimap:unmodifiableCollectionSubclass(java.util.Collection)" : null,
  "com.google.common.collect.GeneralRange:tooHigh(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ExecutionSequencer:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)" : "* Enqueues a task to run when the previous task (if any) completes.\n   *\n   * <p>Cancellation does not propagate from the output future to the future returned from {@code\n   * callable} or a callable that has begun to execute, but if the output future is cancelled before\n   * {@link AsyncCallable#call()} is invoked, {@link AsyncCallable#call()} will not be invoked.",
  "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:delegate()" : null,
  "com.google.common.net.MediaType:createVideoType(java.lang.String)" : "* Creates a media type with the \"video\" type and the given subtype.\n   *\n   * @throws IllegalArgumentException if subtype is invalid",
  "com.google.common.cache.LocalCache$AccessQueue:contains(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:keys()" : null,
  "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:loadFinalizer()" : null,
  "com.google.common.reflect.Invokable$ConstructorInvokable:isOverridable()" : null,
  "com.google.common.collect.Iterators:limit(java.util.Iterator,int)" : "* Returns a view containing the first {@code limitSize} elements of {@code iterator}. If {@code\n   * iterator} contains fewer than {@code limitSize} elements, the returned view contains all of its\n   * elements. The returned iterator supports {@code remove()} if {@code iterator} does.\n   *\n   * @param iterator the iterator to limit\n   * @param limitSize the maximum number of elements in the returned iterator\n   * @throws IllegalArgumentException if {@code limitSize} is negative\n   * @since 3.0",
  "com.google.common.collect.Synchronized:set(java.util.Set,java.lang.Object)" : null,
  "com.google.common.hash.BloomFilter:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ListenerCallQueue:enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$Column$EntrySet:isEmpty()" : null,
  "com.google.common.net.InternetDomainName:hashCode()" : null,
  "com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair:<init>(java.lang.Runnable,java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:firstEntry()" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:incidentNodes(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$StrongEntry:getNext()" : null,
  "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:roundToDoubleArbitrarily(java.math.BigInteger)" : null,
  "com.google.common.collect.HashBiMap:<init>(int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:getOrCreateCollection(java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:lockStateChanged(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)" : "* CycleDetectingLock implementations must call this method in a {@code finally} clause after any\n   * attempt to change the lock state, including both lock and unlock attempts. Failure to do so can\n   * result in corrupting the acquireLocks set.",
  "com.google.common.util.concurrent.Striped$CompactStriped:size()" : null,
  "com.google.common.reflect.TypeToken$InterfaceSet:classes()" : null,
  "com.google.common.base.Equivalence$Wrapper:<init>(com.google.common.base.Equivalence,java.lang.Object)" : null,
  "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:isRunning()" : null,
  "com.google.common.graph.ImmutableValueGraph$Builder:build()" : "* Returns a newly-created {@code ImmutableValueGraph} based on the contents of this {@code\n     * Builder}.",
  "com.google.common.util.concurrent.Service$Listener:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Synchronized$SynchronizedCollection:clear()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previousIndex()" : null,
  "com.google.common.collect.Lists$AbstractListWrapper:add(int,java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:rotateLeft()" : null,
  "com.google.common.collect.Queues:newLinkedBlockingDeque()" : "* Creates an empty {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE}.\n   *\n   * @since 12.0",
  "com.google.common.util.concurrent.AtomicLongMap:putAll(java.util.Map)" : "* Copies all of the mappings from the specified map to this map. The effect of this call is\n   * equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key\n   * {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined\n   * if the specified map is modified while the operation is in progress.",
  "com.google.common.util.concurrent.ForwardingExecutorService:submit(java.lang.Runnable)" : null,
  "com.google.common.hash.HashCode$IntHashCode:asInt()" : null,
  "com.google.common.math.DoubleMath:factorial(int)" : "* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if\n   * {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if {@code n! >\n   * Double.MAX_VALUE}.\n   *\n   * <p>The result is within 1 ulp of the true value.\n   *\n   * @throws IllegalArgumentException if {@code n < 0}",
  "com.google.common.base.CharMatcher:noneOf(java.lang.CharSequence)" : "* Returns a {@code char} matcher that matches any BMP character not present in the given\n   * character sequence. Returns a bogus matcher if the sequence contains supplementary characters.",
  "com.google.common.collect.Maps$FilteredKeyMap:<init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.AbstractRangeSet:enclosesAll(com.google.common.collect.RangeSet)" : null,
  "com.google.common.collect.ForwardingList:equals(java.lang.Object)" : null,
  "com.google.common.graph.ElementOrder:<init>(com.google.common.graph.ElementOrder$Type,java.util.Comparator)" : null,
  "com.google.common.primitives.Bytes:indexOf(byte[],byte,int,int)" : null,
  "com.google.common.graph.AbstractDirectedNetworkConnections:incidentEdges()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readChar()" : null,
  "com.google.common.primitives.ImmutableIntArray$AsList:size()" : null,
  "com.google.common.collect.Iterators:getNext(java.util.Iterator,java.lang.Object)" : "* Returns the next element in {@code iterator} or {@code defaultValue} if the iterator is empty.\n   * The {@link Iterables} analog to this method is {@link Iterables#getFirst}.\n   *\n   * @param defaultValue the default value to return if the iterator is empty\n   * @return the next element of {@code iterator} or the default value\n   * @since 7.0",
  "com.google.common.io.MoreFiles:addException(java.util.Collection,java.io.IOException)" : "* Adds the given exception to the given collection, creating the collection if it's null. Returns\n   * the collection.",
  "com.google.common.collect.RegularImmutableSortedSet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.base.CharMatcher$None:matchesNoneOf(java.lang.CharSequence)" : null,
  "com.google.common.io.LittleEndianDataOutputStream:writeUTF(java.lang.String)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:write(byte[],int,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.FilteredKeyMultimap:createKeySet()" : null,
  "com.google.common.io.CharSource:readLines()" : "* Reads all the lines of this source as a list of strings. The returned list will be empty if\n   * this source is empty.\n   *\n   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\n   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n   * it does.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source",
  "com.google.common.collect.HashBasedTable:columnMap()" : null,
  "com.google.common.primitives.Booleans:indexOf(boolean[],boolean,int,int)" : null,
  "com.google.common.hash.AbstractByteHasher:putBytes(byte[],int,int)" : null,
  "com.google.common.hash.ChecksumHashFunction$ChecksumHasher:update(byte)" : null,
  "com.google.common.collect.ReverseNaturalOrdering:max(java.util.Iterator)" : null,
  "com.google.common.cache.CacheStats:hitCount()" : "Returns the number of times {@link Cache} lookup methods have returned a cached value.",
  "com.google.common.hash.HashCode:decode(char)" : null,
  "com.google.common.collect.Synchronized$SynchronizedSortedMap:tailMap(java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredKeyMap:containsKey(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$StrongEntry:getKey()" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:isDone()" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask:run()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingKeySet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:unmodifiableCollectionSubclass(java.util.Collection)" : null,
  "com.google.common.collect.CollectCollectors:<init>()" : null,
  "com.google.common.collect.CompoundOrdering:<init>(java.lang.Iterable)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double,com.google.common.math.LinearTransformation)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:<init>(com.google.common.collect.SetMultimap)" : null,
  "com.google.common.io.ByteSource$ConcatenatedByteSource:openStream()" : null,
  "com.google.common.collect.Collections2$TransformedCollection:clear()" : null,
  "com.google.common.util.concurrent.ServiceManager:toString()" : null,
  "com.google.common.collect.RegularImmutableMap:checkNoConflictInKeyBucket(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,boolean)" : "* Checks if the given key already appears in the hash chain starting at {@code keyBucketHead}. If\n   * it does not, then null is returned. If it does, then if {@code throwIfDuplicateKeys} is true an\n   * {@code IllegalArgumentException} is thrown, and otherwise the existing {@link Entry} is\n   * returned.\n   *\n   * @throws IllegalArgumentException if another entry in the bucket has the same key and {@code\n   *     throwIfDuplicateKeys} is true\n   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash\n   *     flooding attack",
  "com.google.common.collect.Tables$TransformedTable:size()" : null,
  "com.google.common.graph.ForwardingNetwork:edgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:outEdges()" : null,
  "com.google.common.collect.TreeTraverser$PreOrderIterator:hasNext()" : null,
  "com.google.common.primitives.ImmutableLongArray:trimmed()" : "* Returns an immutable array containing the same values as {@code this} array. This is logically\n   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance\n   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range\n   * of values, resulting in an equivalent array with a smaller memory footprint.",
  "com.google.common.collect.LexicographicalOrdering:toString()" : null,
  "com.google.common.collect.RegularContiguousSet:<init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.collect.GeneralRange:range(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)" : "* Returns everything between the endpoints relative to the specified comparator, with the\n   * specified endpoint behavior.",
  "com.google.common.util.concurrent.TimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,java.time.Duration)" : "* Invokes a specified Runnable, timing out after the specified time limit. If the target method\n   * run finishes before the limit is reached, this method returns or a wrapped exception is\n   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and\n   * throw a {@link TimeoutException} to the caller.\n   *\n   * <p>The difference with {@link #runWithTimeout(Runnable, Duration)} is that this method will\n   * ignore interrupts on the current thread.\n   *\n   * @param runnable the Runnable to execute\n   * @param timeout the maximum length of time to wait\n   * @throws TimeoutException if the time limit is reached\n   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}\n   * @throws ExecutionError if {@code runnable} throws an {@code Error}\n   * @since 28.0",
  "com.google.common.collect.Multimaps$MapMultimap:containsEntry(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$AccessQueue:remove(java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap$Itr:next()" : null,
  "com.google.common.base.Preconditions:checkPositionIndex(int,int,java.lang.String)" : "* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of\n   * size {@code size}. A position index may range from zero to {@code size}, inclusive.\n   *\n   * @param index a user-supplied index identifying a position in an array, list or string\n   * @param size the size of that array, list or string\n   * @param desc the text to use to describe this index in an error message\n   * @return the value of {@code index}\n   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.base.Suppliers$ExpiringMemoizingSupplier:get()" : null,
  "com.google.common.graph.ValueGraphBuilder:from(com.google.common.graph.ValueGraph)" : "* Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code\n   * graph}.\n   *\n   * <p>The \"queryable\" properties are those that are exposed through the {@link ValueGraph}\n   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as {@link\n   * #expectedNodeCount(int)}, are not set in the new builder.",
  "com.google.common.collect.LinkedListMultimap:create()" : "Creates a new, empty {@code LinkedListMultimap} with the default initial capacity.",
  "com.google.common.collect.MapMakerInternalMap:createSegment(int)" : null,
  "com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset)" : "* Reads all of the lines from a file. The lines do not include line-termination characters, but\n   * do include other leading and trailing whitespace.\n   *\n   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code\n   * Files.asCharSource(file, charset).readLines()}.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n   * java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}.\n   *\n   * @param file the file to read from\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @return a mutable {@link List} containing all the lines\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.Multisets:retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "* Modifies {@code multisetToModify} so that its count for an element {@code e} is at most {@code\n   * multisetToRetain.count(e)}.\n   *\n   * <p>To be precise, {@code multisetToModify.count(e)} is set to {@code\n   * Math.min(multisetToModify.count(e), multisetToRetain.count(e))}. This is similar to {@link\n   * #intersection(Multiset, Multiset) intersection} {@code (multisetToModify, multisetToRetain)},\n   * but mutates {@code multisetToModify} instead of returning a view.\n   *\n   * <p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps all occurrences of\n   * elements that appear at all in {@code multisetToRetain}, and deletes all occurrences of all\n   * other elements.\n   *\n   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation\n   * @since 10.0",
  "com.google.common.collect.CompactLinkedHashMap:createHashFloodingResistantDelegate(int)" : null,
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:headMap(com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.ImmutableMultiset:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n   * described in the class documentation.\n   *\n   * @throws NullPointerException if any element is null\n   * @since 6.0 (source-compatible since 2.0)",
  "com.google.common.collect.Synchronized$SynchronizedMultiset:equals(java.lang.Object)" : null,
  "com.google.common.collect.Maps$EntrySet:removeAll(java.util.Collection)" : null,
  "com.google.common.math.LongMath:<init>()" : null,
  "com.google.common.util.concurrent.ServiceManager:awaitStopped(long,java.util.concurrent.TimeUnit)" : "* Waits for the all the services to reach a terminal state for no more than the given time. After\n   * this method returns all services will either be {@linkplain Service.State#TERMINATED\n   * terminated} or {@linkplain Service.State#FAILED failed}.\n   *\n   * @param timeout the maximum time to wait\n   * @param unit the time unit of the timeout argument\n   * @throws TimeoutException if not all of the services have stopped within the deadline",
  "com.google.common.util.concurrent.AbstractIdleService:awaitRunning()" : "* @since 15.0",
  "com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean)" : "* A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the\n   * {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override {@link\n   * #subSet(Object, boolean, Object, boolean)} to forward to this implementation.",
  "com.google.common.collect.Comparators:emptiesFirst(java.util.Comparator)" : "* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as less\n   * than all other values, and orders the rest using {@code valueComparator} on the contained\n   * value.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject:<init>(java.util.Spliterator,java.util.Spliterator,java.util.function.Function,int,long)" : null,
  "com.google.common.graph.Traverser$Traversal$2:<init>(com.google.common.graph.SuccessorsFunction)" : null,
  "com.google.common.primitives.Bytes:reverse(byte[])" : "* Reverses the elements of {@code array}. This is equivalent to {@code\n   * Collections.reverse(Bytes.asList(array))}, but is likely to be more efficient.\n   *\n   * @since 23.1",
  "com.google.common.primitives.UnsignedInts:compare(int,int)" : "* Compares the two specified {@code int} values, treating them as unsigned values between {@code\n   * 0} and {@code 2^32 - 1} inclusive.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the\n   * equivalent {@link Integer#compareUnsigned(int, int)} method instead.\n   *\n   * @param a the first unsigned {@code int} to compare\n   * @param b the second unsigned {@code int} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.util.concurrent.AtomicLongMap:asMap()" : "Returns a live, read-only view of the map backing this {@code AtomicLongMap}.",
  "com.google.common.net.MediaType:normalizeParameterValue(java.lang.String,java.lang.String)" : null,
  "com.google.common.collect.Sets$FilteredNavigableSet:floor(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingListIterator:previousIndex()" : null,
  "com.google.common.cache.LocalCache$NullEntry:setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:isTerminated()" : null,
  "com.google.common.collect.ImmutableEnumSet:equals(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.cache.LocalCache:recordsAccess()" : null,
  "com.google.common.primitives.Ints:fromByteArray(byte[])" : "* Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of\n   * {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input\n   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code\n   * 0x12131415}.\n   *\n   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n   * flexibility at little cost in readability.\n   *\n   * @throws IllegalArgumentException if {@code bytes} has fewer than 4 elements",
  "com.google.common.cache.LocalCache$Values:contains(java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap:size()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMaker$Dummy)" : null,
  "com.google.common.collect.DescendingMultiset:pollLastEntry()" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:toString()" : null,
  "com.google.common.collect.ImmutableSet$Indexed:spliterator()" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getValueReference()" : null,
  "com.google.common.collect.Lists:computeArrayListCapacity(int)" : null,
  "com.google.common.hash.Hashing:combineUnordered(java.lang.Iterable)" : "* Returns a hash code, having the same bit length as each of the input hash codes, that combines\n   * the information of these hash codes in an unordered fashion. That is, whenever two equal hash\n   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each\n   * was computed from the <i>same</i> input hash codes in <i>some</i> order.\n   *\n   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all\n   *     have the same bit length",
  "com.google.common.util.concurrent.AtomicLongMap:get(java.lang.Object)" : "* Returns the value associated with {@code key}, or zero if there is no value associated with\n   * {@code key}.",
  "com.google.common.primitives.ImmutableIntArray:hashCode()" : "Returns an unspecified hash code for the contents of this immutable array.",
  "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putBytes(java.nio.ByteBuffer)" : null,
  "com.google.common.base.CharMatcher$None:and(com.google.common.base.CharMatcher)" : null,
  "com.google.common.io.BaseEncoding$Alphabet:decodabetFor(char[])" : null,
  "com.google.common.graph.Graphs$TransposedGraph:delegate()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int,java.lang.Object)" : null,
  "com.google.common.graph.DirectedGraphConnections:predecessors()" : null,
  "com.google.common.io.CharStreams:nullWriter()" : "* Returns a {@link Writer} that simply discards written chars.\n   *\n   * <p><b>Java 11+ users:</b> use {@link Writer#nullWriter()} instead. Note that the {@link\n   * CharStreams} method returns a singleton writer whose {@code close} method has no effect, while\n   * the {@link Writer#nullWriter()} method returns a new instance whose methods throw after the\n   * instance is {@link Writer#close() closed}.\n   *\n   * @since 15.0",
  "com.google.common.collect.ForwardingSortedMultiset:standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)" : "* A sensible definition of {@link #subMultiset(Object, BoundType, Object, BoundType)} in terms of\n   * {@link #headMultiset(Object, BoundType) headMultiset} and {@link #tailMultiset(Object,\n   * BoundType) tailMultiset}.\n   *\n   * <p>If you override either of these methods, you may wish to override {@link\n   * #subMultiset(Object, BoundType, Object, BoundType)} to forward to this implementation.",
  "com.google.common.base.Stopwatch:start()" : "* Starts the stopwatch.\n   *\n   * @return this {@code Stopwatch} instance\n   * @throws IllegalStateException if the stopwatch is already running.",
  "com.google.common.collect.Sets$DescendingSet:toArray()" : null,
  "com.google.common.base.Utf8:<init>()" : null,
  "com.google.common.collect.Count:get()" : null,
  "com.google.common.graph.Graphs:checkPositive(int)" : null,
  "com.google.common.cache.LocalCache$EntryFactory$1:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* Creates a new entry.\n     *\n     * @param segment to create the entry for\n     * @param key of the entry\n     * @param hash of the key\n     * @param next entry in the same bucket",
  "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "Returns an immutable multimap containing the given entries, in order.",
  "com.google.common.collect.LinkedListMultimap:createKeys()" : null,
  "com.google.common.base.CharMatcher$Invisible:<init>()" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char,int)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.cache.CacheBuilder:getRefreshNanos()" : null,
  "com.google.common.cache.LocalCache$LoadingSerializationProxy:get(java.lang.Object)" : null,
  "com.google.common.io.Files:fileTraverser()" : "* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser\n   * starts from a {@link File} and will return all files and directories it encounters.\n   *\n   * <p><b>Warning:</b> {@code File} provides no support for symbolic links, and as such there is no\n   * way to ensure that a symbolic link to a directory is not followed when traversing the tree. In\n   * this case, iterables created by this traverser could contain files that are outside of the\n   * given directory or even be infinite if there is a symbolic link loop.\n   *\n   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same\n   * except that it doesn't follow symbolic links and returns {@code Path} instances.\n   *\n   * <p>If the {@link File} passed to one of the {@link Traverser} methods does not exist or is not\n   * a directory, no exception will be thrown and the returned {@link Iterable} will contain a\n   * single element: that file.\n   *\n   * <p>Example: {@code Files.fileTraverser().depthFirstPreOrder(new File(\"/\"))} may return files\n   * with the following paths: {@code [\"/\", \"/etc\", \"/etc/config.txt\", \"/etc/fonts\", \"/home\",\n   * \"/home/alice\", ...]}\n   *\n   * @since 23.5",
  "com.google.common.collect.ImmutableAsList:writeReplace()" : null,
  "com.google.common.collect.AbstractSortedKeySortedSetMultimap:asMap()" : null,
  "com.google.common.collect.Maps:filterEntries(java.util.SortedMap,com.google.common.base.Predicate)" : "* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.\n   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code\n   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the\n   * map's entries have a {@link Entry#setValue} method that throws an {@link\n   * IllegalArgumentException} when the existing key and the provided value don't satisfy the\n   * predicate.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings that satisfy the filter will be removed from the underlying map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}.\n   *\n   * @since 11.0",
  "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:<init>()" : null,
  "com.google.common.collect.Collections2$FilteredCollection:spliterator()" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:delegate()" : null,
  "com.google.common.util.concurrent.ListeningExecutorService:submit(java.util.concurrent.Callable)" : "* @return a {@code ListenableFuture} representing pending completion of the task\n   * @throws RejectedExecutionException {@inheritDoc}",
  "com.google.common.collect.ArrayListMultimap:<init>(com.google.common.collect.Multimap)" : null,
  "com.google.common.util.concurrent.AbstractService$IsStoppedGuard:isSatisfied()" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.util.concurrent.AtomicDouble:doubleValue()" : "Returns the value of this {@code AtomicDouble} as a {@code double}.",
  "com.google.common.collect.ForwardingConcurrentMap:putIfAbsent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.CollectSpliterators:flatMapToInt(java.util.Spliterator,java.util.function.Function,int,long)" : "* Returns a {@code Spliterator.OfInt} that iterates over the elements of the spliterators\n   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code\n   * function} returns {@code null} for an input, it is replaced with an empty stream.)",
  "com.google.common.collect.Iterators$ConcatenatedIterator:remove()" : null,
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compareTrueFirst(boolean,boolean)" : null,
  "com.google.common.collect.TableCollectors$MutableCell:getValue()" : null,
  "com.google.common.cache.LocalCache$AccessQueue:poll()" : null,
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:<init>()" : null,
  "com.google.common.collect.ReverseNaturalOrdering:min(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableListMultimap:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap}\n   * whose keys and values are the result of applying the provided mapping functions to the input\n   * elements.\n   *\n   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link\n   * java.util.stream} Javadoc), that order is preserved, but entries are <a\n   * href=\"ImmutableMultimap.html#iteration\">grouped by key</a>.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n   *     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n   *         .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));\n   *\n   * // is equivalent to\n   *\n   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n   *     new ImmutableListMultimap.Builder<Character, String>()\n   *         .put('b', \"anana\")\n   *         .putAll('a', \"pple\", \"sparagus\")\n   *         .putAll('c', \"arrot\", \"herry\")\n   *         .build();\n   * }\n   *\n   * @since 21.0",
  "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Collection)" : "* Returns an immutable sorted set containing the given elements sorted by the given {@code\n   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the\n   * first one specified is included.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent\n   * collection that is currently being modified by another thread.\n   *\n   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null\n   * @since 7.0 (source-compatible since 2.0)",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:delegate()" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:canDecode(java.lang.CharSequence)" : null,
  "com.google.common.cache.LocalCache$WriteQueue:clear()" : null,
  "com.google.common.collect.TreeRangeMap:get(java.lang.Comparable)" : null,
  "com.google.common.graph.StandardNetwork:successors(java.lang.Object)" : null,
  "com.google.common.collect.Iterators:filter(java.util.Iterator,java.lang.Class)" : "* Returns a view of {@code unfiltered} containing all elements that are of the type {@code\n   * desiredType}.",
  "com.google.common.collect.ContiguousSet:create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)" : "* Returns a {@code ContiguousSet} containing the same values in the given domain {@linkplain\n   * Range#contains contained} by the range.\n   *\n   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if\n   *     neither has an upper bound\n   * @since 13.0",
  "com.google.common.collect.LinkedListMultimap$Node:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.math.MathPreconditions:checkNonNegative(java.lang.String,long)" : null,
  "com.google.common.math.Stats:count()" : "Returns the number of values.",
  "com.google.common.collect.ImmutableBiMap$SerializedForm:makeBuilder(int)" : null,
  "com.google.common.cache.CacheBuilder$NullListener:onRemoval(com.google.common.cache.RemovalNotification)" : null,
  "com.google.common.collect.ReverseNaturalOrdering:<init>()" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:put(com.google.common.collect.Range,java.lang.Object)" : null,
  "com.google.common.collect.FluentIterable:filter(com.google.common.base.Predicate)" : "* Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent\n   * iterable's iterator does not support {@code remove()}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter} (same).",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:contains(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.Sets:newCopyOnWriteArraySet()" : "* Creates an empty {@code CopyOnWriteArraySet} instance.\n   *\n   * <p><b>Note:</b> if you need an immutable empty {@link Set}, use {@link Collections#emptySet}\n   * instead.\n   *\n   * @return a new, empty {@code CopyOnWriteArraySet}\n   * @since 12.0",
  "com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable set containing the given elements, minus duplicates, in the order each was\n   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n   * the first are ignored.",
  "com.google.common.collect.CompactLinkedHashMap:link(int)" : null,
  "com.google.common.collect.Queues:newArrayDeque()" : "* Creates an empty {@code ArrayDeque}.\n   *\n   * @since 12.0",
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.Lists$StringAsImmutableList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$Values:size()" : null,
  "com.google.common.collect.ImmutableSortedMultiset:<init>()" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:column(java.lang.Object)" : null,
  "com.google.common.collect.AbstractBiMap$Inverse:writeObject(java.io.ObjectOutputStream)" : "* @serialData the forward bimap",
  "com.google.common.collect.ImmutableMap:copyOfEnumMap(java.util.EnumMap)" : null,
  "com.google.common.reflect.ClassPath:getClassPathEntry(java.io.File,java.lang.String)" : "* Returns the absolute uri of the Class-Path entry value as specified in <a\n   * href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes\">JAR\n   * File Specification</a>. Even though the specification only talks about relative urls, absolute\n   * urls are actually supported too (for example, in Maven surefire plugin).",
  "com.google.common.collect.ImmutableSet$Indexed:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.hash.HashCode$IntHashCode:bits()" : null,
  "com.google.common.collect.ArrayTable:<init>(com.google.common.collect.Table)" : null,
  "com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable)" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.AbstractTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.net.UrlEscapers:<init>()" : null,
  "com.google.common.math.IntMath:saturatedSubtract(int,int)" : "* Returns the difference of {@code a} and {@code b} unless it would overflow or underflow in\n   * which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.\n   *\n   * @since 20.0",
  "com.google.common.math.StatsAccumulator:sampleStandardDeviation()" : "* Returns the <a\n   * href=\"http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation\">\n   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a\n   * population, this is an estimator of the population standard deviation of the population which\n   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on\n   * the distribution). The count must be greater than one.\n   *\n   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple\n   * times, due to numerical errors. However, it is guaranteed never to return a negative result.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single value",
  "com.google.common.base.Functions$FunctionForMapNoDefault:apply(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl:getEntry()" : null,
  "com.google.common.io.AppendableWriter:write(char[],int,int)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:getGrandparentIndex(int)" : null,
  "com.google.common.reflect.Invokable$ConstructorInvokable:getGenericParameterTypes()" : null,
  "com.google.common.math.PairedStats:<init>(com.google.common.math.Stats,com.google.common.math.Stats,double)" : "* Internal constructor. Users should use {@link PairedStatsAccumulator#snapshot}.\n   *\n   * <p>To ensure that the created instance obeys its contract, the parameters should satisfy the\n   * following constraints. This is the callers responsibility and is not enforced here.\n   *\n   * <ul>\n   *   <li>Both {@code xStats} and {@code yStats} must have the same {@code count}.\n   *   <li>If that {@code count} is 1, {@code sumOfProductsOfDeltas} must be exactly 0.0.\n   *   <li>If that {@code count} is more than 1, {@code sumOfProductsOfDeltas} must be finite.\n   * </ul>",
  "com.google.common.util.concurrent.Futures:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)" : "* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.\n   *\n   * @throws RejectedExecutionException if the task cannot be scheduled for execution\n   * @since 23.0",
  "com.google.common.collect.Synchronized$SynchronizedMultimap:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:getKeyReferenceQueueForTesting()" : "Unsafely extracts the key reference queue used by this segment.",
  "com.google.common.collect.LinkedListMultimap:keySet()" : null,
  "com.google.common.io.FileBackedOutputStream$MemoryOutput:getBuffer()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:run()" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:ceiling(java.util.Comparator,java.lang.Object)" : null,
  "com.google.common.io.ByteSink:write(byte[])" : "* Writes all the given bytes to this sink.\n   *\n   * @throws IOException if an I/O occurs while writing to this sink",
  "com.google.common.collect.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.base.Splitter:fixedLength(int)" : "* Returns a splitter that divides strings into pieces of the given length. For example, {@code\n   * Splitter.fixedLength(2).split(\"abcde\")} returns an iterable containing {@code [\"ab\", \"cd\",\n   * \"e\"]}. The last piece can be smaller than {@code length} but will never be empty.\n   *\n   * <p><b>Note:</b> if {@link #fixedLength} is used in conjunction with {@link #limit}, the final\n   * split piece <i>may be longer than the specified fixed length</i>. This is because the splitter\n   * will <i>stop splitting when the limit is reached</i>, and just return the final piece as-is.\n   *\n   * <p><b>Exception:</b> for consistency with separator-based splitters, {@code split(\"\")} does not\n   * yield an empty iterable, but an iterable containing {@code \"\"}. This is the only case in which\n   * {@code Iterables.size(split(input))} does not equal {@code IntMath.divide(input.length(),\n   * length, CEILING)}. To avoid this behavior, use {@code omitEmptyStrings}.\n   *\n   * @param length the desired length of pieces after splitting, a positive integer\n   * @return a splitter, with default settings, that can split into fixed sized pieces\n   * @throws IllegalArgumentException if {@code length} is zero or negative",
  "com.google.common.collect.MultimapBuilder$ListMultimapBuilder:<init>()" : null,
  "com.google.common.collect.ImmutableSortedMultiset:writeReplace()" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMap:<init>(java.util.Map,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int)" : "* A sensible definition of {@link #setCount(Object, int)} in terms of {@link #count(Object)},\n   * {@link #add(Object, int)}, and {@link #remove(Object, int)}. {@link #entrySet()}. If you\n   * override any of these methods, you may wish to override {@link #setCount(Object, int)} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.cache.LocalCache:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableLongArray:asList()" : "* Returns an immutable <i>view</i> of this array's values as a {@code List}; note that {@code\n   * long} values are boxed into {@link Long} instances on demand, which can be very expensive. The\n   * returned list should be used once and discarded. For any usages beyond that, pass the returned\n   * list to {@link com.google.common.collect.ImmutableList#copyOf(Collection) ImmutableList.copyOf}\n   * and use that list instead.",
  "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:afterRanInterruptiblySuccess(java.lang.Object)" : null,
  "com.google.common.base.Converter:andThen(com.google.common.base.Converter)" : "* Returns a converter whose {@code convert} method applies {@code secondConverter} to the result\n   * of this converter. Its {@code reverse} method applies the converters in reverse order.\n   *\n   * <p>The returned converter is serializable if {@code this} converter and {@code secondConverter}\n   * are.",
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:retainAll(java.util.Collection)" : null,
  "com.google.common.hash.AbstractNonStreamingHashFunction:hashInt(int)" : null,
  "com.google.common.hash.Hashing:hmacSha1(byte[])" : "* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the\n   * SHA-1 (160 hash bits) hash function and a {@link SecretKeySpec} created from the given byte\n   * array and the SHA-1 algorithm.\n   *\n   * @param key the key material of the secret key\n   * @since 20.0",
  "com.google.common.util.concurrent.TrustedListenableFutureTask:pendingToString()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:add(int,java.lang.Object)" : null,
  "com.google.common.collect.Multisets$ElementSet:size()" : null,
  "com.google.common.collect.Maps:removeOnlySortedSet(java.util.SortedSet)" : null,
  "com.google.common.collect.Sets$PowerSet:iterator()" : null,
  "com.google.common.collect.HashMultiset:size()" : null,
  "com.google.common.collect.ImmutableSortedMultiset:copyOf(java.lang.Iterable)" : "* Returns an immutable sorted multiset containing the given elements sorted by their natural\n   * ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call\n   * {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.\n   *\n   * <p>Note that if {@code s} is a {@code Multiset<String>}, then {@code\n   * ImmutableSortedMultiset.copyOf(s)} returns an {@code ImmutableSortedMultiset<String>}\n   * containing each of the strings in {@code s}, while {@code ImmutableSortedMultiset.of(s)}\n   * returns an {@code ImmutableSortedMultiset<Multiset<String>>} containing one element (the given\n   * multiset itself).\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * <p>This method is not type-safe, as it may be called on elements that are not mutually\n   * comparable.\n   *\n   * @throws ClassCastException if the elements are not mutually comparable\n   * @throws NullPointerException if any of {@code elements} is null",
  "com.google.common.collect.AbstractTable:contains(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.UndirectedGraphConnections:predecessors()" : null,
  "com.google.common.reflect.TypeToken:method(java.lang.reflect.Method)" : "* Returns the {@link Invokable} for {@code method}, which must be a member of {@code T}.\n   *\n   * @since 14.0",
  "com.google.common.base.Predicates:or(java.lang.Iterable)" : "* Returns a predicate that evaluates to {@code true} if any one of its components evaluates to\n   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n   * as soon as a true predicate is found. It defensively copies the iterable passed in, so future\n   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the\n   * returned predicate will always evaluate to {@code false}.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code first.or(second).or(third).or(...)}.",
  "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:removeExact(java.lang.Object)" : "Removes only this exact instance, not others that are equals()",
  "com.google.common.io.TempFileCreator$JavaNioCreator:userPermissions()" : null,
  "com.google.common.collect.ImmutableSortedMap:pollFirstEntry()" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.Suppliers:compose(com.google.common.base.Function,com.google.common.base.Supplier)" : "* Returns a new supplier which is the composition of the provided function and supplier. In other\n   * words, the new supplier's value will be computed by retrieving the value from {@code supplier},\n   * and then applying {@code function} to that value. Note that the resulting supplier will not\n   * call {@code supplier} or invoke {@code function} until it is called.",
  "com.google.common.collect.Sets$PowerSet:hashCode()" : null,
  "com.google.common.collect.Collections2$FilteredCollection:iterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:remove()" : null,
  "com.google.common.collect.ImmutableRangeSet:removeAll(java.lang.Iterable)" : "* Guaranteed to throw an exception and leave the {@code RangeSet} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:doTransform(com.google.common.base.Function,java.lang.Object)" : null,
  "com.google.common.net.MediaType$Tokenizer:hasMore()" : null,
  "com.google.common.collect.MapMakerInternalMap$HashIterator:nextInTable()" : "Finds the next entry in the current table. Returns {@code true} if an entry was found.",
  "com.google.common.io.ByteSource$ByteArrayByteSource:openStream()" : null,
  "com.google.common.collect.RegularImmutableMap:isPartialView()" : null,
  "com.google.common.collect.CompactHashMap:convertToHashFloodingResistantImplementation()" : null,
  "com.google.common.collect.CompactLinkedHashMap:createValues()" : null,
  "com.google.common.collect.Maps:filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate)" : "* Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a predicate.\n   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap\n   * and its views. When given a value that doesn't satisfy the predicate, the bimap's {@code\n   * put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link\n   * IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method\n   * that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the\n   * predicate.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying\n   * bimap.\n   *\n   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in\n   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>\n   * needed, it may be faster to copy the filtered bimap and use the copy.\n   *\n   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented\n   * at {@link Predicate#apply}.\n   *\n   * @since 14.0",
  "com.google.common.collect.Sets:newTreeSet(java.lang.Iterable)" : "* Creates a <i>mutable</i> {@code TreeSet} instance containing the given elements sorted by their\n   * natural ordering.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedSet#copyOf(Iterable)}\n   * instead.\n   *\n   * <p><b>Note:</b> If {@code elements} is a {@code SortedSet} with an explicit comparator, this\n   * method has different behavior than {@link TreeSet#TreeSet(SortedSet)}, which returns a {@code\n   * TreeSet} with that comparator.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code TreeSet} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * <p>This method is just a small convenience for creating an empty set and then calling {@link\n   * Iterables#addAll}. This method is not very useful and will likely be deprecated in the future.\n   *\n   * @param elements the elements that the set should contain\n   * @return a new {@code TreeSet} containing those elements (minus duplicates)",
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:markReady()" : "* Marks the {@link State} as ready to receive transitions. Returns true if no transitions have\n     * been observed yet.",
  "com.google.common.collect.TreeRangeMap$RangeMapEntry:<init>(com.google.common.collect.Range,java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$ComputingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference)" : null,
  "com.google.common.cache.LocalCache$Segment:removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:add(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap:putIfAbsent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$AsMap:size()" : null,
  "com.google.common.hash.HashingOutputStream:<init>(com.google.common.hash.HashFunction,java.io.OutputStream)" : null,
  "com.google.common.math.Stats:of(java.util.Iterator)" : "* Returns statistics over a dataset containing the given values. The iterator will be completely\n   * consumed by this method.\n   *\n   * @param values a series of values, which will be converted to {@code double} values (this may\n   *     cause loss of precision)",
  "com.google.common.collect.Maps$KeySet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.CompactHashMap:delegateOrNull()" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap:lastKey()" : null,
  "com.google.common.primitives.UnsignedBytes:sort(byte[],int,int)" : "* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its\n   * elements as unsigned bytes.\n   *\n   * @since 23.1",
  "com.google.common.reflect.MutableTypeToInstanceMap:<init>()" : "Creates a new map.",
  "com.google.common.cache.LocalCache$LoadingValueReference:isLoading()" : null,
  "com.google.common.collect.TreeMultiset:size()" : null,
  "com.google.common.util.concurrent.Monitor:isOccupiedByCurrentThread()" : "* Returns whether the current thread is occupying this monitor (has entered more times than it\n   * has left).",
  "com.google.common.primitives.UnsignedBytes:toInt(byte)" : "* Returns the value of the given byte as an integer, when treated as unsigned. That is, returns\n   * {@code value + 256} if {@code value} is negative; {@code value} itself otherwise.\n   *\n   * <p>Prefer {@link Byte#toUnsignedInt(byte)} instead.\n   *\n   * @since 6.0",
  "com.google.common.collect.ImmutableRangeSet$AsSet:createDescendingSet()" : null,
  "com.google.common.graph.AbstractDirectedNetworkConnections$1:iterator()" : "* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.\n     *\n     * @since 20.0 (present with return type {@link Iterator} since 2.0)",
  "com.google.common.collect.Ordering:greatestOf(java.lang.Iterable,int)" : "* Returns the {@code k} greatest elements of the given iterable according to this ordering, in\n   * order from greatest to least. If there are fewer than {@code k} elements present, all will be\n   * included.\n   *\n   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n   * elements are equivalent, it is undefined which will come first.\n   *\n   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,\n   * thisComparator))} instead.\n   *\n   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in\n   *     <i>descending order</i>\n   * @throws IllegalArgumentException if {@code k} is negative\n   * @since 8.0",
  "com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)" : "* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the\n   * lock, but does not wait for the guard to be satisfied, and may be interrupted.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",
  "com.google.common.collect.Tables$UnmodifiableRowSortedMap:delegate()" : null,
  "com.google.common.primitives.UnsignedLong:compareTo(com.google.common.primitives.UnsignedLong)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:last()" : null,
  "com.google.common.collect.CollectCollectors$EnumMapAccumulator:<init>(java.util.function.BinaryOperator)" : null,
  "com.google.common.graph.ForwardingNetwork:allowsSelfLoops()" : null,
  "com.google.common.collect.Multisets:retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "Delegate implementation which cares about the element type.",
  "com.google.common.collect.AbstractMapBasedMultimap:createCollection(java.lang.Object)" : "* Creates the collection of values for an explicitly provided key. By default, it simply calls\n   * {@link #createCollection()}, which is the correct behavior for most implementations. The {@link\n   * LinkedHashMultimap} class overrides it.\n   *\n   * @param key key to associate with values in the collection\n   * @return an empty collection of values",
  "com.google.common.primitives.ImmutableDoubleArray:hashCode()" : "Returns an unspecified hash code for the contents of this immutable array.",
  "com.google.common.cache.LocalCache$StrongEntry:getValueReference()" : null,
  "com.google.common.io.ByteSource$ConcatenatedByteSource:sizeIfKnown()" : null,
  "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:<init>(java.lang.Object,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.RegularImmutableMap:removeDuplicates(java.util.Map$Entry[],int,int,java.util.IdentityHashMap)" : "* Constructs a new entry array where each duplicated key from the original appears only once, at\n   * its first position but with its final value. The {@code duplicates} map is modified.\n   *\n   * @param entries the original array of entries including duplicates\n   * @param n the number of valid entries in {@code entries}\n   * @param newN the expected number of entries once duplicates are removed\n   * @param duplicates a map of canonical {@link Entry} objects for each duplicate key. This map\n   *     will be updated by the method, setting each value to false as soon as the {@link Entry} has\n   *     been included in the new entry array.\n   * @return an array of {@code newN} entries where no key appears more than once.",
  "com.google.common.collect.DescendingMultiset:delegate()" : null,
  "com.google.common.collect.ForwardingNavigableSet:floor(java.lang.Object)" : null,
  "com.google.common.collect.EnumBiMap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the key class, value class, number of entries, first key, first value, second key,\n   *     second value, and so on.",
  "com.google.common.util.concurrent.AtomicDouble:set(double)" : "* Sets to the given value.\n   *\n   * @param newValue the new value",
  "com.google.common.hash.LittleEndianByteArray:load64(byte[],int)" : "* Load 8 bytes into long in a little endian manner, from the substring between position and\n   * position + 8. The array must have at least 8 bytes from offset (inclusive).\n   *\n   * @param input the input bytes\n   * @param offset the offset into the array at which to start\n   * @return a long of a concatenated 8 bytes",
  "com.google.common.collect.ImmutableTable$SerializedForm:<init>(java.lang.Object[],java.lang.Object[],java.lang.Object[],int[],int[])" : null,
  "com.google.common.cache.LocalCache$NullEntry:getWriteTime()" : null,
  "com.google.common.collect.Multisets:elementIterator(java.util.Iterator)" : null,
  "com.google.common.collect.ForwardingSortedSet:first()" : null,
  "com.google.common.hash.AbstractCompositeHashFunction:newHasher()" : null,
  "com.google.common.math.BigIntegerMath:listProduct(java.util.List)" : null,
  "com.google.common.base.Objects:<init>()" : null,
  "com.google.common.collect.Iterables:transform(java.lang.Iterable,com.google.common.base.Function)" : "* Returns a view containing the result of applying {@code function} to each element of {@code\n   * fromIterable}.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} if {@code fromIterable}'s\n   * iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer\n   * contains the corresponding element.\n   *\n   * <p>If the input {@code Iterable} is known to be a {@code List} or other {@code Collection},\n   * consider {@link Lists#transform} and {@link Collections2#transform}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}",
  "com.google.common.base.Joiner:skipNulls()" : "* Returns a joiner with the same behavior as this joiner, except automatically skipping over any\n   * provided null elements.",
  "com.google.common.reflect.Types$JavaVersion$2:usedInGenericType(java.lang.reflect.Type)" : null,
  "com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.CharEscaper,char)" : "* Returns a string that would replace the given character in the specified escaper, or {@code\n   * null} if no replacement should be made. This method is intended for use in tests through the\n   * {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit themselves\n   * to its public interface.\n   *\n   * @param c the character to escape if necessary\n   * @return the replacement string, or {@code null} if no escaping was needed",
  "com.google.common.collect.AbstractNavigableMap:descendingKeySet()" : null,
  "com.google.common.collect.HashBasedTable:rowMap()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner2:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)" : null,
  "com.google.common.base.CaseFormat$StringConverter:hashCode()" : null,
  "com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.Multiset)" : "* Returns an unmodifiable view of the specified multiset. Query operations on the returned\n   * multiset \"read through\" to the specified multiset, and attempts to modify the returned multiset\n   * result in an {@link UnsupportedOperationException}.\n   *\n   * <p>The returned multiset will be serializable if the specified multiset is serializable.\n   *\n   * @param multiset the multiset for which an unmodifiable view is to be generated\n   * @return an unmodifiable view of the multiset",
  "com.google.common.collect.ArrayListMultimap:create(com.google.common.collect.Multimap)" : "* Constructs an {@code ArrayListMultimap} with the same mappings as the specified multimap.\n   *\n   * <p>You may also consider the equivalent {@code\n   * MultimapBuilder.hashKeys().arrayListValues().build(multimap)}, which provides more control over\n   * the underlying data structure.\n   *\n   * @param multimap the multimap whose contents are copied to this multimap",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createAsMap()" : null,
  "com.google.common.collect.Maps:containsKeyImpl(java.util.Map,java.lang.Object)" : "An admittedly inefficient implementation of {@link Map#containsKey}.",
  "com.google.common.collect.AbstractSetMultimap:get(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",
  "com.google.common.graph.AbstractDirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)" : null,
  "com.google.common.io.CharSource:lines()" : "* Opens a new {@link Stream} for reading text one line at a time from this source. This method\n   * returns a new, independent stream each time it is called.\n   *\n   * <p>The returned stream is lazy and only reads from the source in the terminal operation. If an\n   * I/O error occurs while the stream is reading from the source or when the stream is closed, an\n   * {@link UncheckedIOException} is thrown.\n   *\n   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\n   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n   * it does.\n   *\n   * <p>The caller is responsible for ensuring that the returned stream is closed. For example:\n   *\n   * {@snippet :\n   * try (Stream<String> lines = source.lines()) {\n   *   lines.map(...)\n   *      .filter(...)\n   *      .forEach(...);\n   * }\n   * }\n   *\n   * @throws IOException if an I/O error occurs while opening the stream\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.Tables$TransformedTable:clear()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int,char)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread)" : "Invokes {@code toJoin.}{@link Thread#join() join()} uninterruptibly.",
  "com.google.common.collect.Synchronized$SynchronizedSet:hashCode()" : null,
  "com.google.common.math.StatsAccumulator:sumOfSquaresOfDeltas()" : null,
  "com.google.common.math.LongMath:saturatedMultiply(long,long)" : null,
  "com.google.common.base.Splitter$SplittingIterator:<init>(com.google.common.base.Splitter,java.lang.CharSequence)" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:afterRanInterruptiblySuccess(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:removeAll(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>The returned collection is immutable.",
  "com.google.common.collect.ImmutableSortedMap:higherEntry(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset$Aggregate$2:nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.collect.RegularImmutableSet:createAsList()" : null,
  "com.google.common.io.ByteSource:empty()" : "* Returns an immutable {@link ByteSource} that contains no bytes.\n   *\n   * @since 15.0",
  "com.google.common.collect.Sets$SetView:clear()" : "* Guaranteed to throw an exception and leave the collection unmodified.\n     *\n     * @throws UnsupportedOperationException always\n     * @deprecated Unsupported operation.",
  "com.google.common.io.ByteSource$SlicedByteSource:isEmpty()" : null,
  "com.google.common.reflect.TypeVisitor:visitGenericArrayType(java.lang.reflect.GenericArrayType)" : null,
  "com.google.common.collect.Maps$ValueDifferenceImpl:leftValue()" : null,
  "com.google.common.base.Splitter:<init>(com.google.common.base.Splitter$Strategy,boolean,com.google.common.base.CharMatcher,int)" : null,
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:incrementBy(com.google.common.cache.AbstractCache$StatsCounter)" : "Increments all counters by the values in {@code other}.",
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues()" : "Uses a hash-based {@code Set} to store value collections.",
  "com.google.common.math.Quantiles:movePivotToStartOfSlice(double[],int,int)" : "* Selects the pivot to use, namely the median of the values at {@code from}, {@code to}, and\n   * halfway between the two (rounded down), from {@code array}, and ensure (by swapping elements if\n   * necessary) that that pivot value appears at the start of the slice i.e. at {@code from}.\n   * Expects that {@code from} is strictly less than {@code to}.",
  "com.google.common.collect.ImmutableCollection$Builder:addAll(java.lang.Iterable)" : "* Adds each element of {@code elements} to the {@code ImmutableCollection} being built.\n     *\n     * <p>Note that each builder class overrides this method in order to covariantly return its own\n     * type.\n     *\n     * @param elements the elements to add\n     * @return this {@code Builder} instance\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.util.concurrent.Striped:lazyWeakReadWriteLock(int)" : "* Creates a {@code Striped<ReadWriteLock>} with lazily initialized, weakly referenced read-write\n   * locks. Every lock is reentrant.\n   *\n   * @param stripes the minimum number of stripes (locks) required\n   * @return a new {@code Striped<ReadWriteLock>}",
  "com.google.common.net.InetAddresses:increment(java.net.InetAddress)" : "* Returns a new InetAddress that is one more than the passed in address. This method works for\n   * both IPv4 and IPv6 addresses.\n   *\n   * @param address the InetAddress to increment\n   * @return a new InetAddress that is one more than the passed in address\n   * @throws IllegalArgumentException if InetAddress is at the end of its range\n   * @since 10.0",
  "com.google.common.io.BaseEncoding:ignoringReader(java.io.Reader,java.lang.String)" : null,
  "com.google.common.collect.HashBiMap$Itr:hasNext()" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:recomputeHeight()" : null,
  "com.google.common.hash.Hashing:murmur3_128(int)" : "* Returns a hash function implementing the <a\n   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">128-bit murmur3\n   * algorithm, x64 variant</a> (little-endian variant), using the given seed value.\n   *\n   * <p>The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F).",
  "com.google.common.net.InetAddresses:getEmbeddedIPv4ClientAddress(java.net.Inet6Address)" : "* Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an\n   * IPv6 address of one of the specified address types that contain an embedded IPv4 address.\n   *\n   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial\n   * spoofability. With other transition addresses spoofing involves (at least) infection of one's\n   * BGP routing table.\n   *\n   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address\n   * @return {@link Inet4Address} of embedded IPv4 client address\n   * @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address",
  "com.google.common.collect.CollectCollectors:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable)" : "* Returns a {@link Collection} of all the permutations of the specified {@link Iterable}.\n   *\n   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations\n   * Generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7,\n   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the\n   * first permutation will be in ascending order, and the last will be in descending order.\n   *\n   * <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one\n   * permutation, instead of two. This is why the elements have to implement {@link Comparable}.\n   *\n   * <p>An empty iterable has only one permutation, which is an empty list.\n   *\n   * <p>This method is equivalent to {@code Collections2.orderedPermutations(list,\n   * Ordering.natural())}.\n   *\n   * @param elements the original iterable whose elements have to be permuted.\n   * @return an immutable {@link Collection} containing all the different permutations of the\n   *     original iterable.\n   * @throws NullPointerException if the specified iterable is null or has any null elements.\n   * @since 12.0",
  "com.google.common.collect.Synchronized$SynchronizedTable:hashCode()" : null,
  "com.google.common.graph.StandardValueGraph:checkedConnections(java.lang.Object)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingEntry(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)" : "* Invokes {@code future.}{@link Future#get(long, TimeUnit) get(timeout, unit)} uninterruptibly.\n   *\n   * <p>Similar methods:\n   *\n   * <ul>\n   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link\n   *       Futures#getDone Futures.getDone}.\n   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link\n   *       Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.\n   *   <li>To get uninterruptibility and remove checked exceptions, use {@link\n   *       Futures#getUnchecked}.\n   * </ul>\n   *\n   * @throws ExecutionException if the computation threw an exception\n   * @throws CancellationException if the computation was cancelled\n   * @throws TimeoutException if the wait timed out",
  "com.google.common.base.Predicates:or(com.google.common.base.Predicate,com.google.common.base.Predicate)" : "* Returns a predicate that evaluates to {@code true} if either of its components evaluates to\n   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n   * as soon as a true predicate is found.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code first.or(second)}.",
  "com.google.common.collect.ImmutableMultimap$EntryCollection:<init>(com.google.common.collect.ImmutableMultimap)" : null,
  "com.google.common.collect.ImmutableSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder)" : null,
  "com.google.common.graph.NetworkBuilder:allowsParallelEdges(boolean)" : "* Specifies whether the network will allow parallel edges. Attempting to add a parallel edge to a\n   * network that does not allow them will throw an {@link UnsupportedOperationException}.\n   *\n   * <p>The default value is {@code false}.",
  "com.google.common.graph.ForwardingNetwork:predecessors(java.lang.Object)" : null,
  "com.google.common.collect.SingletonImmutableTable:createCellSet()" : null,
  "com.google.common.collect.EnumBiMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.cache.CacheBuilderSpec$RecordStatsParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)" : null,
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:insertInHashTable(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.util.Iterator)" : "* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate\n     * elements (only the first duplicate element is added).\n     *\n     * @param elements the elements to add to the {@code ImmutableSortedSet}\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} contains a null element",
  "com.google.common.math.LongMath:pow(long,int)" : "* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to\n   * {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)}\n   * time.\n   *\n   * @throws IllegalArgumentException if {@code k < 0}",
  "com.google.common.collect.Maps$Values:size()" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:<init>(com.google.common.collect.ImmutableSortedSet)" : null,
  "com.google.common.collect.AbstractMultimap$EntrySet:equals(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:iterator()" : null,
  "com.google.common.collect.CartesianList:size()" : null,
  "com.google.common.collect.Collections2$PermutationCollection:<init>(com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.HashBiMap$KeySet:iterator()" : null,
  "com.google.common.collect.RegularImmutableAsList:<init>(com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.ForwardingNavigableSet:pollLast()" : null,
  "com.google.common.cache.CacheLoader$FunctionToCacheLoader:load(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableLongArray:<init>(long[],int,int)" : null,
  "com.google.common.util.concurrent.ForwardingLock:lock()" : null,
  "com.google.common.graph.StandardMutableNetwork:addNode(java.lang.Object)" : null,
  "com.google.common.hash.AbstractStreamingHasher:<init>(int)" : "* Constructor for use by subclasses. This hasher instance will process chunks of the specified\n   * size.\n   *\n   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;\n   *     must be at least 4",
  "com.google.common.collect.Synchronized$SynchronizedMultimap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingCondition:awaitUntil(java.util.Date)" : null,
  "com.google.common.collect.StandardRowSortedTable$RowSortedMap:keySet()" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:subList(int,int)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:headSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.hash.Hashing$ConcatenatedHashFunction:bits()" : null,
  "com.google.common.collect.MapMaker:setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength)" : null,
  "com.google.common.collect.ImmutableTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.TopKSelector:offerAll(java.util.Iterator)" : "* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This\n   * operation takes amortized linear time in the length of {@code elements}. The iterator is\n   * consumed after this operation completes.\n   *\n   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterator}, prefer\n   * {@link Ordering#leastOf(Iterator, int)}, which provides a simpler API for that use case.",
  "com.google.common.util.concurrent.Striped:readWriteLock(int)" : "* Creates a {@code Striped<ReadWriteLock>} with eagerly initialized, strongly referenced\n   * read-write locks. Every lock is reentrant.\n   *\n   * @param stripes the minimum number of stripes (locks) required\n   * @return a new {@code Striped<ReadWriteLock>}",
  "com.google.common.base.Absent:get()" : null,
  "com.google.common.primitives.ImmutableIntArray$AsList:spliterator()" : null,
  "com.google.common.primitives.ImmutableLongArray$AsList:<init>(com.google.common.primitives.ImmutableLongArray)" : null,
  "com.google.common.util.concurrent.AbstractFuture:isCancelled()" : null,
  "com.google.common.collect.StandardTable$Row:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedLong:plus(com.google.common.primitives.UnsignedLong)" : "* Returns the result of adding this and {@code val}. If the result would have more than 64 bits,\n   * returns the low 64 bits of the result.\n   *\n   * @since 14.0",
  "com.google.common.collect.ImmutableSortedMap:of()" : "* Returns the empty sorted map.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.collect.CompactHashMap:accessEntry(int)" : "* Mark an access of the specified entry. Used only in {@code CompactLinkedHashMap} for LRU\n   * ordering.",
  "com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.Lists$ReverseList:get(int)" : null,
  "com.google.common.util.concurrent.Striped$SmallLazyStriped:drainQueue()" : null,
  "com.google.common.collect.ForwardingBlockingDeque:takeLast()" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection)" : null,
  "com.google.common.collect.Interners$InternerBuilder:weak()" : "* Instructs the {@link InternerBuilder} to build a weak interner.\n     *\n     * @see Interners#newWeakInterner()",
  "com.google.common.collect.Synchronized$SynchronizedTable:delegate()" : null,
  "com.google.common.net.MediaType:normalizeToken(java.lang.String)" : null,
  "com.google.common.collect.CartesianList:getAxisIndexForProductIndex(int,int)" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.hash.HashingOutputStream:write(byte[],int,int)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:values()" : null,
  "com.google.common.collect.ForwardingSortedSetMultimap:valueComparator()" : null,
  "com.google.common.collect.HashMultiset:entrySet()" : "* {@inheritDoc}\n   *\n   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the\n   * current count of that element in the multiset, as opposed to the count at the time the entry\n   * was retrieved.",
  "com.google.common.base.Predicates$AndPredicate:toString()" : null,
  "com.google.common.collect.StandardTable:cellIterator()" : null,
  "com.google.common.cache.LocalCache$WriteQueue:poll()" : null,
  "com.google.common.collect.AbstractBiMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.MutableClassToInstanceMap$1:setValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:lockInterruptibly()" : null,
  "com.google.common.math.BigIntegerMath:isPowerOfTwo(java.math.BigInteger)" : "Returns {@code true} if {@code x} represents a power of two.",
  "com.google.common.util.concurrent.ClosingFuture$CloseableList:applyClosingFunction(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.Object)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @param errorMessage the exception message to use if the check fails; will be converted to a\n   *     string using {@link String#valueOf(Object)}\n   * @throws IllegalStateException if {@code expression} is false\n   * @see Verify#verify Verify.verify()",
  "com.google.common.util.concurrent.Service$Listener:failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable)" : "* Called when the service transitions to the {@linkplain State#FAILED FAILED} state. The\n     * {@linkplain State#FAILED FAILED} state is a terminal state in the transition diagram.\n     * Therefore, if this method is called, no other methods will be called on the {@link Listener}.\n     *\n     * @param from The previous state that is being transitioned from. Failure can occur in any\n     *     state with the exception of {@linkplain State#NEW NEW} or {@linkplain State#TERMINATED\n     *     TERMINATED}.\n     * @param failure The exception that caused the failure.",
  "com.google.common.collect.NullsLastOrdering:reverse()" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:contains(java.lang.Object)" : null,
  "com.google.common.collect.GeneralRange:equals(java.lang.Object)" : null,
  "com.google.common.base.CaseFormat:normalizeFirstWord(java.lang.String)" : null,
  "com.google.common.base.Suppliers$ExpiringMemoizingSupplier:toString()" : null,
  "com.google.common.collect.ImmutableSortedSet:toImmutableSortedSet(java.util.Comparator)" : "* Returns a {@code Collector} that accumulates the input elements into a new {@code\n   * ImmutableSortedSet}, ordered by the specified comparator.\n   *\n   * <p>If the elements contain duplicates (according to the comparator), only the first duplicate\n   * in encounter order will appear in the result.\n   *\n   * @since 21.0",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:take()" : null,
  "com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,java.lang.Object)" : "* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges\n   * from {@code fromKey}, inclusive, to {@code toKey}, exclusive.\n   *\n   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link\n   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.\n   * However, this method doesn't throw an exception in that situation, but instead keeps the\n   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of\n   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.",
  "com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.lang.Iterable)" : "* Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed\n   * that they do not need to be sorted or checked for dupes.",
  "com.google.common.collect.Maps$NavigableAsMapView:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Multimaps$Keys:entryIterator()" : null,
  "com.google.common.collect.ImmutableMap$Builder:build()" : "* Returns a newly-created immutable map. The iteration order of the returned map is the order\n     * in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was\n     * called, in which case entries are sorted by value.\n     *\n     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method\n     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be\n     * deprecated.\n     *\n     * @throws IllegalArgumentException if duplicate keys were added",
  "com.google.common.collect.MultimapBuilder$ArrayListSupplier:<init>(int)" : null,
  "com.google.common.collect.Maps$6:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:successors()" : null,
  "com.google.common.cache.CacheLoader$FunctionToCacheLoader:<init>(com.google.common.base.Function)" : null,
  "com.google.common.collect.RegularContiguousSet$SerializedForm:<init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.base.Equivalence$Equals:doHash(java.lang.Object)" : null,
  "com.google.common.reflect.Types$ParameterizedTypeImpl:getRawType()" : null,
  "com.google.common.collect.Sets$DescendingSet:descendingIterator()" : null,
  "com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,java.time.Duration,java.util.concurrent.ScheduledExecutorService)" : "* Returns a future that delegates to another but will finish early (via a {@link\n   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.\n   *\n   * <p>The delegate future is interrupted and cancelled if it times out.\n   *\n   * @param delegate The future to delegate to.\n   * @param time when to time out the future\n   * @param scheduledExecutor The executor service to enforce the timeout.\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ImmutableTable:row(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * @throws NullPointerException if {@code rowKey} is {@code null}",
  "com.google.common.util.concurrent.AtomicDouble:<init>()" : "Creates a new {@code AtomicDouble} with initial value {@code 0.0}.",
  "com.google.common.collect.Maps$UnmodifiableBiMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(java.lang.Class)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:create(java.lang.Iterable)" : "* Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using the\n   * default initial capacity, load factor, and concurrency settings.\n   *\n   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.\n   *\n   * @param elements the elements that the multiset should contain",
  "com.google.common.collect.ImmutableList:listIterator(int)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:recomputeMultiset()" : null,
  "com.google.common.collect.ForwardingNavigableSet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ForwardingSortedSet:standardContains(java.lang.Object)" : "* A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link\n   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ImmutableCollection$Builder:expandedCapacity(int,int)" : null,
  "com.google.common.graph.ForwardingValueGraph:successors(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableGraph:delegate()" : null,
  "com.google.common.collect.ImmutableEnumSet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.CompactLinkedHashMap:moveLastEntry(int,int)" : null,
  "com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ImmutableEnumSet:hashCode()" : null,
  "com.google.common.primitives.UnsignedLong:bigIntegerValue()" : "Returns the value of this {@code UnsignedLong} as a {@link BigInteger}.",
  "com.google.common.graph.StandardNetwork:nodeOrder()" : null,
  "com.google.common.math.DoubleMath:roundIntermediate(double,java.math.RoundingMode)" : null,
  "com.google.common.collect.ExplicitOrdering:hashCode()" : null,
  "com.google.common.collect.AbstractMultiset:add(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingCollection:addAll(java.util.Collection)" : null,
  "com.google.common.collect.Lists$AbstractListWrapper:get(int)" : null,
  "com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Object)" : "* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in\n   * the order of a depth-first post-order traversal. \"Post-order\" implies that nodes appear in the\n   * {@code Iterable} in the order in which they are visited for the last time.\n   *\n   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in\n   * the order {@code fcebda} (assuming successors are returned in alphabetical order).\n   *\n   * {@snippet :\n   * b ---- a ---- d\n   * |      |\n   * |      |\n   * e ---- c ---- f\n   * }\n   *\n   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change\n   * while iteration is in progress.\n   *\n   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will\n   * compute its next element on the fly. It is thus possible to limit the traversal to a certain\n   * number of nodes as follows:\n   *\n   * {@snippet :\n   * Iterables.limit(\n   *     Traverser.forGraph(graph).depthFirstPostOrder(node), maxNumberOfNodes);\n   * }\n   *\n   * <p>See <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">Wikipedia</a> for more info.\n   *\n   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",
  "com.google.common.collect.Collections2$FilteredCollection:remove(java.lang.Object)" : null,
  "com.google.common.net.InetAddresses$TeredoInfo:getClient()" : null,
  "com.google.common.primitives.Chars$CharArrayAsList:hashCode()" : null,
  "com.google.common.io.ByteStreams$LimitedInputStream:mark(int)" : null,
  "com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.util.Iterator)" : "* Appends the string representation of each of {@code parts}, using the previously configured\n   * separator between each, to {@code appendable}.\n   *\n   * @since 11.0",
  "com.google.common.collect.CollectSpliterators:map(java.util.Spliterator,java.util.function.Function)" : "* Returns a {@code Spliterator} over the elements of {@code fromSpliterator} mapped by {@code\n   * function}.",
  "com.google.common.io.CharSource:isEmpty()" : "* Returns whether the source has zero chars. The default implementation first checks {@link\n   * #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be\n   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF.\n   *\n   * <p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that\n   * chars are actually available for reading. This means that a source may return {@code true} from\n   * {@code isEmpty()} despite having readable content.\n   *\n   * @throws IOException if an I/O error occurs\n   * @since 15.0",
  "com.google.common.util.concurrent.AbstractFuture:setFuture(com.google.common.util.concurrent.ListenableFuture)" : "* Sets the result of this {@code Future} to match the supplied input {@code Future} once the\n   * supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set\n   * (including \"set asynchronously,\" defined below).\n   *\n   * <p>If the supplied future is {@linkplain #isDone done} when this method is called and the call\n   * is accepted, then this future is guaranteed to have been completed with the supplied future by\n   * the time this method returns. If the supplied future is not done and the call is accepted, then\n   * the future will be <i>set asynchronously</i>. Note that such a result, though not yet known,\n   * cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}.\n   *\n   * <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later\n   * cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to\n   * {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code\n   * Future}.\n   *\n   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,\n   * it will never trigger interruption behavior. In particular, it will not cause this future to\n   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not\n   * return {@code true}.\n   *\n   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or\n   * acquire other locks, risking deadlocks.\n   *\n   * @param future the future to delegate to\n   * @return true if the attempt was accepted, indicating that the {@code Future} was not previously\n   *     cancelled or set.\n   * @since 19.0",
  "com.google.common.collect.HashBasedTable:cellSet()" : "* {@inheritDoc}\n   *\n   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second\n   * row, and so on.\n   *\n   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the\n   * time the cell is returned by a method call to the set or its iterator.",
  "com.google.common.collect.Tables$ImmutableCell:getValue()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:putIfAbsent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.CharStreams$NullWriter:write(java.lang.String,int,int)" : null,
  "com.google.common.io.MoreFiles:fileTraverser()" : "* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser\n   * starts from a {@link Path} and will return all files and directories it encounters.\n   *\n   * <p>The returned traverser attempts to avoid following symbolic links to directories. However,\n   * the traverser cannot guarantee that it will not follow symbolic links to directories as it is\n   * possible for a directory to be replaced with a symbolic link between checking if the file is a\n   * directory and actually reading the contents of that directory.\n   *\n   * <p>If the {@link Path} passed to one of the traversal methods does not exist or is not a\n   * directory, no exception will be thrown and the returned {@link Iterable} will contain a single\n   * element: that path.\n   *\n   * <p>{@link DirectoryIteratorException} may be thrown when iterating {@link Iterable} instances\n   * created by this traverser if an {@link IOException} is thrown by a call to {@link\n   * #listFiles(Path)}.\n   *\n   * <p>Example: {@code MoreFiles.fileTraverser().depthFirstPreOrder(Paths.get(\"/\"))} may return the\n   * following paths: {@code [\"/\", \"/etc\", \"/etc/config.txt\", \"/etc/fonts\", \"/home\", \"/home/alice\",\n   * ...]}\n   *\n   * @since 23.5",
  "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:last()" : null,
  "com.google.common.collect.ForwardingNavigableMap:higherEntry(java.lang.Object)" : null,
  "com.google.common.base.Equivalence:wrap(java.lang.Object)" : "* Returns a wrapper of {@code reference} that implements {@link Wrapper#equals(Object)\n   * Object.equals()} such that {@code wrap(a).equals(wrap(b))} if and only if {@code equivalent(a,\n   * b)}.\n   *\n   * <p>The returned object is serializable if both this {@code Equivalence} and {@code reference}\n   * are serializable (including when {@code reference} is null).\n   *\n   * @since 10.0",
  "com.google.common.io.CharStreams:copyReaderToWriter(java.io.Reader,java.io.Writer)" : "* Copies all characters between the {@link Reader} and {@link Writer} objects. Does not close or\n   * flush the reader or writer.\n   *\n   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific\n   * types. CharBuffer has poor performance when being written into or read out of so round tripping\n   * all the bytes through the buffer takes a long time. With these specialized types we can just\n   * use a char array.\n   *\n   * @param from the object to read from\n   * @param to the object to write to\n   * @return the number of characters copied\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.ImmutableMap:values()" : "* Returns an immutable collection of the values in this map, in the same order that they appear\n   * in {@link #entrySet}.",
  "com.google.common.collect.ForwardingNavigableMap:delegate()" : null,
  "com.google.common.collect.ForwardingMapEntry:standardToString()" : "* A sensible definition of {@link #toString} in terms of {@link #getKey} and {@link #getValue}.\n   * If you override either of these methods, you may wish to override {@link #equals} to forward to\n   * this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ImmutableSetMultimap:valueComparator()" : null,
  "com.google.common.graph.NetworkBuilder:build()" : "Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.",
  "com.google.common.collect.Tables$ImmutableCell:getColumnKey()" : null,
  "com.google.common.io.CharSource$StringCharSource:openStream()" : null,
  "com.google.common.graph.ForwardingValueGraph:nodes()" : null,
  "com.google.common.cache.LocalCache$EntryFactory$4:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* Creates a new entry.\n     *\n     * @param segment to create the entry for\n     * @param key of the entry\n     * @param hash of the key\n     * @param next entry in the same bucket",
  "com.google.common.primitives.Ints:reverse(int[])" : "* Reverses the elements of {@code array}. This is equivalent to {@code\n   * Collections.reverse(Ints.asList(array))}, but is likely to be more efficient.\n   *\n   * @since 23.1",
  "com.google.common.collect.RegularContiguousSet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.cache.CacheBuilder:getValueStrength()" : null,
  "com.google.common.collect.ReverseOrdering:min(java.lang.Iterable)" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:values()" : null,
  "com.google.common.graph.AbstractNetwork:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.base.Equivalence$Wrapper:toString()" : "* Returns a string representation for this equivalence wrapper. The form of this string\n     * representation is not specified.",
  "com.google.common.collect.Tables$TransposeTable:values()" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:adjacentNode(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache:refresh(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableCollection$Builder:<init>()" : null,
  "com.google.common.graph.DirectedNetworkConnections:predecessors()" : null,
  "com.google.common.collect.HashBiMap$Inverse:inverse()" : null,
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(int,int)" : null,
  "com.google.common.collect.LinkedListMultimap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMapValues$SerializedForm:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:<init>(java.util.NavigableMap)" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableMultiset:<init>(com.google.common.collect.Multisets$ImmutableEntry[],com.google.common.collect.Multisets$ImmutableEntry[],int,int,com.google.common.collect.ImmutableSet)" : null,
  "com.google.common.cache.CacheBuilder:getStatsCounterSupplier()" : null,
  "com.google.common.collect.Lists$TwoPlusArrayList:size()" : null,
  "com.google.common.collect.ArrayListMultimap:create(int,int)" : "* Constructs an empty {@code ArrayListMultimap} with enough capacity to hold the specified\n   * numbers of keys and values without resizing.\n   *\n   * <p>You may also consider the equivalent {@code\n   * MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}, which\n   * provides more control over the underlying data structure.\n   *\n   * @param expectedKeys the expected number of distinct keys\n   * @param expectedValuesPerKey the expected average number of values per key\n   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is\n   *     negative",
  "com.google.common.io.CharStreams:readLines(java.lang.Readable)" : "* Reads all of the lines from a {@link Readable} object. The lines do not include\n   * line-termination characters, but do include other leading and trailing whitespace.\n   *\n   * <p>Does not close the {@code Readable}. If reading files or resources you should use the {@link\n   * Files#readLines} and {@link Resources#readLines} methods.\n   *\n   * @param r the object to read from\n   * @return a mutable {@link List} containing all the lines\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.FilteredEntrySetMultimap:unfiltered()" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:subList(int,int)" : null,
  "com.google.common.collect.CompactLinkedHashMap:<init>(int)" : null,
  "com.google.common.net.MediaType:withoutParameters()" : "* Returns a new instance with the same type and subtype as this instance, but without any\n   * parameters.",
  "com.google.common.primitives.ImmutableDoubleArray:indexOf(double)" : "* Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no\n   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code\n   * asList().indexOf(target)}.",
  "com.google.common.primitives.UnsignedInts:toString(int)" : "* Returns a string representation of x, where x is treated as unsigned.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedString(int)} instead.",
  "com.google.common.hash.AbstractStreamingHasher:putShort(short)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.ExplicitOrdering:rank(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Segment:cleanUp()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:offer(java.lang.Object)" : "* Adds the given element to this queue. If this queue has a maximum size, after adding {@code\n   * element} the queue will automatically evict its greatest element (according to its comparator),\n   * which may be {@code element} itself.",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerEntry(java.lang.Object)" : null,
  "com.google.common.collect.ObjectArrays:checkElementNotNull(java.lang.Object,int)" : null,
  "com.google.common.collect.Multisets$ElementSet:clear()" : null,
  "com.google.common.io.Flushables:<init>()" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:add(java.lang.Object,int)" : "* {@inheritDoc}\n   *\n   * @throws IllegalArgumentException if the call would result in more than {@link\n   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",
  "com.google.common.hash.HashCode$LongHashCode:asBytes()" : null,
  "com.google.common.base.Enums$StringConverter:toString()" : null,
  "com.google.common.io.BaseEncoding$Base16Encoding:decodeTo(byte[],java.lang.CharSequence)" : null,
  "com.google.common.util.concurrent.RateLimiter:tryAcquire(java.time.Duration)" : "* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the\n   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit\n   * would not have been granted before the timeout expired.\n   *\n   * <p>This method is equivalent to {@code tryAcquire(1, timeout)}.\n   *\n   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.\n   * @return {@code true} if the permit was acquired, {@code false} otherwise\n   * @throws IllegalArgumentException if the requested number of permits is negative or zero\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.Multimaps$MapMultimap:createEntries()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$Itr:next()" : null,
  "com.google.common.collect.CompactLinkedHashSet:<init>()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:computeIfAbsent(java.lang.Object,java.util.function.Function)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$LinkedWeakKeyStrongValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)" : null,
  "com.google.common.base.JdkPattern:<init>(java.util.regex.Pattern)" : null,
  "com.google.common.reflect.ClassPath$ResourceInfo:asCharSource(java.nio.charset.Charset)" : "* Returns a {@link CharSource} view of the resource from which its bytes can be read as\n     * characters decoded with the given {@code charset}.\n     *\n     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,\n     *     despite physically existing in the class path.\n     * @since 20.0",
  "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:next()" : null,
  "com.google.common.collect.ArrayTable:size()" : null,
  "com.google.common.util.concurrent.ForwardingExecutorService:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.graph.ForwardingGraph:adjacentNodes(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableDoubleArray$AsList:subList(int,int)" : null,
  "com.google.common.collect.ImmutableMap:putIfAbsent(java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.cache.LocalCache$NullEntry:setAccessTime(long)" : null,
  "com.google.common.collect.StandardTable$ColumnKeySet:iterator()" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:matchesValue(java.lang.Object,int)" : null,
  "com.google.common.collect.Sets:complementOf(java.util.Collection,java.lang.Class)" : "* Creates an {@code EnumSet} consisting of all enum values that are not in the specified\n   * collection. This is equivalent to {@link EnumSet#complementOf}, but can act on any input\n   * collection, as long as the elements are of enum type.\n   *\n   * @param collection the collection whose complement should be stored in the {@code EnumSet}\n   * @param type the type of the elements in the set\n   * @return a new, modifiable {@code EnumSet} initially containing all the values of the enum not\n   *     present in the given collection",
  "com.google.common.collect.ImmutableSet$SetBuilderImpl:<init>(int)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:hashCode()" : null,
  "com.google.common.collect.Maps$SortedMapDifferenceImpl:<init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:remove(java.lang.Object,long)" : "* If {@code (key, value)} is currently in the map, this method removes it and returns true;\n   * otherwise, this method returns false.",
  "com.google.common.collect.Maps$AsMapView:createEntrySet()" : null,
  "com.google.common.collect.Maps$UnmodifiableEntries:iterator()" : null,
  "com.google.common.collect.ImmutableMap$Builder:ensureCapacity(int)" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:startUp()" : "* Start the service. This method is invoked on the execution thread.\n   *\n   * <p>By default this method does nothing.",
  "com.google.common.collect.AbstractBiMap:makeInverse(java.util.Map)" : null,
  "com.google.common.collect.ImmutableList:hashCode()" : null,
  "com.google.common.base.CharMatcher$RangesMatcher:toString()" : null,
  "com.google.common.collect.Maps$DescendingMap:comparator()" : null,
  "com.google.common.collect.SingletonImmutableSet:isPartialView()" : null,
  "com.google.common.io.MoreFiles$PathByteSource:size()" : null,
  "com.google.common.collect.RegularImmutableList:spliterator()" : null,
  "com.google.common.graph.StandardMutableNetwork:removeEdge(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:isEmpty()" : null,
  "com.google.common.collect.Collections2$FilteredCollection:size()" : null,
  "com.google.common.primitives.Bytes$ByteArrayAsList:toString()" : null,
  "com.google.common.math.StatsAccumulator:addAll(java.util.stream.IntStream)" : "* Adds the given values to the dataset. The stream will be completely consumed by this method.\n   *\n   * @param values a series of values\n   * @since 28.2 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.hash.Murmur3_32HashFunction:mixH1(int,int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Maps$KeySet:iterator()" : null,
  "com.google.common.collect.StandardTable$Column:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.AppendableWriter:checkNotClosed()" : null,
  "com.google.common.collect.Multimaps$Entries:remove(java.lang.Object)" : null,
  "com.google.common.collect.HashBasedTable:create(com.google.common.collect.Table)" : "* Creates a {@code HashBasedTable} with the same mappings as the specified table.\n   *\n   * @param table the table to copy\n   * @throws NullPointerException if any of the row keys, column keys, or values in {@code table} is\n   *     null",
  "com.google.common.reflect.TypeParameter:hashCode()" : null,
  "com.google.common.collect.Synchronized:list(java.util.List,java.lang.Object)" : null,
  "com.google.common.base.Equivalence:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:get(java.lang.Object)" : null,
  "com.google.common.io.CharSource:wrap(java.lang.CharSequence)" : "* Returns a view of the given character sequence as a {@link CharSource}. The behavior of the\n   * returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if\n   * the {@code charSequence} is mutated while it is being read, so don't do that.\n   *\n   * @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})",
  "com.google.common.util.concurrent.NullnessCasts:uncheckedNull()" : "* Returns {@code null} cast to any type.\n   *\n   * <p>This method is intended to help with usages of type parameters that have {@linkplain\n   * ParametricNullness parametric nullness}. Sometimes, code may receive a null {@code T} but store\n   * a \"null sentinel\" to take its place. When the time comes to convert it back to a {@code T} to\n   * return to a caller, the code needs to a way to return {@code null} from a method that returns\n   * \"plain {@code T}.\" This API provides that.",
  "com.google.common.util.concurrent.ForwardingLock:unlock()" : null,
  "com.google.common.collect.RegularContiguousSet:hashCode()" : null,
  "com.google.common.collect.AbstractBiMap$KeySet:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.ForwardingTable:rowKeySet()" : null,
  "com.google.common.collect.Maps$UnmodifiableBiMap:<init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap)" : null,
  "com.google.common.io.CharSequenceReader:reset()" : null,
  "com.google.common.collect.EmptyImmutableListMultimap:asMap()" : null,
  "com.google.common.primitives.Doubles$DoubleArrayAsList:<init>(double[])" : null,
  "com.google.common.net.InternetDomainName:isTopDomainUnderRegistrySuffix()" : "* Indicates whether this domain name is composed of exactly one subdomain component followed by a\n   * {@linkplain #isRegistrySuffix() registry suffix}. For example, returns {@code true} for {@code\n   * google.com}, {@code foo.co.uk}, and {@code blogspot.com}, but not for {@code www.google.com},\n   * {@code co.uk}, or {@code myblog.blogspot.com}.\n   *\n   * <p><b>Warning:</b> This method should not be used to determine the probable highest level\n   * parent domain for which cookies may be set. Use {@link #topPrivateDomain()} for that purpose.\n   *\n   * @since 23.3",
  "com.google.common.graph.AbstractNetwork:edgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMap:isEmpty()" : null,
  "com.google.common.graph.StandardNetwork:outEdges(java.lang.Object)" : null,
  "com.google.common.primitives.Doubles:rotate(double[],int)" : "* Performs a right rotation of {@code array} of \"distance\" places, so that the first element is\n   * moved to index \"distance\", and the element at index {@code i} ends up at index {@code (distance\n   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),\n   * distance)}, but is considerably faster and avoids allocation and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @since 32.0.0",
  "com.google.common.collect.RegularImmutableMap:createEntrySet()" : null,
  "com.google.common.reflect.AbstractInvocationHandler:toString()" : "* By default delegates to {@link Object#toString}. The dynamic proxies' {@code toString()} will\n   * delegate to this method. Subclasses can override this method to provide custom string\n   * representation for the proxies.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:set(int,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingExecutorService:invokeAny(java.util.Collection)" : null,
  "com.google.common.io.TempFileCreator:<init>()" : null,
  "com.google.common.collect.Multimaps$Keys:size()" : null,
  "com.google.common.collect.Tables:unmodifiableTable(com.google.common.collect.Table)" : "* Returns an unmodifiable view of the specified table. This method allows modules to provide\n   * users with \"read-only\" access to internal tables. Query operations on the returned table \"read\n   * through\" to the specified table, and attempts to modify the returned table, whether direct or\n   * via its collection views, result in an {@code UnsupportedOperationException}.\n   *\n   * <p>The returned table will be serializable if the specified table is serializable.\n   *\n   * <p>Consider using an {@link ImmutableTable}, which is guaranteed never to change.\n   *\n   * @since 11.0",
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:floor(java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:asDescendingMapOfRanges()" : null,
  "com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.Multimap)" : "* Returns an unmodifiable view of the specified multimap. Query operations on the returned\n   * multimap \"read through\" to the specified multimap, and attempts to modify the returned\n   * multimap, either directly or through the multimap's views, result in an {@code\n   * UnsupportedOperationException}.\n   *\n   * <p>The returned multimap will be serializable if the specified multimap is serializable.\n   *\n   * @param delegate the multimap for which an unmodifiable view is to be returned\n   * @return an unmodifiable view of the specified multimap",
  "com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard)" : "* Enters this monitor if the guard is satisfied. Blocks indefinitely acquiring the lock, but does\n   * not wait for the guard to be satisfied, and may be interrupted.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied\n   * @throws InterruptedException if interrupted while waiting",
  "com.google.common.collect.CompactLinkedHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)" : null,
  "com.google.common.cache.LocalCache$WeakEntry:getNextInAccessQueue()" : null,
  "com.google.common.escape.CharEscaperBuilder:addEscape(char,java.lang.String)" : "Add a new mapping from an index to an object to the escaping.",
  "com.google.common.eventbus.EventBus:<init>(java.lang.String)" : "* Creates a new EventBus with the given {@code identifier}.\n   *\n   * @param identifier a brief name for this bus, for logging purposes. Should be a valid Java\n   *     identifier.",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:keyStrength()" : null,
  "com.google.common.collect.RegularImmutableList:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedEntry:equals(java.lang.Object)" : null,
  "com.google.common.collect.Serialization:<init>()" : null,
  "com.google.common.collect.TreeMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.DescendingMultiset:pollFirstEntry()" : null,
  "com.google.common.collect.Cut$AboveAll:typeAsUpperBound()" : null,
  "com.google.common.io.Java8Compatibility:clear(java.nio.Buffer)" : null,
  "com.google.common.collect.MapMakerInternalMap:isEmpty()" : null,
  "com.google.common.collect.AbstractMultimap:entries()" : null,
  "com.google.common.io.MoreFiles:getNameWithoutExtension(java.nio.file.Path)" : "* Returns the file name without its <a\n   * href=\"http://en.wikipedia.org/wiki/Filename_extension\">file extension</a> or path. This is\n   * similar to the {@code basename} unix command. The result does not include the '{@code .}'.",
  "com.google.common.collect.StandardTable$Column$EntrySet:iterator()" : null,
  "com.google.common.collect.MapMakerInternalMap$Strength$2:defaultEquivalence()" : "* Returns the default equivalence strategy used to compare and hash keys or values referenced\n     * at this strength. This strategy will be used unless the user explicitly specifies an\n     * alternate strategy.",
  "com.google.common.collect.ForwardingCollection:standardContains(java.lang.Object)" : "* A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override\n   * {@link #iterator}, you may wish to override {@link #contains} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.graph.UndirectedMultiNetworkConnections:of()" : null,
  "com.google.common.collect.ArrayTable:equals(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken:canonicalizeWildcardsInType(java.lang.reflect.Type)" : null,
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:<init>(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$NullEntry:getNextInAccessQueue()" : null,
  "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:getNextInKeyBucket()" : null,
  "com.google.common.graph.IncidentEdgeSet:size()" : null,
  "com.google.common.cache.RemovalCause$2:wasEvicted()" : "* Returns {@code true} if there was an automatic removal due to eviction (the cause is neither\n   * {@link #EXPLICIT} nor {@link #REPLACED}).",
  "com.google.common.base.CharMatcher$None:lastIndexIn(java.lang.CharSequence)" : null,
  "com.google.common.util.concurrent.ClosingFuture$CloseableList:applyAsyncClosingFunction(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.lang.Object)" : null,
  "com.google.common.collect.Maps$DescendingMap:navigableKeySet()" : null,
  "com.google.common.collect.CompactHashSet:entry(int)" : null,
  "com.google.common.base.Strings:nullToEmpty(java.lang.String)" : "* Returns the given string if it is non-null; the empty string otherwise.\n   *\n   * @param string the string to test and possibly return\n   * @return {@code string} itself if it is non-null; {@code \"\"} if it is null",
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:doSetRate(double,double)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:keySet()" : null,
  "com.google.common.io.CountingOutputStream:write(int)" : null,
  "com.google.common.hash.AbstractCompositeHashFunction$1:putChar(char)" : null,
  "com.google.common.collect.ImmutableList$SerializedForm:<init>(java.lang.Object[])" : null,
  "com.google.common.collect.ComparatorOrdering:<init>(java.util.Comparator)" : null,
  "com.google.common.collect.EvictingQueue:addAll(java.util.Collection)" : null,
  "com.google.common.cache.LocalCache$WeightedSoftValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)" : null,
  "com.google.common.io.CharSource$ConcatenatedCharSource:<init>(java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.AtomicDouble:addAndGet(double)" : "* Atomically adds the given value to the current value.\n   *\n   * @param delta the value to add\n   * @return the updated value",
  "com.google.common.collect.RegularImmutableMap:size()" : null,
  "com.google.common.collect.DenseImmutableTable$Row:isPartialView()" : null,
  "com.google.common.primitives.ImmutableLongArray:<init>(long[])" : null,
  "com.google.common.collect.ArrayTable$ArrayMap:clear()" : null,
  "com.google.common.reflect.TypeResolver$TypeTable:resolve(java.lang.reflect.TypeVariable)" : null,
  "com.google.common.collect.Tables$TransposeTable:size()" : null,
  "com.google.common.util.concurrent.FuturesGetChecked:isCheckedException(java.lang.Class)" : null,
  "com.google.common.hash.Hasher:putDouble(double)" : "Equivalent to {@code putLong(Double.doubleToRawLongBits(d))}.",
  "com.google.common.collect.Sets:newSetFromMap(java.util.Map)" : "* Returns a set backed by the specified map. The resulting set displays the same ordering,\n   * concurrency, and performance characteristics as the backing map. In essence, this factory\n   * method provides a {@link Set} implementation corresponding to any {@link Map} implementation.\n   * There is no need to use this method on a {@link Map} implementation that already has a\n   * corresponding {@link Set} implementation (such as {@link java.util.HashMap} or {@link\n   * java.util.TreeMap}).\n   *\n   * <p>Each method invocation on the set returned by this method results in exactly one method\n   * invocation on the backing map or its {@code keySet} view, with one exception. The {@code\n   * addAll} method is implemented as a sequence of {@code put} invocations on the backing map.\n   *\n   * <p>The specified map must be empty at the time this method is invoked, and should not be\n   * accessed directly after this method returns. These conditions are ensured if the map is created\n   * empty, passed directly to this method, and no reference to the map is retained, as illustrated\n   * in the following code fragment:\n   *\n   * {@snippet :\n   * Set<Object> identityHashSet = Sets.newSetFromMap(\n   *     new IdentityHashMap<Object, Boolean>());\n   * }\n   *\n   * <p>The returned set is serializable if the backing map is.\n   *\n   * @param map the backing map\n   * @return the set backed by the map\n   * @throws IllegalArgumentException if {@code map} is not empty\n   * @deprecated Use {@link Collections#newSetFromMap} instead.",
  "com.google.common.collect.Sets$FilteredNavigableSet:last()" : null,
  "com.google.common.collect.Maps$6:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.MapMakerInternalMap:putAll(java.util.Map)" : null,
  "com.google.common.base.Suppliers$MemoizingSupplier:<init>(com.google.common.base.Supplier)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:clear()" : "* Removes all of the mappings from this map. The map will be empty after this call returns.\n   *\n   * <p>This method is not atomic: the map may not be empty after returning if there were concurrent\n   * writes.",
  "com.google.common.collect.Synchronized$SynchronizedList:delegate()" : null,
  "com.google.common.collect.Lists$ReverseList:subList(int,int)" : null,
  "com.google.common.collect.SparseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardFirstEntry()" : "* A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of {@link\n   * #entrySet}. If you override {@code entrySet}, you may wish to override {@code firstEntry} to\n   * forward to this implementation.",
  "com.google.common.collect.ArrayListMultimap:createCollection()" : "* Creates a new, empty {@code ArrayList} to hold the collection of values for an arbitrary key.",
  "com.google.common.collect.CompactHashing:newCapacity(int)" : "* Returns a larger power of 2 hashtable size given the current mask.\n   *\n   * <p>For hashtable sizes less than or equal to 32, the returned power of 2 is 4x the current\n   * hashtable size to reduce expensive rehashing. Otherwise the returned power of 2 is 2x the\n   * current hashtable size.",
  "com.google.common.collect.Cut$BelowValue:hashCode()" : null,
  "com.google.common.util.concurrent.AbstractService:enqueueStartingEvent()" : null,
  "com.google.common.base.Utf8:encodedLengthGeneral(java.lang.CharSequence,int)" : null,
  "com.google.common.primitives.ImmutableIntArray:copyOf(java.util.Collection)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object)" : "Returns an immutable multimap containing a single entry.",
  "com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)" : "* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both\n   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be\n   * interrupted.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied\n   * @throws InterruptedException if interrupted while waiting",
  "com.google.common.hash.HashCode:hashCode()" : "* Returns a \"Java hash code\" for this {@code HashCode} instance; this is well-defined (so, for\n   * example, you can safely put {@code HashCode} instances into a {@code HashSet}) but is otherwise\n   * probably not what you want to use.",
  "com.google.common.util.concurrent.Internal:<init>()" : null,
  "com.google.common.util.concurrent.ForwardingFluentFuture:get(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Maps:filterValues(java.util.SortedMap,com.google.common.base.Predicate)" : "* Returns a sorted map containing the mappings in {@code unfiltered} whose values satisfy a\n   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the\n   * other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},\n   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings whose values satisfy the filter will be removed from the underlying\n   * map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 11.0",
  "com.google.common.util.concurrent.AbstractService:awaitRunning(java.time.Duration)" : "* @since 28.0",
  "com.google.common.cache.RemovalCause$5:wasEvicted()" : "* Returns {@code true} if there was an automatic removal due to eviction (the cause is neither\n   * {@link #EXPLICIT} nor {@link #REPLACED}).",
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:putAll(java.util.Map)" : null,
  "com.google.common.collect.Ordering:natural()" : "* Returns a serializable ordering that uses the natural order of the values. The ordering throws\n   * a {@link NullPointerException} when passed a null parameter.\n   *\n   * <p>The type specification is {@code <C extends Comparable>}, instead of the technically correct\n   * {@code <C extends Comparable<? super C>>}, to support legacy types from before Java 5.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Comparator#naturalOrder} instead.",
  "com.google.common.reflect.Invokable:setAccessible(boolean)" : "See {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)}.",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,char)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object)" : "Makes an entry usable internally by a new ImmutableMap without rereading its contents.",
  "com.google.common.util.concurrent.AbstractService:state()" : null,
  "com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long,double)" : "* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link\n   * BloomFilter} with the specified expected false positive probability.\n   *\n   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the\n   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive\n   * probability.\n   *\n   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}\n   * is.\n   *\n   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n   * also relies on object identity of funnels.\n   *\n   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n   * @param expectedInsertions the number of expected insertions to the constructed {@code\n   *     BloomFilter}; must be positive\n   * @param fpp the desired false positive probability (must be positive and less than 1.0)\n   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements\n   * @since 23.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ImmutableSortedAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableTable$Values:size()" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:getWeight()" : null,
  "com.google.common.collect.AbstractNavigableMap:navigableKeySet()" : null,
  "com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[],int,int)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:first()" : null,
  "com.google.common.collect.CompactHashMap:writeObject(java.io.ObjectOutputStream)" : null,
  "com.google.common.collect.ImmutableTable:containsRow(java.lang.Object)" : null,
  "com.google.common.base.Predicates$NotPredicate:<init>(com.google.common.base.Predicate)" : null,
  "com.google.common.io.CharStreams:skipFully(java.io.Reader,long)" : "* Discards {@code n} characters of data from the reader. This method will block until the full\n   * amount has been skipped. Does not close the reader.\n   *\n   * @param reader the reader to read from\n   * @param n the number of characters to skip\n   * @throws EOFException if this stream reaches the end before skipping all the characters\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.Synchronized$SynchronizedMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.util.concurrent.AbstractFuture$Cancellation:<init>(boolean,java.lang.Throwable)" : null,
  "com.google.common.collect.GeneralRange:getUpperEndpoint()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:setValueForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)" : "Unsafely sets the value of the given entry.",
  "com.google.common.collect.ForwardingNavigableSet:standardHigher(java.lang.Object)" : "* A sensible definition of {@link #higher} in terms of the {@code iterator} method of {@link\n   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to\n   * override {@link #higher} to forward to this implementation.",
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Maps$DescendingMap:firstEntry()" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap:of()" : "* Returns an empty {@code ImmutableClassToInstanceMap}.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.\n   *\n   * @since 19.0",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object,boolean)" : null,
  "com.google.common.cache.ForwardingLoadingCache:refresh(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Whitespace:<init>()" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:delegate()" : null,
  "com.google.common.collect.ImmutableTable$Builder:buildOrThrow()" : "* Returns a newly-created immutable table, or throws an exception if duplicate key pairs were\n     * added.\n     *\n     * @throws IllegalArgumentException if duplicate key pairs were added\n     * @since 31.0",
  "com.google.common.collect.AbstractMultimap:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:ceiling(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Futures$CallbackListener:toString()" : null,
  "com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.Maps$6:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:readResolve()" : null,
  "com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor)" : "* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.\n   *\n   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut\n   *     down the executor after the last event has been posted to this event bus.",
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:remove(java.lang.Object)" : "* Removes and returns the value associated with {@code key}. If {@code key} is not in the map,\n   * this method has no effect and returns zero.",
  "com.google.common.collect.Maps:containsEntryImpl(java.util.Collection,java.lang.Object)" : "* Implements {@code Collection.contains} safely for forwarding collections of map entries. If\n   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to\n   * protect against a possible nefarious equals method.\n   *\n   * <p>Note that {@code c} is the backing (delegate) collection, rather than the forwarding\n   * collection.\n   *\n   * @param c the delegate (unwrapped) collection of map entries\n   * @param o the object that might be contained in {@code c}\n   * @return {@code true} if {@code c} contains {@code o}",
  "com.google.common.reflect.Invokable:isAbstract()" : "Returns true if the method is abstract.",
  "com.google.common.graph.UndirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)" : null,
  "com.google.common.util.concurrent.ClosingFuture:transformAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function\n   * that returns a {@code ClosingFuture} to its value. The function can use a {@link\n   * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those\n   * captured by the returned {@link ClosingFuture}).\n   *\n   * <p>If this {@code ClosingFuture} succeeds, the derived one will be equivalent to the one\n   * returned by the function.\n   *\n   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code\n   * ClosingFuture} will be equivalent to this one.\n   *\n   * <p>If the function throws an exception, that exception is used as the result of the derived\n   * {@code ClosingFuture}. But if the exception is thrown after the function creates a {@code\n   * ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be\n   * closed.\n   *\n   * <p>Usage guidelines for this method:\n   *\n   * <ul>\n   *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a\n   *       {@code ClosingFuture}. If possible, prefer calling {@link #transform(ClosingFunction,\n   *       Executor)} instead, with a function that returns the next value directly.\n   *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}\n   *       for every closeable object this step creates in order to capture it for later closing.\n   *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code\n   *       ClosingFuture} call {@link #from(ListenableFuture)}.\n   *   <li>In case this step doesn't create new closeables, you can adapt an API that returns a\n   *       {@link ListenableFuture} to return a {@code ClosingFuture} by wrapping it with a call to\n   *       {@link #withoutCloser(AsyncFunction)}\n   * </ul>\n   *\n   * <p>Example usage:\n   *\n   * {@snippet :\n   * // Result.getRowsClosingFuture() returns a ClosingFuture.\n   * ClosingFuture<List<Row>> rowsFuture =\n   *     queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor);\n   *\n   * // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the\n   * // number of written rows. openOutputFile() returns a FileOutputStream (which implements\n   * // Closeable).\n   * ClosingFuture<Integer> rowsFuture2 =\n   *     queryFuture.transformAsync(\n   *         (closer, result) -> {\n   *           FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor);\n   *           return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos));\n   *      },\n   *      executor);\n   *\n   * // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created).\n   * ClosingFuture<List<Row>> rowsFuture3 =\n   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);\n   *\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings\n   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.\n   * (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside\n   * {@code AsyncClosingFunction.apply}. Any heavyweight operations should occur in other threads\n   * responsible for completing the returned {@code ClosingFuture}.)\n   *\n   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link\n   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on\n   * the original {@code ClosingFuture} instance.\n   *\n   * @param function transforms the value of this step to a {@code ClosingFuture} with the value of\n   *     the derived step\n   * @param executor executor to run the function in\n   * @return the derived step\n   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this\n   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()\n   *     finished}",
  "com.google.common.collect.FluentIterable:transform(com.google.common.base.Function)" : "* Returns a fluent iterable that applies {@code function} to each element of this fluent\n   * iterable.\n   *\n   * <p>The returned fluent iterable's iterator supports {@code remove()} if this iterable's\n   * iterator does. After a successful {@code remove()} call, this fluent iterable no longer\n   * contains the corresponding element.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}.",
  "com.google.common.collect.ImmutableBiMap$Builder:buildOrThrow()" : "* Returns a newly-created immutable bimap, or throws an exception if any key or value was added\n     * more than once. The iteration order of the returned bimap is the order in which entries were\n     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case\n     * entries are sorted by value.\n     *\n     * @throws IllegalArgumentException if duplicate keys or values were added\n     * @since 31.0",
  "com.google.common.collect.Synchronized$SynchronizedMultimap:hashCode()" : null,
  "com.google.common.cache.CacheStats:toString()" : null,
  "com.google.common.util.concurrent.AbstractFuture:appendResultObject(java.lang.StringBuilder,java.lang.Object)" : "* Any object can be the result of a Future, and not every object has a reasonable toString()\n   * implementation. Using a reconstruction of the default Object.toString() prevents OOMs and stack\n   * overflows, and helps avoid sensitive data inadvertently ending up in exception messages.",
  "com.google.common.collect.LinkedListMultimap:get(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>If the multimap is modified while an iteration over the list is in progress (except through\n   * the iterator's own {@code add}, {@code set} or {@code remove} operations) the results of the\n   * iteration are undefined.\n   *\n   * <p>The returned list is not serializable and does not have random access.",
  "com.google.common.collect.ImmutableEnumSet:contains(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose\n   * keys and values are the result of applying the provided mapping functions to the input\n   * elements.\n   *\n   * <p>If the mapped keys contain duplicates (according to the comparator), the values are merged\n   * using the specified merging function. Entries will appear in the encounter order of the first\n   * occurrence of the key.\n   *\n   * @since 21.0",
  "com.google.common.cache.CacheBuilder:toString()" : "* Returns a string representation for this CacheBuilder instance. The exact form of the returned\n   * string is not specified.",
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$RegularSetBuilderImpl)" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap:delegate()" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:reschedule()" : "* Atomically reschedules this task and assigns the new future to {@link\n       * #cancellationDelegate}.",
  "com.google.common.collect.HashBiMap:forcePut(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedObject:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ArrayTable$ArrayMap:containsKey(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AtomicDouble:intValue()" : "* Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive\n   * conversion.",
  "com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)" : null,
  "com.google.common.util.concurrent.FakeTimeLimiter:<init>()" : "Creates a new {@link FakeTimeLimiter}.",
  "com.google.common.graph.Graphs:copyOf(com.google.common.graph.Network)" : "Creates a mutable copy of {@code network} with the same nodes and edges.",
  "com.google.common.collect.ArrayTable$ArrayMap:getKey(int)" : null,
  "com.google.common.hash.Funnels$LongFunnel:funnel(java.lang.Long,com.google.common.hash.PrimitiveSink)" : null,
  "com.google.common.collect.ImmutableSortedMultiset:naturalOrder()" : "* Returns a builder that creates immutable sorted multisets whose elements are ordered by their\n   * natural ordering. The sorted multisets use {@link Ordering#natural()} as the comparator. This\n   * method provides more type-safety than {@link #builder}, as it can be called only for classes\n   * that implement {@link Comparable}.\n   *\n   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code\n   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a\n   * href=\"https://bugs.openjdk.org/browse/JDK-6468354\">JDK-6468354</a>.",
  "com.google.common.util.concurrent.FakeTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.cache.CacheBuilder:getMaximumWeight()" : null,
  "com.google.common.reflect.TypeToken$ClassSet:rawTypes()" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:contains(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped()" : null,
  "com.google.common.collect.ImmutableSortedMap:naturalOrder()" : "* Returns a builder that creates immutable sorted maps whose keys are ordered by their natural\n   * ordering. The sorted maps use {@link Ordering#natural()} as the comparator.",
  "com.google.common.collect.RegularImmutableSortedMultiset:lastEntry()" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap:delegate()" : null,
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(int,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps:newSetMultimap(java.util.Map,com.google.common.base.Supplier)" : "* Creates a new {@code SetMultimap} that uses the provided map and factory. It can generate a\n   * multimap based on arbitrary {@link Map} and {@link Set} classes. Most users should prefer\n   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or\n   * collection types that {@link MultimapBuilder} does not support.\n   *\n   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration\n   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code\n   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}\n   * method returns instances of a different class than {@code factory.get()} does.\n   *\n   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code\n   * factory}, and the multimap contents are all serializable.\n   *\n   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if\n   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will\n   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link\n   * #synchronizedSetMultimap}.\n   *\n   * <p>Call this method only when the simpler methods {@link HashMultimap#create()}, {@link\n   * LinkedHashMultimap#create()}, {@link TreeMultimap#create()}, and {@link\n   * TreeMultimap#create(Comparator, Comparator)} won't suffice.\n   *\n   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by\n   * {@code factory}. Those objects should not be manually updated and they should not use soft,\n   * weak, or phantom references.\n   *\n   * @param map place to store the mapping from each key to its corresponding values\n   * @param factory supplier of new, empty sets that will each hold all values for a given key\n   * @throws IllegalArgumentException if {@code map} is not empty",
  "com.google.common.cache.ForwardingLoadingCache:apply(java.lang.Object)" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:predecessorsMultiset()" : null,
  "com.google.common.primitives.Longs$LongConverter:doBackward(java.lang.Long)" : null,
  "com.google.common.base.Defaults:<init>()" : null,
  "com.google.common.util.concurrent.AtomicDouble:<init>(double)" : "* Creates a new {@code AtomicDouble} with the given initial value.\n   *\n   * @param initialValue the initial value",
  "com.google.common.collect.SortedMultisets$ElementSet:last()" : null,
  "com.google.common.collect.ForwardingMultimap:values()" : null,
  "com.google.common.collect.ImmutableRangeSet:subRangeSet(com.google.common.collect.Range)" : "Returns a view of the intersection of this range set with the given range.",
  "com.google.common.graph.ImmutableValueGraph:incidentEdges(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$StrongValueReference:notifyNewValue(java.lang.Object)" : null,
  "com.google.common.math.IntMath:floorPowerOfTwo(int)" : "* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code\n   * checkedPow(2, log2(x, FLOOR))}.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @since 20.0",
  "com.google.common.util.concurrent.Monitor:toSafeNanos(long,java.util.concurrent.TimeUnit)" : "* Returns unit.toNanos(time), additionally ensuring the returned value is not at risk of\n   * overflowing or underflowing, by bounding the value between 0 and (Long.MAX_VALUE / 4) * 3.\n   * Actually waiting for more than 219 years is not supported!",
  "com.google.common.base.CharMatcher$Is:matches(char)" : null,
  "com.google.common.collect.Sets$DescendingSet:iterator()" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:orderKeysBy(java.util.Comparator)" : "* Specifies the ordering of the generated multimap's keys.\n     *\n     * @since 8.0",
  "com.google.common.collect.Iterators:partition(java.util.Iterator,int)" : "* Divides an iterator into unmodifiable sublists of the given size (the final list may be\n   * smaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a\n   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two\n   * inner lists of three and two elements, all in the original order.\n   *\n   * <p>The returned lists implement {@link java.util.RandomAccess}.\n   *\n   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.\n   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link\n   * OutOfMemoryError}.\n   *\n   * @param iterator the iterator to return a partitioned view of\n   * @param size the desired size of each partition (the last may be smaller)\n   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into\n   *     partitions\n   * @throws IllegalArgumentException if {@code size} is nonpositive",
  "com.google.common.collect.CompactHashMap:value(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMap:entrySet()" : null,
  "com.google.common.collect.ImmutableMultimap:remove(java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.EmptyContiguousSet:isPartialView()" : null,
  "com.google.common.util.concurrent.AbstractFuture:appendUserObject(java.lang.StringBuilder,java.lang.Object)" : "Helper for printing user supplied objects into our toString method.",
  "com.google.common.collect.ImmutableList:reverse()" : "* Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1,\n   * 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}.\n   *\n   * @return a view of this immutable list in reverse order\n   * @since 7.0",
  "com.google.common.util.concurrent.ExecutionList:add(java.lang.Runnable,java.util.concurrent.Executor)" : "* Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to\n   * execute. If execution has already begun, the listener is executed immediately.\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n   * documentation.",
  "com.google.common.cache.LocalCache:customWeigher()" : null,
  "com.google.common.cache.LocalCache$WeakAccessEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.escape.Escapers$Builder:build()" : "Returns a new escaper based on the current state of the builder.",
  "com.google.common.graph.EndpointPair$Ordered:isOrdered()" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:shutDown()" : null,
  "com.google.common.collect.MapMakerInternalMap:keySet()" : null,
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added",
  "com.google.common.collect.Maps$DescendingMap:descendingMap()" : null,
  "com.google.common.math.LinearTransformation$NaNLinearTransformation:isVertical()" : null,
  "com.google.common.hash.AbstractByteHasher:update(byte[],int,int)" : "Updates this hasher with {@code len} bytes starting at {@code off} in the given buffer.",
  "com.google.common.collect.Maps:keyPredicateOnEntries(com.google.common.base.Predicate)" : null,
  "com.google.common.collect.Maps:newHashMap()" : "* Creates a <i>mutable</i>, empty {@code HashMap} instance.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableMap#of()} instead.\n   *\n   * <p><b>Note:</b> if {@code K} is an {@code enum} type, use {@link #newEnumMap} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code HashMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @return a new, empty {@code HashMap}",
  "com.google.common.util.concurrent.AbstractService:enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State)" : null,
  "com.google.common.collect.Sets:newTreeSet(java.util.Comparator)" : "* Creates a <i>mutable</i>, empty {@code TreeSet} instance with the given comparator.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@code\n   * ImmutableSortedSet.orderedBy(comparator).build()} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code TreeSet} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>. One caveat to this is that the {@code TreeSet} constructor uses a null {@code\n   * Comparator} to mean \"natural ordering,\" whereas this factory rejects null. Clean your code\n   * accordingly.\n   *\n   * @param comparator the comparator to use to sort the set\n   * @return a new, empty {@code TreeSet}\n   * @throws NullPointerException if {@code comparator} is null",
  "com.google.common.cache.LocalCache$WeakEntry:getNextInWriteQueue()" : null,
  "com.google.common.cache.AbstractLoadingCache:getAll(java.lang.Iterable)" : null,
  "com.google.common.collect.FilteredEntryMultimap$AsMap:createValues()" : null,
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:<init>(java.lang.Object)" : null,
  "com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction)" : null,
  "com.google.common.collect.SingletonImmutableTable:rowMap()" : null,
  "com.google.common.collect.ImmutableSortedAsList:contains(java.lang.Object)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.ArrayTable:getCell(int)" : null,
  "com.google.common.collect.AbstractMultimap:valueSpliterator()" : null,
  "com.google.common.collect.Maps$NavigableKeySet:lower(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:instance()" : null,
  "com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.ValueGraph,java.lang.Iterable)" : "* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph\n   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}\n   * (and associated edge values) from {@code graph} for which both nodes are contained by {@code\n   * nodes}.\n   *\n   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",
  "com.google.common.base.Predicates$ContainsPatternPredicate:<init>(com.google.common.base.CommonPattern)" : null,
  "com.google.common.collect.EvictingQueue:offer(java.lang.Object)" : "* Adds the given element to this queue. If the queue is currently full, the element at the head\n   * of the queue is evicted to make room.\n   *\n   * @return {@code true} always",
  "com.google.common.escape.CharEscaperBuilder:toEscaper()" : "* Convert this builder into a char escaper which is just a decorator around the underlying array\n   * of replacement char[]s.\n   *\n   * @return an escaper that escapes based on the underlying array.",
  "com.google.common.collect.Maps:unmodifiableNavigableMap(java.util.NavigableMap)" : "* Returns an unmodifiable view of the specified navigable map. Query operations on the returned\n   * map read through to the specified map, and attempts to modify the returned map, whether direct\n   * or via its views, result in an {@code UnsupportedOperationException}.\n   *\n   * <p>The returned navigable map will be serializable if the specified navigable map is\n   * serializable.\n   *\n   * <p>This method's signature will not permit you to convert a {@code NavigableMap<? extends K,\n   * V>} to a {@code NavigableMap<K, V>}. If it permitted this, the returned map's {@code\n   * comparator()} method might return a {@code Comparator<? extends K>}, which works only on a\n   * particular subtype of {@code K}, but promise that it's a {@code Comparator<? super K>}, which\n   * must work on any type of {@code K}.\n   *\n   * @param map the navigable map for which an unmodifiable view is to be returned\n   * @return an unmodifiable view of the specified navigable map\n   * @since 12.0",
  "com.google.common.graph.ValueGraphBuilder:expectedNodeCount(int)" : "* Specifies the expected number of nodes in the graph.\n   *\n   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",
  "com.google.common.collect.ImmutableRangeSet$Builder:<init>()" : null,
  "com.google.common.collect.ArrayTable:isEmpty()" : "* Returns {@code true} if {@code rowKeyList().size == 0} or {@code columnKeyList().size() == 0}.",
  "com.google.common.reflect.Reflection:<init>()" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.LinkedHashMultimap:createCollection(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>Creates a decorated insertion-ordered set that also keeps track of the order in which\n   * key-value pairs are added to the multimap.\n   *\n   * @param key key to associate with values in the collection\n   * @return a new decorated set containing a collection of values for one key",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:ignoreCase()" : null,
  "com.google.common.collect.StandardTable$RowMap$EntrySet:iterator()" : null,
  "com.google.common.collect.RegularImmutableTable:<init>()" : null,
  "com.google.common.util.concurrent.AbstractService:startAsync()" : null,
  "com.google.common.io.ByteSource$ByteArrayByteSource:sizeIfKnown()" : null,
  "com.google.common.collect.LinkedListMultimap:hashCode()" : "* Returns the hash code for this multimap.\n   *\n   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by\n   * {@link Multimap#asMap}.\n   *\n   * @see Map#hashCode",
  "com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.reflect.Types$ClassOwnership$1:getOwnerType(java.lang.Class)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:maybeDrainReferenceQueues()" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:<init>(java.util.Map)" : null,
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(java.lang.Comparable,java.lang.Comparable)" : null,
  "com.google.common.io.MoreFiles:getFileExtension(java.nio.file.Path)" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Filename_extension\">file extension</a> for\n   * the file at the given path, or the empty string if the file has no extension. The result does\n   * not include the '{@code .}'.\n   *\n   * <p><b>Note:</b> This method simply returns everything after the last '{@code .}' in the file's\n   * name as determined by {@link Path#getFileName}. It does not account for any filesystem-specific\n   * behavior that the {@link Path} API does not already account for. For example, on NTFS it will\n   * report {@code \"txt\"} as the extension for the filename {@code \"foo.exe:.txt\"} even though NTFS\n   * will drop the {@code \":.txt\"} part of the name when the file is actually created on the\n   * filesystem due to NTFS's <a\n   * href=\"https://learn.microsoft.com/en-us/archive/blogs/askcore/alternate-data-streams-in-ntfs\">Alternate\n   * Data Streams</a>.",
  "com.google.common.collect.Maps$AbstractFilteredMap:<init>(java.util.Map,com.google.common.base.Predicate)" : null,
  "com.google.common.util.concurrent.InterruptibleTask$Blocker:getOwner()" : null,
  "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:getBaseUrl()" : "Gets URL for base of path containing Finalizer.class.",
  "com.google.common.base.CaseFormat$StringConverter:<init>(com.google.common.base.CaseFormat,com.google.common.base.CaseFormat)" : null,
  "com.google.common.collect.RegularContiguousSet:indexOf(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Striped$SmallLazyStriped:<init>(int,com.google.common.base.Supplier)" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:subList(int,int)" : null,
  "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:process(java.nio.ByteBuffer)" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:equals(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:entrySet()" : "* {@inheritDoc}\n   *\n   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the\n   * current count of that element in the multiset, as opposed to the count at the time the entry\n   * was retrieved.",
  "com.google.common.cache.LocalCache$WriteThroughEntry:toString()" : null,
  "com.google.common.util.concurrent.Monitor:enter(java.time.Duration)" : "* Enters this monitor. Blocks at most the given time.\n   *\n   * @return whether the monitor was entered\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:last()" : null,
  "com.google.common.base.CharMatcher$Is:replaceFrom(java.lang.CharSequence,char)" : null,
  "com.google.common.net.MediaType$Tokenizer:consumeToken(com.google.common.base.CharMatcher)" : null,
  "com.google.common.base.Predicates$AndPredicate:apply(java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntryBiMap:values()" : null,
  "com.google.common.collect.ImmutableMultimap:put(java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.util.concurrent.ClosingFuture:finishToFuture()" : "* Marks this step as the last step in the {@code ClosingFuture} pipeline.\n   *\n   * <p>The returned {@link Future} is completed when the pipeline's computation completes, or when\n   * the pipeline is cancelled.\n   *\n   * <p>All objects the pipeline has captured for closing will begin to be closed asynchronously\n   * <b>after</b> the returned {@code Future} is done: the future completes before closing starts,\n   * rather than once it has finished.\n   *\n   * <p>After calling this method, you may not call {@link\n   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, this method, or any other\n   * derivation method on the original {@code ClosingFuture} instance.\n   *\n   * @return a {@link Future} that represents the final value or exception of the pipeline",
  "com.google.common.collect.ForwardingNavigableSet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.cache.LocalCache$EntryFactory:getFactory(com.google.common.cache.LocalCache$Strength,boolean,boolean)" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:pollFirst()" : null,
  "com.google.common.net.MediaType:withParameter(java.lang.String,java.lang.String)" : "* <em>Replaces</em> all parameters with the given attribute with a single parameter with the\n   * given value. If multiple parameters with the same attributes are necessary use {@link\n   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}\n   * parameter when using a {@link Charset} object.\n   *\n   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid",
  "com.google.common.cache.CacheBuilderSpec$AccessDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.util.concurrent.ClosingFuture:catchingMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)" : null,
  "com.google.common.math.LinearTransformation:mapping(double,double)" : "* Start building an instance which maps {@code x = x1} to {@code y = y1}. Both arguments must be\n   * finite. Call either {@link LinearTransformationBuilder#and} or {@link\n   * LinearTransformationBuilder#withSlope} on the returned object to finish building the instance.",
  "com.google.common.collect.SortedLists$KeyPresentBehavior$2:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)" : null,
  "com.google.common.hash.AbstractNonStreamingHashFunction:hashBytes(java.nio.ByteBuffer)" : null,
  "com.google.common.collect.EvictingQueue:remainingCapacity()" : "* Returns the number of additional elements that this queue can accept without evicting; zero if\n   * the queue is currently full.\n   *\n   * @since 16.0",
  "com.google.common.hash.FarmHashFingerprint64:hashLength65Plus(byte[],int,int)" : null,
  "com.google.common.collect.ReverseOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$BitSetMatcher:setBits(java.util.BitSet)" : null,
  "com.google.common.reflect.TypeResolver:resolveParameterizedType(java.lang.reflect.ParameterizedType)" : null,
  "com.google.common.collect.HashBiMap$Inverse:entryIterator()" : null,
  "com.google.common.collect.Comparators:max(java.lang.Object,java.lang.Object,java.util.Comparator)" : "* Returns the maximum of the two values, according to the given comparator. If the values compare\n   * as equal, the first is returned.\n   *\n   * <p>The recommended solution for finding the {@code maximum} of some values depends on the type\n   * of your data and the number of elements you have. Read more in the Guava User Guide article on\n   * <a href=\"https://github.com/google/guava/wiki/CollectionUtilitiesExplained#comparators\">{@code\n   * Comparators}</a>.\n   *\n   * @param a first value to compare, returned if greater than or equal to b.\n   * @param b second value to compare.\n   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> using the given\n   *     comparator.\n   * @since 30.0",
  "com.google.common.primitives.Doubles:hashCode(double)" : "* Returns a hash code for {@code value}; obsolete alternative to {@link Double#hashCode(double)}.\n   *\n   * @param value a primitive {@code double} value\n   * @return a hash code for the value",
  "com.google.common.cache.LocalCache$Segment:postReadCleanup()" : "* Performs routine cleanup following a read. Normally cleanup happens during writes. If cleanup\n     * is not observed after a sufficient number of reads, try cleaning up from the read thread.",
  "com.google.common.io.MoreFiles$PathByteSink:openStream()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingKey(java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultimap:createCollection()" : "* {@inheritDoc}\n   *\n   * <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key.\n   *\n   * @return a new {@code LinkedHashSet} containing a collection of values for one key",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:size()" : null,
  "com.google.common.io.ByteStreams:copy(java.io.InputStream,java.io.OutputStream)" : "* Copies all bytes from the input stream to the output stream. Does not close or flush either\n   * stream.\n   *\n   * <p><b>Java 9 users and later:</b> this method should be treated as deprecated; use the\n   * equivalent {@link InputStream#transferTo} method instead.\n   *\n   * @param from the input stream to read from\n   * @param to the output stream to write to\n   * @return the number of bytes copied\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.DescendingImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.Synchronized$SynchronizedSet:equals(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.hash.AbstractHasher:putChar(char)" : null,
  "com.google.common.collect.ImmutableSet:chooseTableSize(int)" : null,
  "com.google.common.net.HostAndPort:fromString(java.lang.String)" : "* Split a freeform string into a host and port, without strict validation.\n   *\n   * <p>Note that the host-only formats will leave the port field undefined. You can use {@link\n   * #withDefaultPort(int)} to patch in a default value.\n   *\n   * @param hostPortString the input string to parse.\n   * @return if parsing was successful, a populated HostAndPort object.\n   * @throws IllegalArgumentException if nothing meaningful could be parsed.",
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:transform(double)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:removeMax(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:state()" : null,
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:size()" : null,
  "com.google.common.primitives.Longs$AsciiDigits:<init>()" : null,
  "com.google.common.collect.RangeSet:addAll(java.lang.Iterable)" : "* Adds all of the specified ranges to this range set (optional operation). After this operation,\n   * this range set is the minimal range set that {@linkplain #enclosesAll(RangeSet) encloses} both\n   * the original range set and each range in {@code other}.\n   *\n   * <p>This is equivalent to calling {@link #add} on each of the ranges in {@code other} in turn.\n   *\n   * @throws UnsupportedOperationException if this range set does not support the {@code addAll}\n   *     operation\n   * @since 21.0",
  "com.google.common.collect.AbstractSortedMultiset:comparator()" : null,
  "com.google.common.collect.ImmutableSortedMap$Builder:buildOrThrow()" : "* Returns a newly-created immutable sorted map, or throws an exception if any two keys are\n     * equal.\n     *\n     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which\n     *     might be the keys' natural order)\n     * @since 31.0",
  "com.google.common.cache.LocalCache$LoadingSerializationProxy:refresh(java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:iterator()" : "* Returns an iterator over the elements contained in this collection, <i>in no particular\n   * order</i>.\n   *\n   * <p>The iterator is <i>fail-fast</i>: If the MinMaxPriorityQueue is modified at any time after\n   * the iterator is created, in any way except through the iterator's own remove method, the\n   * iterator will generally throw a {@link ConcurrentModificationException}. Thus, in the face of\n   * concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary,\n   * non-deterministic behavior at an undetermined time in the future.\n   *\n   * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally\n   * speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent\n   * modification. Fail-fast iterators throw {@code ConcurrentModificationException} on a\n   * best-effort basis. Therefore, it would be wrong to write a program that depended on this\n   * exception for its correctness: <i>the fail-fast behavior of iterators should be used only to\n   * detect bugs.</i>\n   *\n   * @return an iterator over the elements contained in this collection",
  "com.google.common.hash.HashCode:fromBytesNoCopy(byte[])" : "* Creates a {@code HashCode} from a byte array. The array is <i>not</i> copied defensively, so it\n   * must be handed-off so as to preserve the immutability contract of {@code HashCode}.",
  "com.google.common.eventbus.Subscriber:isDeclaredThreadSafe(java.lang.reflect.Method)" : "* Checks whether {@code method} is thread-safe, as indicated by the presence of the {@link\n   * AllowConcurrentEvents} annotation.",
  "com.google.common.base.Joiner$MapJoiner:join(java.lang.Iterable)" : "* Returns a string containing the string representation of each entry in {@code entries}, using\n     * the previously configured separator and key-value separator.\n     *\n     * @since 10.0",
  "com.google.common.cache.RemovalNotification:<init>(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)" : null,
  "com.google.common.collect.Maps$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.io.Resources$UrlByteSource:openStream()" : null,
  "com.google.common.util.concurrent.Futures:catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)" : "* Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the\n   * primary input fails with the given {@code exceptionType}, from the result provided by the\n   * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so\n   * if the primary input succeeds, it is never invoked. If, during the invocation of {@code\n   * fallback}, an exception is thrown, this exception is used as the result of the output {@code\n   * Future}.\n   *\n   * <p>Usage example:\n   *\n   * {@snippet :\n   * ListenableFuture<Integer> fetchCounterFuture = ...;\n   *\n   * // Falling back to a zero counter in case an exception happens when\n   * // processing the RPC to fetch counters.\n   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the warnings the {@link MoreExecutors#directExecutor} documentation.\n   *\n   * @param input the primary input {@code Future}\n   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception\n   *     type is matched against the input's exception. \"The input's exception\" means the cause of\n   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a\n   *     different kind of exception, that exception itself. To avoid hiding bugs and other\n   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code\n   *     Throwable.class} in particular.\n   * @param fallback the {@link Function} to be called if {@code input} fails with the expected\n   *     exception type. The function's argument is the input's exception. \"The input's exception\"\n   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if\n   *     {@code get()} throws a different kind of exception, that exception itself.\n   * @param executor the executor that runs {@code fallback} if {@code input} fails\n   * @since 19.0",
  "com.google.common.collect.Synchronized$SynchronizedList:sort(java.util.Comparator)" : null,
  "com.google.common.collect.HashBiMap:rehashIfNecessary()" : null,
  "com.google.common.eventbus.DeadEvent:<init>(java.lang.Object,java.lang.Object)" : "* Creates a new DeadEvent.\n   *\n   * @param source object broadcasting the DeadEvent (generally the {@link EventBus}).\n   * @param event the event that could not be delivered.",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createKeys()" : null,
  "com.google.common.util.concurrent.AtomicDoubleArray:<init>(int)" : "* Creates a new {@code AtomicDoubleArray} of the given length, with all elements initially zero.\n   *\n   * @param length the length of the array",
  "com.google.common.io.ReaderInputStream:readMoreChars()" : "Handle the case of underflow caused by needing more input characters.",
  "com.google.common.cache.LocalCache$LocalManualCache:invalidate(java.lang.Object)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.primitives.Bytes$ByteArrayAsList:set(int,java.lang.Byte)" : null,
  "com.google.common.reflect.TypeToken:getRawTypes()" : null,
  "com.google.common.io.Files$FileByteSource:openStream()" : null,
  "com.google.common.cache.LocalCache:cleanUp()" : null,
  "com.google.common.math.Stats:meanOf(java.util.Iterator)" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of the\n   * values. The count must be non-zero.\n   *\n   * <p>The definition of the mean is the same as {@link Stats#mean}.\n   *\n   * @param values a series of values, which will be converted to {@code double} values (this may\n   *     cause loss of precision)\n   * @throws IllegalArgumentException if the dataset is empty",
  "com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)" : "* Streams lines from a URL, stopping when our callback returns false, or we have read all of the\n   * lines.\n   *\n   * @param url the URL to read from\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @param callback the LineProcessor to use to handle the lines\n   * @return the output of processing the lines\n   * @throws IOException if an I/O error occurs",
  "com.google.common.base.Platform:nullToEmpty(java.lang.String)" : "* Returns the string if it is not null, or an empty string otherwise.\n   *\n   * @param string the string to test and possibly return\n   * @return {@code string} if it is not null; {@code \"\"} otherwise",
  "com.google.common.graph.EdgesConnecting:contains(java.lang.Object)" : null,
  "com.google.common.cache.CacheLoader:reload(java.lang.Object,java.lang.Object)" : "* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This\n   * method is called when an existing cache entry is refreshed by {@link\n   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.\n   *\n   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be\n   * overridden with an asynchronous implementation when using {@link\n   * CacheBuilder#refreshAfterWrite}.\n   *\n   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.\n   *\n   * @param key the non-null key whose value should be loaded\n   * @param oldValue the non-null old value corresponding to {@code key}\n   * @return the future new value associated with {@code key}; <b>must not be null, must not return\n   *     null</b>\n   * @throws Exception if unable to reload the result\n   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is\n   *     treated like any other {@code Exception} in all respects except that, when it is caught,\n   *     the thread's interrupt status is set\n   * @since 11.0",
  "com.google.common.collect.MapMakerInternalMap$Segment:drainValueReferenceQueue(java.lang.ref.ReferenceQueue)" : null,
  "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:spliterator()" : null,
  "com.google.common.collect.FluentIterable:toMap(com.google.common.base.Function)" : "* Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}\n   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order\n   * is the order of the first appearance of each key in this iterable.\n   *\n   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether\n   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,\n   * which result will be mapped to that key in the returned map.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(k -> k,\n   * valueFunction))}.\n   *\n   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code\n   *     valueFunction} produces {@code null} for any key\n   * @since 14.0",
  "com.google.common.collect.ForwardingSortedSet:standardSubSet(java.lang.Object,java.lang.Object)" : "* A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link\n   * #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override\n   * {@link #subSet(Object, Object)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ForwardingList:standardIterator()" : "* A sensible default implementation of {@link #iterator}, in terms of {@link #listIterator()}. If\n   * you override {@link #listIterator()}, you may wish to override {@link #iterator} to forward to\n   * this implementation.\n   *\n   * @since 7.0",
  "com.google.common.math.MathPreconditions:checkNonNegative(java.lang.String,int)" : null,
  "com.google.common.collect.Maps:filterEntries(java.util.Map,com.google.common.base.Predicate)" : "* Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The\n   * returned map is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code\n   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the\n   * map's entries have a {@link Entry#setValue} method that throws an {@link\n   * IllegalArgumentException} when the existing key and the provided value don't satisfy the\n   * predicate.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings that satisfy the filter will be removed from the underlying map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}.",
  "com.google.common.reflect.Invokable:isSynthetic()" : null,
  "com.google.common.hash.AbstractHashFunction:hashBytes(byte[])" : null,
  "com.google.common.collect.JdkBackedImmutableMap:get(java.lang.Object)" : null,
  "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:checkNotDone()" : null,
  "com.google.common.base.Joiner:<init>(com.google.common.base.Joiner)" : null,
  "com.google.common.collect.HashBiMap:createTable(int)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:<init>(java.lang.Object,int)" : null,
  "com.google.common.collect.Lists$ReverseList:reverseIndex(int)" : null,
  "com.google.common.collect.ImmutableRangeSet:addAll(com.google.common.collect.RangeSet)" : "* Guaranteed to throw an exception and leave the {@code RangeSet} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.RegularImmutableSet:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.graph.AbstractNetwork:inDegree(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$EntryFactory$6:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:remove()" : null,
  "com.google.common.util.concurrent.Striped$PowerOfTwoStriped:indexFor(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ClosingFuture:finalize()" : null,
  "com.google.common.cache.LocalCache:get(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultimap:keySet()" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link\n   * NavigableSet}, instead of the {@link java.util.Set} specified in the {@link Multimap}\n   * interface.\n   *\n   * @since 14.0 (present with return type {@code SortedSet} since 2.0)",
  "com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.ForwardingMultiset:standardSize()" : "* A sensible, albeit inefficient, definition of {@link #size} in terms of {@link #entrySet}. If\n   * you override {@link #entrySet}, you may wish to override {@link #size} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:remove(int)" : null,
  "com.google.common.math.MathPreconditions:checkNoOverflow(boolean,java.lang.String,long,long)" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:getNext()" : null,
  "com.google.common.collect.ReverseOrdering:toString()" : null,
  "com.google.common.collect.RangeSet:removeAll(java.lang.Iterable)" : "* Removes all of the specified ranges from this range set (optional operation).\n   *\n   * <p>This is equivalent to calling {@link #remove} on each of the ranges in {@code other} in\n   * turn.\n   *\n   * @throws UnsupportedOperationException if this range set does not support the {@code removeAll}\n   *     operation\n   * @since 21.0",
  "com.google.common.collect.Maps$UnmodifiableBiMap:computeIfAbsent(java.lang.Object,java.util.function.Function)" : null,
  "com.google.common.collect.Multimaps$Entries:contains(java.lang.Object)" : null,
  "com.google.common.base.JdkPattern$JdkMatcher:start()" : null,
  "com.google.common.base.Predicates$SubtypeOfPredicate:apply(java.lang.Class)" : null,
  "com.google.common.collect.EvictingQueue:delegate()" : null,
  "com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray()" : null,
  "com.google.common.collect.TreeTraverser$BreadthFirstIterator:next()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:get(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$WeakEntry:setValueReference(com.google.common.cache.LocalCache$ValueReference)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:get(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$StrongAccessWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.ImmutableMultiset)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this\n   * @since 10.0",
  "com.google.common.collect.ImmutableMap:keySpliterator()" : null,
  "com.google.common.collect.HashMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the\n   *     key, number of values for that key, and the key's values",
  "com.google.common.hash.HashCode:equals(java.lang.Object)" : "* Returns {@code true} if {@code object} is a {@link HashCode} instance with the identical byte\n   * representation to this hash code.\n   *\n   * <p><b>Security note:</b> this method uses a constant-time (not short-circuiting) implementation\n   * to protect against <a href=\"http://en.wikipedia.org/wiki/Timing_attack\">timing attacks</a>.",
  "com.google.common.util.concurrent.ForwardingBlockingQueue:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Queues:newArrayBlockingQueue(int)" : "* Creates an empty {@code ArrayBlockingQueue} with the given (fixed) capacity and nonfair access\n   * policy.",
  "com.google.common.collect.GeneralRange:reverse()" : "Returns the same range relative to the reversed comparator.",
  "com.google.common.collect.DescendingImmutableSortedSet:contains(java.lang.Object)" : null,
  "com.google.common.primitives.Chars:lastIndexOf(char[],char)" : "* Returns the index of the last appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code char} values, possibly empty\n   * @param target a primitive {@code char} value\n   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.graph.DirectedGraphConnections:adjacentNodes()" : null,
  "com.google.common.math.PairedStatsAccumulator:sampleCovariance()" : "* Returns the sample covariance of the values. The count must be greater than one.\n   *\n   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values\n   * multiple times, due to numerical errors.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",
  "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "Returns an immutable multimap containing the given entries, in order.",
  "com.google.common.primitives.Floats:rotate(float[],int,int,int)" : "* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code\n   * toIndex} exclusive. This is equivalent to {@code\n   * Collections.rotate(Floats.asList(array).subList(fromIndex, toIndex), distance)}, but is\n   * considerably faster and avoids allocations and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 32.0.0",
  "com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable:<init>(java.util.concurrent.Future)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:size()" : null,
  "com.google.common.util.concurrent.NullnessCasts:uncheckedCastNullableTToT(java.lang.Object)" : "* Accepts a {@code @Nullable T} and returns a plain {@code T}, without performing any check that\n   * that conversion is safe.\n   *\n   * <p>This method is intended to help with usages of type parameters that have {@linkplain\n   * ParametricNullness parametric nullness}. If a type parameter instead ranges over only non-null\n   * types (or if the type is a non-variable type, like {@code String}), then code should almost\n   * never use this method, preferring instead to call {@code requireNonNull} so as to benefit from\n   * its runtime check.\n   *\n   * <p>An example use case for this method is in implementing an {@code Iterator<T>} whose {@code\n   * next} field is lazily initialized. The type of that field would be {@code @Nullable T}, and the\n   * code would be responsible for populating a \"real\" {@code T} (which might still be the value\n   * {@code null}!) before returning it to callers. Depending on how the code is structured, a\n   * nullness analysis might not understand that the field has been populated. To avoid that problem\n   * without having to add {@code @SuppressWarnings}, the code can call this method.\n   *\n   * <p>Why <i>not</i> just add {@code SuppressWarnings}? The problem is that this method is\n   * typically useful for {@code return} statements. That leaves the code with two options: Either\n   * add the suppression to the whole method (which turns off checking for a large section of code),\n   * or extract a variable, and put the suppression on that. However, a local variable typically\n   * doesn't work: Because nullness analyses typically infer the nullness of local variables,\n   * there's no way to assign a {@code @Nullable T} to a field {@code T foo;} and instruct the\n   * analysis that that means \"plain {@code T}\" rather than the inferred type {@code @Nullable T}.\n   * (Even if supported added {@code @NonNull}, that would not help, since the problem case\n   * addressed by this method is the case in which {@code T} has parametric nullness -- and thus its\n   * value may be legitimately {@code null}.)",
  "com.google.common.collect.ImmutableSetMultimap:valuesBuilder(java.util.Comparator)" : null,
  "com.google.common.collect.SingletonImmutableTable:columnMap()" : null,
  "com.google.common.collect.ImmutableBiMap$SerializedForm:<init>(com.google.common.collect.ImmutableBiMap)" : null,
  "com.google.common.collect.ImmutableSet$Builder:add(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Maps$FilteredEntryMap:<init>(java.util.Map,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMaker$Dummy)" : null,
  "com.google.common.collect.ImmutableSortedSet:descendingIterator()" : "* @since 12.0",
  "com.google.common.graph.AbstractValueGraph$1:outDegree(java.lang.Object)" : null,
  "com.google.common.base.Ascii:toLowerCase(java.lang.CharSequence)" : "* Returns a copy of the input character sequence in which all {@linkplain #isUpperCase(char)\n   * uppercase ASCII characters} have been converted to lowercase. All other characters are copied\n   * without modification.\n   *\n   * @since 14.0",
  "com.google.common.collect.CompactHashMap:createValues()" : null,
  "com.google.common.math.StatsAccumulator:populationStandardDeviation()" : "* Returns the <a\n   * href=\"http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values\">\n   * population standard deviation</a> of the values. The count must be non-zero.\n   *\n   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It\n   * is not guaranteed to return zero when the dataset consists of the same value multiple times,\n   * due to numerical errors. However, it is guaranteed never to return a negative result.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMap$Builder:<init>(java.util.Comparator)" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableSortedMap#orderedBy}.",
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:iterator()" : null,
  "com.google.common.collect.StandardTable$Row:remove(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableTable:columnKeySet()" : null,
  "com.google.common.collect.TreeRangeSet:<init>(java.util.NavigableMap)" : null,
  "com.google.common.primitives.SignedBytes:checkedCast(long)" : "* Returns the {@code byte} value that is equal to {@code value}, if possible.\n   *\n   * @param value any value in the range of the {@code byte} type\n   * @return the {@code byte} value that equals {@code value}\n   * @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or\n   *     less than {@link Byte#MIN_VALUE}",
  "com.google.common.collect.DenseImmutableTable$RowMap:getValue(int)" : null,
  "com.google.common.collect.Collections2$FilteredCollection:contains(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeSet:intersects(com.google.common.collect.Range)" : null,
  "com.google.common.reflect.Invokable:from(java.lang.reflect.Constructor)" : "Returns {@link Invokable} of {@code constructor}.",
  "com.google.common.collect.SortedLists$KeyPresentBehavior$4:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)" : null,
  "com.google.common.io.CountingInputStream:skip(long)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:newEntryForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry)" : "Unsafely returns a fresh entry.",
  "com.google.common.collect.AbstractMultiset:add(java.lang.Object,int)" : null,
  "com.google.common.io.ByteSink:asCharSink(java.nio.charset.Charset)" : "* Returns a {@link CharSink} view of this {@code ByteSink} that writes characters to this sink as\n   * bytes encoded with the given {@link Charset charset}.",
  "com.google.common.collect.TreeMultiset:comparator()" : null,
  "com.google.common.cache.LocalCache:rehash(int)" : "* Applies a supplemental hash function to a given hash code, which defends against poor quality\n   * hash functions. This is critical when the concurrent hash map uses power-of-two length hash\n   * tables, that otherwise encounter collisions for hash codes that do not differ in lower or upper\n   * bits.\n   *\n   * @param h hash code",
  "com.google.common.base.Stopwatch:createUnstarted(com.google.common.base.Ticker)" : "* Creates (but does not start) a new stopwatch, using the specified time source.\n   *\n   * @since 15.0",
  "com.google.common.hash.HashCode$IntHashCode:asLong()" : null,
  "com.google.common.io.BaseEncoding:trimTrailingPadding(java.lang.CharSequence)" : null,
  "com.google.common.graph.ForwardingNetwork:edges()" : null,
  "com.google.common.cache.CacheBuilder:getConcurrencyLevel()" : null,
  "com.google.common.collect.ImmutableTable:of(java.lang.Object,java.lang.Object,java.lang.Object)" : "Returns an immutable table containing a single cell.",
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:withSeparator(java.lang.String,int)" : null,
  "com.google.common.base.Suppliers$SupplierOfInstance:get()" : null,
  "com.google.common.graph.StandardMutableGraph:<init>(com.google.common.graph.AbstractGraphBuilder)" : "Constructs a {@link MutableGraph} with the properties specified in {@code builder}.",
  "com.google.common.collect.MutableClassToInstanceMap:<init>(java.util.Map)" : null,
  "com.google.common.math.LongMath:saturatedAdd(long,long)" : null,
  "com.google.common.io.BaseEncoding:encode(byte[],int,int)" : "* Encodes the specified range of the specified byte array, and returns the encoded {@code\n   * String}.",
  "com.google.common.collect.Streams:mapWithIndex(java.util.stream.IntStream,com.google.common.collect.Streams$IntFunctionWithIndex)" : "* Returns a stream consisting of the results of applying the given function to the elements of\n   * {@code stream} and their indexes in the stream. For example,\n   *\n   * {@snippet :\n   * mapWithIndex(\n   *     IntStream.of(10, 11, 12),\n   *     (e, index) -> index + \":\" + e)\n   * }\n   *\n   * <p>...would return {@code Stream.of(\"0:10\", \"1:11\", \"2:12\")}.\n   *\n   * <p>The resulting stream is <a\n   * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n   * if and only if {@code stream} was efficiently splittable and its underlying spliterator\n   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream\n   * comes from a data structure supporting efficient indexed random access, typically an array or\n   * list.\n   *\n   * <p>The order of the resulting stream is defined if and only if the order of the original stream\n   * was defined.",
  "com.google.common.collect.Maps$AsMapView:size()" : null,
  "com.google.common.cache.LocalCache$WriteQueue:remove(java.lang.Object)" : null,
  "com.google.common.collect.AbstractSortedSetMultimap:asMap()" : "* Returns a map view that associates each key with the corresponding values in the multimap.\n   * Changes to the returned map, such as element removal, will update the underlying multimap. The\n   * map does not support {@code setValue} on its entries, {@code put}, or {@code putAll}.\n   *\n   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same\n   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,\n   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.\n   *\n   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link\n   * SortedSet} values.",
  "com.google.common.collect.SortedMultisets$NavigableElementSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardFirstKey()" : "* A sensible definition of {@link #firstKey} in terms of {@code firstEntry}. If you override\n   * {@code firstEntry}, you may wish to override {@code firstKey} to forward to this\n   * implementation.",
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided",
  "com.google.common.base.FunctionalEquivalence:doHash(java.lang.Object)" : null,
  "com.google.common.net.InternetDomainName:topPrivateDomain()" : "* Returns the portion of this domain name that is one level beneath the {@linkplain\n   * #isPublicSuffix() public suffix}. For example, for {@code x.adwords.google.co.uk} it returns\n   * {@code google.co.uk}, since {@code co.uk} is a public suffix. Similarly, for {@code\n   * myblog.blogspot.com} it returns the same domain, {@code myblog.blogspot.com}, since {@code\n   * blogspot.com} is a public suffix.\n   *\n   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned.\n   *\n   * <p>This method can be used to determine the probable highest level parent domain for which\n   * cookies may be set, though even that depends on individual browsers' implementations of cookie\n   * controls.\n   *\n   * @throws IllegalStateException if this domain does not end with a public suffix\n   * @since 6.0",
  "com.google.common.collect.ImmutableRangeSet:of()" : "* Returns an empty immutable range set.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.collect.Iterators:elementsEqual(java.util.Iterator,java.util.Iterator)" : "* Determines whether two iterators contain equal elements in the same order. More specifically,\n   * this method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same\n   * number of elements and every element of {@code iterator1} is equal to the corresponding element\n   * of {@code iterator2}.\n   *\n   * <p>Note that this will modify the supplied iterators, since they will have been advanced some\n   * number of elements forward.",
  "com.google.common.util.concurrent.ForwardingExecutorService:isTerminated()" : null,
  "com.google.common.hash.BloomFilter:put(java.lang.Object)" : "* Puts an element into this {@code BloomFilter}. Ensures that subsequent invocations of {@link\n   * #mightContain(Object)} with the same element will always return {@code true}.\n   *\n   * @return true if the Bloom filter's bits changed as a result of this operation. If the bits\n   *     changed, this is <i>definitely</i> the first time {@code object} has been added to the\n   *     filter. If the bits haven't changed, this <i>might</i> be the first time {@code object} has\n   *     been added to the filter. Note that {@code put(t)} always returns the <i>opposite</i>\n   *     result to what {@code mightContain(t)} would have returned at the time it is called.\n   * @since 12.0 (present in 11.0 with {@code void} return type})",
  "com.google.common.collect.ForwardingMap:entrySet()" : null,
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:maxRunBeforeFallback(int)" : "* If more than this many consecutive positions are filled in a table of the specified size,\n     * report probable hash flooding. ({@link #hashFloodingDetected} may also report hash flooding\n     * if fewer consecutive positions are filled; see that method for details.)",
  "com.google.common.graph.StandardMutableNetwork:<init>(com.google.common.graph.NetworkBuilder)" : "Constructs a mutable graph with the properties specified in {@code builder}.",
  "com.google.common.net.MediaType:charset()" : "* Returns an optional charset for the value of the charset parameter if it is specified.\n   *\n   * @throws IllegalStateException if multiple charset values have been set for this media type\n   * @throws IllegalCharsetNameException if a charset value is present, but illegal\n   * @throws UnsupportedCharsetException if a charset value is present, but no support is available\n   *     in this instance of the Java virtual machine",
  "com.google.common.collect.RegularImmutableList:listIterator(int)" : null,
  "com.google.common.collect.AbstractTable:createValues()" : null,
  "com.google.common.eventbus.EventBus:<init>(java.lang.String,java.util.concurrent.Executor,com.google.common.eventbus.Dispatcher,com.google.common.eventbus.SubscriberExceptionHandler)" : null,
  "com.google.common.collect.Maps$5:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:createKeySet()" : null,
  "com.google.common.collect.Iterables:retainAll(java.lang.Iterable,java.util.Collection)" : "* Removes, from an iterable, every element that does not belong to the provided collection.\n   *\n   * <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and\n   * {@link Iterators#retainAll} otherwise.\n   *\n   * @param removeFrom the iterable to (potentially) remove elements from\n   * @param elementsToRetain the elements to retain\n   * @return {@code true} if any element was removed from {@code iterable}",
  "com.google.common.primitives.Booleans:reverse(boolean[],int,int)" : "* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive. This is equivalent to {@code\n   * Collections.reverse(Booleans.asList(array).subList(fromIndex, toIndex))}, but is likely to be\n   * more efficient.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 23.1",
  "com.google.common.io.ByteSource$ConcatenatedByteSource:size()" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:remove(java.lang.Object)" : null,
  "com.google.common.base.Objects:equal(java.lang.Object,java.lang.Object)" : "* Determines whether two possibly-null objects are equal. Returns:\n   *\n   * <ul>\n   *   <li>{@code true} if {@code a} and {@code b} are both null.\n   *   <li>{@code true} if {@code a} and {@code b} are both non-null and they are equal according to\n   *       {@link Object#equals(Object)}.\n   *   <li>{@code false} in all other situations.\n   * </ul>\n   *\n   * <p>This assumes that any non-null objects passed to this function conform to the {@code\n   * equals()} contract.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link\n   * java.util.Objects#equals} instead.\n   *",
  "com.google.common.hash.SipHashFunction$SipHasher:sipRound(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:addFirst(java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:crossOver(int,java.lang.Object)" : "* Crosses an element over to the opposite heap by moving it one level down (or up if there are\n     * no elements below it).\n     *\n     * <p>Returns the new position of the element.",
  "com.google.common.collect.Multimaps$CustomSortedSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)" : null,
  "com.google.common.graph.AbstractValueGraph:incidentEdges(java.lang.Object)" : null,
  "com.google.common.reflect.Types$TypeVariableInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : null,
  "com.google.common.collect.CollectPreconditions:checkEntryNotNull(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.CharSource:readFirstLine()" : "* Reads the first line of this source as a string. Returns {@code null} if this source is empty.\n   *\n   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\n   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n   * it does.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source",
  "com.google.common.cache.LocalCache$WriteThroughEntry:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:shutdown()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:wrapEntry(java.util.Map$Entry)" : null,
  "com.google.common.primitives.Ints$IntArrayAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)" : null,
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:pendingToString()" : null,
  "com.google.common.collect.StandardTable:containsMapping(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:set(int,java.lang.Long)" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:loadFuture(java.lang.Object,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.io.Files:move(java.io.File,java.io.File)" : "* Moves a file from one path to another. This method can rename a file and/or move it to a\n   * different directory. In either case {@code to} must be the target path for the file itself; not\n   * just the new name for the file or the path to the new parent directory.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}.\n   *\n   * @param from the source file\n   * @param to the destination file\n   * @throws IOException if an I/O error occurs\n   * @throws IllegalArgumentException if {@code from.equals(to)}",
  "com.google.common.base.Suppliers:ofInstance(java.lang.Object)" : "* Returns a supplier that always supplies {@code instance}.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code () -> instance}, but note that lambdas do not have\n   * human-readable {@link #toString()} representations and are not serializable. If you need a\n   * supplier that is serializable, use {@code (Supplier<T> & Serializable) () -> instance}.",
  "com.google.common.collect.Synchronized:queue(java.util.Queue,java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$WeakEntry:setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,char)" : "* Returns a string copy of the input character sequence, with each matching BMP character\n   * replaced by a given replacement character. For example:\n   *\n   * {@snippet :\n   * CharMatcher.is('a').replaceFrom(\"radar\", 'o')\n   * }\n   *\n   * ... returns {@code \"rodor\"}.\n   *\n   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching\n   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each\n   * character.\n   *\n   * @param sequence the character sequence to replace matching characters in\n   * @param replacement the character to append to the result string in place of each matching\n   *     character in {@code sequence}\n   * @return the new string",
  "com.google.common.primitives.UnsignedLong:mod(com.google.common.primitives.UnsignedLong)" : "* Returns this modulo {@code val}.\n   *\n   * @since 14.0",
  "com.google.common.cache.LocalCache$WeakEntry:getPreviousInWriteQueue()" : null,
  "com.google.common.collect.ImmutableList:subList(int,int)" : "* Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive,\n   * and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty\n   * immutable list is returned.)\n   *\n   * <p><b>Note:</b> in almost all circumstances, the returned {@link ImmutableList} retains a\n   * strong reference to {@code this}, which may prevent the original list from being garbage\n   * collected. If you want the original list to be eligible for garbage collection, you should\n   * create and use a copy of the sub list (e.g., {@code\n   * ImmutableList.copyOf(originalList.subList(...))}).",
  "com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int,int)" : null,
  "com.google.common.primitives.UnsignedLongs:flip(long)" : "* A (self-inverse) bijection which converts the ordering on unsigned longs to the ordering on\n   * longs, that is, {@code a <= b} as unsigned longs if and only if {@code flip(a) <= flip(b)} as\n   * signed longs.",
  "com.google.common.collect.MinMaxPriorityQueue:size()" : null,
  "com.google.common.util.concurrent.Futures:catchingAsync(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)" : "* Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the\n   * primary input fails with the given {@code exceptionType}, from the result provided by the\n   * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has\n   * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of\n   * {@code fallback}, an exception is thrown, this exception is used as the result of the output\n   * {@code Future}.\n   *\n   * <p>Usage examples:\n   *\n   * {@snippet :\n   * ListenableFuture<Integer> fetchCounterFuture = ...;\n   *\n   * // Falling back to a zero counter in case an exception happens when\n   * // processing the RPC to fetch counters.\n   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor());\n   * }\n   *\n   * <p>The fallback can also choose to propagate the original exception when desired:\n   *\n   * {@snippet :\n   * ListenableFuture<Integer> fetchCounterFuture = ...;\n   *\n   * // Falling back to a zero counter only in case the exception was a\n   * // TimeoutException.\n   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n   *     fetchCounterFuture,\n   *     FetchException.class,\n   *     e -> {\n   *       if (omitDataOnFetchFailure) {\n   *         return immediateFuture(0);\n   *       }\n   *       throw e;\n   *     },\n   *     directExecutor());\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the warnings the {@link MoreExecutors#directExecutor} documentation.\n   *\n   * @param input the primary input {@code Future}\n   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception\n   *     type is matched against the input's exception. \"The input's exception\" means the cause of\n   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a\n   *     different kind of exception, that exception itself. To avoid hiding bugs and other\n   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code\n   *     Throwable.class} in particular.\n   * @param fallback the {@link AsyncFunction} to be called if {@code input} fails with the expected\n   *     exception type. The function's argument is the input's exception. \"The input's exception\"\n   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if\n   *     {@code get()} throws a different kind of exception, that exception itself.\n   * @param executor the executor that runs {@code fallback} if {@code input} fails\n   * @since 19.0 (similar functionality in 14.0 as {@code withFallback})",
  "com.google.common.graph.ForwardingNetwork:incidentNodes(java.lang.Object)" : null,
  "com.google.common.reflect.Invokable:getReturnType()" : null,
  "com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture:<init>()" : null,
  "com.google.common.collect.Synchronized:table(com.google.common.collect.Table,java.lang.Object)" : null,
  "com.google.common.hash.Hashing:murmur3_32_fixed()" : "* Returns a hash function implementing the <a\n   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">32-bit murmur3\n   * algorithm, x86 variant</a> (little-endian variant), using a seed value of zero.\n   *\n   * <p>The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A).\n   *\n   * <p>This method is called {@code murmur3_32_fixed} because it fixes a bug in the {@code\n   * HashFunction} returned by the original {@code murmur3_32} method.\n   *\n   * @since 31.0",
  "com.google.common.collect.MinMaxPriorityQueue$Builder:create()" : "* Builds a new min-max priority queue using the previously specified options, and having no\n     * initial contents.",
  "com.google.common.collect.ImmutableBiMap$Builder:buildKeepingLast()" : "* Throws {@link UnsupportedOperationException}. This method is inherited from {@link\n     * ImmutableMap.Builder}, but it does not make sense for bimaps.\n     *\n     * @throws UnsupportedOperationException always\n     * @deprecated This method does not make sense for bimaps and should not be called.\n     * @since 31.1",
  "com.google.common.collect.Cut$BelowValue:<init>(java.lang.Comparable)" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:clear()" : null,
  "com.google.common.collect.AbstractNavigableMap:firstEntry()" : null,
  "com.google.common.graph.EndpointPair$Unordered:target()" : null,
  "com.google.common.math.LongMath:gcd(long,long)" : "* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==\n   * 0}.\n   *\n   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",
  "com.google.common.collect.Sets$SubSet:<init>(com.google.common.collect.ImmutableMap,int)" : null,
  "com.google.common.reflect.Parameter:getDeclaredAnnotation(java.lang.Class)" : "* @since 18.0",
  "com.google.common.io.MultiInputStream:skip(long)" : null,
  "com.google.common.collect.Streams:findLast(java.util.stream.IntStream)" : "* Returns the last element of the specified stream, or {@link OptionalInt#empty} if the stream is\n   * empty.\n   *\n   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This\n   * method's runtime will be between O(log n) and O(n), performing better on <a\n   * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n   * streams.\n   *\n   * @see IntStream#findFirst()\n   * @throws NullPointerException if the last element of the stream is null",
  "com.google.common.cache.LocalCache:usesAccessQueue()" : null,
  "com.google.common.io.BaseEncoding:separatingWriter(java.io.Writer,java.lang.String,int)" : null,
  "com.google.common.collect.ImmutableSortedAsList:subListUnchecked(int,int)" : null,
  "com.google.common.collect.EnumHashBiMap:forcePut(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.TableCollectors$ImmutableTableCollectorState:combine(com.google.common.collect.TableCollectors$ImmutableTableCollectorState,java.util.function.BinaryOperator)" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:omitPadding()" : null,
  "com.google.common.collect.ImmutableCollection:spliterator()" : null,
  "com.google.common.cache.CacheBuilder:expireAfterWrite(java.time.Duration)" : "* Specifies that each entry should be automatically removed from the cache once a fixed duration\n   * has elapsed after the entry's creation, or the most recent replacement of its value.\n   *\n   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)\n   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be\n   * useful in testing, or to disable caching temporarily without a code change.\n   *\n   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or\n   * write operations. Expired entries are cleaned up as part of the routine maintenance described\n   * in the class javadoc.\n   *\n   * @param duration the length of time after an entry is created that it should be automatically\n   *     removed\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code duration} is negative\n   * @throws IllegalStateException if {@link #expireAfterWrite} was already set\n   * @throws ArithmeticException for durations greater than +/- approximately 292 years\n   * @since 25.0 (but only since 33.3.0 in the Android <a\n   *     href=\"https://github.com/google/guava#guava-google-core-libraries-for-java\">flavor</a>)",
  "com.google.common.primitives.Chars:lastIndexOf(char[],char,int,int)" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:afterRanInterruptiblySuccess(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultiset:contains(java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.collect.FluentIterable:firstMatch(com.google.common.base.Predicate)" : "* Returns an {@link Optional} containing the first element in this fluent iterable that satisfies\n   * the given predicate, if such an element exists.\n   *\n   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}\n   * is matched in this fluent iterable, a {@link NullPointerException} will be thrown.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}.",
  "com.google.common.base.Joiner$MapJoiner:join(java.util.Map)" : "* Returns a string containing the string representation of each entry of {@code map}, using the\n     * previously configured separator and key-value separator.",
  "com.google.common.collect.Multimaps$MapMultimap:containsValue(java.lang.Object)" : null,
  "com.google.common.cache.AbstractLoadingCache:refresh(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:get(java.lang.Object)" : null,
  "com.google.common.base.Predicates$IsEqualToPredicate:equals(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableValueGraph:<init>(com.google.common.graph.ValueGraph)" : null,
  "com.google.common.base.CharMatcher$And:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:createAsMap()" : null,
  "com.google.common.net.InternetDomainName:hasParent()" : "Indicates whether this domain is composed of two or more parts.",
  "com.google.common.graph.StandardNetwork:checkedConnections(java.lang.Object)" : null,
  "com.google.common.reflect.Invokable:isAnnotationPresent(java.lang.Class)" : null,
  "com.google.common.util.concurrent.Platform:restoreInterruptIfIsInterruptedException(java.lang.Throwable)" : null,
  "com.google.common.collect.SortedIterables:hasSameComparator(java.util.Comparator,java.lang.Iterable)" : "* Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent to\n   * {@code comparator}.",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:self()" : null,
  "com.google.common.cache.CacheBuilderSpec:parse(java.lang.String)" : "* Creates a CacheBuilderSpec from a string.\n   *\n   * @param cacheBuilderSpecification the string form",
  "com.google.common.collect.AbstractTable:equals(java.lang.Object)" : null,
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(java.nio.ByteBuffer)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:getAndIncrement(java.lang.Object)" : "* Increments by one the value currently associated with {@code key}, and returns the old value.",
  "com.google.common.util.concurrent.AbstractService$3:toString()" : null,
  "com.google.common.reflect.TypeResolver:invariantly(java.lang.reflect.Type)" : "* Returns a resolver that resolves types \"invariantly\".\n   *\n   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code\n   * <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of\n   * {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into\n   * {@code ArrayList<?>::set}.\n   *\n   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code\n   * <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.",
  "com.google.common.collect.Streams:zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction)" : "* Returns a stream in which each element is the result of passing the corresponding element of\n   * each of {@code streamA} and {@code streamB} to {@code function}.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * Streams.zip(\n   *   Stream.of(\"foo1\", \"foo2\", \"foo3\"),\n   *   Stream.of(\"bar1\", \"bar2\"),\n   *   (arg1, arg2) -> arg1 + \":\" + arg2)\n   * }\n   *\n   * <p>will return {@code Stream.of(\"foo1:bar1\", \"foo2:bar2\")}.\n   *\n   * <p>The resulting stream will only be as long as the shorter of the two input streams; if one\n   * stream is longer, its extra elements will be ignored.\n   *\n   * <p>Note that if you are calling {@link Stream#forEach} on the resulting stream, you might want\n   * to consider using {@link #forEachPair} instead of this method.\n   *\n   * <p><b>Performance note:</b> The resulting stream is not <a\n   * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>.\n   * This may harm parallel performance.",
  "com.google.common.hash.HashCode$IntHashCode:equalsSameBits(com.google.common.hash.HashCode)" : null,
  "com.google.common.collect.CompactLinkedHashMap:init(int)" : null,
  "com.google.common.base.Predicates$NotPredicate:toString()" : null,
  "com.google.common.cache.LocalCache$StrongAccessEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.cache.LocalCache$Segment:enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause)" : null,
  "com.google.common.reflect.Types$GenericArrayTypeImpl:toString()" : null,
  "com.google.common.hash.Funnels$StringCharsetFunnel:writeReplace()" : null,
  "com.google.common.collect.Maps$UnmodifiableBiMap:compute(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.graph.StandardNetwork:containsNode(java.lang.Object)" : null,
  "com.google.common.primitives.Ints$IntConverter:doBackward(java.lang.Integer)" : null,
  "com.google.common.collect.Multisets$EntrySet:remove(java.lang.Object)" : null,
  "com.google.common.graph.ElementOrder:unordered()" : "Returns an instance which specifies that no ordering is guaranteed.",
  "com.google.common.collect.Synchronized$SynchronizedListMultimap:delegate()" : null,
  "com.google.common.collect.ImmutableMultimap$EntryCollection:isPartialView()" : null,
  "com.google.common.util.concurrent.AbstractService$IsStartableGuard:isSatisfied()" : null,
  "com.google.common.reflect.AbstractInvocationHandler:equals(java.lang.Object)" : "* By default delegates to {@link Object#equals} so instances are only equal if they are\n   * identical. {@code proxy.equals(argument)} returns true if:\n   *\n   * <ul>\n   *   <li>{@code proxy} and {@code argument} are of the same type\n   *   <li>and this method returns true for the {@link InvocationHandler} of {@code argument}\n   * </ul>\n   *\n   * <p>Subclasses can override this method to provide custom equality.",
  "com.google.common.graph.ImmutableValueGraph:adjacentNodes(java.lang.Object)" : null,
  "com.google.common.base.Converter:convert(java.lang.Object)" : "* Returns a representation of {@code a} as an instance of type {@code B}.\n   *\n   * @return the converted value; is null <i>if and only if</i> {@code a} is null",
  "com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.util.concurrent.MoreExecutors:newThread(java.lang.String,java.lang.Runnable)" : "* Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name} unless\n   * changing the name is forbidden by the security manager.",
  "com.google.common.collect.Serialization$FieldSetter:set(java.lang.Object,int)" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardCeilingKey(java.lang.Object)" : "* A sensible definition of {@link #ceilingKey} in terms of {@code ceilingEntry}. If you override\n   * {@code ceilingEntry}, you may wish to override {@code ceilingKey} to forward to this\n   * implementation.",
  "com.google.common.base.MoreObjects$ToStringHelper:isEmpty(java.lang.Object)" : null,
  "com.google.common.collect.SortedLists:binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)" : "* Searches the specified list for the specified object using the binary search algorithm. The\n   * list must be sorted into ascending order according to the specified comparator (as by the\n   * {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to\n   * making this call. If it is not sorted, the results are undefined.\n   *\n   * <p>If there are elements in the list which compare as equal to the key, the choice of {@link\n   * KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the\n   * key, the choice of {@link KeyAbsentBehavior} decides which index is returned.\n   *\n   * <p>This method runs in log(n) time on random-access lists, which offer near-constant-time\n   * access to each list element.\n   *\n   * @param list the list to be searched.\n   * @param key the value to be searched for.\n   * @param comparator the comparator by which the list is ordered.\n   * @param presentBehavior the specification for what to do if at least one element of the list\n   *     compares as equal to the key.\n   * @param absentBehavior the specification for what to do if no elements of the list compare as\n   *     equal to the key.\n   * @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list;\n   *     otherwise the index determined by the {@code KeyAbsentBehavior}.",
  "com.google.common.io.Java8Compatibility:limit(java.nio.Buffer,int)" : null,
  "com.google.common.base.CommonPattern:compile(java.lang.String)" : null,
  "com.google.common.collect.Streams:stream(java.util.OptionalInt)" : "* If a value is present in {@code optional}, returns a stream containing only that element,\n   * otherwise returns an empty stream.\n   *\n   * <p><b>Java 9 users:</b> use {@code optional.stream()} instead.",
  "com.google.common.hash.Hashing:hmacSha1(java.security.Key)" : "* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the\n   * SHA-1 (160 hash bits) hash function and the given secret key.\n   *\n   * @param key the secret key\n   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC\n   * @since 20.0",
  "com.google.common.graph.Traverser$Traversal$2:visitNext(java.util.Deque)" : "* Visits the next node from the top iterator of {@code horizon} and returns the visited node.\n     * Null is returned to indicate reaching the end of the top iterator.\n     *\n     * <p>For example, if horizon is {@code [[a, b], [c, d], [e]]}, {@code visitNext()} will return\n     * {@code [a, b, null, c, d, null, e, null]} sequentially, encoding the topological structure.\n     * (Note, however, that the callers of {@code visitNext()} often insert additional iterators\n     * into {@code horizon} between calls to {@code visitNext()}. This causes them to receive\n     * additional values interleaved with those shown above.)",
  "com.google.common.eventbus.EventBus:toString()" : null,
  "com.google.common.base.Predicates$ContainsPatternFromStringPredicate:<init>(java.lang.String)" : null,
  "com.google.common.collect.Multimaps$CustomListMultimap:<init>(java.util.Map,com.google.common.base.Supplier)" : null,
  "com.google.common.collect.ForwardingMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.RegularContiguousSet:last()" : null,
  "com.google.common.collect.MapMakerInternalMap:entrySet()" : null,
  "com.google.common.collect.Multisets:spliteratorImpl(com.google.common.collect.Multiset)" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSet:add(com.google.common.collect.Range)" : null,
  "com.google.common.base.MoreObjects:toStringHelper(java.lang.Object)" : "* Creates an instance of {@link ToStringHelper}.\n   *\n   * <p>This is helpful for implementing {@link Object#toString()}. Specification by example:\n   *\n   * {@snippet :\n   * // Returns \"ClassName{}\"\n   * MoreObjects.toStringHelper(this)\n   *     .toString();\n   *\n   * // Returns \"ClassName{x=1}\"\n   * MoreObjects.toStringHelper(this)\n   *     .add(\"x\", 1)\n   *     .toString();\n   *\n   * // Returns \"MyObject{x=1}\"\n   * MoreObjects.toStringHelper(\"MyObject\")\n   *     .add(\"x\", 1)\n   *     .toString();\n   *\n   * // Returns \"ClassName{x=1, y=foo}\"\n   * MoreObjects.toStringHelper(this)\n   *     .add(\"x\", 1)\n   *     .add(\"y\", \"foo\")\n   *     .toString();\n   *\n   * // Returns \"ClassName{x=1}\"\n   * MoreObjects.toStringHelper(this)\n   *     .omitNullValues()\n   *     .add(\"x\", 1)\n   *     .add(\"y\", null)\n   *     .toString();\n   * }\n   *\n   * <p>Note that in GWT, class names are often obfuscated.\n   *\n   * @param self the object to generate the string for (typically {@code this}), used only for its\n   *     class name\n   * @since 18.0 (since 2.0 as {@code Objects.toStringHelper()}).",
  "com.google.common.util.concurrent.ForwardingExecutorService:shutdown()" : null,
  "com.google.common.primitives.Bytes$ByteArrayAsList:get(int)" : null,
  "com.google.common.cache.CacheLoader$InvalidCacheLoadException:<init>(java.lang.String)" : null,
  "com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper:compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeUTF(java.lang.String)" : null,
  "com.google.common.collect.TreeRangeSet:span()" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceListener:stopping(com.google.common.util.concurrent.Service$State)" : null,
  "com.google.common.util.concurrent.AtomicDouble:getAndSet(double)" : "* Atomically sets to the given value and returns the old value.\n   *\n   * @param newValue the new value\n   * @return the previous value",
  "com.google.common.graph.EndpointPair$Ordered:toString()" : null,
  "com.google.common.hash.Funnels$SinkAsStream:write(int)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:writeReplace()" : null,
  "com.google.common.collect.AbstractListMultimap:wrapCollection(java.lang.Object,java.util.Collection)" : null,
  "com.google.common.collect.StandardTable:isEmpty()" : null,
  "com.google.common.graph.AbstractGraph:equals(java.lang.Object)" : null,
  "com.google.common.collect.MultimapBuilder:build(com.google.common.collect.Multimap)" : "* Returns a {@code Multimap} with the specified implementation, initialized with the entries of\n   * {@code multimap}.",
  "com.google.common.collect.AbstractIterator:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.RegularImmutableMap$Values$SerializedForm:readResolve()" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:incidentEdges()" : null,
  "com.google.common.collect.SingletonImmutableSet:asList()" : null,
  "com.google.common.collect.ImmutableEnumMap:size()" : null,
  "com.google.common.hash.AbstractStreamingHasher:putInt(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:higher(java.lang.Object)" : null,
  "com.google.common.collect.SortedMultisets$ElementSet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.net.InetAddresses:decrement(java.net.InetAddress)" : "* Returns a new InetAddress that is one less than the passed in address. This method works for\n   * both IPv4 and IPv6 addresses.\n   *\n   * @param address the InetAddress to decrement\n   * @return a new InetAddress that is one less than the passed in address\n   * @throws IllegalArgumentException if InetAddress is at the beginning of its range\n   * @since 18.0",
  "com.google.common.primitives.ImmutableLongArray$AsList:toString()" : null,
  "com.google.common.collect.ImmutableList$ReverseImmutableList:subList(int,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:size()" : null,
  "com.google.common.math.StatsAccumulator:addAll(com.google.common.math.Stats)" : "* Adds the given statistics to the dataset, as if the individual values used to compute the\n   * statistics had been added directly.",
  "com.google.common.hash.AbstractHasher:putInt(int)" : null,
  "com.google.common.collect.ImmutableBiMap:of()" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)" : null,
  "com.google.common.base.Functions$FunctionComposition:apply(java.lang.Object)" : null,
  "com.google.common.collect.TopKSelector:swap(int,int)" : null,
  "com.google.common.reflect.TypeToken$InterfaceSet:rawTypes()" : null,
  "com.google.common.reflect.TypeResolver$WildcardCapturer:forTypeVariable(java.lang.reflect.TypeVariable)" : null,
  "com.google.common.collect.ImmutableSortedMap:ceilingKey(java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:remove(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Segment:removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:getKey()" : null,
  "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier:get()" : null,
  "com.google.common.util.concurrent.AbstractCatchingFuture:run()" : null,
  "com.google.common.collect.ImmutableMultimap:removeAll(java.lang.Object)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.MinMaxPriorityQueue$Builder:<init>(java.util.Comparator)" : null,
  "com.google.common.collect.Interners:newWeakInterner()" : "* Returns a new thread-safe interner which retains a weak reference to each instance it has\n   * interned, and so does not prevent these instances from being garbage-collected. This most\n   * likely does not perform as well as {@link #newStrongInterner}, but is the best alternative when\n   * the memory usage of that implementation is unacceptable.",
  "com.google.common.collect.UnmodifiableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.Maps:toMap(java.util.Iterator,com.google.common.base.Function)" : "* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value\n   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of\n   * the first appearance of each key in {@code keys}.\n   *\n   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code\n   * valueFunction} will be applied to more than one instance of that key and, if it is, which\n   * result will be mapped to that key in the returned map.\n   *\n   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code\n   *     valueFunction} produces {@code null} for any key\n   * @since 14.0",
  "com.google.common.collect.Sets$DescendingSet:higher(java.lang.Object)" : null,
  "com.google.common.io.AppendableWriter:write(java.lang.String)" : null,
  "com.google.common.util.concurrent.ListenerCallQueue:addListener(java.lang.Object,java.util.concurrent.Executor)" : "* Adds a listener that will be called using the given executor when events are later {@link\n   * #enqueue enqueued} and {@link #dispatch dispatched}.",
  "com.google.common.collect.AbstractMultimap:toString()" : "* Returns a string representation of the multimap, generated by calling {@code toString} on the\n   * map returned by {@link Multimap#asMap}.\n   *\n   * @return a string representation of the multimap",
  "com.google.common.collect.ForwardingQueue:element()" : null,
  "com.google.common.math.LongMath:checkedAdd(long,long)" : "* Returns the sum of {@code a} and {@code b}, provided it does not overflow.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link\n   * Math#addExact(long, long)} instead.\n   *\n   * @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic",
  "com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int,int)" : "* Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is\n   * currently {@code expectedOldCount}. If {@code element} does not appear in the multiset exactly\n   * {@code expectedOldCount} times, no changes will be made.\n   *\n   * @return {@code true} if the change was successful. This usually indicates that the multiset has\n   *     been modified, but not always: in the case that {@code expectedOldCount == newCount}, the\n   *     method will return {@code true} if the condition was met.\n   * @throws IllegalArgumentException if {@code expectedOldCount} or {@code newCount} is negative",
  "com.google.common.collect.ArrayTable$Column:getValue(int)" : null,
  "com.google.common.collect.LinkedListMultimap:asMap()" : null,
  "com.google.common.base.Functions$ConstantFunction:toString()" : null,
  "com.google.common.collect.ImmutableSet$Builder:<init>(boolean)" : null,
  "com.google.common.graph.EndpointPairIterator:advance()" : "* Called after {@link #successorIterator} is exhausted. Advances {@link #node} to the next node\n   * and updates {@link #successorIterator} to iterate through the successors of {@link #node}.",
  "com.google.common.base.Platform$JdkPatternCompiler:compile(java.lang.String)" : null,
  "com.google.common.graph.DirectedNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)" : null,
  "com.google.common.collect.HashBasedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.FilteredKeyMultimap:entryIterator()" : null,
  "com.google.common.collect.ForwardingSortedMap:comparator()" : null,
  "com.google.common.collect.Multimaps$CustomSortedSetMultimap:createKeySet()" : null,
  "com.google.common.graph.ImmutableGraph$Builder:build()" : "* Returns a newly-created {@code ImmutableGraph} based on the contents of this {@code Builder}.",
  "com.google.common.base.CharMatcher:countIn(java.lang.CharSequence)" : "* Returns the number of matching {@code char}s found in a character sequence.\n   *\n   * <p>Counts 2 per supplementary character, such as for {@link #whitespace}().{@link #negate}().",
  "com.google.common.collect.ImmutableMultiset$Builder:add(java.lang.Object)" : "* Adds {@code element} to the {@code ImmutableMultiset}.\n     *\n     * @param element the element to add\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code element} is null",
  "com.google.common.primitives.UnsignedLongs:compare(long,long)" : "* Compares the two specified {@code long} values, treating them as unsigned values between {@code\n   * 0} and {@code 2^64 - 1} inclusive.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the\n   * equivalent {@link Long#compareUnsigned(long, long)} method instead.\n   *\n   * @param a the first unsigned {@code long} to compare\n   * @param b the second unsigned {@code long} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.collect.Interners$InternerBuilder:build()" : null,
  "com.google.common.primitives.ImmutableIntArray$Builder:addAll(com.google.common.primitives.ImmutableIntArray)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableIntArray} will contain.",
  "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int)" : "* Creates a {@link BloomFilter} with the expected number of insertions and a default expected\n   * false positive probability of 3%.\n   *\n   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,\n   * will result in its saturation, and a sharp deterioration of its false positive probability.\n   *\n   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}\n   * is.\n   *\n   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n   * also relies on object identity of funnels.\n   *\n   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n   * @param expectedInsertions the number of expected insertions to the constructed {@code\n   *     BloomFilter}; must be positive\n   * @return a {@code BloomFilter}",
  "com.google.common.base.Ascii:toUpperCase(java.lang.CharSequence)" : "* Returns a copy of the input character sequence in which all {@linkplain #isLowerCase(char)\n   * lowercase ASCII characters} have been converted to uppercase. All other characters are copied\n   * without modification.\n   *\n   * @since 14.0",
  "com.google.common.reflect.ClassPath$LocationInfo:scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)" : null,
  "com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken)" : null,
  "com.google.common.primitives.UnsignedLongs:sort(long[])" : "* Sorts the array, treating its elements as unsigned 64-bit integers.\n   *\n   * @since 23.1",
  "com.google.common.cache.CacheBuilder:maximumWeight(long)" : "* Specifies the maximum weight of entries the cache may contain. Weight is determined using the\n   * {@link Weigher} specified with {@link #weigher}, and use of this method requires a\n   * corresponding call to {@link #weigher} prior to calling {@link #build}.\n   *\n   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in\n   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each\n   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately\n   * {@code maximumWeight / concurrencyLevel}.\n   *\n   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.\n   * For example, the cache may evict an entry because it hasn't been used recently or very often.\n   *\n   * <p>If {@code maximumWeight} is zero, elements will be evicted immediately after being loaded\n   * into cache. This can be useful in testing, or to disable caching temporarily.\n   *\n   * <p>Note that weight is only used to determine whether the cache is over capacity; it has no\n   * effect on selecting which entry should be evicted next.\n   *\n   * <p>This feature cannot be used in conjunction with {@link #maximumSize}.\n   *\n   * @param maximumWeight the maximum total weight of entries the cache may contain\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code maximumWeight} is negative\n   * @throws IllegalStateException if a maximum weight or size was already set\n   * @since 11.0",
  "com.google.common.collect.FilteredMultimapValues:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.ForwardingList:hashCode()" : null,
  "com.google.common.util.concurrent.AbstractService:notifyStarted()" : "* Implementing classes should invoke this method once their service has started. It will cause\n   * the service to transition from {@link State#STARTING} to {@link State#RUNNING}.\n   *\n   * @throws IllegalStateException if the service is not {@link State#STARTING}.",
  "com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultiset:of(java.lang.Object,java.lang.Object)" : "* Returns an immutable multiset containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null\n   * @since 6.0 (source-compatible since 2.0)",
  "com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,java.lang.Object)" : "* A sensible definition of {@link #subSet(Object, Object)} in terms of the {@link #subSet(Object,\n   * boolean, Object, boolean)} method. If you override {@link #subSet(Object, boolean, Object,\n   * boolean)}, you may wish to override {@link #subSet(Object, Object)} to forward to this\n   * implementation.",
  "com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event)" : "* Enqueues an event to be run on currently known listeners.\n   *\n   * <p>The {@code toString} method of the Event itself will be used to describe the event in the\n   * case of an error.\n   *\n   * @param event the callback to execute on {@link #dispatch}",
  "com.google.common.collect.Serialization:writeMultimap(com.google.common.collect.Multimap,java.io.ObjectOutputStream)" : "* Stores the contents of a multimap in an output stream, as part of serialization. It does not\n   * support concurrent multimaps whose content may change while the method is running. The {@link\n   * Multimap#asMap} view determines the ordering in which data is written to the stream.\n   *\n   * <p>The serialized output consists of the number of distinct keys, and then for each distinct\n   * key: the key, the number of values for that key, and the key's values.",
  "com.google.common.util.concurrent.ForwardingCondition:await()" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardLowerEntry(java.lang.Object)" : "* A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link\n   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code\n   * lowerEntry} to forward to this implementation.",
  "com.google.common.io.Closer:close()" : "* Closes all {@code Closeable} instances that have been added to this {@code Closer}. If an\n   * exception was thrown in the try block and passed to one of the {@code exceptionThrown} methods,\n   * any exceptions thrown when attempting to close a closeable will be suppressed. Otherwise, the\n   * <i>first</i> exception to be thrown from an attempt to close a closeable will be thrown and any\n   * additional exceptions that are thrown after that will be suppressed.",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerKey(java.lang.Object)" : null,
  "com.google.common.util.concurrent.RateLimiter:getRate()" : "* Returns the stable rate (as {@code permits per seconds}) with which this {@code RateLimiter} is\n   * configured with. The initial value of this is the same as the {@code permitsPerSecond} argument\n   * passed in the factory method that produced this {@code RateLimiter}, and it is only updated\n   * after invocations to {@linkplain #setRate}.",
  "com.google.common.collect.TreeRangeSet:contains(java.lang.Comparable)" : null,
  "com.google.common.util.concurrent.ServiceManager$FailedService:<init>(com.google.common.util.concurrent.Service)" : null,
  "com.google.common.collect.ImmutableBiMap:values()" : "* Returns an immutable set of the values in this map, in the same order they appear in {@link\n   * #entrySet}.",
  "com.google.common.util.concurrent.RateLimiter:tryAcquire()" : "* Acquires a permit from this {@link RateLimiter} if it can be acquired immediately without\n   * delay.\n   *\n   * <p>This method is equivalent to {@code tryAcquire(1)}.\n   *\n   * @return {@code true} if the permit was acquired, {@code false} otherwise\n   * @since 14.0",
  "com.google.common.primitives.Ints:constrainToRange(int,int,int)" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:hashCode()" : null,
  "com.google.common.base.Absent:or(java.lang.Object)" : null,
  "com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler)" : "* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.\n   *\n   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut\n   *     down the executor after the last event has been posted to this event bus.\n   * @param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers.\n   *     See {@link SubscriberExceptionHandler} for more information.\n   * @since 16.0",
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putLong(long)" : null,
  "com.google.common.util.concurrent.FuturesGetChecked:checkExceptionClassValidity(java.lang.Class)" : null,
  "com.google.common.collect.CompactHashMap:indexOf(java.lang.Object)" : null,
  "com.google.common.util.concurrent.FakeTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedListValues()" : "* Uses a {@link LinkedList} to store value collections.\n     *\n     * <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently\n     * outperform {@code LinkedList} except in certain rare and specific situations. Unless you have\n     * spent a lot of time benchmarking your specific needs, use one of those instead. (However, we\n     * do not currently offer a {@link Multimap} implementation based on {@link\n     * java.util.ArrayDeque}.)",
  "com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(java.lang.Iterable)" : null,
  "com.google.common.collect.Lists$RandomAccessPartition:<init>(java.util.List,int)" : null,
  "com.google.common.io.BaseEncoding:decodingSource(com.google.common.io.CharSource)" : "* Returns a {@code ByteSource} that reads base-encoded bytes from the specified {@code\n   * CharSource}.",
  "com.google.common.collect.ImmutableMap:hashCode()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorKey(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingCollection:standardContainsAll(java.util.Collection)" : "* A sensible definition of {@link #containsAll} in terms of {@link #contains} . If you override\n   * {@link #contains}, you may wish to override {@link #containsAll} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.ForwardingSortedMultiset:elementSet()" : null,
  "com.google.common.collect.ComparisonChain$1:compareFalseFirst(boolean,boolean)" : "* Compares two {@code boolean} values, considering {@code false} to be less than {@code true},\n   * <i>if</i> the result of this comparison chain has not already been determined.\n   *\n   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#falseFirst()}. For example:\n   *\n   * <pre>\n   * Comparator.comparing(Foo::isBar, {@link Booleans#falseFirst()})\n   * </pre>\n   *\n   * @since 12.0 (present as {@code compare} since 2.0)",
  "com.google.common.io.Files:copy(java.io.File,java.io.File)" : "* Copies all the bytes from one file to another.\n   *\n   * <p>Copying is not an atomic operation - in the case of an I/O error, power loss, process\n   * termination, or other problems, {@code to} may not be a complete copy of {@code from}. If you\n   * need to guard against those conditions, you should employ other file-level synchronization.\n   *\n   * <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten\n   * with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i>\n   * file, the contents of that file will be deleted.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n   * java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}.\n   *\n   * @param from the source file\n   * @param to the destination file\n   * @throws IOException if an I/O error occurs\n   * @throws IllegalArgumentException if {@code from.equals(to)}",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:<init>(java.lang.Object,int)" : null,
  "com.google.common.collect.Maps$TransformedEntriesSortedMap:fromMap()" : null,
  "com.google.common.collect.TopKSelector:partition(int,int,int)" : "* Partitions the contents of buffer in the range [left, right] around the pivot element\n   * previously stored in buffer[pivotValue]. Returns the new index of the pivot element,\n   * pivotNewIndex, so that everything in [left, pivotNewIndex] is ≤ pivotValue and everything in\n   * (pivotNewIndex, right] is greater than pivotValue.",
  "com.google.common.hash.HashCode:toString()" : "* Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned\n   * hexadecimal number in lower case.\n   *\n   * <p>Note that if the output is considered to be a single hexadecimal number, whether this string\n   * is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be\n   * surprising for implementations of {@code HashCode} that represent the number in big-endian\n   * since everything else in the hashing API uniformly treats multibyte values as little-endian.\n   *\n   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.",
  "com.google.common.io.ByteSource:sizeIfKnown()" : "* Returns the size of this source in bytes, if the size can be easily determined without actually\n   * opening the data stream.\n   *\n   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a file,\n   * may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method\n   * will return a different number of bytes than would be returned by reading all of the bytes (for\n   * example, some special files may return a size of 0 despite actually having content when read).\n   *\n   * <p>Additionally, for mutable sources such as files, a subsequent read may return a different\n   * number of bytes if the contents are changed.\n   *\n   * @since 19.0",
  "com.google.common.collect.TreeRangeMap:equals(java.lang.Object)" : null,
  "com.google.common.collect.MutableClassToInstanceMap:cast(java.lang.Class,java.lang.Object)" : null,
  "com.google.common.reflect.Reflection:getPackageName(java.lang.Class)" : "* Returns the package name of {@code clazz} according to the Java Language Specification (section\n   * 6.7). Unlike {@link Class#getPackage}, this method only parses the class name, without\n   * attempting to define the {@link Package} and hence load files.",
  "com.google.common.hash.HashingOutputStream:write(int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:wrap(java.util.NavigableSet)" : null,
  "com.google.common.math.DoubleMath:roundToLong(double,java.math.RoundingMode)" : "* Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding\n   * mode, if possible.\n   *\n   * @throws ArithmeticException if\n   *     <ul>\n   *       <li>{@code x} is infinite or NaN\n   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding\n   *           mode, is either less than {@code Long.MIN_VALUE} or greater than {@code\n   *           Long.MAX_VALUE}\n   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link\n   *           RoundingMode#UNNECESSARY}\n   *     </ul>",
  "com.google.common.collect.MapMakerInternalMap$Segment:removeTableEntryForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : "Unsafely removes the given entry from this segment's hash table.",
  "com.google.common.util.concurrent.AbstractExecutionThreadService:serviceName()" : "* Returns the name of this service. {@link AbstractExecutionThreadService} may include the name\n   * in debugging output.\n   *\n   * <p>Subclasses may override this method.\n   *\n   * @since 14.0 (present in 10.0 as getServiceName)",
  "com.google.common.collect.EnumMultiset:clear()" : null,
  "com.google.common.collect.FilteredEntrySetMultimap:createEntries()" : null,
  "com.google.common.math.Stats:of(java.lang.Iterable)" : "* Returns statistics over a dataset containing the given values.\n   *\n   * @param values a series of values, which will be converted to {@code double} values (this may\n   *     cause loss of precision)",
  "com.google.common.collect.Tables$UnmodifiableTable:rowMap()" : null,
  "com.google.common.net.MediaType:createTextType(java.lang.String)" : "* Creates a media type with the \"text\" type and the given subtype.\n   *\n   * @throws IllegalArgumentException if subtype is invalid",
  "com.google.common.collect.HashBasedTable:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.Collections2$OrderedPermutationCollection:<init>(java.lang.Iterable,java.util.Comparator)" : null,
  "com.google.common.collect.CompactHashMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.ForwardingMapEntry:standardHashCode()" : "* A sensible definition of {@link #hashCode()} in terms of {@link #getKey()} and {@link\n   * #getValue()}. If you override either of these methods, you may wish to override {@link\n   * #hashCode()} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class)" : "* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n   * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}.\n   *\n   * @param throwable the Throwable to possibly propagate\n   * @param declaredType1 any checked exception type declared by the calling method\n   * @param declaredType2 any other checked exception type declared by the calling method\n   * @deprecated Use a combination of two calls to {@link #throwIfInstanceOf} and one call to {@link\n   *     #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code\n   *     null}.",
  "com.google.common.collect.Sets$DescendingSet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.util.concurrent.AbstractListeningExecutorService:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long)" : "* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link\n   * BloomFilter} with false positive probability 3%.\n   *\n   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the\n   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive\n   * probability.\n   *\n   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}\n   * is.\n   *\n   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n   * also relies on object identity of funnels.\n   *\n   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n   * @param expectedInsertions the number of expected insertions to the constructed {@code\n   *     BloomFilter}; must be positive\n   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements\n   * @since 23.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.TreeMultiset$AvlNode:toString()" : null,
  "com.google.common.util.concurrent.ClosingFuture:catchingAsyncMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultiset:add(java.lang.Object,int)" : null,
  "com.google.common.collect.LinkedListMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the number of distinct keys, and then for each distinct key: the first key, the\n   *     number of values for that key, and the key's values, followed by successive keys and values\n   *     from the entries() ordering",
  "com.google.common.collect.MoreCollectors$ToOptionalState:add(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMapValues:iterator()" : null,
  "com.google.common.primitives.UnsignedInts:sort(int[])" : "* Sorts the array, treating its elements as unsigned 32-bit integers.\n   *\n   * @since 23.1",
  "com.google.common.collect.Tables$1:<init>()" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:pollFirstEntry()" : null,
  "com.google.common.graph.Traverser:breadthFirst(java.lang.Object)" : "* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in\n   * the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then\n   * depth 1, then 2, and so on.\n   *\n   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in\n   * the order {@code abcdef} (assuming successors are returned in alphabetical order).\n   *\n   * {@snippet :\n   * b ---- a ---- d\n   * |      |\n   * |      |\n   * e ---- c ---- f\n   * }\n   *\n   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change\n   * while iteration is in progress.\n   *\n   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will\n   * compute its next element on the fly. It is thus possible to limit the traversal to a certain\n   * number of nodes as follows:\n   *\n   * {@snippet :\n   * Iterables.limit(Traverser.forGraph(graph).breadthFirst(node), maxNumberOfNodes);\n   * }\n   *\n   * <p>See <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">Wikipedia</a> for more\n   * info.\n   *\n   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",
  "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createEntrySet()" : null,
  "com.google.common.io.ByteStreams:newDataOutput(java.io.ByteArrayOutputStream)" : "* Returns a new {@link ByteArrayDataOutput} instance which writes to the given {@code\n   * ByteArrayOutputStream}. The given output stream is not reset before being written to by the\n   * returned {@code ByteArrayDataOutput} and new data will be appended to any existing content.\n   *\n   * <p>Note that if the given output stream was not empty or is modified after the {@code\n   * ByteArrayDataOutput} is created, the contract for {@link ByteArrayDataOutput#toByteArray} will\n   * not be honored (the bytes returned in the byte array may not be exactly what was written via\n   * calls to {@code ByteArrayDataOutput}).\n   *\n   * @since 17.0",
  "com.google.common.collect.ForwardingMultiset:standardContains(java.lang.Object)" : "* A sensible definition of {@link #contains} in terms of {@link #count}. If you override {@link\n   * #count}, you may wish to override {@link #contains} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ImmutableMultiset$EntrySet:writeReplace()" : null,
  "com.google.common.collect.ImmutableEnumSet:isEmpty()" : null,
  "com.google.common.io.CharSource$EmptyCharSource:<init>()" : null,
  "com.google.common.collect.ImmutableTable:rowMap()" : "* {@inheritDoc}\n   *\n   * <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances\n   * as well.",
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.Collections2$PermutationCollection:toString()" : null,
  "com.google.common.math.StatsAccumulator:calculateNewMeanNonFinite(double,double)" : "* Calculates the new value for the accumulated mean when a value is added, in the case where at\n   * least one of the previous mean and the value is non-finite.",
  "com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:contains(double)" : "* Returns {@code true} if {@code target} is present at any index in this array. Values are\n   * compared as if by {@link Double#equals}. Equivalent to {@code asList().contains(target)}.",
  "com.google.common.collect.MinMaxPriorityQueue:addAll(java.util.Collection)" : null,
  "com.google.common.cache.LocalCache$EntryFactory$6:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* Creates a new entry.\n     *\n     * @param segment to create the entry for\n     * @param key of the entry\n     * @param hash of the key\n     * @param next entry in the same bucket",
  "com.google.common.base.CharMatcher:showCharacter(char)" : "* Returns the Java Unicode escape sequence for the given {@code char}, in the form \"\\u12AB\" where\n   * \"12AB\" is the four hexadecimal digits representing the 16-bit code unit.",
  "com.google.common.collect.ImmutableMap$Builder:orderEntriesByValue(java.util.Comparator)" : "* Configures this {@code Builder} to order entries by value according to the specified\n     * comparator.\n     *\n     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,\n     * the entry that was inserted first will be first in the built map's iteration order.\n     *\n     * @throws IllegalStateException if this method was already called\n     * @since 19.0",
  "com.google.common.collect.ArrayTable$ArrayMap:isEmpty()" : null,
  "com.google.common.collect.ImmutableSetMultimap:copyOf(java.lang.Iterable)" : "* Returns an immutable multimap containing the specified entries. The returned multimap iterates\n   * over keys in the order they were first encountered in the input, and the values for each key\n   * are iterated in the order they were encountered. If two values for the same key are {@linkplain\n   * Object#equals equal}, the first value encountered is used.\n   *\n   * @throws NullPointerException if any key, value, or entry is null\n   * @since 19.0",
  "com.google.common.hash.FarmHashFingerprint64:hashBytes(byte[],int,int)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.Multimaps$CustomSetMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the factory and the backing map",
  "com.google.common.collect.Iterables$UnmodifiableIterable:forEach(java.util.function.Consumer)" : null,
  "com.google.common.cache.AbstractCache:getAllPresent(java.lang.Iterable)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultiset:count(java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap:clear()" : null,
  "com.google.common.collect.ForwardingCollection:delegate()" : null,
  "com.google.common.primitives.Longs:reverse(long[],int,int)" : "* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive. This is equivalent to {@code\n   * Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))}, but is likely to be more\n   * efficient.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 23.1",
  "com.google.common.math.LongMath$MillerRabinTester:test(long,long)" : null,
  "com.google.common.collect.ForwardingMultiset:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:run()" : null,
  "com.google.common.collect.Lists$TwoPlusArrayList:<init>(java.lang.Object,java.lang.Object,java.lang.Object[])" : null,
  "com.google.common.collect.EmptyContiguousSet:first()" : null,
  "com.google.common.graph.ForwardingGraph:allowsSelfLoops()" : null,
  "com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)" : null,
  "com.google.common.collect.ImmutableSortedMap:descendingMap()" : null,
  "com.google.common.base.Predicates$ContainsPatternPredicate:hashCode()" : null,
  "com.google.common.collect.EnumHashBiMap:keySet()" : null,
  "com.google.common.cache.LocalCache$AccessQueue:offer(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.primitives.Chars:rotate(char[],int,int,int)" : "* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code\n   * toIndex} exclusive. This is equivalent to {@code\n   * Collections.rotate(Chars.asList(array).subList(fromIndex, toIndex), distance)}, but is\n   * considerably faster and avoids allocations and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 32.0.0",
  "com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,java.time.Duration,java.util.concurrent.ScheduledExecutorService)" : "* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.\n   *\n   * @throws RejectedExecutionException if the task cannot be scheduled for execution\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.AbstractMapBasedMultimap:wrapCollection(java.lang.Object,java.util.Collection)" : "* Generates a decorated collection that remains consistent with the values in the multimap for\n   * the provided key. Changes to the multimap may alter the returned collection, and vice versa.",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createValues()" : null,
  "com.google.common.collect.ImmutableSortedSet:writeReplace()" : null,
  "com.google.common.collect.ExplicitOrdering:toString()" : null,
  "com.google.common.collect.StandardTable$RowMap$EntrySet:size()" : null,
  "com.google.common.collect.ImmutableSetMultimap:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSetMultimap}\n   * whose keys and values are the result of applying the provided mapping functions to the input\n   * elements.\n   *\n   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link\n   * java.util.stream} Javadoc), that order is preserved, but entries are <a\n   * href=\"ImmutableMultimap.html#iteration\">grouped by key</a>.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n   *     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n   *         .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1)));\n   *\n   * // is equivalent to\n   *\n   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n   *     new ImmutableSetMultimap.Builder<Character, String>()\n   *         .put('b', \"anana\")\n   *         .putAll('a', \"pple\", \"sparagus\")\n   *         .putAll('c', \"arrot\", \"herry\")\n   *         .build();\n   * }\n   *\n   * @since 21.0",
  "com.google.common.collect.Sets$FilteredSortedSet:<init>(java.util.SortedSet,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:hashCode()" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:get(int)" : null,
  "com.google.common.io.Files:newWriter(java.io.File,java.nio.charset.Charset)" : "* Returns a buffered writer that writes to a file using the given character set.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n   * java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset,\n   * java.nio.file.OpenOption...)}.\n   *\n   * @param file the file to write to\n   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @return the buffered writer",
  "com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable)" : null,
  "com.google.common.collect.Hashing:closedTableSize(int,double)" : null,
  "com.google.common.collect.ImmutableSetMultimap$Builder:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.ArrayTable:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.Sets:removeAllImpl(java.util.Set,java.util.Collection)" : null,
  "com.google.common.collect.Synchronized:typePreservingSet(java.util.Set,java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap:create(int)" : "* Constructs a new, empty bimap with the specified expected size.\n   *\n   * @param expectedSize the expected number of entries\n   * @throws IllegalArgumentException if the specified expected size is negative",
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:canDecode(java.lang.CharSequence)" : null,
  "com.google.common.math.LongMath$MillerRabinTester:testWitness(long,long)" : "Returns true if n is a strong probable prime relative to the specified base.",
  "com.google.common.collect.AbstractMapBasedMultimap$KeySet:equals(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingSetMultimap:entries()" : null,
  "com.google.common.cache.LocalCache:longSize()" : null,
  "com.google.common.collect.Maps:immutableEntry(java.lang.Object,java.lang.Object)" : "* Returns an immutable map entry with the specified key and value. The {@link Entry#setValue}\n   * operation throws an {@link UnsupportedOperationException}.\n   *\n   * <p>The returned entry is serializable.\n   *\n   * <p><b>Java 9 users:</b> consider using {@code java.util.Map.entry(key, value)} if the key and\n   * value are non-null and the entry does not need to be serializable.\n   *\n   * @param key the key to be associated with the returned entry\n   * @param value the value to be associated with the returned entry",
  "com.google.common.collect.Multimaps$MapMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)" : "* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the\n   * specified supplier, whose cells are generated by applying the provided mapping functions to the\n   * input elements. Cells are inserted into the generated {@code Table} in encounter order.\n   *\n   * <p>If multiple input elements map to the same row and column, an {@code IllegalStateException}\n   * is thrown when the collection operation is performed.\n   *\n   * <p>To collect to an {@link ImmutableTable}, use {@link ImmutableTable#toImmutableTable}.\n   *\n   * @since 21.0",
  "com.google.common.util.concurrent.ClosingFuture$2:toString()" : null,
  "com.google.common.collect.AbstractBiMap$ValueSet:toArray(java.lang.Object[])" : null,
  "com.google.common.io.LittleEndianDataOutputStream:write(byte[],int,int)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.Interners$InternerFunction:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:createFromSystemTimer()" : null,
  "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)" : "* Starts specifying how to combine five {@link ClosingFuture}s into a single pipeline, assuming\n   * they all succeed. If any fail, the resulting pipeline will fail.\n   *\n   * <p>Calling this method allows you to use lambdas or method references typed with the types of\n   * the input {@link ClosingFuture}s.\n   *\n   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from any of\n   *     the arguments, or if any has already been {@linkplain #finishToFuture() finished}",
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:isEmpty()" : null,
  "com.google.common.util.concurrent.Striped:<init>()" : null,
  "com.google.common.util.concurrent.ServiceManager:awaitHealthy(java.time.Duration)" : "* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more\n   * than the given time. The manager will become healthy after all the component services have\n   * reached the {@linkplain State#RUNNING running} state.\n   *\n   * @param timeout the maximum time to wait\n   * @throws TimeoutException if not all of the services have finished starting within the deadline\n   * @throws IllegalStateException if the service manager reaches a state from which it cannot\n   *     become {@linkplain #isHealthy() healthy}.\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.base.CharMatcher:isEither(char,char)" : null,
  "com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.util.Iterator)" : "* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.\n     *\n     * @param elements the elements to add to the {@code ImmutableSortedMultiset}\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.collect.Collections2$PermutationIterator:<init>(java.util.List)" : null,
  "com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)" : "* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each\n   * input element is mapped to one cell in the returned table, with the rows, columns, and values\n   * generated by applying the specified functions. If multiple inputs are mapped to the same row\n   * and column pair, they will be combined with the specified merging function in encounter order.\n   *\n   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time\n   * if the row, column, value, or merging functions return null on any input.\n   *\n   * @since 21.0",
  "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:map()" : null,
  "com.google.common.math.PairedStatsAccumulator:populationCovariance()" : "* Returns the population covariance of the values. The count must be non-zero.\n   *\n   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It\n   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple\n   * times, due to numerical errors.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.graph.ImmutableNetwork$Builder:addEdge(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Adds {@code edge} connecting {@code nodeU} to {@code nodeV}.\n     *\n     * <p>If the network is directed, {@code edge} will be directed in this network; otherwise, it\n     * will be undirected.\n     *\n     * <p><b>{@code edge} must be unique to this network</b>, just as a {@code Map} key must be. It\n     * must also be non-null.\n     *\n     * <p>If {@code nodeU} and {@code nodeV} are not already present in this network, this method\n     * will silently {@link #addNode(Object) add} {@code nodeU} and {@code nodeV} to the network.\n     *\n     * <p>If {@code edge} already connects {@code nodeU} to {@code nodeV} (in the specified order if\n     * this network {@link #isDirected()}, else in any order), then this method will have no effect.\n     *\n     * @return this {@code Builder} object\n     * @throws IllegalArgumentException if {@code edge} already exists in the network and does not\n     *     connect {@code nodeU} to {@code nodeV}\n     * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n     *     #allowsParallelEdges()} or {@link #allowsSelfLoops()}",
  "com.google.common.collect.HashMultiset:add(java.lang.Object,int)" : "* {@inheritDoc}\n   *\n   * @throws IllegalArgumentException if the call would result in more than {@link\n   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",
  "com.google.common.collect.Synchronized$SynchronizedEntry:delegate()" : null,
  "com.google.common.graph.AbstractValueGraph:toString()" : "Returns a string representation of this graph.",
  "com.google.common.cache.CacheBuilder:removalListener(com.google.common.cache.RemovalListener)" : "* Specifies a listener instance that caches should notify each time an entry is removed for any\n   * {@linkplain RemovalCause reason}. Each cache created by this builder will invoke this listener\n   * as part of the routine maintenance described in the class documentation above.\n   *\n   * <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder\n   * reference; instead use the reference this method <i>returns</i>. At runtime, these point to the\n   * same instance, but only the returned reference has the correct generic type information to\n   * ensure type safety. For best results, use the standard method-chaining idiom illustrated in the\n   * class documentation above, configuring a builder and building your cache in a single statement.\n   * Failure to heed this advice can result in a {@link ClassCastException} being thrown by a cache\n   * operation at some <i>undefined</i> point in the future.\n   *\n   * <p><b>Warning:</b> any exception thrown by {@code listener} will <i>not</i> be propagated to\n   * the {@code Cache} user, only logged via a {@link Logger}.\n   *\n   * @return the cache builder reference that should be used instead of {@code this} for any\n   *     remaining configuration and cache building\n   * @throws IllegalStateException if a removal listener was already set",
  "com.google.common.util.concurrent.CollectionFuture:collectOneValue(int,java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:readResolve()" : null,
  "com.google.common.collect.Streams:findLast(java.util.stream.Stream)" : null,
  "com.google.common.io.CharSource:forEachLine(java.util.function.Consumer)" : "* Reads all lines of text from this source, running the given {@code action} for each line as it\n   * is read.\n   *\n   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\n   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n   * it does.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source or if {@code action}\n   *     throws an {@code UncheckedIOException}\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.escape.CharEscaper:escape(java.lang.String)" : "* Returns the escaped form of a given literal string.\n   *\n   * @param string the literal string to be escaped\n   * @return the escaped form of {@code string}\n   * @throws NullPointerException if {@code string} is null",
  "com.google.common.base.AbstractIterator:<init>()" : null,
  "com.google.common.collect.CompactLinkedHashSet:setPredecessor(int,int)" : null,
  "com.google.common.collect.LinkedHashMultimap:keySet()" : "* Returns a view collection of all <i>distinct</i> keys contained in this multimap. Note that the\n   * key set contains a key if and only if this multimap maps that key to at least one value.\n   *\n   * <p>The iterator generated by the returned set traverses the keys in the order they were first\n   * added to the multimap.\n   *\n   * <p>Changes to the returned set will update the underlying multimap, and vice versa. However,\n   * <i>adding</i> to the returned set is not possible.",
  "com.google.common.collect.ForwardingDeque:offerLast(java.lang.Object)" : null,
  "com.google.common.collect.EnumBiMap:containsValue(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Strength$3:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)" : "Creates a reference for the given value according to this value strength.",
  "com.google.common.collect.Cut$AboveValue:<init>(java.lang.Comparable)" : null,
  "com.google.common.base.CharMatcher:removeFrom(java.lang.CharSequence)" : "* Returns a string containing all non-matching characters of a character sequence, in order. For\n   * example:\n   *\n   * {@snippet :\n   * CharMatcher.is('a').removeFrom(\"bazaar\")\n   * }\n   *\n   * ... returns {@code \"bzr\"}.",
  "com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String)" : "* Returns the unsigned {@code long} value represented by the given decimal string.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String)} instead.\n   *\n   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}\n   *     value\n   * @throws NullPointerException if {@code string} is null (in contrast to {@link\n   *     Long#parseLong(String)})",
  "com.google.common.collect.ImmutableMultiset:setCount(java.lang.Object,int)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Lists$TwoPlusArrayList:get(int)" : null,
  "com.google.common.collect.IndexedImmutableSet:iterator()" : null,
  "com.google.common.primitives.Booleans:ensureCapacity(boolean[],int,int)" : "* Returns an array containing the same values as {@code array}, but guaranteed to be of a\n   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n   *\n   * @param array the source array\n   * @param minLength the minimum length the returned array must guarantee\n   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n   *     minLength}",
  "com.google.common.graph.AbstractGraph:toString()" : "Returns a string representation of this graph.",
  "com.google.common.collect.Synchronized$SynchronizedSortedMap:<init>(java.util.SortedMap,java.lang.Object)" : null,
  "com.google.common.collect.Multisets$ElementSet:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.TreeRangeSet:rangeEnclosing(com.google.common.collect.Range)" : null,
  "com.google.common.collect.ForwardingMultimap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MutableClassToInstanceMap:getInstance(java.lang.Class)" : null,
  "com.google.common.base.internal.Finalizer:cleanUp(java.lang.ref.Reference)" : "* Cleans up the given reference and any other references already in the queue. Catches and logs\n   * all throwables.\n   *\n   * @return true if the caller should continue to wait for more references to be added to the\n   *     queue, false if the associated FinalizableReferenceQueue is no longer referenced.",
  "com.google.common.collect.EnumMultiset:readObject(java.io.ObjectInputStream)" : "* @serialData the {@code Class<E>} for the enum type, the number of distinct elements, the first\n   *     element, its count, the second element, its count, and so on",
  "com.google.common.graph.NetworkBuilder:<init>(boolean)" : "Creates a new instance with the specified edge directionality.",
  "com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerEntry(java.lang.Object)" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:delegate()" : null,
  "com.google.common.util.concurrent.Uninterruptibles:<init>()" : null,
  "com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this\n   * @since 10.0",
  "com.google.common.graph.MapRetrievalCache:getIfCached(java.lang.Object)" : null,
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:negativeToMaxValue(long)" : "Returns {@code value}, if non-negative. Otherwise, returns {@link Long#MAX_VALUE}.",
  "com.google.common.collect.Synchronized$SynchronizedSortedSet:headSet(java.lang.Object)" : null,
  "com.google.common.util.concurrent.WrappingScheduledExecutorService:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.ImmutableListMultimap$Builder:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:columnMap()" : null,
  "com.google.common.cache.CacheBuilder:getExpireAfterAccessNanos()" : null,
  "com.google.common.reflect.ClassPath:getClassLoaderUrls(java.lang.ClassLoader)" : null,
  "com.google.common.util.concurrent.ForwardingBlockingQueue:put(java.lang.Object)" : null,
  "com.google.common.net.MediaType:addKnownType(com.google.common.net.MediaType)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:of(double,double,double)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.CompactLinkedHashSet:setSuccessor(int,int)" : null,
  "com.google.common.graph.ImmutableValueGraph:nodes()" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeTo(java.lang.Appendable,byte[],int,int)" : null,
  "com.google.common.collect.CompactHashMap$KeySetView:toArray()" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:<init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:size()" : null,
  "com.google.common.collect.Cut$AboveValue:describeAsLowerBound(java.lang.StringBuilder)" : null,
  "com.google.common.io.BaseEncoding:base16()" : "* The \"base16\" encoding specified by <a href=\"http://tools.ietf.org/html/rfc4648#section-8\">RFC\n   * 4648 section 8</a>, Base 16 Encoding. (This is the same as the base 16 encoding from <a\n   * href=\"http://tools.ietf.org/html/rfc3548#section-6\">RFC 3548</a>.) This is commonly known as\n   * \"hexadecimal\" format.\n   *\n   * <p>No padding is necessary in base 16, so {@link #withPadChar(char)} and {@link #omitPadding()}\n   * have no effect.\n   *\n   * <p>No line feeds are added by default, as per <a\n   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds in\n   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.",
  "com.google.common.collect.Maps$NavigableKeySet:<init>(java.util.NavigableMap)" : null,
  "com.google.common.collect.StandardTable:columnKeySet()" : "* {@inheritDoc}\n   *\n   * <p>The returned set has an iterator that does not support {@code remove()}.\n   *\n   * <p>The set's iterator traverses the columns of the first row, the columns of the second row,\n   * etc., skipping any columns that have appeared previously.",
  "com.google.common.base.Splitter$MapSplitter:split(java.lang.CharSequence)" : "* Splits {@code sequence} into substrings, splits each substring into an entry, and returns an\n     * unmodifiable map with each of the entries. For example, {@code\n     * Splitter.on(';').trimResults().withKeyValueSeparator(\"=>\").split(\"a=>b ; c=>b\")} will return\n     * a mapping from {@code \"a\"} to {@code \"b\"} and {@code \"c\"} to {@code \"b\"}.\n     *\n     * <p>The returned map preserves the order of the entries from {@code sequence}.\n     *\n     * @throws IllegalArgumentException if the specified sequence does not split into valid map\n     *     entries, or if there are duplicate keys",
  "com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.FluentFuture)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this\n   * @since 28.0",
  "com.google.common.collect.ForwardingMultiset:standardClear()" : "* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link\n   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #clear} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.reflect.Types$TypeVariableImpl:hashCode()" : null,
  "com.google.common.collect.ImmutableList:toImmutableList()" : "* Returns a {@code Collector} that accumulates the input elements into a new {@code\n   * ImmutableList}, in encounter order.\n   *\n   * @since 21.0",
  "com.google.common.io.MultiReader:advance()" : "Closes the current reader and opens the next one, if any.",
  "com.google.common.primitives.ImmutableIntArray:of(int,int,int)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.ImmutableRangeSet:intersection(com.google.common.collect.RangeSet)" : "* Returns a new range set consisting of the intersection of this range set and {@code other}.\n   *\n   * <p>This is essentially the same as {@code\n   * TreeRangeSet.create(this).removeAll(other.complement())} except it returns an {@code\n   * ImmutableRangeSet}.\n   *\n   * @since 21.0",
  "com.google.common.collect.ForwardingSetMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.Queues:newLinkedBlockingDeque(int)" : "* Creates an empty {@code LinkedBlockingDeque} with the given (fixed) capacity.\n   *\n   * @throws IllegalArgumentException if {@code capacity} is less than 1\n   * @since 12.0",
  "com.google.common.collect.IndexedImmutableSet$1:get(int)" : null,
  "com.google.common.collect.AbstractTable:values()" : null,
  "com.google.common.collect.Lists$RandomAccessListWrapper:<init>(java.util.List)" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:descendingEntryIterator()" : null,
  "com.google.common.primitives.Chars:reverse(char[],int,int)" : "* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive. This is equivalent to {@code\n   * Collections.reverse(Chars.asList(array).subList(fromIndex, toIndex))}, but is likely to be more\n   * efficient.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 23.1",
  "com.google.common.collect.EnumHashBiMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.AbstractBiMap:checkValue(java.lang.Object)" : "Returns its input, or throws an exception if this is not a valid value.",
  "com.google.common.collect.SingletonImmutableBiMap:inverse()" : null,
  "com.google.common.escape.Escapers:builder()" : "* Returns a builder for creating simple, fast escapers. A builder instance can be reused and each\n   * escaper that is created will be a snapshot of the current builder state. Builders are not\n   * thread safe.\n   *\n   * <p>The initial state of the builder is such that:\n   *\n   * <ul>\n   *   <li>There are no replacement mappings\n   *   <li>{@code safeMin == Character.MIN_VALUE}\n   *   <li>{@code safeMax == Character.MAX_VALUE}\n   *   <li>{@code unsafeReplacement == null}\n   * </ul>\n   *\n   * <p>For performance reasons escapers created by this builder are not Unicode aware and will not\n   * validate the well-formedness of their input.",
  "com.google.common.util.concurrent.TimeoutFuture:create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)" : null,
  "com.google.common.base.CharMatcher$BitSetMatcher:matches(char)" : null,
  "com.google.common.collect.ImmutableListMultimap:invert()" : null,
  "com.google.common.collect.ForwardingMap:get(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractService:enqueueRunningEvent()" : null,
  "com.google.common.collect.ByFunctionOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long,int)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:runInterruptibly()" : null,
  "com.google.common.collect.Iterables:elementsEqual(java.lang.Iterable,java.lang.Iterable)" : "* Determines whether two iterables contain equal elements in the same order. More specifically,\n   * this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same\n   * number of elements and every element of {@code iterable1} is equal to the corresponding element\n   * of {@code iterable2}.",
  "com.google.common.util.concurrent.AtomicLongMap:replace(java.lang.Object,long,long)" : "* If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code\n   * expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false.\n   *\n   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is\n   * currently in the map, or if {@code key} is not in the map at all.",
  "com.google.common.collect.Maps$AbstractFilteredMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)" : null,
  "com.google.common.collect.FilteredKeySetMultimap$EntrySet:equals(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMultimap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeMap:hashCode()" : null,
  "com.google.common.collect.SortedLists:<init>()" : null,
  "com.google.common.cache.LocalCache$WeakEntry:getValueReference()" : null,
  "com.google.common.primitives.Shorts:sortDescending(short[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order.\n   *\n   * @since 23.1",
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Range)" : null,
  "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multimap containing the given entries, in the \"key-grouped\" insertion\n   * order described in the <a href=\"#iteration\">class documentation</a>.",
  "com.google.common.graph.ImmutableNetwork:sourceNodeFn(com.google.common.graph.Network)" : null,
  "com.google.common.collect.ImmutableSetMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.ForwardingList:standardListIterator(int)" : "* A sensible default implementation of {@link #listIterator(int)}, in terms of {@link #size},\n   * {@link #get(int)}, {@link #set(int, Object)}, {@link #add(int, Object)}, and {@link\n   * #remove(int)}. If you override any of these methods, you may wish to override {@link\n   * #listIterator(int)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.primitives.Ints:fromBytes(byte,byte,byte,byte)" : "* Returns the {@code int} value whose byte representation is the given 4 bytes, in big-endian\n   * order; equivalent to {@code Ints.fromByteArray(new byte[] {b1, b2, b3, b4})}.\n   *\n   * @since 7.0",
  "com.google.common.graph.StandardMutableNetwork:addEdge(com.google.common.graph.EndpointPair,java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$LocalLoadingCache:apply(java.lang.Object)" : null,
  "com.google.common.collect.CompactLinkedHashMap:createEntrySet()" : null,
  "com.google.common.base.Ticker:systemTicker()" : "* A ticker that reads the current time using {@link System#nanoTime}.\n   *\n   * @since 10.0",
  "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:newLoader(java.net.URL)" : "Creates a class loader with the given base URL as its classpath.",
  "com.google.common.util.concurrent.ClosingFuture:whenClosedCountDown()" : "* Returns an object that can be used to wait until this objects' deferred closeables have all had\n   * {@link Runnable}s that close them submitted to each one's closing {@link Executor}.",
  "com.google.common.collect.Maps$SortedKeySet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.Maps$SortedAsMapView:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset:pollLastEntry()" : null,
  "com.google.common.collect.ForwardingSortedMultiset:pollFirstEntry()" : null,
  "com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)" : "* @since 15.0 (previously returned ScheduledFuture)",
  "com.google.common.collect.Interners:asFunction(com.google.common.collect.Interner)" : "* Returns a function that delegates to the {@link Interner#intern} method of the given interner.\n   *\n   * @since 8.0",
  "com.google.common.cache.LocalCache$AccessQueue:iterator()" : null,
  "com.google.common.primitives.ImmutableDoubleArray$Builder:ensureRoomFor(int)" : null,
  "com.google.common.collect.Platform:copy(java.lang.Object[],int,int,java.lang.Object[])" : null,
  "com.google.common.collect.Iterators:emptyListIterator()" : null,
  "com.google.common.collect.Synchronized$SynchronizedSetMultimap:entries()" : null,
  "com.google.common.collect.TreeBasedTable$TreeRow:firstKey()" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:afterRanInterruptiblyFailure(java.lang.Throwable)" : null,
  "com.google.common.cache.CacheLoader$1:reload(java.lang.Object,java.lang.Object)" : "* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This\n   * method is called when an existing cache entry is refreshed by {@link\n   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.\n   *\n   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be\n   * overridden with an asynchronous implementation when using {@link\n   * CacheBuilder#refreshAfterWrite}.\n   *\n   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.\n   *\n   * @param key the non-null key whose value should be loaded\n   * @param oldValue the non-null old value corresponding to {@code key}\n   * @return the future new value associated with {@code key}; <b>must not be null, must not return\n   *     null</b>\n   * @throws Exception if unable to reload the result\n   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is\n   *     treated like any other {@code Exception} in all respects except that, when it is caught,\n   *     the thread's interrupt status is set\n   * @since 11.0",
  "com.google.common.collect.StandardTable$Column:createEntrySet()" : null,
  "com.google.common.collect.CompactHashSet:delegateOrNull()" : null,
  "com.google.common.collect.ForwardingListIterator:nextIndex()" : null,
  "com.google.common.reflect.TypeToken:hashCode()" : null,
  "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)" : "* Starts specifying how to combine four {@link ClosingFuture}s into a single pipeline, assuming\n   * they all succeed. If any fail, the resulting pipeline will fail.\n   *\n   * <p>Calling this method allows you to use lambdas or method references typed with the types of\n   * the input {@link ClosingFuture}s.\n   *\n   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from any of\n   *     the arguments, or if any has already been {@linkplain #finishToFuture() finished}",
  "com.google.common.collect.ImmutableRangeSet:asDescendingSetOfRanges()" : null,
  "com.google.common.collect.StandardTable:size()" : null,
  "com.google.common.base.Functions$FunctionForMapNoDefault:equals(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$EntrySet:iterator()" : null,
  "com.google.common.collect.FilteredEntryMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.net.InetAddresses:hextetsToIPv6String(int[])" : "* Convert a list of hextets into a human-readable IPv6 address.\n   *\n   * <p>In order for \"::\" compression to work, the input should contain negative sentinel values in\n   * place of the elided zeroes.\n   *\n   * @param hextets {@code int[]} array of eight 16-bit hextets, or -1s",
  "com.google.common.util.concurrent.AtomicDoubleArray:length()" : "* Returns the length of the array.\n   *\n   * @return the length of the array",
  "com.google.common.collect.LinkedHashMultiset:clear()" : null,
  "com.google.common.collect.DenseImmutableTable$RowMap:isPartialView()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)" : "* CycleDetectingLock implementations must call this method before attempting to acquire the lock.",
  "com.google.common.collect.Sets$SubSet:iterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:validateIterator()" : "* If the delegate changed since the iterator was created, the iterator is no longer valid.",
  "com.google.common.collect.Maps:valuePredicateOnEntries(com.google.common.base.Predicate)" : null,
  "com.google.common.io.ReaderInputStream:drain(byte[],int,int)" : "* Copy as much of the byte buffer into the output array as possible, returning the (positive)\n   * number of characters copied.",
  "com.google.common.collect.LinkedListMultimap:removeAll(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",
  "com.google.common.collect.AbstractMapBasedMultimap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:<init>(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.FilteredKeyMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)" : null,
  "com.google.common.graph.DirectedGraphConnections:removePredecessor(java.lang.Object)" : null,
  "com.google.common.collect.ComparatorOrdering:toString()" : null,
  "com.google.common.primitives.Bytes$ByteArrayAsList:subList(int,int)" : null,
  "com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.ObjectArrays:concat(java.lang.Object[],java.lang.Object)" : "* Returns a new array that appends {@code element} to {@code array}.\n   *\n   * @param array the array of elements to prepend\n   * @param element the element to append to the end\n   * @return an array whose size is one larger than {@code array}, with the same contents as {@code\n   *     array}, plus {@code element} occupying the last position.",
  "com.google.common.reflect.Invokable:isTransient()" : "Returns true if the field is transient.",
  "com.google.common.collect.ArrayListMultimap:trimToSize()" : "* Reduces the memory used by this {@code ArrayListMultimap}, if feasible.\n   *\n   * @deprecated For a {@link ListMultimap} that automatically trims to size, use {@link\n   *     ImmutableListMultimap}. If you need a mutable collection, remove the {@code trimToSize}\n   *     call, or switch to a {@code HashMap<K, ArrayList<V>>}.",
  "com.google.common.collect.ConcurrentHashMultiset:elementSet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:spliterator()" : null,
  "com.google.common.collect.Iterators:emptyModifiableIterator()" : null,
  "com.google.common.collect.Sets$ImprovedAbstractSet:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.ForwardingSortedMultiset:lastEntry()" : null,
  "com.google.common.cache.LocalCache$WeakValueReference:isLoading()" : null,
  "com.google.common.graph.Graphs$TransposedGraph:predecessors(java.lang.Object)" : null,
  "com.google.common.graph.DirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.DiscreteDomain$IntegerDomain:next(java.lang.Integer)" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)" : null,
  "com.google.common.primitives.ImmutableLongArray:toString()" : "* Returns a string representation of this array in the same form as {@link\n   * Arrays#toString(long[])}, for example {@code \"[1, 2, 3]\"}.",
  "com.google.common.collect.ForwardingMap:standardRemove(java.lang.Object)" : "* A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator}\n   * method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link\n   * #remove} to forward to this implementation.\n   *\n   * <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming\n   * that approach would not lead to an infinite loop.\n   *\n   * @since 7.0",
  "com.google.common.collect.MinMaxPriorityQueue:maximumSize(int)" : "* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances\n   * that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it\n   * immediately removes its greatest element (according to its comparator), which might be the\n   * element that was just added.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:readLock()" : null,
  "com.google.common.collect.Lists$ReverseList:set(int,java.lang.Object)" : null,
  "com.google.common.collect.Multisets$AbstractEntry:hashCode()" : "* Return this entry's hash code, following the behavior specified in {@link\n     * Multiset.Entry#hashCode}.",
  "com.google.common.base.CharMatcher$None:countIn(java.lang.CharSequence)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:higherEntry(java.lang.Object)" : null,
  "com.google.common.collect.MultimapBuilder$LinkedListSupplier:get()" : null,
  "com.google.common.collect.ImmutableMultiset:copyOf(java.lang.Object[])" : "* Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n   * described in the class documentation.\n   *\n   * @throws NullPointerException if any of {@code elements} is null\n   * @since 6.0",
  "com.google.common.collect.ForwardingSetMultimap:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Ordering:onKeys()" : null,
  "com.google.common.io.MoreFiles:deleteRecursivelyInsecure(java.nio.file.Path)" : "* Insecure recursive delete for file systems that don't support {@code SecureDirectoryStream}.\n   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",
  "com.google.common.util.concurrent.AbstractExecutionThreadService:triggerShutdown()" : "* Invoked to request the service to stop.\n   *\n   * <p>By default this method does nothing.\n   *\n   * <p>Currently, this method is invoked while holding a lock. If an implementation of this method\n   * blocks, it can prevent this service from changing state. If you need to performing a blocking\n   * operation in order to trigger shutdown, consider instead registering a listener and\n   * implementing {@code stopping}. Note, however, that {@code stopping} does not run at exactly the\n   * same times as {@code triggerShutdown}.",
  "com.google.common.collect.SingletonImmutableSet:toString()" : null,
  "com.google.common.graph.StandardMutableValueGraph:removeEdge(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[])" : "* Attempts to read enough bytes from the stream to fill the given byte array, with the same\n   * behavior as {@link DataInput#readFully(byte[])}. Does not close the stream.\n   *\n   * @param in the input stream to read from.\n   * @param b the buffer into which the data is read.\n   * @throws EOFException if this stream reaches the end before reading all the bytes.\n   * @throws IOException if an I/O error occurs.",
  "com.google.common.util.concurrent.AtomicDoubleArray:weakCompareAndSet(int,double,double)" : "* Atomically sets the element at position {@code i} to the given updated value if the current\n   * value is <a href=\"#bitEquals\">bitwise equal</a> to the expected value.\n   *\n   * <p>May <a\n   * href=\"http://download.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html#Spurious\">\n   * fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate\n   * alternative to {@code compareAndSet}.\n   *\n   * @param i the index\n   * @param expect the expected value\n   * @param update the new value\n   * @return true if successful",
  "com.google.common.collect.ImmutableTable:cellSet()" : null,
  "com.google.common.collect.AbstractSortedMultiset:descendingMultiset()" : null,
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:size()" : null,
  "com.google.common.collect.RegularImmutableTable:forCells(java.lang.Iterable)" : null,
  "com.google.common.primitives.ImmutableIntArray$Builder:expandedCapacity(int,int)" : null,
  "com.google.common.util.concurrent.ClosingFuture:cancel(boolean)" : "* Attempts to cancel execution of this step. This attempt will fail if the step has already\n   * completed, has already been cancelled, or could not be cancelled for some other reason. If\n   * successful, and this step has not started when {@code cancel} is called, this step should never\n   * run.\n   *\n   * <p>If successful, causes the objects captured by this step (if already started) and its input\n   * step(s) for later closing to be closed on their respective {@link Executor}s. If any such calls\n   * specified {@link MoreExecutors#directExecutor()}, those objects will be closed synchronously.\n   *\n   * @param mayInterruptIfRunning {@code true} if the thread executing this task should be\n   *     interrupted; otherwise, in-progress tasks are allowed to complete, but the step will be\n   *     cancelled regardless\n   * @return {@code false} if the step could not be cancelled, typically because it has already\n   *     completed normally; {@code true} otherwise",
  "com.google.common.reflect.Invokable:isStatic()" : "Returns true if the element is static.",
  "com.google.common.reflect.TypeToken:boundAsSuperclass(java.lang.reflect.Type)" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:columnKeySet()" : null,
  "com.google.common.base.Throwables:jlaStackTrace(java.lang.Throwable)" : null,
  "com.google.common.base.CharMatcher$Any:<init>()" : null,
  "com.google.common.util.concurrent.SettableFuture:set(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AtomicDoubleArray:readObject(java.io.ObjectInputStream)" : "Reconstitutes the instance from a stream (that is, deserializes it).",
  "com.google.common.reflect.TypeToken:writeReplace()" : "Implemented to support serialization of subclasses.",
  "com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable,java.lang.Object)" : null,
  "com.google.common.io.FileBackedOutputStream:<init>(int)" : "* Creates a new instance that uses the given file threshold, and does not reset the data when the\n   * {@link ByteSource} returned by {@link #asByteSource} is finalized.\n   *\n   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file\n   * @throws IllegalArgumentException if {@code fileThreshold} is negative",
  "com.google.common.collect.ImmutableSortedAsList:spliterator()" : null,
  "com.google.common.collect.Multimaps$CustomListMultimap:createCollection()" : null,
  "com.google.common.collect.Synchronized:multimap(com.google.common.collect.Multimap,java.lang.Object)" : null,
  "com.google.common.collect.DescendingMultiset:iterator()" : null,
  "com.google.common.graph.ForwardingValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.FluentFuture$TrustedFuture:isCancelled()" : null,
  "com.google.common.collect.ForwardingSortedSetMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:createEntries()" : null,
  "com.google.common.reflect.TypeVisitor:visitTypeVariable(java.lang.reflect.TypeVariable)" : null,
  "com.google.common.io.BaseEncoding$Base16Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)" : null,
  "com.google.common.io.AppendableWriter:close()" : null,
  "com.google.common.collect.Cut$BelowValue:describeAsUpperBound(java.lang.StringBuilder)" : null,
  "com.google.common.collect.Sets$SubSet:contains(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,long)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.primitives.ImmutableLongArray$AsList:get(int)" : null,
  "com.google.common.io.ByteSource$ConcatenatedByteSource:isEmpty()" : null,
  "com.google.common.collect.AbstractBiMap$EntrySet:toArray()" : null,
  "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:add(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object)" : "Enqueues an event to be run.",
  "com.google.common.reflect.ClassPath$ClassInfo:getSimpleName()" : "* Returns the simple name of the underlying class as given in the source code.\n     *\n     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be\n     * loaded.\n     *\n     * <p>But note that this class uses heuristics to identify the simple name. See a related\n     * discussion in <a href=\"https://github.com/google/guava/issues/3349\">issue 3349</a>.",
  "com.google.common.collect.MapMakerInternalMap$Segment:copyForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)" : "Unsafely returns a copy of the given entry.",
  "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture:<init>(java.lang.Throwable)" : null,
  "com.google.common.collect.AbstractBiMap$Inverse:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Maps:capacity(int)" : "* Returns a capacity that is sufficient to keep the map from being resized as long as it grows no\n   * larger than expectedSize and the load factor is ≥ its default (0.75).",
  "com.google.common.collect.Synchronized$SynchronizedDeque:<init>(java.util.Deque,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ThreadFactoryBuilder:setDaemon(boolean)" : "* Sets daemon or not for new threads created with this ThreadFactory.\n   *\n   * @param daemon whether or not new Threads created with this ThreadFactory will be daemon threads\n   * @return this for the builder pattern",
  "com.google.common.collect.AbstractMultimap$Values:iterator()" : null,
  "com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable,java.util.Comparator)" : "* Returns a {@link Collection} of all the permutations of the specified {@link Iterable} using\n   * the specified {@link Comparator} for establishing the lexicographical ordering.\n   *\n   * <p>Examples:\n   *\n   * {@snippet :\n   * for (List<String> perm : orderedPermutations(asList(\"b\", \"c\", \"a\"))) {\n   *   println(perm);\n   * }\n   * // -> [\"a\", \"b\", \"c\"]\n   * // -> [\"a\", \"c\", \"b\"]\n   * // -> [\"b\", \"a\", \"c\"]\n   * // -> [\"b\", \"c\", \"a\"]\n   * // -> [\"c\", \"a\", \"b\"]\n   * // -> [\"c\", \"b\", \"a\"]\n   *\n   * for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {\n   *   println(perm);\n   * }\n   * // -> [1, 1, 2, 2]\n   * // -> [1, 2, 1, 2]\n   * // -> [1, 2, 2, 1]\n   * // -> [2, 1, 1, 2]\n   * // -> [2, 1, 2, 1]\n   * // -> [2, 2, 1, 1]\n   * }\n   *\n   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations\n   * Generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7,\n   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the\n   * first permutation will be in ascending order, and the last will be in descending order.\n   *\n   * <p>Elements that compare equal are considered equal and no new permutations are created by\n   * swapping them.\n   *\n   * <p>An empty iterable has only one permutation, which is an empty list.\n   *\n   * @param elements the original iterable whose elements have to be permuted.\n   * @param comparator a comparator for the iterable's elements.\n   * @return an immutable {@link Collection} containing all the different permutations of the\n   *     original iterable.\n   * @throws NullPointerException If the specified iterable is null, has any null elements, or if\n   *     the specified comparator is null.\n   * @since 12.0",
  "com.google.common.collect.Maps$FilteredMapValues:remove(java.lang.Object)" : null,
  "com.google.common.base.Strings:<init>()" : null,
  "com.google.common.io.LittleEndianDataInputStream:readFully(byte[])" : null,
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added",
  "com.google.common.collect.AbstractMapBasedMultiset:entryIterator()" : null,
  "com.google.common.collect.ForwardingNavigableMap:ceilingKey(java.lang.Object)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,char,java.lang.Object)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:removeEntryIf(com.google.common.base.Predicate)" : null,
  "com.google.common.base.Suppliers$SupplierComposition:hashCode()" : null,
  "com.google.common.reflect.Invokable$MethodInvokable:isOverridable()" : null,
  "com.google.common.collect.Tables$ImmutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.math.DoubleUtils:ensureNonNegative(double)" : "Returns its argument if it is non-negative, zero if it is negative.",
  "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:remove()" : null,
  "com.google.common.collect.CompactHashMap$EntrySetView:remove(java.lang.Object)" : null,
  "com.google.common.primitives.Ints:rotate(int[],int,int,int)" : "* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code\n   * toIndex} exclusive. This is equivalent to {@code\n   * Collections.rotate(Ints.asList(array).subList(fromIndex, toIndex), distance)}, but is\n   * considerably faster and avoids allocations and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 32.0.0",
  "com.google.common.collect.MinMaxPriorityQueue$Builder:maximumSize(int)" : "* Configures this builder to build {@code MinMaxPriorityQueue} instances that are limited to\n     * {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately\n     * removes its greatest element (according to its comparator), which might be the element that\n     * was just added.",
  "com.google.common.collect.ForwardingQueue:delegate()" : null,
  "com.google.common.primitives.ImmutableLongArray:isEmpty()" : "Returns {@code true} if there are no values in this array ({@link #length} is zero).",
  "com.google.common.primitives.ImmutableLongArray:indexOf(long)" : "* Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no\n   * such index exists. Equivalent to {@code asList().indexOf(target)}.",
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State)" : "* Updates the state with the given service transition.\n     *\n     * <p>This method performs the main logic of ServiceManager in the following steps.\n     *\n     * <ol>\n     *   <li>Update the {@link #servicesByState()}\n     *   <li>Update the {@link #startupTimers}\n     *   <li>Based on the new state queue listeners to run\n     *   <li>Run the listeners (outside of the lock)\n     * </ol>",
  "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:isFull()" : null,
  "com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map,java.util.Comparator)" : "* Returns an immutable map containing the same entries as {@code map}, with keys sorted by the\n   * provided comparator.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws NullPointerException if any key or value in {@code map} is null\n   * @throws IllegalArgumentException if any two keys are equal according to the comparator",
  "com.google.common.collect.AbstractMapBasedMultimap:entrySpliterator()" : null,
  "com.google.common.collect.CompactHashMap:resizeTable(int,int,int,int)" : null,
  "com.google.common.collect.ImmutableMapKeySet:isPartialView()" : null,
  "com.google.common.collect.ForwardingCollection:toArray()" : null,
  "com.google.common.cache.CacheBuilder:expireAfterWrite(long,java.util.concurrent.TimeUnit)" : "* Specifies that each entry should be automatically removed from the cache once a fixed duration\n   * has elapsed after the entry's creation, or the most recent replacement of its value.\n   *\n   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)\n   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be\n   * useful in testing, or to disable caching temporarily without a code change.\n   *\n   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or\n   * write operations. Expired entries are cleaned up as part of the routine maintenance described\n   * in the class javadoc.\n   *\n   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when\n   * feasible), use {@link #expireAfterWrite(Duration)} instead.\n   *\n   * @param duration the length of time after an entry is created that it should be automatically\n   *     removed\n   * @param unit the unit that {@code duration} is expressed in\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code duration} is negative\n   * @throws IllegalStateException if {@link #expireAfterWrite} was already set",
  "com.google.common.cache.LocalCache$NullEntry:setWriteTime(long)" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:outDegree(java.lang.Object)" : null,
  "com.google.common.net.InternetDomainName:findSuffixOfType(com.google.common.base.Optional)" : "* Returns the index of the leftmost part of the suffix, or -1 if not found. Note that the value\n   * defined as a suffix may not produce {@code true} results from {@link #isPublicSuffix()} or\n   * {@link #isRegistrySuffix()} if the domain ends with an excluded domain pattern such as {@code\n   * \"nhs.uk\"}.\n   *\n   * <p>If a {@code desiredType} is specified, this method only finds suffixes of the given type.\n   * Otherwise, it finds the first suffix of any type.",
  "com.google.common.collect.Sets$FilteredNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.AbstractTable:rowKeySet()" : null,
  "com.google.common.collect.Lists$StringAsImmutableList:isPartialView()" : null,
  "com.google.common.collect.ForwardingSortedMultiset:firstEntry()" : null,
  "com.google.common.math.Stats:min()" : "* Returns the lowest value in the dataset. The count must be non-zero.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it\n   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link\n   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values\n   * only then the result is the lowest finite value. If it contains {@link\n   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.io.CharSequenceReader:hasRemaining()" : null,
  "com.google.common.collect.CompactHashMap$ValuesView:iterator()" : null,
  "com.google.common.collect.Maps:transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry)" : "Returns a view of an entry transformed by the specified transformer.",
  "com.google.common.collect.Maps:asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)" : "Views an entry transformer as a function from entries to entries.",
  "com.google.common.math.Stats:equals(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p><b>Note:</b> This tests exact equality of the calculated statistics, including the floating\n   * point values. Two instances are guaranteed to be considered equal if one is copied from the\n   * other using {@code second = new StatsAccumulator().addAll(first).snapshot()}, if both were\n   * obtained by calling {@code snapshot()} on the same {@link StatsAccumulator} without adding any\n   * values in between the two calls, or if one is obtained from the other after round-tripping\n   * through java serialization. However, floating point rounding errors mean that it may be false\n   * for some instances where the statistics are mathematically equal, including instances\n   * constructed from the same values in a different order... or (in the general case) even in the\n   * same order. (It is guaranteed to return true for instances constructed from the same values in\n   * the same order if {@code strictfp} is in effect, or if the system architecture guarantees\n   * {@code strictfp}-like semantics.)",
  "com.google.common.graph.ForwardingNetwork:outDegree(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$MoveDesc:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken:getArraySupertype(java.lang.Class)" : null,
  "com.google.common.collect.Range:lowerEndpoint()" : "* Returns the lower endpoint of this range.\n   *\n   * @throws IllegalStateException if this range is unbounded below (that is, {@link\n   *     #hasLowerBound()} returns {@code false})",
  "com.google.common.graph.ForwardingValueGraph:edgeValue(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.collect.Iterators:partitionImpl(java.util.Iterator,int,boolean)" : null,
  "com.google.common.primitives.UnsignedLong:valueOf(long)" : "* Returns an {@code UnsignedLong} representing the same value as the specified {@code long}.\n   *\n   * @throws IllegalArgumentException if {@code value} is negative\n   * @since 14.0",
  "com.google.common.hash.AbstractHasher:putObject(java.lang.Object,com.google.common.hash.Funnel)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:removeLast()" : "* Removes and returns the greatest element of this queue.\n   *\n   * @throws NoSuchElementException if the queue is empty",
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:removeAll(java.util.Collection)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:lock()" : null,
  "com.google.common.io.BaseEncoding$Alphabet:encode(int)" : null,
  "com.google.common.collect.ImmutableMap:conflictException(java.lang.String,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.eventbus.Dispatcher:perThreadDispatchQueue()" : "* Returns a dispatcher that queues events that are posted reentrantly on a thread that is already\n   * dispatching an event, guaranteeing that all events posted on a single thread are dispatched to\n   * all subscribers in the order they are posted.\n   *\n   * <p>When all subscribers are dispatched to using a <i>direct</i> executor (which dispatches on\n   * the same thread that posts the event), this yields a breadth-first dispatch order on each\n   * thread. That is, all subscribers to a single event A will be called before any subscribers to\n   * any events B and C that are posted to the event bus by the subscribers to A.",
  "com.google.common.collect.RegularImmutableAsList:internalArrayEnd()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:iterator()" : null,
  "com.google.common.util.concurrent.InterruptibleTask$Blocker:toString()" : null,
  "com.google.common.collect.AbstractMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.SortedLists$KeyAbsentBehavior$3:resultIndex(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedObject:delegate()" : null,
  "com.google.common.collect.CompactHashSet:isEmpty()" : null,
  "com.google.common.hash.SipHashFunction$SipHasher:<init>(int,int,long,long)" : null,
  "com.google.common.graph.ImmutableValueGraph:successors(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$NamedFastMatcher:toString()" : null,
  "com.google.common.graph.EdgesConnecting:size()" : null,
  "com.google.common.reflect.TypeResolver$WildcardCapturer:captureAsTypeVariable(java.lang.reflect.Type[])" : null,
  "com.google.common.collect.EmptyContiguousSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)" : null,
  "com.google.common.base.JdkPattern$JdkMatcher:replaceAll(java.lang.String)" : null,
  "com.google.common.io.MoreFiles$PathByteSource:read()" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUpAlternatingLevels(int,java.lang.Object)" : "* Bubbles a value from {@code index} up the levels of this heap, and returns the index the\n     * element ended up at.",
  "com.google.common.util.concurrent.AtomicLongMap:sum()" : "* Returns the sum of all values in this map.\n   *\n   * <p>This method is not atomic: the sum may or may not include other concurrent operations.",
  "com.google.common.base.Throwables:getStackTraceAsString(java.lang.Throwable)" : "* Returns a string containing the result of {@link Throwable#toString() toString()}, followed by\n   * the full, recursive stack trace of {@code throwable}. Note that you probably should not be\n   * parsing the resulting string; if you need programmatic access to the stack frames, you can call\n   * {@link Throwable#getStackTrace()}.",
  "com.google.common.graph.AbstractBaseGraph:outDegree(java.lang.Object)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.util.concurrent.MoreExecutors:isAppEngineWithApiClasses()" : null,
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(byte[],int,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedObject:toString()" : null,
  "com.google.common.graph.StandardValueGraph:containsNode(java.lang.Object)" : null,
  "com.google.common.hash.BloomFilter:bitSize()" : "Returns the number of bits in the underlying bit array.",
  "com.google.common.collect.ImmutableMultimap$Keys:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorEntry(java.lang.Object)" : null,
  "com.google.common.collect.Tables$TransposeTable:containsRow(java.lang.Object)" : null,
  "com.google.common.graph.GraphBuilder:build()" : "Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.",
  "com.google.common.collect.ArrayTable$RowMap:getKeyRole()" : null,
  "com.google.common.hash.ChecksumHashFunction$ChecksumHasher:hash()" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:stream()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:removeFirst()" : "* Removes and returns the least element of this queue.\n   *\n   * @throws NoSuchElementException if the queue is empty",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char,long)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ForwardingListMultimap:delegate()" : null,
  "com.google.common.hash.AbstractByteHasher:putChar(char)" : null,
  "com.google.common.collect.Ordering:onResultOf(com.google.common.base.Function)" : "* Returns a new ordering on {@code F} which orders elements by first applying a function to them,\n   * then comparing those results using {@code this}. For example, to compare objects by their\n   * string forms, in a case-insensitive manner, use:\n   *\n   * {@snippet :\n   * Ordering.from(String.CASE_INSENSITIVE_ORDER)\n   *     .onResultOf(Functions.toStringFunction())\n   * }\n   *\n   * <p><b>Java 8+ users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead\n   * (you can omit the comparator if it is the natural order).",
  "com.google.common.graph.AbstractValueGraph$1:degree(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:<init>(java.util.concurrent.Future)" : null,
  "com.google.common.collect.AbstractTable$CellSet:contains(java.lang.Object)" : null,
  "com.google.common.hash.Murmur3_32HashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)" : null,
  "com.google.common.collect.TreeTraverser:using(com.google.common.base.Function)" : "* Returns a tree traverser that uses the given function to navigate from a node to its children.\n   * This is useful if the function instance already exists, or so that you can supply a lambda\n   * expressions. If those circumstances don't apply, you probably don't need to use this; subclass\n   * {@code TreeTraverser} and implement its {@link #children} method directly.\n   *\n   * @since 20.0\n   * @deprecated Use {@link com.google.common.graph.Traverser#forTree} instead. If you are using a\n   *     lambda, these methods have exactly the same signature.",
  "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,long)" : "* Adds a name/value pair to the formatted output in {@code name=value} format.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",
  "com.google.common.primitives.Doubles$DoubleArrayAsList:size()" : null,
  "com.google.common.collect.MapMakerInternalMap:values()" : null,
  "com.google.common.cache.CacheBuilder:build(com.google.common.cache.CacheLoader)" : "* Builds a cache, which either returns an already-loaded value for a given key or atomically\n   * computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently\n   * loading the value for this key, simply waits for that thread to finish and returns its loaded\n   * value. Note that multiple threads can concurrently load values for distinct keys.\n   *\n   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be\n   * invoked again to create multiple independent caches.\n   *\n   * @param loader the cache loader used to obtain new values\n   * @return a cache having the requested features",
  "com.google.common.collect.ImmutableSortedMap:lowerEntry(java.lang.Object)" : null,
  "com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodes()" : null,
  "com.google.common.collect.Collections2$PermutationCollection:contains(java.lang.Object)" : null,
  "com.google.common.collect.ContiguousSet:tailSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.collect.Multiset:forEachEntry(java.util.function.ObjIntConsumer)" : "* Runs the specified action for each distinct element in this multiset, and the number of\n   * occurrences of that element. For some {@code Multiset} implementations, this may be more\n   * efficient than iterating over the {@link #entrySet()} either explicitly or with {@code\n   * entrySet().forEach(action)}.\n   *\n   * @since 21.0",
  "com.google.common.primitives.Floats$FloatArrayAsList:toString()" : null,
  "com.google.common.base.CharMatcher:matchesNoneOf(java.lang.CharSequence)" : "* Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to\n   * {@code !matchesAnyOf(sequence)}.\n   *\n   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each\n   * character, until this returns {@code true} or the end is reached.\n   *\n   * @param sequence the character sequence to examine, possibly empty\n   * @return {@code true} if this matcher matches no characters in the sequence, including when the\n   *     sequence is empty",
  "com.google.common.collect.HashBiMap:putInverse(java.lang.Object,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Ordering:max(java.lang.Object,java.lang.Object)" : "* Returns the greater of the two values according to this ordering. If the values compare as 0,\n   * the first is returned.\n   *\n   * <p><b>Implementation note:</b> this method is invoked by the default implementations of the\n   * other {@code max} overloads, so overriding it will affect their behavior.\n   *\n   * <p><b>Note:</b> Consider using {@code Comparators.max(a, b, thisComparator)} instead. If {@code\n   * thisComparator} is {@link Ordering#natural}, then use {@code Comparators.max(a, b)}.\n   *\n   * @param a value to compare, returned if greater than or equal to b.\n   * @param b value to compare.\n   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n   *     ordering.",
  "com.google.common.base.Platform:getEnumIfPresent(java.lang.Class,java.lang.String)" : null,
  "com.google.common.collect.Multimaps$CustomListMultimap:createAsMap()" : null,
  "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:add(java.lang.Object)" : null,
  "com.google.common.base.Predicates$InstanceOfPredicate:apply(java.lang.Object)" : null,
  "com.google.common.collect.FluentIterable:toArray(java.lang.Class)" : "* Returns an array containing all of the elements from this fluent iterable in iteration order.\n   *\n   * <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use {@code\n   * stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use {@code\n   * stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray( len -> (E[])\n   * Array.newInstance(type, len))}.\n   *\n   * @param type the type of the elements\n   * @return a newly-allocated array into which all the elements of this fluent iterable have been\n   *     copied",
  "com.google.common.collect.AbstractBiMap:clear()" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueFailedEvent(com.google.common.util.concurrent.Service)" : null,
  "com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char,long)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.reflect.TypeResolver:where(java.lang.reflect.Type,java.lang.reflect.Type)" : "* Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in\n   * {@code actual}.\n   *\n   * <p>For example, if {@code formal} is a {@code TypeVariable T}, and {@code actual} is {@code\n   * String.class}, then {@code new TypeResolver().where(formal, actual)} will {@linkplain\n   * #resolveType resolve} {@code ParameterizedType List<T>} to {@code List<String>}, and resolve\n   * {@code Map<T, Something>} to {@code Map<String, Something>} etc. Similarly, {@code formal} and\n   * {@code actual} can be {@code Map<K, V>} and {@code Map<String, Integer>} respectively, or they\n   * can be {@code E[]} and {@code String[]} respectively, or even any arbitrary combination\n   * thereof.\n   *\n   * @param formal The type whose type variables or itself is mapped to other type(s). It's almost\n   *     always a bug if {@code formal} isn't a type variable and contains no type variable. Make\n   *     sure you are passing the two parameters in the right order.\n   * @param actual The type that the formal type variable(s) are mapped to. It can be or contain yet\n   *     other type variables, in which case these type variables will be further resolved if\n   *     corresponding mappings exist in the current {@code TypeResolver} instance.",
  "com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ForwardingSetMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.graph.EdgesConnecting:getConnectingEdge()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableList$SerializedForm:readResolve()" : null,
  "com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable set containing the given elements, minus duplicates, in the order each was\n   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n   * the first are ignored.",
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:result()" : null,
  "com.google.common.collect.AbstractMultiset:elementSet()" : null,
  "com.google.common.util.concurrent.Futures:lazyTransform(java.util.concurrent.Future,com.google.common.base.Function)" : "* Like {@link #transform(ListenableFuture, Function, Executor)} except that the transformation\n   * {@code function} is invoked on each call to {@link Future#get() get()} on the returned future.\n   *\n   * <p>The returned {@code Future} reflects the input's cancellation state directly, and any\n   * attempt to cancel the returned Future is likewise passed through to the input Future.\n   *\n   * <p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get} only apply the timeout\n   * to the execution of the underlying {@code Future}, <em>not</em> to the execution of the\n   * transformation function.\n   *\n   * <p>The primary audience of this method is callers of {@code transform} who don't have a {@code\n   * ListenableFuture} available and do not mind repeated, lazy function evaluation.\n   *\n   * @param input The future to transform\n   * @param function A Function to transform the results of the provided future to the results of\n   *     the returned future.\n   * @return A future that returns the result of the transformation.\n   * @since 10.0",
  "com.google.common.collect.ImmutableTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the table unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.AbstractBiMap$BiMapEntry:setValue(java.lang.Object)" : null,
  "com.google.common.math.DoubleMath:log2(double,java.math.RoundingMode)" : "* Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an\n   * {@code int}.\n   *\n   * <p>Regardless of the rounding mode, this is faster than {@code (int) log2(x)}.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is\n   *     infinite",
  "com.google.common.io.CharSource:concat(java.lang.Iterable)" : "* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from\n   * the source will contain the concatenated data from the streams of the underlying sources.\n   *\n   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n   * close the open underlying stream.\n   *\n   * @param sources the sources to concatenate\n   * @return a {@code CharSource} containing the concatenated data\n   * @since 15.0",
  "com.google.common.collect.MapMakerInternalMap$Segment:clearValueForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)" : "Clears a value that has not yet been set, and thus does not require count to be modified.",
  "com.google.common.collect.ComputationException:<init>(java.lang.Throwable)" : "Creates a new instance with the given cause.",
  "com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map)" : "* Returns an immutable map containing the same entries as {@code map}, sorted by the natural\n   * ordering of the keys.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually\n   * comparable.\n   *\n   * @throws ClassCastException if the keys in {@code map} are not mutually comparable\n   * @throws NullPointerException if any key or value in {@code map} is null\n   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering",
  "com.google.common.collect.MapMakerInternalMap$Segment:put(java.lang.Object,int,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Maps$Values:forEach(java.util.function.Consumer)" : null,
  "com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String)" : "* Returns the unsigned {@code int} value represented by the given decimal string.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String)} instead.\n   *\n   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value\n   * @throws NullPointerException if {@code s} is null (in contrast to {@link\n   *     Integer#parseInt(String)})",
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordHits(int)" : "* @since 11.0",
  "com.google.common.collect.ImmutableRangeMap:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.ImmutableSetMultimap:inverse()" : "* {@inheritDoc}\n   *\n   * <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and\n   * value, this method returns an {@code ImmutableSetMultimap} rather than the {@code\n   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.",
  "com.google.common.collect.TreeMultimap:createCollection(java.lang.Object)" : null,
  "com.google.common.cache.CacheBuilder:getInitialCapacity()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)" : null,
  "com.google.common.collect.AbstractIterator:endOfData()" : "* Implementations of {@link #computeNext} <b>must</b> invoke this method when there are no\n   * elements left in the iteration.\n   *\n   * @return {@code null}; a convenience so your {@code computeNext} implementation can use the\n   *     simple statement {@code return endOfData();}",
  "com.google.common.base.Present:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceListener:terminated(com.google.common.util.concurrent.Service$State)" : null,
  "com.google.common.collect.Maps$NavigableKeySet:ceiling(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken:canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType)" : null,
  "com.google.common.collect.TopKSelector:least(int,java.util.Comparator)" : "* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,\n   * relative to the specified comparator, and returns them via {@link #topK} in ascending order.\n   *\n   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",
  "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:remove()" : null,
  "com.google.common.net.MediaType:createImageType(java.lang.String)" : "* Creates a media type with the \"image\" type and the given subtype.\n   *\n   * @throws IllegalArgumentException if subtype is invalid",
  "com.google.common.collect.ArrayListMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the\n   *     key, number of values for that key, and the key's values",
  "com.google.common.collect.FilteredEntryMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeMap$SerializedForm:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(int)" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap:firstKey()" : null,
  "com.google.common.collect.LinkedListMultimap$KeyList:<init>(com.google.common.collect.LinkedListMultimap$Node)" : null,
  "com.google.common.collect.Maps$Values:clear()" : null,
  "com.google.common.collect.GeneralRange:all(java.util.Comparator)" : "Returns the whole range relative to the specified comparator.",
  "com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:<init>(com.google.common.reflect.TypeToken$TypeCollector)" : null,
  "com.google.common.collect.CompactLinkedHashMap:setSucceeds(int,int)" : null,
  "com.google.common.util.concurrent.AtomicDouble:updateAndGet(java.util.function.DoubleUnaryOperator)" : "* Atomically updates the current value with the results of applying the given function.\n   *\n   * @param updateFunction the update function\n   * @return the updated value\n   * @since 31.1",
  "com.google.common.collect.ImmutableMultiset:iterator()" : null,
  "com.google.common.io.ByteSource:read()" : "* Reads the full contents of this byte source as a byte array.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source",
  "com.google.common.collect.Maps:newConcurrentMap()" : "* Creates a new empty {@link ConcurrentHashMap} instance.\n   *\n   * @since 3.0",
  "com.google.common.collect.Lists:newCopyOnWriteArrayList()" : "* Creates an empty {@code CopyOnWriteArrayList} instance.\n   *\n   * <p><b>Note:</b> if you need an immutable empty {@link List}, use {@link Collections#emptyList}\n   * instead.\n   *\n   * @return a new, empty {@code CopyOnWriteArrayList}\n   * @since 12.0",
  "com.google.common.eventbus.Subscriber:create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)" : "Creates a {@code Subscriber} for {@code method} on {@code listener}.",
  "com.google.common.primitives.Ints:saturatedCast(long)" : "* Returns the {@code int} nearest in value to {@code value}.\n   *\n   * @param value any {@code long} value\n   * @return the same value cast to {@code int} if it is in the range of the {@code int} type,\n   *     {@link Integer#MAX_VALUE} if it is too large, or {@link Integer#MIN_VALUE} if it is too\n   *     small",
  "com.google.common.net.MediaType:create(java.lang.String,java.lang.String)" : "* Creates a new media type with the given type and subtype.\n   *\n   * @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the\n   *     type, but not the subtype.",
  "com.google.common.base.Verify:<init>()" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:toString()" : null,
  "com.google.common.hash.Funnels$StringCharsetFunnel:hashCode()" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.ForwardingBlockingDeque:putFirst(java.lang.Object)" : null,
  "com.google.common.primitives.Doubles$DoubleArrayAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$AsMap:keySet()" : null,
  "com.google.common.collect.TreeTraverser$BreadthFirstIterator:hasNext()" : null,
  "com.google.common.util.concurrent.Striped:ceilToPowerOfTwo(int)" : null,
  "com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)" : "* Creates a new input stream that will encode the characters from {@code reader} into bytes using\n   * the given character set encoder.\n   *\n   * @param reader input source\n   * @param encoder character set encoder used for encoding chars to bytes\n   * @param bufferSize size of internal input and output buffers\n   * @throws IllegalArgumentException if bufferSize is non-positive",
  "com.google.common.collect.EnumMultiset:writeObject(java.io.ObjectOutputStream)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:<init>(java.util.NavigableSet,java.lang.Object)" : null,
  "com.google.common.base.PairwiseEquivalence:toString()" : null,
  "com.google.common.util.concurrent.AbstractFuture$Failure:<init>(java.lang.Throwable)" : null,
  "com.google.common.io.LittleEndianDataInputStream:readChar()" : "* Reads a char as specified by {@link DataInputStream#readChar()}, except using little-endian\n   * byte order.\n   *\n   * @return the next two bytes of the input stream, interpreted as a {@code char} in little-endian\n   *     byte order\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.ForwardingSet:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.ArrayTable$Column:getKeyRole()" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:tailMap(java.lang.Object,boolean)" : null,
  "com.google.common.hash.Fingerprint2011:hashBytes(byte[],int,int)" : null,
  "com.google.common.collect.CompactHashMap$KeySetView:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.RegularImmutableSortedSet:headIndex(java.lang.Object,boolean)" : null,
  "com.google.common.base.Splitter:<init>(com.google.common.base.Splitter$Strategy)" : null,
  "com.google.common.collect.HashMultiset:<init>(int)" : null,
  "com.google.common.collect.CompactHashMap:isEmpty()" : null,
  "com.google.common.collect.ImmutableSortedMap:of(java.util.Comparator,java.lang.Object,java.lang.Object)" : "Returns an immutable map containing a single entry.",
  "com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)" : "* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a\n   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect\n   * the other.\n   *\n   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all\n   * other methods are supported by the multimap and its views. When adding a key that doesn't\n   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code\n   * replaceValues()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the\n   * underlying multimap.\n   *\n   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every\n   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n   * copy.\n   *\n   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 14.0",
  "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:delegate()" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:addAll(java.util.Collection)" : null,
  "com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.util.concurrent.Callable)" : null,
  "com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.net.HostAndPort:equals(java.lang.Object)" : null,
  "com.google.common.reflect.Types:<init>()" : null,
  "com.google.common.collect.ImmutableMap$Builder:buildKeepingLast()" : "* Returns a newly-created immutable map, using the last value for any key that was added more\n     * than once. The iteration order of the returned map is the order in which entries were\n     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case\n     * entries are sorted by value. If a key was added more than once, it appears in iteration order\n     * based on the first time it was added, again unless {@link #orderEntriesByValue} was called.\n     *\n     * <p>In the current implementation, all values associated with a given key are stored in the\n     * {@code Builder} object, even though only one of them will be used in the built map. If there\n     * can be many repeated keys, it may be more space-efficient to use a {@link\n     * java.util.LinkedHashMap LinkedHashMap} and {@link ImmutableMap#copyOf(Map)} rather than\n     * {@code ImmutableMap.Builder}.\n     *\n     * @since 31.1",
  "com.google.common.util.concurrent.WrappingExecutorService:wrapTasks(java.util.Collection)" : "* Wraps a collection of tasks.\n   *\n   * @throws NullPointerException if any element of {@code tasks} is null",
  "com.google.common.cache.RemovalCause$3:wasEvicted()" : "* Returns {@code true} if there was an automatic removal due to eviction (the cause is neither\n   * {@link #EXPLICIT} nor {@link #REPLACED}).",
  "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder:getBestComparator()" : "* Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable\n     * to do so.",
  "com.google.common.collect.ImmutableMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.io.ByteStreams:toByteArrayInternal(java.io.InputStream,java.util.Queue,int)" : "* Returns a byte array containing the bytes from the buffers already in {@code bufs} (which have\n   * a total combined length of {@code totalLen} bytes) followed by all bytes remaining in the given\n   * input stream.",
  "com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function)" : null,
  "com.google.common.collect.Queues:newPriorityQueue()" : "* Creates an empty {@code PriorityQueue} with the ordering given by its elements' natural\n   * ordering.\n   *\n   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}\n   *     in 15.0)",
  "com.google.common.collect.MapMakerInternalMap:size()" : null,
  "com.google.common.collect.ImmutableMapEntrySet:<init>()" : null,
  "com.google.common.collect.Tables:unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable)" : "* Returns an unmodifiable view of the specified row-sorted table. This method allows modules to\n   * provide users with \"read-only\" access to internal tables. Query operations on the returned\n   * table \"read through\" to the specified table, and attempts to modify the returned table, whether\n   * direct or via its collection views, result in an {@code UnsupportedOperationException}.\n   *\n   * <p>The returned table will be serializable if the specified table is serializable.\n   *\n   * @param table the row-sorted table for which an unmodifiable view is to be returned\n   * @return an unmodifiable view of the specified table\n   * @since 11.0",
  "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:byteArray()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:get(java.lang.Object)" : null,
  "com.google.common.graph.AbstractGraph:incidentEdges(java.lang.Object)" : null,
  "com.google.common.collect.Iterators:checkNonnegative(int)" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap:putInstance(java.lang.Class,java.lang.Object)" : null,
  "com.google.common.collect.Collections2$OrderedPermutationCollection:calculateSize(java.util.List,java.util.Comparator)" : "* The number of permutations with repeated elements is calculated as follows:\n     *\n     * <ul>\n     *   <li>For an empty list, it is 1 (base case).\n     *   <li>When r numbers are added to a list of n-r elements, the number of permutations is\n     *       increased by a factor of (n choose r).\n     * </ul>",
  "com.google.common.collect.HashMultiset:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.CompactHashSet:contains(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingExecutorService:invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Sets$SubSet:size()" : null,
  "com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:readResolve()" : null,
  "com.google.common.collect.ForwardingMap:standardHashCode()" : "* A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link\n   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.graph.EdgesConnecting:iterator()" : null,
  "com.google.common.math.LongMath:log2(long,java.math.RoundingMode)" : "* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not a power of two",
  "com.google.common.collect.TreeMultiset:pollFirstEntry()" : null,
  "com.google.common.collect.ImmutableEnumMap:keyIterator()" : null,
  "com.google.common.primitives.Chars$CharArrayAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedSet:higher(java.lang.Object)" : "* @since 12.0",
  "com.google.common.collect.Maps:keyIterator(java.util.Iterator)" : null,
  "com.google.common.hash.Hashing:hmacSha512(byte[])" : "* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the\n   * SHA-512 (512 hash bits) hash function and a {@link SecretKeySpec} created from the given byte\n   * array and the SHA-512 algorithm.\n   *\n   * @param key the key material of the secret key\n   * @since 20.0",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:subList(int,int)" : null,
  "com.google.common.collect.ImmutableMultiset:of(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n   * described in the class documentation.\n   *\n   * @throws NullPointerException if any element is null\n   * @since 6.0 (source-compatible since 2.0)",
  "com.google.common.io.ByteStreams:newDataOutput()" : "Returns a new {@link ByteArrayDataOutput} instance with a default size.",
  "com.google.common.collect.RegularImmutableMultiset:create(java.util.Collection)" : null,
  "com.google.common.math.StatsAccumulator:add(double)" : "Adds the given value to the dataset.",
  "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:map()" : null,
  "com.google.common.collect.ImmutableCollection$Builder:addAll(java.util.Iterator)" : "* Adds each element of {@code elements} to the {@code ImmutableCollection} being built.\n     *\n     * <p>Note that each builder class overrides this method in order to covariantly return its own\n     * type.\n     *\n     * @param elements the elements to add\n     * @return this {@code Builder} instance\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.math.LongMath:lessThanBranchFree(long,long)" : "* Returns 1 if {@code x < y} as unsigned longs, and 0 otherwise. Assumes that x - y fits into a\n   * signed long. The implementation is branch-free, and benchmarks suggest it is measurably faster\n   * than the straightforward ternary expression.",
  "com.google.common.util.concurrent.ServiceManager:awaitStopped()" : "* Waits for the all the services to reach a terminal state. After this method returns all\n   * services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain\n   * Service.State#FAILED failed}.",
  "com.google.common.collect.Iterators$PeekingImpl:peek()" : null,
  "com.google.common.util.concurrent.Striped$WeakSafeCondition:delegate()" : null,
  "com.google.common.collect.StandardTable$RowMap:containsKey(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$StrongValueReference:<init>(java.lang.Object)" : null,
  "com.google.common.hash.HashingInputStream:<init>(com.google.common.hash.HashFunction,java.io.InputStream)" : "* Creates an input stream that hashes using the given {@link HashFunction} and delegates all data\n   * read from it to the underlying {@link InputStream}.\n   *\n   * <p>The {@link InputStream} should not be read from before or after the hand-off.",
  "com.google.common.cache.LocalCache$Segment:removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference)" : null,
  "com.google.common.collect.ImmutableSortedMultiset$Builder:add(java.lang.Object)" : "* Adds {@code element} to the {@code ImmutableSortedMultiset}.\n     *\n     * @param element the element to add\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code element} is null",
  "com.google.common.graph.ImmutableGraph:isDirected()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingSet()" : null,
  "com.google.common.cache.LocalCache:evictsBySize()" : null,
  "com.google.common.collect.AbstractRangeSet:addAll(com.google.common.collect.RangeSet)" : null,
  "com.google.common.math.Stats:max()" : "* Returns the highest value in the dataset. The count must be non-zero.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it\n   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link\n   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values\n   * only then the result is the highest finite value. If it contains {@link\n   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:bitCount()" : "* Number of set bits (1s).\n     *\n     * <p>Note that because of concurrent set calls and uses of atomics, this bitCount is a (very)\n     * close *estimate* of the actual number of bits set. It's not possible to do better than an\n     * estimate without locking. Note that the number, if not exactly accurate, is *always*\n     * underestimating, never overestimating.",
  "com.google.common.collect.Cut$BelowAll:typeAsUpperBound()" : null,
  "com.google.common.collect.Iterators:getOnlyElement(java.util.Iterator,java.lang.Object)" : "* Returns the single element contained in {@code iterator}, or {@code defaultValue} if the\n   * iterator is empty.\n   *\n   * @throws IllegalArgumentException if the iterator contains multiple elements. The state of the\n   *     iterator is unspecified.",
  "com.google.common.util.concurrent.Futures:immediateFuture(java.lang.Object)" : "* Creates a {@code ListenableFuture} which has its value set immediately upon construction. The\n   * getters just return the value. This {@code Future} can't be canceled or timed out and its\n   * {@code isDone()} method always returns {@code true}.",
  "com.google.common.graph.Traverser:<init>(com.google.common.graph.SuccessorsFunction)" : null,
  "com.google.common.graph.StandardValueGraph:adjacentNodes(java.lang.Object)" : null,
  "com.google.common.math.DoubleUtils:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry:getNext()" : null,
  "com.google.common.collect.CompactLinkedHashMap:convertToHashFloodingResistantImplementation()" : null,
  "com.google.common.net.InternetDomainName:registrySuffixIndex()" : "* The index in the {@link #parts()} list at which the registry suffix begins. For example, for\n   * the domain name {@code myblog.blogspot.co.uk}, the value would be 2 (the index of the {@code\n   * co} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no registry suffix\n   * was found.",
  "com.google.common.reflect.Parameter:getDeclaredAnnotations()" : "* @since 18.0",
  "com.google.common.base.JdkPattern$JdkMatcher:matches()" : null,
  "com.google.common.io.CharSource$CharSequenceCharSource:readLines()" : null,
  "com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : "* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges\n   * from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean\n   * flags.\n   *\n   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link\n   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.\n   * However, this method doesn't throw an exception in that situation, but instead keeps the\n   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of\n   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.\n   *\n   * @since 12.0",
  "com.google.common.collect.CollectCollectors:toImmutableRangeSet()" : null,
  "com.google.common.collect.EnumMultiset:contains(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData key comparator, value comparator, number of distinct keys, and then for each\n   *     distinct key: the key, number of values for that key, and key values",
  "com.google.common.primitives.Shorts:<init>()" : null,
  "com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:<init>(com.google.common.collect.ImmutableBiMap)" : null,
  "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event:<init>(java.lang.Object,java.util.Iterator)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:dispatchListenerEvents()" : "Attempts to execute all the listeners in {@link #listeners}.",
  "com.google.common.primitives.Floats:lastIndexOf(float[],float,int,int)" : null,
  "com.google.common.collect.IndexedImmutableSet:spliterator()" : null,
  "com.google.common.util.concurrent.SequentialExecutor$1:toString()" : null,
  "com.google.common.primitives.Floats$LexicographicalComparator:compare(float[],float[])" : null,
  "com.google.common.base.Functions$FunctionComposition:toString()" : null,
  "com.google.common.primitives.ImmutableIntArray:readResolve()" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:isEmpty()" : null,
  "com.google.common.collect.ArrayTable:putAll(com.google.common.collect.Table)" : "* {@inheritDoc}\n   *\n   * <p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table,\n   * possibly replacing values that were previously non-null.\n   *\n   * @throws NullPointerException if {@code table} has a null key\n   * @throws IllegalArgumentException if any of the provided table's row keys or column keys is not\n   *     in {@link #rowKeySet()} or {@link #columnKeySet()}",
  "com.google.common.collect.FilteredEntryMultimap:entryPredicate()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeShort(int)" : null,
  "com.google.common.collect.CompactLinkedHashSet:clear()" : null,
  "com.google.common.collect.ForwardingMap:size()" : null,
  "com.google.common.collect.CompactHashMap:setHashTableMask(int)" : "Stores the hash table mask as the number of bits needed to represent an index.",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int,long)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.HashMultiset:iterator()" : null,
  "com.google.common.collect.ImmutableRangeSet$AsSet:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$Keys:count(java.lang.Object)" : null,
  "com.google.common.base.Converter:equals(java.lang.Object)" : "* <i>May</i> return {@code true} if {@code object} is a {@code Converter} that behaves\n   * identically to this converter.\n   *\n   * <p><b>Warning: do not depend</b> on the behavior of this method.\n   *\n   * <p>Historically, {@code Converter} instances in this library have implemented this method to\n   * recognize certain cases where distinct {@code Converter} instances would in fact behave\n   * identically. However, this is not true of {@code Converter} implementations in general. It is\n   * best not to depend on it.",
  "com.google.common.io.CharSink:openBufferedStream()" : "* Opens a new buffered {@link Writer} for writing to this sink. The returned stream is not\n   * required to be a {@link BufferedWriter} in order to allow implementations to simply delegate to\n   * {@link #openStream()} when the stream returned by that method does not benefit from additional\n   * buffering. This method returns a new, independent writer each time it is called.\n   *\n   * <p>The caller is responsible for ensuring that the returned writer is closed.\n   *\n   * @throws IOException if an I/O error occurs while opening the writer\n   * @since 15.0 (in 14.0 with return type {@link BufferedWriter})",
  "com.google.common.collect.LinkedListMultimap:values()" : "* {@inheritDoc}\n   *\n   * <p>The iterator generated by the returned collection traverses the values in the order they\n   * were added to the multimap. Because the values may have duplicates and follow the insertion\n   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in\n   * the {@link ListMultimap} interface.",
  "com.google.common.primitives.Ints:toArray(java.util.Collection)" : "* Returns an array containing each value of {@code collection}, converted to a {@code int} value\n   * in the manner of {@link Number#intValue}.\n   *\n   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n   * Calling this method is as thread-safe as calling that method.\n   *\n   * @param collection a collection of {@code Number} instances\n   * @return an array containing the same values as {@code collection}, in the same order, converted\n   *     to primitives\n   * @throws NullPointerException if {@code collection} or any of its elements is null\n   * @since 1.0 (parameter was {@code Collection<Integer>} before 12.0)",
  "com.google.common.graph.StandardMutableNetwork:newConnections()" : null,
  "com.google.common.collect.ImmutableMultimap:keys()" : "* Returns an immutable multiset containing all the keys in this multimap, in the same order and\n   * with the same frequencies as they appear in this multimap; to get only a single occurrence of\n   * each key, use {@link #keySet}.",
  "com.google.common.collect.RowSortedTable:rowMap()" : "* {@inheritDoc}\n   *\n   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link\n   * Table} interface.",
  "com.google.common.base.Splitter:trimResults(com.google.common.base.CharMatcher)" : null,
  "com.google.common.collect.MapMaker:getKeyEquivalence()" : null,
  "com.google.common.primitives.ImmutableLongArray$AsList:contains(java.lang.Object)" : null,
  "com.google.common.math.StatsAccumulator:populationVariance()" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Variance#Population_variance\">population\n   * variance</a> of the values. The count must be non-zero.\n   *\n   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It\n   * is not guaranteed to return zero when the dataset consists of the same value multiple times,\n   * due to numerical errors. However, it is guaranteed never to return a negative result.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Iterable)" : null,
  "com.google.common.cache.ForwardingCache$SimpleForwardingCache:delegate()" : null,
  "com.google.common.base.Optional:fromNullable(java.lang.Object)" : "* If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that\n   * reference; otherwise returns {@link Optional#absent}.\n   *\n   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's\n   * {@code Optional.ofNullable}.",
  "com.google.common.graph.ForwardingNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap$Builder:putAll(java.util.Map)" : "* Associates all of the given map's keys and values in the built map. If the same key is put\n     * more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep\n     * the last value put for that key.\n     *\n     * @throws NullPointerException if any key or value in {@code map} is null",
  "com.google.common.net.HostSpecifier:fromValid(java.lang.String)" : "* Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already\n   * known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)}\n   * instead.\n   *\n   * <p>The specifier must be in one of these formats:\n   *\n   * <ul>\n   *   <li>A domain name, like {@code google.com}\n   *   <li>A IPv4 address string, like {@code 127.0.0.1}\n   *   <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or {@code\n   *       2001:db8::1}\n   * </ul>\n   *\n   * @throws IllegalArgumentException if the specifier is not valid.",
  "com.google.common.collect.Tables$UnmodifiableTable:row(java.lang.Object)" : null,
  "com.google.common.primitives.Floats:tryParse(java.lang.String)" : "* Parses the specified string as a single-precision floating point value. The ASCII character\n   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n   *\n   * <p>Unlike {@link Float#parseFloat(String)}, this method returns {@code null} instead of\n   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link\n   * Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n   *\n   * <p>This implementation is likely to be faster than {@code Float.parseFloat} if many failures\n   * are expected.\n   *\n   * @param string the string representation of a {@code float} value\n   * @return the floating point value represented by {@code string}, or {@code null} if {@code\n   *     string} has a length of zero or cannot be parsed as a {@code float} value\n   * @throws NullPointerException if {@code string} is {@code null}\n   * @since 14.0",
  "com.google.common.cache.ForwardingCache:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.io.MoreFiles$PathByteSource:openStream()" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:descendingIterator()" : null,
  "com.google.common.collect.ArrayTable:at(int,int)" : "* Returns the value corresponding to the specified row and column indices. The same value is\n   * returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this\n   * method runs more quickly.\n   *\n   * @param rowIndex position of the row key in {@link #rowKeyList()}\n   * @param columnIndex position of the row key in {@link #columnKeyList()}\n   * @return the value with the specified row and column\n   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than\n   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal\n   *     to the number of allowed column keys",
  "com.google.common.cache.LocalCache:getLiveValue(com.google.common.cache.ReferenceEntry,long)" : "* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,\n   * loading, or expired. Unlike {@link Segment#getLiveValue} this method does not attempt to clean\n   * up stale entries. As such it should only be called outside a segment context, such as during\n   * iteration.",
  "com.google.common.primitives.Longs:fromByteArray(byte[])" : "* Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes\n   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the\n   * input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the\n   * {@code long} value {@code 0x1213141516171819L}.\n   *\n   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n   * flexibility at little cost in readability.\n   *\n   * @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements",
  "com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:delegate()" : null,
  "com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor)" : "* Submits a blocking task for the given {@link Future} to provide {@link ListenableFuture}\n   * functionality.\n   *\n   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the\n   * returned future will emulate {@link ListenableFuture#addListener} by submitting a task to the\n   * given executor at the first call to {@code addListener}. The task must be started by the\n   * executor promptly, or else the returned {@code ListenableFuture} may fail to work. The task's\n   * execution consists of blocking until the input future is {@linkplain Future#isDone() done}, so\n   * each call to this method may claim and hold a thread for an arbitrary length of time. Use of\n   * bounded executors or other executors that may fail to execute a task promptly may result in\n   * deadlocks.\n   *\n   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link\n   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link\n   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code\n   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.\n   *\n   * @since 12.0",
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:<init>(java.util.NavigableMap,java.lang.Object)" : null,
  "com.google.common.base.Functions$SupplierFunction:hashCode()" : null,
  "com.google.common.hash.AbstractStreamingHasher:putBytes(java.nio.ByteBuffer)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:write(byte[])" : null,
  "com.google.common.collect.ImmutableCollection:addAll(java.util.Collection)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeBoolean(boolean)" : null,
  "com.google.common.collect.AbstractNavigableMap:tailMap(java.lang.Object)" : null,
  "com.google.common.math.LinearTransformation$NaNLinearTransformation:slope()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:unlock()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)" : null,
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:equals(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:createAsList()" : null,
  "com.google.common.collect.ImmutableList:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder} constructor.",
  "com.google.common.collect.UnmodifiableSortedMultiset:<init>(com.google.common.collect.SortedMultiset)" : null,
  "com.google.common.base.Throwables:getCausalChain(java.lang.Throwable)" : "* Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code\n   * throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and\n   * will not reflect any subsequent changes to the cause chain.\n   *\n   * <p>Here's an example of how it can be used to find specific types of exceptions in the cause\n   * chain:\n   *\n   * <pre>\n   * Iterables.filter(Throwables.getCausalChain(e), IOException.class));\n   * </pre>\n   *\n   * @param throwable the non-null {@code Throwable} to extract causes from\n   * @return an unmodifiable list containing the cause chain starting with {@code throwable}\n   * @throws IllegalArgumentException if there is a loop in the causal chain",
  "com.google.common.collect.RegularContiguousSet:isPartialView()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:delegate()" : null,
  "com.google.common.util.concurrent.ClosingFuture:derive(com.google.common.util.concurrent.FluentFuture)" : null,
  "com.google.common.collect.MapMakerInternalMap:writeReplace()" : null,
  "com.google.common.collect.ImmutableSortedSet:orderedBy(java.util.Comparator)" : "* Returns a builder that creates immutable sorted sets with an explicit comparator. If the\n   * comparator has a more general type than the set being generated, such as creating a {@code\n   * SortedSet<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor\n   * instead.\n   *\n   * @throws NullPointerException if {@code comparator} is null",
  "com.google.common.collect.Maps$EntrySet:clear()" : null,
  "com.google.common.collect.ForwardingMultimap:containsEntry(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingSet()" : null,
  "com.google.common.cache.LocalCache$Strength$2:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)" : "Creates a reference for the given value according to this value strength.",
  "com.google.common.util.concurrent.TimeoutFuture$Fire:<init>(com.google.common.util.concurrent.TimeoutFuture)" : null,
  "com.google.common.collect.ImmutableSortedMap$Builder:put(java.util.Map$Entry)" : "* Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys,\n     * according to the comparator (which might be the keys' natural order), are not allowed, and\n     * will cause {@link #build} to fail.\n     *\n     * @since 11.0",
  "com.google.common.collect.Iterators$ConcatenatedIterator:<init>(java.util.Iterator)" : null,
  "com.google.common.collect.FilteredKeyListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.EnumBiMap:inverse()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:removeAll(java.util.Collection)" : null,
  "com.google.common.math.IntMath:binomial(int,int)" : "* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and\n   * {@code k}, or {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}.\n   *\n   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}",
  "com.google.common.collect.Maps$FilteredEntrySortedMap:createKeySet()" : null,
  "com.google.common.cache.CacheLoader$1:load(java.lang.Object)" : "* Computes or retrieves the value corresponding to {@code key}.\n   *\n   * @param key the non-null key whose value should be loaded\n   * @return the value associated with {@code key}; <b>must not be null</b>\n   * @throws Exception if unable to load the result\n   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is\n   *     treated like any other {@code Exception} in all respects except that, when it is caught,\n   *     the thread's interrupt status is set",
  "com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction,java.util.Comparator)" : null,
  "com.google.common.primitives.ImmutableIntArray:toString()" : "* Returns a string representation of this array in the same form as {@link\n   * Arrays#toString(int[])}, for example {@code \"[1, 2, 3]\"}.",
  "com.google.common.hash.SipHashFunction$SipHasher:makeHash()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.Interners$InternerBuilder:<init>()" : null,
  "com.google.common.collect.JdkBackedImmutableMultiset:elementSet()" : null,
  "com.google.common.collect.Maps$FilteredEntryMap:removeAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection)" : null,
  "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:get(java.lang.Object)" : null,
  "com.google.common.net.InternetDomainName:validatePart(java.lang.String,boolean)" : "* Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is\n   * valid.\n   *\n   * @param part The domain name part to be validated\n   * @param isFinalPart Is this the final (rightmost) domain part?\n   * @return Whether the part is valid",
  "com.google.common.collect.Synchronized$SynchronizedMap:values()" : null,
  "com.google.common.base.JdkPattern:matcher(java.lang.CharSequence)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:getDelegate()" : null,
  "com.google.common.collect.MoreCollectors$ToOptionalState:multiples(boolean)" : null,
  "com.google.common.collect.AbstractBiMap:setInverse(com.google.common.collect.AbstractBiMap)" : null,
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:enumSetValues(java.lang.Class)" : "Uses an {@link EnumSet} to store value collections.",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Iterables$UnmodifiableIterable:toString()" : null,
  "com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit)" : "* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}\n   * uninterruptibly.",
  "com.google.common.base.CharMatcher$Is:toString()" : null,
  "com.google.common.io.CharStreams:readLines(java.lang.Readable,com.google.common.io.LineProcessor)" : "* Streams lines from a {@link Readable} object, stopping when the processor returns {@code false}\n   * or all lines have been read and returning the result produced by the processor. Does not close\n   * {@code readable}. Note that this method may not fully consume the contents of {@code readable}\n   * if the processor stops processing early.\n   *\n   * @throws IOException if an I/O error occurs\n   * @since 14.0",
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:slope()" : null,
  "com.google.common.hash.AbstractByteHasher:update(java.nio.ByteBuffer)" : "Updates this hasher with bytes from the given buffer.",
  "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:readMicros()" : null,
  "com.google.common.collect.EmptyContiguousSet:writeReplace()" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)" : null,
  "com.google.common.collect.AbstractBiMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.DenseImmutableTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.math.StatsAccumulator:count()" : "Returns the number of values.",
  "com.google.common.collect.Synchronized$SynchronizedAsMapValues:iterator()" : null,
  "com.google.common.util.concurrent.ClosingFuture:eventuallyClosing(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.Executor)" : "* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.\n   *\n   * <p>If {@code future} succeeds, its value will be closed (using {@code closingExecutor)}) when\n   * the pipeline is done, even if the pipeline is canceled or fails.\n   *\n   * <p>Cancelling the pipeline will not cancel {@code future}, so that the pipeline can access its\n   * value in order to close it.\n   *\n   * @param future the future to create the {@code ClosingFuture} from. For discussion of the\n   *     future's result type {@code C}, see {@link DeferredCloser#eventuallyClose(Object,\n   *     Executor)}.\n   * @param closingExecutor the future's result will be closed on this executor\n   * @deprecated Creating {@link Future}s of closeable types is dangerous in general because the\n   *     underlying value may never be closed if the {@link Future} is canceled after its operation\n   *     begins. Consider replacing code that creates {@link ListenableFuture}s of closeable types,\n   *     including those that pass them to this method, with {@link #submit(ClosingCallable,\n   *     Executor)} in order to ensure that resources do not leak. Or, to start a pipeline with a\n   *     {@link ListenableFuture} that doesn't create values that should be closed, use {@link\n   *     ClosingFuture#from}.",
  "com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet,java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char,long)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.graph.NetworkBuilder:from(com.google.common.graph.Network)" : "* Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code\n   * network}.\n   *\n   * <p>The \"queryable\" properties are those that are exposed through the {@link Network} interface,\n   * such as {@link Network#isDirected()}. Other properties, such as {@link\n   * #expectedNodeCount(int)}, are not set in the new builder.",
  "com.google.common.collect.AbstractRangeSet:remove(com.google.common.collect.Range)" : null,
  "com.google.common.collect.ImmutableRangeSet:asRanges()" : null,
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:hashCode()" : null,
  "com.google.common.collect.ForwardingSortedMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:descendingMap()" : null,
  "com.google.common.collect.AbstractListMultimap:put(java.lang.Object,java.lang.Object)" : "* Stores a key-value pair in the multimap.\n   *\n   * @param key key to store in the multimap\n   * @param value value to store in the multimap\n   * @return {@code true} always",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.collect.ImmutableSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.util.concurrent.Striped:lock(int)" : "* Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks. Every lock\n   * is reentrant.\n   *\n   * @param stripes the minimum number of stripes (locks) required\n   * @return a new {@code Striped<Lock>}",
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:review()" : null,
  "com.google.common.collect.AbstractMultiset:toString()" : "* {@inheritDoc}\n   *\n   * <p>This implementation returns the result of invoking {@code toString} on {@link\n   * Multiset#entrySet()}.",
  "com.google.common.primitives.Booleans$BooleanArrayAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache:getAllPresent(java.lang.Iterable)" : null,
  "com.google.common.reflect.TypeToken$1:getGenericParameterTypes()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:createMaybeNavigableAsMap()" : null,
  "com.google.common.primitives.UnsignedLongs:<init>()" : null,
  "com.google.common.primitives.ImmutableIntArray:copyOf(java.util.stream.IntStream)" : "* Returns an immutable array containing all the values from {@code stream}, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.ClosingFuture$DeferredCloser:eventuallyClose(java.lang.Object,java.util.concurrent.Executor)" : "* Captures an object to be closed when a {@link ClosingFuture} pipeline is done.\n     *\n     * <p>For users of the {@code -jre} flavor of Guava, the object can be any {@code\n     * AutoCloseable}. For users of the {@code -android} flavor, the object must be a {@code\n     * Closeable}. (For more about the flavors, see <a\n     * href=\"https://github.com/google/guava#adding-guava-to-your-build\">Adding Guava to your\n     * build</a>.)\n     *\n     * <p>Be careful when targeting an older SDK than you are building against (most commonly when\n     * building for Android): Ensure that any object you pass implements the interface not just in\n     * your current SDK version but also at the oldest version you support. For example, <a\n     * href=\"https://developer.android.com/sdk/api_diff/16/\">API Level 16</a> is the first version\n     * in which {@code Cursor} is {@code Closeable}. To support older versions, pass a wrapper\n     * {@code Closeable} with a method reference like {@code cursor::close}.\n     *\n     * <p>Note that this method is still binary-compatible between flavors because the erasure of\n     * its parameter type is {@code Object}, not {@code AutoCloseable} or {@code Closeable}.\n     *\n     * @param closeable the object to be closed (see notes above)\n     * @param closingExecutor the object will be closed on this executor\n     * @return the first argument",
  "com.google.common.base.CharMatcher$Is:setBits(java.util.BitSet)" : null,
  "com.google.common.primitives.UnsignedInts:toLong(int)" : "* Returns the value of the given {@code int} as a {@code long}, when treated as unsigned.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedLong(int)} instead.",
  "com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)" : "* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the\n   * specified supplier, whose cells are generated by applying the provided mapping functions to the\n   * input elements. Cells are inserted into the generated {@code Table} in encounter order.\n   *\n   * <p>If multiple input elements map to the same row and column, the specified merging function is\n   * used to combine the values. Like {@link\n   * java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function,\n   * BinaryOperator, java.util.function.Supplier)}, this Collector throws a {@code\n   * NullPointerException} on null values returned from {@code valueFunction}, and treats nulls\n   * returned from {@code mergeFunction} as removals of that row/column pair.\n   *\n   * @since 21.0",
  "com.google.common.collect.AbstractMapBasedMultimap:setMap(java.util.Map)" : "Used during deserialization only.",
  "com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Object[])" : null,
  "com.google.common.collect.AbstractNavigableMap$DescendingMap:forward()" : null,
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:entryIterator()" : null,
  "com.google.common.graph.ForwardingNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.base.CharMatcher$InRange:setBits(java.util.BitSet)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$LinkedWeakKeyStrongValueEntry:getNext()" : null,
  "com.google.common.cache.LocalCache$Segment:put(java.lang.Object,int,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Lists$CharSequenceAsList:size()" : null,
  "com.google.common.eventbus.EventBus$LoggingHandler:logger(com.google.common.eventbus.SubscriberExceptionContext)" : null,
  "com.google.common.collect.AbstractTable:containsValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:shutdownNow()" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:toString()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:getSortedSetDelegate()" : null,
  "com.google.common.collect.MutableClassToInstanceMap:putAll(java.util.Map)" : null,
  "com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Iterable)" : "* {@inheritDoc}\n     *\n     * @since 19.0",
  "com.google.common.collect.EnumBiMap:remove(java.lang.Object)" : null,
  "com.google.common.graph.ForwardingGraph:incidentEdges(java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedLongs:sortDescending(long[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order, interpreting them as unsigned 64-bit integers.\n   *\n   * @since 23.1",
  "com.google.common.collect.AbstractMultimap$EntrySet:hashCode()" : null,
  "com.google.common.base.CharMatcher$IsNot:setBits(java.util.BitSet)" : null,
  "com.google.common.primitives.Bytes:ensureCapacity(byte[],int,int)" : "* Returns an array containing the same values as {@code array}, but guaranteed to be of a\n   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n   *\n   * @param array the source array\n   * @param minLength the minimum length the returned array must guarantee\n   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n   *     minLength}",
  "com.google.common.reflect.Invokable:isPrivate()" : "Returns true if the element is private.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:maybeClearReferenceQueues()" : null,
  "com.google.common.collect.Maps:newLinkedHashMapWithExpectedSize(int)" : "* Creates a {@code LinkedHashMap} instance, with a high enough \"initial capacity\" that it\n   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be\n   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed\n   * that the method isn't inadvertently <i>oversizing</i> the returned map.\n   *\n   * @param expectedSize the number of entries you expect to add to the returned map\n   * @return a new, empty {@code LinkedHashMap} with enough capacity to hold {@code expectedSize}\n   *     entries without resizing\n   * @throws IllegalArgumentException if {@code expectedSize} is negative\n   * @since 19.0",
  "com.google.common.io.Closer:<init>(com.google.common.io.Closer$Suppressor)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:maybeClearReferenceQueues()" : null,
  "com.google.common.primitives.Chars$CharArrayAsList:size()" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ImmutableSetMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData number of distinct keys, and then for each distinct key: the key, the number of\n   *     values for that key, and the key's values",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : null,
  "com.google.common.math.BigDecimalMath:<init>()" : null,
  "com.google.common.util.concurrent.ForwardingBlockingQueue:poll(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.ImmutableMultiset:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractFuture:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.SetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}\n   * interface.\n   *\n   * <p>Any duplicates in {@code values} will be stored in the multimap once.",
  "com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleAtFixedRate(java.lang.Runnable,java.time.Duration,java.time.Duration)" : "* Duration-based overload of {@link #scheduleAtFixedRate(Runnable, long, long, TimeUnit)}.\n   *\n   * @since 29.0",
  "com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int)" : "An implementation of {@link Multiset#setCount(Object, int, int)}.",
  "com.google.common.util.concurrent.ForwardingLock:tryLock(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.DescendingMultiset:descendingMultiset()" : null,
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:entryIterator()" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:readEntries(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.CompactLinkedHashSet:getPredecessor(int)" : null,
  "com.google.common.primitives.ImmutableIntArray:spliterator()" : null,
  "com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowMap()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)" : null,
  "com.google.common.cache.CacheBuilderSpec$IntegerParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:getLiveValueForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : "* Unsafely returns the value of the given entry if it's still live, or {@code null} otherwise.",
  "com.google.common.graph.ForwardingValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)" : null,
  "com.google.common.io.LittleEndianDataInputStream:readShort()" : "* Reads a {@code short} as specified by {@link DataInputStream#readShort()}, except using\n   * little-endian byte order.\n   *\n   * @return the next two bytes of the input stream, interpreted as a {@code short} in little-endian\n   *     byte order.\n   * @throws IOException if an I/O error occurs.",
  "com.google.common.hash.Hashing:murmur3_32(int)" : "* Returns a hash function implementing the <a\n   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">32-bit murmur3\n   * algorithm, x86 variant</a> (little-endian variant), using the given seed value, <b>with a known\n   * bug</b> as described in the deprecation text.\n   *\n   * <p>The C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A), which however does not\n   * have the bug.\n   *\n   * @deprecated This implementation produces incorrect hash values from the {@link\n   *     HashFunction#hashString} method if the string contains non-BMP characters. Use {@link\n   *     #murmur3_32_fixed(int)} instead.",
  "com.google.common.base.MoreObjects$ToStringHelper:addValue(double)" : "* Adds an unnamed value to the formatted output.\n     *\n     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a\n     * readable name.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",
  "com.google.common.collect.Iterators:retainAll(java.util.Iterator,java.util.Collection)" : "* Traverses an iterator and removes every element that does not belong to the provided\n   * collection. The iterator will be left exhausted: its {@code hasNext()} method will return\n   * {@code false}.\n   *\n   * @param removeFrom the iterator to (potentially) remove elements from\n   * @param elementsToRetain the elements to retain\n   * @return {@code true} if any element was removed from {@code iterator}",
  "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:<init>(java.lang.Object,int)" : null,
  "com.google.common.collect.CompactLinkedHashSet:requirePredecessors()" : null,
  "com.google.common.collect.ImmutableSetMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder)" : null,
  "com.google.common.base.Converter$ReverseConverter:toString()" : null,
  "com.google.common.collect.MapMakerInternalMap$KeySet:iterator()" : null,
  "com.google.common.collect.ArrayTable:rowKeySet()" : "* Returns an immutable set of the valid row keys, including those that are associated with null\n   * values only.\n   *\n   * @return immutable set of row keys",
  "com.google.common.base.Ascii:isUpperCase(char)" : "* Indicates whether {@code c} is one of the twenty-six uppercase ASCII alphabetic characters\n   * between {@code 'A'} and {@code 'Z'} inclusive. All others (including non-ASCII characters)\n   * return {@code false}.",
  "com.google.common.collect.ImmutableSet$SetBuilderImpl:review()" : "* Call this before build(). Does a final check on the internal data structures, e.g. shrinking\n     * unnecessarily large structures or detecting previously unnoticed hash flooding.",
  "com.google.common.collect.AbstractMapBasedMultiset:count(java.lang.Object)" : null,
  "com.google.common.eventbus.EventBus:register(java.lang.Object)" : "* Registers all subscriber methods on {@code object} to receive events.\n   *\n   * @param object object whose subscriber methods should be registered.",
  "com.google.common.collect.ImmutableMapEntry:isReusable()" : "* Returns true if this entry has no bucket links and can safely be reused as a terminal entry in\n   * a bucket in another map.",
  "com.google.common.util.concurrent.SequentialExecutor$QueueWorker:toString()" : null,
  "com.google.common.cache.LocalCache$WeakEntry:setAccessTime(long)" : null,
  "com.google.common.collect.ForwardingTable:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSet:hashCode()" : null,
  "com.google.common.collect.Lists$Partition:<init>(java.util.List,int)" : null,
  "com.google.common.collect.ImmutableMultimap:createKeys()" : null,
  "com.google.common.math.Quantiles:quartiles()" : "Specifies the computation of quartiles (i.e. 4-quantiles).",
  "com.google.common.collect.MapMaker:initialCapacity(int)" : "* Sets the minimum total size for the internal hash tables. For example, if the initial capacity\n   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each\n   * having a hash table of size eight. Providing a large enough estimate at construction time\n   * avoids the need for expensive resizing operations later, but setting this value unnecessarily\n   * high wastes memory.\n   *\n   * @throws IllegalArgumentException if {@code initialCapacity} is negative\n   * @throws IllegalStateException if an initial capacity was already set",
  "com.google.common.collect.EnumBiMap:inferValueTypeOrObjectUnderJ2cl(java.util.Map)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String)" : "Equivalent to {@code newReentrantReadWriteLock(lockName, false)}.",
  "com.google.common.base.Converter:<init>(boolean)" : "Constructor used only by {@code LegacyConverter} to suspend automatic null-handling.",
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided\n   * @since 31.0",
  "com.google.common.cache.LocalCache$Segment:runLockedCleanup(long)" : null,
  "com.google.common.collect.Maps:newTreeMap()" : "* Creates a <i>mutable</i>, empty {@code TreeMap} instance using the natural ordering of its\n   * elements.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedMap#of()} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code TreeMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @return a new, empty {@code TreeMap}",
  "com.google.common.collect.Iterables:isEmpty(java.lang.Iterable)" : "* Determines if the given iterable contains no elements.\n   *\n   * <p>There is no precise {@link Iterator} equivalent to this method, since one can only ask an\n   * iterator whether it has any elements <i>remaining</i> (which one does using {@link\n   * Iterator#hasNext}).\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}\n   *\n   * @return {@code true} if the iterable contains no elements",
  "com.google.common.collect.ImmutableSortedSet:pollLast()" : "* Guaranteed to throw an exception and leave the set unmodified.\n   *\n   * @since 12.0\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.AbstractRangeSet:contains(java.lang.Comparable)" : null,
  "com.google.common.primitives.ImmutableIntArray:isPartialView()" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:<init>()" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableMultimap#builder}.",
  "com.google.common.util.concurrent.AbstractExecutionThreadService:toString()" : null,
  "com.google.common.collect.Iterators:get(java.util.Iterator,int)" : "* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code\n   * position}th position.\n   *\n   * @param position position of the element to return\n   * @return the element at the specified position in {@code iterator}\n   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to\n   *     the number of elements remaining in {@code iterator}",
  "com.google.common.collect.CompactHashSet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,char,long)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:lowerEntry(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingBlockingDeque:remainingCapacity()" : null,
  "com.google.common.collect.CompactLinkedHashSet:requireSuccessors()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int,int)" : null,
  "com.google.common.collect.MapMakerInternalMap$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableNetwork$Builder:<init>(com.google.common.graph.NetworkBuilder)" : null,
  "com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.util.concurrent.AbstractFuture:clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener)" : "* Clears the {@link #listeners} list and prepends its contents to {@code onto}, least recently\n   * added first.",
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object)" : null,
  "com.google.common.collect.Collections2$PermutationCollection:size()" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @param errorMessageTemplate a template for the exception message should the check fail. The\n   *     message is formed by replacing each {@code %s} placeholder in the template with an\n   *     argument. These are matched by position - the first {@code %s} gets {@code\n   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n   *     square braces. Unmatched placeholders will be left as-is.\n   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments\n   *     are converted to strings using {@link String#valueOf(Object)}.\n   * @throws IllegalStateException if {@code expression} is false\n   * @see Verify#verify Verify.verify()",
  "com.google.common.collect.ImmutableMapEntry:getNextInValueBucket()" : null,
  "com.google.common.collect.CompactHashing:tableSet(java.lang.Object,int,int)" : "* Sets {@code table[index]} to {@code entry}, where {@code table} is actually a {@code byte[]},\n   * {@code short[]}, or {@code int[]}. The value of {@code entry} should fit in the size of the\n   * assigned array element, when seen as an unsigned value. So if {@code table} is a {@code byte[]}\n   * then we should have {@code 0 ≤ entry ≤ 255}, and if {@code table} is a {@code short[]} then we\n   * should have {@code 0 ≤ entry ≤ 65535}. It is the caller's responsibility to ensure this.",
  "com.google.common.util.concurrent.Service$Listener:starting()" : "* Called when the service transitions from {@linkplain State#NEW NEW} to {@linkplain\n     * State#STARTING STARTING}. This occurs when {@link Service#startAsync} is called the first\n     * time.",
  "com.google.common.collect.ArrayTable:valuesSpliterator()" : null,
  "com.google.common.cache.LocalCache:expires()" : null,
  "com.google.common.collect.JdkBackedImmutableMultiset:<init>(java.util.Map,com.google.common.collect.ImmutableList,long)" : null,
  "com.google.common.collect.Lists$ReverseList:reversePosition(int)" : null,
  "com.google.common.hash.AbstractHasher:putBytes(byte[],int,int)" : null,
  "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:toX(double,java.math.RoundingMode)" : null,
  "com.google.common.collect.Synchronized$SynchronizedEntry:<init>(java.util.Map$Entry,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMultiset$SerializedForm:<init>(com.google.common.collect.SortedMultiset)" : null,
  "com.google.common.collect.CompactHashing:createTable(int)" : "Creates and returns a properly-sized array with the given number of buckets.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:getValueReference()" : null,
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(java.util.Comparator)" : "* Uses a {@link TreeSet} ordered by the specified comparator to store value collections.\n     *\n     * <p>Multimaps generated by the resulting builder will not be serializable if {@code\n     * comparator} is not serializable.",
  "com.google.common.base.CaseFormat$2:convert(com.google.common.base.CaseFormat,java.lang.String)" : "Enum values can override for performance reasons.",
  "com.google.common.collect.Maps$DescendingMap:higherKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultiset:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder} constructor.",
  "com.google.common.cache.LocalCache$EntryFactory$2:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultimap$KeysSerializedForm:<init>(com.google.common.collect.ImmutableMultimap)" : null,
  "com.google.common.collect.EmptyContiguousSet:headSetImpl(java.lang.Comparable,boolean)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.escape.CharEscaperBuilder:addEscapes(char[],java.lang.String)" : "Add multiple mappings at once for a particular index.",
  "com.google.common.collect.JdkBackedImmutableMultiset:create(java.util.Collection)" : null,
  "com.google.common.cache.LocalCache$Segment:getFirst(int)" : "Returns first entry of bin for given hash.",
  "com.google.common.collect.StandardTable:createRowMap()" : null,
  "com.google.common.cache.LocalCache$Segment:<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)" : null,
  "com.google.common.net.HostSpecifier:<init>(java.lang.String)" : null,
  "com.google.common.graph.MapIteratorCache:remove(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:size()" : null,
  "com.google.common.collect.ImmutableEnumMap:entryIterator()" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.FilteredMultimapValues:clear()" : null,
  "com.google.common.primitives.Chars:ensureCapacity(char[],int,int)" : "* Returns an array containing the same values as {@code array}, but guaranteed to be of a\n   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n   *\n   * @param array the source array\n   * @param minLength the minimum length the returned array must guarantee\n   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n   *     minLength}",
  "com.google.common.collect.Streams:stream(java.util.OptionalDouble)" : "* If a value is present in {@code optional}, returns a stream containing only that element,\n   * otherwise returns an empty stream.\n   *\n   * <p><b>Java 9 users:</b> use {@code optional.stream()} instead.",
  "com.google.common.reflect.Invokable:getName()" : null,
  "com.google.common.collect.Iterators$ConcatenatedIterator:hasNext()" : null,
  "com.google.common.base.Suppliers$SupplierFunctionImpl:apply(com.google.common.base.Supplier)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:upperCase()" : null,
  "com.google.common.collect.ImmutableMap:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder} constructor.",
  "com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.ForwardingNavigableSet:ceiling(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:getEntry(java.lang.Object,int)" : null,
  "com.google.common.graph.AbstractBaseGraph:degree(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.primitives.UnsignedInteger:dividedBy(com.google.common.primitives.UnsignedInteger)" : "* Returns the result of dividing this by {@code val}.\n   *\n   * @throws ArithmeticException if {@code val} is zero\n   * @since 14.0",
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)" : "* Combines the two BitArrays using bitwise OR.\n     *\n     * <p>NOTE: Because of the use of atomics, if the other LockFreeBitArray is being mutated while\n     * this operation is executing, not all of those new 1's may be set in the final state of this\n     * LockFreeBitArray. The ONLY guarantee provided is that all the bits that were set in the other\n     * LockFreeBitArray at the start of this method will be set in this LockFreeBitArray at the end\n     * of this method.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)" : null,
  "com.google.common.collect.DescendingMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.io.ByteSink:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Multimaps$MapMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:<init>()" : "Constructor for the header node.",
  "com.google.common.collect.ImmutableSet$Builder:addAll(java.lang.Iterable)" : "* Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate\n     * elements (only the first duplicate element is added).\n     *\n     * @param elements the elements to add\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.graph.ImmutableGraph:outDegree(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$LinkedStrongKeyWeakValueEntry:getNext()" : null,
  "com.google.common.collect.RegularImmutableMap$KeySet:<init>(com.google.common.collect.RegularImmutableMap)" : null,
  "com.google.common.util.concurrent.ClosingFuture$3:toString()" : null,
  "com.google.common.collect.DiscreteDomain$IntegerDomain:maxValue()" : null,
  "com.google.common.io.ByteStreams$LimitedInputStream:<init>(java.io.InputStream,long)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)" : "* Updates the value currently associated with {@code key} by combining it with {@code x} via the\n   * specified accumulator function, returning the old value. The previous value associated with\n   * {@code key} (or zero, if there is none) is passed as the first argument to {@code\n   * accumulatorFunction}, and {@code x} is passed as the second argument.\n   *\n   * @since 21.0",
  "com.google.common.base.CharMatcher:trimTrailingFrom(java.lang.CharSequence)" : "* Returns a substring of the input character sequence that omits all matching BMP characters from\n   * the end of the string. For example:\n   *\n   * {@snippet :\n   * CharMatcher.anyOf(\"ab\").trimTrailingFrom(\"abacatbab\")\n   * }\n   *\n   * ... returns {@code \"abacat\"}.",
  "com.google.common.collect.TopKSelector:offerAll(java.lang.Iterable)" : "* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This\n   * operation takes amortized linear time in the length of {@code elements}.\n   *\n   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterable}, prefer\n   * {@link Ordering#leastOf(Iterable, int)}, which provides a simpler API for that use case.",
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:comparator()" : null,
  "com.google.common.io.Files:append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)" : "* Appends a character sequence (such as a string) to a file using the given character set.\n   *\n   * @param from the character sequence to append\n   * @param to the destination file\n   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @throws IOException if an I/O error occurs\n   * @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This\n   *     method is scheduled to be removed in October 2019.",
  "com.google.common.collect.ForwardingList:remove(int)" : null,
  "com.google.common.collect.Multisets:copyHighestCountFirst(com.google.common.collect.Multiset)" : "* Returns a copy of {@code multiset} as an {@link ImmutableMultiset} whose iteration order puts\n   * the highest count first, with ties broken by the iteration order of the original multiset.\n   *\n   * @since 11.0",
  "com.google.common.primitives.UnsignedInts:checkedCast(long)" : "* Returns the {@code int} value that, when treated as unsigned, is equal to {@code value}, if\n   * possible.\n   *\n   * @param value a value between 0 and 2<sup>32</sup>-1 inclusive\n   * @return the {@code int} value that, when treated as unsigned, equals {@code value}\n   * @throws IllegalArgumentException if {@code value} is negative or greater than or equal to\n   *     2<sup>32</sup>\n   * @since 21.0",
  "com.google.common.graph.EndpointPairIterator$Directed:computeNext()" : null,
  "com.google.common.collect.Maps$UnmodifiableEntries:toArray()" : null,
  "com.google.common.collect.Range:all()" : "* Returns a range that contains every value of type {@code C}.\n   *\n   * @since 14.0",
  "com.google.common.collect.HashBasedTable:size()" : null,
  "com.google.common.collect.AbstractMultiset:equals(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>This implementation returns {@code true} if {@code object} is a multiset of the same size\n   * and if, for each element, the two multisets have the same count.",
  "com.google.common.math.BigIntegerMath:roundToDouble(java.math.BigInteger,java.math.RoundingMode)" : "* Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x}\n   * is precisely representable as a {@code double}, its {@code double} value will be returned;\n   * otherwise, the rounding will choose between the two nearest representable values with {@code\n   * mode}.\n   *\n   * <p>For the case of {@link RoundingMode#HALF_DOWN}, {@code HALF_UP}, and {@code HALF_EVEN},\n   * infinite {@code double} values are considered infinitely far away. For example, 2^2000 is not\n   * representable as a double, but {@code roundToDouble(BigInteger.valueOf(2).pow(2000), HALF_UP)}\n   * will return {@code Double.MAX_VALUE}, not {@code Double.POSITIVE_INFINITY}.\n   *\n   * <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754\n   * default rounding mode: if the two nearest representable values are equally near, the one with\n   * the least significant bit zero is chosen. (In such cases, both of the nearest representable\n   * values are even integers; this method returns the one that is a multiple of a greater power of\n   * two.)\n   *\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not precisely representable as a {@code double}\n   * @since 30.0",
  "com.google.common.collect.ForwardingNavigableMap:firstEntry()" : null,
  "com.google.common.reflect.TypeToken$TypeCollector:sortKeysByValue(java.util.Map,java.util.Comparator)" : null,
  "com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection,int)" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addValue(java.lang.Object)" : "* Adds an unnamed value to the formatted output.\n     *\n     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a\n     * readable name.",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previous()" : null,
  "com.google.common.graph.ForwardingValueGraph:edgeValue(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:comparator()" : null,
  "com.google.common.reflect.Types:newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])" : null,
  "com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.lang.Iterable)" : "* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.\n     *\n     * @param elements the {@code Iterable} to add to the {@code ImmutableSortedMultiset}\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.collect.TreeMultiset$AvlNode:recompute()" : null,
  "com.google.common.collect.CompactLinkedHashSet:spliterator()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableBiMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.cache.LocalCache$EntrySet:removeIf(java.util.function.Predicate)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection)" : null,
  "com.google.common.collect.ForwardingMap:values()" : null,
  "com.google.common.io.Files:toByteArray(java.io.File)" : "* Reads all bytes from a file into a byte array.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}.\n   *\n   * @param file the file to read from\n   * @return a byte array containing all the bytes from file\n   * @throws IllegalArgumentException if the file is bigger than the largest possible byte array\n   *     (2^31 - 1)\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.AbstractMultimap$Values:size()" : null,
  "com.google.common.collect.CollectCollectors:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.primitives.ImmutableLongArray:stream()" : "* Returns a stream over the values in this array, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.StandardTable$Column$EntrySetIterator:computeNext()" : null,
  "com.google.common.cache.LocalCache$Values:removeIf(java.util.function.Predicate)" : null,
  "com.google.common.collect.CompactHashMap:requireEntries()" : null,
  "com.google.common.math.PairedStats:equals(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p><b>Note:</b> This tests exact equality of the calculated statistics, including the floating\n   * point values. Two instances are guaranteed to be considered equal if one is copied from the\n   * other using {@code second = new PairedStatsAccumulator().addAll(first).snapshot()}, if both\n   * were obtained by calling {@code snapshot()} on the same {@link PairedStatsAccumulator} without\n   * adding any values in between the two calls, or if one is obtained from the other after\n   * round-tripping through java serialization. However, floating point rounding errors mean that it\n   * may be false for some instances where the statistics are mathematically equal, including\n   * instances constructed from the same values in a different order... or (in the general case)\n   * even in the same order. (It is guaranteed to return true for instances constructed from the\n   * same values in the same order if {@code strictfp} is in effect, or if the system architecture\n   * guarantees {@code strictfp}-like semantics.)",
  "com.google.common.collect.TreeMultiset:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Ordering:isOrdered(java.lang.Iterable)" : "* Returns {@code true} if each element in {@code iterable} after the first is greater than or\n   * equal to the element that preceded it, according to this ordering. Note that this is always\n   * true when the iterable has fewer than two elements.\n   *\n   * <p><b>Java 8+ users:</b> Use the equivalent {@link Comparators#isInOrder(Iterable, Comparator)}\n   * instead, since the rest of {@code Ordering} is mostly obsolete (as explained in the class\n   * documentation).",
  "com.google.common.collect.TreeMultiset$AvlNode:getElement()" : null,
  "com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode,long)" : "* Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode,\n   * long, long)} using the requested {@link MapMode}.\n   *\n   * <p>Files are mapped from offset 0 to {@code size}.\n   *\n   * <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created\n   * with the requested {@code size}. Thus this method is useful for creating memory mapped files\n   * which do not yet exist.\n   *\n   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.\n   *\n   * @param file the file to map\n   * @param mode the mode to use when mapping {@code file}\n   * @return a buffer reflecting {@code file}\n   * @throws IOException if an I/O error occurs\n   * @see FileChannel#map(MapMode, long, long)\n   * @since 2.0",
  "com.google.common.collect.Maps$SortedKeySet:tailSet(java.lang.Object)" : null,
  "com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:<init>(java.lang.Object)" : null,
  "com.google.common.io.CharSink:writeLines(java.util.Iterator,java.lang.String)" : null,
  "com.google.common.collect.ImmutableMultiset:writeReplace()" : null,
  "com.google.common.primitives.SignedBytes:sortDescending(byte[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order.\n   *\n   * @since 23.1",
  "com.google.common.collect.Synchronized$SynchronizedSortedMap:lastKey()" : null,
  "com.google.common.collect.ForwardingCollection:standardToArray(java.lang.Object[])" : "* A sensible definition of {@link #toArray(Object[])} in terms of {@link #size} and {@link\n   * #iterator}. If you override either of these methods, you may wish to override {@link #toArray}\n   * to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ConcurrentHashMultiset:removeExactly(java.lang.Object,int)" : "* Removes exactly the specified number of occurrences of {@code element}, or makes no change if\n   * this is not possible.\n   *\n   * <p>This method, in contrast to {@link #remove(Object, int)}, has no effect when the element\n   * count is smaller than {@code occurrences}.\n   *\n   * @param element the element to remove\n   * @param occurrences the number of occurrences of {@code element} to remove\n   * @return {@code true} if the removal was possible (including if {@code occurrences} is zero)\n   * @throws IllegalArgumentException if {@code occurrences} is negative",
  "com.google.common.collect.TreeMultiset$AvlNode:totalCount(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.util.concurrent.ExecutionList:execute()" : "* Runs this execution list, executing all existing pairs in the order they were added. However,\n   * note that listeners added after this point may be executed before those previously added, and\n   * note that the execution order of all listeners is ultimately chosen by the implementations of\n   * the supplied executors.\n   *\n   * <p>This method is idempotent. Calling it several times in parallel is semantically equivalent\n   * to calling it exactly once.\n   *\n   * @since 10.0 (present in 1.0 as {@code run})",
  "com.google.common.collect.ImmutableListMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData number of distinct keys, and then for each distinct key: the key, the number of\n   *     values for that key, and the key's values",
  "com.google.common.collect.ImmutableBiMap:createValues()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableLongArray$Builder:<init>(int)" : null,
  "com.google.common.collect.RegularImmutableSet:isPartialView()" : null,
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap)" : null,
  "com.google.common.collect.Sets:hashCodeImpl(java.util.Set)" : "An implementation for {@link Set#hashCode()}.",
  "com.google.common.collect.EmptyContiguousSet:asList()" : null,
  "com.google.thirdparty.publicsuffix.PublicSuffixType:getInnerNodeCode()" : null,
  "com.google.common.collect.ImmutableSetMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)" : "Creates an ImmutableSetMultimap from an asMap.entrySet.",
  "com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence,int)" : null,
  "com.google.common.util.concurrent.InterruptibleTask:toString()" : null,
  "com.google.common.base.Enums:getField(java.lang.Enum)" : "* Returns the {@link Field} in which {@code enumValue} is defined. For example, to get the {@code\n   * Description} annotation on the {@code GOLF} constant of enum {@code Sport}, use {@code\n   * Enums.getField(Sport.GOLF).getAnnotation(Description.class)}.\n   *\n   * @since 12.0",
  "com.google.common.collect.CompactHashMap$MapEntry:getValue()" : null,
  "com.google.common.cache.LocalCache:getOrDefault(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$Alphabet:hashCode()" : null,
  "com.google.common.cache.LocalCache$Strength$1:defaultEquivalence()" : "* Returns the default equivalence strategy used to compare and hash keys or values referenced\n     * at this strength. This strategy will be used unless the user explicitly specifies an\n     * alternate strategy.",
  "com.google.common.collect.FilteredEntryMultimap:entryIterator()" : null,
  "com.google.common.io.TempFileCreator$JavaNioCreator:createTempDir()" : null,
  "com.google.common.base.Joiner:toString(java.lang.Object)" : null,
  "com.google.common.collect.FilteredKeyMultimap:unfiltered()" : null,
  "com.google.common.collect.Tables$TransformedTable:contains(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Maps$DescendingMap:floorEntry(java.lang.Object)" : null,
  "com.google.common.base.Suppliers$MemoizingSupplier:get()" : null,
  "com.google.common.collect.StandardTable$Row:get(java.lang.Object)" : null,
  "com.google.common.collect.RegularContiguousSet:range(com.google.common.collect.BoundType,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.Multimaps$MapMultimap:entryIterator()" : null,
  "com.google.common.hash.Funnels$SequentialFunnel:toString()" : null,
  "com.google.common.collect.ForwardingList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap:put(com.google.common.reflect.TypeToken,java.lang.Object)" : "* Not supported. Use {@link #putInstance} instead.\n   *\n   * @deprecated unsupported operation\n   * @throws UnsupportedOperationException always",
  "com.google.common.cache.CacheBuilder:refreshAfterWrite(java.time.Duration)" : "* Specifies that active entries are eligible for automatic refresh once a fixed duration has\n   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics\n   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link\n   * CacheLoader#reload}.\n   *\n   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is\n   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous\n   * implementation; otherwise refreshes will be performed during unrelated cache read and write\n   * operations.\n   *\n   * <p>Currently automatic refreshes are performed when the first stale request for an entry\n   * occurs. The request triggering refresh will make a synchronous call to {@link\n   * CacheLoader#reload}\n   * to obtain a future of the new value. If the returned future is already complete, it is returned\n   * immediately. Otherwise, the old value is returned.\n   *\n   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.\n   *\n   * @param duration the length of time after an entry is created that it should be considered\n   *     stale, and thus eligible for refresh\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code duration} is negative\n   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set\n   * @throws ArithmeticException for durations greater than +/- approximately 292 years\n   * @since 25.0 (but only since 33.3.0 in the Android <a\n   *     href=\"https://github.com/google/guava#guava-google-core-libraries-for-java\">flavor</a>)",
  "com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)" : "Implementation of {@link Futures#getChecked(Future, Class, long, TimeUnit)}.",
  "com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference:<init>(java.lang.Object,int,java.lang.ref.ReferenceQueue)" : null,
  "com.google.common.collect.Lists:newArrayListWithExpectedSize(int)" : "* Creates an {@code ArrayList} instance to hold {@code estimatedSize} elements, <i>plus</i> an\n   * unspecified amount of padding; you almost certainly mean to call {@link\n   * #newArrayListWithCapacity} (see that method for further advice on usage).\n   *\n   * <p><b>Note:</b> This method will soon be deprecated. Even in the rare case that you do want\n   * some amount of padding, it's best if you choose your desired amount explicitly.\n   *\n   * @param estimatedSize an estimate of the eventual {@link List#size()} of the new list\n   * @return a new, empty {@code ArrayList}, sized appropriately to hold the estimated number of\n   *     elements\n   * @throws IllegalArgumentException if {@code estimatedSize} is negative",
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:isHorizontal()" : null,
  "com.google.common.net.InetAddresses:fromIPv4BigInteger(java.math.BigInteger)" : "* Returns the {@code Inet4Address} corresponding to a given {@code BigInteger}.\n   *\n   * @param address BigInteger representing the IPv4 address\n   * @return Inet4Address representation of the given BigInteger\n   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^32-1\n   * @since 28.2",
  "com.google.common.reflect.TypeResolver:resolveType(java.lang.reflect.Type)" : "* Resolves all type variables in {@code type} and all downstream types and returns a\n   * corresponding type with type variables resolved.",
  "com.google.common.collect.MultimapBuilder$SetMultimapBuilder:build(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.Tables$AbstractCell:toString()" : null,
  "com.google.common.collect.Maps$FilteredEntryMap$EntrySet:delegate()" : null,
  "com.google.common.base.internal.Finalizer:getBigThreadConstructor()" : null,
  "com.google.common.math.LinearTransformation:vertical(double)" : "* Builds an instance representing a vertical transformation with a constant value of {@code x}.\n   * (The inverse of this will be a horizontal transformation.)",
  "com.google.common.collect.Iterables$UnmodifiableIterable:spliterator()" : null,
  "com.google.common.collect.ImmutableMap:keySet()" : "* Returns an immutable set of the keys in this map, in the same order that they appear in {@link\n   * #entrySet}.",
  "com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier)" : "* Creates an {@link Executor} that renames the {@link Thread threads} that its tasks run in.\n   *\n   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed\n   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}\n   * prevents the renaming then it will be skipped but the tasks will still execute.\n   *\n   * @param executor The executor to decorate\n   * @param nameSupplier The source of names for each task",
  "com.google.common.collect.CollectCollectors:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)" : null,
  "com.google.common.collect.HashBasedTable$Factory:get()" : null,
  "com.google.common.util.concurrent.AtomicLongMap:decrementAndGet(java.lang.Object)" : "* Decrements by one the value currently associated with {@code key}, and returns the new value.",
  "com.google.common.primitives.ImmutableIntArray:of(int,int)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.Tables$UnmodifiableTable:clear()" : null,
  "com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.ByteStreams:newDataInput(byte[])" : "* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array from the\n   * beginning.",
  "com.google.common.cache.LocalCache$Segment:evictEntries(com.google.common.cache.ReferenceEntry)" : "* Performs eviction if the segment is over capacity. Avoids flushing the entire cache if the\n     * newest entry exceeds the maximum weight all on its own.\n     *\n     * @param newest the most recently added entry",
  "com.google.common.collect.StandardRowSortedTable:<init>(java.util.SortedMap,com.google.common.base.Supplier)" : null,
  "com.google.common.collect.ReverseOrdering:hashCode()" : null,
  "com.google.common.collect.Maps$DescendingMap:pollLastEntry()" : null,
  "com.google.common.collect.ForwardingIterator:hasNext()" : null,
  "com.google.common.collect.Iterables:concat(java.lang.Iterable)" : "* Combines multiple iterables into a single iterable. The returned iterable has an iterator that\n   * traverses the elements of each iterable in {@code inputs}. The input iterators are not polled\n   * until necessary.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input\n   * iterator supports it.\n   *\n   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code\n   * Streams.concat(...)}.\n   *\n   * @throws NullPointerException if any of the provided iterables is null",
  "com.google.common.base.Platform:compilePattern(java.lang.String)" : null,
  "com.google.common.graph.EndpointPair:ordered(java.lang.Object,java.lang.Object)" : "Returns an {@link EndpointPair} representing the endpoints of a directed edge.",
  "com.google.common.graph.Graphs$TransposedNetwork:<init>(com.google.common.graph.Network)" : null,
  "com.google.common.collect.MultimapBuilder:treeKeys()" : "* Uses a naturally-ordered {@link TreeMap} to map keys to value collections.\n   *\n   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link\n   * Multimap#asMap()} will iterate through the keys in sorted order.\n   *\n   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be\n   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be\n   * cast to a {@link java.util.SortedMap}.",
  "com.google.common.cache.CacheBuilder:refreshAfterWrite(long,java.util.concurrent.TimeUnit)" : "* Specifies that active entries are eligible for automatic refresh once a fixed duration has\n   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics\n   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link\n   * CacheLoader#reload}.\n   *\n   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is\n   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous\n   * implementation; otherwise refreshes will be performed during unrelated cache read and write\n   * operations.\n   *\n   * <p>Currently automatic refreshes are performed when the first stale request for an entry\n   * occurs. The request triggering refresh will make a synchronous call to {@link\n   * CacheLoader#reload}\n   * and immediately return the new value if the returned future is complete, and the old value\n   * otherwise.\n   *\n   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.\n   *\n   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when\n   * feasible), use {@link #refreshAfterWrite(Duration)} instead.\n   *\n   * @param duration the length of time after an entry is created that it should be considered\n   *     stale, and thus eligible for refresh\n   * @param unit the unit that {@code duration} is expressed in\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code duration} is negative\n   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set\n   * @since 11.0",
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:keyStrength()" : null,
  "com.google.common.collect.ImmutableList:spliterator()" : null,
  "com.google.common.util.concurrent.ForwardingFluentFuture:toString()" : null,
  "com.google.common.hash.BloomFilter:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueSet:remove(java.lang.Object)" : null,
  "com.google.common.base.Predicates$OrPredicate:apply(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableTable:containsColumn(java.lang.Object)" : null,
  "com.google.common.collect.Iterables:any(java.lang.Iterable,com.google.common.base.Predicate)" : "* Returns {@code true} if any element in {@code iterable} satisfies the predicate.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch}.",
  "com.google.common.primitives.ImmutableIntArray:forEach(java.util.function.IntConsumer)" : "* Invokes {@code consumer} for each value contained in this array, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.MinMaxPriorityQueue:orderedBy(java.util.Comparator)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:lower(java.lang.Object)" : null,
  "com.google.common.collect.Cut:<init>(java.lang.Comparable)" : null,
  "com.google.common.io.Resources:<init>()" : null,
  "com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.io.Java8Compatibility:reset(java.nio.Buffer)" : null,
  "com.google.common.util.concurrent.ThreadFactoryBuilder:build()" : "* Returns a new thread factory using the options supplied during the building process. After\n   * building, it is still possible to change the options used to build the ThreadFactory and/or\n   * build again. State is not shared amongst built instances.\n   *\n   * @return the fully constructed {@link ThreadFactory}",
  "com.google.common.collect.SingletonImmutableList:subList(int,int)" : null,
  "com.google.common.math.StatsAccumulator:min()" : "* Returns the lowest value in the dataset. The count must be non-zero.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it\n   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link\n   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values\n   * only then the result is the lowest finite value. If it contains {@link\n   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.collect.ArrayTable:remove(java.lang.Object,java.lang.Object)" : "* Not supported. Use {@link #erase} instead.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Use {@link #erase}",
  "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,int)" : "* Adds a name/value pair to the formatted output in {@code name=value} format.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",
  "com.google.common.collect.ContiguousSet:toString()" : "Returns a shorthand representation of the contents such as {@code \"[1..100]\"}.",
  "com.google.common.cache.LocalCache$WriteThroughEntry:getValue()" : null,
  "com.google.common.collect.ImmutableSet$Builder:forceJdk()" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)" : null,
  "com.google.common.util.concurrent.UncaughtExceptionHandlers:systemExit()" : "* Returns an exception handler that exits the system. This is particularly useful for the main\n   * thread, which may start up other, non-daemon threads, but fail to fully initialize the\n   * application successfully.\n   *\n   * <p>Example usage:\n   *\n   * <pre>\n   * public static void main(String[] args) {\n   *   Thread.currentThread().setUncaughtExceptionHandler(UncaughtExceptionHandlers.systemExit());\n   *   ...\n   * </pre>\n   *\n   * <p>The returned handler logs any exception at severity {@code SEVERE} and then shuts down the\n   * process with an exit status of 1, indicating abnormal termination.",
  "com.google.common.collect.Synchronized$SynchronizedMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.collect.Multimaps:filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)" : "* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a\n   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect\n   * the other.\n   *\n   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all\n   * other methods are supported by the multimap and its views. When adding a value that doesn't\n   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code\n   * replaceValues()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * multimap or its views, only mappings whose value satisfy the filter will be removed from the\n   * underlying multimap.\n   *\n   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every\n   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n   * copy.\n   *\n   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 14.0",
  "com.google.common.collect.Multimaps$MapMultimap:hashCode()" : null,
  "com.google.common.collect.Multimaps$Keys:<init>(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.CompactHashMap:requireKeys()" : null,
  "com.google.common.graph.Graphs:transpose(com.google.common.graph.Network)" : "* Returns a view of {@code network} with the direction (if any) of every edge reversed. All other\n   * properties remain intact, and further updates to {@code network} will be reflected in the view.",
  "com.google.common.collect.AbstractMapBasedMultimap:<init>(java.util.Map)" : "* Creates a new multimap that uses the provided map.\n   *\n   * @param map place to store the mapping from each key to its corresponding values\n   * @throws IllegalArgumentException if {@code map} is not empty",
  "com.google.common.collect.SingletonImmutableList:toString()" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:toString()" : null,
  "com.google.common.base.Functions$ForMapWithDefault:<init>(java.util.Map,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSetMultimap:of()" : null,
  "com.google.common.collect.Collections2$PermutationIterator:switchDirection()" : null,
  "com.google.common.hash.AbstractHashFunction:hashObject(java.lang.Object,com.google.common.hash.Funnel)" : null,
  "com.google.common.collect.Tables$TransposeTable:containsColumn(java.lang.Object)" : null,
  "com.google.common.collect.Multisets$FilteredMultiset:iterator()" : null,
  "com.google.common.graph.DirectedGraphConnections$PredAndSucc:<init>(java.lang.Object)" : null,
  "com.google.common.graph.IncidentEdgeSet:<init>(com.google.common.graph.BaseGraph,java.lang.Object)" : null,
  "com.google.common.hash.MessageDigestHashFunction$SerializedForm:<init>(java.lang.String,int,java.lang.String)" : null,
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(int)" : "* Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to\n     * expect the specified number of values per key.\n     *\n     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",
  "com.google.common.collect.AbstractMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.ImmutableMap$Builder:putAll(java.lang.Iterable)" : "* Adds all of the given entries to the built map. If the same key is put more than once, {@link\n     * #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for\n     * that key.\n     *\n     * @throws NullPointerException if any key, value, or entry is null\n     * @since 19.0",
  "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createValues()" : null,
  "com.google.common.util.concurrent.ForwardingExecutorService:awaitTermination(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.RegularImmutableTable:forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)" : null,
  "com.google.common.base.Predicates$IsEqualToPredicate:withNarrowedType()" : null,
  "com.google.common.collect.Sets$DescendingSet:comparator()" : null,
  "com.google.common.graph.StandardMutableGraph:removeNode(java.lang.Object)" : null,
  "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:<init>()" : null,
  "com.google.common.collect.StandardTable:removeColumn(java.lang.Object)" : null,
  "com.google.common.collect.RangeSet:enclosesAll(java.lang.Iterable)" : "* Returns {@code true} if for each range in {@code other} there exists a member range in this\n   * range set which {@linkplain Range#encloses encloses} it. Returns {@code true} if {@code other}\n   * is empty.\n   *\n   * <p>This is equivalent to checking if this range set {@link #encloses} each range in {@code\n   * other}.\n   *\n   * @since 21.0",
  "com.google.common.collect.TreeMultiset:count(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMapValues:spliterator()" : null,
  "com.google.common.collect.ArrayTable:toArray(java.lang.Class)" : "* Returns a two-dimensional array with the table contents. The row and column indices correspond\n   * to the positions of the row and column in the iterables provided during table construction. If\n   * the table lacks a mapping for a given row and column, the corresponding array element is null.\n   *\n   * <p>Subsequent table changes will not modify the array, and vice versa.\n   *\n   * @param valueClass class of values stored in the returned array",
  "com.google.common.collect.TableCollectors$MutableCell:getColumnKey()" : null,
  "com.google.common.collect.CompactHashMap:setKey(int,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ThreadFactoryBuilder:setPriority(int)" : "* Sets the priority for new threads created with this ThreadFactory.\n   *\n   * <p><b>Warning:</b> relying on the thread scheduler is <a\n   * href=\"http://errorprone.info/bugpattern/ThreadPriorityCheck\">discouraged</a>.\n   *\n   * @param priority the priority for new Threads created with this ThreadFactory\n   * @return this for the builder pattern",
  "com.google.common.collect.TreeTraverser$PreOrderIterator:next()" : null,
  "com.google.common.graph.ImmutableGraph$Builder:addNode(java.lang.Object)" : "* Adds {@code node} if it is not already present.\n     *\n     * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null.\n     *\n     * @return this {@code Builder} object",
  "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,double)" : "* Adds a name/value pair to the formatted output in {@code name=value} format.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",
  "com.google.common.collect.Maps:uniqueIndex(java.lang.Iterable,com.google.common.base.Function)" : "* Returns a map with the given {@code values}, indexed by keys derived from those values. In\n   * other words, each input value produces an entry in the map whose key is the result of applying\n   * {@code keyFunction} to that value. These entries appear in the same order as the input values.\n   * Example usage:\n   *\n   * {@snippet :\n   * Color red = new Color(\"red\", 255, 0, 0);\n   * ...\n   * ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);\n   *\n   * ImmutableMap<String, Color> colorForName =\n   *     uniqueIndex(allColors, c -> c.toString());\n   * assertThat(colorForName).containsEntry(\"red\", red);\n   * }\n   *\n   * <p>If your index may associate multiple values with each key, use {@link\n   * Multimaps#index(Iterable, Function) Multimaps.index}.\n   *\n   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:\n   *\n   * {@snippet :\n   * import static com.google.common.collect.ImmutableMap.toImmutableMap;\n   * ...\n   * ImmutableMap<String, Color> colorForName =\n   *     allColors.stream().collect(toImmutableMap(c -> c.toString(), c -> c));\n   * }\n   *\n   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys\n   * and values in the map are.\n   *\n   * @param values the values to use when constructing the {@code Map}\n   * @param keyFunction the function used to produce the key for each value\n   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value\n   *     in the input collection to that value\n   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one\n   *     value in the input collection\n   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code\n   *     keyFunction} produces {@code null} for any value",
  "com.google.common.base.Splitter:limit(int)" : "* Returns a splitter that behaves equivalently to {@code this} splitter but stops splitting after\n   * it reaches the limit. The limit defines the maximum number of items returned by the iterator,\n   * or the maximum size of the list returned by {@link #splitToList}.\n   *\n   * <p>For example, {@code Splitter.on(',').limit(3).split(\"a,b,c,d\")} returns an iterable\n   * containing {@code [\"a\", \"b\", \"c,d\"]}. When omitting empty strings, the omitted strings do not\n   * count. Hence, {@code Splitter.on(',').limit(3).omitEmptyStrings().split(\"a,,,b,,,c,d\")} returns\n   * an iterable containing {@code [\"a\", \"b\", \"c,d\"]}. When trim is requested, all entries are\n   * trimmed, including the last. Hence {@code Splitter.on(',').limit(3).trimResults().split(\" a , b\n   * , c , d \")} results in {@code [\"a\", \"b\", \"c , d\"]}.\n   *\n   * @param maxItems the maximum number of items returned\n   * @return a splitter with the desired configuration\n   * @since 9.0",
  "com.google.common.graph.AbstractNetwork:validateEndpoints(com.google.common.graph.EndpointPair)" : "* Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with\n   * the directionality of this graph.",
  "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multimap containing the given entries, in the \"key-grouped\" insertion\n   * order described in the <a href=\"#iteration\">class documentation</a>.",
  "com.google.common.io.TempFileCreator:pickSecureCreator()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:delegate()" : null,
  "com.google.common.io.ByteSource:asCharSource(java.nio.charset.Charset)" : "* Returns a {@link CharSource} view of this byte source that decodes bytes read from this source\n   * as characters using the given {@link Charset}.\n   *\n   * <p>If {@link CharSource#asByteSource} is called on the returned source with the same charset,\n   * the default implementation of this method will ensure that the original {@code ByteSource} is\n   * returned, rather than round-trip encoding. Subclasses that override this method should behave\n   * the same way.",
  "com.google.common.collect.ImmutableTable:clear()" : "* Guaranteed to throw an exception and leave the table unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Maps:transformValues(java.util.Map,com.google.common.base.Function)" : "* Returns a view of a map where each value is transformed by a function. All other properties of\n   * the map, such as iteration order, are left intact. For example, the code:\n   *\n   * {@snippet :\n   * Map<String, Integer> map = ImmutableMap.of(\"a\", 4, \"b\", 9);\n   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);\n   * Map<String, Double> transformed = Maps.transformValues(map, sqrt);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {a=2.0, b=3.0}}.\n   *\n   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports\n   * removal operations, and these are reflected in the underlying map.\n   *\n   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided\n   * that the function is capable of accepting null input. The transformed map might contain null\n   * values, if the function sometimes gives a null result.\n   *\n   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map\n   * to be a view, but it means that the function will be applied many times for bulk operations\n   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code\n   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a\n   * view, copy the returned map into a new map of your choosing.",
  "com.google.common.primitives.Bytes$ByteArrayAsList:toByteArray()" : null,
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added\n   * @since 31.0",
  "com.google.common.collect.DiscreteDomain$IntegerDomain:minValue()" : null,
  "com.google.common.collect.HashMultiset:writeObject(java.io.ObjectOutputStream)" : "* @serialData the number of distinct elements, the first element, its count, the second element,\n   *     its count, and so on",
  "com.google.common.primitives.Doubles:toArray(java.util.Collection)" : "* Returns an array containing each value of {@code collection}, converted to a {@code double}\n   * value in the manner of {@link Number#doubleValue}.\n   *\n   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n   * Calling this method is as thread-safe as calling that method.\n   *\n   * @param collection a collection of {@code Number} instances\n   * @return an array containing the same values as {@code collection}, in the same order, converted\n   *     to primitives\n   * @throws NullPointerException if {@code collection} or any of its elements is null\n   * @since 1.0 (parameter was {@code Collection<Double>} before 12.0)",
  "com.google.common.collect.Lists:lastIndexOfImpl(java.util.List,java.lang.Object)" : "An implementation of {@link List#lastIndexOf(Object)}.",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)" : null,
  "com.google.common.cache.CacheBuilder:valueEquivalence(com.google.common.base.Equivalence)" : "* Sets a custom {@code Equivalence} strategy for comparing values.\n   *\n   * <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when\n   * {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()}\n   * otherwise.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)",
  "com.google.common.reflect.Types$GenericArrayTypeImpl:hashCode()" : null,
  "com.google.common.hash.Java8Compatibility:<init>()" : null,
  "com.google.common.graph.StandardMutableValueGraph:newConnections()" : null,
  "com.google.common.io.MoreFiles:throwDeleteFailed(java.nio.file.Path,java.util.Collection)" : "* Throws an exception indicating that one or more files couldn't be deleted when deleting {@code\n   * path} or its contents.\n   *\n   * <p>If there is only one exception in the collection, and it is a {@link NoSuchFileException}\n   * thrown because {@code path} itself didn't exist, then throws that exception. Otherwise, the\n   * thrown exception contains all the exceptions in the given collection as suppressed exceptions.",
  "com.google.common.collect.GeneralRange:<init>(java.util.Comparator,boolean,java.lang.Object,com.google.common.collect.BoundType,boolean,java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask:<init>(com.google.common.util.concurrent.AsyncCallable)" : null,
  "com.google.common.primitives.ImmutableIntArray:toArray()" : "Returns a new, mutable copy of this array's values, as a primitive {@code int[]}.",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:lower(java.lang.Object)" : null,
  "com.google.common.base.Absent:withType()" : null,
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided\n   * @since 31.0",
  "com.google.common.base.Throwables:getGetMethod()" : "* Returns the Method that can be used to resolve an individual StackTraceElement, or null if that\n   * method cannot be found (it is only to be found in fairly recent JDKs).",
  "com.google.common.hash.Fingerprint2011:hash128to64(long,long)" : "Implementation of Hash128to64 from util/hash/hash128to64.h",
  "com.google.common.collect.ImmutableMultiset$ElementSet:isPartialView()" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:isPartialView()" : null,
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.util.concurrent.FakeTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Maps$FilteredKeyMap:createKeySet()" : null,
  "com.google.common.util.concurrent.Monitor:<init>()" : "* Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to {@code\n   * Monitor(false)}.",
  "com.google.common.collect.MinMaxPriorityQueue:removeAt(int)" : "* Removes the element at position {@code index}.\n   *\n   * <p>Normally this method leaves the elements at up to {@code index - 1}, inclusive, untouched.\n   * Under these circumstances, it returns {@code null}.\n   *\n   * <p>Occasionally, in order to maintain the heap invariant, it must swap a later element of the\n   * list with one before {@code index}. Under these circumstances it returns a pair of elements as\n   * a {@link MoveDesc}. The first one is the element that was previously at the end of the heap and\n   * is now at some position before {@code index}. The second element is the one that was swapped\n   * down to replace the element at {@code index}. This fact is used by iterator.remove so as to\n   * visit elements during a traversal once and only once.",
  "com.google.common.util.concurrent.ClosingFuture$Peeker:<init>(com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$LinkedStrongKeyStrongValueEntry:<init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)" : null,
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:<init>(int)" : null,
  "com.google.common.base.Absent:hashCode()" : null,
  "com.google.common.collect.CartesianList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMultiset:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.AbstractRangeSet:add(com.google.common.collect.Range)" : null,
  "com.google.common.collect.ImmutableEnumMap:asImmutable(java.util.EnumMap)" : null,
  "com.google.common.util.concurrent.MoreExecutors$Application:addShutdownHook(java.lang.Thread)" : null,
  "com.google.common.collect.TreeMultiset:wrapEntry(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:takeUninterruptibly(java.util.concurrent.BlockingQueue)" : "Invokes {@code queue.}{@link BlockingQueue#take() take()} uninterruptibly.",
  "com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset)" : "* Reads all of the lines from a URL. The lines do not include line-termination characters, but do\n   * include other leading and trailing whitespace.\n   *\n   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code\n   * Resources.asCharSource(url, charset).readLines()}.\n   *\n   * @param url the URL to read from\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @return a mutable {@link List} containing all the lines\n   * @throws IOException if an I/O error occurs",
  "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)" : "* Starts specifying how to combine two {@link ClosingFuture}s into a single pipeline, assuming\n   * they all succeed. If any fail, the resulting pipeline will fail.\n   *\n   * <p>Calling this method allows you to use lambdas or method references typed with the types of\n   * the input {@link ClosingFuture}s.\n   *\n   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from any of\n   *     the arguments, or if any has already been {@linkplain #finishToFuture() finished}",
  "com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection)" : null,
  "com.google.common.reflect.Invokable:isPublic()" : "Returns true if the element is public.",
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingMap()" : null,
  "com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:hashCode()" : null,
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(int)" : "* Uses a hash-based {@code Set} to store value collections, initialized to expect the specified\n     * number of values per key.\n     *\n     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",
  "com.google.common.collect.CompactHashSet:writeObject(java.io.ObjectOutputStream)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$KeySet:spliterator()" : null,
  "com.google.common.collect.LinkedHashMultimap:create(int,int)" : "* Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified\n   * numbers of keys and values without rehashing.\n   *\n   * @param expectedKeys the expected number of distinct keys\n   * @param expectedValuesPerKey the expected average number of values per key\n   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is\n   *     negative",
  "com.google.common.util.concurrent.ListenerCallQueue:dispatch()" : "* Dispatches all events enqueued prior to this call, serially and in order, for every listener.\n   *\n   * <p>Note: this method is idempotent and safe to call from any thread",
  "com.google.common.collect.ImmutableSetMultimap$Builder:build()" : "Returns a newly-created immutable set multimap.",
  "com.google.common.graph.ForwardingNetwork:incidentEdges(java.lang.Object)" : null,
  "com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.UnicodeEscaper,int)" : "* Returns a string that would replace the given character in the specified escaper, or {@code\n   * null} if no replacement should be made. This method is intended for use in tests through the\n   * {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit\n   * themselves to its public interface.\n   *\n   * @param cp the Unicode code point to escape if necessary\n   * @return the replacement string, or {@code null} if no escaping was needed",
  "com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)" : "* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the\n   * lock, but does not wait for the guard to be satisfied, and may be interrupted.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:isHashCodeFast()" : null,
  "com.google.common.reflect.TypeToken:isArray()" : "* Returns true if this type is known to be an array type, such as {@code int[]}, {@code T[]},\n   * {@code <? extends Map<String, Integer>[]>} etc.",
  "com.google.common.util.concurrent.SettableFuture:setFuture(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.collect.ForwardingSet:equals(java.lang.Object)" : null,
  "com.google.common.net.InternetDomainName:registrySuffix()" : "* Returns the {@linkplain #isRegistrySuffix() registry suffix} portion of the domain name, or\n   * {@code null} if no registry suffix is present.\n   *\n   * @since 23.3",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:maybeClearReferenceQueues()" : null,
  "com.google.common.base.Preconditions:checkState(boolean)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @throws IllegalStateException if {@code expression} is false\n   * @see Verify#verify Verify.verify()",
  "com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String,int)" : "* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as\n   * an unsigned {@code int} value in the specified radix.\n   *\n   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}\n   *     value",
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:navigableKeySet()" : null,
  "com.google.common.graph.Traverser$Traversal:inTree(com.google.common.graph.SuccessorsFunction)" : null,
  "com.google.common.collect.ComparisonChain$1:compare(float,float)" : "* Compares two {@code float} values as specified by {@link Float#compare}, <i>if</i> the result\n   * of this comparison chain has not already been determined.",
  "com.google.common.collect.HashMultimap:<init>(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.StandardTable:createColumnKeyIterator()" : "Creates an iterator that returns each column value with duplicates omitted.",
  "com.google.common.collect.Sets$DescendingSet:<init>(java.util.NavigableSet)" : null,
  "com.google.common.io.Files:copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)" : "* Copies all characters from a file to an appendable object, using the given character set.\n   *\n   * @param from the source file\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @param to the appendable object\n   * @throws IOException if an I/O error occurs\n   * @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}.",
  "com.google.common.primitives.ImmutableLongArray:equals(java.lang.Object)" : "* Returns {@code true} if {@code object} is an {@code ImmutableLongArray} containing the same\n   * values as this one, in the same order.",
  "com.google.common.collect.MapMakerInternalMap$SerializationProxy:writeObject(java.io.ObjectOutputStream)" : null,
  "com.google.common.collect.ImmutableRangeSet:union(com.google.common.collect.RangeSet)" : "* Returns a new range set consisting of the union of this range set and {@code other}.\n   *\n   * <p>This is essentially the same as {@code TreeRangeSet.create(this).addAll(other)} except it\n   * returns an {@code ImmutableRangeSet}.\n   *\n   * @since 21.0",
  "com.google.common.collect.Sets$FilteredNavigableSet:unfiltered()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readBoolean()" : null,
  "com.google.common.collect.ConcurrentHashMultiset:toArray()" : null,
  "com.google.common.collect.Maps$DescendingMap:descendingKeySet()" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.CollectCollectors:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.collect.ForwardingList:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:getInterfaces(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher:precomputedInternal()" : "* This is the actual implementation of {@link #precomputed}, but we bounce calls through a method\n   * on {@link Platform} so that we can have different behavior in GWT.\n   *\n   * <p>This implementation tries to be smart in a number of ways. It recognizes cases where the\n   * negation is cheaper to precompute than the matcher itself; it tries to build small hash tables\n   * for matchers that only match a few characters, and so on. In the worst-case scenario, it\n   * constructs an eight-kilobyte bit array and queries that. In many situations this produces a\n   * matcher which is faster to query than the original.",
  "com.google.common.collect.Ordering:lexicographical()" : null,
  "com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ExecutorService,com.google.common.base.Supplier)" : "* Creates an {@link ExecutorService} that renames the {@link Thread threads} that its tasks run\n   * in.\n   *\n   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed\n   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}\n   * prevents the renaming then it will be skipped but the tasks will still execute.\n   *\n   * @param service The executor to decorate\n   * @param nameSupplier The source of names for each task",
  "com.google.common.base.Predicates:subtypeOf(java.lang.Class)" : "* Returns a predicate that evaluates to {@code true} if the class being tested is assignable to\n   * (is a subtype of) {@code clazz}. Example:\n   *\n   * {@snippet :\n   * List<Class<?>> classes = Arrays.asList(\n   *     Object.class, String.class, Number.class, Long.class);\n   * return Iterables.filter(classes, subtypeOf(Number.class));\n   * }\n   *\n   * The code above returns an iterable containing {@code Number.class} and {@code Long.class}.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code clazz::isAssignableFrom} or {@code x ->\n   * clazz.isAssignableFrom(x)}, but note that lambdas do not have human-readable {@link\n   * #toString()} representations and are not serializable.\n   *\n   * @since 20.0 (since 10.0 under the incorrect name {@code assignableFrom})",
  "com.google.common.graph.DirectedGraphConnections:ofImmutable(java.lang.Object,java.lang.Iterable,com.google.common.base.Function)" : null,
  "com.google.common.escape.UnicodeEscaper:growBuffer(char[],int,int)" : "* Helper method to grow the character buffer as needed, this only happens once in a while so it's\n   * ok if it's in a method call. If the index passed in is 0 then no copying will be done.",
  "com.google.common.hash.Murmur3_128HashFunction:newHasher()" : null,
  "com.google.common.primitives.ImmutableLongArray:copyOf(long[])" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl:remove(java.lang.Object)" : null,
  "com.google.common.primitives.Bytes$ByteArrayAsList:size()" : null,
  "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:build()" : null,
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:add(java.lang.Object)" : null,
  "com.google.common.collect.AbstractListMultimap:removeAll(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,\n   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link\n   * Multimap} interface.",
  "com.google.common.cache.LocalCache$EntryIterator:next()" : null,
  "com.google.common.collect.ImmutableSortedMap:copyOfSorted(java.util.SortedMap)" : "* Returns an immutable map containing the same entries as the provided sorted map, with the same\n   * ordering.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws NullPointerException if any key or value in {@code map} is null",
  "com.google.common.collect.Tables$TransformedTable:putAll(com.google.common.collect.Table)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableTable:forCells(java.util.List,java.util.Comparator,java.util.Comparator)" : null,
  "com.google.common.collect.JdkBackedImmutableBiMap:createKeySet()" : null,
  "com.google.common.collect.Iterables:unmodifiableIterable(com.google.common.collect.ImmutableCollection)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this\n   * @since 10.0",
  "com.google.common.escape.CharEscaper:escapeSlow(java.lang.String,int)" : "* Returns the escaped form of a given literal string, starting at the given index. This method is\n   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is\n   * protected to allow subclasses to override the fastpath escaping function to inline their\n   * escaping test. See {@link CharEscaperBuilder} for an example usage.\n   *\n   * @param s the literal string to be escaped\n   * @param index the index to start escaping from\n   * @return the escaped form of {@code string}\n   * @throws NullPointerException if {@code string} is null",
  "com.google.common.cache.CacheBuilder:newBuilder()" : "* Constructs a new {@code CacheBuilder} instance with default settings, including strong keys,\n   * strong values, and no automatic eviction of any kind.\n   *\n   * <p>Note that while this return type is {@code CacheBuilder<Object, Object>}, type parameters on\n   * the {@link #build} methods allow you to create a cache of any key and value type desired.",
  "com.google.common.util.concurrent.SmoothRateLimiter:doSetRate(double,long)" : null,
  "com.google.common.cache.LocalCache:expiresAfterAccess()" : null,
  "com.google.common.collect.AbstractMultimap:hashCode()" : "* Returns the hash code for this multimap.\n   *\n   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by\n   * {@link Multimap#asMap}.\n   *\n   * @see Map#hashCode",
  "com.google.common.graph.UndirectedMultiNetworkConnections:removeOutEdge(java.lang.Object)" : null,
  "com.google.common.collect.Multisets$MultisetIteratorImpl:<init>(com.google.common.collect.Multiset,java.util.Iterator)" : null,
  "com.google.common.graph.EndpointPair$Ordered:hashCode()" : null,
  "com.google.common.collect.UnmodifiableIterator:remove()" : "* Guaranteed to throw an exception and leave the underlying data unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.net.InetAddresses:fromBigInteger(java.math.BigInteger,boolean)" : "* Converts a BigInteger to either an IPv4 or IPv6 address. If the IP is IPv4, it must be\n   * constrained to 32 bits, otherwise it is constrained to 128 bits.\n   *\n   * @param address the address represented as a big integer\n   * @param isIpv6 whether the created address should be IPv4 or IPv6\n   * @return the BigInteger converted to an address\n   * @throws IllegalArgumentException if the BigInteger is not between 0 and maximum value for IPv4\n   *     or IPv6 respectively",
  "com.google.common.util.concurrent.OverflowAvoidingLockSupport:<init>()" : null,
  "com.google.common.base.SmallCharMatcher:chooseTableSize(int)" : "* Returns an array size suitable for the backing array of a hash table that uses open addressing\n   * with linear probing in its implementation. The returned size is the smallest power of two that\n   * can hold setSize elements with the desired load factor.",
  "com.google.common.collect.SortedLists$KeyAbsentBehavior$1:resultIndex(int)" : null,
  "com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State)" : null,
  "com.google.common.io.LittleEndianDataOutputStream:close()" : null,
  "com.google.common.util.concurrent.ForwardingBlockingQueue:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Tables$TransformedTable:createValues()" : null,
  "com.google.common.collect.Cut$AboveValue:canonical(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.primitives.Floats:hashCode(float)" : "* Returns a hash code for {@code value}; obsolete alternative to {@link Float#hashCode(float)}.\n   *\n   * @param value a primitive {@code float} value\n   * @return a hash code for the value",
  "com.google.common.io.Files:createParentDirs(java.io.File)" : "* Creates any necessary but nonexistent parent directories of the specified file. Note that if\n   * this operation fails it may have succeeded in creating some (but not all) of the necessary\n   * parent directories.\n   *\n   * @throws IOException if an I/O error occurs, or if any necessary but nonexistent parent\n   *     directories of the specified file could not be created.\n   * @since 4.0",
  "com.google.common.graph.UndirectedNetworkConnections:<init>(java.util.Map)" : null,
  "com.google.common.hash.Java8Compatibility:clear(java.nio.Buffer)" : null,
  "com.google.common.base.CharMatcher$None:trimLeadingFrom(java.lang.CharSequence)" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:successors()" : null,
  "com.google.common.collect.Maps$ValueDifferenceImpl:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.Resources:getResource(java.lang.String)" : "* Returns a {@code URL} pointing to {@code resourceName} if the resource is found using the\n   * {@linkplain Thread#getContextClassLoader() context class loader}. In simple environments, the\n   * context class loader will find resources from the class path. In environments where different\n   * threads can have different class loaders, for example app servers, the context class loader\n   * will typically have been set to an appropriate loader for the current thread.\n   *\n   * <p>In the unusual case where the context class loader is null, the class loader that loaded\n   * this class ({@code Resources}) will be used instead.\n   *\n   * @throws IllegalArgumentException if the resource is not found",
  "com.google.common.collect.Maps$AsMapView:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.base.CaseFormat$StringConverter:doBackward(java.lang.String)" : null,
  "com.google.common.graph.EndpointPair$Ordered:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:lockInterruptibly()" : null,
  "com.google.common.collect.ExplicitOrdering:<init>(java.util.List)" : null,
  "com.google.common.math.Stats:fromByteArray(byte[])" : "* Creates a Stats instance from the given byte representation which was obtained by {@link\n   * #toByteArray}.\n   *\n   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between\n   * versions.",
  "com.google.common.collect.ArrayTable$RowMap:getValue(int)" : null,
  "com.google.common.primitives.Chars:indexOf(char[],char,int,int)" : null,
  "com.google.common.collect.StandardTable:rowMap()" : null,
  "com.google.common.collect.Maps$6:descendingSet()" : null,
  "com.google.common.base.Functions$FunctionComposition:equals(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.SetMultimap)" : "* Returns an unmodifiable view of the specified {@code SetMultimap}. Query operations on the\n   * returned multimap \"read through\" to the specified multimap, and attempts to modify the returned\n   * multimap, either directly or through the multimap's views, result in an {@code\n   * UnsupportedOperationException}.\n   *\n   * <p>The returned multimap will be serializable if the specified multimap is serializable.\n   *\n   * @param delegate the multimap for which an unmodifiable view is to be returned\n   * @return an unmodifiable view of the specified multimap",
  "com.google.common.collect.MapMakerInternalMap$Segment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : "Unsafely extracts the weak value reference inside of the given {@code entry}.",
  "com.google.common.cache.LocalCache:usesWriteEntries()" : null,
  "com.google.common.base.Present:orNull()" : null,
  "com.google.common.base.Equivalence$Wrapper:hashCode()" : "Returns the result of {@link Equivalence#hash(Object)} applied to the wrapped reference.",
  "com.google.common.collect.EnumHashBiMap:inverse()" : null,
  "com.google.common.collect.Collections2$OrderedPermutationCollection:iterator()" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowExecutionExceptionOrError(java.lang.Throwable)" : null,
  "com.google.common.graph.ForwardingNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.ImmutableMultimap:copyOf(java.lang.Iterable)" : "* Returns an immutable multimap containing the specified entries. The returned multimap iterates\n   * over keys in the order they were first encountered in the input, and the values for each key\n   * are iterated in the order they were encountered.\n   *\n   * @throws NullPointerException if any key, value, or entry is null\n   * @since 19.0",
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:createInverse()" : null,
  "com.google.common.io.MoreFiles$PathByteSource:readAttributes()" : null,
  "com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class)" : "* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code\n   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type.\n   * Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to\n   * declare all of the checked exception types your try block can throw when calling an overload of\n   * this method so as to avoid losing the original exception type.\n   *\n   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,\n   * ...);} to ensure the compiler knows that it will throw.\n   *\n   * @return this method does not return; it always throws\n   * @throws IOException when the given throwable is an IOException\n   * @throws X when the given throwable is of the declared type X",
  "com.google.common.collect.ConcurrentHashMultiset:size()" : "* {@inheritDoc}\n   *\n   * <p>If the data in the multiset is modified by any other threads during this method, it is\n   * undefined which (if any) of these modifications will be reflected in the result.",
  "com.google.common.collect.ImmutableList$Builder:combine(com.google.common.collect.ImmutableList$Builder)" : null,
  "com.google.common.hash.Crc32cHashFunction:bits()" : null,
  "com.google.common.collect.SortedMapDifference:entriesOnlyOnLeft()" : null,
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(int,java.util.Collection)" : null,
  "com.google.common.base.Converter$ReverseConverter:doForward(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:sortedMap()" : null,
  "com.google.common.cache.CacheBuilder$2:<init>()" : null,
  "com.google.common.collect.Maps:keyOrNull(java.util.Map$Entry)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:getLockGraphNode()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultiset:add(java.lang.Object,int)" : "* {@inheritDoc}\n   *\n   * @throws IllegalArgumentException if the call would result in more than {@link\n   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",
  "com.google.common.reflect.TypeToken:isSupertypeOf(com.google.common.reflect.TypeToken)" : "* Returns true if this type is a supertype of the given {@code type}. \"Supertype\" is defined\n   * according to <a\n   * href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1\">the rules for type\n   * arguments</a> introduced with Java generics.\n   *\n   * @since 19.0",
  "com.google.common.collect.ImmutableMultiset$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:stopAsync()" : "* @since 15.0",
  "com.google.common.math.PairedStats:sampleCovariance()" : "* Returns the sample covariance of the values. The count must be greater than one.\n   *\n   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values\n   * multiple times, due to numerical errors.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",
  "com.google.common.collect.RegularImmutableTable$Values:get(int)" : null,
  "com.google.common.io.Files$FileByteSource:<init>(java.io.File)" : null,
  "com.google.common.collect.ForwardingMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.FunctionalEquivalence:toString()" : null,
  "com.google.common.collect.LexicographicalOrdering:compare(java.lang.Iterable,java.lang.Iterable)" : null,
  "com.google.common.math.Stats:sampleStandardDeviation()" : "* Returns the <a\n   * href=\"http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation\">\n   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a\n   * population, this is an estimator of the population standard deviation of the population which\n   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on\n   * the distribution). The count must be greater than one.\n   *\n   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple\n   * times, due to numerical errors. However, it is guaranteed never to return a negative result.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single value",
  "com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated(long,java.util.concurrent.TimeUnit)" : "* @since 15.0",
  "com.google.common.collect.Synchronized$SynchronizedEntry:hashCode()" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.MoreFiles:fileTreeChildren(java.nio.file.Path)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableList:copyOf(java.util.Collection)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)}\n   * returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while\n   * {@code ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one\n   * element (the given list itself).\n   *\n   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent\n   * collection that is currently being modified by another thread.\n   *\n   * @throws NullPointerException if {@code elements} contains a null element",
  "com.google.common.collect.SortedIterables:<init>()" : null,
  "com.google.common.collect.CollectSpliterators:<init>()" : null,
  "com.google.common.graph.UndirectedNetworkConnections:edgesConnecting(java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap$InverseSerializedForm:<init>(com.google.common.collect.HashBiMap)" : null,
  "com.google.common.util.concurrent.RateLimiter:tryAcquire(int)" : "* Acquires permits from this {@link RateLimiter} if it can be acquired immediately without delay.\n   *\n   * <p>This method is equivalent to {@code tryAcquire(permits, 0, anyUnit)}.\n   *\n   * @param permits the number of permits to acquire\n   * @return {@code true} if the permits were acquired, {@code false} otherwise\n   * @throws IllegalArgumentException if the requested number of permits is negative or zero\n   * @since 14.0",
  "com.google.common.hash.FarmHashFingerprint64:hashLength0to16(byte[],int,int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:remove()" : null,
  "com.google.common.collect.Synchronized$SynchronizedSortedSet:comparator()" : null,
  "com.google.common.reflect.AbstractInvocationHandler:hashCode()" : "* By default delegates to {@link Object#hashCode}. The dynamic proxies' {@code hashCode()} will\n   * delegate to this method. Subclasses can override this method to provide custom equality.",
  "com.google.common.collect.Multimaps$MapMultimap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Whitespace:setBits(java.util.BitSet)" : null,
  "com.google.common.collect.ArrayTable:column(java.lang.Object)" : "* Returns a view of all mappings that have the given column key. If the column key isn't in\n   * {@link #columnKeySet()}, an empty immutable map is returned.\n   *\n   * <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key\n   * with the corresponding value in the table. Changes to the returned map will update the\n   * underlying table, and vice versa.\n   *\n   * @param columnKey key of column to search for in the table\n   * @return the corresponding map from row keys to values",
  "com.google.common.reflect.TypeToken:isSubtypeOfArrayType(java.lang.reflect.GenericArrayType)" : null,
  "com.google.common.util.concurrent.CollectionFuture$ListFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)" : null,
  "com.google.common.graph.Graphs:copyOf(com.google.common.graph.ValueGraph)" : "Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.",
  "com.google.common.collect.Sets:newConcurrentHashSet(java.lang.Iterable)" : "* Creates a thread-safe set backed by a hash map and containing the given elements. The set is\n   * backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency\n   * guarantees.\n   *\n   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The\n   * set is serializable.\n   *\n   * @param elements the elements that the set should contain\n   * @return a new thread-safe set containing those elements (minus duplicates)\n   * @throws NullPointerException if {@code elements} or any of its contents is null\n   * @since 15.0",
  "com.google.common.collect.ImmutableSortedMap:higherKey(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractFuture$Listener:<init>(java.lang.Runnable,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.Iterators:getLast(java.util.Iterator,java.lang.Object)" : "* Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the\n   * iterator is empty.\n   *\n   * @param defaultValue the default value to return if the iterator is empty\n   * @return the last element of {@code iterator}\n   * @since 3.0",
  "com.google.common.util.concurrent.Striped:lazyWeakSemaphore(int,int)" : "* Creates a {@code Striped<Semaphore>} with lazily initialized, weakly referenced semaphores,\n   * with the specified number of permits.\n   *\n   * @param stripes the minimum number of stripes (semaphores) required\n   * @param permits the number of permits in each semaphore\n   * @return a new {@code Striped<Semaphore>}",
  "com.google.common.collect.ForwardingSortedMap:standardContainsKey(java.lang.Object)" : "* A sensible definition of {@link #containsKey} in terms of the {@code firstKey()} method of\n   * {@link #tailMap}. If you override {@link #tailMap}, you may wish to override {@link\n   * #containsKey} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:<init>(char[][])" : null,
  "com.google.common.collect.SortedIterables:comparator(java.util.SortedSet)" : null,
  "com.google.common.math.PairedStats:populationCovariance()" : "* Returns the population covariance of the values. The count must be non-zero.\n   *\n   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It\n   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple\n   * times, due to numerical errors.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture:cancel(boolean)" : null,
  "com.google.common.collect.AbstractMultiset$ElementSet:iterator()" : null,
  "com.google.common.collect.ImmutableSortedMap:emptyMap(java.util.Comparator)" : null,
  "com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Object)" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1:delegate()" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:entrySpliterator()" : null,
  "com.google.common.collect.AbstractBiMap:checkKey(java.lang.Object)" : "Returns its input, or throws an exception if this is not a valid key.",
  "com.google.common.base.Stopwatch:createUnstarted()" : "* Creates (but does not start) a new stopwatch using {@link System#nanoTime} as its time source.\n   *\n   * @since 15.0",
  "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:bmix64(long,long)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:maybeDrainReferenceQueues()" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:maxEncodedSize(int)" : null,
  "com.google.common.io.Files$1:<init>()" : null,
  "com.google.common.io.ByteSource$SlicedByteSource:sliceStream(java.io.InputStream)" : null,
  "com.google.common.base.CharMatcher:precomputed()" : "* Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to\n   * query than the original; your mileage may vary. Precomputation takes time and requires more\n   * memory, so it is only likely to be worthwhile if the precomputed matcher is queried very often.\n   *\n   * <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a\n   * precomputed matcher is faster, but it certainly would consume more memory (which doesn't seem\n   * like a worthwhile tradeoff in a browser).",
  "com.google.common.collect.Multimaps$CustomMultimap:createAsMap()" : null,
  "com.google.common.util.concurrent.AtomicDoubleArray:getAndSet(int,double)" : "* Atomically sets the element at position {@code i} to the given value and returns the old value.\n   *\n   * @param i the index\n   * @param newValue the new value\n   * @return the previous value",
  "com.google.common.collect.Synchronized$SynchronizedSetMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.ArrayTable$ColumnMap:getValue(int)" : null,
  "com.google.common.collect.FluentIterable:transformAndConcat(com.google.common.base.Function)" : "* Applies {@code function} to each element of this fluent iterable and returns a fluent iterable\n   * with the concatenated combination of results. {@code function} returns an Iterable of results.\n   *\n   * <p>The returned fluent iterable's iterator supports {@code remove()} if this function-returned\n   * iterables' iterator does. After a successful {@code remove()} call, the returned fluent\n   * iterable no longer contains the corresponding element.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#flatMap} (using a function that produces\n   * streams, not iterables).\n   *\n   * @since 13.0 (required {@code Function<E, Iterable<T>>} until 14.0)",
  "com.google.common.collect.ImmutableCollection:toArray()" : null,
  "com.google.common.collect.ForwardingCollection:standardRetainAll(java.util.Collection)" : "* A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's\n   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link\n   * #retainAll} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.base.Verify:verify(boolean,java.lang.String,int,int)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.io.CharSequenceReader:<init>(java.lang.CharSequence)" : "Creates a new reader wrapping the given character sequence.",
  "com.google.common.collect.AbstractSortedSetMultimap:get(java.lang.Object)" : "* Returns a collection view of all values associated with a key. If no mappings in the multimap\n   * have the provided key, an empty collection is returned.\n   *\n   * <p>Changes to the returned collection will update the underlying multimap, and vice versa.\n   *\n   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link\n   * Multimap} interface.",
  "com.google.common.collect.RegularImmutableTable$CellSet:get(int)" : null,
  "com.google.common.collect.Cut$BelowValue:greatestValueBelow(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.collect.AbstractBiMap$KeySet:remove(java.lang.Object)" : null,
  "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder:getBestValidator()" : "* Returns the ClassValue-using validator, or falls back to the \"weak Set\" implementation if\n     * unable to do so.",
  "com.google.common.collect.Maps:valueIterator(java.util.Iterator)" : null,
  "com.google.common.collect.ForwardingSortedSet:delegate()" : null,
  "com.google.common.collect.Multimaps$MapMultimap:createKeys()" : null,
  "com.google.common.io.Files:newReader(java.io.File,java.nio.charset.Charset)" : "* Returns a buffered reader that reads from a file using the given character set.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n   * java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}.\n   *\n   * @param file the file to read from\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @return the buffered reader",
  "com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ExecutorService)" : "* Creates an {@link ExecutorService} whose {@code submit} and {@code invokeAll} methods submit\n   * {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well\n   * as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code\n   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that\n   * the returned {@code ListeningExecutorService} never calls the delegate's {@code submit}, {@code\n   * invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented\n   * in the delegate's {@code execute} method or by wrapping the returned {@code\n   * ListeningExecutorService}.\n   *\n   * <p>If the delegate executor was already an instance of {@code ListeningExecutorService}, it is\n   * returned untouched, and the rest of this documentation does not apply.\n   *\n   * @since 10.0",
  "com.google.common.escape.Escapers$Builder:addEscape(char,java.lang.String)" : "* Adds a replacement string for the given input character. The specified character will be\n     * replaced by the given string whenever it occurs in the input, irrespective of whether it lies\n     * inside or outside the 'safe' range.\n     *\n     * @param c the character to be replaced\n     * @param replacement the string to replace the given character\n     * @return the builder instance\n     * @throws NullPointerException if {@code replacement} is null",
  "com.google.common.collect.ImmutableMultimap$KeysSerializedForm:readResolve()" : null,
  "com.google.common.reflect.TypeToken:isSupertypeOfArray(java.lang.reflect.GenericArrayType)" : null,
  "com.google.common.collect.AbstractNavigableMap:lastEntry()" : null,
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:inverse()" : null,
  "com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException:fillInStackTrace()" : null,
  "com.google.common.reflect.TypeVisitor:visitWildcardType(java.lang.reflect.WildcardType)" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap:putAll(java.util.Map)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @deprecated unsupported operation\n   * @throws UnsupportedOperationException always",
  "com.google.common.collect.Range:upperBoundType()" : "* Returns the type of this range's upper bound: {@link BoundType#CLOSED} if the range includes\n   * its upper endpoint, {@link BoundType#OPEN} if it does not.\n   *\n   * @throws IllegalStateException if this range is unbounded above (that is, {@link\n   *     #hasUpperBound()} returns {@code false})",
  "com.google.common.primitives.Bytes$ByteArrayAsList:hashCode()" : null,
  "com.google.common.collect.Multimaps:synchronizedSetMultimap(com.google.common.collect.SetMultimap)" : "* Returns a synchronized (thread-safe) {@code SetMultimap} backed by the specified multimap.\n   *\n   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.\n   *\n   * <p>The returned multimap will be serializable if the specified multimap is serializable.\n   *\n   * @param multimap the multimap to be wrapped\n   * @return a synchronized view of the specified multimap",
  "com.google.common.util.concurrent.ForwardingFuture:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Maps$TransformedEntriesMap:keySet()" : null,
  "com.google.common.collect.Iterables:indexOf(java.lang.Iterable,com.google.common.base.Predicate)" : "* Returns the index in {@code iterable} of the first element that satisfies the provided {@code\n   * predicate}, or {@code -1} if the Iterable has no such elements.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code\n   * predicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no\n   * such index.\n   *\n   * @since 2.0",
  "com.google.common.collect.ImmutableMultiset$Builder:setCount(java.lang.Object,int)" : "* Adds or removes the necessary occurrences of an element such that the element attains the\n     * desired count.\n     *\n     * @param element the element to add or remove occurrences of\n     * @param count the desired count of the element in this multiset\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code element} is null\n     * @throws IllegalArgumentException if {@code count} is negative",
  "com.google.common.base.CharMatcher$Any:matchesNoneOf(java.lang.CharSequence)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,int,java.lang.Object)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.Serialization:writeMap(java.util.Map,java.io.ObjectOutputStream)" : "* Stores the contents of a map in an output stream, as part of serialization. It does not support\n   * concurrent maps whose content may change while the method is running.\n   *\n   * <p>The serialized output consists of the number of entries, first key, first value, second key,\n   * second value, and so on.",
  "com.google.common.graph.StandardValueGraph:isDirected()" : null,
  "com.google.common.collect.ImmutableCollection:internalArrayEnd()" : "* If this collection is backed by an array of its elements in insertion order, returns the offset\n   * where this collection's elements end.",
  "com.google.common.collect.FluentIterable:toSortedSet(java.util.Comparator)" : "* Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code\n   * FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by\n   * {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted\n   * by its natural ordering, use {@code toSortedSet(Ordering.natural())}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSortedSet#toImmutableSortedSet} to\n   * {@code stream.collect()}.\n   *\n   * @param comparator the function by which to sort set elements\n   * @throws NullPointerException if any element of this iterable is {@code null}\n   * @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).",
  "com.google.common.io.Files:simplifyPath(java.lang.String)" : "* Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent\n   * to the original. The following heuristics are used:\n   *\n   * <ul>\n   *   <li>empty string becomes .\n   *   <li>. stays as .\n   *   <li>fold out ./\n   *   <li>fold out ../ when possible\n   *   <li>collapse multiple slashes\n   *   <li>delete trailing slashes (unless the path is just \"/\")\n   * </ul>\n   *\n   * <p>These heuristics do not always match the behavior of the filesystem. In particular, consider\n   * the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a\n   * symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the\n   * sibling of {@code a} referred to by {@code b}.\n   *\n   * @since 11.0",
  "com.google.common.math.LongMath:fitsInInt(long)" : null,
  "com.google.common.collect.ImmutableSortedSet$SerializedForm:readResolve()" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:setBackingMap(java.util.Map)" : "Used during deserialization only. The backing map must be empty.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:tryLock(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:retainAll(java.util.Collection)" : null,
  "com.google.common.base.CharMatcher:ascii()" : "* Determines whether a character is ASCII, meaning that its code point is less than 128.\n   *\n   * @since 19.0 (since 1.0 as constant {@code ASCII})",
  "com.google.common.collect.TreeMultiset$AvlNode:rebalance()" : null,
  "com.google.common.util.concurrent.AtomicLongMap:create()" : "Creates an {@code AtomicLongMap}.",
  "com.google.common.collect.AbstractMultimap$Values:spliterator()" : null,
  "com.google.common.collect.CartesianList$1:get(int)" : null,
  "com.google.common.collect.ForwardingMap:standardPutAll(java.util.Map)" : "* A sensible definition of {@link #putAll(Map)} in terms of {@link #put(Object, Object)}. If you\n   * override {@link #put(Object, Object)}, you may wish to override {@link #putAll(Map)} to forward\n   * to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.math.IntMath:log10Floor(int)" : null,
  "com.google.common.eventbus.SubscriberRegistry:<init>(com.google.common.eventbus.EventBus)" : null,
  "com.google.common.cache.LocalCache$Segment:expand()" : "Expands the table if possible.",
  "com.google.common.collect.ForwardingMultimap:keys()" : null,
  "com.google.common.collect.Iterators$ConcatenatedIterator:next()" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap:<init>(java.util.SortedMap,com.google.common.base.Predicate)" : null,
  "com.google.common.util.concurrent.Monitor:getQueueLength()" : "* Returns an estimate of the number of threads waiting to enter this monitor. The value is only\n   * an estimate because the number of threads may change dynamically while this method traverses\n   * internal data structures. This method is designed for use in monitoring of the system state,\n   * not for synchronization control.",
  "com.google.common.primitives.ImmutableDoubleArray:get(int)" : "* Returns the {@code double} value present at the given index.\n   *\n   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to\n   *     {@link #length}",
  "com.google.common.util.concurrent.AbstractIdleService:awaitTerminated(java.time.Duration)" : "* @since 28.0",
  "com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleWithFixedDelay(java.lang.Runnable,java.time.Duration,java.time.Duration)" : "* Duration-based overload of {@link #scheduleWithFixedDelay(Runnable, long, long, TimeUnit)}.\n   *\n   * @since 29.0",
  "com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.stream.IntStream)" : "* Appends all values from {@code stream}, in order, to the end of the values the built {@link\n     * ImmutableIntArray} will contain.\n     *\n     * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ForwardingTable:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Lists$Partition:get(int)" : null,
  "com.google.common.hash.Hasher:putChar(char)" : null,
  "com.google.common.util.concurrent.ClosingFuture:closeQuietly(java.lang.AutoCloseable,java.util.concurrent.Executor)" : null,
  "com.google.common.cache.LocalCache$Segment:drainValueReferenceQueue()" : null,
  "com.google.common.collect.ForwardingSortedSet:comparator()" : null,
  "com.google.common.collect.Lists$AbstractListWrapper:<init>(java.util.List)" : null,
  "com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys\n   * and values are the result of applying the provided mapping functions to the input elements.\n   *\n   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}), the\n   * values are merged using the specified merging function. If the merging function returns {@code\n   * null}, then the collector removes the value that has been computed for the key thus far (though\n   * future occurrences of the key would reinsert it).\n   *\n   * <p>Entries will appear in the encounter order of the first occurrence of the key.\n   *\n   * @since 21.0",
  "com.google.common.collect.ImmutableList:contains(java.lang.Object)" : null,
  "com.google.common.util.concurrent.InterruptibleTask$Blocker:<init>(com.google.common.util.concurrent.InterruptibleTask)" : null,
  "com.google.common.collect.Lists$ReverseList:size()" : null,
  "com.google.common.cache.LocalCache:reclaimKey(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.util.concurrent.Internal:toNanosSaturated(java.time.Duration)" : "* Returns the number of nanoseconds of the given duration without throwing or overflowing.\n   *\n   * <p>Instead of throwing {@link ArithmeticException}, this method silently saturates to either\n   * {@link Long#MAX_VALUE} or {@link Long#MIN_VALUE}. This behavior can be useful when decomposing\n   * a duration in order to call a legacy API which requires a {@code long, TimeUnit} pair.",
  "com.google.common.collect.Synchronized$SynchronizedSortedMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.cache.ForwardingCache:cleanUp()" : null,
  "com.google.common.cache.LocalCache:usesKeyReferences()" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:rowKeySet()" : null,
  "com.google.common.cache.AbstractCache:cleanUp()" : null,
  "com.google.common.hash.BloomFilter:optimalNumOfBits(long,double)" : "* Computes m (total bits of Bloom filter) which is expected to achieve, for the specified\n   * expected insertions, the required false positive probability.\n   *\n   * <p>See http://en.wikipedia.org/wiki/Bloom_filter#Probability_of_false_positives for the\n   * formula.\n   *\n   * @param n expected insertions (must be positive)\n   * @param p false positive rate (must be 0 < p < 1)",
  "com.google.common.collect.Iterables:toString(java.lang.Iterable)" : "* Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]}\n   * (that is, identical to {@link java.util.Arrays Arrays}{@code\n   * .toString(Iterables.toArray(iterable))}). Note that for <i>most</i> implementations of {@link\n   * Collection}, {@code collection.toString()} also gives the same result, but that behavior is not\n   * generally guaranteed.",
  "com.google.common.graph.GraphBuilder:cast()" : null,
  "com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.collect.ObjectArrays:<init>()" : null,
  "com.google.common.collect.Sets$DescendingSet:toString()" : null,
  "com.google.common.collect.ImmutableMultimap$Keys:elementSet()" : null,
  "com.google.common.collect.Multisets$ViewMultiset:distinctElements()" : null,
  "com.google.common.collect.CollectCollectors:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)" : null,
  "com.google.common.collect.Multimaps$MapMultimap:createAsMap()" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:floor(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractIdleService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)" : "* @since 13.0",
  "com.google.common.io.Files:getNameWithoutExtension(java.lang.String)" : "* Returns the file name without its <a\n   * href=\"http://en.wikipedia.org/wiki/Filename_extension\">file extension</a> or path. This is\n   * similar to the {@code basename} unix command. The result does not include the '{@code .}'.\n   *\n   * @param file The name of the file to trim the extension from. This can be either a fully\n   *     qualified file name (including a path) or just a file name.\n   * @return The file name without its path or extension.\n   * @since 14.0",
  "com.google.common.io.MultiInputStream:advance()" : "Closes the current input stream and opens the next one, if any.",
  "com.google.common.collect.ArrayListMultimap:<init>(int,int)" : null,
  "com.google.common.hash.Fingerprint2011:fingerprint(byte[],int,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorEntry(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMultimap$Values:contains(java.lang.Object)" : null,
  "com.google.common.util.concurrent.InterruptibleTask$Blocker:setOwner(java.lang.Thread)" : null,
  "com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object,boolean)" : "* @since 12.0",
  "com.google.common.collect.StandardTable:rowKeySet()" : null,
  "com.google.common.collect.ImmutableMultimap$Values:<init>(com.google.common.collect.ImmutableMultimap)" : null,
  "com.google.common.collect.Cut$BelowAll:isLessThan(java.lang.Comparable)" : null,
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.cache.CacheLoader$SupplierToCacheLoader:<init>(com.google.common.base.Supplier)" : null,
  "com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator)" : "* Combines three iterators into a single iterator. The returned iterator iterates across the\n   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in\n   * {@code c}. The source iterators are not polled until necessary.\n   *\n   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n   * supports it.",
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:checkHealthy()" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap)" : null,
  "com.google.common.util.concurrent.Futures:inCompletionOrder(java.lang.Iterable)" : "* Returns a list of delegate futures that correspond to the futures received in the order that\n   * they complete. Delegate futures return the same value or throw the same exception as the\n   * corresponding input future returns/throws.\n   *\n   * <p>\"In the order that they complete\" means, for practical purposes, about what you would\n   * expect, but there are some subtleties. First, we do guarantee that, if the output future at\n   * index n is done, the output future at index n-1 is also done. (But as usual with futures, some\n   * listeners for future n may complete before some for future n-1.) However, it is possible, if\n   * one input completes with result X and another later with result Y, for Y to come before X in\n   * the output future list. (Such races are impossible to solve without global synchronization of\n   * all future completions. And they should have little practical impact.)\n   *\n   * <p>Cancelling a delegate future propagates to input futures once all the delegates complete,\n   * either from cancellation or because an input future has completed. If N futures are passed in,\n   * and M delegates are cancelled, the remaining M input futures will be cancelled once N - M of\n   * the input futures complete. If all the delegates are cancelled, all the input futures will be\n   * too.\n   *\n   * @since 17.0",
  "com.google.common.collect.MapMakerInternalMap$Values:contains(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeMap$Builder:putAll(com.google.common.collect.RangeMap)" : "Copies all associations from the specified range map into this builder.",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Sets$PowerSet:contains(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:equals(java.lang.Object)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:transformEntry(java.util.Map$Entry)" : null,
  "com.google.common.collect.StandardTable$ColumnMap:createValues()" : null,
  "com.google.common.collect.FluentIterable:stream()" : "* Returns a stream of this fluent iterable's contents (similar to calling {@link\n   * Collection#stream} on a collection).\n   *\n   * <p><b>Note:</b> the earlier in the chain you can switch to {@code Stream} usage (ideally not\n   * going through {@code FluentIterable} at all), the more performant and idiomatic your code will\n   * be. This method is a transitional aid, to be used only when really necessary.\n   *\n   * @since 21.0",
  "com.google.common.collect.CompactHashMap:createEntrySet()" : null,
  "com.google.common.primitives.Booleans:reverse(boolean[])" : "* Reverses the elements of {@code array}. This is equivalent to {@code\n   * Collections.reverse(Booleans.asList(array))}, but is likely to be more efficient.\n   *\n   * @since 23.1",
  "com.google.common.hash.HashCode$LongHashCode:equalsSameBits(com.google.common.hash.HashCode)" : null,
  "com.google.common.collect.FluentIterable:getDelegate()" : null,
  "com.google.common.io.CountingInputStream:read(byte[],int,int)" : null,
  "com.google.common.collect.MapMaker:keyEquivalence(com.google.common.base.Equivalence)" : "* Sets a custom {@code Equivalence} strategy for comparing keys.\n   *\n   * <p>By default, the map uses {@link Equivalence#identity} to determine key equality when {@link\n   * #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place this is\n   * used is in {@link Interners.WeakInterner}.",
  "com.google.common.collect.ImmutableRangeSet$AsSet:subSet(com.google.common.collect.Range)" : null,
  "com.google.common.collect.CompactLinkedHashSet:moveLastEntry(int,int)" : null,
  "com.google.common.cache.LocalCache$WeakEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:first()" : null,
  "com.google.common.collect.ImmutableSortedSet:copyOfSorted(java.util.SortedSet)" : "* Returns an immutable sorted set containing the elements of a sorted set, sorted by the same\n   * {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the\n   * natural ordering of the elements.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * <p>This method is safe to use even when {@code sortedSet} is a synchronized or concurrent\n   * collection that is currently being modified by another thread.\n   *\n   * @throws NullPointerException if {@code sortedSet} or any of its elements is null",
  "com.google.common.base.Preconditions:checkElementIndex(int,int,java.lang.String)" : "* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size\n   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.\n   *\n   * @param index a user-supplied index identifying an element of an array, list or string\n   * @param size the size of that array, list or string\n   * @param desc the text to use to describe this index in an error message\n   * @return the value of {@code index}\n   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.util.concurrent.SettableFuture:create()" : "* Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.",
  "com.google.common.collect.Maps$KeySet:contains(java.lang.Object)" : null,
  "com.google.common.collect.Sets:newHashSet()" : "* Creates a <i>mutable</i>, initially empty {@code HashSet} instance.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSet#of()} instead. If {@code\n   * E} is an {@link Enum} type, use {@link EnumSet#noneOf} instead. Otherwise, strongly consider\n   * using a {@code LinkedHashSet} instead, at the cost of increased memory footprint, to get\n   * deterministic iteration behavior.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code HashSet} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.",
  "com.google.common.collect.ForwardingSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:createElementSet()" : null,
  "com.google.common.collect.ArrayTable$ArrayMap:entryIterator()" : null,
  "com.google.common.graph.GraphBuilder:undirected()" : "Returns a {@link GraphBuilder} for building undirected graphs.",
  "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.reflect.Reflection:newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)" : "* Returns a proxy instance that implements {@code interfaceType} by dispatching method\n   * invocations to {@code handler}. The class loader of {@code interfaceType} will be used to\n   * define the proxy class. To implement multiple interfaces or specify a class loader, use {@link\n   * Proxy#newProxyInstance}.\n   *\n   * @throws IllegalArgumentException if {@code interfaceType} does not specify the type of a Java\n   *     interface",
  "com.google.common.primitives.ImmutableLongArray$AsList:equals(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:entryIterator()" : null,
  "com.google.common.collect.RegularImmutableBiMap:checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)" : "* @throws IllegalArgumentException if another entry in the bucket has the same key\n   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash\n   *     flooding attack",
  "com.google.common.collect.Tables$UnmodifiableTable:putAll(com.google.common.collect.Table)" : null,
  "com.google.common.io.ReaderInputStream:availableCapacity(java.nio.Buffer)" : "Returns the number of elements between the limit and capacity.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String)" : "Equivalent to {@code newReentrantLock(lockName, false)}.",
  "com.google.common.graph.UndirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)" : null,
  "com.google.common.reflect.TypeToken:isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String,boolean)" : "* Creates a {@link ReentrantLock} with the given fairness policy. The {@code lockName} is used in\n   * the warning or exception output to help identify the locks involved in the detected deadlock.",
  "com.google.common.collect.ImmutableSortedMap:firstKey()" : null,
  "com.google.common.primitives.Longs:reverse(long[])" : "* Reverses the elements of {@code array}. This is equivalent to {@code\n   * Collections.reverse(Longs.asList(array))}, but is likely to be more efficient.\n   *\n   * @since 23.1",
  "com.google.common.collect.ImmutableSortedMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder)" : null,
  "com.google.common.hash.Java8Compatibility:limit(java.nio.Buffer,int)" : null,
  "com.google.common.cache.LocalCache:nullifyWriteOrder(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:getNext()" : null,
  "com.google.common.primitives.Bytes:lastIndexOf(byte[],byte,int,int)" : null,
  "com.google.common.math.DoubleMath:mean(java.lang.Iterable)" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of\n   * {@code values}.\n   *\n   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of\n   * the arithmetic mean of the population.\n   *\n   * @param values a nonempty series of values, which will be converted to {@code double} values\n   *     (this may cause loss of precision)\n   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value\n   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite\n   *     values.",
  "com.google.common.collect.ForwardingNavigableSet:standardPollLast()" : "* A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method.\n   * If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to\n   * forward to this implementation.",
  "com.google.common.reflect.MutableTypeToInstanceMap:putAll(java.util.Map)" : "* Not supported. Use {@link #putInstance} instead.\n   *\n   * @deprecated unsupported operation\n   * @throws UnsupportedOperationException always",
  "com.google.common.collect.AbstractNavigableMap:lowerKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableList$Builder:<init>()" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableList#builder}.",
  "com.google.common.io.ByteSource$EmptyByteSource:<init>()" : null,
  "com.google.common.collect.CompactHashSet:spliterator()" : null,
  "com.google.common.math.LinearTransformation:horizontal(double)" : "* Builds an instance representing a horizontal transformation with a constant value of {@code y}.\n   * (The inverse of this will be a vertical transformation.)",
  "com.google.common.collect.Cut:belowAll()" : null,
  "com.google.common.math.LongMath:ceilingPowerOfTwo(long)" : "* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to\n   * {@code checkedPow(2, log2(x, CEILING))}.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @throws ArithmeticException of the next-higher power of two is not representable as a {@code\n   *     long}, i.e. when {@code x > 2^62}\n   * @since 20.0",
  "com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence,int)" : "* Returns the index of the first matching BMP character in a character sequence, starting from a\n   * given position, or {@code -1} if no character matches after that position.\n   *\n   * <p>The default implementation iterates over the sequence in forward order, beginning at {@code\n   * start}, calling {@link #matches} for each character.\n   *\n   * @param sequence the character sequence to examine\n   * @param start the first index to examine; must be nonnegative and no greater than {@code\n   *     sequence.length()}\n   * @return the index of the first matching character, guaranteed to be no less than {@code start},\n   *     or {@code -1} if no character matches\n   * @throws IndexOutOfBoundsException if start is negative or greater than {@code\n   *     sequence.length()}",
  "com.google.common.collect.StandardTable$ColumnMap:createEntrySet()" : null,
  "com.google.common.graph.ForwardingNetwork:edgeOrder()" : null,
  "com.google.common.collect.EnumMultiset:entryIterator()" : null,
  "com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.graph.ElementOrder:cast()" : null,
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:copy()" : null,
  "com.google.common.base.Converter$ReverseConverter:hashCode()" : null,
  "com.google.common.util.concurrent.ServiceManager:startAsync()" : "* Initiates service {@linkplain Service#startAsync startup} on all the services being managed. It\n   * is only valid to call this method if all of the services are {@linkplain State#NEW new}.\n   *\n   * @return this\n   * @throws IllegalStateException if any of the Services are not {@link State#NEW new} when the\n   *     method is called.",
  "com.google.common.eventbus.EventBus:unregister(java.lang.Object)" : "* Unregisters all subscriber methods on a registered {@code object}.\n   *\n   * @param object object whose subscriber methods should be unregistered.\n   * @throws IllegalArgumentException if the object was not previously registered.",
  "com.google.common.primitives.Chars:rotate(char[],int)" : "* Performs a right rotation of {@code array} of \"distance\" places, so that the first element is\n   * moved to index \"distance\", and the element at index {@code i} ends up at index {@code (distance\n   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Chars.asList(array),\n   * distance)}, but is considerably faster and avoids allocation and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @since 32.0.0",
  "com.google.common.collect.ForwardingSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.AtomicDouble:getAndUpdate(java.util.function.DoubleUnaryOperator)" : "* Atomically updates the current value with the results of applying the given function.\n   *\n   * @param updateFunction the update function\n   * @return the previous value\n   * @since 31.1",
  "com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:delegate()" : null,
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double)" : null,
  "com.google.common.primitives.UnsignedLong:valueOf(java.math.BigInteger)" : "* Returns a {@code UnsignedLong} representing the same value as the specified {@code BigInteger}.\n   * This is the inverse operation of {@link #bigIntegerValue()}.\n   *\n   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}",
  "com.google.common.collect.MinMaxPriorityQueue$Heap:findMinChild(int)" : "Returns the minimum child or {@code -1} if no child exists.",
  "com.google.common.math.Quantiles:scale(int)" : "* Specifies the computation of q-quantiles.\n   *\n   * @param scale the scale for the quantiles to be calculated, i.e. the q of the q-quantiles, which\n   *     must be positive",
  "com.google.common.io.CharSource:empty()" : "* Returns an immutable {@link CharSource} that contains no characters.\n   *\n   * @since 15.0",
  "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)" : "Schedules the task to run on the provided executor on behalf of the service.",
  "com.google.common.collect.SortedMultisets$NavigableElementSet:descendingIterator()" : null,
  "com.google.common.collect.ImmutableRangeSet:rangeContaining(java.lang.Comparable)" : null,
  "com.google.common.collect.LinkedListMultimap:equals(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int,char)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Multimaps:index(java.util.Iterator,com.google.common.base.Function)" : "* Creates an index {@code ImmutableListMultimap} that contains the results of applying a\n   * specified function to each item in an {@code Iterator} of values. Each value will be stored as\n   * a value in the resulting multimap, yielding a multimap with the same size as the input\n   * iterator. The key used to store that value in the multimap will be the result of calling the\n   * function on that value. The resulting multimap is created as an immutable snapshot. In the\n   * returned multimap, keys appear in the order they are first encountered, and the values\n   * corresponding to each key appear in the same order as they are encountered.\n   *\n   * <p>For example,\n   *\n   * {@snippet :\n   * List<String> badGuys =\n   *     Arrays.asList(\"Inky\", \"Blinky\", \"Pinky\", \"Pinky\", \"Clyde\");\n   * Function<String, Integer> stringLengthFunction = ...;\n   * Multimap<Integer, String> index =\n   *     Multimaps.index(badGuys.iterator(), stringLengthFunction);\n   * System.out.println(index);\n   * }\n   *\n   * <p>prints\n   *\n   * {@snippet :\n   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}\n   * }\n   *\n   * <p>The returned multimap is serializable if its keys and values are all serializable.\n   *\n   * @param values the values to use when constructing the {@code ImmutableListMultimap}\n   * @param keyFunction the function used to produce the key for each value\n   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code\n   *     keyFunction} on each value in the input collection to that value\n   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code\n   *     keyFunction} produces {@code null} for any key\n   * @since 10.0",
  "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:write(java.nio.ByteBuffer)" : null,
  "com.google.common.util.concurrent.AbstractService$StateSnapshot:externalState()" : "* @see Service#state()",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:remove(java.lang.Object)" : null,
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:isHorizontal()" : null,
  "com.google.common.collect.AbstractSortedKeySortedSetMultimap:<init>(java.util.SortedMap)" : null,
  "com.google.common.hash.Murmur3_32HashFunction:mixK1(int)" : null,
  "com.google.common.base.Joiner$1:useForNull(java.lang.String)" : "* Returns a joiner with the same behavior as this one, except automatically substituting {@code\n   * nullText} for any provided null elements.",
  "com.google.common.collect.Tables$TransposeTable:<init>(com.google.common.collect.Table)" : null,
  "com.google.common.reflect.AbstractInvocationHandler:isProxyOfSameInterfaces(java.lang.Object,java.lang.Class)" : null,
  "com.google.common.base.internal.Finalizer:startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)" : "* Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively.\n   *\n   * @param finalizableReferenceClass FinalizableReference.class.\n   * @param queue a reference queue that the thread will poll.\n   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued\n   *     either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its\n   *     close() method is called.",
  "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:transform(java.lang.Object,java.util.Collection)" : null,
  "com.google.common.collect.EnumMultiset$Itr:hasNext()" : null,
  "com.google.common.hash.AbstractHashFunction:hashUnencodedChars(java.lang.CharSequence)" : null,
  "com.google.common.collect.ImmutableSet$SerializedForm:readResolve()" : null,
  "com.google.common.collect.CompactHashSet:setElement(int,java.lang.Object)" : null,
  "com.google.common.primitives.Ints:compare(int,int)" : "* Compares the two specified {@code int} values. The sign of the value returned is the same as\n   * that of {@code ((Integer) a).compareTo(b)}.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the\n   * equivalent {@link Integer#compare} method instead.\n   *\n   * @param a the first {@code int} to compare\n   * @param b the second {@code int} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.collect.ForwardingNavigableMap:floorKey(java.lang.Object)" : null,
  "com.google.common.net.InternetDomainName:<init>(java.lang.String)" : "Constructor used to implement {@link #from(String)}, and from subclasses.",
  "com.google.common.util.concurrent.TimeoutFuture$Fire:run()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object,boolean)" : null,
  "com.google.common.net.InetAddresses:parseOctet(java.lang.String,int,int)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:ceilingKey(java.lang.Object)" : null,
  "com.google.common.base.Predicates:in(java.util.Collection)" : "* Returns a predicate that evaluates to {@code true} if the object reference being tested is a\n   * member of the given collection. It does not defensively copy the collection passed in, so\n   * future changes to it will alter the behavior of the predicate.\n   *\n   * <p>This method can technically accept any {@code Collection<?>}, but using a typed collection\n   * helps prevent bugs. This approach doesn't block any potential users since it is always possible\n   * to use {@code Predicates.<Object>in()}.\n   *\n   * <p>You may prefer to use a method reference (e.g., {@code target::contains}) instead of this\n   * method. However, there are some subtle considerations:\n   *\n   * <ul>\n   *   <li>The {@link Predicate} returned by this method is {@link Serializable}.\n   *   <li>The {@link Predicate} returned by this method catches {@link ClassCastException} and\n   *       {@link NullPointerException}.\n   *   <li>Code that chains multiple predicates together (especially negations) may be more readable\n   *       using this method. For example, {@code not(in(target))} is generally more readable than\n   *       {@code not(target::contains)}.\n   *   <li>This method's name conflicts with Kotlin's {@code in} operator.\n   * </ul>\n   *\n   * <p><b>Discouraged:</b> Prefer using either {@code target::contains} or {@code x ->\n   * target.contains(x)}, but note that lambdas do not have human-readable {@link #toString()}\n   * representations and are not serializable.\n   *\n   * @param target the collection that may contain the function input",
  "com.google.common.collect.ImmutableMultiset$Builder:<init>()" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableMultiset#builder}.",
  "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitClass(java.lang.Class)" : null,
  "com.google.common.base.MoreObjects:firstNonNull(java.lang.Object,java.lang.Object)" : "* Returns the first of two given parameters that is not {@code null}, if either is, or otherwise\n   * throws a {@link NullPointerException}.\n   *\n   * <p>To find the first non-null element in an iterable, use {@code Iterables.find(iterable,\n   * Predicates.notNull())}. For varargs, use {@code Iterables.find(Arrays.asList(a, b, c, ...),\n   * Predicates.notNull())}, static importing as necessary.\n   *\n   * <p><b>Note:</b> if {@code first} is represented as an {@link Optional}, this can be\n   * accomplished with {@link Optional#or(Object) first.or(second)}. That approach also allows for\n   * lazy evaluation of the fallback instance, using {@link Optional#or(Supplier)\n   * first.or(supplier)}.\n   *\n   * <p><b>Java 9 users:</b> use {@code java.util.Objects.requireNonNullElse(first, second)}\n   * instead.\n   *\n   * @return {@code first} if it is non-null; otherwise {@code second} if it is non-null\n   * @throws NullPointerException if both {@code first} and {@code second} are null\n   * @since 18.0 (since 3.0 as {@code Objects.firstNonNull()}).",
  "com.google.common.collect.AbstractTable$Values:clear()" : null,
  "com.google.common.collect.TreeTraverser$1:children(java.lang.Object)" : "Returns the children of the specified node. Must not contain null.",
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues()" : "Uses an insertion-ordered hash-based {@code Set} to store value collections.",
  "com.google.common.collect.LinkedListMultimap:toString()" : "* Returns a string representation of the multimap, generated by calling {@code toString} on the\n   * map returned by {@link Multimap#asMap}.\n   *\n   * @return a string representation of the multimap",
  "com.google.common.cache.LocalCache$Segment:tryDrainReferenceQueues()" : "Cleanup collected entries when the lock is available.",
  "com.google.common.collect.AbstractNavigableMap:lastKey()" : null,
  "com.google.common.cache.LocalCache$Segment:waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference)" : null,
  "com.google.common.util.concurrent.FuturesGetChecked:bestGetCheckedTypeValidator()" : null,
  "com.google.common.hash.BloomFilter:mightContain(java.lang.Object)" : "* Returns {@code true} if the element <i>might</i> have been put in this Bloom filter, {@code\n   * false} if this is <i>definitely</i> not the case.",
  "com.google.common.primitives.Chars:toArray(java.util.Collection)" : "* Copies a collection of {@code Character} instances into a new array of primitive {@code char}\n   * values.\n   *\n   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n   * Calling this method is as thread-safe as calling that method.\n   *\n   * @param collection a collection of {@code Character} objects\n   * @return an array containing the same values as {@code collection}, in the same order, converted\n   *     to primitives\n   * @throws NullPointerException if {@code collection} or any of its elements is null",
  "com.google.common.reflect.TypeToken$TypeCollector$1:getSuperclass(java.lang.Object)" : null,
  "com.google.common.base.Predicates$InPredicate:hashCode()" : null,
  "com.google.common.collect.TableCollectors$MutableCell:getRowKey()" : null,
  "com.google.common.io.CharSequenceReader:read(java.nio.CharBuffer)" : null,
  "com.google.common.cache.CacheStats:hashCode()" : null,
  "com.google.common.collect.RegularImmutableAsList:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.collect.ImmutableCollection:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.ImmutableMapValues:isPartialView()" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:getAndAdd(java.lang.Object,long)" : "* Adds {@code delta} to the value currently associated with {@code key}, and returns the old\n   * value.",
  "com.google.common.collect.HashBiMap:create(java.util.Map)" : "* Constructs a new bimap containing initial values from {@code map}. The bimap is created with an\n   * initial capacity sufficient to hold the mappings in the specified map.",
  "com.google.common.collect.Synchronized$SynchronizedSortedSet:first()" : null,
  "com.google.common.collect.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.reflect.Invokable:getExceptionTypes()" : "Returns all declared exception types of this {@code Invokable}.",
  "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Iterable)" : "* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code\n   * startNodes}, in the order of a depth-first pre-order traversal. This is equivalent to a\n   * depth-first pre-order traversal of a graph with an additional root node whose successors are\n   * the listed {@code startNodes}.\n   *\n   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph\n   * @see #depthFirstPreOrder(Object)\n   * @since 24.1",
  "com.google.common.collect.StandardTable:columnMap()" : null,
  "com.google.common.collect.LinkedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* {@inheritDoc}\n   *\n   * <p>If any entries for the specified {@code key} already exist in the multimap, their values are\n   * changed in-place without affecting the iteration order.\n   *\n   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",
  "com.google.common.util.concurrent.Uninterruptibles:sleepUninterruptibly(long,java.util.concurrent.TimeUnit)" : "Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly.",
  "com.google.common.graph.StandardMutableValueGraph:removeNode(java.lang.Object)" : null,
  "com.google.common.collect.Sets$DescendingSet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableCollection:retainAll(java.util.Collection)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.util.concurrent.Futures:nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)" : "* Returns a {@code ListenableFuture} whose result is set from the supplied future when it\n   * completes. Cancelling the supplied future will also cancel the returned future, but cancelling\n   * the returned future will have no effect on the supplied future.\n   *\n   * @since 15.0",
  "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:execute(java.lang.Runnable)" : null,
  "com.google.common.util.concurrent.Monitor:await(com.google.common.util.concurrent.Monitor$Guard,boolean)" : null,
  "com.google.common.collect.Multimaps$MapMultimap:createKeySet()" : null,
  "com.google.common.net.InetAddresses:forUriString(java.lang.String)" : "* Returns an InetAddress representing the literal IPv4 or IPv6 host portion of a URL, encoded in\n   * the format specified by RFC 3986 section 3.2.2.\n   *\n   * <p>This method is similar to {@link InetAddresses#forString(String)}, however, it requires that\n   * IPv6 addresses are surrounded by square brackets.\n   *\n   * <p>This method is the inverse of {@link InetAddresses#toUriString(java.net.InetAddress)}.\n   *\n   * <p>This method accepts non-ASCII digits, for example {@code \"１９２.１６８.０.１\"} (those are fullwidth\n   * characters). That is consistent with {@link InetAddress}, but not with various RFCs. If you\n   * want to accept ASCII digits only, you can use something like {@code\n   * CharMatcher.ascii().matchesAllOf(ipString)}.\n   *\n   * @param hostAddr an RFC 3986 section 3.2.2 encoded IPv4 or IPv6 address\n   * @return an InetAddress representing the address in {@code hostAddr}\n   * @throws IllegalArgumentException if {@code hostAddr} is not a valid IPv4 address, or IPv6\n   *     address surrounded by square brackets, or if the address has a scope ID that fails\n   *     validation against the interfaces on the machine (as required by Java's {@link\n   *     InetAddress})",
  "com.google.common.collect.Collections2$FilteredCollection:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.ArrayTable:rowMap()" : null,
  "com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)" : "* Returns a view of a multimap whose values are derived from the original multimap's entries. In\n   * contrast to {@link #transformValues}, this method's entry-transformation logic may depend on\n   * the key as well as the value.\n   *\n   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.\n   * For example, the code:\n   *\n   * {@snippet :\n   * SetMultimap<String, Integer> multimap =\n   *     ImmutableSetMultimap.of(\"a\", 1, \"a\", 4, \"b\", -6);\n   * EntryTransformer<String, Integer, String> transformer =\n   *     new EntryTransformer<String, Integer, String>() {\n   *       public String transformEntry(String key, Integer value) {\n   *          return (value >= 0) ? key : \"no\" + key;\n   *       }\n   *     };\n   * Multimap<String, String> transformed =\n   *     Multimaps.transformEntries(multimap, transformer);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {a=[a, a], b=[nob]}}.\n   *\n   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view\n   * supports removal operations, and these are reflected in the underlying multimap.\n   *\n   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided\n   * that the transformer is capable of accepting null inputs. The transformed multimap might\n   * contain null values if the transformer sometimes gives a null result.\n   *\n   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap\n   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,\n   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,\n   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a\n   * {@code Set}.\n   *\n   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned\n   * multimap to be a view, but it means that the transformer will be applied many times for bulk\n   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform\n   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap\n   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.\n   *\n   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code\n   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of\n   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as\n   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the\n   * transformed multimap.\n   *\n   * @since 7.0",
  "com.google.common.collect.RegularImmutableMultiset:elementSet()" : null,
  "com.google.common.collect.MapMakerInternalMap:reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference)" : null,
  "com.google.common.reflect.TypeToken$Bounds:isSubtypeOf(java.lang.reflect.Type)" : null,
  "com.google.common.hash.Hasher:putBytes(byte[],int,int)" : null,
  "com.google.common.collect.Maps:<init>()" : null,
  "com.google.common.collect.ForwardingTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.AbstractHasher:putShort(short)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:valueStrength()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)" : null,
  "com.google.common.primitives.Bytes$ByteArrayAsList:contains(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$Keys:iterator()" : null,
  "com.google.common.base.Ascii:toUpperCase(char)" : "* If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character}, returns the\n   * uppercase equivalent. Otherwise returns the argument.",
  "com.google.common.io.CharSource$StringCharSource:copyTo(com.google.common.io.CharSink)" : null,
  "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:trySetStarted()" : null,
  "com.google.common.collect.ImmutableMultimap:of()" : "* Returns an empty multimap.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.primitives.Longs:indexOf(long[],long[])" : "* Returns the start position of the first occurrence of the specified {@code target} within\n   * {@code array}, or {@code -1} if there is no such occurrence.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n   * i, i + target.length)} contains exactly the same elements as {@code target}.\n   *\n   * @param array the array to search for the sequence {@code target}\n   * @param target the array to search for as a sub-sequence of {@code array}",
  "com.google.common.base.CharMatcher$AnyOf:toString()" : null,
  "com.google.common.net.MediaType:withParameters(com.google.common.collect.Multimap)" : "* <em>Replaces</em> all parameters with the given parameters.\n   *\n   * @throws IllegalArgumentException if any parameter or value is invalid",
  "com.google.common.collect.Sets$DescendingSet:descendingSet()" : null,
  "com.google.common.hash.Hashing$Crc32cMethodHandles:crc32cConstructor()" : null,
  "com.google.common.collect.Maps$EntrySet:retainAll(java.util.Collection)" : null,
  "com.google.common.graph.ForwardingNetwork:edgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingBlockingDeque:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.net.MediaType:withCharset(java.nio.charset.Charset)" : "* Returns a new instance with the same type and subtype as this instance, with the {@code\n   * charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code\n   * charset} parameter will be present on the new instance regardless of the number set on this\n   * one.\n   *\n   * <p>If a charset must be specified that is not supported on this JVM (and thus is not\n   * representable as a {@link Charset} instance), use {@link #withParameter}.",
  "com.google.common.collect.EmptyImmutableSetMultimap:<init>()" : null,
  "com.google.common.collect.ForwardingCollection:size()" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:getHash()" : null,
  "com.google.common.base.CharMatcher:forPredicate(com.google.common.base.Predicate)" : "* Returns a matcher with identical behavior to the given {@link Character}-based predicate, but\n   * which operates on primitive {@code char} instances instead.",
  "com.google.common.collect.Sets$DescendingSet:last()" : null,
  "com.google.common.util.concurrent.AtomicDoubleArray:getAndAdd(int,double)" : "* Atomically adds the given value to the element at index {@code i}.\n   *\n   * @param i the index\n   * @param delta the value to add\n   * @return the previous value",
  "com.google.common.base.Joiner:join(java.lang.Object[])" : "* Returns a string containing the string representation of each of {@code parts}, using the\n   * previously configured separator between each.",
  "com.google.common.collect.Collections2:containsAllImpl(java.util.Collection,java.util.Collection)" : "* Returns {@code true} if the collection {@code self} contains all of the elements in the\n   * collection {@code c}.\n   *\n   * <p>This method iterates over the specified collection {@code c}, checking each element returned\n   * by the iterator in turn to see if it is contained in the specified collection {@code self}. If\n   * all elements are so contained, {@code true} is returned, otherwise {@code false}.\n   *\n   * @param self a collection which might contain all elements in {@code c}\n   * @param c a collection whose elements might be contained by {@code self}",
  "com.google.common.reflect.ClassPath:getClassName(java.lang.String)" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:getSubMultiset(int,int)" : null,
  "com.google.common.collect.ImmutableAsList:isPartialView()" : null,
  "com.google.common.io.FileBackedOutputStream:close()" : null,
  "com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.io.MoreFiles:deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path)" : "* Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of exceptions\n   * that occurred or null if no exceptions were thrown.",
  "com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.stream.DoubleStream)" : "* Returns an immutable array containing all the values from {@code stream}, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.Synchronized$SynchronizedMultiset:hashCode()" : null,
  "com.google.common.base.Ascii:truncate(java.lang.CharSequence,int,java.lang.String)" : "* Truncates the given character sequence to the given maximum length. If the length of the\n   * sequence is greater than {@code maxLength}, the returned string will be exactly {@code\n   * maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise,\n   * the sequence will be returned as a string with no changes to the content.\n   *\n   * <p>Examples:\n   *\n   * {@snippet :\n   * Ascii.truncate(\"foobar\", 7, \"...\"); // returns \"foobar\"\n   * Ascii.truncate(\"foobar\", 5, \"...\"); // returns \"fo...\"\n   * }\n   *\n   * <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use\n   * with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe\n   * for use with it (such as all-ASCII text) and for simple debugging text. When using this method,\n   * consider the following:\n   *\n   * <ul>\n   *   <li>it may split surrogate pairs\n   *   <li>it may split characters and combining characters\n   *   <li>it does not consider word boundaries\n   *   <li>if truncating for display to users, there are other considerations that must be taken\n   *       into account\n   *   <li>the appropriate truncation indicator may be locale-dependent\n   *   <li>it is safe to use non-ASCII characters in the truncation indicator\n   * </ul>\n   *\n   * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code\n   *     truncationIndicator}\n   * @since 16.0",
  "com.google.common.net.HostAndPort:isValidPort(int)" : "Return true for valid port numbers.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:getValue()" : null,
  "com.google.common.collect.ArrayTable:valuesIterator()" : null,
  "com.google.common.collect.Iterators$PeekingImpl:<init>(java.util.Iterator)" : null,
  "com.google.common.cache.LocalCache$Segment:containsKey(java.lang.Object,int)" : null,
  "com.google.common.collect.Multimaps:unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap)" : "* Returns an unmodifiable view of the specified {@code SortedSetMultimap}. Query operations on\n   * the returned multimap \"read through\" to the specified multimap, and attempts to modify the\n   * returned multimap, either directly or through the multimap's views, result in an {@code\n   * UnsupportedOperationException}.\n   *\n   * <p>The returned multimap will be serializable if the specified multimap is serializable.\n   *\n   * @param delegate the multimap for which an unmodifiable view is to be returned\n   * @return an unmodifiable view of the specified multimap",
  "com.google.common.collect.JdkBackedImmutableMultiset:size()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:growIfNeeded()" : null,
  "com.google.common.util.concurrent.AtomicLongMap:put(java.lang.Object,long)" : "* Associates {@code newValue} with {@code key} in this map, and returns the value previously\n   * associated with {@code key}, or zero if there was no such value.",
  "com.google.common.collect.Tables$TransformedTable:cellIterator()" : null,
  "com.google.common.graph.DirectedNetworkConnections:edgesConnecting(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$HashIterator:nextInChain()" : "Finds the next entry in the current chain. Returns true if an entry was found.",
  "com.google.common.collect.MoreCollectors$ToOptionalState:combine(com.google.common.collect.MoreCollectors$ToOptionalState)" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:columnMap()" : null,
  "com.google.common.math.LongMath:mod(long,int)" : "* Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x %\n   * m}, which might be negative.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * mod(7, 4) == 3\n   * mod(-7, 4) == 1\n   * mod(-1, 4) == 3\n   * mod(-8, 4) == 0\n   * mod(8, 4) == 0\n   * }\n   *\n   * @throws ArithmeticException if {@code m <= 0}\n   * @see <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3\">\n   *     Remainder Operator</a>",
  "com.google.common.collect.Synchronized$SynchronizedDeque:peekLast()" : null,
  "com.google.common.collect.MapMaker:getValueStrength()" : null,
  "com.google.common.util.concurrent.FluentFuture:catching(java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)" : "* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code\n   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code\n   * fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the\n   * primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an\n   * exception is thrown, this exception is used as the result of the output {@code Future}.\n   *\n   * <p>Usage example:\n   *\n   * {@snippet :\n   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch\n   * // counters.\n   * ListenableFuture<Integer> faultTolerantFuture =\n   *     fetchCounters().catching(FetchException.class, x -> 0, directExecutor());\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n   * listeners are also applicable to heavyweight functions passed to this method.\n   *\n   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It\n   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}\n   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link\n   * #transform}.\n   *\n   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception\n   *     type is matched against the input's exception. \"The input's exception\" means the cause of\n   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a\n   *     different kind of exception, that exception itself. To avoid hiding bugs and other\n   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code\n   *     Throwable.class} in particular.\n   * @param fallback the {@link Function} to be called if the input fails with the expected\n   *     exception type. The function's argument is the input's exception. \"The input's exception\"\n   *     means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if\n   *     {@code get()} throws a different kind of exception, that exception itself.\n   * @param executor the executor that runs {@code fallback} if the input fails",
  "com.google.common.collect.Multimaps$CustomSetMultimap:createAsMap()" : null,
  "com.google.common.cache.LocalCache$WeakEntry:getAccessTime()" : null,
  "com.google.common.base.CaseFormat:convert(com.google.common.base.CaseFormat,java.lang.String)" : "Enum values can override for performance reasons.",
  "com.google.common.primitives.Doubles$DoubleArrayAsList:contains(java.lang.Object)" : null,
  "com.google.common.reflect.ClassPath:getClassPathFromManifest(java.io.File,java.util.jar.Manifest)" : "* Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according\n   * to <a\n   * href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes\">JAR\n   * File Specification</a>. If {@code manifest} is null, it means the jar file has no manifest, and\n   * an empty set will be returned.",
  "com.google.common.reflect.Invokable:from(java.lang.reflect.Method)" : "Returns {@link Invokable} of {@code method}.",
  "com.google.common.collect.Maps$BiMapConverter:toString()" : null,
  "com.google.common.collect.EnumHashBiMap:entrySet()" : null,
  "com.google.common.collect.StandardRowSortedTable$RowSortedMap:createKeySet()" : null,
  "com.google.common.cache.LocalCache$WeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.escape.Escapers:<init>()" : null,
  "com.google.common.collect.ImmutableEnumSet:size()" : null,
  "com.google.common.collect.ImmutableMultimap:valueIterator()" : null,
  "com.google.common.collect.Streams$MapWithIndexSpliterator:characteristics()" : null,
  "com.google.common.collect.Maps$DescendingMap:entrySet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollFirst()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:toString()" : "* Returns a string representation of this array in the same form as {@link\n   * Arrays#toString(double[])}, for example {@code \"[1, 2, 3]\"}.",
  "com.google.common.primitives.ImmutableDoubleArray:equals(java.lang.Object)" : "* Returns {@code true} if {@code object} is an {@code ImmutableDoubleArray} containing the same\n   * values as this one, in the same order. Values are compared as if by {@link Double#equals}.",
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:copy()" : null,
  "com.google.common.util.concurrent.SmoothRateLimiter:resync(long)" : "Updates {@code storedPermits} and {@code nextFreeTicketMicros} based on the current time.",
  "com.google.common.collect.Maps$AsMapView:remove(java.lang.Object)" : null,
  "com.google.common.collect.GeneralRange:intersect(com.google.common.collect.GeneralRange)" : "* Returns the intersection of the two ranges, or an empty range if their intersection is empty.",
  "com.google.common.cache.LocalCache$LoadingValueReference:notifyNewValue(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)" : null,
  "com.google.common.collect.DenseImmutableTable:size()" : null,
  "com.google.common.util.concurrent.Striped$PaddedLock:<init>()" : null,
  "com.google.common.util.concurrent.Futures:submit(java.lang.Runnable,java.util.concurrent.Executor)" : "* Executes {@code runnable} on the specified {@code executor}, returning a {@code Future} that\n   * will complete after execution.\n   *\n   * @throws RejectedExecutionException if the task cannot be scheduled for execution\n   * @since 28.2",
  "com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.lang.Runnable,java.lang.Object)" : "* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code\n   * Runnable}, and arrange that {@code get} will return the given result on successful completion.\n   *\n   * @param runnable the runnable task\n   * @param result the result to return on successful completion. If you don't need a particular\n   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =\n   *     ListenableFutureTask.create(runnable, null)}",
  "com.google.common.eventbus.Subscriber:context(java.lang.Object)" : "Gets the context for the given event.",
  "com.google.common.collect.ImmutableRangeSet$AsSet:size()" : null,
  "com.google.common.collect.Cut$BelowAll:<init>()" : null,
  "com.google.common.collect.Cut$AboveValue:leastValueAbove(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.graph.StandardMutableGraph:removeEdge(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.cache.LocalCache$NullEntry:getValueReference()" : null,
  "com.google.common.collect.ForwardingSet:standardHashCode()" : "* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override\n   * {@link #iterator}, you may wish to override {@link #equals} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.Multisets:inferDistinctElements(java.lang.Iterable)" : "* Returns the expected number of distinct elements given the specified elements. The number of\n   * distinct elements is only computed if {@code elements} is an instance of {@code Multiset};\n   * otherwise the default value of 11 is returned.",
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:isVertical()" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap:trustedPut(com.google.common.reflect.TypeToken,java.lang.Object)" : null,
  "com.google.common.collect.FilteredEntryMultimap$AsMap:createEntrySet()" : null,
  "com.google.common.cache.LocalCache$Strength$2:defaultEquivalence()" : "* Returns the default equivalence strategy used to compare and hash keys or values referenced\n     * at this strength. This strategy will be used unless the user explicitly specifies an\n     * alternate strategy.",
  "com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:<init>(long[])" : null,
  "com.google.common.collect.Lists$TransformingSequentialList:size()" : null,
  "com.google.common.primitives.Longs:ensureCapacity(long[],int,int)" : "* Returns an array containing the same values as {@code array}, but guaranteed to be of a\n   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n   *\n   * @param array the source array\n   * @param minLength the minimum length the returned array must guarantee\n   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n   *     minLength}",
  "com.google.common.collect.AbstractSortedSetMultimap:removeAll(java.lang.Object)" : "* Removes all values associated with a given key. The returned collection is immutable.\n   *\n   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link\n   * Multimap} interface.",
  "com.google.common.collect.AbstractNavigableMap:keySet()" : null,
  "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:checkForConcurrentModification()" : null,
  "com.google.common.primitives.ImmutableLongArray:builder()" : "* Returns a new, empty builder for {@link ImmutableLongArray} instances, with a default initial\n   * capacity. The returned builder is not thread-safe.\n   *\n   * <p><b>Performance note:</b> The {@link ImmutableLongArray} that is built will very likely\n   * occupy more memory than necessary; to trim memory usage, build using {@code\n   * builder.build().trimmed()}.",
  "com.google.common.collect.ImmutableMapValues:size()" : null,
  "com.google.common.collect.Multisets$AbstractEntry:toString()" : "* Returns a string representation of this multiset entry. The string representation consists of\n     * the associated element if the associated count is one, and otherwise the associated element\n     * followed by the characters \" x \" (space, x and space) followed by the count. Elements and\n     * counts are converted to strings as by {@code String.valueOf}.",
  "com.google.common.base.CharMatcher$JavaIsoControl:matches(char)" : null,
  "com.google.common.collect.LinkedListMultimap:entries()" : "* {@inheritDoc}\n   *\n   * <p>The iterator generated by the returned collection traverses the entries in the order they\n   * were added to the multimap. Because the entries may have duplicates and follow the insertion\n   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in\n   * the {@link ListMultimap} interface.\n   *\n   * <p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what\n   * happens subsequently. As long as the corresponding key-value mapping is not removed from the\n   * multimap, {@link Entry#getValue} returns the value from the multimap, which may change over\n   * time, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap\n   * does not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()}\n   * call won't update the multimap but will lead to a revised value being returned by {@code\n   * getValue()}.",
  "com.google.common.util.concurrent.AbstractFuture:wasInterrupted()" : "* Returns true if this future was cancelled with {@code mayInterruptIfRunning} set to {@code\n   * true}.\n   *\n   * @since 14.0",
  "com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)" : "* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May\n   * be called only by a thread currently occupying this monitor.\n   *\n   * @return whether the guard is now satisfied\n   * @throws InterruptedException if interrupted while waiting\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.cache.LocalCache$LoadingValueReference:isActive()" : null,
  "com.google.common.net.InternetDomainName:hasPublicSuffix()" : "* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},\n   * including if it is a public suffix itself. For example, returns {@code true} for {@code\n   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code\n   * google.invalid}. This is the recommended method for determining whether a domain is potentially\n   * an addressable host.\n   *\n   * <p>Note that this method is equivalent to {@link #hasRegistrySuffix()} because all registry\n   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.\n   *\n   * @since 6.0",
  "com.google.common.graph.EndpointPair$Ordered:target()" : null,
  "com.google.common.graph.ImmutableValueGraph:connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultiset$Builder:addCopies(java.lang.Object,int)" : "* Adds a number of occurrences of an element to this {@code ImmutableMultiset}.\n     *\n     * @param element the element to add\n     * @param occurrences the number of occurrences of the element to add. May be zero, in which\n     *     case no change will be made.\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code element} is null\n     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation\n     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",
  "com.google.common.graph.EndpointPair:of(com.google.common.graph.Network,java.lang.Object,java.lang.Object)" : "Returns an {@link EndpointPair} representing the endpoints of an edge in {@code network}.",
  "com.google.common.hash.MessageDigestHashFunction:writeReplace()" : null,
  "com.google.common.collect.ForwardingDeque:pollFirst()" : null,
  "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:nextNotInSkipMe(int)" : "* Advances nextCursor to the index of the first element after {@code c} that is not in {@code\n     * skipMe} and returns {@code size()} if there is no such element.",
  "com.google.common.collect.MutableClassToInstanceMap$2:delegate()" : null,
  "com.google.common.net.HttpHeaders:<init>()" : null,
  "com.google.common.collect.ImmutableSetMultimap:builder()" : "Returns a new {@link Builder}.",
  "com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator)" : "* Returns a {@code Collector} that accumulates the input elements into a new {@code\n   * ImmutableMultiset}. Elements are sorted by the specified comparator.\n   *\n   * <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code equals}</i> as\n   * explained in the {@link Comparator} documentation.\n   *\n   * @since 21.0",
  "com.google.common.collect.ImmutableSortedMultiset$Builder:addCopies(java.lang.Object,int)" : "* Adds a number of occurrences of an element to this {@code ImmutableSortedMultiset}.\n     *\n     * @param element the element to add\n     * @param occurrences the number of occurrences of the element to add. May be zero, in which\n     *     case no change will be made.\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code element} is null\n     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation\n     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",
  "com.google.common.collect.CompactHashSet:element(int)" : null,
  "com.google.common.collect.SparseImmutableTable:rowMap()" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:fromMap()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int,long)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.io.CharSource$CharSequenceCharSource:openStream()" : null,
  "com.google.common.base.CharMatcher$Digit:nines()" : null,
  "com.google.common.math.IntMath:divide(int,int,java.math.RoundingMode)" : null,
  "com.google.common.hash.MacHashFunction:<init>(java.lang.String,java.security.Key,java.lang.String)" : null,
  "com.google.common.primitives.Shorts$LexicographicalComparator:compare(short[],short[])" : null,
  "com.google.common.collect.CompactHashSet:isUsingHashFloodingResistance()" : null,
  "com.google.common.math.Stats:populationStandardDeviation()" : "* Returns the <a\n   * href=\"http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values\">\n   * population standard deviation</a> of the values. The count must be non-zero.\n   *\n   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It\n   * is not guaranteed to return zero when the dataset consists of the same value multiple times,\n   * due to numerical errors. However, it is guaranteed never to return a negative result.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.collect.ForwardingMultimap:asMap()" : null,
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:doSetRate(double,double)" : null,
  "com.google.common.util.concurrent.ForwardingFluentFuture:cancel(boolean)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:putIfAbsent(java.lang.Object,long)" : "* If {@code key} is not already associated with a value or if {@code key} is associated with\n   * zero, associate it with {@code newValue}. Returns the previous value associated with {@code\n   * key}, or zero if there was no mapping for {@code key}.",
  "com.google.common.collect.CompactHashMap:get(java.lang.Object)" : null,
  "com.google.common.reflect.TypeResolver$WildcardCapturer$1:captureAsTypeVariable(java.lang.reflect.Type[])" : null,
  "com.google.common.base.Splitter:on(char)" : "* Returns a splitter that uses the given single-character separator. For example, {@code\n   * Splitter.on(',').split(\"foo,,bar\")} returns an iterable containing {@code [\"foo\", \"\", \"bar\"]}.\n   *\n   * @param separator the character to recognize as a separator\n   * @return a splitter, with default settings, that recognizes that separator",
  "com.google.common.collect.Multisets$UnmodifiableMultiset:clear()" : null,
  "com.google.common.reflect.TypeResolver$WildcardCapturer:<init>(java.util.concurrent.atomic.AtomicInteger)" : null,
  "com.google.common.graph.StandardValueGraph:allowsSelfLoops()" : null,
  "com.google.common.collect.SingletonImmutableBiMap:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.DiscreteDomain:integers()" : "* Returns the discrete domain for values of type {@code Integer}.\n   *\n   * <p>This method always returns the same object. That object is serializable; deserializing it\n   * results in the same object too.\n   *\n   * @since 14.0 (since 10.0 as {@code DiscreteDomains.integers()})",
  "com.google.common.collect.ForwardingCollection:standardToString()" : "* A sensible definition of {@link #toString} in terms of {@link #iterator}. If you override\n   * {@link #iterator}, you may wish to override {@link #toString} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.RegularImmutableMultiset:hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[])" : null,
  "com.google.common.collect.FilteredKeyListMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap:containsEntry(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.HashCode$BytesHashCode:padToLong()" : null,
  "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:<init>(int)" : null,
  "com.google.common.collect.ImmutableSortedAsList:<init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable)" : "* Returns an immutable map containing the given entries, with keys sorted by their natural\n   * ordering.\n   *\n   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually\n   * comparable.\n   *\n   * @throws NullPointerException if any key or value in {@code map} is null\n   * @throws IllegalArgumentException if any two keys are equal according to the comparator\n   * @since 19.0",
  "com.google.common.collect.FilteredKeyMultimap:createEntries()" : null,
  "com.google.common.collect.CompactHashSet:firstEntryIndex()" : null,
  "com.google.common.base.Stopwatch:abbreviate(java.util.concurrent.TimeUnit)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,char,int)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.Synchronized$SynchronizedList:equals(java.lang.Object)" : null,
  "com.google.common.collect.Lists:addAllImpl(java.util.List,int,java.lang.Iterable)" : "An implementation of {@link List#addAll(int, Collection)}.",
  "com.google.common.math.BigIntegerMath:ceilingPowerOfTwo(java.math.BigInteger)" : "* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to\n   * {@code BigInteger.valueOf(2).pow(log2(x, CEILING))}.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @since 20.0",
  "com.google.common.graph.EndpointPair$Ordered:source()" : null,
  "com.google.common.collect.UnmodifiableListIterator:add(java.lang.Object)" : "* Guaranteed to throw an exception and leave the underlying data unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,java.time.Duration)" : "* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(permits,\n   * timeout, unit)} uninterruptibly.\n   *\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.CompactHashMap:moveLastEntry(int,int)" : "* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",
  "com.google.common.collect.ForwardingList:standardAddAll(int,java.lang.Iterable)" : "* A sensible default implementation of {@link #addAll(int, Collection)}, in terms of the {@code\n   * add} method of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may\n   * wish to override {@link #addAll(int, Collection)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.ImmutableMultimap)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this\n   * @since 10.0",
  "com.google.common.base.Converter$IdentityConverter:doForward(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ServiceManager:awaitStopped(java.time.Duration)" : "* Waits for the all the services to reach a terminal state for no more than the given time. After\n   * this method returns all services will either be {@linkplain Service.State#TERMINATED\n   * terminated} or {@linkplain Service.State#FAILED failed}.\n   *\n   * @param timeout the maximum time to wait\n   * @throws TimeoutException if not all of the services have stopped within the deadline\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:decodeTo(byte[],java.lang.CharSequence)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:instance()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char,java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Multiset:forEach(java.util.function.Consumer)" : "* {@inheritDoc}\n   *\n   * <p>Elements that occur multiple times in the multiset will be passed to the {@code Consumer}\n   * correspondingly many times, though not necessarily sequentially.",
  "com.google.common.collect.Platform:newConcurrentHashSet()" : "Returns the platform preferred implementation of a thread-safe hash set.",
  "com.google.common.util.concurrent.Callables:<init>()" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:initializeOrUpdateCancellationDelegate(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule)" : null,
  "com.google.common.graph.ValueGraphBuilder:nodeOrder(com.google.common.graph.ElementOrder)" : "* Specifies the order of iteration for the elements of {@link Graph#nodes()}.\n   *\n   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",
  "com.google.common.collect.Sets:newHashSet(java.util.Iterator)" : "* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin\n   * convenience for creating an empty set and then calling {@link Iterators#addAll}.\n   *\n   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link\n   * ImmutableSet#copyOf(Iterator)} instead.\n   *\n   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet}\n   * instead.\n   *\n   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",
  "com.google.common.collect.DescendingMultiset:lastEntry()" : null,
  "com.google.common.collect.StandardTable$Column:createKeySet()" : null,
  "com.google.common.cache.CacheBuilderSpec$MaximumWeightParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap:delegate()" : null,
  "com.google.common.collect.Multimaps$AsMap$EntrySet:map()" : null,
  "com.google.common.collect.ImmutableEnumMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableAsList$SerializedForm:<init>(com.google.common.collect.ImmutableCollection)" : null,
  "com.google.common.cache.LocalCache:newSegmentArray(int)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:valueStrength()" : null,
  "com.google.common.collect.Streams:stream(java.util.Collection)" : "* Returns {@link Collection#stream}.\n   *\n   * @deprecated There is no reason to use this; just invoke {@code collection.stream()} directly.",
  "com.google.common.collect.ImmutableList:copyOf(java.util.Iterator)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if {@code elements} contains a null element",
  "com.google.common.collect.ImmutableListMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)" : "Creates an ImmutableListMultimap from an asMap.entrySet.",
  "com.google.common.collect.ImmutableMap:copyOf(java.util.Map)" : "* Returns an immutable map containing the same entries as {@code map}. The returned map iterates\n   * over entries in the same order as the {@code entrySet} of the original map. If {@code map}\n   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws NullPointerException if any key or value in {@code map} is null",
  "com.google.common.cache.LocalCache$WriteQueue:iterator()" : null,
  "com.google.common.util.concurrent.ThreadFactoryBuilder:setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)" : "* Sets the {@link UncaughtExceptionHandler} for new threads created with this ThreadFactory.\n   *\n   * @param uncaughtExceptionHandler the uncaught exception handler for new Threads created with\n   *     this ThreadFactory\n   * @return this for the builder pattern",
  "com.google.common.collect.ImmutableMapEntrySet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:length()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.Collection)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.Multisets:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)" : "* Returns a {@code Collector} that accumulates elements into a multiset created via the specified\n   * {@code Supplier}, whose elements are the result of applying {@code elementFunction} to the\n   * inputs, with counts equal to the result of applying {@code countFunction} to the inputs.\n   * Elements are added in encounter order.\n   *\n   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the element\n   * will be added more than once, with the count summed over all appearances of the element.\n   *\n   * <p>Note that {@code stream.collect(toMultiset(function, e -> 1, supplier))} is equivalent to\n   * {@code stream.map(function).collect(Collectors.toCollection(supplier))}.\n   *\n   * <p>To collect to an {@link ImmutableMultiset}, use {@link\n   * ImmutableMultiset#toImmutableMultiset}.\n   *\n   * @since 22.0",
  "com.google.common.reflect.ClassPath:<init>(com.google.common.collect.ImmutableSet)" : null,
  "com.google.common.collect.ImmutableMultiset:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n   * described in the class documentation.\n   *\n   * @throws NullPointerException if any element is null\n   * @since 6.0 (source-compatible since 2.0)",
  "com.google.common.hash.SipHashFunction:newHasher()" : null,
  "com.google.common.collect.ImmutableSortedMap:createValues()" : null,
  "com.google.common.collect.SingletonImmutableList:get(int)" : null,
  "com.google.common.collect.LinkedHashMultiset:iterator()" : null,
  "com.google.common.collect.MapMaker:getKeyStrength()" : null,
  "com.google.common.collect.ImmutableMultimap$Keys:count(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap:replace(java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.AbstractMultimap$Values:clear()" : null,
  "com.google.common.collect.ImmutableSet$SerializedForm:<init>(java.lang.Object[])" : null,
  "com.google.common.reflect.TypeResolver$TypeVariableKey:equalsTypeVariable(java.lang.reflect.TypeVariable)" : null,
  "com.google.common.base.FinalizableReferenceQueue:<init>()" : "Constructs a new queue.",
  "com.google.common.base.Converter$ConverterComposition:doBackward(java.lang.Object)" : null,
  "com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate)" : "* Returns the first element in {@code iterable} that satisfies the given predicate; use this\n   * method only when such an element is known to exist. If it is possible that <i>no</i> element\n   * will match, use {@link #tryFind} or {@link #find(Iterable, Predicate, Object)} instead.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst().get()}\n   *\n   * @throws NoSuchElementException if no element in {@code iterable} matches the given predicate",
  "com.google.common.reflect.ClassPath$ResourceInfo:hashCode()" : null,
  "com.google.common.collect.Multisets:union(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "* Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count\n   * of each element is the <i>maximum</i> of its counts in the two backing multisets. The iteration\n   * order of the returned multiset matches that of the element set of {@code multiset1} followed by\n   * the members of the element set of {@code multiset2} that are not contained in {@code\n   * multiset1}, with repeated occurrences of the same element appearing consecutively.\n   *\n   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different\n   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).\n   *\n   * @since 14.0",
  "com.google.common.collect.TreeMultiset$AvlNode:rotateRight()" : null,
  "com.google.common.collect.ForwardingMultimap:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.primitives.ImmutableIntArray:stream()" : "* Returns a stream over the values in this array, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.Multimaps$AsMap$EntrySet:remove(java.lang.Object)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:<init>(float[])" : null,
  "com.google.common.collect.Sets$SetView:retainAll(java.util.Collection)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n     *\n     * @throws UnsupportedOperationException always\n     * @deprecated Unsupported operation.",
  "com.google.common.collect.TreeRangeSet$AsRanges:delegate()" : null,
  "com.google.common.collect.Tables:synchronizedTable(com.google.common.collect.Table)" : "* Returns a synchronized (thread-safe) table backed by the specified table. In order to guarantee\n   * serial access, it is critical that <b>all</b> access to the backing table is accomplished\n   * through the returned table.\n   *\n   * <p>It is imperative that the user manually synchronize on the returned table when accessing any\n   * of its collection views:\n   *\n   * {@snippet :\n   * Table<R, C, V> table = Tables.synchronizedTable(HashBasedTable.<R, C, V>create());\n   * ...\n   * Map<C, V> row = table.row(rowKey);  // Needn't be in synchronized block\n   * ...\n   * synchronized (table) {  // Synchronizing on table, not row!\n   *   Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block\n   *   while (i.hasNext()) {\n   *     foo(i.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>Failure to follow this advice may result in non-deterministic behavior.\n   *\n   * <p>The returned table will be serializable if the specified table is serializable.\n   *\n   * @param table the table to be wrapped in a synchronized view\n   * @return a synchronized view of the specified table\n   * @since 22.0",
  "com.google.common.reflect.TypeToken:getType()" : "Returns the represented type.",
  "com.google.common.base.Functions$FunctionComposition:hashCode()" : null,
  "com.google.common.base.Throwables:throwIfUnchecked(java.lang.Throwable)" : "* Throws {@code throwable} if it is a {@link RuntimeException} or {@link Error}. Example usage:\n   *\n   * <pre>\n   * for (Foo foo : foos) {\n   *   try {\n   *     foo.bar();\n   *   } catch (RuntimeException | Error t) {\n   *     failure = t;\n   *   }\n   * }\n   * if (failure != null) {\n   *   throwIfUnchecked(failure);\n   *   throw new AssertionError(failure);\n   * }\n   * </pre>\n   *\n   * @since 20.0",
  "com.google.common.graph.ImmutableValueGraph:predecessors(java.lang.Object)" : null,
  "com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Comparable,boolean)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultiset:delegate()" : null,
  "com.google.common.collect.Queues:newArrayDeque(java.lang.Iterable)" : "* Creates an {@code ArrayDeque} containing the elements of the specified iterable, in the order\n   * they are returned by the iterable's iterator.\n   *\n   * @since 12.0",
  "com.google.common.collect.EnumMultiset:isEmpty()" : null,
  "com.google.common.reflect.TypeToken:rejectTypeVariables()" : "* Ensures that this type token doesn't contain type variables, which can cause unchecked type\n   * errors for callers like {@link TypeToInstanceMap}.",
  "com.google.common.collect.TreeBasedTable$TreeRow:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Sets:filter(java.util.Set,com.google.common.base.Predicate)" : null,
  "com.google.common.primitives.Ints$IntArrayAsList:<init>(int[])" : null,
  "com.google.common.math.BigIntegerMath:sqrtApproxWithDoubles(java.math.BigInteger)" : null,
  "com.google.common.cache.CacheStats:totalLoadTime()" : "* Returns the total number of nanoseconds the cache has spent loading new values. This can be\n   * used to calculate the miss penalty. This value is increased every time {@code loadSuccessCount}\n   * or {@code loadExceptionCount} is incremented.",
  "com.google.common.base.Equivalence:identity()" : "* Returns an equivalence that uses {@code ==} to compare values and {@link\n   * System#identityHashCode(Object)} to compute the hash code. {@link Equivalence#equivalent}\n   * returns {@code true} if {@code a == b}, including in the case that a and b are both null.\n   *\n   * @since 13.0\n   * @since 4.0 (in Equivalences)",
  "com.google.common.collect.JdkBackedImmutableMultiset:isPartialView()" : null,
  "com.google.common.graph.EndpointPairIterator:<init>(com.google.common.graph.BaseGraph)" : null,
  "com.google.common.collect.Lists$OnePlusArrayList:size()" : null,
  "com.google.common.collect.HashBiMap:containsValue(java.lang.Object)" : "* Returns {@code true} if this BiMap contains an entry whose value is equal to {@code value} (or,\n   * equivalently, if this inverse view contains a key that is equal to {@code value}).\n   *\n   * <p>Due to the property that values in a BiMap are unique, this will tend to execute in\n   * faster-than-linear time.\n   *\n   * @param value the object to search for in the values of this BiMap\n   * @return true if a mapping exists from a key to the specified value",
  "com.google.common.collect.RegularImmutableSortedSet:ceiling(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset:clear()" : null,
  "com.google.common.collect.Iterables:getLastInNonemptyList(java.util.List)" : null,
  "com.google.common.collect.ReverseOrdering:max(java.lang.Iterable)" : null,
  "com.google.common.cache.LocalCache$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,int,int,java.lang.String)" : "* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified\n   * safe range. If {@code safeMax < safeMin} then no code points are considered safe. This\n   * initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the\n   * sharing of large replacement mappings.\n   *\n   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it\n   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.\n   *\n   * @param escaperMap the map of replacements\n   * @param safeMin the lowest character value in the safe range\n   * @param safeMax the highest character value in the safe range\n   * @param unsafeReplacement the default replacement for unsafe characters or null if no default\n   *     replacement is required",
  "com.google.common.base.Joiner$MapJoiner:useForNull(java.lang.String)" : "* Returns a map joiner with the same behavior as this one, except automatically substituting\n     * {@code nullText} for any provided null keys or values.",
  "com.google.common.cache.LocalCache$NullEntry:getPreviousInWriteQueue()" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:remove(com.google.common.collect.Range)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeBytes(java.lang.String)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:floor(java.lang.Object)" : null,
  "com.google.common.base.VerifyException:<init>(java.lang.String,java.lang.Throwable)" : "* Constructs a {@code VerifyException} with the message {@code message} and the cause {@code\n   * cause}.\n   *\n   * @since 19.0",
  "com.google.common.primitives.UnsignedBytes:sortDescending(byte[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order, interpreting them as unsigned 8-bit integers.\n   *\n   * @since 23.1",
  "com.google.common.base.Preconditions:checkPositionIndexes(int,int,int)" : "* Ensures that {@code start} and {@code end} specify valid <i>positions</i> in an array, list or\n   * string of size {@code size}, and are in order. A position index may range from zero to {@code\n   * size}, inclusive.\n   *\n   * @param start a user-supplied index identifying a starting position in an array, list or string\n   * @param end a user-supplied index identifying an ending position in an array, list or string\n   * @param size the size of that array, list or string\n   * @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size},\n   *     or if {@code end} is less than {@code start}\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:maybeDrainReferenceQueues()" : null,
  "com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.lang.Iterable)" : "* Adds all the given entries to the built map. Duplicate keys, according to the comparator\n     * (which might be the keys' natural order), are not allowed, and will cause {@link #build} to\n     * fail.\n     *\n     * @throws NullPointerException if any key, value, or entry is null\n     * @since 19.0",
  "com.google.common.base.Verify:verify(boolean,java.lang.String,long,int)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n   * an entry (according to {@link Object#equals}) after the first are ignored.",
  "com.google.common.collect.ConcurrentHashMultiset:create(java.util.concurrent.ConcurrentMap)" : "* Creates a new, empty {@code ConcurrentHashMultiset} using {@code countMap} as the internal\n   * backing map.\n   *\n   * <p>This instance will assume ownership of {@code countMap}, and other code should not maintain\n   * references to the map or modify it in any way.\n   *\n   * <p>The returned multiset is serializable if the input map is.\n   *\n   * @param countMap backing map for storing the elements in the multiset and their counts. It must\n   *     be empty.\n   * @throws IllegalArgumentException if {@code countMap} is not empty\n   * @since 20.0",
  "com.google.common.collect.CompactHashing:tableClear(java.lang.Object)" : null,
  "com.google.common.collect.AbstractTable$CellSet:size()" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:hashCode()" : null,
  "com.google.common.math.IntMath:mod(int,int)" : "* Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x %\n   * m}, which might be negative. This method is equivalent to {@code Math.floorMod(x, m)} except\n   * that that method also allows negative {@code m}. {@code Math.floorMod} should be preferred when\n   * {@code m} is known to be positive.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * mod(7, 4) == 3\n   * mod(-7, 4) == 1\n   * mod(-1, 4) == 3\n   * mod(-8, 4) == 0\n   * mod(8, 4) == 0\n   * }\n   *\n   * @throws ArithmeticException if {@code m <= 0}\n   * @see <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3\">\n   *     Remainder Operator</a>",
  "com.google.common.collect.Synchronized$SynchronizedCollection:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.MultimapBuilder$TreeSetSupplier:get()" : null,
  "com.google.common.collect.DiscreteDomain$BigIntegerDomain:<init>()" : null,
  "com.google.common.collect.Cut:endpoint()" : null,
  "com.google.common.collect.Iterators:getOnlyElement(java.util.Iterator)" : "* Returns the single element contained in {@code iterator}.\n   *\n   * @throws NoSuchElementException if the iterator is empty\n   * @throws IllegalArgumentException if the iterator contains multiple elements. The state of the\n   *     iterator is unspecified.",
  "com.google.common.hash.MacHashFunction$MacHasher:update(byte)" : null,
  "com.google.common.collect.AbstractMultimap:keySet()" : null,
  "com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection)" : null,
  "com.google.common.collect.FilteredEntryMultimap$AsMap:clear()" : null,
  "com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper:decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState)" : null,
  "com.google.common.collect.Cut$AboveValue:toString()" : null,
  "com.google.common.base.MoreObjects:toStringHelper(java.lang.String)" : "* Creates an instance of {@link ToStringHelper} in the same manner as {@link\n   * #toStringHelper(Object)}, but using {@code className} instead of using an instance's {@link\n   * Object#getClass()}.\n   *\n   * @param className the name of the instance type\n   * @since 18.0 (since 7.0 as {@code Objects.toStringHelper()}).",
  "com.google.common.collect.AbstractIterator:hasNext()" : null,
  "com.google.common.base.Equivalence:equals()" : "* Returns an equivalence that delegates to {@link Object#equals} and {@link Object#hashCode}.\n   * {@link Equivalence#equivalent} returns {@code true} if both values are null, or if neither\n   * value is null and {@link Object#equals} returns {@code true}. {@link Equivalence#hash} returns\n   * {@code 0} if passed a null value.\n   *\n   * @since 13.0\n   * @since 8.0 (in Equivalences with null-friendly behavior)\n   * @since 4.0 (in Equivalences)",
  "com.google.common.collect.StandardTable$Row:size()" : null,
  "com.google.common.collect.HashBiMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set)" : "* Performs a depth-first traversal of the graph edges defined by each node's {@code\n     * allowedPriorLocks} to find a path between {@code this} and the specified {@code lock}.\n     *\n     * @return If a path was found, a chained {@link ExampleStackTrace} illustrating the path to the\n     *     {@code lock}, or {@code null} if no path was found.",
  "com.google.common.collect.AbstractBiMap:putAll(java.util.Map)" : null,
  "com.google.common.primitives.Primitives:allWrapperTypes()" : "* Returns an immutable set of all nine primitive-wrapper types (including {@link Void}).\n   *\n   * @since 3.0",
  "com.google.common.cache.LocalCache$StrongValueReference:isActive()" : null,
  "com.google.common.math.PairedStats:leastSquaresFit()" : "* Returns a linear transformation giving the best fit to the data according to <a\n   * href=\"http://mathworld.wolfram.com/LeastSquaresFitting.html\">Ordinary Least Squares linear\n   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and\n   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code\n   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is\n   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}\n   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.\n   *\n   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This\n   * error is defined as the square root of the mean of the squares of the differences between the\n   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}\n   * values (i.e. it is the square root of the mean of the squares of the vertical distances between\n   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -\n   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's\n   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).\n   *\n   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a\n   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit\n   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and\n   * {@code y}.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link\n   * LinearTransformation#forNaN()}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or\n   *     both the {@code x} and {@code y} dataset must have zero population variance",
  "com.google.common.base.CharMatcher$Or:setBits(java.util.BitSet)" : null,
  "com.google.common.cache.CacheBuilderSpec:disableCaching()" : "Returns a CacheBuilderSpec that will prevent caching.",
  "com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Iterable)" : "* {@inheritDoc}\n     *\n     * @since 19.0",
  "com.google.common.collect.ImmutableSetMultimap:get(java.lang.Object)" : "* Returns an immutable set of the values for the given key. If no mappings in the multimap have\n   * the provided key, an empty immutable set is returned. The values are in the same order as the\n   * parameters used to build this multimap.",
  "com.google.common.collect.FilteredEntryMultimap$Keys$1:removeEntriesIf(com.google.common.base.Predicate)" : null,
  "com.google.common.net.InetAddresses:fromInteger(int)" : "* Returns an Inet4Address having the integer value specified by the argument.\n   *\n   * @param address {@code int}, the 32bit integer address to be converted\n   * @return {@link Inet4Address} equivalent of the argument",
  "com.google.common.collect.ImmutableClassToInstanceMap:getInstance(java.lang.Class)" : null,
  "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:hasNext()" : null,
  "com.google.common.graph.ImmutableNetwork:getEdgeToReferenceNode(com.google.common.graph.Network)" : null,
  "com.google.common.util.concurrent.UncheckedTimeoutException:<init>()" : null,
  "com.google.common.collect.Multimaps:synchronizedListMultimap(com.google.common.collect.ListMultimap)" : "* Returns a synchronized (thread-safe) {@code ListMultimap} backed by the specified multimap.\n   *\n   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.\n   *\n   * @param multimap the multimap to be wrapped\n   * @return a synchronized view of the specified multimap",
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getNextInWriteQueue()" : null,
  "com.google.common.util.concurrent.FluentFuture:withTimeout(java.time.Duration,java.util.concurrent.ScheduledExecutorService)" : "* Returns a future that delegates to this future but will finish early (via a {@link\n   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.\n   * If the timeout expires, not only will the output future finish, but also the input future\n   * ({@code this}) will be cancelled and interrupted.\n   *\n   * @param timeout when to time out the future\n   * @param scheduledExecutor The executor service to enforce the timeout.\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.Collections2$TransformedCollection:forEach(java.util.function.Consumer)" : null,
  "com.google.common.cache.CacheStats:missCount()" : "* Returns the number of times {@link Cache} lookup methods have returned an uncached (newly\n   * loaded) value, or null. Multiple concurrent calls to {@link Cache} lookup methods on an absent\n   * value can result in multiple misses, all returning the results of a single cache load\n   * operation.",
  "com.google.common.collect.ImmutableList$ReverseImmutableList:<init>(com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:maybeClearReferenceQueues()" : null,
  "com.google.common.primitives.UnsignedBytes:flip(byte)" : null,
  "com.google.common.primitives.ImmutableDoubleArray$AsList:size()" : null,
  "com.google.common.hash.FarmHashFingerprint64:hashLength17to32(byte[],int,int)" : null,
  "com.google.common.hash.FarmHashFingerprint64:fingerprint(byte[],int,int)" : null,
  "com.google.common.primitives.Booleans$LexicographicalComparator:compare(boolean[],boolean[])" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingBlockingDeque:put(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:writeReplace()" : null,
  "com.google.common.collect.Multimaps:forMap(java.util.Map)" : "* Returns a multimap view of the specified map. The multimap is backed by the map, so changes to\n   * the map are reflected in the multimap, and vice versa. If the map is modified while an\n   * iteration over one of the multimap's collection views is in progress (except through the\n   * iterator's own {@code remove} operation, or through the {@code setValue} operation on a map\n   * entry returned by the iterator), the results of the iteration are undefined.\n   *\n   * <p>The multimap supports mapping removal, which removes the corresponding mapping from the map.\n   * It does not support any operations which might add mappings, such as {@code put}, {@code\n   * putAll} or {@code replaceValues}.\n   *\n   * <p>The returned multimap will be serializable if the specified map is serializable.\n   *\n   * @param map the backing map for the returned multimap view",
  "com.google.common.collect.DiscreteDomain:bigIntegers()" : "* Returns the discrete domain for values of type {@code BigInteger}.\n   *\n   * <p>This method always returns the same object. That object is serializable; deserializing it\n   * results in the same object too.\n   *\n   * @since 15.0",
  "com.google.common.collect.CompactHashSet:hashTableMask()" : "Gets the hash table mask using the stored number of hash table bits.",
  "com.google.common.base.Utf8:unpairedSurrogateMsg(int)" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap:entrySet()" : null,
  "com.google.common.hash.Murmur3_32HashFunction:newHasher()" : null,
  "com.google.common.base.FinalizableWeakReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)" : "* Constructs a new finalizable weak reference.\n   *\n   * @param referent to weakly reference\n   * @param queue that should finalize the referent",
  "com.google.common.net.InetAddresses:is6to4Address(java.net.Inet6Address)" : "* Evaluates whether the argument is a 6to4 address.\n   *\n   * <p>6to4 addresses begin with the {@code \"2002::/16\"} prefix. The next 32 bits are the IPv4\n   * address of the host to which IPv6-in-IPv4 tunneled packets should be routed.\n   *\n   * <p>For more on 6to4 addresses see section 2 of <a target=\"_parent\"\n   * href=\"http://tools.ietf.org/html/rfc3056#section-2\">RFC 3056</a>.\n   *\n   * @param ip {@link Inet6Address} to be examined for 6to4 address format\n   * @return {@code true} if the argument is a 6to4 address",
  "com.google.common.collect.ForwardingSortedMap:tailMap(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:awaitRunning(java.time.Duration)" : "* @since 28.0",
  "com.google.common.collect.FluentIterable:skip(int)" : "* Returns a view of this fluent iterable that skips its first {@code numberToSkip} elements. If\n   * this fluent iterable contains fewer than {@code numberToSkip} elements, the returned fluent\n   * iterable skips all of its elements.\n   *\n   * <p>Modifications to this fluent iterable before a call to {@code iterator()} are reflected in\n   * the returned fluent iterable. That is, the iterator skips the first {@code numberToSkip}\n   * elements that exist when the iterator is created, not when {@code skip()} is called.\n   *\n   * <p>The returned fluent iterable's iterator supports {@code remove()} if the {@code Iterator} of\n   * this fluent iterable supports it. Note that it is <i>not</i> possible to delete the last\n   * skipped element by immediately calling {@code remove()} on the returned fluent iterable's\n   * iterator, as the {@code Iterator} contract states that a call to {@code * remove()} before a\n   * call to {@code next()} will throw an {@link IllegalStateException}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} (same).",
  "com.google.common.collect.FilteredKeyMultimap:createKeys()" : null,
  "com.google.common.collect.Iterables:unmodifiableIterable(java.lang.Iterable)" : "Returns an unmodifiable view of {@code iterable}.",
  "com.google.common.math.IntMath:sqrtFloor(int)" : null,
  "com.google.common.collect.Cut$AboveAll:greatestValueBelow(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.collect.Maps:keyFunction()" : null,
  "com.google.common.collect.Maps$EntrySet:isEmpty()" : null,
  "com.google.common.escape.UnicodeEscaper:escape(java.lang.String)" : "* Returns the escaped form of a given literal string.\n   *\n   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to\n   * use this method. If an input string ends with an unmatched high surrogate character, then this\n   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a\n   * href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF-16</a> before calling this method.\n   *\n   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for\n   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}\n   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the\n   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).\n   *\n   * @param string the literal string to be escaped\n   * @return the escaped form of {@code string}\n   * @throws NullPointerException if {@code string} is null\n   * @throws IllegalArgumentException if invalid surrogate characters are encountered",
  "com.google.common.collect.RegularImmutableSortedMultiset:elementSet()" : null,
  "com.google.common.io.LittleEndianDataInputStream:readUnsignedShort()" : "* Reads an unsigned {@code short} as specified by {@link DataInputStream#readUnsignedShort()},\n   * except using little-endian byte order.\n   *\n   * @return the next two bytes of the input stream, interpreted as an unsigned 16-bit integer in\n   *     little-endian byte order\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object)" : null,
  "com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethods(java.lang.Class)" : null,
  "com.google.common.primitives.ImmutableIntArray:writeReplace()" : null,
  "com.google.common.reflect.TypeToken$Bounds:isSupertypeOf(java.lang.reflect.Type)" : null,
  "com.google.common.primitives.Bytes:lastIndexOf(byte[],byte)" : "* Returns the index of the last appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code byte} values, possibly empty\n   * @param target a primitive {@code byte} value\n   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.Collections2$FilteredCollection:add(java.lang.Object)" : null,
  "com.google.common.collect.Maps:filterValues(java.util.NavigableMap,com.google.common.base.Predicate)" : "* Returns a navigable map containing the mappings in {@code unfiltered} whose values satisfy a\n   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the\n   * other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},\n   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings whose values satisfy the filter will be removed from the underlying\n   * map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 14.0",
  "com.google.common.collect.AbstractListMultimap:createUnmodifiableEmptyCollection()" : null,
  "com.google.common.collect.Maps:filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate)" : "* Returns a bimap containing the mappings in {@code unfiltered} that satisfy a predicate. The\n   * returned bimap is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap\n   * and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's\n   * {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link\n   * IllegalArgumentException}. Similarly, the map's entries have an {@link Entry#setValue} method\n   * that throws an {@link IllegalArgumentException} when the existing key and the provided value\n   * don't satisfy the predicate.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying\n   * bimap.\n   *\n   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying bimap and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy.\n   *\n   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented\n   * at {@link Predicate#apply}.\n   *\n   * @since 14.0",
  "com.google.common.collect.ImmutableList:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.collect.SetMultimap:removeAll(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}\n   * interface.",
  "com.google.common.primitives.Floats:lastIndexOf(float[],float)" : "* Returns the index of the last appearance of the value {@code target} in {@code array}. Note\n   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n   *\n   * @param array an array of {@code float} values, possibly empty\n   * @param target a primitive {@code float} value\n   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.math.Stats:meanOf(java.lang.Iterable)" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of the\n   * values. The count must be non-zero.\n   *\n   * <p>The definition of the mean is the same as {@link Stats#mean}.\n   *\n   * @param values a series of values, which will be converted to {@code double} values (this may\n   *     cause loss of precision)\n   * @throws IllegalArgumentException if the dataset is empty",
  "com.google.common.collect.ImmutableMultiset:toImmutableMultiset()" : "* Returns a {@code Collector} that accumulates the input elements into a new {@code\n   * ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in\n   * encounter order.\n   *\n   * @since 21.0",
  "com.google.common.collect.ImmutableMultimap:putAll(com.google.common.collect.Multimap)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.SortedMultisets$ElementSet:iterator()" : null,
  "com.google.common.graph.UndirectedGraphConnections:<init>(java.util.Map)" : null,
  "com.google.common.io.Closer:create()" : "Creates a new {@link Closer}.",
  "com.google.common.reflect.TypeToken$ClassSet:delegate()" : null,
  "com.google.common.primitives.Booleans:indexOf(boolean[],boolean[])" : "* Returns the start position of the first occurrence of the specified {@code target} within\n   * {@code array}, or {@code -1} if there is no such occurrence.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n   * i, i + target.length)} contains exactly the same elements as {@code target}.\n   *\n   * @param array the array to search for the sequence {@code target}\n   * @param target the array to search for as a sub-sequence of {@code array}",
  "com.google.common.collect.MapMakerInternalMap$HashIterator:nextInChain()" : "Finds the next entry in the current chain. Returns {@code true} if an entry was found.",
  "com.google.common.collect.ForwardingCollection:standardAddAll(java.util.Collection)" : "* A sensible definition of {@link #addAll} in terms of {@link #add}. If you override {@link\n   * #add}, you may wish to override {@link #addAll} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.NullsLastOrdering:<init>(com.google.common.collect.Ordering)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:floor(java.lang.Object)" : null,
  "com.google.common.base.MoreObjects:toStringHelper(java.lang.Class)" : "* Creates an instance of {@link ToStringHelper} in the same manner as {@link\n   * #toStringHelper(Object)}, but using the simple name of {@code clazz} instead of using an\n   * instance's {@link Object#getClass()}.\n   *\n   * <p>Note that in GWT, class names are often obfuscated.\n   *\n   * @param clazz the {@link Class} of the instance\n   * @since 18.0 (since 7.0 as {@code Objects.toStringHelper()}).",
  "com.google.common.collect.ImmutableMultimap$EntryCollection:contains(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedRandomAccessList:<init>(java.util.List,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingSet()" : null,
  "com.google.common.reflect.ClassPath:getTopLevelClasses()" : "* Returns all top level classes loadable from the current class path. Note that \"top-level-ness\"\n   * is determined heuristically by class name (see {@link ClassInfo#isTopLevel}).",
  "com.google.common.util.concurrent.Monitor:getOccupiedDepth()" : "* Returns the number of times the current thread has entered this monitor in excess of the number\n   * of times it has left. Returns 0 if the current thread is not occupying this monitor.",
  "com.google.common.hash.MacHashFunction$MacHasher:checkNotDone()" : null,
  "com.google.common.collect.ImmutableEnumSet:<init>(java.util.EnumSet)" : null,
  "com.google.common.collect.FilteredEntryMultimap:createKeys()" : null,
  "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:getKey(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:hashCode()" : null,
  "com.google.common.collect.CompactHashMap:firstEntryIndex()" : null,
  "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double)" : "* Creates a {@link BloomFilter} with the expected number of insertions and expected false\n   * positive probability.\n   *\n   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,\n   * will result in its saturation, and a sharp deterioration of its false positive probability.\n   *\n   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}\n   * is.\n   *\n   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n   * also relies on object identity of funnels.\n   *\n   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n   * @param expectedInsertions the number of expected insertions to the constructed {@code\n   *     BloomFilter}; must be positive\n   * @param fpp the desired false positive probability (must be positive and less than 1.0)\n   * @return a {@code BloomFilter}\n   * @since 19.0",
  "com.google.common.collect.ForwardingCollection:remove(java.lang.Object)" : null,
  "com.google.common.base.Splitter:withKeyValueSeparator(java.lang.String)" : "* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries\n   * into keys and values using the specified separator.\n   *\n   * @since 10.0",
  "com.google.common.reflect.TypeResolver$WildcardCapturer:capture(java.lang.reflect.Type)" : null,
  "com.google.common.collect.HashBiMap:entrySet()" : null,
  "com.google.common.graph.ImmutableGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit)" : "* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,\n   * timeout, unit)} uninterruptibly.\n   *\n   * @since 18.0",
  "com.google.common.collect.ContiguousSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : "* @since 12.0",
  "com.google.common.base.Converter$FunctionBasedConverter:doForward(java.lang.Object)" : null,
  "com.google.common.collect.StandardRowSortedTable$RowSortedMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.math.LongMath:log10(long,java.math.RoundingMode)" : "* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not a power of ten",
  "com.google.common.primitives.Booleans:lastIndexOf(boolean[],boolean)" : "* Returns the index of the last appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code boolean} values, possibly empty\n   * @param target a primitive {@code boolean} value\n   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.LinkedListMultimap:addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node)" : "* Adds a new node for the specified key-value pair before the specified {@code nextSibling}\n   * element, or at the end of the list if {@code nextSibling} is null. Note: if {@code nextSibling}\n   * is specified, it MUST be for a node for the same {@code key}!",
  "com.google.common.hash.FarmHashFingerprint64:weakHashLength32WithSeeds(byte[],int,long,long,long[])" : "* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are\n   * returned in the output array because when we last measured, this was 12% faster than allocating\n   * new arrays every time.",
  "com.google.common.base.CharMatcher$AnyOf:negate()" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap:comparator()" : null,
  "com.google.common.collect.ForwardingDeque:addFirst(java.lang.Object)" : null,
  "com.google.common.math.PairedStatsAccumulator:add(double,double)" : "Adds the given pair of values to the dataset.",
  "com.google.common.collect.Multimaps$MapMultimap:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)" : "Enters this monitor when the guard is satisfied. Blocks indefinitely.",
  "com.google.common.net.PercentEscaper:createSafeOctets(java.lang.String)" : "* Creates a boolean array with entries corresponding to the character values specified in\n   * safeChars set to true. The array is as small as is required to hold the given character\n   * information.",
  "com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Iterable)" : "* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code\n   * startNodes}, in the order of a depth-first post-order traversal. This is equivalent to a\n   * depth-first post-order traversal of a graph with an additional root node whose successors are\n   * the listed {@code startNodes}.\n   *\n   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph\n   * @see #depthFirstPostOrder(Object)\n   * @since 24.1",
  "com.google.common.graph.ImmutableNetwork$Builder:build()" : "* Returns a newly-created {@code ImmutableNetwork} based on the contents of this {@code\n     * Builder}.",
  "com.google.common.collect.AbstractBiMap:entrySetIterator()" : null,
  "com.google.common.base.Suppliers$SupplierComposition:get()" : null,
  "com.google.common.graph.NetworkBuilder:nodeOrder(com.google.common.graph.ElementOrder)" : "* Specifies the order of iteration for the elements of {@link Network#nodes()}.\n   *\n   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",
  "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:escape(char)" : null,
  "com.google.common.collect.Maps$SortedAsMapView:backingSet()" : null,
  "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:setValue(java.lang.Object)" : null,
  "com.google.common.primitives.Longs:toArray(java.util.Collection)" : "* Returns an array containing each value of {@code collection}, converted to a {@code long} value\n   * in the manner of {@link Number#longValue}.\n   *\n   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n   * Calling this method is as thread-safe as calling that method.\n   *\n   * @param collection a collection of {@code Number} instances\n   * @return an array containing the same values as {@code collection}, in the same order, converted\n   *     to primitives\n   * @throws NullPointerException if {@code collection} or any of its elements is null\n   * @since 1.0 (parameter was {@code Collection<Long>} before 12.0)",
  "com.google.common.graph.StandardValueGraph:successors(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSet$SetBuilderImpl:addDedupedElement(java.lang.Object)" : "Adds e to the insertion-order array of deduplicated elements. Calls ensureCapacity.",
  "com.google.common.util.concurrent.ForwardingFluentFuture:isDone()" : null,
  "com.google.common.util.concurrent.ClosingFuture:toString()" : null,
  "com.google.common.util.concurrent.AbstractFuture:interruptTask()" : "* Subclasses can override this method to implement interruption of the future's computation. The\n   * method is invoked automatically by a successful call to {@link #cancel(boolean) cancel(true)}.\n   *\n   * <p>The default implementation does nothing.\n   *\n   * <p>This method is likely to be deprecated. Prefer to override {@link #afterDone}, checking\n   * {@link #wasInterrupted} to decide whether to interrupt your task.\n   *\n   * @since 10.0",
  "com.google.common.collect.Multisets$MultisetIteratorImpl:hasNext()" : null,
  "com.google.common.io.FileBackedOutputStream:write(byte[],int,int)" : null,
  "com.google.common.collect.ImmutableMultimap:isPartialView()" : "* Returns {@code true} if this immutable multimap's implementation contains references to\n   * user-created objects that aren't accessible via this multimap's methods. This is generally used\n   * to determine whether {@code copyOf} implementations should make an explicit copy to avoid\n   * memory leaks.",
  "com.google.common.collect.Lists$AbstractListWrapper:remove(int)" : null,
  "com.google.common.base.CharMatcher$None:negate()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:getKey()" : null,
  "com.google.common.collect.HashBiMap:create()" : "Returns a new, empty {@code HashBiMap} with the default initial capacity (16).",
  "com.google.common.io.ByteStreams:combineBuffers(java.util.Queue,int)" : null,
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.base.StandardSystemProperty:key()" : "Returns the key used to look up this system property.",
  "com.google.common.collect.Lists$ReverseList:add(int,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableEnumSet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:rowKeySet()" : null,
  "com.google.common.collect.Multisets$FilteredMultiset:add(java.lang.Object,int)" : null,
  "com.google.common.collect.ImmutableRangeSet$Builder:addAll(com.google.common.collect.RangeSet)" : "* Add all ranges from the specified range set to this builder. Adjacent ranges are permitted\n     * and will be merged, but overlapping ranges will cause an exception when {@link #build()} is\n     * called.",
  "com.google.common.hash.HashCode$LongHashCode:asLong()" : null,
  "com.google.common.cache.LocalCache$KeySet:contains(java.lang.Object)" : null,
  "com.google.common.collect.Maps$DescendingMap:reverse(java.util.Comparator)" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:<init>(short[])" : null,
  "com.google.common.reflect.TypeToken:getInvariantTypeResolver()" : null,
  "com.google.common.collect.FilteredEntryMultimap:satisfies(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredMapValues:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableMultiset$EntrySet:size()" : null,
  "com.google.common.hash.MacHashFunction:newHasher()" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:tailSet(java.lang.Object)" : null,
  "com.google.common.io.CharSource$ConcatenatedCharSource:length()" : null,
  "com.google.common.net.HostAndPort:getHost()" : "* Returns the portion of this {@code HostAndPort} instance that should represent the hostname or\n   * IPv4/IPv6 literal.\n   *\n   * <p>A successful parse does not imply any degree of sanity in this field. For additional\n   * validation, see the {@link HostSpecifier} class.\n   *\n   * @since 20.0 (since 10.0 as {@code getHostText})",
  "com.google.common.io.Resources:copy(java.net.URL,java.io.OutputStream)" : "* Copies all bytes from a URL to an output stream.\n   *\n   * @param from the URL to read from\n   * @param to the output stream\n   * @throws IOException if an I/O error occurs",
  "com.google.common.util.concurrent.ClosingFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.ImmutableSet$SetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$SetBuilderImpl)" : "Initializes this SetBuilderImpl with a copy of the deduped elements array from toCopy.",
  "com.google.common.reflect.TypeResolver$TypeVariableKey:forLookup(java.lang.reflect.Type)" : "Wraps {@code t} in a {@code TypeVariableKey} if it's a type variable.",
  "com.google.common.collect.ForwardingBlockingDeque:delegate()" : null,
  "com.google.common.collect.Tables$TransposeTable:columnKeySet()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:compute(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap)" : null,
  "com.google.common.collect.CompactHashMap$ValuesView:spliterator()" : null,
  "com.google.common.io.FileBackedOutputStream:openInputStream()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double,double)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.cache.CacheBuilder:build()" : "* Builds a cache which does not automatically load values when keys are requested.\n   *\n   * <p>Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a {@code\n   * CacheLoader}.\n   *\n   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be\n   * invoked again to create multiple independent caches.\n   *\n   * @return a cache having the requested features\n   * @since 11.0",
  "com.google.common.collect.HashBiMap:size()" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,long,java.lang.Object)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated()" : "* @since 15.0",
  "com.google.common.primitives.ImmutableDoubleArray:<init>(double[],int,int)" : null,
  "com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry:<init>(java.lang.Object,int,com.google.common.collect.Multisets$ImmutableEntry)" : null,
  "com.google.common.graph.AbstractDirectedNetworkConnections:removeOutEdge(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingList:standardLastIndexOf(java.lang.Object)" : "* A sensible default implementation of {@link #lastIndexOf}, in terms of {@link\n   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override\n   * {@link #lastIndexOf} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.AbstractNavigableMap:floorEntry(java.lang.Object)" : null,
  "com.google.common.primitives.Longs:fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)" : "* Returns the {@code long} value whose byte representation is the given 8 bytes, in big-endian\n   * order; equivalent to {@code Longs.fromByteArray(new byte[] {b1, b2, b3, b4, b5, b6, b7, b8})}.\n   *\n   * @since 7.0",
  "com.google.common.collect.Iterators:getLast(java.util.Iterator)" : "* Advances {@code iterator} to the end, returning the last element.\n   *\n   * @return the last element of {@code iterator}\n   * @throws NoSuchElementException if the iterator is empty",
  "com.google.common.collect.ImmutableSetMultimap:removeAll(java.lang.Object)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Maps$FilteredEntryBiMap:inverse()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner:futureCombiner()" : null,
  "com.google.common.reflect.Types$WildcardTypeImpl:getUpperBounds()" : null,
  "com.google.common.collect.AbstractNavigableMap:headMap(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:pendingToString()" : null,
  "com.google.common.base.Optional:toJavaUtil()" : "* Returns the equivalent {@code java.util.Optional} value to this optional.\n   *\n   * <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it\n   * could refer to either the static or instance version of this method. Write out the lambda\n   * expression {@code o -> o.toJavaUtil()} instead.\n   *\n   * @since 21.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.ClosingFuture$DeferredCloser:<init>(com.google.common.util.concurrent.ClosingFuture$CloseableList)" : null,
  "com.google.common.collect.ImmutableMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)" : "* Updates the value currently associated with {@code key} by combining it with {@code x} via the\n   * specified accumulator function, returning the new value. The previous value associated with\n   * {@code key} (or zero, if there is none) is passed as the first argument to {@code\n   * accumulatorFunction}, and {@code x} is passed as the second argument.\n   *\n   * @since 21.0",
  "com.google.common.util.concurrent.AtomicDouble:weakCompareAndSet(double,double)" : "* Atomically sets the value to the given updated value if the current value is <a\n   * href=\"#bitEquals\">bitwise equal</a> to the expected value.\n   *\n   * <p>May <a\n   * href=\"http://download.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html#Spurious\">\n   * fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate\n   * alternative to {@code compareAndSet}.\n   *\n   * @param expect the expected value\n   * @param update the new value\n   * @return {@code true} if successful",
  "com.google.common.collect.Synchronized$SynchronizedList:indexOf(java.lang.Object)" : null,
  "com.google.common.base.Predicates:equalTo(java.lang.Object)" : "* Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()}\n   * the given target or both are null.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code x -> Objects.equals(x, target)}, but note that\n   * lambdas do not have human-readable {@link #toString()} representations and are not\n   * serializable.",
  "com.google.common.collect.DescendingMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.FluentIterable:toString()" : "* Returns a string representation of this fluent iterable, with the format {@code [e1, e2, ...,\n   * en]}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.joining(\", \", \"[\", \"]\"))}\n   * or (less efficiently) {@code stream.collect(Collectors.toList()).toString()}.",
  "com.google.common.collect.ImmutableSortedMultiset:orderedBy(java.util.Comparator)" : "* Returns a builder that creates immutable sorted multisets with an explicit comparator. If the\n   * comparator has a more general type than the set being generated, such as creating a {@code\n   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor\n   * instead.\n   *\n   * @throws NullPointerException if {@code comparator} is null",
  "com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate)" : "* Returns the first element in {@code iterator} that satisfies the given predicate; use this\n   * method only when such an element is known to exist. If no such element is found, the iterator\n   * will be left exhausted: its {@code hasNext()} method will return {@code false}. If it is\n   * possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator,\n   * Predicate, Object)} instead.\n   *\n   * @throws NoSuchElementException if no element in {@code iterator} matches the given predicate",
  "com.google.common.net.HostAndPort:requireBracketsForIPv6()" : "* Generate an error if the host might be a non-bracketed IPv6 literal.\n   *\n   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like \"[2001:db8::1]\".\n   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and\n   * disallow IPv6 literals that don't contain these brackets.\n   *\n   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To\n   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}\n   * method.\n   *\n   * @return {@code this}, to enable chaining of calls.\n   * @throws IllegalArgumentException if bracketless IPv6 is detected.",
  "com.google.common.collect.ImmutableMap:asMultimap()" : "* Returns a multimap view of the map.\n   *\n   * @since 14.0",
  "com.google.common.collect.Lists$StringAsImmutableList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap$Inverse:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.reflect.TypeToken$2:getGenericParameterTypes()" : null,
  "com.google.common.cache.CacheBuilder:keyEquivalence(com.google.common.base.Equivalence)" : "* Sets a custom {@code Equivalence} strategy for comparing keys.\n   *\n   * <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when\n   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)",
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.io.ReaderInputStream:startDraining(boolean)" : "* Flips the buffer output buffer so we can start reading bytes from it. If we are starting to\n   * drain because there was overflow, and there aren't actually any characters to drain, then the\n   * overflow must be due to a small output buffer.",
  "com.google.common.collect.RegularImmutableAsList:delegateCollection()" : null,
  "com.google.common.primitives.Ints:reverse(int[],int,int)" : "* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive. This is equivalent to {@code\n   * Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex))}, but is likely to be more\n   * efficient.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 23.1",
  "com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard)" : "* Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted.\n   *\n   * @throws InterruptedException if interrupted while waiting",
  "com.google.common.primitives.Booleans$BooleanArrayAsList:hashCode()" : null,
  "com.google.common.collect.DenseImmutableTable$ColumnMap:keyToIndex()" : null,
  "com.google.common.io.LineReader:readLine()" : "* Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code\n   * '\\n'}), a carriage return ({@code '\\r'}), or a carriage return followed immediately by a\n   * linefeed ({@code \"\\r\\n\"}).\n   *\n   * @return a {@code String} containing the contents of the line, not including any\n   *     line-termination characters, or {@code null} if the end of the stream has been reached.\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.RegularImmutableSortedSet:internalArray()" : null,
  "com.google.common.util.concurrent.TimeoutFuture:pendingToString()" : null,
  "com.google.common.collect.ImmutableTable:valuesIterator()" : null,
  "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte[],int,int)" : null,
  "com.google.common.cache.LocalCache$Strength$1:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)" : "Creates a reference for the given value according to this value strength.",
  "com.google.common.collect.FilteredKeySetMultimap:unfiltered()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Peeker:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)" : null,
  "com.google.common.collect.MutableClassToInstanceMap:putInstance(java.lang.Class,java.lang.Object)" : null,
  "com.google.common.io.CharStreams:asWriter(java.lang.Appendable)" : "* Returns a Writer that sends all output to the given {@link Appendable} target. Closing the\n   * writer will close the target if it is {@link Closeable}, and flushing the writer will flush the\n   * target if it is {@link java.io.Flushable}.\n   *\n   * @param target the object to which output will be sent\n   * @return a new Writer object, unless target is a Writer, in which case the target is returned",
  "com.google.common.collect.FilteredKeyListMultimap:get(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int,long)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.math.LinearTransformation$LinearTransformationBuilder:withSlope(double)" : "* Finish building an instance with the given slope, i.e. the rate of change of {@code y} with\n     * respect to {@code x}. The slope must not be {@code NaN}. It may be infinite, in which case\n     * the transformation is vertical. (If it is zero, the transformation is horizontal.)",
  "com.google.common.graph.MultiEdgesConnecting:iterator()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:ceilingEntry(java.lang.Object)" : null,
  "com.google.common.collect.ContiguousSet:tailSet(java.lang.Object,boolean)" : "* @since 12.0",
  "com.google.common.math.Quantiles:intsToDoubles(int[])" : null,
  "com.google.common.collect.ImmutableSet$Builder:copy()" : null,
  "com.google.common.collect.AbstractSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* Stores a collection of values with the same key, replacing any existing values for that key.\n   * The returned collection is immutable.\n   *\n   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link\n   * Multimap} interface.\n   *\n   * <p>Any duplicates in {@code values} will be stored in the multimap once.",
  "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:readLock()" : null,
  "com.google.common.collect.ImmutableRangeMap:clear()" : "* Guaranteed to throw an exception and leave the {@code RangeMap} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.primitives.Longs:compare(long,long)" : "* Compares the two specified {@code long} values. The sign of the value returned is the same as\n   * that of {@code ((Long) a).compareTo(b)}.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the\n   * equivalent {@link Long#compare} method instead.\n   *\n   * @param a the first {@code long} to compare\n   * @param b the second {@code long} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)" : "* Starts specifying how to combine three {@link ClosingFuture}s into a single pipeline, assuming\n   * they all succeed. If any fail, the resulting pipeline will fail.\n   *\n   * <p>Calling this method allows you to use lambdas or method references typed with the types of\n   * the input {@link ClosingFuture}s.\n   *\n   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from any of\n   *     the arguments, or if any has already been {@linkplain #finishToFuture() finished}",
  "com.google.common.eventbus.EventBus$LoggingHandler:handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:toString()" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:isEmpty()" : null,
  "com.google.common.base.CharMatcher$AnyOf:setBits(java.util.BitSet)" : null,
  "com.google.common.math.Quantiles:partition(double[],int,int)" : "* Performs a partition operation on the slice of {@code array} with elements in the range [{@code\n   * from}, {@code to}]. Uses the median of {@code from}, {@code to}, and the midpoint between them\n   * as a pivot. Returns the index which the slice is partitioned around, i.e. if it returns {@code\n   * ret} then we know that the values with indexes in [{@code from}, {@code ret}) are less than or\n   * equal to the value at {@code ret} and the values with indexes in ({@code ret}, {@code to}] are\n   * greater than or equal to that.",
  "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:get(java.lang.Object)" : null,
  "com.google.common.graph.MapIteratorCache:getIfCached(java.lang.Object)" : null,
  "com.google.common.collect.Sets$PowerSet:size()" : null,
  "com.google.common.io.LittleEndianDataOutputStream:writeFloat(float)" : "* Writes a {@code float} as specified by {@link DataOutputStream#writeFloat(float)}, except using\n   * little-endian byte order.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.ImmutableSortedMap$1EntrySet:spliterator()" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:toString()" : null,
  "com.google.common.primitives.Chars:checkedCast(long)" : "* Returns the {@code char} value that is equal to {@code value}, if possible.\n   *\n   * @param value any value in the range of the {@code char} type\n   * @return the {@code char} value that equals {@code value}\n   * @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE}\n   *     or less than {@link Character#MIN_VALUE}",
  "com.google.common.collect.ForwardingTable:containsValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:shutDown()" : "* Stop the service. This is guaranteed not to run concurrently with {@link #runOneIteration}.\n   *\n   * <p>By default this method does nothing.",
  "com.google.common.collect.DescendingImmutableSortedSet:headSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.math.PairedStats:ensureInUnitRange(double)" : null,
  "com.google.common.base.Predicates:and(com.google.common.base.Predicate,com.google.common.base.Predicate)" : "* Returns a predicate that evaluates to {@code true} if both of its components evaluate to {@code\n   * true}. The components are evaluated in order, and evaluation will be \"short-circuited\" as soon\n   * as a false predicate is found.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code first.and(second)}.",
  "com.google.common.primitives.ImmutableIntArray$Builder:ensureRoomFor(int)" : null,
  "com.google.common.util.concurrent.Striped$PaddedSemaphore:<init>(int)" : null,
  "com.google.common.primitives.Primitives:allPrimitiveTypes()" : "* Returns an immutable set of all nine primitive types (including {@code void}). Note that a\n   * simpler way to test whether a {@code Class} instance is a member of this set is to call {@link\n   * Class#isPrimitive}.\n   *\n   * @since 3.0",
  "com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Sets$FilteredNavigableSet:<init>(java.util.NavigableSet,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:ceiling(java.lang.Object)" : null,
  "com.google.common.base.Functions$PredicateFunction:<init>(com.google.common.base.Predicate)" : null,
  "com.google.common.math.DoubleMath:isPowerOfTwo(double)" : "* Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer\n   * {@code k}.",
  "com.google.common.escape.CharEscaper:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.io.ByteStreams:skipFully(java.io.InputStream,long)" : "* Discards {@code n} bytes of data from the input stream. This method will block until the full\n   * amount has been skipped. Does not close the stream.\n   *\n   * @param in the input stream to read from\n   * @param n the number of bytes to skip\n   * @throws EOFException if this stream reaches the end before skipping all the bytes\n   * @throws IOException if an I/O error occurs, or the stream does not support skipping",
  "com.google.common.collect.DescendingImmutableSortedSet:createDescendingSet()" : null,
  "com.google.common.collect.Collections2$PermutationIterator:computeNext()" : null,
  "com.google.common.collect.Synchronized:biMap(com.google.common.collect.BiMap,java.lang.Object)" : null,
  "com.google.common.base.Joiner$MapJoiner:<init>(com.google.common.base.Joiner,java.lang.String)" : null,
  "com.google.common.graph.ForwardingValueGraph:adjacentNodes(java.lang.Object)" : null,
  "com.google.common.graph.DirectedGraphConnections:value(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Any:replaceFrom(java.lang.CharSequence,char)" : null,
  "com.google.common.io.ByteSink$AsCharSink:openStream()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:putIfAbsent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.MessageDigestHashFunction:bits()" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:equals(java.lang.Object)" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:size()" : null,
  "com.google.common.cache.LocalCache$Segment:refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean)" : "* Refreshes the value associated with {@code key}, unless another thread is already doing so.\n     * Returns the newly refreshed value associated with {@code key} if it was refreshed inline, or\n     * {@code null} if another thread is performing the refresh or if an error occurs during\n     * refresh.",
  "com.google.common.util.concurrent.Futures$InCompletionOrderState:<init>(com.google.common.util.concurrent.ListenableFuture[])" : null,
  "com.google.common.collect.Maps$AbstractFilteredMap:createValues()" : null,
  "com.google.common.base.Predicates$InstanceOfPredicate:toString()" : null,
  "com.google.common.reflect.TypeResolver$WildcardCapturer:notForTypeVariable()" : null,
  "com.google.common.collect.RegularImmutableBiMap:createEntrySet()" : null,
  "com.google.common.base.Stopwatch:elapsedNanos()" : null,
  "com.google.common.collect.ForwardingTable:hashCode()" : null,
  "com.google.common.collect.CompactLinkedHashMap:<init>(int,boolean)" : null,
  "com.google.common.collect.Maps$UnmodifiableEntrySet:equals(java.lang.Object)" : null,
  "com.google.common.primitives.Ints:lastIndexOf(int[],int,int,int)" : null,
  "com.google.common.util.concurrent.Striped$WeakSafeLock:delegate()" : null,
  "com.google.common.base.CharMatcher$Any:countIn(java.lang.CharSequence)" : null,
  "com.google.common.reflect.Invokable:getOwnerType()" : null,
  "com.google.common.graph.AbstractBaseGraph$2:iterator()" : "* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.\n     *\n     * @since 20.0 (present with return type {@link Iterator} since 2.0)",
  "com.google.common.math.LongMath:multiplyFraction(long,long,long)" : "Returns (x * numerator / denominator), which is assumed to come out to an integral value.",
  "com.google.common.collect.Lists:<init>()" : null,
  "com.google.common.collect.ForwardingBlockingDeque:remainingCapacity()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:getMaxElementIndex()" : "Returns the index of the max element.",
  "com.google.common.graph.ForwardingValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$Keys:clear()" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:writeMapTo(java.io.ObjectOutputStream)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:swapWithConceptuallyLastElement(java.lang.Object)" : "* Swap {@code actualLastElement} with the conceptually correct last element of the heap.\n     * Returns the index that {@code actualLastElement} now resides in.\n     *\n     * <p>Since the last element of the array is actually in the middle of the sorted structure, a\n     * childless aunt node could be smaller, which would corrupt the invariant if this element\n     * becomes the new parent of the aunt node. In that case, we first switch the last element with\n     * its aunt node, before returning.",
  "com.google.common.collect.StandardTable$Column$KeySet:contains(java.lang.Object)" : null,
  "com.google.common.io.CountingInputStream:read()" : null,
  "com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodesMultiset()" : null,
  "com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long,java.util.concurrent.TimeUnit)" : "* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}\n   * implementations.",
  "com.google.common.math.Stats:toByteArray()" : "* Gets a byte array representation of this instance.\n   *\n   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between\n   * versions.",
  "com.google.common.collect.ForwardingMultiset:equals(java.lang.Object)" : null,
  "com.google.common.collect.FluentIterable:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)" : "* Returns a fluent iterable that combines three iterables. The returned iterable has an iterator\n   * that traverses the elements in {@code a}, followed by the elements in {@code b}, followed by\n   * the elements in {@code c}. The source iterators are not polled until necessary.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input\n   * iterator supports it.\n   *\n   * <p><b>{@code Stream} equivalent:</b> use nested calls to {@link Stream#concat}, or see the\n   * advice in {@link #concat(Iterable...)}.\n   *\n   * @since 20.0",
  "com.google.common.base.Verify:verify(boolean,java.lang.String,long)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.AbstractMultiset:createEntrySet()" : null,
  "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:<init>()" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:fullyFailedFuture(java.lang.Throwable)" : null,
  "com.google.common.collect.AbstractMultimap:keys()" : null,
  "com.google.common.collect.Synchronized:sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:findMinGrandChild(int)" : "Returns the minimum grand child or -1 if no grand child exists.",
  "com.google.common.collect.Cut:compareTo(com.google.common.collect.Cut)" : null,
  "com.google.common.base.CharMatcher$Any:matchesAllOf(java.lang.CharSequence)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:equals(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.Sets$DescendingSet:ceiling(java.lang.Object)" : null,
  "com.google.common.collect.Range:hasLowerBound()" : "Returns {@code true} if this range has a lower endpoint.",
  "com.google.common.collect.AbstractTable:containsColumn(java.lang.Object)" : null,
  "com.google.common.collect.NaturalOrdering:<init>()" : null,
  "com.google.common.collect.CartesianList:get(int)" : null,
  "com.google.common.net.InetAddresses:textToNumericFormatV4(java.lang.String)" : null,
  "com.google.common.collect.Synchronized:sortedSet(java.util.SortedSet,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingDeque:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.reflect.Types$ParameterizedTypeImpl:<init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])" : null,
  "com.google.common.util.concurrent.AbstractFuture:get()" : "* {@inheritDoc}\n   *\n   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the\n   * current thread is interrupted during the call, even if the value is already available.\n   *\n   * @throws CancellationException {@inheritDoc}",
  "com.google.common.collect.ImmutableSortedMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.SortedMultisets$ElementSet:multiset()" : null,
  "com.google.common.base.Platform:emptyToNull(java.lang.String)" : "* Returns the string if it is not empty, or a null string otherwise.\n   *\n   * @param string the string to test and possibly return\n   * @return {@code string} if it is not empty; {@code null} otherwise",
  "com.google.common.collect.CompactHashSet:remove(java.lang.Object)" : null,
  "com.google.common.collect.Lists$ReverseList:iterator()" : null,
  "com.google.common.reflect.TypeToken:toString()" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:getFirst()" : null,
  "com.google.common.collect.ImmutableList$SubList:isPartialView()" : null,
  "com.google.common.collect.EnumBiMap:create(java.lang.Class,java.lang.Class)" : "* Returns a new, empty {@code EnumBiMap} using the specified key and value types.\n   *\n   * @param keyType the key type\n   * @param valueType the value type",
  "com.google.common.base.PairwiseEquivalence:equals(java.lang.Object)" : null,
  "com.google.common.reflect.Types$TypeVariableInvocationHandler:<init>(com.google.common.reflect.Types$TypeVariableImpl)" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,java.time.Duration)" : "* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,\n   * timeout, unit)} uninterruptibly.\n   *\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,java.time.Duration)" : "* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when\n   * the application is complete. It does so by using daemon threads and adding a shutdown hook to\n   * wait for their completion.\n   *\n   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.\n   *\n   * @param executor the executor to modify to make sure it exits when the application is finished\n   * @param terminationTimeout how long to wait for the executor to finish before terminating the\n   *     JVM\n   * @return an unmodifiable version of the input which will not hang the JVM\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.FilteredMultimapValues:remove(java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:getLockName(java.lang.Enum)" : "* For the given Enum value {@code rank}, returns the value's {@code \"EnumClass.name\"}, which is\n   * used in exception and warning output.",
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong:<init>(java.util.Spliterator$OfLong,java.util.Spliterator,java.util.function.Function,int,long)" : null,
  "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:runInterruptibly()" : null,
  "com.google.common.base.CharMatcher$Any:indexIn(java.lang.CharSequence,int)" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)" : "* Stores a collection of values with the same key in the built multimap.\n     *\n     * @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values}\n     *     is null. The builder is left in an invalid state.",
  "com.google.common.collect.AbstractBiMap:keySet()" : null,
  "com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int)" : null,
  "com.google.common.reflect.TypeToken:unwrap()" : "* Returns the corresponding primitive type if this is a wrapper type; otherwise returns {@code\n   * this} itself. Idempotent.\n   *\n   * @since 15.0",
  "com.google.common.primitives.ImmutableLongArray$Builder:build()" : "* Returns a new immutable array. The builder can continue to be used after this call, to append\n     * more values and build again.\n     *\n     * <p><b>Performance note:</b> the returned array is backed by the same array as the builder, so\n     * no data is copied as part of this step, but this may occupy more memory than strictly\n     * necessary. To copy the data to a right-sized backing array, use {@code .build().trimmed()}.",
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:getPredecessorInMultimap()" : null,
  "com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate)" : "* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered\n   * sorted map.",
  "com.google.common.cache.LocalCache$WeightedSoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.util.concurrent.ForwardingListeningExecutorService:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:checkModCount()" : null,
  "com.google.common.base.Suppliers$SupplierComposition:<init>(com.google.common.base.Function,com.google.common.base.Supplier)" : null,
  "com.google.common.cache.CacheBuilder:checkNonLoadingCache()" : null,
  "com.google.common.collect.ImmutableRangeMap:put(com.google.common.collect.Range,java.lang.Object)" : "* Guaranteed to throw an exception and leave the {@code RangeMap} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Lists:equalsImpl(java.util.List,java.lang.Object)" : "An implementation of {@link List#equals(Object)}.",
  "com.google.common.collect.AbstractBiMap$EntrySet:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.Iterables:tryFind(java.lang.Iterable,com.google.common.base.Predicate)" : "* Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the\n   * given predicate, if such an element exists.\n   *\n   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}\n   * is matched in {@code iterable}, a NullPointerException will be thrown.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}\n   *\n   * @since 11.0",
  "com.google.common.eventbus.DeadEvent:toString()" : null,
  "com.google.common.collect.SingletonImmutableBiMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:<init>(java.util.NavigableSet,com.google.common.base.Function)" : null,
  "com.google.common.collect.StandardRowSortedTable:sortedBackingMap()" : null,
  "com.google.common.cache.LocalCache$StrongWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.util.concurrent.FluentFuture$TrustedFuture:cancel(boolean)" : null,
  "com.google.common.primitives.ImmutableIntArray:indexOf(int)" : "* Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no\n   * such index exists. Equivalent to {@code asList().indexOf(target)}.",
  "com.google.common.reflect.Invokable$MethodInvokable:<init>(java.lang.reflect.Method)" : null,
  "com.google.common.collect.ImmutableList$SubList:listIterator(int)" : null,
  "com.google.common.collect.ImmutableSortedMap:lowerKey(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableLongArray:copyOf(java.lang.Iterable)" : "* Returns an immutable array containing the given values, in order.\n   *\n   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code\n   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link\n   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",
  "com.google.common.util.concurrent.AbstractIdleService:startAsync()" : "* @since 15.0",
  "com.google.common.collect.HashMultiset:create(int)" : "* Creates a new, empty {@code HashMultiset} with the specified expected number of distinct\n   * elements.\n   *\n   * @param distinctElements the expected number of distinct elements\n   * @throws IllegalArgumentException if {@code distinctElements} is negative",
  "com.google.common.collect.SingletonImmutableBiMap:get(java.lang.Object)" : null,
  "com.google.common.graph.ForwardingNetwork:edgesConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture:<init>(java.util.concurrent.locks.ReentrantLock,java.util.concurrent.Future)" : null,
  "com.google.common.primitives.UnsignedInts:flip(int)" : null,
  "com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>This method returns a serializable {@code ImmutableSortedSet}.\n   *\n   * <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an\n   * {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code\n   * toElement}. However, this method doesn't throw an exception in that situation, but instead\n   * keeps the original {@code toElement}.",
  "com.google.common.collect.SetMultimap:entries()" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}\n   * interface.",
  "com.google.common.collect.EmptyContiguousSet:intersection(com.google.common.collect.ContiguousSet)" : null,
  "com.google.common.base.Ticker$1:read()" : "Returns the number of nanoseconds elapsed since this ticker's fixed point of reference.",
  "com.google.common.collect.CompoundOrdering:toString()" : null,
  "com.google.common.collect.FilteredEntryMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.ForwardingDeque:removeFirstOccurrence(java.lang.Object)" : null,
  "com.google.common.collect.DescendingImmutableSortedMultiset:count(java.lang.Object)" : null,
  "com.google.common.base.Absent:transform(com.google.common.base.Function)" : null,
  "com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)" : "* Returns a future that delegates to another but will finish early (via a {@link\n   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.\n   *\n   * <p>The delegate future is interrupted and cancelled if it times out.\n   *\n   * @param delegate The future to delegate to.\n   * @param time when to time out the future\n   * @param unit the time unit of the time parameter\n   * @param scheduledExecutor The executor service to enforce the timeout.\n   * @since 19.0",
  "com.google.common.base.Predicates$SubtypeOfPredicate:toString()" : null,
  "com.google.common.collect.LinkedHashMultiset:entrySet()" : "* {@inheritDoc}\n   *\n   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the\n   * current count of that element in the multiset, as opposed to the count at the time the entry\n   * was retrieved.",
  "com.google.common.collect.ImmutableRangeMap:of(com.google.common.collect.Range,java.lang.Object)" : "Returns an immutable range map mapping a single range to a single value.",
  "com.google.common.collect.ImmutableRangeSet:add(com.google.common.collect.Range)" : "* Guaranteed to throw an exception and leave the {@code RangeSet} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.DescendingImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollLastEntry()" : null,
  "com.google.common.base.CharMatcher$RangesMatcher:<init>(java.lang.String,char[],char[])" : null,
  "com.google.common.collect.TopKSelector:least(int)" : "* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,\n   * relative to the natural ordering of the elements, and returns them via {@link #topK} in\n   * ascending order.\n   *\n   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",
  "com.google.common.hash.MacHashFunction$MacHasher:update(java.nio.ByteBuffer)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingIterator()" : null,
  "com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)" : "* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, long, TimeUnit)}, but\n   * with a different behavior in case it is interrupted while waiting. In that case, the operation\n   * will continue as usual, and in the end the thread's interruption status will be set (no {@code\n   * InterruptedException} is thrown).\n   *\n   * @param q the blocking queue to be drained\n   * @param buffer where to add the transferred elements\n   * @param numElements the number of elements to be waited for\n   * @param timeout how long to wait before giving up, in units of {@code unit}\n   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter\n   * @return the number of elements transferred",
  "com.google.common.graph.Graphs:transitiveClosure(com.google.common.graph.Graph)" : null,
  "com.google.common.collect.Synchronized$SynchronizedEntry:setValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:getAndDecrement(java.lang.Object)" : "* Decrements by one the value currently associated with {@code key}, and returns the old value.",
  "com.google.common.eventbus.SubscriberExceptionContext:getSubscriberMethod()" : "* @return The subscribed method that threw the exception.",
  "com.google.common.collect.AbstractSetMultimap:put(java.lang.Object,java.lang.Object)" : "* Stores a key-value pair in the multimap.\n   *\n   * @param key key to store in the multimap\n   * @param value value to store in the multimap\n   * @return {@code true} if the method increased the size of the multimap, or {@code false} if the\n   *     multimap already contained the key-value pair",
  "com.google.common.collect.AbstractTable:toString()" : "Returns the string representation {@code rowMap().toString()}.",
  "com.google.common.collect.Comparators:lexicographical(java.util.Comparator)" : null,
  "com.google.common.io.ByteSource:isEmpty()" : "* Returns whether the source has zero bytes. The default implementation first checks {@link\n   * #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero.\n   * If the size is not known, it falls back to opening a stream and checking for EOF.\n   *\n   * <p>Note that, in cases where {@code sizeIfKnown} returns zero, it is <i>possible</i> that bytes\n   * are actually available for reading. (For example, some special files may return a size of 0\n   * despite actually having content when read.) This means that a source may return {@code true}\n   * from {@code isEmpty()} despite having readable content.\n   *\n   * @throws IOException if an I/O error occurs\n   * @since 15.0",
  "com.google.common.collect.ForwardingSortedMultiset:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.ImmutableSet:copyOf(java.util.Collection)" : null,
  "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:<init>(com.google.common.cache.LoadingCache)" : null,
  "com.google.common.cache.LocalCache$WriteQueue:peek()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:create(java.lang.Iterable)" : "* Creates a new min-max priority queue using natural order, no maximum size, and initially\n   * containing the given elements.",
  "com.google.common.primitives.ImmutableIntArray$AsList:indexOf(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)" : "* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the\n   * lock, but does not wait for the guard to be satisfied.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.AbstractIndexedListIterator:hasPrevious()" : null,
  "com.google.common.collect.ImmutableAsList:contains(java.lang.Object)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerKey(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:self()" : null,
  "com.google.common.reflect.Types:newArrayType(java.lang.reflect.Type)" : "Returns the array type of {@code componentType}.",
  "com.google.common.util.concurrent.WrappingScheduledExecutorService:scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.base.CharMatcher$Or:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)" : null,
  "com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int,int)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.util.concurrent.SimpleTimeLimiter:checkPositiveTimeout(long)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:first()" : null,
  "com.google.common.graph.AbstractBaseGraph:inDegree(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingSortedSet:last()" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:get(int)" : null,
  "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)" : null,
  "com.google.common.collect.Maps:safeContainsKey(java.util.Map,java.lang.Object)" : "* Delegates to {@link Map#containsKey}. Returns {@code false} on {@code ClassCastException} and\n   * {@code NullPointerException}.",
  "com.google.common.util.concurrent.Monitor:enter(long,java.util.concurrent.TimeUnit)" : "* Enters this monitor. Blocks at most the given time.\n   *\n   * @return whether the monitor was entered",
  "com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache$Strength,com.google.common.cache.LocalCache$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,long,com.google.common.cache.Weigher,int,com.google.common.cache.RemovalListener,com.google.common.base.Ticker,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.base.Splitter$MapSplitter:<init>(com.google.common.base.Splitter,com.google.common.base.Splitter)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:delegate()" : null,
  "com.google.common.collect.JdkBackedImmutableMap:createValues()" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap:putInstance(com.google.common.reflect.TypeToken,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @deprecated unsupported operation\n   * @throws UnsupportedOperationException always",
  "com.google.common.graph.Traverser:forTree(com.google.common.graph.SuccessorsFunction)" : "* Creates a new traverser for a directed acyclic graph that has at most one path from the start\n   * node(s) to any node reachable from the start node(s), and has no paths from any start node to\n   * any other start node, such as a tree or forest.\n   *\n   * <p>{@code forTree()} is especially useful (versus {@code forGraph()}) in cases where the data\n   * structure being traversed is, in addition to being a tree/forest, also defined <a\n   * href=\"https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness\">recursively</a>.\n   * This is because the {@code forTree()}-based implementations don't keep track of visited nodes,\n   * and therefore don't need to call {@code equals()} or {@code hashCode()} on the node objects;\n   * this saves both time and space versus traversing the same graph using {@code forGraph()}.\n   *\n   * <p>Providing a graph to be traversed for which there is more than one path from the start\n   * node(s) to any node may lead to:\n   *\n   * <ul>\n   *   <li>Traversal not terminating (if the graph has cycles)\n   *   <li>Nodes being visited multiple times (if multiple paths exist from any start node to any\n   *       node reachable from any start node)\n   * </ul>\n   *\n   * <p><b>Performance notes</b>\n   *\n   * <ul>\n   *   <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from\n   *       the start node).\n   *   <li>While traversing, the traverser will use <i>O(H)</i> space (where <i>H</i> is the number\n   *       of nodes that have been seen but not yet visited, that is, the \"horizon\").\n   * </ul>\n   *\n   * <p><b>Examples</b> (all edges are directed facing downwards)\n   *\n   * <p>The graph below would be valid input with start nodes of {@code a, f, c}. However, if {@code\n   * b} were <i>also</i> a start node, then there would be multiple paths to reach {@code e} and\n   * {@code h}.\n   *\n   * {@snippet :\n   *    a     b      c\n   *   / \\   / \\     |\n   *  /   \\ /   \\    |\n   * d     e     f   g\n   *       |\n   *       |\n   *       h\n   * }\n   *\n   * <p>.\n   *\n   * <p>The graph below would be a valid input with start nodes of {@code a, f}. However, if {@code\n   * b} were a start node, there would be multiple paths to {@code f}.\n   *\n   * {@snippet :\n   *    a     b\n   *   / \\   / \\\n   *  /   \\ /   \\\n   * c     d     e\n   *        \\   /\n   *         \\ /\n   *          f\n   * }\n   *\n   * <p><b>Note on binary trees</b>\n   *\n   * <p>This method can be used to traverse over a binary tree. Given methods {@code\n   * leftChild(node)} and {@code rightChild(node)}, this method can be called as\n   *\n   * {@snippet :\n   * Traverser.forTree(node -> ImmutableList.of(leftChild(node), rightChild(node)));\n   * }\n   *\n   * @param tree {@link SuccessorsFunction} representing a directed acyclic graph that has at most\n   *     one path between any two nodes",
  "com.google.common.io.BaseEncoding:<init>()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner:inputFutures()" : null,
  "com.google.common.util.concurrent.ClosingFuture:whenAllComplete(java.lang.Iterable)" : "* Starts specifying how to combine {@link ClosingFuture}s into a single pipeline.\n   *\n   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from any of\n   *     the {@code futures}, or if any has already been {@linkplain #finishToFuture() finished}",
  "com.google.common.collect.AbstractMapEntry:setValue(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap:putInstance(java.lang.Class,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.FluentIterable:last()" : "* Returns an {@link Optional} containing the last element in this fluent iterable. If the\n   * iterable is empty, {@code Optional.absent()} is returned. If the underlying {@code iterable} is\n   * a {@link List} with {@link java.util.RandomAccess} support, then this operation is guaranteed\n   * to be {@code O(1)}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}.\n   *\n   * @throws NullPointerException if the last element is null; if this is a possibility, use {@link\n   *     Iterables#getLast} instead.",
  "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:addListener(java.lang.Runnable,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.MultimapBuilder:<init>()" : null,
  "com.google.common.collect.EnumMultiset:checkIsE(java.lang.Object)" : "* Returns {@code element} cast to {@code E}, if it actually is a nonnull E. Otherwise, throws\n   * either a NullPointerException or a ClassCastException as appropriate.",
  "com.google.common.graph.StandardMutableNetwork:addEdge(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.Service:awaitTerminated(java.time.Duration)" : "* Waits for the {@link Service} to reach a terminal state (either {@link Service.State#TERMINATED\n   * terminated} or {@link Service.State#FAILED failed}) for no more than the given time.\n   *\n   * @param timeout the maximum time to wait\n   * @throws TimeoutException if the service has not reached the given state within the deadline\n   * @throws IllegalStateException if the service {@linkplain State#FAILED fails}.\n   * @since 28.0",
  "com.google.common.collect.TreeMultiset:entryIterator()" : null,
  "com.google.common.collect.Maps$FilteredEntryBiMap:inversePredicate(com.google.common.base.Predicate)" : null,
  "com.google.common.collect.GeneralRange:downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)" : "* Returns everything above the endpoint relative to the specified comparator, with the specified\n   * endpoint behavior.",
  "com.google.common.collect.Synchronized$SynchronizedQueue:remove()" : null,
  "com.google.common.collect.Sets$DescendingSet:floor(java.lang.Object)" : null,
  "com.google.common.eventbus.SubscriberRegistry:unregister(java.lang.Object)" : "Unregisters all subscribers on the given listener object.",
  "com.google.common.io.MoreFiles:<init>()" : null,
  "com.google.common.base.Predicates$InPredicate:equals(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)" : null,
  "com.google.common.math.Stats:of(java.util.stream.LongStream)" : "* Returns statistics over a dataset containing the given values. The stream will be completely\n   * consumed by this method.\n   *\n   * <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the\n   * values using {@link #toStats()} instead.\n   *\n   * @param values a series of values, which will be converted to {@code double} values (this may\n   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))\n   * @since 28.2 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.ServiceManager$NoOpService:doStart()" : null,
  "com.google.common.collect.Range:contains(java.lang.Comparable)" : "* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the\n   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}\n   * returns {@code false}.",
  "com.google.common.base.Converter$IdentityConverter:doAndThen(com.google.common.base.Converter)" : null,
  "com.google.common.collect.Cut$AboveAll:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.reflect.TypeToken:isPrimitive()" : "* Returns true if this type is one of the nine primitive types (including {@code void}).\n   *\n   * @since 15.0",
  "com.google.common.collect.Synchronized$SynchronizedList:addAll(int,java.util.Collection)" : null,
  "com.google.common.collect.TreeTraverser$PostOrderIterator:computeNext()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:self()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : null,
  "com.google.common.graph.DirectedGraphConnections:addSuccessor(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.SortedLists$KeyPresentBehavior$1:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)" : null,
  "com.google.common.collect.ImmutableSetMultimap$Builder:orderKeysBy(java.util.Comparator)" : "* {@inheritDoc}\n     *\n     * @since 8.0",
  "com.google.common.collect.Synchronized$SynchronizedSortedMap:firstKey()" : null,
  "com.google.common.collect.CompactHashMap$KeySetView:remove(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$CustomSortedSetMultimap:valueComparator()" : null,
  "com.google.common.primitives.Floats:sortDescending(float[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order.\n   *\n   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats\n   * all NaN values as equal and 0.0 as greater than -0.0.\n   *\n   * @since 23.1",
  "com.google.common.util.concurrent.RateLimiter:reserve(int)" : "* Reserves the given number of permits from this {@code RateLimiter} for future use, returning\n   * the number of microseconds until the reservation can be consumed.\n   *\n   * @return time in microseconds to wait until the resource can be acquired, never negative",
  "com.google.common.math.DoubleMath:log2(double)" : "* Returns the base 2 logarithm of a double value.\n   *\n   * <p>Special cases:\n   *\n   * <ul>\n   *   <li>If {@code x} is NaN or less than zero, the result is NaN.\n   *   <li>If {@code x} is positive infinity, the result is positive infinity.\n   *   <li>If {@code x} is positive or negative zero, the result is negative infinity.\n   * </ul>\n   *\n   * <p>The computed result is within 1 ulp of the exact result.\n   *\n   * <p>If the result of this method will be immediately rounded to an {@code int}, {@link\n   * #log2(double, RoundingMode)} is faster.",
  "com.google.common.collect.Ordering:from(java.util.Comparator)" : "* Returns an ordering based on an <i>existing</i> comparator instance. Note that it is\n   * unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just\n   * to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare}\n   * method directly.\n   *\n   * <p>The returned object is serializable if {@code comparator} is serializable.\n   *\n   * <p><b>Java 8+ users:</b> this class is now obsolete as explained in the class documentation, so\n   * there is no need to use this method.\n   *\n   * @param comparator the comparator that defines the order\n   * @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that\n   *     wraps that comparator",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:instance()" : null,
  "com.google.common.graph.ImmutableNetwork$Builder:addEdge(com.google.common.graph.EndpointPair,java.lang.Object)" : "* Adds {@code edge} connecting {@code endpoints}. In an undirected network, {@code edge} will\n     * also connect {@code nodeV} to {@code nodeU}.\n     *\n     * <p>If this network is directed, {@code edge} will be directed in this network; if it is\n     * undirected, {@code edge} will be undirected in this network.\n     *\n     * <p>If this network is directed, {@code endpoints} must be ordered.\n     *\n     * <p><b>{@code edge} must be unique to this network</b>, just as a {@code Map} key must be. It\n     * must also be non-null.\n     *\n     * <p>If either or both endpoints are not already present in this network, this method will\n     * silently {@link #addNode(Object) add} each missing endpoint to the network.\n     *\n     * <p>If {@code edge} already connects an endpoint pair equal to {@code endpoints}, then this\n     * method will have no effect.\n     *\n     * @return this {@code Builder} object\n     * @throws IllegalArgumentException if {@code edge} already exists in the network and connects\n     *     some other endpoint pair that is not equal to {@code endpoints}\n     * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n     *     #allowsParallelEdges()} or {@link #allowsSelfLoops()}\n     * @throws IllegalArgumentException if the endpoints are unordered and the network is directed",
  "com.google.common.collect.Lists$OnePlusArrayList:get(int)" : null,
  "com.google.common.math.DoubleMath:mean(java.util.Iterator)" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of\n   * {@code values}.\n   *\n   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of\n   * the arithmetic mean of the population.\n   *\n   * @param values a nonempty series of values, which will be converted to {@code double} values\n   *     (this may cause loss of precision)\n   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value\n   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite\n   *     values.",
  "com.google.common.eventbus.EventBus$LoggingHandler:message(com.google.common.eventbus.SubscriberExceptionContext)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readInt()" : null,
  "com.google.common.graph.ForwardingNetwork:nodes()" : null,
  "com.google.common.collect.Cut$BelowValue:typeAsLowerBound()" : null,
  "com.google.common.io.LineReader:<init>(java.lang.Readable)" : "Creates a new instance that will read lines from the given {@code Readable} object.",
  "com.google.common.hash.Hashing$Crc32cMethodHandles:newCrc32c()" : null,
  "com.google.common.math.PairedStatsAccumulator:count()" : "Returns the number of pairs in the dataset.",
  "com.google.common.reflect.ClassPath$ClassInfo:getName()" : "* Returns the fully qualified name of the class.\n     *\n     * <p>Behaves identically to {@link Class#getName()} but does not require the class to be\n     * loaded.",
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:afterRanInterruptiblyFailure(java.lang.Throwable)" : null,
  "com.google.common.primitives.Floats:<init>()" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.TreeMultiset:distinctElements(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.collect.JdkBackedImmutableBiMap:create(int,java.util.Map$Entry[])" : null,
  "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:sign(java.math.BigDecimal)" : null,
  "com.google.common.collect.TreeBasedTable:row(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code TreeBasedTable} has unique sorted values for a given row, this method\n   * returns a {@link SortedMap}, instead of the {@link Map} specified in the {@link Table}\n   * interface.\n   *\n   * @since 10.0 (<a href=\"https://github.com/google/guava/wiki/Compatibility\" >mostly\n   *     source-compatible</a> since 7.0)",
  "com.google.common.cache.AbstractCache:stats()" : null,
  "com.google.common.collect.TreeBasedTable$TreeRow:tailMap(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Monitor:awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean)" : "Caller should check before calling that guard is not satisfied.",
  "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask:toPendingString()" : null,
  "com.google.common.collect.Lists:newLinkedList()" : "* Creates a <i>mutable</i>, empty {@code LinkedList} instance (for Java 6 and earlier).\n   *\n   * <p><b>Note:</b> if you won't be adding any elements to the list, use {@link ImmutableList#of()}\n   * instead.\n   *\n   * <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently\n   * outperform {@code LinkedList} except in certain rare and specific situations. Unless you have\n   * spent a lot of time benchmarking your specific needs, use one of those instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code LinkedList} {@linkplain LinkedList#LinkedList() constructor} directly, taking\n   * advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.",
  "com.google.common.io.ByteSource$ByteArrayByteSource:read(com.google.common.io.ByteProcessor)" : null,
  "com.google.common.eventbus.EventBus:handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)" : "Handles the given exception thrown by a subscriber with the given context.",
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:cancel(boolean)" : null,
  "com.google.common.collect.SortedLists$KeyPresentBehavior$5:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)" : null,
  "com.google.common.collect.TreeRangeMap$RangeMapEntry:getUpperBound()" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Builder:create(java.lang.Iterable)" : "* Builds a new min-max priority queue using the previously specified options, and having the\n     * given initial elements.",
  "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:next()" : null,
  "com.google.common.collect.LinkedListMultimap:<init>(int)" : null,
  "com.google.common.collect.StandardTable$Column$Values:remove(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardLastEntry()" : "* A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the {@link\n   * #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may wish to\n   * override {@code lastEntry} to forward to this implementation.",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:contains(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$HashIterator:advance()" : null,
  "com.google.common.collect.RegularImmutableSortedSet:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.base.FinalizableReferenceQueue:cleanUp()" : "* Repeatedly dequeues references from the queue and invokes {@link\n   * FinalizableReference#finalizeReferent()} on them until the queue is empty. This method is a\n   * no-op if the background thread was created successfully.",
  "com.google.common.collect.FilteredEntryMultimap$Keys:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.ImmutableCollection:removeIf(java.util.function.Predicate)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.CharMatcher$None:trimTrailingFrom(java.lang.CharSequence)" : null,
  "com.google.common.util.concurrent.ExecutionSequencer:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)" : "* Enqueues a task to run when the previous task (if any) completes.\n   *\n   * <p>Cancellation does not propagate from the output future to a callable that has begun to\n   * execute, but if the output future is cancelled before {@link Callable#call()} is invoked,\n   * {@link Callable#call()} will not be invoked.",
  "com.google.common.escape.ArrayBasedCharEscaper:escape(java.lang.String)" : null,
  "com.google.common.graph.AbstractNetwork:edgesConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.ImmutableMultiset$EntrySet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char,char)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.graph.DirectedGraphConnections:removeSuccessor(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)" : "* @since 13.0",
  "com.google.common.cache.LocalCache:loadAll(java.util.Set,com.google.common.cache.CacheLoader)" : "* Returns the result of calling {@link CacheLoader#loadAll}, or null if {@code loader} doesn't\n   * implement {@code loadAll}.",
  "com.google.common.hash.Hashing$ConcatenatedHashFunction:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap$Builder:put(java.lang.Object,java.lang.Object)" : "* Associates {@code key} with {@code value} in the built map. If the same key is put more than\n     * once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last\n     * value put for that key.",
  "com.google.common.collect.Maps$DescendingMap:floorKey(java.lang.Object)" : null,
  "com.google.common.collect.FilteredKeyMultimap$Entries:remove(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.String)" : "* Enqueues an event to be run on currently known listeners, with a label.\n   *\n   * @param event the callback to execute on {@link #dispatch}\n   * @param label a description of the event to use in the case of an error",
  "com.google.common.collect.Maps$DescendingMap:ceilingEntry(java.lang.Object)" : null,
  "com.google.common.collect.DescendingMultiset:entrySet()" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.graph.StandardMutableGraph:addNode(java.lang.Object)" : null,
  "com.google.common.collect.Iterators:<init>()" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:decodingStream(java.io.Reader)" : null,
  "com.google.common.collect.Count:getAndSet(int)" : null,
  "com.google.common.collect.ForwardingMapEntry:hashCode()" : null,
  "com.google.common.escape.ArrayBasedEscaperMap:getReplacementArray()" : null,
  "com.google.common.collect.DescendingMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate)" : "* Support removal operations when filtering a filtered multimap. Since a filtered multimap has\n   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would\n   * lead to a multimap whose removal operations would fail. This method combines the predicates to\n   * avoid that problem.",
  "com.google.common.hash.Hashing:hmacMd5(byte[])" : "* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the\n   * MD5 (128 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array\n   * and the MD5 algorithm.\n   *\n   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other\n   * future-proof algorithms <a\n   * href=\"https://datatracker.ietf.org/doc/html/rfc6151#section-2.3\">over {@code hmacMd5}</a>.\n   *\n   * @param key the key material of the secret key\n   * @since 20.0",
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:dataLength()" : "Returns the number of {@code long}s in the underlying {@link AtomicLongArray}.",
  "com.google.common.collect.HashBasedTable$Factory:<init>(int)" : null,
  "com.google.common.collect.ImmutableMap:isEmpty()" : null,
  "com.google.common.cache.LocalCache:hash(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:badPositionIndexes(int,int,int)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,int)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.lang.Iterable)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableIntArray} will contain.",
  "com.google.common.collect.ArrayTable$ArrayMap:remove(java.lang.Object)" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:scanResources()" : "Scans this location and returns all scanned resources.",
  "com.google.common.collect.TreeMultiset$AvlNode:getCount()" : null,
  "com.google.common.collect.ImmutableMultiset$Builder:<init>(com.google.common.collect.Multiset)" : null,
  "com.google.common.base.SmallCharMatcher:from(java.util.BitSet,java.lang.String)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeDouble(double)" : null,
  "com.google.common.collect.AbstractTable:containsRow(java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[],byte[],boolean)" : null,
  "com.google.common.collect.ForwardingMap:containsKey(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$WeakValueReference:getEntry()" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:stats()" : null,
  "com.google.common.io.Java8Compatibility:mark(java.nio.Buffer)" : null,
  "com.google.common.collect.MapMakerInternalMap:rehash(int)" : "* Applies a supplemental hash function to a given hash code, which defends against poor quality\n   * hash functions. This is critical when the concurrent hash map uses power-of-two length hash\n   * tables, that otherwise encounter collisions for hash codes that do not differ in lower or upper\n   * bits.\n   *\n   * @param h hash code",
  "com.google.common.reflect.Parameter:<init>(com.google.common.reflect.Invokable,int,com.google.common.reflect.TypeToken,java.lang.annotation.Annotation[],java.lang.Object)" : null,
  "com.google.common.collect.TopKSelector:greatest(int)" : "* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,\n   * relative to the natural ordering of the elements, and returns them via {@link #topK} in\n   * descending order.\n   *\n   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",
  "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator:validateClass(java.lang.Class)" : null,
  "com.google.common.collect.ImmutableSet:toImmutableSet()" : "* Returns a {@code Collector} that accumulates the input elements into a new {@code\n   * ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if\n   * the stream contains duplicates (according to {@link Object#equals(Object)}), only the first\n   * duplicate in encounter order will appear in the result.\n   *\n   * @since 21.0",
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.EnumBiMap:values()" : null,
  "com.google.common.collect.StandardRowSortedTable$RowSortedMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapEntry:equals(java.lang.Object)" : null,
  "com.google.common.collect.Platform:newLinkedHashSetWithExpectedSize(int)" : "* Returns the platform preferred implementation of an insertion ordered set based on a hash\n   * table.",
  "com.google.common.collect.Maps$MapDifferenceImpl:<init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map)" : null,
  "com.google.common.collect.Iterators:concat(java.util.Iterator)" : "* Combines multiple iterators into a single iterator. The returned iterator iterates across the\n   * elements of each iterator in {@code inputs}. The input iterators are not polled until\n   * necessary.\n   *\n   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n   * supports it.\n   *\n   * @throws NullPointerException if any of the provided iterators is null",
  "com.google.common.collect.EmptyContiguousSet:contains(java.lang.Object)" : null,
  "com.google.common.collect.Maps$BiMapConverter:<init>(com.google.common.collect.BiMap)" : null,
  "com.google.common.util.concurrent.AbstractService:terminatedEvent(com.google.common.util.concurrent.Service$State)" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:maxDecodedSize(int)" : null,
  "com.google.common.collect.LinkedHashMultiset:count(java.lang.Object)" : null,
  "com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class)" : null,
  "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:<init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer)" : null,
  "com.google.common.collect.Multimaps:filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate)" : "* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a\n   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect\n   * the other.\n   *\n   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all\n   * other methods are supported by the multimap and its views. When adding a value that doesn't\n   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code\n   * replaceValues()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * multimap or its views, only mappings whose value satisfy the filter will be removed from the\n   * underlying multimap.\n   *\n   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every\n   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n   * copy.\n   *\n   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 11.0",
  "com.google.common.reflect.TypeToken$TypeCollector:classesOnly()" : "For just classes, we don't have to traverse interfaces.",
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.util.concurrent.ThreadFactoryBuilder:setNameFormat(java.lang.String)" : "* Sets the naming format to use when naming threads ({@link Thread#setName}) which are created\n   * with this ThreadFactory.\n   *\n   * @param nameFormat a {@link String#format(String, Object...)}-compatible format String, to which\n   *     a unique integer (0, 1, etc.) will be supplied as the single parameter. This integer will\n   *     be unique to the built instance of the ThreadFactory and will be assigned sequentially. For\n   *     example, {@code \"rpc-pool-%d\"} will generate thread names like {@code \"rpc-pool-0\"}, {@code\n   *     \"rpc-pool-1\"}, {@code \"rpc-pool-2\"}, etc.\n   * @return this for the builder pattern",
  "com.google.common.collect.Maps$EntrySet:size()" : null,
  "com.google.common.math.BigIntegerMath:fitsInLong(java.math.BigInteger)" : null,
  "com.google.common.collect.TreeMultiset:writeObject(java.io.ObjectOutputStream)" : "* @serialData the comparator, the number of distinct elements, the first element, its count, the\n   *     second element, its count, and so on",
  "com.google.common.collect.Synchronized$SynchronizedDeque:offerFirst(java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap$Inverse:forcePut(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollAsMapEntry(java.util.Iterator)" : null,
  "com.google.common.hash.Hashing:goodFastHash(int)" : "* Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm\n   * the returned function implements is unspecified and subject to change without notice.\n   *\n   * <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code\n   * Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current\n   * process in any way, for example being sent over RPC, or saved to disk. For a general-purpose,\n   * non-cryptographic hash function that will never change behavior, we suggest {@link\n   * #murmur3_128}.\n   *\n   * <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value\n   * for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances.\n   *\n   * @param minimumBits a positive integer. This can be arbitrarily large. The returned {@link\n   *     HashFunction} instance may use memory proportional to this integer.\n   * @return a hash function, described above, that produces hash codes of length {@code\n   *     minimumBits} or greater",
  "com.google.common.base.Predicates$OrPredicate:<init>(java.util.List)" : null,
  "com.google.common.collect.Multimaps$AsMap:<init>(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:initTable(java.util.concurrent.atomic.AtomicReferenceArray)" : null,
  "com.google.common.collect.Collections2$PermutationCollection:iterator()" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:<init>(java.util.NavigableMap,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:compute(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.io.CharSequenceReader:read(char[],int,int)" : null,
  "com.google.common.collect.Queues:newSynchronousQueue()" : "Creates an empty {@code SynchronousQueue} with nonfair access policy.",
  "com.google.common.collect.ForwardingCollection:standardIsEmpty()" : "* A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override\n   * {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation.\n   * Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}.\n   *\n   * @since 7.0",
  "com.google.common.collect.AbstractTable$CellSet:spliterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:removeValuesForKey(java.lang.Object)" : "Removes all values for the provided key.",
  "com.google.common.graph.ImmutableNetwork:successors(java.lang.Object)" : null,
  "com.google.common.collect.FilteredKeyListMultimap:unfiltered()" : null,
  "com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[])" : null,
  "com.google.common.collect.Comparators:min(java.lang.Object,java.lang.Object,java.util.Comparator)" : "* Returns the minimum of the two values, according to the given comparator. If the values compare\n   * as equal, the first is returned.\n   *\n   * <p>The recommended solution for finding the {@code minimum} of some values depends on the type\n   * of your data and the number of elements you have. Read more in the Guava User Guide article on\n   * <a href=\"https://github.com/google/guava/wiki/CollectionUtilitiesExplained#comparators\">{@code\n   * Comparators}</a>.\n   *\n   * @param a first value to compare, returned if less than or equal to b\n   * @param b second value to compare.\n   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> using the given\n   *     comparator.\n   * @since 30.0",
  "com.google.common.collect.ForwardingSortedMultiset:standardPollLastEntry()" : "* A sensible definition of {@link #pollLastEntry()} in terms of {@code\n   * descendingMultiset().entrySet().iterator()}.\n   *\n   * <p>If you override {@link #descendingMultiset()} or {@link #entrySet()}, you may wish to\n   * override {@link #pollLastEntry()} to forward to this implementation.",
  "com.google.common.cache.LocalCache$WeakEntry:setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.graph.NetworkBuilder:expectedEdgeCount(int)" : "* Specifies the expected number of edges in the network.\n   *\n   * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative",
  "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:toString()" : null,
  "com.google.common.collect.AbstractRangeSet:equals(java.lang.Object)" : null,
  "com.google.common.net.HostAndPort:<init>(java.lang.String,int,boolean)" : null,
  "com.google.common.cache.LocalCache$NullEntry:setValueReference(com.google.common.cache.LocalCache$ValueReference)" : null,
  "com.google.common.collect.AbstractBiMap:delegate()" : null,
  "com.google.common.collect.MapMakerInternalMap$EntrySet:remove(java.lang.Object)" : null,
  "com.google.common.base.Utf8:isWellFormed(byte[],int,int)" : "* Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by\n   * {@link #isWellFormed(byte[])}. Note that this can be false even when {@code\n   * isWellFormed(bytes)} is true.\n   *\n   * @param bytes the input buffer\n   * @param off the offset in the buffer of the first byte to read\n   * @param len the number of bytes to read from the buffer",
  "com.google.common.collect.Maps$BiMapConverter:equals(java.lang.Object)" : null,
  "com.google.common.reflect.Invokable:toString()" : null,
  "com.google.common.collect.Iterables:skip(java.lang.Iterable,int)" : "* Returns a view of {@code iterable} that skips its first {@code numberToSkip} elements. If\n   * {@code iterable} contains fewer than {@code numberToSkip} elements, the returned iterable skips\n   * all of its elements.\n   *\n   * <p>Modifications to the underlying {@link Iterable} before a call to {@code iterator()} are\n   * reflected in the returned iterator. That is, the iterator skips the first {@code numberToSkip}\n   * elements that exist when the {@code Iterator} is created, not when {@code skip()} is called.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} if the iterator of the underlying\n   * iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by\n   * immediately calling {@code remove()} on that iterator, as the {@code Iterator} contract states\n   * that a call to {@code remove()} before a call to {@code next()} will throw an {@link\n   * IllegalStateException}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip}\n   *\n   * @since 3.0",
  "com.google.common.primitives.ImmutableDoubleArray$Builder:<init>(int)" : null,
  "com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit)" : "* Creates a {@code RateLimiter} with the specified stable throughput, given as \"permits per\n   * second\" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,\n   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum\n   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,\n   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it\n   * will gradually return to its \"cold\" state, i.e. it will go through the same warming up process\n   * as when it was first created.\n   *\n   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually\n   * fulfills the requests (e.g., a remote server) needs \"warmup\" time, rather than being\n   * immediately accessed at the stable (maximum) rate.\n   *\n   * <p>The returned {@code RateLimiter} starts in a \"cold\" state (i.e. the warmup period will\n   * follow), and if it is left unused for long enough, it will return to that state.\n   *\n   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many\n   *     permits become available per second\n   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,\n   *     before reaching its stable (maximum) rate\n   * @param unit the time unit of the warmupPeriod argument\n   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code\n   *     warmupPeriod} is negative",
  "com.google.common.util.concurrent.SmoothRateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)" : null,
  "com.google.common.reflect.Types$JavaVersion:jdkTypeDuplicatesOwnerName()" : null,
  "com.google.common.reflect.TypeParameter:<init>()" : null,
  "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:estimateSize()" : null,
  "com.google.common.collect.Collections2$OrderedPermutationIterator:calculateNextPermutation()" : null,
  "com.google.common.collect.Lists$Partition:isEmpty()" : null,
  "com.google.common.collect.JdkBackedImmutableMultiset:getEntry(int)" : null,
  "com.google.common.base.Splitter:on(java.lang.String)" : "* Returns a splitter that uses the given fixed string as a separator. For example, {@code\n   * Splitter.on(\", \").split(\"foo, bar,baz\")} returns an iterable containing {@code [\"foo\",\n   * \"bar,baz\"]}.\n   *\n   * @param separator the literal, nonempty string to recognize as a separator\n   * @return a splitter, with default settings, that recognizes that separator",
  "com.google.common.collect.Synchronized:typePreservingCollection(java.util.Collection,java.lang.Object)" : null,
  "com.google.common.math.DoubleMath:<init>()" : null,
  "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:toX(double,java.math.RoundingMode)" : null,
  "com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Class)" : "* Copies an iterable's elements into an array.\n   *\n   * @param iterable the iterable to copy\n   * @param type the type of the elements\n   * @return a newly-allocated array into which all the elements of the iterable have been copied",
  "com.google.common.primitives.ImmutableLongArray$AsList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.AbstractSortedSetMultimap:wrapCollection(java.lang.Object,java.util.Collection)" : null,
  "com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Network,java.lang.Iterable)" : "* Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph\n   * that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges}\n   * from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are\n   * both contained by {@code nodes}.\n   *\n   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",
  "com.google.common.cache.LocalCache$KeyIterator:next()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)" : null,
  "com.google.common.collect.Maps:removeOnlySet(java.util.Set)" : null,
  "com.google.common.reflect.TypeToken:getSupertype(java.lang.Class)" : "* Returns the generic form of {@code superclass}. For example, if this is {@code\n   * ArrayList<String>}, {@code Iterable<String>} is returned given the input {@code\n   * Iterable.class}.",
  "com.google.common.collect.RegularImmutableList:<init>(java.lang.Object[])" : null,
  "com.google.common.io.BaseEncoding$Base16Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet)" : null,
  "com.google.common.collect.ForwardingMultimap:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.FuturesGetChecked:newFromConstructor(java.lang.reflect.Constructor,java.lang.Throwable)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollFirst()" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:of()" : null,
  "com.google.common.math.StatsAccumulator:mean()" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of the\n   * values. The count must be non-zero.\n   *\n   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of\n   * the arithmetic mean of the population.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it\n   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the\n   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values\n   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.\n   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link\n   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.util.concurrent.Monitor:remainingNanos(long,long)" : "* Returns the remaining nanos until the given timeout, or 0L if the timeout has already elapsed.\n   * Caller must have previously sanitized timeoutNanos using toSafeNanos.",
  "com.google.common.io.FileBackedOutputStream:flush()" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:add(java.lang.Object,int)" : null,
  "com.google.common.collect.Multimaps:transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function)" : "* Returns a view of a {@code ListMultimap} where each value is transformed by a function. All\n   * other properties of the multimap, such as iteration order, are left intact. For example, the\n   * code:\n   *\n   * {@snippet :\n   * ListMultimap<String, Integer> multimap =\n   *      ImmutableListMultimap.of(\"a\", 4, \"a\", 16, \"b\", 9);\n   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);\n   * ListMultimap<String, Double> transformed = Multimaps.transformValues(map,\n   *     sqrt);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {a=[2.0, 4.0], b=[3.0]}}.\n   *\n   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view\n   * supports removal operations, and these are reflected in the underlying multimap.\n   *\n   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values\n   * provided that the function is capable of accepting null input. The transformed multimap might\n   * contain null values, if the function sometimes gives a null result.\n   *\n   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap\n   * is.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned\n   * multimap to be a view, but it means that the function will be applied many times for bulk\n   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to\n   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned\n   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your\n   * choosing.\n   *\n   * @since 7.0",
  "com.google.common.collect.ImmutableList:of(java.lang.Object)" : "* Returns an immutable list containing a single element. This list behaves and performs\n   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is\n   * preferable mainly for consistency and maintainability of your code.\n   *\n   * @throws NullPointerException if the element is null",
  "com.google.common.util.concurrent.AbstractScheduledService:executor()" : "* Returns the {@link ScheduledExecutorService} that will be used to execute the {@link #startUp},\n   * {@link #runOneIteration} and {@link #shutDown} methods. If this method is overridden the\n   * executor will not be {@linkplain ScheduledExecutorService#shutdown shutdown} when this service\n   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED\n   * fails}. Subclasses may override this method to supply a custom {@link ScheduledExecutorService}\n   * instance. This method is guaranteed to only be called once.\n   *\n   * <p>By default this returns a new {@link ScheduledExecutorService} with a single thread pool\n   * that sets the name of the thread to the {@linkplain #serviceName() service name}. Also, the\n   * pool will be {@linkplain ScheduledExecutorService#shutdown() shut down} when the service\n   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED\n   * fails}.",
  "com.google.common.reflect.Types:toArray(java.util.Collection)" : null,
  "com.google.common.util.concurrent.FluentFuture:transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)" : "* Returns a new {@code Future} whose result is asynchronously derived from the result of this\n   * {@code Future}. If the input {@code Future} fails, the returned {@code Future} fails with the\n   * same exception (and the function is not invoked).\n   *\n   * <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced\n   * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.\n   * Example usage:\n   *\n   * {@snippet :\n   * FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query));\n   * ListenableFuture<QueryResult> queryFuture =\n   *     rowKeyFuture.transformAsync(dataService::readFuture, executor);\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,\n   * {@code directExecutor} functions should avoid heavyweight operations inside {@code\n   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n   * completing the returned {@code Future}.)\n   *\n   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the\n   * input future and that of the future returned by the chain function. That is, if the returned\n   * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the\n   * other two is cancelled, the returned {@code Future} will receive a callback in which it will\n   * attempt to cancel itself.\n   *\n   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenCompose} and\n   * {@link java.util.concurrent.CompletableFuture#thenComposeAsync}. It can also serve some of the\n   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link\n   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.\n   *\n   * @param function A function to transform the result of this future to the result of the output\n   *     future\n   * @param executor Executor to run the function in.\n   * @return A future that holds result of the function (if the input succeeded) or the original\n   *     input's failure (if not)",
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided",
  "com.google.common.collect.ContiguousSet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:firstEntry()" : null,
  "com.google.common.graph.EndpointPairIterator:of(com.google.common.graph.BaseGraph)" : null,
  "com.google.common.collect.Maps$NavigableKeySet:descendingIterator()" : null,
  "com.google.common.net.InternetDomainName:matchesType(com.google.common.base.Optional,com.google.common.base.Optional)" : "* If a {@code desiredType} is specified, returns true only if the {@code actualType} is\n   * identical. Otherwise, returns true as long as {@code actualType} is present.",
  "com.google.common.collect.ForwardingMap:standardClear()" : "* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link\n   * #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.graph.Graphs$TransposedGraph:outDegree(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getHash()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Maps$DescendingMap:pollFirstEntry()" : null,
  "com.google.common.collect.CompactLinkedHashMap:requireLinks()" : null,
  "com.google.common.collect.EnumBiMap:inferKeyTypeOrObjectUnderJ2cl(java.util.Map)" : null,
  "com.google.common.graph.UndirectedGraphConnections:value(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableEnumMap:get(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:next()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object)" : null,
  "com.google.common.net.InetAddresses:isCompatIPv4Address(java.net.Inet6Address)" : "* Evaluates whether the argument is an IPv6 \"compat\" address.\n   *\n   * <p>An \"IPv4 compatible\", or \"compat\", address is one with 96 leading bits of zero, with the\n   * remaining 32 bits interpreted as an IPv4 address. These are conventionally represented in\n   * string literals as {@code \"::192.168.0.1\"}, though {@code \"::c0a8:1\"} is also considered an\n   * IPv4 compatible address (and equivalent to {@code \"::192.168.0.1\"}).\n   *\n   * <p>For more on IPv4 compatible addresses see section 2.5.5.1 of <a target=\"_parent\"\n   * href=\"http://tools.ietf.org/html/rfc4291#section-2.5.5.1\">RFC 4291</a>.\n   *\n   * <p>NOTE: This method is different from {@link Inet6Address#isIPv4CompatibleAddress} in that it\n   * more correctly classifies {@code \"::\"} and {@code \"::1\"} as proper IPv6 addresses (which they\n   * are), NOT IPv4 compatible addresses (which they are generally NOT considered to be).\n   *\n   * @param ip {@link Inet6Address} to be examined for embedded IPv4 compatible address format\n   * @return {@code true} if the argument is a valid \"compat\" address",
  "com.google.common.collect.TreeMultimap:keyComparator()" : "* Returns the comparator that orders the multimap keys.\n   *\n   * @deprecated Use {@code ((NavigableSet<K>) multimap.keySet()).comparator()} instead.",
  "com.google.common.collect.FilteredMultimapValues:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.Collections2$OrderedPermutationCollection:contains(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableIntArray:get(int)" : "* Returns the {@code int} value present at the given index.\n   *\n   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to\n   *     {@link #length}",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createKeySet()" : null,
  "com.google.common.collect.AbstractListMultimap:<init>(java.util.Map)" : "* Creates a new multimap that uses the provided map.\n   *\n   * @param map place to store the mapping from each key to its corresponding values",
  "com.google.common.graph.AbstractNetwork:equals(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$Keys:elementSet()" : null,
  "com.google.common.util.concurrent.AtomicLongMap:create(java.util.Map)" : "Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.FluentFuture$TrustedFuture:get(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.base.Converter$ConverterComposition:equals(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$AsMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.Maps$AsMapView:backingSet()" : null,
  "com.google.common.io.InsecureRecursiveDeleteException:<init>(java.lang.String)" : null,
  "com.google.common.escape.UnicodeEscaper:codePointAt(java.lang.CharSequence,int,int)" : "* Returns the Unicode code point of the character at the given index.\n   *\n   * <p>Unlike {@link Character#codePointAt(CharSequence, int)} or {@link String#codePointAt(int)}\n   * this method will never fail silently when encountering an invalid surrogate pair.\n   *\n   * <p>The behaviour of this method is as follows:\n   *\n   * <ol>\n   *   <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.\n   *   <li><b>If the character at the specified index is not a surrogate, it is returned.</b>\n   *   <li>If the first character was a high surrogate value, then an attempt is made to read the\n   *       next character.\n   *       <ol>\n   *         <li><b>If the end of the sequence was reached, the negated value of the trailing high\n   *             surrogate is returned.</b>\n   *         <li><b>If the next character was a valid low surrogate, the code point value of the\n   *             high/low surrogate pair is returned.</b>\n   *         <li>If the next character was not a low surrogate value, then {@link\n   *             IllegalArgumentException} is thrown.\n   *       </ol>\n   *   <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is\n   *       thrown.\n   * </ol>\n   *\n   * @param seq the sequence of characters from which to decode the code point\n   * @param index the index of the first character to decode\n   * @param end the index beyond the last valid character to decode\n   * @return the Unicode code point for the given index or the negated value of the trailing high\n   *     surrogate character at the end of the sequence",
  "com.google.common.collect.DiscreteDomain:offset(java.lang.Comparable,long)" : "* Returns, conceptually, \"origin + distance\", or equivalently, the result of calling {@link\n   * #next} on {@code origin} {@code distance} times.",
  "com.google.common.io.LittleEndianDataInputStream:readUnsignedByte()" : null,
  "com.google.common.collect.RegularContiguousSet:descendingIterator()" : null,
  "com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)" : "* Combines four iterables into a single iterable. The returned iterable has an iterator that\n   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the\n   * elements in {@code c}, followed by the elements in {@code d}. The source iterators are not\n   * polled until necessary.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input\n   * iterator supports it.\n   *\n   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code\n   * Streams.concat(a, b, c, d)}.",
  "com.google.common.collect.Ordering:<init>()" : "* Constructs a new instance of this class (only invokable by the subclass constructor, typically\n   * implicit).",
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingKey(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollLast()" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:size()" : null,
  "com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[],int)" : "* Views the array as an immutable list. Copies if the specified range does not cover the complete\n   * array. Does not check for nulls.",
  "com.google.common.collect.ForwardingList:standardSubList(int,int)" : "* A sensible default implementation of {@link #subList(int, int)}. If you override any other\n   * methods, you may wish to override {@link #subList(int, int)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ForwardingNavigableMap:tailMap(java.lang.Object,boolean)" : null,
  "com.google.common.util.concurrent.Striped:lazyWeakLock(int)" : "* Creates a {@code Striped<Lock>} with lazily initialized, weakly referenced locks. Every lock is\n   * reentrant.\n   *\n   * @param stripes the minimum number of stripes (locks) required\n   * @return a new {@code Striped<Lock>}",
  "com.google.common.collect.LinkedListMultimap:createEntries()" : null,
  "com.google.common.collect.Multimaps$CustomListMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.math.BigIntegerMath:listProduct(java.util.List,int,int)" : null,
  "com.google.common.collect.Platform:<init>()" : null,
  "com.google.common.util.concurrent.ForwardingCondition:signalAll()" : null,
  "com.google.common.primitives.Ints:indexOf(int[],int[])" : "* Returns the start position of the first occurrence of the specified {@code target} within\n   * {@code array}, or {@code -1} if there is no such occurrence.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n   * i, i + target.length)} contains exactly the same elements as {@code target}.\n   *\n   * @param array the array to search for the sequence {@code target}\n   * @param target the array to search for as a sub-sequence of {@code array}",
  "com.google.common.graph.AbstractNetwork:isOrderingCompatible(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.Serialization:populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)" : "* Populates a multimap by reading an input stream, as part of deserialization. See {@link\n   * #writeMultimap} for the data format.",
  "com.google.common.collect.ConsumingQueueIterator:computeNext()" : null,
  "com.google.common.base.CharMatcher:trimLeadingFrom(java.lang.CharSequence)" : "* Returns a substring of the input character sequence that omits all matching BMP characters from\n   * the beginning of the string. For example:\n   *\n   * {@snippet :\n   * CharMatcher.anyOf(\"ab\").trimLeadingFrom(\"abacatbab\")\n   * }\n   *\n   * ... returns {@code \"catbab\"}.",
  "com.google.common.graph.ElementOrder:insertion()" : "Returns an instance which specifies that insertion ordering is guaranteed.",
  "com.google.common.graph.ImmutableGraph:inDegree(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap:needsAllocArrays()" : "Returns whether arrays need to be allocated.",
  "com.google.common.collect.FluentIterable:filter(java.lang.Class)" : "* Returns the elements from this fluent iterable that are instances of class {@code type}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.\n   * This does perform a little more work than necessary, so another option is to insert an\n   * unchecked cast at some later point:\n   *\n   * {@snippet :\n   * @SuppressWarnings(\"unchecked\") // safe because of ::isInstance check\n   * ImmutableList<NewType> result =\n   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());\n   * }",
  "com.google.common.base.Strings:padStart(java.lang.String,int,char)" : "* Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended\n   * with as many copies of {@code padChar} as are necessary to reach that length. For example,\n   *\n   * <ul>\n   *   <li>{@code padStart(\"7\", 3, '0')} returns {@code \"007\"}\n   *   <li>{@code padStart(\"2010\", 3, '0')} returns {@code \"2010\"}\n   * </ul>\n   *\n   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.\n   *\n   * @param string the string which should appear at the end of the result\n   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in\n   *     which case the input string is always returned.\n   * @param padChar the character to insert at the beginning of the result until the minimum length\n   *     is reached\n   * @return the padded string",
  "com.google.common.util.concurrent.FuturesGetChecked:newWithCause(java.lang.Class,java.lang.Throwable)" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken)" : null,
  "com.google.common.collect.FluentIterable:cycle()" : "* Returns a fluent iterable whose {@code Iterator} cycles indefinitely over the elements of this\n   * fluent iterable.\n   *\n   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code\n   * remove()} is called, subsequent cycles omit the removed element, which is no longer in this\n   * fluent iterable. The iterator's {@code hasNext()} method returns {@code true} until this fluent\n   * iterable is empty.\n   *\n   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\n   * should use an explicit {@code break} or be certain that you will eventually remove all the\n   * elements.\n   *\n   * <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code\n   * e}, use {@code Stream.generate(() -> e)}. Otherwise, collect your stream into a collection and\n   * use {@code Stream.generate(() -> collection).flatMap(Collection::stream)}.",
  "com.google.common.util.concurrent.ExecutionSequencer:<init>()" : null,
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:putData(int,long)" : "* ORs the bits encoded in the {@code i}th {@code long} in the underlying {@link\n     * AtomicLongArray} with the given value.",
  "com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethodsNotCached(java.lang.Class)" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner5:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)" : null,
  "com.google.common.collect.ListMultimap:removeAll(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,\n   * this method returns a {@link List}, instead of the {@link java.util.Collection} specified in\n   * the {@link Multimap} interface.",
  "com.google.common.collect.AbstractMapBasedMultiset:elementIterator()" : null,
  "com.google.common.collect.RegularImmutableMap:fromEntryArrayCheckingBucketOverflow(int,java.util.Map$Entry[],boolean)" : null,
  "com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int)" : null,
  "com.google.common.util.concurrent.AbstractFuture:get(long,java.util.concurrent.TimeUnit)" : "* {@inheritDoc}\n   *\n   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the\n   * current thread is interrupted during the call, even if the value is already available.\n   *\n   * @throws CancellationException {@inheritDoc}",
  "com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry)" : "Makes an entry usable internally by a new ImmutableMap.",
  "com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)" : "* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the\n   * lock, but does not wait for the guard to be satisfied.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",
  "com.google.common.collect.DiscreteDomain$LongDomain:maxValue()" : null,
  "com.google.common.collect.ImmutableList$Builder:add(java.lang.Object)" : "* Adds {@code element} to the {@code ImmutableList}.\n     *\n     * @param element the element to add\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code element} is null",
  "com.google.common.collect.Maps$DescendingMap:lowerKey(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:maybeDrainReferenceQueues()" : "Drains the reference queues used by this segment, if any.",
  "com.google.common.collect.Multimaps:unmodifiableValueCollection(java.util.Collection)" : "* Returns an unmodifiable view of the specified collection, preserving the interface for\n   * instances of {@code SortedSet}, {@code Set}, {@code List} and {@code Collection}, in that order\n   * of preference.\n   *\n   * @param collection the collection for which to return an unmodifiable view\n   * @return an unmodifiable view of the collection",
  "com.google.common.io.Files:mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long)" : null,
  "com.google.common.util.concurrent.FluentFuture$TrustedFuture:get()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch,long,java.util.concurrent.TimeUnit)" : "* Invokes {@code latch.}{@link CountDownLatch#await(long, TimeUnit) await(timeout, unit)}\n   * uninterruptibly.",
  "com.google.common.graph.MultiEdgesConnecting:contains(java.lang.Object)" : null,
  "com.google.common.collect.Sets$SetView:removeAll(java.util.Collection)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n     *\n     * @throws UnsupportedOperationException always\n     * @deprecated Unsupported operation.",
  "com.google.common.collect.TreeRangeMap$RangeMapEntry:contains(java.lang.Comparable)" : null,
  "com.google.common.collect.IndexedImmutableSet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Network)" : "* Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty\n   * subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)\n   * starting and ending with the same node.\n   *\n   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",
  "com.google.common.collect.ImmutableMultimap:keySet()" : "* Returns an immutable set of the distinct keys in this multimap, in the same order as they\n   * appear in this multimap.",
  "com.google.common.math.BigIntegerMath:divide(java.math.BigInteger,java.math.BigInteger,java.math.RoundingMode)" : "* Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code\n   * RoundingMode}.\n   *\n   * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}\n   *     is not an integer multiple of {@code b}",
  "com.google.common.reflect.ImmutableTypeToInstanceMap:of()" : "Returns an empty type to instance map.",
  "com.google.common.primitives.Booleans:rotate(boolean[],int,int,int)" : "* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code\n   * toIndex} exclusive. This is equivalent to {@code\n   * Collections.rotate(Booleans.asList(array).subList(fromIndex, toIndex), distance)}, but is\n   * somewhat faster.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 32.0.0",
  "com.google.common.reflect.TypeResolver$WildcardCapturer:<init>()" : null,
  "com.google.common.collect.Collections2$FilteredCollection:toArray()" : null,
  "com.google.common.cache.RemovalListeners:<init>()" : null,
  "com.google.common.collect.ImmutableSortedMap:reverseOrder()" : "* Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of\n   * their natural ordering.",
  "com.google.common.collect.AbstractMapBasedMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.graph.ImmutableGraph:nodeOrder()" : null,
  "com.google.common.escape.Escapers$Builder:setSafeRange(char,char)" : "* Sets the safe range of characters for the escaper. Characters in this range that have no\n     * explicit replacement are considered 'safe' and remain unescaped in the output. If {@code\n     * safeMax < safeMin} then the safe range is empty.\n     *\n     * @param safeMin the lowest 'safe' character\n     * @param safeMax the highest 'safe' character\n     * @return the builder instance",
  "com.google.common.reflect.Types$ClassOwnership:detectJvmBehavior()" : null,
  "com.google.common.collect.StandardTable:getOrCreate(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:firstKey()" : null,
  "com.google.common.collect.Lists$OnePlusArrayList:<init>(java.lang.Object,java.lang.Object[])" : null,
  "com.google.common.util.concurrent.UncheckedTimeoutException:<init>(java.lang.String)" : null,
  "com.google.common.collect.StandardTable$Column:remove(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added\n   * @since 31.0",
  "com.google.common.collect.Maps$SortedAsMapView:comparator()" : null,
  "com.google.common.collect.Iterators:mergeSorted(java.lang.Iterable,java.util.Comparator)" : "* Returns an iterator over the merged contents of all given {@code iterators}, traversing every\n   * element of the input iterators. Equivalent entries will not be de-duplicated.\n   *\n   * <p>Callers must ensure that the source {@code iterators} are in non-descending order as this\n   * method does not sort its input.\n   *\n   * <p>For any equivalent elements across all {@code iterators}, it is undefined which element is\n   * returned first.\n   *\n   * @since 11.0",
  "com.google.common.primitives.Chars$CharArrayAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.primitives.Longs:hashCode(long)" : "* Returns a hash code for {@code value}; obsolete alternative to {@link Long#hashCode(long)}.\n   *\n   * @param value a primitive {@code long} value\n   * @return a hash code for the value",
  "com.google.common.primitives.ImmutableDoubleArray:of(double)" : "Returns an immutable array containing a single value.",
  "com.google.common.collect.ByFunctionOrdering:<init>(com.google.common.base.Function,com.google.common.collect.Ordering)" : null,
  "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:toPendingString()" : null,
  "com.google.common.util.concurrent.AbstractFuture:getUninterruptibly(java.util.concurrent.Future)" : "* An inlined private copy of {@link Uninterruptibles#getUninterruptibly} used to break an\n   * internal dependency on other /util/concurrent classes.",
  "com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)" : "* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a\n   * thread currently occupying this monitor.\n   *\n   * @return whether the guard is now satisfied",
  "com.google.common.collect.TreeRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$IsEither:<init>(char,char)" : null,
  "com.google.common.primitives.Ints$IntArrayAsList:toIntArray()" : null,
  "com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence)" : "* Returns the index of the first matching BMP character in a character sequence, or {@code -1} if\n   * no matching character is present.\n   *\n   * <p>The default implementation iterates over the sequence in forward order calling {@link\n   * #matches} for each character.\n   *\n   * @param sequence the character sequence to examine from the beginning\n   * @return an index, or {@code -1} if no character matches",
  "com.google.common.collect.TreeRangeSet:subRangeSet(com.google.common.collect.Range)" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ExecutionError:<init>(java.lang.Error)" : "* Creates a new instance with {@code null} as its detail message and the given cause. Prefer to\n   * provide a non-nullable {@code cause}, as many users expect to find one.",
  "com.google.common.util.concurrent.Futures$InCompletionOrderState:recordCompletion()" : null,
  "com.google.common.base.CharMatcher$InRange:toString()" : null,
  "com.google.common.collect.CompactLinkedHashMap:<init>()" : null,
  "com.google.common.collect.JdkBackedImmutableMap:isPartialView()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:values()" : "* {@inheritDoc}\n   *\n   * <p>The iterator generated by the returned collection traverses the values for one key, followed\n   * by the values of a second key, and so on.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : null,
  "com.google.common.io.CountingOutputStream:write(byte[],int,int)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:isEvenLevel(int)" : null,
  "com.google.common.base.Functions$FunctionForMapNoDefault:<init>(java.util.Map)" : null,
  "com.google.common.hash.AbstractStreamingHasher:putChar(char)" : null,
  "com.google.common.collect.EmptyContiguousSet$SerializedForm:readResolve()" : null,
  "com.google.common.collect.Sets$FilteredNavigableSet:descendingIterator()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:<init>(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingCollection:iterator()" : null,
  "com.google.common.collect.EnumMultiset:distinctElements()" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:clear()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @param errorMessageTemplate a template for the exception message should the check fail. The\n   *     message is formed by replacing each {@code %s} placeholder in the template with an\n   *     argument. These are matched by position - the first {@code %s} gets {@code\n   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n   *     square braces. Unmatched placeholders will be left as-is.\n   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments\n   *     are converted to strings using {@link String#valueOf(Object)}.\n   * @throws IllegalArgumentException if {@code expression} is false",
  "com.google.common.collect.Collections2$FilteredCollection:addAll(java.util.Collection)" : null,
  "com.google.common.base.Ticker:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.primitives.UnsignedBytes:sort(byte[])" : "* Sorts the array, treating its elements as unsigned bytes.\n   *\n   * @since 23.1",
  "com.google.common.collect.Cut:equals(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:get(int)" : null,
  "com.google.common.graph.UndirectedGraphConnections:successors()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:navigableKeySet()" : null,
  "com.google.common.collect.CompactHashMap:entrySet()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeMap:subRangeMap(com.google.common.collect.Range)" : null,
  "com.google.common.primitives.UnsignedInts:sort(int[],int,int)" : "* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its\n   * elements as unsigned 32-bit integers.\n   *\n   * @since 23.1",
  "com.google.common.graph.ForwardingGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.reflect.TypeToken$InterfaceSet:delegate()" : null,
  "com.google.common.primitives.ImmutableLongArray:copyOf(java.util.Collection)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.Sets$CartesianSet:contains(java.lang.Object)" : null,
  "com.google.common.base.Absent:orNull()" : null,
  "com.google.common.base.Predicates:and(java.lang.Iterable)" : "* Returns a predicate that evaluates to {@code true} if each of its components evaluates to\n   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n   * as soon as a false predicate is found. It defensively copies the iterable passed in, so future\n   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the\n   * returned predicate will always evaluate to {@code true}.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code first.and(second).and(third).and(...)}.",
  "com.google.common.collect.ImmutableMultiset:hashCode()" : null,
  "com.google.common.collect.CompactLinkedHashMap:adjustAfterRemove(int,int)" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask:<init>(java.util.concurrent.Callable)" : null,
  "com.google.common.collect.Queues:<init>()" : null,
  "com.google.common.collect.ImmutableMap$SerializedForm:makeBuilder(int)" : "* Returns a builder that builds the unserialized type. Subclasses should override this method.",
  "com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys\n   * and values are the result of applying the provided mapping functions to the input elements. The\n   * resulting implementation is specialized for enum key types. The returned map and its views will\n   * iterate over keys in their enum definition order, not encounter order.\n   *\n   * <p>If the mapped keys contain duplicates, an {@code IllegalArgumentException} is thrown when\n   * the collection operation is performed. (This differs from the {@code Collector} returned by\n   * {@link java.util.stream.Collectors#toMap(java.util.function.Function,\n   * java.util.function.Function) Collectors.toMap(Function, Function)}, which throws an {@code\n   * IllegalStateException}.)\n   *\n   * @since 21.0",
  "com.google.common.collect.ImmutableCollection:removeAll(java.util.Collection)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.cache.CacheStats:averageLoadPenalty()" : "* Returns the average time spent loading new values. This is defined as {@code totalLoadTime /\n   * (loadSuccessCount + loadExceptionCount)}.\n   *\n   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is\n   * guaranteed not to throw an exception). If you require specific handling, we recommend\n   * implementing your own stats collector.",
  "com.google.common.collect.RegularContiguousSet:createAsList()" : null,
  "com.google.common.collect.ForwardingList:addAll(int,java.util.Collection)" : null,
  "com.google.common.reflect.TypeToken:toGenericType(java.lang.Class)" : "* Returns the type token representing the generic type declaration of {@code cls}. For example:\n   * {@code TypeToken.getGenericType(Iterable.class)} returns {@code Iterable<T>}.\n   *\n   * <p>If {@code cls} isn't parameterized and isn't a generic array, the type token of the class is\n   * returned.",
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:delegate()" : null,
  "com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable:run()" : null,
  "com.google.common.collect.Maps$UnmodifiableEntrySet:<init>(java.util.Set)" : null,
  "com.google.common.reflect.TypeToken:resolveTypeArgsForSubclass(java.lang.Class)" : null,
  "com.google.common.graph.EndpointPair:unordered(java.lang.Object,java.lang.Object)" : "Returns an {@link EndpointPair} representing the endpoints of an undirected edge.",
  "com.google.common.collect.ImmutableMultiset:copyFromEntries(java.util.Collection)" : null,
  "com.google.common.base.Functions$SupplierFunction:toString()" : null,
  "com.google.common.collect.AbstractNavigableMap:firstKey()" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken)" : null,
  "com.google.common.math.Stats:hashCode()" : "* {@inheritDoc}\n   *\n   * <p><b>Note:</b> This hash code is consistent with exact equality of the calculated statistics,\n   * including the floating point values. See the note on {@link #equals} for details.",
  "com.google.common.collect.RegularContiguousSet:size()" : null,
  "com.google.common.math.LongMath:sqrt(long,java.math.RoundingMode)" : "* Returns the square root of {@code x}, rounded with the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x < 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code\n   *     sqrt(x)} is not an integer",
  "com.google.common.collect.CompactHashSet:allocArrays()" : "Handle lazy allocation of arrays.",
  "com.google.common.collect.ImmutableRangeMap$Builder:put(com.google.common.collect.Range,java.lang.Object)" : "* Associates the specified range with the specified value.\n     *\n     * @throws IllegalArgumentException if {@code range} is empty",
  "com.google.common.collect.AbstractNavigableMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.cache.RemovalCause$1:wasEvicted()" : "* Returns {@code true} if there was an automatic removal due to eviction (the cause is neither\n   * {@link #EXPLICIT} nor {@link #REPLACED}).",
  "com.google.common.collect.MapMakerInternalMap$Segment:drainKeyReferenceQueue(java.lang.ref.ReferenceQueue)" : null,
  "com.google.common.io.ByteSink:writeFrom(java.io.InputStream)" : "* Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code\n   * input}.\n   *\n   * @return the number of bytes written\n   * @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink",
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)" : null,
  "com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Object[])" : "* Appends the string representation of each of {@code parts}, using the previously configured\n   * separator between each, to {@code appendable}.",
  "com.google.common.collect.Tables$TransposeTable:rowKeySet()" : null,
  "com.google.common.collect.Multisets:equalsImpl(com.google.common.collect.Multiset,java.lang.Object)" : "An implementation of {@link Multiset#equals}.",
  "com.google.common.collect.ImmutableRangeMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueSet:getPredecessorInValueSet()" : null,
  "com.google.common.util.concurrent.ListenableFutureTask:addListener(java.lang.Runnable,java.util.concurrent.Executor)" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorKey(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableMap$Values:isPartialView()" : null,
  "com.google.common.base.Stopwatch:chooseUnit(long)" : null,
  "com.google.common.collect.ImmutableMap:keyIterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:createEntrySet()" : null,
  "com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.Floats:indexOf(float[],float,int,int)" : null,
  "com.google.common.collect.ImmutableMultiset:setCount(java.lang.Object,int,int)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Synchronized$SynchronizedCollection:retainAll(java.util.Collection)" : null,
  "com.google.common.graph.StandardNetwork:predecessors(java.lang.Object)" : null,
  "com.google.common.io.Closeables:closeQuietly(java.io.Reader)" : "* Closes the given {@link Reader}, logging any {@code IOException} that's thrown rather than\n   * propagating it.\n   *\n   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an\n   * I/O resource, it should generally be safe in the case of a resource that's being used only for\n   * reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that a\n   * failure that occurs when closing the reader indicates a meaningful problem such as a failure to\n   * flush all bytes to the underlying resource.\n   *\n   * @param reader the reader to be closed, or {@code null} in which case this method does nothing\n   * @since 17.0",
  "com.google.common.base.JdkPattern:pattern()" : null,
  "com.google.common.base.PairwiseEquivalence:doEquivalent(java.lang.Iterable,java.lang.Iterable)" : null,
  "com.google.common.collect.RegularImmutableMap:get(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Segment:removeCollectedEntry(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.util.concurrent.ServiceManager$Listener:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.graph.EndpointPairIterator$Undirected:<init>(com.google.common.graph.BaseGraph)" : null,
  "com.google.common.util.concurrent.Monitor:signalAllWaiters()" : "Signals all threads waiting on guards.",
  "com.google.common.collect.ObjectArrays:checkElementsNotNull(java.lang.Object[],int)" : null,
  "com.google.common.io.MultiInputStream:<init>(java.util.Iterator)" : "* Creates a new instance.\n   *\n   * @param it an iterator of I/O suppliers that will provide each substream",
  "com.google.common.collect.Synchronized$SynchronizedCollection:remove(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Ascii:<init>()" : null,
  "com.google.common.cache.LocalCache$WeakEntry:getWriteTime()" : null,
  "com.google.common.graph.GraphBuilder:copy()" : null,
  "com.google.common.base.CaseFormat:to(com.google.common.base.CaseFormat,java.lang.String)" : "* Converts the specified {@code String str} from this format to the specified {@code format}. A\n   * \"best effort\" approach is taken; if {@code str} does not conform to the assumed format, then\n   * the behavior of this method is undefined but we make a reasonable effort at converting anyway.",
  "com.google.common.collect.ImmutableList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.Sets$DescendingSet:toArray(java.lang.Object[])" : null,
  "com.google.common.util.concurrent.AtomicDouble:accumulateAndGet(double,java.util.function.DoubleBinaryOperator)" : "* Atomically updates the current value with the results of applying the given function to the\n   * current and given values.\n   *\n   * @param x the update value\n   * @param accumulatorFunction the accumulator function\n   * @return the updated value\n   * @since 31.1",
  "com.google.common.primitives.Shorts:fromBytes(byte,byte)" : "* Returns the {@code short} value whose byte representation is the given 2 bytes, in big-endian\n   * order; equivalent to {@code Shorts.fromByteArray(new byte[] {b1, b2})}.\n   *\n   * @since 7.0",
  "com.google.common.collect.RegularImmutableMultiset:count(java.lang.Object)" : null,
  "com.google.common.io.CharSource:lengthIfKnown()" : "* Returns the size of this source in chars, if the size can be easily determined without actually\n   * opening the data stream.\n   *\n   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code\n   * CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i>\n   * that this method will return a different number of chars than would be returned by reading all\n   * of the chars.\n   *\n   * <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read may\n   * return a different number of chars if the contents are changed.\n   *\n   * @since 19.0",
  "com.google.common.collect.ImmutableTable$Builder:combine(com.google.common.collect.ImmutableTable$Builder)" : null,
  "com.google.common.util.concurrent.AbstractFuture:afterDone()" : "* Callback method that is called exactly once after the future is completed.\n   *\n   * <p>If {@link #interruptTask} is also run during completion, {@link #afterDone} runs after it.\n   *\n   * <p>The default implementation of this method in {@code AbstractFuture} does nothing. This is\n   * intended for very lightweight cleanup work, for example, timing statistics or clearing fields.\n   * If your task does anything heavier consider, just using a listener with an executor.\n   *\n   * @since 20.0",
  "com.google.common.collect.ForwardingNavigableMap:ceilingEntry(java.lang.Object)" : null,
  "com.google.common.reflect.ClassPath$ResourceInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)" : null,
  "com.google.common.collect.StandardTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putString(java.lang.CharSequence,java.nio.charset.Charset)" : null,
  "com.google.common.collect.ArrayTable$ArrayMap:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:backingMap()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:firstEntry()" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:clear()" : null,
  "com.google.common.collect.Maps$MapDifferenceImpl:hashCode()" : null,
  "com.google.common.collect.Multisets:containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "* Returns {@code true} if {@code subMultiset.count(o) <= superMultiset.count(o)} for all {@code\n   * o}.\n   *\n   * @since 10.0",
  "com.google.common.escape.Escapers:stringOrNull(char[])" : null,
  "com.google.common.graph.StandardValueGraph:edgeValueOrDefaultInternal(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.FilteredEntryMultimap$AsMap:get(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset$Aggregate$1:nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:getIfPresent(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Striped:custom(int,com.google.common.base.Supplier)" : "* Creates a {@code Striped<L>} with eagerly initialized, strongly referenced locks. Every lock is\n   * obtained from the passed supplier.\n   *\n   * @param stripes the minimum number of stripes (locks) required\n   * @param supplier a {@code Supplier<L>} object to obtain locks from\n   * @return a new {@code Striped<L>}",
  "com.google.common.collect.MapMakerInternalMap:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntryMap$KeySet:retainAll(java.util.Collection)" : null,
  "com.google.common.graph.AbstractBaseGraph:incidentEdges(java.lang.Object)" : null,
  "com.google.common.collect.Maps$AsMapView:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingImmutableSet:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:keyStrength()" : null,
  "com.google.common.collect.Ordering$ArbitraryOrdering:getUid(java.lang.Object)" : null,
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(float,float)" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:execute(java.lang.Runnable)" : null,
  "com.google.common.base.Converter$FunctionBasedConverter:equals(java.lang.Object)" : null,
  "com.google.common.base.Splitter:on(com.google.common.base.CharMatcher)" : "* Returns a splitter that considers any single character matched by the given {@code CharMatcher}\n   * to be a separator. For example, {@code\n   * Splitter.on(CharMatcher.anyOf(\";,\")).split(\"foo,;bar,quux\")} returns an iterable containing\n   * {@code [\"foo\", \"\", \"bar\", \"quux\"]}.\n   *\n   * @param separatorMatcher a {@link CharMatcher} that determines whether a character is a\n   *     separator\n   * @return a splitter, with default settings, that uses this matcher",
  "com.google.common.graph.StandardMutableGraph:removeEdge(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMultiset$ElementSet:multiset()" : null,
  "com.google.common.util.concurrent.Callables:threadRenaming(java.lang.Runnable,com.google.common.base.Supplier)" : "* Wraps the given runnable such that for the duration of {@link Runnable#run} the thread that is\n   * running with have the given name.\n   *\n   * @param task The Runnable to wrap\n   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once\n   *     for each invocation of the wrapped callable.",
  "com.google.common.collect.ForwardingMultiset:entrySet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:contains(java.lang.Object)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readUnsignedShort()" : null,
  "com.google.common.collect.ForwardingNavigableSet:standardFloor(java.lang.Object)" : "* A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of\n   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may\n   * wish to override {@link #floor} to forward to this implementation.",
  "com.google.common.util.concurrent.Monitor:hasQueuedThreads()" : "* Returns whether any threads are waiting to enter this monitor. Note that because cancellations\n   * may occur at any time, a {@code true} return does not guarantee that any other thread will ever\n   * enter this monitor. This method is designed primarily for use in monitoring of the system\n   * state.",
  "com.google.common.util.concurrent.InterruptibleTask:waitForInterrupt(java.lang.Thread)" : null,
  "com.google.common.base.CharMatcher$NegatedFastMatcher:precomputed()" : null,
  "com.google.common.util.concurrent.AbstractIdleService:state()" : null,
  "com.google.common.graph.EndpointPair:of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)" : "Returns an {@link EndpointPair} representing the endpoints of an edge in {@code graph}.",
  "com.google.common.io.ByteStreams:skipSafely(java.io.InputStream,long)" : "* Attempts to skip up to {@code n} bytes from the given input stream, but not more than {@code\n   * in.available()} bytes. This prevents {@code FileInputStream} from skipping more bytes than\n   * actually remain in the file, something that it {@linkplain java.io.FileInputStream#skip(long)\n   * specifies} it can do in its Javadoc despite the fact that it is violating the contract of\n   * {@code InputStream.skip()}.",
  "com.google.common.primitives.ImmutableDoubleArray:length()" : "Returns the number of values in this array.",
  "com.google.common.collect.ImmutableCollection:internalArray()" : "If this collection is backed by an array of its elements in insertion order, returns it.",
  "com.google.common.collect.EnumHashBiMap:containsValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Monitor:enter()" : "Enters this monitor. Blocks indefinitely.",
  "com.google.common.graph.AbstractGraph:edges()" : "* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and\n   * {@link #successors(Object)}.",
  "com.google.common.collect.Multimaps$AsMap:get(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Any:and(com.google.common.base.CharMatcher)" : null,
  "com.google.common.collect.Cut$BelowAll:endpoint()" : null,
  "com.google.common.collect.TreeRangeSet:add(com.google.common.collect.Range)" : null,
  "com.google.common.util.concurrent.Monitor:endWaitingFor(com.google.common.util.concurrent.Monitor$Guard)" : "Records that the current thread is no longer waiting on the specified guard.",
  "com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object)" : null,
  "com.google.common.primitives.Booleans$BooleanComparator:compare(java.lang.Boolean,java.lang.Boolean)" : null,
  "com.google.common.collect.HashBasedTable:isEmpty()" : null,
  "com.google.common.base.Predicates$CompositionPredicate:hashCode()" : null,
  "com.google.common.collect.LinkedListMultimap:<init>(com.google.common.collect.Multimap)" : null,
  "com.google.common.base.Present:<init>(java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap$Inverse$InverseKeySet:iterator()" : null,
  "com.google.common.collect.TreeMultiset:successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.collect.Tables$TransposeTable:contains(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:toString()" : null,
  "com.google.common.collect.RegularContiguousSet:writeReplace()" : null,
  "com.google.common.collect.MapMakerInternalMap$EntryIterator:next()" : null,
  "com.google.common.graph.EndpointPairIterator$Directed:<init>(com.google.common.graph.BaseGraph)" : null,
  "com.google.common.collect.AbstractTable$Values:iterator()" : null,
  "com.google.common.math.PairedStatsAccumulator:pearsonsCorrelationCoefficient()" : "* Returns the <a href=\"http://mathworld.wolfram.com/CorrelationCoefficient.html\">Pearson's or\n   * product-moment correlation coefficient</a> of the values. The count must greater than one, and\n   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code\n   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not\n   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to\n   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or\n   *     either the {@code x} and {@code y} dataset has zero population variance",
  "com.google.common.base.Suppliers:memoize(com.google.common.base.Supplier)" : "* Returns a supplier which caches the instance retrieved during the first call to {@code get()}\n   * and returns that value on subsequent calls to {@code get()}. See: <a\n   * href=\"http://en.wikipedia.org/wiki/Memoization\">memoization</a>\n   *\n   * <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at\n   * most once unless the underlying {@code get()} throws an exception. The supplier's serialized\n   * form does not contain the cached value, which will be recalculated when {@code get()} is called\n   * on the deserialized instance.\n   *\n   * <p>When the underlying delegate throws an exception then this memoizing supplier will keep\n   * delegating calls until it returns valid data.\n   *\n   * <p>If {@code delegate} is an instance created by an earlier call to {@code memoize}, it is\n   * returned directly.",
  "com.google.common.cache.ForwardingCache:get(java.lang.Object,java.util.concurrent.Callable)" : "* @since 11.0",
  "com.google.common.collect.ImmutableMapEntrySet:contains(java.lang.Object)" : null,
  "com.google.common.escape.Escaper:asFunction()" : "Returns a {@link Function} that invokes {@link #escape(String)} on this escaper.",
  "com.google.common.collect.LinkedHashMultimap:valueSpliterator()" : null,
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(double,double)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:set(int,java.lang.Object)" : null,
  "com.google.common.collect.Sets:newTreeSet()" : "* Creates a <i>mutable</i>, empty {@code TreeSet} instance sorted by the natural sort ordering of\n   * its elements.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedSet#of()} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code TreeSet} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @return a new, empty {@code TreeSet}",
  "com.google.common.cache.CacheBuilder$OneWeigher:weigh(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:next()" : null,
  "com.google.common.collect.CompactHashMap:requireTable()" : null,
  "com.google.common.graph.DirectedGraphConnections:successors()" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardLowerKey(java.lang.Object)" : "* A sensible definition of {@link #lowerKey} in terms of {@code lowerEntry}. If you override\n   * {@link #lowerEntry}, you may wish to override {@code lowerKey} to forward to this\n   * implementation.",
  "com.google.common.primitives.ImmutableDoubleArray$AsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided\n   * @since 31.0",
  "com.google.common.collect.ForwardingQueue:standardOffer(java.lang.Object)" : "* A sensible definition of {@link #offer} in terms of {@link #add}. If you override {@link #add},\n   * you may wish to override {@link #offer} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.Platform:preservesInsertionOrderOnPutsMap()" : "* Returns the platform preferred map implementation that preserves insertion order when used only\n   * for insertions.",
  "com.google.common.io.LittleEndianDataInputStream:skipBytes(int)" : null,
  "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:entrySpliterator()" : null,
  "com.google.common.escape.Platform:<init>()" : null,
  "com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)" : "* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a\n   * thread currently occupying this monitor.\n   *\n   * @return whether the guard is now satisfied\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.hash.HashCode$LongHashCode:padToLong()" : null,
  "com.google.common.collect.TreeRangeSet$AsRanges:hashCode()" : null,
  "com.google.common.collect.Maps$Values:map()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Synchronized$SynchronizedAsMap:containsValue(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken:resolveSupertype(java.lang.reflect.Type)" : null,
  "com.google.common.collect.Tables$TransformedTable:row(java.lang.Object)" : null,
  "com.google.common.io.Flushables:flushQuietly(java.io.Flushable)" : "* Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the\n   * signature.\n   *\n   * @param flushable the {@code Flushable} object to be flushed.",
  "com.google.common.collect.ForwardingNavigableSet:standardHeadSet(java.lang.Object)" : "* A sensible definition of {@link #headSet(Object)} in terms of the {@link #headSet(Object,\n   * boolean)} method. If you override {@link #headSet(Object, boolean)}, you may wish to override\n   * {@link #headSet(Object)} to forward to this implementation.",
  "com.google.common.collect.TreeTraverser:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Collections2$FilteredCollection:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n   * an entry (according to {@link Object#equals}) after the first are ignored.",
  "com.google.common.io.ByteSource$AsCharSource:read()" : null,
  "com.google.common.math.PairedStatsAccumulator:yStats()" : "Returns an immutable snapshot of the statistics on the {@code y} values alone.",
  "com.google.common.util.concurrent.Atomics:newReferenceArray(int)" : "* Creates an {@code AtomicReferenceArray} instance of given length.\n   *\n   * @param length the length of the array\n   * @return a new {@code AtomicReferenceArray} with the given length",
  "com.google.common.util.concurrent.ForwardingFuture:get(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.util.concurrent.AbstractIdleService:serviceName()" : "* Returns the name of this service. {@link AbstractIdleService} may include the name in debugging\n   * output.\n   *\n   * @since 14.0",
  "com.google.common.collect.MapMakerInternalMap$CleanupMapTask:run()" : null,
  "com.google.common.collect.Iterables:frequency(java.lang.Iterable,java.lang.Object)" : "* Returns the number of elements in the specified iterable that equal the specified object. This\n   * implementation avoids a full iteration when the iterable is a {@link Multiset} or {@link Set}.\n   *\n   * <p><b>Java 8+ users:</b> In most cases, the {@code Stream} equivalent of this method is {@code\n   * stream.filter(element::equals).count()}. If {@code element} might be null, use {@code\n   * stream.filter(Predicate.isEqual(element)).count()} instead.\n   *\n   * @see java.util.Collections#frequency(Collection, Object) Collections.frequency(Collection,\n   *     Object)",
  "com.google.common.collect.ImmutableList:forEach(java.util.function.Consumer)" : null,
  "com.google.common.cache.LocalCache$ManualSerializationProxy:recreateCacheBuilder()" : null,
  "com.google.common.collect.Cut$AboveValue:describeAsUpperBound(java.lang.StringBuilder)" : null,
  "com.google.common.collect.Maps$NavigableKeySet:higher(java.lang.Object)" : null,
  "com.google.common.io.CharSource$ConcatenatedCharSource:toString()" : null,
  "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Collection)" : "* Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n   * When multiple elements are equivalent according to {@code compareTo()}, only the first one\n   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,\n   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.\n   *\n   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}\n   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},\n   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}\n   * containing one element (the given set itself).\n   *\n   * <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code\n   * ImmutableSortedSet}, it may be returned instead of a copy.\n   *\n   * <p>This method is not type-safe, as it may be called on elements that are not mutually\n   * comparable.\n   *\n   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent\n   * collection that is currently being modified by another thread.\n   *\n   * @throws ClassCastException if the elements are not mutually comparable\n   * @throws NullPointerException if any of {@code elements} is null\n   * @since 7.0 (source-compatible since 2.0)",
  "com.google.common.collect.Sets$FilteredNavigableSet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.HashBiMap:init(int)" : null,
  "com.google.common.collect.Maps$ViewCachingAbstractMap:values()" : null,
  "com.google.common.escape.Platform:charBufferFromThreadLocal()" : "Returns a thread-local 1024-char array.",
  "com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)" : "* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new\n   * instance of the given checked exception type. This reduces boilerplate for a common use of\n   * {@code Future} in which it is unnecessary to programmatically distinguish between exception\n   * types or to extract other information from the exception instance.\n   *\n   * <p>Exceptions from {@code Future.get} are treated as follows:\n   *\n   * <ul>\n   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause\n   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code\n   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.\n   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the\n   *       interrupt).\n   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.\n   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link\n   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such\n   *       exceptions).\n   * </ul>\n   *\n   * <p>The overall principle is to continue to treat every checked exception as a checked\n   * exception, every unchecked exception as an unchecked exception, and every error as an error. In\n   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the\n   * new stack trace matches that of the current thread.\n   *\n   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor\n   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}\n   * (preferring constructors with at least one {@code String}) and calling the constructor via\n   * reflection. If the exception did not already have a cause, one is set by calling {@link\n   * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code\n   * IllegalArgumentException} is thrown.\n   *\n   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}\n   *     whose cause is not itself a checked exception\n   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a\n   *     {@code RuntimeException} as its cause\n   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code\n   *     Error} as its cause\n   * @throws CancellationException if {@code get} throws a {@code CancellationException}\n   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or\n   *     does not have a suitable constructor\n   * @since 19.0 (in 10.0 as {@code get} and with different parameter order)",
  "com.google.common.collect.ArrayTable:hashCode()" : null,
  "com.google.common.net.InetAddresses:forString(java.lang.String)" : "* Returns the {@link InetAddress} having the given string representation.\n   *\n   * <p>This deliberately avoids all nameservice lookups (e.g. no DNS).\n   *\n   * <p>This method accepts non-ASCII digits, for example {@code \"１９２.１６８.０.１\"} (those are fullwidth\n   * characters). That is consistent with {@link InetAddress}, but not with various RFCs. If you\n   * want to accept ASCII digits only, you can use something like {@code\n   * CharMatcher.ascii().matchesAllOf(ipString)}.\n   *\n   * <p>The scope ID is validated against the interfaces on the machine, which requires permissions\n   * under Android.\n   *\n   * <p><b>Android users on API >= 29:</b> Prefer {@code InetAddresses.parseNumericAddress}.\n   *\n   * @param ipString {@code String} containing an IPv4 or IPv6 string literal, e.g. {@code\n   *     \"192.168.0.1\"} or {@code \"2001:db8::1\"} or with a scope ID, e.g. {@code \"2001:db8::1%eth0\"}\n   * @return {@link InetAddress} representing the argument\n   * @throws IllegalArgumentException if the argument is not a valid IP string literal or if the\n   *     address has a scope ID that fails validation against the interfaces on the machine (as\n   *     required by Java's {@link InetAddress})",
  "com.google.common.math.Quantiles$Scale:index(int)" : "* Specifies a single quantile index to be calculated, i.e. the k in the kth q-quantile.\n     *\n     * @param index the quantile index, which must be in the inclusive range [0, q] for q-quantiles",
  "com.google.common.util.concurrent.ClosingFuture$7:toString()" : null,
  "com.google.common.hash.AbstractByteHasher:putBytes(java.nio.ByteBuffer)" : null,
  "com.google.common.reflect.TypeResolver$TypeTable:where(java.util.Map)" : "Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.",
  "com.google.common.util.concurrent.ForwardingExecutorService:invokeAll(java.util.Collection)" : null,
  "com.google.common.base.Stopwatch:elapsed(java.util.concurrent.TimeUnit)" : "* Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit,\n   * with any fraction rounded down.\n   *\n   * <p><b>Note:</b> the overhead of measurement can be more than a microsecond, so it is generally\n   * not useful to specify {@link TimeUnit#NANOSECONDS} precision here.\n   *\n   * <p>It is generally not a good idea to use an ambiguous, unitless {@code long} to represent\n   * elapsed time. Therefore, we recommend using {@link #elapsed()} instead, which returns a\n   * strongly-typed {@code Duration} instance.\n   *\n   * @since 14.0 (since 10.0 as {@code elapsedTime()})",
  "com.google.common.util.concurrent.Monitor:enterInterruptibly(java.time.Duration)" : "* Enters this monitor. Blocks at most the given time, and may be interrupted.\n   *\n   * @return whether the monitor was entered\n   * @throws InterruptedException if interrupted while waiting\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.graph.EndpointPair$Unordered:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Streams:findLast(java.util.stream.LongStream)" : "* Returns the last element of the specified stream, or {@link OptionalLong#empty} if the stream\n   * is empty.\n   *\n   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This\n   * method's runtime will be between O(log n) and O(n), performing better on <a\n   * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n   * streams.\n   *\n   * @see LongStream#findFirst()\n   * @throws NullPointerException if the last element of the stream is null",
  "com.google.common.collect.Maps:filterKeys(java.util.SortedMap,com.google.common.base.Predicate)" : "* Returns a sorted map containing the mappings in {@code unfiltered} whose keys satisfy a\n   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the\n   * other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and\n   * {@code putAll()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying\n   * map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 11.0",
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:containsKey(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableNetwork:adjacentNodeFn(com.google.common.graph.Network,java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int,int)" : null,
  "com.google.common.collect.CompoundOrdering:equals(java.lang.Object)" : null,
  "com.google.common.math.Quantiles:longsToDoubles(long[])" : null,
  "com.google.common.io.Java8Compatibility:flip(java.nio.Buffer)" : null,
  "com.google.common.math.Quantiles:<init>()" : "* Constructor for a type that is not meant to be instantiated.\n   *\n   * @deprecated Use the static factory methods of the class. There is no reason to create an\n   *     instance of {@link Quantiles}.",
  "com.google.common.hash.HashCode$BytesHashCode:asLong()" : null,
  "com.google.common.collect.ImmutableTable:cellIterator()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollLastEntry()" : null,
  "com.google.common.collect.ForwardingNavigableMap:pollFirstEntry()" : null,
  "com.google.common.collect.TreeBasedTable:create()" : "* Creates an empty {@code TreeBasedTable} that uses the natural orderings of both row and column\n   * keys.\n   *\n   * <p>The method signature specifies {@code R extends Comparable} with a raw {@link Comparable},\n   * instead of {@code R extends Comparable<? super R>}, and the same for {@code C}. That's\n   * necessary to support classes defined without generics.",
  "com.google.common.base.Splitter:trimResults()" : "* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically\n   * removes leading and trailing {@linkplain CharMatcher#whitespace whitespace} from each returned\n   * substring; equivalent to {@code trimResults(CharMatcher.whitespace())}. For example, {@code\n   * Splitter.on(',').trimResults().split(\" a, b ,c \")} returns an iterable containing {@code [\"a\",\n   * \"b\", \"c\"]}.\n   *\n   * @return a splitter with the desired configuration",
  "com.google.common.hash.AbstractCompositeHashFunction:fromHashers(com.google.common.hash.Hasher[])" : null,
  "com.google.common.collect.ImmutableSet$Indexed$1:get(int)" : null,
  "com.google.common.collect.Cut$BelowAll:compareTo(com.google.common.collect.Cut)" : null,
  "com.google.common.collect.ForwardingMap:clear()" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getWriteTime()" : null,
  "com.google.common.collect.ForwardingListMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String,int)" : "* Returns the unsigned {@code long} value represented by a string with the given radix.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String, int)} instead.\n   *\n   * @param string the string containing the unsigned {@code long} representation to be parsed.\n   * @param radix the radix to use while parsing {@code string}\n   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with\n   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link\n   *     Character#MAX_RADIX}.\n   * @throws NullPointerException if {@code string} is null (in contrast to {@link\n   *     Long#parseLong(String)})",
  "com.google.common.collect.ImmutableList$SubList:get(int)" : null,
  "com.google.common.collect.Interners$InternerImpl:<init>(com.google.common.collect.MapMaker)" : null,
  "com.google.common.collect.Iterables:cycle(java.lang.Iterable)" : "* Returns an iterable whose iterators cycle indefinitely over the elements of {@code iterable}.\n   *\n   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code\n   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code\n   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}\n   * is empty.\n   *\n   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\n   * should use an explicit {@code break} or be certain that you will eventually remove all the\n   * elements.\n   *\n   * <p>To cycle over the iterable {@code n} times, use the following: {@code\n   * Iterables.concat(Collections.nCopies(n, iterable))}\n   *\n   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code\n   * Stream.generate(() -> iterable).flatMap(Streams::stream)}.",
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.AbstractListMultimap:asMap()" : "* {@inheritDoc}\n   *\n   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link List}\n   * values.",
  "com.google.common.collect.Ordering:nullsFirst()" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:higher(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ServiceManager:startupTimes()" : "* Returns the service load times. This value will only return startup times for services that\n   * have finished starting.\n   *\n   * @return Map of services and their corresponding startup time in millis, the map entries will be\n   *     ordered by startup time.",
  "com.google.common.io.BaseEncoding$Alphabet:hasUpperCase()" : null,
  "com.google.common.collect.ImmutableTable:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder#Builder() ImmutableTable.Builder()} constructor.",
  "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy)" : null,
  "com.google.common.util.concurrent.AbstractTransformFuture:afterDone()" : null,
  "com.google.common.collect.ConcurrentHashMultiset:clear()" : null,
  "com.google.common.collect.ImmutableRangeSet$SerializedForm:readResolve()" : null,
  "com.google.common.collect.UnmodifiableIterator:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:keySet()" : null,
  "com.google.common.collect.Multimaps$Keys:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.Iterables$UnmodifiableIterable:<init>(java.lang.Iterable)" : null,
  "com.google.common.collect.Serialization:populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int)" : "* Populates a multiset by reading an input stream, as part of deserialization. See {@link\n   * #writeMultiset} for the data format. The number of distinct elements is determined by a prior\n   * call to {@link #readCount}.",
  "com.google.common.collect.Maps$TransformedEntriesSortedMap:lastKey()" : null,
  "com.google.common.io.CharSource:readLines(com.google.common.io.LineProcessor)" : "* Reads lines of text from this source, processing each line as it is read using the given {@link\n   * LineProcessor processor}. Stops when all lines have been processed or the processor returns\n   * {@code false} and returns the result produced by the processor.\n   *\n   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\n   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n   * it does.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source or if {@code\n   *     processor} throws an {@code IOException}\n   * @since 16.0",
  "com.google.common.collect.ImmutableSetMultimap$EntrySet:<init>(com.google.common.collect.ImmutableSetMultimap)" : null,
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putInt(int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.Maps$TransformedEntriesSortedMap:firstKey()" : null,
  "com.google.common.collect.Maps$SortedKeySet:map()" : null,
  "com.google.common.collect.CompactHashMap:create()" : "Creates an empty {@code CompactHashMap} instance.",
  "com.google.common.collect.StandardTable$Column$EntrySet:clear()" : null,
  "com.google.common.collect.EmptyImmutableListMultimap:<init>()" : null,
  "com.google.common.collect.TreeRangeMap$1:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)" : "* @since 28.1",
  "com.google.common.collect.Sets:filter(java.util.SortedSet,com.google.common.base.Predicate)" : "* Returns the elements of a {@code SortedSet}, {@code unfiltered}, that satisfy a predicate. The\n   * returned set is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods\n   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code\n   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods\n   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements\n   * that satisfy the filter will be removed from the underlying set.\n   *\n   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in\n   * the underlying set and determine which elements satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and\n   * use the copy.\n   *\n   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link\n   * Iterables#filter(Iterable, Class)} for related functionality.)\n   *\n   * @since 11.0",
  "com.google.common.graph.Graphs:transpose(com.google.common.graph.ValueGraph)" : "* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other\n   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object)" : null,
  "com.google.common.hash.Fingerprint2011:fullFingerprint(byte[],int,int)" : null,
  "com.google.common.util.concurrent.Monitor$Guard:<init>(com.google.common.util.concurrent.Monitor)" : null,
  "com.google.common.base.Predicates$ContainsPatternFromStringPredicate:toString()" : null,
  "com.google.common.collect.CompactHashSet:requireElements()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$KeySet:remove(java.lang.Object)" : null,
  "com.google.common.io.MoreFiles:listFiles(java.nio.file.Path)" : "* Returns an immutable list of paths to the files contained in the given directory.\n   *\n   * @throws NoSuchFileException if the file does not exist <i>(optional specific exception)</i>\n   * @throws NotDirectoryException if the file could not be opened because it is not a directory\n   *     <i>(optional specific exception)</i>\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.Sets$FilteredSortedSet:last()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:toArray()" : null,
  "com.google.common.collect.FilteredEntryMultimap:removeEntriesIf(com.google.common.base.Predicate)" : null,
  "com.google.common.collect.AbstractSortedSetMultimap:createUnmodifiableEmptyCollection()" : null,
  "com.google.common.base.Strings:emptyToNull(java.lang.String)" : "* Returns the given string if it is nonempty; {@code null} otherwise.\n   *\n   * @param string the string to test and possibly return\n   * @return {@code string} itself if it is nonempty; {@code null} if it is empty or null",
  "com.google.common.collect.AbstractBiMap:inverse()" : null,
  "com.google.common.collect.AbstractSortedMultiset:lastEntry()" : null,
  "com.google.common.base.CharMatcher$Negated:matchesAllOf(java.lang.CharSequence)" : null,
  "com.google.common.hash.Murmur3_128HashFunction:toString()" : null,
  "com.google.common.collect.Maps$DescendingMap:tailMap(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableTable:column(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * @throws NullPointerException if {@code columnKey} is {@code null}",
  "com.google.common.collect.DescendingImmutableSortedSet:size()" : null,
  "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:build()" : null,
  "com.google.common.collect.Sets:removeAllImpl(java.util.Set,java.util.Iterator)" : "Remove each element in an iterable from a set.",
  "com.google.common.collect.ImmutableSortedMultiset:reverseOrder()" : "* Returns a builder that creates immutable sorted multisets whose elements are ordered by the\n   * reverse of their natural ordering.\n   *\n   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code\n   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a\n   * href=\"https://bugs.openjdk.org/browse/JDK-6468354\">JDK-6468354</a>.",
  "com.google.common.collect.DescendingImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Lists$AbstractListWrapper:set(int,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:getValueReferenceQueueForTesting()" : "Unsafely extracts the value reference queue used by this segment.",
  "com.google.common.io.ByteSource$SlicedByteSource:slice(long,long)" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap$Builder:build()" : "* Returns a new immutable class-to-instance map containing the entries provided to this\n     * builder.\n     *\n     * @throws IllegalArgumentException if duplicate keys were added",
  "com.google.common.collect.Multisets:<init>()" : null,
  "com.google.common.collect.AbstractMultiset:removeAll(java.util.Collection)" : null,
  "com.google.common.primitives.UnsignedInteger:mod(com.google.common.primitives.UnsignedInteger)" : "* Returns this mod {@code val}.\n   *\n   * @throws ArithmeticException if {@code val} is zero\n   * @since 14.0",
  "com.google.common.util.concurrent.AbstractCatchingFuture:pendingToString()" : null,
  "com.google.common.math.LongMath:roundToDouble(long,java.math.RoundingMode)" : "* Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x}\n   * is precisely representable as a {@code double}, its {@code double} value will be returned;\n   * otherwise, the rounding will choose between the two nearest representable values with {@code\n   * mode}.\n   *\n   * <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754\n   * default rounding mode: if the two nearest representable values are equally near, the one with\n   * the least significant bit zero is chosen. (In such cases, both of the nearest representable\n   * values are even integers; this method returns the one that is a multiple of a greater power of\n   * two.)\n   *\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not precisely representable as a {@code double}\n   * @since 30.0",
  "com.google.common.io.ByteSource$ByteArrayByteSource:size()" : null,
  "com.google.common.collect.ImmutableList:listIterator()" : null,
  "com.google.common.graph.Traverser$Traversal:preOrder(java.util.Iterator)" : null,
  "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask:setValue(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableCollection:remove(java.lang.Object)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Cut$AboveValue:hashCode()" : null,
  "com.google.common.net.InetAddresses:parseHextet(java.lang.String,int,int)" : null,
  "com.google.common.collect.Interners:newStrongInterner()" : "* Returns a new thread-safe interner which retains a strong reference to each instance it has\n   * interned, thus preventing these instances from being garbage-collected. If this retention is\n   * acceptable, this implementation may perform better than {@link #newWeakInterner}.",
  "com.google.common.io.LittleEndianDataInputStream:readLong()" : "* Reads a {@code long} as specified by {@link DataInputStream#readLong()}, except using\n   * little-endian byte order.\n   *\n   * @return the next eight bytes of the input stream, interpreted as a {@code long} in\n   *     little-endian byte order\n   * @throws IOException if an I/O error occurs",
  "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,char)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.primitives.Floats:sortDescending(float[])" : "* Sorts the elements of {@code array} in descending order.\n   *\n   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats\n   * all NaN values as equal and 0.0 as greater than -0.0.\n   *\n   * @since 23.1",
  "com.google.common.collect.Maps$SortedAsMapView:tailMap(java.lang.Object)" : null,
  "com.google.common.collect.Streams:stream(java.util.Iterator)" : "* Returns a sequential {@link Stream} of the remaining contents of {@code iterator}. Do not use\n   * {@code iterator} directly after passing it to this method.",
  "com.google.common.collect.ForwardingSet:standardRemoveAll(java.util.Collection)" : "* A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}.\n   * If you override {@code iterator} or {@code remove}, you may wish to override {@link #removeAll}\n   * to forward to this implementation.\n   *\n   * @since 7.0 (this version overrides the {@code ForwardingCollection} version as of 12.0)",
  "com.google.common.collect.ImmutableRangeSet:encloses(com.google.common.collect.Range)" : null,
  "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:execute()" : null,
  "com.google.common.cache.LocalCache$Segment:getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture)" : "Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.",
  "com.google.common.collect.Sets$FilteredNavigableSet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.base.Joiner:iterable(java.lang.Object,java.lang.Object,java.lang.Object[])" : null,
  "com.google.common.collect.CompactHashMap:valuesIterator()" : null,
  "com.google.common.hash.ChecksumHashFunction:<init>(com.google.common.hash.ImmutableSupplier,int,java.lang.String)" : null,
  "com.google.common.base.CharMatcher$ForPredicate:toString()" : null,
  "com.google.common.collect.JdkBackedImmutableSet:contains(java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedBytes:compare(byte,byte)" : "* Compares the two specified {@code byte} values, treating them as unsigned values between 0 and\n   * 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127}\n   * because it is seen as having the value of positive {@code 129}.\n   *\n   * @param a the first {@code byte} to compare\n   * @param b the second {@code byte} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.cache.LongAddables:create()" : null,
  "com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future)" : "* Invokes {@code future.}{@link Future#get() get()} uninterruptibly.\n   *\n   * <p>Similar methods:\n   *\n   * <ul>\n   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link\n   *       Futures#getDone Futures.getDone}.\n   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link\n   *       Futures#getChecked(Future, Class) Futures.getChecked}.\n   *   <li>To get uninterruptibility and remove checked exceptions, use {@link\n   *       Futures#getUnchecked}.\n   * </ul>\n   *\n   * @throws ExecutionException if the computation threw an exception\n   * @throws CancellationException if the computation was cancelled",
  "com.google.common.collect.AbstractListMultimap:get(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,\n   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link\n   * Multimap} interface.",
  "com.google.common.base.Functions$PredicateFunction:toString()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:createNodes(java.lang.Class)" : "* For a given Enum type, creates an immutable map from each of the Enum's values to a\n   * corresponding LockGraphNode, with the {@code allowedPriorLocks} and {@code\n   * disallowedPriorLocks} prepopulated with nodes according to the natural ordering of the\n   * associated Enum values.",
  "com.google.common.reflect.TypeToken:isWrapper()" : null,
  "com.google.common.collect.CompactHashMap:clear()" : null,
  "com.google.common.collect.Multisets:sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "* Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count\n   * of each element is the <i>sum</i> of its counts in the two backing multisets. The iteration\n   * order of the returned multiset matches that of the element set of {@code multiset1} followed by\n   * the members of the element set of {@code multiset2} that are not contained in {@code\n   * multiset1}, with repeated occurrences of the same element appearing consecutively.\n   *\n   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different\n   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).\n   *\n   * @since 14.0",
  "com.google.common.collect.ForwardingMapEntry:standardEquals(java.lang.Object)" : "* A sensible definition of {@link #equals(Object)} in terms of {@link #getKey()} and {@link\n   * #getValue()}. If you override either of these methods, you may wish to override {@link\n   * #equals(Object)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.ImmutableList$Builder:<init>(int)" : null,
  "com.google.common.collect.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.StandardTable:values()" : "* {@inheritDoc}\n   *\n   * <p>The collection's iterator traverses the values for the first row, the values for the second\n   * row, and so on.",
  "com.google.common.hash.AbstractNonStreamingHashFunction:hashUnencodedChars(java.lang.CharSequence)" : null,
  "com.google.common.collect.ImmutableMap:replaceAll(java.util.function.BiFunction)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char,char)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.io.ByteSource$ByteArrayByteSource:slice(long,long)" : null,
  "com.google.common.primitives.ImmutableIntArray$Builder:build()" : "* Returns a new immutable array. The builder can continue to be used after this call, to append\n     * more values and build again.\n     *\n     * <p><b>Performance note:</b> the returned array is backed by the same array as the builder, so\n     * no data is copied as part of this step, but this may occupy more memory than strictly\n     * necessary. To copy the data to a right-sized backing array, use {@code .build().trimmed()}.",
  "com.google.common.io.ByteStreams:newDataOutput(int)" : "* Returns a new {@link ByteArrayDataOutput} instance sized to hold {@code size} bytes before\n   * resizing.\n   *\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char,int)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ImmutableSortedSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder)" : null,
  "com.google.common.graph.ImmutableValueGraph$Builder:putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Adds an edge connecting {@code nodeU} to {@code nodeV} if one is not already present, and\n     * sets a value for that edge to {@code value} (overwriting the existing value, if any).\n     *\n     * <p>If the graph is directed, the resultant edge will be directed; otherwise, it will be\n     * undirected.\n     *\n     * <p>Values do not have to be unique. However, values must be non-null.\n     *\n     * <p>If {@code nodeU} and {@code nodeV} are not already present in this graph, this method will\n     * silently {@link #addNode(Object) add} {@code nodeU} and {@code nodeV} to the graph.\n     *\n     * @return this {@code Builder} object\n     * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n     *     #allowsSelfLoops()}",
  "com.google.common.base.CharMatcher$Any:or(com.google.common.base.CharMatcher)" : null,
  "com.google.common.graph.ImmutableNetwork:edgesConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultimap:clear()" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.util.concurrent.Callable)" : null,
  "com.google.common.base.Predicates$OrPredicate:equals(java.lang.Object)" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:build()" : "* Returns a new immutable type-to-instance map containing the entries provided to this builder.\n     *\n     * @throws IllegalArgumentException if duplicate keys were added",
  "com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate)" : "* Support removal operations when filtering a filtered multimap. Since a filtered multimap has\n   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would\n   * lead to a multimap whose removal operations would fail. This method combines the predicates to\n   * avoid that problem.",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)" : null,
  "com.google.common.collect.CollectSpliterators:filter(java.util.Spliterator,java.util.function.Predicate)" : "Returns a {@code Spliterator} filtered by the specified predicate.",
  "com.google.common.util.concurrent.AbstractIdleService:awaitRunning(long,java.util.concurrent.TimeUnit)" : "* @since 15.0",
  "com.google.common.primitives.Longs$LongArrayAsList:toString()" : null,
  "com.google.common.collect.ForwardingNavigableMap:headMap(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ImmutableSortedMap:comparator()" : "* Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the\n   * natural ordering of the keys is used. Note that its behavior is not consistent with {@link\n   * TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.",
  "com.google.common.io.CharSource$CharSequenceCharSource:lines()" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:successors(java.lang.Object)" : null,
  "com.google.common.collect.Sets$CartesianSet:delegate()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherKey(java.lang.Object)" : null,
  "com.google.common.collect.Cut$AboveValue:greatestValueBelow(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,int,long)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.ImmutableSortedMap:<init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap)" : null,
  "com.google.common.util.concurrent.ServiceManager$Listener:stopped()" : "* Called when the all of the component services have reached a terminal state, either\n     * {@linkplain State#TERMINATED terminated} or {@linkplain State#FAILED failed}.",
  "com.google.common.collect.ForwardingNavigableSet:standardPollFirst()" : "* A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you\n   * override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this\n   * implementation.",
  "com.google.common.base.Suppliers$SupplierComposition:toString()" : null,
  "com.google.common.collect.CompactLinkedHashSet:<init>(int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:map()" : null,
  "com.google.common.collect.EnumBiMap:entrySet()" : null,
  "com.google.common.collect.TreeMultiset:firstNode()" : "Returns the first node in the tree that is in range.",
  "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap,java.lang.Object)" : null,
  "com.google.common.collect.FluentIterable:allMatch(com.google.common.base.Predicate)" : "* Returns {@code true} if every element in this fluent iterable satisfies the predicate. If this\n   * fluent iterable is empty, {@code true} is returned.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch} (same).",
  "com.google.common.hash.HashingOutputStream:close()" : null,
  "com.google.common.net.InetAddresses$TeredoInfo:<init>(java.net.Inet4Address,java.net.Inet4Address,int,int)" : null,
  "com.google.common.collect.Sets$CartesianSet:hashCode()" : null,
  "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object)" : "Returns an immutable multimap containing a single entry.",
  "com.google.common.base.MoreObjects$ToStringHelper:addValue(long)" : "* Adds an unnamed value to the formatted output.\n     *\n     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a\n     * readable name.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",
  "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:comparator()" : null,
  "com.google.common.collect.ForwardingTable:equals(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashSet:<init>(int)" : "* Constructs a new instance of {@code CompactHashSet} with the specified capacity.\n   *\n   * @param expectedSize the initial capacity of this {@code CompactHashSet}.",
  "com.google.common.base.MoreObjects$ToStringHelper:addHolder()" : null,
  "com.google.common.util.concurrent.TrustedListenableFutureTask:afterDone()" : null,
  "com.google.common.io.ByteSource$AsCharSource:asByteSource(java.nio.charset.Charset)" : null,
  "com.google.common.collect.AllEqualOrdering:sortedCopy(java.lang.Iterable)" : null,
  "com.google.common.collect.ImmutableRangeMap:equals(java.lang.Object)" : null,
  "com.google.common.cache.CacheStats:<init>(long,long,long,long,long,long)" : "* Constructs a new {@code CacheStats} instance.\n   *\n   * <p>Five parameters of the same type in a row is a bad thing, but this class is not constructed\n   * by end users and is too fine-grained for a builder.",
  "com.google.common.io.Files:write(byte[],java.io.File)" : "* Overwrites a file with the contents of a byte array.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n   * java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}.\n   *\n   * @param from the bytes to write\n   * @param to the destination file\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.CompactHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)" : "* Creates a fresh entry with the specified object at the specified position in the entry arrays.",
  "com.google.common.cache.LocalCache$Segment:lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.util.concurrent.MoreExecutors:platformThreadFactory()" : "* Returns a default thread factory used to create new threads.\n   *\n   * <p>When running on AppEngine with access to <a\n   * href=\"https://cloud.google.com/appengine/docs/standard/java/javadoc/\">AppEngine legacy\n   * APIs</a>, this method returns {@code ThreadManager.currentRequestThreadFactory()}. Otherwise,\n   * it returns {@link Executors#defaultThreadFactory()}.\n   *\n   * @since 14.0",
  "com.google.common.primitives.Doubles$DoubleArrayAsList:equals(java.lang.Object)" : null,
  "com.google.common.io.ByteStreams:copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)" : "* Copies all bytes from the readable channel to the writable channel. Does not close or flush\n   * either channel.\n   *\n   * @param from the readable channel to read from\n   * @param to the writable channel to write to\n   * @return the number of bytes copied\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:hasNext()" : null,
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:tailMap(com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.math.PairedStats:ensurePositive(double)" : null,
  "com.google.common.reflect.ClassPath:getTopLevelClasses(java.lang.String)" : "Returns all top level classes whose package name is {@code packageName}.",
  "com.google.common.collect.AbstractTable$Values:size()" : null,
  "com.google.common.io.CharSource$AsByteSource:toString()" : null,
  "com.google.common.base.AbstractIterator:next()" : null,
  "com.google.common.cache.LocalCache$WeakEntry:getPreviousInAccessQueue()" : null,
  "com.google.common.primitives.Doubles$DoubleArrayAsList:set(int,java.lang.Double)" : null,
  "com.google.common.collect.RegularImmutableMap:createKeySet()" : null,
  "com.google.common.collect.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:tryAdvance(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableCollection:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.ForwardingQueue:offer(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Values:isEmpty()" : null,
  "com.google.common.base.Predicates$OrPredicate:toString()" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:isPartialView()" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:scanJarFile(java.util.jar.JarFile,com.google.common.collect.ImmutableSet$Builder)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap)" : null,
  "com.google.common.io.ByteStreams$LimitedInputStream:read()" : null,
  "com.google.common.collect.Tables$TransformedTable:column(java.lang.Object)" : null,
  "com.google.common.collect.StandardTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeMap:emptySubRangeMap()" : null,
  "com.google.common.collect.TreeRangeMap:putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMapEntry:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.math.Stats:populationVariance()" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Variance#Population_variance\">population\n   * variance</a> of the values. The count must be non-zero.\n   *\n   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It\n   * is not guaranteed to return zero when the dataset consists of the same value multiple times,\n   * due to numerical errors. However, it is guaranteed never to return a negative result.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty",
  "com.google.common.collect.ImmutableMapKeySet:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:createUnmodifiableEmptyCollection()" : "* Creates an unmodifiable, empty collection of values.\n   *\n   * <p>This is used in {@link #removeAll} on an empty key.",
  "com.google.common.collect.ForwardingSortedMultiset:pollLastEntry()" : null,
  "com.google.common.primitives.ImmutableLongArray:toArray()" : "Returns a new, mutable copy of this array's values, as a primitive {@code long[]}.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:isAcquiredByCurrentThread()" : null,
  "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:foundAndRemovedExactReference(java.lang.Iterable,java.lang.Object)" : "Returns true if an exact reference (==) was found and removed from the supplied iterable.",
  "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.JdkBackedImmutableMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.ImmutableSet:of(java.lang.Object)" : "* Returns an immutable set containing the given element. Preferred over {@link\n   * Collections#singleton} for code consistency, {@code null} rejection, and because the return\n   * type conveys the immutability guarantee.",
  "com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap)" : null,
  "com.google.common.graph.IncidentEdgeSet:remove(java.lang.Object)" : null,
  "com.google.common.base.PairwiseEquivalence:hashCode()" : null,
  "com.google.common.util.concurrent.ClosingFuture:finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,java.util.concurrent.Executor)" : "* Marks this step as the last step in the {@code ClosingFuture} pipeline. When this step is done,\n   * {@code receiver} will be called with an object that contains the result of the operation. The\n   * receiver can store the {@link ValueAndCloser} outside the receiver for later synchronous use.\n   *\n   * <p>After calling this method, you may not call {@link #finishToFuture()}, this method again, or\n   * any other derivation method on the original {@code ClosingFuture} instance.\n   *\n   * @param consumer a callback whose method will be called (using {@code executor}) when this\n   *     operation is done",
  "com.google.common.collect.Cut$BelowValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.primitives.Chars$CharArrayAsList:<init>(char[])" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:serviceName()" : "* Returns the name of this service. {@link AbstractScheduledService} may include the name in\n   * debugging output.\n   *\n   * @since 14.0",
  "com.google.common.collect.ImmutableListMultimap:removeAll(java.lang.Object)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:cancel(boolean)" : null,
  "com.google.common.collect.AbstractNavigableMap:higherKey(java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$Alphabet:equals(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap:requireValues()" : null,
  "com.google.common.eventbus.Subscriber:equals(java.lang.Object)" : null,
  "com.google.common.base.Predicate:test(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)" : "* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the\n   * specified supplier. Each input element is mapped to a key and a stream of values, each of which\n   * are put into the resulting {@code Multimap}, in the encounter order of the stream and the\n   * encounter order of the streams of values.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =\n   *     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n   *         .collect(\n   *             flatteningToMultimap(\n   *                  str -> str.charAt(0),\n   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c),\n   *                  MultimapBuilder.linkedHashKeys().arrayListValues()::build));\n   *\n   * // is equivalent to\n   *\n   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP;\n   *\n   * static {\n   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build();\n   *     FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'));\n   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e'));\n   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'));\n   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'));\n   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'));\n   * }\n   * }\n   *\n   * @since 21.0",
  "com.google.common.base.CharMatcher$Is:<init>(char)" : null,
  "com.google.common.collect.Ordering:max(java.lang.Iterable)" : "* Returns the greatest of the specified values according to this ordering. If there are multiple\n   * greatest values, the first of those is returned.\n   *\n   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code\n   * Collections.max(collection, thisComparator)} instead. Otherwise, use {@code\n   * Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do\n   * not guarantee which tied maximum element is returned.\n   *\n   * @param iterable the iterable whose maximum element is to be determined\n   * @throws NoSuchElementException if {@code iterable} is empty\n   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n   *     ordering.",
  "com.google.common.cache.LocalCache$WeightedWeakValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:setNextInWriteQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.AbstractTable:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Range:compareOrThrow(java.lang.Comparable,java.lang.Comparable)" : null,
  "com.google.common.collect.Maps:orNaturalOrder(java.util.Comparator)" : "* Returns the specified comparator if not null; otherwise returns {@code Ordering.natural()}.\n   * This method is an abomination of generics; the only purpose of this method is to contain the\n   * ugly type-casting in one place.",
  "com.google.common.collect.Multimaps$MapMultimap:clear()" : null,
  "com.google.common.primitives.Ints:rotate(int[],int)" : "* Performs a right rotation of {@code array} of \"distance\" places, so that the first element is\n   * moved to index \"distance\", and the element at index {@code i} ends up at index {@code (distance\n   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Ints.asList(array),\n   * distance)}, but is considerably faster and avoids allocation and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @since 32.0.0",
  "com.google.common.collect.ImmutableList$ReverseImmutableList:indexOf(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$WeakValueReference:isActive()" : null,
  "com.google.common.collect.Queues:newLinkedBlockingQueue()" : "Creates an empty {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}.",
  "com.google.common.graph.StandardMutableGraph:delegate()" : null,
  "com.google.common.collect.MapMakerInternalMap:create(com.google.common.collect.MapMaker)" : "Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}.",
  "com.google.common.reflect.TypeResolver:resolveTypesInPlace(java.lang.reflect.Type[])" : null,
  "com.google.common.collect.ForwardingMultiset$StandardElementSet:multiset()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,char)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:<init>(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.net.MediaType:createConstant(java.lang.String,java.lang.String)" : null,
  "com.google.common.collect.FilteredEntryMultimap$AsMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.AbstractBiMap:<init>(java.util.Map,com.google.common.collect.AbstractBiMap)" : "Private constructor for inverse bimap.",
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:comparator()" : null,
  "com.google.common.base.Throwables:getRootCause(java.lang.Throwable)" : "* Returns the innermost cause of {@code throwable}. The first throwable in a chain provides\n   * context from when the error or exception was initially detected. Example usage:\n   *\n   * <pre>\n   * assertEquals(\"Unable to assign a customer id\", Throwables.getRootCause(e).getMessage());\n   * </pre>\n   *\n   * @throws IllegalArgumentException if there is a loop in the causal chain",
  "com.google.common.collect.BoundType:forBoolean(boolean)" : "Returns the bound type corresponding to a boolean value for inclusivity.",
  "com.google.common.util.concurrent.UncheckedExecutionException:<init>(java.lang.String,java.lang.Throwable)" : "* Creates a new instance with the given detail message and cause. Prefer to provide a\n   * non-nullable {@code cause}, as many users expect to find one.",
  "com.google.common.util.concurrent.AbstractIdleService$DelegateService:toString()" : null,
  "com.google.common.collect.ImmutableRangeMap:of()" : "* Returns an empty immutable range map.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.io.MoreFiles$PathByteSink:toString()" : null,
  "com.google.common.io.LittleEndianDataInputStream:readBoolean()" : null,
  "com.google.common.collect.ArrayTable:cellSet()" : "* Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table\n   * will update the returned set.\n   *\n   * <p>The returned set's iterator traverses the mappings with the first row key, the mappings with\n   * the second row key, and so on.\n   *\n   * <p>The value in the returned cells may change if the table subsequently changes.\n   *\n   * @return set of table cells consisting of row key / column key / value triplets",
  "com.google.common.math.LongMath:floorPowerOfTwo(long)" : "* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code\n   * checkedPow(2, log2(x, FLOOR))}.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @since 20.0",
  "com.google.common.math.IntMath:checkedSubtract(int,int)" : "* Returns the difference of {@code a} and {@code b}, provided it does not overflow.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link\n   * Math#subtractExact(int, int)} instead.\n   *\n   * @throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic",
  "com.google.common.primitives.UnsignedLongs:toString(long,int)" : "* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n   * unsigned.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long, int)} instead.\n   *\n   * @param x the value to convert to a string.\n   * @param radix the radix to use while working with {@code x}\n   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}\n   *     and {@link Character#MAX_RADIX}.",
  "com.google.common.util.concurrent.ImmediateFuture:get(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function,com.google.common.collect.ImmutableMap$Builder)" : null,
  "com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "A specialization of {@code addAllImpl} for when {@code elements} is itself a Multiset.",
  "com.google.common.util.concurrent.AtomicDouble:lazySet(double)" : "* Eventually sets to the given value.\n   *\n   * @param newValue the new value",
  "com.google.common.collect.MapMakerInternalMap$EntrySet:clear()" : null,
  "com.google.common.base.CharMatcher$IsNot:or(com.google.common.base.CharMatcher)" : null,
  "com.google.common.collect.ImmutableSetMultimap$EntrySet:iterator()" : null,
  "com.google.common.primitives.ImmutableLongArray$Builder:add(long)" : "* Appends {@code value} to the end of the values the built {@link ImmutableLongArray} will\n     * contain.",
  "com.google.common.io.CharStreams$NullWriter:append(java.lang.CharSequence)" : null,
  "com.google.common.collect.ImmutableMultiset:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.ImmutableRangeMap:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)" : "* Returns a {@code Collector} that accumulates the input elements into a new {@code\n   * ImmutableRangeMap}. As in {@link Builder}, overlapping ranges are not permitted.\n   *\n   * @since 23.1",
  "com.google.common.collect.HashMultiset:create()" : "Creates a new, empty {@code HashMultiset} using the default initial capacity.",
  "com.google.common.hash.Murmur3_32HashFunction:bits()" : null,
  "com.google.common.net.PercentEscaper:escape(java.lang.String)" : null,
  "com.google.common.math.LongMath:mod(long,long)" : "* Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x %\n   * m}, which might be negative.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * mod(7, 4) == 3\n   * mod(-7, 4) == 1\n   * mod(-1, 4) == 3\n   * mod(-8, 4) == 0\n   * mod(8, 4) == 0\n   * }\n   *\n   * @throws ArithmeticException if {@code m <= 0}\n   * @see <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3\">\n   *     Remainder Operator</a>",
  "com.google.common.math.StatsAccumulator:merge(long,double,double,double,double)" : null,
  "com.google.common.collect.AbstractMultiset:isEmpty()" : null,
  "com.google.common.collect.Tables:immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable cell with the specified row key, column key, and value.\n   *\n   * <p>The returned cell is serializable.\n   *\n   * @param rowKey the row key to be associated with the returned cell\n   * @param columnKey the column key to be associated with the returned cell\n   * @param value the value to be associated with the returned cell",
  "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:sleepMicrosUninterruptibly(long)" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:pollFirstEntry()" : null,
  "com.google.common.collect.TreeBasedTable$TreeRow:comparator()" : null,
  "com.google.common.cache.LocalCache$StrongValueReference:isLoading()" : null,
  "com.google.common.graph.ValueGraphBuilder:build()" : "* Returns an empty {@link MutableValueGraph} with the properties of this {@link\n   * ValueGraphBuilder}.",
  "com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$1:getInterfaces(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Collections2$OrderedPermutationIterator:findNextL(int)" : null,
  "com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable,java.lang.Object)" : "* Returns the single element contained in {@code iterable}, or {@code defaultValue} if the\n   * iterable is empty.\n   *\n   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code\n   * stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)}.\n   *\n   * @throws IllegalArgumentException if the iterator contains multiple elements",
  "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.ImmutableRangeMap:putAll(com.google.common.collect.RangeMap)" : "* Guaranteed to throw an exception and leave the {@code RangeMap} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Range:create(com.google.common.collect.Cut,com.google.common.collect.Cut)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:deleteMe()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:navigableKeySet()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.collect.Iterators:advance(java.util.Iterator,int)" : "* Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times or until {@code\n   * hasNext()} returns {@code false}, whichever comes first.\n   *\n   * @return the number of elements the iterator was advanced\n   * @since 13.0 (since 3.0 as {@code Iterators.skip})",
  "com.google.common.io.ReaderInputStream:read()" : null,
  "com.google.common.collect.Cut$AboveAll:hashCode()" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:wrapTask(java.lang.Runnable)" : "* Wraps a {@code Runnable} for submission to the underlying executor. The default implementation\n   * delegates to {@link #wrapTask(Callable)}.",
  "com.google.common.collect.TreeRangeMap$1:span()" : null,
  "com.google.common.collect.SortedMultisets$NavigableElementSet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lastEntry()" : null,
  "com.google.common.cache.CacheBuilderSpec:hashCode()" : null,
  "com.google.common.cache.CacheBuilder:weakValues()" : "* Specifies that each value (not key) stored in the cache should be wrapped in a {@link\n   * WeakReference} (by default, strong references are used).\n   *\n   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor\n   * candidate for caching; consider {@link #softValues} instead.\n   *\n   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})\n   * comparison to determine equality of values.\n   *\n   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},\n   * but will never be visible to read or write operations; such entries are cleaned up as part of\n   * the routine maintenance described in the class javadoc.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalStateException if the value strength was already set",
  "com.google.common.collect.FilteredKeyMultimap:createAsMap()" : null,
  "com.google.common.base.SmallCharMatcher:setBits(java.util.BitSet)" : null,
  "com.google.common.math.BigIntegerMath:log10(java.math.BigInteger,java.math.RoundingMode)" : "* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not a power of ten",
  "com.google.common.graph.Graphs:checkNonNegative(long)" : null,
  "com.google.common.util.concurrent.AbstractFuture:pendingToString()" : "* Provide a human-readable explanation of why this future has not yet completed.\n   *\n   * @return null if an explanation cannot be provided (e.g. because the future is done).\n   * @since 23.0",
  "com.google.common.collect.Multisets$ViewMultiset:size()" : null,
  "com.google.common.collect.CompactHashMap$ValuesView:toArray(java.lang.Object[])" : null,
  "com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Object)" : "* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in\n   * the order of a depth-first pre-order traversal. \"Pre-order\" implies that nodes appear in the\n   * {@code Iterable} in the order in which they are first visited.\n   *\n   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in\n   * the order {@code abecfd} (assuming successors are returned in alphabetical order).\n   *\n   * {@snippet :\n   * b ---- a ---- d\n   * |      |\n   * |      |\n   * e ---- c ---- f\n   * }\n   *\n   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change\n   * while iteration is in progress.\n   *\n   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will\n   * compute its next element on the fly. It is thus possible to limit the traversal to a certain\n   * number of nodes as follows:\n   *\n   * {@snippet :\n   * Iterables.limit(\n   *     Traverser.forGraph(graph).depthFirstPreOrder(node), maxNumberOfNodes);\n   * }\n   *\n   * <p>See <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">Wikipedia</a> for more info.\n   *\n   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",
  "com.google.common.reflect.Parameter:isAnnotationPresent(java.lang.Class)" : null,
  "com.google.common.util.concurrent.Futures:whenAllSucceed(java.lang.Iterable)" : "* Creates a {@link FutureCombiner} requiring that all passed in futures are successful.\n   *\n   * <p>If any input fails, the returned future fails immediately.\n   *\n   * @since 20.0",
  "com.google.common.cache.CacheBuilder:<init>()" : null,
  "com.google.common.collect.CompactHashSet:insertEntry(int,java.lang.Object,int,int)" : "* Creates a fresh entry with the specified object at the specified position in the entry arrays.",
  "com.google.common.collect.ForwardingCollection:toArray(java.lang.Object[])" : null,
  "com.google.common.primitives.Chars:<init>()" : null,
  "com.google.common.collect.ImmutableSortedMap:<init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.SingletonImmutableTable:size()" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:replaceAll(java.util.function.UnaryOperator)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:pollLast()" : "* Removes and returns the greatest element of this queue, or returns {@code null} if the queue is\n   * empty.",
  "com.google.common.base.Equivalence$Equals:doEquivalent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:declaresInterruptedEx(java.lang.reflect.Method)" : null,
  "com.google.common.collect.Maps$IteratorBasedAbstractMap:clear()" : null,
  "com.google.common.graph.StandardValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.CompactLinkedHashMap:clear()" : null,
  "com.google.common.cache.LocalCache$ManualSerializationProxy:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher:dispatch(java.lang.Object,java.util.Iterator)" : null,
  "com.google.common.util.concurrent.ClosingFuture:checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)" : null,
  "com.google.common.math.LinearTransformation$LinearTransformationBuilder:and(double,double)" : "* Finish building an instance which also maps {@code x = x2} to {@code y = y2}. These values\n     * must not both be identical to the values given in the first mapping. If only the {@code x}\n     * values are identical, the transformation is vertical. If only the {@code y} values are\n     * identical, the transformation is horizontal (i.e. the slope is zero).",
  "com.google.common.collect.DescendingMultiset:toArray()" : null,
  "com.google.common.reflect.Types:subtypeOfComponentType(java.lang.reflect.Type[])" : "* Returns {@code ? extends X} if any of {@code bounds} is a subtype of {@code X[]}; or null\n   * otherwise.",
  "com.google.common.collect.MinMaxPriorityQueue:pollFirst()" : "* Removes and returns the least element of this queue, or returns {@code null} if the queue is\n   * empty.",
  "com.google.common.reflect.TypeToken:canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type)" : "* In reflection, {@code Foo<?>.getUpperBounds()[0]} is always {@code Object.class}, even when Foo\n   * is defined as {@code Foo<T extends String>}. Thus directly calling {@code <?>.is(String.class)}\n   * will return false. To mitigate, we canonicalize wildcards by enforcing the following\n   * invariants:\n   *\n   * <ol>\n   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n   *       Enum<? extends Enum<E>}.\n   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n   *       the upper bound is implicitly an Enum too).\n   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n   * </ol>",
  "com.google.common.primitives.UnsignedLongs:remainder(long,long)" : "* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit\n   * quantities.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Long#remainderUnsigned(long, long)} instead.\n   *\n   * @param dividend the dividend (numerator)\n   * @param divisor the divisor (denominator)\n   * @throws ArithmeticException if divisor is 0\n   * @since 11.0",
  "com.google.common.collect.CompactHashMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Comparators:least(int,java.util.Comparator)" : "* Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified\n   * {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties\n   * are broken arbitrarily.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * Stream.of(\"foo\", \"quux\", \"banana\", \"elephant\")\n   *     .collect(least(2, comparingInt(String::length)))\n   * // returns {\"foo\", \"quux\"}\n   * }\n   *\n   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log\n   * k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n\n   * log n) time and O(n) space.\n   *\n   * @throws IllegalArgumentException if {@code k < 0}\n   * @since 22.0",
  "com.google.common.util.concurrent.RateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:delegate()" : null,
  "com.google.common.base.CharMatcher$Or:negate()" : null,
  "com.google.common.cache.LocalCache$AccessQueue:peek()" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.Maps$IteratorBasedAbstractMap:forEachEntry(java.util.function.Consumer)" : null,
  "com.google.common.base.Stopwatch:createStarted(com.google.common.base.Ticker)" : "* Creates (and starts) a new stopwatch, using the specified time source.\n   *\n   * @since 15.0",
  "com.google.common.cache.CacheBuilder:concurrencyLevel(int)" : "* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The\n   * table is internally partitioned to try to permit the indicated number of concurrent updates\n   * without contention. Because assignment of entries to these partitions is not necessarily\n   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to\n   * accommodate as many threads as will ever concurrently modify the table. Using a significantly\n   * higher value than you need can waste space and time, and a significantly lower value can lead\n   * to thread contention. But overestimates and underestimates within an order of magnitude do not\n   * usually have much noticeable impact. A value of one permits only one thread to modify the cache\n   * at a time, but since read operations and cache loading computations can proceed concurrently,\n   * this still yields higher concurrency than full synchronization.\n   *\n   * <p>Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this\n   * value, you should always choose it explicitly.\n   *\n   * <p>The current implementation uses the concurrency level to create a fixed number of hashtable\n   * segments, each governed by its own write lock. The segment lock is taken once for each explicit\n   * write, and twice for each cache loading computation (once prior to loading the new value, and\n   * once after loading completes). Much internal cache management is performed at the segment\n   * granularity. For example, access queues and write queues are kept per segment when they are\n   * required by the selected eviction algorithm. As such, when writing unit tests it is not\n   * uncommon to specify {@code concurrencyLevel(1)} in order to achieve more deterministic eviction\n   * behavior.\n   *\n   * <p>Note that future implementations may abandon segment locking in favor of more advanced\n   * concurrency controls.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive\n   * @throws IllegalStateException if a concurrency level was already set",
  "com.google.common.graph.StandardNetwork:containsEdge(java.lang.Object)" : null,
  "com.google.common.collect.AbstractTable$CellSet:iterator()" : null,
  "com.google.common.collect.ImmutableSetMultimap:invert()" : null,
  "com.google.common.collect.Sets$CartesianSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(long,java.util.concurrent.TimeUnit)" : "* @param delay the time from now to delay execution\n       * @param unit the time unit of the delay parameter",
  "com.google.common.primitives.Longs:<init>()" : null,
  "com.google.common.primitives.Longs$LexicographicalComparator:compare(long[],long[])" : null,
  "com.google.common.collect.AbstractMultimap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.Booleans:toArray(java.util.Collection)" : "* Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean}\n   * values.\n   *\n   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n   * Calling this method is as thread-safe as calling that method.\n   *\n   * <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead.\n   *\n   * @param collection a collection of {@code Boolean} objects\n   * @return an array containing the same values as {@code collection}, in the same order, converted\n   *     to primitives\n   * @throws NullPointerException if {@code collection} or any of its elements is null",
  "com.google.common.base.Verify:verify(boolean,java.lang.String,long,char)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.ImmutableSortedMap:get(java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$Alphabet:upperCase()" : null,
  "com.google.common.collect.ConcurrentHashMultiset$3:next()" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.cache.LocalCache:computeIfAbsent(java.lang.Object,java.util.function.Function)" : null,
  "com.google.common.collect.TreeMultiset:<init>(java.util.Comparator)" : null,
  "com.google.common.collect.TransformedListIterator:<init>(java.util.ListIterator)" : null,
  "com.google.common.collect.ComparisonChain$1:compare(java.lang.Comparable,java.lang.Comparable)" : "* Compares two comparable objects as specified by {@link Comparable#compareTo}, <i>if</i> the\n   * result of this comparison chain has not already been determined.\n   *\n   * <p>This method is declared to accept any 2 {@code Comparable} objects, even if they are not <a\n   * href=\"https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html\">mutually\n   * comparable</a>. If you pass objects that are not mutually comparable, this method may throw an\n   * exception. (The reason for this decision is lost to time, but the reason <i>might</i> be that\n   * we wanted to support legacy classes that implement the raw type {@code Comparable} (instead of\n   * implementing {@code Comparable<Foo>}) without producing warnings. If so, we would prefer today\n   * to produce warnings in that case, and we may change this method to do so in the future. Support\n   * for raw {@code Comparable} types in Guava in general is tracked as <a\n   * href=\"https://github.com/google/guava/issues/989\">#989</a>.)\n   *\n   * @throws ClassCastException if the parameters are not mutually comparable",
  "com.google.common.util.concurrent.FluentFuture:withTimeout(long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)" : "* Returns a future that delegates to this future but will finish early (via a {@link\n   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.\n   * If the timeout expires, not only will the output future finish, but also the input future\n   * ({@code this}) will be cancelled and interrupted.\n   *\n   * @param timeout when to time out the future\n   * @param unit the time unit of the time parameter\n   * @param scheduledExecutor The executor service to enforce the timeout.",
  "com.google.common.collect.Hashing:smearedHash(java.lang.Object)" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingIterator()" : null,
  "com.google.common.collect.ImmutableSetMultimap$Builder:put(java.lang.Object,java.lang.Object)" : "Adds a key-value mapping to the built multimap if it is not already present.",
  "com.google.common.base.Functions:forPredicate(com.google.common.base.Predicate)" : "* Creates a function that returns the same boolean output as the given predicate for all inputs.\n   *\n   * <p>The returned function is <i>consistent with equals</i> (as documented at {@link\n   * Function#apply}) if and only if {@code predicate} is itself consistent with equals.\n   *\n   * <p>Prefer to use the method reference {@code predicate::test} instead. Note that it is not\n   * serializable unless you explicitly make it {@link Serializable}, typically by writing {@code\n   * (Function<T, Boolean> & Serializable) predicate::test}.",
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:isDone()" : null,
  "com.google.common.collect.Sets$DescendingSet:pollLast()" : null,
  "com.google.common.collect.ForwardingNavigableSet:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Maps:newTreeMap(java.util.SortedMap)" : "* Creates a <i>mutable</i> {@code TreeMap} instance with the same mappings as the specified map\n   * and using the same ordering as the specified map.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link\n   * ImmutableSortedMap#copyOfSorted(SortedMap)} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code TreeMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @param map the sorted map whose mappings are to be placed in the new map and whose comparator\n   *     is to be used to sort the new map\n   * @return a new {@code TreeMap} initialized with the mappings from {@code map} and using the\n   *     comparator of {@code map}",
  "com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(int)" : null,
  "com.google.common.collect.DenseImmutableTable:columnMap()" : null,
  "com.google.common.util.concurrent.ClosingFuture$CloseableList:whenClosedCountDown()" : "* Returns a latch that reaches zero when this objects' deferred closeables have been closed.",
  "com.google.common.collect.Range:encloseAll(java.lang.Iterable)" : "* Returns the minimal range that {@linkplain Range#contains(Comparable) contains} all of the\n   * given values. The returned range is {@linkplain BoundType#CLOSED closed} on both ends.\n   *\n   * @throws ClassCastException if the values are not mutually comparable\n   * @throws NoSuchElementException if {@code values} is empty\n   * @throws NullPointerException if any of {@code values} is null\n   * @since 14.0",
  "com.google.common.collect.RegularImmutableMap$KeySet:get(int)" : null,
  "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:mixK2(long)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:keys()" : null,
  "com.google.common.cache.CacheStats:missRate()" : "* Returns the ratio of cache requests which were misses. This is defined as {@code missCount /\n   * requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate +\n   * missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including\n   * requests which resulted in either successful or failed loading attempts, and requests which\n   * waited for other threads to finish loading. It is thus the case that {@code missCount >=\n   * loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result\n   * in a single load operation.",
  "com.google.common.util.concurrent.ServiceManager$NoOpService:doStop()" : null,
  "com.google.common.graph.NetworkBuilder:immutable()" : "* Returns an {@link ImmutableNetwork.Builder} with the properties of this {@link NetworkBuilder}.\n   *\n   * <p>The returned builder can be used for populating an {@link ImmutableNetwork}.\n   *\n   * @since 28.0",
  "com.google.common.collect.SortedMultisets$NavigableElementSet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.cache.CacheStats:loadExceptionRate()" : "* Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code\n   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code\n   * loadSuccessCount + loadExceptionCount == 0}.\n   *\n   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is\n   * guaranteed not to throw an exception). If you require specific handling, we recommend\n   * implementing your own stats collector.",
  "com.google.common.collect.TransformedIterator:<init>(java.util.Iterator)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:getValue()" : null,
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided\n   * @since 31.0",
  "com.google.common.collect.ArrayTable$ColumnMap:put(java.lang.Object,java.util.Map)" : null,
  "com.google.common.base.AbstractIterator:hasNext()" : null,
  "com.google.common.primitives.Ints$IntArrayAsList:contains(java.lang.Object)" : null,
  "com.google.common.graph.ValueGraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder)" : "* Specifies the order of iteration for the elements of {@link ValueGraph#edges()}, {@link\n   * ValueGraph#adjacentNodes(Object)}, {@link ValueGraph#predecessors(Object)}, {@link\n   * ValueGraph#successors(Object)} and {@link ValueGraph#incidentEdges(Object)}.\n   *\n   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For\n   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()\n   * stable} order.\n   *\n   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code\n   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.\n   * @since 29.0",
  "com.google.common.graph.StandardMutableGraph:putEdge(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ClosingFuture$CloseableList:add(java.lang.AutoCloseable,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.TreeTraverser:breadthFirstTraversal(java.lang.Object)" : "* Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first\n   * traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.\n   *\n   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration\n   * is in progress or when the iterators generated by {@link #children} are advanced.\n   *\n   * @deprecated Use {@link com.google.common.graph.Traverser#breadthFirst} instead, which has the\n   *     same behavior.",
  "com.google.common.cache.LocalCache$Values:size()" : null,
  "com.google.common.collect.ImmutableTable$Builder:put(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built\n     * table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.",
  "com.google.common.collect.Maps$UnmodifiableEntries:delegate()" : null,
  "com.google.common.cache.CacheLoader$1:loadAll(java.lang.Iterable)" : "* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link\n   * LoadingCache#getAll}.\n   *\n   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does\n   * contain will be cached, but {@code getAll} will throw an exception. If the returned map\n   * contains extra keys not present in {@code keys} then all returned entries will be cached, but\n   * only the entries for {@code keys} will be returned from {@code getAll}.\n   *\n   * <p>This method should be overridden when bulk retrieval is significantly more efficient than\n   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls\n   * to {@link LoadingCache#get} if this method is not overridden.\n   *\n   * @param keys the unique, non-null keys whose values should be loaded\n   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not\n   *     contain null values</b>\n   * @throws Exception if unable to load the result\n   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is\n   *     treated like any other {@code Exception} in all respects except that, when it is caught,\n   *     the thread's interrupt status is set\n   * @since 11.0",
  "com.google.common.graph.AbstractValueGraph:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object,boolean)" : null,
  "com.google.common.collect.TreeMultimap:createAsMap()" : null,
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:transform(double)" : null,
  "com.google.common.net.InetAddresses:isInetAddress(java.lang.String)" : "* Returns {@code true} if the supplied string is a valid IP string literal, {@code false}\n   * otherwise.\n   *\n   * <p>This method accepts non-ASCII digits, for example {@code \"１９２.１６８.０.１\"} (those are fullwidth\n   * characters). That is consistent with {@link InetAddress}, but not with various RFCs. If you\n   * want to accept ASCII digits only, you can use something like {@code\n   * CharMatcher.ascii().matchesAllOf(ipString)}.\n   *\n   * <p>Note that if this method returns {@code true}, a call to {@link #forString(String)} can\n   * still throw if the address has a scope ID that fails validation against the interfaces on the\n   * machine.\n   *\n   * @param ipString {@code String} to evaluated as an IP string literal\n   * @return {@code true} if the argument is a valid IP string literal",
  "com.google.common.graph.DirectedGraphConnections:isPredecessor(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardCeilingEntry(java.lang.Object)" : "* A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link\n   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code\n   * ceilingEntry} to forward to this implementation.",
  "com.google.common.io.CharSource$ConcatenatedCharSource:lengthIfKnown()" : null,
  "com.google.common.primitives.Bytes:rotate(byte[],int,int,int)" : "* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code\n   * toIndex} exclusive. This is equivalent to {@code\n   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat\n   * faster.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 32.0.0",
  "com.google.common.graph.ImmutableValueGraph:asGraph()" : null,
  "com.google.common.collect.ComparatorOrdering:hashCode()" : null,
  "com.google.common.collect.Sets$SetView:remove(java.lang.Object)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n     *\n     * @throws UnsupportedOperationException always\n     * @deprecated Unsupported operation.",
  "com.google.common.base.MoreObjects$ToStringHelper:<init>(java.lang.String)" : "Use {@link MoreObjects#toStringHelper(Object)} to create an instance.",
  "com.google.common.collect.AbstractMapBasedMultimap:entries()" : "* {@inheritDoc}\n   *\n   * <p>The iterator generated by the returned collection traverses the values for one key, followed\n   * by the values of a second key, and so on.\n   *\n   * <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the\n   * time the entry is returned by a method call to the collection or its iterator.",
  "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:dispatch()" : "* Dispatches all listeners {@linkplain #enqueue enqueued} prior to this call, serially and in\n     * order.",
  "com.google.common.collect.EnumBiMap:checkKey(java.lang.Object)" : null,
  "com.google.common.base.CaseFormat:converterTo(com.google.common.base.CaseFormat)" : "* Returns a serializable {@code Converter} that converts strings from this format to {@code\n   * targetFormat}.\n   *\n   * @since 16.0",
  "com.google.common.collect.CompactHashMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.base.Defaults:defaultValue(java.lang.Class)" : "* Returns the default value of {@code type} as defined by JLS --- {@code 0} for numbers, {@code\n   * false} for {@code boolean} and {@code '\\0'} for {@code char}. For non-primitive types and\n   * {@code void}, {@code null} is returned.",
  "com.google.common.collect.Tables$TransformedTable:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:self()" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:getAllPresent(java.lang.Iterable)" : null,
  "com.google.common.primitives.Floats:constrainToRange(float,float,float)" : "* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.\n   *\n   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned\n   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n   * value} is greater than {@code max}, {@code max} is returned.\n   *\n   * <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead.\n   *\n   * @param value the {@code float} value to constrain\n   * @param min the lower bound (inclusive) of the range to constrain {@code value} to\n   * @param max the upper bound (inclusive) of the range to constrain {@code value} to\n   * @throws IllegalArgumentException if {@code min > max}\n   * @since 21.0",
  "com.google.common.collect.DescendingImmutableSortedMultiset:lastEntry()" : null,
  "com.google.common.collect.Iterables:get(java.lang.Iterable,int)" : "* Returns the element at the specified position in an iterable.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws\n   * {@code NoSuchElementException} if out of bounds)\n   *\n   * @param position position of the element to return\n   * @return the element at the specified position in {@code iterable}\n   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to\n   *     the size of {@code iterable}",
  "com.google.common.collect.ForwardingTable:isEmpty()" : null,
  "com.google.common.collect.ImmutableRangeSet:intersectRanges(com.google.common.collect.Range)" : "* Returns a list containing the nonempty intersections of {@code range} with the ranges in this\n   * range set.",
  "com.google.common.cache.LocalCache$LoadingSerializationProxy:<init>(com.google.common.cache.LocalCache)" : null,
  "com.google.common.hash.MacHashFunction$MacHasher:hash()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Maps$DescendingMap:lastKey()" : null,
  "com.google.common.collect.CompactHashMap$EntrySetView:contains(java.lang.Object)" : null,
  "com.google.common.base.Predicates$InstanceOfPredicate:<init>(java.lang.Class)" : null,
  "com.google.common.collect.ForwardingList:delegate()" : null,
  "com.google.common.io.CharSink:writeLines(java.util.stream.Stream,java.lang.String)" : "* Writes the given lines of text to this sink with each line (including the last) terminated with\n   * the given line separator.\n   *\n   * @throws IOException if an I/O error occurs while writing to this sink\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.MultimapBuilder$ListMultimapBuilder:build(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.ImmutableSortedSet:of()" : "* Returns the empty immutable sorted set.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.util.concurrent.ImmediateFuture:get()" : null,
  "com.google.common.hash.Java8Compatibility:flip(java.nio.Buffer)" : null,
  "com.google.common.collect.Multimaps:equalsImpl(com.google.common.collect.Multimap,java.lang.Object)" : null,
  "com.google.common.collect.ObjectArrays:copyAsObjectArray(java.lang.Object[],int,int)" : "* Returns a copy of the specified subrange of the specified array that is literally an Object[],\n   * and not e.g. a {@code String[]}.",
  "com.google.common.collect.ForwardingListIterator:hasPrevious()" : null,
  "com.google.common.hash.HashCode:fromLong(long)" : "* Creates a 64-bit {@code HashCode} representation of the given long value. The underlying bytes\n   * are interpreted in little endian order.\n   *\n   * @since 15.0 (since 12.0 in HashCodes)",
  "com.google.common.collect.Maps:filterEntries(java.util.NavigableMap,com.google.common.base.Predicate)" : "* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.\n   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code\n   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the\n   * map's entries have a {@link Entry#setValue} method that throws an {@link\n   * IllegalArgumentException} when the existing key and the provided value don't satisfy the\n   * predicate.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings that satisfy the filter will be removed from the underlying map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}.\n   *\n   * @since 14.0",
  "com.google.common.collect.RegularImmutableSortedSet:createDescendingSet()" : null,
  "com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)" : "* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, Duration)}, but with a\n   * different behavior in case it is interrupted while waiting. In that case, the operation will\n   * continue as usual, and in the end the thread's interruption status will be set (no {@code\n   * InterruptedException} is thrown).\n   *\n   * @param q the blocking queue to be drained\n   * @param buffer where to add the transferred elements\n   * @param numElements the number of elements to be waited for\n   * @param timeout how long to wait before giving up\n   * @return the number of elements transferred\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.ExecutionSequencer:create()" : "Creates a new instance.",
  "com.google.common.util.concurrent.ClosingFuture$Combiner2:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner2$AsyncClosingFunction2,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * {@code ClosingFuture}-returning function to their values. The function can use a {@link\n     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those\n     * captured by the returned {@link ClosingFuture}).\n     *\n     * <p>If this combiner was returned by {@link #whenAllSucceed(ClosingFuture, ClosingFuture)} and\n     * any of the inputs fail, so will the returned step.\n     *\n     * <p>If the function throws a {@code CancellationException}, the pipeline will be cancelled.\n     *\n     * <p>If the function throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and used as the failure of the derived step.\n     *\n     * <p>If the function throws any other exception, it will be used as the failure of the derived\n     * step.\n     *\n     * <p>If an exception is thrown after the function creates a {@code ClosingFuture}, then none of\n     * the closeable objects in that {@code ClosingFuture} will be closed.\n     *\n     * <p>Usage guidelines for this method:\n     *\n     * <ul>\n     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a\n     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,\n     *       Executor)} instead, with a function that returns the next value directly.\n     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}\n     *       for every closeable object this step creates in order to capture it for later closing.\n     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code\n     *       ClosingFuture} call {@link #from(ListenableFuture)}.\n     * </ul>\n     *\n     * <p>The same warnings about doing heavyweight operations within {@link\n     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",
  "com.google.common.collect.Range:intersection(com.google.common.collect.Range)" : "* Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code\n   * connectedRange}, if such a range exists.\n   *\n   * <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The\n   * resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)}\n   * yields the empty range {@code [5..5)}.\n   *\n   * <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected\n   * connected}.\n   *\n   * <p>The intersection operation is commutative, associative and idempotent, and its identity\n   * element is {@link Range#all}).\n   *\n   * @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}",
  "com.google.common.collect.AbstractNavigableMap:pollFirstEntry()" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:lower(java.lang.Object)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:<init>(java.io.ByteArrayOutputStream)" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$3:getInterfaces(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:keyStrength()" : null,
  "com.google.common.reflect.Parameter:getAnnotations()" : null,
  "com.google.common.graph.IncidentEdgeSet:contains(java.lang.Object)" : null,
  "com.google.common.base.Predicates$SubtypeOfPredicate:equals(java.lang.Object)" : null,
  "com.google.common.collect.DescendingImmutableSortedMultiset:elementSet()" : null,
  "com.google.common.eventbus.SubscriberRegistry:register(java.lang.Object)" : "Registers all subscriber methods on the given listener object.",
  "com.google.common.util.concurrent.Uninterruptibles:sleepUninterruptibly(java.time.Duration)" : "* Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly.\n   *\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask:runInterruptibly()" : null,
  "com.google.common.primitives.Floats$FloatConverter:doBackward(java.lang.Float)" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner3:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner3$AsyncClosingFunction3,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * {@code ClosingFuture}-returning function to their values. The function can use a {@link\n     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those\n     * captured by the returned {@link ClosingFuture}).\n     *\n     * <p>If this combiner was returned by {@link #whenAllSucceed(ClosingFuture, ClosingFuture,\n     * ClosingFuture)} and any of the inputs fail, so will the returned step.\n     *\n     * <p>If the function throws a {@code CancellationException}, the pipeline will be cancelled.\n     *\n     * <p>If the function throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and used as the failure of the derived step.\n     *\n     * <p>If the function throws any other exception, it will be used as the failure of the derived\n     * step.\n     *\n     * <p>If an exception is thrown after the function creates a {@code ClosingFuture}, then none of\n     * the closeable objects in that {@code ClosingFuture} will be closed.\n     *\n     * <p>Usage guidelines for this method:\n     *\n     * <ul>\n     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a\n     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,\n     *       Executor)} instead, with a function that returns the next value directly.\n     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}\n     *       for every closeable object this step creates in order to capture it for later closing.\n     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code\n     *       ClosingFuture} call {@link #from(ListenableFuture)}.\n     * </ul>\n     *\n     * <p>The same warnings about doing heavyweight operations within {@link\n     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",
  "com.google.common.collect.Synchronized$SynchronizedAsMap:values()" : null,
  "com.google.common.collect.ImmutableEnumMap$EnumSerializedForm:<init>(java.util.EnumMap)" : null,
  "com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate)" : "* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered\n   * navigable map.",
  "com.google.common.primitives.Chars$CharArrayAsList:toCharArray()" : null,
  "com.google.common.collect.ImmutableMultiset$SerializedForm:<init>(com.google.common.collect.Multiset)" : null,
  "com.google.common.primitives.Doubles:compare(double,double)" : "* Compares the two specified {@code double} values. The sign of the value returned is the same as\n   * that of <code>((Double) a).{@linkplain Double#compareTo compareTo}(b)</code>. As with that\n   * method, {@code NaN} is treated as greater than all other values, and {@code 0.0 > -0.0}.\n   *\n   * <p><b>Note:</b> this method simply delegates to the JDK method {@link Double#compare}. It is\n   * provided for consistency with the other primitive types, whose compare methods were not added\n   * to the JDK until JDK 7.\n   *\n   * @param a the first {@code double} to compare\n   * @param b the second {@code double} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.collect.ImmutableSet$SetBuilderImpl:combine(com.google.common.collect.ImmutableSet$SetBuilderImpl)" : "Adds all the elements from the specified SetBuilderImpl to this SetBuilderImpl.",
  "com.google.common.collect.AbstractMultiset:remove(java.lang.Object)" : null,
  "com.google.common.cache.CacheBuilder:expireAfterAccess(java.time.Duration)" : "* Specifies that each entry should be automatically removed from the cache once a fixed duration\n   * has elapsed after the entry's creation, the most recent replacement of its value, or its last\n   * access. Access time is reset by all cache read and write operations (including {@code\n   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code\n   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}}. So,\n   * for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for\n   * the entries you retrieve.\n   *\n   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)\n   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be\n   * useful in testing, or to disable caching temporarily without a code change.\n   *\n   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or\n   * write operations. Expired entries are cleaned up as part of the routine maintenance described\n   * in the class javadoc.\n   *\n   * @param duration the length of time after an entry is last accessed that it should be\n   *     automatically removed\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code duration} is negative\n   * @throws IllegalStateException if {@link #expireAfterAccess} was already set\n   * @throws ArithmeticException for durations greater than +/- approximately 292 years\n   * @since 25.0 (but only since 33.3.0 in the Android <a\n   *     href=\"https://github.com/google/guava#guava-google-core-libraries-for-java\">flavor</a>)",
  "com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int[])" : null,
  "com.google.common.collect.Maps$BiMapConverter:doForward(java.lang.Object)" : null,
  "com.google.common.reflect.Invokable:getDeclaredAnnotations()" : null,
  "com.google.common.collect.ExplicitOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.net.InetAddresses:getCompatIPv4Address(java.net.Inet6Address)" : "* Returns the IPv4 address embedded in an IPv4 compatible address.\n   *\n   * @param ip {@link Inet6Address} to be examined for an embedded IPv4 address\n   * @return {@link Inet4Address} of the embedded IPv4 address\n   * @throws IllegalArgumentException if the argument is not a valid IPv4 compatible address",
  "com.google.common.collect.Cut$BelowValue:typeAsUpperBound()" : null,
  "com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)" : "* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application\n   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their\n   * completion.\n   *\n   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.\n   *\n   * @param executor the executor to modify to make sure it exits when the application is finished\n   * @param terminationTimeout how long to wait for the executor to finish before terminating the\n   *     JVM\n   * @param timeUnit unit of time for the time parameter\n   * @return an unmodifiable version of the input which will not hang the JVM",
  "com.google.common.collect.TreeMultiset$AvlNode:succ()" : null,
  "com.google.common.reflect.Invokable$MethodInvokable:getGenericParameterTypes()" : null,
  "com.google.common.base.Splitter:splittingIterator(java.lang.CharSequence)" : null,
  "com.google.common.reflect.Types$WildcardTypeImpl:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableAsList$SerializedForm:readResolve()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:addAll(java.util.Collection)" : null,
  "com.google.common.collect.Sets$SetView:<init>()" : null,
  "com.google.common.base.CharMatcher:trimAndCollapseFrom(java.lang.CharSequence,char)" : "* Collapses groups of matching characters exactly as {@link #collapseFrom} does, except that\n   * groups of matching BMP characters at the start or end of the sequence are removed without\n   * replacement.",
  "com.google.common.collect.ImmutableMultiset:remove(java.lang.Object,int)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:process(java.nio.ByteBuffer)" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:<init>(java.util.Map$Entry)" : null,
  "com.google.common.io.Files:touch(java.io.File)" : "* Creates an empty file or updates the last updated timestamp on the same as the unix command of\n   * the same name.\n   *\n   * @param file the file to create or update\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.ImmutableSortedSet:lower(java.lang.Object)" : "* @since 12.0",
  "com.google.common.base.FinalizableSoftReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)" : "* Constructs a new finalizable soft reference.\n   *\n   * @param referent to softly reference\n   * @param queue that should finalize the referent",
  "com.google.common.collect.ForwardingTable:values()" : null,
  "com.google.common.base.Functions$ConstantFunction:apply(java.lang.Object)" : null,
  "com.google.common.collect.Iterables:filter(java.lang.Iterable,java.lang.Class)" : "* Returns a view of {@code unfiltered} containing all elements that are of the type {@code\n   * desiredType}. The returned iterable's iterator does not support {@code remove()}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.\n   * This does perform a little more work than necessary, so another option is to insert an\n   * unchecked cast at some later point:\n   *\n   * {@snippet :\n   * @SuppressWarnings(\"unchecked\") // safe because of ::isInstance check\n   * ImmutableList<NewType> result =\n   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());\n   * }",
  "com.google.common.collect.Iterables:size(java.lang.Iterable)" : "Returns the number of elements in {@code iterable}.",
  "com.google.common.base.CaseFormat$5:convert(com.google.common.base.CaseFormat,java.lang.String)" : "Enum values can override for performance reasons.",
  "com.google.common.reflect.ClassPath$ResourceInfo:of(java.io.File,java.lang.String,java.lang.ClassLoader)" : null,
  "com.google.common.collect.CompactLinkedHashMap:getPredecessor(int)" : null,
  "com.google.common.collect.Iterables:get(java.lang.Iterable,int,java.lang.Object)" : "* Returns the element at the specified position in an iterable or a default value otherwise.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code\n   * stream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index\n   * is out of bounds)\n   *\n   * @param position position of the element to return\n   * @param defaultValue the default value to return if {@code position} is greater than or equal to\n   *     the size of the iterable\n   * @return the element at the specified position in {@code iterable} or {@code defaultValue} if\n   *     {@code iterable} contains fewer than {@code position + 1} elements.\n   * @throws IndexOutOfBoundsException if {@code position} is negative\n   * @since 4.0",
  "com.google.common.base.Predicates:compose(com.google.common.base.Predicate,com.google.common.base.Function)" : "* Returns the composition of a function and a predicate. For every {@code x}, the generated\n   * predicate returns {@code predicate(function(x))}.\n   *\n   * @return the composition of the provided function and predicate",
  "com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class)" : "* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n   * RuntimeException}, {@link Error}, or {@code declaredType}.\n   *\n   * <p><b>Discouraged</b> in favor of calling {@link #throwIfInstanceOf} and {@link\n   * #throwIfUnchecked}.\n   *\n   * @param throwable the Throwable to possibly propagate\n   * @param declaredType the single checked exception type declared by the calling method\n   * @deprecated Use a combination of {@link #throwIfInstanceOf} and {@link #throwIfUnchecked},\n   *     which togther provide the same behavior except that they reject {@code null}.",
  "com.google.common.reflect.TypeToken:<init>(java.lang.Class)" : "* Constructs a new type token of {@code T} while resolving free type variables in the context of\n   * {@code declaringClass}.\n   *\n   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the\n   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * abstract class IKnowMyType<T> {\n   *   TypeToken<T> getMyType() {\n   *     return new TypeToken<T>(getClass()) {};\n   *   }\n   * }\n   *\n   * new IKnowMyType<String>() {}.getMyType() => String\n   * }",
  "com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:size()" : null,
  "com.google.common.collect.IndexedImmutableSet:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueSet:getSuccessorInValueSet()" : null,
  "com.google.common.escape.ArrayBasedCharEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,char,char)" : "* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe\n   * range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is\n   * useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large\n   * replacement mappings.\n   *\n   * <p>If a character has no mapped replacement then it is checked against the safe range. If it\n   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.\n   *\n   * @param escaperMap the mapping of characters to be escaped\n   * @param safeMin the lowest character value in the safe range\n   * @param safeMax the highest character value in the safe range",
  "com.google.common.cache.LocalCache$EntryFactory$3:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedSet$Builder:copy()" : null,
  "com.google.common.hash.Hashing:<init>()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long,java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.CompactHashMap$EntrySetView:iterator()" : null,
  "com.google.common.collect.ForwardingCollection:standardRemove(java.lang.Object)" : "* A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's\n   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link\n   * #remove} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.util.concurrent.ListenableFutureTask:done()" : "Internal implementation detail used to invoke the listeners.",
  "com.google.common.primitives.Shorts:fromByteArray(byte[])" : "* Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes\n   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the\n   * input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.\n   *\n   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n   * flexibility at little cost in readability.\n   *\n   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",
  "com.google.common.collect.Comparators:isInStrictOrder(java.lang.Iterable,java.util.Comparator)" : "* Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i>\n   * greater than the element that preceded it, according to the specified comparator. Note that\n   * this is always true when the iterable has fewer than two elements.",
  "com.google.common.collect.CompactHashMap$MapEntry:setValue(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ContiguousSet:builder()" : "* Not supported. {@code ContiguousSet} instances are constructed with {@link #create}. This\n   * method exists only to hide {@link ImmutableSet#builder} from consumers of {@code\n   * ContiguousSet}.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Use {@link #create}.",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char,char)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.util.concurrent.AbstractFuture:setException(java.lang.Throwable)" : "* Sets the failed result of this {@code Future} unless this {@code Future} has already been\n   * cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this\n   * method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b>\n   * the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the\n   * {@code Future} may have previously been set asynchronously, in which case its result may not be\n   * known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}\n   * method, only by a call to {@link #cancel}.\n   *\n   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or\n   * acquire other locks, risking deadlocks.\n   *\n   * @param throwable the exception to be used as the failed result\n   * @return true if the attempt was accepted, completing the {@code Future}",
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:headMap(java.lang.Object,boolean)" : null,
  "com.google.common.collect.JdkBackedImmutableMap:create(int,java.util.Map$Entry[],boolean)" : "* Creates an {@code ImmutableMap} backed by a JDK HashMap. Used when probable hash flooding is\n   * detected. This implementation may replace the entries in entryArray with its own entry objects\n   * (though they will have the same key/value contents), and will take ownership of entryArray.",
  "com.google.common.base.Converter$ReverseConverter:correctedDoBackward(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap:computeIfAbsent(java.lang.Object,java.util.function.Function)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.util.concurrent.ClosingFuture:transform(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function\n   * to its value. The function can use a {@link DeferredCloser} to capture objects to be closed\n   * when the pipeline is done.\n   *\n   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code\n   * ClosingFuture} will be equivalent to this one.\n   *\n   * <p>If the function throws an exception, that exception is used as the result of the derived\n   * {@code ClosingFuture}.\n   *\n   * <p>Example usage:\n   *\n   * {@snippet :\n   * ClosingFuture<List<Row>> rowsFuture =\n   *     queryFuture.transform((closer, result) -> result.getRows(), executor);\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings\n   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.\n   *\n   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link\n   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on\n   * the original {@code ClosingFuture} instance.\n   *\n   * @param function transforms the value of this step to the value of the derived step\n   * @param executor executor to run the function in\n   * @return the derived step\n   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this\n   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()\n   *     finished}",
  "com.google.common.reflect.TypeToken:canonicalizeWildcardsInParameterizedType(java.lang.reflect.ParameterizedType)" : null,
  "com.google.common.util.concurrent.SmoothRateLimiter:queryEarliestAvailable(long)" : null,
  "com.google.common.collect.CollectSpliterators:flatMapToDouble(java.util.Spliterator,java.util.function.Function,int,long)" : "* Returns a {@code Spliterator.OfDouble} that iterates over the elements of the spliterators\n   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code\n   * function} returns {@code null} for an input, it is replaced with an empty stream.)",
  "com.google.common.base.Suppliers$ThreadSafeSupplier:get()" : null,
  "com.google.common.math.Stats:sampleVariance()" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Variance#Sample_variance\">unbiased sample\n   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an\n   * unbiased estimator of the population variance of the population. The count must be greater than\n   * one.\n   *\n   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple\n   * times, due to numerical errors. However, it is guaranteed never to return a negative result.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single value",
  "com.google.common.collect.Tables$TransformedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.FluentIterable:get(int)" : "* Returns the element at the specified position in this fluent iterable.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note\n   * that this throws different exception types, and throws an exception if {@code null} would be\n   * returned).\n   *\n   * @param position position of the element to return\n   * @return the element at the specified position in this fluent iterable\n   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to\n   *     the size of this fluent iterable",
  "com.google.common.base.Predicates$ObjectPredicate:withNarrowedType()" : null,
  "com.google.common.util.concurrent.AbstractService:isRunning()" : null,
  "com.google.common.base.Functions$FunctionComposition:<init>(com.google.common.base.Function,com.google.common.base.Function)" : null,
  "com.google.common.reflect.Invokable:initAnnotatedTypeExists()" : null,
  "com.google.common.base.JdkPattern$JdkMatcher:find()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int,int)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.io.LittleEndianDataInputStream:readFully(byte[],int,int)" : null,
  "com.google.common.reflect.Types:getArrayClass(java.lang.Class)" : "Returns the {@code Class} object of arrays with {@code componentType}.",
  "com.google.common.collect.LexicographicalOrdering:<init>(java.util.Comparator)" : null,
  "com.google.common.collect.ForwardingQueue:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.Collection)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableLongArray} will contain.",
  "com.google.common.primitives.Shorts:reverse(short[],int,int)" : "* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive. This is equivalent to {@code\n   * Collections.reverse(Shorts.asList(array).subList(fromIndex, toIndex))}, but is likely to be\n   * more efficient.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 23.1",
  "com.google.common.cache.AbstractLoadingCache:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.MutableClassToInstanceMap$SerializedForm:readResolve()" : null,
  "com.google.common.collect.MutableClassToInstanceMap:entrySet()" : null,
  "com.google.common.collect.ForwardingDeque:offerFirst(java.lang.Object)" : null,
  "com.google.common.collect.StandardRowSortedTable$RowSortedMap:firstKey()" : null,
  "com.google.common.reflect.Invokable$MethodInvokable:getParameterAnnotations()" : null,
  "com.google.common.graph.StandardMutableValueGraph:incidentEdgeOrder()" : null,
  "com.google.common.collect.Ordering:compound(java.lang.Iterable)" : "* Returns an ordering which tries each given comparator in order until a non-zero result is\n   * found, returning that result, and returning zero only if all comparators return zero. The\n   * returned ordering is based on the state of the {@code comparators} iterable at the time it was\n   * provided to this method.\n   *\n   * <p>The returned ordering is equivalent to that produced using {@code\n   * Ordering.from(comp1).compound(comp2).compound(comp3) . . .}.\n   *\n   * <p>The returned object is serializable if each of the {@code comparators} is serializable.\n   *\n   * <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link\n   * HashSet}, will produce non-deterministic results.\n   *\n   * <p><b>Java 8+ users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)},\n   * or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the\n   * collection might be empty, also provide a default comparator as the {@code identity} parameter\n   * to {@code reduce}).\n   *\n   * @param comparators the comparators to try in order",
  "com.google.common.primitives.Chars$LexicographicalComparator:compare(char[],char[])" : null,
  "com.google.common.collect.Maps$NavigableKeySet:map()" : null,
  "com.google.common.util.concurrent.AbstractFuture:cancellationExceptionWithCause(java.lang.String,java.lang.Throwable)" : null,
  "com.google.common.graph.ImmutableNetwork:edgeOrder()" : null,
  "com.google.common.collect.MutableClassToInstanceMap:writeReplace()" : null,
  "com.google.common.collect.CompactHashSet:requireEntries()" : null,
  "com.google.common.math.DoubleMath:roundToInt(double,java.math.RoundingMode)" : "* Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding\n   * mode, if possible.\n   *\n   * @throws ArithmeticException if\n   *     <ul>\n   *       <li>{@code x} is infinite or NaN\n   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding\n   *           mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code\n   *           Integer.MAX_VALUE}\n   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link\n   *           RoundingMode#UNNECESSARY}\n   *     </ul>",
  "com.google.common.collect.StandardTable:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$RowMap:get(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap:<init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper)" : "* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",
  "com.google.common.graph.ImmutableGraph:<init>(com.google.common.graph.BaseGraph)" : null,
  "com.google.common.collect.EvictingQueue:<init>(int)" : null,
  "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(com.google.common.primitives.ImmutableDoubleArray)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableDoubleArray} will contain.",
  "com.google.common.collect.ImmutableList$ReverseImmutableList:size()" : null,
  "com.google.common.net.InternetDomainName:isPublicSuffix()" : "* Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla\n   * Foundation's <a href=\"http://publicsuffix.org/\">Public Suffix List</a> (PSL). A public suffix\n   * is one under which Internet users can directly register names, such as {@code com}, {@code\n   * co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public suffixes\n   * include {@code google.com}, {@code foo.co.uk}, and {@code myblog.blogspot.com}.\n   *\n   * <p>Public suffixes are a proper superset of {@linkplain #isRegistrySuffix() registry suffixes}.\n   * The list of public suffixes additionally contains privately owned domain names under which\n   * Internet users can register subdomains. An example of a public suffix that is not a registry\n   * suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i>\n   * registry suffixes, since domain name registries collectively control all internet domain names.\n   *\n   * <p>For considerations on whether the public suffix or registry suffix designation is more\n   * suitable for your application, see <a\n   * href=\"https://github.com/google/guava/wiki/InternetDomainNameExplained\">this article</a>.\n   *\n   * @return {@code true} if this domain name appears exactly on the public suffix list\n   * @since 6.0",
  "com.google.common.collect.ImmutableRangeSet$AsSet:isPartialView()" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:clear()" : null,
  "com.google.common.collect.ContiguousSet:createDescendingSet()" : null,
  "com.google.common.io.MoreFiles:pathNotFound(java.nio.file.Path,java.util.Collection)" : null,
  "com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>This method returns a serializable {@code ImmutableSortedSet}.\n   *\n   * <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an\n   * {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code\n   * fromElement}. However, this method doesn't throw an exception in that situation, but instead\n   * keeps the original {@code fromElement}.",
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingMap()" : null,
  "com.google.common.collect.AbstractMultimap:isEmpty()" : null,
  "com.google.common.collect.Synchronized$SynchronizedSetMultimap:delegate()" : null,
  "com.google.common.collect.FilteredEntryMultimap:filterCollection(java.util.Collection,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.ImmutableBiMap:writeReplace()" : null,
  "com.google.common.graph.MapIteratorCache:<init>(java.util.Map)" : null,
  "com.google.common.io.ByteStreams:read(java.io.InputStream,byte[],int,int)" : "* Reads some bytes from an input stream and stores them into the buffer array {@code b}. This\n   * method blocks until {@code len} bytes of input data have been read into the array, or end of\n   * file is detected. The number of bytes read is returned, possibly zero. Does not close the\n   * stream.\n   *\n   * <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent\n   * calls on the same stream will return zero.\n   *\n   * <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative,\n   * or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code\n   * b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes\n   * are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one\n   * into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.\n   *\n   * @param in the input stream to read from\n   * @param b the buffer into which the data is read\n   * @param off an int specifying the offset into the data\n   * @param len an int specifying the number of bytes to read\n   * @return the number of bytes read\n   * @throws IOException if an I/O error occurs\n   * @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if\n   *     {@code off + len} is greater than {@code b.length}",
  "com.google.common.collect.Hashing:needsResizing(int,int,double)" : null,
  "com.google.common.hash.AbstractStreamingHasher:putBytes(byte[],int,int)" : null,
  "com.google.common.collect.TreeRangeSet:asRanges()" : null,
  "com.google.common.collect.Sets$SetView:removeIf(java.util.function.Predicate)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n     *\n     * @throws UnsupportedOperationException always\n     * @deprecated Unsupported operation.",
  "com.google.common.collect.ImmutableTable$Builder:put(com.google.common.collect.Table$Cell)" : "* Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key\n     * pairs are not allowed and will cause {@link #build} to fail.",
  "com.google.common.collect.Maps:transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)" : "* Returns a view of a navigable map whose values are derived from the original navigable map's\n   * entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may\n   * depend on the key as well as the value.\n   *\n   * <p>All other properties of the transformed map, such as iteration order, are left intact. For\n   * example, the code:\n   *\n   * {@snippet :\n   * NavigableMap<String, Boolean> options = Maps.newTreeMap();\n   * options.put(\"verbose\", false);\n   * options.put(\"sort\", true);\n   * EntryTransformer<String, Boolean, String> flagPrefixer =\n   *     new EntryTransformer<String, Boolean, String>() {\n   *       public String transformEntry(String key, Boolean value) {\n   *         return value ? key : (\"yes\" + key);\n   *       }\n   *     };\n   * NavigableMap<String, String> transformed =\n   *     LabsMaps.transformNavigableEntries(options, flagPrefixer);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {sort=yessort, verbose=verbose}}.\n   *\n   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports\n   * removal operations, and these are reflected in the underlying map.\n   *\n   * <p>It's acceptable for the underlying map to contain null keys and null values provided that\n   * the transformer is capable of accepting null inputs. The transformed map might contain null\n   * values if the transformer sometimes gives a null result.\n   *\n   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.\n   *\n   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned\n   * map to be a view, but it means that the transformer will be applied many times for bulk\n   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform\n   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map\n   * doesn't need to be a view, copy the returned map into a new map of your choosing.\n   *\n   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code\n   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of\n   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as\n   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the\n   * transformed map.\n   *\n   * @since 13.0",
  "com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.TreeRangeMap$RangeMapEntry:getLowerBound()" : null,
  "com.google.common.collect.Synchronized$SynchronizedQueue:peek()" : null,
  "com.google.common.collect.Maps:newHashMapWithExpectedSize(int)" : "* Creates a {@code HashMap} instance, with a high enough \"initial capacity\" that it <i>should</i>\n   * hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed,\n   * but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method\n   * isn't inadvertently <i>oversizing</i> the returned map.\n   *\n   * @param expectedSize the number of entries you expect to add to the returned map\n   * @return a new, empty {@code HashMap} with enough capacity to hold {@code expectedSize} entries\n   *     without resizing\n   * @throws IllegalArgumentException if {@code expectedSize} is negative",
  "com.google.common.math.LongMath:binomial(int,int)" : "* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and\n   * {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.\n   *\n   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",
  "com.google.common.collect.AbstractMapBasedMultiset:getAndSet(com.google.common.collect.Count,int)" : null,
  "com.google.common.escape.ArrayBasedEscaperMap:<init>(char[][])" : null,
  "com.google.common.collect.GeneralRange:comparator()" : null,
  "com.google.common.graph.ImmutableValueGraph:getNodeConnections(com.google.common.graph.ValueGraph)" : null,
  "com.google.common.primitives.UnsignedLongs$LexicographicalComparator:compare(long[],long[])" : null,
  "com.google.common.collect.MutableClassToInstanceMap:put(java.lang.Class,java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$And:setBits(java.util.BitSet)" : null,
  "com.google.common.collect.ImmutableMap$Builder:lastEntryForEachKey(java.util.Map$Entry[],int)" : "* Scans the first {@code size} elements of {@code entries} looking for duplicate keys. If\n     * duplicates are found, a new correctly-sized array is returned with the same elements (up to\n     * {@code size}), except containing only the last occurrence of each duplicate key. Otherwise\n     * {@code null} is returned.",
  "com.google.common.primitives.ParseRequest:fromString(java.lang.String)" : null,
  "com.google.common.math.LinearTransformation$VerticalLinearTransformation:isVertical()" : null,
  "com.google.common.primitives.Doubles:constrainToRange(double,double,double)" : "* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.\n   *\n   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned\n   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n   * value} is greater than {@code max}, {@code max} is returned.\n   *\n   * <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead.\n   *\n   * @param value the {@code double} value to constrain\n   * @param min the lower bound (inclusive) of the range to constrain {@code value} to\n   * @param max the upper bound (inclusive) of the range to constrain {@code value} to\n   * @throws IllegalArgumentException if {@code min > max}\n   * @since 21.0",
  "com.google.common.collect.Maps$FilteredMapValues:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.Collections2:transform(java.util.Collection,com.google.common.base.Function)" : "* Returns a collection that applies {@code function} to each element of {@code fromCollection}.\n   * The returned collection is a live view of {@code fromCollection}; changes to one affect the\n   * other.\n   *\n   * <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link\n   * UnsupportedOperationException}. All other collection methods are supported, as long as {@code\n   * fromCollection} supports them.\n   *\n   * <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is.\n   *\n   * <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection\n   * and use the copy.\n   *\n   * <p>If the input {@code Collection} is known to be a {@code List}, consider {@link\n   * Lists#transform}. If only an {@code Iterable} is available, use {@link Iterables#transform}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#map Stream.map}.",
  "com.google.common.collect.AbstractMapBasedMultiset:iterator()" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherEntry(java.lang.Object)" : null,
  "com.google.common.hash.AbstractStreamingHasher:putByte(byte)" : null,
  "com.google.common.collect.ImmutableSortedMultiset:descendingMultiset()" : null,
  "com.google.common.collect.TransformedListIterator:previous()" : null,
  "com.google.common.collect.ForwardingDeque:pollLast()" : null,
  "com.google.common.collect.Cut:canonical(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.base.Joiner:useForNull(java.lang.String)" : "* Returns a joiner with the same behavior as this one, except automatically substituting {@code\n   * nullText} for any provided null elements.",
  "com.google.common.collect.ImmutableSortedMap:size()" : null,
  "com.google.common.collect.RegularImmutableSortedSet:contains(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableGraph:allowsSelfLoops()" : null,
  "com.google.common.io.BaseEncoding$Base16Encoding:encodeTo(java.lang.Appendable,byte[],int,int)" : null,
  "com.google.common.collect.Lists:charactersOf(java.lang.String)" : "* Returns a view of the specified string as an immutable list of {@code Character} values.\n   *\n   * @since 7.0",
  "com.google.common.collect.DiscreteDomain:minValue()" : "* Returns the minimum value of type {@code C}, if it has one. The minimum value is the unique\n   * value for which {@link Comparable#compareTo(Object)} never returns a positive value for any\n   * input of type {@code C}.\n   *\n   * <p>The default implementation throws {@code NoSuchElementException}.\n   *\n   * @return the minimum value of type {@code C}; never null\n   * @throws NoSuchElementException if the type has no (practical) minimum value; for example,\n   *     {@link java.math.BigInteger}",
  "com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose\n   * keys and values are the result of applying the provided mapping functions to the input\n   * elements. The generated map is sorted by the specified comparator.\n   *\n   * <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code\n   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs\n   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which\n   * throws an {@code IllegalStateException}.)\n   *\n   * @since 21.0",
  "com.google.common.util.concurrent.Uninterruptibles:putUninterruptibly(java.util.concurrent.BlockingQueue,java.lang.Object)" : "* Invokes {@code queue.}{@link BlockingQueue#put(Object) put(element)} uninterruptibly.\n   *\n   * @throws ClassCastException if the class of the specified element prevents it from being added\n   *     to the given queue\n   * @throws IllegalArgumentException if some property of the specified element prevents it from\n   *     being added to the given queue",
  "com.google.common.primitives.Ints$IntArrayAsList:equals(java.lang.Object)" : null,
  "com.google.common.collect.NullsLastOrdering:nullsFirst()" : null,
  "com.google.common.graph.ForwardingGraph:predecessors(java.lang.Object)" : null,
  "com.google.common.collect.DenseImmutableTable$Column:keyToIndex()" : null,
  "com.google.common.collect.Sets:complementOf(java.util.Collection)" : "* Creates an {@code EnumSet} consisting of all enum values that are not in the specified\n   * collection. If the collection is an {@link EnumSet}, this method has the same behavior as\n   * {@link EnumSet#complementOf}. Otherwise, the specified collection must contain at least one\n   * element, in order to determine the element type. If the collection could be empty, use {@link\n   * #complementOf(Collection, Class)} instead of this method.\n   *\n   * @param collection the collection whose complement should be stored in the enum set\n   * @return a new, modifiable {@code EnumSet} containing all values of the enum that aren't present\n   *     in the given collection\n   * @throws IllegalArgumentException if {@code collection} is not an {@code EnumSet} instance and\n   *     contains no elements",
  "com.google.common.collect.ImmutableSortedMap:descendingKeySet()" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:<init>(java.util.NavigableSet)" : null,
  "com.google.common.collect.ImmutableSortedSet:unsafeCompare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.math.IntMath:gcd(int,int)" : "* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==\n   * 0}.\n   *\n   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",
  "com.google.common.graph.DirectedNetworkConnections:of()" : null,
  "com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable)" : "* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n   * RuntimeException} or {@link Error}.\n   *\n   * @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code\n   *     null}.",
  "com.google.common.util.concurrent.AbstractCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:<init>(java.lang.Object,int)" : null,
  "com.google.common.base.JdkPattern:toString()" : null,
  "com.google.common.collect.NullnessCasts:uncheckedCastNullableTToT(java.lang.Object)" : "* Accepts a {@code @Nullable T} and returns a plain {@code T}, without performing any check that\n   * that conversion is safe.\n   *\n   * <p>This method is intended to help with usages of type parameters that have {@linkplain\n   * ParametricNullness parametric nullness}. If a type parameter instead ranges over only non-null\n   * types (or if the type is a non-variable type, like {@code String}), then code should almost\n   * never use this method, preferring instead to call {@code requireNonNull} so as to benefit from\n   * its runtime check.\n   *\n   * <p>An example use case for this method is in implementing an {@code Iterator<T>} whose {@code\n   * next} field is lazily initialized. The type of that field would be {@code @Nullable T}, and the\n   * code would be responsible for populating a \"real\" {@code T} (which might still be the value\n   * {@code null}!) before returning it to callers. Depending on how the code is structured, a\n   * nullness analysis might not understand that the field has been populated. To avoid that problem\n   * without having to add {@code @SuppressWarnings}, the code can call this method.\n   *\n   * <p>Why <i>not</i> just add {@code SuppressWarnings}? The problem is that this method is\n   * typically useful for {@code return} statements. That leaves the code with two options: Either\n   * add the suppression to the whole method (which turns off checking for a large section of code),\n   * or extract a variable, and put the suppression on that. However, a local variable typically\n   * doesn't work: Because nullness analyses typically infer the nullness of local variables,\n   * there's no way to assign a {@code @Nullable T} to a field {@code T foo;} and instruct the\n   * analysis that that means \"plain {@code T}\" rather than the inferred type {@code @Nullable T}.\n   * (Even if supported added {@code @NonNull}, that would not help, since the problem case\n   * addressed by this method is the case in which {@code T} has parametric nullness -- and thus its\n   * value may be legitimately {@code null}.)",
  "com.google.common.cache.LocalCache$HashIterator:remove()" : null,
  "com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ListenableFutureTask:create(java.lang.Runnable,java.lang.Object)" : "* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code\n   * Runnable}, and arrange that {@code get} will return the given result on successful completion.\n   *\n   * @param runnable the runnable task\n   * @param result the result to return on successful completion. If you don't need a particular\n   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =\n   *     ListenableFutureTask.create(runnable, null)}\n   * @since 10.0",
  "com.google.common.cache.LocalCache$WriteQueue:contains(java.lang.Object)" : null,
  "com.google.common.base.internal.Finalizer:run()" : "Loops continuously, pulling references off the queue and cleaning them up.",
  "com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:equals(java.lang.Object)" : null,
  "com.google.common.collect.Iterators$MergingIterator:<init>(java.lang.Iterable,java.util.Comparator)" : null,
  "com.google.common.collect.Cut$BelowValue:leastValueAbove(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.collect.Maps$FilteredEntryBiMap:forcePut(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMultiset$SerializedForm:readResolve()" : null,
  "com.google.common.cache.LocalCache:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.RegularImmutableMultiset:getEntry(int)" : null,
  "com.google.common.hash.AbstractHasher:putBytes(java.nio.ByteBuffer)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:<init>(java.util.concurrent.ConcurrentMap)" : null,
  "com.google.common.collect.ImmutableMapValues:asList()" : null,
  "com.google.common.primitives.Doubles:rotate(double[],int,int,int)" : "* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code\n   * toIndex} exclusive. This is equivalent to {@code\n   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is\n   * considerably faster and avoids allocations and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 32.0.0",
  "com.google.common.io.MoreFiles:checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[])" : "Checks that the given options allow an insecure delete, throwing an exception if not.",
  "com.google.common.collect.Maps$DescendingMap:createEntrySet()" : null,
  "com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.lang.Iterable)" : "* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate\n     * elements (only the first duplicate element is added).\n     *\n     * @param elements the elements to add to the {@code ImmutableSortedSet}\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} contains a null element",
  "com.google.common.cache.ForwardingCache:stats()" : null,
  "com.google.common.base.Absent:or(com.google.common.base.Supplier)" : null,
  "com.google.common.io.FileBackedOutputStream:write(int)" : null,
  "com.google.common.collect.ImmutableMap:getOrDefault(java.lang.Object,java.lang.Object)" : "* @since 21.0 (but only since 23.5 in the Android <a\n   *     href=\"https://github.com/google/guava#guava-google-core-libraries-for-java\">flavor</a>).\n   *     Note, however, that Java 8+ users can call this method with any version and flavor of\n   *     Guava.",
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putByte(byte)" : null,
  "com.google.common.collect.StandardTable$Row:entrySpliterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:equals(java.lang.Object)" : null,
  "com.google.common.base.FunctionalEquivalence:hashCode()" : null,
  "com.google.common.cache.LocalCache$EntryFactory$3:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* Creates a new entry.\n     *\n     * @param segment to create the entry for\n     * @param key of the entry\n     * @param hash of the key\n     * @param next entry in the same bucket",
  "com.google.common.hash.AbstractHasher:putDouble(double)" : null,
  "com.google.common.io.LittleEndianDataOutputStream:writeBytes(java.lang.String)" : "* @deprecated The semantics of {@code writeBytes(String s)} are considered dangerous. Please use\n   *     {@link #writeUTF(String s)}, {@link #writeChars(String s)} or another write method instead.",
  "com.google.common.base.CharMatcher$None:replaceFrom(java.lang.CharSequence,char)" : null,
  "com.google.common.collect.Cut$AboveAll:compareTo(com.google.common.collect.Cut)" : null,
  "com.google.common.collect.FilteredEntryMultimap:unfiltered()" : null,
  "com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)" : "* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.\n   *\n   * @throws RejectedExecutionException if the task cannot be scheduled for execution\n   * @since 23.0",
  "com.google.common.base.CharMatcher$Or:matches(char)" : null,
  "com.google.common.util.concurrent.AbstractFuture:addDoneString(java.lang.StringBuilder)" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:clear()" : null,
  "com.google.common.collect.Maps$MapDifferenceImpl:toString()" : null,
  "com.google.common.collect.ImmutableMap$Builder:buildJdkBacked()" : null,
  "com.google.common.collect.TreeTraverser$PostOrderNode:<init>(java.lang.Object,java.util.Iterator)" : null,
  "com.google.common.cache.CacheLoader:from(com.google.common.base.Function)" : "* Returns a cache loader that uses {@code function} to load keys, without supporting either\n   * reloading or bulk loading. This allows creating a cache loader using a lambda expression.\n   *\n   * <p>The returned object is serializable if {@code function} is serializable.\n   *\n   * @param function the function to be used for loading values; must never return {@code null}\n   * @return a cache loader that loads values by passing each key to {@code function}",
  "com.google.common.primitives.Floats$FloatArrayAsList:contains(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,java.lang.Object)" : null,
  "com.google.common.primitives.Chars$CharArrayAsList:get(int)" : null,
  "com.google.common.collect.ImmutableEnumSet$EnumSerializedForm:readResolve()" : null,
  "com.google.common.collect.LinkedHashMultiset:create(int)" : "* Creates a new, empty {@code LinkedHashMultiset} with the specified expected number of distinct\n   * elements.\n   *\n   * @param distinctElements the expected number of distinct elements\n   * @throws IllegalArgumentException if {@code distinctElements} is negative",
  "com.google.common.collect.Range:upperEndpoint()" : "* Returns the upper endpoint of this range.\n   *\n   * @throws IllegalStateException if this range is unbounded above (that is, {@link\n   *     #hasUpperBound()} returns {@code false})",
  "com.google.common.base.Functions$ConstantFunction:hashCode()" : null,
  "com.google.common.collect.Ordering:explicit(java.util.List)" : null,
  "com.google.common.io.Closer:rethrow(java.lang.Throwable)" : "* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code\n   * IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped\n   * in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception\n   * types your try block can throw when calling an overload of this method so as to avoid losing\n   * the original exception type.\n   *\n   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e);}\n   * to ensure the compiler knows that it will throw.\n   *\n   * @return this method does not return; it always throws\n   * @throws IOException when the given throwable is an IOException",
  "com.google.common.primitives.ImmutableLongArray:of(long)" : "Returns an immutable array containing a single value.",
  "com.google.common.collect.TreeRangeMap$SubRangeMap:subRangeMap(com.google.common.collect.Range)" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap$Builder:putAll(java.util.Map)" : "* Associates all of {@code map's} keys and values in the built map. Duplicate keys are not\n     * allowed, and will cause {@link #build} to fail.\n     *\n     * @throws NullPointerException if any key or value in {@code map} is null\n     * @throws ClassCastException if any value is not an instance of the type specified by its key",
  "com.google.common.collect.Multimaps$CustomMultimap:createKeySet()" : null,
  "com.google.common.collect.ImmutableRangeSet$ComplementRanges:get(int)" : null,
  "com.google.common.cache.ForwardingCache$SimpleForwardingCache:<init>(com.google.common.cache.Cache)" : null,
  "com.google.common.collect.AbstractRangeSet:<init>()" : null,
  "com.google.common.io.BaseEncoding$Base16Encoding:<init>(java.lang.String,java.lang.String)" : null,
  "com.google.common.graph.Traverser$Traversal$1:visitNext(java.util.Deque)" : "* Visits the next node from the top iterator of {@code horizon} and returns the visited node.\n     * Null is returned to indicate reaching the end of the top iterator.\n     *\n     * <p>For example, if horizon is {@code [[a, b], [c, d], [e]]}, {@code visitNext()} will return\n     * {@code [a, b, null, c, d, null, e, null]} sequentially, encoding the topological structure.\n     * (Note, however, that the callers of {@code visitNext()} often insert additional iterators\n     * into {@code horizon} between calls to {@code visitNext()}. This causes them to receive\n     * additional values interleaved with those shown above.)",
  "com.google.common.collect.Maps$NavigableKeySet:floor(java.lang.Object)" : null,
  "com.google.common.collect.LinkedListMultimap$1:size()" : null,
  "com.google.common.collect.StandardTable$Column$EntrySet:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.graph.ValueGraphBuilder:allowsSelfLoops(boolean)" : "* Specifies whether the graph will allow self-loops (edges that connect a node to itself).\n   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link\n   * UnsupportedOperationException}.\n   *\n   * <p>The default value is {@code false}.",
  "com.google.common.collect.TreeRangeSet:equals(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingCollection:standardToArray()" : "* A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you\n   * override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to\n   * this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:equals(java.lang.Object)" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:successorsMultiset()" : null,
  "com.google.common.collect.LexicographicalOrdering:equals(java.lang.Object)" : null,
  "com.google.common.io.Files$FileByteSource:size()" : null,
  "com.google.common.collect.Tables$TransposeTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ComparisonChain:<init>()" : null,
  "com.google.common.graph.EndpointPair:nodeU()" : "* If this {@link EndpointPair} {@link #isOrdered()} returns the {@link #source()}; otherwise,\n   * returns an arbitrary (but consistent) endpoint of the origin edge.",
  "com.google.common.util.concurrent.AbstractIdleService:executor()" : "* Returns the {@link Executor} that will be used to run this service. Subclasses may override\n   * this method to use a custom {@link Executor}, which may configure its worker thread with a\n   * specific name, thread group or priority. The returned executor's {@link\n   * Executor#execute(Runnable) execute()} method is called when this service is started and\n   * stopped, and should return promptly.",
  "com.google.common.primitives.Shorts$ShortArrayAsList:contains(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Monitor:awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)" : null,
  "com.google.common.eventbus.SubscriberExceptionContext:getSubscriber()" : "* @return The object context that the subscriber was called on.",
  "com.google.common.collect.ImmutableMapKeySet:get(int)" : null,
  "com.google.common.collect.LinkedListMultimap$NodeIterator:next()" : null,
  "com.google.common.collect.TransformedListIterator:backingIterator()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * @param reference an object reference\n   * @return the non-null reference that was validated\n   * @throws NullPointerException if {@code reference} is null\n   * @see Verify#verifyNotNull Verify.verifyNotNull()",
  "com.google.common.cache.LocalCache:expiresAfterWrite()" : null,
  "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:hash()" : null,
  "com.google.common.reflect.TypeResolver:resolveGenericArrayType(java.lang.reflect.GenericArrayType)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:toFloatArray()" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:removeLastOccurrence(java.lang.Object)" : null,
  "com.google.common.collect.AbstractTable:hashCode()" : null,
  "com.google.common.collect.Comparators:<init>()" : null,
  "com.google.common.reflect.TypeToken:getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[])" : null,
  "com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,int,java.lang.String)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:runLockedCleanup()" : null,
  "com.google.common.collect.Synchronized$SynchronizedSortedSet:<init>(java.util.SortedSet,java.lang.Object)" : null,
  "com.google.common.cache.LocalCache:usesWriteQueue()" : null,
  "com.google.common.collect.MapMaker:makeMap()" : "* Builds a thread-safe map. This method does not alter the state of this {@code MapMaker}\n   * instance, so it can be invoked again to create multiple independent maps.\n   *\n   * <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear} are not guaranteed to\n   * be performed atomically on the returned map. Additionally, {@code size} and {@code\n   * containsValue} are implemented as bulk read operations, and thus may fail to observe concurrent\n   * writes.\n   *\n   * @return a serializable concurrent map having the requested features",
  "com.google.common.primitives.ImmutableLongArray$Builder:addAll(long[])" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableLongArray} will contain.",
  "com.google.common.collect.Maps$ValueDifferenceImpl:equals(java.lang.Object)" : null,
  "com.google.common.collect.FilteredKeySetMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Segment:clearValueReferenceQueue()" : null,
  "com.google.common.graph.StandardValueGraph:predecessors(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:iteratorOrListIterator(java.util.Collection)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n   * an entry (according to {@link Object#equals}) after the first are ignored.",
  "com.google.common.hash.MessageDigestHashFunction:supportsClone(java.security.MessageDigest)" : null,
  "com.google.common.collect.Synchronized$SynchronizedSortedSet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.Shorts:indexOf(short[],short[])" : "* Returns the start position of the first occurrence of the specified {@code target} within\n   * {@code array}, or {@code -1} if there is no such occurrence.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n   * i, i + target.length)} contains exactly the same elements as {@code target}.\n   *\n   * @param array the array to search for the sequence {@code target}\n   * @param target the array to search for as a sub-sequence of {@code array}",
  "com.google.common.base.Joiner:<init>(java.lang.String)" : null,
  "com.google.common.collect.AbstractMultimap:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.util.concurrent.Striped$CompactStriped:<init>(int,com.google.common.base.Supplier)" : null,
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:set(long)" : "Returns true if the bit changed value.",
  "com.google.common.collect.ImmutableSet$Indexed:iterator()" : null,
  "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)" : null,
  "com.google.common.graph.NetworkBuilder:cast()" : null,
  "com.google.common.collect.AbstractSequentialIterator:hasNext()" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int,int[])" : null,
  "com.google.common.math.Quantiles:swap(double[],int,int)" : "Swaps the values at {@code i} and {@code j} in {@code array}.",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$LinkedStrongKeyWeakValueEntry:<init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)" : null,
  "com.google.common.graph.Graphs:checkPositive(long)" : null,
  "com.google.common.io.LittleEndianDataOutputStream:writeDouble(double)" : "* Writes a {@code double} as specified by {@link DataOutputStream#writeDouble(double)}, except\n   * using little-endian byte order.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.primitives.Longs$LongArrayAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap$Builder:<init>()" : "Creates a new builder.",
  "com.google.common.cache.CacheBuilder:recordStats()" : "* Enable the accumulation of {@link CacheStats} during the operation of the cache. Without this\n   * {@link Cache#stats} will return zero for all statistics. Note that recording stats requires\n   * bookkeeping to be performed with each operation, and thus imposes a performance penalty on\n   * cache operation.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @since 12.0 (previously, stats collection was automatic)",
  "com.google.common.io.Closer:register(java.io.Closeable)" : null,
  "com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,java.time.Duration)" : "* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new\n   * instance of the given checked exception type. This reduces boilerplate for a common use of\n   * {@code Future} in which it is unnecessary to programmatically distinguish between exception\n   * types or to extract other information from the exception instance.\n   *\n   * <p>Exceptions from {@code Future.get} are treated as follows:\n   *\n   * <ul>\n   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause\n   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code\n   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.\n   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the\n   *       interrupt).\n   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.\n   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link\n   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such\n   *       exceptions).\n   * </ul>\n   *\n   * <p>The overall principle is to continue to treat every checked exception as a checked\n   * exception, every unchecked exception as an unchecked exception, and every error as an error. In\n   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the\n   * new stack trace matches that of the current thread.\n   *\n   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor\n   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}\n   * (preferring constructors with at least one {@code String}, then preferring constructors with at\n   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did\n   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.\n   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.\n   *\n   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}\n   *     whose cause is not itself a checked exception\n   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a\n   *     {@code RuntimeException} as its cause\n   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code\n   *     Error} as its cause\n   * @throws CancellationException if {@code get} throws a {@code CancellationException}\n   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or\n   *     does not have a suitable constructor\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.base.JdkPattern$JdkMatcher:end()" : null,
  "com.google.common.collect.Maps:asMap(java.util.Set,com.google.common.base.Function)" : "* Returns a live {@link Map} view whose keys are the contents of {@code set} and whose values are\n   * computed on demand using {@code function}. To get an immutable <i>copy</i> instead, use {@link\n   * #toMap(Iterable, Function)}.\n   *\n   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping\n   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code\n   * entrySet} views of the returned map iterate in the same order as the backing set.\n   *\n   * <p>Modifications to the backing set are read through to the returned map. The returned map\n   * supports removal operations if the backing set does. Removal operations write through to the\n   * backing set. The returned map does not support put operations.\n   *\n   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the\n   * set does not contain {@code null}, because the view cannot stop {@code null} from being added\n   * to the set.\n   *\n   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},\n   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for\n   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when\n   * calling methods on the resulting map view.\n   *\n   * @since 14.0",
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readLine()" : null,
  "com.google.common.cache.CacheBuilder:getTicker(boolean)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap)" : null,
  "com.google.common.collect.ImmutableRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)" : "* Guaranteed to throw an exception and leave the {@code RangeMap} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.\n   * @since 28.1",
  "com.google.common.collect.Maps$UnmodifiableBiMap:delegate()" : null,
  "com.google.common.cache.LocalCache:getOrLoad(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ListenableFutureTask:<init>(java.util.concurrent.Callable)" : null,
  "com.google.common.io.CharSource$CharSequenceCharSource:readLines(com.google.common.io.LineProcessor)" : null,
  "com.google.common.collect.Sets$FilteredSet:equals(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken:getComponentType()" : "* Returns the array component type if this type represents an array ({@code int[]}, {@code T[]},\n   * {@code <? extends Map<String, Integer>[]>} etc.), or else {@code null} is returned.",
  "com.google.common.collect.ImmutableBiMap$Builder:putAll(java.lang.Iterable)" : "* Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed,\n     * and will cause {@link #build} to fail.\n     *\n     * @throws NullPointerException if any key, value, or entry is null\n     * @since 19.0",
  "com.google.common.collect.AbstractMapBasedMultiset:readObjectNoData()" : null,
  "com.google.common.hash.Murmur3_32HashFunction:hashUnencodedChars(java.lang.CharSequence)" : null,
  "com.google.common.collect.Lists$TransformingSequentialList:removeRange(int,int)" : "* The default implementation inherited is based on iteration and removal of each element which\n     * can be overkill. That's why we forward this call directly to the backing list.",
  "com.google.common.collect.ImmutableEnumMap:writeReplace()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner3:call(com.google.common.util.concurrent.ClosingFuture$Combiner3$ClosingFunction3,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * combining function to their values. The function can use a {@link DeferredCloser} to capture\n     * objects to be closed when the pipeline is done.\n     *\n     * <p>If this combiner was returned by {@link #whenAllSucceed(ClosingFuture, ClosingFuture,\n     * ClosingFuture)} and any of the inputs fail, so will the returned step.\n     *\n     * <p>If the function throws a {@code CancellationException}, the pipeline will be cancelled.\n     *\n     * <p>If the function throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and used as the failure of the derived step.",
  "com.google.common.math.Quantiles:selectInPlace(int,double[],int,int)" : "* Performs an in-place selection to find the element which would appear at a given index in a\n   * dataset if it were sorted. The following preconditions should hold:\n   *\n   * <ul>\n   *   <li>{@code required}, {@code from}, and {@code to} should all be indexes into {@code array};\n   *   <li>{@code required} should be in the range [{@code from}, {@code to}];\n   *   <li>all the values with indexes in the range [0, {@code from}) should be less than or equal\n   *       to all the values with indexes in the range [{@code from}, {@code to}];\n   *   <li>all the values with indexes in the range ({@code to}, {@code array.length - 1}] should be\n   *       greater than or equal to all the values with indexes in the range [{@code from}, {@code\n   *       to}].\n   * </ul>\n   *\n   * This method will reorder the values with indexes in the range [{@code from}, {@code to}] such\n   * that all the values with indexes in the range [{@code from}, {@code required}) are less than or\n   * equal to the value with index {@code required}, and all the values with indexes in the range\n   * ({@code required}, {@code to}] are greater than or equal to that value. Therefore, the value at\n   * {@code required} is the value which would appear at that index in the sorted dataset.",
  "com.google.common.reflect.Invokable$ConstructorInvokable:getAnnotatedReturnType()" : null,
  "com.google.common.collect.ForwardingNavigableMap:lowerEntry(java.lang.Object)" : null,
  "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:<init>(com.google.common.cache.LocalCache$Strength)" : null,
  "com.google.common.collect.CompoundOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableCollection:internalArrayStart()" : "* If this collection is backed by an array of its elements in insertion order, returns the offset\n   * where this collection's elements start.",
  "com.google.common.collect.StandardRowSortedTable$RowSortedMap:tailMap(java.lang.Object)" : null,
  "com.google.common.collect.Serialization:readCount(java.io.ObjectInputStream)" : "* Reads a count corresponding to a serialized map, multiset, or multimap. It returns the size of\n   * a map serialized by {@link #writeMap(Map, ObjectOutputStream)}, the number of distinct elements\n   * in a multiset serialized by {@link #writeMultiset(Multiset, ObjectOutputStream)}, or the number\n   * of distinct keys in a multimap serialized by {@link #writeMultimap(Multimap,\n   * ObjectOutputStream)}.",
  "com.google.common.base.JdkPattern$JdkMatcher:<init>(java.util.regex.Matcher)" : null,
  "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object)" : "Returns an immutable multimap containing a single entry.",
  "com.google.common.collect.Maps:newTreeMap(java.util.Comparator)" : "* Creates a <i>mutable</i>, empty {@code TreeMap} instance using the given comparator.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@code\n   * ImmutableSortedMap.orderedBy(comparator).build()} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code TreeMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @param comparator the comparator to sort the keys with\n   * @return a new, empty {@code TreeMap}",
  "com.google.common.primitives.Bytes$ByteArrayAsList:equals(java.lang.Object)" : null,
  "com.google.common.io.CountingOutputStream:close()" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:tryDrainReferenceQueues()" : "Cleanup collected entries when the lock is available.",
  "com.google.common.graph.DirectedGraphConnections:isSuccessor(java.lang.Object)" : null,
  "com.google.common.hash.Hashing:hmacToString(java.lang.String,java.security.Key)" : null,
  "com.google.common.base.Functions$ForMapWithDefault:equals(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ListMultimap)" : "* Returns an unmodifiable view of the specified {@code ListMultimap}. Query operations on the\n   * returned multimap \"read through\" to the specified multimap, and attempts to modify the returned\n   * multimap, either directly or through the multimap's views, result in an {@code\n   * UnsupportedOperationException}.\n   *\n   * <p>The returned multimap will be serializable if the specified multimap is serializable.\n   *\n   * @param delegate the multimap for which an unmodifiable view is to be returned\n   * @return an unmodifiable view of the specified multimap",
  "com.google.common.escape.Escaper:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.AbstractMultiset$EntrySet:multiset()" : null,
  "com.google.common.cache.CacheBuilder:from(java.lang.String)" : "* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.\n   * This is especially useful for command-line configuration of a {@code CacheBuilder}.\n   *\n   * @param spec a String in the format specified by {@link CacheBuilderSpec}\n   * @since 12.0",
  "com.google.common.base.Suppliers$MemoizingSupplier:toString()" : null,
  "com.google.common.collect.AbstractSetMultimap:wrapCollection(java.lang.Object,java.util.Collection)" : null,
  "com.google.common.base.Predicates$CompositionPredicate:equals(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableLongArray:forEach(java.util.function.LongConsumer)" : "* Invokes {@code consumer} for each value contained in this array, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.math.DoubleUtils:isNormal(double)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * @param expression a boolean expression\n   * @param errorMessageTemplate a template for the exception message should the check fail. The\n   *     message is formed by replacing each {@code %s} placeholder in the template with an\n   *     argument. These are matched by position - the first {@code %s} gets {@code\n   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n   *     square braces. Unmatched placeholders will be left as-is.\n   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments\n   *     are converted to strings using {@link String#valueOf(Object)}.\n   * @throws VerifyException if {@code expression} is {@code false}\n   * @see Preconditions#checkState Preconditions.checkState()",
  "com.google.common.collect.TreeRangeMap$1:putAll(com.google.common.collect.RangeMap)" : null,
  "com.google.common.collect.CompactHashMap:values()" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:get(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:writeReplace()" : null,
  "com.google.common.collect.MoreCollectors$ToOptionalState:<init>()" : null,
  "com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.collect.DiscreteDomain$LongDomain:offset(java.lang.Long,long)" : null,
  "com.google.common.collect.RegularImmutableMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.net.MediaType:computeToString()" : null,
  "com.google.common.hash.Hashing$Crc32CSupplier:pickFunction()" : null,
  "com.google.common.hash.Murmur3_32HashFunction:hashInt(int)" : null,
  "com.google.common.cache.LocalCache:discardingQueue()" : "Queue that discards all elements.",
  "com.google.common.graph.Graphs$TransposedGraph:<init>(com.google.common.graph.Graph)" : null,
  "com.google.common.primitives.ImmutableLongArray$AsList:subList(int,int)" : null,
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putChar(char)" : null,
  "com.google.common.util.concurrent.FluentFuture:transform(com.google.common.base.Function,java.util.concurrent.Executor)" : "* Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If\n   * this input {@code Future} fails, the returned {@code Future} fails with the same exception (and\n   * the function is not invoked). Example usage:\n   *\n   * {@snippet :\n   * ListenableFuture<List<Row>> rowsFuture =\n   *     queryFuture.transform(QueryResult::getRows, executor);\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n   * listeners are also applicable to heavyweight functions passed to this method.\n   *\n   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the\n   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel\n   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback\n   * in which it will attempt to cancel itself.\n   *\n   * <p>An example use of this method is to convert a serializable object returned from an RPC into\n   * a POJO.\n   *\n   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and\n   * {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the\n   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link\n   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.\n   *\n   * @param function A Function to transform the results of this future to the results of the\n   *     returned future.\n   * @param executor Executor to run the function in.\n   * @return A future that holds result of the transformation.",
  "com.google.common.util.concurrent.ClosingFuture$Peeker:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)" : null,
  "com.google.common.base.Suppliers$SupplierOfInstance:equals(java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:getUnsafe()" : "* Returns a sun.misc.Unsafe. Suitable for use in a 3rd party package. Replace with a simple\n       * call to Unsafe.getUnsafe when integrating into a jdk.\n       *\n       * @return a sun.misc.Unsafe",
  "com.google.common.collect.Cut$BelowAll:greatestValueBelow(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.primitives.UnsignedInteger:floatValue()" : "* Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening\n   * primitive conversion from {@code int} to {@code float}, and correctly rounded.",
  "com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder)" : "Constructs a graph with the properties specified in {@code builder}.",
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt:<init>(java.util.Spliterator$OfInt,java.util.Spliterator,java.util.function.Function,int,long)" : null,
  "com.google.common.collect.Serialization$FieldSetter:set(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Cut$AboveAll:endpoint()" : null,
  "com.google.common.collect.AbstractSortedMultiset:elementSet()" : null,
  "com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)" : null,
  "com.google.common.collect.Lists$ReverseList:removeRange(int,int)" : null,
  "com.google.common.collect.Maps$DescendingMap:delegate()" : null,
  "com.google.common.collect.AbstractMapEntry:hashCode()" : null,
  "com.google.common.base.Stopwatch:<init>()" : null,
  "com.google.common.util.concurrent.ExecutionList:<init>()" : "Creates a new, empty {@link ExecutionList}.",
  "com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:readResolve()" : null,
  "com.google.common.graph.ImmutableNetwork:outEdges(java.lang.Object)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingKeySet()" : null,
  "com.google.common.base.Predicates$NotPredicate:hashCode()" : null,
  "com.google.common.collect.ForwardingIterator:next()" : null,
  "com.google.common.util.concurrent.AtomicDouble:readObject(java.io.ObjectInputStream)" : "Reconstitutes the instance from a stream (that is, deserializes it).",
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:toPendingString()" : null,
  "com.google.common.collect.Iterators:pollNext(java.util.Iterator)" : "* Deletes and returns the next value from the iterator, or returns {@code null} if there is no\n   * such value.",
  "com.google.common.base.CharMatcher$Is:negate()" : null,
  "com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:isPartialView()" : null,
  "com.google.common.collect.CompactLinkedHashSet:convertToHashFloodingResistantImplementation()" : null,
  "com.google.common.collect.CompactHashMap:incrementModCount()" : null,
  "com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,java.util.concurrent.Callable)" : null,
  "com.google.common.primitives.ImmutableIntArray:lastIndexOf(int)" : "* Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no\n   * such index exists. Equivalent to {@code asList().lastIndexOf(target)}.",
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object)" : null,
  "com.google.common.collect.Iterators$ArrayItr:get(int)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:stopAsync()" : "* @since 15.0",
  "com.google.common.collect.ArrayTable:create(java.lang.Iterable,java.lang.Iterable)" : "* Creates an {@code ArrayTable} filled with {@code null}.\n   *\n   * @param rowKeys row keys that may be stored in the generated table\n   * @param columnKeys column keys that may be stored in the generated table\n   * @throws NullPointerException if any of the provided keys is null\n   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates\n   *     or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:maybeDrainReferenceQueues()" : null,
  "com.google.common.util.concurrent.Monitor:initNanoTime(long)" : "* Returns System.nanoTime() unless the timeout has already elapsed. Returns 0L if and only if the\n   * timeout has already elapsed.",
  "com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable)" : "* Combines two iterables into a single iterable. The returned iterable has an iterator that\n   * traverses the elements in {@code a}, followed by the elements in {@code b}. The source\n   * iterators are not polled until necessary.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input\n   * iterator supports it.\n   *\n   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code\n   * Stream.concat(a, b)}.",
  "com.google.common.collect.ImmutableRangeSet:enclosesAll(com.google.common.collect.RangeSet)" : null,
  "com.google.common.hash.HashCode:fromInt(int)" : "* Creates a 32-bit {@code HashCode} representation of the given int value. The underlying bytes\n   * are interpreted in little endian order.\n   *\n   * @since 15.0 (since 12.0 in HashCodes)",
  "com.google.common.collect.FilteredKeyMultimap:createValues()" : null,
  "com.google.common.collect.AbstractBiMap$Inverse:checkKey(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMultiset:entrySet()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:lock()" : null,
  "com.google.common.collect.Maps$ValueDifferenceImpl:create(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "Returns an immutable multimap containing the given entries, in order.",
  "com.google.common.collect.Maps$SortedKeySet:comparator()" : null,
  "com.google.common.collect.ForwardingTable:columnMap()" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Iterable)" : "* Adds entries to the built multimap.\n     *\n     * @since 19.0",
  "com.google.common.primitives.ImmutableIntArray:<init>(int[],int,int)" : null,
  "com.google.common.collect.EnumHashBiMap:create(java.lang.Class)" : "* Returns a new, empty {@code EnumHashBiMap} using the specified key type.\n   *\n   * @param keyType the key type",
  "com.google.common.math.Quantiles:interpolate(double,double,double,double)" : "* Returns a value a fraction {@code (remainder / scale)} of the way between {@code lower} and\n   * {@code upper}. Assumes that {@code lower <= upper}. Correctly handles infinities (but not\n   * {@code NaN}).",
  "com.google.common.base.CharMatcher$JavaIsoControl:<init>()" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:size()" : null,
  "com.google.common.collect.ImmutableRangeMap$2:asDescendingMapOfRanges()" : null,
  "com.google.common.math.LongMath:checkedSubtract(long,long)" : "* Returns the difference of {@code a} and {@code b}, provided it does not overflow.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link\n   * Math#subtractExact(long, long)} instead.\n   *\n   * @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic",
  "com.google.common.collect.TransformedIterator:hasNext()" : null,
  "com.google.common.util.concurrent.Monitor:isOccupied()" : "* Returns whether this monitor is occupied by any thread. This method is designed for use in\n   * monitoring of the system state, not for synchronization control.",
  "com.google.common.collect.CompactLinkedHashMap:resizeEntries(int)" : null,
  "com.google.common.collect.Range:encloses(com.google.common.collect.Range)" : "* Returns {@code true} if the bounds of {@code other} do not extend outside the bounds of this\n   * range. Examples:\n   *\n   * <ul>\n   *   <li>{@code [3..6]} encloses {@code [4..5]}\n   *   <li>{@code (3..6)} encloses {@code (3..6)}\n   *   <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty)\n   *   <li>{@code (3..6]} does not enclose {@code [3..6]}\n   *   <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value\n   *       contained by the latter range)\n   *   <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value\n   *       contained by the latter range)\n   * </ul>\n   *\n   * <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies {@code\n   * a.contains(v)}, but as the last two examples illustrate, the converse is not always true.\n   *\n   * <p>Being reflexive, antisymmetric and transitive, the {@code encloses} relation defines a\n   * <i>partial order</i> over ranges. There exists a unique {@linkplain Range#all maximal} range\n   * according to this relation, and also numerous {@linkplain #isEmpty minimal} ranges. Enclosure\n   * also implies {@linkplain #isConnected connectedness}.",
  "com.google.common.base.Optional:fromJavaUtil(java.util.Optional)" : "* Returns the equivalent {@code com.google.common.base.Optional} value to the given {@code\n   * java.util.Optional}, or {@code null} if the argument is null.\n   *\n   * @since 21.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ImmutableSortedMap:getSubMap(int,int)" : null,
  "com.google.common.collect.RegularContiguousSet:equalsOrThrow(java.lang.Comparable,java.lang.Comparable)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:getPredecessorInValueSet()" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:file()" : "Returns the file this location is from.",
  "com.google.common.util.concurrent.ClosingFuture$Combiner3:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:tailMap(java.lang.Object)" : null,
  "com.google.common.collect.Sets:unmodifiableNavigableSet(java.util.NavigableSet)" : "* Returns an unmodifiable view of the specified navigable set. This method allows modules to\n   * provide users with \"read-only\" access to internal navigable sets. Query operations on the\n   * returned set \"read through\" to the specified set, and attempts to modify the returned set,\n   * whether direct or via its collection views, result in an {@code UnsupportedOperationException}.\n   *\n   * <p>The returned navigable set will be serializable if the specified navigable set is\n   * serializable.\n   *\n   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#unmodifiableNavigableSet}.\n   *\n   * @param set the navigable set for which an unmodifiable view is to be returned\n   * @return an unmodifiable view of the specified navigable set\n   * @since 12.0",
  "com.google.common.net.MediaType$Tokenizer:consumeTokenIfPresent(com.google.common.base.CharMatcher)" : null,
  "com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction)" : "* Returns a {@code Collector} that accumulates elements into an {@code ImmutableSortedMultiset}\n   * whose elements are the result of applying {@code elementFunction} to the inputs, with counts\n   * equal to the result of applying {@code countFunction} to the inputs.\n   *\n   * <p>If the mapped elements contain duplicates (according to {@code comparator}), the first\n   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of\n   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.\n   *\n   * @since 22.0",
  "com.google.common.collect.ImmutableCollection:writeReplace()" : null,
  "com.google.common.graph.StandardValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultimap:entrySpliterator()" : null,
  "com.google.common.collect.ImmutableEnumSet:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:forEach(java.util.function.Consumer)" : null,
  "com.google.common.base.CharMatcher$IsNot:<init>(char)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readFloat()" : null,
  "com.google.common.io.PatternFilenameFilter:<init>(java.lang.String)" : "* Constructs a pattern file name filter object.\n   *\n   * @param patternStr the pattern string on which to filter file names\n   * @throws PatternSyntaxException if pattern compilation fails (runtime)",
  "com.google.common.cache.CacheBuilder:getRemovalListener()" : null,
  "com.google.common.primitives.Longs$LongConverter:doForward(java.lang.String)" : null,
  "com.google.common.collect.ReverseOrdering:max(java.util.Iterator)" : null,
  "com.google.common.collect.Maps$FilteredEntryMap:createEntrySet()" : null,
  "com.google.common.collect.Ordering:immutableSortedCopy(java.lang.Iterable)" : null,
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(java.lang.Object,java.lang.Object,java.util.Comparator)" : null,
  "com.google.common.collect.StandardTable$ColumnMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.FilteredMultimapValues:<init>(com.google.common.collect.FilteredMultimap)" : null,
  "com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesInCommon()" : null,
  "com.google.common.collect.Maps$ViewCachingAbstractMap:createValues()" : null,
  "com.google.common.collect.Synchronized:nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:tailMap(java.lang.Object,boolean)" : null,
  "com.google.common.base.CharMatcher:<init>()" : "* Constructor for use by subclasses. When subclassing, you may want to override {@code\n   * toString()} to provide a useful description.",
  "com.google.common.collect.Maps$SortedKeySet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:runCleanup()" : null,
  "com.google.common.io.PatternFilenameFilter:<init>(java.util.regex.Pattern)" : "* Constructs a pattern file name filter object.\n   *\n   * @param pattern the pattern on which to filter file names",
  "com.google.common.cache.ForwardingLoadingCache:getAll(java.lang.Iterable)" : null,
  "com.google.common.cache.CacheBuilder:initialCapacity(int)" : "* Sets the minimum total size for the internal hash tables. For example, if the initial capacity\n   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each\n   * having a hash table of size eight. Providing a large enough estimate at construction time\n   * avoids the need for expensive resizing operations later, but setting this value unnecessarily\n   * high wastes memory.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code initialCapacity} is negative\n   * @throws IllegalStateException if an initial capacity was already set",
  "com.google.common.io.BaseEncoding:decodeChecked(java.lang.CharSequence)" : "* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the\n   * inverse operation to {@link #encode(byte[])}.\n   *\n   * @throws DecodingException if the input is not a valid encoded string according to this\n   *     encoding.",
  "com.google.common.primitives.UnsignedLong:valueOf(java.lang.String,int)" : "* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an\n   * unsigned {@code long} value in the specified radix.\n   *\n   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}\n   *     value, or {@code radix} is not between {@link Character#MIN_RADIX} and {@link\n   *     Character#MAX_RADIX}",
  "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,boolean)" : "* Adds a name/value pair to the formatted output in {@code name=value} format.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",
  "com.google.common.io.Files:createTempDir()" : "* Atomically creates a new directory somewhere beneath the system's temporary directory (as\n   * defined by the {@code java.io.tmpdir} system property), and returns its name.\n   *\n   * <p>The temporary directory is created with permissions restricted to the current user or, in\n   * the case of Android, the current app. If that is not possible (as is the case under the very\n   * old Android Ice Cream Sandwich release), then this method throws an exception instead of\n   * creating a directory that would be more accessible. (This behavior is new in Guava 32.0.0.\n   * Previous versions would create a directory that is more accessible, as discussed in <a\n   * href=\"https://github.com/google/guava/issues/4011\">CVE-2020-8908</a>.)\n   *\n   * <p>Use this method instead of {@link File#createTempFile(String, String)} when you wish to\n   * create a directory, not a regular file. A common pitfall is to call {@code createTempFile},\n   * delete the file and create a directory in its place, but this leads a race condition which can\n   * be exploited to create security vulnerabilities, especially when executable files are to be\n   * written into the directory.\n   *\n   * <p>This method assumes that the temporary volume is writable, has free inodes and free blocks,\n   * and that it will not be called thousands of times per second.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n   * java.nio.file.Files#createTempDirectory}.\n   *\n   * @return the newly-created directory\n   * @throws IllegalStateException if the directory could not be created, such as if the system does\n   *     not support creating temporary directories securely\n   * @deprecated For Android users, see the <a\n   *     href=\"https://developer.android.com/training/data-storage\" target=\"_blank\">Data and File\n   *     Storage overview</a> to select an appropriate temporary directory (perhaps {@code\n   *     context.getCacheDir()}), and create your own directory under that. (For example, you might\n   *     use {@code new File(context.getCacheDir(), \"directoryname\").mkdir()}, or, if you need an\n   *     arbitrary number of temporary directories, you might have to generate multiple directory\n   *     names in a loop until {@code mkdir()} returns {@code true}.) For JRE users, prefer {@link\n   *     java.nio.file.Files#createTempDirectory}, transforming it to a {@link File} using {@link\n   *     java.nio.file.Path#toFile() toFile()} if needed. To restrict permissions as this method\n   *     does, pass {@code\n   *     PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(\"rwx------\"))} to your\n   *     call to {@code createTempDirectory}.",
  "com.google.common.graph.UndirectedGraphConnections:of(com.google.common.graph.ElementOrder)" : null,
  "com.google.common.collect.StandardTable:removeMapping(java.lang.Object,java.lang.Object,java.lang.Object)" : "Remove a row key / column key / value mapping, if present.",
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.util.concurrent.ForwardingExecutorService:invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableEnumSet:isPartialView()" : null,
  "com.google.common.collect.ImmutableSetMultimap$Builder:<init>()" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableSetMultimap#builder}.",
  "com.google.common.collect.CompactLinkedHashSet:setSucceeds(int,int)" : null,
  "com.google.common.primitives.ImmutableIntArray$Builder:add(int)" : "* Appends {@code value} to the end of the values the built {@link ImmutableIntArray} will\n     * contain.",
  "com.google.common.graph.ImmutableGraph:nodes()" : null,
  "com.google.common.collect.Iterators:addAll(java.util.Collection,java.util.Iterator)" : "* Adds all elements in {@code iterator} to {@code collection}. The iterator will be left\n   * exhausted: its {@code hasNext()} method will return {@code false}.\n   *\n   * @return {@code true} if {@code collection} was modified as a result of this operation",
  "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.lang.Iterable)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableDoubleArray} will contain.",
  "com.google.common.reflect.Invokable$ConstructorInvokable:invokeInternal(java.lang.Object,java.lang.Object[])" : null,
  "com.google.common.collect.ImmutableRangeSet:complement()" : null,
  "com.google.common.collect.CompactHashMap$Itr:hasNext()" : null,
  "com.google.common.base.Present:asSet()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int,int)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.reflect.Types$TypeVariableImpl:equals(java.lang.Object)" : null,
  "com.google.common.math.StatsAccumulator:addAll(java.util.stream.LongStream)" : "* Adds the given values to the dataset. The stream will be completely consumed by this method.\n   *\n   * @param values a series of values, which will be converted to {@code double} values (this may\n   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))\n   * @since 28.2 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ImmutableSortedMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Maps:containsValueImpl(java.util.Map,java.lang.Object)" : "An implementation of {@link Map#containsValue}.",
  "com.google.common.cache.LocalCache$WriteThroughEntry:setValue(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableLongArray:contains(long)" : "* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to\n   * {@code asList().contains(target)}.",
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:toPlainArray(java.util.concurrent.atomic.AtomicLongArray)" : "* Careful here: if threads are mutating the atomicLongArray while this method is executing, the\n     * final long[] will be a \"rolling snapshot\" of the state of the bit array. This is usually good\n     * enough, but should be kept in mind.",
  "com.google.common.graph.AbstractDirectedNetworkConnections:outEdges()" : null,
  "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:<init>(int)" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:addAll(java.util.Collection)" : null,
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Range)" : null,
  "com.google.common.io.ReaderInputStream:read(byte[],int,int)" : null,
  "com.google.common.net.HostAndPort:toString()" : "Rebuild the host:port string, including brackets if necessary.",
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.AbstractIndexedListIterator:<init>(int)" : "* Constructs an iterator across a sequence of the given size whose initial position is 0. That\n   * is, the first call to {@link #next()} will return the first element (or throw {@link\n   * NoSuchElementException} if {@code size} is zero).\n   *\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.util.concurrent.AbstractIdleService:isRunning()" : null,
  "com.google.common.net.InetAddresses:compressLongestRunOfZeroes(int[])" : "* Identify and mark the longest run of zeroes in an IPv6 address.\n   *\n   * <p>Only runs of two or more hextets are considered. In case of a tie, the leftmost run wins. If\n   * a qualifying run is found, its hextets are replaced by the sentinel value -1.\n   *\n   * @param hextets {@code int[]} mutable array of eight 16-bit hextets",
  "com.google.common.collect.RegularImmutableMap$KeySet:contains(java.lang.Object)" : null,
  "com.google.common.collect.EmptyContiguousSet:range(com.google.common.collect.BoundType,com.google.common.collect.BoundType)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int,java.lang.Object)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.CollectCollectors:toImmutableSet()" : null,
  "com.google.common.util.concurrent.RateLimiter:create(double)" : null,
  "com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.JdkBackedImmutableMap:size()" : null,
  "com.google.common.collect.ImmutableMap:toString()" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard:isSatisfied()" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:remove(java.lang.Object)" : null,
  "com.google.common.hash.Funnels$SinkAsStream:write(byte[])" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard:isSatisfied()" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$2:getSuperclass(java.lang.Object)" : null,
  "com.google.common.io.Files$FileByteSource:toString()" : null,
  "com.google.common.collect.LinkedListMultimap$NodeIterator:add(java.util.Map$Entry)" : null,
  "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:setValue(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset:successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.primitives.Floats$FloatArrayAsList:set(int,java.lang.Float)" : null,
  "com.google.common.base.CharMatcher$SingleWidth:<init>()" : null,
  "com.google.common.reflect.TypeToken$2:getGenericReturnType()" : "* If the class is parameterized, such as {@link java.util.ArrayList ArrayList}, this returns\n     * {@code ArrayList<E>}.",
  "com.google.common.collect.Cut:aboveAll()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$KeySet:iterator()" : null,
  "com.google.common.util.concurrent.ClosingFuture$5:toString()" : null,
  "com.google.common.net.MediaType:is(com.google.common.net.MediaType)" : "* Returns {@code true} if this instance falls within the range (as defined by <a\n   * href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\">the HTTP Accept header</a>) given\n   * by the argument according to three criteria:\n   *\n   * <ol>\n   *   <li>The type of the argument is the wildcard or equal to the type of this instance.\n   *   <li>The subtype of the argument is the wildcard or equal to the subtype of this instance.\n   *   <li>All of the parameters present in the argument are present in this instance.\n   * </ol>\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8) // true\n   * PLAIN_TEXT_UTF_8.is(HTML_UTF_8) // false\n   * PLAIN_TEXT_UTF_8.is(ANY_TYPE) // true\n   * PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE) // true\n   * PLAIN_TEXT_UTF_8.is(ANY_IMAGE_TYPE) // false\n   * PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE.withCharset(UTF_8)) // true\n   * PLAIN_TEXT_UTF_8.withoutParameters().is(ANY_TEXT_TYPE.withCharset(UTF_8)) // false\n   * PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE.withCharset(UTF_16)) // false\n   * }\n   *\n   * <p>Note that while it is possible to have the same parameter declared multiple times within a\n   * media type this method does not consider the number of occurrences of a parameter. For example,\n   * {@code \"text/plain; charset=UTF-8\"} satisfies {@code \"text/plain; charset=UTF-8;\n   * charset=UTF-8\"}.",
  "com.google.common.collect.Synchronized$SynchronizedTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:minus(java.math.BigDecimal,java.math.BigDecimal)" : null,
  "com.google.common.graph.ForwardingValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.graph.StandardMutableValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder)" : "Constructs a mutable graph with the properties specified in {@code builder}.",
  "com.google.common.io.LineBuffer:finishLine(boolean)" : "Called when a line is complete.",
  "com.google.common.primitives.UnsignedInteger:plus(com.google.common.primitives.UnsignedInteger)" : "* Returns the result of adding this and {@code val}. If the result would have more than 32 bits,\n   * returns the low 32 bits of the result.\n   *\n   * @since 14.0",
  "com.google.common.collect.AbstractBiMap$BiMapEntry:delegate()" : null,
  "com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,java.lang.Comparable)" : null,
  "com.google.common.collect.RegularImmutableMap$Values:<init>(com.google.common.collect.RegularImmutableMap)" : null,
  "com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one\n   * occurrence of {@code e} in {@code multisetToModify}.\n   *\n   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code\n   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -\n   * occurrencesToRemove.count(e))}.\n   *\n   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll\n   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear\n   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit\n   * sometimes more efficient than, the following:\n   *\n   * {@snippet :\n   * for (E e : occurrencesToRemove) {\n   *   multisetToModify.remove(e);\n   * }\n   * }\n   *\n   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation\n   * @since 10.0 (missing in 18.0 when only the overload taking an {@code Iterable} was present)",
  "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:hasNext()" : null,
  "com.google.common.collect.HashMultiset:<init>()" : null,
  "com.google.common.base.CharMatcher$IsNot:negate()" : null,
  "com.google.common.io.ByteSink$AsCharSink:toString()" : null,
  "com.google.common.primitives.UnsignedInteger:compareTo(com.google.common.primitives.UnsignedInteger)" : "* Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are\n   * equal, a negative number if {@code this < other}, and a positive number if {@code this >\n   * other}.",
  "com.google.common.collect.ImmutableMap:remove(java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.CompactHashSet:createHashFloodingResistantDelegate(int)" : null,
  "com.google.common.util.concurrent.Futures$InCompletionOrderState:recordInputCompletion(com.google.common.collect.ImmutableList,int)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:poll()" : null,
  "com.google.common.collect.HashBasedTable:create(int,int)" : "* Creates an empty {@code HashBasedTable} with the specified map sizes.\n   *\n   * @param expectedRows the expected number of distinct row keys\n   * @param expectedCellsPerRow the expected number of column key / value mappings in each row\n   * @throws IllegalArgumentException if {@code expectedRows} or {@code expectedCellsPerRow} is\n   *     negative",
  "com.google.common.collect.Iterables:castOrCopyToCollection(java.lang.Iterable)" : "* Converts an iterable into a collection. If the iterable is already a collection, it is\n   * returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the\n   * iterable in the same iteration order.",
  "com.google.common.collect.Synchronized$SynchronizedTable:columnKeySet()" : null,
  "com.google.common.collect.Iterables:partition(java.lang.Iterable,int)" : "* Divides an iterable into unmodifiable sublists of the given size (the final iterable may be\n   * smaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a\n   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two\n   * inner lists of three and two elements, all in the original order.\n   *\n   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}\n   * method. The returned lists implement {@link RandomAccess}, whether or not the input list does.\n   *\n   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.\n   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link\n   * OutOfMemoryError}.\n   *\n   * <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)}\n   * instead.\n   *\n   * @param iterable the iterable to return a partitioned view of\n   * @param size the desired size of each partition (the last may be smaller)\n   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided\n   *     into partitions\n   * @throws IllegalArgumentException if {@code size} is nonpositive",
  "com.google.common.util.concurrent.AbstractService$2:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeSet:contains(java.lang.Comparable)" : null,
  "com.google.common.collect.ImmutableSortedMap:isPartialView()" : null,
  "com.google.common.collect.ImmutableSortedSet:first()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:clear()" : null,
  "com.google.common.base.SmallCharMatcher:checkFilter(int)" : null,
  "com.google.common.util.concurrent.AtomicDoubleArray:updateAndGet(int,java.util.function.DoubleUnaryOperator)" : "* Atomically updates the element at index {@code i} with the results of applying the given\n   * function to the current value.\n   *\n   * @param i the index to update\n   * @param updaterFunction the update function\n   * @return the updated value\n   * @since 31.1",
  "com.google.common.collect.ImmutableMultimap$EntryCollection:size()" : null,
  "com.google.common.graph.ValueGraphBuilder:undirected()" : "Returns a {@link ValueGraphBuilder} for building undirected graphs.",
  "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,char)" : "* Adds a name/value pair to the formatted output in {@code name=value} format.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",
  "com.google.common.collect.Sets:subSet(java.util.NavigableSet,com.google.common.collect.Range)" : "* Returns a view of the portion of {@code set} whose elements are contained by {@code range}.\n   *\n   * <p>This method delegates to the appropriate methods of {@link NavigableSet} (namely {@link\n   * NavigableSet#subSet(Object, boolean, Object, boolean) subSet()}, {@link\n   * NavigableSet#tailSet(Object, boolean) tailSet()}, and {@link NavigableSet#headSet(Object,\n   * boolean) headSet()}) to actually construct the view. Consult these methods for a full\n   * description of the returned view's behavior.\n   *\n   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural\n   * ordering. {@code NavigableSet} on the other hand can specify a custom ordering via a {@link\n   * Comparator}, which can violate the natural ordering. Using this method (or in general using\n   * {@code Range}) with unnaturally-ordered sets can lead to unexpected and undefined behavior.\n   *\n   * @since 20.0",
  "com.google.common.collect.Iterables$UnmodifiableIterable:iterator()" : null,
  "com.google.common.net.InternetDomainName:validateSyntax(java.util.List)" : "* Validation method used by {@code from} to ensure that the domain name is syntactically valid\n   * according to RFC 1035.\n   *\n   * @return Is the domain name syntactically valid?",
  "com.google.common.collect.Maps:transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)" : "* Returns a view of a sorted map whose values are derived from the original sorted map's entries.\n   * In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on\n   * the key as well as the value.\n   *\n   * <p>All other properties of the transformed map, such as iteration order, are left intact. For\n   * example, the code:\n   *\n   * {@snippet :\n   * Map<String, Boolean> options =\n   *     ImmutableSortedMap.of(\"verbose\", true, \"sort\", false);\n   * EntryTransformer<String, Boolean, String> flagPrefixer =\n   *     new EntryTransformer<String, Boolean, String>() {\n   *       public String transformEntry(String key, Boolean value) {\n   *         return value ? key : \"yes\" + key;\n   *       }\n   *     };\n   * SortedMap<String, String> transformed =\n   *     Maps.transformEntries(options, flagPrefixer);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {sort=yessort, verbose=verbose}}.\n   *\n   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports\n   * removal operations, and these are reflected in the underlying map.\n   *\n   * <p>It's acceptable for the underlying map to contain null keys and null values provided that\n   * the transformer is capable of accepting null inputs. The transformed map might contain null\n   * values if the transformer sometimes gives a null result.\n   *\n   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.\n   *\n   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned\n   * map to be a view, but it means that the transformer will be applied many times for bulk\n   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform\n   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map\n   * doesn't need to be a view, copy the returned map into a new map of your choosing.\n   *\n   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code\n   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of\n   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as\n   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the\n   * transformed map.\n   *\n   * @since 11.0",
  "com.google.common.collect.CompactLinkedHashSet:adjustAfterRemove(int,int)" : null,
  "com.google.common.reflect.TypeToken$TypeSet:interfaces()" : "Returns the types that are interfaces implemented by this type.",
  "com.google.common.collect.ImmutableCollection:asList()" : "* Returns an {@code ImmutableList} containing the same elements, in the same order, as this\n   * collection.\n   *\n   * <p><b>Performance note:</b> in most cases this method can return quickly without actually\n   * copying anything. The exact circumstances under which the copy is performed are undefined and\n   * subject to change.\n   *\n   * @since 2.0",
  "com.google.common.collect.Maps$AbstractFilteredMap:putAll(java.util.Map)" : null,
  "com.google.common.collect.ImmutableRangeSet$AsSet:contains(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableIntArray:copyOf(int[])" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.io.CharStreams:<init>()" : null,
  "com.google.common.collect.AbstractTable:columnKeySet()" : null,
  "com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : "* @since 12.0",
  "com.google.common.collect.SortedMultisets:getElementOrThrow(com.google.common.collect.Multiset$Entry)" : null,
  "com.google.common.collect.ImmutableRangeMap:copyOf(com.google.common.collect.RangeMap)" : null,
  "com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,com.google.common.util.concurrent.AsyncCallable)" : null,
  "com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableRangeSet)" : null,
  "com.google.common.io.LineBuffer:add(char[],int,int)" : "* Process additional characters from the stream. When a line separator is found the contents of\n   * the line and the line separator itself are passed to the abstract {@link #handleLine} method.\n   *\n   * @param cbuf the character buffer to process\n   * @param off the offset into the buffer\n   * @param len the number of characters to process\n   * @throws IOException if an I/O error occurs\n   * @see #finish",
  "com.google.common.collect.ForwardingQueue:peek()" : null,
  "com.google.common.collect.Multimaps$MapMultimap:entries()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readUnsignedByte()" : null,
  "com.google.common.base.Present:isPresent()" : null,
  "com.google.common.util.concurrent.AbstractService:awaitRunning(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.base.Verify:verify(boolean)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no\n   * message otherwise.\n   *\n   * @throws VerifyException if {@code expression} is {@code false}\n   * @see Preconditions#checkState Preconditions.checkState()",
  "com.google.common.collect.Maps$AsMapView:get(java.lang.Object)" : null,
  "com.google.common.collect.Ordering$ArbitraryOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultimap:values()" : "* Returns a collection of all values in the multimap. Changes to the returned collection will\n   * update the underlying multimap, and vice versa.\n   *\n   * <p>The iterator generated by the returned collection traverses the values in the order they\n   * were added to the multimap.",
  "com.google.common.graph.GraphBuilder:<init>(boolean)" : "Creates a new instance with the specified edge directionality.",
  "com.google.common.util.concurrent.ForwardingExecutorService:isShutdown()" : null,
  "com.google.common.collect.AbstractBiMap$ValueSet:toString()" : null,
  "com.google.common.collect.Ordering:leastOf(java.util.Iterator,int)" : "* Returns the {@code k} least elements from the given iterator according to this ordering, in\n   * order from least to greatest. If there are fewer than {@code k} elements present, all will be\n   * included.\n   *\n   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n   * elements are equivalent, it is undefined which will come first.\n   *\n   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.least(k,\n   * thisComparator))} instead.\n   *\n   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending\n   *     order\n   * @throws IllegalArgumentException if {@code k} is negative\n   * @since 14.0",
  "com.google.common.collect.MapMakerInternalMap$HashIterator:nextEntry()" : null,
  "com.google.common.collect.Maps:valueFunction()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)" : null,
  "com.google.common.io.Resources$UrlByteSource:toString()" : null,
  "com.google.common.collect.ForwardingList:set(int,java.lang.Object)" : null,
  "com.google.common.collect.Sets:<init>()" : null,
  "com.google.common.cache.LocalCache$Segment:recordRead(com.google.common.cache.ReferenceEntry,long)" : "* Records the relative order in which this read was performed by adding {@code entry} to the\n     * recency queue. At write-time, or when the queue is full past the threshold, the queue will be\n     * drained and the entries therein processed.\n     *\n     * <p>Note: locked reads should use {@link #recordLockedRead}.",
  "com.google.common.util.concurrent.Striped$PowerOfTwoStriped:get(java.lang.Object)" : null,
  "com.google.common.graph.Traverser$Traversal:breadthFirst(java.util.Iterator)" : null,
  "com.google.common.hash.SipHashFunction:hashCode()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String,boolean)" : "* Creates a {@link ReentrantReadWriteLock} with the given fairness policy. The {@code lockName}\n   * is used in the warning or exception output to help identify the locks involved in the detected\n   * deadlock.",
  "com.google.common.reflect.ClassPath:getClassPathEntries(java.lang.ClassLoader)" : null,
  "com.google.common.collect.FluentIterable:of()" : "* Returns a fluent iterable containing no elements.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n   *\n   * @since 20.0",
  "com.google.common.collect.AbstractBiMap$ValueSet:iterator()" : null,
  "com.google.common.collect.Maps$AsMapView:createValues()" : null,
  "com.google.common.io.ByteSource$ByteArrayByteSource:hash(com.google.common.hash.HashFunction)" : null,
  "com.google.common.graph.UndirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$Column$KeySet:remove(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,int)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Maps$AsMapView:<init>(java.util.Set,com.google.common.base.Function)" : null,
  "com.google.common.collect.ImmutableRangeMap:writeReplace()" : null,
  "com.google.common.collect.MutableClassToInstanceMap:checkedEntry(java.util.Map$Entry)" : "* Wraps the {@code setValue} implementation of an {@code Entry} to enforce the class constraint.",
  "com.google.common.cache.LocalCache$Segment:tryExpireEntries(long)" : "Cleanup expired entries when the lock is available.",
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture:isCancelled()" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:orderValuesBy(java.util.Comparator)" : "* Specifies the ordering of the generated multimap's values for each key.\n     *\n     * @since 8.0",
  "com.google.common.util.concurrent.AbstractService:stoppingEvent(com.google.common.util.concurrent.Service$State)" : null,
  "com.google.common.collect.CompactHashMap:keySet()" : null,
  "com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:<init>(com.google.common.collect.ImmutableMultiset)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(java.time.Duration,java.time.Duration)" : "* Returns a {@link Scheduler} that schedules the task using the {@link\n     * ScheduledExecutorService#scheduleWithFixedDelay} method.\n     *\n     * @param initialDelay the time to delay first execution\n     * @param delay the delay between the termination of one execution and the commencement of the\n     *     next\n     * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.primitives.Doubles:indexOf(double[],double)" : "* Returns the index of the first appearance of the value {@code target} in {@code array}. Note\n   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n   *\n   * @param array an array of {@code double} values, possibly empty\n   * @param target a primitive {@code double} value\n   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.util.Iterator)" : "* Appends the string representation of each of {@code parts}, using the previously configured\n   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n   * Iterable)}, except that it does not throw {@link IOException}.\n   *\n   * @since 11.0",
  "com.google.common.collect.ForwardingQueue:standardPeek()" : "* A sensible definition of {@link #peek} in terms of {@link #element}. If you override {@link\n   * #element}, you may wish to override {@link #peek} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.TreeBasedTable$TreeRow:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingBlockingDeque:putLast(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:getNext()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:iterator()" : null,
  "com.google.common.collect.ImmutableList:iterator()" : null,
  "com.google.common.base.FinalizableReferenceQueue:getStartFinalizer(java.lang.Class)" : "Looks up Finalizer.startFinalizer().",
  "com.google.common.collect.Synchronized$SynchronizedMultimap:<init>(com.google.common.collect.Multimap,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableSet:lower(java.lang.Object)" : null,
  "com.google.common.collect.DescendingImmutableSortedMultiset:getEntry(int)" : null,
  "com.google.common.collect.FluentIterable:<init>(java.lang.Iterable)" : null,
  "com.google.common.hash.Funnels:<init>()" : null,
  "com.google.common.collect.ImmutableList:subListUnchecked(int,int)" : "* Called by the default implementation of {@link #subList} when {@code toIndex - fromIndex > 1},\n   * after index validation has already been performed.",
  "com.google.common.reflect.Parameter:getDeclaredAnnotationsByType(java.lang.Class)" : "* @since 18.0",
  "com.google.common.collect.EnumMultiset:iterator()" : null,
  "com.google.common.util.concurrent.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.SingletonImmutableBiMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.ForwardingConcurrentMap:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.primitives.Ints$IntArrayAsList:subList(int,int)" : null,
  "com.google.common.collect.ImmutableSortedMap:lastEntry()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner4:call(com.google.common.util.concurrent.ClosingFuture$Combiner4$ClosingFunction4,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * combining function to their values. The function can use a {@link DeferredCloser} to capture\n     * objects to be closed when the pipeline is done.\n     *\n     * <p>If this combiner was returned by {@link #whenAllSucceed(ClosingFuture, ClosingFuture,\n     * ClosingFuture, ClosingFuture)} and any of the inputs fail, so will the returned step.\n     *\n     * <p>If the function throws a {@code CancellationException}, the pipeline will be cancelled.\n     *\n     * <p>If the function throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and used as the failure of the derived step.",
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingMap()" : null,
  "com.google.common.collect.Synchronized$SynchronizedSortedSet:tailSet(java.lang.Object)" : null,
  "com.google.common.reflect.ClassPath:from(java.lang.ClassLoader)" : "* Returns a {@code ClassPath} representing all classes and resources loadable from {@code\n   * classloader} and its ancestor class loaders.\n   *\n   * <p><b>Warning:</b> {@code ClassPath} can find classes and resources only from:\n   *\n   * <ul>\n   *   <li>{@link URLClassLoader} instances' {@code file:} URLs\n   *   <li>the {@linkplain ClassLoader#getSystemClassLoader() system class loader}. To search the\n   *       system class loader even when it is not a {@link URLClassLoader} (as in Java 9), {@code\n   *       ClassPath} searches the files from the {@code java.class.path} system property.\n   * </ul>\n   *\n   * @throws IOException if the attempt to read class path resources (jar files or directories)\n   *     failed.",
  "com.google.common.collect.TreeRangeMap$SubRangeMap:putAll(com.google.common.collect.RangeMap)" : null,
  "com.google.common.reflect.Parameter:getAnnotatedType()" : "* Returns the {@link AnnotatedType} of the parameter.\n   *\n   * @since 25.1 for guava-jre",
  "com.google.common.util.concurrent.FakeTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.FluentIterable:isEmpty()" : "* Determines whether this fluent iterable is empty.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}.",
  "com.google.common.util.concurrent.CollectionFuture$ListFuture:combine(java.util.List)" : null,
  "com.google.common.collect.Collections2$FilteredCollection:toArray(java.lang.Object[])" : null,
  "com.google.common.primitives.UnsignedInteger:longValue()" : "Returns the value of this {@code UnsignedInteger} as a {@code long}.",
  "com.google.common.collect.CompactHashMap:allocArrays()" : "Handle lazy allocation of arrays.",
  "com.google.common.collect.ReverseOrdering:min(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Maps$DescendingMap:higherEntry(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.net.InternetDomainName:from(java.lang.String)" : "* Returns an instance of {@link InternetDomainName} after lenient validation. Specifically,\n   * validation against <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n   * (\"Internationalizing Domain Names in Applications\") is skipped, while validation against <a\n   * href=\"http://www.ietf.org/rfc/rfc1035.txt\">RFC 1035</a> is relaxed in the following ways:\n   *\n   * <ul>\n   *   <li>Any part containing non-ASCII characters is considered valid.\n   *   <li>Underscores ('_') are permitted wherever dashes ('-') are permitted.\n   *   <li>Parts other than the final part may start with a digit, as mandated by <a\n   *       href=\"https://tools.ietf.org/html/rfc1123#section-2\">RFC 1123</a>.\n   * </ul>\n   *\n   * @param domain A domain name (not IP address)\n   * @throws IllegalArgumentException if {@code domain} is not syntactically valid according to\n   *     {@link #isValid}\n   * @since 10.0 (previously named {@code fromLenient})",
  "com.google.common.collect.TreeMultiset$AvlNode:add(java.util.Comparator,java.lang.Object,int,int[])" : null,
  "com.google.common.util.concurrent.Striped$PowerOfTwoStriped:<init>(int)" : null,
  "com.google.common.math.DoubleUtils:scaleNormalize(double)" : null,
  "com.google.common.collect.FluentIterable:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)" : "* Returns a fluent iterable that combines four iterables. The returned iterable has an iterator\n   * that traverses the elements in {@code a}, followed by the elements in {@code b}, followed by\n   * the elements in {@code c}, followed by the elements in {@code d}. The source iterators are not\n   * polled until necessary.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input\n   * iterator supports it.\n   *\n   * <p><b>{@code Stream} equivalent:</b> use nested calls to {@link Stream#concat}, or see the\n   * advice in {@link #concat(Iterable...)}.\n   *\n   * @since 20.0",
  "com.google.common.collect.Synchronized$SynchronizedBiMap:values()" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:ceiling(java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$TableSet:isEmpty()" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.primitives.Doubles$DoubleArrayAsList:get(int)" : null,
  "com.google.common.collect.FilteredEntryMultimap$ValuePredicate:apply(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Monitor:tryEnterIf(com.google.common.util.concurrent.Monitor$Guard)" : "* Enters this monitor if it is possible to do so immediately and the guard is satisfied. Does not\n   * block acquiring the lock and does not wait for the guard to be satisfied.\n   *\n   * <p><b>Note:</b> This method disregards the fairness setting of this monitor.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",
  "com.google.common.io.Files$2:<init>()" : null,
  "com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int,java.lang.Object)" : null,
  "com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)" : "* Appends the string representation of each entry in {@code entries}, using the previously\n     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n     *\n     * @since 10.0",
  "com.google.common.collect.ForwardingSortedSet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingIterator()" : null,
  "com.google.common.math.Quantiles$ScaleAndIndex:<init>(int,int)" : null,
  "com.google.common.collect.Multimaps:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:getHash()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:keySet()" : null,
  "com.google.common.collect.Maps:newHashMap(java.util.Map)" : "* Creates a <i>mutable</i> {@code HashMap} instance with the same mappings as the specified map.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableMap#copyOf(Map)} instead.\n   *\n   * <p><b>Note:</b> if {@code K} is an {@link Enum} type, use {@link #newEnumMap} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code HashMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @param map the mappings to be placed in the new map\n   * @return a new {@code HashMap} initialized with the mappings from {@code map}",
  "com.google.common.collect.AbstractBiMap:forcePut(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:isTerminated()" : null,
  "com.google.common.collect.Maps$UnmodifiableEntries:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.AbstractTable:valuesSpliterator()" : null,
  "com.google.common.collect.Ordering:min(java.lang.Object,java.lang.Object)" : "* Returns the lesser of the two values according to this ordering. If the values compare as 0,\n   * the first is returned.\n   *\n   * <p><b>Implementation note:</b> this method is invoked by the default implementations of the\n   * other {@code min} overloads, so overriding it will affect their behavior.\n   *\n   * <p><b>Note:</b> Consider using {@code Comparators.min(a, b, thisComparator)} instead. If {@code\n   * thisComparator} is {@link Ordering#natural}, then use {@code Comparators.min(a, b)}.\n   *\n   * @param a value to compare, returned if less than or equal to b.\n   * @param b value to compare.\n   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n   *     ordering.",
  "com.google.thirdparty.publicsuffix.TrieParser:reverse(java.lang.CharSequence)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:size()" : null,
  "com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:readResolve()" : null,
  "com.google.common.hash.AbstractNonStreamingHashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)" : null,
  "com.google.common.collect.Lists:indexOfImpl(java.util.List,java.lang.Object)" : "An implementation of {@link List#indexOf(Object)}.",
  "com.google.common.collect.ImmutableMultimap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.DenseImmutableTable$Column:getValue(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:<init>(com.google.common.collect.Table,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(java.lang.Object[])" : null,
  "com.google.common.util.concurrent.CombinedFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)" : null,
  "com.google.common.reflect.ClassPath$ClassInfo:isTopLevel()" : "* Returns true if the class name \"looks to be\" top level (not nested), that is, it includes no\n     * '$' in the name. This method may return false for a top-level class that's intentionally\n     * named with the '$' character. If this is a concern, you could use {@link #load} and then\n     * check on the loaded {@link Class} object instead.\n     *\n     * @since 30.1",
  "com.google.common.cache.CacheLoader:asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor)" : "* Returns a {@code CacheLoader} which wraps {@code loader}, executing calls to {@link\n   * CacheLoader#reload} using {@code executor}.\n   *\n   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such\n   * as {@linkplain #reload the default implementation}.\n   *\n   * @since 17.0",
  "com.google.common.reflect.Types:toString(java.lang.reflect.Type)" : "* Returns a human-readable string representation of {@code type}.\n   *\n   * <p>The format is subject to change.",
  "com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,java.time.Duration)" : "* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)\n   * awaitTermination(long, TimeUnit)} uninterruptibly.\n   *\n   * @since 30.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.Callables:returning(java.lang.Object)" : "Creates a {@code Callable} which immediately returns a preset value each time it is called.",
  "com.google.common.collect.Streams:mapWithIndex(java.util.stream.DoubleStream,com.google.common.collect.Streams$DoubleFunctionWithIndex)" : "* Returns a stream consisting of the results of applying the given function to the elements of\n   * {@code stream} and their indexes in the stream. For example,\n   *\n   * {@snippet :\n   * mapWithIndex(\n   *     DoubleStream.of(0.0, 1.0, 2.0)\n   *     (e, index) -> index + \":\" + e)\n   * }\n   *\n   * <p>...would return {@code Stream.of(\"0:0.0\", \"1:1.0\", \"2:2.0\")}.\n   *\n   * <p>The resulting stream is <a\n   * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n   * if and only if {@code stream} was efficiently splittable and its underlying spliterator\n   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream\n   * comes from a data structure supporting efficient indexed random access, typically an array or\n   * list.\n   *\n   * <p>The order of the resulting stream is defined if and only if the order of the original stream\n   * was defined.",
  "com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)" : "* Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread\n   * currently occupying this monitor.",
  "com.google.common.cache.LocalCache$Segment:loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.collect.Lists:partition(java.util.List,int)" : "* Returns consecutive {@linkplain List#subList(int, int) sublists} of a list, each of the same\n   * size (the final list may be smaller). For example, partitioning a list containing {@code [a, b,\n   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list\n   * containing two inner lists of three and two elements, all in the original order.\n   *\n   * <p>The outer list is unmodifiable, but reflects the latest state of the source list. The inner\n   * lists are sublist views of the original list, produced on demand using {@link List#subList(int,\n   * int)}, and are subject to all the usual caveats about modification as explained in that API.\n   *\n   * @param list the list to return consecutive sublists of\n   * @param size the desired size of each sublist (the last may be smaller)\n   * @return a list of consecutive sublists\n   * @throws IllegalArgumentException if {@code partitionSize} is nonpositive",
  "com.google.common.collect.AbstractBiMap:<init>(java.util.Map,java.util.Map)" : "Package-private constructor for creating a map-backed bimap.",
  "com.google.common.collect.Interners$InternerBuilder:concurrencyLevel(int)" : "* Sets the concurrency level that will be used by the to-be-built {@link Interner}.\n     *\n     * @see MapMaker#concurrencyLevel(int)",
  "com.google.common.util.concurrent.AbstractTransformFuture:pendingToString()" : null,
  "com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:forEach(java.util.function.DoubleConsumer)" : "* Invokes {@code consumer} for each value contained in this array, in order.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.base.CharMatcher$AnyOf:matches(char)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:get()" : "* Returns the final value of the associated {@link ClosingFuture}, or throws an exception as\n     * {@link Future#get()} would.\n     *\n     * <p>Because the asynchronous operation has already completed, this method is synchronous and\n     * returns immediately.\n     *\n     * @throws CancellationException if the computation was cancelled\n     * @throws ExecutionException if the computation threw an exception",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.cache.LocalCache$SoftValueReference:notifyNewValue(java.lang.Object)" : null,
  "com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable)" : "* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one\n   * occurrence of {@code e} in {@code multisetToModify}.\n   *\n   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code\n   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -\n   * Iterables.frequency(occurrencesToRemove, e))}.\n   *\n   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll\n   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear\n   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit\n   * sometimes more efficient than, the following:\n   *\n   * {@snippet :\n   * for (E e : occurrencesToRemove) {\n   *   multisetToModify.remove(e);\n   * }\n   * }\n   *\n   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation\n   * @since 18.0 (present in 10.0 with a requirement that the second parameter be a {@code\n   *     Multiset})",
  "com.google.common.collect.ImmutableSortedMap:floorEntry(java.lang.Object)" : null,
  "com.google.common.collect.Maps:filterValues(java.util.Map,com.google.common.base.Predicate)" : "* Returns a map containing the mappings in {@code unfiltered} whose values satisfy a predicate.\n   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},\n   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings whose values satisfy the filter will be removed from the underlying\n   * map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory:newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)" : "Creates a new factory with the specified policy.",
  "com.google.common.util.concurrent.TrustedListenableFutureTask:create(com.google.common.util.concurrent.AsyncCallable)" : null,
  "com.google.common.collect.ForwardingSet:hashCode()" : null,
  "com.google.common.cache.CacheBuilder:expireAfterAccess(long,java.util.concurrent.TimeUnit)" : "* Specifies that each entry should be automatically removed from the cache once a fixed duration\n   * has elapsed after the entry's creation, the most recent replacement of its value, or its last\n   * access. Access time is reset by all cache read and write operations (including {@code\n   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code\n   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}. So, for\n   * example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the\n   * entries you retrieve.\n   *\n   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)\n   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be\n   * useful in testing, or to disable caching temporarily without a code change.\n   *\n   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or\n   * write operations. Expired entries are cleaned up as part of the routine maintenance described\n   * in the class javadoc.\n   *\n   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when\n   * feasible), use {@link #expireAfterAccess(Duration)} instead.\n   *\n   * @param duration the length of time after an entry is last accessed that it should be\n   *     automatically removed\n   * @param unit the unit that {@code duration} is expressed in\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code duration} is negative\n   * @throws IllegalStateException if {@link #expireAfterAccess} was already set",
  "com.google.common.net.HostAndPort:withDefaultPort(int)" : "* Provide a default port if the parsed string contained only a host.\n   *\n   * <p>You can chain this after {@link #fromString(String)} to include a port in case the port was\n   * omitted from the input string. If a port was already provided, then this method is a no-op.\n   *\n   * @param defaultPort a port number, from [0..65535]\n   * @return a HostAndPort instance, guaranteed to have a defined port.",
  "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:createKeySet()" : null,
  "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isCancelled()" : null,
  "com.google.common.collect.Multimaps$Keys:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.EnumBiMap:putAll(java.util.Map)" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:indexOf(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:run()" : null,
  "com.google.common.math.PairedStatsAccumulator:leastSquaresFit()" : "* Returns a linear transformation giving the best fit to the data according to <a\n   * href=\"http://mathworld.wolfram.com/LeastSquaresFitting.html\">Ordinary Least Squares linear\n   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and\n   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code\n   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is\n   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}\n   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.\n   *\n   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This\n   * error is defined as the square root of the mean of the squares of the differences between the\n   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}\n   * values (i.e. it is the square root of the mean of the squares of the vertical distances between\n   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -\n   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's\n   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).\n   *\n   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a\n   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit\n   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and\n   * {@code y}.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link\n   * LinearTransformation#forNaN()}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or\n   *     both the {@code x} and {@code y} dataset have zero population variance",
  "com.google.common.util.concurrent.RateLimiter:acquire()" : "* Acquires a single permit from this {@code RateLimiter}, blocking until the request can be\n   * granted. Tells the amount of time slept, if any.\n   *\n   * <p>This method is equivalent to {@code acquire(1)}.\n   *\n   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited\n   * @since 16.0 (present in 13.0 with {@code void} return type})",
  "com.google.common.hash.Hashing:combineOrdered(java.lang.Iterable)" : "* Returns a hash code, having the same bit length as each of the input hash codes, that combines\n   * the information of these hash codes in an ordered fashion. That is, whenever two equal hash\n   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each\n   * was computed from the <i>same</i> input hash codes in the <i>same</i> order.\n   *\n   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all\n   *     have the same bit length",
  "com.google.common.primitives.ImmutableLongArray$AsList:size()" : null,
  "com.google.common.collect.MultimapBuilder$LinkedListSupplier:instance()" : null,
  "com.google.common.collect.Sets$SetView:addAll(java.util.Collection)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n     *\n     * @throws UnsupportedOperationException always\n     * @deprecated Unsupported operation.",
  "com.google.common.graph.ImmutableNetwork:isDirected()" : null,
  "com.google.common.primitives.SignedBytes:compare(byte,byte)" : "* Compares the two specified {@code byte} values. The sign of the value returned is the same as\n   * that of {@code ((Byte) a).compareTo(b)}.\n   *\n   * <p><b>Note:</b> this method behaves identically to {@link Byte#compare}.\n   *\n   * @param a the first {@code byte} to compare\n   * @param b the second {@code byte} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeChars(java.lang.String)" : null,
  "com.google.common.net.HttpHeaders$ReferrerPolicyValues:<init>()" : null,
  "com.google.common.hash.ChecksumHashFunction:bits()" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.TreeMultiset$Reference:checkAndSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Joiner:withKeyValueSeparator(java.lang.String)" : "* Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as\n   * this {@code Joiner} otherwise.",
  "com.google.common.collect.TreeMultiset:distinctElements()" : null,
  "com.google.common.cache.LocalCache$Segment:setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long)" : "Sets a new value of an entry. Adds newly created entries at the end of the access queue.",
  "com.google.common.collect.Maps$BiMapConverter:convert(com.google.common.collect.BiMap,java.lang.Object)" : null,
  "com.google.common.collect.EnumHashBiMap:putAll(java.util.Map)" : null,
  "com.google.common.collect.CollectPreconditions:checkPositive(int,java.lang.String)" : null,
  "com.google.common.graph.MultiEdgesConnecting:<init>(java.util.Map,java.lang.Object)" : null,
  "com.google.common.util.concurrent.Striped$WeakSafeLock:<init>(java.util.concurrent.locks.Lock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock)" : null,
  "com.google.common.net.MediaType$Tokenizer:consumeCharacter(com.google.common.base.CharMatcher)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:clear()" : null,
  "com.google.common.util.concurrent.Callables:threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier)" : "* Wraps the given callable such that for the duration of {@link Callable#call} the thread that is\n   * running will have the given name.\n   *\n   * @param callable The callable to wrap\n   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once\n   *     for each invocation of the wrapped callable.",
  "com.google.common.primitives.Ints$IntArrayAsList:<init>(int[],int,int)" : null,
  "com.google.common.collect.TreeMultiset:lastEntry()" : null,
  "com.google.common.reflect.TypeToken:of(java.lang.Class)" : "Returns an instance of type token that wraps {@code type}.",
  "com.google.common.cache.LocalCache:putIfAbsent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.math.BigIntegerMath:sqrt(java.math.BigInteger,java.math.RoundingMode)" : "* Returns the square root of {@code x}, rounded with the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x < 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code\n   *     sqrt(x)} is not an integer",
  "com.google.common.base.Throwables:propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)" : "* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code\n   * declaredType}. Example usage:\n   *\n   * <pre>\n   * try {\n   *   someMethodThatCouldThrowAnything();\n   * } catch (IKnowWhatToDoWithThisException e) {\n   *   handle(e);\n   * } catch (Throwable t) {\n   *   Throwables.propagateIfInstanceOf(t, IOException.class);\n   *   Throwables.propagateIfInstanceOf(t, SQLException.class);\n   *   throw Throwables.propagate(t);\n   * }\n   * </pre>\n   *\n   * @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code\n   *     null}.",
  "com.google.common.base.CharMatcher$FastMatcher:precomputed()" : null,
  "com.google.common.net.InetAddresses:fromIPv6BigInteger(java.math.BigInteger)" : "* Returns the {@code Inet6Address} corresponding to a given {@code BigInteger}.\n   *\n   * @param address BigInteger representing the IPv6 address\n   * @return Inet6Address representation of the given BigInteger\n   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^128-1\n   * @since 28.2",
  "com.google.common.collect.CompactHashSet:toArray()" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:shutdown()" : null,
  "com.google.common.graph.EndpointPair:adjacentNode(java.lang.Object)" : "* Returns the node that is adjacent to {@code node} along the origin edge.\n   *\n   * @throws IllegalArgumentException if this {@link EndpointPair} does not contain {@code node}\n   * @since 20.0 (but the argument type was changed from {@code Object} to {@code N} in 31.0)",
  "com.google.common.collect.MutableClassToInstanceMap$1:delegate()" : null,
  "com.google.common.collect.RegularImmutableMultiset:size()" : null,
  "com.google.common.util.concurrent.AggregateFuture:init()" : "* Must be called at the end of each subclass's constructor. This method performs the \"real\"\n   * initialization; we can't put this in the constructor because, in the case where futures are\n   * already complete, we would not initialize the subclass before calling {@link\n   * #collectValueFromNonCancelledFuture}. As this is called after the subclass is constructed,\n   * we're guaranteed to have properly initialized the subclass.",
  "com.google.common.io.AppendableWriter:flush()" : null,
  "com.google.common.base.Java8Compatibility:<init>()" : null,
  "com.google.common.collect.EnumMultiset:setCount(java.lang.Object,int,int)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:isAcquiredByCurrentThread()" : null,
  "com.google.common.collect.Collections2$FilteredCollection:removeAll(java.util.Collection)" : null,
  "com.google.common.graph.Graphs:canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)" : "* Determines whether an edge has already been used during traversal. In the directed case a cycle\n   * is always detected before reusing an edge, so no special logic is required. In the undirected\n   * case, we must take care not to \"backtrack\" over an edge (i.e. going from A to B and then going\n   * from B to A).",
  "com.google.common.collect.Iterators$ConcatenatedIterator:getTopMetaIterator()" : null,
  "com.google.common.util.concurrent.AbstractService:enqueueStoppingEvent(com.google.common.util.concurrent.Service$State)" : null,
  "com.google.common.collect.Cut:aboveValue(java.lang.Comparable)" : null,
  "com.google.common.cache.LocalCache:nullEntry()" : null,
  "com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object)" : null,
  "com.google.common.hash.AbstractStreamingHasher:processRemaining(java.nio.ByteBuffer)" : "* This is invoked for the last bytes of the input, which are not enough to fill a whole chunk.\n   * The passed {@code ByteBuffer} is guaranteed to be non-empty.\n   *\n   * <p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}.",
  "com.google.common.collect.TreeBasedTable$TreeRow:headMap(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingMap()" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:encodingStream(java.io.Writer)" : null,
  "com.google.common.graph.ForwardingNetwork:adjacentNodes(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableBiMap$Builder:<init>()" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableBiMap#builder}.",
  "com.google.common.collect.FilteredEntryMultimap:createEntries()" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1:remove(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableListMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.AbstractTable:valuesIterator()" : null,
  "com.google.common.collect.Maps:fromProperties(java.util.Properties)" : "* Creates an {@code ImmutableMap<String, String>} from a {@code Properties} instance. Properties\n   * normally derive from {@code Map<Object, Object>}, but they typically contain strings, which is\n   * awkward. This method lets you get a plain-old-{@code Map} out of a {@code Properties}.\n   *\n   * @param properties a {@code Properties} object to be converted\n   * @return an immutable map containing all the entries in {@code properties}\n   * @throws ClassCastException if any key in {@code properties} is not a {@code String}\n   * @throws NullPointerException if any key or value in {@code properties} is null",
  "com.google.common.collect.Maps$TransformedEntriesSortedMap:<init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)" : null,
  "com.google.common.graph.DirectedGraphConnections:<init>(java.util.Map,java.util.List,int,int)" : null,
  "com.google.common.hash.AbstractByteHasher:putBytes(byte[])" : null,
  "com.google.common.collect.Maps$ViewCachingAbstractMap:entrySet()" : null,
  "com.google.common.collect.Multimaps:asMap(com.google.common.collect.ListMultimap)" : "* Returns {@link ListMultimap#asMap multimap.asMap()}, with its type corrected from {@code Map<K,\n   * Collection<V>>} to {@code Map<K, List<V>>}.\n   *\n   * @since 15.0",
  "com.google.common.hash.MessageDigestHashFunction:getMessageDigest(java.lang.String)" : null,
  "com.google.common.util.concurrent.SettableFuture:setException(java.lang.Throwable)" : null,
  "com.google.common.collect.GeneralRange:getLowerEndpoint()" : null,
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.primitives.Shorts:rotate(short[],int)" : "* Performs a right rotation of {@code array} of \"distance\" places, so that the first element is\n   * moved to index \"distance\", and the element at index {@code i} ends up at index {@code (distance\n   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Shorts.asList(array),\n   * distance)}, but is considerably faster and avoids allocation and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @since 32.0.0",
  "com.google.common.collect.Synchronized$SynchronizedDeque:push(java.lang.Object)" : null,
  "com.google.common.collect.FilteredKeyMultimap:unmodifiableEmptyCollection()" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:elapsedNanos()" : null,
  "com.google.common.graph.AbstractNetwork:degree(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableNetwork:nodes()" : null,
  "com.google.common.collect.FilteredKeyMultimap:get(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken:someRawTypeIsSubclassOf(java.lang.Class)" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:inEdges()" : null,
  "com.google.common.collect.TreeRangeMap:create()" : "Returns a new, empty {@link TreeRangeMap}.",
  "com.google.common.collect.AbstractIterator:next()" : null,
  "com.google.common.io.MoreFiles:getParentPath(java.nio.file.Path)" : "* Returns a path to the parent directory of the given path. If the path actually has a parent\n   * path, this is simple. Otherwise, we need to do some trickier things. Returns null if the path\n   * is a root or is the empty path.",
  "com.google.common.collect.ImmutableList:copyOf(java.lang.Iterable)" : "* Returns an immutable list containing the given elements, in order. If {@code elements} is a\n   * {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it\n   * behaves exactly as {@code copyOf(elements.iterator()}.\n   *\n   * @throws NullPointerException if {@code elements} contains a null element",
  "com.google.common.primitives.Primitives:<init>()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @throws IllegalArgumentException if {@code expression} is false",
  "com.google.common.util.concurrent.ClosingFuture:<init>(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.reflect.Invokable$ConstructorInvokable:getGenericExceptionTypes()" : null,
  "com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.InterruptibleTask$Blocker:run()" : null,
  "com.google.common.collect.Maps$NavigableKeySet:descendingSet()" : null,
  "com.google.common.collect.Maps$DescendingMap:lastEntry()" : null,
  "com.google.common.primitives.ImmutableIntArray:length()" : "Returns the number of values in this array.",
  "com.google.common.collect.ForwardingMultimap:isEmpty()" : null,
  "com.google.common.collect.Iterators:size(java.util.Iterator)" : "* Returns the number of elements remaining in {@code iterator}. The iterator will be left\n   * exhausted: its {@code hasNext()} method will return {@code false}.",
  "com.google.common.primitives.ImmutableLongArray:lastIndexOf(long)" : "* Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no\n   * such index exists. Equivalent to {@code asList().lastIndexOf(target)}.",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int,java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Maps$DescendingMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMap$1EntrySet:iterator()" : null,
  "com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)" : "* Appends the string representation of each of {@code parts}, using the previously configured\n   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n   * Iterable)}, except that it does not throw {@link IOException}.",
  "com.google.common.reflect.Types:supertypeOf(java.lang.reflect.Type)" : "Returns a new {@link WildcardType} with {@code lowerBound}.",
  "com.google.common.collect.ImmutableMultiset$ElementSet:contains(java.lang.Object)" : null,
  "com.google.common.collect.TreeBasedTable:rowMap()" : "* {@inheritDoc}\n   *\n   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link\n   * Table} interface.",
  "com.google.common.net.MediaType:toString()" : "* Returns the string representation of this media type in the format described in <a\n   * href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>.",
  "com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int)" : "An implementation of {@link Multiset#setCount(Object, int)}.",
  "com.google.common.collect.AbstractMapBasedMultimap:valueIterator()" : null,
  "com.google.common.collect.ArrayTable$ArrayMap:keySet()" : null,
  "com.google.common.collect.ImmutableCollection:<init>()" : null,
  "com.google.common.base.Enums:populateCache(java.lang.Class)" : null,
  "com.google.common.reflect.Types$TypeVariableImpl:getBounds()" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:subList(int,int)" : null,
  "com.google.common.collect.EnumBiMap:checkValue(java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueSet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.base.Predicates:containsPattern(java.lang.String)" : "* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested\n   * contains any match for the given regular expression pattern. The test used is equivalent to\n   * {@code Pattern.compile(pattern).matcher(arg).find()}\n   *\n   * @throws IllegalArgumentException if the pattern is invalid\n   * @since 3.0",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:valueStrength()" : null,
  "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:sign(java.math.BigInteger)" : null,
  "com.google.common.collect.ForwardingCollection:clear()" : null,
  "com.google.common.collect.Multimaps$Keys:distinctElements()" : null,
  "com.google.common.reflect.TypeToken$1:toString()" : null,
  "com.google.common.collect.FilteredEntrySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingEntryIterator()" : null,
  "com.google.common.util.concurrent.Uninterruptibles:tryLockUninterruptibly(java.util.concurrent.locks.Lock,java.time.Duration)" : "* Invokes {@code lock.}{@link Lock#tryLock(long, TimeUnit) tryLock(timeout, unit)}\n   * uninterruptibly.\n   *\n   * @since 30.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.base.Predicates:notNull()" : "* Returns a predicate that evaluates to {@code true} if the object reference being tested is not\n   * null.\n   *\n   * <p><b>Discouraged:</b> Prefer using either {@code x -> x != null} or {@code Objects::nonNull},\n   * but note that lambdas and method references do not have human-readable {@link #toString()}\n   * representations and are not serializable.",
  "com.google.common.util.concurrent.AbstractService:awaitTerminated()" : null,
  "com.google.common.graph.AbstractBaseGraph:edgeCount()" : "* Returns the number of edges in this graph; used to calculate the size of {@link Graph#edges()}.\n   * This implementation requires O(|N|) time. Classes extending this one may manually keep track of\n   * the number of edges as the graph is updated, and override this method for better performance.",
  "com.google.common.collect.Maps:unmodifiableBiMap(com.google.common.collect.BiMap)" : "* Returns an unmodifiable view of the specified bimap. This method allows modules to provide\n   * users with \"read-only\" access to internal bimaps. Query operations on the returned bimap \"read\n   * through\" to the specified bimap, and attempts to modify the returned map, whether direct or via\n   * its collection views, result in an {@code UnsupportedOperationException}.\n   *\n   * <p>The returned bimap will be serializable if the specified bimap is serializable.\n   *\n   * @param bimap the bimap for which an unmodifiable view is to be returned\n   * @return an unmodifiable view of the specified bimap",
  "com.google.common.collect.CompactHashSet:toArray(java.lang.Object[])" : null,
  "com.google.common.collect.MapMakerInternalMap$1:clear()" : null,
  "com.google.common.collect.ForwardingMultimap:get(java.lang.Object)" : null,
  "com.google.common.base.Converter:doAndThen(com.google.common.base.Converter)" : "Package-private non-final implementation of andThen() so only we can override it.",
  "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:hashCode()" : null,
  "com.google.common.base.Java8Compatibility:position(java.nio.Buffer,int)" : null,
  "com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)" : null,
  "com.google.common.io.CharSource:copyTo(com.google.common.io.CharSink)" : "* Copies the contents of this source to the given sink.\n   *\n   * @return the number of characters copied\n   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n   *     sink}",
  "com.google.common.collect.SingletonImmutableSet:iterator()" : null,
  "com.google.common.util.concurrent.Futures$InCompletionOrderFuture:<init>(com.google.common.util.concurrent.Futures$InCompletionOrderState)" : null,
  "com.google.common.collect.AbstractSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.CompactLinkedHashMap:setSuccessor(int,int)" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:navigableKeySet()" : null,
  "com.google.common.collect.Comparators:greatest(int,java.util.Comparator)" : "* Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified\n   * {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties\n   * are broken arbitrarily.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * Stream.of(\"foo\", \"quux\", \"banana\", \"elephant\")\n   *     .collect(greatest(2, comparingInt(String::length)))\n   * // returns {\"elephant\", \"banana\"}\n   * }\n   *\n   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log\n   * k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently\n   * takes O(n log n) time and O(n) space.\n   *\n   * @throws IllegalArgumentException if {@code k < 0}\n   * @since 22.0",
  "com.google.common.collect.EmptyContiguousSet:descendingIterator()" : null,
  "com.google.common.net.InternetDomainName:isUnderPublicSuffix()" : "* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},\n   * while not being a public suffix itself. For example, returns {@code true} for {@code\n   * www.google.com}, {@code foo.co.uk} and {@code myblog.blogspot.com}, but not for {@code com},\n   * {@code co.uk}, {@code google.invalid}, or {@code blogspot.com}.\n   *\n   * <p>This method can be used to determine whether it will probably be possible to set cookies on\n   * the domain, though even that depends on individual browsers' implementations of cookie\n   * controls. See <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n   *\n   * @since 6.0",
  "com.google.common.graph.AbstractGraph:degree(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)" : "* Updates the value currently associated with {@code key} with the specified function, and\n   * returns the new value. If there is not currently a value associated with {@code key}, the\n   * function is applied to {@code 0L}.\n   *\n   * @since 21.0",
  "com.google.common.cache.LocalCache:refreshes()" : null,
  "com.google.common.util.concurrent.AbstractService:notifyStopped()" : "* Implementing classes should invoke this method once their service has stopped. It will cause\n   * the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link\n   * State#TERMINATED}.\n   *\n   * @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link\n   *     State#STARTING}, or {@link State#RUNNING}.",
  "com.google.common.util.concurrent.Monitor:tryEnter()" : "* Enters this monitor if it is possible to do so immediately. Does not block.\n   *\n   * <p><b>Note:</b> This method disregards the fairness setting of this monitor.\n   *\n   * @return whether the monitor was entered",
  "com.google.common.base.CharMatcher:matchesAllOf(java.lang.CharSequence)" : "* Returns {@code true} if a character sequence contains only matching BMP characters.\n   *\n   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each\n   * character, until this returns {@code false} or the end is reached.\n   *\n   * @param sequence the character sequence to examine, possibly empty\n   * @return {@code true} if this matcher matches every character in the sequence, including when\n   *     the sequence is empty",
  "com.google.common.collect.ForwardingNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.base.Predicates$InPredicate:apply(java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedInteger:valueOf(java.math.BigInteger)" : "* Returns a {@code UnsignedInteger} representing the same value as the specified {@link\n   * BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}.\n   *\n   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}",
  "com.google.common.collect.FluentIterable:from(java.lang.Object[])" : "* Returns a fluent iterable containing {@code elements} in the specified order.\n   *\n   * <p>The returned iterable is an unmodifiable view of the input array.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#of(Object[])\n   * Stream.of(T...)}.\n   *\n   * @since 20.0 (since 18.0 as an overload of {@code of})",
  "com.google.common.primitives.ImmutableDoubleArray:spliterator()" : null,
  "com.google.common.util.concurrent.UncheckedTimeoutException:<init>(java.lang.String,java.lang.Throwable)" : null,
  "com.google.common.collect.StandardTable$Row:updateBackingRowMapField()" : null,
  "com.google.common.collect.ForwardingNavigableMap:higherKey(java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeMap$1:asDescendingMapOfRanges()" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:createElementSet()" : null,
  "com.google.common.escape.ArrayBasedUnicodeEscaper:escape(java.lang.String)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:add(java.lang.Object)" : "* Adds the given element to this queue. If this queue has a maximum size, after adding {@code\n   * element} the queue will automatically evict its greatest element (according to its comparator),\n   * which may be {@code element} itself.\n   *\n   * @return {@code true} always",
  "com.google.common.base.JdkPattern$JdkMatcher:find(int)" : null,
  "com.google.common.base.CharMatcher$IsEither:toString()" : null,
  "com.google.common.graph.EndpointPair$Unordered:source()" : null,
  "com.google.common.collect.LinkedHashMultimap:succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)" : null,
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:coolDownIntervalMicros()" : null,
  "com.google.common.cache.LocalCache$WriteQueue:isEmpty()" : null,
  "com.google.common.collect.StandardTable$Column:createValues()" : null,
  "com.google.common.collect.Lists$TransformingRandomAccessList:removeRange(int,int)" : "* The default implementation inherited is based on iteration and removal of each element which\n     * can be overkill. That's why we forward this call directly to the backing list.",
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:containsKey(java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedLongs:sortDescending(long[])" : "* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 64-bit\n   * integers.\n   *\n   * @since 23.1",
  "com.google.common.collect.Sets:filter(java.util.NavigableSet,com.google.common.base.Predicate)" : "* Returns the elements of a {@code NavigableSet}, {@code unfiltered}, that satisfy a predicate.\n   * The returned set is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods\n   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code\n   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods\n   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements\n   * that satisfy the filter will be removed from the underlying set.\n   *\n   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in\n   * the underlying set and determine which elements satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and\n   * use the copy.\n   *\n   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link\n   * Iterables#filter(Iterable, Class)} for related functionality.)\n   *\n   * @since 14.0",
  "com.google.common.util.concurrent.ForwardingFuture:get()" : null,
  "com.google.common.io.FileBackedOutputStream:reset()" : "* Calls {@link #close} if not already closed, and then resets this object back to its initial\n   * state, for reuse. If data was buffered to a file, it will be deleted.\n   *\n   * @throws IOException if an I/O error occurred while deleting the file buffer",
  "com.google.common.collect.MapMakerInternalMap$EntrySet:isEmpty()" : null,
  "com.google.common.math.LongMath:log10Floor(long)" : null,
  "com.google.common.collect.MutableClassToInstanceMap$SerializedForm:<init>(java.util.Map)" : null,
  "com.google.common.collect.Maps$BiMapConverter:hashCode()" : null,
  "com.google.common.reflect.TypeToken:getTypes()" : "* Returns the set of interfaces and classes that this type is or is a subtype of. The returned\n   * types are parameterized with proper type arguments.\n   *\n   * <p>Subtypes are always listed before supertypes. But the reverse is not true. A type isn't\n   * necessarily a subtype of all the types following. Order between types without subtype\n   * relationship is arbitrary and not guaranteed.\n   *\n   * <p>If this type is a type variable or wildcard, upper bounds that are themselves type variables\n   * aren't included (their super interfaces and superclasses are).",
  "com.google.common.util.concurrent.AbstractCatchingFuture:create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)" : null,
  "com.google.common.util.concurrent.RateLimiter:mutex()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:preWriteCleanup()" : "* Performs routine cleanup prior to executing a write. This should be called every time a write\n     * thread acquires the segment lock, immediately after acquiring the lock.",
  "com.google.common.util.concurrent.SmoothRateLimiter:reserveEarliestAvailable(int,long)" : null,
  "com.google.common.collect.Maps$UnmodifiableBiMap:putIfAbsent(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)" : "* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,\n     * and will cause {@link #build} to fail.",
  "com.google.common.cache.LocalCache$EntryFactory$7:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* Creates a new entry.\n     *\n     * @param segment to create the entry for\n     * @param key of the entry\n     * @param hash of the key\n     * @param next entry in the same bucket",
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:submitToExecutor(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule)" : null,
  "com.google.common.collect.LinkedHashMultimap:entries()" : "* Returns a set of all key-value pairs. Changes to the returned set will update the underlying\n   * multimap, and vice versa. The entries set does not support the {@code add} or {@code addAll}\n   * operations.\n   *\n   * <p>The iterator generated by the returned set traverses the entries in the order they were\n   * added to the multimap.\n   *\n   * <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the\n   * time the entry is returned by a method call to the collection or its iterator.",
  "com.google.common.collect.EmptyContiguousSet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:<init>(java.util.List,java.lang.Object)" : null,
  "com.google.common.primitives.Booleans:<init>()" : null,
  "com.google.common.graph.ForwardingNetwork:inEdges(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardFloorKey(java.lang.Object)" : "* A sensible definition of {@link #floorKey} in terms of {@code floorEntry}. If you override\n   * {@code floorEntry}, you may wish to override {@code floorKey} to forward to this\n   * implementation.",
  "com.google.common.collect.AbstractMultimap$Entries:iterator()" : null,
  "com.google.common.cache.LocalCache$WeakValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.FilteredEntryMultimap:createAsMap()" : null,
  "com.google.common.collect.ForwardingTable:cellSet()" : null,
  "com.google.common.base.CharMatcher:javaIsoControl()" : "* Determines whether a character is an ISO control character as specified by {@link\n   * Character#isISOControl(char)}.\n   *\n   * <p>All ISO control codes are on the BMP and thus supported by this API.\n   *\n   * @since 19.0 (since 1.0 as constant {@code JAVA_ISO_CONTROL})",
  "com.google.common.collect.TreeRangeMap$SubRangeMap:hashCode()" : null,
  "com.google.common.collect.Maps:asMap(java.util.SortedSet,com.google.common.base.Function)" : "* Returns a view of the sorted set as a map, mapping keys from the set according to the specified\n   * function.\n   *\n   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping\n   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code\n   * entrySet} views of the returned map iterate in the same order as the backing set.\n   *\n   * <p>Modifications to the backing set are read through to the returned map. The returned map\n   * supports removal operations if the backing set does. Removal operations write through to the\n   * backing set. The returned map does not support put operations.\n   *\n   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the\n   * set does not contain {@code null}, because the view cannot stop {@code null} from being added\n   * to the set.\n   *\n   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},\n   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for\n   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when\n   * calling methods on the resulting map view.\n   *\n   * @since 14.0",
  "com.google.common.math.Stats:sumOfSquaresOfDeltas()" : null,
  "com.google.common.hash.BloomFilter:<init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)" : "Creates a BloomFilter.",
  "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:entryIterator()" : null,
  "com.google.common.collect.FluentIterable:contains(java.lang.Object)" : "* Returns {@code true} if this fluent iterable contains any object for which {@code\n   * equals(target)} is true.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}.",
  "com.google.common.collect.SingletonImmutableBiMap:isPartialView()" : null,
  "com.google.common.primitives.ImmutableIntArray:builder(int)" : "* Returns a new, empty builder for {@link ImmutableIntArray} instances, sized to hold up to\n   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.\n   *\n   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number\n   * of values that will be added, if that knowledge is readily available. It is better to guess a\n   * value slightly too high than slightly too low. If the value is not exact, the {@link\n   * ImmutableIntArray} that is built will very likely occupy more memory than strictly necessary;\n   * to trim memory usage, build using {@code builder.build().trimmed()}.",
  "com.google.common.collect.HashMultimap:<init>(int,int)" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:getRawType(java.lang.Object)" : null,
  "com.google.common.collect.Iterables:consumingIterable(java.lang.Iterable)" : "* Returns a view of the supplied iterable that wraps each generated {@link Iterator} through\n   * {@link Iterators#consumingIterator(Iterator)}.\n   *\n   * <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will instead use {@link\n   * Queue#isEmpty} and {@link Queue#remove()}, since {@link Queue}'s iteration order is undefined.\n   * Calling {@link Iterator#hasNext()} on a generated iterator from the returned iterable may cause\n   * an item to be immediately dequeued for return on a subsequent call to {@link Iterator#next()}.\n   *\n   * <p>Whether the input {@code iterable} is a {@link Queue} or not, the returned {@code Iterable}\n   * is not thread-safe.\n   *\n   * @param iterable the iterable to wrap\n   * @return a view of the supplied iterable that wraps each generated iterator through {@link\n   *     Iterators#consumingIterator(Iterator)}; for queues, an iterable that generates iterators\n   *     that return and consume the queue's elements in queue order\n   * @see Iterators#consumingIterator(Iterator)\n   * @since 2.0",
  "com.google.common.collect.Synchronized$SynchronizedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Predicates$SubtypeOfPredicate:<init>(java.lang.Class)" : null,
  "com.google.common.primitives.Ints:ensureCapacity(int[],int,int)" : "* Returns an array containing the same values as {@code array}, but guaranteed to be of a\n   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n   *\n   * @param array the source array\n   * @param minLength the minimum length the returned array must guarantee\n   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n   *     minLength}",
  "com.google.common.cache.LocalCache$LoadingSerializationProxy:apply(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$AsMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedSet$SerializedForm:<init>(java.util.Comparator,java.lang.Object[])" : null,
  "com.google.common.graph.AbstractValueGraph:edgeValue(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.base.Equivalence$Identity:doHash(java.lang.Object)" : null,
  "com.google.common.base.Predicates:isNull()" : "* Returns a predicate that evaluates to {@code true} if the object reference being tested is\n   * null.\n   *\n   * <p><b>Discouraged:</b> Prefer using either {@code x -> x == null} or {@code Objects::isNull},\n   * but note that lambdas and method references do not have human-readable {@link #toString()}\n   * representations and are not serializable.",
  "com.google.common.graph.UndirectedMultiNetworkConnections:<init>(java.util.Map)" : null,
  "com.google.common.collect.TreeRangeMap$1:putCoalescing(com.google.common.collect.Range,java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char,java.lang.Object)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.DescendingImmutableSortedSet:iterator()" : null,
  "com.google.common.collect.ForwardingDeque:getFirst()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:<init>(java.lang.String)" : null,
  "com.google.common.graph.GraphBuilder:immutable()" : "* Returns an {@link ImmutableGraph.Builder} with the properties of this {@link GraphBuilder}.\n   *\n   * <p>The returned builder can be used for populating an {@link ImmutableGraph}.\n   *\n   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link\n   * ElementOrder#stable()}, regardless of the value that was set in this builder.\n   *\n   * @since 28.0",
  "com.google.common.primitives.Doubles$LexicographicalComparator:compare(double[],double[])" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:pollLastEntry()" : null,
  "com.google.common.collect.ForwardingMultimap:entries()" : null,
  "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray:getUnsafe()" : "* Returns an Unsafe. Suitable for use in a 3rd party package. Replace with a simple call to\n     * Unsafe.getUnsafe when integrating into a JDK.\n     *\n     * @return an Unsafe instance if successful",
  "com.google.common.graph.MapIteratorCache:getWithoutCaching(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ClosingFuture:submitAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable,java.util.concurrent.Executor)" : "* Starts a {@link ClosingFuture} pipeline by submitting a callable block to an executor.\n   *\n   * @throws java.util.concurrent.RejectedExecutionException if the task cannot be scheduled for\n   *     execution\n   * @since 30.1",
  "com.google.common.math.StatsAccumulator:addAll(java.util.stream.DoubleStream)" : "* Adds the given values to the dataset. The stream will be completely consumed by this method.\n   *\n   * @param values a series of values\n   * @since 28.2 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.LinkedHashMultimap:create(com.google.common.collect.Multimap)" : "* Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a\n   * key-value mapping appears multiple times in the input multimap, it only appears once in the\n   * constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order\n   * as the input multimap, except for excluding duplicate mappings.\n   *\n   * @param multimap the multimap whose contents are copied to this multimap",
  "com.google.common.graph.UndirectedGraphConnections:addSuccessor(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:servicesByState()" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:size()" : null,
  "com.google.common.cache.LocalCache$AbstractCacheSet:clear()" : null,
  "com.google.common.collect.TreeRangeMap:coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry)" : "Returns the range that spans the given range and entry, if the entry can be coalesced.",
  "com.google.common.reflect.Invokable:returning(java.lang.Class)" : "* Explicitly specifies the return type of this {@code Invokable}. For example:\n   *\n   * {@snippet :\n   * Method factoryMethod = Person.class.getMethod(\"create\");\n   * Invokable<?, Person> factory = Invokable.of(getNameMethod).returning(Person.class);\n   * }",
  "com.google.common.primitives.Doubles$DoubleArrayAsList:spliterator()" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:row(java.lang.Object)" : null,
  "com.google.common.collect.JdkBackedImmutableMap:<init>(java.util.Map,com.google.common.collect.ImmutableList)" : null,
  "com.google.common.base.CharMatcher$ForPredicate:<init>(com.google.common.base.Predicate)" : null,
  "com.google.common.primitives.Shorts$ShortConverter:doBackward(java.lang.Short)" : null,
  "com.google.common.collect.CollectCollectors$EnumMapAccumulator:toImmutableMap()" : null,
  "com.google.common.base.MoreObjects:<init>()" : null,
  "com.google.common.primitives.UnsignedInteger:bigIntegerValue()" : "Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.",
  "com.google.common.collect.Tables$TransformedTable:cellSpliterator()" : null,
  "com.google.common.collect.LinkedHashMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.graph.EndpointPair:nodeV()" : "* Returns the node {@link #adjacentNode(Object) adjacent} to {@link #nodeU()} along the origin\n   * edge. If this {@link EndpointPair} {@link #isOrdered()}, this is equal to {@link #target()}.",
  "com.google.common.net.HostAndPort:fromParts(java.lang.String,int)" : "* Build a HostAndPort instance from separate host and port values.\n   *\n   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to\n   * prohibit these.\n   *\n   * @param host the host string to parse. Must not contain a port number.\n   * @param port a port number from [0..65535]\n   * @return if parsing was successful, a populated HostAndPort object.\n   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out\n   *     of range.",
  "com.google.common.collect.Sets$FilteredSortedSet:comparator()" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.AbstractBiMap:putInBothMaps(java.lang.Object,java.lang.Object,boolean)" : null,
  "com.google.common.cache.LocalCache$Values:iterator()" : null,
  "com.google.common.graph.StandardValueGraph:edgeCount()" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:startAsync()" : "* @since 15.0",
  "com.google.common.collect.Synchronized$SynchronizedDeque:peekFirst()" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.TopKSelector:combine(com.google.common.collect.TopKSelector)" : null,
  "com.google.common.hash.Murmur3_128HashFunction:hashCode()" : null,
  "com.google.common.net.PercentEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)" : null,
  "com.google.common.collect.Lists:cartesianProduct(java.util.List)" : "* Returns every possible list that can be formed by choosing one element from each of the given\n   * lists in order; the \"n-ary <a href=\"http://en.wikipedia.org/wiki/Cartesian_product\">Cartesian\n   * product</a>\" of the lists. For example:\n   *\n   * {@snippet :\n   * Lists.cartesianProduct(ImmutableList.of(\n   *     ImmutableList.of(1, 2),\n   *     ImmutableList.of(\"A\", \"B\", \"C\")))\n   * }\n   *\n   * <p>returns a list containing six lists in the following order:\n   *\n   * <ul>\n   *   <li>{@code ImmutableList.of(1, \"A\")}\n   *   <li>{@code ImmutableList.of(1, \"B\")}\n   *   <li>{@code ImmutableList.of(1, \"C\")}\n   *   <li>{@code ImmutableList.of(2, \"A\")}\n   *   <li>{@code ImmutableList.of(2, \"B\")}\n   *   <li>{@code ImmutableList.of(2, \"C\")}\n   * </ul>\n   *\n   * <p>The result is guaranteed to be in the \"traditional\", lexicographical order for Cartesian\n   * products that you would get from nesting for loops:\n   *\n   * {@snippet :\n   * for (B b0 : lists.get(0)) {\n   *   for (B b1 : lists.get(1)) {\n   *     ...\n   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);\n   *     // operate on tuple\n   *   }\n   * }\n   * }\n   *\n   * <p>Note that if any input list is empty, the Cartesian product will also be empty. If no lists\n   * at all are provided (an empty list), the resulting Cartesian product has one element, an empty\n   * list (counter-intuitive, but mathematically consistent).\n   *\n   * <p><i>Performance notes:</i> while the cartesian product of lists of size {@code m, n, p} is a\n   * list of size {@code m x n x p}, its actual memory consumption is much smaller. When the\n   * cartesian product is constructed, the input lists are merely copied. Only as the resulting list\n   * is iterated are the individual lists created, and these are not retained after iteration.\n   *\n   * @param lists the lists to choose elements from, in the order that the elements chosen from\n   *     those lists should appear in the resulting lists\n   * @param <B> any common base class shared by all axes (often just {@link Object})\n   * @return the Cartesian product, as an immutable list containing immutable lists\n   * @throws IllegalArgumentException if the size of the cartesian product would be greater than\n   *     {@link Integer#MAX_VALUE}\n   * @throws NullPointerException if {@code lists}, any one of the {@code lists}, or any element of\n   *     a provided list is null\n   * @since 19.0",
  "com.google.common.io.BaseEncoding:extract(byte[],int)" : null,
  "com.google.common.collect.AbstractRangeSet:removeAll(com.google.common.collect.RangeSet)" : null,
  "com.google.common.hash.HashCode$IntHashCode:writeBytesToImpl(byte[],int,int)" : null,
  "com.google.common.cache.AbstractCache:invalidateAll()" : null,
  "com.google.common.cache.LocalCache$SoftValueReference:getEntry()" : null,
  "com.google.common.math.PairedStatsAccumulator:addAll(com.google.common.math.PairedStats)" : "* Adds the given statistics to the dataset, as if the individual values used to compute the\n   * statistics had been added directly.",
  "com.google.common.collect.ImmutableMultimap:asMap()" : "* Returns an immutable map that associates each key with its corresponding values in the\n   * multimap. Keys and values appear in the same order as in this multimap.",
  "com.google.common.collect.ForwardingNavigableMap:descendingMap()" : null,
  "com.google.common.collect.Maps$Values:isEmpty()" : null,
  "com.google.common.base.CharMatcher$And:matches(char)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable)" : null,
  "com.google.common.math.PairedStats:xStats()" : "Returns the statistics on the {@code x} values alone.",
  "com.google.common.collect.TreeMultiset$AvlNode:remove(java.util.Comparator,java.lang.Object,int,int[])" : null,
  "com.google.common.collect.Maps:filterKeys(java.util.Map,com.google.common.base.Predicate)" : "* Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The\n   * returned map is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and\n   * {@code putAll()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying\n   * map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",
  "com.google.common.graph.ForwardingGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSetMultimap:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)" : "* Returns a {@code Collector} accumulating entries into an {@code ImmutableSetMultimap}. Each\n   * input element is mapped to a key and a stream of values, each of which are put into the\n   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the\n   * streams of values.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =\n   *     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n   *         .collect(\n   *             flatteningToImmutableSetMultimap(\n   *                  str -> str.charAt(0),\n   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));\n   *\n   * // is equivalent to\n   *\n   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =\n   *     ImmutableSetMultimap.<Character, Character>builder()\n   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))\n   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))\n   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))\n   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))\n   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))\n   *         .build();\n   *\n   * // after deduplication, the resulting multimap is equivalent to\n   *\n   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =\n   *     ImmutableSetMultimap.<Character, Character>builder()\n   *         .putAll('b', Arrays.asList('a', 'n'))\n   *         .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u'))\n   *         .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y'))\n   *         .build();\n   * }\n   *\n   * }\n   *\n   * @since 21.0",
  "com.google.common.collect.LinkedListMultimap$NodeIterator:previous()" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:floor(java.util.Comparator,java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$JavaLowerCase:matches(char)" : null,
  "com.google.common.collect.ImmutableSetMultimap:valueSet(java.util.Comparator,java.util.Collection)" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:delegate()" : null,
  "com.google.common.net.PercentEscaper:<init>(java.lang.String,boolean)" : "* Constructs a percent escaper with the specified safe characters and optional handling of the\n   * space character.\n   *\n   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe\n   * character. This has the effect of creating an escaper which has no well-defined inverse but it\n   * can be useful when escaping additional characters.\n   *\n   * @param safeChars a non-null string specifying additional safe characters for this escaper (the\n   *     ranges 0..9, a..z and A..Z are always safe and should not be specified here)\n   * @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20}\n   * @throws IllegalArgumentException if any of the parameters were invalid",
  "com.google.common.collect.Sets:intersection(java.util.Set,java.util.Set)" : "* Returns an unmodifiable <b>view</b> of the intersection of two sets. The returned set contains\n   * all elements that are contained by both backing sets. The iteration order of the returned set\n   * matches that of {@code set1}.\n   *\n   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different\n   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a\n   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.\n   *\n   * <p><b>Note:</b> The returned view performs slightly better when {@code set1} is the smaller of\n   * the two sets. If you have reason to believe one of your sets will generally be smaller than the\n   * other, pass it first. Unfortunately, since this method sets the generic type of the returned\n   * set based on the type of the first set passed, this could in rare cases force you to make a\n   * cast, for example:\n   *\n   * {@snippet :\n   * Set<Object> aFewBadObjects = ...\n   * Set<String> manyBadStrings = ...\n   *\n   * // impossible for a non-String to be in the intersection\n   * SuppressWarnings(\"unchecked\")\n   * Set<String> badStrings = (Set) Sets.intersection(\n   *     aFewBadObjects, manyBadStrings);\n   * }\n   *\n   * <p>This is unfortunate, but should come up only very rarely.",
  "com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.reflect.Types$JavaVersion$2:newArrayType(java.lang.reflect.Type)" : null,
  "com.google.common.collect.ConsumingQueueIterator:<init>(java.util.Queue)" : null,
  "com.google.common.collect.Queues:newLinkedBlockingDeque(java.lang.Iterable)" : "* Creates a {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE}, containing\n   * the elements of the specified iterable, in the order they are returned by the iterable's\n   * iterator.\n   *\n   * @since 12.0",
  "com.google.common.primitives.Longs:indexOf(long[],long)" : "* Returns the index of the first appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code long} values, possibly empty\n   * @param target a primitive {@code long} value\n   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.HashBasedTable:columnKeySet()" : "* {@inheritDoc}\n   *\n   * <p>The returned set has an iterator that does not support {@code remove()}.\n   *\n   * <p>The set's iterator traverses the columns of the first row, the columns of the second row,\n   * etc., skipping any columns that have appeared previously.",
  "com.google.common.util.concurrent.Atomics:newReference(java.lang.Object)" : "* Creates an {@code AtomicReference} instance with the given initial value.\n   *\n   * @param initialValue the initial value\n   * @return a new {@code AtomicReference} with the given initial value",
  "com.google.common.util.concurrent.InterruptibleTask:interruptTask()" : "* Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can\n   * in turn invoke arbitrary code it is not safe to call while holding a lock.",
  "com.google.common.collect.FilteredKeySetMultimap$EntrySet:hashCode()" : null,
  "com.google.common.collect.FilteredEntrySetMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable,boolean)" : "* @since 12.0",
  "com.google.common.reflect.TypeToken$TypeCollector$2:getInterfaces(java.lang.Object)" : null,
  "com.google.common.base.Predicates$OrPredicate:hashCode()" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:toString()" : null,
  "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:getHash()" : null,
  "com.google.common.util.concurrent.ThreadFactoryBuilder:doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder)" : null,
  "com.google.common.collect.CollectCollectors:toImmutableBiMap(java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.collect.Tables$TransposeTable:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.FluentFuture:addCallback(com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)" : "* Registers separate success and failure callbacks to be run when this {@code Future}'s\n   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the\n   * computation is already complete, immediately.\n   *\n   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of\n   * callbacks, but any callback added through this method is guaranteed to be called once the\n   * computation is complete.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * future.addCallback(\n   *     new FutureCallback<QueryResult>() {\n   *       public void onSuccess(QueryResult result) {\n   *         storeInCache(result);\n   *       }\n   *       public void onFailure(Throwable t) {\n   *         reportError(t);\n   *       }\n   *     }, executor);\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n   * listeners are also applicable to heavyweight callbacks passed to this method.\n   *\n   * <p>For a more general interface to attach a completion listener, see {@link #addListener}.\n   *\n   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and\n   * {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case\n   * of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link\n   * java.util.concurrent.CompletableFuture#thenAcceptAsync}.\n   *\n   * @param callback The callback to invoke when this {@code Future} is completed.\n   * @param executor The executor to run {@code callback} when the future completes.",
  "com.google.common.reflect.Types$ParameterizedTypeImpl:getActualTypeArguments()" : null,
  "com.google.common.collect.LinkedListMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.hash.Funnels:stringFunnel(java.nio.charset.Charset)" : "* Returns a funnel that encodes the characters of a {@code CharSequence} with the specified\n   * {@code Charset}.\n   *\n   * @since 15.0",
  "com.google.common.util.concurrent.Runnables:<init>()" : null,
  "com.google.common.collect.Maps:asMapEntryIterator(java.util.Set,com.google.common.base.Function)" : null,
  "com.google.common.graph.AbstractNetwork:edgesConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Suppliers:<init>()" : null,
  "com.google.common.collect.ImmutableSet:equals(java.lang.Object)" : null,
  "com.google.common.collect.SortedLists:binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)" : "* Binary searches the list for the specified key, using the specified key function.\n   *\n   * <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior,\n   * KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list,\n   * keyFunction)}.",
  "com.google.common.io.BaseEncoding:encodingSink(com.google.common.io.CharSink)" : "* Returns a {@code ByteSink} that writes base-encoded bytes to the specified {@code CharSink}.",
  "com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStart()" : null,
  "com.google.common.collect.Multimaps:asMap(com.google.common.collect.SortedSetMultimap)" : "* Returns {@link SortedSetMultimap#asMap multimap.asMap()}, with its type corrected from {@code\n   * Map<K, Collection<V>>} to {@code Map<K, SortedSet<V>>}.\n   *\n   * @since 15.0",
  "com.google.common.collect.DiscreteDomain:longs()" : "* Returns the discrete domain for values of type {@code Long}.\n   *\n   * <p>This method always returns the same object. That object is serializable; deserializing it\n   * results in the same object too.\n   *\n   * @since 14.0 (since 10.0 as {@code DiscreteDomains.longs()})",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int,char)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.StandardTable:contains(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ComparatorOrdering:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future)" : "* Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality.\n   *\n   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the\n   * returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an\n   * internal, unbounded pool at the first call to {@code addListener} and holding it until the\n   * future is {@linkplain Future#isDone() done}.\n   *\n   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link\n   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link\n   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code\n   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.",
  "com.google.common.collect.RegularImmutableMap$KeySet:size()" : null,
  "com.google.common.collect.AbstractNavigableMap:descendingMap()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:getListDelegate()" : null,
  "com.google.common.primitives.Ints:lastIndexOf(int[],int)" : "* Returns the index of the last appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code int} values, possibly empty\n   * @param target a primitive {@code int} value\n   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.io.CharSource$AsByteSource:openStream()" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:size()" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap:copyOf(java.util.Map)" : "* Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow\n   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n   *\n   * <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code\n   * ImmutableClassToInstanceMap}, no copy will actually be performed.\n   *\n   * @throws NullPointerException if any key or value in {@code map} is null\n   * @throws ClassCastException if any value is not an instance of the type specified by its key",
  "com.google.common.util.concurrent.Futures:immediateVoidFuture()" : "* Returns a successful {@code ListenableFuture<Void>}. This method is equivalent to {@code\n   * immediateFuture(null)} except that it is restricted to produce futures of type {@code Void}.\n   *\n   * @since 29.0",
  "com.google.common.hash.HashCode:<init>()" : null,
  "com.google.common.collect.Maps$DescendingMap:firstKey()" : null,
  "com.google.common.collect.SortedMultisets$ElementSet:comparator()" : null,
  "com.google.common.base.CharMatcher$Negated:negate()" : null,
  "com.google.common.collect.ImmutableList:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollFirst()" : null,
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:remove(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingCollection:standardRemoveAll(java.util.Collection)" : "* A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's\n   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link\n   * #removeAll} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.Multisets$ImmutableEntry:getCount()" : null,
  "com.google.common.collect.ForwardingMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.AbstractRangeSet:toString()" : null,
  "com.google.common.collect.ImmutableMultimap:putAll(java.lang.Object,java.lang.Iterable)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.ImmutableTable:remove(java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the table unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.ImmutableTable:rowKeySet()" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.hash.HashCode$BytesHashCode:asInt()" : null,
  "com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.StandardRowSortedTable:rowKeySet()" : "* {@inheritDoc}\n   *\n   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link\n   * Table} interface.",
  "com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.graph.EndpointPair:iterator()" : "Iterates in the order {@link #nodeU()}, {@link #nodeV()}.",
  "com.google.common.cache.AbstractCache:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable)" : null,
  "com.google.common.collect.AbstractBiMap:removeFromBothMaps(java.lang.Object)" : null,
  "com.google.common.cache.ForwardingLoadingCache:delegate()" : null,
  "com.google.common.hash.SipHashFunction:<init>(int,int,long,long)" : "* @param c the number of compression rounds (must be positive)\n   * @param d the number of finalization rounds (must be positive)\n   * @param k0 the first half of the key\n   * @param k1 the second half of the key",
  "com.google.common.graph.ForwardingNetwork:isDirected()" : null,
  "com.google.common.collect.Range:span(com.google.common.collect.Range)" : "* Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code\n   * other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}.\n   *\n   * <p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can\n   * also be called their <i>union</i>. If they are not, note that the span might contain values\n   * that are not contained in either input range.\n   *\n   * <p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative\n   * and idempotent. Unlike it, it is always well-defined for any two input ranges.",
  "com.google.common.io.CharSource$CharSequenceCharSource:linesIterator()" : "* Returns an iterator over the lines in the string. If the string ends in a newline, a final\n     * empty string is not included, to match the behavior of BufferedReader/LineReader.readLine().",
  "com.google.common.cache.LocalCache:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* This method is a convenience for testing. Code should call {@link Segment#newEntry} directly.",
  "com.google.common.util.concurrent.AbstractService$4:toString()" : null,
  "com.google.common.reflect.Types$WildcardTypeImpl:hashCode()" : null,
  "com.google.common.collect.FilteredKeyMultimap:size()" : null,
  "com.google.common.collect.Collections2:permutations(java.util.Collection)" : "* Returns a {@link Collection} of all the permutations of the specified {@link Collection}.\n   *\n   * <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations\n   * generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7,\n   * Section 7.2.1.2.\n   *\n   * <p>If the input list contains equal elements, some of the generated permutations will be equal.\n   *\n   * <p>An empty collection has only one permutation, which is an empty list.\n   *\n   * @param elements the original collection whose elements have to be permuted.\n   * @return an immutable {@link Collection} containing all the different permutations of the\n   *     original collection.\n   * @throws NullPointerException if the specified collection is null or has any null elements.\n   * @since 12.0",
  "com.google.common.io.ReaderInputStream:close()" : null,
  "com.google.common.io.ByteSource$ByteArrayByteSource:toString()" : null,
  "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher:dispatch(java.lang.Object,java.util.Iterator)" : null,
  "com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$Row:computeBackingRowMap()" : null,
  "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(java.nio.ByteBuffer)" : null,
  "com.google.common.collect.TreeMultiset:aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate)" : null,
  "com.google.common.collect.EmptyContiguousSet:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingFuture:cancel(boolean)" : null,
  "com.google.common.math.IntMath:checkedMultiply(int,int)" : "* Returns the product of {@code a} and {@code b}, provided it does not overflow.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link\n   * Math#multiplyExact(int, int)} instead.\n   *\n   * @throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic",
  "com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Comparable,boolean)" : null,
  "com.google.common.collect.Ordering:leastOf(java.lang.Iterable,int)" : "* Returns the {@code k} least elements of the given iterable according to this ordering, in order\n   * from least to greatest. If there are fewer than {@code k} elements present, all will be\n   * included.\n   *\n   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n   * elements are equivalent, it is undefined which will come first.\n   *\n   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,\n   * thisComparator))} instead.\n   *\n   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending\n   *     order\n   * @throws IllegalArgumentException if {@code k} is negative\n   * @since 8.0",
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readFully(byte[],int,int)" : null,
  "com.google.common.collect.Maps$FilteredEntryMap$KeySet:remove(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$Values:clear()" : null,
  "com.google.common.collect.CollectCollectors:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)" : null,
  "com.google.common.collect.Lists:lastIndexOfRandomAccess(java.util.List,java.lang.Object)" : null,
  "com.google.common.collect.Sets$SetView:iterator()" : "* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.\n     *\n     * @since 20.0 (present with return type {@link Iterator} since 2.0)",
  "com.google.common.base.Converter$IdentityConverter:doBackward(java.lang.Object)" : null,
  "com.google.common.math.Quantiles$ScaleAndIndex:compute(java.util.Collection)" : "* Computes the quantile value of the given dataset.\n     *\n     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be\n     *     cast to doubles (with any associated lost of precision), and which will not be mutated by\n     *     this call (it is copied instead)\n     * @return the quantile value",
  "com.google.common.collect.MapMakerInternalMap:keyStrength()" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createEntries()" : null,
  "com.google.common.primitives.ImmutableDoubleArray$AsList:hashCode()" : null,
  "com.google.common.cache.LocalCache$AbstractCacheSet:isEmpty()" : null,
  "com.google.common.cache.LocalCache$LocalLoadingCache:refresh(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableListMultimap$Builder:build()" : "Returns a newly-created immutable list multimap.",
  "com.google.common.collect.RegularImmutableSortedSet:isPartialView()" : null,
  "com.google.common.base.Present:or(java.lang.Object)" : null,
  "com.google.common.collect.Platform:newLinkedHashMapWithExpectedSize(int)" : "* Returns the platform preferred implementation of an insertion ordered map based on a hash\n   * table.",
  "com.google.common.base.Stopwatch:<init>(com.google.common.base.Ticker)" : null,
  "com.google.common.reflect.ClassPath:parseJavaClassPath()" : "* Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain\n   * System#getProperty system property}.",
  "com.google.common.collect.CompactLinkedHashSet:toArray(java.lang.Object[])" : null,
  "com.google.common.util.concurrent.ForwardingFluentFuture:<init>(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.escape.Escapers$Builder:setUnsafeReplacement(java.lang.String)" : "* Sets the replacement string for any characters outside the 'safe' range that have no explicit\n     * replacement. If {@code unsafeReplacement} is {@code null} then no replacement will occur, if\n     * it is {@code \"\"} then the unsafe characters are removed from the output.\n     *\n     * @param unsafeReplacement the string to replace unsafe characters\n     * @return the builder instance",
  "com.google.common.io.ByteSource$SlicedByteSource:openBufferedStream()" : null,
  "com.google.common.collect.Multisets:linearTimeSizeImpl(com.google.common.collect.Multiset)" : "An implementation of {@link Multiset#size}.",
  "com.google.common.io.ByteSource:hash(com.google.common.hash.HashFunction)" : "* Hashes the contents of this byte source using the given hash function.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source",
  "com.google.common.io.AppendableWriter:append(java.lang.CharSequence)" : null,
  "com.google.common.base.CharMatcher$Ascii:matches(char)" : null,
  "com.google.common.collect.ForwardingTable:rowMap()" : null,
  "com.google.common.collect.Maps:newIdentityHashMap()" : "* Creates an {@code IdentityHashMap} instance.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code IdentityHashMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @return a new, empty {@code IdentityHashMap}",
  "com.google.common.util.concurrent.SequentialExecutor$QueueWorker:run()" : null,
  "com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object,boolean)" : "* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less\n   * than (or equal to, if {@code inclusive}) {@code toKey}.\n   *\n   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an\n   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code\n   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n   * the original {@code toKey}.\n   *\n   * @since 12.0",
  "com.google.common.collect.JdkBackedImmutableSet:size()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerEntry(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractFuture:complete(com.google.common.util.concurrent.AbstractFuture,boolean)" : "Unblocks all threads and runs all listeners.",
  "com.google.common.collect.Sets$DescendingSet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.NetworkBuilder:edgeOrder(com.google.common.graph.ElementOrder)" : "* Specifies the order of iteration for the elements of {@link Network#edges()}.\n   *\n   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",
  "com.google.common.primitives.Doubles:sortDescending(double[])" : "* Sorts the elements of {@code array} in descending order.\n   *\n   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats\n   * all NaN values as equal and 0.0 as greater than -0.0.\n   *\n   * @since 23.1",
  "com.google.common.cache.LocalCache$Segment:containsValue(java.lang.Object)" : "* This method is a convenience for testing. Code should call {@link LocalCache#containsValue}\n     * directly.",
  "com.google.common.hash.Funnels$SinkAsStream:write(byte[],int,int)" : null,
  "com.google.common.collect.ImmutableTable:writeReplace()" : null,
  "com.google.common.collect.FluentIterable:concat(java.lang.Iterable)" : "* Returns a fluent iterable that combines several iterables. The returned iterable has an\n   * iterator that traverses the elements of each iterable in {@code inputs}. The input iterators\n   * are not polled until necessary.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input\n   * iterator supports it.\n   *\n   * <p><b>{@code Stream} equivalent:</b> to concatenate an arbitrary number of streams, use {@code\n   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n   *\n   * @throws NullPointerException if any of the provided iterables is {@code null}\n   * @since 20.0",
  "com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.ImmutableGraph)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this",
  "com.google.common.collect.FilteredEntryMultimap:clear()" : null,
  "com.google.common.util.concurrent.ListenableFutureTask:create(java.util.concurrent.Callable)" : "* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code\n   * Callable}.\n   *\n   * @param callable the callable task\n   * @since 10.0",
  "com.google.common.math.PairedStatsAccumulator:<init>()" : "Creates a new accumulator.",
  "com.google.common.collect.AbstractRangeSet:clear()" : null,
  "com.google.common.collect.HashBiMap:entryIterator()" : null,
  "com.google.common.collect.Sets:newConcurrentHashSet()" : "* Creates a thread-safe set backed by a hash map. The set is backed by a {@link\n   * ConcurrentHashMap} instance, and thus carries the same concurrency guarantees.\n   *\n   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The\n   * set is serializable.\n   *\n   * @return a new, empty thread-safe {@code Set}\n   * @since 15.0",
  "com.google.common.collect.ForwardingMultimap:size()" : null,
  "com.google.common.collect.Collections2$FilteredCollection:isEmpty()" : null,
  "com.google.common.collect.ForwardingSortedMultiset:standardLastEntry()" : "* A sensible definition of {@link #lastEntry()} in terms of {@code\n   * descendingMultiset().entrySet().iterator()}.\n   *\n   * <p>If you override {@link #descendingMultiset} or {@link #entrySet()}, you may wish to override\n   * {@link #firstEntry()} to forward to this implementation.",
  "com.google.common.collect.Synchronized$SynchronizedSortedMap:delegate()" : null,
  "com.google.common.collect.RegularImmutableTable:createValues()" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap:putInstance(java.lang.Class,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @deprecated unsupported operation\n   * @throws UnsupportedOperationException always",
  "com.google.common.collect.ForwardingSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.Synchronized$SynchronizedSortedMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys\n   * and values are the result of applying the provided mapping functions to the input elements. The\n   * resulting implementation is specialized for enum key types. The returned map and its views will\n   * iterate over keys in their enum definition order, not encounter order.\n   *\n   * <p>If the mapped keys contain duplicates, the values are merged using the specified merging\n   * function.\n   *\n   * @since 21.0",
  "com.google.common.collect.MapMakerInternalMap$KeySet:clear()" : null,
  "com.google.common.util.concurrent.AggregateFutureState:getOrInitSeenExceptions()" : null,
  "com.google.common.collect.Maps$AbstractFilteredMap:get(java.lang.Object)" : null,
  "com.google.common.collect.HashBasedTable:row(java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:initialQueueSize(int,int,java.lang.Iterable)" : null,
  "com.google.common.collect.Tables$TransposeTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableEnumSet$EnumSerializedForm:<init>(java.util.EnumSet)" : null,
  "com.google.common.graph.AbstractValueGraph:edgeValue(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.util.concurrent.Callable,java.time.Duration)" : "* Duration-based overload of {@link #schedule(Callable, long, TimeUnit)}.\n   *\n   * @since 29.0",
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:snapshot()" : null,
  "com.google.common.hash.MessageDigestHashFunction:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit)" : "* Returns a {@link Scheduler} that schedules the task using the {@link\n     * ScheduledExecutorService#scheduleAtFixedRate} method.\n     *\n     * @param initialDelay the time to delay first execution\n     * @param period the period between successive executions of the task\n     * @param unit the time unit of the initialDelay and period parameters",
  "com.google.common.net.MediaType:parse(java.lang.String)" : "* Parses a media type from its string representation.\n   *\n   * @throws IllegalArgumentException if the input is not parsable",
  "com.google.common.collect.HashBiMap$Inverse:forward()" : null,
  "com.google.common.collect.Tables:transpose(com.google.common.collect.Table)" : "* Creates a transposed view of a given table that flips its row and column keys. In other words,\n   * calling {@code get(columnKey, rowKey)} on the generated table always returns the same value as\n   * calling {@code get(rowKey, columnKey)} on the original table. Updating the original table\n   * changes the contents of the transposed table and vice versa.\n   *\n   * <p>The returned table supports update operations as long as the input table supports the\n   * analogous operation with swapped rows and columns. For example, in a {@link HashBasedTable}\n   * instance, {@code rowKeySet().iterator()} supports {@code remove()} but {@code\n   * columnKeySet().iterator()} doesn't. With a transposed {@link HashBasedTable}, it's the other\n   * way around.",
  "com.google.common.collect.ReverseNaturalOrdering:min(java.lang.Iterable)" : null,
  "com.google.common.collect.DenseImmutableTable:rowMap()" : null,
  "com.google.common.base.CharMatcher$And:toString()" : null,
  "com.google.common.collect.ImmutableEnumSet:spliterator()" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap:readResolve()" : null,
  "com.google.common.collect.Serialization:populateMap(java.util.Map,java.io.ObjectInputStream,int)" : "* Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap}\n   * for the data format. The size is determined by a prior call to {@link #readCount}.",
  "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:createAsList()" : null,
  "com.google.common.base.Converter:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.util.concurrent.ImmediateFuture:<init>(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableLongArray:isPartialView()" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:<init>(com.google.common.collect.Multiset)" : null,
  "com.google.common.collect.FilteredEntryMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.base.Throwables:getSizeMethod(java.lang.Object)" : "* Returns the Method that can be used to return the size of a stack, or null if that method\n   * cannot be found (it is only to be found in fairly recent JDKs). Tries to test method {@link\n   * sun.misc.JavaLangAccess#getStackTraceDepth(Throwable) getStackTraceDepth} prior to return it\n   * (might fail some JDKs).\n   *\n   * <p>See <a href=\"https://github.com/google/guava/issues/2887\">Throwables#lazyStackTrace throws\n   * UnsupportedOperationException</a>.",
  "com.google.common.collect.ForwardingSortedMap:firstKey()" : null,
  "com.google.common.collect.ImmutableBiMap$Builder:putAll(java.util.Map)" : "* Associates all of the given map's keys and values in the built bimap. Duplicate keys or\n     * values are not allowed, and will cause {@link #build} to fail.\n     *\n     * @throws NullPointerException if any key or value in {@code map} is null",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.AbstractTable:cellSet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:createKeySet()" : null,
  "com.google.common.base.Functions$PredicateFunction:hashCode()" : null,
  "com.google.common.graph.StandardMutableGraph:putEdge(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.ImmutableMap:clear()" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.graph.AbstractGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.ImmutableMap$Builder:buildOrThrow()" : "* Returns a newly-created immutable map, or throws an exception if any key was added more than\n     * once. The iteration order of the returned map is the order in which entries were inserted\n     * into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are\n     * sorted by value.\n     *\n     * @throws IllegalArgumentException if duplicate keys were added\n     * @since 31.0",
  "com.google.common.collect.Maps$NavigableKeySet:pollLast()" : null,
  "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:add(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,char)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.cache.LocalCache$LoadingValueReference:getOldValue()" : null,
  "com.google.common.collect.EnumHashBiMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:delegate()" : null,
  "com.google.common.cache.AbstractCache:get(java.lang.Object,java.util.concurrent.Callable)" : "* @since 11.0",
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:delegate()" : null,
  "com.google.common.cache.LocalCache$WeakValueReference:notifyNewValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractService$IsStoppableGuard:isSatisfied()" : null,
  "com.google.common.collect.Maps:newEnumMap(java.util.Map)" : "* Creates an {@code EnumMap} with the same mappings as the specified map.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code EnumMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @param map the map from which to initialize this {@code EnumMap}\n   * @return a new {@code EnumMap} initialized with the mappings from {@code map}\n   * @throws IllegalArgumentException if {@code m} is not an {@code EnumMap} instance and contains\n   *     no mappings",
  "com.google.common.util.concurrent.AggregateFuture:collectValueFromNonCancelledFuture(int,java.util.concurrent.Future)" : "* Collects the result (success or failure) of one input future. The input must not have been\n   * cancelled. For details on when this is called, see {@link #collectOneValue}.",
  "com.google.common.collect.TreeRangeMap:asDescendingMapOfRanges()" : null,
  "com.google.common.collect.Iterables:addAll(java.util.Collection,java.lang.Iterable)" : "* Adds all elements in {@code iterable} to {@code collection}.\n   *\n   * @return {@code true} if {@code collection} was modified as a result of this operation.",
  "com.google.common.collect.SortedMultisets$NavigableElementSet:<init>(com.google.common.collect.SortedMultiset)" : null,
  "com.google.common.hash.BloomFilter:copy()" : "* Creates a new {@code BloomFilter} that's a copy of this instance. The new instance is equal to\n   * this instance but shares no mutable state.\n   *\n   * @since 12.0",
  "com.google.common.base.Preconditions:badPositionIndex(int,int,java.lang.String)" : null,
  "com.google.common.hash.AbstractStreamingHasher:putBytesInternal(java.nio.ByteBuffer)" : null,
  "com.google.common.collect.Multimaps$CustomSortedSetMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the factory and the backing map",
  "com.google.common.collect.AbstractSortedSetMultimap:<init>(java.util.Map)" : "* Creates a new multimap that uses the provided map.\n   *\n   * @param map place to store the mapping from each key to its corresponding values",
  "com.google.common.hash.Funnels$StringCharsetFunnel:<init>(java.nio.charset.Charset)" : null,
  "com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowKeySet()" : null,
  "com.google.common.collect.CompactLinkedHashMap:accessEntry(int)" : null,
  "com.google.common.primitives.ParseRequest:<init>(java.lang.String,int)" : null,
  "com.google.common.reflect.TypeResolver$TypeVariableKey:toString()" : null,
  "com.google.common.collect.Multimaps$MapMultimap:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.ForwardingMultimap:equals(java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$Alphabet:canDecode(char)" : null,
  "com.google.common.graph.ElementOrder:stable()" : "* Returns an instance which specifies that ordering is guaranteed to be always be the same across\n   * iterations, and across releases. Some methods may have stronger guarantees.\n   *\n   * <p>This instance is only useful in combination with {@code incidentEdgeOrder}, e.g. {@code\n   * graphBuilder.incidentEdgeOrder(ElementOrder.stable())}.\n   *\n   * <h3>In combination with {@code incidentEdgeOrder}</h3>\n   *\n   * <p>{@code incidentEdgeOrder(ElementOrder.stable())} guarantees the ordering of the returned\n   * collections of the following methods:\n   *\n   * <ul>\n   *   <li>For {@link Graph} and {@link ValueGraph}:\n   *       <ul>\n   *         <li>{@code edges()}: Stable order\n   *         <li>{@code adjacentNodes(node)}: Connecting edge insertion order\n   *         <li>{@code predecessors(node)}: Connecting edge insertion order\n   *         <li>{@code successors(node)}: Connecting edge insertion order\n   *         <li>{@code incidentEdges(node)}: Edge insertion order\n   *       </ul>\n   *   <li>For {@link Network}:\n   *       <ul>\n   *         <li>{@code adjacentNodes(node)}: Stable order\n   *         <li>{@code predecessors(node)}: Connecting edge insertion order\n   *         <li>{@code successors(node)}: Connecting edge insertion order\n   *         <li>{@code incidentEdges(node)}: Stable order\n   *         <li>{@code inEdges(node)}: Edge insertion order\n   *         <li>{@code outEdges(node)}: Edge insertion order\n   *         <li>{@code adjacentEdges(edge)}: Stable order\n   *         <li>{@code edgesConnecting(nodeU, nodeV)}: Edge insertion order\n   *       </ul>\n   * </ul>\n   *\n   * @since 29.0",
  "com.google.common.collect.Maps$NavigableAsMapView:getOrDefault(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$SoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordLoadException(long)" : null,
  "com.google.common.collect.Lists$StringAsImmutableList:size()" : null,
  "com.google.common.collect.CompactHashMap:hashTableMask()" : "Gets the hash table mask using the stored number of hash table bits.",
  "com.google.common.cache.LocalCache$Segment:getEntry(java.lang.Object,int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:navigableKeySet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:clear()" : null,
  "com.google.common.base.Functions$ForMapWithDefault:apply(java.lang.Object)" : null,
  "com.google.common.graph.ForwardingGraph:successors(java.lang.Object)" : null,
  "com.google.common.cache.CacheBuilderSpec:toString()" : "* Returns a string representation for this CacheBuilderSpec instance. The form of this\n   * representation is not guaranteed.",
  "com.google.common.collect.Iterators:peekingIterator(java.util.Iterator)" : "* Returns a {@code PeekingIterator} backed by the given iterator.\n   *\n   * <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the\n   * iteration, and hence return the same object each time. A subsequent call to {@code next} is\n   * guaranteed to return the same object again. For example:\n   *\n   * {@snippet :\n   * PeekingIterator<String> peekingIterator =\n   *     Iterators.peekingIterator(Iterators.forArray(\"a\", \"b\"));\n   * String a1 = peekingIterator.peek(); // returns \"a\"\n   * String a2 = peekingIterator.peek(); // also returns \"a\"\n   * String a3 = peekingIterator.next(); // also returns \"a\"\n   * }\n   *\n   * <p>Any structural changes to the underlying iteration (aside from those performed by the\n   * iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined\n   * state.\n   *\n   * <p>The returned iterator does not support removal after peeking, as explained by {@link\n   * PeekingIterator#remove()}.\n   *\n   * <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be\n   * returned to the caller, although this is neither guaranteed to occur nor required to be\n   * consistent. For example, this method <i>might</i> choose to pass through recognized\n   * implementations of {@code PeekingIterator} when the behavior of the implementation is known to\n   * meet the contract guaranteed by this method.\n   *\n   * <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each\n   * individual iterator as it is generated.\n   *\n   * @param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this\n   *     iterator, so users should cease making direct calls to it after calling this method.\n   * @return a peeking iterator backed by that iterator. Apart from the additional {@link\n   *     PeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.",
  "com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable,java.lang.Object)" : null,
  "com.google.common.collect.DescendingImmutableSortedMultiset:isPartialView()" : null,
  "com.google.common.collect.Streams:<init>()" : null,
  "com.google.common.hash.HashingInputStream:hash()" : "* Returns the {@link HashCode} based on the data read from this stream. The result is unspecified\n   * if this method is called more than once on the same instance.",
  "com.google.common.net.InetAddresses:getCoercedIPv4Address(java.net.InetAddress)" : "* Coerces an IPv6 address into an IPv4 address.\n   *\n   * <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables,\n   * accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses.\n   * This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits\n   * into 29 bits):\n   *\n   * <ul>\n   *   <li>If the IPv6 address contains an embedded IPv4 address, the function hashes that.\n   *   <li>Otherwise, it hashes the upper 64 bits of the IPv6 address.\n   * </ul>\n   *\n   * <p>A \"coerced\" IPv4 address is equivalent to itself.\n   *\n   * <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost\n   * (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4\n   * address that might permit elevated privileges.\n   *\n   * @param ip {@link InetAddress} to \"coerce\"\n   * @return {@link Inet4Address} represented \"coerced\" address\n   * @since 7.0",
  "com.google.common.collect.ForwardingSortedSet:standardRemove(java.lang.Object)" : "* A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link\n   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.util.concurrent.ClosingFuture:provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture)" : null,
  "com.google.common.collect.ForwardingSortedMap:lastKey()" : null,
  "com.google.common.cache.LocalCache:recordsWrite()" : null,
  "com.google.common.io.BaseEncoding$Alphabet:matches(char)" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardPollLastEntry()" : "* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the {@code\n   * entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish to\n   * override {@code pollFirstEntry} to forward to this implementation.",
  "com.google.common.base.Equivalence$EquivalentToPredicate:equals(java.lang.Object)" : null,
  "com.google.common.collect.HashBasedTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.io.ByteSource$ByteArrayByteSource:isEmpty()" : null,
  "com.google.common.base.PairwiseEquivalence:<init>(com.google.common.base.Equivalence)" : null,
  "com.google.common.collect.LinkedHashMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* {@inheritDoc}\n   *\n   * <p>If {@code values} is not empty and the multimap already contains a mapping for {@code key},\n   * the {@code keySet()} ordering is unchanged. However, the provided values always come last in\n   * the {@link #entries()} and {@link #values()} iteration orderings.",
  "com.google.common.collect.FilteredEntryMultimap$AsMap:containsKey(java.lang.Object)" : null,
  "com.google.common.graph.MapIteratorCache:get(java.lang.Object)" : null,
  "com.google.common.util.concurrent.FluentFuture$TrustedFuture:isDone()" : null,
  "com.google.common.collect.ImmutableSet:of()" : "* Returns the empty immutable set. Preferred over {@link Collections#emptySet} for code\n   * consistency, and because the return type conveys the immutability guarantee.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:get(int)" : null,
  "com.google.common.collect.RegularImmutableAsList:listIterator(int)" : null,
  "com.google.common.collect.LinkedHashMultimap:entryIterator()" : null,
  "com.google.common.collect.ImmutableRangeSet:copyOf(com.google.common.collect.RangeSet)" : "Returns an immutable copy of the specified {@code RangeSet}.",
  "com.google.common.collect.RegularContiguousSet:iterator()" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:remove(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingTable:putAll(com.google.common.collect.Table)" : null,
  "com.google.common.collect.DiscreteDomain$LongDomain:<init>()" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:getLast()" : null,
  "com.google.common.collect.Streams$MapWithIndexSpliterator:estimateSize()" : null,
  "com.google.common.util.concurrent.RateLimiter:checkPermits(int)" : null,
  "com.google.common.collect.MultimapBuilder:enumKeys(java.lang.Class)" : "* Uses an {@link EnumMap} to map keys to value collections.\n   *\n   * @since 16.0",
  "com.google.common.util.concurrent.UncheckedExecutionException:<init>(java.lang.String)" : "* Creates a new instance with the given detail message and no cause.\n   *\n   * @deprecated Prefer {@linkplain UncheckedExecutionException(String, Throwable)} a constructor\n   *     that accepts a cause: Users of this class typically expect for instances to have a non-null\n   *     cause. At the moment, you can <i>usually</i> still preserve behavior by passing an explicit\n   *     {@code null} cause. Note, however, that passing an explicit {@code null} cause prevents\n   *     anyone from calling {@link #initCause} later, so it is not quite equivalent to using a\n   *     constructor that omits the cause.",
  "com.google.common.collect.UsingToStringOrdering:<init>()" : null,
  "com.google.common.collect.CollectPreconditions:checkNonnegative(int,java.lang.String)" : null,
  "com.google.common.eventbus.EventBus:<init>()" : "Creates a new EventBus named \"default\".",
  "com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,java.time.Duration)" : "* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application\n   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their\n   * completion.\n   *\n   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.\n   *\n   * @param executor the executor to modify to make sure it exits when the application is finished\n   * @param terminationTimeout how long to wait for the executor to finish before terminating the\n   *     JVM\n   * @return an unmodifiable version of the input which will not hang the JVM\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:size()" : null,
  "com.google.common.math.DoubleMath:roundToBigInteger(double,java.math.RoundingMode)" : null,
  "com.google.common.collect.ImmutableSet$Builder:addAll(java.util.Iterator)" : null,
  "com.google.common.reflect.Invokable$MethodInvokable:getGenericReturnType()" : null,
  "com.google.common.util.concurrent.AbstractIdleService:toString()" : null,
  "com.google.common.math.MathPreconditions:checkInRangeForRoundingInputs(boolean,double,java.math.RoundingMode)" : null,
  "com.google.common.util.concurrent.AbstractListeningExecutorService:submit(java.lang.Runnable)" : null,
  "com.google.common.cache.LocalCache:invalidateAll(java.lang.Iterable)" : null,
  "com.google.common.base.VerifyException:<init>(java.lang.Throwable)" : "* Constructs a {@code VerifyException} with the cause {@code cause} and a message that is {@code\n   * null} if {@code cause} is null, and {@code cause.toString()} otherwise.\n   *\n   * @since 19.0",
  "com.google.common.util.concurrent.AbstractService:awaitTerminated(java.time.Duration)" : "* @since 28.0",
  "com.google.common.base.Converter$ConverterComposition:hashCode()" : null,
  "com.google.common.util.concurrent.Futures$FutureCombiner:run(java.lang.Runnable,java.util.concurrent.Executor)" : "* Creates the {@link ListenableFuture} which will return the result of running {@code combiner}\n     * when all Futures complete. {@code combiner} will run using {@code executor}.\n     *\n     * <p>If the combiner throws a {@code CancellationException}, the returned future will be\n     * cancelled.\n     *\n     * <p>Canceling this Future will attempt to cancel all the component futures.\n     *\n     * @since 23.6\n     * @return a future whose result is based on {@code combiner} (or based on the input futures\n     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code\n     *     FutureCombiner}). Even though the future never produces a value other than {@code null},\n     *     you should typically check whether it failed: See <a\n     *     href=\"https://errorprone.info/bugpattern/FutureReturnValueIgnored\">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",
  "com.google.common.collect.TreeMultiset:create(java.lang.Iterable)" : "* Creates an empty multiset containing the given initial elements, sorted according to the\n   * elements' natural order.\n   *\n   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.\n   *\n   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific\n   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",
  "com.google.common.collect.ImmutableSortedAsList:delegateCollection()" : null,
  "com.google.common.collect.RegularImmutableAsList:forEach(java.util.function.Consumer)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:tryLock(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Maps:equalsImpl(java.util.Map,java.lang.Object)" : "An implementation of {@link Map#equals}.",
  "com.google.common.cache.LocalCache$Segment:clear()" : null,
  "com.google.common.base.Absent:toString()" : null,
  "com.google.common.collect.AbstractBiMap$EntrySet:iterator()" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addValue(int)" : "* Adds an unnamed value to the formatted output.\n     *\n     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a\n     * readable name.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",
  "com.google.common.collect.DiscreteDomain$LongDomain:distance(java.lang.Long,java.lang.Long)" : null,
  "com.google.common.collect.Tables:<init>()" : null,
  "com.google.common.collect.Multimaps$MapMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.MapMakerInternalMap$Strength$1:defaultEquivalence()" : "* Returns the default equivalence strategy used to compare and hash keys or values referenced\n     * at this strength. This strategy will be used unless the user explicitly specifies an\n     * alternate strategy.",
  "com.google.common.primitives.Bytes$ByteArrayAsList:<init>(byte[],int,int)" : null,
  "com.google.common.graph.ForwardingValueGraph:nodeOrder()" : null,
  "com.google.common.collect.ImmutableSortedSet:comparator()" : "* Returns the comparator that orders the elements, which is {@link Ordering#natural()} when the\n   * natural ordering of the elements is used. Note that its behavior is not consistent with {@link\n   * SortedSet#comparator()}, which returns {@code null} to indicate natural ordering.",
  "com.google.common.graph.MapIteratorCache:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.Maps$SortedKeySet:first()" : null,
  "com.google.common.collect.ForwardingNavigableMap:navigableKeySet()" : null,
  "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Iterator)" : "* Returns an immutable sorted set containing the given elements sorted by the given {@code\n   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the\n   * first one specified is included.\n   *\n   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",
  "com.google.common.collect.FluentIterable$2:<init>(java.lang.Iterable)" : null,
  "com.google.common.graph.Traverser$Traversal:topDown(java.util.Iterator,com.google.common.graph.Traverser$InsertionOrder)" : "* In top-down traversal, an ancestor node is always traversed before any of its descendant\n     * nodes. The traversal order among descendant nodes (particularly aunts and nieces) are\n     * determined by the {@code InsertionOrder} parameter: nieces are placed at the FRONT before\n     * aunts for pre-order; while in BFS they are placed at the BACK after aunts.",
  "com.google.common.util.concurrent.AbstractScheduledService:awaitRunning()" : "* @since 15.0",
  "com.google.common.collect.ObjectArrays:concat(java.lang.Object,java.lang.Object[])" : "* Returns a new array that prepends {@code element} to {@code array}.\n   *\n   * @param element the element to prepend to the front of {@code array}\n   * @param array the array of elements to append\n   * @return an array whose size is one larger than {@code array}, with {@code element} occupying\n   *     the first position, and the elements of {@code array} occupying the remaining elements.",
  "com.google.common.graph.StandardValueGraph:incidentEdges(java.lang.Object)" : null,
  "com.google.common.collect.AbstractNavigableMap:ceilingEntry(java.lang.Object)" : null,
  "com.google.common.collect.EmptyImmutableSetMultimap:asMap()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeInt(int)" : null,
  "com.google.common.collect.SortedMultisets$ElementSet:headSet(java.lang.Object)" : null,
  "com.google.common.util.concurrent.CollectionFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection)" : null,
  "com.google.common.reflect.Invokable:getAnnotation(java.lang.Class)" : null,
  "com.google.common.collect.HashBiMap:get(java.lang.Object)" : null,
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:<init>(java.util.concurrent.ScheduledExecutorService)" : null,
  "com.google.common.primitives.Bytes$ByteArrayAsList:<init>(byte[])" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,char)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.cache.CacheBuilder:setKeyStrength(com.google.common.cache.LocalCache$Strength)" : null,
  "com.google.common.util.concurrent.AbstractFuture:getDoneValue(java.lang.Object)" : "Unboxes {@code obj}. Assumes that obj is not {@code null} or a {@link DelegatingToFuture}.",
  "com.google.common.collect.ForwardingSortedMultiset:descendingMultiset()" : null,
  "com.google.common.collect.ImmutableSet$CachingAsList:createAsList()" : null,
  "com.google.common.cache.LocalCache$WeakEntry:getNext()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:asMap()" : null,
  "com.google.common.graph.AbstractValueGraph:incidentEdgeOrder()" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:offerLast(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AggregateFuture:handleException(java.lang.Throwable)" : "* Fails this future with the given Throwable if {@link #allMustSucceed} is true. Also, logs the\n   * throwable if it is an {@link Error} or if {@link #allMustSucceed} is {@code true}, the\n   * throwable did not cause this future to fail, and it is the first time we've seen that\n   * particular Throwable.",
  "com.google.common.escape.UnicodeEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)" : "* Scans a sub-sequence of characters from a given {@link CharSequence}, returning the index of\n   * the next character that requires escaping.\n   *\n   * <p><b>Note:</b> When implementing an escaper, it is a good idea to override this method for\n   * efficiency. The base class implementation determines successive Unicode code points and invokes\n   * {@link #escape(int)} for each of them. If the semantics of your escaper are such that code\n   * points in the supplementary range are either all escaped or all unescaped, this method can be\n   * implemented more efficiently using {@link CharSequence#charAt(int)}.\n   *\n   * <p>Note however that if your escaper does not escape characters in the supplementary range, you\n   * should either continue to validate the correctness of any surrogate characters encountered or\n   * provide a clear warning to users that your escaper does not validate its input.\n   *\n   * <p>See {@link com.google.common.net.PercentEscaper} for an example.\n   *\n   * @param csq a sequence of characters\n   * @param start the index of the first character to be scanned\n   * @param end the index immediately after the last character to be scanned\n   * @throws IllegalArgumentException if the scanned sub-sequence of {@code csq} contains invalid\n   *     surrogate pairs",
  "com.google.common.graph.AbstractUndirectedNetworkConnections:predecessors()" : null,
  "com.google.common.collect.RegularImmutableSortedSet:getSubSet(int,int)" : null,
  "com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnRight()" : null,
  "com.google.common.collect.ImmutableSet$Indexed:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:isPartialView()" : null,
  "com.google.common.collect.LinkedListMultimap:entryIterator()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:keySet()" : null,
  "com.google.common.collect.ImmutableRangeSet:of(com.google.common.collect.Range)" : "* Returns an immutable range set containing the specified single range. If {@link Range#isEmpty()\n   * range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.",
  "com.google.common.graph.StandardNetwork:inEdges(java.lang.Object)" : null,
  "com.google.common.primitives.Chars:hashCode(char)" : "* Returns a hash code for {@code value}; obsolete alternative to {@link\n   * Character#hashCode(char)}.\n   *\n   * @param value a primitive {@code char} value\n   * @return a hash code for the value",
  "com.google.common.reflect.TypeToken:is(java.lang.reflect.Type,java.lang.reflect.TypeVariable)" : "* {@code A.is(B)} is defined as {@code Foo<A>.isSubtypeOf(Foo<B>)}.\n   *\n   * <p>Specifically, returns true if any of the following conditions is met:\n   *\n   * <ol>\n   *   <li>'this' and {@code formalType} are equal.\n   *   <li>'this' and {@code formalType} have equal canonical form.\n   *   <li>{@code formalType} is {@code <? extends Foo>} and 'this' is a subtype of {@code Foo}.\n   *   <li>{@code formalType} is {@code <? super Foo>} and 'this' is a supertype of {@code Foo}.\n   * </ol>\n   *\n   * Note that condition 2 isn't technically accurate under the context of a recursively bounded\n   * type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>}\n   * where {@code E} is the type variable declared on the {@code Enum} class declaration. It's\n   * technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code\n   * Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example.\n   *\n   * <p>It appears that properly handling recursive type bounds in the presence of implicit type\n   * bounds is not easy. For now we punt, hoping that this defect should rarely cause issues in real\n   * code.\n   *\n   * @param formalType is {@code Foo<formalType>} a supertype of {@code Foo<T>}?\n   * @param declaration The type variable in the context of a parameterized type. Used to infer type\n   *     bound when {@code formalType} is a wildcard with implicit upper bound.",
  "com.google.common.collect.CartesianList:create(java.util.List)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceListener:<init>(com.google.common.util.concurrent.Service,java.lang.ref.WeakReference)" : null,
  "com.google.common.primitives.SignedBytes$LexicographicalComparator:compare(byte[],byte[])" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readShort()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollLast()" : null,
  "com.google.common.collect.ForwardingImmutableCollection:<init>()" : null,
  "com.google.common.collect.CompactLinkedHashMap:create()" : "Creates an empty {@code CompactLinkedHashMap} instance.",
  "com.google.common.util.concurrent.Futures:getDone(java.util.concurrent.Future)" : "* Returns the result of the input {@code Future}, which must have already completed.\n   *\n   * <p>The benefits of this method are twofold. First, the name \"getDone\" suggests to readers that\n   * the {@code Future} is already done. Second, if buggy code calls {@code getDone} on a {@code\n   * Future} that is still pending, the program will throw instead of block. This can be important\n   * for APIs like {@link #whenAllComplete whenAllComplete(...)}{@code .}{@link\n   * FutureCombiner#call(Callable, Executor) call(...)}, where it is easy to use a new input from\n   * the {@code call} implementation but forget to add it to the arguments of {@code\n   * whenAllComplete}.\n   *\n   * <p>If you are looking for a method to determine whether a given {@code Future} is done, use the\n   * instance method {@link Future#isDone()}.\n   *\n   * @throws ExecutionException if the {@code Future} failed with an exception\n   * @throws CancellationException if the {@code Future} was cancelled\n   * @throws IllegalStateException if the {@code Future} is not done\n   * @since 20.0",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.cache.CacheBuilder:from(com.google.common.cache.CacheBuilderSpec)" : "* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.\n   *\n   * @since 12.0",
  "com.google.common.reflect.Types$JavaVersion$1:newArrayType(java.lang.reflect.Type)" : null,
  "com.google.common.base.Present:transform(com.google.common.base.Function)" : null,
  "com.google.common.collect.ImmutableRangeSet$AsSet:toString()" : null,
  "com.google.common.collect.StandardTable$Column:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.CartesianList$1:size()" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:asMap()" : null,
  "com.google.common.primitives.Ints:<init>()" : null,
  "com.google.common.collect.ForwardingTable:columnKeySet()" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:removeIf(java.util.function.Predicate)" : null,
  "com.google.common.collect.ImmutableRangeSet:clear()" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:build()" : "Returns a newly-created immutable multimap.",
  "com.google.common.collect.DiscreteDomain$BigIntegerDomain:next(java.math.BigInteger)" : null,
  "com.google.common.collect.ImmutableMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Synchronized:sortedMap(java.util.SortedMap,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:<init>()" : null,
  "com.google.common.base.CharMatcher$Any:negate()" : null,
  "com.google.common.collect.Collections2$OrderedPermutationCollection:toString()" : null,
  "com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)" : "* Streams lines from a {@link File}, stopping when our callback returns false, or we have read\n   * all of the lines.\n   *\n   * @param file the file to read from\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @param callback the {@link LineProcessor} to use to handle the lines\n   * @return the output of processing the lines\n   * @throws IOException if an I/O error occurs\n   * @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}.",
  "com.google.common.cache.LocalCache$EntryFactory:copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.AbstractSortedMultiset:firstEntry()" : null,
  "com.google.common.io.Resources:toString(java.net.URL,java.nio.charset.Charset)" : "* Reads all characters from a URL into a {@link String}, using the given character set.\n   *\n   * @param url the URL to read from\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @return a string containing all the characters from the URL\n   * @throws IOException if an I/O error occurs.",
  "com.google.common.collect.SingletonImmutableTable:createValues()" : null,
  "com.google.common.util.concurrent.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.primitives.Doubles$DoubleConverter:doBackward(java.lang.Double)" : null,
  "com.google.common.base.Stopwatch:stop()" : "* Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this\n   * point.\n   *\n   * @return this {@code Stopwatch} instance\n   * @throws IllegalStateException if the stopwatch is already stopped.",
  "com.google.common.reflect.TypeVisitor:visitClass(java.lang.Class)" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:toBooleanArray()" : null,
  "com.google.common.collect.Lists$StringAsImmutableList:subList(int,int)" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:createElementSet()" : null,
  "com.google.common.collect.LinkedListMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.AbstractMultimap:equals(java.lang.Object)" : null,
  "com.google.common.reflect.TypeVisitor:visitParameterizedType(java.lang.reflect.ParameterizedType)" : null,
  "com.google.common.reflect.ClassPath:getTopLevelClassesRecursive(java.lang.String)" : "* Returns all top level classes whose package name is {@code packageName} or starts with {@code\n   * packageName} followed by a '.'.",
  "com.google.common.collect.MapMaker:weakKeys()" : "* Specifies that each key (not value) stored in the map should be wrapped in a {@link\n   * WeakReference} (by default, strong references are used).\n   *\n   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})\n   * comparison to determine equality of keys, which is a technical violation of the {@link Map}\n   * specification, and may not be what you expect.\n   *\n   * @throws IllegalStateException if the key strength was already set\n   * @see WeakReference",
  "com.google.common.collect.Lists:listIteratorImpl(java.util.List,int)" : "Returns an implementation of {@link List#listIterator(int)}.",
  "com.google.common.collect.Iterables:getLast(java.lang.Iterable,java.lang.Object)" : "* Returns the last element of {@code iterable} or {@code defaultValue} if the iterable is empty.\n   * If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is\n   * guaranteed to be {@code O(1)}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code Streams.findLast(stream).orElse(defaultValue)}\n   *\n   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),\n   * consider using {@code collection.getLast()} instead. Note that if the collection is empty,\n   * {@code getLast()} throws a {@code NoSuchElementException}, while this method returns the\n   * default value.\n   *\n   * @param defaultValue the value to return if {@code iterable} is empty\n   * @return the last element of {@code iterable} or the default value\n   * @since 3.0",
  "com.google.common.primitives.UnsignedInteger:toString(int)" : "* Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If\n   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code\n   * 10} is used.",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$LinkedStrongKeyStrongValueEntry:getNext()" : null,
  "com.google.common.util.concurrent.AtomicLongMap:<init>(java.util.concurrent.ConcurrentHashMap)" : null,
  "com.google.common.reflect.TypeResolver:<init>()" : null,
  "com.google.common.collect.ForwardingCollection:add(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable)" : null,
  "com.google.common.collect.HashBiMap$Inverse:keySet()" : null,
  "com.google.common.collect.CompactHashMap$KeySetView:forEach(java.util.function.Consumer)" : null,
  "com.google.common.base.Predicates$IsEqualToPredicate:apply(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$KeySet:hashCode()" : null,
  "com.google.common.util.concurrent.Atomics:newReference()" : "* Creates an {@code AtomicReference} instance with no initial value.\n   *\n   * @return a new {@code AtomicReference} with no initial value",
  "com.google.common.collect.TreeMultiset:aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.graph.ForwardingNetwork:degree(java.lang.Object)" : null,
  "com.google.common.collect.Lists$TransformingRandomAccessList:listIterator(int)" : null,
  "com.google.common.collect.ArrayTable:put(java.lang.Object,java.lang.Object,java.lang.Object)" : "* {@inheritDoc}\n   *\n   * @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code\n   *     columnKey} is not in {@link #columnKeySet()}.",
  "com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,java.time.Duration)" : "* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}\n   * implementations.",
  "com.google.common.primitives.ImmutableIntArray$AsList:subList(int,int)" : null,
  "com.google.common.collect.ArrayTable:columnKeySet()" : "* Returns an immutable set of the valid column keys, including those that are associated with\n   * null values only.\n   *\n   * @return immutable set of column keys",
  "com.google.common.collect.TreeMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.cache.ForwardingCache:getIfPresent(java.lang.Object)" : "* @since 11.0",
  "com.google.common.primitives.ImmutableDoubleArray$AsList:<init>(com.google.common.primitives.ImmutableDoubleArray)" : null,
  "com.google.common.collect.Multisets$DecreasingCount:compare(com.google.common.collect.Multiset$Entry,com.google.common.collect.Multiset$Entry)" : null,
  "com.google.common.base.FinalizablePhantomReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)" : "* Constructs a new finalizable phantom reference.\n   *\n   * @param referent to phantom reference\n   * @param queue that should finalize the referent",
  "com.google.common.primitives.Floats:indexOf(float[],float)" : "* Returns the index of the first appearance of the value {@code target} in {@code array}. Note\n   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n   *\n   * @param array an array of {@code float} values, possibly empty\n   * @param target a primitive {@code float} value\n   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.StandardTable$ColumnKeySet:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.Maps$FilteredEntryMap:retainAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.cache.LocalCache:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.ReverseNaturalOrdering:max(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$AsMap:isEmpty()" : null,
  "com.google.common.primitives.UnsignedInteger:fromIntBits(int)" : "* Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is\n   * interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is\n   * interpreted as a normal bit, and all other bits are treated as usual.\n   *\n   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},\n   * otherwise, the result will be equal to {@code 2^32 + bits}.\n   *\n   * <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead.\n   *\n   * @since 14.0",
  "com.google.common.util.concurrent.ServiceManager:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)" : "* Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given\n   * executor. The listener will not have previous state changes replayed, so it is suggested that\n   * listeners are added before any of the managed services are {@linkplain Service#startAsync\n   * started}.\n   *\n   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not\n   * across calls to multiple listeners. Specifically, a given listener will have its callbacks\n   * invoked in the same order as the underlying service enters those states. Additionally, at most\n   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks\n   * may execute concurrently, and listeners may execute in an order different from the one in which\n   * they were registered.\n   *\n   * <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown\n   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and\n   * logged.\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n   * documentation.\n   *\n   * @param listener the listener to run when the manager changes state\n   * @param executor the executor in which the listeners callback methods will be run.",
  "com.google.common.collect.CompactHashMap$ValuesView:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.ForwardingNavigableSet:standardFirst()" : null,
  "com.google.common.collect.Maps$AsMapView:clear()" : null,
  "com.google.common.collect.TreeRangeMap:toString()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:removeIfEmpty()" : "* If collection is empty, remove it from {@code AbstractMapBasedMultimap.this.map}. For\n     * subcollections, check whether the ancestor collection is empty.",
  "com.google.common.util.concurrent.Callables:trySetName(java.lang.String,java.lang.Thread)" : "Tries to set name of the given {@link Thread}, returns true if successful.",
  "com.google.common.util.concurrent.AtomicLongMap:getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)" : "* Updates the value currently associated with {@code key} with the specified function, and\n   * returns the old value. If there is not currently a value associated with {@code key}, the\n   * function is applied to {@code 0L}.\n   *\n   * @since 21.0",
  "com.google.common.collect.MapMakerInternalMap$Segment:postReadCleanup()" : "* Performs routine cleanup following a read. Normally cleanup happens during writes, or from\n     * the cleanupExecutor. If cleanup is not observed after a sufficient number of reads, try\n     * cleaning up from the read thread.",
  "com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable)" : "* Returns the single element contained in {@code iterable}.\n   *\n   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code\n   * stream.collect(MoreCollectors.onlyElement())}.\n   *\n   * @throws NoSuchElementException if the iterable is empty\n   * @throws IllegalArgumentException if the iterable contains multiple elements",
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:pollFirst()" : null,
  "com.google.common.cache.LocalCache:connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.ImmutableEnumSet:iterator()" : null,
  "com.google.common.net.InternetDomainName:child(java.lang.String)" : "* Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to\n   * the current name. For example, {@code InternetDomainName.from(\"foo.com\").child(\"www.bar\")}\n   * returns a new {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only lenient\n   * validation is performed, as described {@link #from(String) here}.\n   *\n   * @throws NullPointerException if leftParts is null\n   * @throws IllegalArgumentException if the resulting name is not valid",
  "com.google.common.collect.Multisets$UnmodifiableMultiset:setCount(java.lang.Object,int,int)" : null,
  "com.google.common.collect.Collections2:filter(java.util.Collection,com.google.common.base.Predicate)" : "* Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is\n   * a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting collection's iterator does not support {@code remove()}, but all other\n   * collection methods are supported. When given an element that doesn't satisfy the predicate, the\n   * collection's {@code add()} and {@code addAll()} methods throw an {@link\n   * IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are\n   * called on the filtered collection, only elements that satisfy the filter will be removed from\n   * the underlying collection.\n   *\n   * <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every\n   * element in the underlying collection and determine which elements satisfy the filter. When a\n   * live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered,\n   * predicate)} and use the copy.\n   *\n   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link\n   * Iterables#filter(Iterable, Class)} for related functionality.)\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#filter Stream.filter}.",
  "com.google.common.reflect.Invokable:equals(java.lang.Object)" : null,
  "com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:equals(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingImmutableList:<init>()" : null,
  "com.google.common.collect.StandardTable:<init>(java.util.Map,com.google.common.base.Supplier)" : null,
  "com.google.common.collect.FilteredKeyMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:createKeySet()" : null,
  "com.google.common.util.concurrent.ListenableFutureTask:<init>(java.lang.Runnable,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ClosingFuture:statusFuture()" : "* Returns a future that finishes when this step does. Calling {@code get()} on the returned\n   * future returns {@code null} if the step is successful or throws the same exception that would\n   * be thrown by calling {@code finishToFuture().get()} if this were the last step. Calling {@code\n   * cancel()} on the returned future has no effect on the {@code ClosingFuture} pipeline.\n   *\n   * <p>{@code statusFuture} differs from most methods on {@code ClosingFuture}: You can make calls\n   * to {@code statusFuture} <i>in addition to</i> the call you make to {@link #finishToFuture()} or\n   * a derivation method <i>on the same instance</i>. This is important because calling {@code\n   * statusFuture} alone does not provide a way to close the pipeline.",
  "com.google.common.util.concurrent.AbstractService$1:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Cut$AboveAll:describeAsLowerBound(java.lang.StringBuilder)" : null,
  "com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.util.Iterator)" : "* Returns an immutable sorted multiset containing the given elements sorted by the given {@code\n   * Comparator}.\n   *\n   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",
  "com.google.common.reflect.Invokable:getAnnotations()" : null,
  "com.google.common.reflect.Types$WildcardTypeImpl:<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])" : null,
  "com.google.common.primitives.UnsignedInts:decode(java.lang.String)" : "* Returns the unsigned {@code int} value represented by the given string.\n   *\n   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:\n   *\n   * <ul>\n   *   <li>{@code 0x}<i>HexDigits</i>\n   *   <li>{@code 0X}<i>HexDigits</i>\n   *   <li>{@code #}<i>HexDigits</i>\n   *   <li>{@code 0}<i>OctalDigits</i>\n   * </ul>\n   *\n   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value\n   * @since 13.0",
  "com.google.common.collect.Synchronized$SynchronizedCollection:spliterator()" : null,
  "com.google.common.collect.ImmutableSortedSet:naturalOrder()" : "* Returns a builder that creates immutable sorted sets whose elements are ordered by their\n   * natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method\n   * provides more type-safety than {@link #builder}, as it can be called only for classes that\n   * implement {@link Comparable}.",
  "com.google.common.util.concurrent.DirectExecutor:execute(java.lang.Runnable)" : null,
  "com.google.common.math.BigIntegerMath:binomial(int,int)" : "* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and\n   * {@code k}, that is, {@code n! / (k! (n - k)!)}.\n   *\n   * <p><b>Warning:</b> the result can take as much as <i>O(k log n)</i> space.\n   *\n   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",
  "com.google.common.collect.Sets$FilteredNavigableSet:lower(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultimap:<init>(com.google.common.collect.ImmutableMap,int)" : null,
  "com.google.common.collect.Interners:<init>()" : null,
  "com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate)" : "* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered\n   * map.",
  "com.google.thirdparty.publicsuffix.PublicSuffixPatterns:<init>()" : null,
  "com.google.common.primitives.Shorts:ensureCapacity(short[],int,int)" : "* Returns an array containing the same values as {@code array}, but guaranteed to be of a\n   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n   *\n   * @param array the source array\n   * @param minLength the minimum length the returned array must guarantee\n   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n   *     minLength}",
  "com.google.common.primitives.Booleans:indexOf(boolean[],boolean)" : "* Returns the index of the first appearance of the value {@code target} in {@code array}.\n   *\n   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and\n   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}.\n   *\n   * @param array an array of {@code boolean} values, possibly empty\n   * @param target a primitive {@code boolean} value\n   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.UnmodifiableListIterator:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.util.concurrent.Service$Listener:terminated(com.google.common.util.concurrent.Service$State)" : "* Called when the service transitions to the {@linkplain State#TERMINATED TERMINATED} state.\n     * The {@linkplain State#TERMINATED TERMINATED} state is a terminal state in the transition\n     * diagram. Therefore, if this method is called, no other methods will be called on the {@link\n     * Listener}.\n     *\n     * @param from The previous state that is being transitioned from. Failure can occur in any\n     *     state with the exception of {@linkplain State#FAILED FAILED} and {@linkplain\n     *     State#TERMINATED TERMINATED}.",
  "com.google.common.collect.TableCollectors:mergeTables(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)" : null,
  "com.google.common.collect.LinkedListMultimap:put(java.lang.Object,java.lang.Object)" : "* Stores a key-value pair in the multimap.\n   *\n   * @param key key to store in the multimap\n   * @param value value to store in the multimap\n   * @return {@code true} always",
  "com.google.common.collect.Ordering:min(java.util.Iterator)" : "* Returns the least of the specified values according to this ordering. If there are multiple\n   * least values, the first of those is returned. The iterator will be left exhausted: its {@code\n   * hasNext()} method will return {@code false}.\n   *\n   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).min(thisComparator).get()} instead\n   * (but note that it does not guarantee which tied minimum element is returned).\n   *\n   * @param iterator the iterator whose minimum element is to be determined\n   * @throws NoSuchElementException if {@code iterator} is empty\n   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n   *     ordering.\n   * @since 11.0",
  "com.google.common.collect.ImmutableClassToInstanceMap:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.Collections2$FilteredCollection:removeIf(java.util.function.Predicate)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMapKeySet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.ForwardingSortedMap:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.util.concurrent.Striped$SmallLazyStriped:size()" : null,
  "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:entryIterator()" : null,
  "com.google.common.collect.FilteredKeySetMultimap:get(java.lang.Object)" : null,
  "com.google.common.math.LongMath$MillerRabinTester:powMod(long,long,long)" : "Returns a^p mod m.",
  "com.google.common.util.concurrent.Platform:<init>()" : null,
  "com.google.common.math.PairedStatsAccumulator:xStats()" : "Returns an immutable snapshot of the statistics on the {@code x} values alone.",
  "com.google.common.hash.FarmHashFingerprint64:hashLength16(long,long,long)" : null,
  "com.google.common.cache.CacheBuilderSpec:durationInNanos(long,java.util.concurrent.TimeUnit)" : "* Converts an expiration duration/unit pair into a single Long for hashing and equality. Uses\n   * nanos to match CacheBuilder implementation.",
  "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:<init>()" : null,
  "com.google.common.collect.HashBasedTable:rowKeySet()" : null,
  "com.google.common.collect.EnumHashBiMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractFuture:set(java.lang.Object)" : "* Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or\n   * set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns,\n   * the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was\n   * accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code\n   * Future} may have previously been set asynchronously, in which case its result may not be known\n   * yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}\n   * method, only by a call to {@link #cancel}.\n   *\n   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or\n   * acquire other locks, risking deadlocks.\n   *\n   * @param value the value to be used as the result\n   * @return true if the attempt was accepted, completing the {@code Future}",
  "com.google.common.collect.TreeTraverser$BreadthFirstIterator:peek()" : null,
  "com.google.common.base.Converter:convertAll(java.lang.Iterable)" : null,
  "com.google.common.collect.ImmutableList$ReverseImmutableList:get(int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:createMaybeNavigableKeySet()" : null,
  "com.google.common.collect.FilteredEntryMultimap:unmodifiableEmptyCollection()" : null,
  "com.google.common.cache.CacheBuilder:checkWeightWithWeigher()" : null,
  "com.google.common.collect.ForwardingSortedMultiset:standardFirstEntry()" : "* A sensible definition of {@link #firstEntry()} in terms of {@code entrySet().iterator()}.\n   *\n   * <p>If you override {@link #entrySet()}, you may wish to override {@link #firstEntry()} to\n   * forward to this implementation.",
  "com.google.common.util.concurrent.ServiceManager:servicesByState()" : "* Provides a snapshot of the current state of all the services under management.\n   *\n   * <p>N.B. This snapshot is guaranteed to be consistent, i.e. the set of states returned will\n   * correspond to a point in time view of the services.\n   *\n   * @since 29.0 (present with return type {@code ImmutableMultimap} since 14.0)",
  "com.google.common.collect.Maps$DescendingMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.reflect.TypeResolver$TypeTable:<init>()" : null,
  "com.google.common.util.concurrent.Futures:getUnchecked(java.util.concurrent.Future)" : "* Returns the result of calling {@link Future#get()} uninterruptibly on a task known not to throw\n   * a checked exception. This makes {@code Future} more suitable for lightweight, fast-running\n   * tasks that, barring bugs in the code, will not fail. This gives it exception-handling behavior\n   * similar to that of {@code ForkJoinTask.join}.\n   *\n   * <p>Exceptions from {@code Future.get} are treated as follows:\n   *\n   * <ul>\n   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link\n   *       UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link\n   *       ExecutionError} (if the cause is an {@code Error}).\n   *   <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is\n   *       restored before {@code getUnchecked} returns.\n   *   <li>Any {@link CancellationException} is propagated untouched. So is any other {@link\n   *       RuntimeException} ({@code get} implementations are discouraged from throwing such\n   *       exceptions).\n   * </ul>\n   *\n   * <p>The overall principle is to eliminate all checked exceptions: to loop to avoid {@code\n   * InterruptedException}, to pass through {@code CancellationException}, and to wrap any exception\n   * from the underlying computation in an {@code UncheckedExecutionException} or {@code\n   * ExecutionError}.\n   *\n   * <p>For an uninterruptible {@code get} that preserves other exceptions, see {@link\n   * Uninterruptibles#getUninterruptibly(Future)}.\n   *\n   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with an\n   *     {@code Exception} as its cause\n   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code\n   *     Error} as its cause\n   * @throws CancellationException if {@code get} throws a {@code CancellationException}\n   * @since 10.0",
  "com.google.common.cache.LocalCache$SoftValueReference:isActive()" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardHigherKey(java.lang.Object)" : "* A sensible definition of {@link #higherKey} in terms of {@code higherEntry}. If you override\n   * {@code higherEntry}, you may wish to override {@code higherKey} to forward to this\n   * implementation.",
  "com.google.common.collect.ImmutableTable:<init>()" : null,
  "com.google.common.escape.Platform$1:<init>()" : null,
  "com.google.common.util.concurrent.ClosingFuture:close()" : null,
  "com.google.common.util.concurrent.AtomicDoubleArray:toString()" : "* Returns the String representation of the current values of array.\n   *\n   * @return the String representation of the current values of array",
  "com.google.common.collect.LinkedHashMultimap$ValueSet:rehashIfNecessary()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:builder()" : "* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, with a default initial\n   * capacity. The returned builder is not thread-safe.\n   *\n   * <p><b>Performance note:</b> The {@link ImmutableDoubleArray} that is built will very likely\n   * occupy more memory than necessary; to trim memory usage, build using {@code\n   * builder.build().trimmed()}.",
  "com.google.common.graph.EndpointPairIterator$Undirected:computeNext()" : null,
  "com.google.common.math.ToDoubleRounder:roundToDouble(java.lang.Number,java.math.RoundingMode)" : "Rounds {@code x} to a {@code double}.",
  "com.google.common.io.BaseEncoding:encode(byte[])" : "Encodes the specified byte array, and returns the encoded {@code String}.",
  "com.google.common.util.concurrent.AbstractService:awaitRunning()" : null,
  "com.google.common.collect.Maps$MapDifferenceImpl:entriesDiffering()" : null,
  "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:<init>(com.google.common.base.Supplier)" : null,
  "com.google.common.collect.Multimaps$CustomMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap:putInstance(com.google.common.reflect.TypeToken,java.lang.Object)" : null,
  "com.google.common.graph.DirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)" : null,
  "com.google.common.cache.LocalCache$NullEntry:getNext()" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:removeLast()" : null,
  "com.google.common.graph.ImmutableGraph$Builder:putEdge(java.lang.Object,java.lang.Object)" : "* Adds an edge connecting {@code nodeU} to {@code nodeV} if one is not already present.\n     *\n     * <p>If the graph is directed, the resultant edge will be directed; otherwise, it will be\n     * undirected.\n     *\n     * <p>If {@code nodeU} and {@code nodeV} are not already present in this graph, this method will\n     * silently {@link #addNode(Object) add} {@code nodeU} and {@code nodeV} to the graph.\n     *\n     * @return this {@code Builder} object\n     * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n     *     #allowsSelfLoops()}",
  "com.google.common.collect.HashBasedTable:contains(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ArrayTable$ArrayMap:size()" : null,
  "com.google.common.util.concurrent.AbstractService:enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable)" : null,
  "com.google.common.collect.ImmutableList:indexOf(java.lang.Object)" : null,
  "com.google.common.primitives.Doubles:tryParse(java.lang.String)" : "* Parses the specified string as a double-precision floating point value. The ASCII character\n   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n   *\n   * <p>Unlike {@link Double#parseDouble(String)}, this method returns {@code null} instead of\n   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link\n   * Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n   *\n   * <p>This implementation is likely to be faster than {@code Double.parseDouble} if many failures\n   * are expected.\n   *\n   * @param string the string representation of a {@code double} value\n   * @return the floating point value represented by {@code string}, or {@code null} if {@code\n   *     string} has a length of zero or cannot be parsed as a {@code double} value\n   * @throws NullPointerException if {@code string} is {@code null}\n   * @since 14.0",
  "com.google.common.collect.CompactHashMap$ValuesView:toArray()" : null,
  "com.google.common.io.ByteSource$ConcatenatedByteSource:toString()" : null,
  "com.google.common.reflect.Types$TypeVariableImpl:getGenericDeclaration()" : null,
  "com.google.common.util.concurrent.Futures:gwtCompatibleToArray(java.lang.Iterable)" : "Can't use Iterables.toArray because it's not gwt compatible",
  "com.google.common.collect.Sets$DescendingSet:first()" : null,
  "com.google.common.collect.ImmutableRangeSet:remove(com.google.common.collect.Range)" : "* Guaranteed to throw an exception and leave the {@code RangeSet} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.FilteredMultimapValues:size()" : null,
  "com.google.common.collect.FilteredEntrySetMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:fillHole(int,java.lang.Object)" : null,
  "com.google.common.collect.Maps$SortedAsMapView:headMap(java.lang.Object)" : null,
  "com.google.common.math.IntMath:pow(int,int)" : "* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to\n   * {@code BigInteger.valueOf(b).pow(k).intValue()}. This implementation runs in {@code O(log k)}\n   * time.\n   *\n   * <p>Compare {@link #checkedPow}, which throws an {@link ArithmeticException} upon overflow.\n   *\n   * @throws IllegalArgumentException if {@code k < 0}",
  "com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)" : "* Returns a view of a {@code ListMultimap} whose values are derived from the original multimap's\n   * entries. In contrast to {@link #transformValues(ListMultimap, Function)}, this method's\n   * entry-transformation logic may depend on the key as well as the value.\n   *\n   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.\n   * For example, the code:\n   *\n   * {@snippet :\n   * Multimap<String, Integer> multimap =\n   *     ImmutableMultimap.of(\"a\", 1, \"a\", 4, \"b\", 6);\n   * EntryTransformer<String, Integer, String> transformer =\n   *     new EntryTransformer<String, Integer, String>() {\n   *       public String transformEntry(String key, Integer value) {\n   *         return key + value;\n   *       }\n   *     };\n   * Multimap<String, String> transformed =\n   *     Multimaps.transformEntries(multimap, transformer);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {\"a\"=[\"a1\", \"a4\"], \"b\"=[\"b6\"]}}.\n   *\n   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view\n   * supports removal operations, and these are reflected in the underlying multimap.\n   *\n   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided\n   * that the transformer is capable of accepting null inputs. The transformed multimap might\n   * contain null values if the transformer sometimes gives a null result.\n   *\n   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap\n   * is.\n   *\n   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned\n   * multimap to be a view, but it means that the transformer will be applied many times for bulk\n   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform\n   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap\n   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.\n   *\n   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code\n   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of\n   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as\n   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the\n   * transformed multimap.\n   *\n   * @since 7.0",
  "com.google.common.collect.AbstractMultimap:asMap()" : null,
  "com.google.common.math.LongMath:divide(long,long,java.math.RoundingMode)" : "* Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code\n   * RoundingMode}. If the {@code RoundingMode} is {@link RoundingMode#DOWN}, then this method is\n   * equivalent to regular Java division, {@code p / q}; and if it is {@link RoundingMode#FLOOR},\n   * then this method is equivalent to {@link Math#floorDiv(long,long) Math.floorDiv}{@code (p, q)}.\n   *\n   * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}\n   *     is not an integer multiple of {@code b}",
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:toPendingString()" : null,
  "com.google.common.io.ByteStreams$1:<init>()" : null,
  "com.google.common.collect.ForwardingBlockingDeque:takeFirst()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:spliterator()" : null,
  "com.google.common.net.MediaType:createConstantUtf8(java.lang.String,java.lang.String)" : null,
  "com.google.common.cache.LocalCache$Segment:drainKeyReferenceQueue()" : null,
  "com.google.common.collect.ImmutableSet:copyOf(java.lang.Iterable)" : "* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n   * each appears first in the source iterable. This method iterates over {@code elements} only\n   * once.\n   *\n   * <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation\n   * is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only\n   * once. This reduces the expense of habitually making defensive copies at API boundaries.\n   * However, the precise conditions for skipping the copy operation are undefined.\n   *\n   * @throws NullPointerException if any of {@code elements} is null",
  "com.google.common.collect.ConcurrentHashMultiset:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:distinctElements()" : null,
  "com.google.common.graph.AbstractGraph:outDegree(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableValueGraph:isDirected()" : null,
  "com.google.common.hash.BloomFilter$SerialForm:<init>(com.google.common.hash.BloomFilter)" : null,
  "com.google.common.cache.ForwardingCache:invalidateAll()" : null,
  "com.google.common.graph.StandardNetwork:nodes()" : null,
  "com.google.common.primitives.ImmutableIntArray:trimmed()" : "* Returns an immutable array containing the same values as {@code this} array. This is logically\n   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance\n   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range\n   * of values, resulting in an equivalent array with a smaller memory footprint.",
  "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator:validateClass(java.lang.Class)" : null,
  "com.google.common.collect.Maps:transformValues(java.util.SortedMap,com.google.common.base.Function)" : "* Returns a view of a sorted map where each value is transformed by a function. All other\n   * properties of the map, such as iteration order, are left intact. For example, the code:\n   *\n   * {@snippet :\n   * SortedMap<String, Integer> map = ImmutableSortedMap.of(\"a\", 4, \"b\", 9);\n   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);\n   * SortedMap<String, Double> transformed =\n   *      Maps.transformValues(map, sqrt);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {a=2.0, b=3.0}}.\n   *\n   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports\n   * removal operations, and these are reflected in the underlying map.\n   *\n   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided\n   * that the function is capable of accepting null input. The transformed map might contain null\n   * values, if the function sometimes gives a null result.\n   *\n   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map\n   * to be a view, but it means that the function will be applied many times for bulk operations\n   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code\n   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a\n   * view, copy the returned map into a new map of your choosing.\n   *\n   * @since 11.0",
  "com.google.common.collect.ImmutableMap$Builder:build(boolean)" : null,
  "com.google.common.collect.ImmutableListMultimap$Builder:put(java.util.Map$Entry)" : "* {@inheritDoc}\n     *\n     * @since 11.0",
  "com.google.common.util.concurrent.ForwardingCondition:await(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.CollectCollectors:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)" : null,
  "com.google.common.util.concurrent.Monitor:hasWaiters(com.google.common.util.concurrent.Monitor$Guard)" : "* Queries whether any threads are waiting for the given guard to become satisfied. Note that\n   * because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee\n   * that the guard becoming satisfied in the future will awaken any threads. This method is\n   * designed primarily for use in monitoring of the system state.",
  "com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object)" : null,
  "com.google.common.util.concurrent.FluentFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)" : "* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code\n   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code\n   * fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has failed, so if\n   * the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback},\n   * an exception is thrown, this exception is used as the result of the output {@code Future}.\n   *\n   * <p>Usage examples:\n   *\n   * {@snippet :\n   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch\n   * // counters.\n   * ListenableFuture<Integer> faultTolerantFuture =\n   *     fetchCounters().catchingAsync(\n   *         FetchException.class, x -> immediateFuture(0), directExecutor());\n   * }\n   *\n   * <p>The fallback can also choose to propagate the original exception when desired:\n   *\n   * {@snippet :\n   * // Falling back to a zero counter only in case the exception was a\n   * // TimeoutException.\n   * ListenableFuture<Integer> faultTolerantFuture =\n   *     fetchCounters().catchingAsync(\n   *         FetchException.class,\n   *         e -> {\n   *           if (omitDataOnFetchFailure) {\n   *             return immediateFuture(0);\n   *           }\n   *           throw e;\n   *         },\n   *         directExecutor());\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,\n   * {@code directExecutor} functions should avoid heavyweight operations inside {@code\n   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n   * completing the returned {@code Future}.)\n   *\n   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It\n   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}\n   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link\n   * #transform}.\n   *\n   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception\n   *     type is matched against the input's exception. \"The input's exception\" means the cause of\n   *     the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a\n   *     different kind of exception, that exception itself. To avoid hiding bugs and other\n   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code\n   *     Throwable.class} in particular.\n   * @param fallback the {@link AsyncFunction} to be called if the input fails with the expected\n   *     exception type. The function's argument is the input's exception. \"The input's exception\"\n   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if\n   *     {@code get()} throws a different kind of exception, that exception itself.\n   * @param executor the executor that runs {@code fallback} if the input fails",
  "com.google.common.reflect.Invokable:<init>(java.lang.reflect.AccessibleObject)" : null,
  "com.google.common.primitives.Doubles:reverse(double[])" : "* Reverses the elements of {@code array}. This is equivalent to {@code\n   * Collections.reverse(Doubles.asList(array))}, but is likely to be more efficient.\n   *\n   * @since 23.1",
  "com.google.common.collect.Lists$ReverseList:clear()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:<init>(java.lang.Object,int)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)" : "Creates a {@code CycleDetectingLockFactory.WithExplicitOrdering<E>}.",
  "com.google.common.util.concurrent.ServiceManager:stopAsync()" : "* Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services\n   * being managed.\n   *\n   * @return this",
  "com.google.common.base.Preconditions:badElementIndex(int,int,java.lang.String)" : null,
  "com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.Traverser:validate(java.lang.Iterable)" : null,
  "com.google.common.collect.ArrayTable:<init>(java.lang.Iterable,java.lang.Iterable)" : null,
  "com.google.common.cache.LocalCache$Segment:loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.util.concurrent.ForwardingListenableFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.CompactHashMap:init(int)" : "Pseudoconstructor for serialization support.",
  "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:entryIterator()" : null,
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.collect.Cut$BelowAll:describeAsLowerBound(java.lang.StringBuilder)" : null,
  "com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object,boolean)" : "* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are\n   * greater than (or equal to, if {@code inclusive}) {@code fromKey}.\n   *\n   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an\n   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code\n   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n   * the original {@code fromKey}.\n   *\n   * @since 12.0",
  "com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeSet:asSet(com.google.common.collect.DiscreteDomain)" : "* Returns an {@link ImmutableSortedSet} containing the same values in the given domain\n   * {@linkplain RangeSet#contains contained} by this range set.\n   *\n   * <p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For\n   * example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty\n   * ranges {@code [3..3)} and {@code [4..4)}.\n   *\n   * <p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large\n   * range set (such as {@code ImmutableRangeSet.of(Range.greaterThan(0))}). Certain operations on\n   * such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link\n   * Collections#frequency}) can cause major performance problems.\n   *\n   * <p>The returned set's {@link Object#toString} method returns a shorthand form of the set's\n   * contents, such as {@code \"[1..100]}\"}.\n   *\n   * @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if\n   *     neither has an upper bound",
  "com.google.common.base.Equivalence$EquivalentToPredicate:apply(java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeMap:<init>()" : null,
  "com.google.common.collect.Synchronized$SynchronizedSetMultimap:<init>(com.google.common.collect.SetMultimap,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Striped$CompactStriped:getAt(int)" : null,
  "com.google.common.util.concurrent.ForwardingLock:lockInterruptibly()" : null,
  "com.google.common.collect.Sets$DescendingSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Sets$FilteredSortedSet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.Maps$DescendingMap:keySet()" : null,
  "com.google.common.collect.Hashing:<init>()" : null,
  "com.google.common.base.Predicates:toStringHelper(java.lang.String,java.lang.Iterable)" : null,
  "com.google.common.math.IntMath:saturatedAdd(int,int)" : "* Returns the sum of {@code a} and {@code b} unless it would overflow or underflow in which case\n   * {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.\n   *\n   * @since 20.0",
  "com.google.common.collect.GeneralRange:contains(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Is:or(com.google.common.base.CharMatcher)" : null,
  "com.google.common.cache.LocalCache:get(java.lang.Object,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.collect.TreeRangeMap:put(com.google.common.collect.Range,java.lang.Object)" : null,
  "com.google.common.collect.CompactLinkedHashSet:resizeEntries(int)" : null,
  "com.google.common.base.CharMatcher$None:trimFrom(java.lang.CharSequence)" : null,
  "com.google.common.collect.ForwardingMap:standardIsEmpty()" : "* A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link\n   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.primitives.Doubles$DoubleArrayAsList:<init>(double[],int,int)" : null,
  "com.google.common.collect.FluentIterable:anyMatch(com.google.common.base.Predicate)" : "* Returns {@code true} if any element in this fluent iterable satisfies the predicate.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch} (same).",
  "com.google.common.graph.Graphs$TransposedGraph:inDegree(java.lang.Object)" : null,
  "com.google.common.collect.TopKSelector:trim()" : "* Quickselects the top k elements from the 2k elements in the buffer. O(k) expected time, O(k log\n   * k) worst case.",
  "com.google.common.io.FileBackedOutputStream$MemoryOutput:getCount()" : null,
  "com.google.common.collect.StandardTable$Row:clear()" : null,
  "com.google.common.reflect.Types$JavaVersion$3:newArrayType(java.lang.reflect.Type)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ImmutableRangeSet:unionOf(java.lang.Iterable)" : "* Returns an {@code ImmutableRangeSet} representing the union of the specified ranges.\n   *\n   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. Duplicate\n   * or connected ranges are permitted, and will be coalesced in the result.\n   *\n   * @since 21.0",
  "com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.Monitor:enterInterruptibly(long,java.util.concurrent.TimeUnit)" : "* Enters this monitor. Blocks at most the given time, and may be interrupted.\n   *\n   * @return whether the monitor was entered\n   * @throws InterruptedException if interrupted while waiting",
  "com.google.common.collect.SparseImmutableTable:columnMap()" : null,
  "com.google.common.cache.LocalCache$Segment:insertLoadingValueReference(java.lang.Object,int,boolean)" : "* Returns a newly inserted {@code LoadingValueReference}, or null if the live value reference\n     * is already loading.",
  "com.google.common.math.IntMath:log10(int,java.math.RoundingMode)" : "* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not a power of ten",
  "com.google.common.collect.Sets$PowerSet:equals(java.lang.Object)" : null,
  "com.google.common.net.MediaType$Tokenizer:<init>(java.lang.String)" : null,
  "com.google.common.collect.ImmutableEnumMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.base.Functions$ConstantFunction:<init>(java.lang.Object)" : null,
  "com.google.common.base.Ascii:getAlphaIndex(char)" : "* Returns the non-negative index value of the alpha character {@code c}, regardless of case. Ie,\n   * 'a'/'A' returns 0 and 'z'/'Z' returns 25. Non-alpha characters return a value of 26 or greater.",
  "com.google.common.collect.StandardTable$RowMap:createEntrySet()" : null,
  "com.google.common.collect.ImmutableBiMap:copyOf(java.lang.Iterable)" : "* Returns an immutable bimap containing the given entries. The returned bimap iterates over\n   * entries in the same order as the original iterable.\n   *\n   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n   *     key\n   * @throws NullPointerException if any key, value, or entry is null\n   * @since 19.0",
  "com.google.common.collect.ForwardingNavigableSet:higher(java.lang.Object)" : null,
  "com.google.common.util.concurrent.MoreExecutors$Application:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate)" : "* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered\n   * map.",
  "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedLongs$ParseOverflowDetection:overflowInParse(long,int,int)" : "* Returns true if (current * radix) + digit is a number too large to be represented by an\n     * unsigned long. This is useful for detecting overflow while parsing a string representation of\n     * a number. Does not verify whether supplied radix is valid, passing an invalid radix will give\n     * undefined results or an ArrayIndexOutOfBoundsException.",
  "com.google.common.collect.ImmutableList$ReverseImmutableList:reversePosition(int)" : null,
  "com.google.common.collect.CompactLinkedHashSet:toArray()" : null,
  "com.google.common.collect.DescendingImmutableSortedMultiset:<init>(com.google.common.collect.ImmutableSortedMultiset)" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:decodingStream(java.io.Reader)" : null,
  "com.google.common.collect.ImmutableMultiset$Builder:addAll(java.util.Iterator)" : "* Adds each element of {@code elements} to the {@code ImmutableMultiset}.\n     *\n     * @param elements the elements to add to the {@code ImmutableMultiset}\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)" : null,
  "com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:closeAsync()" : "* Starts closing all closeable objects captured during the {@link ClosingFuture}'s asynchronous\n     * operation on the {@link Executor}s specified by calls to {@link\n     * DeferredCloser#eventuallyClose(Object, Executor)}.\n     *\n     * <p>If any such calls specified {@link MoreExecutors#directExecutor()}, those objects will be\n     * closed synchronously.\n     *\n     * <p>Idempotent: objects will be closed at most once.",
  "com.google.common.collect.RegularImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.collect.Multisets:intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset)" : "* Returns an unmodifiable view of the intersection of two multisets. In the returned multiset,\n   * the count of each element is the <i>minimum</i> of its counts in the two backing multisets,\n   * with elements that would have a count of 0 not included. The iteration order of the returned\n   * multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the\n   * same element appearing consecutively.\n   *\n   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different\n   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).\n   *\n   * @since 2.0",
  "com.google.common.collect.ImmutableMultiset:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)" : "* Returns a {@code Collector} that accumulates elements into an {@code ImmutableMultiset} whose\n   * elements are the result of applying {@code elementFunction} to the inputs, with counts equal to\n   * the result of applying {@code countFunction} to the inputs.\n   *\n   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the first\n   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of\n   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.\n   *\n   * @since 22.0",
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:get(java.lang.Object)" : null,
  "com.google.common.collect.DenseImmutableTable$Column:isPartialView()" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated(java.time.Duration)" : "* @since 28.0",
  "com.google.common.collect.Maps$SortedAsMapView:<init>(java.util.SortedSet,com.google.common.base.Function)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.TreeRangeSet:create(com.google.common.collect.RangeSet)" : "Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.",
  "com.google.common.collect.ForwardingCollection:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:headMap(java.lang.Object,boolean)" : null,
  "com.google.common.collect.CollectCollectors$EnumMapAccumulator:combine(com.google.common.collect.CollectCollectors$EnumMapAccumulator)" : null,
  "com.google.common.io.BaseEncoding$Base64Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)" : null,
  "com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)" : "* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code\n   * numElements} elements are not available, it will wait for them up to the specified timeout.\n   *\n   * @param q the blocking queue to be drained\n   * @param buffer where to add the transferred elements\n   * @param numElements the number of elements to be waited for\n   * @param timeout how long to wait before giving up, in units of {@code unit}\n   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter\n   * @return the number of elements transferred\n   * @throws InterruptedException if interrupted while waiting",
  "com.google.common.collect.ForwardingSortedMap:delegate()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ImmutableSortedMultiset:comparator()" : null,
  "com.google.common.math.Stats:toStats()" : "* Returns a {@link Collector} which accumulates statistics from a {@link java.util.stream.Stream}\n   * of any type of boxed {@link Number} into a {@link Stats}. Use by calling {@code\n   * boxedNumericStream.collect(toStats())}. The numbers will be converted to {@code double} values\n   * (which may cause loss of precision).\n   *\n   * <p>If you have any of the primitive streams {@code DoubleStream}, {@code IntStream}, or {@code\n   * LongStream}, you should use the factory method {@link #of} instead.\n   *\n   * @since 28.2 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ComparatorOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.SipHashFunction$SipHasher:processM(long)" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:first()" : null,
  "com.google.common.collect.StandardTable$Row:wrapEntry(java.util.Map$Entry)" : null,
  "com.google.common.io.BaseEncoding$Base64Encoding:<init>(java.lang.String,java.lang.String,java.lang.Character)" : null,
  "com.google.common.util.concurrent.Futures$InCompletionOrderFuture:cancel(boolean)" : null,
  "com.google.common.graph.DirectedNetworkConnections:successors()" : null,
  "com.google.common.cache.LocalCache$Segment:getNextEvictable()" : null,
  "com.google.common.util.concurrent.ForwardingFluentFuture:isCancelled()" : null,
  "com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.reflect.Types$JavaVersion$4:typeName(java.lang.reflect.Type)" : null,
  "com.google.common.collect.Interners$InternerFunction:hashCode()" : null,
  "com.google.common.collect.Tables$TransposeTable:column(java.lang.Object)" : null,
  "com.google.common.graph.EndpointPair$Ordered:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.RateLimiter:reserveAndGetWaitLength(int,long)" : "* Reserves next ticket and returns the wait time that the caller must wait for.\n   *\n   * @return the required wait time, never negative",
  "com.google.common.collect.ImmutableSortedMap$SerializedForm:makeBuilder(int)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : null,
  "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Iterator)" : "* Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n   * When multiple elements are equivalent according to {@code compareTo()}, only the first one\n   * specified is included.\n   *\n   * <p>This method is not type-safe, as it may be called on elements that are not mutually\n   * comparable.\n   *\n   * @throws ClassCastException if the elements are not mutually comparable\n   * @throws NullPointerException if any of {@code elements} is null",
  "com.google.common.collect.MultimapBuilder$EnumSetSupplier:get()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:entryIterator()" : "* Returns an iterator across all key-value map entries, used by {@code entries().iterator()} and\n   * {@code values().iterator()}. The default behavior, which traverses the values for one key, the\n   * values for a second key, and so on, suffices for most {@code AbstractMapBasedMultimap}\n   * implementations.\n   *\n   * @return an iterator across map entries",
  "com.google.common.base.CharMatcher:retainFrom(java.lang.CharSequence)" : "* Returns a string containing all matching BMP characters of a character sequence, in order. For\n   * example:\n   *\n   * {@snippet :\n   * CharMatcher.is('a').retainFrom(\"bazaar\")\n   * }\n   *\n   * ... returns {@code \"aaa\"}.",
  "com.google.common.collect.Multimaps$UnmodifiableListMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.collect.MultimapBuilder$HashSetSupplier:get()" : null,
  "com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.ListenableFuture)" : "* Converts the given {@code ListenableFuture} to an equivalent {@code FluentFuture}.\n   *\n   * <p>If the given {@code ListenableFuture} is already a {@code FluentFuture}, it is returned\n   * directly. If not, it is wrapped in a {@code FluentFuture} that delegates all calls to the\n   * original {@code ListenableFuture}.",
  "com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.MapMaker:weakValues()" : "* Specifies that each value (not key) stored in the map should be wrapped in a {@link\n   * WeakReference} (by default, strong references are used).\n   *\n   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor\n   * candidate for caching.\n   *\n   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})\n   * comparison to determine equality of values. This technically violates the specifications of the\n   * methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object)\n   * remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V,\n   * V)}, and may not be what you expect.\n   *\n   * @throws IllegalStateException if the value strength was already set\n   * @see WeakReference",
  "com.google.common.net.InternetDomainName:ancestor(int)" : "* Returns the ancestor of the current domain at the given number of levels \"higher\" (rightward)\n   * in the subdomain list. The number of levels must be non-negative, and less than {@code N-1},\n   * where {@code N} is the number of parts in the domain.\n   *\n   * <p>TODO: Reasonable candidate for addition to public API.",
  "com.google.common.graph.AbstractGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.GeneralRange:from(com.google.common.collect.Range)" : "Converts a Range to a GeneralRange.",
  "com.google.common.cache.LocalCache$Segment:postWriteCleanup()" : "Performs routine cleanup following a write.",
  "com.google.common.cache.LocalCache$NullEntry:getPreviousInAccessQueue()" : null,
  "com.google.common.base.Converter$ReverseConverter:doBackward(java.lang.Object)" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:delegate()" : null,
  "com.google.common.util.concurrent.FuturesGetChecked:hasConstructorUsableByGetChecked(java.lang.Class)" : null,
  "com.google.common.graph.ImmutableValueGraph:allowsSelfLoops()" : null,
  "com.google.common.base.CharMatcher:inRange(char,char)" : "* Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints\n   * are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code\n   * CharMatcher.inRange('a', 'z')}.\n   *\n   * @throws IllegalArgumentException if {@code endInclusive < startInclusive}",
  "com.google.common.collect.ImmutableMap:compute(java.lang.Object,java.util.function.BiFunction)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[])" : null,
  "com.google.common.io.BaseEncoding$Alphabet:hasLowerCase()" : null,
  "com.google.common.collect.ImmutableTable$Builder:build()" : "* Returns a newly-created immutable table.\n     *\n     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method\n     * will throw an exception if there are duplicate key pairs. The {@code build()} method will\n     * soon be deprecated.\n     *\n     * @throws IllegalArgumentException if duplicate key pairs were added",
  "com.google.common.collect.Tables$AbstractCell:equals(java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:getRightChildIndex(int)" : null,
  "com.google.common.hash.Funnels$SinkAsStream:<init>(com.google.common.hash.PrimitiveSink)" : null,
  "com.google.common.graph.ImmutableNetwork:allowsSelfLoops()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:entries()" : null,
  "com.google.common.util.concurrent.Futures:immediateCancelledFuture()" : "* Creates a {@code ListenableFuture} which is cancelled immediately upon construction, so that\n   * {@code isCancelled()} always returns {@code true}.\n   *\n   * @since 14.0",
  "com.google.common.collect.MinMaxPriorityQueue$Heap:getParentIndex(int)" : null,
  "com.google.common.collect.AbstractSetMultimap:unmodifiableCollectionSubclass(java.util.Collection)" : null,
  "com.google.common.collect.AbstractMapEntry:toString()" : "Returns a string representation of the form {@code {key}={value}}.",
  "com.google.common.collect.Queues:synchronizedDeque(java.util.Deque)" : "* Returns a synchronized (thread-safe) deque backed by the specified deque. In order to guarantee\n   * serial access, it is critical that <b>all</b> access to the backing deque is accomplished\n   * through the returned deque.\n   *\n   * <p>It is imperative that the user manually synchronize on the returned deque when accessing any\n   * of the deque's iterators:\n   *\n   * {@snippet :\n   * Deque<E> deque = Queues.synchronizedDeque(Queues.<E>newArrayDeque());\n   * ...\n   * deque.add(element);  // Needn't be in synchronized block\n   * ...\n   * synchronized (deque) {  // Must synchronize on deque!\n   *   Iterator<E> i = deque.iterator(); // Must be in synchronized block\n   *   while (i.hasNext()) {\n   *     foo(i.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>Failure to follow this advice may result in non-deterministic behavior.\n   *\n   * <p>The returned deque will be serializable if the specified deque is serializable.\n   *\n   * @param deque the deque to be wrapped in a synchronized view\n   * @return a synchronized view of the specified deque\n   * @since 15.0",
  "com.google.common.collect.ImmutableMapValues:contains(java.lang.Object)" : null,
  "com.google.common.reflect.Types:filterUpperBounds(java.lang.Iterable)" : null,
  "com.google.common.collect.Iterators:toString(java.util.Iterator)" : "* Returns a string representation of {@code iterator}, with the format {@code [e1, e2, ..., en]}.\n   * The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.",
  "com.google.common.util.concurrent.Service$Listener:stopping(com.google.common.util.concurrent.Service$State)" : "* Called when the service transitions to the {@linkplain State#STOPPING STOPPING} state. The\n     * only valid values for {@code from} are {@linkplain State#STARTING STARTING} or {@linkplain\n     * State#RUNNING RUNNING}. This occurs when {@link Service#stopAsync} is called.\n     *\n     * @param from The previous state that is being transitioned from.",
  "com.google.common.primitives.UnsignedBytes:sortDescending(byte[])" : "* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 8-bit\n   * integers.\n   *\n   * @since 23.1",
  "com.google.common.primitives.Ints$IntArrayAsList:spliterator()" : null,
  "com.google.common.graph.ForwardingNetwork:edgesConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:iterator()" : null,
  "com.google.common.collect.AbstractRangeSet:isEmpty()" : null,
  "com.google.common.collect.ImmutableEnumMap$EnumSerializedForm:readResolve()" : null,
  "com.google.common.collect.ByFunctionOrdering:equals(java.lang.Object)" : null,
  "com.google.common.graph.NetworkBuilder:allowsSelfLoops(boolean)" : "* Specifies whether the network will allow self-loops (edges that connect a node to itself).\n   * Attempting to add a self-loop to a network that does not allow them will throw an {@link\n   * UnsupportedOperationException}.\n   *\n   * <p>The default value is {@code false}.",
  "com.google.common.graph.Graphs$TransposedGraph:incidentEdges(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$MapMultimap:get(java.lang.Object)" : null,
  "com.google.common.graph.ValueGraphBuilder:copy()" : null,
  "com.google.common.collect.ImmutableEnumMap:equals(java.lang.Object)" : null,
  "com.google.common.reflect.Parameter:toString()" : null,
  "com.google.common.collect.MapMaker:getConcurrencyLevel()" : null,
  "com.google.common.collect.Iterators:get(java.util.Iterator,int,java.lang.Object)" : "* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code\n   * position}th position or {@code defaultValue} otherwise.\n   *\n   * @param position position of the element to return\n   * @param defaultValue the default value to return if the iterator is empty or if {@code position}\n   *     is greater than the number of elements remaining in {@code iterator}\n   * @return the element at the specified position in {@code iterator} or {@code defaultValue} if\n   *     {@code iterator} produces fewer than {@code position + 1} elements.\n   * @throws IndexOutOfBoundsException if {@code position} is negative\n   * @since 4.0",
  "com.google.common.collect.AllEqualOrdering:immutableSortedCopy(java.lang.Iterable)" : null,
  "com.google.common.util.concurrent.MoreExecutors:newDirectExecutorService()" : "* Creates an executor service that runs each task in the thread that invokes {@code\n   * execute/submit}, as in {@code ThreadPoolExecutor.CallerRunsPolicy}. This applies both to\n   * individually submitted tasks and to collections of tasks submitted via {@code invokeAll} or\n   * {@code invokeAny}. In the latter case, tasks will run serially on the calling thread. Tasks are\n   * run to completion before a {@code Future} is returned to the caller (unless the executor has\n   * been shutdown).\n   *\n   * <p>Although all tasks are immediately executed in the thread that submitted the task, this\n   * {@code ExecutorService} imposes a small locking overhead on each task submission in order to\n   * implement shutdown and termination behavior.\n   *\n   * <p>The implementation deviates from the {@code ExecutorService} specification with regards to\n   * the {@code shutdownNow} method. First, \"best-effort\" with regards to canceling running tasks is\n   * implemented as \"no-effort\". No interrupts or other attempts are made to stop threads executing\n   * tasks. Second, the returned list will always be empty, as any submitted task is considered to\n   * have started execution. This applies also to tasks given to {@code invokeAll} or {@code\n   * invokeAny} which are pending serial execution, even the subset of the tasks that have not yet\n   * started execution. It is unclear from the {@code ExecutorService} specification if these should\n   * be included, and it's much easier to implement the interpretation that they not be. Finally, a\n   * call to {@code shutdown} or {@code shutdownNow} may result in concurrent calls to {@code\n   * invokeAll/invokeAny} throwing RejectedExecutionException, although a subset of the tasks may\n   * already have been executed.\n   *\n   * @since 18.0 (present as MoreExecutors.sameThreadExecutor() since 10.0)",
  "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:headSet(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Segment:removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:keyStrength()" : null,
  "com.google.common.cache.LocalCache:reclaimValue(com.google.common.cache.LocalCache$ValueReference)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch)" : "Invokes {@code latch.}{@link CountDownLatch#await() await()} uninterruptibly.",
  "com.google.common.collect.Maps$FilteredEntryBiMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.util.concurrent.ForwardingBlockingDeque:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.FluentIterable:toSortedList(java.util.Comparator)" : "* Returns an {@code ImmutableList} containing all of the elements from this {@code\n   * FluentIterable} in the order specified by {@code comparator}. To produce an {@code\n   * ImmutableList} sorted by its natural ordering, use {@code toSortedList(Ordering.natural())}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code\n   * stream.sorted(comparator).collect()}.\n   *\n   * @param comparator the function by which to sort list elements\n   * @throws NullPointerException if any element of this iterable is {@code null}\n   * @since 14.0 (since 13.0 as {@code toSortedImmutableList()}).",
  "com.google.common.collect.ComparisonChain$1:compare(double,double)" : "* Compares two {@code double} values as specified by {@link Double#compare}, <i>if</i> the result\n   * of this comparison chain has not already been determined.",
  "com.google.common.collect.HashBiMap$Inverse$InverseKeySet:remove(java.lang.Object)" : null,
  "com.google.common.collect.AbstractSortedMultiset:createDescendingMultiset()" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:get(java.lang.Object)" : null,
  "com.google.common.base.Ticker$1:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)" : "Schedules the task to run on the provided executor on behalf of the service.",
  "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitWildcardType(java.lang.reflect.WildcardType)" : null,
  "com.google.common.collect.LinkedListMultimap:removeAllNodes(java.lang.Object)" : "Removes all nodes for the specified key.",
  "com.google.common.collect.AbstractMultimap:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.SortedMultisets$NavigableElementSet:pollLast()" : null,
  "com.google.common.collect.Iterators$MergingIterator:next()" : null,
  "com.google.common.util.concurrent.FluentFuture:<init>()" : null,
  "com.google.common.reflect.ClassPath$ClassInfo:load()" : "* Loads (but doesn't link or initialize) the class.\n     *\n     * @throws LinkageError when there were errors in loading classes that this class depends on.\n     *     For example, {@link NoClassDefFoundError}.",
  "com.google.common.collect.Synchronized$SynchronizedCollection:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.LinkedHashMultimap:deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:higher(java.lang.Object)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:pollLastEntry()" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner5:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner5$AsyncClosingFunction5,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * {@code ClosingFuture}-returning function to their values. The function can use a {@link\n     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those\n     * captured by the returned {@link ClosingFuture}).\n     *\n     * <p>If this combiner was returned by {@link #whenAllSucceed(ClosingFuture, ClosingFuture,\n     * ClosingFuture, ClosingFuture, ClosingFuture)} and any of the inputs fail, so will the\n     * returned step.\n     *\n     * <p>If the function throws a {@code CancellationException}, the pipeline will be cancelled.\n     *\n     * <p>If the function throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and used as the failure of the derived step.\n     *\n     * <p>If the function throws any other exception, it will be used as the failure of the derived\n     * step.\n     *\n     * <p>If an exception is thrown after the function creates a {@code ClosingFuture}, then none of\n     * the closeable objects in that {@code ClosingFuture} will be closed.\n     *\n     * <p>Usage guidelines for this method:\n     *\n     * <ul>\n     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a\n     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,\n     *       Executor)} instead, with a function that returns the next value directly.\n     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}\n     *       for every closeable object this step creates in order to capture it for later closing.\n     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code\n     *       ClosingFuture} call {@link #from(ListenableFuture)}.\n     * </ul>\n     *\n     * <p>The same warnings about doing heavyweight operations within {@link\n     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",
  "com.google.common.collect.RegularImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.primitives.Shorts:compare(short,short)" : "* Compares the two specified {@code short} values. The sign of the value returned is the same as\n   * that of {@code ((Short) a).compareTo(b)}.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the\n   * equivalent {@link Short#compare} method instead.\n   *\n   * @param a the first {@code short} to compare\n   * @param b the second {@code short} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.math.StatsAccumulator:addAll(com.google.common.math.StatsAccumulator)" : "* Adds the given statistics to the dataset, as if the individual values used to compute the\n   * statistics had been added directly.\n   *\n   * @since 28.2",
  "com.google.common.collect.AbstractMultiset:addAll(java.util.Collection)" : "* {@inheritDoc}\n   *\n   * <p>This implementation is highly efficient when {@code elementsToAdd} is itself a {@link\n   * Multiset}.",
  "com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)" : "* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when\n   * the application is complete. It does so by using daemon threads and adding a shutdown hook to\n   * wait for their completion.\n   *\n   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor\n   * has not finished its work.\n   *\n   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.\n   *\n   * @param executor the executor to modify to make sure it exits when the application is finished\n   * @return an unmodifiable version of the input which will not hang the JVM",
  "com.google.common.io.Files$FileByteSource:sizeIfKnown()" : null,
  "com.google.common.collect.Multimaps$CustomMultimap:unmodifiableCollectionSubclass(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "Returns an immutable multimap containing the given entries, in order.",
  "com.google.common.cache.LocalCache$LoadingValueReference:get()" : null,
  "com.google.common.graph.ImmutableNetwork:getNodeConnections(com.google.common.graph.Network)" : null,
  "com.google.common.collect.Maps$FilteredEntrySortedMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.Iterables:removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate)" : "Removes and returns the first matching element, or returns {@code null} if there is none.",
  "com.google.common.collect.Cut$AboveAll:typeAsLowerBound()" : null,
  "com.google.common.base.Present:or(com.google.common.base.Supplier)" : null,
  "com.google.common.collect.MapMakerInternalMap:getEntry(java.lang.Object)" : "* Returns the internal entry for the specified key. The entry may be computing or partially\n   * collected. Does not impact recency ordering.",
  "com.google.common.math.MathPreconditions:checkRoundingUnnecessary(boolean)" : null,
  "com.google.common.io.CharSource:read()" : "* Reads the contents of this source as a string.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source",
  "com.google.common.cache.LocalCache:nullifyAccessOrder(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.net.HostAndPort:hashCode()" : null,
  "com.google.common.cache.LocalCache:getAll(java.lang.Iterable)" : null,
  "com.google.common.collect.ImmutableMultiset$ElementSet:<init>(java.util.List,com.google.common.collect.Multiset)" : null,
  "com.google.common.util.concurrent.AtomicDoubleArray:lazySet(int,double)" : "* Eventually sets the element at position {@code i} to the given value.\n   *\n   * @param i the index\n   * @param newValue the new value",
  "com.google.common.collect.HashBiMap$Inverse:values()" : null,
  "com.google.common.collect.ImmutableMap$SerializedForm:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.RegularImmutableSortedSet:internalArrayEnd()" : null,
  "com.google.common.collect.ImmutableMapKeySet:size()" : null,
  "com.google.common.collect.Cut$AboveAll:<init>()" : null,
  "com.google.common.cache.LocalCache$WeakWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.CompoundOrdering:<init>(java.util.Comparator,java.util.Comparator)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:removeMin(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.graph.AbstractBaseGraph:validateEndpoints(com.google.common.graph.EndpointPair)" : "* Throws {@code IllegalArgumentException} if the ordering of {@code endpoints} is not compatible\n   * with the directionality of this graph.",
  "com.google.common.collect.ImmutableMultiset:of()" : "* Returns the empty immutable multiset.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.math.LongMath:checkedMultiply(long,long)" : "* Returns the product of {@code a} and {@code b}, provided it does not overflow.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link\n   * Math#multiplyExact(long, long)} instead.\n   *\n   * @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic",
  "com.google.common.io.CharStreams$NullWriter:write(char[])" : null,
  "com.google.common.collect.AbstractBiMap$ValueSet:toArray()" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:maxEncodedSize(int)" : null,
  "com.google.common.collect.EmptyContiguousSet:createDescendingSet()" : null,
  "com.google.common.primitives.Chars$CharArrayAsList:set(int,java.lang.Character)" : null,
  "com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$MapMultimap:createValues()" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:descendingIterator()" : null,
  "com.google.common.base.Platform:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:getValue()" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:inDegree(java.lang.Object)" : null,
  "com.google.common.base.Functions:constant(java.lang.Object)" : "* Returns a function that ignores its input and always returns {@code value}.\n   *\n   * <p>Prefer to use the lambda expression {@code o -> value} instead. Note that it is not\n   * serializable unless you explicitly make it {@link Serializable}, typically by writing {@code\n   * (Function<Object, E> & Serializable) o -> value}.\n   *\n   * @param value the constant value for the function to return\n   * @return a function that always returns {@code value}",
  "com.google.common.collect.ImmutableList:writeReplace()" : null,
  "com.google.common.collect.Maps$Values:removeAll(java.util.Collection)" : null,
  "com.google.common.util.concurrent.AbstractService:checkCurrentState(com.google.common.util.concurrent.Service$State)" : "Checks that the current state is equal to the expected state.",
  "com.google.common.collect.ImmutableCollection:copyIntoArray(java.lang.Object[],int)" : "* Copies the contents of this immutable collection into the specified array at the specified\n   * offset. Returns {@code offset + size()}.",
  "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long)" : "* Creates a {@link BloomFilter} with the expected number of insertions and a default expected\n   * false positive probability of 3%.\n   *\n   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,\n   * will result in its saturation, and a sharp deterioration of its false positive probability.\n   *\n   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}\n   * is.\n   *\n   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n   * also relies on object identity of funnels.\n   *\n   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n   * @param expectedInsertions the number of expected insertions to the constructed {@code\n   *     BloomFilter}; must be positive\n   * @return a {@code BloomFilter}\n   * @since 19.0",
  "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:isReusable()" : null,
  "com.google.common.util.concurrent.Futures:successfulAsList(java.lang.Iterable)" : "* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its\n   * successful input futures. The list of results is in the same order as the input list, and if\n   * any of the provided futures fails or is canceled, its corresponding position will contain\n   * {@code null} (which is indistinguishable from the future having a successful value of {@code\n   * null}).\n   *\n   * <p>The list of results is in the same order as the input list.\n   *\n   * <p>This differs from {@link #allAsList(Iterable)} in that it's tolerant of failed futures for\n   * any of the items, representing them as {@code null} in the result list.\n   *\n   * <p>Canceling this future will attempt to cancel all the component futures.\n   *\n   * @param futures futures to combine\n   * @return a future that provides a list of the results of the component futures\n   * @since 10.0",
  "com.google.common.collect.Maps$SortedAsMapView:keySet()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.graph.ForwardingNetwork:successors(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Iterators:asEnumeration(java.util.Iterator)" : null,
  "com.google.common.collect.NullnessCasts:<init>()" : null,
  "com.google.common.collect.ImmutableSortedMap$Builder:build()" : "* Returns a newly-created immutable sorted map.\n     *\n     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method\n     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be\n     * deprecated.\n     *\n     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which\n     *     might be the keys' natural order)",
  "com.google.common.base.Equivalence:hash(java.lang.Object)" : "* Returns a hash code for {@code t}.\n   *\n   * <p>The {@code hash} has the following properties:\n   *\n   * <ul>\n   *   <li>It is <i>consistent</i>: for any reference {@code x}, multiple invocations of {@code\n   *       hash(x}} consistently return the same value provided {@code x} remains unchanged\n   *       according to the definition of the equivalence. The hash need not remain consistent from\n   *       one execution of an application to another execution of the same application.\n   *   <li>It is <i>distributable across equivalence</i>: for any references {@code x} and {@code\n   *       y}, if {@code equivalent(x, y)}, then {@code hash(x) == hash(y)}. It is <i>not</i>\n   *       necessary that the hash be distributable across <i>inequivalence</i>. If {@code\n   *       equivalence(x, y)} is false, {@code hash(x) == hash(y)} may still be true.\n   *   <li>{@code hash(null)} is {@code 0}.\n   * </ul>",
  "com.google.common.collect.Multisets:removeAllImpl(com.google.common.collect.Multiset,java.util.Collection)" : "An implementation of {@link Multiset#removeAll}.",
  "com.google.common.collect.Synchronized$SynchronizedMultimap:containsEntry(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultimap:copyOf(com.google.common.collect.Multimap)" : "* Returns an immutable multimap containing the same mappings as {@code multimap}, in the\n   * \"key-grouped\" iteration order described in the class documentation.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws NullPointerException if any key or value in {@code multimap} is null",
  "com.google.common.collect.Tables$TransposeTable:containsValue(java.lang.Object)" : null,
  "com.google.common.hash.AbstractHasher:putBytes(byte[])" : null,
  "com.google.common.net.InetAddresses:get6to4IPv4Address(java.net.Inet6Address)" : "* Returns the IPv4 address embedded in a 6to4 address.\n   *\n   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in 6to4 address\n   * @return {@link Inet4Address} of embedded IPv4 in 6to4 address\n   * @throws IllegalArgumentException if the argument is not a valid IPv6 6to4 address",
  "com.google.common.collect.ConcurrentHashMultiset:iterator()" : null,
  "com.google.common.graph.ForwardingNetwork:adjacentEdges(java.lang.Object)" : null,
  "com.google.common.net.InternetDomainName:equals(java.lang.Object)" : "* Equality testing is based on the text supplied by the caller, after normalization as described\n   * in the class documentation. For example, a non-ASCII Unicode domain name and the Punycode\n   * version of the same domain name would not be considered equal.",
  "com.google.common.base.Equivalence:pairwise()" : "* Returns an equivalence over iterables based on the equivalence of their elements. More\n   * specifically, two iterables are considered equivalent if they both contain the same number of\n   * elements, and each pair of corresponding elements is equivalent according to {@code this}. Null\n   * iterables are equivalent to one another.\n   *\n   * <p>Note that this method performs a similar function for equivalences as {@link\n   * com.google.common.collect.Ordering#lexicographical} does for orderings.\n   *\n   * <p>The returned object is serializable if this object is serializable.\n   *\n   * @since 10.0",
  "com.google.common.collect.ImmutableMapEntry:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:subArray(int,int)" : "* Returns a new immutable array containing the values in the specified range.\n   *\n   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one\n   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,\n   * end).trimmed()}.",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:equals(java.lang.Object)" : null,
  "com.google.common.base.Strings:padEnd(java.lang.String,int,char)" : "* Returns a string, of length at least {@code minLength}, consisting of {@code string} appended\n   * with as many copies of {@code padChar} as are necessary to reach that length. For example,\n   *\n   * <ul>\n   *   <li>{@code padEnd(\"4.\", 5, '0')} returns {@code \"4.000\"}\n   *   <li>{@code padEnd(\"2010\", 3, '!')} returns {@code \"2010\"}\n   * </ul>\n   *\n   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.\n   *\n   * @param string the string which should appear at the beginning of the result\n   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in\n   *     which case the input string is always returned.\n   * @param padChar the character to append to the end of the result until the minimum length is\n   *     reached\n   * @return the padded string",
  "com.google.common.collect.LinkedHashMultimap:succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink)" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:failureCause()" : "* @since 14.0",
  "com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder)" : "Constructs a graph with the properties specified in {@code builder}.",
  "com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)" : null,
  "com.google.common.collect.ImmutableRangeSet:removeAll(com.google.common.collect.RangeSet)" : "* Guaranteed to throw an exception and leave the {@code RangeSet} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.ForwardingConcurrentMap:delegate()" : null,
  "com.google.common.base.Predicates:alwaysFalse()" : "* Returns a predicate that always evaluates to {@code false}.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code x -> false}, but note that lambdas do not have\n   * human-readable {@link #toString()} representations and are not serializable.",
  "com.google.common.collect.ArrayListMultimap:create()" : "* Creates a new, empty {@code ArrayListMultimap} with the default initial capacities.\n   *\n   * <p>You may also consider the equivalent {@code\n   * MultimapBuilder.hashKeys().arrayListValues().build()}, which provides more control over the\n   * underlying data structure.",
  "com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollLast()" : null,
  "com.google.common.base.Predicates$IsEqualToPredicate:hashCode()" : null,
  "com.google.common.primitives.ImmutableDoubleArray:builder(int)" : "* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, sized to hold up to\n   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.\n   *\n   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number\n   * of values that will be added, if that knowledge is readily available. It is better to guess a\n   * value slightly too high than slightly too low. If the value is not exact, the {@link\n   * ImmutableDoubleArray} that is built will very likely occupy more memory than strictly\n   * necessary; to trim memory usage, build using {@code builder.build().trimmed()}.",
  "com.google.common.io.ByteSource:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.ConcurrentHashMultiset$EntrySet:snapshot()" : null,
  "com.google.common.collect.ForwardingDeque:peekLast()" : null,
  "com.google.common.collect.ReverseOrdering:min(java.util.Iterator)" : null,
  "com.google.common.collect.ImmutableMultimap:createKeySet()" : null,
  "com.google.common.collect.ImmutableMultiset$EntrySet:get(int)" : null,
  "com.google.common.collect.Maps$ViewCachingAbstractMap:keySet()" : null,
  "com.google.common.collect.StandardTable$Column$KeySet:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.ForwardingNavigableSet:descendingIterator()" : null,
  "com.google.common.graph.AbstractGraph:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.graph.ForwardingValueGraph:edgeCount()" : "* Defer to {@link AbstractValueGraph#edges()} (based on {@link #successors(Object)}) for full\n   * edges() implementation.",
  "com.google.common.collect.DenseImmutableTable:getCell(int)" : null,
  "com.google.common.collect.RegularImmutableMap:fromEntryArray(int,java.util.Map$Entry[],boolean)" : "* Creates an ImmutableMap from the first n entries in entryArray. This implementation may replace\n   * the entries in entryArray with its own entry objects (though they will have the same key/value\n   * contents), and may take ownership of entryArray.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:lockInterruptibly()" : null,
  "com.google.common.math.LongMath$MillerRabinTester$2:mulMod(long,long,long)" : "Returns a * b mod m.",
  "com.google.common.collect.Platform:newHashMapWithExpectedSize(int)" : "Returns the platform preferred implementation of a map based on a hash table.",
  "com.google.common.collect.Sets$SetView:immutableCopy()" : "* Returns an immutable copy of the current contents of this set view. Does not support null\n     * elements.\n     *\n     * <p><b>Warning:</b> this may have unexpected results if a backing set of this view uses a\n     * nonstandard notion of equivalence, for example if it is a {@link TreeSet} using a comparator\n     * that is inconsistent with {@link Object#equals(Object)}.",
  "com.google.common.util.concurrent.AbstractService$StateSnapshot:failureCause()" : "* @see Service#failureCause()",
  "com.google.common.graph.ForwardingNetwork:outEdges(java.lang.Object)" : null,
  "com.google.common.reflect.Parameter:equals(java.lang.Object)" : null,
  "com.google.common.graph.ForwardingGraph:inDegree(java.lang.Object)" : null,
  "com.google.common.base.CommonPattern:isPcreLike()" : null,
  "com.google.common.hash.MacHashFunction$MacHasher:<init>(javax.crypto.Mac)" : null,
  "com.google.common.collect.ImmutableRangeMap$Builder:build()" : "* Returns an {@code ImmutableRangeMap} containing the associations previously added to this\n     * builder.\n     *\n     * @throws IllegalArgumentException if any two ranges inserted into this builder overlap",
  "com.google.common.collect.ForwardingDeque:descendingIterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$KeySet:clear()" : null,
  "com.google.common.collect.CompactHashSet:resizeMeMaybe(int)" : "Resizes the entries storage if necessary.",
  "com.google.common.util.concurrent.WrappingExecutorService:isShutdown()" : null,
  "com.google.common.collect.ImmutableListMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:size()" : "* Returns the number of key-value mappings in this map. If the map contains more than {@code\n   * Integer.MAX_VALUE} elements, returns {@code Integer.MAX_VALUE}.",
  "com.google.common.collect.TreeRangeMap$AsMapOfRanges:entryIterator()" : null,
  "com.google.common.collect.ImmutableEnumSet:asImmutable(java.util.EnumSet)" : null,
  "com.google.common.collect.ImmutableMultimap$Values:contains(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long,long)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Sets:union(java.util.Set,java.util.Set)" : "* Returns an unmodifiable <b>view</b> of the union of two sets. The returned set contains all\n   * elements that are contained in either backing set. Iterating over the returned set iterates\n   * first over all the elements of {@code set1}, then over each element of {@code set2}, in order,\n   * that is not contained in {@code set1}.\n   *\n   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different\n   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a\n   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",
  "com.google.common.collect.RegularImmutableMap$Values:get(int)" : null,
  "com.google.common.collect.ImmutableMap:copyOf(java.lang.Iterable)" : "* Returns an immutable map containing the specified entries. The returned map iterates over\n   * entries in the same order as the original iterable.\n   *\n   * @throws NullPointerException if any key, value, or entry is null\n   * @throws IllegalArgumentException if two entries have the same key\n   * @since 19.0",
  "com.google.common.collect.HashBiMap$Inverse:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.ImmutableMultiset$EntrySet:isPartialView()" : null,
  "com.google.common.collect.ImmutableSortedSet$Builder:<init>(java.util.Comparator)" : null,
  "com.google.common.collect.ImmutableTable$Builder:orderColumnsBy(java.util.Comparator)" : "Specifies the ordering of the generated table's columns.",
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues()" : "Uses an {@link ArrayList} to store value collections.",
  "com.google.common.collect.ForwardingMultimap:clear()" : null,
  "com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap)" : "* Simply returns its argument.\n   *\n   * @deprecated no need to use this\n   * @since 10.0",
  "com.google.common.graph.ImmutableValueGraph$Builder:putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object)" : "* Adds an edge connecting {@code endpoints} if one is not already present, and sets a value for\n     * that edge to {@code value} (overwriting the existing value, if any).\n     *\n     * <p>If the graph is directed, the resultant edge will be directed; otherwise, it will be\n     * undirected.\n     *\n     * <p>If this graph is directed, {@code endpoints} must be ordered.\n     *\n     * <p>Values do not have to be unique. However, values must be non-null.\n     *\n     * <p>If either or both endpoints are not already present in this graph, this method will\n     * silently {@link #addNode(Object) add} each missing endpoint to the graph.\n     *\n     * @return this {@code Builder} object\n     * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n     *     #allowsSelfLoops()}\n     * @throws IllegalArgumentException if the endpoints are unordered and the graph is directed",
  "com.google.common.util.concurrent.FuturesGetChecked:<init>()" : null,
  "com.google.common.cache.LocalCache:isExpired(com.google.common.cache.ReferenceEntry,long)" : "Returns true if the entry has expired.",
  "com.google.common.base.Verify:verify(boolean,java.lang.String,int)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.util.concurrent.SmoothRateLimiter:doGetRate()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:get(java.lang.Object,int)" : null,
  "com.google.common.primitives.Ints$IntArrayAsList:get(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableDoubleArray$AsList:get(int)" : null,
  "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:processRemaining(java.nio.ByteBuffer)" : null,
  "com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[],int,int)" : "* Attempts to read {@code len} bytes from the stream into the given array starting at {@code\n   * off}, with the same behavior as {@link DataInput#readFully(byte[], int, int)}. Does not close\n   * the stream.\n   *\n   * @param in the input stream to read from.\n   * @param b the buffer into which the data is read.\n   * @param off an int specifying the offset into the data.\n   * @param len an int specifying the number of bytes to read.\n   * @throws EOFException if this stream reaches the end before reading all the bytes.\n   * @throws IOException if an I/O error occurs.",
  "com.google.common.primitives.ImmutableLongArray$AsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:awaitRunning(long,java.util.concurrent.TimeUnit)" : "* @since 15.0",
  "com.google.common.util.concurrent.Platform:isInstanceOfThrowableClass(java.lang.Throwable,java.lang.Class)" : null,
  "com.google.common.collect.ImmutableSortedSet:floor(java.lang.Object)" : "* @since 12.0",
  "com.google.common.io.ByteSource$ByteArrayByteSource:read()" : null,
  "com.google.common.collect.Collections2$TransformedCollection:removeIf(java.util.function.Predicate)" : null,
  "com.google.common.cache.LocalCache:putAll(java.util.Map)" : null,
  "com.google.common.collect.HashBiMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingTable:contains(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.SipHashFunction$SipHasher:processRemaining(java.nio.ByteBuffer)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.MultimapBuilder$HashSetSupplier:<init>(int)" : null,
  "com.google.common.collect.Iterables:mergeSorted(java.lang.Iterable,java.util.Comparator)" : "* Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries\n   * will not be de-duplicated.\n   *\n   * <p>Callers must ensure that the source {@code iterables} are in non-descending order as this\n   * method does not sort its input.\n   *\n   * <p>For any equivalent elements across all {@code iterables}, it is undefined which element is\n   * returned first.\n   *\n   * @since 11.0",
  "com.google.common.collect.Maps$DescendingMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:elementSet()" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:size()" : null,
  "com.google.common.cache.LocalCache$SoftValueReference:getWeight()" : null,
  "com.google.common.base.Functions:forMap(java.util.Map,java.lang.Object)" : "* Returns a function which performs a map lookup with a default value. The function created by\n   * this method returns {@code defaultValue} for all inputs that do not belong to the map's key\n   * set. See also {@link #forMap(Map)}, which throws an exception in this case.\n   *\n   * <p>Prefer to write the lambda expression {@code k -> map.getOrDefault(k, defaultValue)}\n   * instead. Note that it is not serializable unless you explicitly make it {@link Serializable},\n   * typically by writing {@code (Function<K, V> & Serializable) k -> map.getOrDefault(k,\n   * defaultValue)}.\n   *\n   * @param map source map that determines the function behavior\n   * @param defaultValue the value to return for inputs that aren't map keys\n   * @return function that returns {@code map.get(a)} when {@code a} is a key, or {@code\n   *     defaultValue} otherwise",
  "com.google.common.cache.ForwardingCache:size()" : null,
  "com.google.common.collect.ImmutableMapKeySet:spliterator()" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.String,java.lang.Object)" : null,
  "com.google.common.collect.Lists$ReverseList:getForwardList()" : null,
  "com.google.common.primitives.ImmutableIntArray$AsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.io.Files:<init>()" : null,
  "com.google.common.base.Functions$SupplierFunction:apply(java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeMap$RangeMapEntry:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap:entry(int)" : null,
  "com.google.common.util.concurrent.TimeLimiter:runWithTimeout(java.lang.Runnable,java.time.Duration)" : "* Invokes a specified Runnable, timing out after the specified time limit. If the target method\n   * run finishes before the limit is reached, this method returns or a wrapped exception is\n   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and\n   * throw a {@link TimeoutException} to the caller.\n   *\n   * @param runnable the Runnable to execute\n   * @param timeout the maximum length of time to wait\n   * @throws TimeoutException if the time limit is reached\n   * @throws InterruptedException if the current thread was interrupted during execution\n   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}\n   * @throws ExecutionError if {@code runnable} throws an {@code Error}\n   * @since 28.0",
  "com.google.common.util.concurrent.AbstractCatchingFuture:afterDone()" : null,
  "com.google.common.io.ByteStreams:toByteArray(java.io.InputStream,long)" : "* Reads all bytes from an input stream into a byte array. The given expected size is used to\n   * create an initial byte array, but if the actual number of bytes read from the stream differs,\n   * the correct result will be returned anyway.",
  "com.google.common.collect.ArrayTable:values()" : "* Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the\n   * table will update the returned collection.\n   *\n   * <p>The returned collection's iterator traverses the values of the first row key, the values of\n   * the second row key, and so on.\n   *\n   * @return collection of values",
  "com.google.common.reflect.TypeCapture:capture()" : "Returns the captured type.",
  "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit)" : "* Returns a {@link Scheduler} that schedules the task using the {@link\n     * ScheduledExecutorService#scheduleWithFixedDelay} method.\n     *\n     * @param initialDelay the time to delay first execution\n     * @param delay the delay between the termination of one execution and the commencement of the\n     *     next\n     * @param unit the time unit of the initialDelay and delay parameters",
  "com.google.common.math.DoubleMath:fuzzyEquals(double,double,double)" : "* Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other.\n   *\n   * <p>Technically speaking, this is equivalent to {@code Math.abs(a - b) <= tolerance ||\n   * Double.valueOf(a).equals(Double.valueOf(b))}.\n   *\n   * <p>Notable special cases include:\n   *\n   * <ul>\n   *   <li>All NaNs are fuzzily equal.\n   *   <li>If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal.\n   *   <li>Positive and negative zero are always fuzzily equal.\n   *   <li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a}\n   *       and {@code b} are fuzzily equal if and only if {@code a == b}.\n   *   <li>With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal.\n   *   <li>With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code\n   *       Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves.\n   * </ul>\n   *\n   * <p>This is reflexive and symmetric, but <em>not</em> transitive, so it is <em>not</em> an\n   * equivalence relation and <em>not</em> suitable for use in {@link Object#equals}\n   * implementations.\n   *\n   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN\n   * @since 13.0",
  "com.google.common.hash.AbstractNonStreamingHashFunction:hashLong(long)" : null,
  "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:next()" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:parallelStream()" : null,
  "com.google.common.cache.AbstractCache:put(java.lang.Object,java.lang.Object)" : "* @since 11.0",
  "com.google.common.graph.AbstractNetwork:asGraph()" : null,
  "com.google.common.io.Resources:asByteSource(java.net.URL)" : "* Returns a {@link ByteSource} that reads from the given URL.\n   *\n   * @since 14.0",
  "com.google.common.math.LongMath$MillerRabinTester$1:squareMod(long,long)" : "Returns a^2 mod m.",
  "com.google.common.cache.LocalCache$KeySet:iterator()" : null,
  "com.google.common.cache.LocalCache$LoadingSerializationProxy:getUnchecked(java.lang.Object)" : null,
  "com.google.common.collect.FilteredKeyListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)" : null,
  "com.google.common.io.BaseEncoding$Alphabet:isValidPaddingStartPosition(int)" : null,
  "com.google.common.net.InetAddresses:isMaximum(java.net.InetAddress)" : "* Returns true if the InetAddress is either 255.255.255.255 for IPv4 or\n   * ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff for IPv6.\n   *\n   * @return true if the InetAddress is either 255.255.255.255 for IPv4 or\n   *     ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff for IPv6\n   * @since 10.0",
  "com.google.common.collect.FilteredKeySetMultimap:entries()" : null,
  "com.google.common.collect.Multisets$FilteredMultiset:count(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap$EntrySetView:spliterator()" : null,
  "com.google.common.collect.ForwardingListIterator:set(java.lang.Object)" : null,
  "com.google.common.collect.AbstractListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* {@inheritDoc}\n   *\n   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,\n   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link\n   * Multimap} interface.",
  "com.google.common.base.Stopwatch:elapsed()" : "* Returns the current elapsed time shown on this stopwatch as a {@link Duration}. Unlike {@link\n   * #elapsed(TimeUnit)}, this method does not lose any precision due to rounding.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:iterator()" : null,
  "com.google.common.base.Present:hashCode()" : null,
  "com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper:decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState)" : null,
  "com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)" : "* Returns a string copy of the input character sequence, with each matching BMP character\n   * replaced by a given replacement sequence. For example:\n   *\n   * {@snippet :\n   * CharMatcher.is('a').replaceFrom(\"yaha\", \"oo\")\n   * }\n   *\n   * ... returns {@code \"yoohoo\"}.\n   *\n   * <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better\n   * off calling {@link #replaceFrom(CharSequence, char)} directly.\n   *\n   * @param sequence the character sequence to replace matching characters in\n   * @param replacement the characters to append to the result string in place of each matching\n   *     character in {@code sequence}\n   * @return the new string",
  "com.google.common.collect.EnumMultiset:create(java.lang.Iterable)" : "* Creates a new {@code EnumMultiset} containing the specified elements.\n   *\n   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.\n   *\n   * @param elements the elements that the multiset should contain\n   * @throws IllegalArgumentException if {@code elements} is empty",
  "com.google.common.collect.ImmutableBiMap$Builder:build()" : "* Returns a newly-created immutable bimap. The iteration order of the returned bimap is the\n     * order in which entries were inserted into the builder, unless {@link #orderEntriesByValue}\n     * was called, in which case entries are sorted by value.\n     *\n     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method\n     * will throw an exception if there are duplicate keys or values. The {@code build()} method\n     * will soon be deprecated.\n     *\n     * @throws IllegalArgumentException if duplicate keys or values were added",
  "com.google.common.reflect.Types$GenericArrayTypeImpl:<init>(java.lang.reflect.Type)" : null,
  "com.google.common.cache.LocalCache$WriteThroughEntry:getKey()" : null,
  "com.google.common.collect.FilteredKeyMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:addRightChild(java.lang.Object,int)" : null,
  "com.google.common.collect.ForwardingMultiset:add(java.lang.Object,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.ImmutableTable:of()" : "* Returns an empty immutable table.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.collect.TreeRangeSet$Complement:contains(java.lang.Comparable)" : null,
  "com.google.common.collect.Sets:newLinkedHashSet(java.lang.Iterable)" : "* Creates a <i>mutable</i> {@code LinkedHashSet} instance containing the given elements in order.\n   *\n   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link\n   * ImmutableSet#copyOf(Iterable)} instead.\n   *\n   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.\n   * Instead, use the {@code LinkedHashSet} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * <p>Overall, this method is not very useful and will likely be deprecated in the future.\n   *\n   * @param elements the elements that the set should contain, in order\n   * @return a new {@code LinkedHashSet} containing those elements (minus duplicates)",
  "com.google.common.collect.Range:toString(com.google.common.collect.Cut,com.google.common.collect.Cut)" : null,
  "com.google.common.base.CharMatcher:is(char)" : "Returns a {@code char} matcher that matches only one specified BMP character.",
  "com.google.common.reflect.Invokable:getModifiers()" : null,
  "com.google.common.math.IntMath:factorial(int)" : "* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if\n   * {@code n == 0}, or {@link Integer#MAX_VALUE} if the result does not fit in a {@code int}.\n   *\n   * @throws IllegalArgumentException if {@code n < 0}",
  "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:forEachRemaining(java.util.function.Consumer)" : null,
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:size()" : null,
  "com.google.common.collect.LinkedListMultimap:keys()" : null,
  "com.google.common.primitives.ImmutableLongArray:of(long,long,long)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:instance()" : null,
  "com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class)" : "* Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the\n   * given checked exception type. This reduces boilerplate for a common use of {@code Future} in\n   * which it is unnecessary to programmatically distinguish between exception types or to extract\n   * other information from the exception instance.\n   *\n   * <p>Exceptions from {@code Future.get} are treated as follows:\n   *\n   * <ul>\n   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause\n   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code\n   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.\n   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the\n   *       interrupt).\n   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link\n   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such\n   *       exceptions).\n   * </ul>\n   *\n   * <p>The overall principle is to continue to treat every checked exception as a checked\n   * exception, every unchecked exception as an unchecked exception, and every error as an error. In\n   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the\n   * new stack trace matches that of the current thread.\n   *\n   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor\n   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}\n   * (preferring constructors with at least one {@code String}, then preferring constructors with at\n   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did\n   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.\n   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.\n   *\n   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}\n   *     whose cause is not itself a checked exception\n   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a\n   *     {@code RuntimeException} as its cause\n   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code\n   *     Error} as its cause\n   * @throws CancellationException if {@code get} throws a {@code CancellationException}\n   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or\n   *     does not have a suitable constructor\n   * @since 19.0 (in 10.0 as {@code get})",
  "com.google.common.collect.TreeMultimap:create()" : "* Creates an empty {@code TreeMultimap} ordered by the natural ordering of its keys and values.",
  "com.google.common.collect.AbstractIndexedListIterator:<init>(int,int)" : "* Constructs an iterator across a sequence of the given size with the given initial position.\n   * That is, the first call to {@link #nextIndex()} will return {@code position}, and the first\n   * call to {@link #next()} will return the element at that index, if available. Calls to {@link\n   * #previous()} can retrieve the preceding {@code position} elements.\n   *\n   * @throws IndexOutOfBoundsException if {@code position} is negative or is greater than {@code\n   *     size}\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.util.concurrent.WrappingScheduledExecutorService:<init>(java.util.concurrent.ScheduledExecutorService)" : null,
  "com.google.common.collect.Tables$UnmodifiableRowSortedMap:<init>(com.google.common.collect.RowSortedTable)" : null,
  "com.google.common.collect.DiscreteDomain$BigIntegerDomain:previous(java.math.BigInteger)" : null,
  "com.google.common.collect.CompactHashing:tableGet(java.lang.Object,int)" : "* Returns {@code table[index]}, where {@code table} is actually a {@code byte[]}, {@code\n   * short[]}, or {@code int[]}. When it is a {@code byte[]} or {@code short[]}, the returned value\n   * is unsigned, so the range of possible returned values is 0–255 or 0–65535, respectively.",
  "com.google.common.reflect.TypeParameter:toString()" : null,
  "com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)" : "* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code\n   * numElements} elements are not available, it will wait for them up to the specified timeout.\n   *\n   * @param q the blocking queue to be drained\n   * @param buffer where to add the transferred elements\n   * @param numElements the number of elements to be waited for\n   * @param timeout how long to wait before giving up\n   * @return the number of elements transferred\n   * @throws InterruptedException if interrupted while waiting\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ImmutableTable:toString()" : "Returns the string representation {@code rowMap().toString()}.",
  "com.google.common.collect.Synchronized$SynchronizedTable:containsRow(java.lang.Object)" : null,
  "com.google.common.net.HostAndPort:getHostAndPortFromBracketedHost(java.lang.String)" : "* Parses a bracketed host-port string, throwing IllegalArgumentException if parsing fails.\n   *\n   * @param hostPortString the full bracketed host-port specification. Port might not be specified.\n   * @return an array with 2 strings: host and port, in that order.\n   * @throws IllegalArgumentException if parsing the bracketed host-port string fails.",
  "com.google.common.hash.MacHashFunction:bits()" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:invalidateAll()" : null,
  "com.google.common.util.concurrent.AtomicDouble:floatValue()" : "* Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive\n   * conversion.",
  "com.google.common.collect.Comparators:emptiesLast(java.util.Comparator)" : "* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as greater\n   * than all other values, and orders the rest using {@code valueComparator} on the contained\n   * value.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.primitives.ImmutableDoubleArray$AsList:contains(java.lang.Object)" : null,
  "com.google.common.hash.MacHashFunction:getMac(java.lang.String,java.security.Key)" : null,
  "com.google.common.graph.AbstractBaseGraph:isOrderingCompatible(com.google.common.graph.EndpointPair)" : "* Returns {@code true} iff {@code endpoints}' ordering is compatible with the directionality of\n   * this graph.",
  "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:transformEntries(java.util.Iterator)" : null,
  "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.Collection)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableDoubleArray} will contain.",
  "com.google.common.collect.Tables$TransformedTable:columnMap()" : null,
  "com.google.common.collect.Streams:forEachPair(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiConsumer)" : "* Invokes {@code consumer} once for each pair of <i>corresponding</i> elements in {@code streamA}\n   * and {@code streamB}. If one stream is longer than the other, the extra elements are silently\n   * ignored. Elements passed to the consumer are guaranteed to come from the same position in their\n   * respective source streams. For example:\n   *\n   * {@snippet :\n   * Streams.forEachPair(\n   *   Stream.of(\"foo1\", \"foo2\", \"foo3\"),\n   *   Stream.of(\"bar1\", \"bar2\"),\n   *   (arg1, arg2) -> System.out.println(arg1 + \":\" + arg2)\n   * }\n   *\n   * <p>will print:\n   *\n   * {@snippet :\n   * foo1:bar1\n   * foo2:bar2\n   * }\n   *\n   * <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence\n   * between elements will be made, but the order in which those pairs of elements are passed to the\n   * consumer is <i>not</i> defined.\n   *\n   * <p>Note that many usages of this method can be replaced with simpler calls to {@link #zip}.\n   * This method behaves equivalently to {@linkplain #zip zipping} the stream elements into\n   * temporary pair objects and then using {@link Stream#forEach} on that stream.\n   *\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.HashBiMap$Inverse:remove(java.lang.Object)" : null,
  "com.google.common.io.LittleEndianDataInputStream:readDouble()" : "* Reads a {@code double} as specified by {@link DataInputStream#readDouble()}, except using\n   * little-endian byte order.\n   *\n   * @return the next eight bytes of the input stream, interpreted as a {@code double} in\n   *     little-endian byte order\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry)" : null,
  "com.google.common.base.Suppliers:memoizeWithExpiration(com.google.common.base.Supplier,long,java.util.concurrent.TimeUnit)" : "* Returns a supplier that caches the instance supplied by the delegate and removes the cached\n   * value after the specified time has passed. Subsequent calls to {@code get()} return the cached\n   * value if the expiration time has not passed. After the expiration time, a new value is\n   * retrieved, cached, and returned. See: <a\n   * href=\"http://en.wikipedia.org/wiki/Memoization\">memoization</a>\n   *\n   * <p>The returned supplier is thread-safe. The supplier's serialized form does not contain the\n   * cached value, which will be recalculated when {@code get()} is called on the reserialized\n   * instance. The actual memoization does not happen when the underlying delegate throws an\n   * exception.\n   *\n   * <p>When the underlying delegate throws an exception then this memoizing supplier will keep\n   * delegating calls until it returns valid data.\n   *\n   * @param duration the length of time after a value is created that it should stop being returned\n   *     by subsequent {@code get()} calls\n   * @param unit the unit that {@code duration} is expressed in\n   * @throws IllegalArgumentException if {@code duration} is not positive\n   * @since 2.0",
  "com.google.common.util.concurrent.Futures$FutureCombiner:<init>(boolean,com.google.common.collect.ImmutableList)" : null,
  "com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection)" : null,
  "com.google.common.primitives.Ints$IntArrayAsList:set(int,java.lang.Integer)" : null,
  "com.google.common.collect.Synchronized$SynchronizedQueue:offer(java.lang.Object)" : null,
  "com.google.common.collect.Maps$ValueDifferenceImpl:rightValue()" : null,
  "com.google.common.collect.EnumMultiset:isActuallyE(java.lang.Object)" : null,
  "com.google.common.collect.Queues:newPriorityBlockingQueue(java.lang.Iterable)" : "* Creates a {@code PriorityBlockingQueue} containing the given elements.\n   *\n   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},\n   * this priority queue will be ordered according to the same ordering.\n   *\n   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}\n   *     in 15.0)",
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:forEachRemaining(java.lang.Object)" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:entrySpliterator()" : null,
  "com.google.common.collect.ForwardingIterator:remove()" : null,
  "com.google.common.collect.Synchronized$SynchronizedEntry:getKey()" : null,
  "com.google.common.collect.Tables:equalsImpl(com.google.common.collect.Table,java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeSet$AsRanges:equals(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherEntry(java.lang.Object)" : null,
  "com.google.common.io.Java8Compatibility:position(java.nio.Buffer,int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.UndirectedNetworkConnections:adjacentNodes()" : null,
  "com.google.common.cache.CacheBuilder:weigher(com.google.common.cache.Weigher)" : "* Specifies the weigher to use in determining the weight of entries. Entry weight is taken into\n   * consideration by {@link #maximumWeight(long)} when determining which entries to evict, and use\n   * of this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling\n   * {@link #build}. Weights are measured and recorded when entries are inserted into the cache, and\n   * are thus effectively static during the lifetime of a cache entry.\n   *\n   * <p>When the weight of an entry is zero it will not be considered for size-based eviction\n   * (though it still may be evicted by other means).\n   *\n   * <p><b>Important note:</b> Instead of returning <em>this</em> as a {@code CacheBuilder}\n   * instance, this method returns {@code CacheBuilder<K1, V1>}. From this point on, either the\n   * original reference or the returned reference may be used to complete configuration and build\n   * the cache, but only the \"generic\" one is type-safe. That is, it will properly prevent you from\n   * building caches whose key or value types are incompatible with the types accepted by the\n   * weigher already provided; the {@code CacheBuilder} type cannot do this. For best results,\n   * simply use the standard method-chaining idiom, as illustrated in the documentation at top,\n   * configuring a {@code CacheBuilder} and building your {@link Cache} all in a single statement.\n   *\n   * <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build a\n   * cache whose key or value type is incompatible with the weigher, you will likely experience a\n   * {@link ClassCastException} at some <i>undefined</i> point in the future.\n   *\n   * @param weigher the weigher to use in calculating the weight of cache entries\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalStateException if a weigher was already set or {@link #maximumSize(long)} was\n   *     previously called\n   * @since 11.0",
  "com.google.common.collect.Maps$FilteredEntryMap$KeySet:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)" : "* Unsafely creates of a fresh {@link WeakValueReference}, referencing the given {@code value},\n     * for the given {@code entry}",
  "com.google.common.reflect.Types$ParameterizedTypeImpl:getOwnerType()" : null,
  "com.google.common.collect.Collections2$FilteredCollection:forEach(java.util.function.Consumer)" : null,
  "com.google.common.util.concurrent.ForwardingBlockingQueue:take()" : null,
  "com.google.common.base.Strings:validSurrogatePairAt(java.lang.CharSequence,int)" : "* True when a valid surrogate pair starts at the given {@code index} in the given {@code string}.\n   * Out-of-range indexes return false.",
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:toByteArray()" : null,
  "com.google.common.collect.StandardTable$RowMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashSet:moveLastEntry(int,int)" : "* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",
  "com.google.common.collect.HashBiMap$KeySet:remove(java.lang.Object)" : null,
  "com.google.common.collect.AbstractRangeSet:intersects(com.google.common.collect.Range)" : null,
  "com.google.common.base.SmallCharMatcher:smear(int)" : null,
  "com.google.common.collect.StandardTable$Column$EntrySet:size()" : null,
  "com.google.common.collect.AbstractListMultimap:equals(java.lang.Object)" : "* Compares the specified object to this multimap for equality.\n   *\n   * <p>Two {@code ListMultimap} instances are equal if, for each key, they contain the same values\n   * in the same order. If the value orderings disagree, the multimaps will not be considered equal.",
  "com.google.common.primitives.Doubles:indexOf(double[],double,int,int)" : null,
  "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys or values are added\n   * @since 31.0",
  "com.google.common.net.InetAddresses:convertDottedQuadToHex(java.lang.String)" : null,
  "com.google.common.collect.HashBiMap:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.ImmutableListMultimap:copyOf(java.lang.Iterable)" : "* Returns an immutable multimap containing the specified entries. The returned multimap iterates\n   * over keys in the order they were first encountered in the input, and the values for each key\n   * are iterated in the order they were encountered.\n   *\n   * @throws NullPointerException if any key, value, or entry is null\n   * @since 19.0",
  "com.google.common.collect.LinkedHashMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.TreeRangeSet:replaceRangeWithSameLowerBound(com.google.common.collect.Range)" : null,
  "com.google.common.util.concurrent.AbstractService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)" : "* @since 13.0",
  "com.google.common.collect.ImmutableMultimap:entrySpliterator()" : null,
  "com.google.common.graph.AbstractNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:heapForIndex(int)" : null,
  "com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)" : null,
  "com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)" : null,
  "com.google.common.graph.ImmutableGraph:incidentEdges(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableNetwork:inEdges(java.lang.Object)" : null,
  "com.google.common.collect.EnumHashBiMap:<init>(java.lang.Class)" : null,
  "com.google.common.collect.Sets$CartesianSet:create(java.util.List)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:clear()" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:edgesConnecting(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap$Itr:remove()" : null,
  "com.google.common.collect.AbstractBiMap$EntrySet:removeAll(java.util.Collection)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:removeFromChainForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)" : "Unsafely removes the given entry from the given chain in this segment's hash table.",
  "com.google.common.collect.SingletonImmutableList:spliterator()" : null,
  "com.google.common.collect.Maps$Values:<init>(java.util.Map)" : null,
  "com.google.common.collect.Cut$BelowValue:toString()" : null,
  "com.google.common.collect.ForwardingSet:standardEquals(java.lang.Object)" : "* A sensible definition of {@link #equals} in terms of {@link #size} and {@link #containsAll}. If\n   * you override either of those methods, you may wish to override {@link #equals} to forward to\n   * this implementation.\n   *\n   * @since 7.0",
  "com.google.common.base.Equivalence:test(java.lang.Object,java.lang.Object)" : "* @deprecated Provided only to satisfy the {@link BiPredicate} interface; use {@link #equivalent}\n   *     instead.\n   * @since 21.0",
  "com.google.common.collect.Maps$AbstractFilteredMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.FluentIterable:limit(int)" : "* Creates a fluent iterable with the first {@code size} elements of this fluent iterable. If this\n   * fluent iterable does not contain that many elements, the returned fluent iterable will have the\n   * same behavior as this fluent iterable. The returned fluent iterable's iterator supports {@code\n   * remove()} if this fluent iterable's iterator does.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} (same).\n   *\n   * @param maxSize the maximum number of elements in the returned fluent iterable\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.eventbus.SubscriberRegistry:findAllSubscribers(java.lang.Object)" : "* Returns all subscribers for the given listener grouped by the type of event they subscribe to.",
  "com.google.common.collect.Cut$BelowAll:canonical(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.io.Files:map(java.io.File)" : "* Fully maps a file read-only in to memory as per {@link\n   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}.\n   *\n   * <p>Files are mapped from offset 0 to its length.\n   *\n   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.\n   *\n   * @param file the file to map\n   * @return a read-only buffer reflecting {@code file}\n   * @throws FileNotFoundException if the {@code file} does not exist\n   * @throws IOException if an I/O error occurs\n   * @see FileChannel#map(MapMode, long, long)\n   * @since 2.0",
  "com.google.common.graph.MapRetrievalCache:clearCache()" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:get(java.lang.Comparable)" : null,
  "com.google.common.base.Converter$ConverterComposition:toString()" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSet:clear()" : null,
  "com.google.common.collect.ImmutableMultimap:values()" : "* Returns an immutable collection of the values in this multimap. Its iterator traverses the\n   * values for the first key, the values for the second key, and so on.",
  "com.google.common.collect.ForwardingSortedSetMultimap:get(java.lang.Object)" : null,
  "com.google.common.base.Converter$FunctionBasedConverter:toString()" : null,
  "com.google.common.base.CharMatcher$Negated:toString()" : null,
  "com.google.common.collect.TreeMultiset:create()" : "* Creates a new, empty multiset, sorted according to the elements' natural order. All elements\n   * inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all\n   * such elements must be <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a\n   * {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the\n   * user attempts to add an element to the multiset that violates this constraint (for example, the\n   * user attempts to add a string element to a set whose elements are integers), the {@code\n   * add(Object)} call will throw a {@code ClassCastException}.\n   *\n   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific\n   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.RegularImmutableAsList:<init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])" : null,
  "com.google.common.collect.HashBiMap:delete(com.google.common.collect.HashBiMap$BiEntry)" : "* Finds and removes {@code entry} from the bucket linked lists in both the key-to-value direction\n   * and the value-to-key direction.",
  "com.google.common.collect.ImmutableRangeSet:writeReplace()" : null,
  "com.google.common.math.PairedStatsAccumulator:snapshot()" : "Returns an immutable snapshot of the current statistics.",
  "com.google.common.collect.AbstractTable$CellSet:clear()" : null,
  "com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection,int)" : null,
  "com.google.common.primitives.Shorts:rotate(short[],int,int,int)" : "* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code\n   * toIndex} exclusive. This is equivalent to {@code\n   * Collections.rotate(Shorts.asList(array).subList(fromIndex, toIndex), distance)}, but is\n   * considerably faster and avoids allocations and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 32.0.0",
  "com.google.common.collect.AbstractMapBasedMultimap:size()" : null,
  "com.google.common.reflect.Invokable$ConstructorInvokable:getParameterAnnotations()" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardDescendingKeySet()" : "* A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of {@link\n   * #descendingMap}. (The {@link StandardDescendingMap} implementation implements {@code\n   * navigableKeySet} on its own, so as not to cause an infinite loop.) If you override {@code\n   * descendingMap}, you may wish to override {@code descendingKeySet} to forward to this\n   * implementation.",
  "com.google.common.io.CountingOutputStream:<init>(java.io.OutputStream)" : "* Wraps another output stream, counting the number of bytes written.\n   *\n   * @param out the output stream to be wrapped",
  "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:setValue(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.collect.ImmutableMultimap$Keys:size()" : null,
  "com.google.common.collect.Multisets$ElementSet:remove(java.lang.Object)" : null,
  "com.google.common.eventbus.SubscriberExceptionContext:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.Object,java.lang.reflect.Method)" : "* @param eventBus The {@link EventBus} that handled the event and the subscriber. Useful for\n   *     broadcasting a new event based on the error.\n   * @param event The event object that caused the subscriber to throw.\n   * @param subscriber The source subscriber context.\n   * @param subscriberMethod the subscribed method.",
  "com.google.common.reflect.TypeResolver:resolveWildcardType(java.lang.reflect.WildcardType)" : null,
  "com.google.common.io.MoreFiles$PathByteSource:sizeIfKnown()" : null,
  "com.google.common.io.CharSource$CharSequenceCharSource:lengthIfKnown()" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.String,java.lang.Object)" : null,
  "com.google.common.graph.ImmutableValueGraph:incidentEdgeOrder()" : null,
  "com.google.common.graph.ElementOrder:equals(java.lang.Object)" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:remove(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMapEntrySet:size()" : null,
  "com.google.common.base.CharMatcher$None:<init>()" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,float)" : "* Adds a name/value pair to the formatted output in {@code name=value} format.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",
  "com.google.common.util.concurrent.AbstractScheduledService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)" : "* @since 13.0",
  "com.google.common.collect.CompactLinkedHashSet:createWithExpectedSize(int)" : "* Creates a {@code CompactLinkedHashSet} instance, with a high enough \"initial capacity\" that it\n   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.\n   *\n   * @param expectedSize the number of elements you expect to add to the returned set\n   * @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code\n   *     expectedSize} elements without resizing\n   * @throws IllegalArgumentException if {@code expectedSize} is negative",
  "com.google.common.base.Functions$PredicateFunction:apply(java.lang.Object)" : null,
  "com.google.common.base.Splitter:onPattern(java.lang.String)" : "* Returns a splitter that considers any subsequence matching a given pattern (regular expression)\n   * to be a separator. For example, {@code Splitter.onPattern(\"\\r?\\n\").split(entireFile)} splits a\n   * string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent\n   * to {@code Splitter.on(Pattern.compile(pattern))}.\n   *\n   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This\n   *     pattern may not match the empty string.\n   * @return a splitter, with default settings, that uses this pattern\n   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string or is a\n   *     malformed expression",
  "com.google.common.collect.Ordering:max(java.util.Iterator)" : "* Returns the greatest of the specified values according to this ordering. If there are multiple\n   * greatest values, the first of those is returned. The iterator will be left exhausted: its\n   * {@code hasNext()} method will return {@code false}.\n   *\n   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).max(thisComparator).get()} instead\n   * (but note that it does not guarantee which tied maximum element is returned).\n   *\n   * @param iterator the iterator whose maximum element is to be determined\n   * @throws NoSuchElementException if {@code iterator} is empty\n   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n   *     ordering.\n   * @since 11.0",
  "com.google.common.collect.HashMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.Multisets$ViewMultiset:clear()" : null,
  "com.google.common.collect.Cut$BelowAll:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.cache.ForwardingCache:invalidateAll(java.lang.Iterable)" : "* @since 11.0",
  "com.google.common.collect.LinkedHashMultimap:create()" : "Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities.",
  "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)" : null,
  "com.google.common.hash.Murmur3_128HashFunction:bits()" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardLastKey()" : "* A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code\n   * lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.",
  "com.google.common.primitives.Longs:toByteArray(long)" : "* Returns a big-endian representation of {@code value} in an 8-element byte array; equivalent to\n   * {@code ByteBuffer.allocate(8).putLong(value).array()}. For example, the input value {@code\n   * 0x1213141516171819L} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n   * 0x18, 0x19}}.\n   *\n   * <p>If you need to convert and concatenate several values (possibly even of different types),\n   * use a shared {@link java.nio.ByteBuffer} instance, or use {@link\n   * com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.",
  "com.google.common.collect.CollectCollectors$EnumSetAccumulator:combine(com.google.common.collect.CollectCollectors$EnumSetAccumulator)" : null,
  "com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function)" : "* Returns a map with the given {@code values}, indexed by keys derived from those values. In\n   * other words, each input value produces an entry in the map whose key is the result of applying\n   * {@code keyFunction} to that value. These entries appear in the same order as the input values.\n   * Example usage:\n   *\n   * {@snippet :\n   * Color red = new Color(\"red\", 255, 0, 0);\n   * ...\n   * Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator();\n   *\n   * Map<String, Color> colorForName =\n   *     uniqueIndex(allColors, toStringFunction());\n   * assertThat(colorForName).containsEntry(\"red\", red);\n   * }\n   *\n   * <p>If your index may associate multiple values with each key, use {@link\n   * Multimaps#index(Iterator, Function) Multimaps.index}.\n   *\n   * @param values the values to use when constructing the {@code Map}\n   * @param keyFunction the function used to produce the key for each value\n   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value\n   *     in the input collection to that value\n   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one\n   *     value in the input collection\n   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code\n   *     keyFunction} produces {@code null} for any value\n   * @since 10.0",
  "com.google.common.collect.Maps$5:headSet(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMultiset:copyOfSorted(com.google.common.collect.SortedMultiset)" : "* Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by\n   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always\n   * uses the natural ordering of the elements.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * <p>This method is safe to use even when {@code sortedMultiset} is a synchronized or concurrent\n   * collection that is currently being modified by another thread.\n   *\n   * @throws NullPointerException if {@code sortedMultiset} or any of its elements is null",
  "com.google.common.base.CharMatcher$InRange:<init>(char,char)" : null,
  "com.google.common.collect.TreeMultiset:elementIterator()" : null,
  "com.google.common.collect.ArrayTable:cellIterator()" : null,
  "com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int)" : "* Adds or removes occurrences of {@code element} such that the {@link #count} of the element\n   * becomes {@code count}.\n   *\n   * @return the count of {@code element} in the multiset before this call\n   * @throws IllegalArgumentException if {@code count} is negative",
  "com.google.common.collect.TreeBasedTable$TreeRow:updateWholeRowField()" : null,
  "com.google.common.io.CharSink:writeLines(java.lang.Iterable,java.lang.String)" : "* Writes the given lines of text to this sink with each line (including the last) terminated with\n   * the given line separator.\n   *\n   * @throws IOException if an I/O error occurs while writing to this sink",
  "com.google.common.primitives.ImmutableLongArray:of(long,long)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.io.ByteSink:openBufferedStream()" : "* Opens a new buffered {@link OutputStream} for writing to this sink. The returned stream is not\n   * required to be a {@link BufferedOutputStream} in order to allow implementations to simply\n   * delegate to {@link #openStream()} when the stream returned by that method does not benefit from\n   * additional buffering (for example, a {@code ByteArrayOutputStream}). This method returns a new,\n   * independent stream each time it is called.\n   *\n   * <p>The caller is responsible for ensuring that the returned stream is closed.\n   *\n   * @throws IOException if an I/O error occurs while opening the stream\n   * @since 15.0 (in 14.0 with return type {@link BufferedOutputStream})",
  "com.google.common.collect.ImmutableSortedSet$Builder:build()" : "* Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code\n     * Builder} and its comparator.",
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy()" : null,
  "com.google.common.collect.RegularImmutableSortedSet:tailIndex(java.lang.Object,boolean)" : null,
  "com.google.common.collect.AbstractSortedMultiset:pollFirstEntry()" : null,
  "com.google.common.collect.AbstractNavigableMap:pollLastEntry()" : null,
  "com.google.common.net.MediaType$Tokenizer:consumeCharacter(char)" : null,
  "com.google.common.primitives.Chars$CharArrayAsList:<init>(char[],int,int)" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:toShortArray()" : null,
  "com.google.common.collect.CartesianList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided",
  "com.google.common.net.MediaType:hasWildcard()" : "Returns true if either the type or subtype is the wildcard.",
  "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:forward()" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeFloat(float)" : null,
  "com.google.common.collect.ImmutableSet:writeReplace()" : null,
  "com.google.common.collect.TreeBasedTable$TreeRow:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableEnumMap:isPartialView()" : null,
  "com.google.common.primitives.ImmutableLongArray:of(long,long,long,long)" : "Returns an immutable array containing the given values, in order.",
  "com.google.common.graph.AbstractValueGraph:edgeValueMap(com.google.common.graph.ValueGraph)" : null,
  "com.google.common.io.ByteStreams$LimitedInputStream:skip(long)" : null,
  "com.google.common.cache.LocalCache:values()" : null,
  "com.google.common.base.Predicates$AndPredicate:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable:isCancelled()" : null,
  "com.google.common.cache.LocalCache:recordsTime()" : null,
  "com.google.common.collect.DiscreteDomain$LongDomain:next(java.lang.Long)" : null,
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long)" : null,
  "com.google.common.collect.ImmutableSet$SetBuilderImpl:ensureCapacity(int)" : "* Resizes internal data structures if necessary to store the specified number of distinct\n     * elements.",
  "com.google.common.util.concurrent.MoreExecutors:shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,java.time.Duration)" : "* Shuts down the given executor service gradually, first disabling new submissions and later, if\n   * necessary, cancelling remaining tasks.\n   *\n   * <p>The method takes the following steps:\n   *\n   * <ol>\n   *   <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.\n   *   <li>awaits executor service termination for half of the specified timeout.\n   *   <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling\n   *       pending tasks and interrupting running tasks.\n   *   <li>awaits executor service termination for the other half of the specified timeout.\n   * </ol>\n   *\n   * <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link\n   * ExecutorService#shutdownNow()} and returns.\n   *\n   * <p>For a version of this method that waits <i>indefinitely</i>, use {@link\n   * ExecutorService#close}.\n   *\n   * @param service the {@code ExecutorService} to shut down\n   * @param timeout the maximum time to wait for the {@code ExecutorService} to terminate\n   * @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false}\n   *     if the call timed out or was interrupted\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.base.Suppliers$SupplierOfInstance:hashCode()" : null,
  "com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.stream.LongStream)" : "* Appends all values from {@code stream}, in order, to the end of the values the built {@link\n     * ImmutableLongArray} will contain.\n     *\n     * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.EnumMultiset:create(java.lang.Iterable,java.lang.Class)" : "* Returns a new {@code EnumMultiset} instance containing the given elements. Unlike {@link\n   * EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty iterable.\n   *\n   * @since 14.0",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:instance()" : null,
  "com.google.common.cache.LocalCache:usesAccessEntries()" : null,
  "com.google.common.collect.HashMultimap:create(com.google.common.collect.Multimap)" : "* Constructs a {@code HashMultimap} with the same mappings as the specified multimap. If a\n   * key-value mapping appears multiple times in the input multimap, it only appears once in the\n   * constructed multimap.\n   *\n   * <p>You may also consider the equivalent {@code\n   * MultimapBuilder.hashKeys().hashSetValues().build(multimap)}, which provides more control over\n   * the underlying data structure.\n   *\n   * @param multimap the multimap whose contents are copied to this multimap",
  "com.google.common.collect.StandardTable:containsColumn(java.lang.Object)" : null,
  "com.google.common.graph.ForwardingGraph:edgeCount()" : "* Defer to {@link AbstractGraph#edges()} (based on {@link #successors(Object)}) for full edges()\n   * implementation.",
  "com.google.common.collect.ForwardingMap:equals(java.lang.Object)" : null,
  "com.google.common.graph.ForwardingGraph:isDirected()" : null,
  "com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:create(java.util.concurrent.ExecutorService)" : "* Creates a TimeLimiter instance using the given executor service to execute method calls.\n   *\n   * <p><b>Warning:</b> using a bounded executor may be counterproductive! If the thread pool fills\n   * up, any time callers spend waiting for a thread may count toward their time limit, and in this\n   * case the call may even time out before the target method is ever invoked.\n   *\n   * @param executor the ExecutorService that will execute the method calls on the target objects;\n   *     for example, a {@link Executors#newCachedThreadPool()}.\n   * @since 22.0",
  "com.google.common.graph.DirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:isPartialView()" : null,
  "com.google.common.collect.Synchronized$SynchronizedListMultimap:<init>(com.google.common.collect.ListMultimap,java.lang.Object)" : null,
  "com.google.common.graph.StandardValueGraph:nodeOrder()" : null,
  "com.google.common.base.Converter:apply(java.lang.Object)" : "* @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.",
  "com.google.common.hash.Java8Compatibility:position(java.nio.Buffer,int)" : null,
  "com.google.common.util.concurrent.AbstractFuture:maybePropagateCancellationTo(java.util.concurrent.Future)" : "* If this future has been cancelled (and possibly interrupted), cancels (and possibly interrupts)\n   * the given future (if available).",
  "com.google.common.reflect.Parameter:getAnnotationsByType(java.lang.Class)" : "* @since 18.0",
  "com.google.common.base.Strings:commonSuffix(java.lang.CharSequence,java.lang.CharSequence)" : "* Returns the longest string {@code suffix} such that {@code a.toString().endsWith(suffix) &&\n   * b.toString().endsWith(suffix)}, taking care not to split surrogate pairs. If {@code a} and\n   * {@code b} have no common suffix, returns the empty string.\n   *\n   * @since 11.0",
  "com.google.common.cache.ForwardingLoadingCache:getUnchecked(java.lang.Object)" : null,
  "com.google.common.primitives.Ints:toByteArray(int)" : "* Returns a big-endian representation of {@code value} in a 4-element byte array; equivalent to\n   * {@code ByteBuffer.allocate(4).putInt(value).array()}. For example, the input value {@code\n   * 0x12131415} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15}}.\n   *\n   * <p>If you need to convert and concatenate several values (possibly even of different types),\n   * use a shared {@link java.nio.ByteBuffer} instance, or use {@link\n   * com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.",
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:remove(java.lang.Object)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,long,long)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.graph.StandardValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeSet$Builder:build()" : "* Returns an {@code ImmutableRangeSet} containing the ranges added to this builder.\n     *\n     * @throws IllegalArgumentException if any input ranges have nonempty overlap",
  "com.google.common.collect.Range:lowerBoundType()" : "* Returns the type of this range's lower bound: {@link BoundType#CLOSED} if the range includes\n   * its lower endpoint, {@link BoundType#OPEN} if it does not.\n   *\n   * @throws IllegalStateException if this range is unbounded below (that is, {@link\n   *     #hasLowerBound()} returns {@code false})",
  "com.google.common.cache.LocalCache$AccessQueue:isEmpty()" : null,
  "com.google.common.hash.Funnels$SequentialFunnel:hashCode()" : null,
  "com.google.common.util.concurrent.Partially:<init>()" : null,
  "com.google.common.cache.LocalCache$LocalLoadingCache:writeReplace()" : null,
  "com.google.common.primitives.UnsignedLongs:sort(long[],int,int)" : "* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its\n   * elements as unsigned 64-bit integers.\n   *\n   * @since 23.1",
  "com.google.common.collect.StandardTable$ColumnKeySet:contains(java.lang.Object)" : null,
  "com.google.common.collect.Maps$AbstractFilteredMap:apply(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.eventbus.Subscriber$SynchronizedSubscriber:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)" : null,
  "com.google.common.collect.TreeMultiset:iterator()" : null,
  "com.google.common.collect.ForwardingMap:putAll(java.util.Map)" : null,
  "com.google.common.cache.LocalCache$WeakAccessWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.reflect.TypeToken$TypeSet:rawTypes()" : "Returns the raw types of the types in this set, in the same order.",
  "com.google.common.collect.TransformedIterator:remove()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:valueStrength()" : null,
  "com.google.common.graph.AbstractNetwork:edgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.TreeMultiset$Reference:clear()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Maps$FilteredMapValues:<init>(java.util.Map,java.util.Map,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.AbstractNavigableMap:lowerEntry(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher:anyOf(java.lang.CharSequence)" : "* Returns a {@code char} matcher that matches any BMP character present in the given character\n   * sequence. Returns a bogus matcher if the sequence contains supplementary characters.",
  "com.google.common.collect.MapMakerInternalMap$Segment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)" : "* Unsafely sets the weak value reference inside the given {@code entry} to be the given {@code\n     * valueReference}",
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.primitives.UnsignedLongs$ParseOverflowDetection:<init>()" : null,
  "com.google.common.collect.ForwardingMapEntry:getKey()" : null,
  "com.google.common.hash.ChecksumHashFunction:newHasher()" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getNextInAccessQueue()" : null,
  "com.google.common.reflect.TypeToken:every(java.lang.reflect.Type[])" : null,
  "com.google.common.collect.Maps:unmodifiableEntry(java.util.Map$Entry)" : "* Returns an unmodifiable view of the specified map entry. The {@link Entry#setValue} operation\n   * throws an {@link UnsupportedOperationException}. This also has the side effect of redefining\n   * {@code equals} to comply with the Entry contract, to avoid a possible nefarious implementation\n   * of equals.\n   *\n   * @param entry the entry for which to return an unmodifiable view\n   * @return an unmodifiable view of the entry",
  "com.google.common.base.Converter:correctedDoBackward(java.lang.Object)" : null,
  "com.google.common.collect.AbstractBiMap:updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.net.InternetDomainName:isUnderRegistrySuffix()" : "* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},\n   * while not being a registry suffix itself. For example, returns {@code true} for {@code\n   * www.google.com}, {@code foo.co.uk} and {@code blogspot.com}, but not for {@code com}, {@code\n   * co.uk}, or {@code google.invalid}.\n   *\n   * @since 23.3",
  "com.google.common.collect.AbstractIndexedListIterator:next()" : null,
  "com.google.common.hash.ChecksumHashFunction$ChecksumHasher:update(byte[],int,int)" : null,
  "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:combine(int,int)" : null,
  "com.google.common.collect.AbstractSortedSetMultimap:unmodifiableCollectionSubclass(java.util.Collection)" : null,
  "com.google.common.primitives.Doubles:indexOf(double[],double[])" : "* Returns the start position of the first occurrence of the specified {@code target} within\n   * {@code array}, or {@code -1} if there is no such occurrence.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n   * i, i + target.length)} contains exactly the same elements as {@code target}.\n   *\n   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.\n   *\n   * @param array the array to search for the sequence {@code target}\n   * @param target the array to search for as a sub-sequence of {@code array}",
  "com.google.common.collect.ContiguousSet:closed(long,long)" : "* Returns a nonempty contiguous set containing all {@code long} values from {@code lower}\n   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code\n   * Range.closed(lower, upper)}.)\n   *\n   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}\n   * @since 23.0",
  "com.google.common.collect.TreeMultiset:create(java.util.Comparator)" : "* Creates a new, empty multiset, sorted according to the specified comparator. All elements\n   * inserted into the multiset must be <i>mutually comparable</i> by the specified comparator:\n   * {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements\n   * {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the\n   * multiset that violates this constraint, the {@code add(Object)} call will throw a {@code\n   * ClassCastException}.\n   *\n   * @param comparator the comparator that will be used to sort this multiset. A null value\n   *     indicates that the elements' <i>natural ordering</i> should be used.",
  "com.google.common.collect.ImmutableRangeSet:difference(com.google.common.collect.RangeSet)" : "* Returns a new range set consisting of the difference of this range set and {@code other}.\n   *\n   * <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other)} except it\n   * returns an {@code ImmutableRangeSet}.\n   *\n   * @since 21.0",
  "com.google.common.base.Optional:of(java.lang.Object)" : "* Returns an {@code Optional} instance containing the given non-null reference. To have {@code\n   * null} treated as {@link #absent}, use {@link #fromNullable} instead.\n   *\n   * <p><b>Comparison to {@code java.util.Optional}:</b> no differences.\n   *\n   * @throws NullPointerException if {@code reference} is null",
  "com.google.common.collect.Synchronized$SynchronizedMultiset:entrySet()" : null,
  "com.google.common.collect.Range:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut)" : null,
  "com.google.common.collect.DiscreteDomain$LongDomain:previous(java.lang.Long)" : null,
  "com.google.common.collect.TreeMultiset$1:getCount()" : null,
  "com.google.common.collect.Multimaps$UnmodifiableListMultimap:delegate()" : null,
  "com.google.common.collect.AbstractIterator:tryToComputeNext()" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:removeFirstOccurrence(java.lang.Object)" : null,
  "com.google.common.io.Files:copy(java.io.File,java.io.OutputStream)" : "* Copies all bytes from a file to an output stream.\n   *\n   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n   * java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}.\n   *\n   * @param from the source file\n   * @param to the output stream\n   * @throws IOException if an I/O error occurs",
  "com.google.common.hash.AbstractHasher:putBoolean(boolean)" : null,
  "com.google.common.collect.ImmutableCollection:add(java.lang.Object)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.hash.HashCode$LongHashCode:asInt()" : null,
  "com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.primitives.Bytes$ByteArrayAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.io.CharSink:writeLines(java.util.stream.Stream)" : "* Writes the given lines of text to this sink with each line (including the last) terminated with\n   * the operating system's default line separator. This method is equivalent to {@code\n   * writeLines(lines, System.getProperty(\"line.separator\"))}.\n   *\n   * @throws IOException if an I/O error occurs while writing to this sink\n   * @since 22.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ExplicitOrdering:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.util.concurrent.MoreExecutors:newSequentialExecutor(java.util.concurrent.Executor)" : "* Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks\n   * are running concurrently.\n   *\n   * <p>{@linkplain Executor#execute executed} tasks have a happens-before order as defined in the\n   * Java Language Specification. Tasks execute with the same happens-before order that the function\n   * calls to {@link Executor#execute execute()} that submitted those tasks had.\n   *\n   * <p>The executor uses {@code delegate} in order to {@link Executor#execute execute} each task in\n   * turn, and does not create any threads of its own.\n   *\n   * <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are\n   * polled and executed from a task queue until there are no more tasks. The thread will not be\n   * released until there are no more tasks to run.\n   *\n   * <p>If a task is submitted while a thread is executing tasks from the task queue, the thread\n   * will not be released until that submitted task is also complete.\n   *\n   * <p>If a task is {@linkplain Thread#interrupt interrupted} while a task is running:\n   *\n   * <ol>\n   *   <li>execution will not stop until the task queue is empty.\n   *   <li>tasks will begin execution with the thread marked as not interrupted - any interruption\n   *       applies only to the task that was running at the point of interruption.\n   *   <li>if the thread was interrupted before the SequentialExecutor's worker begins execution,\n   *       the interrupt will be restored to the thread after it completes so that its {@code\n   *       delegate} Executor may process the interrupt.\n   *   <li>subtasks are run with the thread uninterrupted and interrupts received during execution\n   *       of a task are ignored.\n   * </ol>\n   *\n   * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.\n   * If an {@code Error} is thrown, the error will propagate and execution will stop until the next\n   * time a task is submitted.\n   *\n   * <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never\n   * run. An attempt will be made to restart execution on the next call to {@code execute}. If the\n   * {@code delegate} has begun to reject execution, the previously submitted tasks may never run,\n   * despite not throwing a RejectedExecutionException synchronously with the call to {@code\n   * execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link\n   * Executors#newSingleThreadExecutor}).\n   *\n   * @since 23.3 (since 23.1 as {@code sequentialExecutor})",
  "com.google.common.reflect.ClassPath:getAllClasses()" : "* Returns all classes loadable from the current class path.\n   *\n   * @since 16.0",
  "com.google.common.math.PairedStats:fromByteArray(byte[])" : "* Creates a {@link PairedStats} instance from the given byte representation which was obtained by\n   * {@link #toByteArray}.\n   *\n   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between\n   * versions.",
  "com.google.common.collect.TransformedIterator:next()" : null,
  "com.google.common.collect.DescendingMultiset:toArray(java.lang.Object[])" : null,
  "com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.util.concurrent.Callable)" : "* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0)",
  "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitParameterizedType(java.lang.reflect.ParameterizedType)" : null,
  "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:isDone()" : null,
  "com.google.common.collect.Maps$FilteredKeyMap:createEntrySet()" : null,
  "com.google.common.collect.Serialization$FieldSetter:<init>(java.lang.reflect.Field)" : null,
  "com.google.common.base.CharMatcher$Negated:matches(char)" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:contains(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps:newListMultimap(java.util.Map,com.google.common.base.Supplier)" : "* Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a\n   * multimap based on arbitrary {@link Map} and {@link List} classes. Most users should prefer\n   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or\n   * collection types that {@link MultimapBuilder} does not support.\n   *\n   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration\n   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code\n   * toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code\n   * removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory\n   * does. However, the multimap's {@code get} method returns instances of a different class than\n   * does {@code factory.get()}.\n   *\n   * <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code\n   * factory}, and the multimap contents are all serializable.\n   *\n   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if\n   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will\n   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link\n   * #synchronizedListMultimap}.\n   *\n   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link\n   * LinkedListMultimap#create()} won't suffice.\n   *\n   * <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by\n   * {@code factory}. Those objects should not be manually updated, they should be empty when\n   * provided, and they should not use soft, weak, or phantom references.\n   *\n   * @param map place to store the mapping from each key to its corresponding values\n   * @param factory supplier of new, empty lists that will each hold all values for a given key\n   * @throws IllegalArgumentException if {@code map} is not empty",
  "com.google.common.hash.Funnels$StringCharsetFunnel:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableListMultimap$Builder:<init>()" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableListMultimap#builder}.",
  "com.google.common.io.Files:readBytes(java.io.File,com.google.common.io.ByteProcessor)" : "* Process the bytes of a file.\n   *\n   * <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.)\n   *\n   * @param file the file to read\n   * @param processor the object to which the bytes of the file are passed.\n   * @return the result of the byte processor\n   * @throws IOException if an I/O error occurs\n   * @deprecated Prefer {@code asByteSource(file).read(processor)}.",
  "com.google.common.collect.ArrayTable$RowMap:setValue(int,java.util.Map)" : null,
  "com.google.common.graph.NetworkBuilder:expectedNodeCount(int)" : "* Specifies the expected number of nodes in the network.\n   *\n   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",
  "com.google.common.collect.Multisets$ImmutableEntry:<init>(java.lang.Object,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:lastEntry()" : null,
  "com.google.common.collect.FilteredEntrySetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.reflect.TypeResolver:populateTypeMappings(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)" : null,
  "com.google.common.collect.Collections2:safeRemove(java.util.Collection,java.lang.Object)" : "* Delegates to {@link Collection#remove}. Returns {@code false} if the {@code remove} method\n   * throws a {@code ClassCastException} or {@code NullPointerException}.",
  "com.google.common.collect.Synchronized$SynchronizedMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.ForwardingMap:hashCode()" : null,
  "com.google.common.collect.ForwardingBlockingDeque:put(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMap:firstEntry()" : null,
  "com.google.common.util.concurrent.Futures:allAsList(java.lang.Iterable)" : "* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its\n   * input futures, if all succeed.\n   *\n   * <p>The list of results is in the same order as the input list.\n   *\n   * <p>This differs from {@link #successfulAsList(Iterable)} in that it will return a failed future\n   * if any of the items fails.\n   *\n   * <p>Canceling this future will attempt to cancel all the component futures, and if any of the\n   * provided futures fails or is canceled, this one is, too.\n   *\n   * @param futures futures to combine\n   * @return a future that provides a list of the results of the component futures\n   * @since 10.0",
  "com.google.common.collect.TreeBasedTable$TreeRow:rangeContains(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$LocalLoadingCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.reflect.Invokable:isFinal()" : "* Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}.\n   *\n   * <p>Note that a method may still be effectively \"final\", or non-overridable when it has no\n   * {@code final} keyword. For example, it could be private, or it could be declared by a final\n   * class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.",
  "com.google.common.base.CharMatcher$None:removeFrom(java.lang.CharSequence)" : null,
  "com.google.common.io.AppendableWriter:append(char)" : null,
  "com.google.common.collect.Multisets$AbstractEntry:equals(java.lang.Object)" : "* Indicates whether an object equals this entry, following the behavior specified in {@link\n     * Multiset.Entry#equals}.",
  "com.google.common.cache.ForwardingCache:asMap()" : null,
  "com.google.common.base.Throwables:propagate(java.lang.Throwable)" : "* Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link\n   * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.\n   *\n   * <p>This method always throws an exception. The {@code RuntimeException} return type allows\n   * client code to signal to the compiler that statements after the call are unreachable. Example\n   * usage:\n   *\n   * <pre>\n   * T doSomething() {\n   *   try {\n   *     return someMethodThatCouldThrowAnything();\n   *   } catch (IKnowWhatToDoWithThisException e) {\n   *     return handle(e);\n   *   } catch (Throwable t) {\n   *     throw Throwables.propagate(t);\n   *   }\n   * }\n   * </pre>\n   *\n   * @param throwable the Throwable to propagate\n   * @return nothing will ever be returned; this return type is only for your convenience, as\n   *     illustrated in the example above\n   * @deprecated To preserve behavior, use {@code throw e} or {@code throw new RuntimeException(e)}\n   *     directly, or use a combination of {@link #throwIfUnchecked} and {@code throw new\n   *     RuntimeException(e)}. But consider whether users would be better off if your API threw a\n   *     different type of exception. For background on the deprecation, read <a\n   *     href=\"https://github.com/google/guava/wiki/Why-we-deprecated-Throwables.propagate\">Why we\n   *     deprecated {@code Throwables.propagate}</a>.",
  "com.google.common.collect.Sets$PowerSet:<init>(java.util.Set)" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:values()" : null,
  "com.google.common.io.ByteSource:read(com.google.common.io.ByteProcessor)" : "* Reads the contents of this byte source using the given {@code processor} to process bytes as\n   * they are read. Stops when all bytes have been read or the consumer returns {@code false}.\n   * Returns the result produced by the processor.\n   *\n   * @throws IOException if an I/O error occurs while reading from this source or if {@code\n   *     processor} throws an {@code IOException}\n   * @since 16.0",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object)" : null,
  "com.google.common.primitives.Longs:rotate(long[],int,int,int)" : "* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code\n   * toIndex} exclusive. This is equivalent to {@code\n   * Collections.rotate(Longs.asList(array).subList(fromIndex, toIndex), distance)}, but is\n   * considerably faster and avoids allocations and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 32.0.0",
  "com.google.common.collect.ArrayTable$ColumnMap:getKeyRole()" : null,
  "com.google.common.primitives.UnsignedLong:toString(int)" : "* Returns a string representation of the {@code UnsignedLong} value, in base {@code radix}. If\n   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code\n   * 10} is used.",
  "com.google.common.graph.AbstractDirectedNetworkConnections:inEdges()" : null,
  "com.google.common.collect.HashBiMap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the number of entries, first key, first value, second key, second value, and so on.",
  "com.google.common.reflect.TypeToken$ClassSet:interfaces()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:expectedSize(int)" : "* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances\n   * sized appropriately to hold {@code expectedSize} elements.",
  "com.google.common.collect.LinkedHashMultiset:create()" : "Creates a new, empty {@code LinkedHashMultiset} using the default initial capacity.",
  "com.google.common.net.HostSpecifier:isValid(java.lang.String)" : "* Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in\n   * the documentation for {@link #fromValid(String)}.",
  "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning(long,java.util.concurrent.TimeUnit)" : "* @since 15.0",
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:comparator()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long,char)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.base.CharMatcher$None:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)" : null,
  "com.google.common.collect.Synchronized$SynchronizedSet:delegate()" : null,
  "com.google.common.collect.StandardTable$ColumnKeyIterator:computeNext()" : null,
  "com.google.common.util.concurrent.ExecutionError:<init>(java.lang.String,java.lang.Error)" : "* Creates a new instance with the given detail message and cause. Prefer to provide a\n   * non-nullable {@code cause}, as many users expect to find one.",
  "com.google.common.net.HostSpecifier:from(java.lang.String)" : "* Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if\n   * parsing fails. Always use this method in preference to {@link #fromValid(String)} for a\n   * specifier that is not already known to be valid.\n   *\n   * @throws ParseException if the specifier is not valid.",
  "com.google.common.graph.ForwardingGraph:outDegree(java.lang.Object)" : null,
  "com.google.common.graph.ForwardingNetwork:nodeOrder()" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:values()" : null,
  "com.google.common.io.Resources:getResource(java.lang.Class,java.lang.String)" : "* Given a {@code resourceName} that is relative to {@code contextClass}, returns a {@code URL}\n   * pointing to the named resource.\n   *\n   * @throws IllegalArgumentException if the resource is not found",
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues()" : "Uses a naturally-ordered {@link TreeSet} to store value collections.",
  "com.google.common.collect.TableCollectors$ImmutableTableCollectorState:put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)" : null,
  "com.google.common.collect.TreeRangeSet$RangesByUpperBound:containsKey(java.lang.Object)" : null,
  "com.google.common.base.Platform:loadPatternCompiler()" : null,
  "com.google.common.util.concurrent.SequentialExecutor:<init>(java.util.concurrent.Executor)" : "Use {@link MoreExecutors#newSequentialExecutor}",
  "com.google.common.primitives.Longs$LongArrayAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:putAll(java.util.Map)" : null,
  "com.google.common.collect.Sets:difference(java.util.Set,java.util.Set)" : "* Returns an unmodifiable <b>view</b> of the difference of two sets. The returned set contains\n   * all elements that are contained by {@code set1} and not contained by {@code set2}. {@code set2}\n   * may also contain elements not present in {@code set1}; these are simply ignored. The iteration\n   * order of the returned set matches that of {@code set1}.\n   *\n   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different\n   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a\n   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",
  "com.google.common.collect.ImmutableSet$Builder:copyIfNecessary()" : null,
  "com.google.common.collect.Platform:newHashSetWithExpectedSize(int)" : "Returns the platform preferred implementation of a set based on a hash table.",
  "com.google.common.net.InetAddresses:isIsatapAddress(java.net.Inet6Address)" : "* Evaluates whether the argument is an ISATAP address.\n   *\n   * <p>From RFC 5214: \"ISATAP interface identifiers are constructed in Modified EUI-64 format [...]\n   * by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit\n   * IPv4 address in network byte order [...]\"\n   *\n   * <p>For more on ISATAP addresses see section 6.1 of <a target=\"_parent\"\n   * href=\"http://tools.ietf.org/html/rfc5214#section-6.1\">RFC 5214</a>.\n   *\n   * @param ip {@link Inet6Address} to be examined for ISATAP address format\n   * @return {@code true} if the argument is an ISATAP address",
  "com.google.common.collect.CompactHashSet:size()" : null,
  "com.google.common.primitives.Shorts:hashCode(short)" : "* Returns a hash code for {@code value}; obsolete alternative to {@link Short#hashCode(short)}.\n   *\n   * @param value a primitive {@code short} value\n   * @return a hash code for the value",
  "com.google.common.collect.ForwardingMap:delegate()" : null,
  "com.google.common.cache.LocalCache$AccessQueue:clear()" : null,
  "com.google.common.collect.Sets:newEnumSet(java.lang.Iterable,java.lang.Class)" : "* Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their\n   * natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also\n   * accepts non-{@code Collection} iterables and empty iterables.",
  "com.google.common.graph.ForwardingGraph:nodeOrder()" : null,
  "com.google.common.util.concurrent.ForwardingLock:tryLock()" : null,
  "com.google.common.math.StatsAccumulator:addAll(java.lang.Iterable)" : "* Adds the given values to the dataset.\n   *\n   * @param values a series of values, which will be converted to {@code double} values (this may\n   *     cause loss of precision)",
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double)" : null,
  "com.google.common.collect.RegularImmutableBiMap:inverse()" : null,
  "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:execute(java.lang.Runnable)" : null,
  "com.google.common.util.concurrent.AtomicLongMap:incrementAndGet(java.lang.Object)" : "* Increments by one the value currently associated with {@code key}, and returns the new value.",
  "com.google.common.graph.AbstractNetwork$1:edges()" : "* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and\n   * {@link #successors(Object)}.",
  "com.google.common.collect.LinkedHashMultimap$ValueSet:clear()" : null,
  "com.google.common.collect.Maps:safeRemove(java.util.Map,java.lang.Object)" : "* Delegates to {@link Map#remove}. Returns {@code null} on {@code ClassCastException} and {@code\n   * NullPointerException}.",
  "com.google.common.collect.Ordering:isStrictlyOrdered(java.lang.Iterable)" : "* Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i>\n   * greater than the element that preceded it, according to this ordering. Note that this is always\n   * true when the iterable has fewer than two elements.\n   *\n   * <p><b>Java 8+ users:</b> Use the equivalent {@link Comparators#isInStrictOrder(Iterable,\n   * Comparator)} instead, since the rest of {@code Ordering} is mostly obsolete (as explained in\n   * the class documentation).",
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object,java.lang.Object[])" : "* Returns an unmodifiable list containing the specified first and second element, and backed by\n   * the specified array of additional elements. Changes to the {@code rest} array will be reflected\n   * in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.\n   *\n   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,\n   * Foo secondFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum\n   * argument count.\n   *\n   * <p>The returned list is serializable and implements {@link RandomAccess}.\n   *\n   * @param first the first element\n   * @param second the second element\n   * @param rest an array of additional elements, possibly empty\n   * @return an unmodifiable list containing the specified elements",
  "com.google.common.hash.Murmur3_32HashFunction:hashCode()" : null,
  "com.google.common.math.PairedStatsAccumulator:ensurePositive(double)" : null,
  "com.google.common.util.concurrent.InterruptibleTask:run()" : null,
  "com.google.common.cache.LocalCache:connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.MultimapBuilder:treeKeys(java.util.Comparator)" : "* Uses a {@link TreeMap} sorted by the specified comparator to map keys to value collections.\n   *\n   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link\n   * Multimap#asMap()} will iterate through the keys in sorted order.\n   *\n   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be\n   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be\n   * cast to a {@link java.util.SortedMap}.\n   *\n   * <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator}\n   * is not serializable.",
  "com.google.common.collect.AbstractSetMultimap:equals(java.lang.Object)" : "* Compares the specified object to this multimap for equality.\n   *\n   * <p>Two {@code SetMultimap} instances are equal if, for each key, they contain the same values.\n   * Equality does not depend on the ordering of keys or values.",
  "com.google.common.collect.Multimaps$MapMultimap:size()" : null,
  "com.google.common.collect.SortedMultisets$NavigableElementSet:lower(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long,long)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.base.CharMatcher$None:matchesAllOf(java.lang.CharSequence)" : null,
  "com.google.common.base.Platform:formatCompact4Digits(double)" : null,
  "com.google.common.collect.Multisets$FilteredMultiset:entryIterator()" : null,
  "com.google.common.io.ByteSource:openBufferedStream()" : "* Opens a new buffered {@link InputStream} for reading from this source. The returned stream is\n   * not required to be a {@link BufferedInputStream} in order to allow implementations to simply\n   * delegate to {@link #openStream()} when the stream returned by that method does not benefit from\n   * additional buffering (for example, a {@code ByteArrayInputStream}). This method returns a new,\n   * independent stream each time it is called.\n   *\n   * <p>The caller is responsible for ensuring that the returned stream is closed.\n   *\n   * @throws IOException if an I/O error occurs while opening the stream\n   * @since 15.0 (in 14.0 with return type {@link BufferedInputStream})",
  "com.google.common.graph.StandardMutableValueGraph:putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$UnmodifiableListMultimap:<init>(com.google.common.collect.ListMultimap)" : null,
  "com.google.common.collect.AbstractSetMultimap:asMap()" : "* {@inheritDoc}\n   *\n   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link Set}\n   * values.",
  "com.google.common.collect.FluentIterable:uniqueIndex(com.google.common.base.Function)" : "* Returns a map with the contents of this {@code FluentIterable} as its {@code values}, indexed\n   * by keys derived from those values. In other words, each input value produces an entry in the\n   * map whose key is the result of applying {@code keyFunction} to that value. These entries appear\n   * in the same order as they appeared in this fluent iterable. Example usage:\n   *\n   * {@snippet :\n   * Color red = new Color(\"red\", 255, 0, 0);\n   * ...\n   * FluentIterable<Color> allColors = FluentIterable.from(ImmutableSet.of(red, green, blue));\n   *\n   * Map<String, Color> colorForName = allColors.uniqueIndex(toStringFunction());\n   * assertThat(colorForName).containsEntry(\"red\", red);\n   * }\n   *\n   * <p>If your index may associate multiple values with each key, use {@link #index(Function)\n   * index}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code\n   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}.\n   *\n   * @param keyFunction the function used to produce the key for each value\n   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value\n   *     in this fluent iterable to that value\n   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one\n   *     value in this fluent iterable\n   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code\n   *     keyFunction} produces {@code null} for any key\n   * @since 14.0",
  "com.google.common.primitives.ImmutableLongArray:hashCode()" : "Returns an unspecified hash code for the contents of this immutable array.",
  "com.google.common.cache.LocalCache:computeIfPresent(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:decodeTo(byte[],java.lang.CharSequence)" : null,
  "com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException:<init>(java.lang.String)" : null,
  "com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.collect.SingletonImmutableTable:column(java.lang.Object)" : null,
  "com.google.common.collect.Maps$AsMapView:createKeySet()" : null,
  "com.google.common.collect.ImmutableRangeMap$SerializedForm:createRangeMap()" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:putAll(com.google.common.collect.Multimap)" : "* Stores another multimap's entries in the built multimap. The generated multimap's key and\n     * value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view,\n     * with new keys and values following any existing keys and values.\n     *\n     * @throws NullPointerException if any key or value in {@code multimap} is null. The builder is\n     *     left in an invalid state.",
  "com.google.common.reflect.AbstractInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : "* {@inheritDoc}\n   *\n   * <ul>\n   *   <li>{@code proxy.hashCode()} delegates to {@link AbstractInvocationHandler#hashCode}\n   *   <li>{@code proxy.toString()} delegates to {@link AbstractInvocationHandler#toString}\n   *   <li>{@code proxy.equals(argument)} returns true if:\n   *       <ul>\n   *         <li>{@code proxy} and {@code argument} are of the same type\n   *         <li>and {@link AbstractInvocationHandler#equals} returns true for the {@link\n   *             InvocationHandler} of {@code argument}\n   *       </ul>\n   *   <li>other method calls are dispatched to {@link #handleInvocation}.\n   * </ul>",
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:setValueReference(com.google.common.cache.LocalCache$ValueReference)" : null,
  "com.google.common.util.concurrent.AbstractService:failureCause()" : "* @since 14.0",
  "com.google.common.collect.Multiset:spliterator()" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorKey(java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueSet:setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)" : null,
  "com.google.common.util.concurrent.Futures:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)" : "* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.\n   *\n   * @throws RejectedExecutionException if the task cannot be scheduled for execution\n   * @since 28.2",
  "com.google.common.reflect.TypeResolver$TypeTable:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.graph.ImmutableGraph:getNodeConnections(com.google.common.graph.Graph)" : null,
  "com.google.common.base.Throwables:<init>()" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:forEachEntry(java.util.function.ObjIntConsumer)" : null,
  "com.google.common.base.Utf8:isWellFormed(byte[])" : "* Returns {@code true} if {@code bytes} is a <i>well-formed</i> UTF-8 byte sequence according to\n   * Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be\n   * decoded. For example, some versions of the JDK decoder will accept \"non-shortest form\" byte\n   * sequences, but encoding never reproduces these. Such byte sequences are <i>not</i> considered\n   * well-formed.\n   *\n   * <p>This method returns {@code true} if and only if {@code Arrays.equals(bytes, new\n   * String(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.",
  "com.google.common.util.concurrent.ForwardingBlockingQueue:delegate()" : null,
  "com.google.common.reflect.Types$JavaVersion$4:newArrayType(java.lang.reflect.Type)" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder} constructor.",
  "com.google.common.collect.RegularContiguousSet:range()" : null,
  "com.google.common.collect.ImmutableTable:containsValue(java.lang.Object)" : null,
  "com.google.common.cache.CacheBuilderSpec$RefreshDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:addLast(java.lang.Object)" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:clear()" : null,
  "com.google.common.collect.ImmutableMultiset$EntrySet:hashCode()" : null,
  "com.google.common.collect.CompactHashSet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type)" : null,
  "com.google.common.collect.HashBiMap$BiEntry:<init>(java.lang.Object,int,java.lang.Object,int)" : null,
  "com.google.common.reflect.Types:disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String)" : null,
  "com.google.common.collect.CompactHashSet:requireTable()" : null,
  "com.google.common.primitives.Bytes:toArray(java.util.Collection)" : "* Returns an array containing each value of {@code collection}, converted to a {@code byte} value\n   * in the manner of {@link Number#byteValue}.\n   *\n   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n   * Calling this method is as thread-safe as calling that method.\n   *\n   * @param collection a collection of {@code Number} instances\n   * @return an array containing the same values as {@code collection}, in the same order, converted\n   *     to primitives\n   * @throws NullPointerException if {@code collection} or any of its elements is null\n   * @since 1.0 (parameter was {@code Collection<Byte>} before 12.0)",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:ceiling(java.lang.Object)" : null,
  "com.google.common.graph.StandardNetwork:allowsParallelEdges()" : null,
  "com.google.common.collect.Sets$FilteredSet:hashCode()" : null,
  "com.google.common.collect.LinkedHashMultimap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,int)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.HashBiMap:insert(com.google.common.collect.HashBiMap$BiEntry,com.google.common.collect.HashBiMap$BiEntry)" : null,
  "com.google.common.collect.SingletonImmutableSet:hashCode()" : null,
  "com.google.common.base.Ascii:toLowerCase(java.lang.String)" : "* Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII\n   * characters} have been converted to lowercase. All other characters are copied without\n   * modification.",
  "com.google.common.graph.BaseGraph:successors(java.lang.Object)" : "* Returns a live view of all nodes in this graph adjacent to {@code node} which can be reached by\n   * traversing {@code node}'s outgoing edges in the direction (if any) of the edge.\n   *\n   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.\n   *\n   * <p>This is <i>not</i> the same as \"all nodes reachable from {@code node} by following outgoing\n   * edges\". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.\n   *\n   * <p>If {@code node} is removed from the graph after this method is called, the {@code Set}\n   * {@code view} returned by this method will be invalidated, and will throw {@code\n   * IllegalStateException} if it is accessed in any way, with the following exceptions:\n   *\n   * <ul>\n   *   <li>{@code view.equals(view)} evaluates to {@code true} (but any other `equals()` expression\n   *       involving {@code view} will throw)\n   *   <li>{@code hashCode()} does not throw\n   *   <li>if {@code node} is re-added to the graph after having been removed, {@code view}'s\n   *       behavior is undefined\n   * </ul>\n   *\n   * @throws IllegalArgumentException if {@code node} is not an element of this graph",
  "com.google.common.hash.HashCode:writeBytesTo(byte[],int,int)" : "* Copies bytes from this hash code into {@code dest}.\n   *\n   * @param dest the byte array into which the hash code will be written\n   * @param offset the start offset in the data\n   * @param maxLength the maximum number of bytes to write\n   * @return the number of bytes written to {@code dest}\n   * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}",
  "com.google.common.collect.ForwardingSortedSetMultimap:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.RegularImmutableSet:iterator()" : null,
  "com.google.common.primitives.Shorts:toArray(java.util.Collection)" : "* Returns an array containing each value of {@code collection}, converted to a {@code short}\n   * value in the manner of {@link Number#shortValue}.\n   *\n   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n   * Calling this method is as thread-safe as calling that method.\n   *\n   * @param collection a collection of {@code Number} instances\n   * @return an array containing the same values as {@code collection}, in the same order, converted\n   *     to primitives\n   * @throws NullPointerException if {@code collection} or any of its elements is null\n   * @since 1.0 (parameter was {@code Collection<Short>} before 12.0)",
  "com.google.common.collect.UnmodifiableSortedMultiset:comparator()" : null,
  "com.google.common.reflect.Types$GenericArrayTypeImpl:getGenericComponentType()" : null,
  "com.google.common.reflect.Parameter:getAnnotation(java.lang.Class)" : null,
  "com.google.common.collect.ImmutableMultimap:size()" : null,
  "com.google.common.collect.Iterators:forEnumeration(java.util.Enumeration)" : "* Adapts an {@code Enumeration} to the {@code Iterator} interface.\n   *\n   * <p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as\n   * an {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection\n   * using {@link Collections#list}.\n   *\n   * <p><b>Java 9 users:</b> use {@code enumeration.asIterator()} instead, unless it is important to\n   * return an {@code UnmodifiableIterator} instead of a plain {@code Iterator}.",
  "com.google.common.collect.CompactLinkedHashSet:allocArrays()" : null,
  "com.google.common.base.Throwables:throwIfInstanceOf(java.lang.Throwable,java.lang.Class)" : "* Throws {@code throwable} if it is an instance of {@code declaredType}. Example usage:\n   *\n   * <pre>\n   * for (Foo foo : foos) {\n   *   try {\n   *     foo.bar();\n   *   } catch (BarException | RuntimeException | Error t) {\n   *     failure = t;\n   *   }\n   * }\n   * if (failure != null) {\n   *   throwIfInstanceOf(failure, BarException.class);\n   *   throwIfUnchecked(failure);\n   *   throw new AssertionError(failure);\n   * }\n   * </pre>\n   *\n   * @since 20.0",
  "com.google.common.util.concurrent.Futures$FutureCombiner:callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)" : "* Creates the {@link ListenableFuture} which will return the result of calling {@link\n     * AsyncCallable#call} in {@code combiner} when all futures complete, using the specified {@code\n     * executor}.\n     *\n     * <p>If the combiner throws a {@code CancellationException}, the returned future will be\n     * cancelled.\n     *\n     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and returned as the cause of the new {@code\n     * ExecutionException} that gets thrown by the returned combined future.\n     *\n     * <p>Canceling this future will attempt to cancel all the component futures.\n     *\n     * @return a future whose result is based on {@code combiner} (or based on the input futures\n     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code\n     *     FutureCombiner}). Even if you don't care about the value of the future, you should\n     *     typically check whether it failed: See <a\n     *     href=\"https://errorprone.info/bugpattern/FutureReturnValueIgnored\">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:lowerCase()" : null,
  "com.google.common.net.InternetDomainName:topDomainUnderRegistrySuffix()" : "* Returns the portion of this domain name that is one level beneath the {@linkplain\n   * #isRegistrySuffix() registry suffix}. For example, for {@code x.adwords.google.co.uk} it\n   * returns {@code google.co.uk}, since {@code co.uk} is a registry suffix. Similarly, for {@code\n   * myblog.blogspot.com} it returns {@code blogspot.com}, since {@code com} is a registry suffix.\n   *\n   * <p>If {@link #isTopDomainUnderRegistrySuffix()} is true, the current domain name instance is\n   * returned.\n   *\n   * <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the\n   * highest level for which cookies may be set. Use {@link #isTopPrivateDomain()} for that purpose.\n   *\n   * @throws IllegalStateException if this domain does not end with a registry suffix\n   * @since 23.3",
  "com.google.common.hash.FarmHashFingerprint64:shiftMix(long)" : null,
  "com.google.common.collect.ImmutableMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Lists$ReverseList:remove(int)" : null,
  "com.google.common.collect.ForwardingListIterator:previous()" : null,
  "com.google.common.io.ByteStreams:skipUpTo(java.io.InputStream,long)" : "* Discards up to {@code n} bytes of data from the input stream. This method will block until\n   * either the full amount has been skipped or until the end of the stream is reached, whichever\n   * happens first. Returns the total number of bytes skipped.",
  "com.google.common.collect.Tables$AbstractCell:<init>()" : null,
  "com.google.common.collect.ForwardingTable:containsColumn(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMultimap:containsEntry(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.HashCode:getBytesInternal()" : "* Returns a mutable view of the underlying bytes for the given {@code HashCode} if it is a\n   * byte-based hashcode. Otherwise it returns {@link HashCode#asBytes}. Do <i>not</i> mutate this\n   * array or else you will break the immutability contract of {@code HashCode}.",
  "com.google.common.base.CharMatcher$Negated:countIn(java.lang.CharSequence)" : null,
  "com.google.common.primitives.Bytes:rotate(byte[],int)" : "* Performs a right rotation of {@code array} of \"distance\" places, so that the first element is\n   * moved to index \"distance\", and the element at index {@code i} ends up at index {@code (distance\n   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),\n   * distance)}, but is somewhat faster.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @since 32.0.0",
  "com.google.common.primitives.ImmutableIntArray:contains(int)" : "* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to\n   * {@code asList().contains(target)}.",
  "com.google.common.collect.EnumHashBiMap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the key class, number of entries, first key, first value, second key, second value,\n   *     and so on.",
  "com.google.common.collect.Synchronized$SynchronizedTable:size()" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ContiguousSet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:put(java.lang.Object,java.lang.Object)" : "Adds a key-value mapping to the built multimap.",
  "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multimap containing the given entries, in the \"key-grouped\" insertion\n   * order described in the <a href=\"#iteration\">class documentation</a>.",
  "com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map)" : "* Constructs a graph with the properties specified in {@code builder}, initialized with the given\n   * node and edge maps.",
  "com.google.common.collect.MapMakerInternalMap$KeySet:size()" : null,
  "com.google.common.collect.ImmutableEnumMap:<init>(java.util.EnumMap)" : null,
  "com.google.common.hash.AbstractHashFunction:hashInt(int)" : null,
  "com.google.common.collect.ImmutableMultiset:createEntrySet()" : null,
  "com.google.common.io.CharStreams:exhaust(java.lang.Readable)" : "* Reads and discards data from the given {@code Readable} until the end of the stream is reached.\n   * Returns the total number of chars read. Does not close the stream.\n   *\n   * @since 20.0",
  "com.google.common.util.concurrent.SequentialExecutor:toString()" : null,
  "com.google.common.util.concurrent.Atomics:newReferenceArray(java.lang.Object[])" : "* Creates an {@code AtomicReferenceArray} instance with the same length as, and all elements\n   * copied from, the given array.\n   *\n   * @param array the array to copy elements from\n   * @return a new {@code AtomicReferenceArray} copied from the given array",
  "com.google.common.collect.ImmutableRangeSet:addAll(java.lang.Iterable)" : "* Guaranteed to throw an exception and leave the {@code RangeSet} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.primitives.Shorts$ShortArrayAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.util.concurrent.RateLimiter:tryAcquire(int,long,java.util.concurrent.TimeUnit)" : "* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained\n   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without\n   * waiting) if the permits would not have been granted before the timeout expired.\n   *\n   * @param permits the number of permits to acquire\n   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.\n   * @param unit the time unit of the timeout argument\n   * @return {@code true} if the permits were acquired, {@code false} otherwise\n   * @throws IllegalArgumentException if the requested number of permits is negative or zero",
  "com.google.common.collect.MapMakerInternalMap:hash(java.lang.Object)" : null,
  "com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ScheduledExecutorService)" : "* Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code invokeAll} methods\n   * submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as\n   * well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code\n   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that\n   * the returned {@code ListeningScheduledExecutorService} never calls the delegate's {@code\n   * submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks\n   * must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code\n   * ListeningScheduledExecutorService}.\n   *\n   * <p>If the delegate executor was already an instance of {@code\n   * ListeningScheduledExecutorService}, it is returned untouched, and the rest of this\n   * documentation does not apply.\n   *\n   * @since 10.0",
  "com.google.common.primitives.ImmutableLongArray:writeReplace()" : null,
  "com.google.common.collect.Range:equals(java.lang.Object)" : "* Returns {@code true} if {@code object} is a range having the same endpoints and bound types as\n   * this range. Note that discrete ranges such as {@code (1..4)} and {@code [2..3]} are <b>not</b>\n   * equal to one another, despite the fact that they each contain precisely the same set of values.\n   * Similarly, empty ranges are not equal unless they have exactly the same representation, so\n   * {@code [3..3)}, {@code (3..3]}, {@code (4..4]} are all unequal.",
  "com.google.common.graph.MapRetrievalCache:get(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractFuture:cancel(boolean)" : "* {@inheritDoc}\n   *\n   * <p>If a cancellation attempt succeeds on a {@code Future} that had previously been {@linkplain\n   * #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate\n   * {@code Future} that was supplied in the {@code setFuture} call.\n   *\n   * <p>Rather than override this method to perform additional cancellation work or cleanup,\n   * subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link\n   * #wasInterrupted} as necessary. This ensures that the work is done even if the future is\n   * cancelled without a call to {@code cancel}, such as by calling {@code\n   * setFuture(cancelledFuture)}.\n   *\n   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or\n   * acquire other locks, risking deadlocks.",
  "com.google.common.collect.ImmutableList:add(int,java.lang.Object)" : "* Guaranteed to throw an exception and leave the list unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.primitives.ImmutableIntArray$AsList:hashCode()" : null,
  "com.google.common.collect.Maps$TransformedEntriesSortedMap:comparator()" : null,
  "com.google.common.base.CharMatcher:lastIndexIn(java.lang.CharSequence)" : "* Returns the index of the last matching BMP character in a character sequence, or {@code -1} if\n   * no matching character is present.\n   *\n   * <p>The default implementation iterates over the sequence in reverse order calling {@link\n   * #matches} for each character.\n   *\n   * @param sequence the character sequence to examine from the end\n   * @return an index, or {@code -1} if no character matches",
  "com.google.common.util.concurrent.UncheckedExecutionException:<init>()" : "* Creates a new instance with {@code null} as its detail message and no cause.\n   *\n   * @deprecated Prefer {@linkplain UncheckedExecutionException(Throwable)} a constructor that\n   *     accepts a cause: Users of this class typically expect for instances to have a non-null\n   *     cause. At the moment, you can <i>usually</i> still preserve behavior by passing an explicit\n   *     {@code null} cause. Note, however, that passing an explicit {@code null} cause prevents\n   *     anyone from calling {@link #initCause} later, so it is not quite equivalent to using a\n   *     constructor that omits the cause.",
  "com.google.common.collect.JdkBackedImmutableBiMap:createEntrySet()" : null,
  "com.google.common.primitives.Doubles$DoubleArrayAsList:toDoubleArray()" : null,
  "com.google.common.collect.Ordering:min(java.lang.Iterable)" : "* Returns the least of the specified values according to this ordering. If there are multiple\n   * least values, the first of those is returned.\n   *\n   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code\n   * Collections.min(collection, thisComparator)} instead. Otherwise, use {@code\n   * Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do\n   * not guarantee which tied minimum element is returned.\n   *\n   * @param iterable the iterable whose minimum element is to be determined\n   * @throws NoSuchElementException if {@code iterable} is empty\n   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n   *     ordering.",
  "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:descendingEntryIterator()" : null,
  "com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated(long,java.util.concurrent.TimeUnit)" : "* @since 15.0",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long,java.lang.Object)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.base.CharMatcher$JavaLetter:matches(char)" : null,
  "com.google.common.reflect.TypeToken$SimpleTypeToken:<init>(java.lang.reflect.Type)" : null,
  "com.google.common.graph.BaseGraph:predecessors(java.lang.Object)" : "* Returns a live view of all nodes in this graph adjacent to {@code node} which can be reached by\n   * traversing {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.\n   *\n   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.\n   *\n   * <p>If {@code node} is removed from the graph after this method is called, the {@code Set}\n   * {@code view} returned by this method will be invalidated, and will throw {@code\n   * IllegalStateException} if it is accessed in any way, with the following exceptions:\n   *\n   * <ul>\n   *   <li>{@code view.equals(view)} evaluates to {@code true} (but any other `equals()` expression\n   *       involving {@code view} will throw)\n   *   <li>{@code hashCode()} does not throw\n   *   <li>if {@code node} is re-added to the graph after having been removed, {@code view}'s\n   *       behavior is undefined\n   * </ul>\n   *\n   * @throws IllegalArgumentException if {@code node} is not an element of this graph",
  "com.google.common.collect.ImmutableMultimap$Keys:contains(java.lang.Object)" : null,
  "com.google.common.base.Functions$SupplierFunction:<init>(com.google.common.base.Supplier)" : null,
  "com.google.common.collect.Maps:removeEntryImpl(java.util.Collection,java.lang.Object)" : "* Implements {@code Collection.remove} safely for forwarding collections of map entries. If\n   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to\n   * protect against a possible nefarious equals method.\n   *\n   * <p>Note that {@code c} is backing (delegate) collection, rather than the forwarding collection.\n   *\n   * @param c the delegate (unwrapped) collection of map entries\n   * @param o the object to remove from {@code c}\n   * @return {@code true} if {@code c} was changed",
  "com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)" : "* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when\n   * the application is complete. It does so by using daemon threads and adding a shutdown hook to\n   * wait for their completion.\n   *\n   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.\n   *\n   * @param executor the executor to modify to make sure it exits when the application is finished\n   * @param terminationTimeout how long to wait for the executor to finish before terminating the\n   *     JVM\n   * @param timeUnit unit of time for the time parameter\n   * @return an unmodifiable version of the input which will not hang the JVM",
  "com.google.common.cache.LocalCache$StrongValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)" : "* Checks the acquisition-ordering between {@code this}, which is about to be acquired, and the\n     * specified {@code acquiredLock}.\n     *\n     * <p>When this method returns, the {@code acquiredLock} should be in either the {@code\n     * preAcquireLocks} map, for the case in which it is safe to acquire {@code this} after the\n     * {@code acquiredLock}, or in the {@code disallowedPriorLocks} map, in which case it is not\n     * safe.",
  "com.google.common.primitives.Ints:hashCode(int)" : "* Returns a hash code for {@code value}; obsolete alternative to {@link Integer#hashCode(int)}.\n   *\n   * @param value a primitive {@code int} value\n   * @return a hash code for the value",
  "com.google.common.base.Enums:<init>()" : null,
  "com.google.common.math.PairedStats:toString()" : null,
  "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:setTableEntryForTesting(int,com.google.common.collect.MapMakerInternalMap$InternalEntry)" : "* Unsafely sets the given index of this segment's internal hash table to be the given entry.",
  "com.google.common.collect.ImmutableSet:<init>()" : null,
  "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier:<init>(java.lang.reflect.Method)" : null,
  "com.google.common.collect.CompactHashMap$Itr:checkForConcurrentModification()" : null,
  "com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object)" : "* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are\n   * greater than or equals to {@code fromKey}.\n   *\n   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an\n   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code\n   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n   * the original {@code fromKey}.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:writeLock()" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.net.InetAddresses:coerceToInteger(java.net.InetAddress)" : "* Returns an integer representing an IPv4 address regardless of whether the supplied argument is\n   * an IPv4 address or not.\n   *\n   * <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers.\n   *\n   * <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and\n   * can therefore be converted safely to integers (for whatever purpose) this function can be used\n   * to handle IPv6 addresses as well until the application is suitably fixed.\n   *\n   * <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as\n   * rudimentary identification or indexing into a collection of real {@link InetAddress}es. They\n   * cannot be used as real addresses for the purposes of network communication.\n   *\n   * @param ip {@link InetAddress} to convert\n   * @return {@code int}, \"coerced\" if ip is not an IPv4 address\n   * @since 7.0",
  "com.google.common.collect.Synchronized$SynchronizedCollection:<init>(java.util.Collection,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:getFirst(int)" : "Returns first entry of bin for given hash.",
  "com.google.common.graph.AbstractValueGraph:asGraph()" : null,
  "com.google.common.collect.CollectCollectors:toImmutableSortedSet(java.util.Comparator)" : null,
  "com.google.common.collect.HashBasedTable:<init>(java.util.Map,com.google.common.collect.HashBasedTable$Factory)" : null,
  "com.google.common.collect.SingletonImmutableSet:<init>(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:sortedMap()" : null,
  "com.google.common.primitives.Doubles$DoubleArrayAsList:hashCode()" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:getLiveEntry(java.lang.Object,int)" : null,
  "com.google.common.cache.CacheBuilder:getWeigher()" : null,
  "com.google.common.collect.ComparisonChain:start()" : "Begins a new chained comparison statement. See example in the class documentation.",
  "com.google.common.reflect.Invokable:isSynchronized()" : "Returns true if the method is synchronized.",
  "com.google.common.primitives.Shorts$ShortArrayAsList:size()" : null,
  "com.google.common.hash.Hashing$ConcatenatedHashFunction:hashCode()" : null,
  "com.google.common.collect.DiscreteDomain:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.ForwardingCollection:isEmpty()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:calculateNewCapacity()" : "Returns ~2x the old capacity if small; ~1.5x otherwise.",
  "com.google.common.primitives.ImmutableIntArray$AsList:toString()" : null,
  "com.google.common.collect.Synchronized$SynchronizedCollection:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableList:remove(int)" : "* Guaranteed to throw an exception and leave the list unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.Converter:from(com.google.common.base.Function,com.google.common.base.Function)" : "* Returns a converter based on separate forward and backward functions. This is useful if the\n   * function instances already exist, or so that you can supply lambda expressions. If those\n   * circumstances don't apply, you probably don't need to use this; subclass {@code Converter} and\n   * implement its {@link #doForward} and {@link #doBackward} methods directly.\n   *\n   * <p>These functions will never be passed {@code null} and must not under any circumstances\n   * return {@code null}. If a value cannot be converted, the function should throw an unchecked\n   * exception (typically, but not necessarily, {@link IllegalArgumentException}).\n   *\n   * <p>The returned converter is serializable if both provided functions are.\n   *\n   * @since 17.0",
  "com.google.common.graph.ImmutableNetwork:adjacentNodes(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Any:lastIndexIn(java.lang.CharSequence)" : null,
  "com.google.common.collect.LinkedHashMultimap:<init>(int,int)" : null,
  "com.google.common.collect.ForwardingDeque:push(java.lang.Object)" : null,
  "com.google.common.eventbus.Subscriber:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)" : null,
  "com.google.common.collect.MapMakerInternalMap$SerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)" : null,
  "com.google.common.collect.Iterators$EmptyModifiableIterator:next()" : null,
  "com.google.common.collect.HashMultiset:count(java.lang.Object)" : null,
  "com.google.common.collect.Multisets$MultisetIteratorImpl:next()" : null,
  "com.google.common.collect.Lists:transform(java.util.List,com.google.common.base.Function)" : "* Returns a list that applies {@code function} to each element of {@code fromList}. The returned\n   * list is a transformed view of {@code fromList}; changes to {@code fromList} will be reflected\n   * in the returned list and vice versa.\n   *\n   * <p>Since functions are not reversible, the transform is one-way and new items cannot be stored\n   * in the returned list. The {@code add}, {@code addAll} and {@code set} methods are unsupported\n   * in the returned list.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned list\n   * to be a view, but it means that the function will be applied many times for bulk operations\n   * like {@link List#contains} and {@link List#hashCode}. For this to perform well, {@code\n   * function} should be fast. To avoid lazy evaluation when the returned list doesn't need to be a\n   * view, copy the returned list into a new list of your choosing.\n   *\n   * <p>If {@code fromList} implements {@link RandomAccess}, so will the returned list. The returned\n   * list is threadsafe if the supplied list and function are.\n   *\n   * <p>If only a {@code Collection} or {@code Iterable} input is available, use {@link\n   * Collections2#transform} or {@link Iterables#transform}.\n   *\n   * <p><b>Note:</b> serializing the returned list is implemented by serializing {@code fromList},\n   * its contents, and {@code function} -- <i>not</i> by serializing the transformed values. This\n   * can lead to surprising behavior, so serializing the returned list is <b>not recommended</b>.\n   * Instead, copy the list using {@link ImmutableList#copyOf(Collection)} (for example), then\n   * serialize the copy. Other methods similar to this do not implement serialization at all for\n   * this reason.\n   *\n   * <p><b>Java 8+ users:</b> many use cases for this method are better addressed by {@link\n   * java.util.stream.Stream#map}. This method is not being deprecated, but we gently encourage you\n   * to migrate to streams.",
  "com.google.common.collect.ImmutableSet:copyOf(java.lang.Object[])" : "* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n   * each appears first in the source array.\n   *\n   * @throws NullPointerException if any of {@code elements} is null\n   * @since 3.0",
  "com.google.common.util.concurrent.AtomicDoubleArray:getAndAccumulate(int,double,java.util.function.DoubleBinaryOperator)" : "* Atomically updates the element at index {@code i} with the results of applying the given\n   * function to the current and given values.\n   *\n   * @param i the index to update\n   * @param x the update value\n   * @param accumulatorFunction the accumulator function\n   * @return the previous value\n   * @since 31.1",
  "com.google.common.collect.StandardRowSortedTable:createRowMap()" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:<init>()" : null,
  "com.google.common.collect.RegularImmutableSortedSet:last()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:hashCode()" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:transformEntries(java.util.Set)" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:firstEntry()" : null,
  "com.google.common.collect.Interners:newBuilder()" : "Returns a fresh {@link InternerBuilder} instance.",
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:coolDownIntervalMicros()" : null,
  "com.google.common.collect.Sets:synchronizedNavigableSet(java.util.NavigableSet)" : "* Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In\n   * order to guarantee serial access, it is critical that <b>all</b> access to the backing\n   * navigable set is accomplished through the returned navigable set (or its views).\n   *\n   * <p>It is imperative that the user manually synchronize on the returned sorted set when\n   * iterating over it or any of its {@code descendingSet}, {@code subSet}, {@code headSet}, or\n   * {@code tailSet} views.\n   *\n   * {@snippet :\n   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());\n   *  ...\n   * synchronized (set) {\n   *   // Must be in the synchronized block\n   *   Iterator<E> it = set.iterator();\n   *   while (it.hasNext()) {\n   *     foo(it.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>or:\n   *\n   * {@snippet :\n   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());\n   * NavigableSet<E> set2 = set.descendingSet().headSet(foo);\n   *  ...\n   * synchronized (set) { // Note: set, not set2!!!\n   *   // Must be in the synchronized block\n   *   Iterator<E> it = set2.descendingIterator();\n   *   while (it.hasNext()) {\n   *     foo(it.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>Failure to follow this advice may result in non-deterministic behavior.\n   *\n   * <p>The returned navigable set will be serializable if the specified navigable set is\n   * serializable.\n   *\n   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#synchronizedNavigableSet}.\n   *\n   * @param navigableSet the navigable set to be \"wrapped\" in a synchronized navigable set.\n   * @return a synchronized view of the specified navigable set.\n   * @since 13.0",
  "com.google.common.collect.FluentIterable:size()" : "* Returns the number of elements in this fluent iterable.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.",
  "com.google.common.util.concurrent.JdkFutureAdapters:<init>()" : null,
  "com.google.common.util.concurrent.AtomicLongMap:isEmpty()" : "Returns {@code true} if this map contains no key-value mappings.",
  "com.google.common.io.LittleEndianDataOutputStream:writeChars(java.lang.String)" : "* Writes a {@code String} as specified by {@link DataOutputStream#writeChars(String)}, except\n   * each character is written using little-endian byte order.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char,int)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:build()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSetMultimap$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.base.Java8Compatibility:limit(java.nio.Buffer,int)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object,boolean)" : null,
  "com.google.common.graph.AbstractValueGraph:edges()" : "* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and\n   * {@link #successors(Object)}.",
  "com.google.common.collect.ImmutableMap$SerializedForm:legacyReadResolve()" : null,
  "com.google.common.collect.Lists$TransformingRandomAccessList:iterator()" : null,
  "com.google.common.collect.LinkedHashMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the expected values per key, the number of distinct keys, the number of entries,\n   *     and the entries in order",
  "com.google.common.collect.Maps$SortedKeySet:<init>(java.util.SortedMap)" : null,
  "com.google.common.util.concurrent.ThreadFactoryBuilder:setThreadFactory(java.util.concurrent.ThreadFactory)" : "* Sets the backing {@link ThreadFactory} for new threads created with this ThreadFactory. Threads\n   * will be created by invoking #newThread(Runnable) on this backing {@link ThreadFactory}.\n   *\n   * @param backingThreadFactory the backing {@link ThreadFactory} which will be delegated to during\n   *     thread creation.\n   * @return this for the builder pattern\n   * @see MoreExecutors",
  "com.google.common.collect.Iterators:all(java.util.Iterator,com.google.common.base.Predicate)" : "* Returns {@code true} if every element returned by {@code iterator} satisfies the given\n   * predicate. If {@code iterator} is empty, {@code true} is returned.",
  "com.google.common.io.MoreFiles$PathByteSource:asCharSource(java.nio.charset.Charset)" : null,
  "com.google.common.util.concurrent.Monitor:leave()" : "Leaves this monitor. May be called only by a thread currently occupying this monitor.",
  "com.google.common.collect.ForwardingNavigableMap:standardHeadMap(java.lang.Object)" : "* A sensible definition of {@link #headMap(Object)} in terms of {@link #headMap(Object,\n   * boolean)}. If you override {@code headMap(K, boolean)}, you may wish to override {@code\n   * headMap} to forward to this implementation.",
  "com.google.common.io.CharSource$CharSequenceCharSource:toString()" : null,
  "com.google.common.collect.ImmutableListMultimap:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder} constructor.",
  "com.google.common.collect.ImmutableRangeSet:span()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:hashCode()" : null,
  "com.google.common.collect.ImmutableMap:putAll(java.util.Map)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:get(java.lang.Object)" : null,
  "com.google.common.math.DoubleUtils:isFinite(double)" : null,
  "com.google.common.util.concurrent.ForwardingBlockingDeque:takeLast()" : null,
  "com.google.common.collect.Sets$FilteredNavigableSet:pollLast()" : null,
  "com.google.common.escape.ArrayBasedEscaperMap:createReplacementArray(java.util.Map)" : null,
  "com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,java.lang.Class)" : null,
  "com.google.common.primitives.Chars:sortDescending(char[])" : "* Sorts the elements of {@code array} in descending order.\n   *\n   * @since 23.1",
  "com.google.common.io.Resources$1:<init>()" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:iterator()" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.AbstractValueGraph$1:incidentEdgeOrder()" : null,
  "com.google.common.collect.Maps:filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate)" : "* Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate.\n   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap\n   * and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code put()},\n   * {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying\n   * bimap.\n   *\n   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in\n   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>\n   * needed, it may be faster to copy the filtered bimap and use the copy.\n   *\n   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented\n   * at {@link Predicate#apply}.\n   *\n   * @since 14.0",
  "com.google.common.collect.TreeMultiset:descendingEntryIterator()" : null,
  "com.google.common.primitives.Shorts:lastIndexOf(short[],short)" : "* Returns the index of the last appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code short} values, possibly empty\n   * @param target a primitive {@code short} value\n   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:<init>(int)" : null,
  "com.google.common.cache.CacheBuilder:ticker(com.google.common.base.Ticker)" : "* Specifies a nanosecond-precision time source for this cache. By default, {@link\n   * System#nanoTime} is used.\n   *\n   * <p>The primary intent of this method is to facilitate testing of caches with a fake or mock\n   * time source.\n   *\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalStateException if a ticker was already set",
  "com.google.common.primitives.Ints$IntArrayAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache:removeIf(java.util.function.BiPredicate)" : null,
  "com.google.common.collect.TreeBasedTable:createColumnKeyIterator()" : "Overridden column iterator to return columns values in globally sorted order.",
  "com.google.common.collect.ForwardingTable:containsRow(java.lang.Object)" : null,
  "com.google.common.graph.GraphBuilder:expectedNodeCount(int)" : "* Specifies the expected number of nodes in the graph.\n   *\n   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",
  "com.google.common.graph.ForwardingNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.escape.ArrayBasedCharEscaper:<init>(java.util.Map,char,char)" : "* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe\n   * range. If {@code safeMax < safeMin} then no characters are considered safe.\n   *\n   * <p>If a character has no mapped replacement then it is checked against the safe range. If it\n   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.\n   *\n   * @param replacementMap a map of characters to their escaped representations\n   * @param safeMin the lowest character value in the safe range\n   * @param safeMax the highest character value in the safe range",
  "com.google.common.collect.ImmutableSortedMap$1EntrySet:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.Interners$InternerBuilder:strong()" : "* Instructs the {@link InternerBuilder} to build a strong interner.\n     *\n     * @see Interners#newStrongInterner()",
  "com.google.common.collect.AbstractMapBasedMultimap$AsMap:toString()" : null,
  "com.google.common.hash.Funnels:sequentialFunnel(com.google.common.hash.Funnel)" : "* Returns a funnel that processes an {@code Iterable} by funneling its elements in iteration\n   * order with the specified funnel. No separators are added between the elements.\n   *\n   * @since 15.0",
  "com.google.common.graph.ForwardingNetwork:allowsParallelEdges()" : null,
  "com.google.common.reflect.Invokable$ConstructorInvokable:getTypeParameters()" : "* {@inheritDoc}\n     *\n     * <p>{@code [<E>]} will be returned for ArrayList's constructor. When both the class and the\n     * constructor have type parameters, the class parameters are prepended before those of the\n     * constructor's. This is an arbitrary rule since no existing language spec mandates one way or\n     * the other. From the declaration syntax, the class type parameter appears first, but the call\n     * syntax may show up in opposite order such as {@code new <A>Foo<B>()}.",
  "com.google.common.primitives.Floats:rotate(float[],int)" : "* Performs a right rotation of {@code array} of \"distance\" places, so that the first element is\n   * moved to index \"distance\", and the element at index {@code i} ends up at index {@code (distance\n   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Floats.asList(array),\n   * distance)}, but is considerably faster and avoids allocation and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @since 32.0.0",
  "com.google.common.collect.Lists$TransformingSequentialList:<init>(java.util.List,com.google.common.base.Function)" : null,
  "com.google.common.cache.LocalCache$NullEntry:getKey()" : null,
  "com.google.common.io.BaseEncoding$Base64Encoding:decodeTo(byte[],java.lang.CharSequence)" : null,
  "com.google.common.collect.EmptyContiguousSet:tailSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.collect.CompactHashSet:<init>()" : "Constructs a new empty instance of {@code CompactHashSet}.",
  "com.google.common.util.concurrent.TimeoutFuture:afterDone()" : null,
  "com.google.common.cache.LocalCache$Segment:getLiveValue(com.google.common.cache.ReferenceEntry,long)" : "* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,\n     * loading, or expired.",
  "com.google.common.collect.Synchronized$SynchronizedQueue:element()" : null,
  "com.google.common.collect.Multimaps$Keys:contains(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingBlockingDeque:take()" : null,
  "com.google.common.cache.RemovalListeners:asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor)" : "* Returns a {@code RemovalListener} which processes all eviction notifications using {@code\n   * executor}.\n   *\n   * @param listener the backing listener\n   * @param executor the executor with which removal notifications are asynchronously executed",
  "com.google.common.util.concurrent.Callables:asAsyncCallable(java.util.concurrent.Callable,com.google.common.util.concurrent.ListeningExecutorService)" : "* Creates an {@link AsyncCallable} from a {@link Callable}.\n   *\n   * <p>The {@link AsyncCallable} returns the {@link ListenableFuture} resulting from {@link\n   * ListeningExecutorService#submit(Callable)}.\n   *\n   * @since 20.0",
  "com.google.common.collect.ForwardingMapEntry:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMap$SerializedForm:<init>(com.google.common.collect.ImmutableSortedMap)" : null,
  "com.google.common.base.Throwables:lazyStackTraceIsLazy()" : "* Returns whether {@link #lazyStackTrace} will use the special implementation described in its\n   * documentation.\n   *\n   * @since 19.0\n   * @deprecated This method always returns false on JDK versions past JDK 8 and on all Android\n   *     versions.",
  "com.google.common.base.CaseFormat:firstCharOnlyToUpper(java.lang.String)" : null,
  "com.google.common.math.MathPreconditions:checkPositive(java.lang.String,int)" : null,
  "com.google.common.base.CharMatcher$Digit:zeroes()" : null,
  "com.google.common.collect.ExplicitOrdering:equals(java.lang.Object)" : null,
  "com.google.common.cache.ForwardingCache:putAll(java.util.Map)" : "* @since 12.0",
  "com.google.common.primitives.ImmutableDoubleArray:lastIndexOf(double)" : "* Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no\n   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code\n   * asList().lastIndexOf(target)}.",
  "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:hash()" : null,
  "com.google.common.collect.CompactHashMap:key(int)" : null,
  "com.google.common.hash.Murmur3_32HashFunction:charToThreeUtf8Bytes(char)" : null,
  "com.google.common.reflect.TypeToken:getGenericSuperclass()" : "* Returns the generic superclass of this type or {@code null} if the type represents {@link\n   * Object} or an interface. This method is similar but different from {@link\n   * Class#getGenericSuperclass}. For example, {@code new TypeToken<StringArrayList>()\n   * {}.getGenericSuperclass()} will return {@code new TypeToken<ArrayList<String>>() {}}; while\n   * {@code StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where\n   * {@code E} is the type variable declared by class {@code ArrayList}.\n   *\n   * <p>If this type is a type variable or wildcard, its first upper bound is examined and returned\n   * if the bound is a class or extends from a class. This means that the returned type could be a\n   * type variable too.",
  "com.google.common.primitives.Longs:lastIndexOf(long[],long)" : "* Returns the index of the last appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code long} values, possibly empty\n   * @param target a primitive {@code long} value\n   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.Lists$TransformingSequentialList:listIterator(int)" : null,
  "com.google.common.collect.ImmutableMultimap:clear()" : "* Guaranteed to throw an exception and leave the multimap unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.math.IntMath:log2(int,java.math.RoundingMode)" : "* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not a power of two",
  "com.google.common.cache.LocalCache$Segment:getLiveEntry(java.lang.Object,int,long)" : null,
  "com.google.common.base.Converter:unsafeDoBackward(java.lang.Object)" : null,
  "com.google.common.collect.RegularImmutableBiMap:get(java.lang.Object)" : null,
  "com.google.common.primitives.UnsignedLongs:toString(long)" : "* Returns a string representation of x, where x is treated as unsigned.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long)} instead.",
  "com.google.common.reflect.MutableTypeToInstanceMap:trustedGet(com.google.common.reflect.TypeToken)" : null,
  "com.google.common.collect.StandardTable$ColumnMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.GeneralRange:isEmpty()" : null,
  "com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Iterator)" : "* Returns an immutable sorted multiset containing the given elements sorted by their natural\n   * ordering.\n   *\n   * <p>This method is not type-safe, as it may be called on elements that are not mutually\n   * comparable.\n   *\n   * @throws ClassCastException if the elements are not mutually comparable\n   * @throws NullPointerException if any of {@code elements} is null",
  "com.google.common.eventbus.EventBus:<init>(com.google.common.eventbus.SubscriberExceptionHandler)" : "* Creates a new EventBus with the given {@link SubscriberExceptionHandler}.\n   *\n   * @param exceptionHandler Handler for subscriber exceptions.\n   * @since 16.0",
  "com.google.common.collect.ImmutableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.Range:hasUpperBound()" : "Returns {@code true} if this range has an upper endpoint.",
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:setAccessTime(long)" : null,
  "com.google.common.collect.TopKSelector:<init>(java.util.Comparator,int)" : null,
  "com.google.common.primitives.ImmutableDoubleArray$Builder:build()" : "* Returns a new immutable array. The builder can continue to be used after this call, to append\n     * more values and build again.\n     *\n     * <p><b>Performance note:</b> the returned array is backed by the same array as the builder, so\n     * no data is copied as part of this step, but this may occupy more memory than strictly\n     * necessary. To copy the data to a right-sized backing array, use {@code .build().trimmed()}.",
  "com.google.common.collect.ImmutableSet:builder()" : "* Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n   * Builder} constructor.",
  "com.google.common.collect.Multisets$EntrySet:clear()" : null,
  "com.google.common.collect.RegularImmutableSortedSet:<init>(com.google.common.collect.ImmutableList,java.util.Comparator)" : null,
  "com.google.common.collect.ImmutableMultiset$SerializedForm:readResolve()" : null,
  "com.google.common.collect.CompactHashSet:clear()" : null,
  "com.google.common.collect.ImmutableSortedMultiset:copyOfSortedEntries(java.util.Comparator,java.util.Collection)" : null,
  "com.google.common.collect.StandardTable:row(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken$2:getGenericExceptionTypes()" : null,
  "com.google.common.collect.Multisets:filter(com.google.common.collect.Multiset,com.google.common.base.Predicate)" : "* Returns a view of the elements of {@code unfiltered} that satisfy a predicate. The returned\n   * multiset is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting multiset's iterators, and those of its {@code entrySet()} and {@code\n   * elementSet()}, do not support {@code remove()}. However, all other multiset methods supported\n   * by {@code unfiltered} are supported by the returned multiset. When given an element that\n   * doesn't satisfy the predicate, the multiset's {@code add()} and {@code addAll()} methods throw\n   * an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code\n   * clear()} are called on the filtered multiset, only elements that satisfy the filter will be\n   * removed from the underlying multiset.\n   *\n   * <p>The returned multiset isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered multiset's methods, such as {@code size()}, iterate across every\n   * element in the underlying multiset and determine which elements satisfy the filter. When a live\n   * view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy.\n   *\n   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link\n   * Iterables#filter(Iterable, Class)} for related functionality.)\n   *\n   * @since 14.0",
  "com.google.common.collect.ImmutableSortedMultiset$Builder:build()" : "* Returns a newly-created {@code ImmutableSortedMultiset} based on the contents of the {@code\n     * Builder}.",
  "com.google.common.collect.RegularContiguousSet:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:get(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$CustomMultimap:writeObject(java.io.ObjectOutputStream)" : "* @serialData the factory and the backing map",
  "com.google.common.cache.CacheBuilderSpec:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMultiset:emptyMultiset(java.util.Comparator)" : null,
  "com.google.common.collect.SparseImmutableTable:size()" : null,
  "com.google.common.base.Preconditions:checkElementIndex(int,int)" : "* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size\n   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.\n   *\n   * @param index a user-supplied index identifying an element of an array, list or string\n   * @param size the size of that array, list or string\n   * @return the value of {@code index}\n   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}\n   * @throws IllegalArgumentException if {@code size} is negative",
  "com.google.common.io.BaseEncoding$Alphabet:decode(char)" : null,
  "com.google.common.io.LittleEndianDataOutputStream:writeBoolean(boolean)" : null,
  "com.google.common.collect.ArrayTable$Row:getKeyRole()" : null,
  "com.google.common.reflect.Invokable$MethodInvokable:getAnnotatedParameterTypes()" : null,
  "com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate)" : "* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The\n   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.\n   *\n   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all\n   * other methods are supported by the multimap and its views. When adding a key/value pair that\n   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code\n   * replaceValues()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the\n   * underlying multimap.\n   *\n   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every\n   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n   * copy.\n   *\n   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented\n   * at {@link Predicate#apply}.\n   *\n   * @since 11.0",
  "com.google.common.collect.Maps$NavigableAsMapView:get(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:createKeys()" : null,
  "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte)" : null,
  "com.google.common.primitives.Chars:compare(char,char)" : "* Compares the two specified {@code char} values. The sign of the value returned is the same as\n   * that of {@code ((Character) a).compareTo(b)}.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the\n   * equivalent {@link Character#compare} method instead.\n   *\n   * @param a the first {@code char} to compare\n   * @param b the second {@code char} to compare\n   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n   *     greater than {@code b}; or zero if they are equal",
  "com.google.common.base.Enums$StringConverter:<init>(java.lang.Class)" : null,
  "com.google.common.collect.HashBiMap:containsKey(java.lang.Object)" : null,
  "com.google.common.graph.UndirectedNetworkConnections:ofImmutable(java.util.Map)" : null,
  "com.google.common.collect.ImmutableSetMultimap:<init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator)" : null,
  "com.google.common.base.CharMatcher$JavaUpperCase:negate()" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:span()" : null,
  "com.google.common.cache.CacheBuilder:toNanosSaturated(java.time.Duration)" : "* Returns the number of nanoseconds of the given duration without throwing or overflowing.\n   *\n   * <p>Instead of throwing {@link ArithmeticException}, this method silently saturates to either\n   * {@link Long#MAX_VALUE} or {@link Long#MIN_VALUE}. This behavior can be useful when decomposing\n   * a duration in order to call a legacy API which requires a {@code long, TimeUnit} pair.",
  "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:doStop()" : null,
  "com.google.common.collect.ForwardingMap:standardToString()" : "* A sensible definition of {@link #toString} in terms of the {@code iterator} method of {@link\n   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #toString} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.cache.AbstractCache:invalidate(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset:add(java.lang.Object,int)" : null,
  "com.google.common.base.Suppliers$SupplierOfInstance:toString()" : null,
  "com.google.common.collect.Range:readResolve()" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:inverse()" : null,
  "com.google.common.collect.SingletonImmutableTable:<init>(com.google.common.collect.Table$Cell)" : null,
  "com.google.common.collect.EvictingQueue:toArray()" : null,
  "com.google.common.cache.LocalCache$Segment:clearReferenceQueues()" : "Clears all entries from the key and value reference queues.",
  "com.google.common.util.concurrent.AbstractExecutionThreadService:executor()" : "* Returns the {@link Executor} that will be used to run this service. Subclasses may override\n   * this method to use a custom {@link Executor}, which may configure its worker thread with a\n   * specific name, thread group or priority. The returned executor's {@link\n   * Executor#execute(Runnable) execute()} method is called when this service is started, and should\n   * return promptly.\n   *\n   * <p>The default implementation returns a new {@link Executor} that sets the name of its threads\n   * to the string returned by {@link #serviceName}",
  "com.google.common.primitives.ImmutableLongArray:spliterator()" : null,
  "com.google.common.collect.MapMakerInternalMap$HashIterator:remove()" : null,
  "com.google.common.io.MultiInputStream:read(byte[],int,int)" : null,
  "com.google.common.collect.ForwardingList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeSet:encloses(com.google.common.collect.Range)" : null,
  "com.google.common.collect.HashMultiset:setCount(java.lang.Object,int)" : null,
  "com.google.common.collect.ImmutableSortedMap:ceilingEntry(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.base.CharMatcher:precomputedPositive(int,java.util.BitSet,java.lang.String)" : "* Helper method for {@link #precomputedInternal} that doesn't test if the negation is cheaper.",
  "com.google.common.collect.RegularContiguousSet:intersection(com.google.common.collect.ContiguousSet)" : null,
  "com.google.common.collect.MapMakerInternalMap:unsetWeakValueReference()" : null,
  "com.google.common.util.concurrent.AbstractService:stopAsync()" : null,
  "com.google.common.hash.FarmHashFingerprint64:bits()" : null,
  "com.google.common.graph.ImmutableValueGraph:nodeOrder()" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:lastEntry()" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,int,char)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.Synchronized$SynchronizedList:listIterator()" : null,
  "com.google.common.collect.ImmutableList$ReverseImmutableList:contains(java.lang.Object)" : null,
  "com.google.common.base.Converter:unsafeDoForward(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ExecutionError:<init>(java.lang.String)" : "* Creates a new instance with the given detail message and no cause.\n   *\n   * @deprecated Prefer {@linkplain ExecutionError(String, Error)} a constructor that accepts a\n   *     cause: Users of this class typically expect for instances to have a non-null cause. At the\n   *     moment, you can <i>usually</i> still preserve behavior by passing an explicit {@code null}\n   *     cause. Note, however, that passing an explicit {@code null} cause prevents anyone from\n   *     calling {@link #initCause} later, so it is not quite equivalent to using a constructor that\n   *     omits the cause.",
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:sortedMap()" : null,
  "com.google.common.hash.BloomFilter$SerialForm:readResolve()" : null,
  "com.google.common.io.Files$FileByteSink:openStream()" : null,
  "com.google.common.collect.Multimaps$CustomListMultimap:createKeySet()" : null,
  "com.google.common.collect.HashBiMap$Itr:remove()" : null,
  "com.google.common.collect.LinkedListMultimap:create(int)" : "* Constructs an empty {@code LinkedListMultimap} with enough capacity to hold the specified\n   * number of keys without rehashing.\n   *\n   * @param expectedKeys the expected number of distinct keys\n   * @throws IllegalArgumentException if {@code expectedKeys} is negative",
  "com.google.common.util.concurrent.AbstractTransformFuture:create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)" : null,
  "com.google.common.io.Closeables:closeQuietly(java.io.InputStream)" : "* Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather than\n   * propagating it.\n   *\n   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an\n   * I/O resource, it should generally be safe in the case of a resource that's being used only for\n   * reading, such as an {@code InputStream}. Unlike with writable resources, there's no chance that\n   * a failure that occurs when closing the stream indicates a meaningful problem such as a failure\n   * to flush all bytes to the underlying resource.\n   *\n   * @param inputStream the input stream to be closed, or {@code null} in which case this method\n   *     does nothing\n   * @since 17.0",
  "com.google.common.collect.LinkedListMultimap$NodeIterator:setValue(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$HashIterator:hasNext()" : null,
  "com.google.common.collect.DescendingMultiset:elementSet()" : null,
  "com.google.common.collect.Lists:hashCodeImpl(java.util.List)" : "An implementation of {@link List#hashCode()}.",
  "com.google.common.graph.AbstractValueGraph$1:inDegree(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int,com.google.common.cache.CacheLoader)" : null,
  "com.google.common.io.CharSource:openBufferedStream()" : "* Opens a new {@link BufferedReader} for reading from this source. This method returns a new,\n   * independent reader each time it is called.\n   *\n   * <p>The caller is responsible for ensuring that the returned reader is closed.\n   *\n   * @throws IOException if an I/O error occurs while of opening the reader",
  "com.google.common.collect.HashBasedTable:values()" : "* {@inheritDoc}\n   *\n   * <p>The collection's iterator traverses the values for the first row, the values for the second\n   * row, and so on.",
  "com.google.common.collect.CollectCollectors$EnumSetAccumulator:toImmutableSet()" : null,
  "com.google.common.io.MultiInputStream:read()" : null,
  "com.google.common.io.CharSink:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollFirstEntry()" : null,
  "com.google.common.collect.RegularImmutableBiMap:<init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int)" : null,
  "com.google.common.hash.SipHashFunction:bits()" : null,
  "com.google.common.collect.TreeMultimap:get(java.lang.Object)" : "* @since 14.0 (present with return type {@code SortedSet} since 2.0)",
  "com.google.common.collect.Synchronized$SynchronizedMap:entrySet()" : null,
  "com.google.common.collect.AbstractTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.reflect.Types$JavaVersion:usedInGenericType(java.lang.reflect.Type[])" : null,
  "com.google.common.graph.ImmutableNetwork:connectionsOf(com.google.common.graph.Network,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:getDelegateListIterator()" : null,
  "com.google.common.collect.Lists$TransformingRandomAccessList:get(int)" : null,
  "com.google.common.collect.ForwardingTable:size()" : null,
  "com.google.common.io.BaseEncoding$Alphabet:lowerCase()" : null,
  "com.google.common.collect.Tables$TransposeTable:putAll(com.google.common.collect.Table)" : null,
  "com.google.common.collect.Multimaps$CustomMultimap:wrapCollection(java.lang.Object,java.util.Collection)" : null,
  "com.google.common.collect.ForwardingNavigableSet:standardCeiling(java.lang.Object)" : "* A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of {@link\n   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to\n   * override {@link #ceiling} to forward to this implementation.",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int,java.lang.Object)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:getKey()" : null,
  "com.google.common.collect.Maps:valueOrNull(java.util.Map$Entry)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueSet:contains(java.lang.Object)" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addValue(char)" : "* Adds an unnamed value to the formatted output.\n     *\n     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a\n     * readable name.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.graph.Traverser$Traversal:inGraph(com.google.common.graph.SuccessorsFunction)" : null,
  "com.google.common.hash.AbstractCompositeHashFunction:newHasher(int)" : null,
  "com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)" : "* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application\n   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their\n   * completion.\n   *\n   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor\n   * has not finished its work.\n   *\n   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.\n   *\n   * @param executor the executor to modify to make sure it exits when the application is finished\n   * @return an unmodifiable version of the input which will not hang the JVM",
  "com.google.common.primitives.ImmutableDoubleArray:toArray()" : "Returns a new, mutable copy of this array's values, as a primitive {@code double[]}.",
  "com.google.common.util.concurrent.AtomicLongMap:addAndGet(java.lang.Object,long)" : "* Adds {@code delta} to the value currently associated with {@code key}, and returns the new\n   * value.",
  "com.google.common.collect.ImmutableTable:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.TreeRangeMap:clear()" : null,
  "com.google.common.collect.ImmutableAsList:size()" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.io.BaseEncoding$DecodingException:<init>(java.lang.String)" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:encodingStream(java.io.Writer)" : null,
  "com.google.common.collect.DiscreteDomain$IntegerDomain:<init>()" : null,
  "com.google.common.collect.TreeRangeMap$AsMapOfRanges:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:createAsList()" : null,
  "com.google.common.collect.Lists:newArrayList(java.util.Iterator)" : "* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin\n   * shortcut for creating an empty list and then calling {@link Iterators#addAll}.\n   *\n   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link\n   * ImmutableList#copyOf(Iterator)} instead.",
  "com.google.common.collect.NullsFirstOrdering:equals(java.lang.Object)" : null,
  "com.google.common.io.CharStreams$NullWriter:write(java.lang.String)" : null,
  "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.collect.TreeRangeSet$SubRangeSet:subRangeSet(com.google.common.collect.Range)" : null,
  "com.google.common.collect.DenseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)" : null,
  "com.google.common.math.Stats:toString()" : null,
  "com.google.common.graph.AbstractNetwork:toString()" : "Returns a string representation of this network.",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.base.Predicates$ContainsPatternPredicate:toString()" : null,
  "com.google.common.collect.FluentIterable:first()" : "* Returns an {@link Optional} containing the first element in this fluent iterable. If the\n   * iterable is empty, {@code Optional.absent()} is returned.\n   *\n   * <p><b>{@code Stream} equivalent:</b> if the goal is to obtain any element, {@link\n   * Stream#findAny}; if it must specifically be the <i>first</i> element, {@code Stream#findFirst}.\n   *\n   * @throws NullPointerException if the first element is null; if this is a possibility, use {@code\n   *     iterator().next()} or {@link Iterables#getFirst} instead.",
  "com.google.common.primitives.Longs$LongArrayAsList:toLongArray()" : null,
  "com.google.common.collect.CompactHashMap:createHashFloodingResistantDelegate(int)" : null,
  "com.google.common.io.CharSink:write(java.lang.CharSequence)" : "* Writes the given character sequence to this sink.\n   *\n   * @throws IOException if an I/O error while writing to this sink",
  "com.google.common.cache.LocalCache$Segment:newEntryArray(int)" : null,
  "com.google.common.reflect.ClassPath$LocationInfo:scanResources(java.util.Set)" : "* Scans this location and returns all scanned resources.\n     *\n     * <p>This file and jar files from \"Class-Path\" entry in the scanned manifest files will be\n     * added to {@code scannedFiles}.\n     *\n     * <p>A file will be scanned at most once even if specified multiple times by one or multiple\n     * jar files' \"Class-Path\" manifest entries. Particularly, if a jar file from the \"Class-Path\"\n     * manifest entry is already in {@code scannedFiles}, either because it was scanned earlier, or\n     * it was intentionally added to the set by the caller, it will not be scanned again.\n     *\n     * <p>Note that when you call {@code location.scanResources(scannedFiles)}, the location will\n     * always be scanned even if {@code scannedFiles} already contains it.",
  "com.google.common.collect.ForwardingSortedSet:headSet(java.lang.Object)" : null,
  "com.google.common.collect.DiscreteDomain$IntegerDomain:offset(java.lang.Integer,long)" : null,
  "com.google.common.cache.LocalCache$EntryFactory$8:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* Creates a new entry.\n     *\n     * @param segment to create the entry for\n     * @param key of the entry\n     * @param hash of the key\n     * @param next entry in the same bucket",
  "com.google.common.base.Functions$FunctionForMapNoDefault:hashCode()" : null,
  "com.google.common.collect.CompactLinkedHashSet:create(java.util.Collection)" : "* Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the\n   * given collection in the order returned by the collection's iterator.\n   *\n   * @param collection the elements that the set should contain\n   * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)",
  "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isDone()" : null,
  "com.google.common.primitives.Doubles$DoubleArrayAsList:subList(int,int)" : null,
  "com.google.common.collect.ImmutableRangeSet$Builder:addAll(java.lang.Iterable)" : "* Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be\n     * merged, but overlapping ranges will cause an exception when {@link #build()} is called.\n     *\n     * @throws IllegalArgumentException if any inserted ranges are empty\n     * @since 21.0",
  "com.google.common.collect.CompactHashMap$EntrySetView:map()" : null,
  "com.google.common.util.concurrent.Striped$LargeLazyStriped:getAt(int)" : null,
  "com.google.common.collect.SortedMultisets:getElementOrNull(com.google.common.collect.Multiset$Entry)" : null,
  "com.google.common.collect.AbstractBiMap$KeySet:delegate()" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:getEntry(int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:valueSpliterator()" : null,
  "com.google.common.collect.Iterators:filter(java.util.Iterator,com.google.common.base.Predicate)" : "* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate\n   * {@code retainIfTrue}.",
  "com.google.common.util.concurrent.AtomicDouble:toString()" : "* Returns the String representation of the current value.\n   *\n   * @return the String representation of the current value",
  "com.google.common.collect.TreeRangeMap$1:<init>()" : null,
  "com.google.common.collect.Sets$FilteredSortedSet:tailSet(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$NullEntry:setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.TreeMultimap:create(java.util.Comparator,java.util.Comparator)" : "* Creates an empty {@code TreeMultimap} instance using explicit comparators. Neither comparator\n   * may be null; use {@link Ordering#natural()} to specify natural order.\n   *\n   * @param keyComparator the comparator that determines the key ordering\n   * @param valueComparator the comparator that determines the value ordering",
  "com.google.common.net.HostAndPort:fromHost(java.lang.String)" : "* Build a HostAndPort instance from a host only.\n   *\n   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to\n   * prohibit these.\n   *\n   * @param host the host-only string to parse. Must not contain a port number.\n   * @return if parsing was successful, a populated HostAndPort object.\n   * @throws IllegalArgumentException if {@code host} contains a port number.\n   * @since 17.0",
  "com.google.common.primitives.Booleans:compare(boolean,boolean)" : "* Compares the two specified {@code boolean} values in the standard way ({@code false} is\n   * considered less than {@code true}). The sign of the value returned is the same as that of\n   * {@code ((Boolean) a).compareTo(b)}.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the\n   * equivalent {@link Boolean#compare} method instead.\n   *\n   * @param a the first {@code boolean} to compare\n   * @param b the second {@code boolean} to compare\n   * @return a positive number if only {@code a} is {@code true}, a negative number if only {@code\n   *     b} is true, or zero if {@code a == b}",
  "com.google.common.util.concurrent.AbstractService:toString()" : null,
  "com.google.common.util.concurrent.AbstractService:doCancelStart()" : "* This method is called by {@link #stopAsync} when the service is still starting (i.e. {@link\n   * #startAsync} has been called but {@link #notifyStarted} has not). Subclasses can override the\n   * method to cancel pending work and then call {@link #notifyStopped} to stop the service.\n   *\n   * <p>This method should return promptly; prefer to do work on a different thread where it is\n   * convenient. It is invoked exactly once on service shutdown, even when {@link #stopAsync} is\n   * called multiple times.\n   *\n   * <p>When this method is called {@link #state()} will return {@link State#STOPPING}, which is the\n   * external state observable by the caller of {@link #stopAsync}.\n   *\n   * @since 27.0",
  "com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.Graph)" : "Returns an immutable copy of {@code graph}.",
  "com.google.common.primitives.Chars:sortDescending(char[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order.\n   *\n   * @since 23.1",
  "com.google.common.collect.Maps$FilteredMapValues:toArray(java.lang.Object[])" : null,
  "com.google.common.net.PercentEscaper:escape(int)" : "Escapes the given Unicode code point in UTF-8.",
  "com.google.common.primitives.Ints:indexOf(int[],int)" : "* Returns the index of the first appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code int} values, possibly empty\n   * @param target a primitive {@code int} value\n   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.Collections2$TransformedCollection:size()" : null,
  "com.google.common.collect.AbstractSetMultimap:createUnmodifiableEmptyCollection()" : null,
  "com.google.common.collect.ForwardingNavigableMap:lastEntry()" : null,
  "com.google.common.util.concurrent.AggregateFuture:pendingToString()" : null,
  "com.google.common.primitives.ImmutableLongArray:readResolve()" : null,
  "com.google.common.graph.ImmutableGraph:successors(java.lang.Object)" : null,
  "com.google.common.cache.CacheStats:evictionCount()" : "* Returns the number of times an entry has been evicted. This count does not include manual\n   * {@linkplain Cache#invalidate invalidations}.",
  "com.google.common.collect.Multimaps$AsMap:removeValuesForKey(java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Builder:expectedSize(int)" : "* Configures this builder to build min-max priority queues with an initial expected size of\n     * {@code expectedSize}.",
  "com.google.common.base.Equivalence:onResultOf(com.google.common.base.Function)" : "* Returns a new equivalence relation for {@code F} which evaluates equivalence by first applying\n   * {@code function} to the argument, then evaluating using {@code this}. That is, for any pair of\n   * non-null objects {@code x} and {@code y}, {@code equivalence.onResultOf(function).equivalent(a,\n   * b)} is true if and only if {@code equivalence.equivalent(function.apply(a), function.apply(b))}\n   * is true.\n   *\n   * <p>For example:\n   *\n   * {@snippet :\n   * Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);\n   * }\n   *\n   * <p>{@code function} will never be invoked with a null value.\n   *\n   * <p>Note that {@code function} must be consistent according to {@code this} equivalence\n   * relation. That is, invoking {@link Function#apply} multiple times for a given value must return\n   * equivalent results. For example, {@code\n   * Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's not\n   * guaranteed that {@link Object#toString}) always returns the same string instance.\n   *\n   * @since 10.0",
  "com.google.common.collect.AbstractMultimap:valueIterator()" : null,
  "com.google.common.cache.CacheStats:hitRate()" : "* Returns the ratio of cache requests which were hits. This is defined as {@code hitCount /\n   * requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate +\n   * missRate =~ 1.0}.",
  "com.google.common.cache.CacheStats:loadExceptionCount()" : "* Returns the number of times {@link Cache} lookup methods threw an exception while loading a new\n   * value. This is usually incremented in conjunction with {@code missCount}, though {@code\n   * missCount} is also incremented when cache loading completes successfully (see {@link\n   * #loadSuccessCount}). Multiple concurrent misses for the same key will result in a single load\n   * operation. This may be incremented not in conjunction with {@code missCount} if the load occurs\n   * as a result of a refresh or if the cache loader returned more items than was requested. {@code\n   * missCount} may also be incremented not in conjunction with this (nor {@link #loadSuccessCount})\n   * on calls to {@code getIfPresent}.",
  "com.google.common.math.LongMath:saturatedPow(long,int)" : null,
  "com.google.common.collect.FilteredEntryMultimap:createValues()" : null,
  "com.google.common.util.concurrent.ForwardingCondition:awaitUninterruptibly()" : null,
  "com.google.common.cache.LocalCache$Segment:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)" : null,
  "com.google.common.graph.MapIteratorCache:clear()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingSet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:listIterator(int)" : null,
  "com.google.common.collect.Lists$Partition:size()" : null,
  "com.google.common.collect.MultimapBuilder:linkedHashKeys(int)" : "* Uses an hash table to map keys to value collections, initialized to expect the specified number\n   * of keys.\n   *\n   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link\n   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the\n   * multimap, save that if all values associated with a key are removed and then the key is added\n   * back into the multimap, that key will come last in the key iteration order.",
  "com.google.common.math.LinearTransformation$NaNLinearTransformation:transform(double)" : null,
  "com.google.common.hash.MessageDigestHashFunction:newHasher()" : null,
  "com.google.common.collect.ImmutableRangeMap$Builder:combine(com.google.common.collect.ImmutableRangeMap$Builder)" : null,
  "com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(java.util.Map,int,int,java.lang.String)" : "* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified\n   * safe range. If {@code safeMax < safeMin} then no code points are considered safe.\n   *\n   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it\n   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.\n   *\n   * @param replacementMap a map of characters to their escaped representations\n   * @param safeMin the lowest character value in the safe range\n   * @param safeMax the highest character value in the safe range\n   * @param unsafeReplacement the default replacement for unsafe characters or null if no default\n   *     replacement is required",
  "com.google.common.base.Functions:forSupplier(com.google.common.base.Supplier)" : "* Returns a function that ignores its input and returns the result of {@code supplier.get()}.\n   *\n   * <p>Prefer to use the lambda expression {@code o -> supplier.get()} instead. Note that it is not\n   * serializable unless you explicitly make it {@link Serializable}, typically by writing {@code\n   * (Function<F, T> & Serializable) o -> supplier.get()}.\n   *\n   * @since 10.0",
  "com.google.common.util.concurrent.ImmediateFuture:toString()" : null,
  "com.google.common.collect.CompactHashMap$MapEntry:getKey()" : null,
  "com.google.common.hash.Hashing$LinearCongruentialGenerator:<init>(long)" : null,
  "com.google.common.base.Predicates$ContainsPatternPredicate:apply(java.lang.CharSequence)" : null,
  "com.google.common.collect.Maps$ValueDifferenceImpl:hashCode()" : null,
  "com.google.common.cache.AbstractCache:asMap()" : null,
  "com.google.common.reflect.TypeToken$1:getGenericReturnType()" : null,
  "com.google.common.collect.ImmutableMap:of()" : "* Returns the empty map. This map behaves and performs comparably to {@link\n   * Collections#emptyMap}, and is preferable mainly for consistency and maintainability of your\n   * code.\n   *\n   * <p><b>Performance note:</b> the instance returned is a singleton.",
  "com.google.common.graph.ImmutableGraph:predecessors(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableList:sortedCopyOf(java.util.Comparator,java.lang.Iterable)" : "* Returns an immutable list containing the given elements, in sorted order relative to the\n   * specified comparator. The sorting algorithm used is stable, so elements that compare as equal\n   * will stay in the order in which they appear in the input.\n   *\n   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code\n   * ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its\n   * {@code asList()} view.\n   *\n   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted\n   * {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}.\n   *\n   * @throws NullPointerException if any element in the input is null\n   * @since 21.0",
  "com.google.common.collect.Lists:newArrayListWithCapacity(int)" : "* Creates an {@code ArrayList} instance backed by an array with the specified initial size;\n   * simply delegates to {@link ArrayList#ArrayList(int)}.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use {@code new }{@link ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking\n   * advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>. (Unlike here, there is no risk of overload ambiguity, since the {@code ArrayList}\n   * constructors very wisely did not accept varargs.)\n   *\n   * @param initialArraySize the exact size of the initial backing array for the returned array list\n   *     ({@code ArrayList} documentation calls this value the \"capacity\")\n   * @return a new, empty {@code ArrayList} which is guaranteed not to resize itself unless its size\n   *     reaches {@code initialArraySize + 1}\n   * @throws IllegalArgumentException if {@code initialArraySize} is negative",
  "com.google.common.collect.AbstractTable$Values:spliterator()" : null,
  "com.google.common.util.concurrent.Runnables$1:<init>()" : null,
  "com.google.common.collect.AbstractBiMap$KeySet:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.Streams:findLast(java.util.stream.DoubleStream)" : "* Returns the last element of the specified stream, or {@link OptionalDouble#empty} if the stream\n   * is empty.\n   *\n   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This\n   * method's runtime will be between O(log n) and O(n), performing better on <a\n   * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n   * streams.\n   *\n   * @see DoubleStream#findFirst()\n   * @throws NullPointerException if the last element of the stream is null",
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:size()" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.base.Enums:getEnumConstants(java.lang.Class)" : null,
  "com.google.common.collect.MapMakerInternalMap:segmentFor(int)" : "* Returns the segment that should be used for a key with the given hash.\n   *\n   * @param hash the hash code for the key\n   * @return the segment",
  "com.google.common.collect.Cut$BelowAll:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.hash.Hashing:consistentHash(com.google.common.hash.HashCode,int)" : "* Assigns to {@code hashCode} a \"bucket\" in the range {@code [0, buckets)}, in a uniform manner\n   * that minimizes the need for remapping as {@code buckets} grows. That is, {@code\n   * consistentHash(h, n)} equals:\n   *\n   * <ul>\n   *   <li>{@code n - 1}, with approximate probability {@code 1/n}\n   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})\n   * </ul>\n   *\n   * <p>This method is suitable for the common use case of dividing work among buckets that meet the\n   * following conditions:\n   *\n   * <ul>\n   *   <li>You want to assign the same fraction of inputs to each bucket.\n   *   <li>When you reduce the number of buckets, you can accept that the most recently added\n   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,\n   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and\n   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among\n   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to\n   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides\n   *       no way for you to specify which of the three buckets is disappearing. Thus, if your\n   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will\n   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}\n   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.\n   * </ul>\n   *\n   * <p>See the <a href=\"http://en.wikipedia.org/wiki/Consistent_hashing\">Wikipedia article on\n   * consistent hashing</a> for more information.",
  "com.google.common.collect.Maps:newEnumMap(java.lang.Class)" : "* Creates an {@code EnumMap} instance.\n   *\n   * @param type the key type for this map\n   * @return a new, empty {@code EnumMap}",
  "com.google.common.base.VerifyException:<init>()" : "Constructs a {@code VerifyException} with no message.",
  "com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)" : null,
  "com.google.common.util.concurrent.AtomicDouble:writeObject(java.io.ObjectOutputStream)" : "* Saves the state to a stream (that is, serializes it).\n   *\n   * @serialData The current value is emitted (a {@code double}).",
  "com.google.common.collect.ReverseOrdering:<init>(com.google.common.collect.Ordering)" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,long)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.ArrayTable:toString()" : "Returns the string representation {@code rowMap().toString()}.",
  "com.google.common.collect.RegularImmutableMap$Values$SerializedForm:<init>(com.google.common.collect.ImmutableMap)" : null,
  "com.google.common.collect.NullsLastOrdering:toString()" : null,
  "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future,java.util.concurrent.Executor)" : null,
  "com.google.common.collect.Sets$FilteredNavigableSet:pollFirst()" : null,
  "com.google.common.cache.LocalCache$NullEntry:setNextInWriteQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.ComparisonChain$1:compare(long,long)" : "* Compares two {@code long} values as specified by {@link Long#compare}, <i>if</i> the result of\n   * this comparison chain has not already been determined.",
  "com.google.common.collect.ArrayTable:<init>(com.google.common.collect.ArrayTable)" : null,
  "com.google.common.collect.SortedMultisets$NavigableElementSet:higher(java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultiset:<init>(int)" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:hashCode()" : null,
  "com.google.common.util.concurrent.ClosingFuture$CloseableList:close()" : null,
  "com.google.common.collect.Multimaps:newMultimap(java.util.Map,com.google.common.base.Supplier)" : "* Creates a new {@code Multimap} backed by {@code map}, whose internal value collections are\n   * generated by {@code factory}. Most users should prefer {@link MultimapBuilder}, though a small\n   * number of users will need this method to cover map or collection types that {@link\n   * MultimapBuilder} does not support.\n   *\n   * <p><b>Warning: do not use</b> this method when the collections returned by {@code factory}\n   * implement either {@link List} or {@code Set}! Use the more specific method {@link\n   * #newListMultimap}, {@link #newSetMultimap} or {@link #newSortedSetMultimap} instead, to avoid\n   * very surprising behavior from {@link Multimap#equals}.\n   *\n   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration\n   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code\n   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}\n   * method returns instances of a different class than {@code factory.get()} does.\n   *\n   * <p>The multimap is serializable if {@code map}, {@code factory}, the collections generated by\n   * {@code factory}, and the multimap contents are all serializable.\n   *\n   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if\n   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will\n   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link\n   * #synchronizedMultimap}.\n   *\n   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()}, {@link\n   * HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link\n   * LinkedListMultimap#create()}, {@link TreeMultimap#create()}, and {@link\n   * TreeMultimap#create(Comparator, Comparator)} won't suffice.\n   *\n   * <p>Note: the multimap assumes complete ownership over of {@code map} and the collections\n   * returned by {@code factory}. Those objects should not be manually updated and they should not\n   * use soft, weak, or phantom references.\n   *\n   * @param map place to store the mapping from each key to its corresponding values\n   * @param factory supplier of new, empty collections that will each hold all values for a given\n   *     key\n   * @throws IllegalArgumentException if {@code map} is not empty",
  "com.google.common.collect.ImmutableMultimap:entries()" : "Returns an immutable collection of all key-value pairs in the multimap.",
  "com.google.common.graph.Traverser$Traversal:<init>(com.google.common.graph.SuccessorsFunction)" : null,
  "com.google.common.collect.StandardTable$RowMap$EntrySet:remove(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset$1:getElement()" : null,
  "com.google.common.collect.TreeRangeSet:remove(com.google.common.collect.Range)" : null,
  "com.google.common.primitives.UnsignedInteger:toString()" : "Returns a string representation of the {@code UnsignedInteger} value, in base 10.",
  "com.google.common.collect.ImmutableSortedMap:lastKey()" : null,
  "com.google.common.collect.Tables$TransposeTable:columnMap()" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:comparator()" : null,
  "com.google.common.collect.ForwardingSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String,int)" : "* Returns the unsigned {@code int} value represented by a string with the given radix.\n   *\n   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String, int)} instead.\n   *\n   * @param string the string containing the unsigned integer representation to be parsed.\n   * @param radix the radix to use while parsing {@code s}; must be between {@link\n   *     Character#MIN_RADIX} and {@link Character#MAX_RADIX}.\n   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or\n   *     if supplied radix is invalid.\n   * @throws NullPointerException if {@code s} is null (in contrast to {@link\n   *     Integer#parseInt(String)})",
  "com.google.common.graph.StandardMutableValueGraph:addNode(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Segment:recordWrite(com.google.common.cache.ReferenceEntry,int,long)" : "* Updates eviction metadata that {@code entry} was just written. This currently amounts to\n     * adding {@code entry} to relevant eviction lists.",
  "com.google.common.primitives.ImmutableLongArray$Builder:ensureRoomFor(int)" : null,
  "com.google.common.collect.ImmutableSet$Builder:<init>(int)" : null,
  "com.google.common.collect.ForwardingMap:standardEquals(java.lang.Object)" : "* A sensible definition of {@link #equals} in terms of the {@code equals} method of {@link\n   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #equals} to\n   * forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.cache.LocalCache$AccessQueue:size()" : null,
  "com.google.common.collect.StandardTable$Column:removeFromColumnIf(com.google.common.base.Predicate)" : "Removes all {@code Column} mappings whose row key and value satisfy the given predicate.",
  "com.google.common.collect.Maps$FilteredMapValues:toArray()" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:readMapMaker(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.CompactHashSet:iterator()" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$2:getRawType(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeSet:isEmpty()" : null,
  "com.google.common.graph.UndirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.StandardNetwork:edgeOrder()" : null,
  "com.google.common.primitives.ImmutableIntArray:copyOf(java.lang.Iterable)" : "* Returns an immutable array containing the given values, in order.\n   *\n   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code\n   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link\n   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",
  "com.google.common.collect.Maps$TransformedEntriesMap:entryIterator()" : null,
  "com.google.common.primitives.Shorts:lastIndexOf(short[],short,int,int)" : null,
  "com.google.common.base.Functions:forMap(java.util.Map)" : "* Returns a function which performs a map lookup. The returned function throws an {@link\n   * IllegalArgumentException} if given a key that does not exist in the map. See also {@link\n   * #forMap(Map, Object)}, which returns a default value in this case.\n   *\n   * <p>Note: if {@code map} is a {@link com.google.common.collect.BiMap BiMap} (or can be one), you\n   * can use {@link com.google.common.collect.Maps#asConverter Maps.asConverter} instead to get a\n   * function that also supports reverse conversion.\n   *\n   * <p>If you are okay with {@code null} being returned for an unrecognized key (instead of an\n   * exception being thrown), you can use the method reference {@code map::get} instead. Note that\n   * it is not serializable unless you explicitly make it {@link Serializable}, typically by writing\n   * {@code (Function<K, V> & Serializable) map::get}.",
  "com.google.common.collect.Iterables:limit(java.lang.Iterable,int)" : "* Returns a view of {@code iterable} containing its first {@code limitSize} elements. If {@code\n   * iterable} contains fewer than {@code limitSize} elements, the returned view contains all of its\n   * elements. The returned iterable's iterator supports {@code remove()} if {@code iterable}'s\n   * iterator does.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit}\n   *\n   * @param iterable the iterable to limit\n   * @param limitSize the maximum number of elements in the returned iterable\n   * @throws IllegalArgumentException if {@code limitSize} is negative\n   * @since 3.0",
  "com.google.common.io.ByteSource$ByteArrayByteSource:copyTo(java.io.OutputStream)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService:failureCause()" : "* @since 14.0",
  "com.google.common.io.LittleEndianDataOutputStream:writeInt(int)" : "* Writes an {@code int} as specified by {@link DataOutputStream#writeInt(int)}, except using\n   * little-endian byte order.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.io.ByteSource$AsCharSource:openStream()" : null,
  "com.google.common.collect.Sets$FilteredSortedSet:subSet(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ReverseNaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardFloorEntry(java.lang.Object)" : "* A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link\n   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code\n   * floorEntry} to forward to this implementation.",
  "com.google.common.base.StandardSystemProperty:value()" : "* Returns the current value for this system property by delegating to {@link\n   * System#getProperty(String)}.\n   *\n   * <p>The value returned by this method is non-null except in rare circumstances:\n   *\n   * <ul>\n   *   <li>{@link #JAVA_EXT_DIRS} was deprecated in Java 8 and removed in Java 9. We have not\n   *       confirmed whether it is available under older versions.\n   *   <li>{@link #JAVA_COMPILER}, while still listed as required as of Java 15, is typically not\n   *       available even under older version.\n   *   <li>Any property may be cleared through APIs like {@link System#clearProperty}.\n   *   <li>Unusual environments like GWT may have their own special handling of system properties.\n   * </ul>\n   *\n   * <p>Note that {@code StandardSystemProperty} does not provide constants for more recently added\n   * properties, including:\n   *\n   * <ul>\n   *   <li>{@code java.vendor.version} (added in Java 11, listed as optional as of Java 13)\n   *   <li>{@code jdk.module.*} (added in Java 9, optional)\n   * </ul>",
  "com.google.common.math.LinearTransformation$RegularLinearTransformation:inverse()" : null,
  "com.google.common.io.BaseEncoding$Base64Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)" : null,
  "com.google.common.base.CaseFormat$3:normalizeFirstWord(java.lang.String)" : null,
  "com.google.common.graph.ElementOrder:comparator()" : "* Returns the {@link Comparator} used.\n   *\n   * @throws UnsupportedOperationException if comparator is not defined",
  "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:mixK1(long)" : null,
  "com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.Network)" : "Returns an immutable copy of {@code network}.",
  "com.google.common.collect.Lists$CharSequenceAsList:get(int)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:tryCrossOverAndBubbleUp(int,int,java.lang.Object)" : "* Tries to move {@code toTrickle} from a min to a max level and bubble up there. If it moved\n     * before {@code removeIndex} this method returns a pair as described in {@link #removeAt}.",
  "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList)" : null,
  "com.google.common.collect.Iterators:unmodifiableIterator(java.util.Iterator)" : "Returns an unmodifiable view of {@code iterator}.",
  "com.google.common.collect.GeneralRange:hashCode()" : null,
  "com.google.common.collect.Cut$BelowAll:describeAsUpperBound(java.lang.StringBuilder)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap:seekByKey(java.lang.Object,int)" : null,
  "com.google.common.collect.AbstractBiMap$Inverse:readResolve()" : null,
  "com.google.common.collect.Synchronized$SynchronizedObject:writeObject(java.io.ObjectOutputStream)" : null,
  "com.google.common.collect.LinkedListMultimap:createValues()" : null,
  "com.google.common.util.concurrent.ServiceManager:<init>(java.lang.Iterable)" : "* Constructs a new instance for managing the given services.\n   *\n   * @param services The services to manage\n   * @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there\n   *     are any duplicate services.",
  "com.google.common.collect.TreeRangeMap$1:remove(com.google.common.collect.Range)" : null,
  "com.google.common.primitives.Shorts:sortDescending(short[])" : "* Sorts the elements of {@code array} in descending order.\n   *\n   * @since 23.1",
  "com.google.common.collect.ArrayTable$Column:setValue(int,java.lang.Object)" : null,
  "com.google.common.eventbus.SubscriberRegistry:flattenHierarchy(java.lang.Class)" : "* Flattens a class's type hierarchy into a set of {@code Class} objects including all\n   * superclasses (transitively) and all interfaces implemented by these superclasses.",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollLastEntry()" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.TreeMultiset$Aggregate$1:treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:add(int,java.lang.Object)" : null,
  "com.google.common.collect.NaturalOrdering:nullsFirst()" : null,
  "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:build(com.google.common.collect.Multimap)" : null,
  "com.google.common.base.CharMatcher$JavaLetter:negate()" : null,
  "com.google.common.collect.ImmutableTable:putAll(com.google.common.collect.Table)" : "* Guaranteed to throw an exception and leave the table unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.Absent:or(com.google.common.base.Optional)" : null,
  "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:size()" : null,
  "com.google.common.collect.LinkedListMultimap$NodeIterator:hasNext()" : null,
  "com.google.common.primitives.UnsignedLong:toString()" : "Returns a string representation of the {@code UnsignedLong} value, in base 10.",
  "com.google.common.collect.ImmutableMapValues:forEach(java.util.function.Consumer)" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.AbstractNavigableMap:ceilingKey(java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$CellIterator:remove()" : null,
  "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:get()" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$ColumnKeySet:retainAll(java.util.Collection)" : null,
  "com.google.common.math.Stats:writeTo(java.nio.ByteBuffer)" : "* Writes to the given {@link ByteBuffer} a byte representation of this instance.\n   *\n   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between\n   * versions.\n   *\n   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as\n   *     {@link ByteOrder#LITTLE_ENDIAN}, to which a BYTES-long byte representation of this instance\n   *     is written. In the process increases the position of {@link ByteBuffer} by BYTES.",
  "com.google.common.collect.StandardTable:cellSpliterator()" : null,
  "com.google.common.collect.ArrayTable:eraseAll()" : "Associates the value {@code null} with every pair of allowed row and column keys.",
  "com.google.common.collect.Tables$UnmodifiableTable:<init>(com.google.common.collect.Table)" : null,
  "com.google.common.collect.SortedMultisets$ElementSet:tailSet(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ClosingFuture:compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)" : null,
  "com.google.common.collect.Multimaps:synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap)" : "* Returns a synchronized (thread-safe) {@code SortedSetMultimap} backed by the specified\n   * multimap.\n   *\n   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.\n   *\n   * <p>The returned multimap will be serializable if the specified multimap is serializable.\n   *\n   * @param multimap the multimap to be wrapped\n   * @return a synchronized view of the specified multimap",
  "com.google.common.util.concurrent.AggregateFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,boolean)" : null,
  "com.google.common.reflect.TypeToken:resolveType(java.lang.reflect.Type)" : "* Resolves the given {@code type} against the type context represented by this type. For example:\n   *\n   * {@snippet :\n   * new TypeToken<List<String>>() {}.resolveType(\n   *     List.class.getMethod(\"get\", int.class).getGenericReturnType())\n   * => String.class\n   * }",
  "com.google.common.cache.CacheBuilder:getExpireAfterWriteNanos()" : null,
  "com.google.common.graph.ImmutableGraph:degree(java.lang.Object)" : null,
  "com.google.common.util.concurrent.SequentialExecutor$QueueWorker:workOnQueue()" : "* Continues executing tasks from {@link #queue} until it is empty.\n     *\n     * <p>The thread's interrupt bit is cleared before execution of each task.\n     *\n     * <p>If the Thread in use is interrupted before or during execution of the tasks in {@link\n     * #queue}, the Executor will complete its tasks, and then restore the interruption. This means\n     * that once the Thread returns to the Executor that this Executor composes, the interruption\n     * will still be present. If the composed Executor is an ExecutorService, it can respond to\n     * shutdown() by returning tasks queued on that Thread after {@link #worker} drains the queue.",
  "com.google.common.collect.CompactHashing:<init>()" : null,
  "com.google.common.hash.AbstractByteHasher:update(int)" : "Updates the sink with the given number of bytes from the buffer.",
  "com.google.common.graph.ValueGraph:successors(java.lang.Object)" : "* Returns a live view of all nodes in this graph adjacent to {@code node} which can be reached by\n   * traversing {@code node}'s outgoing edges in the direction (if any) of the edge.\n   *\n   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.\n   *\n   * <p>This is <i>not</i> the same as \"all nodes reachable from {@code node} by following outgoing\n   * edges\". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.\n   *\n   * <p>If {@code node} is removed from the graph after this method is called, the {@code Set}\n   * {@code view} returned by this method will be invalidated, and will throw {@code\n   * IllegalStateException} if it is accessed in any way, with the following exceptions:\n   *\n   * <ul>\n   *   <li>{@code view.equals(view)} evaluates to {@code true} (but any other {@code equals()}\n   *       expression involving {@code view} will throw)\n   *   <li>{@code hashCode()} does not throw\n   *   <li>if {@code node} is re-added to the graph after having been removed, {@code view}'s\n   *       behavior is undefined\n   * </ul>\n   *\n   * @throws IllegalArgumentException if {@code node} is not an element of this graph",
  "com.google.common.collect.ContiguousSet:headSet(java.lang.Object,boolean)" : "* @since 12.0",
  "com.google.common.collect.ImmutableRangeMap$SerializedForm:readResolve()" : null,
  "com.google.common.collect.CompactLinkedHashMap:setPredecessor(int,int)" : null,
  "com.google.common.collect.EvictingQueue:add(java.lang.Object)" : "* Adds the given element to this queue. If the queue is currently full, the element at the head\n   * of the queue is evicted to make room.\n   *\n   * @return {@code true} always",
  "com.google.common.util.concurrent.ForwardingCondition:awaitNanos(long)" : null,
  "com.google.common.collect.ImmutableBiMap$Builder:put(java.lang.Object,java.lang.Object)" : "* Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are\n     * not allowed, and will cause {@link #build} to fail.",
  "com.google.common.util.concurrent.AbstractFuture:toString()" : null,
  "com.google.common.collect.ImmutableRangeMap:asDescendingMapOfRanges()" : null,
  "com.google.common.util.concurrent.ForwardingFuture:isDone()" : null,
  "com.google.common.collect.AbstractSortedSetMultimap:values()" : "* {@inheritDoc}\n   *\n   * <p>Consequently, the values do not follow their natural ordering or the ordering of the value\n   * comparator.",
  "com.google.common.base.Predicates$AndPredicate:<init>(java.util.List)" : null,
  "com.google.common.reflect.TypeResolver$TypeTable:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)" : "* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another\n     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which\n     * doesn't try to resolve any type variable on generic declarations that are already being\n     * resolved.\n     *\n     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",
  "com.google.common.collect.Maps$UnmodifiableBiMap:inverse()" : null,
  "com.google.common.collect.TreeTraverser:postOrderIterator(java.lang.Object)" : null,
  "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:update(int,long)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch,java.time.Duration)" : "* Invokes {@code latch.}{@link CountDownLatch#await(long, TimeUnit) await(timeout, unit)}\n   * uninterruptibly.\n   *\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ForwardingMultimap:keySet()" : null,
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:removeAll(java.util.Collection)" : null,
  "com.google.common.math.PairedStats:count()" : "Returns the number of pairs in the dataset.",
  "com.google.common.base.Functions$ForMapWithDefault:hashCode()" : null,
  "com.google.common.graph.Graphs:transpose(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.collect.Serialization:populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int)" : "* Populates a multimap by reading an input stream, as part of deserialization. See {@link\n   * #writeMultimap} for the data format. The number of distinct keys is determined by a prior call\n   * to {@link #readCount}.",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:unlock()" : null,
  "com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:<init>(com.google.common.util.concurrent.ClosingFuture)" : null,
  "com.google.common.collect.ContiguousSet:headSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.base.Predicates:asList(com.google.common.base.Predicate,com.google.common.base.Predicate)" : null,
  "com.google.common.collect.ForwardingList:standardHashCode()" : "* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override\n   * {@link #iterator}, you may wish to override {@link #hashCode} to forward to this\n   * implementation.\n   *\n   * @since 7.0",
  "com.google.common.graph.Traverser$2:newTraversal()" : null,
  "com.google.common.collect.ConcurrentHashMultiset:createEntrySet()" : "* @deprecated Internal method, use {@link #entrySet()}.",
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Splitter:omitEmptyStrings()" : "* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits\n   * empty strings from the results. For example, {@code\n   * Splitter.on(',').omitEmptyStrings().split(\",a,,,b,c,,\")} returns an iterable containing only\n   * {@code [\"a\", \"b\", \"c\"]}.\n   *\n   * <p>If either {@code trimResults} option is also specified when creating a splitter, that\n   * splitter always trims results first before checking for emptiness. So, for example, {@code\n   * Splitter.on(':').omitEmptyStrings().trimResults().split(\": : : \")} returns an empty iterable.\n   *\n   * <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty\n   * iterable, but when using this option, it can (if the input sequence consists of nothing but\n   * separators).\n   *\n   * @return a splitter with the desired configuration",
  "com.google.common.io.Resources$UrlByteSource:<init>(java.net.URL)" : null,
  "com.google.common.util.concurrent.TimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,java.time.Duration)" : "* Invokes a specified Callable, timing out after the specified time limit. If the target method\n   * call finishes before the limit is reached, the return value or a wrapped exception is\n   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to\n   * the target, and throw a {@link TimeoutException} to the caller.\n   *\n   * <p>The difference with {@link #callWithTimeout(Callable, Duration)} is that this method will\n   * ignore interrupts on the current thread.\n   *\n   * @param callable the Callable to execute\n   * @param timeout the maximum length of time to wait\n   * @return the result returned by the Callable\n   * @throws TimeoutException if the time limit is reached\n   * @throws ExecutionException if {@code callable} throws a checked exception\n   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}\n   * @throws ExecutionError if {@code callable} throws an {@code Error}\n   * @since 28.0",
  "com.google.common.collect.ForwardingNavigableMap:standardPollFirstEntry()" : "* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of {@code\n   * entrySet}. If you override {@code entrySet}, you may wish to override {@code pollFirstEntry} to\n   * forward to this implementation.",
  "com.google.common.collect.AbstractSortedKeySortedSetMultimap:backingMap()" : null,
  "com.google.common.collect.ImmutableListMultimap:get(java.lang.Object)" : "* Returns an immutable list of the values for the given key. If no mappings in the multimap have\n   * the provided key, an empty immutable list is returned. The values are in the same order as the\n   * parameters used to build this multimap.",
  "com.google.common.collect.Lists$TransformingRandomAccessList:remove(int)" : null,
  "com.google.common.collect.Interners$InternerFunction:apply(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ForwardingFuture:delegate()" : null,
  "com.google.common.collect.Hashing:smear(int)" : null,
  "com.google.common.collect.AbstractMultimap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$ColumnKeySet:remove(java.lang.Object)" : null,
  "com.google.common.collect.TransformedListIterator:set(java.lang.Object)" : null,
  "com.google.common.collect.EnumBiMap:forcePut(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableMap:floorEntry(java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:trimTrailingPadding(java.lang.CharSequence)" : null,
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:transform(java.lang.Object,java.util.Collection)" : null,
  "com.google.common.cache.CacheLoader:from(com.google.common.base.Supplier)" : "* Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need\n   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and\n   * implement {@link #load load} instead.\n   *\n   * <p>The returned object is serializable if {@code supplier} is serializable.\n   *\n   * @param supplier the supplier to be used for loading values; must never return {@code null}\n   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the\n   *     key",
  "com.google.common.cache.LocalCache:size()" : null,
  "com.google.common.net.MediaType:escapeAndQuote(java.lang.String)" : null,
  "com.google.common.cache.LocalCache$WeakEntry:getHash()" : null,
  "com.google.common.collect.AbstractBiMap$EntrySet:remove(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$Negated:setBits(java.util.BitSet)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readDouble()" : null,
  "com.google.common.collect.ImmutableMultiset$ElementSet:get(int)" : null,
  "com.google.common.graph.StandardNetwork:edgesConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MultimapBuilder:hashKeys(int)" : "* Uses a hash table to map keys to value collections, initialized to expect the specified number\n   * of keys.\n   *\n   * @throws IllegalArgumentException if {@code expectedKeys < 0}",
  "com.google.common.collect.ForwardingList:get(int)" : null,
  "com.google.common.graph.UndirectedGraphConnections:removeSuccessor(java.lang.Object)" : null,
  "com.google.common.base.Suppliers$SupplierComposition:equals(java.lang.Object)" : null,
  "com.google.common.collect.Sets:powerSet(java.util.Set)" : "* Returns the set of all possible subsets of {@code set}. For example, {@code\n   * powerSet(ImmutableSet.of(1, 2))} returns the set {@code {{}, {1}, {2}, {1, 2}}}.\n   *\n   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input\n   * set. The order in which these subsets appear in the outer set is undefined. Note that the power\n   * set of the empty set is not the empty set, but a one-element set containing the empty set.\n   *\n   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements\n   * are identical, even if the input set uses a different concept of equivalence.\n   *\n   * <p><i>Performance notes:</i> while the power set of a set with size {@code n} is of size {@code\n   * 2^n}, its memory usage is only {@code O(n)}. When the power set is constructed, the input set\n   * is merely copied. Only as the power set is iterated are the individual subsets created, and\n   * these subsets themselves occupy only a small constant amount of memory.\n   *\n   * @param set the set of elements to construct a power set from\n   * @return the power set, as an immutable set of immutable sets\n   * @throws IllegalArgumentException if {@code set} has more than 30 unique elements (causing the\n   *     power set size to exceed the {@code int} range)\n   * @throws NullPointerException if {@code set} is or contains {@code null}\n   * @see <a href=\"http://en.wikipedia.org/wiki/Power_set\">Power set article at Wikipedia</a>\n   * @since 4.0",
  "com.google.common.collect.CompactHashMap:resizeEntries(int)" : "* Resizes the internal entries array to the specified capacity, which may be greater or less than\n   * the current capacity.",
  "com.google.common.cache.CacheStats:plus(com.google.common.cache.CacheStats)" : "* Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code\n   * other}.\n   *\n   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is\n   * guaranteed not to throw an exception). If you require specific handling, we recommend\n   * implementing your own stats collector.\n   *\n   * @since 11.0",
  "com.google.common.collect.ImmutableSet$Builder:<init>()" : null,
  "com.google.common.collect.CompactHashSet:trimToSize()" : "* Ensures that this {@code CompactHashSet} has the smallest representation in memory, given its\n   * current size.",
  "com.google.common.graph.Traverser:breadthFirst(java.lang.Iterable)" : "* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code\n   * startNodes}, in the order of a breadth-first traversal. This is equivalent to a breadth-first\n   * traversal of a graph with an additional root node whose successors are the listed {@code\n   * startNodes}.\n   *\n   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph\n   * @see #breadthFirst(Object)\n   * @since 24.1",
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:addToMap()" : "* Add the delegate to the map. Other {@code WrappedCollection} methods should call this method\n     * after adding elements to a previously empty collection.\n     *\n     * <p>Subcollection add the ancestor's delegate instead.",
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:contains(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder)" : null,
  "com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>This method returns a serializable {@code ImmutableSortedSet}.\n   *\n   * <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link\n   * IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code\n   * fromElement}. However, this method doesn't throw an exception in that situation, but instead\n   * keeps the original {@code fromElement}. Similarly, this method keeps the original {@code\n   * toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an\n   * earlier {@code toElement}.",
  "com.google.common.collect.Synchronized$SynchronizedTable:cellSet()" : null,
  "com.google.common.collect.LinkedHashMultiset:forEachEntry(java.util.function.ObjIntConsumer)" : null,
  "com.google.common.util.concurrent.Futures:addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)" : "* Registers separate success and failure callbacks to be run when the {@code Future}'s\n   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the\n   * computation is already complete, immediately.\n   *\n   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of\n   * callbacks, but any callback added through this method is guaranteed to be called once the\n   * computation is complete.\n   *\n   * <p>Exceptions thrown by a {@code callback} will be propagated up to the executor. Any exception\n   * thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an\n   * exception thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught\n   * and logged.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * ListenableFuture<QueryResult> future = ...;\n   * Executor e = ...\n   * addCallback(future,\n   *     new FutureCallback<QueryResult>() {\n   *       public void onSuccess(QueryResult result) {\n   *         storeInCache(result);\n   *       }\n   *       public void onFailure(Throwable t) {\n   *         reportError(t);\n   *       }\n   *     }, e);\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the warnings the {@link MoreExecutors#directExecutor} documentation.\n   *\n   * <p>For a more general interface to attach a completion listener to a {@code Future}, see {@link\n   * ListenableFuture#addListener addListener}.\n   *\n   * @param future The future attach the callback to.\n   * @param callback The callback to invoke when {@code future} is completed.\n   * @param executor The executor to run {@code callback} when the future completes.\n   * @since 10.0",
  "com.google.common.cache.LocalCache$Segment:drainRecencyQueue()" : "* Drains the recency queue, updating eviction metadata that the entries therein were read in\n     * the specified relative order. This currently amounts to adding them to relevant eviction\n     * lists (accounting for the fact that they could have been removed from the map since being\n     * added to the recency queue).",
  "com.google.common.collect.RegularImmutableBiMap:fromEntryArray(int,java.util.Map$Entry[])" : null,
  "com.google.common.collect.Tables$TransformedTable:<init>(com.google.common.collect.Table,com.google.common.base.Function)" : null,
  "com.google.common.collect.CompactHashMap:<init>()" : "Constructs a new empty instance of {@code CompactHashMap}.",
  "com.google.common.reflect.Invokable$MethodInvokable:invokeInternal(java.lang.Object,java.lang.Object[])" : null,
  "com.google.common.primitives.Longs:rotate(long[],int)" : "* Performs a right rotation of {@code array} of \"distance\" places, so that the first element is\n   * moved to index \"distance\", and the element at index {@code i} ends up at index {@code (distance\n   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Longs.asList(array),\n   * distance)}, but is considerably faster and avoids allocation and garbage collection.\n   *\n   * <p>The provided \"distance\" may be negative, which will rotate left.\n   *\n   * @since 32.0.0",
  "com.google.common.collect.Range:rangeLexOrdering()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:tryLock()" : null,
  "com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.cache.LocalCache$LocalManualCache:putAll(java.util.Map)" : null,
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:<init>(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.ScheduledFuture)" : null,
  "com.google.common.collect.AbstractSortedMultiset:pollLastEntry()" : null,
  "com.google.common.collect.RegularImmutableMap$Values:size()" : null,
  "com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection)" : "* Returns an array containing all of the elements in the specified collection. This method\n   * returns the elements in the order they are returned by the collection's iterator. The returned\n   * array is \"safe\" in that no references to it are maintained by the collection. The caller is\n   * thus free to modify the returned array.\n   *\n   * <p>This method assumes that the collection size doesn't change while the method is running.\n   *\n   * <p>TODO(kevinb): support concurrently modified collections?\n   *\n   * @param c the collection for which to return an array of elements",
  "com.google.common.base.Platform:precomputeCharMatcher(com.google.common.base.CharMatcher)" : null,
  "com.google.common.primitives.Primitives:unwrap(java.lang.Class)" : "* Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise\n   * returns {@code type} itself. Idempotent.\n   *\n   * <pre>\n   *     unwrap(Integer.class) == int.class\n   *     unwrap(int.class) == int.class\n   *     unwrap(String.class) == String.class\n   * </pre>",
  "com.google.common.eventbus.AsyncEventBus:<init>(java.lang.String,java.util.concurrent.Executor)" : "* Creates a new AsyncEventBus that will use {@code executor} to dispatch events. Assigns {@code\n   * identifier} as the bus's name for logging purposes.\n   *\n   * @param identifier short name for the bus, for logging purposes.\n   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut\n   *     down the executor after the last event has been posted to this event bus.",
  "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:getKey()" : null,
  "com.google.common.base.CharMatcher$Any:trimFrom(java.lang.CharSequence)" : null,
  "com.google.common.cache.LocalCache$SoftValueReference:isLoading()" : null,
  "com.google.common.collect.RegularImmutableMap:<init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int)" : null,
  "com.google.common.collect.Multimaps$Keys:elementIterator()" : null,
  "com.google.common.base.Joiner:on(char)" : "Returns a joiner which automatically places {@code separator} between consecutive elements.",
  "com.google.common.collect.TreeRangeMap:asMapOfRanges()" : null,
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:trySplit()" : null,
  "com.google.common.util.concurrent.ClosingFuture$4:toString()" : null,
  "com.google.common.collect.Multisets$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableBiMap$Builder:buildJdkBacked()" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:findMin(int,int)" : "* Returns the index of minimum value between {@code index} and {@code index + len}, or {@code\n     * -1} if {@code index} is greater than {@code size}.",
  "com.google.common.util.concurrent.AtomicDoubleArray:set(int,double)" : "* Atomically sets the element at position {@code i} to the given value.\n   *\n   * @param i the index\n   * @param newValue the new value",
  "com.google.common.collect.ForwardingList:listIterator()" : null,
  "com.google.common.collect.LinkedListMultimap:clear()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:get(java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.Object)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * @param expression a boolean expression\n   * @param errorMessage the exception message to use if the check fails; will be converted to a\n   *     string using {@link String#valueOf(Object)}\n   * @throws IllegalArgumentException if {@code expression} is false",
  "com.google.common.base.CharMatcher$BreakingWhitespace:matches(char)" : null,
  "com.google.common.collect.StandardTable$Column$Values:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.CompactHashSet:init(int)" : "Pseudoconstructor for serialization support.",
  "com.google.common.collect.ForwardingListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.ForwardingMapEntry:delegate()" : null,
  "com.google.common.reflect.Types$JavaVersion$3:typeName(java.lang.reflect.Type)" : null,
  "com.google.common.collect.Ordering$IncomparableValueException:<init>(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:getValue()" : null,
  "com.google.common.util.concurrent.ForwardingExecutorService:execute(java.lang.Runnable)" : null,
  "com.google.common.base.Joiner$MapJoiner:join(java.util.Iterator)" : "* Returns a string containing the string representation of each entry in {@code entries}, using\n     * the previously configured separator and key-value separator.\n     *\n     * @since 11.0",
  "com.google.common.collect.CompactLinkedHashMap:getSuccessor(int)" : null,
  "com.google.common.base.CharMatcher$Whitespace:matches(char)" : null,
  "com.google.common.collect.TreeMultimap:valueComparator()" : null,
  "com.google.common.primitives.Longs:constrainToRange(long,long,long)" : "* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.\n   *\n   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned\n   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n   * value} is greater than {@code max}, {@code max} is returned.\n   *\n   * <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead. Note that that method is capable of\n   * constraining a {@code long} input to an {@code int} range.\n   *\n   * @param value the {@code long} value to constrain\n   * @param min the lower bound (inclusive) of the range to constrain {@code value} to\n   * @param max the upper bound (inclusive) of the range to constrain {@code value} to\n   * @throws IllegalArgumentException if {@code min > max}\n   * @since 21.0",
  "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:lastKey()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:getValue()" : null,
  "com.google.common.base.CharMatcher$FastMatcher:negate()" : null,
  "com.google.common.base.Converter:reverse()" : "* Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a\n   * value roughly equivalent to {@code a}.\n   *\n   * <p>The returned converter is serializable if {@code this} converter is.\n   *\n   * <p><b>Note:</b> you should not override this method. It is non-final for legacy reasons.",
  "com.google.common.base.Ascii:isLowerCase(char)" : "* Indicates whether {@code c} is one of the twenty-six lowercase ASCII alphabetic characters\n   * between {@code 'a'} and {@code 'z'} inclusive. All others (including non-ASCII characters)\n   * return {@code false}.",
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:get(long)" : null,
  "com.google.common.base.Platform:patternCompilerIsPcreLike()" : null,
  "com.google.common.reflect.TypeToken$2:toString()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ContiguousSet:closedOpen(long,long)" : "* Returns a contiguous set containing all {@code long} values from {@code lower} (inclusive) to\n   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the\n   * same values contained in {@code Range.closedOpen(lower, upper)}.)\n   *\n   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}\n   * @since 23.0",
  "com.google.common.collect.Maps$DescendingMap:lowerEntry(java.lang.Object)" : null,
  "com.google.common.graph.AbstractValueGraph:hashCode()" : null,
  "com.google.common.collect.Maps$DescendingMap:toString()" : null,
  "com.google.common.base.CharMatcher$JavaUpperCase:matches(char)" : null,
  "com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable set containing the given elements, minus duplicates, in the order each was\n   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n   * the first are ignored.",
  "com.google.common.collect.TransformedListIterator:previousIndex()" : null,
  "com.google.common.primitives.Bytes:reverse(byte[],int,int)" : "* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive. This is equivalent to {@code\n   * Collections.reverse(Bytes.asList(array).subList(fromIndex, toIndex))}, but is likely to be more\n   * efficient.\n   *\n   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or\n   *     {@code toIndex > fromIndex}\n   * @since 23.1",
  "com.google.common.collect.MapMakerInternalMap$Segment:maybeClearReferenceQueues()" : "Clears the reference queues used by this segment, if any.",
  "com.google.common.graph.AbstractGraph:hashCode()" : null,
  "com.google.common.collect.Iterables:paddedPartition(java.lang.Iterable,int)" : "* Divides an iterable into unmodifiable sublists of the given size, padding the final iterable\n   * with null values if necessary. For example, partitioning an iterable containing {@code [a, b,\n   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer\n   * iterable containing two inner lists of three elements each, all in the original order.\n   *\n   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}\n   * method.\n   *\n   * @param iterable the iterable to return a partitioned view of\n   * @param size the desired size of each partition\n   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided\n   *     into partitions (the final iterable may have trailing null elements)\n   * @throws IllegalArgumentException if {@code size} is nonpositive",
  "com.google.common.hash.Crc32cHashFunction:newHasher()" : null,
  "com.google.common.hash.HashCode$BytesHashCode:equalsSameBits(com.google.common.hash.HashCode)" : null,
  "com.google.common.collect.LinkedListMultimap:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.Cut$BelowAll:hashCode()" : null,
  "com.google.common.collect.ForwardingMultiset:standardEquals(java.lang.Object)" : "* A sensible, albeit inefficient, definition of {@link #equals} in terms of {@code\n   * entrySet().size()} and {@link #count}. If you override either of these methods, you may wish to\n   * override {@link #equals} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.Lists:newLinkedList(java.lang.Iterable)" : "* Creates a <i>mutable</i> {@code LinkedList} instance containing the given elements; a very thin\n   * shortcut for creating an empty list then calling {@link Iterables#addAll}.\n   *\n   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link\n   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link\n   * FluentIterable} and call {@code elements.toList()}.)\n   *\n   * <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently\n   * outperform {@code LinkedList} except in certain rare and specific situations. Unless you have\n   * spent a lot of time benchmarking your specific needs, use one of those instead.\n   *\n   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use\n   * the {@code LinkedList} {@linkplain LinkedList#LinkedList(Collection) constructor} directly,\n   * taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.",
  "com.google.common.collect.ImmutableMap$Builder:<init>()" : "* Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n     * ImmutableMap#builder}.",
  "com.google.common.collect.Synchronized$SynchronizedListMultimap:removeAll(java.lang.Object)" : null,
  "com.google.common.hash.SipHashFunction$SipHasher:process(java.nio.ByteBuffer)" : null,
  "com.google.common.util.concurrent.ExecutionList:executeListener(java.lang.Runnable,java.util.concurrent.Executor)" : "* Submits the given runnable to the given {@link Executor} catching and logging all {@linkplain\n   * RuntimeException runtime exceptions} thrown by the executor.",
  "com.google.common.base.Ascii:toLowerCase(char)" : "* If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character}, returns the\n   * lowercase equivalent. Otherwise returns the argument.",
  "com.google.common.collect.ForwardingSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.collect.MultimapBuilder:linkedHashKeys()" : "* Uses a hash table to map keys to value collections.\n   *\n   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link\n   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the\n   * multimap, save that if all values associated with a key are removed and then the key is added\n   * back into the multimap, that key will come last in the key iteration order.",
  "com.google.common.eventbus.SubscriberExceptionContext:getEvent()" : "* @return The event object that caused the subscriber to throw.",
  "com.google.common.primitives.Doubles:fpPattern()" : null,
  "com.google.common.collect.TreeMultiset:<init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.net.InternetDomainName:isRegistrySuffix()" : "* Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset\n   * of the Mozilla Foundation's <a href=\"http://publicsuffix.org/\">Public Suffix List</a> (PSL). A\n   * registry suffix is one under which Internet users can directly register names via a domain name\n   * registrar, and have such registrations lawfully protected by internet-governing bodies such as\n   * ICANN. Examples of registry suffixes include {@code com}, {@code co.uk}, and {@code\n   * pvt.k12.wy.us}. Examples of domain names that are <i>not</i> registry suffixes include {@code\n   * google.com} and {@code foo.co.uk}.\n   *\n   * <p>Registry suffixes are a proper subset of {@linkplain #isPublicSuffix() public suffixes}. The\n   * list of public suffixes additionally contains privately owned domain names under which Internet\n   * users can register subdomains. An example of a public suffix that is not a registry suffix is\n   * {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry\n   * suffixes, since domain name registries collectively control all internet domain names.\n   *\n   * <p>For considerations on whether the public suffix or registry suffix designation is more\n   * suitable for your application, see <a\n   * href=\"https://github.com/google/guava/wiki/InternetDomainNameExplained\">this article</a>.\n   *\n   * @return {@code true} if this domain name appears exactly on the public suffix list as part of\n   *     the registry suffix section (labelled \"ICANN\").\n   * @since 23.3",
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:equals(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)" : null,
  "com.google.common.collect.RegularImmutableAsList:get(int)" : null,
  "com.google.common.collect.HashMultimap:createCollection()" : "* {@inheritDoc}\n   *\n   * <p>Creates an empty {@code HashSet} for a collection of values for one key.\n   *\n   * @return a new {@code HashSet} containing a collection of values for one key",
  "com.google.common.cache.LocalCache:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:contains(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:outEdges(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultiset:of(java.lang.Object)" : "* Returns an immutable multiset containing a single element.\n   *\n   * @throws NullPointerException if the element is null\n   * @since 6.0 (source-compatible since 2.0)",
  "com.google.common.collect.CompactLinkedHashSet:getSuccessor(int)" : null,
  "com.google.common.collect.ImmutableSortedMap$Builder:put(java.lang.Object,java.lang.Object)" : "* Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the\n     * comparator (which might be the keys' natural order), are not allowed, and will cause {@link\n     * #build} to fail.",
  "com.google.common.cache.ForwardingCache:delegate()" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getNext()" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:set(java.lang.Object)" : null,
  "com.google.common.graph.Graphs:copyOf(com.google.common.graph.Graph)" : "Creates a mutable copy of {@code graph} with the same nodes and edges.",
  "com.google.common.graph.UndirectedMultiNetworkConnections:ofImmutable(java.util.Map)" : null,
  "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:<init>()" : null,
  "com.google.common.collect.ImmutableList$Builder:addAll(java.lang.Iterable)" : "* Adds each element of {@code elements} to the {@code ImmutableList}.\n     *\n     * @param elements the {@code Iterable} to add to the {@code ImmutableList}\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code elements} is null or contains a null element",
  "com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet)" : null,
  "com.google.common.hash.Funnels$ByteArrayFunnel:funnel(byte[],com.google.common.hash.PrimitiveSink)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:valueStrength()" : null,
  "com.google.common.collect.Maps:putAllImpl(java.util.Map,java.util.Map)" : "An implementation of {@link Map#putAll}.",
  "com.google.common.collect.Range:containsAll(java.lang.Iterable)" : "* Returns {@code true} if every element in {@code values} is {@linkplain #contains contained} in\n   * this range.",
  "com.google.common.hash.Hashing:hmacMd5(java.security.Key)" : "* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the\n   * MD5 (128 hash bits) hash function and the given secret key.\n   *\n   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other\n   * future-proof algorithms <a\n   * href=\"https://datatracker.ietf.org/doc/html/rfc6151#section-2.3\">over {@code hmacMd5}</a>.\n   *\n   * @param key the secret key\n   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC\n   * @since 20.0",
  "com.google.common.collect.CompactHashMap:removeHelper(java.lang.Object)" : null,
  "com.google.common.collect.Range:apply(java.lang.Object)" : "* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}\n   *     instead.",
  "com.google.common.collect.Serialization:getFieldSetter(java.lang.Class,java.lang.String)" : null,
  "com.google.common.collect.Maps$UnmodifiableEntries:<init>(java.util.Collection)" : null,
  "com.google.common.util.concurrent.ClosingFuture$Peeker:getDone(com.google.common.util.concurrent.ClosingFuture)" : "* Returns the value of {@code closingFuture}.\n     *\n     * @throws ExecutionException if {@code closingFuture} is a failed step\n     * @throws CancellationException if the {@code closingFuture}'s future was cancelled\n     * @throws IllegalArgumentException if {@code closingFuture} is not one of the futures passed to\n     *     {@link #whenAllComplete(Iterable)} or {@link #whenAllComplete(Iterable)}\n     * @throws IllegalStateException if called outside of a call to {@link\n     *     CombiningCallable#call(DeferredCloser, Peeker)} or {@link\n     *     AsyncCombiningCallable#call(DeferredCloser, Peeker)}",
  "com.google.common.collect.Maps:difference(java.util.Map,java.util.Map)" : "* Computes the difference between two maps. This difference is an immutable snapshot of the state\n   * of the maps at the time this method is called. It will never change, even if the maps change at\n   * a later time.\n   *\n   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps\n   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.\n   *\n   * <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code\n   * left.equals(right)} instead of this method.\n   *\n   * @param left the map to treat as the \"left\" map for purposes of comparison\n   * @param right the map to treat as the \"right\" map for purposes of comparison\n   * @return the difference between the two maps",
  "com.google.common.collect.StandardTable$ColumnMap:get(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableNetwork:incidentNodes(java.lang.Object)" : null,
  "com.google.common.collect.Multimaps$CustomSetMultimap:wrapCollection(java.lang.Object,java.util.Collection)" : null,
  "com.google.common.cache.CacheStats:loadCount()" : "* Returns the total number of times that {@link Cache} lookup methods attempted to load new\n   * values. This includes both successful load operations and those that threw exceptions. This is\n   * defined as {@code loadSuccessCount + loadExceptionCount}.\n   *\n   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is\n   * guaranteed not to throw an exception). If you require specific handling, we recommend\n   * implementing your own stats collector.",
  "com.google.common.base.CharMatcher$NegatedFastMatcher:<init>(com.google.common.base.CharMatcher)" : null,
  "com.google.common.reflect.TypeToken:isSupertypeOf(java.lang.reflect.Type)" : "* Returns true if this type is a supertype of the given {@code type}. \"Supertype\" is defined\n   * according to <a\n   * href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1\">the rules for type\n   * arguments</a> introduced with Java generics.\n   *\n   * @since 19.0",
  "com.google.common.collect.RegularImmutableMap$KeySet:isPartialView()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:tryLock()" : null,
  "com.google.common.cache.LocalCache:getEntry(java.lang.Object)" : "* Returns the internal entry for the specified key. The entry may be loading, expired, or\n   * partially collected.",
  "com.google.common.reflect.TypeResolver:where(java.util.Map)" : "Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.",
  "com.google.common.collect.Iterators:frequency(java.util.Iterator,java.lang.Object)" : "* Returns the number of elements in the specified iterator that equal the specified object. The\n   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.\n   *\n   * @see Collections#frequency",
  "com.google.common.base.Optional:<init>()" : null,
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:storedPermitsToWaitTime(double,double)" : null,
  "com.google.common.math.BigIntegerMath:<init>()" : null,
  "com.google.common.net.InternetDomainName:isValid(java.lang.String)" : "* Indicates whether the argument is a syntactically valid domain name using lenient validation.\n   * Specifically, validation against <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n   * (\"Internationalizing Domain Names in Applications\") is skipped.\n   *\n   * <p>The following two code snippets are equivalent:\n   *\n   * {@snippet :\n   * domainName = InternetDomainName.isValid(name)\n   *     ? InternetDomainName.from(name)\n   *     : DEFAULT_DOMAIN;\n   * }\n   *\n   * {@snippet :\n   * try {\n   *   domainName = InternetDomainName.from(name);\n   * } catch (IllegalArgumentException e) {\n   *   domainName = DEFAULT_DOMAIN;\n   * }\n   * }\n   *\n   * @since 8.0 (previously named {@code isValidLenient})",
  "com.google.common.hash.AbstractStreamingHasher:putLong(long)" : null,
  "com.google.common.collect.ImmutableTable:cellOf(java.lang.Object,java.lang.Object,java.lang.Object)" : "* Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a\n   * new entry with those values.",
  "com.google.common.collect.ArrayTable:erase(java.lang.Object,java.lang.Object)" : "* Associates the value {@code null} with the specified keys, assuming both keys are valid. If\n   * either key is null or isn't among the keys provided during construction, this method has no\n   * effect.\n   *\n   * <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys\n   * are valid.\n   *\n   * @param rowKey row key of mapping to be erased\n   * @param columnKey column key of mapping to be erased\n   * @return the value previously associated with the keys, or {@code null} if no mapping existed\n   *     for the keys",
  "com.google.common.collect.RegularImmutableMap:createValues()" : null,
  "com.google.common.base.Predicates$IsEqualToPredicate:toString()" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:set(int,java.lang.Boolean)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:floorEntry(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableSet:standardLower(java.lang.Object)" : "* A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of\n   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may\n   * wish to override {@link #lower} to forward to this implementation.",
  "com.google.common.collect.AbstractSetMultimap:entries()" : "* {@inheritDoc}\n   *\n   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",
  "com.google.common.collect.EmptyContiguousSet:tailSetImpl(java.lang.Comparable,boolean)" : null,
  "com.google.common.collect.LinkedHashMultiset:<init>()" : null,
  "com.google.common.util.concurrent.Futures:immediateFailedFuture(java.lang.Throwable)" : "* Returns a {@code ListenableFuture} which has an exception set immediately upon construction.\n   *\n   * <p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always\n   * returns {@code true}. Calling {@code get()} will immediately throw the provided {@code\n   * Throwable} wrapped in an {@code ExecutionException}.",
  "com.google.common.collect.Lists$TransformingRandomAccessList:<init>(java.util.List,com.google.common.base.Function)" : null,
  "com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,java.util.Collection)" : "An implementation of {@link Multiset#addAll}.",
  "com.google.common.collect.Synchronized$SynchronizedDeque:pollLast()" : null,
  "com.google.common.util.concurrent.AbstractListeningExecutorService:submit(java.lang.Runnable,java.lang.Object)" : null,
  "com.google.common.collect.Maps:unmodifiableEntrySet(java.util.Set)" : "* Returns an unmodifiable view of the specified set of entries. The {@link Entry#setValue}\n   * operation throws an {@link UnsupportedOperationException}, as do any operations that would\n   * modify the returned set.\n   *\n   * @param entrySet the entries for which to return an unmodifiable view\n   * @return an unmodifiable view of the entries",
  "com.google.common.io.CharStreams:createBuffer()" : "Creates a new {@code CharBuffer} for buffering reads or writes.",
  "com.google.common.base.CharMatcher$IsEither:setBits(java.util.BitSet)" : null,
  "com.google.common.collect.CollectCollectors:toImmutableList()" : null,
  "com.google.common.base.Functions:compose(com.google.common.base.Function,com.google.common.base.Function)" : "* Returns the composition of two functions. For {@code f: A->B} and {@code g: B->C}, composition\n   * is defined as the function h such that {@code h(a) == g(f(a))} for each {@code a}.\n   *\n   * <p><b>JRE users and Android users who opt in to library desugaring:</b> use {@code\n   * g.compose(f)} or (probably clearer) {@code f.andThen(g)} instead. Note that it is not\n   * serializable.\n   *\n   * @param g the second function to apply\n   * @param f the first function to apply\n   * @return the composition of {@code f} and {@code g}\n   * @see <a href=\"//en.wikipedia.org/wiki/Function_composition\">function composition</a>",
  "com.google.common.collect.Tables$TransposeTable:cellIterator()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)" : null,
  "com.google.common.primitives.UnsignedLong:times(com.google.common.primitives.UnsignedLong)" : "* Returns the result of multiplying this and {@code val}. If the result would have more than 64\n   * bits, returns the low 64 bits of the result.\n   *\n   * @since 14.0",
  "com.google.common.primitives.Bytes$ByteArrayAsList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableRangeSet:all()" : "Returns an immutable range set containing the single range {@link Range#all()}.",
  "com.google.common.collect.CompactHashMap:resizeMeMaybe(int)" : "Resizes the entries storage if necessary.",
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableEnumMap:entrySpliterator()" : null,
  "com.google.common.collect.TreeBasedTable$TreeRow:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:entryIterator()" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:lastEntry()" : null,
  "com.google.common.collect.Synchronized$SynchronizedQueue:delegate()" : null,
  "com.google.common.primitives.Doubles$DoubleConverter:doForward(java.lang.String)" : null,
  "com.google.common.reflect.TypeToken:isSubtypeOf(com.google.common.reflect.TypeToken)" : "* Returns true if this type is a subtype of the given {@code type}. \"Subtype\" is defined\n   * according to <a\n   * href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1\">the rules for type\n   * arguments</a> introduced with Java generics.\n   *\n   * @since 19.0",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.Map)" : null,
  "com.google.common.net.InetAddresses:isUriInetAddress(java.lang.String)" : "* Returns {@code true} if the supplied string is a valid URI IP string literal, {@code false}\n   * otherwise.\n   *\n   * <p>This method accepts non-ASCII digits, for example {@code \"１９２.１６８.０.１\"} (those are fullwidth\n   * characters). That is consistent with {@link InetAddress}, but not with various RFCs. If you\n   * want to accept ASCII digits only, you can use something like {@code\n   * CharMatcher.ascii().matchesAllOf(ipString)}.\n   *\n   * <p>Note that if this method returns {@code true}, a call to {@link #forUriString(String)} can\n   * still throw if the address has a scope ID that fails validation against the interfaces on the\n   * machine.\n   *\n   * @param ipString {@code String} to evaluated as an IP URI host string literal\n   * @return {@code true} if the argument is a valid IP URI host",
  "com.google.common.io.LittleEndianDataOutputStream:writeByte(int)" : null,
  "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:makeHash()" : null,
  "com.google.common.io.MultiInputStream:close()" : null,
  "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:instance()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:capAtMaximumSize(int,int)" : "There's no reason for the queueSize to ever be more than maxSize + 1",
  "com.google.common.util.concurrent.ServiceManager:awaitHealthy()" : "* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy}. The manager\n   * will become healthy after all the component services have reached the {@linkplain State#RUNNING\n   * running} state.\n   *\n   * @throws IllegalStateException if the service manager reaches a state from which it cannot\n   *     become {@linkplain #isHealthy() healthy}.",
  "com.google.common.collect.ImmutableRangeSet$Builder:combine(com.google.common.collect.ImmutableRangeSet$Builder)" : null,
  "com.google.common.cache.ForwardingLoadingCache:get(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:trimmed()" : "* Returns an immutable array containing the same values as {@code this} array. This is logically\n   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance\n   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range\n   * of values, resulting in an equivalent array with a smaller memory footprint.",
  "com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)" : null,
  "com.google.common.collect.Maps:doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map)" : null,
  "com.google.common.math.LinearTransformation$NaNLinearTransformation:inverse()" : null,
  "com.google.common.graph.MapIteratorCache:clearCache()" : null,
  "com.google.common.primitives.ImmutableIntArray:builder()" : "* Returns a new, empty builder for {@link ImmutableIntArray} instances, with a default initial\n   * capacity. The returned builder is not thread-safe.\n   *\n   * <p><b>Performance note:</b> The {@link ImmutableIntArray} that is built will very likely occupy\n   * more memory than necessary; to trim memory usage, build using {@code\n   * builder.build().trimmed()}.",
  "com.google.common.collect.ForwardingMultimap:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.io.MoreFiles:touch(java.nio.file.Path)" : "* Like the unix command of the same name, creates an empty file or updates the last modified\n   * timestamp of the existing file at the given path to the current system time.",
  "com.google.common.collect.TreeBasedTable:rowComparator()" : "* Returns the comparator that orders the rows. With natural ordering, {@link Ordering#natural()}\n   * is returned.\n   *\n   * @deprecated Use {@code table.rowKeySet().comparator()} instead.",
  "com.google.common.io.CharStreams$NullWriter:append(char)" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMap:get(java.lang.Object)" : null,
  "com.google.common.io.CharSequenceReader:ready()" : null,
  "com.google.common.collect.AbstractBiMap$KeySet:clear()" : null,
  "com.google.common.io.CharSequenceReader:skip(long)" : null,
  "com.google.common.hash.AbstractByteHasher:putInt(int)" : null,
  "com.google.common.collect.ImmutableRangeSet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.math.PairedStats:yStats()" : "Returns the statistics on the {@code y} values alone.",
  "com.google.common.util.concurrent.AtomicLongMap:removeAllZeros()" : "* Removes all mappings from this map whose values are zero.\n   *\n   * <p>This method is not atomic: the map may be visible in intermediate states, where some of the\n   * zero values have been removed and others have not.",
  "com.google.common.collect.ForwardingNavigableMap:standardHigherEntry(java.lang.Object)" : "* A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link\n   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code\n   * higherEntry} to forward to this implementation.",
  "com.google.common.collect.NullsFirstOrdering:<init>(com.google.common.collect.Ordering)" : null,
  "com.google.common.base.Present:get()" : null,
  "com.google.common.base.FinalizableReferenceQueue:close()" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSet:contains(java.lang.Comparable)" : "* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the\n   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}\n   * returns {@code false}.",
  "com.google.common.collect.Multimaps$AsMap$EntrySet:iterator()" : null,
  "com.google.common.collect.TreeBasedTable:create(com.google.common.collect.TreeBasedTable)" : "* Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code\n   * TreeBasedTable}.",
  "com.google.common.collect.Synchronized$SynchronizedMap:<init>(java.util.Map,java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:tryLock(long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.ImmutableRangeSet:isPartialView()" : "* Returns {@code true} if this immutable range set's implementation contains references to\n   * user-created objects that aren't accessible via this range set's methods. This is generally\n   * used to determine whether {@code copyOf} implementations should make an explicit copy to avoid\n   * memory leaks.",
  "com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap)" : null,
  "com.google.common.net.MediaType:createFontType(java.lang.String)" : "* Creates a media type with the \"font\" type and the given subtype.\n   *\n   * @throws IllegalArgumentException if subtype is invalid",
  "com.google.common.io.Files:write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)" : "* Writes a character sequence (such as a string) to a file using the given character set.\n   *\n   * @param from the character sequence to write\n   * @param to the destination file\n   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @throws IOException if an I/O error occurs\n   * @deprecated Prefer {@code asCharSink(to, charset).write(from)}.",
  "com.google.common.hash.Funnels:asOutputStream(com.google.common.hash.PrimitiveSink)" : "* Wraps a {@code PrimitiveSink} as an {@link OutputStream}, so it is easy to {@link Funnel#funnel\n   * funnel} an object to a {@code PrimitiveSink} if there is already a way to write the contents of\n   * the object to an {@code OutputStream}.\n   *\n   * <p>The {@code close} and {@code flush} methods of the returned {@code OutputStream} do nothing,\n   * and no method throws {@code IOException}.\n   *\n   * @since 13.0",
  "com.google.common.reflect.Types$TypeVariableImpl:getName()" : null,
  "com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection,java.lang.Object[])" : "* Returns an array containing all of the elements in the specified collection; the runtime type\n   * of the returned array is that of the specified array. If the collection fits in the specified\n   * array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the\n   * specified array and the size of the specified collection.\n   *\n   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more\n   * elements than the collection), the element in the array immediately following the end of the\n   * collection is set to {@code null}. This is useful in determining the length of the collection\n   * <i>only</i> if the caller knows that the collection does not contain any null elements.\n   *\n   * <p>This method returns the elements in the order they are returned by the collection's\n   * iterator.\n   *\n   * <p>TODO(kevinb): support concurrently modified collections?\n   *\n   * @param c the collection for which to return an array of elements\n   * @param array the array in which to place the collection elements\n   * @throws ArrayStoreException if the runtime type of the specified array is not a supertype of\n   *     the runtime type of every element in the specified collection",
  "com.google.common.collect.StandardRowSortedTable:rowMap()" : "* {@inheritDoc}\n   *\n   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link\n   * Table} interface.",
  "com.google.common.util.concurrent.Monitor:newGuard(java.util.function.BooleanSupplier)" : "* Creates a new {@linkplain Guard guard} for this monitor.\n   *\n   * @param isSatisfied the new guard's boolean condition (see {@link Guard#isSatisfied\n   *     isSatisfied()})\n   * @since 21.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:takeFirst()" : null,
  "com.google.common.graph.MapRetrievalCache:<init>(java.util.Map)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueEntry:setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)" : null,
  "com.google.common.io.ByteSource:concat(java.lang.Iterable)" : "* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from\n   * the source will contain the concatenated data from the streams of the underlying sources.\n   *\n   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n   * close the open underlying stream.\n   *\n   * @param sources the sources to concatenate\n   * @return a {@code ByteSource} containing the concatenated data\n   * @since 15.0",
  "com.google.common.collect.SortedMultisets$ElementSet:first()" : null,
  "com.google.common.base.Predicates$SubtypeOfPredicate:hashCode()" : null,
  "com.google.common.collect.StandardTable:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedSet:unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$EntryFactory$2:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : "* Creates a new entry.\n     *\n     * @param segment to create the entry for\n     * @param key of the entry\n     * @param hash of the key\n     * @param next entry in the same bucket",
  "com.google.common.hash.HashingInputStream:read()" : "* Reads the next byte of data from the underlying input stream and updates the hasher with the\n   * byte read.",
  "com.google.common.graph.ImmutableGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.cache.CacheBuilderSpec$InitialCapacityParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)" : null,
  "com.google.common.io.Files:asCharSource(java.io.File,java.nio.charset.Charset)" : "* Returns a new {@link CharSource} for reading character data from the given file using the given\n   * character set.\n   *\n   * @since 14.0",
  "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:runInterruptibly()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.collect.StandardTable$ColumnMap:keySet()" : null,
  "com.google.common.collect.RegularImmutableBiMap$Inverse:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.Multisets$UnmodifiableMultiset:entrySet()" : null,
  "com.google.common.util.concurrent.AbstractFuture:isDone()" : null,
  "com.google.common.hash.Murmur3_32HashFunction:getIntLittleEndian(byte[],int)" : null,
  "com.google.common.graph.AbstractDirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.hash.MacHashFunction$MacHasher:update(byte[])" : null,
  "com.google.common.collect.ForwardingSetMultimap:delegate()" : null,
  "com.google.common.cache.CacheBuilder$3:<init>()" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:clear()" : null,
  "com.google.common.collect.GeneralRange:getUpperBoundType()" : null,
  "com.google.common.collect.MoreCollectors:<init>()" : null,
  "com.google.common.collect.ImmutableList:equals(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableMap:lowerKey(java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultimap:valueIterator()" : null,
  "com.google.common.io.Files:readFirstLine(java.io.File,java.nio.charset.Charset)" : "* Reads the first line from a file. The line does not include line-termination characters, but\n   * does include other leading and trailing whitespace.\n   *\n   * @param file the file to read from\n   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n   *     helpful predefined constants\n   * @return the first line, or null if the file is empty\n   * @throws IOException if an I/O error occurs\n   * @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}.",
  "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:valueComparator()" : null,
  "com.google.common.math.Stats:<init>(long,double,double,double,double)" : "* Internal constructor. Users should use {@link #of} or {@link StatsAccumulator#snapshot}.\n   *\n   * <p>To ensure that the created instance obeys its contract, the parameters should satisfy the\n   * following constraints. This is the callers responsibility and is not enforced here.\n   *\n   * <ul>\n   *   <li>If {@code count} is 0, {@code mean} may have any finite value (its only usage will be to\n   *       get multiplied by 0 to calculate the sum), and the other parameters may have any values\n   *       (they will not be used).\n   *   <li>If {@code count} is 1, {@code sumOfSquaresOfDeltas} must be exactly 0.0 or {@link\n   *       Double#NaN}.\n   * </ul>",
  "com.google.common.collect.MapMakerInternalMap$EntrySet:size()" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.Object)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * @param reference an object reference\n   * @param errorMessage the exception message to use if the check fails; will be converted to a\n   *     string using {@link String#valueOf(Object)}\n   * @return the non-null reference that was validated\n   * @throws NullPointerException if {@code reference} is null\n   * @see Verify#verifyNotNull Verify.verifyNotNull()",
  "com.google.common.primitives.ImmutableIntArray:equals(java.lang.Object)" : "* Returns {@code true} if {@code object} is an {@code ImmutableIntArray} containing the same\n   * values as this one, in the same order.",
  "com.google.common.graph.ForwardingValueGraph:incidentEdgeOrder()" : null,
  "com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,java.time.Duration)" : "* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}\n   * uninterruptibly.\n   *\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.TreeMultiset$Reference:get()" : null,
  "com.google.common.collect.MoreCollectors$ToOptionalState:getElement()" : null,
  "com.google.common.reflect.TypeToken:of(java.lang.reflect.Type)" : "Returns an instance of type token that wraps {@code type}.",
  "com.google.common.base.Equivalence$EquivalentToPredicate:<init>(com.google.common.base.Equivalence,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.collect.ArrayTable$RowMap:put(java.lang.Object,java.util.Map)" : null,
  "com.google.common.util.concurrent.TimeLimiter:callWithTimeout(java.util.concurrent.Callable,java.time.Duration)" : "* Invokes a specified Callable, timing out after the specified time limit. If the target method\n   * call finishes before the limit is reached, the return value or a wrapped exception is\n   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to\n   * the target, and throw a {@link TimeoutException} to the caller.\n   *\n   * @param callable the Callable to execute\n   * @param timeout the maximum length of time to wait\n   * @return the result returned by the Callable\n   * @throws TimeoutException if the time limit is reached\n   * @throws InterruptedException if the current thread was interrupted during execution\n   * @throws ExecutionException if {@code callable} throws a checked exception\n   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}\n   * @throws ExecutionError if {@code callable} throws an {@code Error}\n   * @since 28.0",
  "com.google.common.reflect.Invokable$ConstructorInvokable:getGenericReturnType()" : "* If the class is parameterized, such as {@link java.util.ArrayList ArrayList}, this returns\n     * {@code ArrayList<E>}.",
  "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long,java.lang.Object)" : "* Ensures the truth of an expression involving one or more parameters to the calling method.\n   *\n   * <p>See {@link #checkArgument(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object,boolean)" : "* @since 12.0",
  "com.google.common.base.CharMatcher$Any:collapseFrom(java.lang.CharSequence,char)" : null,
  "com.google.common.cache.LocalCache$Segment:expireEntries(long)" : null,
  "com.google.common.io.CharStreams$NullWriter:append(java.lang.CharSequence,int,int)" : null,
  "com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.NullnessCasts:<init>()" : null,
  "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(com.google.common.reflect.TypeToken,java.lang.Object)" : "* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,\n     * and will cause {@link #build} to fail.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.collect.ImmutableSetMultimap$Builder:put(java.util.Map$Entry)" : "* Adds an entry to the built multimap if it is not already present.\n     *\n     * @since 11.0",
  "com.google.common.hash.AbstractByteHasher:putByte(byte)" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:setException(java.lang.Throwable)" : null,
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.collect.ImmutableSortedMap:floorKey(java.lang.Object)" : null,
  "com.google.common.base.Predicates$InstanceOfPredicate:equals(java.lang.Object)" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:addValue(float)" : "* Adds an unnamed value to the formatted output.\n     *\n     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a\n     * readable name.\n     *\n     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:skipBytes(int)" : null,
  "com.google.common.collect.Maps$UnmodifiableBiMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:remove(int)" : null,
  "com.google.common.cache.RemovalCause$4:wasEvicted()" : "* Returns {@code true} if there was an automatic removal due to eviction (the cause is neither\n   * {@link #EXPLICIT} nor {@link #REPLACED}).",
  "com.google.common.io.ByteSource$SlicedByteSource:openStream()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:peekLast()" : "* Retrieves, but does not remove, the greatest element of this queue, or returns {@code null} if\n   * the queue is empty.",
  "com.google.common.collect.ForwardingSortedSetMultimap:delegate()" : null,
  "com.google.common.reflect.TypeToken:getArraySubtype(java.lang.Class)" : null,
  "com.google.common.collect.HashBasedTable:column(java.lang.Object)" : "* {@inheritDoc}\n   *\n   * <p>The returned map's views have iterators that don't support {@code remove()}.",
  "com.google.common.cache.LocalCache$Values:clear()" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:getLockGraphNode()" : null,
  "com.google.common.collect.Sets$FilteredNavigableSet:higher(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:refreshIfEmpty()" : "* If the delegate collection is empty, but the multimap has values for the key, replace the\n     * delegate with the new collection for the key.\n     *\n     * <p>For a subcollection, refresh its ancestor and validate that the ancestor delegate hasn't\n     * changed.",
  "com.google.common.collect.Comparators:isInOrder(java.lang.Iterable,java.util.Comparator)" : "* Returns {@code true} if each element in {@code iterable} after the first is greater than or\n   * equal to the element that preceded it, according to the specified comparator. Note that this is\n   * always true when the iterable has fewer than two elements.",
  "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createKeySet()" : null,
  "com.google.common.collect.Maps$UnmodifiableBiMap:replace(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.Doubles:isFinite(double)" : "* Returns {@code true} if {@code value} represents a real number. This is equivalent to, but not\n   * necessarily implemented as, {@code !(Double.isInfinite(value) || Double.isNaN(value))}.\n   *\n   * <p>Prefer {@link Double#isFinite(double)} instead.\n   *\n   * @since 10.0",
  "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if any element is null",
  "com.google.common.base.Functions$ToStringFunction:apply(java.lang.Object)" : null,
  "com.google.common.reflect.TypeToken:isOwnedBySubtypeOf(java.lang.reflect.Type)" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:keySet()" : null,
  "com.google.common.hash.AbstractByteHasher:putLong(long)" : null,
  "com.google.common.collect.Streams:stream(java.util.Optional)" : "* If a value is present in {@code optional}, returns a stream containing only that element,\n   * otherwise returns an empty stream.\n   *\n   * <p><b>Java 9 users:</b> use {@code optional.stream()} instead.",
  "com.google.common.base.Predicates$CompositionPredicate:<init>(com.google.common.base.Predicate,com.google.common.base.Function)" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.util.concurrent.ForwardingFluentFuture:get()" : null,
  "com.google.common.math.IntMath:checkedAdd(int,int)" : "* Returns the sum of {@code a} and {@code b}, provided it does not overflow.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link\n   * Math#addExact(int, int)} instead.\n   *\n   * @throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic",
  "com.google.common.collect.AbstractNavigableMap:higherEntry(java.lang.Object)" : null,
  "com.google.common.collect.Iterables:getFirst(java.lang.Iterable,java.lang.Object)" : "* Returns the first element in {@code iterable} or {@code defaultValue} if the iterable is empty.\n   * The {@link Iterators} analog to this method is {@link Iterators#getNext}.\n   *\n   * <p>If no default value is desired (and the caller instead wants a {@link\n   * NoSuchElementException} to be thrown), it is recommended that {@code\n   * iterable.iterator().next()} is used instead.\n   *\n   * <p>To get the only element in a single-element {@code Iterable}, consider using {@link\n   * #getOnlyElement(Iterable)} or {@link #getOnlyElement(Iterable, Object)} instead.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code stream.findFirst().orElse(defaultValue)}\n   *\n   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),\n   * consider using {@code collection.getFirst()} instead. Note that if the collection is empty,\n   * {@code getFirst()} throws a {@code NoSuchElementException}, while this method returns the\n   * default value.\n   *\n   * @param defaultValue the default value to return if the iterable is empty\n   * @return the first element of {@code iterable} or the default value\n   * @since 7.0",
  "com.google.common.collect.FluentIterable:append(java.lang.Iterable)" : "* Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable,\n   * followed by those of {@code other}. The iterators are not polled until necessary.\n   *\n   * <p>The returned iterable's {@code Iterator} supports {@code remove()} when the corresponding\n   * {@code Iterator} supports it.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Stream#concat}.\n   *\n   * @since 18.0",
  "com.google.common.io.BaseEncoding:separatingAppendable(java.lang.Appendable,java.lang.String,int)" : null,
  "com.google.common.net.InetAddresses:toUriString(java.net.InetAddress)" : "* Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI.\n   *\n   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6\n   * addresses it compresses zeroes and surrounds the text with square brackets; for example {@code\n   * \"[2001:db8::1]\"}.\n   *\n   * <p>Per section 3.2.2 of <a target=\"_parent\"\n   * href=\"http://tools.ietf.org/html/rfc3986#section-3.2.2\">RFC 3986</a>, a URI containing an IPv6\n   * string literal is of the form {@code \"http://[2001:db8::1]:8888/index.html\"}.\n   *\n   * <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or\n   * this method is recommended over {@link InetAddress#toString()} when an IP address string\n   * literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the\n   * IP address string joined by a \"/\".\n   *\n   * @param ip {@link InetAddress} to be converted to URI string literal\n   * @return {@code String} containing URI-safe string literal",
  "com.google.common.collect.Streams:stream(java.lang.Iterable)" : "* Returns a sequential {@link Stream} of the contents of {@code iterable}, delegating to {@link\n   * Collection#stream} if possible.",
  "com.google.common.reflect.Invokable:hashCode()" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardSubMap(java.lang.Object,java.lang.Object)" : "* A sensible definition of {@link #subMap(Object, Object)} in terms of {@link #subMap(Object,\n   * boolean, Object, boolean)}. If you override {@code subMap(K, boolean, K, boolean)}, you may\n   * wish to override {@code subMap} to forward to this implementation.",
  "com.google.common.base.Absent:asSet()" : null,
  "com.google.common.util.concurrent.AbstractIdleService:failureCause()" : "* @since 14.0",
  "com.google.common.cache.LocalCache:processPendingNotifications()" : "* Notifies listeners that an entry has been automatically removed due to expiration, eviction, or\n   * eligibility for garbage collection. This should be called every time expireEntries or\n   * evictEntry is called (once the lock is released).",
  "com.google.common.collect.ImmutableRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)" : "* Guaranteed to throw an exception and leave the {@code RangeMap} unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Count:set(int)" : null,
  "com.google.common.collect.RegularImmutableAsList:delegateList()" : null,
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing a single entry. This map behaves and performs comparably to\n   * {@link Collections#singletonMap} but will not accept a null key or value. It is preferable\n   * mainly for consistency and maintainability of your code.",
  "com.google.common.reflect.ClassPath$LocationInfo:equals(java.lang.Object)" : null,
  "com.google.common.base.Utf8:isWellFormedSlowPath(byte[],int,int)" : null,
  "com.google.common.collect.HashBiMap:seekByValue(java.lang.Object,int)" : null,
  "com.google.common.io.ByteSource$SlicedByteSource:sizeIfKnown()" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:encodeTo(java.lang.Appendable,byte[],int,int)" : null,
  "com.google.common.base.Enums$StringConverter:hashCode()" : null,
  "com.google.common.collect.Maps:unmodifiableMap(java.util.Map)" : null,
  "com.google.common.collect.EmptyContiguousSet:last()" : null,
  "com.google.common.collect.Synchronized$SynchronizedBiMap:forcePut(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.WrappingScheduledExecutorService:schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)" : "* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a\n   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect\n   * the other.\n   *\n   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all\n   * other methods are supported by the multimap and its views. When adding a key that doesn't\n   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code\n   * replaceValues()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the\n   * underlying multimap.\n   *\n   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every\n   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n   * copy.\n   *\n   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 14.0",
  "com.google.common.util.concurrent.CombinedFuture:handleAllCompleted()" : null,
  "com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate)" : "* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a\n   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect\n   * the other.\n   *\n   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all\n   * other methods are supported by the multimap and its views. When adding a key that doesn't\n   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code\n   * replaceValues()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered\n   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the\n   * underlying multimap.\n   *\n   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every\n   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n   * copy.\n   *\n   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 11.0",
  "com.google.common.util.concurrent.AtomicDoubleArray:compareAndSet(int,double,double)" : "* Atomically sets the element at position {@code i} to the given updated value if the current\n   * value is <a href=\"#bitEquals\">bitwise equal</a> to the expected value.\n   *\n   * @param i the index\n   * @param expect the expected value\n   * @param update the new value\n   * @return true if successful. False return indicates that the actual value was not equal to the\n   *     expected value.",
  "com.google.common.io.Files:hash(java.io.File,com.google.common.hash.HashFunction)" : "* Computes the hash code of the {@code file} using {@code hashFunction}.\n   *\n   * @param file the file to read\n   * @param hashFunction the hash function to use to hash the data\n   * @return the {@link HashCode} of all of the bytes in the file\n   * @throws IOException if an I/O error occurs\n   * @since 12.0\n   * @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}.",
  "com.google.common.collect.ImmutableTable$SerializedForm:create(com.google.common.collect.ImmutableTable,int[],int[])" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingEntry(java.lang.Object)" : null,
  "com.google.common.collect.GeneralRange:upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)" : "* Returns everything below the endpoint relative to the specified comparator, with the specified\n   * endpoint behavior.",
  "com.google.common.graph.Traverser$InsertionOrder$2:insertInto(java.util.Deque,java.lang.Object)" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:pollLast()" : null,
  "com.google.common.base.Strings:repeat(java.lang.String,int)" : "* Returns a string consisting of a specific number of concatenated copies of an input string. For\n   * example, {@code repeat(\"hey\", 3)} returns the string {@code \"heyheyhey\"}.\n   *\n   * <p><b>Java 11+ users:</b> use {@code string.repeat(count)} instead.\n   *\n   * @param string any non-null string\n   * @param count the number of times to repeat it; a nonnegative integer\n   * @return a string containing {@code string} repeated {@code count} times (the empty string if\n   *     {@code count} is zero)\n   * @throws IllegalArgumentException if {@code count} is negative",
  "com.google.common.io.CharSource:copyTo(java.lang.Appendable)" : "* Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}).\n   * Does not close {@code appendable} if it is {@code Closeable}.\n   *\n   * @return the number of characters copied\n   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n   *     appendable}",
  "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:delegate()" : null,
  "com.google.common.collect.TreeRangeMap:getEntry(java.lang.Comparable)" : null,
  "com.google.common.hash.Funnels$StringCharsetFunnel:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.util.concurrent.Service$Listener:running()" : "* Called when the service transitions from {@linkplain State#STARTING STARTING} to {@linkplain\n     * State#RUNNING RUNNING}. This occurs when a service has successfully started.",
  "com.google.common.collect.TreeBasedTable$TreeRow:computeBackingRowMap()" : null,
  "com.google.common.base.Splitter:splitToList(java.lang.CharSequence)" : "* Splits {@code sequence} into string components and returns them as an immutable list. If you\n   * want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}.\n   *\n   * @param sequence the sequence of characters to split\n   * @return an immutable list of the segments split from the parameter\n   * @since 15.0",
  "com.google.common.collect.GeneralRange:toString()" : null,
  "com.google.common.collect.CollectPreconditions:checkNonnegative(long,java.lang.String)" : null,
  "com.google.common.util.concurrent.CollectionFuture:handleAllCompleted()" : null,
  "com.google.common.base.CharMatcher:setBits(java.util.BitSet)" : "Sets bits in {@code table} matched by this matcher.",
  "com.google.common.math.IntMath:<init>()" : null,
  "com.google.common.base.Functions$SupplierFunction:equals(java.lang.Object)" : null,
  "com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.primitives.SignedBytes:<init>()" : null,
  "com.google.common.primitives.UnsignedBytes:saturatedCast(long)" : "* Returns the {@code byte} value that, when treated as unsigned, is nearest in value to {@code\n   * value}.\n   *\n   * @param value any {@code long} value\n   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and\n   *     {@code value} cast to {@code byte} otherwise",
  "com.google.common.collect.ImmutableRangeMap$Builder:<init>()" : null,
  "com.google.common.collect.ForwardingSortedMap:unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.io.MoreFiles$PathByteSource:toString()" : null,
  "com.google.common.reflect.ClassPath$ClassInfo:getPackageName()" : "* Returns the package name of the class, without attempting to load the class.\n     *\n     * <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but\n     * does not require the class (or package) to be loaded.\n     *\n     * <p>But note that this method may behave differently for a class in the default package: For\n     * such classes, this method always returns an empty string. But under some version of Java,\n     * {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code\n     * class.getPackage()} returns {@code null}.",
  "com.google.common.base.Java8Compatibility:flip(java.nio.Buffer)" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:distinctElements()" : null,
  "com.google.common.collect.ImmutableBiMap:copyOf(java.util.Map)" : "* Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow\n   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n   *\n   * <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet}\n   * of the original map.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n   *     key\n   * @throws NullPointerException if any key or value in {@code map} is null",
  "com.google.common.graph.ValueGraphBuilder:immutable()" : "* Returns an {@link ImmutableValueGraph.Builder} with the properties of this {@link\n   * ValueGraphBuilder}.\n   *\n   * <p>The returned builder can be used for populating an {@link ImmutableValueGraph}.\n   *\n   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link\n   * ElementOrder#stable()}, regardless of the value that was set in this builder.\n   *\n   * @since 28.0",
  "com.google.common.collect.FilteredKeyMultimap:clear()" : null,
  "com.google.common.primitives.Longs:lastIndexOf(long[],long,int,int)" : null,
  "com.google.common.collect.UnmodifiableListIterator:set(java.lang.Object)" : "* Guaranteed to throw an exception and leave the underlying data unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Maps:filterKeys(java.util.NavigableMap,com.google.common.base.Predicate)" : "* Returns a navigable map containing the mappings in {@code unfiltered} whose keys satisfy a\n   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the\n   * other.\n   *\n   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have\n   * iterators that don't support {@code remove()}, but all other methods are supported by the map\n   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and\n   * {@code putAll()} methods throw an {@link IllegalArgumentException}.\n   *\n   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map\n   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying\n   * map.\n   *\n   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.\n   *\n   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value\n   * mapping in the underlying map and determine which satisfy the filter. When a live view is\n   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n   *\n   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at\n   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.\n   *\n   * @since 14.0",
  "com.google.common.collect.Sets:newIdentityHashSet()" : "* Creates an empty {@code Set} that uses identity to determine equality. It compares object\n   * references, instead of calling {@code equals}, to determine whether a provided object matches\n   * an element in the set. For example, {@code contains} returns {@code false} when passed an\n   * object that equals a set member, but isn't the same instance. This behavior is similar to the\n   * way {@code IdentityHashMap} handles key lookups.\n   *\n   * @since 8.0",
  "com.google.common.collect.Iterators$EmptyModifiableIterator:remove()" : null,
  "com.google.common.primitives.Longs$AsciiDigits:digit(char)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeByte(int)" : null,
  "com.google.common.collect.ComparisonChain$1:<init>()" : null,
  "com.google.common.collect.Maps:newLinkedHashMap()" : "* Creates a <i>mutable</i>, empty, insertion-ordered {@code LinkedHashMap} instance.\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableMap#of()} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code LinkedHashMap} constructor directly, taking advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.\n   *\n   * @return a new, empty {@code LinkedHashMap}",
  "com.google.common.util.concurrent.AtomicDoubleArray:accumulateAndGet(int,double,java.util.function.DoubleBinaryOperator)" : "* Atomically updates the element at index {@code i} with the results of applying the given\n   * function to the current and given values.\n   *\n   * @param i the index to update\n   * @param x the update value\n   * @param accumulatorFunction the accumulator function\n   * @return the updated value\n   * @since 31.1",
  "com.google.common.collect.Cut$BelowAll:leastValueAbove(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.base.CaseFormat$1:convert(com.google.common.base.CaseFormat,java.lang.String)" : "Enum values can override for performance reasons.",
  "com.google.common.collect.LinkedHashMultimap$ValueSet:setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)" : null,
  "com.google.common.collect.Sets$DescendingSet:lower(java.lang.Object)" : null,
  "com.google.common.collect.UnmodifiableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)" : null,
  "com.google.common.base.FinalizableReferenceQueue$DirectLoader:loadFinalizer()" : null,
  "com.google.common.primitives.ImmutableIntArray:asList()" : "* Returns an immutable <i>view</i> of this array's values as a {@code List}; note that {@code\n   * int} values are boxed into {@link Integer} instances on demand, which can be very expensive.\n   * The returned list should be used once and discarded. For any usages beyond that, pass the\n   * returned list to {@link com.google.common.collect.ImmutableList#copyOf(Collection)\n   * ImmutableList.copyOf} and use that list instead.",
  "com.google.common.collect.ArrayListMultimap:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:getValue()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:getOrDefault(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$IsNot:toString()" : null,
  "com.google.common.collect.MapMakerInternalMap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ForwardingDeque:pop()" : null,
  "com.google.common.net.HostAndPort:hasPort()" : "Return true if this instance has a defined port.",
  "com.google.common.io.ByteStreams:toByteArray(java.io.InputStream)" : "* Reads all bytes from an input stream into a byte array. Does not close the stream.\n   *\n   * <p><b>Java 9+ users:</b> use {@code in#readAllBytes()} instead.\n   *\n   * @param in the input stream to read from\n   * @return a byte array containing all the bytes from the stream\n   * @throws IOException if an I/O error occurs",
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:<init>(java.lang.Runnable)" : null,
  "com.google.common.graph.StandardNetwork:checkedReferenceNode(java.lang.Object)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:elementIterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingIterator()" : null,
  "com.google.common.util.concurrent.AggregateFuture:addCausalChain(java.util.Set,java.lang.Throwable)" : "Adds the chain to the seen set, and returns whether all the chain was new to us.",
  "com.google.common.collect.ImmutableSortedSet:reverseOrder()" : "* Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse\n   * of their natural ordering.",
  "com.google.common.collect.Iterators:cycle(java.lang.Iterable)" : "* Returns an iterator that cycles indefinitely over the elements of {@code iterable}.\n   *\n   * <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code\n   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code\n   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}\n   * is empty.\n   *\n   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\n   * should use an explicit {@code break} or be certain that you will eventually remove all the\n   * elements.",
  "com.google.common.base.CaseFormat$StringConverter:doForward(java.lang.String)" : null,
  "com.google.common.cache.LocalCache:unset()" : "Singleton placeholder that indicates a value is being loaded.",
  "com.google.common.collect.FluentIterable:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double)" : null,
  "com.google.common.collect.ForwardingMap$StandardEntrySet:map()" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean)" : null,
  "com.google.common.collect.Maps:synchronizedNavigableMap(java.util.NavigableMap)" : "* Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In\n   * order to guarantee serial access, it is critical that <b>all</b> access to the backing\n   * navigable map is accomplished through the returned navigable map (or its views).\n   *\n   * <p>It is imperative that the user manually synchronize on the returned navigable map when\n   * iterating over any of its collection views, or the collections views of any of its {@code\n   * descendingMap}, {@code subMap}, {@code headMap} or {@code tailMap} views.\n   *\n   * {@snippet :\n   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());\n   *\n   * // Needn't be in synchronized block\n   * NavigableSet<K> set = map.navigableKeySet();\n   *\n   * synchronized (map) { // Synchronizing on map, not set!\n   *   Iterator<K> it = set.iterator(); // Must be in synchronized block\n   *   while (it.hasNext()) {\n   *     foo(it.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>or:\n   *\n   * {@snippet :\n   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());\n   * NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true);\n   *\n   * // Needn't be in synchronized block\n   * NavigableSet<K> set2 = map2.descendingKeySet();\n   *\n   * synchronized (map) { // Synchronizing on map, not map2 or set2!\n   *   Iterator<K> it = set2.iterator(); // Must be in synchronized block\n   *   while (it.hasNext()) {\n   *     foo(it.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>Failure to follow this advice may result in non-deterministic behavior.\n   *\n   * <p>The returned navigable map will be serializable if the specified navigable map is\n   * serializable.\n   *\n   * @param navigableMap the navigable map to be \"wrapped\" in a synchronized navigable map.\n   * @return a synchronized view of the specified navigable map.\n   * @since 13.0",
  "com.google.common.collect.Maps$Values:remove(java.lang.Object)" : null,
  "com.google.common.primitives.Chars$CharArrayAsList:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedAsList:comparator()" : null,
  "com.google.common.hash.Fingerprint2011:murmurHash64WithSeed(byte[],int,int,long)" : null,
  "com.google.common.collect.Sets:makeComplementByHand(java.util.Collection,java.lang.Class)" : null,
  "com.google.common.net.HostAndPort:getPort()" : "* Get the current port number, failing if no port is defined.\n   *\n   * @return a validated port number, in the range [0..65535]\n   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}\n   *     to prevent this from occurring.",
  "com.google.common.html.HtmlEscapers:<init>()" : null,
  "com.google.common.collect.SortedMapDifference:entriesDiffering()" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:predecessors()" : null,
  "com.google.common.collect.MapMakerInternalMap$KeyIterator:next()" : null,
  "com.google.common.collect.AllEqualOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableList$Builder:build()" : "* Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.",
  "com.google.common.collect.Maps$BiMapConverter:doBackward(java.lang.Object)" : null,
  "com.google.common.collect.CompactLinkedHashMap:createKeySet()" : null,
  "com.google.common.graph.ForwardingValueGraph:isDirected()" : null,
  "com.google.common.collect.TableCollectors$MutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Cut$AboveValue:isLessThan(java.lang.Comparable)" : null,
  "com.google.common.collect.ImmutableMultimap$EntryCollection:iterator()" : null,
  "com.google.common.collect.EnumMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.cache.LocalCache$EntryFactory:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,java.lang.Object)" : null,
  "com.google.common.hash.Murmur3_32HashFunction:fmix(int,int)" : null,
  "com.google.common.graph.ForwardingGraph:incidentEdgeOrder()" : null,
  "com.google.common.collect.ImmutableListMultimap:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)" : "* Returns a {@code Collector} accumulating entries into an {@code ImmutableListMultimap}. Each\n   * input element is mapped to a key and a stream of values, each of which are put into the\n   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the\n   * streams of values.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =\n   *     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n   *         .collect(\n   *             flatteningToImmutableListMultimap(\n   *                  str -> str.charAt(0),\n   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));\n   *\n   * // is equivalent to\n   *\n   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =\n   *     ImmutableListMultimap.<Character, Character>builder()\n   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))\n   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))\n   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))\n   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))\n   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))\n   *         .build();\n   * }\n   *\n   * }\n   *\n   * @since 21.0",
  "com.google.common.util.concurrent.ClosingFuture$Combiner4:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner4$AsyncClosingFunction4,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * {@code ClosingFuture}-returning function to their values. The function can use a {@link\n     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those\n     * captured by the returned {@link ClosingFuture}).\n     *\n     * <p>If this combiner was returned by {@link #whenAllSucceed(ClosingFuture, ClosingFuture,\n     * ClosingFuture, ClosingFuture)} and any of the inputs fail, so will the returned step.\n     *\n     * <p>If the function throws a {@code CancellationException}, the pipeline will be cancelled.\n     *\n     * <p>If the function throws an {@code ExecutionException}, the cause of the thrown {@code\n     * ExecutionException} will be extracted and used as the failure of the derived step.\n     *\n     * <p>If the function throws any other exception, it will be used as the failure of the derived\n     * step.\n     *\n     * <p>If an exception is thrown after the function creates a {@code ClosingFuture}, then none of\n     * the closeable objects in that {@code ClosingFuture} will be closed.\n     *\n     * <p>Usage guidelines for this method:\n     *\n     * <ul>\n     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a\n     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,\n     *       Executor)} instead, with a function that returns the next value directly.\n     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}\n     *       for every closeable object this step creates in order to capture it for later closing.\n     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code\n     *       ClosingFuture} call {@link #from(ListenableFuture)}.\n     * </ul>\n     *\n     * <p>The same warnings about doing heavyweight operations within {@link\n     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",
  "com.google.common.graph.EndpointPair$Unordered:toString()" : null,
  "com.google.common.collect.StandardTable$ColumnKeySet:size()" : null,
  "com.google.common.primitives.Longs:sortDescending(long[],int,int)" : "* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}\n   * exclusive in descending order.\n   *\n   * @since 23.1",
  "com.google.common.collect.Cut$AboveValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService)" : "* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)\n   * awaitTermination(long, TimeUnit)} uninterruptibly with no timeout.\n   *\n   * @since 30.0",
  "com.google.common.collect.ArrayTable:get(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized:collection(java.util.Collection,java.lang.Object)" : null,
  "com.google.common.util.concurrent.ClosingFuture$Combiner4:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)" : null,
  "com.google.common.net.HostSpecifier:hashCode()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMap:computeIfAbsent(java.lang.Object,java.util.function.Function)" : null,
  "com.google.common.base.Predicates$IsEqualToPredicate:<init>(java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableDoubleArray:copyOf(java.lang.Iterable)" : "* Returns an immutable array containing the given values, in order.\n   *\n   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code\n   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link\n   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",
  "com.google.common.collect.ImmutableMap:put(java.lang.Object,java.lang.Object)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.cache.LocalCache$Segment:initTable(java.util.concurrent.atomic.AtomicReferenceArray)" : null,
  "com.google.common.collect.CompactHashSet:needsAllocArrays()" : "Returns whether arrays need to be allocated.",
  "com.google.common.collect.Range:canonical(com.google.common.collect.DiscreteDomain)" : "* Returns the canonical form of this range in the given domain. The canonical form has the\n   * following properties:\n   *\n   * <ul>\n   *   <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in\n   *       other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals(\n   *       ContiguousSet.create(a, domain))}\n   *   <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a,\n   *       domain).equals(ContiguousSet.create(b, domain))} implies {@code\n   *       a.canonical(domain).equals(b.canonical(domain))}\n   *   <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))}\n   * </ul>\n   *\n   * <p>Furthermore, this method guarantees that the range returned will be one of the following\n   * canonical forms:\n   *\n   * <ul>\n   *   <li>[start..end)\n   *   <li>[start..+∞)\n   *   <li>(-∞..end) (only if type {@code C} is unbounded below)\n   *   <li>(-∞..+∞) (only if type {@code C} is unbounded below)\n   * </ul>",
  "com.google.common.collect.CompactHashing:getHashPrefix(int,int)" : "Returns the hash prefix given the current mask.",
  "com.google.common.util.concurrent.Monitor:getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard)" : "* Returns an estimate of the number of threads waiting for the given guard to become satisfied.\n   * Note that because timeouts and interrupts may occur at any time, the estimate serves only as an\n   * upper bound on the actual number of waiters. This method is designed for use in monitoring of\n   * the system state, not for synchronization control.",
  "com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)" : "* @since 12.0",
  "com.google.common.collect.EnumHashBiMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.TreeRangeSet:complement()" : null,
  "com.google.common.collect.ConcurrentHashMultiset:entryIterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:size()" : null,
  "com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.lang.Iterable)" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableLongArray} will contain.",
  "com.google.common.graph.StandardValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long,long)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.ImmutableMultiset:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.collect.Maps$5:tailSet(java.lang.Object)" : null,
  "com.google.common.net.InetAddresses:getInet4Address(byte[])" : "* Returns an {@link Inet4Address}, given a byte array representation of the IPv4 address.\n   *\n   * @param bytes byte array representing an IPv4 address (should be of length 4)\n   * @return {@link Inet4Address} corresponding to the supplied byte array\n   * @throws IllegalArgumentException if a valid {@link Inet4Address} can not be created",
  "com.google.common.collect.RegularImmutableTable$CellSet:size()" : null,
  "com.google.common.collect.ImmutableTable:createValues()" : null,
  "com.google.common.collect.ConcurrentHashMultiset:snapshot()" : null,
  "com.google.common.graph.AbstractValueGraph:degree(java.lang.Object)" : null,
  "com.google.common.collect.TopKSelector:greatest(int,java.util.Comparator)" : "* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,\n   * relative to the specified comparator, and returns them via {@link #topK} in descending order.\n   *\n   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",
  "com.google.common.collect.Multimaps$MapMultimap:<init>(java.util.Map)" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:pop()" : null,
  "com.google.common.cache.LocalCache$WeightedStrongValueReference:<init>(java.lang.Object,int)" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:trimTrailingPadding(java.lang.CharSequence)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readByte()" : null,
  "com.google.common.collect.Multimaps$CustomSortedSetMultimap:createCollection()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:<init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int)" : null,
  "com.google.common.collect.Iterators:removeIf(java.util.Iterator,com.google.common.base.Predicate)" : "* Removes every element that satisfies the provided predicate from the iterator. The iterator\n   * will be left exhausted: its {@code hasNext()} method will return {@code false}.\n   *\n   * @param removeFrom the iterator to (potentially) remove elements from\n   * @param predicate a predicate that determines whether an element should be removed\n   * @return {@code true} if any elements were removed from the iterator\n   * @since 2.0",
  "com.google.common.collect.AbstractSortedKeySortedSetMultimap:createKeySet()" : null,
  "com.google.common.util.concurrent.ForwardingBlockingQueue:remainingCapacity()" : null,
  "com.google.common.collect.MinMaxPriorityQueue:peekFirst()" : "* Retrieves, but does not remove, the least element of this queue, or returns {@code null} if the\n   * queue is empty.",
  "com.google.common.collect.Sets:toImmutableEnumSet()" : "* Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet}\n   * with an implementation specialized for enums. Unlike {@link ImmutableSet#toImmutableSet}, the\n   * resulting set will iterate over elements in their enum definition order, not encounter order.\n   *\n   * @since 21.0",
  "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(int)" : "* Uses an {@link ArrayList} to store value collections, initialized to expect the specified\n     * number of values per key.\n     *\n     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",
  "com.google.common.hash.Fingerprint2011:bits()" : null,
  "com.google.common.cache.CacheBuilder:maximumSize(long)" : "* Specifies the maximum number of entries the cache may contain.\n   *\n   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in\n   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each\n   * resulting segment inside the cache <i>independently</i> limits its own size to approximately\n   * {@code maximumSize / concurrencyLevel}.\n   *\n   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.\n   * For example, the cache may evict an entry because it hasn't been used recently or very often.\n   *\n   * <p>If {@code maximumSize} is zero, elements will be evicted immediately after being loaded into\n   * cache. This can be useful in testing, or to disable caching temporarily.\n   *\n   * <p>This feature cannot be used in conjunction with {@link #maximumWeight}.\n   *\n   * @param maximumSize the maximum size of the cache\n   * @return this {@code CacheBuilder} instance (for chaining)\n   * @throws IllegalArgumentException if {@code maximumSize} is negative\n   * @throws IllegalStateException if a maximum size or weight was already set",
  "com.google.common.collect.ForwardingTable:clear()" : null,
  "com.google.common.io.ByteSource:size()" : "* Returns the size of this source in bytes, even if doing so requires opening and traversing an\n   * entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}.\n   *\n   * <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If\n   * absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link\n   * InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number\n   * of bytes that were read.\n   *\n   * <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient\n   * implementation, it is <i>possible</i> that this method will return a different number of bytes\n   * than would be returned by reading all of the bytes (for example, some special files may return\n   * a size of 0 despite actually having content when read).\n   *\n   * <p>In either case, for mutable sources such as files, a subsequent read may return a different\n   * number of bytes if the contents are changed.\n   *\n   * @throws IOException if an I/O error occurs while reading the size of this source",
  "com.google.common.collect.Multimaps$AsMap:clear()" : null,
  "com.google.common.collect.CompactHashMap:entrySetIterator()" : null,
  "com.google.common.collect.TreeMultiset$AvlNode:height(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.base.CharMatcher$Is:and(com.google.common.base.CharMatcher)" : null,
  "com.google.common.cache.LocalCache$LoadingValueReference:getEntry()" : null,
  "com.google.common.collect.CompactHashMap:replaceAll(java.util.function.BiFunction)" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:getValue()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)" : null,
  "com.google.common.util.concurrent.RateLimiter:tryAcquire(int,java.time.Duration)" : "* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained\n   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without\n   * waiting) if the permits would not have been granted before the timeout expired.\n   *\n   * @param permits the number of permits to acquire\n   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.\n   * @return {@code true} if the permits were acquired, {@code false} otherwise\n   * @throws IllegalArgumentException if the requested number of permits is negative or zero\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.graph.StandardNetwork:edges()" : null,
  "com.google.common.io.MoreFiles:equal(java.nio.file.Path,java.nio.file.Path)" : "* Returns true if the files located by the given paths exist, are not directories, and contain\n   * the same bytes.\n   *\n   * @throws IOException if an I/O error occurs\n   * @since 22.0",
  "com.google.common.collect.Sets:immutableEnumSet(java.lang.Iterable)" : "* Returns an immutable set instance containing the given enum elements. Internally, the returned\n   * set will be backed by an {@link EnumSet}.\n   *\n   * <p>The iteration order of the returned set follows the enum's iteration order, not the order in\n   * which the elements appear in the given collection.\n   *\n   * @param elements the elements, all of the same {@code enum} type, that the set should contain\n   * @return an immutable set containing those elements, minus duplicates",
  "com.google.common.primitives.ImmutableIntArray:subArray(int,int)" : "* Returns a new immutable array containing the values in the specified range.\n   *\n   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one\n   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,\n   * end).trimmed()}.",
  "com.google.common.reflect.Types$JavaVersion$1:usedInGenericType(java.lang.reflect.Type)" : null,
  "com.google.common.io.TempFileCreator$ThrowingCreator:createTempFile(java.lang.String)" : null,
  "com.google.common.reflect.TypeToken:isSubtypeOf(java.lang.reflect.Type)" : "* Returns true if this type is a subtype of the given {@code type}. \"Subtype\" is defined\n   * according to <a\n   * href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1\">the rules for type\n   * arguments</a> introduced with Java generics.\n   *\n   * @since 19.0",
  "com.google.common.collect.TreeRangeMap$AsMapOfRanges:get(java.lang.Object)" : null,
  "com.google.common.primitives.Shorts$ShortArrayAsList:<init>(short[],int,int)" : null,
  "com.google.common.util.concurrent.SimpleTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.Lists:indexOfRandomAccess(java.util.List,java.lang.Object)" : null,
  "com.google.common.io.ByteSource:copyTo(java.io.OutputStream)" : "* Copies the contents of this byte source to the given {@code OutputStream}. Does not close\n   * {@code output}.\n   *\n   * @return the number of bytes copied\n   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n   *     output}",
  "com.google.common.base.StandardSystemProperty:toString()" : "Returns a string representation of this system property.",
  "com.google.common.net.InternetDomainName:publicSuffixIndex()" : "* The index in the {@link #parts()} list at which the public suffix begins. For example, for the\n   * domain name {@code myblog.blogspot.co.uk}, the value would be 1 (the index of the {@code\n   * blogspot} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no public\n   * suffix was found.",
  "com.google.common.collect.ForwardingObject:toString()" : "Returns the string representation generated by the delegate's {@code toString} method.",
  "com.google.common.util.concurrent.ClosingFuture$Combiner:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a\n     * combining function to their values. The function can use a {@link DeferredCloser} to capture\n     * objects to be closed when the pipeline is done.\n     *\n     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs\n     * fail, so will the returned step.\n     *\n     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be\n     * cancelled.\n     *\n     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown\n     * {@code ExecutionException} will be extracted and used as the failure of the derived step.",
  "com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)" : "* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both\n   * the time to acquire the lock and the time to wait for the guard to be satisfied.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",
  "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:<init>(java.security.MessageDigest,int)" : null,
  "com.google.common.collect.StandardTable$CellIterator:hasNext()" : null,
  "com.google.common.collect.Lists:newArrayList()" : "* Creates a <i>mutable</i>, empty {@code ArrayList} instance (for Java 6 and earlier).\n   *\n   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableList#of()} instead.\n   *\n   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,\n   * use the {@code ArrayList} {@linkplain ArrayList#ArrayList() constructor} directly, taking\n   * advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.",
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:lowerCase()" : null,
  "com.google.common.collect.ImmutableList:<init>()" : null,
  "com.google.common.util.concurrent.ClosingFuture:catching(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)" : "* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function\n   * to its exception if it is an instance of a given exception type. The function can use a {@link\n   * DeferredCloser} to capture objects to be closed when the pipeline is done.\n   *\n   * <p>If this {@code ClosingFuture} succeeds or fails with a different exception type, the\n   * function will not be called, and the derived {@code ClosingFuture} will be equivalent to this\n   * one.\n   *\n   * <p>If the function throws an exception, that exception is used as the result of the derived\n   * {@code ClosingFuture}.\n   *\n   * <p>Example usage:\n   *\n   * {@snippet :\n   * ClosingFuture<QueryResult> queryFuture =\n   *     queryFuture.catching(\n   *         QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor);\n   * }\n   *\n   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings\n   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.\n   *\n   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link\n   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on\n   * the original {@code ClosingFuture} instance.\n   *\n   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception\n   *     type is matched against this step's exception. \"This step's exception\" means the cause of\n   *     the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}\n   *     underlying this step or, if {@code get()} throws a different kind of exception, that\n   *     exception itself. To avoid hiding bugs and other unrecoverable errors, callers should\n   *     prefer more specific types, avoiding {@code Throwable.class} in particular.\n   * @param fallback the function to be called if this step fails with the expected exception type.\n   *     The function's argument is this step's exception. \"This step's exception\" means the cause\n   *     of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}\n   *     underlying this step or, if {@code get()} throws a different kind of exception, that\n   *     exception itself.\n   * @param executor the executor that runs {@code fallback} if the input fails",
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble:<init>(java.util.Spliterator$OfDouble,java.util.Spliterator,java.util.function.Function,int,long)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:add(java.lang.Object)" : null,
  "com.google.common.reflect.MutableTypeToInstanceMap:getInstance(java.lang.Class)" : null,
  "com.google.common.collect.CompactHashing:tableSize(int)" : "* Returns the power of 2 hashtable size required to hold the expected number of items or the\n   * minimum hashtable size, whichever is greater.",
  "com.google.common.graph.ElementOrder:type()" : "Returns the type of ordering used.",
  "com.google.common.base.Utf8:encodedLength(java.lang.CharSequence)" : "* Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string, this\n   * method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in both\n   * time and space.\n   *\n   * @throws IllegalArgumentException if {@code sequence} contains ill-formed UTF-16 (unpaired\n   *     surrogates)",
  "com.google.common.base.Equivalence$EquivalentToPredicate:toString()" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:isRunning()" : null,
  "com.google.common.io.CharSource$StringCharSource:<init>(java.lang.String)" : null,
  "com.google.common.util.concurrent.OverflowAvoidingLockSupport:parkNanos(java.lang.Object,long)" : null,
  "com.google.common.math.LinearTransformation$LinearTransformationBuilder:<init>(double,double)" : null,
  "com.google.common.graph.StandardNetwork:allowsSelfLoops()" : null,
  "com.google.common.collect.Maps$AsMapView:getOrDefault(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedSet:copyOf(java.lang.Iterable)" : "* Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n   * When multiple elements are equivalent according to {@code compareTo()}, only the first one\n   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,\n   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.\n   *\n   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}\n   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},\n   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}\n   * containing one element (the given set itself).\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * <p>This method is not type-safe, as it may be called on elements that are not mutually\n   * comparable.\n   *\n   * @throws ClassCastException if the elements are not mutually comparable\n   * @throws NullPointerException if any of {@code elements} is null",
  "com.google.common.collect.Maps$UnmodifiableBiMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.SortedMultisets$ElementSet:<init>(com.google.common.collect.SortedMultiset)" : null,
  "com.google.common.graph.MapRetrievalCache:addToCache(com.google.common.graph.MapRetrievalCache$CacheEntry)" : null,
  "com.google.common.collect.RegularImmutableMap:get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,long,java.util.concurrent.TimeUnit)" : "* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(permits,\n   * timeout, unit)} uninterruptibly.\n   *\n   * @since 18.0",
  "com.google.common.cache.LocalCache$StrongEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char,java.lang.Object)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)" : "* Combines three iterables into a single iterable. The returned iterable has an iterator that\n   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the\n   * elements in {@code c}. The source iterators are not polled until necessary.\n   *\n   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input\n   * iterator supports it.\n   *\n   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code\n   * Streams.concat(a, b, c)}.",
  "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:add(java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)" : null,
  "com.google.common.cache.AbstractCache:putAll(java.util.Map)" : "* @since 12.0",
  "com.google.common.hash.HashCode$LongHashCode:bits()" : null,
  "com.google.common.net.InternetDomainName:parent()" : "* Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the\n   * current domain with the leftmost part removed. For example, the parent of {@code\n   * www.google.com} is {@code google.com}.\n   *\n   * @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}",
  "com.google.common.collect.ImmutableSortedSet:pollFirst()" : "* Guaranteed to throw an exception and leave the set unmodified.\n   *\n   * @since 12.0\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.Appendable,java.util.Map)" : "* Appends the string representation of each entry of {@code map}, using the previously\n     * configured separator and key-value separator, to {@code appendable}.",
  "com.google.common.collect.FilteredMultimapValues:iterator()" : null,
  "com.google.common.io.AppendableWriter:write(java.lang.String,int,int)" : null,
  "com.google.common.net.MediaType$Tokenizer:previewChar()" : null,
  "com.google.common.collect.ImmutableList$SubList:listIterator()" : null,
  "com.google.common.collect.LinkedListMultimap:isEmpty()" : null,
  "com.google.common.collect.ImmutableBiMap:toImmutableBiMap(java.util.function.Function,java.util.function.Function)" : "* Returns a {@link Collector} that accumulates elements into an {@code ImmutableBiMap} whose keys\n   * and values are the result of applying the provided mapping functions to the input elements.\n   * Entries appear in the result {@code ImmutableBiMap} in encounter order.\n   *\n   * <p>If the mapped keys or values contain duplicates (according to {@link\n   * Object#equals(Object)}), an {@code IllegalArgumentException} is thrown when the collection\n   * operation is performed. (This differs from the {@code Collector} returned by {@link\n   * Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)\n   *\n   * @since 21.0",
  "com.google.common.base.Functions$ConstantFunction:equals(java.lang.Object)" : null,
  "com.google.common.collect.Maps$ValueDifferenceImpl:toString()" : null,
  "com.google.common.collect.RegularImmutableSortedSet:unsafeBinarySearch(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher:isNot(char)" : "* Returns a {@code char} matcher that matches any character except the BMP character specified.\n   *\n   * <p>To negate another {@code CharMatcher}, use {@link #negate()}.",
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:keySet()" : null,
  "com.google.common.primitives.Doubles:<init>()" : null,
  "com.google.common.primitives.Chars:reverse(char[])" : "* Reverses the elements of {@code array}. This is equivalent to {@code\n   * Collections.reverse(Chars.asList(array))}, but is likely to be more efficient.\n   *\n   * @since 23.1",
  "com.google.common.collect.AbstractTable:isEmpty()" : null,
  "com.google.common.cache.LocalCache$StrongValueReference:getWeight()" : null,
  "com.google.common.collect.FilteredEntrySetMultimap:entries()" : null,
  "com.google.common.net.InternetDomainName:isTopPrivateDomain()" : "* Indicates whether this domain name is composed of exactly one subdomain component followed by a\n   * {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for {@code\n   * google.com} {@code foo.co.uk}, and {@code myblog.blogspot.com}, but not for {@code\n   * www.google.com}, {@code co.uk}, or {@code blogspot.com}.\n   *\n   * <p>This method can be used to determine whether a domain is probably the highest level for\n   * which cookies may be set, though even that depends on individual browsers' implementations of\n   * cookie controls. See <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n   *\n   * @since 6.0",
  "com.google.common.collect.RegularImmutableSet:spliterator()" : null,
  "com.google.common.collect.EnumHashBiMap:checkKey(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingNavigableSet:standardTailSet(java.lang.Object)" : "* A sensible definition of {@link #tailSet(Object)} in terms of the {@link #tailSet(Object,\n   * boolean)} method. If you override {@link #tailSet(Object, boolean)}, you may wish to override\n   * {@link #tailSet(Object)} to forward to this implementation.",
  "com.google.common.collect.ImmutableList$ReverseImmutableList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.MapMaker:toString()" : "* Returns a string representation for this MapMaker instance. The exact form of the returned\n   * string is not specified.",
  "com.google.common.collect.ImmutableMap:<init>()" : null,
  "com.google.common.collect.AbstractBiMap$ValueSet:delegate()" : null,
  "com.google.common.net.InetAddresses:toAddrString(java.net.InetAddress)" : "* Returns the string representation of an {@link InetAddress}.\n   *\n   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6\n   * addresses, the output follows <a href=\"http://tools.ietf.org/html/rfc5952\">RFC 5952</a> section\n   * 4. The main difference is that this method uses \"::\" for zero compression, while Java's version\n   * uses the uncompressed form (except on Android, where the zero compression is also done). The\n   * other difference is that this method outputs any scope ID in the format that it was provided at\n   * creation time, while Android may always output it as an interface name, even if it was supplied\n   * as a numeric ID.\n   *\n   * <p>This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses\n   * such as \"::c000:201\".\n   *\n   * @param ip {@link InetAddress} to be converted to an address string\n   * @return {@code String} containing the text-formatted IP address\n   * @since 10.0",
  "com.google.common.collect.ImmutableRangeSet$AsSet:iterator()" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueStoppedEvent()" : null,
  "com.google.common.math.PairedStats:sumOfProductsOfDeltas()" : null,
  "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:trySetCancelled()" : null,
  "com.google.common.collect.ImmutableRangeMap:asMapOfRanges()" : null,
  "com.google.common.net.MediaType:create(java.lang.String,java.lang.String,com.google.common.collect.Multimap)" : null,
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:higherKey(java.lang.Object)" : null,
  "com.google.common.hash.HashCode$BytesHashCode:asBytes()" : null,
  "com.google.common.collect.TreeRangeSet:intersects(com.google.common.collect.Range)" : null,
  "com.google.common.hash.Fingerprint2011:weakHashLength32WithSeeds(byte[],int,long,long,long[])" : "* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are\n   * returned in the output array - this is 12% faster than allocating new arrays every time.",
  "com.google.common.collect.DiscreteDomain$BigIntegerDomain:offset(java.math.BigInteger,long)" : null,
  "com.google.common.primitives.ImmutableLongArray:builder(int)" : "* Returns a new, empty builder for {@link ImmutableLongArray} instances, sized to hold up to\n   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.\n   *\n   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number\n   * of values that will be added, if that knowledge is readily available. It is better to guess a\n   * value slightly too high than slightly too low. If the value is not exact, the {@link\n   * ImmutableLongArray} that is built will very likely occupy more memory than strictly necessary;\n   * to trim memory usage, build using {@code builder.build().trimmed()}.",
  "com.google.common.collect.ImmutableListMultimap:<init>(com.google.common.collect.ImmutableMap,int)" : null,
  "com.google.common.collect.ImmutableMapEntrySet:hashCode()" : null,
  "com.google.common.hash.Funnels$StringCharsetFunnel:funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink)" : null,
  "com.google.common.collect.ImmutableList:asList()" : "* Returns this list instance.\n   *\n   * @since 2.0\n   * @deprecated There is no reason to use this; it always returns {@code this}.",
  "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated(java.time.Duration)" : "* @since 28.0",
  "com.google.common.base.Predicates$InPredicate:<init>(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableMap$Builder:put(java.util.Map$Entry)" : "* Adds the given {@code entry} to the map, making it immutable if necessary. If the same key is\n     * put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will\n     * keep the last value put for that key.\n     *\n     * @since 11.0",
  "com.google.common.collect.LinkedListMultimap:getCopy(java.lang.Object)" : null,
  "com.google.common.collect.EnumBiMap:keySet()" : null,
  "com.google.common.collect.CompactHashSet:add(java.lang.Object)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:count(java.lang.Object)" : "* Returns the number of occurrences of {@code element} in this multiset.\n   *\n   * @param element the element to look for\n   * @return the nonnegative number of occurrences of the element",
  "com.google.common.primitives.Chars:indexOf(char[],char[])" : "* Returns the start position of the first occurrence of the specified {@code target} within\n   * {@code array}, or {@code -1} if there is no such occurrence.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n   * i, i + target.length)} contains exactly the same elements as {@code target}.\n   *\n   * @param array the array to search for the sequence {@code target}\n   * @param target the array to search for as a sub-sequence of {@code array}",
  "com.google.common.io.ByteStreams:readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)" : "* Process the bytes of the given input stream using the given processor.\n   *\n   * @param input the input stream to process\n   * @param processor the object to which to pass the bytes of the stream\n   * @return the result of the byte processor\n   * @throws IOException if an I/O error occurs\n   * @since 14.0",
  "com.google.common.collect.MapMakerInternalMap$Segment:reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)" : "Removes an entry whose value has been garbage collected.",
  "com.google.common.collect.MultimapBuilder$EnumSetSupplier:<init>(java.lang.Class)" : null,
  "com.google.common.collect.Streams:mapWithIndex(java.util.stream.Stream,com.google.common.collect.Streams$FunctionWithIndex)" : "* Returns a stream consisting of the results of applying the given function to the elements of\n   * {@code stream} and their indices in the stream. For example,\n   *\n   * {@snippet :\n   * mapWithIndex(\n   *     Stream.of(\"a\", \"b\", \"c\"),\n   *     (e, index) -> index + \":\" + e)\n   * }\n   *\n   * <p>would return {@code Stream.of(\"0:a\", \"1:b\", \"2:c\")}.\n   *\n   * <p>The resulting stream is <a\n   * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n   * if and only if {@code stream} was efficiently splittable and its underlying spliterator\n   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream\n   * comes from a data structure supporting efficient indexed random access, typically an array or\n   * list.\n   *\n   * <p>The order of the resulting stream is defined if and only if the order of the original stream\n   * was defined.",
  "com.google.common.collect.ObjectArrays:newArray(java.lang.Object[],int)" : "* Returns a new array of the given length with the same type as a reference array.\n   *\n   * @param reference any array of the desired type\n   * @param length the length of the new array",
  "com.google.common.base.Suppliers:synchronizedSupplier(com.google.common.base.Supplier)" : "* Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling\n   * it, making it thread-safe.",
  "com.google.common.reflect.Invokable:isNative()" : "Returns true if the element is native.",
  "com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:setResult(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.collect.RegularImmutableBiMap:isPartialView()" : null,
  "com.google.common.reflect.TypeResolver$TypeVariableKey:hashCode()" : null,
  "com.google.common.hash.Funnels$SequentialFunnel:equals(java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$Base64Encoding:encodeTo(java.lang.Appendable,byte[],int,int)" : null,
  "com.google.common.collect.RegularContiguousSet:intersectionInCurrentDomain(com.google.common.collect.Range)" : null,
  "com.google.common.collect.CompactHashSet:setEntry(int,int)" : null,
  "com.google.common.graph.UndirectedGraphConnections:adjacentNodes()" : null,
  "com.google.common.collect.Synchronized$SynchronizedDeque:removeFirst()" : null,
  "com.google.common.collect.DescendingImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)" : null,
  "com.google.common.collect.AbstractNavigableMap:floorKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableTable:cellSpliterator()" : null,
  "com.google.common.hash.HashCode$LongHashCode:<init>(long)" : null,
  "com.google.common.collect.Maps$DescendingMap:ceilingKey(java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$EntrySet:iterator()" : null,
  "com.google.common.base.CharMatcher$IsNot:matches(char)" : null,
  "com.google.common.util.concurrent.Monitor:beginWaitingFor(com.google.common.util.concurrent.Monitor$Guard)" : "Records that the current thread is about to wait on the specified guard.",
  "com.google.common.collect.ImmutableListMultimap$Builder:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.math.LinearTransformation$NaNLinearTransformation:isHorizontal()" : null,
  "com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap,java.util.Comparator)" : null,
  "com.google.common.math.Quantiles:median()" : "Specifies the computation of a median (i.e. the 1st 2-quantile).",
  "com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String,int)" : "* Returns the unsigned {@code byte} value represented by a string with the given radix.\n   *\n   * @param string the string containing the unsigned {@code byte} representation to be parsed.\n   * @param radix the radix to use while parsing {@code string}\n   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with\n   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link\n   *     Character#MAX_RADIX}.\n   * @throws NullPointerException if {@code string} is null (in contrast to {@link\n   *     Byte#parseByte(String)})\n   * @since 13.0",
  "com.google.common.reflect.TypeResolver$TypeVariableKey:equalsType(java.lang.reflect.Type)" : "* Returns true if {@code type} is a {@code TypeVariable} with the same name and declared by the\n     * same {@code GenericDeclaration}.",
  "com.google.common.collect.Multimaps$MapMultimap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$Itr:remove()" : null,
  "com.google.common.collect.Maps:indexMap(java.util.Collection)" : "Returns a map from the ith element of list to i.",
  "com.google.common.util.concurrent.MoreExecutors:rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)" : "* Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate\n   * executor to the given {@code future}.\n   *\n   * <p>Note, the returned executor can only be used once.",
  "com.google.common.collect.Sets$DescendingSet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:<init>()" : null,
  "com.google.common.collect.Collections2$OrderedPermutationIterator:findNextJ()" : null,
  "com.google.common.util.concurrent.ForwardingListenableFuture:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.ArrayTable$Row:getValue(int)" : null,
  "com.google.common.collect.ImmutableTable:values()" : null,
  "com.google.common.collect.ImmutableRangeMap:toString()" : null,
  "com.google.common.base.Throwables:lazyStackTrace(java.lang.Throwable)" : "* Returns the stack trace of {@code throwable}, possibly providing slower iteration over the full\n   * trace but faster iteration over parts of the trace. Here, \"slower\" and \"faster\" are defined in\n   * comparison to the normal way to access the stack trace, {@link Throwable#getStackTrace()\n   * throwable.getStackTrace()}. Note, however, that this method's special implementation is not\n   * available for all platforms and configurations. If that implementation is unavailable, this\n   * method falls back to {@code getStackTrace}. Callers that require the special implementation can\n   * check its availability with {@link #lazyStackTraceIsLazy()}.\n   *\n   * <p>The expected (but not guaranteed) performance of the special implementation differs from\n   * {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quickly\n   * by delaying the per-stack-frame work until each element is accessed. Roughly speaking:\n   *\n   * <ul>\n   *   <li>{@code getStackTrace} takes {@code stackSize} time to return but then negligible time to\n   *       retrieve each element of the returned list.\n   *   <li>{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time\n   *       to retrieve each element of the returned list (probably slightly more than {@code\n   *       1/stackSize}).\n   * </ul>\n   *\n   * <p>Note: The special implementation does not respect calls to {@link Throwable#setStackTrace\n   * throwable.setStackTrace}. Instead, it always reflects the original stack trace from the\n   * exception's creation.\n   *\n   * @since 19.0\n   * @deprecated This method is equivalent to {@link Throwable#getStackTrace()} on JDK versions past\n   *     JDK 8 and on all Android versions. Use {@link Throwable#getStackTrace()} directly, or where\n   *     possible use the {@code java.lang.StackWalker.walk} method introduced in JDK 9.",
  "com.google.common.collect.Maps$UnmodifiableNavigableMap:replace(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Streams:stream(java.util.OptionalLong)" : "* If a value is present in {@code optional}, returns a stream containing only that element,\n   * otherwise returns an empty stream.\n   *\n   * <p><b>Java 9 users:</b> use {@code optional.stream()} instead.",
  "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,long)" : "* Ensures that an object reference passed as a parameter to the calling method is not null.\n   *\n   * <p>See {@link #checkNotNull(Object, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.collect.Synchronized:map(java.util.Map,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableList:sortedCopyOf(java.lang.Iterable)" : "* Returns an immutable list containing the given elements, sorted according to their natural\n   * order. The sorting algorithm used is stable, so elements that compare as equal will stay in the\n   * order in which they appear in the input.\n   *\n   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code\n   * ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code\n   * asList()} view.\n   *\n   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted\n   * {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}.\n   *\n   * @throws NullPointerException if any element in the input is null\n   * @since 21.0",
  "com.google.common.graph.Traverser$1:newTraversal()" : null,
  "com.google.common.collect.StandardTable$RowMap$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.collect.Cut$AboveAll:isLessThan(java.lang.Comparable)" : null,
  "com.google.common.primitives.Doubles:lastIndexOf(double[],double)" : "* Returns the index of the last appearance of the value {@code target} in {@code array}. Note\n   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n   *\n   * @param array an array of {@code double} values, possibly empty\n   * @param target a primitive {@code double} value\n   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:entrySet()" : null,
  "com.google.common.util.concurrent.ServiceManager:startupDurations()" : "* Returns the service load times. This value will only return startup times for services that\n   * have finished starting.\n   *\n   * @return Map of services and their corresponding startup time, the map entries will be ordered\n   *     by startup time.\n   * @since 31.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)" : null,
  "com.google.common.collect.AbstractTable$Values:contains(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:remove()" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:descendingEntryIterator()" : null,
  "com.google.common.collect.AbstractMapBasedMultiset:<init>(java.util.Map)" : "Standard constructor.",
  "com.google.common.collect.LinkedListMultimap$NodeIterator:checkForConcurrentModification()" : null,
  "com.google.common.hash.BloomFilter:expectedFpp()" : "* Returns the probability that {@linkplain #mightContain(Object)} will erroneously return {@code\n   * true} for an object that has not actually been put in the {@code BloomFilter}.\n   *\n   * <p>Ideally, this number should be close to the {@code fpp} parameter passed in {@linkplain\n   * #create(Funnel, int, double)}, or smaller. If it is significantly higher, it is usually the\n   * case that too many elements (more than expected) have been put in the {@code BloomFilter},\n   * degenerating it.\n   *\n   * @since 14.0 (since 11.0 as expectedFalsePositiveProbability())",
  "com.google.common.io.LittleEndianDataInputStream:readByte()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)" : null,
  "com.google.common.collect.FilteredEntryMultimap:size()" : null,
  "com.google.common.graph.ImmutableNetwork:allowsParallelEdges()" : null,
  "com.google.common.collect.TreeBasedTable$TreeRow:maintainEmptyInvariant()" : null,
  "com.google.common.collect.Sets$PowerSet:toString()" : null,
  "com.google.common.eventbus.Subscriber$SynchronizedSubscriber:invokeSubscriberMethod(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingKeySet()" : null,
  "com.google.common.reflect.TypeResolver$TypeVariableKey:<init>(java.lang.reflect.TypeVariable)" : null,
  "com.google.common.collect.ImmutableSortedSet:<init>(java.util.Comparator)" : null,
  "com.google.common.math.Quantiles$ScaleAndIndexes:<init>(int,int[])" : null,
  "com.google.common.collect.Multimaps$Entries:size()" : null,
  "com.google.common.collect.ConcurrentHashMultiset:entrySet()" : null,
  "com.google.common.io.TempFileCreator$JavaIoCreator:createTempDir()" : null,
  "com.google.common.cache.LocalCache$EntryFactory$8:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSet$CachingAsList:iterator()" : null,
  "com.google.common.collect.ImmutableBiMap$Builder:orderEntriesByValue(java.util.Comparator)" : "* Configures this {@code Builder} to order entries by value according to the specified\n     * comparator.\n     *\n     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,\n     * the entry that was inserted first will be first in the built map's iteration order.\n     *\n     * @throws IllegalStateException if this method was already called\n     * @since 19.0",
  "com.google.common.math.IntMath:lessThanBranchFree(int,int)" : "* Returns 1 if {@code x < y} as unsigned integers, and 0 otherwise. Assumes that x - y fits into\n   * a signed int. The implementation is branch-free, and benchmarks suggest it is measurably (if\n   * narrowly) faster than the straightforward ternary expression.",
  "com.google.common.collect.ImmutableList$Builder:add(java.lang.Object[],int)" : null,
  "com.google.common.io.Files:equal(java.io.File,java.io.File)" : "* Returns true if the given files exist, are not directories, and contain the same bytes.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.Iterators:clear(java.util.Iterator)" : "Clears the iterator using its remove method.",
  "com.google.common.util.concurrent.AtomicDouble:getAndAdd(double)" : "* Atomically adds the given value to the current value.\n   *\n   * @param delta the value to add\n   * @return the previous value",
  "com.google.common.primitives.Longs:checkNoOverflow(long)" : null,
  "com.google.common.collect.ImmutableAsList:isEmpty()" : null,
  "com.google.common.collect.ForwardingList:standardIndexOf(java.lang.Object)" : "* A sensible default implementation of {@link #indexOf}, in terms of {@link #listIterator()}. If\n   * you override {@link #listIterator()}, you may wish to override {@link #indexOf} to forward to\n   * this implementation.\n   *\n   * @since 7.0",
  "com.google.common.util.concurrent.ForwardingCondition:signal()" : null,
  "com.google.common.collect.TreeRangeMap$SubRangeMap:toString()" : null,
  "com.google.common.collect.AbstractSortedMultiset:createElementSet()" : null,
  "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\n   * custom message otherwise.\n   *\n   * <p>See {@link #verify(boolean, String, Object...)} for details.\n   *\n   * @since 23.1 (varargs overload since 17.0)",
  "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:build()" : null,
  "com.google.common.collect.ImmutableEnumMap:keySpliterator()" : null,
  "com.google.common.collect.ImmutableMultimap$Values:copyIntoArray(java.lang.Object[],int)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:floor(java.lang.Object)" : null,
  "com.google.common.base.Enums$StringConverter:doForward(java.lang.String)" : null,
  "com.google.common.base.Functions$IdentityFunction:apply(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$Segment:drainReferenceQueues()" : "* Drain the key and value reference queues, cleaning up internal entries containing garbage\n     * collected keys or values.",
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:omitPadding()" : null,
  "com.google.common.collect.AbstractRangeSet:hashCode()" : null,
  "com.google.common.collect.MapMakerInternalMap$HashIterator:hasNext()" : null,
  "com.google.common.collect.Maps:removeOnlyNavigableSet(java.util.NavigableSet)" : null,
  "com.google.common.collect.MapMakerInternalMap$Segment:containsValue(java.lang.Object)" : "* This method is a convenience for testing. Code should call {@link\n     * MapMakerInternalMap#containsValue} directly.",
  "com.google.common.base.Joiner:join(java.util.Iterator)" : "* Returns a string containing the string representation of each of {@code parts}, using the\n   * previously configured separator between each.\n   *\n   * @since 11.0",
  "com.google.common.hash.LittleEndianByteArray:load32(byte[],int)" : "* Load 4 bytes from the provided array at the indicated offset.\n   *\n   * @param source the input bytes\n   * @param offset the offset into the array at which to start\n   * @return the value found in the array in the form of a long",
  "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:tryLock()" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceListener:failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable)" : null,
  "com.google.common.base.Predicates$ContainsPatternPredicate:equals(java.lang.Object)" : null,
  "com.google.common.io.Files:asByteSource(java.io.File)" : "* Returns a new {@link ByteSource} for reading bytes from the given file.\n   *\n   * @since 14.0",
  "com.google.common.io.TempFileCreator$JavaIoCreator:createTempFile(java.lang.String)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:keyStrength()" : null,
  "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:getSuperclass(java.lang.Object)" : null,
  "com.google.common.eventbus.Dispatcher:legacyAsync()" : "* Returns a dispatcher that queues events that are posted in a single global queue. This behavior\n   * matches the original behavior of AsyncEventBus exactly, but is otherwise not especially useful.\n   * For async dispatch, an {@linkplain #immediate() immediate} dispatcher should generally be\n   * preferable.",
  "com.google.common.collect.Lists$AbstractListWrapper:addAll(int,java.util.Collection)" : null,
  "com.google.common.collect.TreeBasedTable:columnComparator()" : "* Returns the comparator that orders the columns. With natural ordering, {@link\n   * Ordering#natural()} is returned.\n   *\n   * @deprecated Store the {@link Comparator} alongside the {@link Table}. Or, if you know that the\n   *     {@link Table} contains at least one value, you can retrieve the {@link Comparator} with:\n   *     {@code ((SortedMap<C, V>) table.rowMap().values().iterator().next()).comparator();}.",
  "com.google.common.hash.AbstractHashFunction:hashBytes(java.nio.ByteBuffer)" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultiset:remove(java.lang.Object,int)" : null,
  "com.google.common.collect.AbstractBiMap$EntrySet:containsAll(java.util.Collection)" : null,
  "com.google.common.util.concurrent.WrappingScheduledExecutorService:scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStop()" : null,
  "com.google.common.collect.AbstractTable$CellSet:remove(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableClassToInstanceMap:of(java.lang.Class,java.lang.Object)" : "* Returns an {@code ImmutableClassToInstanceMap} containing a single entry.\n   *\n   * @since 19.0",
  "com.google.common.base.Platform$JdkPatternCompiler:isPcreLike()" : null,
  "com.google.common.collect.Maps:synchronizedBiMap(com.google.common.collect.BiMap)" : "* Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee\n   * serial access, it is critical that <b>all</b> access to the backing bimap is accomplished\n   * through the returned bimap.\n   *\n   * <p>It is imperative that the user manually synchronize on the returned map when accessing any\n   * of its collection views:\n   *\n   * {@snippet :\n   * BiMap<Long, String> map = Maps.synchronizedBiMap(\n   *     HashBiMap.<Long, String>create());\n   * ...\n   * Set<Long> set = map.keySet();  // Needn't be in synchronized block\n   * ...\n   * synchronized (map) {  // Synchronizing on map, not set!\n   *   Iterator<Long> it = set.iterator(); // Must be in synchronized block\n   *   while (it.hasNext()) {\n   *     foo(it.next());\n   *   }\n   * }\n   * }\n   *\n   * <p>Failure to follow this advice may result in non-deterministic behavior.\n   *\n   * <p>The returned bimap will be serializable if the specified bimap is serializable.\n   *\n   * @param bimap the bimap to be wrapped in a synchronized view\n   * @return a synchronized view of the specified bimap",
  "com.google.common.reflect.TypeToken$TypeSet:delegate()" : null,
  "com.google.common.collect.ForwardingDeque:peekFirst()" : null,
  "com.google.common.collect.AbstractIndexedListIterator:previous()" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:<init>(com.google.common.graph.ValueGraph)" : null,
  "com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,java.time.Duration)" : "* Duration-based overload of {@link #schedule(Runnable, long, TimeUnit)}.\n   *\n   * @since 29.0",
  "com.google.common.primitives.ImmutableLongArray$AsList:spliterator()" : null,
  "com.google.common.reflect.Types$JavaVersion:typeName(java.lang.reflect.Type)" : null,
  "com.google.common.collect.StandardTable$Column$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.math.LongMath$MillerRabinTester$1:mulMod(long,long,long)" : "Returns a * b mod m.",
  "com.google.common.cache.LocalCache$NullEntry:getHash()" : null,
  "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:delegate()" : null,
  "com.google.common.reflect.TypeToken:equals(java.lang.Object)" : "* Returns true if {@code o} is another {@code TypeToken} that represents the same {@link Type}.",
  "com.google.common.collect.Multimaps$TransformedEntriesMultimap:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Cut:belowValue(java.lang.Comparable)" : null,
  "com.google.common.graph.AbstractUndirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)" : null,
  "com.google.common.cache.CacheStats:requestCount()" : "* Returns the number of times {@link Cache} lookup methods have returned either a cached or\n   * uncached value. This is defined as {@code hitCount + missCount}.\n   *\n   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is\n   * guaranteed not to throw an exception). If you require specific handling, we recommend\n   * implementing your own stats collector.",
  "com.google.common.primitives.Doubles$DoubleArrayAsList:lastIndexOf(java.lang.Object)" : null,
  "com.google.common.collect.Multisets$FilteredMultiset:createElementSet()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:values()" : null,
  "com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(com.google.common.graph.EndpointPair)" : null,
  "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readFully(byte[])" : null,
  "com.google.common.primitives.Shorts:indexOf(short[],short)" : "* Returns the index of the first appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code short} values, possibly empty\n   * @param target a primitive {@code short} value\n   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.io.ByteSource$AsCharSource:toString()" : null,
  "com.google.common.collect.Iterators:removeAll(java.util.Iterator,java.util.Collection)" : "* Traverses an iterator and removes every element that belongs to the provided collection. The\n   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.\n   *\n   * @param removeFrom the iterator to (potentially) remove elements from\n   * @param elementsToRemove the elements to remove\n   * @return {@code true} if any element was removed from {@code iterator}",
  "com.google.common.primitives.UnsignedInteger:times(com.google.common.primitives.UnsignedInteger)" : "* Returns the result of multiplying this and {@code val}. If the result would have more than 32\n   * bits, returns the low 32 bits of the result.\n   *\n   * @since 14.0",
  "com.google.common.collect.RegularImmutableMultiset:isPartialView()" : null,
  "com.google.common.math.IntMath:checkedPow(int,int)" : null,
  "com.google.common.collect.AbstractSequentialIterator:<init>(java.lang.Object)" : "* Creates a new iterator with the given first element, or, if {@code firstOrNull} is null,\n   * creates a new empty iterator.",
  "com.google.common.collect.ImmutableListMultimap:of()" : null,
  "com.google.common.base.Predicates:not(com.google.common.base.Predicate)" : "* Returns a predicate that evaluates to {@code true} if the given predicate evaluates to {@code\n   * false}.\n   *\n   * <p><b>Discouraged:</b> Prefer using {@code predicate.negate()}.",
  "com.google.common.collect.AbstractMultiset:contains(java.lang.Object)" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Range)" : null,
  "com.google.common.math.Quantiles:percentiles()" : "Specifies the computation of percentiles (i.e. 100-quantiles).",
  "com.google.common.base.Predicates:contains(java.util.regex.Pattern)" : "* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested\n   * contains any match for the given regular expression pattern. The test used is equivalent to\n   * {@code pattern.matcher(arg).find()}\n   *\n   * @since 3.0",
  "com.google.common.util.concurrent.AggregateFutureState:decrementRemainingAndGet()" : null,
  "com.google.common.collect.Collections2$TransformedCollection:spliterator()" : null,
  "com.google.common.collect.ReverseNaturalOrdering:reverse()" : null,
  "com.google.common.collect.Multisets$ElementSet:contains(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashMap:setEntry(int,int)" : null,
  "com.google.common.base.CharMatcher:none()" : "* Matches no characters.\n   *\n   * @since 19.0 (since 1.0 as constant {@code NONE})",
  "com.google.common.escape.CharEscaper:growBuffer(char[],int,int)" : "* Helper method to grow the character buffer as needed, this only happens once in a while so it's\n   * ok if it's in a method call. If the index passed in is 0 then no copying will be done.",
  "com.google.common.collect.AbstractBiMap$EntrySet:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.RegularImmutableTable:createCellSet()" : null,
  "com.google.common.hash.Murmur3_32HashFunction:hashBytes(byte[],int,int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray()" : null,
  "com.google.common.util.concurrent.AbstractTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMap:keySet()" : "Returns an immutable sorted set of the keys in this map.",
  "com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:<init>(java.lang.Object)" : null,
  "com.google.common.hash.Hashing:consistentHash(long,int)" : "* Assigns to {@code input} a \"bucket\" in the range {@code [0, buckets)}, in a uniform manner that\n   * minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h,\n   * n)} equals:\n   *\n   * <ul>\n   *   <li>{@code n - 1}, with approximate probability {@code 1/n}\n   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})\n   * </ul>\n   *\n   * <p>This method is suitable for the common use case of dividing work among buckets that meet the\n   * following conditions:\n   *\n   * <ul>\n   *   <li>You want to assign the same fraction of inputs to each bucket.\n   *   <li>When you reduce the number of buckets, you can accept that the most recently added\n   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,\n   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and\n   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among\n   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to\n   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides\n   *       no way for you to specify which of the three buckets is disappearing. Thus, if your\n   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will\n   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}\n   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.\n   * </ul>\n   *\n   * <p>See the <a href=\"http://en.wikipedia.org/wiki/Consistent_hashing\">Wikipedia article on\n   * consistent hashing</a> for more information.",
  "com.google.common.math.BigIntegerMath:log2(java.math.BigInteger,java.math.RoundingMode)" : "* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.\n   *\n   * @throws IllegalArgumentException if {@code x <= 0}\n   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n   *     is not a power of two",
  "com.google.common.collect.Collections2$OrderedPermutationIterator:computeNext()" : null,
  "com.google.common.util.concurrent.SequentialExecutor:execute(java.lang.Runnable)" : "* Adds a task to the queue and makes sure a worker thread is running.\n   *\n   * <p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor,\n   * execution of tasks will stop until a call to this method is made.",
  "com.google.common.collect.ImmutableRangeSet:builder()" : "Returns a new builder for an immutable range set.",
  "com.google.common.collect.ImmutableRangeSet$1:isPartialView()" : "* Returns {@code true} if this immutable range set's implementation contains references to\n   * user-created objects that aren't accessible via this range set's methods. This is generally\n   * used to determine whether {@code copyOf} implementations should make an explicit copy to avoid\n   * memory leaks.",
  "com.google.common.graph.AbstractDirectedNetworkConnections:adjacentNode(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int,int)" : "* A sensible definition of {@link #setCount(Object, int, int)} in terms of {@link #count(Object)}\n   * and {@link #setCount(Object, int)}. If you override either of these methods, you may wish to\n   * override {@link #setCount(Object, int, int)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.collect.AbstractMapBasedMultimap:createAsMap()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:higher(java.lang.Object)" : null,
  "com.google.common.graph.ImmutableGraph:connectionsOf(com.google.common.graph.Graph,java.lang.Object)" : null,
  "com.google.common.math.Quantiles$ScaleAndIndexes:compute(java.util.Collection)" : "* Computes the quantile values of the given dataset.\n     *\n     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be\n     *     cast to doubles (with any associated lost of precision), and which will not be mutated by\n     *     this call (it is copied instead)\n     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n     *     map are ordered by quantile index in the same order they were passed to the {@code\n     *     indexes} method.",
  "com.google.common.collect.CompactHashMap:<init>(int)" : "* Constructs a new instance of {@code CompactHashMap} with the specified capacity.\n   *\n   * @param expectedSize the initial capacity of this {@code CompactHashMap}.",
  "com.google.common.primitives.Shorts$ShortArrayAsList:set(int,java.lang.Short)" : null,
  "com.google.common.collect.HashBiMap$Inverse:put(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:isEmpty()" : null,
  "com.google.common.collect.ForwardingDeque:removeLastOccurrence(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$AbstractReferenceEntry:getAccessTime()" : null,
  "com.google.common.collect.StandardTable$Row:maintainEmptyInvariant()" : null,
  "com.google.common.hash.AbstractHashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)" : null,
  "com.google.common.collect.Tables$UnmodifiableTable:cellSet()" : null,
  "com.google.common.collect.ImmutableMapEntry:getNextInKeyBucket()" : null,
  "com.google.common.graph.DirectedMultiNetworkConnections:removeOutEdge(java.lang.Object)" : null,
  "com.google.common.graph.DirectedGraphConnections$NodeConnection:<init>(java.lang.Object)" : null,
  "com.google.common.collect.ContiguousSet:closedOpen(int,int)" : "* Returns a contiguous set containing all {@code int} values from {@code lower} (inclusive) to\n   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the\n   * same values contained in {@code Range.closedOpen(lower, upper)}.)\n   *\n   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}\n   * @since 23.0",
  "com.google.common.collect.CompactHashSet:adjustAfterRemove(int,int)" : "* Updates the index an iterator is pointing to after a call to remove: returns the index of the\n   * entry that should be looked at after a removal on indexRemoved, with indexBeforeRemove as the\n   * index that *was* the next entry that would be looked at.",
  "com.google.common.collect.Synchronized$SynchronizedCollection:delegate()" : null,
  "com.google.common.collect.Maps$AbstractFilteredMap:isEmpty()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:nextIndex()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:getValue()" : null,
  "com.google.common.primitives.Chars:fromByteArray(byte[])" : "* Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes\n   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the\n   * input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\\\u5432'}.\n   *\n   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n   * flexibility at little cost in readability.\n   *\n   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",
  "com.google.common.io.LittleEndianDataInputStream:<init>(java.io.InputStream)" : "* Creates a {@code LittleEndianDataInputStream} that wraps the given stream.\n   *\n   * @param in the stream to delegate to",
  "com.google.common.primitives.Ints:tryParse(java.lang.String,int)" : "* Parses the specified string as a signed integer value using the specified radix. The ASCII\n   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n   *\n   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of\n   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n   * and returns {@code null} if non-ASCII digits are present in the string.\n   *\n   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link\n   * Integer#parseInt(String)} accepts them.\n   *\n   * @param string the string representation of an integer value\n   * @param radix the radix to use when parsing\n   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if\n   *     {@code string} has a length of zero or cannot be parsed as an integer value\n   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >\n   *     Character.MAX_RADIX}\n   * @throws NullPointerException if {@code string} is {@code null}\n   * @since 19.0",
  "com.google.common.collect.AbstractMapBasedMultimap$Itr:hasNext()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)" : null,
  "com.google.common.eventbus.SubscriberExceptionContext:getEventBus()" : "* @return The {@link EventBus} that handled the event and the subscriber. Useful for broadcasting\n   *     a new event based on the error.",
  "com.google.common.collect.SortedMultisets$NavigableElementSet:descendingSet()" : null,
  "com.google.common.collect.FluentIterable:from(java.lang.Iterable)" : "* Returns a fluent iterable that wraps {@code iterable}, or {@code iterable} itself if it is\n   * already a {@code FluentIterable}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Collection#stream} if {@code iterable} is a {@link\n   * Collection}; {@link Streams#stream(Iterable)} otherwise.",
  "com.google.common.primitives.Chars$CharArrayAsList:toString()" : null,
  "com.google.common.math.StatsAccumulator:sampleVariance()" : "* Returns the <a href=\"http://en.wikipedia.org/wiki/Variance#Sample_variance\">unbiased sample\n   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an\n   * unbiased estimator of the population variance of the population. The count must be greater than\n   * one.\n   *\n   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple\n   * times, due to numerical errors. However, it is guaranteed never to return a negative result.\n   *\n   * <h3>Non-finite values</h3>\n   *\n   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\n   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n   *\n   * @throws IllegalStateException if the dataset is empty or contains a single value",
  "com.google.common.escape.CharEscaperBuilder:<init>()" : "Construct a new sparse array builder.",
  "com.google.common.math.LongMath:checkedPow(long,int)" : "* Returns the {@code b} to the {@code k}th power, provided it does not overflow.\n   *\n   * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed {@code\n   *     long} arithmetic",
  "com.google.common.collect.HashMultiset:clear()" : null,
  "com.google.common.collect.Maps$UnmodifiableBiMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)" : null,
  "com.google.common.collect.CompactHashMap$Itr:next()" : null,
  "com.google.common.cache.LocalCache$NullEntry:setNextInAccessQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.collect.MinMaxPriorityQueue:elementData(int)" : null,
  "com.google.common.graph.ValueGraphBuilder:directed()" : "Returns a {@link ValueGraphBuilder} for building directed graphs.",
  "com.google.common.cache.LocalCache$WeakEntry:getKey()" : null,
  "com.google.common.util.concurrent.AbstractFuture:executeListener(java.lang.Runnable,java.util.concurrent.Executor)" : "* Submits the given runnable to the given {@link Executor} catching and logging all {@linkplain\n   * RuntimeException runtime exceptions} thrown by the executor.",
  "com.google.common.collect.ImmutableListMultimap$Builder:orderValuesBy(java.util.Comparator)" : "* {@inheritDoc}\n     *\n     * @since 8.0",
  "com.google.common.collect.MapMakerInternalMap$Values:isEmpty()" : null,
  "com.google.common.collect.ArrayTable$Row:setValue(int,java.lang.Object)" : null,
  "com.google.common.util.concurrent.AggregateFuture:addInitialException(java.util.Set)" : null,
  "com.google.common.collect.Synchronized$SynchronizedList:listIterator(int)" : null,
  "com.google.common.collect.CompactHashMap:trimToSize()" : "* Ensures that this {@code CompactHashMap} has the smallest representation in memory, given its\n   * current size.",
  "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:getTypeMappings(java.lang.reflect.Type)" : "* Returns type mappings using type parameters and type arguments found in the generic\n     * superclass and the super interfaces of {@code contextClass}.",
  "com.google.common.collect.NaturalOrdering:nullsLast()" : null,
  "com.google.common.collect.CollectSpliterators:flatMapToLong(java.util.Spliterator,java.util.function.Function,int,long)" : "* Returns a {@code Spliterator.OfLong} that iterates over the elements of the spliterators\n   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code\n   * function} returns {@code null} for an input, it is replaced with an empty stream.)",
  "com.google.common.collect.ImmutableMultiset:copyOf(java.lang.Iterable)" : "* Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n   * described in the class documentation.\n   *\n   * @throws NullPointerException if any of {@code elements} is null",
  "com.google.common.base.MoreObjects$ToStringHelper:toString()" : "* Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}.\n     *\n     * <p>After calling this method, you can keep adding more properties to later call toString()\n     * again and get a more complete representation of the same object; but properties cannot be\n     * removed, so this only allows limited reuse of the helper instance. The helper allows\n     * duplication of properties (multiple name/value pairs with the same name can be added).",
  "com.google.common.primitives.ImmutableDoubleArray$AsList:toString()" : null,
  "com.google.common.collect.Maps$UnmodifiableBiMap:forcePut(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)" : null,
  "com.google.common.net.InetAddresses:isTeredoAddress(java.net.Inet6Address)" : "* Evaluates whether the argument is a Teredo address.\n   *\n   * <p>Teredo addresses begin with the {@code \"2001::/32\"} prefix.\n   *\n   * @param ip {@link Inet6Address} to be examined for Teredo address format\n   * @return {@code true} if the argument is a Teredo address",
  "com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Object,java.util.Map)" : "Collects all types to map, and returns the total depth from T up to Object.",
  "com.google.common.collect.EnumBiMap:<init>(java.lang.Class,java.lang.Class)" : null,
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:permitsToTime(double)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:navigableKeySet()" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceListener:running()" : null,
  "com.google.common.escape.Escapers$Builder:<init>()" : null,
  "com.google.common.collect.MapMakerInternalMap$HashIterator:advance()" : null,
  "com.google.common.collect.ForwardingIterator:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.ImmutableSetMultimap$EntrySet:size()" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:withSeparator(java.lang.String,int)" : null,
  "com.google.common.net.HostAndPort:getPortOrDefault(int)" : "Returns the current port number, with a default if no port is defined.",
  "com.google.common.collect.ImmutableMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.Cut$BelowAll:typeAsLowerBound()" : null,
  "com.google.common.util.concurrent.Monitor:hasQueuedThread(java.lang.Thread)" : "* Queries whether the given thread is waiting to enter this monitor. Note that because\n   * cancellations may occur at any time, a {@code true} return does not guarantee that this thread\n   * will ever enter this monitor. This method is designed primarily for use in monitoring of the\n   * system state.",
  "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int,int)" : "* Ensures the truth of an expression involving the state of the calling instance, but not\n   * involving any parameters to the calling method.\n   *\n   * <p>See {@link #checkState(boolean, String, Object...)} for details.\n   *\n   * @since 20.0 (varargs overload since 2.0)",
  "com.google.common.io.CharSource$CharSequenceCharSource:read()" : null,
  "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:compare(byte[],byte[])" : null,
  "com.google.common.hash.Hashing:concatenating(java.lang.Iterable)" : "* Returns a hash function which computes its hash code by concatenating the hash codes of the\n   * underlying hash functions together. This can be useful if you need to generate hash codes of a\n   * specific length.\n   *\n   * <p>For example, if you need 1024-bit hash codes, you could join two {@link Hashing#sha512} hash\n   * functions together: {@code Hashing.concatenating(Hashing.sha512(), Hashing.sha512())}.\n   *\n   * @since 19.0",
  "com.google.common.reflect.ImmutableTypeToInstanceMap:trustedGet(com.google.common.reflect.TypeToken)" : null,
  "com.google.common.reflect.TypeToken$1:getGenericExceptionTypes()" : null,
  "com.google.common.collect.ImmutableList:sort(java.util.Comparator)" : "* Guaranteed to throw an exception and leave the list unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.Predicates$CompositionPredicate:apply(java.lang.Object)" : null,
  "com.google.common.collect.ForwardingList:standardEquals(java.lang.Object)" : "* A sensible definition of {@link #equals(Object)} in terms of {@link #size} and {@link\n   * #iterator}. If you override either of those methods, you may wish to override {@link\n   * #equals(Object)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.hash.BloomFilter:writeTo(java.io.OutputStream)" : "* Writes this {@code BloomFilter} to an output stream, with a custom format (not Java\n   * serialization). This has been measured to save at least 400 bytes compared to regular\n   * serialization.\n   *\n   * <p>Use {@linkplain #readFrom(InputStream, Funnel)} to reconstruct the written BloomFilter.",
  "com.google.common.collect.Multisets$FilteredMultiset:<init>(com.google.common.collect.Multiset,com.google.common.base.Predicate)" : null,
  "com.google.common.reflect.Types$ParameterizedTypeImpl:equals(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)" : "* Guaranteed to throw an exception and leave the map unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.ArrayTable:getValue(int)" : null,
  "com.google.common.math.MathPreconditions:<init>()" : null,
  "com.google.common.io.LittleEndianDataOutputStream:<init>(java.io.OutputStream)" : "* Creates a {@code LittleEndianDataOutputStream} that wraps the given stream.\n   *\n   * @param out the stream to delegate to",
  "com.google.common.base.JdkPattern:flags()" : null,
  "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:<init>(java.util.concurrent.ExecutorService)" : null,
  "com.google.common.cache.LocalCache$StrongEntry:getHash()" : null,
  "com.google.common.reflect.TypeToken$InterfaceSet:readResolve()" : null,
  "com.google.common.collect.ObjectArrays:toArrayImpl(java.lang.Object[],int,int,java.lang.Object[])" : "* Implementation of {@link Collection#toArray(Object[])} for collections backed by an object\n   * array. the runtime type of the returned array is that of the specified array. If the collection\n   * fits in the specified array, it is returned therein. Otherwise, a new array is allocated with\n   * the runtime type of the specified array and the size of the specified collection.\n   *\n   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more\n   * elements than the collection), the element in the array immediately following the end of the\n   * collection is set to {@code null}. This is useful in determining the length of the collection\n   * <i>only</i> if the caller knows that the collection does not contain any null elements.",
  "com.google.common.net.InetAddresses:toBigInteger(java.net.InetAddress)" : "* Returns a BigInteger representing the address.\n   *\n   * <p>Unlike {@code coerceToInteger}, IPv6 addresses are not coerced to IPv4 addresses.\n   *\n   * @param address {@link InetAddress} to convert\n   * @return {@code BigInteger} representation of the address\n   * @since 28.2",
  "com.google.common.cache.CacheLoader:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.math.StatsAccumulator:addAll(java.util.Iterator)" : "* Adds the given values to the dataset.\n   *\n   * @param values a series of values, which will be converted to {@code double} values (this may\n   *     cause loss of precision)",
  "com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator)" : "* Combines four iterators into a single iterator. The returned iterator iterates across the\n   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in\n   * {@code c}, followed by the elements in {@code d}. The source iterators are not polled until\n   * necessary.\n   *\n   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n   * supports it.",
  "com.google.common.collect.ImmutableRangeMap$2:subRangeMap(com.google.common.collect.Range)" : null,
  "com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,java.lang.String)" : null,
  "com.google.common.cache.LocalCache$WeakEntry:setNextInWriteQueue(com.google.common.cache.ReferenceEntry)" : null,
  "com.google.common.cache.LocalCache$StrongValueReference:getEntry()" : null,
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.math.Quantiles:selectAllInPlace(int[],int,int,double[],int,int)" : "* Performs an in-place selection, like {@link #selectInPlace}, to select all the indexes {@code\n   * allRequired[i]} for {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. These\n   * indexes must be sorted in the array and must all be in the range [{@code from}, {@code to}].",
  "com.google.common.reflect.TypeToken:<init>(java.lang.reflect.Type)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object)" : null,
  "com.google.common.collect.CompactHashSet:resizeTable(int,int,int,int)" : null,
  "com.google.common.hash.AbstractStreamingHasher:<init>(int,int)" : "* Constructor for use by subclasses. This hasher instance will process chunks of the specified\n   * size, using an internal buffer of {@code bufferSize} size, which must be a multiple of {@code\n   * chunkSize}.\n   *\n   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;\n   *     must be at least 4\n   * @param bufferSize the size of the internal buffer. Must be a multiple of chunkSize",
  "com.google.common.collect.TreeMultiset:aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.collect.TreeRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)" : "* @since 28.1",
  "com.google.common.collect.ForwardingCollection:contains(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedSet:iterator()" : null,
  "com.google.common.collect.AbstractBiMap$EntrySet:clear()" : null,
  "com.google.common.cache.LocalCache$Segment:reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference)" : "Removes an entry whose value has been garbage collected.",
  "com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:setResult(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n   * an entry (according to {@link Object#equals}) after the first are ignored.",
  "com.google.common.io.ByteStreams:newDataInput(byte[],int)" : "* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array,\n   * starting at the given position.\n   *\n   * @throws IndexOutOfBoundsException if {@code start} is negative or greater than the length of\n   *     the array",
  "com.google.common.collect.Multimaps:unmodifiableEntries(java.util.Collection)" : "* Returns an unmodifiable view of the specified collection of entries. The {@link Entry#setValue}\n   * operation throws an {@link UnsupportedOperationException}. If the specified collection is a\n   * {@code Set}, the returned collection is also a {@code Set}.\n   *\n   * @param entries the entries for which to return an unmodifiable view\n   * @return an unmodifiable view of the entries",
  "com.google.common.collect.Maps$KeySet:map()" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:entryIterator()" : null,
  "com.google.common.collect.DiscreteDomain:maxValue()" : "* Returns the maximum value of type {@code C}, if it has one. The maximum value is the unique\n   * value for which {@link Comparable#compareTo(Object)} never returns a negative value for any\n   * input of type {@code C}.\n   *\n   * <p>The default implementation throws {@code NoSuchElementException}.\n   *\n   * @return the maximum value of type {@code C}; never null\n   * @throws NoSuchElementException if the type has no (practical) maximum value; for example,\n   *     {@link java.math.BigInteger}",
  "com.google.common.io.MultiReader:skip(long)" : null,
  "com.google.common.cache.LocalCache:remove(java.lang.Object)" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:<init>(com.google.common.collect.ImmutableCollection)" : "* It is implicitly assumed that all the services are NEW and that they will all remain NEW\n     * until all the Listeners are installed and {@link #markReady()} is called. It is our caller's\n     * responsibility to only call {@link #markReady()} if all services were new at the time this\n     * method was called and when all the listeners were installed.",
  "com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,java.time.Duration)" : "* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.\n   * This is useful if the given service uses daemon threads, and we want to keep the JVM from\n   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate\n   * normally.\n   *\n   * @param service ExecutorService which uses daemon threads\n   * @param terminationTimeout how long to wait for the executor to finish before terminating the\n   *     JVM\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.NullsFirstOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:listIterator()" : null,
  "com.google.common.collect.ImmutableListMultimap$Builder:orderKeysBy(java.util.Comparator)" : "* {@inheritDoc}\n     *\n     * @since 8.0",
  "com.google.common.collect.Streams$MapWithIndexSpliterator:trySplit()" : null,
  "com.google.common.collect.ForwardingNavigableMap:standardTailMap(java.lang.Object)" : "* A sensible definition of {@link #tailMap(Object)} in terms of {@link #tailMap(Object,\n   * boolean)}. If you override {@code tailMap(K, boolean)}, you may wish to override {@code\n   * tailMap} to forward to this implementation.",
  "com.google.common.primitives.ImmutableDoubleArray:asList()" : "* Returns an immutable <i>view</i> of this array's values as a {@code List}; note that {@code\n   * double} values are boxed into {@link Double} instances on demand, which can be very expensive.\n   * The returned list should be used once and discarded. For any usages beyond that, pass the\n   * returned list to {@link com.google.common.collect.ImmutableList#copyOf(Collection)\n   * ImmutableList.copyOf} and use that list instead.",
  "com.google.common.net.InetAddresses:fromLittleEndianByteArray(byte[])" : "* Returns an address from a <b>little-endian ordered</b> byte array (the opposite of what {@link\n   * InetAddress#getByAddress} expects).\n   *\n   * <p>IPv4 address byte array must be 4 bytes long and IPv6 byte array must be 16 bytes long.\n   *\n   * @param addr the raw IP address in little-endian byte order\n   * @return an InetAddress object created from the raw IP address\n   * @throws UnknownHostException if IP address is of illegal length",
  "com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object)" : "* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less\n   * than {@code toKey}.\n   *\n   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an\n   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code\n   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n   * the original {@code toKey}.",
  "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "* Returns an immutable map containing the given entries, in order.\n   *\n   * @throws IllegalArgumentException if duplicate keys are provided",
  "com.google.common.collect.Multisets$ImmutableEntry:nextInBucket()" : null,
  "com.google.common.collect.ComparisonChain$1:compare(int,int)" : "* Compares two {@code int} values as specified by {@link Integer#compare}, <i>if</i> the result\n   * of this comparison chain has not already been determined.",
  "com.google.common.reflect.Types$WildcardTypeImpl:toString()" : null,
  "com.google.common.collect.ReverseNaturalOrdering:max(java.lang.Iterable)" : null,
  "com.google.common.collect.Iterables:<init>()" : null,
  "com.google.common.collect.ForwardingMultiset:elementSet()" : null,
  "com.google.common.base.CaseFormat$5:normalizeWord(java.lang.String)" : null,
  "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:storedPermitsToWaitTime(double,double)" : null,
  "com.google.common.collect.Multisets$FilteredMultiset:elementIterator()" : null,
  "com.google.common.reflect.TypeToken:constructor(java.lang.reflect.Constructor)" : "* Returns the {@link Invokable} for {@code constructor}, which must be a member of {@code T}.\n   *\n   * @since 14.0",
  "com.google.common.io.ByteSource:wrap(byte[])" : "* Returns a view of the given byte array as a {@link ByteSource}. To view only a specific range\n   * in the array, use {@code ByteSource.wrap(b).slice(offset, length)}.\n   *\n   * <p>Note that the given byte array may be passed directly to methods on, for example, {@code\n   * OutputStream} (when {@code copyTo(OutputStream)} is called on the resulting {@code\n   * ByteSource}). This could allow a malicious {@code OutputStream} implementation to modify the\n   * contents of the array, but provides better performance in the normal case.\n   *\n   * @since 15.0 (since 14.0 as {@code ByteStreams.asByteSource(byte[])}).",
  "com.google.common.math.PairedStats:hashCode()" : "* {@inheritDoc}\n   *\n   * <p><b>Note:</b> This hash code is consistent with exact equality of the calculated statistics,\n   * including the floating point values. See the note on {@link #equals} for details.",
  "com.google.common.util.concurrent.AtomicDoubleArray:<init>(double[])" : "* Creates a new {@code AtomicDoubleArray} with the same length as, and all elements copied from,\n   * the given array.\n   *\n   * @param array the array to copy elements from\n   * @throws NullPointerException if array is null",
  "com.google.common.primitives.ImmutableDoubleArray$AsList:indexOf(java.lang.Object)" : null,
  "com.google.common.collect.StandardTable$Column:get(java.lang.Object)" : null,
  "com.google.common.collect.ContiguousSet:tailSet(java.lang.Object)" : null,
  "com.google.common.primitives.Floats:indexOf(float[],float[])" : "* Returns the start position of the first occurrence of the specified {@code target} within\n   * {@code array}, or {@code -1} if there is no such occurrence.\n   *\n   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n   * i, i + target.length)} contains exactly the same elements as {@code target}.\n   *\n   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.\n   *\n   * @param array the array to search for the sequence {@code target}\n   * @param target the array to search for as a sub-sequence of {@code array}",
  "com.google.common.base.Predicates$AndPredicate:hashCode()" : null,
  "com.google.common.base.Functions$PredicateFunction:equals(java.lang.Object)" : null,
  "com.google.common.collect.HashBiMap:keySet()" : null,
  "com.google.common.collect.Range:isConnected(com.google.common.collect.Range)" : "* Returns {@code true} if there exists a (possibly empty) range which is {@linkplain #encloses\n   * enclosed} by both this range and {@code other}.\n   *\n   * <p>For example,\n   *\n   * <ul>\n   *   <li>{@code [2, 4)} and {@code [5, 7)} are not connected\n   *   <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)}\n   *   <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range\n   *       {@code [4, 4)}\n   * </ul>\n   *\n   * <p>Note that this range and {@code other} have a well-defined {@linkplain #span union} and\n   * {@linkplain #intersection intersection} (as a single, possibly-empty range) if and only if this\n   * method returns {@code true}.\n   *\n   * <p>The connectedness relation is both reflexive and symmetric, but does not form an {@linkplain\n   * Equivalence equivalence relation} as it is not transitive.\n   *\n   * <p>Note that certain discrete ranges are not considered connected, even though there are no\n   * elements \"between them.\" For example, {@code [3, 5]} is not considered connected to {@code [6,\n   * 10]}. In these cases, it may be desirable for both input ranges to be preprocessed with {@link\n   * #canonical(DiscreteDomain)} before testing for connectedness.",
  "com.google.common.collect.ArrayTable$ArrayMap:getEntry(int)" : null,
  "com.google.common.collect.Synchronized$SynchronizedTable:containsColumn(java.lang.Object)" : null,
  "com.google.common.collect.TopKSelector:offer(java.lang.Object)" : "* Adds {@code elem} as a candidate for the top {@code k} elements. This operation takes amortized\n   * O(1) time.",
  "com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.util.Iterator)" : "* Appends the string representation of each entry in {@code entries}, using the previously\n     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n     *\n     * @since 11.0",
  "com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode)" : "* Fully maps a file in to memory as per {@link\n   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link\n   * MapMode}.\n   *\n   * <p>Files are mapped from offset 0 to its length.\n   *\n   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.\n   *\n   * @param file the file to map\n   * @param mode the mode to use when mapping {@code file}\n   * @return a buffer reflecting {@code file}\n   * @throws FileNotFoundException if the {@code file} does not exist\n   * @throws IOException if an I/O error occurs\n   * @see FileChannel#map(MapMode, long, long)\n   * @since 2.0",
  "com.google.common.collect.ImmutableTable:contains(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.base.Joiner$1:toString(java.lang.Object)" : null,
  "com.google.common.collect.Collections2$TransformedCollection:iterator()" : null,
  "com.google.common.util.concurrent.ForwardingExecutorService:shutdownNow()" : null,
  "com.google.common.cache.LocalCache$LocalLoadingCache:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.ImmutableMultiset:<init>()" : null,
  "com.google.common.graph.Graphs:transpose(com.google.common.graph.Graph)" : "* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other\n   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",
  "com.google.common.io.ByteSource$SlicedByteSource:toString()" : null,
  "com.google.common.util.concurrent.ForwardingListenableFuture:delegate()" : null,
  "com.google.common.collect.ForwardingCollection:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.collect.TableCollectors$MutableCell:merge(java.lang.Object,java.util.function.BinaryOperator)" : null,
  "com.google.common.escape.CharEscaperBuilder:toArray()" : "* Convert this builder into an array of char[]s where the maximum index is the value of the\n   * highest character that has been seen. The array will be sparse in the sense that any unseen\n   * index will default to null.\n   *\n   * @return a \"sparse\" array that holds the replacement mappings.",
  "com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)" : "* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both\n   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be\n   * interrupted.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied\n   * @throws InterruptedException if interrupted while waiting\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ForwardingNavigableMap:pollLastEntry()" : null,
  "com.google.common.collect.LinkedListMultimap:containsValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:getMessage()" : "* Appends the chain of messages from the {@code conflictingStackTrace} to the original {@code\n     * message}.",
  "com.google.common.collect.ForwardingDeque:addLast(java.lang.Object)" : null,
  "com.google.common.collect.FluentIterable:toList()" : "* Returns an {@code ImmutableList} containing all of the elements from this fluent iterable in\n   * proper sequence.\n   *\n   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code\n   * stream.collect()}.\n   *\n   * @throws NullPointerException if any element is {@code null}\n   * @since 14.0 (since 12.0 as {@code toImmutableList()}).",
  "com.google.common.collect.ImmutableList:addAll(int,java.util.Collection)" : "* Guaranteed to throw an exception and leave the list unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:toString()" : null,
  "com.google.common.graph.ImmutableNetwork:edges()" : null,
  "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$LinkedStrongKeyDummyValueEntry:getNext()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:lower(java.lang.Object)" : null,
  "com.google.common.io.BaseEncoding$StandardBaseEncoding:maxDecodedSize(int)" : null,
  "com.google.common.collect.Range:isEmpty()" : "* Returns {@code true} if this range is of the form {@code [v..v)} or {@code (v..v]}. (This does\n   * not encompass ranges of the form {@code (v..v)}, because such ranges are <i>invalid</i> and\n   * can't be constructed at all.)\n   *\n   * <p>Note that certain discrete ranges such as the integer range {@code (3..4)} are <b>not</b>\n   * considered empty, even though they contain no actual values. In these cases, it may be helpful\n   * to preprocess ranges with {@link #canonical(DiscreteDomain)}.",
  "com.google.common.collect.Sets$SetView:add(java.lang.Object)" : "* Guaranteed to throw an exception and leave the collection unmodified.\n     *\n     * @throws UnsupportedOperationException always\n     * @deprecated Unsupported operation.",
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)" : null,
  "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:hasNext()" : null,
  "com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[])" : "* Views the array as an immutable list. Does not check for nulls; does not copy.\n   *\n   * <p>The array must be internally created.",
  "com.google.common.net.InternetDomainName:toString()" : "Returns the domain name, normalized to all lower case.",
  "com.google.common.hash.BloomFilter:approximateElementCount()" : "* Returns an estimate for the total number of distinct elements that have been added to this\n   * Bloom filter. This approximation is reasonably accurate if it does not exceed the value of\n   * {@code expectedInsertions} that was used when constructing the filter.\n   *\n   * @since 22.0",
  "com.google.common.util.concurrent.AggregateFuture:log(java.lang.Throwable)" : null,
  "com.google.common.collect.LinkedHashMultiset:writeObject(java.io.ObjectOutputStream)" : "* @serialData the number of distinct elements, the first element, its count, the second element,\n   *     its count, and so on",
  "com.google.common.escape.UnicodeEscaper:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.base.Joiner$1:skipNulls()" : "* Returns a joiner with the same behavior as this joiner, except automatically skipping over any\n   * provided null elements.",
  "com.google.common.collect.HashBiMap$Inverse:get(java.lang.Object)" : null,
  "com.google.common.graph.AbstractValueGraph:inDegree(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" : "Returns an immutable multimap containing the given entries, in order.",
  "com.google.common.collect.HashBasedTable:remove(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:writeObject(java.io.ObjectOutputStream)" : "* @serialData the ConcurrentMap of elements and their counts.",
  "com.google.common.base.Verify:verifyNotNull(java.lang.Object)" : "* Ensures that {@code reference} is non-null, throwing a {@code VerifyException} with a default\n   * message otherwise.\n   *\n   * @return {@code reference}, guaranteed to be non-null, for convenience\n   * @throws VerifyException if {@code reference} is {@code null}\n   * @see Preconditions#checkNotNull Preconditions.checkNotNull()",
  "com.google.common.graph.StandardNetwork:adjacentNodes(java.lang.Object)" : null,
  "com.google.common.base.PairwiseEquivalence:doHash(java.lang.Iterable)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:hasPrevious()" : null,
  "com.google.common.base.Ascii:toUpperCase(java.lang.String)" : "* Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII\n   * characters} have been converted to uppercase. All other characters are copied without\n   * modification.",
  "com.google.common.math.MathPreconditions:checkPositive(java.lang.String,java.math.BigInteger)" : null,
  "com.google.common.primitives.Booleans:lastIndexOf(boolean[],boolean,int,int)" : null,
  "com.google.common.util.concurrent.RateLimiter:toString()" : null,
  "com.google.common.collect.JdkBackedImmutableBiMap:size()" : null,
  "com.google.common.primitives.Bytes:hashCode(byte)" : "* Returns a hash code for {@code value}; obsolete alternative to {@link Byte#hashCode(byte)}.\n   *\n   * @param value a primitive {@code byte} value\n   * @return a hash code for the value",
  "com.google.common.collect.NullsFirstOrdering:nullsLast()" : null,
  "com.google.common.base.Stopwatch:toString()" : "Returns a string representation of the current elapsed time.",
  "com.google.common.cache.LocalCache:segmentFor(int)" : "* Returns the segment that should be used for a key with the given hash.\n   *\n   * @param hash the hash code for the key\n   * @return the segment",
  "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning()" : "* @since 15.0",
  "com.google.common.collect.ImmutableSetMultimap$Builder:orderValuesBy(java.util.Comparator)" : null,
  "com.google.common.collect.FluentIterable:join(com.google.common.base.Joiner)" : "* Returns a {@link String} containing all of the elements of this fluent iterable joined with\n   * {@code joiner}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not\n   * using any optional {@code Joiner} features, {@code\n   * stream.collect(Collectors.joining(delimiter)}.\n   *\n   * @since 18.0",
  "com.google.common.collect.MapMakerInternalMap$Segment:containsKey(java.lang.Object,int)" : null,
  "com.google.common.io.CharSource:length()" : "* Returns the length of this source in chars, even if doing so requires opening and traversing an\n   * entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.\n   *\n   * <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If\n   * absent, it will fall back to a heavyweight operation that will open a stream, {@link\n   * Reader#skip(long) skip} to the end of the stream, and return the total number of chars that\n   * were skipped.\n   *\n   * <p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient\n   * implementation, it is <i>possible</i> that this method will return a different number of chars\n   * than would be returned by reading all of the chars.\n   *\n   * <p>In either case, for mutable sources such as files, a subsequent read may return a different\n   * number of chars if the contents are changed.\n   *\n   * @throws IOException if an I/O error occurs while reading the length of this source\n   * @since 19.0",
  "com.google.common.collect.ForwardingMap:containsValue(java.lang.Object)" : null,
  "com.google.common.collect.MinMaxPriorityQueue$Heap:fillHoleAt(int)" : "* Fills the hole at {@code index} by moving in the least of its grandchildren to this position,\n     * then recursively filling the new hole created.\n     *\n     * @return the position of the new hole (where the lowest grandchild moved from, that had no\n     *     grandchild to replace it)",
  "com.google.common.collect.Synchronized$SynchronizedSortedSet:delegate()" : null,
  "com.google.common.graph.AbstractGraph:inDegree(java.lang.Object)" : null,
  "com.google.common.collect.ConcurrentHashMultiset:add(java.lang.Object,int)" : "* Adds a number of occurrences of the specified element to this multiset.\n   *\n   * @param element the element to add\n   * @param occurrences the number of occurrences to add\n   * @return the previous count of the element before the operation; possibly zero\n   * @throws IllegalArgumentException if {@code occurrences} is negative, or if the resulting amount\n   *     would exceed {@link Integer#MAX_VALUE}",
  "com.google.common.collect.Sets$FilteredSet:<init>(java.util.Set,com.google.common.base.Predicate)" : null,
  "com.google.common.io.CharSink:writeLines(java.lang.Iterable)" : "* Writes the given lines of text to this sink with each line (including the last) terminated with\n   * the operating system's default line separator. This method is equivalent to {@code\n   * writeLines(lines, System.getProperty(\"line.separator\"))}.\n   *\n   * @throws IOException if an I/O error occurs while writing to this sink",
  "com.google.common.reflect.Types$GenericArrayTypeImpl:equals(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(java.time.Duration)" : "* @param delay the time from now to delay execution\n       * @since 31.1 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.collect.ImmutableMultimap$Keys:getEntry(int)" : null,
  "com.google.common.eventbus.EventBus:executor()" : "Returns the default executor this event bus uses for dispatching events to subscribers.",
  "com.google.common.base.CharMatcher$JavaLetterOrDigit:matches(char)" : null,
  "com.google.common.collect.ForwardingSortedSet:tailSet(java.lang.Object)" : null,
  "com.google.common.hash.BloomFilter:writeReplace()" : null,
  "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,java.lang.Object)" : "* Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}\n     * is {@code null}, the string {@code \"null\"} is used, unless {@link #omitNullValues()} is\n     * called, in which case this name/value pair will not be added.",
  "com.google.common.cache.LocalCache$AbstractCacheSet:size()" : null,
  "com.google.common.math.Stats:readFrom(java.nio.ByteBuffer)" : "* Creates a Stats instance from the byte representation read from the given {@link ByteBuffer}.\n   *\n   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between\n   * versions.\n   *\n   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as\n   *     {@link ByteOrder#LITTLE_ENDIAN}, from which a BYTES-long byte representation of this\n   *     instance is read. In the process increases the position of {@link ByteBuffer} by BYTES.",
  "com.google.common.reflect.Invokable$MethodInvokable:getGenericExceptionTypes()" : null,
  "com.google.common.collect.ForwardingTable:row(java.lang.Object)" : null,
  "com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)" : "* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.\n   * This is useful if the given service uses daemon threads, and we want to keep the JVM from\n   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate\n   * normally.\n   *\n   * @param service ExecutorService which uses daemon threads\n   * @param terminationTimeout how long to wait for the executor to finish before terminating the\n   *     JVM\n   * @param timeUnit unit of time for the time parameter",
  "com.google.common.math.Stats:of(java.util.stream.IntStream)" : "* Returns statistics over a dataset containing the given values. The stream will be completely\n   * consumed by this method.\n   *\n   * <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect\n   * the values using {@link #toStats()} instead.\n   *\n   * @param values a series of values\n   * @since 28.2 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.primitives.Chars:constrainToRange(char,char,char)" : "* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.\n   *\n   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned\n   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n   * value} is greater than {@code max}, {@code max} is returned.\n   *\n   * @param value the {@code char} value to constrain\n   * @param min the lower bound (inclusive) of the range to constrain {@code value} to\n   * @param max the upper bound (inclusive) of the range to constrain {@code value} to\n   * @throws IllegalArgumentException if {@code min > max}\n   * @since 21.0",
  "com.google.common.collect.HashBiMap$Inverse:writeReplace()" : null,
  "com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(java.lang.Object,java.lang.Iterable)" : null,
  "com.google.common.collect.DenseImmutableTable$ColumnMap:isPartialView()" : null,
  "com.google.common.base.Splitter:withKeyValueSeparator(com.google.common.base.Splitter)" : "* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries\n   * into keys and values using the specified key-value splitter.\n   *\n   * <p>Note: Any configuration option configured on this splitter, such as {@link #trimResults},\n   * does not change the behavior of the {@code keyValueSplitter}.\n   *\n   * <p>Example:\n   *\n   * {@snippet :\n   * String toSplit = \" x -> y, z-> a \";\n   * Splitter outerSplitter = Splitter.on(',').trimResults();\n   * MapSplitter mapSplitter = outerSplitter.withKeyValueSeparator(Splitter.on(\"->\"));\n   * Map<String, String> result = mapSplitter.split(toSplit);\n   * assertThat(result).isEqualTo(ImmutableMap.of(\"x \", \" y\", \"z\", \" a\"));\n   * }\n   *\n   * @since 10.0",
  "com.google.common.collect.DenseImmutableTable$ColumnMap:getValue(int)" : null,
  "com.google.common.collect.Synchronized:deque(java.util.Deque,java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedEntry:getValue()" : null,
  "com.google.common.collect.AbstractBiMap:removeFromInverseMap(java.lang.Object)" : null,
  "com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)" : "* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both\n   * the time to acquire the lock and the time to wait for the guard to be satisfied.\n   *\n   * @return whether the monitor was entered, which guarantees that the guard is now satisfied\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.io.LittleEndianDataInputStream:readInt()" : "* Reads an integer as specified by {@link DataInputStream#readInt()}, except using little-endian\n   * byte order.\n   *\n   * @return the next four bytes of the input stream, interpreted as an {@code int} in little-endian\n   *     byte order\n   * @throws IOException if an I/O error occurs",
  "com.google.common.hash.SipHashFunction:toString()" : null,
  "com.google.common.primitives.ImmutableIntArray$Builder:addAll(int[])" : "* Appends {@code values}, in order, to the end of the values the built {@link\n     * ImmutableIntArray} will contain.",
  "com.google.common.io.MoreFiles:deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream)" : "* Simple, insecure method for deleting the contents of a directory for file systems that don't\n   * support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null\n   * if no exceptions were thrown.",
  "com.google.common.util.concurrent.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.primitives.UnsignedInteger:valueOf(long)" : "* Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse\n   * operation of {@link #longValue()}.",
  "com.google.common.collect.Maps:asConverter(com.google.common.collect.BiMap)" : "* Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()}, and whose\n   * inverse view converts values using {@link BiMap#inverse bimap.inverse()}{@code .get()}.\n   *\n   * <p>To use a plain {@link Map} as a {@link Function}, see {@link\n   * com.google.common.base.Functions#forMap(Map)} or {@link\n   * com.google.common.base.Functions#forMap(Map, Object)}.\n   *\n   * @since 16.0",
  "com.google.common.collect.Maps$SortedKeySet:last()" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollFirstEntry()" : null,
  "com.google.common.collect.JdkBackedImmutableMap:createEntrySet()" : null,
  "com.google.common.collect.AbstractBiMap:containsValue(java.lang.Object)" : null,
  "com.google.common.escape.Escapers$1:<init>()" : null,
  "com.google.common.collect.TreeTraverser:postOrderTraversal(java.lang.Object)" : "* Returns an unmodifiable iterable over the nodes in a tree structure, using post-order\n   * traversal. That is, each node's subtrees are traversed before the node itself is returned.\n   *\n   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration\n   * is in progress or when the iterators generated by {@link #children} are advanced.\n   *\n   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPostOrder} instead, which\n   *     has the same behavior.",
  "com.google.common.collect.Synchronized$SynchronizedMap:keySet()" : null,
  "com.google.common.collect.ForwardingMapEntry:setValue(java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.lang.Runnable,java.lang.Object)" : "* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0)",
  "com.google.common.collect.MapMakerInternalMap:clear()" : null,
  "com.google.common.collect.ArrayTable:contains(java.lang.Object,java.lang.Object)" : "* Returns {@code true} if the provided keys are among the keys provided when the table was\n   * constructed.",
  "com.google.common.cache.LocalCache$LocalManualCache:cleanUp()" : null,
  "com.google.common.collect.FilteredKeySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)" : null,
  "com.google.common.base.Present:toString()" : null,
  "com.google.common.hash.AbstractNonStreamingHashFunction:newHasher()" : null,
  "com.google.common.collect.Sets:cartesianProduct(java.util.List)" : "* Returns every possible list that can be formed by choosing one element from each of the given\n   * sets in order; the \"n-ary <a href=\"http://en.wikipedia.org/wiki/Cartesian_product\">Cartesian\n   * product</a>\" of the sets. For example:\n   *\n   * {@snippet :\n   * Sets.cartesianProduct(ImmutableList.of(\n   *     ImmutableSet.of(1, 2),\n   *     ImmutableSet.of(\"A\", \"B\", \"C\")))\n   * }\n   *\n   * <p>returns a set containing six lists:\n   *\n   * <ul>\n   *   <li>{@code ImmutableList.of(1, \"A\")}\n   *   <li>{@code ImmutableList.of(1, \"B\")}\n   *   <li>{@code ImmutableList.of(1, \"C\")}\n   *   <li>{@code ImmutableList.of(2, \"A\")}\n   *   <li>{@code ImmutableList.of(2, \"B\")}\n   *   <li>{@code ImmutableList.of(2, \"C\")}\n   * </ul>\n   *\n   * <p>The result is guaranteed to be in the \"traditional\", lexicographical order for Cartesian\n   * products that you would get from nesting for loops:\n   *\n   * {@snippet :\n   * for (B b0 : sets.get(0)) {\n   *   for (B b1 : sets.get(1)) {\n   *     ...\n   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);\n   *     // operate on tuple\n   *   }\n   * }\n   * }\n   *\n   * <p>Note that if any input set is empty, the Cartesian product will also be empty. If no sets at\n   * all are provided (an empty list), the resulting Cartesian product has one element, an empty\n   * list (counter-intuitive, but mathematically consistent).\n   *\n   * <p><i>Performance notes:</i> while the cartesian product of sets of size {@code m, n, p} is a\n   * set of size {@code m x n x p}, its actual memory consumption is much smaller. When the\n   * cartesian set is constructed, the input sets are merely copied. Only as the resulting set is\n   * iterated are the individual lists created, and these are not retained after iteration.\n   *\n   * @param sets the sets to choose elements from, in the order that the elements chosen from those\n   *     sets should appear in the resulting lists\n   * @param <B> any common base class shared by all axes (often just {@link Object})\n   * @return the Cartesian product, as an immutable set containing immutable lists\n   * @throws NullPointerException if {@code sets}, any one of the {@code sets}, or any element of a\n   *     provided set is null\n   * @throws IllegalArgumentException if the cartesian product size exceeds the {@code int} range\n   * @since 2.0",
  "com.google.common.collect.MinMaxPriorityQueue$Heap:getLeftChildIndex(int)" : null,
  "com.google.common.math.LongMath:isPowerOfTwo(long)" : null,
  "com.google.common.collect.SortedMultisets$NavigableElementSet:ceiling(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableBiMap:builderWithExpectedSize(int)" : "* Returns a new builder, expecting the specified number of entries to be added.\n   *\n   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link\n   * Builder#build} is called, the builder is likely to perform better than an unsized {@link\n   * #builder()} would have.\n   *\n   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,\n   * but not exactly, the number of entries added to the builder.\n   *\n   * @since 23.1",
  "com.google.common.util.concurrent.AggregateFutureState:<init>(int)" : null,
  "com.google.common.collect.EnumMultiset$Itr:remove()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)" : "* {@inheritDoc}\n   *\n   * <p>The returned collection is immutable.",
  "com.google.common.primitives.Ints$IntConverter:doForward(java.lang.String)" : null,
  "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:<init>(com.google.common.util.concurrent.ListenableFuture)" : null,
  "com.google.common.collect.ImmutableBiMap:inverse()" : "* {@inheritDoc}\n   *\n   * <p>The inverse of an {@code ImmutableBiMap} is another {@code ImmutableBiMap}.",
  "com.google.common.util.concurrent.Futures:<init>()" : null,
  "com.google.common.collect.UsingToStringOrdering:compare(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.util.concurrent.AbstractService:dispatchListenerEvents()" : "* Attempts to execute all the listeners in {@link #listeners} while not holding the {@link\n   * #monitor}.",
  "com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.collect.MultimapBuilder$TreeSetSupplier:<init>(java.util.Comparator)" : null,
  "com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper:compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set)" : null,
  "com.google.common.util.concurrent.AbstractExecutionThreadService:<init>()" : "Constructor for use by subclasses.",
  "com.google.common.primitives.SignedBytes:sortDescending(byte[])" : "* Sorts the elements of {@code array} in descending order.\n   *\n   * @since 23.1",
  "com.google.common.primitives.Primitives:wrap(java.lang.Class)" : "* Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise\n   * returns {@code type} itself. Idempotent.\n   *\n   * <pre>\n   *     wrap(int.class) == Integer.class\n   *     wrap(Integer.class) == Integer.class\n   *     wrap(String.class) == String.class\n   * </pre>",
  "com.google.common.util.concurrent.SimpleTimeLimiter:newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)" : null,
  "com.google.common.collect.HashBasedTable:create()" : "Creates an empty {@code HashBasedTable}.",
  "com.google.common.base.Converter$ReverseConverter:equals(java.lang.Object)" : null,
  "com.google.common.collect.JdkBackedImmutableMap:createKeySet()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap:containsKey(java.lang.Object)" : null,
  "com.google.common.base.Equivalence:equivalentTo(java.lang.Object)" : "* Returns a predicate that evaluates to true if and only if the input is equivalent to {@code\n   * target} according to this equivalence relation.\n   *\n   * @since 10.0",
  "com.google.common.collect.ImmutableRangeSet$AsSet:descendingIterator()" : null,
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long[])" : null,
  "com.google.common.collect.ImmutableList:set(int,java.lang.Object)" : "* Guaranteed to throw an exception and leave the list unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.primitives.Floats$FloatArrayAsList:get(int)" : null,
  "com.google.common.collect.MutableClassToInstanceMap:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.ForwardingMultiset:standardAddAll(java.util.Collection)" : "* A sensible definition of {@link #addAll(Collection)} in terms of {@link #add(Object)} and\n   * {@link #add(Object, int)}. If you override either of these methods, you may wish to override\n   * {@link #addAll(Collection)} to forward to this implementation.\n   *\n   * @since 7.0",
  "com.google.common.io.LittleEndianDataOutputStream:writeShort(int)" : "* Writes a {@code short} as specified by {@link DataOutputStream#writeShort(int)}, except using\n   * little-endian byte order.\n   *\n   * @throws IOException if an I/O error occurs",
  "com.google.common.collect.RegularImmutableTable$CellSet:isPartialView()" : null,
  "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:retainAll(java.util.Collection)" : null,
  "com.google.common.collect.ImmutableTable$Builder:putAll(com.google.common.collect.Table)" : "* Associates all of the given table's keys and values in the built table. Duplicate row key\n     * column key pairs are not allowed, and will cause {@link #build} to fail.\n     *\n     * @throws NullPointerException if any key or value in {@code table} is null",
  "com.google.common.collect.Sets:combinations(java.util.Set,int)" : "* Returns the set of all subsets of {@code set} of size {@code size}. For example, {@code\n   * combinations(ImmutableSet.of(1, 2, 3), 2)} returns the set {@code {{1, 2}, {1, 3}, {2, 3}}}.\n   *\n   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input\n   * set. The order in which these subsets appear in the outer set is undefined.\n   *\n   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements\n   * are identical, even if the input set uses a different concept of equivalence.\n   *\n   * <p><i>Performance notes:</i> the memory usage of the returned set is only {@code O(n)}. When\n   * the result set is constructed, the input set is merely copied. Only as the result set is\n   * iterated are the individual subsets created. Each of these subsets occupies an additional O(n)\n   * memory but only for as long as the user retains a reference to it. That is, the set returned by\n   * {@code combinations} does not retain the individual subsets.\n   *\n   * @param set the set of elements to take combinations of\n   * @param size the number of elements per combination\n   * @return the set of all combinations of {@code size} elements from {@code set}\n   * @throws IllegalArgumentException if {@code size} is not between 0 and {@code set.size()}\n   *     inclusive\n   * @throws NullPointerException if {@code set} is or contains {@code null}\n   * @since 23.0",
  "com.google.common.collect.TreeRangeSet:addAll(com.google.common.collect.RangeSet)" : null,
  "com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingMap()" : null,
  "com.google.common.io.BaseEncoding:decode(java.lang.CharSequence)" : "* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the\n   * inverse operation to {@link #encode(byte[])}.\n   *\n   * @throws IllegalArgumentException if the input is not a valid encoded string according to this\n   *     encoding.",
  "com.google.common.graph.ValueGraphBuilder:cast()" : null,
  "com.google.common.collect.LinkedListMultimap:putAll(com.google.common.collect.Multimap)" : null,
  "com.google.common.eventbus.Subscriber:hashCode()" : null,
  "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:doStart()" : null,
  "com.google.common.collect.Maps$NavigableAsMapView:forEach(java.util.function.BiConsumer)" : null,
  "com.google.common.collect.ImmutableMultiset$Builder:build()" : "* Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code\n     * Builder}.",
  "com.google.common.collect.Maps:subMap(java.util.NavigableMap,com.google.common.collect.Range)" : "* Returns a view of the portion of {@code map} whose keys are contained by {@code range}.\n   *\n   * <p>This method delegates to the appropriate methods of {@link NavigableMap} (namely {@link\n   * NavigableMap#subMap(Object, boolean, Object, boolean) subMap()}, {@link\n   * NavigableMap#tailMap(Object, boolean) tailMap()}, and {@link NavigableMap#headMap(Object,\n   * boolean) headMap()}) to actually construct the view. Consult these methods for a full\n   * description of the returned view's behavior.\n   *\n   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural\n   * ordering. {@code NavigableMap} on the other hand can specify a custom ordering via a {@link\n   * Comparator}, which can violate the natural ordering. Using this method (or in general using\n   * {@code Range}) with unnaturally-ordered maps can lead to unexpected and undefined behavior.\n   *\n   * @since 20.0",
  "com.google.common.util.concurrent.ForwardingLock:newCondition()" : null,
  "com.google.common.collect.ImmutableList:copyOf(java.lang.Object[])" : "* Returns an immutable list containing the given elements, in order.\n   *\n   * @throws NullPointerException if {@code elements} contains a null element\n   * @since 3.0",
  "com.google.common.collect.Lists$ReverseList:<init>(java.util.List)" : null,
  "com.google.common.collect.ImmutableMultiset:toString()" : null,
  "com.google.common.reflect.TypeToken$Bounds:<init>(java.lang.reflect.Type[],boolean)" : null,
  "com.google.common.reflect.Invokable:isAccessible()" : "See {@link java.lang.reflect.AccessibleObject#isAccessible()}.",
  "com.google.common.collect.EmptyContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.collect.Cut$AboveAll:leastValueAbove(com.google.common.collect.DiscreteDomain)" : null,
  "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitTypeVariable(java.lang.reflect.TypeVariable)" : null,
  "com.google.common.graph.StandardMutableValueGraph:addNodeInternal(java.lang.Object)" : "* Adds {@code node} to the graph and returns the associated {@link GraphConnections}.\n   *\n   * @throws IllegalStateException if {@code node} is already present",
  "com.google.common.base.Converter:correctedDoForward(java.lang.Object)" : null,
  "com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingKeySet()" : null,
  "com.google.common.collect.StandardTable$Column$EntrySet:remove(java.lang.Object)" : null,
  "com.google.common.base.CharMatcher$RangesMatcher:matches(char)" : null,
  "com.google.common.collect.SparseImmutableTable:getValue(int)" : null,
  "com.google.common.collect.Maps:unmodifiableEntryIterator(java.util.Iterator)" : null,
  "com.google.common.collect.Count:toString()" : null,
  "com.google.common.collect.ImmutableMultimap$Values:isPartialView()" : null,
  "com.google.common.util.concurrent.CollectionFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)" : null,
  "com.google.common.io.MultiInputStream:available()" : null,
  "com.google.common.cache.LocalCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)" : "* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",
  "com.google.common.primitives.UnsignedLong:<init>(long)" : null,
  "com.google.common.collect.ForwardingNavigableSet:delegate()" : null,
  "com.google.common.collect.MapMakerInternalMap$SerializationProxy:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.GeneralRange:hasUpperBound()" : null,
  "com.google.common.io.ByteSource:countBySkipping(java.io.InputStream)" : "Counts the bytes in the given input stream using skip if possible.",
  "com.google.common.collect.ImmutableList$ReverseImmutableList:reverseIndex(int)" : null,
  "com.google.common.primitives.Longs:tryParse(java.lang.String)" : "* Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (\n   * <code>'&#92;u002D'</code>) is recognized as the minus sign.\n   *\n   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing\n   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns\n   * {@code null} if non-ASCII digits are present in the string.\n   *\n   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link\n   * Integer#parseInt(String)} accepts them.\n   *\n   * @param string the string representation of a long value\n   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a\n   *     length of zero or cannot be parsed as a long value\n   * @throws NullPointerException if {@code string} is {@code null}\n   * @since 14.0",
  "com.google.common.hash.Hashing:murmur3_32_fixed(int)" : "* Returns a hash function implementing the <a\n   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">32-bit murmur3\n   * algorithm, x86 variant</a> (little-endian variant), using the given seed value.\n   *\n   * <p>The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A).\n   *\n   * <p>This method is called {@code murmur3_32_fixed} because it fixes a bug in the {@code\n   * HashFunction} returned by the original {@code murmur3_32} method.\n   *\n   * @since 31.0",
  "com.google.common.math.LongMath$MillerRabinTester$2:squareMod(long,long)" : "Returns a^2 mod m.",
  "com.google.common.cache.LocalCache:getIfPresent(java.lang.Object)" : null,
  "com.google.common.cache.LocalCache$NullEntry:getNextInWriteQueue()" : null,
  "com.google.common.collect.Maps:difference(java.util.SortedMap,java.util.Map)" : "* Computes the difference between two sorted maps, using the comparator of the left map, or\n   * {@code Ordering.natural()} if the left map uses the natural ordering of its elements. This\n   * difference is an immutable snapshot of the state of the maps at the time this method is called.\n   * It will never change, even if the maps change at a later time.\n   *\n   * <p>Since this method uses {@code TreeMap} instances internally, the keys of the right map must\n   * all compare as distinct according to the comparator of the left map.\n   *\n   * <p><b>Note:</b>If you only need to know whether two sorted maps have the same mappings, call\n   * {@code left.equals(right)} instead of this method.\n   *\n   * @param left the map to treat as the \"left\" map for purposes of comparison\n   * @param right the map to treat as the \"right\" map for purposes of comparison\n   * @return the difference between the two maps\n   * @since 11.0",
  "com.google.common.hash.Hashing:checkPositiveAndMakeMultipleOf32(int)" : "Checks that the passed argument is positive, and ceils it to a multiple of 32.",
  "com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap)" : "* Returns an immutable set multimap containing the same mappings as {@code multimap}. The\n   * generated multimap's key and value orderings correspond to the iteration ordering of the {@code\n   * multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are\n   * ignored.\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.\n   *\n   * @throws NullPointerException if any key or value in {@code multimap} is null",
  "com.google.common.collect.TreeRangeMap$1:asMapOfRanges()" : null,
  "com.google.common.primitives.UnsignedInts:sortDescending(int[])" : "* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 32-bit\n   * integers.\n   *\n   * @since 23.1",
  "com.google.common.collect.TreeMultimap:create(com.google.common.collect.Multimap)" : "* Constructs a {@code TreeMultimap}, ordered by the natural ordering of its keys and values, with\n   * the same mappings as the specified multimap.\n   *\n   * @param multimap the multimap whose contents are copied to this multimap",
  "com.google.common.collect.SparseImmutableTable:getCell(int)" : null,
  "com.google.common.cache.LocalCache$EntrySet:remove(java.lang.Object)" : null,
  "com.google.common.collect.Streams$TemporaryPair:<init>(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.DescendingImmutableSortedMultiset:firstEntry()" : null,
  "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.locks.Condition,java.time.Duration)" : "* Invokes {@code condition.}{@link Condition#await(long, TimeUnit) await(timeout, unit)}\n   * uninterruptibly.\n   *\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.thirdparty.publicsuffix.PublicSuffixType:fromCode(char)" : "Returns a PublicSuffixType of the right type according to the given code",
  "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:roundToDoubleArbitrarily(java.math.BigDecimal)" : null,
  "com.google.common.collect.ImmutableSet$CachingAsList:asList()" : null,
  "com.google.common.base.Predicates$CompositionPredicate:toString()" : null,
  "com.google.common.collect.Ordering:reverse()" : null,
  "com.google.common.collect.RegularImmutableSortedMultiset:getCount(int)" : null,
  "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:trySplit()" : null,
  "com.google.common.collect.TreeRangeSet$SubRangeSet:remove(com.google.common.collect.Range)" : null,
  "com.google.common.collect.ImmutableCollection:clear()" : "* Guaranteed to throw an exception and leave the collection unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.ImmutableSet$Builder:build()" : null,
  "com.google.common.collect.HashBiMap$Inverse:size()" : null,
  "com.google.common.util.concurrent.Service:awaitRunning(java.time.Duration)" : "* Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state} for no more\n   * than the given time.\n   *\n   * @param timeout the maximum time to wait\n   * @throws TimeoutException if the service has not reached the given state within the deadline\n   * @throws IllegalStateException if the service reaches a state from which it is not possible to\n   *     enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is {@code\n   *     State#TERMINATED} when this method is called then this will throw an IllegalStateException.\n   * @since 28.0",
  "com.google.common.base.Absent:<init>()" : null,
  "com.google.common.collect.DescendingImmutableSortedMultiset:size()" : null,
  "com.google.common.hash.HashCode:fromBytes(byte[])" : "* Creates a {@code HashCode} from a byte array. The array is defensively copied to preserve the\n   * immutability contract of {@code HashCode}. The array cannot be empty.\n   *\n   * @since 15.0 (since 12.0 in HashCodes)",
  "com.google.common.primitives.ImmutableIntArray:<init>(int[])" : null,
  "com.google.common.graph.ImmutableNetwork:incidentEdges(java.lang.Object)" : null,
  "com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)" : null,
  "com.google.common.base.CharMatcher$None:or(com.google.common.base.CharMatcher)" : null,
  "com.google.common.graph.GraphBuilder:allowsSelfLoops(boolean)" : "* Specifies whether the graph will allow self-loops (edges that connect a node to itself).\n   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link\n   * UnsupportedOperationException}.\n   *\n   * <p>The default value is {@code false}.",
  "com.google.common.util.concurrent.ThreadFactoryBuilder:<init>()" : "Creates a new {@link ThreadFactory} builder.",
  "com.google.common.util.concurrent.AggregateFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)" : null,
  "com.google.common.reflect.Invokable$ConstructorInvokable:<init>(java.lang.reflect.Constructor)" : null,
  "com.google.common.reflect.ClassPath$ResourceInfo:asByteSource()" : "* Returns a {@link ByteSource} view of the resource from which its bytes can be read.\n     *\n     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,\n     *     despite physically existing in the class path.\n     * @since 20.0",
  "com.google.common.collect.MapMakerInternalMap$Values:iterator()" : null,
  "com.google.common.collect.Collections2:newStringBuilderForCollection(int)" : "Returns best-effort-sized StringBuilder based on the given collection size.",
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:<init>(com.google.common.io.BaseEncoding,java.lang.String,int)" : null,
  "com.google.common.hash.Hashing$Crc32cMethodHandles:newLinkageError(java.lang.Throwable)" : null,
  "com.google.common.collect.DescendingMultiset:firstEntry()" : null,
  "com.google.common.collect.Maps$KeySet:remove(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableMultimap$Builder:put(java.util.Map$Entry)" : "* Adds an entry to the built multimap.\n     *\n     * @since 11.0",
  "com.google.common.collect.ImmutableSortedMap:navigableKeySet()" : null,
  "com.google.common.util.concurrent.Futures:whenAllComplete(java.lang.Iterable)" : "* Creates a {@link FutureCombiner} that processes the completed futures whether or not they're\n   * successful.\n   *\n   * <p>Any failures from the input futures will not be propagated to the returned future.\n   *\n   * @since 20.0",
  "com.google.common.collect.CompactLinkedHashSet:init(int)" : null,
  "com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:<init>(java.nio.charset.Charset)" : null,
  "com.google.common.primitives.UnsignedInts:<init>()" : null,
  "com.google.common.primitives.Booleans$BooleanArrayAsList:<init>(boolean[])" : null,
  "com.google.common.net.InternetDomainName:publicSuffix()" : "* Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code\n   * null} if no public suffix is present.\n   *\n   * @since 6.0",
  "com.google.common.collect.LinkedHashMultiset:size()" : null,
  "com.google.common.collect.CollectCollectors:toImmutableEnumSet()" : null,
  "com.google.common.cache.LocalCache$Segment:runUnlockedCleanup()" : null,
  "com.google.common.reflect.TypeResolver:expectArgument(java.lang.Class,java.lang.Object)" : null,
  "com.google.common.util.concurrent.CycleDetectingLockFactory:getOrCreateNodes(java.lang.Class)" : null,
  "com.google.common.collect.Iterators:transform(java.util.Iterator,com.google.common.base.Function)" : "* Returns a view containing the result of applying {@code function} to each element of {@code\n   * fromIterator}.\n   *\n   * <p>The returned iterator supports {@code remove()} if {@code fromIterator} does. After a\n   * successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding\n   * element.",
  "com.google.common.collect.ObjectArrays:concat(java.lang.Object[],java.lang.Object[],java.lang.Class)" : "* Returns a new array that contains the concatenated contents of two arrays.\n   *\n   * @param first the first array of elements to concatenate\n   * @param second the second array of elements to concatenate\n   * @param type the component type of the returned array",
  "com.google.common.net.MediaType:hashCode()" : null,
  "com.google.common.util.concurrent.Uninterruptibles:tryLockUninterruptibly(java.util.concurrent.locks.Lock,long,java.util.concurrent.TimeUnit)" : "* Invokes {@code lock.}{@link Lock#tryLock(long, TimeUnit) tryLock(timeout, unit)}\n   * uninterruptibly.\n   *\n   * @since 30.0",
  "com.google.common.net.InetAddresses:textToNumericFormatV6(java.lang.String)" : null,
  "com.google.common.collect.RegularContiguousSet:contains(java.lang.Object)" : null,
  "com.google.common.collect.Interners$InternerFunction:<init>(com.google.common.collect.Interner)" : null,
  "com.google.common.collect.SingletonImmutableTable:<init>(java.lang.Object,java.lang.Object,java.lang.Object)" : null,
  "com.google.common.collect.JdkBackedImmutableSet:get(int)" : null,
  "com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object,boolean)" : null,
  "com.google.common.collect.ImmutableSortedSet$Builder:add(java.lang.Object)" : "* Adds {@code element} to the {@code ImmutableSortedSet}. If the {@code ImmutableSortedSet}\n     * already contains {@code element}, then {@code add} has no effect. (only the previously added\n     * element is retained).\n     *\n     * @param element the element to add\n     * @return this {@code Builder} object\n     * @throws NullPointerException if {@code element} is null",
  "com.google.common.collect.ImmutableSet:readObject(java.io.ObjectInputStream)" : null,
  "com.google.common.collect.CompactHashMap:keySetIterator()" : null,
  "com.google.common.math.DoubleUtils:bigToDouble(java.math.BigInteger)" : null,
  "com.google.common.collect.ImmutableSortedSet$Builder:sortAndDedup()" : null,
  "com.google.common.collect.Maps$TransformedEntriesMap:getOrDefault(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.primitives.ImmutableIntArray$AsList:get(int)" : null,
  "com.google.common.collect.TreeRangeMap$AsMapOfRanges:size()" : null,
  "com.google.common.collect.SortedLists$KeyAbsentBehavior$2:resultIndex(int)" : null,
  "com.google.common.collect.ImmutableList$ReverseImmutableList:listIterator()" : null,
  "com.google.common.reflect.TypeToken:boundsAsInterfaces(java.lang.reflect.Type[])" : null,
  "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)" : null,
  "com.google.common.util.concurrent.FuturesGetChecked:weakSetValidator()" : null,
  "com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Comparable,boolean)" : null,
  "com.google.common.hash.AbstractStreamingHasher:munchIfFull()" : null,
  "com.google.common.collect.MapMakerInternalMap:createWithDummyValues(com.google.common.collect.MapMaker)" : "* Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as\n   * specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be\n   * optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store\n   * any values at all. Because of this optimization, {@code build.getValueStrength()} must be\n   * {@link Strength#STRONG}.\n   *\n   * <p>This method is intended to only be used by the internal implementation of {@link Interners},\n   * since a map of dummy values is the exact use case there.",
  "com.google.common.base.Java8Compatibility:clear(java.nio.Buffer)" : null,
  "com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)" : null,
  "com.google.common.collect.Sets$UnmodifiableNavigableSet:lower(java.lang.Object)" : null,
  "com.google.common.collect.FluentIterable:toSet()" : "* Returns an {@code ImmutableSet} containing all of the elements from this fluent iterable with\n   * duplicates removed.\n   *\n   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code\n   * stream.collect()}.\n   *\n   * @throws NullPointerException if any element is {@code null}\n   * @since 14.0 (since 12.0 as {@code toImmutableSet()}).",
  "com.google.common.util.concurrent.RateLimiter:acquire(int)" : "* Acquires the given number of permits from this {@code RateLimiter}, blocking until the request\n   * can be granted. Tells the amount of time slept, if any.\n   *\n   * @param permits the number of permits to acquire\n   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited\n   * @throws IllegalArgumentException if the requested number of permits is negative or zero\n   * @since 16.0 (present in 13.0 with {@code void} return type})",
  "com.google.common.collect.Iterables:getLast(java.lang.Iterable)" : "* Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link\n   * RandomAccess} support, then this operation is guaranteed to be {@code O(1)}.\n   *\n   * <p><b>{@code Stream} equivalent:</b> {@link Streams#findLast Streams.findLast(stream).get()}\n   *\n   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),\n   * consider using {@code collection.getLast()} instead.\n   *\n   * @return the last element of {@code iterable}\n   * @throws NoSuchElementException if the iterable is empty",
  "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:comparator()" : null,
  "com.google.common.io.MultiReader:read(char[],int,int)" : null,
  "com.google.common.collect.Maps$ViewCachingAbstractMap:createKeySet()" : null,
  "com.google.common.collect.Tables$TransformedTable:columnKeySet()" : null,
  "com.google.common.reflect.TypeToken:getOwnerTypeIfPresent()" : "* Returns the owner type of a {@link ParameterizedType} or enclosing class of a {@link Class}, or\n   * null otherwise.",
  "com.google.common.collect.HashBiMap$InverseSerializedForm:readResolve()" : null,
  "com.google.common.collect.ArrayTable$ColumnMap:setValue(int,java.util.Map)" : null,
  "com.google.common.util.concurrent.ListeningExecutorService:invokeAll(java.util.Collection,java.time.Duration)" : "* Duration-based overload of {@link #invokeAll(Collection, long, TimeUnit)}.\n   *\n   * @since 32.1.0",
  "com.google.common.collect.Multimaps$UnmodifiableMultimap:entries()" : null,
  "com.google.common.graph.StandardNetwork:isDirected()" : null,
  "com.google.common.io.ByteStreams:newDataInput(java.io.ByteArrayInputStream)" : "* Returns a new {@link ByteArrayDataInput} instance to read from the given {@code\n   * ByteArrayInputStream}. The given input stream is not reset before being read from by the\n   * returned {@code ByteArrayDataInput}.\n   *\n   * @since 17.0",
  "com.google.common.base.CharMatcher:negate()" : null,
  "com.google.common.collect.ImmutableMap:isHashCodeFast()" : null,
  "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:ignoreCase()" : null,
  "com.google.common.collect.Maps:transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)" : "* Returns a view of a map whose values are derived from the original map's entries. In contrast\n   * to {@link #transformValues}, this method's entry-transformation logic may depend on the key as\n   * well as the value.\n   *\n   * <p>All other properties of the transformed map, such as iteration order, are left intact. For\n   * example, the code:\n   *\n   * {@snippet :\n   * Map<String, Boolean> options =\n   *     ImmutableMap.of(\"verbose\", true, \"sort\", false);\n   * EntryTransformer<String, Boolean, String> flagPrefixer =\n   *     new EntryTransformer<String, Boolean, String>() {\n   *       public String transformEntry(String key, Boolean value) {\n   *         return value ? key : \"no\" + key;\n   *       }\n   *     };\n   * Map<String, String> transformed =\n   *     Maps.transformEntries(options, flagPrefixer);\n   * System.out.println(transformed);\n   * }\n   *\n   * ... prints {@code {verbose=verbose, sort=nosort}}.\n   *\n   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports\n   * removal operations, and these are reflected in the underlying map.\n   *\n   * <p>It's acceptable for the underlying map to contain null keys and null values provided that\n   * the transformer is capable of accepting null inputs. The transformed map might contain null\n   * values if the transformer sometimes gives a null result.\n   *\n   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.\n   *\n   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned\n   * map to be a view, but it means that the transformer will be applied many times for bulk\n   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform\n   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map\n   * doesn't need to be a view, copy the returned map into a new map of your choosing.\n   *\n   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code\n   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of\n   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as\n   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the\n   * transformed map.\n   *\n   * @since 7.0",
  "com.google.common.collect.ImmutableTable:copyOf(com.google.common.collect.Table)" : "* Returns an immutable copy of the provided table.\n   *\n   * <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration\n   * ordering of all views in the returned table. Note that some views of the original table and the\n   * copied table may have different iteration orders. For more control over the ordering, create a\n   * {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and\n   * {@link Builder#putAll}\n   *\n   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n   * undocumented and subject to change.",
  "com.google.common.collect.EnumMultiset:elementIterator()" : null,
  "com.google.common.primitives.Shorts:checkedCast(long)" : "* Returns the {@code short} value that is equal to {@code value}, if possible.\n   *\n   * @param value any value in the range of the {@code short} type\n   * @return the {@code short} value that equals {@code value}\n   * @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or\n   *     less than {@link Short#MIN_VALUE}",
  "com.google.common.util.concurrent.AbstractService$5:toString()" : null,
  "com.google.common.collect.Maps$KeySet:size()" : null,
  "com.google.common.collect.ImmutableListMultimap:inverse()" : "* {@inheritDoc}\n   *\n   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and\n   * value, this method returns an {@code ImmutableListMultimap} rather than the {@code\n   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.\n   *\n   * @since 11.0",
  "com.google.common.collect.Maps$FilteredEntrySortedMap:subMap(java.lang.Object,java.lang.Object)" : null,
  "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordEviction()" : null,
  "com.google.common.cache.LocalCache:createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)" : null,
  "com.google.common.hash.MacHashFunction$MacHasher:update(byte[],int,int)" : null,
  "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:add(java.lang.Object)" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:getAncestor()" : null,
  "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:tailSet(java.lang.Object)" : null,
  "com.google.common.collect.LinkedHashMultimap$ValueSet:add(java.lang.Object)" : null,
  "com.google.common.hash.Murmur3_32HashFunction:hashLong(long)" : null,
  "com.google.common.collect.FluentIterable:from(com.google.common.collect.FluentIterable)" : "* Construct a fluent iterable from another fluent iterable. This is obviously never necessary,\n   * but is intended to help call out cases where one migration from {@code Iterable} to {@code\n   * FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}.\n   *\n   * @deprecated instances of {@code FluentIterable} don't need to be converted to {@code\n   *     FluentIterable}",
  "com.google.common.collect.Lists:newArrayList(java.lang.Iterable)" : "* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin\n   * shortcut for creating an empty list then calling {@link Iterables#addAll}.\n   *\n   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link\n   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link\n   * FluentIterable} and call {@code elements.toList()}.)\n   *\n   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use\n   * the {@code ArrayList} {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking\n   * advantage of <a\n   * href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation\">\"diamond\"\n   * syntax</a>.",
  "com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:readResolve()" : null,
  "com.google.common.collect.EnumBiMap:create(java.util.Map)" : "* Returns a new bimap with the same mappings as the specified map. If the specified map is an\n   * {@code EnumBiMap}, the new bimap has the same types as the provided map. Otherwise, the\n   * specified map must contain at least one mapping, in order to determine the key and value types.\n   *\n   * @param map the map whose mappings are to be placed in this map\n   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no\n   *     mappings",
  "com.google.common.base.Splitter:withKeyValueSeparator(char)" : "* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries\n   * into keys and values using the specified separator.\n   *\n   * @since 14.0",
  "com.google.common.base.Joiner$2:withKeyValueSeparator(java.lang.String)" : "* Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as\n   * this {@code Joiner} otherwise.",
  "com.google.common.collect.Sets$DescendingSet:reverse(java.util.Comparator)" : null,
  "com.google.common.collect.ImmutableMultimap:createEntries()" : null,
  "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:self()" : null,
  "com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)" : null,
  "com.google.common.primitives.Bytes:indexOf(byte[],byte)" : "* Returns the index of the first appearance of the value {@code target} in {@code array}.\n   *\n   * @param array an array of {@code byte} values, possibly empty\n   * @param target a primitive {@code byte} value\n   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n   *     such index exists.",
  "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong:trySplit()" : null,
  "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(long,long)" : null,
  "com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future,java.time.Duration)" : "* Invokes {@code future.}{@link Future#get(long, TimeUnit) get(timeout, unit)} uninterruptibly.\n   *\n   * <p>Similar methods:\n   *\n   * <ul>\n   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link\n   *       Futures#getDone Futures.getDone}.\n   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link\n   *       Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.\n   *   <li>To get uninterruptibility and remove checked exceptions, use {@link\n   *       Futures#getUnchecked}.\n   * </ul>\n   *\n   * @throws ExecutionException if the computation threw an exception\n   * @throws CancellationException if the computation was cancelled\n   * @throws TimeoutException if the wait timed out\n   * @since 28.0 (but only since 33.4.0 in the Android flavor)",
  "com.google.common.util.concurrent.AbstractScheduledService:state()" : null,
  "com.google.common.collect.Serialization:writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream)" : "* Stores the contents of a multiset in an output stream, as part of serialization. It does not\n   * support concurrent multisets whose content may change while the method is running.\n   *\n   * <p>The serialized output consists of the number of distinct elements, the first element, its\n   * count, the second element, its count, and so on.",
  "com.google.common.base.CharMatcher$IsNot:and(com.google.common.base.CharMatcher)" : null,
  "com.google.common.collect.LexicographicalOrdering:hashCode()" : null,
  "com.google.common.collect.TreeBasedTable$TreeRow:lastKey()" : null,
  "com.google.common.collect.RegularImmutableSortedSet:containsAll(java.util.Collection)" : null,
  "com.google.common.collect.TreeRangeMap:remove(com.google.common.collect.Range)" : null,
  "com.google.common.graph.Graph:successors(java.lang.Object)" : "* Returns a live view of all nodes in this graph adjacent to {@code node} which can be reached by\n   * traversing {@code node}'s outgoing edges in the direction (if any) of the edge.\n   *\n   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.\n   *\n   * <p>This is <i>not</i> the same as \"all nodes reachable from {@code node} by following outgoing\n   * edges\". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.\n   *\n   * <p>If {@code node} is removed from the graph after this method is called, the {@code Set}\n   * {@code view} returned by this method will be invalidated, and will throw {@code\n   * IllegalStateException} if it is accessed in any way, with the following exceptions:\n   *\n   * <ul>\n   *   <li>{@code view.equals(view)} evaluates to {@code true} (but any other {@code equals()}\n   *       expression involving {@code view} will throw)\n   *   <li>{@code hashCode()} does not throw\n   *   <li>if {@code node} is re-added to the graph after having been removed, {@code view}'s\n   *       behavior is undefined\n   * </ul>\n   *\n   * @throws IllegalArgumentException if {@code node} is not an element of this graph",
  "com.google.common.collect.RegularImmutableTable$Values:isPartialView()" : null,
  "com.google.common.util.concurrent.ForwardingExecutorService:submit(java.lang.Runnable,java.lang.Object)" : null,
  "com.google.common.collect.TreeBasedTable$Factory:<init>(java.util.Comparator)" : null,
  "com.google.common.collect.StandardTable:clear()" : null,
  "com.google.common.math.MathPreconditions:checkPositive(java.lang.String,long)" : null,
  "com.google.common.primitives.Longs$LongArrayAsList:<init>(long[],int,int)" : null,
  "com.google.common.collect.AbstractBiMap$EntrySet:contains(java.lang.Object)" : null,
  "com.google.common.xml.XmlEscapers:<init>()" : null,
  "com.google.common.cache.LocalCache$WeakValueReference:waitForValue()" : null,
  "com.google.common.io.CharSequenceReader:checkOpen()" : null,
  "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueHealthyEvent()" : null,
  "com.google.common.math.LinearTransformation:forNaN()" : "* Builds an instance for datasets which contains {@link Double#NaN}. The {@link #isHorizontal}\n   * and {@link #isVertical} methods return {@code false} and the {@link #slope}, and {@link\n   * #transform} methods all return {@link Double#NaN}. The {@link #inverse} method returns the same\n   * instance.",
  "com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap)" : null,
  "com.google.common.collect.Tables$TransposeTable:cellSpliterator()" : null,
  "com.google.common.collect.DescendingMultiset:comparator()" : null,
  "com.google.common.io.CharStreams:copy(java.lang.Readable,java.lang.Appendable)" : "* Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not\n   * close or flush either object.\n   *\n   * @param from the object to read from\n   * @param to the object to write to\n   * @return the number of characters copied\n   * @throws IOException if an I/O error occurs",
  "com.google.common.graph.ImmutableGraph$Builder:<init>(com.google.common.graph.GraphBuilder)" : null,
  "com.google.common.collect.TreeMultiset$Aggregate$2:treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)" : null,
  "com.google.common.util.concurrent.Futures$InCompletionOrderState:recordOutputCancellation(boolean)" : null,
  "com.google.common.base.Joiner:withKeyValueSeparator(char)" : "* Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as\n   * this {@code Joiner} otherwise.\n   *\n   * @since 20.0",
  "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:bitSize()" : "Number of bits",
  "com.google.common.math.BigIntegerMath:sqrtFloor(java.math.BigInteger)" : null,
  "com.google.common.io.ByteSource$ConcatenatedByteSource:<init>(java.lang.Iterable)" : null,
  "com.google.common.cache.CacheBuilderSpec$MaximumSizeParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)" : null,
  "com.google.common.base.SmallCharMatcher:<init>(char[],long,boolean,java.lang.String)" : null,
  "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:containsKey(java.lang.Object)" : null,
  "com.google.common.collect.ImmutableSortedMultiset:pollFirstEntry()" : "* {@inheritDoc}\n   *\n   * <p>This implementation is guaranteed to throw an {@link UnsupportedOperationException}.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.",
  "com.google.common.collect.AbstractNavigableMap$DescendingMap:entryIterator()" : null
}