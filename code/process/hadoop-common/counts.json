{
  "org.apache.hadoop.io.SequenceFile$Writer$FileOption:<init>(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.ipc.Server$MetricsUpdateRunner:run()" : {
    "monotonicNow" : 1,
    "sum" : 1,
    "toSeconds" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 2
  },
  "org.apache.hadoop.net.NetUtils:canonicalizeHost(java.lang.String)" : {
    "getHostName" : 1,
    "get" : 2,
    "getByName" : 1,
    "putIfAbsent" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProvider:options(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.crypto.CryptoCodec:getCodecClasses(org.apache.hadoop.conf.Configuration,org.apache.hadoop.crypto.CipherSuite)" : {
    "add" : 1,
    "split" : 1,
    "debug" : 3,
    "newArrayList" : 1,
    "asSubclass" : 1,
    "getClassByName" : 1,
    "get" : 3,
    "equals" : 2,
    "getConfigSuffix" : 1,
    "omitEmptyStrings" : 1,
    "trimResults" : 1,
    "on" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "resolve" : 1,
    "setStoragePolicy" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.io.ByteWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.fs.shell.PathData:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getLocal" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.util.bloom.BloomFilter:write(java.io.DataOutput)" : {
    "getNBytes" : 1,
    "get" : 1,
    "write" : 2
  },
  "org.apache.hadoop.fs.FilterFs:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "getAclStatus" : 1
  },
  "org.apache.hadoop.fs.shell.Delete$Expunge:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "getOptValue" : 1,
    "addOptionWithValue" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:addDeferredProcessingTime(java.lang.String,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:maximums()" : {
    "getInnerStatistics" : 1,
    "maximums" : 1
  },
  "org.apache.hadoop.util.VersionInfo:<init>(java.lang.String)" : {
    "getClass" : 1,
    "warn" : 1,
    "load" : 1,
    "getResourceAsStream" : 1,
    "closeStream" : 1,
    "getLogger" : 1,
    "getClassLoader" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ha.ZKFCRpcServer:<init>(org.apache.hadoop.conf.Configuration,java.net.InetSocketAddress,org.apache.hadoop.ha.ZKFailoverController,org.apache.hadoop.security.authorize.PolicyProvider)" : {
    "setBindAddress" : 1,
    "getPort" : 1,
    "setNumHandlers" : 1,
    "getHostName" : 1,
    "build" : 1,
    "newReflectiveBlockingService" : 1,
    "setProtocol" : 1,
    "getBoolean" : 1,
    "setProtocolEngine" : 1,
    "refreshServiceAcl" : 1,
    "setVerbose" : 1,
    "setPort" : 1,
    "setInstance" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "setPermission" : 1
  },
  "org.apache.hadoop.fs.Path:normalizePath(java.lang.String,java.lang.String)" : {
    "hasWindowsDrive" : 1,
    "equals" : 1,
    "endsWith" : 1,
    "length" : 2,
    "replace" : 1,
    "isEmpty" : 1,
    "matcher" : 1,
    "replaceAll" : 1,
    "substring" : 1,
    "startPositionWithoutWindowsDrive" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getTokenInfo(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getSequenceNumber" : 1,
    "getTokenInfoFromZK" : 1,
    "get" : 1,
    "error" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.retry.RetryProxy:create(java.lang.Class,java.lang.Object,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "create" : 1
  },
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:getTestProvider()" : {
    "init" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:<init>(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:close()" : {
    "destroy" : 1,
    "shutdown" : 1
  },
  "org.apache.hadoop.io.BytesWritable:<init>(byte[])" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "removeXAttr" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newCounter(java.lang.String,java.lang.String,int)" : {
    "newCounter" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getNumErasedBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getParityBlocks" : 1,
    "getNumErasedBlocks" : 2,
    "getDataBlocks" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getStateString()" : {
    "getState" : 2,
    "format" : 1,
    "toString" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "setReplication" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setMinimum(java.lang.String,long)" : {
    "setAtomicLong" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:getRootDir()" : {
    "isInternalDir" : 1,
    "checkState" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:allowVerboseDump()" : {
    "allowVerboseDump" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkNfly(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.lang.String,java.net.URI[])" : {
    "uriToString" : 1,
    "addLinkNfly" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:setConf(java.lang.Object,org.apache.hadoop.conf.Configuration)" : {
    "setJobConf" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupNoRandPartA()" : {
    "setupBlock" : 1,
    "initBlock" : 1,
    "updateCRC" : 1,
    "endBlock" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:snapshotMetrics(org.apache.hadoop.metrics2.impl.MetricsSourceAdapter,org.apache.hadoop.metrics2.impl.MetricsBufferBuilder)" : {
    "add" : 2,
    "monotonicNow" : 2,
    "debug" : 1,
    "clear" : 1,
    "getMetrics" : 1,
    "name" : 2
  },
  "org.apache.hadoop.io.nativeio.SharedFileDescriptorFactory:create(java.lang.String,java.lang.String[])" : {
    "createDescriptor0" : 1,
    "deleteStaleTemporaryFiles0" : 1,
    "getMessage" : 1,
    "toString" : 1,
    "getLoadingFailureReason" : 1,
    "close" : 1,
    "append" : 5
  },
  "org.apache.hadoop.security.KDiag$KerberosDiagsFailure:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:createFileSystem(java.net.URI[],org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.fs.viewfs.FsGetter)" : {
    "add" : 1,
    "parseInt" : 1,
    "split" : 2,
    "valueOf" : 2,
    "noneOf" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setMaximum(java.lang.String,long)" : {
    "getInnerStatistics" : 1,
    "setMaximum" : 1
  },
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:calculateIV(byte[],long,byte[])" : {
    "getCipherSuite" : 1,
    "getAlgorithmBlockSize" : 1,
    "calculateIV" : 1
  },
  "org.apache.hadoop.conf.Configuration:getSocketAddr(java.lang.String,java.lang.String,java.lang.String,int)" : {
    "getPort" : 1,
    "createSocketAddr" : 1,
    "get" : 1,
    "isEmpty" : 1,
    "getSocketAddr" : 1
  },
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:initFromFS()" : {
    "getInt" : 1,
    "getConf" : 1
  },
  "org.apache.hadoop.tools.TableListing$Builder:build()" : {
    "toArray" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:next(org.apache.hadoop.io.Writable)" : {
    "next" : 1,
    "readFields" : 2,
    "readBlock" : 1,
    "getClass" : 2,
    "getPosition" : 2,
    "getName" : 1,
    "readVInt" : 1,
    "getKeyClass" : 1,
    "getLength" : 1,
    "reset" : 2,
    "mark" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:fenceOldActive(byte[])" : {
    "doFence" : 1,
    "stringifyException" : 1,
    "dataToTarget" : 1,
    "recordActiveAttempt" : 1
  },
  "org.apache.hadoop.io.MapWritable:putAll(java.util.Map)" : {
    "getValue" : 1,
    "getKey" : 1,
    "entrySet" : 1,
    "put" : 1
  },
  "org.apache.hadoop.tools.protocolPB.GetUserMappingsProtocolClientSideTranslatorPB:close()" : {
    "stopProxy" : 1
  },
  "org.apache.hadoop.fs.shell.find.Print$Print0:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "getStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:getDirDefault()" : { },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue$Processor:tryStop(org.apache.hadoop.util.Daemon)" : {
    "isEmpty" : 1,
    "kill" : 1
  },
  "org.apache.hadoop.conf.ReconfigurationException:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)" : {
    "constructMessage" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:decode(java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : {
    "convertToByteArrayState" : 1,
    "doDecode" : 2,
    "position" : 2
  },
  "org.apache.hadoop.io.MapFile$Writer:close()" : {
    "close" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "setReplication" : 1
  },
  "org.apache.hadoop.ipc.Server:wrapWithSasl(org.apache.hadoop.ipc.Server$RpcCall)" : {
    "debug" : 1,
    "setToken" : 1,
    "build" : 2,
    "array" : 1,
    "setState" : 1,
    "setupResponse" : 1,
    "newBuilder" : 2,
    "wrap" : 2,
    "copyFrom" : 1,
    "setCallId" : 1,
    "setStatus" : 1
  },
  "org.apache.hadoop.security.KDiag:validateShortName()" : {
    "warn" : 1,
    "find" : 1,
    "getShortName" : 1,
    "stringifyException" : 1,
    "matcher" : 1,
    "error" : 1,
    "failif" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:getStringData(java.lang.String)" : {
    "getData" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:getPathDataForChild(org.apache.hadoop.fs.shell.PathData)" : {
    "getStringForChildPath" : 1,
    "checkIfExists" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:flush()" : {
    "flush" : 1,
    "getKMSUrl" : 1,
    "error" : 1
  },
  "org.apache.hadoop.service.ServiceStateException:convert(java.lang.Throwable)" : { },
  "org.apache.hadoop.io.erasurecode.codec.ErasureCodec:createBlockGrouper()" : {
    "setSchema" : 1,
    "getSchema" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getMaximumReference(java.lang.String)" : {
    "getInnerStatistics" : 1,
    "getMaximumReference" : 1
  },
  "org.apache.hadoop.util.KMSUtil:createKeyProvider(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "createKeyProviderFromUri" : 1,
    "debug" : 1,
    "getKeyProviderUri" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:numOpenConnectionsPerUser()" : {
    "getNumOpenConnectionsPerUser" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:cacheGroupsRefresh()" : {
    "cacheGroupsAdd" : 1,
    "clear" : 1,
    "getNetgroupNames" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "createSnapshot" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:buildDescription(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : {
    "add" : 2,
    "getClass" : 4,
    "getName" : 4,
    "getHelp" : 2,
    "toString" : 1,
    "compareTo" : 2,
    "sort" : 2,
    "append" : 19,
    "getUsage" : 2,
    "isOperator" : 1,
    "createExpression" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:reset()" : {
    "getInnerStatistics" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink31:emitMetric(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.hadoop.metrics2.sink.ganglia.GangliaConf,org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink$GangliaSlope)" : {
    "emitToGangliaHosts" : 2,
    "warn" : 3,
    "getTmax" : 1,
    "debug" : 1,
    "getHostName" : 3,
    "xdr_int" : 8,
    "getDmax" : 1,
    "getUnits" : 1,
    "name" : 1,
    "xdr_string" : 11,
    "isDebugEnabled" : 1,
    "ordinal" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:transitionToStandby(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ha.proto.HAServiceProtocolProtos$TransitionToStandbyRequestProto)" : {
    "transitionToStandby" : 1,
    "convert" : 1,
    "getReqInfo" : 1
  },
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter:doFilter(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getShortUserName" : 1,
    "getUserPrincipal" : 1,
    "debug" : 2,
    "getRemoteAddr" : 2,
    "toLowerCase" : 1,
    "createRemoteUser" : 1,
    "createProxyUser" : 1,
    "warn" : 1,
    "doFilter" : 1,
    "getRemoteUser" : 3,
    "equals" : 1,
    "createServletExceptionResponse" : 1,
    "getUserName" : 1,
    "authorize" : 1,
    "getParameter" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:isFile(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path)" : {
    "isFile" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.io.serializer.SerializationFactory:getDeserializer(java.lang.Class)" : {
    "getDeserializer" : 1,
    "getSerialization" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:upperBound(byte[],int,int)" : {
    "seekTo" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "create" : 1
  },
  "org.apache.hadoop.ha.SshFenceByTcpPort:createSession(java.lang.String,org.apache.hadoop.ha.SshFenceByTcpPort$Args)" : {
    "setLogger" : 1,
    "addIdentity" : 1,
    "getSession" : 1,
    "getKeyFiles" : 1,
    "setConfig" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getKey(byte[])" : {
    "getKey" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$FsOperation:run(org.apache.hadoop.fs.Path)" : {
    "getChecksumFile" : 1,
    "apply" : 2,
    "exists" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableCounterLong:incr()" : {
    "incr" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:renewToken(org.apache.hadoop.security.token.Token,java.lang.String)" : {
    "renewToken" : 1,
    "debug" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:setTokenService(org.apache.hadoop.security.token.Token,java.net.InetSocketAddress)" : {
    "setService" : 1,
    "warn" : 1,
    "debug" : 1,
    "buildTokenService" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:newAttrInfo(java.lang.String,java.lang.String,java.lang.String)" : {
    "getAttrName" : 1
  },
  "org.apache.hadoop.conf.ReconfigurableBase:getChangedProperties(org.apache.hadoop.conf.Configuration,org.apache.hadoop.conf.Configuration)" : {
    "parseChangedProperties" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : {
    "constructRpcRequest" : 1,
    "addTimelineAnnotation" : 1,
    "currentThread" : 2,
    "set" : 1,
    "debug" : 1,
    "getName" : 5,
    "isAsynchronousMode" : 1,
    "getId" : 2,
    "methodToTraceString" : 1,
    "isDone" : 1,
    "getAsyncRpcResponse" : 1,
    "call" : 1,
    "trace" : 2,
    "newScope" : 1,
    "curThreadTracer" : 1,
    "shortDebugString" : 1,
    "get" : 1,
    "now" : 2,
    "isTraceEnabled" : 2,
    "toString" : 1,
    "isDebugEnabled" : 2,
    "close" : 1,
    "getReturnMessage" : 2
  },
  "org.apache.hadoop.util.SysInfoLinux:readProcStatFile()" : {
    "warn" : 3,
    "newInputStream" : 1,
    "valueOf" : 1,
    "parseLong" : 3,
    "find" : 1,
    "get" : 1,
    "getCurrentTime" : 1,
    "matcher" : 1,
    "readLine" : 2,
    "close" : 2,
    "updateElapsedJiffies" : 1,
    "group" : 3
  },
  "org.apache.hadoop.conf.Configuration:toString()" : {
    "size" : 1,
    "toString" : 3,
    "append" : 2
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:addFalsePositive(java.util.Collection)" : {
    "addFalsePositive" : 1
  },
  "org.apache.hadoop.security.http.RestCsrfPreventionFilter:init(javax.servlet.FilterConfig)" : {
    "getInitParameter" : 3,
    "parseBrowserUserAgents" : 1,
    "parseMethodsToIgnore" : 2,
    "info" : 1
  },
  "org.apache.hadoop.util.WeakReferenceMap:create(java.lang.Object)" : {
    "warn" : 1,
    "debug" : 1,
    "incrementAndGet" : 1,
    "resolve" : 1,
    "apply" : 1,
    "get" : 1,
    "requireNonNull" : 1,
    "noteLost" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFileContext(org.apache.hadoop.fs.AbstractFileSystem)" : {
    "getFileContext" : 1
  },
  "org.apache.hadoop.conf.Configuration:getStrings(java.lang.String)" : {
    "get" : 1,
    "getStrings" : 1
  },
  "org.apache.hadoop.io.file.tfile.ByteArray:<init>(byte[])" : { },
  "org.apache.hadoop.io.compress.ZStandardCodec:createOutputStream(java.io.OutputStream)" : {
    "createOutputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.io.Text:set(byte[])" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : {
    "checkPath" : 1,
    "truncate" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFormat:parse(java.lang.String[],int)" : {
    "subList" : 1,
    "clear" : 1,
    "parse" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.conf.Configuration:getPropsWithPrefix(java.lang.String)" : {
    "stringPropertyNames" : 1,
    "get" : 1,
    "getProps" : 1,
    "length" : 1,
    "put" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:getKeyClass()" : {
    "getClass" : 1,
    "getKeyClassName" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:getOverflowedCalls()" : {
    "getCallQueue" : 1,
    "getOverflowedCalls" : 1
  },
  "org.apache.hadoop.fs.impl.CombinedFileRange:<init>(long,long,org.apache.hadoop.fs.FileRange)" : {
    "append" : 1
  },
  "org.apache.hadoop.fs.FileUtil:canRead(java.io.File)" : {
    "getCanonicalPath" : 1,
    "access" : 1,
    "canRead" : 1
  },
  "org.apache.hadoop.conf.Configuration:getInstances(java.lang.String,java.lang.Class)" : {
    "add" : 1,
    "newInstance" : 1,
    "isAssignableFrom" : 1,
    "getClasses" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:read()" : {
    "read" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getUsed()" : {
    "getUsed" : 1
  },
  "org.apache.hadoop.fs.FileContext:getDelegationTokens(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "addAll" : 1,
    "resolveAbstractFileSystems" : 1,
    "getDelegationTokens" : 1
  },
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.CharSequence)" : {
    "write" : 1
  },
  "org.apache.hadoop.fs.Path:makeQualified(java.net.URI,org.apache.hadoop.fs.Path)" : {
    "getScheme" : 2,
    "toUri" : 1,
    "getPath" : 1,
    "isAbsolute" : 1,
    "getFragment" : 1,
    "getAuthority" : 3,
    "normalizePath" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_fromJsonString(java.lang.String)" : {
    "uncheckIOExceptions" : 1,
    "serializer" : 1,
    "fromJson" : 1
  },
  "org.apache.hadoop.fs.FilterFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "renameSnapshot" : 1
  },
  "org.apache.hadoop.conf.Configuration:getStrings(java.lang.String,java.lang.String[])" : {
    "get" : 1,
    "getStrings" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addDefaultApps(org.eclipse.jetty.server.handler.ContextHandlerCollection,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "addAliasCheck" : 2,
    "getProperty" : 1,
    "getSessionCookieConfig" : 2,
    "addServlet" : 2,
    "getInitParams" : 2,
    "addNoCacheFilter" : 1,
    "setResourceBase" : 2,
    "setDisplayName" : 2,
    "setSessionHandler" : 2,
    "put" : 5,
    "setHttpOnly" : 2,
    "getBoolean" : 2,
    "setContextAttributes" : 2,
    "setSecure" : 2
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getGroupsSet(java.lang.String)" : {
    "getUnixGroups" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration,boolean)" : {
    "comparator" : 1
  },
  "org.apache.hadoop.io.DefaultStringifier:storeArray(org.apache.hadoop.conf.Configuration,java.lang.Object[],java.lang.String)" : {
    "getClass" : 1,
    "set" : 1,
    "toString" : 2,
    "close" : 1,
    "append" : 2
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:touch(org.apache.hadoop.fs.shell.PathData)" : {
    "create" : 1,
    "exists" : 1,
    "updateTime" : 2,
    "close" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getNumVCoresUsed()" : {
    "readProcStatFile" : 1,
    "getCpuTrackerUsagePercent" : 1
  },
  "org.apache.hadoop.util.KMSUtil:parseJSONEncKeyVersion(java.lang.String,java.util.Map)" : {
    "checkNotNull" : 6,
    "decodeBase64" : 2,
    "get" : 5
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:logIOStatisticsAtLevel(org.slf4j.Logger,java.lang.String,java.lang.Object)" : {
    "warn" : 1,
    "retrieveIOStatistics" : 1,
    "logIOStatisticsAtDebug" : 1,
    "toLowerCase" : 1,
    "error" : 1,
    "ioStatisticsToPrettyString" : 3,
    "info" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "supportsSymlinks" : 1,
    "makeQualified" : 1
  },
  "org.apache.hadoop.ipc.Server:getPriorityLevel()" : {
    "get" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.ha.NodeFencer:parseMethods(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "add" : 1,
    "split" : 1,
    "trim" : 1,
    "newArrayList" : 1,
    "parseMethod" : 1,
    "isEmpty" : 1,
    "matcher" : 1,
    "replaceAll" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:set(org.apache.hadoop.fs.statistics.MeanStatistic)" : {
    "setSamplesAndSum" : 1,
    "getSamples" : 1,
    "getSum" : 1
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:executeTrailerState()" : {
    "readUIntLE" : 2,
    "getValue" : 1,
    "min" : 2,
    "copyBytesToLocal" : 2,
    "reset" : 1,
    "getBytesWritten" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getStatistics()" : {
    "getScheme" : 1,
    "values" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.DoubleWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.ipc.DecayRpcScheduler:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : {
    "addAvgResponseTimePerPriority" : 1,
    "addTopNCallerSummary" : 1,
    "getClass" : 1,
    "getName" : 1,
    "getMessage" : 1,
    "addUniqueIdentityCount" : 1,
    "addDecayedCallVolume" : 1,
    "addRecord" : 1,
    "addCallVolumePerPriority" : 1,
    "warn" : 1,
    "addServiceUserDecayedCallVolume" : 1,
    "addRawCallVolume" : 1,
    "setContext" : 1,
    "addServiceUserRawCallVolume" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:openForSequentialIO()" : {
    "openFile" : 1
  },
  "org.apache.hadoop.service.AbstractService:stop()" : {
    "noteFailure" : 1,
    "set" : 1,
    "debug" : 1,
    "enterState" : 1,
    "notifyListeners" : 1,
    "notifyAll" : 1,
    "serviceStop" : 1,
    "convert" : 1,
    "isInState" : 1
  },
  "org.apache.hadoop.service.CompositeService:addIfService(java.lang.Object)" : {
    "addService" : 1
  },
  "org.apache.hadoop.fs.permission.AclEntry:aclSpecToString(java.util.List)" : {
    "length" : 1,
    "toString" : 1,
    "substring" : 1,
    "append" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : {
    "fullPath" : 1,
    "getXAttrs" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : {
    "getUriPath" : 1,
    "makeAbsolute" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:lowerBound(org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "size" : 1,
    "lowerBound" : 1
  },
  "org.apache.hadoop.net.NetUtils:getInputStream(java.net.Socket)" : {
    "getSoTimeout" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:initFs()" : {
    "mkdirs" : 1,
    "toString" : 1,
    "setInitialFlushTime" : 1,
    "getFileSystem" : 1,
    "checkAppend" : 1,
    "stringifySecurityProperty" : 2
  },
  "org.apache.hadoop.ha.HAAdmin:getServiceState(org.apache.commons.cli.CommandLine)" : {
    "getServiceStatus" : 1,
    "println" : 2,
    "getState" : 1,
    "getConf" : 1,
    "getProxy" : 1,
    "resolveTarget" : 1,
    "printUsage" : 1,
    "getArgs" : 1
  },
  "org.apache.hadoop.io.ObjectWritable$NullInstance:write(java.io.DataOutput)" : {
    "getName" : 1,
    "writeString" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:confirmForceManual()" : {
    "confirmPrompt" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getCanonicalServiceName()" : {
    "toString" : 1
  },
  "org.apache.hadoop.security.SaslOutputStream:write(byte[])" : {
    "write" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "removeDefaultAcl" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:fullPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "isRoot" : 1,
    "toUri" : 2,
    "getPath" : 2,
    "isAbsolute" : 1
  },
  "org.apache.hadoop.fs.shell.AclCommands$GetfaclCommand:printExtendedAclEntry(org.apache.hadoop.fs.permission.AclStatus,org.apache.hadoop.fs.permission.FsPermission,org.apache.hadoop.fs.permission.AclEntry)" : {
    "println" : 3,
    "getPermission" : 1,
    "toStringStable" : 2,
    "getName" : 1,
    "getType" : 1,
    "format" : 1,
    "getEffectivePermission" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:close()" : {
    "close" : 2
  },
  "org.apache.hadoop.conf.Configuration:getTimeDuration(java.lang.String,java.lang.String,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)" : {
    "getTimeDurationHelper" : 2,
    "get" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.RefreshCallQueueProtocolClientSideTranslatorPB:close()" : {
    "stopProxy" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:getUri(java.net.URI,java.lang.String,boolean,int)" : {
    "checkScheme" : 1,
    "getPort" : 1,
    "getAuthority" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.util.VersionInfo:getBuildVersion()" : {
    "_getBuildVersion" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:createCredentialEntry(java.lang.String,char[])" : {
    "unlock" : 1,
    "containsAlias" : 1,
    "lock" : 1,
    "innerSetCredential" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getAuthenticationMethod()" : {
    "getAuthenticationMethod" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getStatus()" : {
    "getStatus" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Reader:initBloomFilter(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : {
    "readFields" : 1,
    "warn" : 1,
    "closeStream" : 1,
    "getFileSystem" : 1,
    "close" : 1,
    "open" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:<init>(java.lang.String)" : {
    "scheduleAtFixedRate" : 1,
    "uncapitalize" : 1,
    "capitalize" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:ifExists(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "exists" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.security.ProviderUtils:unnestUri(java.net.URI)" : {
    "split" : 1,
    "getPath" : 1,
    "toString" : 1,
    "getFragment" : 2,
    "getAuthority" : 2,
    "getQuery" : 2,
    "append" : 8
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:extractKMSPath(java.net.URI)" : {
    "unnestUri" : 1
  },
  "org.apache.hadoop.http.HttpServer2$Builder:createHttpsChannelConnector(org.eclipse.jetty.server.Server,org.eclipse.jetty.server.HttpConfiguration)" : {
    "setTrustStoreType" : 1,
    "addCustomizer" : 1,
    "setKeyStoreType" : 1,
    "createHttpChannelConnector" : 1,
    "isEmpty" : 1,
    "setEnabledProtocols" : 1,
    "setSecureScheme" : 1,
    "getLong" : 1,
    "setKeyStorePassword" : 1,
    "setTrustStorePath" : 1,
    "makeConfigurationChangeMonitor" : 1,
    "addFirstConnectionFactory" : 1,
    "of" : 1,
    "getTrimmedStrings" : 1,
    "asString" : 1,
    "setTrustStorePassword" : 1,
    "setKeyManagerPassword" : 1,
    "setNeedClientAuth" : 1,
    "info" : 1,
    "setExcludeCipherSuites" : 1,
    "setKeyStorePath" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getCanonicalServiceName()" : {
    "getCanonicalServiceName" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt:reference()" : {
    "moved" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:convertToByteStream(java.util.zip.Checksum,int)" : {
    "getValue" : 1,
    "int2byte" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFactory:<init>()" : { },
  "org.apache.hadoop.fs.FilterFs:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "getLinkTarget" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkRequired(boolean,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.util.IntrusiveCollection:retainAll(java.util.Collection)" : {
    "next" : 1,
    "iterator" : 1,
    "contains" : 1,
    "hasNext" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.service.AbstractService:resetGlobalListeners()" : {
    "reset" : 1
  },
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:createEncryptor()" : {
    "getCipherSuite" : 1,
    "getEngineId" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:loginUserFromKeytab(java.lang.String,java.lang.String)" : {
    "loginUserFromKeytabAndReturnUGI" : 1,
    "getName" : 1,
    "spawnAutoRenewalThreadForKeytab" : 1,
    "setLoginUser" : 1,
    "isSecurityEnabled" : 1,
    "isKerberosKeyTabLoginRenewalEnabled" : 2,
    "info" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:listStatus(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path)" : {
    "isFile" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "getFileStatus" : 2,
    "listFiles" : 1,
    "makeAbsolute" : 1,
    "printWorkingDirectory" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:bsR(long)" : {
    "readAByte" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getFsAction(int,org.apache.commons.net.ftp.FTPFile)" : {
    "or" : 3,
    "hasPermission" : 3
  },
  "org.apache.hadoop.fs.FileSystem:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : {
    "getFileStatus" : 1,
    "getFileBlockLocations" : 1
  },
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : {
    "requireNonNull" : 2
  },
  "org.apache.hadoop.conf.Configuration:getTrimmed(java.lang.String,java.lang.String)" : {
    "getTrimmed" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_aggregate(java.lang.Object)" : {
    "getAggregator" : 1,
    "retrieveIOStatistics" : 1,
    "getCurrentIOStatisticsContext" : 1,
    "aggregate" : 1
  },
  "org.apache.hadoop.ipc.Client:getRpcTimeout(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getCumulativeCpuTime()" : {
    "getCumulativeCpuTime" : 1,
    "readProcStatFile" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:getReturnMessage(java.lang.reflect.Method,org.apache.hadoop.ipc.RpcWritable$Buffer)" : {
    "getValue" : 1,
    "currentThread" : 1,
    "trace" : 1,
    "getName" : 1,
    "shortDebugString" : 1,
    "getDefaultInstanceForType" : 1,
    "isTraceEnabled" : 1,
    "getId" : 1,
    "getReturnProtoType" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodecFactory:getCodecByName(java.lang.String)" : {
    "toLowerCase" : 1,
    "get" : 1,
    "getCodecByClassName" : 1
  },
  "org.apache.hadoop.fs.FileUtil:fullyDelete(java.io.File,boolean)" : {
    "fullyDeleteContents" : 1,
    "deleteImpl" : 2,
    "getParentFile" : 1,
    "isSymlink" : 1,
    "grantPermissions" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:<init>(org.apache.hadoop.fs.ChecksumFs,org.apache.hadoop.fs.Path,int)" : {
    "warn" : 1,
    "set" : 3,
    "getChecksumFile" : 1,
    "getReplication" : 1,
    "getBytesPerSum" : 1,
    "readFully" : 1,
    "equals" : 1,
    "getFileStatus" : 1,
    "getSumBufferSize" : 1,
    "readInt" : 1,
    "getRawFs" : 2,
    "open" : 2,
    "newCrc32" : 1
  },
  "org.apache.hadoop.io.VIntWritable:<init>(int)" : {
    "set" : 1
  },
  "org.apache.hadoop.conf.Configuration:substituteVars(java.lang.String)" : {
    "warn" : 1,
    "contains" : 1,
    "getProperty" : 1,
    "length" : 7,
    "getRaw" : 1,
    "charAt" : 2,
    "substring" : 9,
    "findSubVariable" : 1,
    "getenv" : 3,
    "startsWith" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "getProxy" : 1,
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.ha.HAServiceTarget:getProxy(org.apache.hadoop.conf.Configuration,int)" : {
    "getAddress" : 1,
    "getProxyForAddress" : 1
  },
  "org.apache.hadoop.security.SaslPlainServer:getNegotiatedProperty(java.lang.String)" : {
    "throwIfNotComplete" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.Iterable,java.nio.charset.Charset)" : {
    "newLine" : 1,
    "build" : 1,
    "newEncoder" : 1,
    "requireNonNull" : 3,
    "overwrite" : 1,
    "append" : 1,
    "createFile" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:<init>(java.lang.String)" : { },
  "org.apache.hadoop.io.DefaultStringifier:store(org.apache.hadoop.conf.Configuration,java.lang.Object,java.lang.String)" : {
    "getClass" : 1,
    "set" : 1,
    "toString" : 1,
    "close" : 1
  },
  "org.apache.hadoop.service.ServiceStateModel:isValidStateTransition(org.apache.hadoop.service.Service$STATE,org.apache.hadoop.service.Service$STATE)" : {
    "getValue" : 2
  },
  "org.apache.hadoop.io.compress.snappy.SnappyCompressor:<init>()" : { },
  "org.apache.hadoop.util.PriorityQueue:adjustTop()" : {
    "downHeap" : 1
  },
  "org.apache.hadoop.fs.FileSystem:isFile(org.apache.hadoop.fs.Path)" : {
    "isFile" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.GlobFilter:init(java.lang.String,org.apache.hadoop.fs.PathFilter)" : {
    "getMessage" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : {
    "truncate" : 1,
    "getChannel" : 1,
    "getLen" : 1,
    "pathToFile" : 1,
    "getFileStatus" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.FileSystem:primitiveCreate(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt)" : {
    "contains" : 2,
    "create" : 1,
    "exists" : 1,
    "append" : 1,
    "validate" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:<init>(org.apache.hadoop.fs.viewfs.InodeTree$INodeDir,long,org.apache.hadoop.security.UserGroupInformation,java.net.URI,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.viewfs.InodeTree)" : {
    "getBoolean" : 1,
    "initialize" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:write(byte[],int,int)" : {
    "min" : 1,
    "remainingCapacity" : 1,
    "write" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getReplication(org.apache.hadoop.fs.Path)" : {
    "getReplication" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:getOwner()" : {
    "loadPermissionInfo" : 1,
    "isPermissionLoaded" : 1,
    "getOwner" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getResponseTimeCountInLastWindow()" : {
    "get" : 1,
    "getResponseTimeCountInLastWindow" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:setAttrCacheTag(org.apache.hadoop.metrics2.MetricsTag,int)" : {
    "name" : 1,
    "tagName" : 1,
    "value" : 1,
    "put" : 1
  },
  "org.apache.hadoop.conf.Configuration:getProps()" : {
    "loadProps" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$2:getCodec()" : { },
  "org.apache.hadoop.io.VIntWritable:write(java.io.DataOutput)" : {
    "writeVInt" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:clearBit(int)" : {
    "removeKey" : 2,
    "size" : 2,
    "get" : 2,
    "clear" : 5,
    "isEmpty" : 2
  },
  "org.apache.hadoop.fs.shell.Command:processPaths(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData[])" : {
    "displayError" : 1,
    "processPathInternal" : 1
  },
  "org.apache.hadoop.io.SecureIOUtils:forceSecureOpenForRead(java.io.File,java.lang.String,java.lang.String)" : {
    "getFstat" : 1,
    "getGroup" : 1,
    "getOwner" : 1,
    "checkStat" : 1,
    "close" : 1,
    "getFD" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$StaticMethod:invokeChecked(java.lang.Object[])" : {
    "invokeChecked" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:invoke(java.lang.Object,java.lang.Object[])" : {
    "invokeChecked" : 1,
    "throwIfInstance" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:expandWildcard(java.util.List,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem)" : {
    "add" : 1,
    "warn" : 1,
    "getWorkingDirectory" : 1,
    "getLocal" : 1,
    "makeQualified" : 1,
    "equals" : 1,
    "isEmpty" : 1,
    "getFileStatus" : 1,
    "getJarsInDirectory" : 1,
    "toString" : 2,
    "getUri" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "setStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:getUri()" : { },
  "org.apache.hadoop.util.Shell:getGroupsForUserCommand(java.lang.String)" : {
    "getWinUtilsPath" : 1,
    "bashQuote" : 1
  },
  "org.apache.hadoop.security.ssl.SSLFactory:configure(java.net.HttpURLConnection)" : {
    "createSSLSocketFactory" : 1,
    "getHostnameVerifier" : 1,
    "setSSLSocketFactory" : 1,
    "setHostnameVerifier" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextIntegration:createNewInstance(java.lang.Long)" : {
    "getAndIncrement" : 1,
    "debug" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:rename(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getParent" : 2,
    "getName" : 3,
    "rename" : 1,
    "equals" : 1,
    "toUri" : 2,
    "isParentOf" : 1,
    "exists" : 2,
    "toString" : 2,
    "changeWorkingDirectory" : 1,
    "makeAbsolute" : 2,
    "printWorkingDirectory" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$MaybeClose:<init>(java.lang.Object)" : { },
  "org.apache.hadoop.io.SequenceFile$Reader$FileOption:<init>(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.service.launcher.ServiceLauncher:bindCommandOptions()" : {
    "createOptions" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:<init>(java.io.InputStream)" : { },
  "org.apache.hadoop.fs.RawLocalFileSystem:<init>()" : {
    "getInitialWorkingDirectory" : 1
  },
  "org.apache.hadoop.security.WhitelistBasedResolver:getServerProperties(java.net.InetAddress)" : {
    "getDefaultProperties" : 1,
    "getHostAddress" : 1,
    "isIn" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:getClosest(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable,boolean)" : {
    "seekInternal" : 1,
    "getCurrentValue" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$BufferSizeOption:<init>(int)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getStatus()" : {
    "getStatus" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:handleEmptyDstDirectoryOnWindows(org.apache.hadoop.fs.Path,java.io.File,org.apache.hadoop.fs.Path,java.io.File)" : {
    "renameTo" : 1,
    "debug" : 1,
    "getFileStatus" : 1,
    "isDebugEnabled" : 1,
    "list" : 1,
    "delete" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.ipc.WeightedRoundRobinMultiplexer:<init>(int,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getInts" : 1,
    "getDefaultQueueWeights" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:<init>(org.apache.commons.cli.Options,java.lang.String[])" : { },
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.ipc.Server:setClientBackoffEnabled(boolean)" : {
    "setClientBackoffEnabled" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:<init>(java.lang.String,java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSource,java.lang.Iterable,org.apache.hadoop.metrics2.MetricsFilter,org.apache.hadoop.metrics2.MetricsFilter,long,boolean)" : {
    "checkNotNull" : 3,
    "checkArg" : 1,
    "newHashMap" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsAnnotations:newSourceBuilder(java.lang.Object)" : {
    "getAnnotatedMetricsFactory" : 1
  },
  "org.apache.hadoop.util.ZKUtil:parseACLs(java.lang.String)" : {
    "add" : 1,
    "lastIndexOf" : 1,
    "split" : 1,
    "setPerms" : 1,
    "newArrayList" : 2,
    "setId" : 1,
    "omitEmptyStrings" : 1,
    "indexOf" : 1,
    "getPermFromString" : 1,
    "substring" : 3,
    "trimResults" : 1,
    "on" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.SplittableCompressionCodec$READ_MODE,boolean)" : {
    "init" : 1,
    "changeStateToProcessABlock" : 1,
    "skipToNextBlockMarker" : 1,
    "available" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addServiceUserDecayedCallVolume(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "getTotalServiceUserCallVolume" : 1,
    "info" : 1,
    "addCounter" : 1
  },
  "org.apache.hadoop.fs.crypto.CryptoFSDataInputStream:<init>(org.apache.hadoop.fs.FSDataInputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[])" : { },
  "org.apache.hadoop.ipc.Server:bind(java.net.ServerSocket,java.net.InetSocketAddress,int)" : {
    "bind" : 1
  },
  "org.apache.hadoop.fs.FsShell:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.security.SaslInputStream:read(byte[])" : {
    "read" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getAclStatus" : 1
  },
  "org.apache.hadoop.io.DataOutputOutputStream:constructOutputStream(java.io.DataOutput)" : { },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:getNflyTmpPath(org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "getName" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:toString(java.lang.Object)" : {
    "toJson" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.security.HttpCrossOriginFilterInitializer:getEnabledConfigKey()" : {
    "getPrefix" : 1
  },
  "org.apache.hadoop.util.MachineList:<init>(java.lang.String,org.apache.hadoop.util.MachineList$InetAddressFactory)" : {
    "getTrimmedStringCollection" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:addMetricIfNotExists(java.lang.String)" : {
    "setUpdateTimeStamp" : 1,
    "get" : 1,
    "put" : 1,
    "capitalize" : 1
  },
  "org.apache.hadoop.security.SecurityUtil$QualifiedHostResolver:getByNameWithSearch(java.lang.String)" : {
    "getByExactName" : 2,
    "endsWith" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "authorize" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:getDataWithRetries(java.lang.String,boolean,org.apache.zookeeper.data.Stat)" : {
    "zkDoWithRetries" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getLargeReadOps()" : {
    "visitAll" : 1
  },
  "org.apache.hadoop.fs.FileSystem:openFile(org.apache.hadoop.fs.PathHandle)" : {
    "createDataInputStreamBuilder" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:<init>(org.apache.hadoop.fs.ChecksumFileSystem,org.apache.hadoop.fs.Path,int)" : {
    "set" : 2,
    "getChecksumFile" : 1,
    "getBytesPerSum" : 1,
    "getMessage" : 1,
    "getSumBufferSize" : 1,
    "getRawFileSystem" : 2,
    "warn" : 1,
    "getReplication" : 1,
    "readFully" : 1,
    "equals" : 1,
    "endsWith" : 1,
    "getFileStatus" : 1,
    "readInt" : 1,
    "open" : 2,
    "newCrc32" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:getCompressorType()" : {
    "checkNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping:getConf()" : {
    "getConf" : 1,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.metrics2.lib.MethodMetric$1:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "snapshot" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:checkBytes(java.nio.ByteBuffer,long,java.nio.ByteBuffer,long,int,org.apache.hadoop.fs.Path)" : {
    "asIntBuffer" : 1,
    "getValue" : 1,
    "findChecksumOffset" : 1,
    "get" : 1,
    "limit" : 2,
    "update" : 1,
    "reset" : 1,
    "duplicate" : 1,
    "position" : 2,
    "remaining" : 3
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : {
    "mkdirsWithOptionalPermission" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:reencryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : {
    "getEncryptionKeyName" : 2,
    "getEncryptedKeyVersion" : 4,
    "createConnection" : 1,
    "checkArgument" : 1,
    "getVersionName" : 2,
    "encodeBase64String" : 2,
    "put" : 4,
    "call" : 1,
    "getMaterial" : 1,
    "checkNotNull" : 3,
    "setRequestProperty" : 1,
    "equals" : 1,
    "getEncryptedKeyIv" : 2,
    "createURL" : 1,
    "getEncryptionKeyVersionName" : 2,
    "parseJSONEncKeyVersion" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:parseProtocolArgs(java.lang.String[],int)" : {
    "isValidProtocol" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:lookupGroup(javax.naming.directory.SearchResult,javax.naming.directory.DirContext,int)" : {
    "search" : 2,
    "resolveCustomGroupFilterArgs" : 1,
    "lookupPosixGroup" : 1,
    "hasMoreElements" : 1,
    "getGroupNames" : 1,
    "getNameInNamespace" : 1,
    "goUpGroupHierarchy" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.security.alias.KeyStoreProvider:stashOriginalFilePermissions()" : {
    "getPermission" : 1,
    "getPath" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.BufferedFSInputStream:maxReadSizeForVectorReads()" : {
    "maxReadSizeForVectorReads" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:putMetrics(org.apache.hadoop.metrics2.impl.MetricsBuffer,long)" : {
    "enqueue" : 1,
    "debug" : 1,
    "refreshQueueSizeGauge" : 1,
    "incr" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addAvgResponseTimePerPriority(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "addGauge" : 1,
    "get" : 1,
    "length" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:compareKeys(byte[],int,int,byte[],int,int)" : {
    "compare" : 1,
    "isSorted" : 1
  },
  "org.apache.hadoop.security.CompositeGroupsMapping:addMappingProvider(java.lang.String,java.lang.Class)" : {
    "add" : 1,
    "prepareConf" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:getAliases()" : {
    "add" : 1,
    "aliases" : 1,
    "unlock" : 1,
    "getPathAsString" : 1,
    "hasMoreElements" : 1,
    "lock" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "getPrimitivePower" : 1,
    "getFieldSize" : 1,
    "getNumAllUnits" : 1,
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 2
  },
  "org.apache.hadoop.util.functional.LazyAtomicReference:apply()" : {
    "eval" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:getTempFilePath(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.LocalDirAllocator)" : {
    "getParent" : 1,
    "getName" : 1,
    "setPosixFilePermissions" : 1,
    "getLocalPathForWrite" : 1,
    "toURI" : 1,
    "get" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "createTempFile" : 1
  },
  "org.apache.hadoop.io.WritableName:getClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getClassByName" : 1,
    "get" : 1,
    "initCause" : 1
  },
  "org.apache.hadoop.conf.Configuration:readFields(java.io.DataInput)" : {
    "readCompressedStringArray" : 1,
    "set" : 1,
    "readVInt" : 1,
    "readString" : 2,
    "clear" : 1,
    "putIntoUpdatingResource" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addDeferredRpcProcessingTime(long)" : {
    "add" : 2
  },
  "org.apache.hadoop.fs.FileSystem$Cache$Key:equals(java.lang.Object)" : {
    "isEqual" : 3
  },
  "org.apache.hadoop.fs.shell.Display$Checksum:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getMetaBlock(java.lang.String)" : {
    "getMetaBlock" : 1
  },
  "org.apache.hadoop.security.KDiag:printConfOpt(java.lang.String)" : {
    "println" : 1,
    "getConf" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.FilterFs:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "createSymlink" : 1
  },
  "org.apache.hadoop.fs.FileSystem:createDataInputStreamBuilder(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.PathHandle)" : { },
  "org.apache.hadoop.http.HttpServer2:userHasAdministratorAccess(javax.servlet.ServletContext,java.lang.String)" : {
    "getAttribute" : 1,
    "isUserAllowed" : 1,
    "createRemoteUser" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:logThreadInfo(org.slf4j.Logger,java.lang.String,long)" : {
    "monotonicNow" : 1,
    "printThreadInfo" : 1,
    "isInfoEnabled" : 1,
    "name" : 1,
    "toString" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.DiskChecker:doDiskIo(java.io.File)" : {
    "getFileNameForDiskIoCheck" : 1,
    "diskIoCheckWithoutNativeIo" : 1
  },
  "org.apache.hadoop.security.KDiag:usage()" : {
    "arg" : 10
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:processBasicHeader()" : {
    "readUByte" : 2,
    "readUShortLE" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],long,long)" : { },
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:createDecryptor()" : {
    "getCipherSuite" : 1,
    "getEngineId" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:hashCode()" : {
    "getErasureCodingPolicy" : 1,
    "getSnapshotSpaceConsumed" : 1,
    "hashCode" : 2,
    "getFileCount" : 1,
    "getSnapshotDirectoryCount" : 1,
    "getSnapshotLength" : 1,
    "getDirectoryCount" : 1,
    "getLength" : 1,
    "getSnapshotFileCount" : 1
  },
  "org.apache.hadoop.io.OutputBuffer:<init>()" : { },
  "org.apache.hadoop.io.WritableUtils:readStringArray(java.io.DataInput)" : {
    "readString" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.conf.Configuration:loadResource(java.util.Properties,org.apache.hadoop.conf.Configuration$Resource,boolean)" : {
    "getStreamReader" : 1,
    "getResource" : 1,
    "getName" : 1,
    "overlay" : 2,
    "loadProperty" : 1,
    "parse" : 1,
    "error" : 2,
    "isParserRestricted" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.DF:getMount()" : {
    "getCanonicalPath" : 1,
    "getPath" : 1,
    "verifyExitCode" : 1,
    "exists" : 1,
    "parseOutput" : 1,
    "run" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.fs.impl.StoreImplementationUtils:hasCapability(java.io.InputStream,java.lang.String)" : {
    "objectHasCapability" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:equals(java.lang.Object)" : {
    "isEqual" : 3
  },
  "org.apache.hadoop.security.SaslInputStream:readMoreData()" : {
    "debug" : 1,
    "readFully" : 2,
    "unsignedBytesToInt" : 1,
    "disposeSasl" : 1,
    "isDebugEnabled" : 1,
    "unwrap" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.erasurecode.rawcoder.DummyRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.BytesWritable:readFields(java.io.DataInput)" : {
    "setSize" : 2,
    "readFully" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:processOptions(java.util.LinkedList)" : {
    "add" : 4,
    "next" : 1,
    "setFollowLink" : 1,
    "isEmpty" : 1,
    "setRootExpression" : 1,
    "hasNext" : 1,
    "parse" : 1,
    "remove" : 1,
    "setFollowArgLink" : 1,
    "getExpression" : 2,
    "iterator" : 1,
    "getOpt" : 2,
    "addChildren" : 1,
    "getOptions" : 2,
    "isAction" : 1,
    "parseExpression" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.util.FindClass:loadClass(java.lang.String)" : {
    "loadedClass" : 1,
    "getClass" : 1,
    "printStack" : 3
  },
  "org.apache.hadoop.security.AuthenticationFilterInitializer:initFilter(org.apache.hadoop.http.FilterContainer,org.apache.hadoop.conf.Configuration)" : {
    "getName" : 1,
    "getFilterConfigMap" : 1,
    "addFilter" : 1
  },
  "org.apache.hadoop.io.MapFile$Merger:open(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : {
    "getValueClass" : 2,
    "getKeyClass" : 3,
    "asSubclass" : 1,
    "get" : 1,
    "keyClass" : 1,
    "valueClass" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:isUserInList(org.apache.hadoop.security.UserGroupInformation)" : {
    "getShortUserName" : 2,
    "contains" : 3,
    "isEmpty" : 1,
    "getRealUser" : 1,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getConf" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:updateAddress()" : {
    "setName" : 1,
    "isUnresolved" : 1,
    "warn" : 1,
    "getPort" : 1,
    "createSocketAddrForHost" : 1,
    "setAddress" : 1,
    "getHostName" : 1,
    "hashCode" : 1,
    "equals" : 1,
    "getUserName" : 1,
    "toString" : 1,
    "getTicket" : 1
  },
  "org.apache.hadoop.fs.FileSystemStorageStatistics:getLong(java.lang.String)" : {
    "fetch" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getTGT()" : {
    "getPrivateCredentials" : 1,
    "isOriginalTGT" : 1
  },
  "org.apache.hadoop.security.token.Token:privateClone(org.apache.hadoop.io.Text)" : { },
  "org.apache.hadoop.ipc.Client:close()" : {
    "stop" : 1
  },
  "org.apache.hadoop.fs.shell.XAttrCommands$SetfattrCommand:processOptions(java.util.LinkedList)" : {
    "size" : 1,
    "isEmpty" : 1,
    "decodeValue" : 1,
    "popOptionWithArgument" : 3
  },
  "org.apache.hadoop.security.LdapGroupsMapping:getPasswordForBindUser(java.lang.String)" : {
    "getPasswordFromCredentialProviders" : 1,
    "getPassword" : 1,
    "get" : 2,
    "isEmpty" : 2,
    "extractPassword" : 1
  },
  "org.apache.hadoop.ipc.ProtocolSignature:getProtocolSignature(org.apache.hadoop.ipc.VersionedProtocol,java.lang.String,long,int)" : {
    "getProtocolVersion" : 1,
    "forName" : 1,
    "getProtocolSignature" : 1
  },
  "org.apache.hadoop.util.StringUtils:byteToHexString(byte)" : {
    "byteToHexString" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:decryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : {
    "getKeyVersion" : 1,
    "getEncryptedKeyVersion" : 2,
    "checkNotNull" : 1,
    "getConf" : 1,
    "decryptEncryptedKey" : 1,
    "equals" : 1,
    "createDecryptor" : 1,
    "checkArgument" : 1,
    "getInstance" : 1,
    "getVersionName" : 2,
    "getEncryptionKeyVersionName" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:<init>(org.apache.hadoop.io.file.tfile.BCFile$Reader$RBlockState)" : {
    "getInputStream" : 1
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:or(org.apache.hadoop.util.bloom.Filter)" : {
    "buckets2words" : 1
  },
  "org.apache.hadoop.fs.XAttrCodec:encodeValue(byte[],org.apache.hadoop.fs.XAttrCodec)" : {
    "checkNotNull" : 1,
    "encodeToString" : 1,
    "encodeHexString" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcResponseTime(long)" : {
    "add" : 2
  },
  "org.apache.hadoop.security.token.Token:copyToken()" : { },
  "org.apache.hadoop.util.Shell:getHadoopHome()" : {
    "getHadoopHomeDir" : 1,
    "getCanonicalPath" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission$ImmutableFsPermission:<init>(short)" : { },
  "org.apache.hadoop.fs.FsShell:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "getClass" : 1,
    "equals" : 1,
    "registerCommands" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable,org.apache.hadoop.io.SequenceFile$Metadata)" : {
    "metadata" : 1,
    "createWriter" : 1,
    "file" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1,
    "filesystem" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:launchService(org.apache.hadoop.conf.Configuration,java.util.List,boolean,boolean)" : {
    "launchService" : 1
  },
  "org.apache.hadoop.net.DomainNameResolverFactory:newInstance(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getClass" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getEnclosingRoot(org.apache.hadoop.fs.Path)" : {
    "depth" : 2,
    "getEnclosingRoot" : 1,
    "resolve" : 1,
    "initCause" : 1,
    "format" : 1,
    "getMessage" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ha.HAServiceProtocolHelper:monitorHealth(org.apache.hadoop.ha.HAServiceProtocol,org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : {
    "unwrapRemoteException" : 1,
    "monitorHealth" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : {
    "getProxy" : 1
  },
  "org.apache.hadoop.io.retry.RetryProxy:create(java.lang.Class,org.apache.hadoop.io.retry.FailoverProxyProvider,java.util.Map,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "getInterface" : 1,
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:processGeneralOptions(org.apache.commons.cli.CommandLine)" : {
    "readTokenStorageFile" : 1,
    "getCurrentUser" : 1,
    "currentThread" : 2,
    "debug" : 1,
    "set" : 7,
    "addCredentials" : 1,
    "getLibJars" : 1,
    "getClassLoader" : 1,
    "setClassLoader" : 1,
    "setContextClassLoader" : 1,
    "split" : 1,
    "hasOption" : 8,
    "validateFiles" : 3,
    "setDefaultUri" : 1,
    "getLocal" : 1,
    "getContextClassLoader" : 1,
    "addResource" : 1,
    "makeQualified" : 1,
    "getOptionValues" : 2,
    "getOptionValue" : 6,
    "getFileStatus" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1,
    "equalsIgnoreCase" : 1,
    "setBoolean" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:pathCapabilities_hasPathCapability(java.lang.Object,org.apache.hadoop.fs.Path,java.lang.String)" : {
    "available" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:encode(java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : {
    "convertToByteArrayState" : 1,
    "doEncode" : 2,
    "position" : 2
  },
  "org.apache.hadoop.service.ServiceStateModel:enterState(org.apache.hadoop.service.Service$STATE)" : {
    "checkStateTransition" : 1
  },
  "org.apache.hadoop.fs.FileSystem:setDefaultUri(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "setDefaultUri" : 1,
    "fixName" : 1,
    "create" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:printCredentials(org.apache.hadoop.security.Credentials,org.apache.hadoop.io.Text,java.io.PrintStream)" : {
    "formatDate" : 1,
    "println" : 1,
    "debug" : 1,
    "getAllTokens" : 1,
    "encodeToUrlString" : 1,
    "repeat" : 1,
    "matchAlias" : 1,
    "getMaxDate" : 1,
    "getKind" : 1,
    "decodeIdentifier" : 1,
    "getRenewer" : 1,
    "getService" : 1,
    "printf" : 2
  },
  "org.apache.hadoop.ipc.Server$Connection:close()" : {
    "debug" : 1,
    "isOpen" : 2,
    "disposeSasl" : 1,
    "cleanupWithLogger" : 2,
    "shutdownOutput" : 1
  },
  "org.apache.hadoop.util.GcTimeMonitor:run()" : {
    "sleep" : 1,
    "alert" : 1,
    "setValues" : 1,
    "currentTimeMillis" : 1,
    "clone" : 1,
    "calculateGCTimePercentageWithinObservedInterval" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator:getAllLocalPathsToRead(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "obtainContext" : 1,
    "getAllLocalPathsToRead" : 1
  },
  "org.apache.hadoop.conf.Configuration:writeXml(java.io.Writer)" : {
    "writeXml" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$Factory:createProviders(org.apache.hadoop.conf.Configuration,java.net.URL,int,java.lang.String)" : {
    "split" : 1,
    "getPath" : 1,
    "getProtocol" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient:getServerToken(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth)" : {
    "debug" : 1,
    "getTokenInfo" : 1,
    "getTokens" : 1,
    "selectToken" : 1,
    "buildTokenService" : 1,
    "newInstance" : 1,
    "toString" : 1,
    "value" : 1
  },
  "org.apache.hadoop.ipc.RPC$Server:registerProtocolAndImpl(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.Class,java.lang.Object)" : {
    "getClientPrincipal" : 1,
    "getProtocolName" : 1,
    "getClass" : 1,
    "getProtocolVersion" : 1,
    "warn" : 2,
    "getName" : 2,
    "debug" : 1,
    "setPriorityLevel" : 1,
    "getConf" : 1,
    "isDebugEnabled" : 1,
    "createRemoteUser" : 1,
    "put" : 1,
    "getProtocolImplMap" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:init()" : {
    "initBlock" : 1,
    "bsPutUByte" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "getXAttr" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Df:processArguments(java.util.LinkedList)" : {
    "printToStream" : 1,
    "getUsagesTable" : 3,
    "isEmpty" : 1,
    "processArguments" : 1,
    "setUsagesTable" : 1,
    "setRightAlign" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:getDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String)" : {
    "getDelegationToken" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:reloginFromTicketCache()" : {
    "reloginFromTicketCache" : 1
  },
  "org.apache.hadoop.http.HttpServer2Metrics:remove()" : {
    "removeSourceName" : 1
  },
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:init(org.apache.hadoop.security.ssl.SSLFactory$Mode)" : {
    "getLong" : 1,
    "init" : 1,
    "debug" : 1,
    "load" : 1,
    "resolvePropertyName" : 4,
    "createTrustManagersFromConfiguration" : 1,
    "get" : 3,
    "isEmpty" : 1,
    "getBoolean" : 1,
    "isDebugEnabled" : 1,
    "getInstance" : 2,
    "createKeyManagersFromConfiguration" : 1,
    "getKeyManagers" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:msync()" : {
    "msync" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "modifyAclEntries" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:toString()" : {
    "mean" : 1,
    "format" : 1
  },
  "org.apache.hadoop.metrics2.util.MBeans:register(java.lang.String,java.lang.String,java.util.Map,java.lang.Object)" : {
    "warn" : 2,
    "trace" : 1,
    "debug" : 1,
    "checkNotNull" : 1,
    "registerMBean" : 1,
    "isTraceEnabled" : 1,
    "getPlatformMBeanServer" : 1,
    "getMBeanName" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:decryptEncryptedKey(org.apache.hadoop.crypto.Decryptor,org.apache.hadoop.crypto.key.KeyProvider$KeyVersion,org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : {
    "getMaterial" : 3,
    "init" : 1,
    "allocateDirect" : 2,
    "getEncryptedKeyVersion" : 1,
    "getName" : 1,
    "deriveIV" : 1,
    "get" : 1,
    "getEncryptedKeyIv" : 1,
    "decrypt" : 1,
    "flip" : 2,
    "put" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:getStartPos()" : {
    "getOffset" : 1,
    "getBlockRegion" : 1
  },
  "org.apache.hadoop.ipc.CallerContext$Builder:append(java.lang.String,java.lang.String)" : {
    "isValid" : 2,
    "length" : 1,
    "append" : 4
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:dataSize()" : {
    "bufferCapacityUsed" : 1
  },
  "org.apache.hadoop.fs.FSInputChecker:<init>(org.apache.hadoop.fs.Path,int,boolean,java.util.zip.Checksum,int,int)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:decodeHarURI(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getDefaultUri" : 1,
    "getScheme" : 1,
    "getPath" : 1,
    "replaceFirst" : 1,
    "getFragment" : 1,
    "getAuthority" : 3,
    "indexOf" : 1,
    "getQuery" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : {
    "readOnlyMountTable" : 1,
    "createInternal" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.security.KDiag:exec(org.apache.hadoop.conf.Configuration,java.lang.String[])" : {
    "run" : 1
  },
  "org.apache.hadoop.util.AutoCloseableLock:close()" : {
    "release" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "fullPath" : 1,
    "setAcl" : 1
  },
  "org.apache.hadoop.io.MapFile$Merger:close()" : {
    "closeStream" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getServerDefaults" : 2
  },
  "org.apache.hadoop.fs.shell.FsUsage$Du:processArguments(java.util.LinkedList)" : {
    "printToStream" : 1,
    "getUsagesTable" : 2,
    "isEmpty" : 1,
    "processArguments" : 1,
    "setUsagesTable" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Writer:hflush()" : {
    "hflush" : 1
  },
  "org.apache.hadoop.io.compress.CodecPool:returnCompressor(org.apache.hadoop.io.compress.Compressor)" : {
    "getClass" : 1,
    "isAnnotationPresent" : 1,
    "payback" : 1,
    "reset" : 1,
    "updateLeaseCount" : 1,
    "end" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getScheme" : 1,
    "getMasterIndexTimestamp" : 1,
    "decodeHarURI" : 1,
    "toUri" : 1,
    "getModificationTime" : 2,
    "getHarAuth" : 1,
    "archivePath" : 1,
    "getAuthority" : 1,
    "initializeMetadataCache" : 1,
    "put" : 1,
    "remove" : 1,
    "parseMetaData" : 1,
    "getArchiveIndexTimestamp" : 1,
    "get" : 2,
    "getFileStatus" : 2,
    "getPath" : 2,
    "exists" : 2,
    "toString" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getBlockCount()" : {
    "size" : 1,
    "getBlockRegionList" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:<init>(int,int,int,int)" : { },
  "org.apache.hadoop.io.erasurecode.grouper.BlockGrouper:anyRecoverable(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getErasedCount" : 1,
    "getRequiredNumParityBlocks" : 1
  },
  "org.apache.hadoop.io.InputBuffer:getPosition()" : {
    "getPosition" : 1
  },
  "org.apache.hadoop.security.http.RestCsrfPreventionFilter:handleHttpInteraction(org.apache.hadoop.security.http.RestCsrfPreventionFilter$HttpInteraction)" : {
    "contains" : 1,
    "proceed" : 1,
    "sendError" : 1,
    "getMethod" : 1,
    "isBrowser" : 1,
    "getHeader" : 2
  },
  "org.apache.hadoop.fs.CachingGetSpaceUsed$RefreshThread:<init>(org.apache.hadoop.fs.CachingGetSpaceUsed,boolean)" : { },
  "org.apache.hadoop.ha.ActiveStandbyElector:reJoinElectionAfterFailureToBecomeActive()" : {
    "reJoinElection" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:invokeStatic(java.lang.Object[])" : {
    "isStatic" : 1,
    "checkState" : 1,
    "invoke" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:close()" : {
    "stopClient" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:close()" : {
    "returnDecompressor" : 4,
    "close" : 3
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:initializeMountedFileSystems(java.util.List)" : {
    "getTargetFileSystem" : 1,
    "size" : 1,
    "error" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor$ZlibDirectDecompressor:reset()" : {
    "reset" : 1
  },
  "org.apache.hadoop.security.SaslRpcServer:create(org.apache.hadoop.ipc.Server$Connection,java.util.Map,org.apache.hadoop.security.token.SecretManager)" : {
    "doAs" : 1,
    "getCurrentUser" : 1,
    "debug" : 1,
    "isEmpty" : 1,
    "getUserName" : 1,
    "isDebugEnabled" : 1,
    "createSaslServer" : 2
  },
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:getInfo(java.lang.Class,org.apache.hadoop.metrics2.annotation.Metrics)" : {
    "isEmpty" : 2,
    "about" : 1,
    "name" : 1,
    "getSimpleName" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcProtobufRequest:<init>(org.apache.hadoop.ipc.protobuf.ProtobufRpcEngineProtos$RequestHeaderProto,com.google.protobuf.Message)" : { },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:readUnlock(java.lang.String)" : {
    "getLock" : 1,
    "unlock" : 1,
    "readLock" : 1
  },
  "org.apache.hadoop.fs.shell.find.BaseExpression:addArguments(java.util.Deque,int)" : {
    "pop" : 1,
    "addArgument" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderExtension:invalidateCache(java.lang.String)" : {
    "invalidateCache" : 1
  },
  "org.apache.hadoop.io.WeakReferencedElasticByteBufferPool:getBuffer(boolean,int)" : {
    "getKey" : 1,
    "getValue" : 2,
    "allocateDirect" : 2,
    "ceilingEntry" : 1,
    "allocate" : 2,
    "getBufferTree" : 1,
    "entrySet" : 1,
    "get" : 2,
    "remove" : 1,
    "removeIf" : 1
  },
  "org.apache.hadoop.util.OperationDuration:asDuration()" : {
    "ofMillis" : 1,
    "value" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.fs.Path[])" : {
    "advance" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:incr()" : {
    "incr" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:readBlock()" : {
    "readBuffer" : 4,
    "readVInt" : 3,
    "readFully" : 1,
    "getPos" : 2,
    "equals" : 1,
    "readInt" : 1,
    "seek" : 2
  },
  "org.apache.hadoop.security.KDiag:dumpKeytab(java.io.File)" : {
    "verifyFileIsValid" : 1,
    "getKey" : 1,
    "getKvno" : 1,
    "getCanonicalFile" : 1,
    "getPrincipals" : 1,
    "title" : 1,
    "loadKeytab" : 1,
    "getKeyType" : 1,
    "getKeytabEntries" : 1,
    "println" : 3,
    "getPrincipal" : 1,
    "size" : 2,
    "getTimestamp" : 1,
    "endln" : 1
  },
  "org.apache.hadoop.fs.ContentSummary$Builder:build()" : {
    "fileAndDirectoryCount" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.fs.shell.SnapshotCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 3
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "getConf" : 1,
    "applyUMask" : 1,
    "getUMask" : 1,
    "getFileDefault" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:setIsNestedMountPointSupported(org.apache.hadoop.conf.Configuration,boolean)" : {
    "setBoolean" : 1
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:drain(java.lang.String)" : {
    "writeLock" : 1,
    "clear" : 1,
    "deleteByName" : 1,
    "writeUnlock" : 1,
    "getIfPresent" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:wrap(org.apache.hadoop.fs.statistics.IOStatistics)" : { },
  "org.apache.hadoop.io.SetFile$Writer:append(org.apache.hadoop.io.WritableComparable)" : {
    "get" : 1,
    "append" : 1
  },
  "org.apache.hadoop.io.Text:readFields(java.io.DataInput)" : {
    "readVInt" : 1,
    "readWithKnownLength" : 1
  },
  "org.apache.hadoop.io.ElasticByteBufferPool:putBuffer(java.nio.ByteBuffer)" : {
    "getBufferTree" : 1,
    "containsKey" : 1,
    "nanoTime" : 1,
    "clear" : 1,
    "isDirect" : 1,
    "put" : 1,
    "capacity" : 1
  },
  "org.apache.hadoop.util.CrcUtil:intToBytes(int)" : {
    "writeInt" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:find(int)" : {
    "getBlockNumber" : 1,
    "stateEqualsOneOf" : 1,
    "keySet" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:convert(org.apache.hadoop.ha.proto.HAServiceProtocolProtos$HAStateChangeRequestInfoProto)" : {
    "getReqSource" : 2,
    "warn" : 1
  },
  "org.apache.hadoop.fs.RawPathHandle:hashCode()" : {
    "bytes" : 1,
    "hashCode" : 1
  },
  "org.apache.hadoop.io.ArrayWritable:<init>(java.lang.String[])" : { },
  "org.apache.hadoop.fs.http.HttpFileSystem:getUri()" : { },
  "org.apache.hadoop.ipc.Client:call(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable,org.apache.hadoop.ipc.Client$ConnectionId,int,java.util.concurrent.atomic.AtomicBoolean)" : {
    "call" : 1
  },
  "org.apache.hadoop.io.Text:set(byte[],int,int)" : {
    "arraycopy" : 1,
    "ensureCapacity" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:read(org.apache.hadoop.io.ByteBufferPool,int,java.util.EnumSet)" : {
    "getClass" : 2,
    "read" : 1,
    "resetStreamOffset" : 1,
    "getPos" : 2,
    "checkStream" : 1,
    "getCanonicalName" : 2,
    "position" : 1,
    "decrypt" : 1,
    "seek" : 1,
    "remaining" : 3
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$DataBlockRegister:register(long,long,long)" : {
    "addBlockRegion" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : {
    "openFileWithOptions" : 1
  },
  "org.apache.hadoop.conf.Configuration:getTimeDurationHelper(java.lang.String,java.lang.String,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)" : {
    "lastIndexOf" : 1,
    "unit" : 2,
    "trim" : 1,
    "parseLong" : 1,
    "toLowerCase" : 1,
    "convert" : 2,
    "logDeprecation" : 1,
    "suffix" : 2,
    "substring" : 1,
    "unitFor" : 2
  },
  "org.apache.hadoop.fs.FileContext:setVerifyChecksum(boolean,org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "setVerifyChecksum" : 1,
    "getFSofPath" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:initSingleton(java.lang.String,java.lang.String)" : {
    "init" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState:checkInputBuffers(java.nio.ByteBuffer[])" : {
    "getNumDataUnits" : 1,
    "isDirect" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:<init>(java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : {
    "getProtocolVersion" : 1,
    "getCurrentUser" : 1,
    "getProxy" : 1,
    "setProtocolEngine" : 1
  },
  "org.apache.hadoop.fs.DU:main(java.lang.String[])" : {
    "println" : 1,
    "build" : 1,
    "setPath" : 1,
    "toString" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "mkdirs" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:close()" : {
    "close" : 2
  },
  "org.apache.hadoop.io.SortedMapWritable:equals(java.lang.Object)" : {
    "size" : 2,
    "entrySet" : 2,
    "equals" : 1
  },
  "org.apache.hadoop.metrics2.sink.GraphiteSink:flush()" : {
    "warn" : 1,
    "flush" : 1,
    "close" : 1
  },
  "org.apache.hadoop.security.Credentials:readProto(java.io.DataInput)" : {
    "tokenFromProto" : 1,
    "addToken" : 1,
    "getSecretsList" : 1,
    "getAliasBytes" : 2,
    "parseDelimitedFrom" : 1,
    "getSecret" : 1,
    "getToken" : 1,
    "toByteArray" : 3,
    "getTokensList" : 1,
    "addSecretKey" : 1
  },
  "org.apache.hadoop.fs.FileContext:create(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.Options$CreateOpts[])" : {
    "getValue" : 1,
    "setOpt" : 1,
    "resolve" : 1,
    "getOpt" : 1,
    "fixRelativePart" : 1,
    "applyUMask" : 1,
    "create" : 1,
    "getUMask" : 1,
    "perms" : 1
  },
  "org.apache.hadoop.fs.FSInputStream:read(long,byte[],int,int)" : {
    "read" : 1,
    "debug" : 1,
    "getPos" : 1,
    "validatePositionedReadArgs" : 1,
    "seek" : 2
  },
  "org.apache.hadoop.fs.permission.FsPermission:getUMask(org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "get" : 1,
    "getUMask" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:checkIoStatisticsContextAvailable()" : {
    "checkAvailable" : 1
  },
  "org.apache.hadoop.util.Progress:addPhase(float)" : {
    "add" : 2,
    "warn" : 1,
    "size" : 1,
    "get" : 1,
    "setParent" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:recheckElectability()" : {
    "scheduleRecheck" : 1,
    "targetToData" : 1,
    "fatalError" : 1,
    "joinElection" : 1,
    "nanoTime" : 1,
    "toMillis" : 1,
    "quitElection" : 2,
    "info" : 3
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenIdentifier:<init>(org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text)" : { },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:readVectored(java.util.List,java.util.function.IntFunction)" : {
    "read" : 1,
    "debug" : 1,
    "apply" : 1,
    "setData" : 1,
    "getOffset" : 1,
    "getAsyncChannel" : 1,
    "completeExceptionally" : 1,
    "size" : 2,
    "get" : 1,
    "getLength" : 1,
    "validateRangeRequest" : 1,
    "getData" : 1,
    "sortRangeList" : 1
  },
  "org.apache.hadoop.fs.PathIsDirectoryException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.DelegationTokenRenewer:getInstance()" : { },
  "org.apache.hadoop.fs.shell.find.Find:registerExpressions(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : {
    "registerExpression" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler$RetryInfo:<init>(long,org.apache.hadoop.io.retry.RetryPolicy$RetryAction,long,java.lang.Exception)" : {
    "monotonicNow" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFileContext(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getCurrentUser" : 1,
    "getScheme" : 1,
    "getAbstractFileSystem" : 1,
    "getFileContext" : 2,
    "toString" : 1,
    "error" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:rollNewVersionInternal(java.lang.String,byte[])" : {
    "call" : 1,
    "parseJSONKeyVersion" : 1,
    "checkNotEmpty" : 1,
    "invalidateCache" : 1,
    "setRequestProperty" : 1,
    "createConnection" : 1,
    "createURL" : 1,
    "encodeBase64String" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.Groups:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.util.Timer)" : {
    "getClass" : 2,
    "ticker" : 2,
    "getName" : 1,
    "debug" : 1,
    "parseStaticMapping" : 1,
    "newSetFromMap" : 1,
    "asMap" : 1,
    "refreshAfterWrite" : 1,
    "newInstance" : 1,
    "newBuilder" : 2,
    "getLong" : 3,
    "getInt" : 1,
    "expireAfterWrite" : 2,
    "build" : 2,
    "getBoolean" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:finish()" : {
    "writeRun" : 1,
    "endCompression" : 1,
    "endBlock" : 1
  },
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:<init>(java.lang.reflect.Constructor,java.lang.Class)" : { },
  "org.apache.hadoop.fs.shell.Ls:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 2
  },
  "org.apache.hadoop.util.SysInfoLinux:getCpuUsagePercentage()" : {
    "getNumProcessors" : 1,
    "readProcStatFile" : 1,
    "getCpuTrackerUsagePercent" : 1
  },
  "org.apache.hadoop.security.Groups:getUserToGroupsMappingServiceWithLoadedConfiguration(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.util.OperationDuration:finished()" : {
    "time" : 1
  },
  "org.apache.hadoop.io.compress.CompressorStream:finish()" : {
    "compress" : 1,
    "finish" : 1,
    "finished" : 2
  },
  "org.apache.hadoop.io.MapFile$Merger:merge(org.apache.hadoop.fs.Path[],boolean,org.apache.hadoop.fs.Path)" : {
    "mergePass" : 1,
    "toString" : 1,
    "getFileSystem" : 1,
    "delete" : 1,
    "close" : 1,
    "open" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:doSetLevel()" : {
    "process" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getMinimumReference(java.lang.String)" : {
    "getInnerStatistics" : 1,
    "getMinimumReference" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:parseArguments(java.lang.String[])" : {
    "parseProtocolArgs" : 1,
    "equals" : 3,
    "parseGetLevelArgs" : 1,
    "parseSetLevelArgs" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:add(org.apache.hadoop.ipc.Schedulable)" : {
    "addInternal" : 1
  },
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolClientSideTranslatorPB:gracefulFailover()" : {
    "getDefaultInstance" : 1,
    "gracefulFailover" : 1,
    "ipc" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:toString(boolean,boolean,boolean)" : {
    "toString" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:mlock(java.lang.String,java.nio.ByteBuffer,long)" : {
    "mlock" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:isDirectory(org.apache.hadoop.fs.Path)" : {
    "getFileStatus" : 1,
    "getMyFs" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:getTokenTrackingId(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getTrackingId" : 1,
    "getTokenInfo" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:recvFileInputStreams(java.io.FileInputStream[],byte[],int,int)" : {
    "receiveFileDescriptors0" : 1,
    "reference" : 1,
    "warn" : 2,
    "toString" : 2,
    "closeFileDescriptor0" : 1,
    "unreference" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "fullPath" : 1,
    "createNonRecursive" : 1
  },
  "org.apache.hadoop.io.SecureIOUtils:openFSDataInputStream(java.io.File,java.lang.String,java.lang.String)" : {
    "getAbsolutePath" : 1,
    "isSecurityEnabled" : 1,
    "forceSecureOpenFSDataInputStream" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.FileUtil:fullyDeleteContents(java.io.File,boolean)" : {
    "deleteImpl" : 2,
    "isFile" : 1,
    "listFiles" : 1,
    "fullyDelete" : 1,
    "grantPermissions" : 1
  },
  "org.apache.hadoop.util.Lists:computeArrayListCapacity(int)" : {
    "saturatedCast" : 1,
    "checkNonnegative" : 1
  },
  "org.apache.hadoop.util.concurrent.HadoopThreadPoolExecutor:afterExecute(java.lang.Runnable,java.lang.Throwable)" : {
    "logThrowableFromAfterExecute" : 1,
    "afterExecute" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "toURL" : 1,
    "openConnection" : 1,
    "makeQualified" : 1,
    "toUri" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:checkTFileDataIndex()" : {
    "getComparator" : 1,
    "getMetaBlock" : 1,
    "getBlockCount" : 1,
    "close" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:setupSaslConnection(org.apache.hadoop.ipc.Client$IpcStreams)" : {
    "saslConnect" : 1,
    "getAddress" : 1,
    "getProtocol" : 1,
    "getTicket" : 1
  },
  "org.apache.hadoop.fs.FileSystem:open(org.apache.hadoop.fs.Path)" : {
    "getInt" : 1,
    "getConf" : 1,
    "open" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:add(org.apache.hadoop.metrics2.MetricsInfo,java.lang.Object)" : {
    "tuple" : 1,
    "name" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.alias.UserProvider:createCredentialEntry(java.lang.String,char[])" : {
    "getSecretKey" : 1,
    "addSecretKey" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.util.ExitUtil:halt(int,java.lang.String)" : {
    "halt" : 1
  },
  "org.apache.hadoop.net.DNSDomainNameResolver:getAllResolvedHostnameByDomainName(java.lang.String,boolean)" : {
    "getHostnameByIP" : 1,
    "getHostAddress" : 1,
    "getAllByDomainName" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:rollNewVersion(java.lang.String,byte[])" : {
    "doOp" : 1,
    "invalidateCache" : 1,
    "nextIdx" : 1,
    "rollNewVersion" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:checksumOpt(org.apache.hadoop.fs.Options$ChecksumOpt)" : {
    "checkNotNull" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : {
    "rejectUnknownMandatoryKeys" : 1,
    "eval" : 1,
    "getBufferSize" : 1,
    "getMandatoryKeys" : 1,
    "open" : 1
  },
  "org.apache.hadoop.util.ConfTest:main(java.lang.String[])" : {
    "add" : 1,
    "isFile" : 1,
    "getAbsolutePath" : 2,
    "isEmpty" : 2,
    "parse" : 1,
    "asList" : 2,
    "println" : 4,
    "toPath" : 1,
    "newInputStream" : 1,
    "hasOption" : 2,
    "addOption" : 2,
    "addAll" : 1,
    "build" : 2,
    "checkConf" : 1,
    "getOptionValues" : 1,
    "builder" : 2,
    "hasArg" : 2,
    "terminate" : 9,
    "listFiles" : 2,
    "isDirectory" : 2,
    "longOpt" : 1,
    "getRemainingArgs" : 1,
    "getenv" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getDelegationToken(java.lang.String)" : {
    "setService" : 1,
    "debug" : 1,
    "doOp" : 1,
    "nextIdx" : 1,
    "getDelegationToken" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyServers:refresh(org.apache.hadoop.conf.Configuration)" : {
    "add" : 1,
    "isUnresolved" : 1,
    "getTrimmedStrings" : 1,
    "getAddress" : 1,
    "getHostAddress" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$HadoopLoginContext:login()" : {
    "add" : 1,
    "monotonicNow" : 2,
    "set" : 1,
    "login" : 1,
    "getSubjectLock" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:setState(int,org.apache.hadoop.fs.impl.prefetch.BlockData$State)" : {
    "throwIfInvalidBlockNumber" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProtocolMetaInfoProxy(org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.io.compress.CompressionOutputStream:close()" : {
    "returnCompressor" : 1,
    "finish" : 1,
    "close" : 1
  },
  "org.apache.hadoop.net.NetUtils:connect(java.net.Socket,java.net.SocketAddress,int)" : {
    "connect" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:processTokenRemoved(org.apache.curator.framework.recipes.cache.ChildData)" : {
    "readFields" : 1,
    "createIdentifier" : 1,
    "remove" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.util.ProtoUtil:makeIpcConnectionContext(java.lang.String,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : {
    "setUserInfo" : 1,
    "build" : 1,
    "setRealUser" : 1,
    "setProtocol" : 1,
    "getUserName" : 3,
    "setEffectiveUser" : 2,
    "getRealUser" : 2,
    "newBuilder" : 2
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreBuilderImpl:withDurationTracking(java.lang.String[])" : {
    "withMaximums" : 1,
    "withMinimums" : 1,
    "withMeanStatistics" : 1,
    "withCounters" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFactory:getInstance(java.lang.String)" : {
    "getConf" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.io.compress.CompressorStream:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt:path()" : {
    "moved" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:getProxyHosts()" : {
    "getValue" : 1,
    "getKey" : 1,
    "getCollection" : 1,
    "entrySet" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getTrashRoots(boolean)" : {
    "getTrashRoots" : 1
  },
  "org.apache.hadoop.io.file.tfile.CompareUtils$MemcmpRawComparator:compare(byte[],int,int,byte[],int,int)" : {
    "compareBytes" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:fromSummary(java.lang.String)" : {
    "add" : 2,
    "format" : 2,
    "matcher" : 1,
    "matches" : 1,
    "setDebug" : 1,
    "substring" : 1,
    "parseInt" : 1,
    "warn" : 1,
    "fromShortName" : 2,
    "split" : 1,
    "size" : 1,
    "compile" : 1,
    "get" : 1,
    "charAt" : 1,
    "group" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getEntryCount()" : {
    "getRecordCount" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getMountPoints()" : {
    "size" : 2,
    "get" : 2,
    "getMountPoints" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:startThreads()" : {
    "processTokenRemoved" : 1,
    "forDeletes" : 2,
    "start" : 5,
    "creatingParentContainersIfNeeded" : 1,
    "usingNamespace" : 1,
    "error" : 3,
    "bridgeBuilder" : 2,
    "createPersistentNode" : 2,
    "processTokenAddOrUpdate" : 1,
    "forCreatesAndChanges" : 2,
    "build" : 4,
    "getNamespace" : 1,
    "processKeyAddOrUpdate" : 1,
    "incrSharedCount" : 1,
    "processKeyRemoved" : 1,
    "builder" : 2,
    "getPath" : 1,
    "loadFromZKCache" : 2,
    "create" : 1,
    "startThreads" : 1,
    "listenable" : 2,
    "getData" : 2,
    "addListener" : 2,
    "info" : 2,
    "forPath" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:performCoding(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "performCoding" : 1,
    "toBuffers" : 2
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue$UniqueKeyBlockingQueue:deleteByName(java.lang.String)" : {
    "cancel" : 1,
    "remove" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "create" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:write(java.io.DataOutput)" : {
    "writeImpl" : 1,
    "getLength" : 3
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:readChunk(long,byte[],int,int,byte[])" : {
    "read" : 1,
    "min" : 2,
    "needChecksum" : 1,
    "readFully" : 1,
    "getPos" : 2,
    "getChecksumFilePos" : 1,
    "seek" : 2
  },
  "org.apache.hadoop.fs.AbstractFileSystem:getEnclosingRoot(org.apache.hadoop.fs.Path)" : {
    "makeQualified" : 2
  },
  "org.apache.hadoop.ipc.Server:refreshServiceAclWithLoadedConfiguration(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.authorize.PolicyProvider)" : {
    "refreshWithLoadedConfiguration" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:get()" : {
    "add" : 1,
    "debug" : 1,
    "size" : 1,
    "newAttrInfo" : 1,
    "toArray" : 1,
    "name" : 1,
    "description" : 1,
    "metrics" : 1,
    "visit" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainInputStream:read()" : {
    "reference" : 1,
    "readArray0" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.fs.FileSystem:listStatus(org.apache.hadoop.fs.Path[])" : {
    "listStatus" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:generateDecodeMatrix(int[])" : {
    "gfInvertMatrix" : 1,
    "getNumAllUnits" : 1,
    "getNumDataUnits" : 14,
    "gfMul" : 1
  },
  "org.apache.hadoop.metrics2.util.MetricsCache:update(org.apache.hadoop.metrics2.MetricsRecord)" : {
    "update" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : {
    "tag" : 1
  },
  "org.apache.hadoop.io.retry.DefaultFailoverProxyProvider:getProxy()" : { },
  "org.apache.hadoop.metrics2.MetricsTag:equals(java.lang.Object)" : {
    "equal" : 2,
    "value" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileContext:getLocalFSFileContext()" : {
    "getFileContext" : 1
  },
  "org.apache.hadoop.fs.TrashPolicy:getInstance(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)" : {
    "getClass" : 1,
    "newInstance" : 1,
    "initialize" : 1
  },
  "org.apache.hadoop.fs.PositionedReadable:readVectored(java.util.List,java.util.function.IntFunction)" : {
    "readVectored" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addFilter(java.lang.String,java.lang.String,java.util.Map)" : {
    "add" : 1,
    "getKey" : 1,
    "getValue" : 1,
    "getFilterHolder" : 1,
    "entrySet" : 1,
    "getDisplayName" : 2,
    "defineFilter" : 2,
    "getFilterMapping" : 2,
    "info" : 2
  },
  "org.apache.hadoop.conf.Configuration:getPattern(java.lang.String,java.util.regex.Pattern)" : {
    "warn" : 1,
    "compile" : 1,
    "get" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.util.StringUtils:camelize(java.lang.String)" : {
    "split" : 1,
    "toLowerCase" : 1,
    "toString" : 1,
    "capitalize" : 1,
    "append" : 1
  },
  "org.apache.hadoop.conf.Configuration:getTrimmedStrings(java.lang.String)" : {
    "get" : 1,
    "getTrimmedStrings" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:addToLinkedListHead(org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache$Entry)" : {
    "addToHeadOfLinkedList" : 1,
    "unlock" : 1,
    "writeLock" : 2,
    "lock" : 1
  },
  "org.apache.hadoop.fs.FileContext:getLocalFSFileContext(org.apache.hadoop.conf.Configuration)" : {
    "getFileContext" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue:checkCalls()" : {
    "next" : 1,
    "getWaitTime" : 1,
    "iterator" : 1,
    "monotonicNow" : 1,
    "hasNext" : 1,
    "checkEmpty" : 1,
    "isDone" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.AvroFSInput:tell()" : {
    "getPos" : 1
  },
  "org.apache.hadoop.fs.FileContext:printStatistics()" : {
    "printStatistics" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:parseNumLevels(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "getInt" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNull(java.lang.Object,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.ObjectWritable:<init>(java.lang.Object)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:sortByDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int)" : {
    "getNetworkLocation" : 1,
    "contains" : 1,
    "getLeaf" : 1,
    "sortByDistance" : 1,
    "getNode" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "fullPath" : 1,
    "renameSnapshot" : 1
  },
  "org.apache.hadoop.ha.HAServiceTarget:getProxyForAddress(org.apache.hadoop.conf.Configuration,int,java.net.InetSocketAddress)" : {
    "getProxyForAddress" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:getMetrics(org.apache.hadoop.metrics2.impl.MetricsCollectorImpl,boolean)" : {
    "add" : 1,
    "setMetricFilter" : 1,
    "getRecords" : 1,
    "getMetrics" : 1,
    "error" : 1,
    "setRecordFilter" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:repairAndOpen(org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode[],org.apache.hadoop.fs.Path,int)" : {
    "add" : 1,
    "getConf" : 1,
    "getNflyTmpPath" : 1,
    "getModificationTime" : 4,
    "getAccessTime" : 1,
    "setPath" : 2,
    "sortByDistance" : 1,
    "compareTo" : 1,
    "delete" : 1,
    "cloneStatus" : 1,
    "rename" : 1,
    "makeQualified" : 1,
    "getLen" : 2,
    "toArray" : 1,
    "getFs" : 8,
    "setTimes" : 1,
    "copy" : 1,
    "open" : 1,
    "getUri" : 1,
    "info" : 2
  },
  "org.apache.hadoop.util.Progress:get()" : {
    "getParent" : 1,
    "getInternal" : 1
  },
  "org.apache.hadoop.ipc.Server$Listener$Reader:run()" : {
    "doRunLoop" : 1,
    "currentThread" : 2,
    "getName" : 2,
    "error" : 1,
    "close" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.token.Token:readFields(java.io.DataInput)" : {
    "readFields" : 2,
    "readVInt" : 2,
    "readFully" : 2
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:getMBeanInfo()" : {
    "updateJmxCache" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:loginUserFromSubject(javax.security.auth.Subject)" : {
    "setLoginUser" : 1,
    "createLoginUser" : 1
  },
  "org.apache.hadoop.fs.shell.SnapshotCommands$DeleteSnapshot:processArguments(java.util.LinkedList)" : {
    "println" : 1,
    "deleteSnapshot" : 1,
    "size" : 1,
    "getFirst" : 1,
    "processArguments" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(java.lang.Object[],java.lang.String)" : {
    "checkNotEmpty" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:setVerifyChecksum(boolean)" : {
    "setVerifyChecksum" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:<init>()" : { },
  "org.apache.hadoop.util.SysInfoLinux:getAvailablePhysicalMemorySize()" : {
    "readProcMemInfoFile" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : {
    "getDefaultReplication" : 1
  },
  "org.apache.hadoop.security.KDiag:isSimpleAuthentication(org.apache.hadoop.conf.Configuration)" : {
    "getAuthenticationMethod" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScannerByRecordNum(long,long)" : {
    "getLocationByRecordNum" : 2,
    "getEntryCount" : 2
  },
  "org.apache.hadoop.io.DataInputByteBuffer:<init>()" : { },
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,byte[])" : {
    "build" : 1,
    "requireNonNull" : 2,
    "write" : 1,
    "overwrite" : 1,
    "createFile" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:setChecksumBufSize(int)" : {
    "getChecksumSize" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:reset()" : {
    "init" : 1,
    "limit" : 1,
    "checkStream" : 1,
    "position" : 1
  },
  "org.apache.hadoop.fs.EmptyStorageStatistics:<init>(java.lang.String)" : { },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getMetadata(java.lang.String)" : {
    "parseJSONMetadata" : 1,
    "call" : 1,
    "checkNotEmpty" : 1,
    "createConnection" : 1,
    "createURL" : 1
  },
  "org.apache.hadoop.io.serializer.WritableSerialization$WritableDeserializer:deserialize(org.apache.hadoop.io.Writable)" : {
    "readFields" : 1,
    "getConf" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:mlock(java.nio.ByteBuffer,long)" : {
    "mlock_native" : 1,
    "assertCodeLoaded" : 1,
    "isDirect" : 1
  },
  "org.apache.hadoop.util.InstrumentedReadWriteLock:<init>(boolean,java.lang.String,org.slf4j.Logger,long,long)" : { },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRate(java.lang.String,java.lang.String,boolean,boolean)" : {
    "getClass" : 1,
    "get" : 1,
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:removeExpiredToken()" : {
    "add" : 1,
    "next" : 1,
    "logExpireTokens" : 1,
    "getKey" : 2,
    "getValue" : 1,
    "getCandidateTokensForCleanup" : 1,
    "iterator" : 1,
    "removeTokenForOwnerStats" : 1,
    "getRenewDate" : 1,
    "entrySet" : 1,
    "now" : 1,
    "hasNext" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "fullPath" : 1,
    "setXAttr" : 1
  },
  "org.apache.hadoop.fs.FileSystem:setQuotaByStorageType(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.StorageType,long)" : {
    "methodNotSupported" : 1
  },
  "org.apache.hadoop.service.ServiceOperations:stopQuietly(org.slf4j.Logger,org.apache.hadoop.service.Service)" : {
    "warn" : 1,
    "getName" : 1,
    "stop" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$TryOnceThenFail:shouldRetry(java.lang.Exception,int,int,boolean)" : { },
  "org.apache.hadoop.security.token.Token$PrivateToken:<init>(org.apache.hadoop.security.token.Token,org.apache.hadoop.io.Text)" : {
    "debug" : 1,
    "isDebugEnabled" : 1,
    "isPrivate" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:warmUpEncryptedKeys(java.lang.String[])" : {
    "getKMSUrl" : 1,
    "checkArgument" : 1,
    "error" : 1,
    "warmUpEncryptedKeys" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$SingleChunkEncoder:write(byte[])" : {
    "write" : 1
  },
  "org.apache.hadoop.fs.shell.FsCommand:<init>()" : { },
  "org.apache.hadoop.service.launcher.InterruptEscalator:toString()" : {
    "get" : 2,
    "toString" : 2,
    "append" : 9
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getBlockReader(int)" : {
    "getDataBlock" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "removeDefaultAcl" : 1
  },
  "org.apache.hadoop.security.authorize.ServiceAuthorizationManager:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.Class,org.apache.hadoop.conf.Configuration,java.net.InetAddress)" : {
    "getClientPrincipal" : 1,
    "warn" : 2,
    "isSecurityEnabled" : 1,
    "isUserAllowed" : 2,
    "equals" : 1,
    "get" : 2,
    "getServerPrincipal" : 1,
    "initCause" : 1,
    "getUserName" : 1,
    "includes" : 2,
    "getHostAddress" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FsShell:printUsage(java.io.PrintStream,java.lang.String)" : {
    "printInfo" : 1
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:<init>(int,float,long,int,org.apache.hadoop.crypto.key.kms.ValueQueue$QueueRefiller)" : { },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getFlags()" : {
    "getFlags" : 1
  },
  "org.apache.hadoop.fs.shell.Test:testAccess(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.permission.FsAction)" : {
    "access" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "disconnect" : 4,
    "getParent" : 1,
    "getName" : 1,
    "toUri" : 1,
    "isConnected" : 1,
    "completePendingCommand" : 1,
    "getReplyCode" : 2,
    "delete" : 1,
    "printWorkingDirectory" : 1,
    "allocate" : 1,
    "isPositivePreliminary" : 1,
    "storeFileStream" : 1,
    "closeStream" : 1,
    "mkdirs" : 1,
    "getPath" : 1,
    "getFileStatus" : 1,
    "changeWorkingDirectory" : 1,
    "close" : 1,
    "makeAbsolute" : 1,
    "getDirDefault" : 1,
    "isDirectory" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:writeJsonAsBytes(java.lang.Object,java.io.OutputStream)" : {
    "toBytes" : 1,
    "write" : 1,
    "close" : 1
  },
  "org.apache.hadoop.service.AbstractService:registerServiceListener(org.apache.hadoop.service.ServiceStateChangeListener)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getHomeDirectory()" : {
    "toString" : 1
  },
  "org.apache.hadoop.fs.FileSystemStorageStatistics:fetch(org.apache.hadoop.fs.FileSystem$Statistics$StatisticsData,java.lang.String)" : {
    "getBytesReadDistanceOfFiveOrLarger" : 1,
    "getWriteOps" : 1,
    "getBytesReadDistanceOfOneOrTwo" : 1,
    "getReadOps" : 1,
    "valueOf" : 2,
    "getBytesReadDistanceOfThreeOrFour" : 1,
    "checkArgument" : 1,
    "getRemoteReadTimeMS" : 1,
    "getBytesReadErasureCoded" : 1,
    "getLargeReadOps" : 2,
    "getBytesWritten" : 1,
    "getBytesReadLocalHost" : 1,
    "getBytesRead" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setMaximum(java.lang.String,long)" : {
    "maximums" : 1,
    "put" : 1
  },
  "org.apache.hadoop.ipc.RpcWritable$Buffer:newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "getValue" : 1,
    "newInstance" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.security.HttpCrossOriginFilterInitializer:initFilter(org.apache.hadoop.http.FilterContainer,org.apache.hadoop.conf.Configuration)" : {
    "getPrefix" : 1,
    "getName" : 1,
    "getFilterParameters" : 1,
    "getBoolean" : 1,
    "getEnabledConfigKey" : 1,
    "addGlobalFilter" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.permission.PermissionStatus:write(java.io.DataOutput)" : {
    "write" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:joinElection(byte[])" : {
    "debug" : 1,
    "arraycopy" : 1,
    "joinElectionInternal" : 1,
    "isDebugEnabled" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.http.AbstractHttpFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "makeQualified" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:incrementMaximum(java.lang.String,long)" : {
    "getInnerStatistics" : 1,
    "incrementMaximum" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:getFileDefault()" : { },
  "org.apache.hadoop.ipc.Server$ConnectionManager:closeAll()" : {
    "toArray" : 1,
    "close" : 1
  },
  "org.apache.hadoop.tools.GetGroupsBase:getUgmProtocol()" : {
    "getSocketFactory" : 1,
    "getCurrentUser" : 1,
    "getConf" : 3,
    "getProxy" : 1,
    "getProtocolAddress" : 1
  },
  "org.apache.hadoop.util.StringUtils:join(char,java.lang.Iterable)" : {
    "join" : 1
  },
  "org.apache.hadoop.fs.FileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyToLocalFile" : 1
  },
  "org.apache.hadoop.net.SocksSocketFactory:createSocket(java.net.InetAddress,int)" : {
    "createSocket" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:getDelegationToken(javax.servlet.http.HttpServletRequest)" : {
    "getParameter" : 1,
    "getHeader" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getWorkingDirectory()" : {
    "getHomeDirectory" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass$SeqFileComparator:compare(org.apache.hadoop.io.IntWritable,org.apache.hadoop.io.IntWritable)" : {
    "compare" : 1,
    "get" : 4
  },
  "org.apache.hadoop.service.launcher.ServiceLaunchException:<init>(int,java.lang.String,java.lang.Object[])" : {
    "initCause" : 1,
    "format" : 1
  },
  "org.apache.hadoop.conf.Configuration:handleDeprecation()" : {
    "debug" : 2,
    "addAll" : 1,
    "getProps" : 1,
    "get" : 1,
    "handleDeprecation" : 1,
    "keySet" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProvider:<init>(org.apache.hadoop.conf.Configuration)" : {
    "addProvider" : 1,
    "getProperty" : 1,
    "equals" : 1,
    "setProperty" : 1,
    "get" : 2
  },
  "org.apache.hadoop.io.retry.LossyRetryInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : {
    "set" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getAvailablePhysicalMemorySize()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "getXAttr" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:openConnection(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token)" : {
    "openConnection" : 2
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncodingStep:performCoding(java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : {
    "doEncode" : 1,
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1,
    "getSubPacketSize" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:getHostDetails(java.util.Set,java.util.Map)" : {
    "getExcludedMap" : 1,
    "addAll" : 1,
    "putAll" : 1,
    "get" : 1,
    "getIncludedHosts" : 1
  },
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:invokeChecked(java.lang.Object,java.lang.Object[])" : {
    "newInstanceChecked" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.io.BinaryComparable:compareTo(org.apache.hadoop.io.BinaryComparable)" : {
    "compareBytes" : 1,
    "getLength" : 2,
    "getBytes" : 2
  },
  "org.apache.hadoop.io.MD5Hash:digest(byte[],int,int)" : {
    "getDigester" : 1,
    "digest" : 1,
    "update" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "deleteSnapshot" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "getCurrentUser" : 1,
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.ipc.RPC:waitForProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : {
    "waitForProtocolProxy" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:invokeOnce()" : {
    "getFailoverCount" : 1,
    "currentThread" : 1,
    "trace" : 1,
    "handleException" : 1,
    "isInterrupted" : 1,
    "processWaitTimeAndRetryInfo" : 2,
    "isTraceEnabled" : 1,
    "invoke" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.FileSystem:get(java.net.URI,org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "doAs" : 1,
    "get" : 2,
    "getBestUGI" : 1
  },
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:incrCacheUpdated()" : {
    "incr" : 1
  },
  "org.apache.hadoop.ipc.Server:getClientBackoffEnable(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getBoolean" : 1
  },
  "org.apache.hadoop.conf.StorageUnit$4:getDefault(double)" : { },
  "org.apache.hadoop.util.bloom.BloomFilter:<init>()" : { },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:close()" : {
    "close" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.ipc.Server$RpcCall:run()" : {
    "setReturnStatus" : 1,
    "currentThread" : 1,
    "set" : 3,
    "debug" : 1,
    "getName" : 1,
    "sendResponse" : 1,
    "monotonicNowNanos" : 4,
    "isResponseDeferred" : 1,
    "call" : 1,
    "populateResponseParamsOnError" : 1,
    "isOpen" : 1,
    "getProcessingDetails" : 1,
    "get" : 3,
    "setResponseFields" : 1,
    "getTimestampNanos" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.permission.AclEntry:toStringStable()" : {
    "toStringStable" : 1,
    "toLowerCase" : 1,
    "toString" : 1,
    "append" : 6
  },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:<init>(java.io.File,int,long,org.apache.hadoop.fs.store.BlockUploadStatistics)" : {
    "blockAllocated" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(java.net.URL)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.net.SocksSocketFactory:createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" : {
    "bind" : 1,
    "createSocket" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$RealUser:getName()" : {
    "getUserName" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:save(java.io.File,java.lang.Object)" : {
    "toPath" : 1,
    "writeJsonAsBytes" : 1,
    "newOutputStream" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:setBlockSize(org.apache.hadoop.conf.Configuration,int)" : {
    "setInt" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics$Singleton:init(java.lang.String,java.lang.String)" : {
    "instance" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:commit()" : {
    "osException" : 1,
    "rename" : 1,
    "currentTimeMillis" : 1,
    "createIOException" : 1,
    "setTimes" : 1,
    "nextSetBit" : 4,
    "delete" : 1,
    "cardinality" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : {
    "comparator" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path[],boolean,int,org.apache.hadoop.fs.Path)" : {
    "add" : 1,
    "preserveInput" : 1,
    "merge" : 1,
    "getLen" : 1,
    "getFileStatus" : 1,
    "doSync" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:needsInput()" : {
    "setInputFromSavedData" : 1,
    "remaining" : 3
  },
  "org.apache.hadoop.fs.FSDataOutputStream$PositionCache:write(byte[],int,int)" : {
    "write" : 1,
    "incrementBytesWritten" : 1
  },
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:getFS()" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.ha.ZKFCRpcServer:gracefulFailover()" : {
    "checkRpcAdminAccess" : 1,
    "gracefulFailoverToYou" : 1
  },
  "org.apache.hadoop.security.token.DelegationTokenIssuer:addDelegationTokens(java.lang.String,org.apache.hadoop.security.Credentials)" : {
    "size" : 1,
    "toArray" : 1,
    "collectDelegationTokens" : 1
  },
  "org.apache.hadoop.io.erasurecode.ECBlock:<init>()" : { },
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawEncoder(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "createRawEncoderWithFallback" : 1,
    "checkNotNull" : 2
  },
  "org.apache.hadoop.fs.impl.FutureIOSupport:propagateOptions(org.apache.hadoop.fs.FSBuilder,org.apache.hadoop.conf.Configuration,java.lang.String,boolean)" : {
    "propagateOptions" : 1
  },
  "org.apache.hadoop.ipc.Server:setupResponse(org.apache.hadoop.ipc.Server$RpcCall,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcStatusProto,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcErrorCodeProto,org.apache.hadoop.io.Writable,java.lang.String,java.lang.String)" : {
    "getClass" : 1,
    "updateResponseState" : 1,
    "getName" : 1,
    "setServerIpcVersionNum" : 1,
    "stringifyException" : 1,
    "setErrorDetail" : 1,
    "newBuilder" : 1,
    "setStatus" : 1,
    "copyFrom" : 1,
    "setRetryCount" : 1,
    "setShouldClose" : 1,
    "warn" : 1,
    "setExceptionClassName" : 1,
    "setErrorMsg" : 1,
    "build" : 2,
    "setupResponse" : 3,
    "setCallId" : 1,
    "setClientId" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:skip(long)" : {
    "resetStreamOffset" : 1,
    "checkStream" : 1,
    "checkArgument" : 1,
    "skip" : 1,
    "position" : 2,
    "remaining" : 3
  },
  "org.apache.hadoop.conf.Configuration:unset(java.lang.String)" : {
    "isDeprecated" : 1,
    "getAlternativeNames" : 1,
    "getProps" : 1,
    "get" : 1,
    "getOverlay" : 1,
    "handleDeprecation" : 1,
    "remove" : 2
  },
  "org.apache.hadoop.fs.FilterFs:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "hasPathCapability" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:destroy()" : {
    "stopThreads" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "getProxy" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:close()" : {
    "close" : 1,
    "checkForErrors" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:readFileToMapWithFileInputStream(java.lang.String,java.lang.String,java.io.InputStream,java.util.Map)" : {
    "readFileToSetWithFileInputStream" : 1,
    "readXmlFileToMapWithFileInputStream" : 1,
    "toLowerCase" : 1,
    "endsWith" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:createPassword(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getKey" : 1,
    "getTrackingIdIfEnabled" : 1,
    "trackStoreToken" : 1,
    "incrementDelegationTokenSeqNum" : 1,
    "formatTokenId" : 2,
    "error" : 1,
    "storeToken" : 1,
    "getBytes" : 1,
    "createPassword" : 1,
    "setMasterKeyId" : 1,
    "setSequenceNumber" : 1,
    "getKeyId" : 2,
    "setMaxDate" : 1,
    "now" : 1,
    "setIssueDate" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:findChecksumRanges(java.util.List,int,int,int)" : {
    "add" : 1,
    "findChecksumOffset" : 2,
    "merge" : 1,
    "getOffset" : 2,
    "getLength" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:goUpGroupHierarchy(java.util.Set,int,java.util.Set)" : {
    "getDirContext" : 1,
    "search" : 1,
    "debug" : 1,
    "hasMoreElements" : 1,
    "getGroupNames" : 1,
    "isEmpty" : 1,
    "toString" : 2,
    "goUpGroupHierarchy" : 1,
    "append" : 9,
    "nextElement" : 1
  },
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:toString()" : {
    "getExecString" : 1,
    "toString" : 1,
    "indexOf" : 1,
    "append" : 5
  },
  "org.apache.hadoop.fs.PathNotFoundException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.security.Credentials:write(java.io.DataOutput)" : {
    "getValue" : 3,
    "getKey" : 2,
    "size" : 2,
    "entrySet" : 2,
    "writeVInt" : 3,
    "write" : 4
  },
  "org.apache.hadoop.http.HttpServer2:initSpnego(org.apache.hadoop.conf.Configuration,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)" : {
    "getValue" : 1,
    "getKey" : 1,
    "getName" : 1,
    "entrySet" : 1,
    "valueOf" : 2,
    "get" : 2,
    "getServerPrincipal" : 1,
    "isEmpty" : 2,
    "defineFilter" : 1,
    "put" : 4
  },
  "org.apache.hadoop.service.launcher.ServiceLaunchException:<init>(int,java.lang.Throwable,java.lang.String,java.lang.Object[])" : {
    "format" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:getContentSummary(org.apache.hadoop.fs.Path)" : {
    "next" : 1,
    "isFile" : 1,
    "directoryCount" : 3,
    "getDirectoryCount" : 1,
    "getContentSummary" : 1,
    "length" : 3,
    "listStatus" : 1,
    "hasNext" : 1,
    "spaceConsumed" : 3,
    "fileCount" : 3,
    "build" : 3,
    "getFileCount" : 1,
    "getLen" : 2,
    "getPath" : 1,
    "getFileStatus" : 1,
    "getLength" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:hasCapacity(long)" : {
    "dataSize" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "fullPath" : 1,
    "setAcl" : 1
  },
  "org.apache.hadoop.conf.Configuration:getTimeDuration(java.lang.String,long,java.util.concurrent.TimeUnit)" : {
    "getTimeDuration" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:getHostFromPrincipal(java.lang.String)" : {
    "getHostName" : 1
  },
  "org.apache.hadoop.net.StandardSocketFactory:createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" : {
    "bind" : 1,
    "createSocket" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : { },
  "org.apache.hadoop.fs.local.RawLocalFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getScheme" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:divide(int,int)" : {
    "getFieldSize" : 2
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_toJsonString(java.io.Serializable)" : {
    "applyToIOStatisticsSnapshot" : 1,
    "serializer" : 1
  },
  "org.apache.hadoop.conf.Configuration:appendJSONProperty(com.fasterxml.jackson.core.JsonGenerator,org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.conf.ConfigRedactor)" : {
    "contains" : 1,
    "writeStringField" : 3,
    "isNullOrEmpty" : 1,
    "get" : 2,
    "redact" : 1,
    "writeStartObject" : 1,
    "writeBooleanField" : 1,
    "writeEndObject" : 1
  },
  "org.apache.hadoop.io.retry.RetryProxy:create(java.lang.Class,org.apache.hadoop.io.retry.FailoverProxyProvider,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "getInterface" : 1,
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:toString()" : {
    "ioStatisticsToString" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:exit(org.apache.hadoop.util.ExitUtil$ExitException)" : {
    "terminate" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockManager:requestPrefetch(int)" : {
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.io.WritableComparator:<init>(java.lang.Class,org.apache.hadoop.conf.Configuration,boolean)" : {
    "newKey" : 2
  },
  "org.apache.hadoop.http.HttpServer2$XFrameOption:getEnum(java.lang.String)" : {
    "values" : 1,
    "equals" : 1,
    "isEmpty" : 1,
    "checkState" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenInformation:<init>()" : { },
  "org.apache.hadoop.conf.Configuration:loadProperty(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[])" : {
    "add" : 1,
    "contains" : 1,
    "setProperty" : 1,
    "checkForOverride" : 2,
    "putIntoUpdatingResource" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:collectThreadLocalStates()" : {
    "get" : 1,
    "aggregateLocalStatesToGlobalMetrics" : 1
  },
  "org.apache.hadoop.conf.Configuration:getPropertySources(java.lang.String)" : {
    "get" : 1,
    "getProps" : 1,
    "copyOf" : 1
  },
  "org.apache.hadoop.ipc.Server:setPriorityLevel(org.apache.hadoop.security.UserGroupInformation,int)" : {
    "setPriorityLevel" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeDir:addLink(java.lang.String,org.apache.hadoop.fs.viewfs.InodeTree$INodeLink)" : {
    "containsKey" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:getNumDataUnits()" : {
    "getNumDataUnits" : 1
  },
  "org.apache.hadoop.security.KDiag:validateNTPConf()" : {
    "verifyFileIsValid" : 1,
    "exists" : 1,
    "dump" : 1,
    "title" : 1,
    "endln" : 1
  },
  "org.apache.hadoop.util.Shell:destroyAllShellProcesses()" : {
    "getProcess" : 2,
    "clear" : 1,
    "destroy" : 1,
    "keySet" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProvider:rollNewVersion(java.lang.String)" : {
    "generateKey" : 1,
    "getCipher" : 1,
    "getMetadata" : 1,
    "getBitLength" : 1,
    "rollNewVersion" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider$KeyMetadata:writeObject(java.io.ObjectOutputStream)" : {
    "writeInt" : 1,
    "serialize" : 1,
    "write" : 1
  },
  "org.apache.hadoop.security.token.Token:toString()" : {
    "toString" : 3,
    "append" : 5,
    "identifierToString" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScanner(byte[],byte[])" : {
    "createScannerByKey" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState)" : {
    "resetOutputBuffers" : 1,
    "checkGetBytesArrayBuffer" : 1,
    "getNullIndexes" : 1,
    "resetBuffer" : 2,
    "doDecodeImpl" : 1,
    "getNumParityUnits" : 3
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:getNext(java.lang.String)" : {
    "get" : 1,
    "getAtMost" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:unbuffer()" : {
    "cleanBufferPool" : 1,
    "unbuffer" : 1,
    "cleanDecryptorPool" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:toString(boolean)" : {
    "toString" : 1
  },
  "org.apache.hadoop.io.DataInputByteBuffer:getLength()" : {
    "getLength" : 1
  },
  "org.apache.hadoop.fs.VectoredReadUtils:validateVectoredReadRanges(java.util.List)" : {
    "validateAndSortRanges" : 1,
    "empty" : 1
  },
  "org.apache.hadoop.io.OutputBuffer:reset()" : {
    "reset" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:doAsUser(org.apache.hadoop.security.UserGroupInformation,java.security.PrivilegedExceptionAction)" : {
    "doAs" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getDelegationTokens(java.lang.String)" : {
    "getDelegationTokens" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:<init>(int,int)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "readOnlyMountTable" : 1,
    "resolve" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.shell.Ls:adjustColumnWidths(org.apache.hadoop.fs.shell.PathData[])" : {
    "getErasureCodingPolicy" : 1,
    "getReplication" : 1,
    "getGroup" : 1,
    "getLen" : 1,
    "getContentSummary" : 1,
    "toString" : 1,
    "getOwner" : 1,
    "append" : 7,
    "maxLength" : 5
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:buffer()" : {
    "throwIfInvalidBuffer" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:rename(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "cd" : 2,
    "rename" : 1,
    "toUri" : 2,
    "getPath" : 2,
    "format" : 2,
    "exists" : 2,
    "pwd" : 2,
    "makeAbsolute" : 2
  },
  "org.apache.hadoop.fs.permission.PermissionParser:<init>(java.lang.String,java.util.regex.Pattern,java.util.regex.Pattern)" : {
    "applyNormalPattern" : 1,
    "find" : 1,
    "applyOctalPattern" : 1,
    "matcher" : 2,
    "matches" : 1
  },
  "org.apache.hadoop.ipc.RPC:waitForProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,long)" : {
    "getRpcTimeout" : 1,
    "waitForProtocolProxy" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:getServerPrincipal(java.lang.String,java.lang.String)" : {
    "replacePattern" : 1,
    "equals" : 1,
    "getComponents" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:invalidateCache(java.lang.String)" : {
    "invalidateCache" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:getCurrentTrashDir()" : {
    "getTrashRoot" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$BlockAppender:getCompressedSize()" : {
    "getCompressedSize" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$HaltableRemoteIterator:sourceHasNext()" : {
    "apply" : 1,
    "sourceHasNext" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addMeanStatisticFunction(java.lang.String,java.util.function.Function)" : {
    "addFunction" : 1
  },
  "org.apache.hadoop.util.LightWeightResizableGSet:expandIfNecessary()" : {
    "resize" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:createDecompressor()" : {
    "checkNativeCodeLoaded" : 1,
    "getDecompressionBufferSize" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_gauges(java.io.Serializable)" : {
    "invoke" : 1
  },
  "org.apache.hadoop.util.functional.TaskPool$Builder:runParallel(org.apache.hadoop.util.functional.TaskPool$Task)" : {
    "add" : 4,
    "next" : 1,
    "set" : 5,
    "debug" : 4,
    "submit" : 2,
    "getCurrentIOStatisticsContext" : 1,
    "setStatisticsContext" : 2,
    "isEmpty" : 1,
    "clear" : 1,
    "hasNext" : 1,
    "run" : 4,
    "throwOne" : 1,
    "error" : 2,
    "resetStatisticsContext" : 2,
    "warn" : 1,
    "size" : 2,
    "get" : 5,
    "toString" : 1,
    "waitFor" : 2,
    "info" : 3
  },
  "org.apache.hadoop.util.InstrumentedLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.Lock,long,long)" : { },
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:checkPartHandles(java.util.Map)" : {
    "stream" : 1,
    "forEach" : 1,
    "isEmpty" : 1,
    "checkArgument" : 2,
    "keySet" : 1
  },
  "org.apache.hadoop.security.Credentials:readFields(java.io.DataInput)" : {
    "readFields" : 3,
    "readVInt" : 3,
    "readFully" : 1,
    "clear" : 2,
    "put" : 2
  },
  "org.apache.hadoop.util.HeapSort:sort(org.apache.hadoop.util.IndexedSortable,int,int)" : {
    "sort" : 1
  },
  "org.apache.hadoop.net.TableMapping:setConf(org.apache.hadoop.conf.Configuration)" : {
    "setConf" : 2,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:checkScheme(java.net.URI,java.lang.String)" : {
    "getScheme" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "fullPath" : 1,
    "createSymlink" : 1
  },
  "org.apache.hadoop.fs.shell.Display$Checksum:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "getAlgorithmName" : 1,
    "getBlockSize" : 1,
    "getFileStatus" : 1,
    "format" : 1,
    "getLength" : 1,
    "toString" : 3,
    "getFileChecksum" : 1,
    "getBytes" : 1,
    "isDirectory" : 1,
    "printf" : 2,
    "byteToHexString" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:initBlock(int)" : {
    "set" : 1,
    "getBlockReader" : 1,
    "close" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:start()" : {
    "start" : 1
  },
  "org.apache.hadoop.ipc.Client$ConnectionId:getConnectionId(java.net.InetSocketAddress,java.lang.Class,org.apache.hadoop.security.UserGroupInformation,int,org.apache.hadoop.io.retry.RetryPolicy,org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 2,
    "retryUpToMaximumCountWithFixedSleep" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.DummyRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:compress(byte[],int,int)" : {
    "min" : 2,
    "rewind" : 1,
    "get" : 2,
    "clear" : 1,
    "limit" : 2,
    "checkStream" : 1,
    "deflateBytesDirect" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:sortAndIterate(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path,boolean)" : {
    "sortPass" : 1,
    "merge" : 2,
    "exists" : 1,
    "suffix" : 2
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:getDecompressionBufferSize(org.apache.hadoop.conf.Configuration)" : {
    "getBufferSize" : 1,
    "getRecommendedBufferSize" : 1
  },
  "org.apache.hadoop.ipc.ProtocolMetaInfoServerSideTranslatorPB:getProtocolVersions(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsRequestProto)" : {
    "addVersions" : 1,
    "build" : 2,
    "addProtocolVersions" : 1,
    "getProtocolVersionForRpcKind" : 1,
    "values" : 1,
    "toString" : 1,
    "getProtocol" : 1,
    "setRpcKind" : 1,
    "newBuilder" : 2
  },
  "org.apache.hadoop.fs.VectoredReadUtils:validateRangeRequest(org.apache.hadoop.fs.FileRange)" : {
    "getOffset" : 1,
    "requireNonNull" : 1,
    "getLength" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:getCompressionLevel(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.metrics2.lib.MethodMetric:metricInfo(java.lang.reflect.Method)" : {
    "getName" : 1,
    "nameFrom" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getRealUser()" : {
    "getRealUser" : 1,
    "getPrincipals" : 1
  },
  "org.apache.hadoop.util.StringUtils:startupShutdownMessage(java.lang.Class,java.lang.String[],org.slf4j.Logger)" : {
    "warn" : 1,
    "getHostname" : 1,
    "toStartupShutdownString" : 1,
    "get" : 1,
    "addShutdownHook" : 1,
    "getSimpleName" : 1,
    "createStartupShutdownMessage" : 1,
    "shutdown" : 1,
    "register" : 1,
    "info" : 2
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:doFilter(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getShortUserName" : 1,
    "set" : 1,
    "debug" : 1,
    "getName" : 1,
    "getUserPrincipal" : 2,
    "getRemoteAddr" : 1,
    "getMessage" : 2,
    "createRemoteUser" : 1,
    "getDoAs" : 1,
    "remove" : 1,
    "createProxyUser" : 1,
    "warn" : 1,
    "getAttribute" : 1,
    "doFilter" : 1,
    "createServletExceptionResponse" : 1,
    "getUserName" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1,
    "authorize" : 1
  },
  "org.apache.hadoop.util.BlockingThreadPoolExecutorService:newInstance(int,int,long,java.util.concurrent.TimeUnit,java.lang.String)" : {
    "allowCoreThreadTimeOut" : 1,
    "newDaemonThreadFactory" : 1,
    "toString" : 1,
    "error" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:reset()" : {
    "setLoginUser" : 1,
    "setRules" : 1,
    "empty" : 1
  },
  "org.apache.hadoop.io.retry.FailoverProxyProvider$ProxyInfo:toString()" : {
    "proxyName" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:writeChunk(byte[],int,int,boolean)" : {
    "writeVInt" : 2,
    "write" : 2
  },
  "org.apache.hadoop.ipc.RpcClientUtil:putVersionSignatureMap(java.net.InetSocketAddress,java.lang.String,java.lang.String,java.util.Map)" : {
    "put" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addMaximumSample(java.lang.String,long)" : {
    "maybeUpdateMaximum" : 1,
    "get" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndexEntry:<init>(java.io.DataInput)" : {
    "readVInt" : 1,
    "readFully" : 1,
    "readVLong" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:next(java.lang.Object)" : {
    "next" : 1,
    "readBlock" : 1,
    "getClass" : 2,
    "getPosition" : 2,
    "getName" : 1,
    "readVInt" : 1,
    "getKeyClass" : 1,
    "deserializeKey" : 2,
    "getLength" : 1,
    "reset" : 2,
    "mark" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : {
    "tuple" : 1,
    "name" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt$Location:<init>(boolean)" : { },
  "org.apache.hadoop.fs.FileUtil:makeShellPath(java.io.File)" : {
    "makeShellPath" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getWorkingDirectory()" : {
    "toString" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScanner(org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "createScannerByKey" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:getEntry(int)" : {
    "checkNotNegative" : 1,
    "addToLinkedListHead" : 1,
    "get" : 1,
    "format" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:startMBeans()" : {
    "warn" : 1,
    "debug" : 2,
    "register" : 1
  },
  "org.apache.hadoop.fs.BatchedRemoteIterator:makeRequestIfNeeded()" : {
    "size" : 1,
    "hasMore" : 1,
    "makeRequest" : 2
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:requireAllMethodsAvailable()" : {
    "available" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.MD5Hash:digest(byte[][],int,int)" : {
    "getDigester" : 1,
    "digest" : 1,
    "update" : 1
  },
  "org.apache.hadoop.ipc.Client:checkResponse(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto)" : {
    "getClientId" : 2,
    "equals" : 2,
    "toByteArray" : 2,
    "hasClientId" : 1,
    "byteToHexString" : 2
  },
  "org.apache.hadoop.security.KDiag:verify(boolean,java.lang.String,java.lang.String,java.lang.Object[])" : {
    "fail" : 1,
    "error" : 1
  },
  "org.apache.hadoop.io.Text$Comparator:compare(byte[],int,int,byte[],int,int)" : {
    "decodeVIntSize" : 2,
    "compareBytes" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:drainTo(java.util.Collection)" : {
    "drainTo" : 1
  },
  "org.apache.hadoop.net.NetUtils:getConnectAddress(java.net.InetSocketAddress)" : {
    "isUnresolved" : 1,
    "getPort" : 2,
    "createSocketAddrForHost" : 1,
    "isAnyLocalAddress" : 1,
    "getAddress" : 1,
    "getLocalHost" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addTimedOperation(java.lang.String,long)" : {
    "addMaximumSample" : 1,
    "addMinimumSample" : 1,
    "addMeanStatisticSample" : 1
  },
  "org.apache.hadoop.security.Groups:refresh()" : {
    "warn" : 1,
    "invalidateAll" : 1,
    "cacheGroupsRefresh" : 1,
    "clear" : 1,
    "isNegativeCacheEnabled" : 1,
    "info" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:collectThreadLocalStates()" : {
    "collectThreadLocalStates" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:checkCreateXorRawEncoder()" : {
    "getConf" : 1,
    "createRawEncoder" : 1,
    "getOptions" : 1
  },
  "org.apache.hadoop.io.BinaryComparable:hashCode()" : {
    "hashBytes" : 1,
    "getLength" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfigException:<init>(java.lang.Throwable)" : { },
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader$Builder:<init>()" : { },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:seekToNewSource(long)" : {
    "reportChecksumFailure" : 1,
    "getChecksumFilePos" : 1,
    "seekToNewSource" : 2
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:cancelDelegationToken(org.apache.hadoop.security.token.Token)" : {
    "doOp" : 1,
    "cancelDelegationToken" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:decode(byte[][],int[],byte[][])" : {
    "doDecode" : 1
  },
  "org.apache.hadoop.service.AbstractService:noteFailure(java.lang.Exception)" : {
    "getName" : 1,
    "debug" : 1,
    "getServiceState" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:close()" : {
    "cancelPrefetches" : 1,
    "getSummary" : 1,
    "end" : 1,
    "close" : 2,
    "cleanupWithLogger" : 1,
    "info" : 1
  },
  "org.apache.hadoop.http.HttpServer2:getFilterInitializers(org.apache.hadoop.conf.Configuration)" : {
    "contains" : 2,
    "size" : 2,
    "get" : 1,
    "newInstance" : 1,
    "remove" : 1,
    "asList" : 1,
    "getClasses" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.RSErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.FilterFileSystem:getDefaultReplication()" : {
    "getDefaultReplication" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : {
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.security.alias.KeyStoreProvider:initFileSystem(java.net.URI)" : {
    "getConf" : 1,
    "initFileSystem" : 1,
    "getPath" : 1,
    "getFileSystem" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:impl(java.lang.String,java.lang.String,java.lang.Class[])" : {
    "impl" : 1,
    "debug" : 1,
    "forName" : 1
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:writeUnlock(java.lang.String)" : {
    "getLock" : 1,
    "writeLock" : 1,
    "unlock" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:copyFromLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyFromLocalFile" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:importTokenFile(java.io.File,java.lang.String,org.apache.hadoop.io.Text,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "readTokenStorageFile" : 1,
    "addToken" : 1,
    "setService" : 1,
    "decodeFromUrlString" : 1,
    "doFormattedWrite" : 1,
    "exists" : 1,
    "getService" : 2,
    "info" : 1
  },
  "org.apache.hadoop.util.KMSUtil:parseJSONEncKeyVersions(java.lang.String,java.util.List)" : {
    "add" : 1,
    "checkNotNull" : 1,
    "size" : 1,
    "isEmpty" : 1,
    "parseJSONEncKeyVersion" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:getProtocolSignature(java.lang.String,long,int)" : {
    "getProtocolName" : 2,
    "getProtocolVersion" : 1,
    "equals" : 1,
    "getProtocolSignature" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:buildTokenService(java.net.URI)" : {
    "createSocketAddr" : 1,
    "buildTokenService" : 1,
    "getAuthority" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:multiply(int[],int[])" : {
    "add" : 1,
    "multiply" : 1
  },
  "org.apache.hadoop.fs.FileEncryptionInfo:<init>(org.apache.hadoop.crypto.CipherSuite,org.apache.hadoop.crypto.CryptoProtocolVersion,byte[],byte[],java.lang.String,java.lang.String)" : {
    "checkNotNull" : 6,
    "getAlgorithmBlockSize" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:getInstance(int,int)" : {
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.util.VersionUtil:compareVersions(java.lang.String,java.lang.String)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:reloginFromKeytab(boolean,boolean)" : {
    "getLogin" : 1,
    "relogin" : 1,
    "getTGT" : 1,
    "getRefreshTime" : 1,
    "now" : 1,
    "shouldRelogin" : 1,
    "isFromKeytab" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getLibraryName(org.apache.hadoop.conf.Configuration)" : {
    "isNativeBzip2Loaded" : 1,
    "getLibraryName" : 1
  },
  "org.apache.hadoop.util.Progress:getInternal()" : {
    "phase" : 1,
    "size" : 1,
    "getProgressWeightage" : 2,
    "getInternal" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.io.file.tfile.SimpleBufferedOutputStream:flush()" : {
    "flush" : 1,
    "flushBuffer" : 1
  },
  "org.apache.hadoop.ipc.Server$RpcCall:populateResponseParamsOnError(java.lang.Throwable,org.apache.hadoop.ipc.Server$RpcCall$ResponseParams)" : {
    "getClass" : 1,
    "logException" : 1,
    "getName" : 1,
    "length" : 1,
    "stringifyException" : 1,
    "getRpcErrorCodeProto" : 1,
    "getCause" : 1,
    "substring" : 1,
    "startsWith" : 1,
    "getRpcStatusProto" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "modifyAclEntries" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$2:createCompressionStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor,int)" : { },
  "org.apache.hadoop.security.Credentials:writeTokenStorageFile(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : {
    "writeTokenStorageFile" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:<init>()" : { },
  "org.apache.hadoop.util.DataChecksum:writeValue(byte[],int,boolean)" : {
    "getValue" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:tryLock()" : {
    "startLockTiming" : 1,
    "tryLock" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:shutdown()" : {
    "instance" : 1,
    "unregisterSource" : 1
  },
  "org.apache.hadoop.io.compress.CompressorStream:write(byte[],int,int)" : {
    "needsInput" : 1,
    "compress" : 1,
    "finished" : 1,
    "setInput" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getCanonicalUri()" : {
    "getCanonicalUri" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet$SetIterator:hasNext()" : {
    "ensureNext" : 1
  },
  "org.apache.hadoop.net.SocketInputWrapper:<init>(java.net.Socket,java.io.InputStream)" : {
    "getChannel" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:getProxyuserConfiguration(javax.servlet.FilterConfig)" : {
    "set" : 1,
    "getInitParameter" : 1,
    "hasMoreElements" : 1,
    "getInitParameterNames" : 1,
    "startsWith" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "removeAclEntries" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:append(byte[],byte[])" : {
    "append" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:handleExecutorTimeout(org.apache.hadoop.util.Shell$ShellCommandExecutor,java.lang.String)" : {
    "getExecString" : 1,
    "warn" : 1,
    "join" : 1,
    "isTimedOut" : 1,
    "on" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:addGroup(java.lang.String)" : {
    "add" : 2,
    "cacheGroupsAdd" : 1,
    "isAllAllowed" : 1,
    "isWildCardACLValue" : 1
  },
  "org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : {
    "getProtocolVersion" : 1,
    "isMethodSupported" : 1
  },
  "org.apache.hadoop.security.HttpCrossOriginFilterInitializer:getFilterParameters(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getValue" : 1,
    "getKey" : 1,
    "getValByRegex" : 1,
    "entrySet" : 1,
    "length" : 1,
    "put" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:zkDoWithRetries(org.apache.hadoop.ha.ActiveStandbyElector$ZKAction,org.apache.zookeeper.KeeperException$Code)" : {
    "code" : 2,
    "shouldRetry" : 2,
    "run" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:needsPassword()" : {
    "getConf" : 1,
    "get" : 1,
    "locatePassword" : 1
  },
  "org.apache.hadoop.fs.FSBuilder:must(java.lang.String,float)" : {
    "mustLong" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:<init>(java.lang.String)" : {
    "initSystemMBean" : 1,
    "newArrayList" : 2,
    "newLinkedHashMap" : 2,
    "newHashMap" : 5
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrAuthenticationFailures()" : {
    "incr" : 1
  },
  "org.apache.hadoop.util.ExitUtil:terminate(org.apache.hadoop.util.ExitUtil$ExitException)" : {
    "exit" : 1,
    "debug" : 1,
    "addSuppressed" : 4,
    "compareAndSet" : 1,
    "getMessage" : 1,
    "error" : 1,
    "getExitCode" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(int[],java.lang.String)" : {
    "checkNotEmpty" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawCoderFactory(java.lang.String,java.lang.String)" : {
    "getCoderByName" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.util.PriorityQueue:pop()" : {
    "downHeap" : 1
  },
  "org.apache.hadoop.fs.audit.CommonAuditContext:reset()" : {
    "init" : 1,
    "clear" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:fileToPath(java.io.File)" : {
    "toURI" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:verify(java.lang.String,javax.net.ssl.SSLSession)" : {
    "check" : 1,
    "getPeerCertificates" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:fixKerberosTicketOrder()" : {
    "getServer" : 3,
    "next" : 1,
    "warn" : 4,
    "getSubject" : 1,
    "iterator" : 1,
    "getName" : 1,
    "getPrivateCredentials" : 1,
    "isDestroyed" : 1,
    "destroy" : 1,
    "hasNext" : 1,
    "remove" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:getDirectoryContents()" : {
    "getStringForChildPath" : 1,
    "getPath" : 1,
    "listStatus" : 1,
    "sort" : 1,
    "checkIfExists" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Df:addToUsagesTable(java.net.URI,org.apache.hadoop.fs.FsStatus,java.lang.String)" : {
    "formatPercent" : 1,
    "formatSize" : 3,
    "getUsed" : 1,
    "getUsagesTable" : 1,
    "getRemaining" : 1,
    "addRow" : 1,
    "getCapacity" : 1
  },
  "org.apache.hadoop.fs.FSBuilder:must(java.lang.String,double)" : {
    "mustLong" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "keyClass" : 1,
    "valueClass" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.io.WritableUtils:writeEnum(java.io.DataOutput,java.lang.Enum)" : {
    "name" : 1,
    "writeString" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:<init>(int,int,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getDefaultQueueCapacityWeights" : 1
  },
  "org.apache.hadoop.ipc.Server:getConnections()" : {
    "toArray" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:getUsersString()" : {
    "getString" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : {
    "println" : 1,
    "hflush" : 1,
    "rollLogDirIfNeeded" : 1,
    "name" : 3,
    "context" : 1,
    "throwMetricsException" : 2,
    "metrics" : 1,
    "value" : 2,
    "checkForErrors" : 1,
    "tags" : 1,
    "timestamp" : 1,
    "printf" : 3
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:stop()" : {
    "removeInstance" : 1,
    "unregisterSource" : 1,
    "shutdown" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getXAttrs(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getXAttrs" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$RealUser:equals(java.lang.Object)" : {
    "getClass" : 2,
    "equals" : 1
  },
  "org.apache.hadoop.fs.FileContext:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "unsetStoragePolicy" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.security.Groups:getUserToGroupsMappingService()" : {
    "getUserToGroupsMappingService" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:cancelToken(org.apache.hadoop.security.token.Token,java.lang.String)" : {
    "getShortUserName" : 1,
    "verifyToken" : 1,
    "debug" : 1,
    "cancelToken" : 1
  },
  "org.apache.hadoop.fs.FileSystem:mkdirs(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "mkdirs" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "fullPath" : 2,
    "getTargetFileSystem" : 1,
    "readOnlyMountTable" : 3,
    "isLastInternalDirLink" : 1,
    "getRootFallbackLink" : 3,
    "resolve" : 4,
    "rename" : 2,
    "verifyRenameStrategy" : 1,
    "getUriPath" : 4,
    "isInternalDir" : 4,
    "getMyFs" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.util.dynamic.BindingUtils:implemented(org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod[])" : {
    "isNoop" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:compareTo(org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "size" : 1,
    "offset" : 1,
    "buffer" : 1,
    "getKeyLength" : 1,
    "compareKeys" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:upperBound(byte[])" : {
    "upperBound" : 1
  },
  "org.apache.hadoop.util.HttpExceptionUtils:throwEx(java.lang.Throwable)" : {
    "throwException" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:cancelDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.Token)" : {
    "cancelDelegationToken" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState:<init>(org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder,byte[][],byte[][])" : {
    "checkBuffers" : 2,
    "findFirstValidInput" : 1,
    "checkParameters" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState:checkOutputBuffers(java.nio.ByteBuffer[])" : {
    "isDirect" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:constructNewPath(org.apache.hadoop.fs.Path)" : {
    "toString" : 1
  },
  "org.apache.hadoop.util.CacheableIPList:<init>(org.apache.hadoop.util.FileBasedIPList,long)" : {
    "updateCacheExpiryTime" : 1
  },
  "org.apache.hadoop.ipc.Server:addTerseExceptions(java.lang.Class[])" : {
    "addTerseLoggingExceptions" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.FilterFileSystem:createFile(org.apache.hadoop.fs.Path)" : {
    "createFile" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(java.net.URL,boolean)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeInt:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "addGauge" : 1,
    "clearChanged" : 1,
    "value" : 1,
    "info" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:<init>(org.apache.hadoop.fs.LocatedFileStatus,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.security.ssl.SSLFactory:<init>(org.apache.hadoop.security.ssl.SSLFactory$Mode,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "debug" : 1,
    "readSSLConfiguration" : 1,
    "getTrimmedStrings" : 1,
    "newInstance" : 1,
    "getBoolean" : 1,
    "join" : 1,
    "isDebugEnabled" : 1,
    "asList" : 1,
    "getStrings" : 1
  },
  "org.apache.hadoop.security.KDiag:verify(java.io.File,org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "readTokenStorageFile" : 1,
    "fail" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:isFile(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path)" : {
    "getFileStatus" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getBytesWritten()" : {
    "visitAll" : 1
  },
  "org.apache.hadoop.ipc.ProtobufHelper:tokenFromProto(org.apache.hadoop.security.proto.SecurityProtos$TokenProto)" : {
    "tokenFromProto" : 1
  },
  "org.apache.hadoop.fs.ClosedIOException:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:verifyToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier,byte[])" : {
    "retrievePassword" : 1,
    "isEqual" : 1,
    "formatTokenId" : 1
  },
  "org.apache.hadoop.fs.FileContext:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : {
    "resolveIntermediate" : 1,
    "resolve" : 1,
    "rename" : 2,
    "fixRelativePart" : 2,
    "equals" : 1,
    "getFSofPath" : 2,
    "getUri" : 2
  },
  "org.apache.hadoop.ipc.FairCallQueue:offer(java.lang.Object)" : {
    "offer" : 1,
    "signalNotEmpty" : 1,
    "get" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkFallback(org.apache.hadoop.conf.Configuration,java.net.URI)" : {
    "getDefaultMountTableName" : 1,
    "addLinkFallback" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:close()" : {
    "close" : 2
  },
  "org.apache.hadoop.io.compress.lz4.Lz4Compressor:<init>()" : { },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:authenticate(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token)" : {
    "getClass" : 1,
    "getCurrentUser" : 1,
    "authenticate" : 1,
    "getPort" : 1,
    "debug" : 2,
    "hasDelegationToken" : 1,
    "checkTGTAndReloginFromKeytab" : 1,
    "wrapException" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.tools.TableListing$Column:getRow(int)" : {
    "rightPad" : 1,
    "leftPad" : 1,
    "split" : 1,
    "get" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.conf.Configuration:getTimeDuration(java.lang.String,java.lang.String,java.util.concurrent.TimeUnit)" : {
    "getTimeDuration" : 1
  },
  "org.apache.hadoop.util.FileBasedIPList:isIn(java.lang.String)" : {
    "includes" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextImpl:reset()" : {
    "debug" : 1,
    "clear" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStream$PositionCache:write(int)" : {
    "write" : 1,
    "incrementBytesWritten" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:readFully(long,byte[],int,int)" : {
    "getClass" : 1,
    "readFully" : 1,
    "checkStream" : 1,
    "getCanonicalName" : 1,
    "decrypt" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:removeExpiredStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "warn" : 1,
    "removeStoredToken" : 1,
    "getRenewDate" : 1,
    "getTokenInfoFromSQL" : 1,
    "now" : 1,
    "info" : 2
  },
  "org.apache.hadoop.util.Lists:addAll(java.util.Collection,java.lang.Iterable)" : {
    "cast" : 1,
    "iterator" : 1,
    "addAll" : 2
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:not()" : {
    "not" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:counter(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "add" : 1,
    "newAttrInfo" : 1
  },
  "org.apache.hadoop.io.AbstractMapWritable:write(java.io.DataOutput)" : {
    "getClass" : 1,
    "writeByte" : 2,
    "getName" : 1,
    "writeUTF" : 1
  },
  "org.apache.hadoop.fs.FilterFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "deleteSnapshot" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager$DelegationTokenSecretManager:createIdentifier()" : { },
  "org.apache.hadoop.fs.HardLink$HardLinkCGWin:linkCount(java.io.File)" : {
    "getCanonicalPath" : 1,
    "getWinUtilsFile" : 1,
    "arraycopy" : 1
  },
  "org.apache.hadoop.util.KMSUtil:toJSON(org.apache.hadoop.crypto.key.KeyProvider$KeyVersion)" : {
    "getMaterial" : 1,
    "getName" : 1,
    "getVersionName" : 1,
    "encodeBase64URLSafeString" : 1,
    "put" : 3
  },
  "org.apache.hadoop.security.ProviderUtils:excludeIncompatibleCredentialProviders(org.apache.hadoop.conf.Configuration,java.lang.Class)" : {
    "unnestUri" : 1,
    "set" : 1,
    "debug" : 1,
    "getScheme" : 1,
    "toUri" : 1,
    "length" : 2,
    "getFileSystemClass" : 1,
    "unset" : 1,
    "isAssignableFrom" : 1,
    "warn" : 1,
    "split" : 1,
    "equals" : 2,
    "get" : 1,
    "toString" : 1,
    "append" : 4
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:maximumFpRemove(int[])" : {
    "getWeight" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:write1(byte[],int,int)" : {
    "flushBuffer" : 1,
    "arraycopy" : 1,
    "writeChecksumChunks" : 1
  },
  "org.apache.hadoop.ha.SshFenceByTcpPort:checkArgs(java.lang.String)" : { },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:close()" : {
    "stopProxy" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:close()" : {
    "add" : 1
  },
  "org.apache.hadoop.util.LightWeightResizableGSet:size()" : {
    "size" : 1
  },
  "org.apache.hadoop.fs.UnionStorageStatistics$LongStatisticIterator:hasNext()" : {
    "getIter" : 1
  },
  "org.apache.hadoop.conf.Configuration:getTimeDuration(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)" : {
    "getTimeDurationHelper" : 1,
    "get" : 1,
    "convert" : 1
  },
  "org.apache.hadoop.fs.FilterFs:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "checkPath" : 1,
    "setTimes" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:copy(org.apache.hadoop.conf.Configuration,java.lang.Object,java.lang.Object)" : {
    "serialize" : 1,
    "getClass" : 1,
    "getDeserializer" : 1,
    "moveData" : 1,
    "getSerializer" : 1,
    "get" : 1,
    "reset" : 1,
    "getFactory" : 1,
    "open" : 2,
    "deserialize" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:setWrapped(org.apache.hadoop.fs.statistics.IOStatistics)" : {
    "checkState" : 1
  },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:position()" : {
    "checkOpenState" : 1,
    "position" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader$InputStreamOption:<init>(org.apache.hadoop.fs.FSDataInputStream)" : { },
  "org.apache.hadoop.fs.FilterFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "setStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addMeanStatisticSample(java.lang.String,long)" : {
    "addMeanStatisticSample" : 1,
    "getInnerStatistics" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$WrappingRemoteIterator:next()" : {
    "next" : 1,
    "makeQualified" : 1,
    "length" : 1,
    "getPath" : 1,
    "stripOutRoot" : 1,
    "getViewFsFileStatus" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:parkCursorAtEnd()" : {
    "set" : 1,
    "close" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getAvailableVirtualMemorySize()" : {
    "getAvailablePhysicalMemorySize" : 1
  },
  "org.apache.hadoop.security.token.Token:cancel(org.apache.hadoop.conf.Configuration)" : {
    "cancel" : 1,
    "getRenewer" : 1
  },
  "org.apache.hadoop.ha.FailoverController:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.ha.HAServiceProtocol$RequestSource)" : {
    "getRpcTimeoutToNewActive" : 1,
    "getInt" : 1,
    "getGracefulFenceTimeout" : 1,
    "setInt" : 2
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:ensureParentZNode()" : {
    "code" : 1,
    "isNodeExists" : 1,
    "debug" : 1,
    "split" : 1,
    "isEmpty" : 1,
    "checkState" : 1,
    "checkArgument" : 1,
    "createConnection" : 1,
    "toString" : 1,
    "setAclsWithRetries" : 1,
    "createWithRetries" : 1,
    "append" : 2,
    "info" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:asStatic()" : {
    "isStatic" : 1,
    "checkState" : 1
  },
  "org.apache.hadoop.fs.FileSystem:processDeleteOnExit()" : {
    "next" : 1,
    "iterator" : 1,
    "exists" : 1,
    "hasNext" : 1,
    "delete" : 1,
    "remove" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getName" : 1,
    "getChecksumFile" : 2,
    "rename" : 3,
    "exists" : 2,
    "delete" : 1,
    "isDirectory" : 2
  },
  "org.apache.hadoop.security.ssl.SSLFactory:getHostnameVerifier(org.apache.hadoop.conf.Configuration)" : {
    "trim" : 1,
    "getHostnameVerifier" : 1,
    "get" : 1,
    "toUpperCase" : 1
  },
  "org.apache.hadoop.io.serializer.SerializationFactory:getSerializer(java.lang.Class)" : {
    "getSerializer" : 1,
    "getSerialization" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:deleteCheckpoint(org.apache.hadoop.fs.Path,boolean)" : {
    "warn" : 3,
    "getName" : 2,
    "equals" : 1,
    "toUri" : 1,
    "now" : 1,
    "getPath" : 2,
    "listStatus" : 1,
    "getTimeFromCheckpoint" : 1,
    "delete" : 2,
    "info" : 2
  },
  "org.apache.hadoop.ipc.Client$Connection$PingInputStream:read()" : {
    "read" : 1,
    "handleTimeout" : 1
  },
  "org.apache.hadoop.ipc.Server:getPriorityLevel(org.apache.hadoop.security.UserGroupInformation)" : {
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkValid(boolean,java.lang.String,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.security.IngressPortBasedResolver:setConf(org.apache.hadoop.conf.Configuration)" : {
    "parseInt" : 1,
    "debug" : 1,
    "getSaslProperties" : 1,
    "getTrimmedStringCollection" : 1,
    "put" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:retryForeverWithFixedSleep(long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.conf.Configuration:getTimeDurationHelper(java.lang.String,java.lang.String,java.util.concurrent.TimeUnit)" : {
    "getTimeDurationHelper" : 1
  },
  "org.apache.hadoop.net.NodeBase:<init>(java.lang.String,java.lang.String)" : {
    "set" : 1,
    "normalize" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getDoAsUser()" : {
    "getShortUserName" : 1,
    "getCurrentUser" : 1,
    "getAuthenticationMethod" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:listStatus(org.apache.hadoop.fs.Path)" : {
    "listStatus" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(java.io.InputStream,java.lang.String,boolean)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.security.token.Token$PrivateToken:isPrivateCloneOf(org.apache.hadoop.io.Text)" : {
    "equals" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:refreshSuperUserGroupsConfiguration()" : {
    "refreshSuperUserGroupsConfiguration" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Df:processOptions(java.util.LinkedList)" : {
    "add" : 1,
    "getOpt" : 1,
    "isEmpty" : 1,
    "parse" : 1,
    "setHumanReadable" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:moveFromLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "rename" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:getCurrentValue(org.apache.hadoop.io.Writable)" : {
    "readFields" : 2,
    "getPosition" : 1,
    "read" : 1,
    "debug" : 1,
    "readVInt" : 1,
    "available" : 1,
    "getLength" : 1,
    "isDebugEnabled" : 1,
    "seekToCurrentValue" : 1,
    "setConf" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:setData(org.apache.hadoop.fs.impl.prefetch.BufferData,long,long)" : {
    "checkNotNegative" : 2,
    "checkNotNull" : 1,
    "getBuffer" : 2,
    "resetReadStats" : 1,
    "limit" : 1,
    "setAbsolute" : 1,
    "duplicate" : 1,
    "checkWithinRange" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:createFile(org.apache.hadoop.fs.Path)" : {
    "createFile" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getCredentialsInternal()" : {
    "next" : 1,
    "add" : 1,
    "iterator" : 1,
    "getPrivateCredentials" : 2,
    "isEmpty" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:aliasTokenFile(java.io.File,java.lang.String,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.conf.Configuration)" : {
    "readTokenStorageFile" : 1,
    "setService" : 1,
    "addToken" : 2,
    "getAllTokens" : 1,
    "copyToken" : 1,
    "equals" : 1,
    "doFormattedWrite" : 1,
    "getService" : 2
  },
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:addQueueTime(int,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:expandAsGlob(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getWorkingDirectory" : 1,
    "getScheme" : 1,
    "uriToString" : 1,
    "toUri" : 3,
    "isEmpty" : 1,
    "globStatus" : 1,
    "sort" : 1,
    "getFileSystem" : 1,
    "getAuthority" : 1,
    "replaceAll" : 1,
    "removeAuthority" : 1,
    "getPath" : 4,
    "isAbsolute" : 1,
    "relativize" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupNoRandPartC()" : {
    "setupNoRandPartA" : 1,
    "updateCRC" : 1
  },
  "org.apache.hadoop.conf.Configuration:addDefaultResource(java.lang.String)" : {
    "add" : 1,
    "reloadConfiguration" : 1,
    "contains" : 1,
    "keySet" : 1
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:write(java.io.DataOutput)" : {
    "writeLong" : 1,
    "buckets2words" : 1,
    "write" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:getFstat(java.io.FileDescriptor)" : {
    "warn" : 1,
    "getName" : 2,
    "getErrorCode" : 2,
    "format" : 1,
    "fstat" : 2,
    "getMessage" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeLink:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation,java.util.function.Function,java.lang.String)" : {
    "toString" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFsStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getFsStatus" : 2,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.fs.FileContext:getAllStoragePolicies()" : {
    "getAllStoragePolicies" : 1
  },
  "org.apache.hadoop.conf.Configuration:getAllPropertiesByTags(java.util.List)" : {
    "putAll" : 1,
    "getAllPropertiesByTag" : 1
  },
  "org.apache.hadoop.http.HttpServer2:setHeaders(org.apache.hadoop.conf.Configuration)" : {
    "getValByRegex" : 1,
    "putAll" : 2,
    "getDefaultHeaders" : 1,
    "toString" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.token.DtUtilShell$Import:execute()" : {
    "importTokenFile" : 1,
    "getConf" : 1
  },
  "org.apache.hadoop.ipc.CallerContext$Builder:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:process(java.lang.String)" : {
    "println" : 2,
    "matcher" : 1,
    "readLine" : 1,
    "close" : 1,
    "replaceAll" : 1,
    "getInputStream" : 1,
    "connect" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.VersionedWritable:readFields(java.io.DataInput)" : {
    "getVersion" : 2,
    "readByte" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getInitialWorkingDirectory()" : {
    "getWorkingDirectory" : 1
  },
  "org.apache.hadoop.security.SaslInputStream:close()" : {
    "disposeSasl" : 1,
    "close" : 1
  },
  "org.apache.hadoop.security.authorize.AuthorizationException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.ipc.RPC$VersionMismatch:<init>(java.lang.String,long,long)" : { },
  "org.apache.hadoop.security.KDiag:printSysprop(java.lang.String)" : {
    "println" : 1,
    "getProperty" : 1
  },
  "org.apache.hadoop.net.SocketOutputStream:write(int)" : {
    "write" : 1
  },
  "org.apache.hadoop.fs.BBUploadHandle:equals(java.lang.Object)" : {
    "bytes" : 2,
    "equals" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:checkCreateRSRawDecoder()" : {
    "getConf" : 1,
    "getOptions" : 1,
    "createRawDecoder" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:fixFileStatus(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Path)" : {
    "getScheme" : 1,
    "wrapLocalFileStatus" : 1,
    "toUri" : 1,
    "equals" : 1,
    "getPath" : 1,
    "setPath" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:toString()" : {
    "add" : 1,
    "visitAll" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedIO:fileSystem_getEnclosingRoot(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "getEnclosingRoot" : 1
  },
  "org.apache.hadoop.util.CrcUtil:getMonomial(long,int)" : {
    "galoisFieldMultiply" : 2
  },
  "org.apache.hadoop.fs.permission.ChmodParser:<init>(java.lang.String)" : { },
  "org.apache.hadoop.security.token.DtUtilShell:getCommandUsage()" : {
    "format" : 1,
    "getUsage" : 8
  },
  "org.apache.hadoop.fs.shell.SetReplication:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:freeBuffers()" : {
    "freeDB" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.io.RawComparator,java.lang.Class,java.lang.Class,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Metadata)" : {
    "getInt" : 4,
    "get" : 2
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:locateKeystore()" : {
    "constructNewPath" : 1,
    "getConf" : 1,
    "tryLoadIncompleteFlush" : 1,
    "get" : 1,
    "format" : 1,
    "exists" : 2,
    "getInstance" : 1,
    "locatePassword" : 1,
    "tryLoadFromPath" : 1,
    "constructOldPath" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:loadFullGroupMap()" : {
    "monotonicNow" : 1,
    "create" : 1,
    "updateMapInternal" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.conf.Configuration:getLongBytes(java.lang.String,long)" : {
    "string2long" : 1,
    "getTrimmed" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping:<init>(org.apache.hadoop.conf.Configuration)" : {
    "setConf" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:logIOStatisticsAtDebug(org.slf4j.Logger,java.lang.String,java.lang.Object)" : {
    "debug" : 1,
    "isEmpty" : 1,
    "isDebugEnabled" : 1,
    "ioStatisticsSourceToString" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:setOwner(org.apache.hadoop.io.Text)" : { },
  "org.apache.hadoop.metrics2.lib.MutableStat:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "copyTo" : 1,
    "monotonicNow" : 1,
    "min" : 2,
    "addGauge" : 7,
    "max" : 2,
    "mean" : 1,
    "numSamples" : 2,
    "clearChanged" : 1,
    "reset" : 1,
    "stddev" : 1,
    "addCounter" : 1,
    "changed" : 2
  },
  "org.apache.hadoop.security.LdapGroupsMapping:setConf(org.apache.hadoop.conf.Configuration)" : {
    "next" : 1,
    "getClass" : 1,
    "loadSslConf" : 1,
    "getName" : 1,
    "debug" : 3,
    "isEmpty" : 2,
    "cycle" : 1,
    "asList" : 2,
    "getStrings" : 1,
    "getInt" : 4,
    "contains" : 2,
    "setTimeLimit" : 1,
    "split" : 1,
    "addAll" : 2,
    "initializeBindUsers" : 1,
    "get" : 8,
    "getTrimmed" : 3,
    "toArray" : 1,
    "setReturningAttributes" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.FilterFs:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "unsetStoragePolicy" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:doAsLoginUserOrFatal(java.security.PrivilegedAction)" : {
    "exit" : 1,
    "doAs" : 1,
    "printStackTrace" : 1,
    "isSecurityEnabled" : 1,
    "run" : 1,
    "error" : 1,
    "getLoginUser" : 1,
    "getRuntime" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:throwIfInvalidOffset(long)" : {
    "checkWithinRange" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:selectDelegationToken(org.apache.hadoop.security.Credentials)" : {
    "selectDelegationToken" : 3,
    "getProviders" : 1
  },
  "org.apache.hadoop.conf.Configuration$DeprecationDelta:<init>(java.lang.String,java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.fs.shell.find.BaseExpression:prepare()" : {
    "getChildren" : 1,
    "prepare" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseIdentityProvider(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getInstances" : 2,
    "split" : 1,
    "size" : 2,
    "get" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.statistics.BufferedIOStatisticsInputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:getGroups(java.lang.String)" : {
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:prepareDataBlock()" : {
    "getDefaultCompressionAlgorithm" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:close()" : {
    "getAndSet" : 1,
    "close" : 1,
    "shutdown" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeDir:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : { },
  "org.apache.hadoop.fs.shell.Truncate:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:release(int)" : {
    "add" : 1,
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsMapping:getGroups(java.lang.String)" : {
    "getGroupsInternal" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:reset()" : {
    "checkOpenState" : 1,
    "debug" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:getDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,java.lang.String,java.lang.String)" : {
    "decodeFromUrlString" : 1,
    "getPort" : 1,
    "get" : 2,
    "doDelegationTokenOperation" : 1,
    "setTokenService" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:createGroupExecutor(java.lang.String)" : {
    "getGroupsForUserCommand" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:consume(org.apache.hadoop.metrics2.impl.MetricsBuffer)" : {
    "add" : 1,
    "debug" : 2,
    "notifyAnyWaiters" : 1,
    "records" : 1,
    "accepts" : 2,
    "flush" : 1,
    "putMetrics" : 1,
    "now" : 1,
    "equals" : 1,
    "context" : 2,
    "name" : 3,
    "isDebugEnabled" : 1,
    "timestamp" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:compareTo(byte[],int,int)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:updateMapIncr(java.lang.String,boolean)" : {
    "monotonicNow" : 1,
    "contains" : 1,
    "loadFullGroupMap" : 1,
    "isInteger" : 1,
    "getName2IdCmdNIX" : 2,
    "updateStaticMapping" : 1,
    "checkSupportedPlatform" : 1,
    "equals" : 1,
    "getName2IdCmdMac" : 2,
    "bashQuote" : 1,
    "updateMapInternal" : 4,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:<init>(java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)" : {
    "withAtomicLongCounter" : 1,
    "build" : 1,
    "withMeanStatisticFunction" : 1,
    "dynamicIOStatistics" : 1,
    "withAtomicLongGauge" : 1,
    "get" : 1,
    "withAtomicLongMinimum" : 1,
    "setWrapped" : 1,
    "withAtomicLongMaximum" : 1,
    "put" : 5
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:removeKey(org.apache.hadoop.util.bloom.Key,java.util.List[])" : {
    "clear" : 1,
    "remove" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:<init>(java.net.URI,java.lang.String,boolean,int)" : {
    "getStatistics" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:<init>(org.apache.hadoop.fs.impl.prefetch.PrefetchingStatistics,int,org.apache.hadoop.fs.statistics.DurationTrackerFactory)" : {
    "requireNonNull" : 1,
    "stubDurationTrackerFactory" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setMaximum(java.lang.String,long)" : {
    "setAtomicLong" : 1,
    "get" : 1
  },
  "org.apache.hadoop.security.KDiag:dump(java.io.File)" : {
    "println" : 1,
    "toPath" : 1,
    "newInputStream" : 1,
    "readLines" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:getNumAllUnits()" : {
    "getNumAllUnits" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "hasPathCapability" : 1
  },
  "org.apache.hadoop.io.file.tfile.Utils:writeVInt(java.io.DataOutput,int)" : {
    "writeVLong" : 1
  },
  "org.apache.hadoop.http.ProfileServlet:<init>()" : {
    "getAsyncProfilerHome" : 1,
    "getPid" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:supportsSymlinks()" : {
    "supportsSymlinks" : 1
  },
  "org.apache.hadoop.io.IOUtils:copyBytes(java.io.InputStream,java.io.OutputStream,int,boolean)" : {
    "closeStream" : 2,
    "close" : 2,
    "copyBytes" : 1
  },
  "org.apache.hadoop.fs.FsUrlConnection:<init>(org.apache.hadoop.conf.Configuration,java.net.URL)" : {
    "checkArgument" : 2
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:delete(java.lang.String)" : {
    "exists" : 1,
    "deletingChildrenIfNeeded" : 1,
    "delete" : 1,
    "forPath" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "open" : 1,
    "getRawFileSystem" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsMappingWithFallback:getGroupsSet(java.lang.String)" : {
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,int)" : {
    "optLong" : 1
  },
  "org.apache.hadoop.ipc.ResponseBuffer$FramedBuffer:<init>(int)" : {
    "reset" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:convertToExitException(java.lang.Throwable)" : {
    "getMessage" : 1,
    "toString" : 2,
    "getExitCode" : 1
  },
  "org.apache.hadoop.conf.Configuration:write(java.io.DataOutput)" : {
    "getValue" : 1,
    "getKey" : 2,
    "size" : 1,
    "entrySet" : 1,
    "writeVInt" : 1,
    "get" : 1,
    "getProps" : 1,
    "writeCompressedStringArray" : 1,
    "writeString" : 2
  },
  "org.apache.hadoop.util.DataChecksum:throwChecksumException(org.apache.hadoop.util.DataChecksum$Type,java.util.zip.Checksum,java.lang.String,long,int,int)" : {
    "getClass" : 1,
    "format" : 1,
    "getSimpleName" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:callQueueLength()" : {
    "getCallQueueLen" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getReplication()" : {
    "getReplication" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getHomeDirectory()" : {
    "getHomeDirectory" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:logAllUserInfo(org.apache.hadoop.security.UserGroupInformation)" : {
    "logAllUserInfo" : 1
  },
  "org.apache.hadoop.net.CachedDNSToSwitchMapping:<init>(org.apache.hadoop.net.DNSToSwitchMapping)" : { },
  "org.apache.hadoop.util.ApplicationClassLoader:getResource(java.lang.String)" : {
    "getResource" : 1,
    "findResource" : 2,
    "debug" : 2,
    "isSystemClass" : 1,
    "isDebugEnabled" : 2,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.FileStatus:<init>(org.apache.hadoop.fs.FileStatus)" : {
    "getPermission" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "getGroup" : 1,
    "getLen" : 1,
    "getPath" : 1,
    "getModificationTime" : 1,
    "getAccessTime" : 1,
    "getOwner" : 1,
    "getSymlink" : 1,
    "isSymlink" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:setCachedHosts(java.lang.String[])" : {
    "internStringsInArray" : 1
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touchz:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "getLen" : 1,
    "toString" : 2,
    "touchz" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.MultiSchemeDelegationTokenAuthenticationHandler:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : { },
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String)" : {
    "createSocketAddr" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor$ZStandardDirectDecompressor:reset()" : {
    "reset" : 1
  },
  "org.apache.hadoop.conf.Configuration:getStorageSize(java.lang.String,double,org.apache.hadoop.conf.StorageUnit)" : {
    "getValue" : 1,
    "checkNotNull" : 1,
    "get" : 1,
    "isNotBlank" : 1,
    "checkState" : 1,
    "getDefault" : 1,
    "isBlank" : 1,
    "parse" : 1,
    "getUnit" : 1,
    "convertStorageUnit" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:removeTokenFromFile(boolean,java.io.File,java.lang.String,org.apache.hadoop.io.Text,org.apache.hadoop.conf.Configuration)" : {
    "cancel" : 1,
    "readTokenStorageFile" : 1,
    "addToken" : 1,
    "getAllTokens" : 1,
    "doFormattedWrite" : 1,
    "matchAlias" : 1,
    "getKind" : 1,
    "getService" : 2,
    "info" : 1,
    "isManaged" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:bulkDelete_available()" : {
    "available" : 1
  },
  "org.apache.hadoop.util.Lists:newLinkedList(java.lang.Iterable)" : {
    "addAll" : 1,
    "newLinkedList" : 1
  },
  "org.apache.hadoop.ipc.Server$Listener:run()" : {
    "next" : 1,
    "isAcceptable" : 1,
    "currentThread" : 2,
    "select" : 1,
    "set" : 1,
    "getName" : 2,
    "doAccept" : 1,
    "closeCurrentConnection" : 2,
    "isValid" : 1,
    "selectedKeys" : 1,
    "hasNext" : 1,
    "closeAll" : 1,
    "stopIdleScan" : 1,
    "remove" : 1,
    "sleep" : 1,
    "warn" : 1,
    "iterator" : 1,
    "startIdleScan" : 1,
    "closeIdle" : 1,
    "getSelector" : 2,
    "close" : 2,
    "info" : 2
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:close()" : {
    "writeLong" : 1,
    "flush" : 1,
    "prepareMetaBlock" : 1,
    "getPos" : 1,
    "write" : 4,
    "close" : 1,
    "getDefaultCompressionAlgorithm" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFactory:getInstance(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "setName" : 1,
    "get" : 2,
    "setCommandFactory" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.http.HttpServer2:getFilterProperties(org.apache.hadoop.conf.Configuration,java.util.List)" : {
    "warn" : 1,
    "getValue" : 3,
    "getKey" : 2,
    "entrySet" : 1,
    "getFilterConfigMap" : 1,
    "equals" : 1,
    "setProperty" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getFirstKey()" : {
    "getFirstKey" : 1,
    "checkTFileDataIndex" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:reset()" : {
    "rewind" : 1,
    "limit" : 1,
    "checkStream" : 1,
    "reset" : 1,
    "position" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:<init>(java.net.URI,org.apache.hadoop.crypto.key.kms.KMSClientProvider[],long,org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 3,
    "getDtService" : 1,
    "debug" : 1,
    "setClientTokenProvider" : 1,
    "getCanonicalServiceName" : 1,
    "checkState" : 3,
    "failoverOnNetworkException" : 1,
    "shuffle" : 1,
    "getKeyProviderUri" : 1
  },
  "org.apache.hadoop.util.functional.CommonCallableSupplier:maybeAwaitCompletion(java.util.concurrent.CompletableFuture)" : {
    "waitForCompletion" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "renameSnapshot" : 1
  },
  "org.apache.hadoop.fs.QuotaUsage:isTypeConsumedAvailable()" : {
    "getTypesSupportingQuota" : 1,
    "ordinal" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "toURL" : 1,
    "openConnection" : 1,
    "makeQualified" : 1,
    "toUri" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:<init>()" : { },
  "org.apache.hadoop.util.IntrusiveCollection:clear()" : {
    "next" : 1,
    "iterator" : 1,
    "hasNext" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getCanonicalServiceName()" : {
    "toString" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:isLastChunk()" : {
    "checkEOF" : 1
  },
  "org.apache.hadoop.security.KDiag:validateKrb5File()" : {
    "println" : 4,
    "getProperty" : 1,
    "isEmpty" : 1,
    "dump" : 1,
    "title" : 1,
    "endln" : 1,
    "getenv" : 1
  },
  "org.apache.hadoop.io.DataOutputBuffer:writeInt(int,int)" : {
    "checkState" : 1,
    "getLength" : 1,
    "write" : 1,
    "setCount" : 2
  },
  "org.apache.hadoop.io.DataInputBuffer:getData()" : {
    "getData" : 1
  },
  "org.apache.hadoop.util.Timer:monotonicNow()" : {
    "monotonicNow" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:end(org.apache.hadoop.fs.impl.prefetch.BlockOperations$Operation)" : {
    "add" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GF256:gfInvertMatrix(byte[],byte[],int)" : {
    "gfInv" : 1,
    "gfMul" : 4
  },
  "org.apache.hadoop.fs.FileContext:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "removeAclEntries" : 1
  },
  "org.apache.hadoop.util.functional.TaskPool:foreach(java.lang.Iterable)" : {
    "requireNonNull" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:generateEncryptedKey(org.apache.hadoop.crypto.Encryptor,org.apache.hadoop.crypto.key.KeyProvider$KeyVersion,byte[],byte[])" : {
    "getMaterial" : 1,
    "init" : 1,
    "allocateDirect" : 2,
    "getName" : 2,
    "encrypt" : 1,
    "deriveIV" : 1,
    "get" : 1,
    "getVersionName" : 1,
    "flip" : 2,
    "put" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:invoke()" : {
    "invokeMethod" : 1
  },
  "org.apache.hadoop.fs.FileSystem:openFile(org.apache.hadoop.fs.Path)" : {
    "createDataInputStreamBuilder" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.conf.Configuration:getTrimmed(java.lang.String)" : {
    "trim" : 1,
    "get" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:refreshSuperUserGroupsConfiguration(org.apache.hadoop.conf.Configuration)" : {
    "refreshSuperUserGroupsConfiguration" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:read(byte[],int,int)" : {
    "afterDecryption" : 1,
    "min" : 2,
    "read" : 4,
    "get" : 2,
    "readFromUnderlyingStream" : 2,
    "checkStream" : 1,
    "decrypt" : 1,
    "remaining" : 2
  },
  "org.apache.hadoop.http.lib.StaticUserWebFilter:getUsernameFromConf(org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "split" : 1,
    "get" : 2
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:register(org.apache.hadoop.metrics2.MetricsSystem$Callback)" : {
    "add" : 1,
    "getProxyForCallback" : 1
  },
  "org.apache.hadoop.fs.Options$ChecksumOpt:createDisabled()" : { },
  "org.apache.hadoop.crypto.key.KeyShell$ListCommand:validate()" : {
    "getConf" : 1,
    "getKeyProvider" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.FileSystem:append(org.apache.hadoop.fs.Path)" : {
    "getInt" : 1,
    "getConf" : 1,
    "append" : 1
  },
  "org.apache.hadoop.ipc.ProcessingDetails:get(org.apache.hadoop.ipc.ProcessingDetails$Timing,java.util.concurrent.TimeUnit)" : {
    "get" : 1,
    "convert" : 1
  },
  "org.apache.hadoop.fs.Trash:<init>(org.apache.hadoop.conf.Configuration)" : {
    "get" : 1
  },
  "org.apache.hadoop.security.Credentials:writeTokenStorageToStream(java.io.DataOutputStream)" : {
    "writeTokenStorageToStream" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:setSymlink(org.apache.hadoop.fs.Path)" : {
    "setSymlink" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:isSymlink()" : {
    "isSymlink" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:parsePartialGroupNames(java.lang.String,java.lang.String)" : {
    "add" : 1,
    "hasMoreTokens" : 2,
    "isNumeric" : 1,
    "nextToken" : 2,
    "equals" : 1
  },
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:decompress(byte[],int,int)" : {
    "min" : 2,
    "rewind" : 1,
    "get" : 2,
    "limit" : 2,
    "decompressDirectBuf" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:updateMaps()" : {
    "updateStaticMapping" : 1,
    "checkSupportedPlatform" : 1,
    "loadFullMaps" : 1,
    "clearNameMaps" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat:max()" : {
    "max" : 1
  },
  "org.apache.hadoop.io.EnumSetWritable:<init>(java.util.EnumSet,java.lang.Class)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:stringToUri(java.lang.String)" : {
    "normalizeWindowsPath" : 1,
    "length" : 3,
    "indexOf" : 3,
    "substring" : 3,
    "startsWith" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping$LdapSslSocketFactory:createTrustManagers()" : {
    "init" : 1,
    "isEmpty" : 1,
    "getDefaultAlgorithm" : 1,
    "getTrustManagers" : 1,
    "getInstance" : 1,
    "createKeyStore" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.DummyErasureEncoder:prepareEncodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getOutputBlocks" : 1,
    "getOptions" : 1,
    "getInputBlocks" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "disconnect" : 1,
    "delete" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.ipc.UnexpectedServerException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.shell.Delete$Rmdir:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.service.AbstractService:<init>(java.lang.String)" : { },
  "org.apache.hadoop.util.GcTimeMonitor:getLatestGcData()" : {
    "clone" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableInverseQuantiles:setQuantiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.DecimalFormat)" : {
    "addQuantileInfo" : 1,
    "getInterval" : 1,
    "format" : 2,
    "info" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:incrementCounter(java.lang.String,long)" : {
    "trace" : 1,
    "debug" : 2,
    "get" : 2,
    "incAtomicLong" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setMinimum(java.lang.String,long)" : {
    "getInnerStatistics" : 1,
    "setMinimum" : 1
  },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:skip(long)" : {
    "verifyOpen" : 1,
    "position" : 2
  },
  "org.apache.hadoop.ipc.Client$Connection:touch()" : {
    "set" : 1,
    "now" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:getInitialWorkingDirectory()" : {
    "getProperty" : 1,
    "makeQualified" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : {
    "resolvePath" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "mayThrowFileNotFound" : 1,
    "size" : 1,
    "rename" : 1,
    "processThrowable" : 2,
    "createIOException" : 1
  },
  "org.apache.hadoop.fs.permission.PermissionStatus$2:<init>(java.lang.String,java.lang.String,org.apache.hadoop.fs.permission.FsPermission)" : { },
  "org.apache.hadoop.ipc.RPC:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : {
    "getProxy" : 1,
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.io.ObjectWritable:readFields(java.io.DataInput)" : {
    "readObject" : 1
  },
  "org.apache.hadoop.fs.DFCachingGetSpaceUsed:<init>(org.apache.hadoop.fs.GetSpaceUsed$Builder)" : {
    "getInterval" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.security.token.Token:decodeIdentifier()" : {
    "readFields" : 1,
    "getClassForIdentifier" : 1,
    "newInstance" : 1,
    "getKind" : 1,
    "close" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:tryDeleteOwnBreadCrumbNode()" : {
    "getVersion" : 1,
    "warn" : 1,
    "deleteWithRetries" : 1,
    "equals" : 1,
    "getData" : 1,
    "byteToHexString" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:totalPartsLen(java.util.List)" : {
    "getLen" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getLinkTarget" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.tools.TableListing$Builder:addField(java.lang.String,boolean)" : {
    "addField" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:toString()" : {
    "ioStatisticsAvailable" : 1,
    "ioStatisticsContextAvailable" : 1
  },
  "org.apache.hadoop.util.HttpExceptionUtils:validateResponse(java.net.HttpURLConnection,int)" : {
    "readValue" : 1,
    "mapReader" : 1,
    "format" : 3,
    "invoke" : 1,
    "getClassLoader" : 1,
    "getResponseMessage" : 2,
    "isAssignableFrom" : 1,
    "findConstructor" : 1,
    "getURL" : 3,
    "getErrorStream" : 1,
    "loadClass" : 1,
    "get" : 3,
    "getResponseCode" : 4,
    "checkState" : 1,
    "toString" : 1,
    "throwEx" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : {
    "getInt" : 1,
    "isNativeBzip2Loaded" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping$RawScriptBasedMapping:resolve(java.util.List)" : {
    "add" : 2,
    "hasMoreTokens" : 1,
    "size" : 5,
    "nextToken" : 1,
    "isEmpty" : 1,
    "toString" : 2,
    "error" : 1,
    "runResolveCommand" : 1
  },
  "org.apache.hadoop.fs.Globber$GlobBuilder:<init>(org.apache.hadoop.fs.FileSystem)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:create(java.lang.String)" : {
    "instance" : 1,
    "register" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.security.KDiag:dumpUGI(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : {
    "hasKerberosCredentials" : 1,
    "println" : 7,
    "getAllSecretKeys" : 1,
    "getGroupNames" : 1,
    "getAuthenticationMethod" : 1,
    "dumpTokens" : 1,
    "isEmpty" : 1,
    "getRealAuthenticationMethod" : 1,
    "getCredentials" : 1,
    "title" : 4
  },
  "org.apache.hadoop.ipc.RpcClientUtil:methodExists(int,long,java.util.Map)" : {
    "get" : 1,
    "getMethods" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:setConfiguration(org.apache.hadoop.conf.Configuration)" : {
    "initialize" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "getXAttrs" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.service.ServiceStateException:<init>(int,java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:merge()" : {
    "add" : 1,
    "debug" : 1,
    "nextRawKey" : 1,
    "updateProgress" : 1,
    "getLocalPathForWrite" : 1,
    "getApproxChkSumLength" : 1,
    "clear" : 1,
    "getPassFactor" : 1,
    "suffix" : 1,
    "put" : 2,
    "cloneFileAttributes" : 1,
    "getPosition" : 1,
    "size" : 6,
    "cleanup" : 1,
    "getSegmentDescriptors" : 1,
    "getLen" : 1,
    "makeQualified" : 2,
    "get" : 3,
    "getFileStatus" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1,
    "initialize" : 1,
    "close" : 2,
    "writeFile" : 1
  },
  "org.apache.hadoop.fs.shell.AclCommands$SetfaclCommand:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "getOpt" : 5,
    "modifyAclEntries" : 1,
    "removeDefaultAcl" : 1,
    "isEmpty" : 3,
    "removeAcl" : 1,
    "getAclEntries" : 3,
    "setAcl" : 1,
    "removeAclEntries" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:compareTo(org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode)" : {
    "compare" : 1,
    "getModificationTime" : 2
  },
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:setConf(org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "setEngineId" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:setupHttpRequestOnIpcPortResponse()" : {
    "sendResponse" : 1,
    "setResponse" : 1,
    "wrap" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:logIOStatisticsAtDebug(java.lang.String,java.lang.Object)" : {
    "logIOStatisticsAtDebug" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:concat(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path[])" : {
    "concat" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:create(org.apache.hadoop.ipc.Server,org.apache.hadoop.conf.Configuration)" : {
    "instance" : 1,
    "register" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:create(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.Options$CreateOpts[])" : {
    "getValue" : 8,
    "getClass" : 1,
    "isInstance" : 8,
    "checkPath" : 1,
    "getFileBufferSize" : 1,
    "getName" : 1,
    "createInternal" : 1,
    "getReplication" : 1,
    "getBlockSize" : 2,
    "getBytesPerChecksum" : 2,
    "processChecksumOpt" : 1,
    "getChecksumType" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.util.NativeLibraryChecker:main(java.lang.String[])" : {
    "buildSupportsZstd" : 2,
    "getCanonicalPath" : 1,
    "debug" : 1,
    "getPmdkLibPath" : 1,
    "getMessage" : 1,
    "isPmdkAvailable" : 1,
    "isNativeZlibLoaded" : 1,
    "getLoadingFailureReason" : 2,
    "getLibraryName" : 6,
    "printf" : 9,
    "getPmdkSupportStateMessage" : 1,
    "isNativeCodeLoaded" : 2,
    "println" : 3,
    "getWinUtilsFile" : 1,
    "equals" : 3,
    "isNativeBzip2Loaded" : 1,
    "terminate" : 2
  },
  "org.apache.hadoop.util.ApplicationClassLoader:loadClass(java.lang.String,boolean)" : {
    "debug" : 4,
    "resolveClass" : 1,
    "loadClass" : 1,
    "findLoadedClass" : 1,
    "toString" : 1,
    "isSystemClass" : 1,
    "findClass" : 1,
    "isDebugEnabled" : 4
  },
  "org.apache.hadoop.fs.PathIOException:getMessage()" : {
    "formatPath" : 3,
    "equals" : 1,
    "getMessage" : 2,
    "toString" : 1,
    "getCause" : 2,
    "append" : 7
  },
  "org.apache.hadoop.net.DNS:getHosts(java.lang.String,java.lang.String,boolean)" : {
    "add" : 3,
    "warn" : 1,
    "size" : 1,
    "getCanonicalHostName" : 1,
    "reverseDns" : 1,
    "toArray" : 1,
    "isEmpty" : 2,
    "isInetAddress" : 1,
    "getIPsAsInetAddressList" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:stop()" : {
    "warn" : 1,
    "interrupt" : 1,
    "join" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.crypto.key.UserProvider:flush()" : {
    "addCredentials" : 1
  },
  "org.apache.hadoop.fs.shell.MoveCommands$Rename:processPath(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : {
    "getScheme" : 2,
    "rename" : 1,
    "equals" : 1,
    "toString" : 3,
    "getHost" : 2,
    "getUri" : 4
  },
  "org.apache.hadoop.fs.FsUrlStreamHandler:<init>()" : { },
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:submit(java.util.concurrent.Callable)" : {
    "currentThread" : 1,
    "submit" : 1,
    "interrupt" : 1,
    "immediateFailedFuture" : 1,
    "acquire" : 1,
    "trackDuration" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:getFileLength()" : {
    "getLen" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.http.HttpServer2:constructSecretProvider(org.apache.hadoop.http.HttpServer2$Builder,javax.servlet.ServletContext)" : {
    "constructSecretProvider" : 1,
    "getFilterProperties" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:incrementMinimum(java.lang.String,long)" : {
    "get" : 1,
    "incAtomicLong" : 1
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:initializeDefaultFactory(org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory$SSLChannelMode)" : { },
  "org.apache.hadoop.io.retry.RetryPolicies:retryByRemoteException(org.apache.hadoop.io.retry.RetryPolicy,java.util.Map)" : { },
  "org.apache.hadoop.io.compress.BZip2Codec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : {
    "getInt" : 1,
    "isNativeBzip2Loaded" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode:<init>(java.lang.String,java.lang.String,org.apache.hadoop.fs.viewfs.ChRootedFileSystem)" : { },
  "org.apache.hadoop.io.compress.CompressorStream:<init>(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor,int)" : { },
  "org.apache.hadoop.service.launcher.IrqHandler:handle(sun.misc.Signal)" : {
    "getNumber" : 1,
    "getName" : 1,
    "incrementAndGet" : 1,
    "interrupted" : 1,
    "info" : 1
  },
  "org.apache.hadoop.net.SocksSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int)" : {
    "bind" : 1,
    "createSocket" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:renewTokenFile(java.io.File,java.lang.String,org.apache.hadoop.io.Text,org.apache.hadoop.conf.Configuration)" : {
    "formatDate" : 1,
    "readTokenStorageFile" : 1,
    "getAllTokens" : 1,
    "doFormattedWrite" : 1,
    "matchAlias" : 1,
    "getKind" : 1,
    "renew" : 1,
    "getService" : 1,
    "info" : 1,
    "isManaged" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:getBytesRead()" : {
    "checkStream" : 1,
    "getBytesRead" : 1
  },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec:close()" : {
    "getLogger" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:<init>()" : {
    "debug" : 1,
    "build" : 1,
    "withDurationTracking" : 1,
    "iostatisticsStore" : 1,
    "withCounters" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping$LdapSslSocketFactory:getDefault()" : {
    "getSocketFactory" : 1,
    "createTrustManagers" : 1,
    "init" : 1,
    "createKeyManagers" : 1,
    "getInstance" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileSystem:deleteOnExit(org.apache.hadoop.fs.Path)" : {
    "add" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.util.ChunkedArrayList:addChunk(int)" : {
    "add" : 1,
    "newArrayListWithCapacity" : 1
  },
  "org.apache.hadoop.util.ExitUtil:halt(int,java.lang.Throwable)" : {
    "halt" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "fullPath" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:hasCapacity(long)" : {
    "dataSize" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:getQueueSizes()" : {
    "getCallQueue" : 1,
    "getQueueSizes" : 1
  },
  "org.apache.hadoop.metrics2.filter.AbstractPatternFilter:accepts(org.apache.hadoop.metrics2.MetricsTag)" : {
    "get" : 2,
    "isEmpty" : 2,
    "name" : 2,
    "matcher" : 2,
    "value" : 2,
    "matches" : 2
  },
  "org.apache.hadoop.fs.FilterFs:getInitialWorkingDirectory()" : {
    "getInitialWorkingDirectory" : 1
  },
  "org.apache.hadoop.util.Lists:newArrayListWithCapacity(int)" : {
    "checkNonnegative" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:setRenewer(org.apache.hadoop.io.Text)" : {
    "getShortName" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$WBlockState:<init>(org.apache.hadoop.io.file.tfile.Compression$Algorithm,org.apache.hadoop.fs.FSDataOutputStream,org.apache.hadoop.io.BytesWritable,org.apache.hadoop.conf.Configuration)" : {
    "getCompressor" : 1,
    "returnCompressor" : 1,
    "getPos" : 1,
    "getFSOutputBufferSize" : 1,
    "setCapacity" : 1,
    "createCompressionStream" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$ConcurrentQueue:offer(java.lang.Object)" : {
    "offer" : 1,
    "checkState" : 1
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.util.Progressable)" : {
    "getInt" : 1,
    "getConf" : 1,
    "getDefaultReplication" : 1,
    "create" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:createPathHandle(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Options$HandleOpt[])" : {
    "getPathHandle" : 1
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:add(org.apache.hadoop.util.bloom.Key)" : {
    "clear" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:submit(java.lang.Runnable,java.lang.Object)" : {
    "currentThread" : 1,
    "submit" : 1,
    "interrupt" : 1,
    "immediateFailedFuture" : 1,
    "acquire" : 1,
    "trackDuration" : 1
  },
  "org.apache.hadoop.fs.FileSystem:createNonRecursive(org.apache.hadoop.fs.Path,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "createNonRecursive" : 1,
    "getFileDefault" : 1
  },
  "org.apache.hadoop.tools.TableListing$Column:<init>(java.lang.String,org.apache.hadoop.tools.TableListing$Justification,boolean)" : {
    "addRow" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState:<init>(org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder,byte[][],int[],byte[][])" : {
    "findFirstValidInput" : 1,
    "checkInputBuffers" : 1,
    "checkParameters" : 1,
    "checkOutputBuffers" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor$ZlibDirectDecompressor:<init>(org.apache.hadoop.io.compress.zlib.ZlibDecompressor$CompressionHeader,int)" : { },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getOwner()" : {
    "getOwner" : 1
  },
  "org.apache.hadoop.fs.shell.Ls$Lsr:processOptions(java.util.LinkedList)" : {
    "processOptions" : 1,
    "addFirst" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:startThreads()" : {
    "start" : 1,
    "checkState" : 1,
    "updateCurrentKey" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcQueueTime(long)" : {
    "add" : 2
  },
  "org.apache.hadoop.ipc.Server:getAuthMethods(org.apache.hadoop.security.token.SecretManager,org.apache.hadoop.conf.Configuration)" : {
    "add" : 2,
    "debug" : 2,
    "getAuthenticationMethod" : 1,
    "getAuthMethod" : 2
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenInformation:readFields(java.io.DataInput)" : {
    "readVInt" : 1,
    "readFully" : 1,
    "readString" : 1,
    "readVLong" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor$ZlibDirectDecompressor:finished()" : {
    "finished" : 1
  },
  "org.apache.hadoop.fs.DFCachingGetSpaceUsed:refresh()" : {
    "set" : 1,
    "getUsed" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addGauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "add" : 1,
    "accepts" : 1,
    "name" : 1
  },
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[])" : { },
  "org.apache.hadoop.fs.http.HttpFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : { },
  "org.apache.hadoop.security.ShellBasedIdMapping:parseStaticMap(java.io.File)" : {
    "warn" : 1,
    "parseId" : 2,
    "toPath" : 1,
    "newInputStream" : 1,
    "equals" : 1,
    "readLine" : 1,
    "matcher" : 3,
    "matches" : 3,
    "close" : 1,
    "put" : 2,
    "group" : 3
  },
  "org.apache.hadoop.fs.QuotaUsage:getQuotaUsage(boolean)" : {
    "formatSize" : 4,
    "format" : 1
  },
  "org.apache.hadoop.metrics2.impl.SinkQueue:waitForData()" : {
    "wait" : 1,
    "setConsumerLock" : 1,
    "front" : 1,
    "checkConsumer" : 1
  },
  "org.apache.hadoop.metrics2.sink.StatsDSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : {
    "parseInt" : 1,
    "getHostname" : 1,
    "getBoolean" : 1,
    "getString" : 4
  },
  "org.apache.hadoop.fs.Options$CreateOpts:bytesPerChecksum(short)" : { },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:encode(byte[][],byte[][])" : {
    "doEncode" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:exists(org.apache.hadoop.fs.Path)" : {
    "getFileStatus" : 1
  },
  "org.apache.hadoop.io.BytesWritable:set(byte[],int,int)" : {
    "setSize" : 2,
    "arraycopy" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "readOnlyMountTable" : 1,
    "getPathWithoutSchemeAndAuthority" : 1,
    "getTargetFileSystem" : 1,
    "getChildren" : 2,
    "getRootFallbackLink" : 2,
    "getName" : 3,
    "checkNotNull" : 1,
    "containsKey" : 1,
    "get" : 1,
    "equals" : 1,
    "create" : 1,
    "error" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:<init>()" : {
    "newInnerNode" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy,int)" : {
    "failoverOnNetworkException" : 1
  },
  "org.apache.hadoop.security.alias.CredentialProviderFactory:getProviders(org.apache.hadoop.conf.Configuration)" : {
    "add" : 1,
    "set" : 1,
    "getStringCollection" : 1,
    "getAndSet" : 1,
    "createProvider" : 1
  },
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:getCacheCleared()" : {
    "value" : 1
  },
  "org.apache.hadoop.crypto.random.OsSecureRandom:fillReservoir(int)" : {
    "newInputStream" : 1,
    "readFully" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:processOptions(java.util.LinkedList)" : {
    "getOpt" : 3,
    "popOptionWithArgument" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.ipc.Client:setCallIdAndRetryCount(int,int,java.lang.Object)" : {
    "get" : 1,
    "checkState" : 1,
    "checkArgument" : 2,
    "setCallIdAndRetryCountUnprotected" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.ErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : {
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1,
    "getSchema" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:toExtendedShort()" : {
    "toShort" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setMeanStatistic(java.lang.String,org.apache.hadoop.fs.statistics.MeanStatistic)" : {
    "set" : 1,
    "get" : 1
  },
  "org.apache.hadoop.conf.Configuration:setSocketAddr(java.lang.String,java.net.InetSocketAddress)" : {
    "getHostPortString" : 1,
    "set" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : {
    "add" : 1
  },
  "org.apache.hadoop.ipc.ProtobufHelper:getFixedByteString(java.lang.String)" : {
    "getFixedByteString" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:<init>(org.apache.hadoop.conf.Configuration)" : {
    "setConf" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "add" : 1,
    "metrics" : 1,
    "snapshot" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,int)" : {
    "mustLong" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withLongFunctionGauge(java.lang.String,java.util.function.ToLongFunction)" : {
    "activeInstance" : 1,
    "addGaugeFunction" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:absolute()" : {
    "throwIfInvalidBuffer" : 1,
    "relative" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState)" : {
    "resetOutputBuffers" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsInfoImpl:<init>(java.lang.String,java.lang.String)" : {
    "checkNotNull" : 2
  },
  "org.apache.hadoop.net.NetworkTopology:sortByDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int)" : {
    "sortByDistance" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:putPart(org.apache.hadoop.fs.UploadHandle,int,org.apache.hadoop.fs.Path,java.io.InputStream,long)" : {
    "eval" : 1,
    "innerPutPart" : 1,
    "checkPutArguments" : 1
  },
  "org.apache.hadoop.fs.FSInputChecker:seek(long)" : {
    "getChunkPosition" : 1,
    "readFully" : 1,
    "resetState" : 1
  },
  "org.apache.hadoop.ipc.Server$ConnectionManager:close(org.apache.hadoop.ipc.Server$Connection)" : {
    "getShortUserName" : 1,
    "currentThread" : 1,
    "getName" : 1,
    "debug" : 1,
    "size" : 1,
    "decrUserConnections" : 1,
    "isDebugEnabled" : 1,
    "close" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Df:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "getValue" : 1,
    "getKey" : 1,
    "getTargetFileSystemURIs" : 1,
    "entrySet" : 1,
    "addToUsagesTable" : 2,
    "getUsagesTable" : 1,
    "getMountedOnPath" : 1,
    "toString" : 1,
    "setColumnHide" : 1,
    "getStatus" : 2,
    "getUri" : 1,
    "isViewFileSystemOverloadScheme" : 1,
    "isViewFileSystem" : 1
  },
  "org.apache.hadoop.io.IntWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:addFalsePositive(org.apache.hadoop.util.bloom.Key[])" : {
    "addFalsePositive" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:endCompression()" : {
    "bsFinishedWithStream" : 1,
    "bsPutInt" : 1,
    "bsPutUByte" : 6
  },
  "org.apache.hadoop.conf.ReconfigurationServlet:applyChanges(java.io.PrintWriter,org.apache.hadoop.conf.Reconfigurable,javax.servlet.http.HttpServletRequest)" : {
    "println" : 4,
    "getConf" : 1,
    "reconfigureProperty" : 2,
    "hasMoreElements" : 1,
    "equals" : 8,
    "unescapeHtml4" : 2,
    "isEmpty" : 3,
    "escapeHtml4" : 10,
    "getRaw" : 8,
    "getParams" : 1,
    "info" : 1,
    "getParameter" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher:<init>(int,java.lang.String)" : {
    "setName" : 1,
    "setDaemon" : 1,
    "socketpair" : 1,
    "setUncaughtExceptionHandler" : 1,
    "start" : 1,
    "checkArgument" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:readFully(long,byte[],int,int)" : {
    "readFully" : 1,
    "validatePositionedReadArgs" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:loadSslConf(org.apache.hadoop.conf.Configuration)" : {
    "getPasswordFromCredentialProviders" : 1,
    "getPassword" : 1,
    "get" : 4,
    "isEmpty" : 2,
    "extractPassword" : 2
  },
  "org.apache.hadoop.crypto.key.KeyProviderExtension:getKeysMetadata(java.lang.String[])" : {
    "getKeysMetadata" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet$Values:iterator()" : {
    "iterator" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1,
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:<init>(int,int,int)" : {
    "createVector" : 1
  },
  "org.apache.hadoop.conf.ConfigRedactor:redact(java.lang.String,java.lang.String)" : {
    "configIsSensitive" : 1
  },
  "org.apache.hadoop.fs.statistics.DurationTrackerFactory:trackDuration(java.lang.String,long)" : {
    "stubDurationTracker" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "fullPath" : 1,
    "setXAttr" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:renewDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.Token,java.lang.String)" : {
    "get" : 1,
    "doDelegationTokenOperation" : 1
  },
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolServerSideTranslatorPB:getProtocolVersion(java.lang.String,long)" : {
    "getProtocolVersion" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(java.lang.String,boolean)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:flush()" : {
    "getCanonicalPath" : 1,
    "debug" : 1,
    "flush" : 1,
    "setPosixFilePermissions" : 1,
    "valueOf" : 1,
    "get" : 1,
    "toString" : 1,
    "setPermission" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$TestingGroups:getGroupsSet(java.lang.String)" : {
    "get" : 1,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.fs.shell.Display$Cat:printToStdout(java.io.InputStream)" : {
    "getConf" : 1,
    "close" : 1,
    "copyBytes" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:<init>(int,long)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:<init>(org.apache.hadoop.fs.FileSystem,java.net.URI)" : {
    "getHomeDirectory" : 1,
    "toUri" : 1,
    "isEmpty" : 1,
    "getPath" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getXAttrs(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.util.dynamic.BindingUtils:loadInvocation(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Class[])" : {
    "orNoop" : 1,
    "impl" : 1,
    "noop" : 1,
    "debug" : 2,
    "build" : 1,
    "isNoop" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : {
    "getXAttrs" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat:min()" : {
    "min" : 1
  },
  "org.apache.hadoop.crypto.random.OsSecureRandom:finalize()" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:create()" : {
    "add" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.conf.Configuration:updatePropertiesWithDeprecatedKeys(org.apache.hadoop.conf.Configuration$DeprecationContext,java.lang.String[])" : {
    "getProperty" : 1,
    "containsKey" : 1,
    "setProperty" : 1,
    "getProps" : 3,
    "get" : 1,
    "getReverseDeprecatedKeyMap" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Magic:readAndVerify(java.io.DataInput)" : {
    "size" : 1,
    "readFully" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:put(java.lang.Object)" : {
    "addInternal" : 1,
    "get" : 1,
    "isClientBackoffEnabled" : 1,
    "throwBackoff" : 1,
    "put" : 1,
    "shouldBackOff" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:extractCommandOptions(org.apache.hadoop.conf.Configuration,java.util.List)" : {
    "subList" : 1,
    "emptyList" : 1,
    "size" : 1,
    "parseCommandArgs" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getAllStoragePolicies()" : {
    "getAllStoragePolicies" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseCostProvider(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "init" : 1,
    "getClass" : 1,
    "warn" : 1,
    "getInstances" : 2,
    "split" : 1,
    "size" : 3,
    "get" : 2,
    "info" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : {
    "getProxy" : 1,
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setCounter(java.lang.String,long)" : {
    "getInnerStatistics" : 1,
    "setCounter" : 1
  },
  "org.apache.hadoop.conf.Configuration:onlyKeyExists(java.lang.String)" : {
    "getProperty" : 1,
    "getProps" : 1,
    "equals" : 1,
    "get" : 1,
    "handleDeprecation" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:chooseRandom(org.apache.hadoop.net.InnerNode,org.apache.hadoop.net.Node,java.util.Collection,int,int)" : {
    "warn" : 1,
    "contains" : 2,
    "debug" : 3,
    "getRandom" : 1,
    "getLeaf" : 3,
    "isEmpty" : 1,
    "nextInt" : 3,
    "error" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "fullPath" : 1,
    "setReplication" : 1
  },
  "org.apache.hadoop.log.LogLevel:main(java.lang.String[])" : {
    "exit" : 1,
    "run" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:shutdown()" : {
    "shutdownInstance" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:mkOneDir(java.io.File)" : {
    "getAbsolutePath" : 1,
    "mkOneDirWithMode" : 1
  },
  "org.apache.hadoop.fs.impl.FlagSet:checkMutable()" : {
    "get" : 1,
    "checkState" : 1
  },
  "org.apache.hadoop.fs.Globber:createGlobber(org.apache.hadoop.fs.FileSystem)" : { },
  "org.apache.hadoop.conf.Configured:<init>()" : { },
  "org.apache.hadoop.io.MapFile$Reader:readIndex()" : {
    "add" : 1,
    "next" : 1,
    "warn" : 1,
    "compare" : 1,
    "newKey" : 1,
    "get" : 2,
    "toArray" : 1,
    "copyOf" : 2,
    "close" : 1
  },
  "org.apache.hadoop.fs.shell.find.Result:toString()" : {
    "isDescend" : 1,
    "isPass" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:decrypt(org.apache.hadoop.crypto.Decryptor,java.nio.ByteBuffer,java.nio.ByteBuffer,byte)" : {
    "clear" : 2,
    "checkState" : 1,
    "position" : 3,
    "decrypt" : 1,
    "flip" : 2
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:constructRpcRequest(java.lang.reflect.Method,org.apache.hadoop.thirdparty.protobuf.Message)" : {
    "constructRpcRequestHeader" : 1
  },
  "org.apache.hadoop.util.functional.LazyAutoCloseableReference:<init>(org.apache.hadoop.util.functional.CallableRaisingIOE)" : { },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:needsInput()" : {
    "setInputFromSavedData" : 1,
    "remaining" : 3
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:buildLinkRegexEntry(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.UserGroupInformation,java.lang.String,java.lang.String)" : {
    "length" : 3,
    "indexOf" : 1,
    "substring" : 3
  },
  "org.apache.hadoop.fs.FilterFs:getStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "getStoragePolicy" : 1
  },
  "org.apache.hadoop.io.compress.BlockDecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int)" : { },
  "org.apache.hadoop.fs.shell.find.Find:applyItem(org.apache.hadoop.fs.shell.PathData)" : {
    "getRootExpression" : 1,
    "getDepth" : 2,
    "apply" : 1,
    "equals" : 1,
    "addStop" : 1,
    "getOptions" : 1,
    "getMinDepth" : 1
  },
  "org.apache.hadoop.io.WritableComparator:get(java.lang.Class)" : {
    "get" : 1
  },
  "org.apache.hadoop.conf.Configuration:setStorageSize(java.lang.String,double,org.apache.hadoop.conf.StorageUnit)" : {
    "set" : 1,
    "getShortName" : 1
  },
  "org.apache.hadoop.net.StandardSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int)" : {
    "bind" : 1,
    "createSocket" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.crypto.key.KeyShell:printException(java.lang.Exception)" : {
    "println" : 1,
    "getErr" : 1,
    "prettifyException" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:newEntry(java.lang.Object,long,byte[],int)" : {
    "nanoTime" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:stop()" : {
    "stopMBeans" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "fullPath" : 1,
    "removeAclEntries" : 1
  },
  "org.apache.hadoop.util.LightWeightCache:<init>(int,int,long,long)" : { },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:<init>(java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : {
    "getProtocolVersion" : 1,
    "getProxy" : 1,
    "setProtocolEngine" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:reencryptEncryptedKeys(java.util.List)" : {
    "next" : 1,
    "generateEncryptedKey" : 1,
    "getKeyVersion" : 1,
    "getEncryptedKeyVersion" : 3,
    "getEncryptionKeyName" : 1,
    "set" : 1,
    "getName" : 2,
    "getCurrentKey" : 1,
    "getConf" : 1,
    "checkArgument" : 2,
    "hasNext" : 1,
    "getVersionName" : 2,
    "getMaterial" : 1,
    "createEncryptor" : 1,
    "checkNotNull" : 6,
    "decryptEncryptedKey" : 1,
    "getEncryptedKeyIv" : 1,
    "equals" : 3,
    "listIterator" : 1,
    "createDecryptor" : 1,
    "getInstance" : 1,
    "getEncryptionKeyVersionName" : 1
  },
  "org.apache.hadoop.security.token.DtUtilShell$Renew:execute()" : {
    "getConf" : 1,
    "renewTokenFile" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.ErasureCodec:getName()" : {
    "getCodecName" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getResolvedQualifiedPath(org.apache.hadoop.fs.Path)" : {
    "toUri" : 1,
    "makeQualified" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "initialize" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:and(org.apache.hadoop.util.bloom.Filter)" : {
    "and" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.io.ObjectWritable:tryInstantiateProtobuf(java.lang.Class,java.io.DataInput)" : {
    "readRawVarint32" : 1,
    "readFully" : 1,
    "invoke" : 2,
    "getStaticProtobufMethod" : 2,
    "getCause" : 3
  },
  "org.apache.hadoop.fs.FSInputStream:readFully(long,byte[])" : {
    "readFully" : 1
  },
  "org.apache.hadoop.security.ProviderUtils:noPasswordWarning(java.lang.String,java.lang.String)" : {
    "noPasswordInstruction" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkMergeSlash(org.apache.hadoop.conf.Configuration,java.net.URI)" : {
    "getDefaultMountTableName" : 1,
    "addLinkMergeSlash" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:getStats(long)" : {
    "getSnapshotTimeStamp" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "monotonicNow" : 1,
    "entrySet" : 1,
    "getSum" : 1,
    "getCount" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.Text:skip(java.io.DataInput)" : {
    "skipFully" : 1,
    "readVInt" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:selectDelegationToken(org.apache.hadoop.security.Credentials,org.apache.hadoop.io.Text)" : {
    "debug" : 2,
    "getAllTokens" : 1,
    "selectToken" : 1,
    "equals" : 1,
    "getToken" : 1,
    "getKind" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemUtil:updateMountPointFsStatus(org.apache.hadoop.fs.viewfs.ViewFileSystem,java.util.Map,org.apache.hadoop.fs.viewfs.ViewFileSystem$MountPoint,org.apache.hadoop.fs.Path)" : {
    "getStatus" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.token.Token:decodeFromUrlString(java.lang.String)" : {
    "decodeWritable" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFactory:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:getRemaining()" : {
    "getRemaining" : 1,
    "checkStream" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:reencryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : {
    "reencryptEncryptedKey" : 1,
    "doOp" : 1,
    "nextIdx" : 1,
    "getCause" : 3
  },
  "org.apache.hadoop.net.NetworkTopology:sortByDistanceUsingNetworkLocation(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int)" : {
    "sortByDistanceUsingNetworkLocation" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:release(org.apache.hadoop.fs.impl.prefetch.BufferData)" : {
    "checkNotNull" : 1,
    "release" : 2,
    "getBlockNumber" : 1,
    "end" : 1
  },
  "org.apache.hadoop.conf.Configuration:setInt(java.lang.String,int)" : {
    "set" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:sortPass(boolean)" : {
    "debug" : 1,
    "run" : 1,
    "isDebugEnabled" : 1,
    "close" : 1,
    "setProgressable" : 1
  },
  "org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink:xdr_string(java.lang.String)" : {
    "pad" : 1,
    "xdr_int" : 1,
    "arraycopy" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient:isValidAuthType(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth)" : {
    "getMechanism" : 1,
    "valueOf" : 1,
    "equals" : 1,
    "getMechanismName" : 1,
    "getMethod" : 1
  },
  "org.apache.hadoop.io.compress.Lz4Codec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.io.compress.BlockDecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : { },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:generateEncryptedKey(java.lang.String)" : {
    "generateEncryptedKey" : 1,
    "doOp" : 1,
    "nextIdx" : 1,
    "getCause" : 3
  },
  "org.apache.hadoop.io.MapFile$Reader:next(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : {
    "next" : 1
  },
  "org.apache.hadoop.io.BytesWritable:setCapacity(int)" : {
    "min" : 1,
    "copyOf" : 1,
    "getCapacity" : 1
  },
  "org.apache.hadoop.fs.permission.AclUtil:getAclFromPermAndEntries(org.apache.hadoop.fs.permission.FsPermission,java.util.List)" : {
    "next" : 2,
    "add" : 6,
    "hasNext" : 2,
    "setType" : 3,
    "newArrayListWithCapacity" : 1,
    "getGroupAction" : 1,
    "iterator" : 1,
    "size" : 1,
    "getOtherAction" : 1,
    "build" : 3,
    "getUserAction" : 1,
    "setPermission" : 3,
    "setScope" : 3,
    "getScope" : 2
  },
  "org.apache.hadoop.ipc.ProxyCombiner$CombinedProxyInvocationHandler:close()" : {
    "add" : 1,
    "build" : 1,
    "isEmpty" : 1,
    "close" : 1
  },
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:<init>()" : {
    "newQuantiles" : 2
  },
  "org.apache.hadoop.util.SysInfoLinux:<init>()" : { },
  "org.apache.hadoop.fs.FileSystem:getDefaultBlockSize()" : {
    "getLong" : 1,
    "getConf" : 1
  },
  "org.apache.hadoop.ipc.ResponseBuffer:<init>(int)" : { },
  "org.apache.hadoop.security.ssl.ReloadingX509KeystoreManager:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : {
    "set" : 1,
    "get" : 1,
    "loadKeyManager" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getStorageBytesWritten()" : {
    "readProcDisksInfoFile" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:throwMetricsException(java.lang.String,java.lang.Throwable)" : {
    "toString" : 1
  },
  "org.apache.hadoop.conf.Configuration:setStrings(java.lang.String,java.lang.String[])" : {
    "arrayToString" : 1,
    "set" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getFsStatus(org.apache.hadoop.fs.Path)" : {
    "getStatus" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "setConfigurationFromURI" : 1,
    "initialize" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.service.AbstractService:close()" : {
    "stop" : 1
  },
  "org.apache.hadoop.conf.Configuration:<init>()" : { },
  "org.apache.hadoop.fs.shell.CopyCommandWithMultiThread:isMultiThreadNecessary(java.util.LinkedList)" : {
    "hasMoreThanOneSourcePaths" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLink(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI)" : {
    "getDefaultMountTableName" : 1,
    "addLink" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:hasDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token)" : {
    "contains" : 1,
    "trace" : 2,
    "getDelegationToken" : 2,
    "getQuery" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "setOwner" : 1
  },
  "org.apache.hadoop.util.FindClass:run(java.lang.String[])" : {
    "createClassInstance" : 1,
    "loadResource" : 1,
    "dumpResource" : 1,
    "loadClass" : 2,
    "equals" : 4,
    "usage" : 2
  },
  "org.apache.hadoop.security.alias.UserProvider:flush()" : {
    "addCredentials" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:getDefaultMountTableName(org.apache.hadoop.conf.Configuration)" : {
    "get" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:getRecord()" : {
    "accepts" : 1,
    "metrics" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.util.ShutdownThreadsHelper:shutdownThread(java.lang.Thread)" : {
    "shutdownThread" : 1
  },
  "org.apache.hadoop.util.ChunkedArrayList:add(java.lang.Object)" : {
    "add" : 1,
    "min" : 1,
    "size" : 1,
    "addChunk" : 2
  },
  "org.apache.hadoop.tools.TableListing$Builder:addField(java.lang.String)" : {
    "addField" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:processArguments(java.util.LinkedList)" : {
    "debug" : 1,
    "withFullyQualifiedPath" : 1,
    "size" : 1,
    "parentExists" : 1,
    "toUri" : 1,
    "toString" : 5,
    "processArguments" : 1,
    "isDirectory" : 2
  },
  "org.apache.hadoop.fs.GlobPattern:<init>(java.lang.String)" : {
    "set" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$FailoverOnNetworkExceptionRetry:shouldRetry(java.lang.Exception,int,int,boolean)" : {
    "getWrappedRetriableException" : 1,
    "hasWrappedAccessControlException" : 1,
    "shouldRetry" : 1,
    "getFailoverOrRetrySleepTime" : 3,
    "shouldFailoverOnException" : 1,
    "isSaslFailure" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:hflush()" : {
    "flush" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:skipToNextBlockMarker()" : {
    "skipToNextMarker" : 1
  },
  "org.apache.hadoop.fs.FsShellPermissions:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 3
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:available()" : {
    "getPos" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:<init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : {
    "getInt" : 1,
    "getValue" : 1,
    "getOption" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:copyFileToTarget(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : {
    "opt" : 1,
    "checkPathsForReservedRaw" : 1,
    "openFile" : 1,
    "build" : 1,
    "copyStreamToTarget" : 1,
    "closeStream" : 1,
    "preserveAttributes" : 1,
    "setVerifyChecksum" : 1,
    "awaitFuture" : 1,
    "withFileStatus" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:acquireHelper(int,boolean)" : {
    "checkNotNegative" : 1,
    "releaseDoneBlocks" : 1,
    "find" : 2,
    "checkState" : 1,
    "clear" : 1,
    "tryAcquire" : 1,
    "duplicate" : 1,
    "acquire" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getPermissions(com.jcraft.jsch.ChannelSftp$LsEntry)" : {
    "getAttrs" : 1,
    "getPermissions" : 1
  },
  "org.apache.hadoop.metrics2.lib.MethodMetric:newCounter(java.lang.Class)" : {
    "getName" : 2,
    "isLong" : 1,
    "intValue" : 1,
    "isInt" : 2,
    "invoke" : 1,
    "error" : 1,
    "longValue" : 1,
    "addCounter" : 2
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:incr(float)" : {
    "compareAndSet" : 1,
    "get" : 1,
    "intBitsToFloat" : 1,
    "setChanged" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:<init>()" : {
    "createMaps" : 1
  },
  "org.apache.hadoop.fs.FileContext:getStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "getStoragePolicy" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.util.LightWeightCache:<init>(int,int,long,long,org.apache.hadoop.util.Timer)" : {
    "updateRecommendedLength" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:spawnAutoRenewalThreadForUserCreds(boolean)" : {
    "executeAutoRenewalTask" : 1,
    "getTGT" : 1,
    "getRefreshTime" : 1,
    "get" : 1,
    "shouldRelogin" : 1,
    "getUserName" : 1,
    "isFromKeytab" : 1
  },
  "org.apache.hadoop.fs.FileSystem:copyFromLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyFromLocalFile" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_snapshot()" : {
    "invoke" : 1,
    "checkIoStatisticsContextAvailable" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:offer(org.apache.hadoop.ipc.Schedulable)" : {
    "offer" : 1,
    "signalNotEmpty" : 1,
    "get" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.io.MapFile:main(java.lang.String[])" : {
    "next" : 1,
    "getValueClass" : 2,
    "exit" : 1,
    "println" : 1,
    "getKeyClass" : 2,
    "asSubclass" : 3,
    "getLocal" : 1,
    "newInstance" : 2,
    "append" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:close()" : {
    "osException" : 1,
    "cleanupAllTmpFiles" : 1,
    "commit" : 1,
    "nextSetBit" : 2,
    "close" : 1,
    "cardinality" : 2
  },
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:abortUploadsUnderPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "complete" : 1
  },
  "org.apache.hadoop.util.WeakReferenceMap:prune()" : {
    "next" : 1,
    "getKey" : 1,
    "getValue" : 1,
    "iterator" : 1,
    "entrySet" : 1,
    "get" : 1,
    "hasNext" : 1,
    "noteLost" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newFixedThreadPool(int,java.util.concurrent.ThreadFactory)" : { },
  "org.apache.hadoop.ha.ZKFailoverController$HealthCallbacks:enteredState(org.apache.hadoop.ha.HealthMonitor$State)" : {
    "recheckElectability" : 1,
    "setLastHealthState" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:start(java.util.List,boolean)" : {
    "add" : 1,
    "getAuth" : 1,
    "getScheme" : 1,
    "debug" : 1,
    "retryPolicy" : 1,
    "start" : 1,
    "zookeeperFactory" : 1,
    "validateSslConfiguration" : 1,
    "getZKAuths" : 1,
    "authorization" : 1,
    "getInt" : 3,
    "build" : 1,
    "get" : 4,
    "builder" : 1,
    "zkClientConfig" : 1,
    "sessionTimeoutMs" : 1,
    "connectString" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO:ensureInitialized()" : {
    "getLong" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:decode(org.apache.hadoop.io.erasurecode.ECChunk[],int[],org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "decode" : 1,
    "toBuffers" : 2
  },
  "org.apache.hadoop.security.SecurityUtil:getTokenServiceAddr(org.apache.hadoop.security.token.Token)" : {
    "createSocketAddr" : 1,
    "toString" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$WBlockState:finish()" : {
    "returnCompressor" : 1,
    "flush" : 1
  },
  "org.apache.hadoop.service.CompositeService$CompositeServiceShutdownHook:run()" : {
    "stopQuietly" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricGaugeInt:<init>(org.apache.hadoop.metrics2.MetricsInfo,int)" : { },
  "org.apache.hadoop.fs.FsShellPermissions$Chown:processOptions(java.util.LinkedList)" : {
    "parseOwnerGroup" : 1,
    "getOpt" : 1,
    "removeFirst" : 1,
    "parse" : 1,
    "setRecursive" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:listStatus(org.apache.hadoop.fs.Path)" : {
    "disconnect" : 1,
    "listStatus" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:syncInterval(int)" : { },
  "org.apache.hadoop.ipc.FairCallQueue:offerQueue(int,org.apache.hadoop.ipc.Schedulable)" : {
    "offer" : 1,
    "signalNotEmpty" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:<init>(long,int)" : {
    "checkNotNegative" : 2,
    "checkPositiveInteger" : 1,
    "invalidate" : 1
  },
  "org.apache.hadoop.crypto.JceAesCtrCryptoCodec:calculateIV(byte[],long,byte[])" : {
    "getCipherSuite" : 1,
    "getAlgorithmBlockSize" : 1,
    "calculateIV" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "disconnect" : 1,
    "mkdirs" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:seekToNewSource(long)" : {
    "reportChecksumFailure" : 1,
    "getChecksumFilePos" : 1,
    "seekToNewSource" : 2
  },
  "org.apache.hadoop.ipc.RPC$Server:<init>(java.lang.String,int,java.lang.Class,int,int,int,org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.security.token.SecretManager,java.lang.String)" : {
    "initProtocolMetaInfo" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:<init>(java.io.InputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[])" : {
    "getInputStreamOffset" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter$WaitableMetricsBuffer:<init>(org.apache.hadoop.metrics2.impl.MetricsBuffer)" : { },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:writeLock(java.lang.String)" : {
    "getLock" : 1,
    "writeLock" : 1,
    "lock" : 1
  },
  "org.apache.hadoop.ipc.Server:getNumOpenConnectionsPerUser()" : {
    "getUserToConnectionsMap" : 1,
    "writeValueAsString" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getFsStatus()" : {
    "getStatus" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupNoRandPartB()" : {
    "setupNoRandPartC" : 1,
    "setupNoRandPartA" : 2
  },
  "org.apache.hadoop.fs.LocalDirAllocator:getLocalPathToRead(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "obtainContext" : 1,
    "getLocalPathToRead" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFileContext()" : {
    "getFileContext" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:updateDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "getKeyId" : 1,
    "toByteArray" : 1,
    "write" : 1,
    "updateDelegationKey" : 2
  },
  "org.apache.hadoop.crypto.key.UserProvider:getKeyVersion(java.lang.String)" : {
    "getSecretKey" : 1,
    "getBaseName" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:register(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSink)" : {
    "warn" : 1,
    "registerSink" : 2,
    "debug" : 1,
    "containsKey" : 1,
    "get" : 1,
    "register" : 2
  },
  "org.apache.hadoop.metrics2.impl.MetricGaugeDouble:<init>(org.apache.hadoop.metrics2.MetricsInfo,double)" : { },
  "org.apache.hadoop.security.SaslRpcClient:createSaslClient(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth)" : {
    "getServerToken" : 1,
    "debug" : 5,
    "getClientProperties" : 1,
    "valueOf" : 1,
    "getMechanismName" : 1,
    "getCanonicalName" : 1,
    "getAuthMethod" : 1,
    "getProtocol" : 1,
    "getMethod" : 1,
    "createSaslClient" : 1,
    "getServerPrincipal" : 1,
    "getRealAuthenticationMethod" : 1,
    "getServerId" : 1,
    "getAddress" : 1,
    "isDebugEnabled" : 2
  },
  "org.apache.hadoop.fs.FSInputStream:toString()" : {
    "toString" : 2,
    "ioStatisticsSourceToString" : 1,
    "append" : 3
  },
  "org.apache.hadoop.security.KDiag:validateKinitExecutable()" : {
    "verifyFileIsValid" : 1,
    "println" : 2,
    "getConf" : 1,
    "getTrimmed" : 1,
    "isEmpty" : 1,
    "isAbsolute" : 1,
    "printEnv" : 1
  },
  "org.apache.hadoop.metrics2.impl.SinkQueue:dequeue()" : {
    "wait" : 1,
    "_dequeue" : 1,
    "checkConsumer" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:getValueClass()" : {
    "getClass" : 1,
    "getValueClassName" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addGauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : {
    "add" : 1,
    "accepts" : 1,
    "name" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_setThreadIOStatisticsContext(java.lang.Object)" : {
    "invoke" : 1,
    "checkIoStatisticsContextAvailable" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:toString()" : {
    "ioStatisticsToString" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkPathExistsAsDir(java.nio.file.Path,java.lang.String)" : {
    "checkPathExists" : 1,
    "checkArgument" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricGaugeLong:<init>(org.apache.hadoop.metrics2.MetricsInfo,long)" : { },
  "org.apache.hadoop.fs.statistics.impl.EvaluatingStatisticsMap:snapshot()" : {
    "snapshotMap" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:checkUploadId(byte[])" : {
    "checkArgument" : 2
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "disconnect" : 1,
    "rename" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:forceDecay()" : {
    "decayCurrentCosts" : 1
  },
  "org.apache.hadoop.service.launcher.InterruptEscalator:<init>(org.apache.hadoop.service.launcher.ServiceLauncher,int)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "getFileBlockLocations" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.StatisticDurationTracker:<init>(org.apache.hadoop.fs.statistics.impl.IOStatisticsStore,java.lang.String)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:updateJmxCache()" : {
    "updateAttrCache" : 1,
    "now" : 3,
    "getMetrics" : 1,
    "updateInfoCache" : 1
  },
  "org.apache.hadoop.ipc.ProtocolSignature:getFingerprints(java.lang.reflect.Method[])" : {
    "getFingerprint" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.DumpUtil:dumpChunks(java.lang.String,org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "println" : 3,
    "dumpChunk" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:getFilter(java.lang.String)" : {
    "init" : 1,
    "getPlugin" : 1,
    "isEmpty" : 1,
    "subset" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$1:createDecompressionStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int)" : { },
  "org.apache.hadoop.crypto.key.KeyShell$DeleteCommand:validate()" : {
    "getOut" : 3,
    "println" : 3,
    "confirmPrompt" : 1,
    "getKeyProvider" : 1,
    "prettifyException" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPInputStream:seekInternal()" : {
    "toUri" : 1,
    "get" : 1,
    "getPath" : 1,
    "skip" : 2,
    "close" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getKeyVersion(java.lang.String)" : {
    "call" : 1,
    "parseJSONKeyVersion" : 1,
    "checkNotEmpty" : 1,
    "createConnection" : 1,
    "createURL" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:addFalsePositive(org.apache.hadoop.util.bloom.Key)" : {
    "add" : 1,
    "clear" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:checkPathsForReservedRaw(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getPathWithoutSchemeAndAuthority" : 2,
    "toString" : 4,
    "startsWith" : 2
  },
  "org.apache.hadoop.util.functional.RemoteIterators:toArray(org.apache.hadoop.fs.RemoteIterator,java.lang.Object[])" : {
    "toArray" : 1,
    "toList" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:complete(org.apache.hadoop.fs.UploadHandle,org.apache.hadoop.fs.Path,java.util.Map)" : {
    "checkPath" : 1,
    "eval" : 1,
    "innerComplete" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1
  },
  "org.apache.hadoop.ipc.RefreshRegistry:dispatch(java.lang.String,java.lang.String[])" : {
    "add" : 1,
    "size" : 2,
    "setSenderName" : 1,
    "getLocalizedMessage" : 1,
    "get" : 1,
    "getMessage" : 1,
    "handlerName" : 2,
    "join" : 1,
    "handleRefresh" : 1,
    "keySet" : 1,
    "getReturnCode" : 1,
    "info" : 1,
    "on" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:toString()" : {
    "uriToString" : 1
  },
  "org.apache.hadoop.fs.GetSpaceUsed$Builder:build()" : {
    "init" : 1,
    "warn" : 4,
    "newInstance" : 1,
    "getConstructor" : 1,
    "getKlass" : 5
  },
  "org.apache.hadoop.fs.PathIOException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSTokenRenewer:cancel(org.apache.hadoop.security.token.Token,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "createKeyProvider" : 1,
    "debug" : 1,
    "cancelDelegationToken" : 1,
    "format" : 1,
    "close" : 1
  },
  "org.apache.hadoop.security.NetgroupCache:getNetgroupNames()" : {
    "getGroups" : 1
  },
  "org.apache.hadoop.fs.FileSystem:createSnapshot(org.apache.hadoop.fs.Path)" : {
    "createSnapshot" : 1
  },
  "org.apache.hadoop.fs.FileSystemStorageStatistics$LongStatisticIterator:next()" : {
    "fetch" : 1,
    "longValue" : 1
  },
  "org.apache.hadoop.fs.impl.FutureIOSupport:awaitFuture(java.util.concurrent.Future)" : {
    "awaitFuture" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addMaximumSample(java.lang.String,long)" : {
    "addMaximumSample" : 1,
    "getInnerStatistics" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:getTokenInfoFromSQL(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getSequenceNumber" : 1,
    "selectTokenInfo" : 1,
    "error" : 1,
    "createTokenInfo" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.conf.Configuration:set(java.lang.String,java.lang.String)" : {
    "set" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Invocation:readFields(java.io.DataInput)" : {
    "readLong" : 2,
    "readString" : 2,
    "getDeclaredClass" : 1,
    "readInt" : 2,
    "readObject" : 1
  },
  "org.apache.hadoop.ipc.Client$ConnectionId:hashCode()" : {
    "getPort" : 1,
    "getHostName" : 2,
    "hashCode" : 4
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "createWriter" : 1,
    "file" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "compression" : 1,
    "filesystem" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : {
    "fullPath" : 1,
    "getFileBlockLocations" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:xor(org.apache.hadoop.util.bloom.Filter)" : {
    "xor" : 1
  },
  "org.apache.hadoop.io.compress.SnappyCodec:createInputStream(java.io.InputStream)" : {
    "createInputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPInputStream:read()" : {
    "read" : 1,
    "seekInternal" : 1,
    "checkNotClosed" : 1,
    "incrementBytesRead" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibCompressorType(org.apache.hadoop.conf.Configuration)" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.net.SocketInputStream:<init>(java.nio.channels.ReadableByteChannel,long)" : {
    "checkChannelValidity" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:getGid(java.lang.String)" : {
    "inverse" : 2,
    "intValue" : 1,
    "updateMapIncr" : 1,
    "get" : 2,
    "checkAndUpdateMaps" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:flush()" : {
    "flush" : 1,
    "flushBuffer" : 1
  },
  "org.apache.hadoop.util.Shell:getSymlinkCommand(java.lang.String,java.lang.String)" : {
    "getWinUtilsPath" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureEncoder:getInputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getDataBlocks" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:addRegexMountEntry(org.apache.hadoop.fs.viewfs.InodeTree$LinkEntry)" : {
    "add" : 1,
    "getTarget" : 2,
    "getSettings" : 2,
    "getSrc" : 2,
    "initialize" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSKeyVersion:<init>(java.lang.String,java.lang.String,byte[])" : { },
  "org.apache.hadoop.io.retry.RetryPolicies$FailoverOnNetworkExceptionRetry:<init>(org.apache.hadoop.io.retry.RetryPolicy,int,long,long)" : { },
  "org.apache.hadoop.metrics2.lib.MutableQuantiles:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "addGauge" : 2,
    "clearChanged" : 1,
    "get" : 1,
    "changed" : 2,
    "getQuantiles" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:create(java.lang.String)" : {
    "loadFirst" : 1,
    "toLowerCase" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:listStatusForFallbackLink()" : {
    "getPathWithoutSchemeAndAuthority" : 1,
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 2,
    "getName" : 1,
    "util" : 1,
    "isRoot" : 1,
    "getFileContext" : 1,
    "getPath" : 1,
    "setPath" : 1,
    "listStatus" : 1,
    "exists" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.QuotaUsage$Builder:build()" : { },
  "org.apache.hadoop.io.SequenceFile$Metadata:equals(org.apache.hadoop.io.SequenceFile$Metadata)" : {
    "next" : 2,
    "getValue" : 2,
    "getKey" : 2,
    "iterator" : 2,
    "size" : 2,
    "entrySet" : 2,
    "equals" : 2,
    "hasNext" : 4
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:decodeTokenIdentifier(org.apache.hadoop.security.token.Token)" : {
    "decodeIdentifier" : 1
  },
  "org.apache.hadoop.ipc.Client$Call:setRpcResponse(org.apache.hadoop.io.Writable)" : {
    "callComplete" : 1
  },
  "org.apache.hadoop.metrics2.sink.StatsDSink$StatsD:write(java.lang.String)" : {
    "debug" : 1,
    "createSocket" : 1,
    "setData" : 1,
    "send" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:requestCaching(org.apache.hadoop.fs.impl.prefetch.BufferData)" : {
    "requestCaching" : 1,
    "containsBlock" : 1,
    "stateEqualsOneOf" : 2,
    "setCaching" : 1,
    "setDone" : 2,
    "executeFunction" : 1,
    "getState" : 1,
    "checkNotNull" : 1,
    "now" : 1,
    "getBlockNumber" : 2,
    "get" : 1,
    "getActionFuture" : 1,
    "end" : 1,
    "complete" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcProtobufRequest:toString()" : {
    "getDeclaringClassProtocolName" : 1,
    "getRequestHeader" : 1,
    "getMethodName" : 1
  },
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:sync()" : {
    "flush" : 1,
    "writeVInt" : 1,
    "reset" : 4,
    "writeBuffer" : 4,
    "sync" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMappingWithFallback:getGroupsSet(java.lang.String)" : {
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:receiveRpcResponse()" : {
    "readResponse" : 1,
    "getName" : 1,
    "checkResponse" : 1,
    "hasExceptionClassName" : 1,
    "getStatus" : 1,
    "remove" : 2,
    "getDefaultInstance" : 1,
    "getExceptionClassName" : 1,
    "get" : 1,
    "hasErrorMsg" : 1,
    "setException" : 1,
    "getErrorMsg" : 1,
    "getCallId" : 1,
    "debug" : 1,
    "hasErrorDetail" : 1,
    "touch" : 1,
    "newInstance" : 1,
    "remaining" : 1,
    "warn" : 1,
    "getValue" : 1,
    "getErrorDetail" : 1,
    "receiveResponseState" : 1,
    "markClosed" : 2,
    "setRpcResponse" : 1,
    "isDebugEnabled" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.service.AbstractService:registerGlobalListener(org.apache.hadoop.service.ServiceStateChangeListener)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:progress(org.apache.hadoop.util.Progressable)" : {
    "checkNotNull" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.io.BinaryComparable:compareTo(byte[],int,int)" : {
    "compareBytes" : 1,
    "getLength" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.FilterFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : {
    "setXAttr" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:authorize(org.apache.hadoop.security.UserGroupInformation,java.net.InetAddress)" : {
    "getSip" : 1,
    "authorize" : 1
  },
  "org.apache.hadoop.security.Credentials:addAll(org.apache.hadoop.security.Credentials,boolean)" : {
    "addToken" : 1,
    "getValue" : 2,
    "getKey" : 2,
    "entrySet" : 2,
    "containsKey" : 2,
    "put" : 1
  },
  "org.apache.hadoop.fs.impl.StoreImplementationUtils:hasCapability(java.io.OutputStream,java.lang.String)" : {
    "objectHasCapability" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:context()" : {
    "value" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getPermission()" : {
    "getPermission" : 1
  },
  "org.apache.hadoop.fs.BBPartHandle:from(java.nio.ByteBuffer)" : { },
  "org.apache.hadoop.io.SequenceFile$Writer$AppendIfExistsOption:<init>(boolean)" : { },
  "org.apache.hadoop.net.unix.DomainSocket$DomainChannel:read(java.nio.ByteBuffer)" : {
    "reference" : 1,
    "readArray0" : 1,
    "hasArray" : 1,
    "array" : 1,
    "arrayOffset" : 1,
    "position" : 4,
    "isDirect" : 1,
    "unreference" : 1,
    "remaining" : 2,
    "readByteBufferDirect0" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:addPersistedDelegationToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier,long)" : {
    "getDelegationTokenSeqNum" : 1,
    "getKey" : 1,
    "setDelegationTokenSeqNum" : 1,
    "getTrackingIdIfEnabled" : 1,
    "getSequenceNumber" : 2,
    "getTokenInfo" : 1,
    "formatTokenId" : 2,
    "put" : 1,
    "getBytes" : 1,
    "createPassword" : 1,
    "warn" : 1,
    "addTokenForOwnerStats" : 1,
    "get" : 1,
    "getMasterKeyId" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class)" : {
    "comparator" : 1,
    "valueClass" : 1
  },
  "org.apache.hadoop.io.BytesWritable:get()" : {
    "getBytes" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncValue:set(java.lang.Object)" : {
    "checkNotNull" : 1,
    "checkState" : 1,
    "notify" : 1
  },
  "org.apache.hadoop.fs.shell.Head:processOptions(java.util.LinkedList)" : {
    "parse" : 1
  },
  "org.apache.hadoop.fs.XAttrSetFlag:validate(java.lang.String,boolean,java.util.EnumSet)" : {
    "contains" : 2,
    "isEmpty" : 1
  },
  "org.apache.hadoop.util.CrcComposer:update(int,long)" : {
    "composeWithMonomial" : 1,
    "compose" : 1,
    "format" : 1,
    "write" : 1,
    "intToBytes" : 1
  },
  "org.apache.hadoop.util.StringUtils:unEscapeString(java.lang.String)" : {
    "unEscapeString" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : {
    "addGauge" : 1,
    "setContext" : 1,
    "getOverflowedCalls" : 1,
    "getQueueSizes" : 1,
    "tag" : 1,
    "addRecord" : 1,
    "addCounter" : 1,
    "info" : 3
  },
  "org.apache.hadoop.fs.http.AbstractHttpFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "hasPathCapability" : 1
  },
  "org.apache.hadoop.io.Text:write(java.io.DataOutput,int)" : {
    "writeVInt" : 1,
    "write" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$BlockSizeOption:<init>(long)" : { },
  "org.apache.hadoop.fs.ftp.FtpFs:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "getStoragePolicy" : 1
  },
  "org.apache.hadoop.util.MergeSort:mergeSort(int[],int[],int,int)" : {
    "compare" : 3,
    "set" : 6,
    "swap" : 1,
    "arraycopy" : 1,
    "mergeSort" : 2
  },
  "org.apache.hadoop.metrics2.sink.GraphiteSink$Graphite:connect()" : {
    "tooManyConnectionFailures" : 2,
    "isConnected" : 1,
    "getOutputStream" : 1,
    "error" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:sort(int)" : {
    "arraycopy" : 1,
    "mergeSort" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:init()" : {
    "setupBlock" : 1,
    "initBlock" : 1,
    "readAByte" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:write(int)" : {
    "incrementCounter" : 2,
    "write" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addResponseTime(java.lang.String,org.apache.hadoop.ipc.Schedulable,org.apache.hadoop.ipc.ProcessingDetails)" : {
    "getAndIncrement" : 1,
    "debug" : 1,
    "addProcessingTime" : 1,
    "addQueueTime" : 1,
    "get" : 2,
    "getAndAdd" : 1,
    "addCost" : 1,
    "makeIdentity" : 1,
    "getCost" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "disconnect" : 1,
    "delete" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:swapQueue(java.lang.Class,java.lang.Class,int,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "parseNumLevels" : 1,
    "set" : 2,
    "stop" : 1,
    "getServerFailOverEnable" : 1,
    "parseCapacityWeights" : 1,
    "get" : 1,
    "createScheduler" : 1,
    "createCallQueueInstance" : 1,
    "stringRepr" : 2,
    "info" : 1,
    "queueIsReallyEmpty" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:changeStateToProcessABlock()" : {
    "setupBlock" : 1,
    "initBlock" : 1
  },
  "org.apache.hadoop.util.Daemon$DaemonFactory:newThread(java.lang.Runnable)" : { },
  "org.apache.hadoop.http.ProfileServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getEvent" : 1,
    "getName" : 1,
    "incrementAndGet" : 1,
    "getServletContext" : 1,
    "setResponseHeader" : 6,
    "getParameterMap" : 3,
    "getInteger" : 6,
    "setHeader" : 1,
    "getMinWidth" : 1,
    "flush" : 1,
    "trim" : 1,
    "join" : 1,
    "write" : 6,
    "isInstrumentationAccessAllowed" : 1,
    "on" : 1,
    "getOutput" : 1,
    "add" : 25,
    "unlock" : 1,
    "getAbsolutePath" : 1,
    "containsKey" : 3,
    "toLowerCase" : 3,
    "isEmpty" : 1,
    "tryLock" : 1,
    "setStatus" : 7,
    "getLong" : 2,
    "warn" : 2,
    "isAlive" : 1,
    "getInternalName" : 2,
    "getWriter" : 7,
    "name" : 3,
    "runCmdAsync" : 1,
    "toString" : 7
  },
  "org.apache.hadoop.net.SocketOutputStream$Writer:<init>(java.nio.channels.WritableByteChannel,long)" : { },
  "org.apache.hadoop.util.ReflectionUtils:printThreadInfo(java.io.PrintStream,java.lang.String)" : {
    "getBlockedCount" : 1,
    "getTaskName" : 2,
    "isThreadContentionMonitoringEnabled" : 1,
    "getLockName" : 2,
    "getAllThreadIds" : 1,
    "getLockOwnerName" : 1,
    "println" : 14,
    "flush" : 1,
    "getStackTrace" : 1,
    "getLockOwnerId" : 1,
    "getWaitedTime" : 1,
    "getWaitedCount" : 1,
    "getThreadId" : 1,
    "getThreadInfo" : 1,
    "getThreadState" : 1,
    "getThreadName" : 1,
    "toString" : 1,
    "getBlockedTime" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:getAndMoveToFrontDecode()" : {
    "bsR" : 1,
    "readAByte" : 4,
    "arraycopy" : 1,
    "getAndMoveToFrontDecode0" : 1,
    "recvDecodingTables" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsFactory:getInstance(java.lang.Class)" : {
    "getName" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:mkOneDirWithMode(org.apache.hadoop.fs.Path,java.io.File,org.apache.hadoop.fs.permission.FsPermission)" : {
    "isAvailable" : 1,
    "debug" : 1,
    "getConf" : 1,
    "applyUMask" : 1,
    "format" : 1,
    "getUMask" : 1,
    "isDebugEnabled" : 1,
    "setPermission" : 1,
    "createDirectoryWithMode" : 1,
    "mkdir" : 1,
    "toShort" : 2,
    "getDirDefault" : 1
  },
  "org.apache.hadoop.ha.ZKFCRpcServer:cedeActive(int)" : {
    "checkRpcAdminAccess" : 1,
    "cedeActive" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "createSymlink" : 1
  },
  "org.apache.hadoop.crypto.key.UserProvider:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getCurrentUser" : 1,
    "getCredentials" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet$Values:contains(java.lang.Object)" : {
    "contains" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:keyClass(java.lang.Class)" : { },
  "org.apache.hadoop.util.DataChecksum:newDataChecksum(org.apache.hadoop.util.DataChecksum$Type,int)" : {
    "newCrc32C" : 1,
    "newCrc32" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addGauge(org.apache.hadoop.metrics2.MetricsInfo,double)" : {
    "add" : 1,
    "accepts" : 1,
    "name" : 1
  },
  "org.apache.hadoop.io.retry.RetryUtils:getMultipleLinearRandomRetry(org.apache.hadoop.conf.Configuration,java.lang.String,boolean,java.lang.String,java.lang.String)" : {
    "parseCommaSeparatedString" : 2,
    "get" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : {
    "createWriter" : 1,
    "file" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1,
    "filesystem" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:publishMetricsNow()" : {
    "size" : 1,
    "publishMetrics" : 1,
    "sampleMetrics" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:retryUpToMaximumTimeWithFixedSleep(long,long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:resetBuffer(java.nio.ByteBuffer,int)" : {
    "getEmptyChunk" : 1,
    "position" : 2,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.lz4.Lz4Decompressor:needsInput()" : {
    "setInputFromSavedData" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String,javax.net.ssl.SSLSocket)" : {
    "check" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:openFile(java.lang.String)" : {
    "opt" : 1,
    "openFile" : 1,
    "build" : 1,
    "optLong" : 1,
    "getLen" : 1,
    "awaitFuture" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrSlowRpc()" : {
    "incr" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:updateAttrCache(java.lang.Iterable)" : {
    "debug" : 2,
    "checkNotNull" : 1,
    "setAttrCacheMetric" : 1,
    "metrics" : 1,
    "setAttrCacheTag" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.util.Shell:getQualifiedBinPath(java.lang.String)" : {
    "getCanonicalPath" : 1,
    "getQualifiedBin" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : {
    "isAbsolute" : 1
  },
  "org.apache.hadoop.fs.BufferedFSInputStream:readFully(long,byte[],int,int)" : {
    "readFully" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:numberOfBytesTillNextMarker(java.io.InputStream)" : {
    "getProcessedByteCount" : 1
  },
  "org.apache.hadoop.fs.FileUtil:checkDest(java.lang.String,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean)" : {
    "checkDest" : 1,
    "getFileStatus" : 1,
    "toString" : 2,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet:get(java.lang.Object)" : {
    "getIndex" : 1,
    "equals" : 1,
    "getNext" : 1,
    "convert" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues()" : {
    "sendMTFValues0" : 1,
    "sendMTFValues3" : 1,
    "sendMTFValues4" : 1,
    "sendMTFValues1" : 1,
    "sendMTFValues2" : 1,
    "sendMTFValues7" : 1,
    "sendMTFValues5" : 1,
    "sendMTFValues6" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:getRollInterval()" : {
    "parseInt" : 1,
    "compile" : 1,
    "toLowerCase" : 1,
    "equals" : 1,
    "toMillis" : 4,
    "getString" : 1,
    "matcher" : 1,
    "matches" : 1,
    "group" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "satisfyStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt:content()" : {
    "moved" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.ha.HealthMonitor:tryConnect()" : {
    "warn" : 1,
    "createProxy" : 1,
    "enterState" : 1,
    "checkState" : 1,
    "getMessage" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:copyToLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "copyToLocalFile" : 3,
    "getName" : 2,
    "getChecksumFile" : 2,
    "getConf" : 1,
    "getLocal" : 1,
    "getPath" : 2,
    "exists" : 2,
    "listStatus" : 1,
    "delete" : 1,
    "getRawFileSystem" : 1,
    "isDirectory" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsBufferBuilder:get()" : { },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:getCompressionName()" : {
    "getCompressionName" : 1
  },
  "org.apache.hadoop.security.SaslInputStream:read(java.nio.ByteBuffer)" : {
    "hasArray" : 1,
    "read" : 2,
    "array" : 1,
    "arrayOffset" : 1,
    "position" : 3,
    "put" : 1,
    "remaining" : 2
  },
  "org.apache.hadoop.fs.QuotaUsage:toString(boolean)" : {
    "toString" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProvider:createKey(java.lang.String,org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "generateKey" : 1,
    "getCipher" : 1,
    "createKey" : 1,
    "getBitLength" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:lookupStat(org.apache.hadoop.fs.FileSystem,java.lang.String,boolean)" : {
    "getFileStatus" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getGroupNames()" : {
    "size" : 1,
    "toArray" : 1,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.ha.HealthMonitor:loopUntilConnected()" : {
    "sleep" : 1,
    "tryConnect" : 2
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "disconnect" : 2,
    "realpath" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "format" : 1,
    "getFileStatus" : 1,
    "pwd" : 1,
    "close" : 1,
    "makeAbsolute" : 1,
    "isDirectory" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedIO:fileSystem_openFile(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.String,org.apache.hadoop.fs.FileStatus,java.lang.Long,java.util.Map)" : {
    "opt" : 2,
    "openFile" : 1,
    "build" : 1,
    "forEach" : 1,
    "uncheckIOExceptions" : 2,
    "toString" : 1,
    "awaitFuture" : 1,
    "withFileStatus" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:exists(org.apache.hadoop.fs.Path)" : {
    "pathToFile" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:initialize(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FSDataInputStream,long,long,org.apache.hadoop.conf.Configuration,boolean)" : {
    "init" : 1,
    "getPos" : 1,
    "toString" : 1,
    "seek" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:renewDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.Token)" : {
    "renewDelegationToken" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:setTopologyPaths(java.lang.String[])" : {
    "internStringsInArray" : 1
  },
  "org.apache.hadoop.security.token.TokenIdentifier:getTrackingId()" : {
    "md5Hex" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:<init>()" : { },
  "org.apache.hadoop.util.FindClass:<init>()" : { },
  "org.apache.hadoop.security.token.DtUtilShell:init(java.lang.String[])" : {
    "add" : 1,
    "size" : 1,
    "setSubCommand" : 8,
    "equals" : 15,
    "exists" : 1,
    "error" : 2,
    "maybeDoLoginFromKeytabAndPrincipal" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProvider$Options:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "get" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:waitForCompletion(org.apache.hadoop.ipc.RetryCache,java.lang.Object,byte[],int)" : {
    "skipRetryCache" : 1,
    "newEntry" : 1,
    "waitForCompletion" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:doSubjectLogin(javax.security.auth.Subject,org.apache.hadoop.security.UserGroupInformation$LoginParams)" : {
    "getSubject" : 1,
    "setLastLogin" : 1,
    "newLoginContext" : 1,
    "setTicketCacheFile" : 1,
    "getLoginAppName" : 1,
    "getDefaults" : 1,
    "login" : 1,
    "put" : 1,
    "setKeytabFile" : 1,
    "ensureInitialized" : 1,
    "setPrincipal" : 1,
    "setLogin" : 1,
    "now" : 1,
    "get" : 3,
    "getUserName" : 1
  },
  "org.apache.hadoop.http.HttpServer2:getConnectorAddress(int)" : {
    "getLocalPort" : 3,
    "getConnectors" : 2,
    "checkArgument" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:merge(org.apache.hadoop.fs.FileStatus[],org.apache.hadoop.fs.FileStatus[])" : {
    "add" : 3,
    "contains" : 1,
    "getName" : 2,
    "size" : 1,
    "toArray" : 1,
    "getPath" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:close()" : {
    "closeStream" : 1,
    "finish" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState)" : {
    "resetOutputBuffers" : 1,
    "encodeData" : 1
  },
  "org.apache.hadoop.util.DataChecksum:writeValue(java.io.DataOutputStream,boolean)" : {
    "writeInt" : 1,
    "getValue" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getCounterReference(java.lang.String)" : {
    "lookup" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getKeyVersions(java.lang.String)" : {
    "getKeyVersions" : 1,
    "doOp" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getUsed()" : {
    "getUsed" : 1
  },
  "org.apache.hadoop.fs.QuotaUsage:toString()" : {
    "toString" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader$OnlyHeaderOption:<init>()" : { },
  "org.apache.hadoop.fs.HarFileSystem:makeRelative(java.lang.String,org.apache.hadoop.fs.Path)" : {
    "getParent" : 2,
    "depth" : 1,
    "getName" : 2,
    "getScheme" : 1,
    "toString" : 1,
    "compareTo" : 1,
    "getAuthority" : 1
  },
  "org.apache.hadoop.net.NetUtils:getInputStream(java.net.Socket,long)" : {
    "setTimeout" : 1,
    "getChannel" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:snapshot(org.apache.hadoop.fs.statistics.IOStatistics)" : {
    "checkNotNull" : 1,
    "counters" : 1,
    "gauges" : 1,
    "meanStatistics" : 1,
    "minimums" : 1,
    "snapshotMap" : 5,
    "maximums" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:createInputStream(java.io.InputStream)" : {
    "createInputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:sendPing()" : {
    "set" : 1,
    "flush" : 1,
    "get" : 1,
    "now" : 1,
    "sendRequest" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:log(java.lang.reflect.Method,boolean,int,int,long,java.lang.Exception)" : {
    "add" : 1,
    "contains" : 1,
    "debug" : 1,
    "getName" : 1,
    "toString" : 4,
    "getString" : 1,
    "isDebugEnabled" : 1,
    "hasSuccessfulCall" : 1,
    "append" : 11,
    "info" : 1,
    "getProxyInfo" : 3
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:exitWithUsageMessage()" : {
    "exitWithMessage" : 1
  },
  "org.apache.hadoop.ipc.UserIdentityProvider:makeIdentity(org.apache.hadoop.ipc.Schedulable)" : {
    "getShortUserName" : 1,
    "getUserGroupInformation" : 1
  },
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getParameterValues(java.lang.String)" : {
    "getParameterValues" : 1,
    "quoteHtmlChars" : 1,
    "unquoteHtmlChars" : 1
  },
  "org.apache.hadoop.util.UTF8ByteArrayUtils:findNthByte(byte[],int,int,byte,int)" : {
    "findByte" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : {
    "comparator" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:gauge(org.apache.hadoop.metrics2.MetricsInfo,double)" : {
    "add" : 1,
    "newAttrInfo" : 1
  },
  "org.apache.hadoop.fs.FileUtil:unTar(java.io.InputStream,java.io.File,boolean)" : {
    "unTarUsingTar" : 1,
    "mkdirs" : 1,
    "unTarUsingJava" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:checkOpenState()" : {
    "isOpen" : 1,
    "checkState" : 1
  },
  "org.apache.hadoop.io.compress.DefaultCodec:createCompressor()" : {
    "getZlibCompressor" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkNfly(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : {
    "set" : 1,
    "getConfigViewFsPrefix" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:refresh(java.lang.String,java.lang.String)" : {
    "refreshInternal" : 1
  },
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:createPermissions(java.lang.String)" : {
    "parseInt" : 1,
    "modeToPosixFilePermission" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getRealAuthenticationMethod()" : {
    "getAuthenticationMethod" : 1,
    "getRealUser" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState)" : {
    "resetOutputBuffers" : 1,
    "get" : 3,
    "limit" : 2,
    "position" : 4,
    "put" : 2
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : {
    "createWriter" : 1,
    "file" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1,
    "filesystem" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "setAcl" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : { },
  "org.apache.hadoop.io.erasurecode.rawcoder.DecodingValidator:validate(java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : {
    "allocateBuffer" : 1,
    "toLimits" : 1,
    "getValidIndexes" : 2,
    "findFirstValidInput" : 1,
    "equals" : 1,
    "clear" : 1,
    "limit" : 1,
    "decode" : 1,
    "markBuffers" : 1,
    "isDirect" : 2,
    "remaining" : 1,
    "capacity" : 2,
    "resetBuffers" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withLongFunctionMinimum(java.lang.String,java.util.function.ToLongFunction)" : {
    "activeInstance" : 1,
    "addMinimumFunction" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:getPadding(long)" : {
    "getCipherSuite" : 1,
    "getAlgorithmBlockSize" : 1
  },
  "org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : {
    "loadGangliaConf" : 4,
    "debug" : 1,
    "parse" : 1,
    "getString" : 4,
    "error" : 2,
    "getInt" : 1,
    "size" : 1,
    "getList" : 1,
    "getDefaultHost" : 1,
    "getBoolean" : 2,
    "toString" : 2,
    "join" : 1,
    "setTimeToLive" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FilterFs:checkPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1
  },
  "org.apache.hadoop.fs.shell.AclCommands$SetfaclCommand:processOptions(java.util.LinkedList)" : {
    "add" : 1,
    "isRecursive" : 1,
    "newArrayList" : 1,
    "size" : 2,
    "parseAclSpec" : 1,
    "getOpt" : 16,
    "removeFirst" : 1,
    "isEmpty" : 3,
    "parse" : 1,
    "setRecursive" : 1,
    "getScope" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:register(java.lang.String,org.apache.hadoop.metrics2.MetricsSystem$Callback)" : {
    "getProxyForCallback" : 1,
    "put" : 1
  },
  "org.apache.hadoop.conf.Configuration:getConfResourceAsReader(java.lang.String)" : {
    "getResource" : 1,
    "openStream" : 1,
    "info" : 2
  },
  "org.apache.hadoop.ipc.Server:<init>(java.lang.String,int,java.lang.Class,int,int,int,org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.security.token.SecretManager)" : { },
  "org.apache.hadoop.io.WritableUtils:readCompressedString(java.io.DataInput)" : {
    "readCompressedByteArray" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:bulkDelete_delete(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.util.Collection)" : {
    "extractIOEs" : 1,
    "invoke" : 1,
    "checkAvailable" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:isNestedMountPointSupported(org.apache.hadoop.conf.Configuration)" : {
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.io.compress.snappy.SnappyCompressor:compress(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "min" : 2,
    "compressDirectBuf" : 1,
    "get" : 2,
    "limit" : 2,
    "clear" : 2,
    "position" : 2,
    "remaining" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getDtService(java.net.URI)" : {
    "getScheme" : 1,
    "toString" : 1,
    "getFragment" : 1,
    "getSchemeSpecificPart" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getServerDefaults(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.conf.ReconfigurableBase:<init>()" : { },
  "org.apache.hadoop.fs.FileContext:getFileContext(java.net.URI)" : {
    "getFileContext" : 1
  },
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:writeBuffer(org.apache.hadoop.io.DataOutputBuffer)" : {
    "flush" : 1,
    "writeVInt" : 1,
    "resetState" : 1,
    "getLength" : 3,
    "reset" : 1,
    "finish" : 1,
    "write" : 2,
    "getData" : 2
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:currentConfig()" : {
    "toString" : 1,
    "copy" : 1,
    "write" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getKeyVersions(java.lang.String)" : {
    "add" : 1,
    "call" : 1,
    "parseJSONKeyVersion" : 1,
    "checkNotEmpty" : 1,
    "isEmpty" : 1,
    "createConnection" : 1,
    "createURL" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:equals(java.lang.Object)" : {
    "getErasureCodingPolicy" : 2,
    "getSnapshotSpaceConsumed" : 2,
    "getFileCount" : 2,
    "getSnapshotDirectoryCount" : 2,
    "getSnapshotLength" : 2,
    "getDirectoryCount" : 2,
    "equals" : 3,
    "getLength" : 2,
    "getSnapshotFileCount" : 2
  },
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getParameterMap()" : {
    "getKey" : 1,
    "getValue" : 1,
    "quoteHtmlChars" : 2,
    "entrySet" : 1,
    "getParameterMap" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:getStatus(org.apache.hadoop.fs.Path)" : {
    "getTotalSpace" : 2,
    "getFreeSpace" : 2,
    "pathToFile" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache:getUnique(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getAndIncrement" : 1,
    "getInternal" : 1
  },
  "org.apache.hadoop.ipc.RPC$Server:addProtocol(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.Class,java.lang.Object)" : {
    "registerProtocolAndImpl" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_means(java.io.Serializable)" : {
    "invoke" : 1
  },
  "org.apache.hadoop.fs.FileContext:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "renameSnapshot" : 1
  },
  "org.apache.hadoop.ipc.RemoteException:valueOf(org.xml.sax.Attributes)" : {
    "getValue" : 2
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:getRawCoderNames(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getCoderNames" : 1,
    "getInstance" : 1,
    "getStrings" : 1
  },
  "org.apache.hadoop.ipc.ResponseBuffer:setCapacity(int)" : {
    "setCapacity" : 1
  },
  "org.apache.hadoop.fs.FileUtil:unpackEntries(org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.io.File)" : {
    "createHardLink" : 1,
    "isLink" : 2,
    "getCanonicalPath" : 5,
    "getName" : 5,
    "createSymbolicLink" : 1,
    "getDefault" : 2,
    "getDirectoryEntries" : 1,
    "copyToFile" : 1,
    "isSymbolicLink" : 2,
    "unpackEntries" : 1,
    "mkdirs" : 2,
    "getParentFile" : 2,
    "getPath" : 3,
    "exists" : 1,
    "isDirectory" : 2,
    "getLinkName" : 3,
    "startsWith" : 2
  },
  "org.apache.hadoop.net.NodeBase:<init>(java.lang.String)" : {
    "lastIndexOf" : 1,
    "set" : 2,
    "normalize" : 1,
    "substring" : 2
  },
  "org.apache.hadoop.fs.ContentSummary:toString()" : {
    "toString" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : {
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getShortUserName()" : {
    "getShortName" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet:remove(java.lang.Object)" : {
    "getIndex" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:removeStoredMasterKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "debug" : 4,
    "checkExists" : 2,
    "getKeyId" : 2,
    "getNodePath" : 1,
    "guaranteed" : 1,
    "isDebugEnabled" : 1,
    "delete" : 1,
    "forPath" : 3
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "unlock" : 1,
    "writeLock" : 2,
    "getNumDataUnits" : 1,
    "lock" : 1,
    "getNumParityUnits" : 1,
    "initImpl" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:listXAttrs(org.apache.hadoop.fs.Path)" : {
    "listXAttrs" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:getInstanceConfigs(java.lang.String)" : {
    "keys" : 1,
    "containsKey" : 1,
    "newHashMap" : 1,
    "matcher" : 1,
    "matches" : 1,
    "put" : 1,
    "subset" : 2,
    "group" : 1
  },
  "org.apache.hadoop.io.BytesWritable:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:registerSource(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSource)" : {
    "debug" : 1,
    "checkNotNull" : 1,
    "get" : 1,
    "start" : 1,
    "put" : 1,
    "subset" : 1
  },
  "org.apache.hadoop.fs.shell.SetReplication:processArguments(java.util.LinkedList)" : {
    "waitForReplication" : 1,
    "processArguments" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:safeCreate(java.lang.String,byte[],java.util.List,org.apache.zookeeper.CreateMode,java.util.List,java.lang.String)" : {
    "commit" : 1,
    "create" : 1,
    "exists" : 1,
    "createTransaction" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "getParent" : 1,
    "getFileLinkStatus" : 2,
    "isFile" : 1,
    "equals" : 2,
    "getFileStatus" : 1,
    "listStatusIterator" : 1,
    "renameInternal" : 1,
    "hasNext" : 1,
    "delete" : 1,
    "getSymlink" : 1,
    "isSymlink" : 1,
    "isDirectory" : 3
  },
  "org.apache.hadoop.fs.FileSystem:moveFromLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyFromLocalFile" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:subset(java.lang.String)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:<init>(java.lang.String,java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSource,java.lang.Iterable,long,org.apache.hadoop.metrics2.impl.MetricsConfig)" : {
    "getFilter" : 2,
    "getBoolean" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec:createDecompressor()" : {
    "getBzip2Decompressor" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "fullPath" : 1,
    "renameSnapshot" : 1
  },
  "org.apache.hadoop.security.SaslPlainServer:wrap(byte[],int,int)" : {
    "throwIfNotComplete" : 1
  },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:<init>(int,org.apache.hadoop.crypto.CipherSuite,java.lang.String)" : {
    "getName" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.crypto.key.UserProvider:getKeys()" : {
    "add" : 1,
    "getAllSecretKeys" : 1,
    "find" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getCanonicalServiceName()" : {
    "getCanonicalServiceName" : 1
  },
  "org.apache.hadoop.fs.FileUtil:createJarWithClassPath(java.lang.String,org.apache.hadoop.fs.Path,java.util.Map)" : {
    "createJarWithClassPath" : 1
  },
  "org.apache.hadoop.ipc.Server:channelRead(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" : {
    "read" : 1,
    "incrReceivedBytes" : 1,
    "channelIO" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt:changed(boolean)" : { },
  "org.apache.hadoop.conf.Configuration:getSocketAddr(java.lang.String,java.lang.String,int)" : {
    "createSocketAddr" : 1,
    "getTrimmed" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:numOpenConnections()" : {
    "getNumOpenConnections" : 1
  },
  "org.apache.hadoop.fs.shell.Concat:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:monitorActiveStatus()" : {
    "debug" : 1,
    "monitorLockNodeAsync" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell$CheckCommand:validate()" : {
    "noPasswordError" : 1,
    "getOut" : 3,
    "println" : 3,
    "noPasswordWarning" : 1,
    "printStackTrace" : 1,
    "getCredentialProvider" : 1,
    "needsPassword" : 1,
    "getErr" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.service.ServiceStateModel:toString()" : {
    "isEmpty" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.Groups:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.shell.PathData:getStringForChildPath(org.apache.hadoop.fs.Path)" : {
    "getName" : 1,
    "uriToString" : 1,
    "equals" : 1,
    "getPath" : 1,
    "endsWith" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getInputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getParityBlocks" : 1,
    "arraycopy" : 2,
    "getNumDataUnits" : 3,
    "getNumParityUnits" : 2,
    "getDataBlocks" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrClientBackoffDisconnected()" : {
    "incr" : 1
  },
  "org.apache.hadoop.ha.SshFenceByTcpPort:getKeyFiles()" : {
    "getConf" : 1,
    "getTrimmedStringCollection" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodecFactory:getCodecClassByName(java.lang.String)" : {
    "getClass" : 1,
    "getCodecByName" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:<init>(int,int,org.apache.hadoop.fs.impl.prefetch.PrefetchingStatistics)" : {
    "memoryAllocated" : 1,
    "allocate" : 1,
    "checkPositiveInteger" : 2,
    "requireNonNull" : 1
  },
  "org.apache.hadoop.fs.PathExistsException:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.fs.impl.WeakReferenceThreadMap:getForCurrentThread()" : {
    "get" : 1,
    "currentThreadId" : 1
  },
  "org.apache.hadoop.util.functional.LazyAutoCloseableReference:lazyAutoCloseablefromSupplier(java.util.function.Supplier)" : { },
  "org.apache.hadoop.fs.GlobFilter:<init>(java.lang.String,org.apache.hadoop.fs.PathFilter)" : {
    "init" : 1
  },
  "org.apache.hadoop.util.JvmPauseMonitor:serviceInit(org.apache.hadoop.conf.Configuration)" : {
    "getLong" : 2,
    "serviceInit" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:initZK()" : {
    "getInt" : 2,
    "getZKAuthInfos" : 1,
    "debug" : 1,
    "isSSLEnabled" : 1,
    "resolveConfIndirection" : 1,
    "get" : 2,
    "isEmpty" : 1,
    "parseACLs" : 1,
    "checkArgument" : 2,
    "getFileSystemClass" : 1,
    "excludeIncompatibleCredentialProviders" : 1,
    "getParentZnode" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:backupToOld(org.apache.hadoop.fs.Path)" : {
    "renameOrFail" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getCurrentKey(java.lang.String)" : {
    "call" : 1,
    "parseJSONKeyVersion" : 1,
    "checkNotEmpty" : 1,
    "createConnection" : 1,
    "createURL" : 1
  },
  "org.apache.hadoop.ipc.Server:<init>(java.lang.String,int,java.lang.Class,int,org.apache.hadoop.conf.Configuration)" : {
    "toString" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:add(org.apache.hadoop.fs.statistics.MeanStatistic)" : {
    "isEmpty" : 2
  },
  "org.apache.hadoop.util.Progress:addPhase(java.lang.String)" : {
    "addPhase" : 1,
    "setStatus" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:clear()" : {
    "setSamplesAndSum" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:initializeBindUsers()" : {
    "next" : 1,
    "add" : 2,
    "getPasswordForBindUser" : 2,
    "get" : 2,
    "cycle" : 1,
    "getStrings" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:hflush()" : {
    "hflush" : 1,
    "flush" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : {
    "mkdirs" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator:getLocalPathForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration,boolean)" : {
    "obtainContext" : 1,
    "getLocalPathForWrite" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:getUidAllowingUnknown(java.lang.String)" : {
    "getUid" : 1,
    "hashCode" : 1,
    "checkAndUpdateMaps" : 1,
    "info" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:stop()" : {
    "clearConfigs" : 1,
    "warn" : 1,
    "inMiniClusterMode" : 1,
    "stopSinks" : 1,
    "values" : 2,
    "stopTimer" : 1,
    "postStop" : 2,
    "preStop" : 2,
    "stopSources" : 1,
    "info" : 3
  },
  "org.apache.hadoop.io.compress.CompressionCodecFactory:getCodec(org.apache.hadoop.fs.Path)" : {
    "getName" : 1,
    "get" : 1,
    "toLowerCase" : 1,
    "lastKey" : 1,
    "isEmpty" : 1,
    "toString" : 1,
    "headMap" : 1,
    "reverse" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:setExcludesFile(java.lang.String)" : {
    "set" : 1,
    "get" : 1,
    "info" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addNoCacheFilter(org.eclipse.jetty.servlet.ServletContextHandler)" : {
    "getName" : 1,
    "emptyMap" : 1,
    "defineFilter" : 1
  },
  "org.apache.hadoop.io.Text:validateUTF8(byte[])" : {
    "validateUTF8" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging$StatisticsToString:toString()" : {
    "ioStatisticsToString" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "initialize" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:setConfigurationInternal(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "setTokenServiceUseIp" : 1,
    "newInstance" : 1,
    "getBoolean" : 2
  },
  "org.apache.hadoop.fs.impl.FlagSet:createFlagSet(java.lang.Class,java.lang.String,java.util.EnumSet)" : { },
  "org.apache.hadoop.crypto.key.KeyShell$Command:getKeyProvider()" : {
    "getOut" : 1,
    "println" : 1,
    "getConf" : 1,
    "printStackTrace" : 1,
    "getProviders" : 1,
    "get" : 1,
    "getErr" : 1,
    "isTransient" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyServers:refresh()" : {
    "refresh" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : {
    "nextCallId" : 1,
    "getReturnValue" : 1,
    "getState" : 2,
    "getProxy" : 1,
    "invokeOnce" : 1,
    "newCall" : 1,
    "isRpcInvocation" : 1
  },
  "org.apache.hadoop.fs.shell.find.BaseExpression:toString()" : {
    "getChildren" : 1,
    "getClass" : 1,
    "getArguments" : 1,
    "toString" : 2,
    "getSimpleName" : 1,
    "append" : 8
  },
  "org.apache.hadoop.util.ApplicationClassLoader:<init>(java.lang.String,java.lang.ClassLoader,java.util.List)" : {
    "constructUrlsFromClasspath" : 1
  },
  "org.apache.hadoop.crypto.CipherOption:<init>(org.apache.hadoop.crypto.CipherSuite)" : { },
  "org.apache.hadoop.fs.shell.Display:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 3
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addGaugeFunction(java.lang.String,java.util.function.Function)" : {
    "addFunction" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeLong:incr()" : {
    "incr" : 1
  },
  "org.apache.hadoop.conf.Configuration:getFloat(java.lang.String,float)" : {
    "parseFloat" : 1,
    "getTrimmed" : 1
  },
  "org.apache.hadoop.ipc.ProtocolMetaInfoServerSideTranslatorPB:getProtocolVersionForRpcKind(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.String)" : {
    "getProtocolName" : 1,
    "getSupportedProtocolVersions" : 1,
    "forName" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell:init(java.lang.String[])" : {
    "set" : 1,
    "getConf" : 1,
    "setSubCommand" : 4,
    "printGenericCommandUsage" : 2,
    "printShellUsage" : 1,
    "equals" : 11,
    "getErr" : 2
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:approximateCount(org.apache.hadoop.util.bloom.Key)" : {
    "clear" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedIO:byteBufferPositionedReadable_readFully(java.io.InputStream,long,java.nio.ByteBuffer)" : {
    "readFully" : 1,
    "uncheckIOExceptions" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setMeanStatistic(java.lang.String,org.apache.hadoop.fs.statistics.MeanStatistic)" : {
    "meanStatistics" : 1,
    "put" : 1
  },
  "org.apache.hadoop.log.LogLevel:printUsage()" : {
    "println" : 1,
    "printGenericCommandUsage" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:newObjectName(java.lang.String)" : {
    "uniqueName" : 1,
    "containsKey" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache$Key:toString()" : {
    "toString" : 1
  },
  "org.apache.hadoop.ipc.Server$Responder:doAsyncWrite(java.nio.channels.SelectionKey)" : {
    "warn" : 1,
    "attachment" : 1,
    "interestOps" : 1,
    "channel" : 1,
    "processResponse" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:getUid(java.lang.String)" : {
    "inverse" : 2,
    "intValue" : 1,
    "updateMapIncr" : 1,
    "get" : 2,
    "checkAndUpdateMaps" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:getRecordNumByLocation(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : {
    "get" : 1,
    "getBlockIndex" : 1,
    "getRecordIndex" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:copyStreamToTarget(java.io.InputStream,org.apache.hadoop.fs.shell.PathData)" : {
    "writeStreamToFile" : 1,
    "setWriteChecksum" : 1,
    "rename" : 1,
    "toString" : 1,
    "suffix" : 1,
    "close" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.jmx.JMXJsonServlet:writeObject(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.lang.String)" : {
    "getClass" : 1,
    "writeObject" : 2,
    "values" : 1,
    "writeStartObject" : 1,
    "writeStartArray" : 2,
    "writeEndObject" : 1,
    "writeNull" : 1,
    "extraWrite" : 1,
    "getCompositeType" : 1,
    "get" : 2,
    "writeNumber" : 1,
    "getLength" : 1,
    "writeEndArray" : 2,
    "toString" : 2,
    "isArray" : 1,
    "extraCheck" : 1,
    "keySet" : 1,
    "writeString" : 1,
    "writeBoolean" : 1,
    "writeAttribute" : 1
  },
  "org.apache.hadoop.net.DomainNameResolverFactory:newInstance(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "newInstance" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl:isLeafParent()" : {
    "isRack" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:readFields(java.io.DataInput)" : {
    "readFields" : 2,
    "readInt" : 3
  },
  "org.apache.hadoop.ipc.Client$Connection:handleSaslConnectionFailure(int,int,java.io.IOException,java.util.Random,org.apache.hadoop.security.UserGroupInformation)" : {
    "debug" : 2,
    "reloginFromTicketCache" : 1,
    "getHostName" : 1,
    "nextInt" : 1,
    "wrapException" : 1,
    "getLoginUser" : 3,
    "closeConnection" : 1,
    "sleep" : 1,
    "warn" : 2,
    "isLoginTicketBased" : 1,
    "getHostname" : 1,
    "doAs" : 1,
    "getPort" : 1,
    "reloginFromKeytab" : 1,
    "isLoginKeytabBased" : 1,
    "disposeSasl" : 1,
    "getUserName" : 1,
    "getAddress" : 2,
    "shouldAuthenticateOverKrb" : 1
  },
  "org.apache.hadoop.fs.PathPermissionException:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.io.SetFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:getProtocolVersion(java.lang.String,long)" : {
    "getProtocolVersion" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:createReqInfo()" : { },
  "org.apache.hadoop.security.Credentials:addAll(org.apache.hadoop.security.Credentials)" : {
    "addAll" : 1
  },
  "org.apache.hadoop.fs.FSBuilder:opt(java.lang.String,double)" : {
    "optLong" : 1
  },
  "org.apache.hadoop.util.FindClass:main(java.lang.String[])" : {
    "exit" : 2,
    "printStack" : 1,
    "run" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:prepareDecodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "checkCreateRSRawDecoder" : 1,
    "getOutputBlocks" : 1,
    "getErasedIndexes" : 1,
    "checkCreateXorRawEncoder" : 1,
    "getInputBlocks" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:moveToFrontCodeAndSend()" : {
    "sendMTFValues" : 1,
    "bsW" : 1,
    "generateMTFValues" : 1
  },
  "org.apache.hadoop.io.SecureIOUtils:checkStat(java.io.File,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : {
    "contains" : 1,
    "equals" : 2,
    "createRemoteUser" : 1,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:replacePattern(java.lang.String[],java.lang.String)" : {
    "getLocalHostName" : 1,
    "toLowerCase" : 1,
    "equals" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:preserveAttributes(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData,boolean)" : {
    "next" : 1,
    "setXAttr" : 1,
    "getKey" : 2,
    "getAclFromPermAndEntries" : 1,
    "getPermission" : 2,
    "entrySet" : 1,
    "getAclStatus" : 1,
    "getXAttrs" : 1,
    "getModificationTime" : 1,
    "getAccessTime" : 1,
    "hasNext" : 1,
    "setAcl" : 1,
    "getOwner" : 1,
    "setOwner" : 1,
    "getValue" : 1,
    "iterator" : 1,
    "hasAcl" : 1,
    "getEntries" : 1,
    "getGroup" : 1,
    "setPermission" : 1,
    "setTimes" : 1,
    "shouldPreserve" : 6,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : {
    "getFileBufferSize" : 1,
    "checkNotNull" : 2,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "getFSofPath" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:<init>(org.apache.hadoop.io.retry.FailoverProxyProvider,org.apache.hadoop.io.retry.RetryPolicy,java.util.Map)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:setAttrCacheMetric(org.apache.hadoop.metrics2.AbstractMetric,int)" : {
    "metricName" : 1,
    "name" : 1,
    "value" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable:set(java.lang.Object)" : {
    "checkPrimitive" : 1,
    "getClass" : 1,
    "checkArray" : 1,
    "checkDeclaredComponentType" : 1,
    "getComponentType" : 1,
    "getLength" : 1
  },
  "org.apache.hadoop.fs.BulkDeleteUtils:validatePathIsUnderParent(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "getPrimitivePower" : 1,
    "getFieldSize" : 1,
    "getNumDataUnits" : 2,
    "getNumParityUnits" : 3,
    "multiply" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getDefaultBlockSize()" : {
    "fullPath" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation$ThreadSafeSampleStat:add(double)" : {
    "add" : 1
  },
  "org.apache.hadoop.crypto.OpensslCipher:update(java.nio.ByteBuffer,java.nio.ByteBuffer)" : {
    "limit" : 1,
    "checkState" : 1,
    "update" : 1,
    "checkArgument" : 1,
    "position" : 5,
    "isDirect" : 2,
    "remaining" : 2
  },
  "org.apache.hadoop.fs.FilterFileSystem:getTrashRoot(org.apache.hadoop.fs.Path)" : {
    "getTrashRoot" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:msync()" : {
    "msync" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "getFileHarStatus" : 1,
    "toFileStatus" : 1
  },
  "org.apache.hadoop.util.Sets:addAll(java.util.TreeSet,java.lang.Iterable)" : {
    "cast" : 1,
    "iterator" : 1,
    "addAll" : 2
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:<init>(org.apache.hadoop.ipc.Server,org.apache.hadoop.conf.Configuration)" : {
    "debug" : 1,
    "getPort" : 1,
    "valueOf" : 1,
    "getBoolean" : 1,
    "getInts" : 1,
    "tag" : 2,
    "getServerName" : 1,
    "newQuantiles" : 6,
    "getMetricsTimeUnit" : 1,
    "getListenerAddress" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:openConnection(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token)" : {
    "openConnection" : 2
  },
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:flush()" : {
    "verifyState" : 1
  },
  "org.apache.hadoop.fs.FileContext:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatus" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1,
    "getSymlink" : 1
  },
  "org.apache.hadoop.fs.Path:<init>(org.apache.hadoop.fs.Path,java.lang.String)" : { },
  "org.apache.hadoop.metrics2.source.JvmMetrics:create(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSystem)" : {
    "name" : 1,
    "description" : 1,
    "getBoolean" : 1,
    "register" : 1
  },
  "org.apache.hadoop.ipc.Server:getProtocol()" : {
    "get" : 1,
    "getProtocol" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:incrementCurrentKeyId()" : {
    "currentThread" : 1,
    "debug" : 1,
    "incrSharedCount" : 1,
    "interrupt" : 1,
    "getCount" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "applyItem" : 1,
    "isDepthFirst" : 1,
    "getOptions" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRates:add(java.lang.String,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.io.WritableComparator:hashBytes(byte[],int)" : {
    "hashBytes" : 1
  },
  "org.apache.hadoop.util.bloom.BloomFilter:add(org.apache.hadoop.util.bloom.Key)" : {
    "set" : 1,
    "clear" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:<init>(java.lang.String,double,long)" : {
    "computeCapacity" : 1,
    "max" : 1,
    "create" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcProtobufRequest:<init>()" : { },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:incrementMaximum(java.lang.String,long)" : {
    "get" : 1,
    "incAtomicLong" : 1
  },
  "org.apache.hadoop.fs.permission.PermissionParser:combineModes(int,boolean)" : {
    "combineModeSegments" : 4
  },
  "org.apache.hadoop.ipc.CallQueueManager:parseCapacityWeights(int,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getInts" : 1,
    "getDefaultQueueCapacityWeights" : 1
  },
  "org.apache.hadoop.fs.FileContext:getUMask()" : {
    "getUMask" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:equals(java.lang.Object)" : {
    "getClass" : 2,
    "getSamples" : 2,
    "isEmpty" : 2,
    "getSum" : 2
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:makeAbsolute(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "isAbsolute" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:initialize(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)" : {
    "warn" : 1,
    "getBoolean" : 1,
    "getFloat" : 2
  },
  "org.apache.hadoop.fs.shell.CommandFormat$TooManyArgumentsException:<init>(int,int)" : { },
  "org.apache.hadoop.fs.FileUtil:stat2Paths(org.apache.hadoop.fs.FileStatus[],org.apache.hadoop.fs.Path)" : {
    "stat2Paths" : 1
  },
  "org.apache.hadoop.util.VersionInfo:getCompilePlatform()" : {
    "_getCompilePlatform" : 1
  },
  "org.apache.hadoop.ipc.RPC:waitForProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,long)" : {
    "getProxy" : 1,
    "waitForProtocolProxy" : 1
  },
  "org.apache.hadoop.io.file.tfile.Utils$Version:equals(java.lang.Object)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.fs.audit.CommonAuditContext:createInstance()" : {
    "init" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : {
    "getDefaultSocketFactory" : 1,
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getDefaultReplication" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:newSink(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSink,org.apache.hadoop.metrics2.impl.MetricsConfig)" : {
    "getInt" : 4,
    "getFilter" : 3,
    "getFloat" : 1,
    "getString" : 1
  },
  "org.apache.hadoop.io.compress.lz4.Lz4Compressor:reinit(org.apache.hadoop.conf.Configuration)" : {
    "reset" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:launchService(org.apache.hadoop.conf.Configuration,org.apache.hadoop.service.Service,java.util.List,boolean,boolean)" : {
    "getFailureCause" : 1,
    "debug" : 1,
    "getServiceName" : 1,
    "toString" : 1,
    "coreServiceLaunch" : 1,
    "getFailureState" : 1,
    "error" : 1,
    "noteException" : 1,
    "convertToExitException" : 1,
    "getServiceState" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:setupConnection(org.apache.hadoop.security.UserGroupInformation)" : {
    "bindToLocalAddress" : 1,
    "handleConnectionFailure" : 2,
    "updateAddress" : 2,
    "setTcpNoDelay" : 1,
    "isUnresolved" : 1,
    "getHostname" : 1,
    "bind" : 1,
    "getUserName" : 1,
    "connect" : 1,
    "setTrafficClass" : 1,
    "hasKerberosCredentials" : 1,
    "debug" : 2,
    "getHostName" : 1,
    "setReuseAddress" : 1,
    "getMessage" : 1,
    "setSoTimeout" : 1,
    "getProtocol" : 1,
    "setKeepAlive" : 1,
    "wrapException" : 1,
    "handleConnectionTimeout" : 1,
    "warn" : 1,
    "getHostFromPrincipal" : 1,
    "setPerformancePreferences" : 1,
    "createSocket" : 1,
    "getPort" : 1,
    "getLocalInetAddress" : 1,
    "getAnnotation" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:getInfo(org.apache.hadoop.metrics2.annotation.Metric,java.lang.reflect.Method)" : {
    "getName" : 1,
    "getInfo" : 1
  },
  "org.apache.hadoop.fs.DU:<init>(org.apache.hadoop.fs.GetSpaceUsed$Builder)" : {
    "getInitialUsed" : 1,
    "getInterval" : 1,
    "getJitter" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState)" : {
    "checkGetDirectBuffer" : 1,
    "resetOutputBuffers" : 1,
    "getNullIndexes" : 1,
    "resetBuffer" : 2,
    "doDecodeImpl" : 1,
    "limit" : 1,
    "position" : 1,
    "getNumParityUnits" : 2
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode:<init>(java.lang.String,java.lang.String,java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:byteBufferPositionedReadable_readFullyAvailable(java.io.InputStream)" : {
    "extractIOEs" : 1,
    "available" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter:init(javax.servlet.FilterConfig)" : {
    "initHttpHeaderMap" : 1
  },
  "org.apache.hadoop.util.Lists:partition(java.util.List,int)" : {
    "add" : 1,
    "subList" : 1,
    "min" : 1,
    "size" : 3,
    "checkArgument" : 2
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:tryResolveInRegexMountpoint(java.lang.String,boolean)" : {
    "resolve" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getNumProcessors()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.FileUtil:chmod(java.lang.String,java.lang.String,boolean)" : {
    "debug" : 1,
    "arraycopy" : 1,
    "getPath" : 1,
    "stringifyException" : 1,
    "getSetPermissionCommand" : 1,
    "isDebugEnabled" : 1,
    "getExitCode" : 1,
    "execute" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRate(java.lang.String,java.lang.String)" : {
    "newRate" : 1
  },
  "org.apache.hadoop.log.LogThrottlingHelper:<init>(long)" : { },
  "org.apache.hadoop.io.UTF8:getBytes(java.lang.String)" : {
    "arraycopy" : 1,
    "get" : 1,
    "length" : 1,
    "getLength" : 1,
    "reset" : 1,
    "writeChars" : 1,
    "utf8Length" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.security.KDiag:fail(java.lang.String,java.lang.String,java.lang.Object[])" : {
    "error" : 1
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touchz:processOptions(java.util.LinkedList)" : {
    "parse" : 1
  },
  "org.apache.hadoop.util.RunJar:main(java.lang.String[])" : {
    "run" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : {
    "file" : 1,
    "makeQualified" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceShutdownHook:run()" : {
    "shutdown" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:setJaasConfiguration(org.apache.zookeeper.client.ZKClientConfig)" : {
    "warn" : 1,
    "setProperty" : 1,
    "getServerPrincipal" : 1,
    "setConfiguration" : 1
  },
  "org.apache.hadoop.fs.Path:checkNotRelative()" : {
    "getScheme" : 1,
    "toUri" : 1,
    "isAbsolute" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:add(org.apache.hadoop.net.Node)" : {
    "add" : 1,
    "interAddNodeWithEmptyRack" : 1,
    "debug" : 1,
    "unlock" : 1,
    "writeLock" : 2,
    "getNodeForNetworkLocation" : 1,
    "error" : 1,
    "getLevel" : 1,
    "getNetworkLocation" : 1,
    "locationToDepth" : 1,
    "getPath" : 4,
    "lock" : 1,
    "toString" : 1,
    "incrementRacks" : 1,
    "info" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:hsync()" : {
    "flush" : 1,
    "hsync" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping$RawScriptBasedMapping:runResolveCommand(java.util.List,java.lang.String)" : {
    "add" : 2,
    "warn" : 2,
    "getProperty" : 1,
    "size" : 4,
    "get" : 1,
    "toArray" : 1,
    "toString" : 3,
    "execute" : 1,
    "append" : 2,
    "getOutput" : 1
  },
  "org.apache.hadoop.util.dynamic.BindingUtils:available(org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod)" : {
    "isNoop" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:readBuffer(org.apache.hadoop.io.DataInputBuffer,org.apache.hadoop.io.compress.CompressionInputStream)" : {
    "readVInt" : 1,
    "resetState" : 1,
    "getLength" : 1,
    "reset" : 1,
    "write" : 1,
    "close" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.util.LightWeightCache:put(java.lang.Object)" : {
    "offer" : 1,
    "evictExpiredEntries" : 1,
    "getClass" : 1,
    "setExpirationTime" : 1,
    "evictEntries" : 1,
    "remove" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkIntegerMultiple(long,java.lang.String,long,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:addOrUpdateDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey,boolean)" : {
    "withMode" : 1,
    "debug" : 4,
    "checkExists" : 1,
    "setData" : 1,
    "setVersion" : 1,
    "getKeyId" : 2,
    "getNodePath" : 1,
    "toByteArray" : 2,
    "create" : 1,
    "isDebugEnabled" : 1,
    "close" : 1,
    "write" : 1,
    "forPath" : 3
  },
  "org.apache.hadoop.net.SocketOutputStream:<init>(java.net.Socket,long)" : {
    "getChannel" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFileContext(org.apache.hadoop.conf.Configuration)" : {
    "getScheme" : 2,
    "trim" : 1,
    "getFileContext" : 1,
    "getTrimmed" : 1,
    "format" : 1,
    "isEmpty" : 1,
    "create" : 1
  },
  "org.apache.hadoop.io.compress.CompressionInputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFactory:registerCommands(java.lang.Class)" : {
    "stringifyException" : 1,
    "invoke" : 1,
    "getMethod" : 1
  },
  "org.apache.hadoop.fs.shell.Display$Cat:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "printToStdout" : 1,
    "setVerifyChecksum" : 1,
    "toString" : 1,
    "getInputStream" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.FSDataInputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.fs.FileUtil:list(java.io.File)" : {
    "canRead" : 1,
    "toString" : 2,
    "list" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine:getProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getRetryPolicy" : 1,
    "getRpcTimeout" : 1,
    "getProxy" : 1,
    "getAddress" : 1,
    "getTicket" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:delete(org.apache.hadoop.fs.Path)" : {
    "delete" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:incrementDelegationTokenSeqNum()" : {
    "currentThread" : 1,
    "debug" : 1,
    "unlock" : 1,
    "incrSharedCount" : 1,
    "interrupt" : 1,
    "lock" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:read(byte[],int,int)" : {
    "min" : 1,
    "get" : 1,
    "hasRemaining" : 1,
    "available" : 1,
    "verifyOpen" : 1,
    "checkArgument" : 2
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:getRemain()" : {
    "checkEOF" : 1
  },
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:storeDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "getKeyId" : 1,
    "storeNewMasterKey" : 1,
    "put" : 1
  },
  "org.apache.hadoop.util.StringUtils:escapeString(java.lang.String,char,char[])" : {
    "hasChar" : 1,
    "length" : 1,
    "toString" : 1,
    "append" : 2,
    "charAt" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : {
    "getThreadUsage" : 1,
    "getMemoryUsage" : 1,
    "setContext" : 1,
    "tag" : 2,
    "addRecord" : 1,
    "getThreadUsageFromGroup" : 1,
    "getGcUsage" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "getFieldSize" : 1,
    "dumpMatrix" : 1,
    "getNumAllUnits" : 2,
    "allowVerboseDump" : 1,
    "getNumDataUnits" : 3,
    "genCauchyMatrix" : 1
  },
  "org.apache.hadoop.http.HttpServer2:hasAdministratorAccess(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "userHasAdministratorAccess" : 1,
    "warn" : 1,
    "getAttribute" : 2,
    "getRequestURI" : 1,
    "getRemoteUser" : 1,
    "sendError" : 2,
    "getBoolean" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:rollOverAvgs()" : {
    "getSnapshotTimeStamp" : 1,
    "offerLast" : 2,
    "getKey" : 1,
    "getValue" : 1,
    "total" : 1,
    "entrySet" : 1,
    "numSamples" : 1,
    "computeIfAbsent" : 1,
    "lastStat" : 2,
    "pollFirst" : 1,
    "setChanged" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:help(java.lang.String[])" : {
    "help" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getNumCores()" : {
    "readProcCpuInfoFile" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getXAttrs(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getXAttrs" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:checkParameterValidity(java.lang.String[],java.util.Map)" : {
    "println" : 2,
    "containsKey" : 1,
    "printUsage" : 3,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainInputStream:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$LoginParams:getDefaults()" : {
    "put" : 3,
    "getenv" : 3
  },
  "org.apache.hadoop.conf.StorageUnit$1:getDefault(double)" : { },
  "org.apache.hadoop.fs.shell.CopyCommands$AppendToFile:processOptions(java.util.LinkedList)" : {
    "getRemoteDestination" : 1,
    "size" : 1,
    "getOpt" : 1,
    "processOptions" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InnerCache:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "writeLock" : 2,
    "unlock" : 2,
    "get" : 2,
    "readLock" : 2,
    "lock" : 2,
    "getNewInstance" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.SaslOutputStream:write(int)" : {
    "write" : 2
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:reEstablishSession()" : {
    "warn" : 2,
    "debug" : 1,
    "sleepFor" : 2,
    "createConnection" : 1,
    "toString" : 2,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.util.PriorityQueue:insert(java.lang.Object)" : {
    "top" : 1,
    "lessThan" : 1,
    "put" : 1,
    "adjustTop" : 1
  },
  "org.apache.hadoop.conf.Configuration:getDouble(java.lang.String,double)" : {
    "parseDouble" : 1,
    "getTrimmed" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:updateDecryptor(org.apache.hadoop.crypto.Decryptor,long,byte[])" : {
    "init" : 1,
    "getCounter" : 1,
    "calculateIV" : 1
  },
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[],java.io.File,java.util.Map,long,boolean)" : {
    "setWorkingDirectory" : 1,
    "clone" : 1,
    "setEnvironment" : 1
  },
  "org.apache.hadoop.security.CompositeGroupsMapping:setConf(org.apache.hadoop.conf.Configuration)" : {
    "loadMappingProviders" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.shell.Tail:dumpFromOffset(org.apache.hadoop.fs.shell.PathData,long)" : {
    "openFile" : 1,
    "getConf" : 1,
    "max" : 1,
    "getPos" : 1,
    "getLen" : 1,
    "refreshStatus" : 1,
    "seek" : 1,
    "copyBytes" : 1
  },
  "org.apache.hadoop.util.JvmPauseMonitor:formatMessage(long,java.util.Map,java.util.Map)" : {
    "add" : 1,
    "newArrayList" : 1,
    "get" : 2,
    "subtract" : 1,
    "intersection" : 1,
    "isEmpty" : 1,
    "toString" : 1,
    "join" : 1,
    "keySet" : 2,
    "on" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.MultiSchemeDelegationTokenAuthenticationHandler:init(java.util.Properties)" : {
    "add" : 2,
    "init" : 1,
    "split" : 2,
    "getProperty" : 2,
    "checkNotNull" : 2,
    "containsAll" : 1,
    "checkAuthScheme" : 2,
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.MapWritable:<init>(org.apache.hadoop.io.MapWritable)" : {
    "copy" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.XORErasureCodec:createEncoder()" : {
    "getCoderOptions" : 1
  },
  "org.apache.hadoop.io.compress.BlockCompressorStream:write(byte[],int,int)" : {
    "min" : 1,
    "needsInput" : 2,
    "compress" : 2,
    "reset" : 2,
    "finish" : 2,
    "finished" : 2,
    "rawWriteInt" : 2,
    "getBytesRead" : 2,
    "setInput" : 2
  },
  "org.apache.hadoop.fs.ContentSummary:toString(boolean,boolean,boolean,java.util.List)" : {
    "toString" : 1
  },
  "org.apache.hadoop.fs.FSInputStream:validatePositionedReadArgs(long,byte[],int,int)" : {
    "checkArgument" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekTo(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : {
    "initBlock" : 2,
    "inBlockAdvance" : 2,
    "parkCursorAtEnd" : 1,
    "compareTo" : 3,
    "getBlockIndex" : 4,
    "getRecordIndex" : 4
  },
  "org.apache.hadoop.fs.shell.AclCommands$SetfaclCommand:getAclEntries(org.apache.hadoop.fs.shell.PathData)" : {
    "isRecursive" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:warmUpEncryptedKeys(java.lang.String[])" : {
    "initializeQueuesForKeys" : 1
  },
  "org.apache.hadoop.net.SocketOutputStream:write(byte[],int,int)" : {
    "hasRemaining" : 1,
    "write" : 1,
    "close" : 1,
    "wrap" : 1,
    "remaining" : 1,
    "capacity" : 1
  },
  "org.apache.hadoop.util.CrcComposer:update(java.io.DataInputStream,long,long)" : {
    "update" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : {
    "fullPath" : 1,
    "getPath" : 1,
    "getFileBlockLocations" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:getWeight(java.util.List)" : {
    "getWeight" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrClientBackoff()" : {
    "incr" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations$End:getDebugInfo()" : {
    "getDebugInfo" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.io.UTF8:readString(java.io.DataInput)" : {
    "readChars" : 1,
    "toString" : 1,
    "readUnsignedShort" : 1
  },
  "org.apache.hadoop.io.SequenceFile$RecordCompressWriter:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : { },
  "org.apache.hadoop.security.UserGroupInformation$HadoopConfiguration:getAppConfigurationEntry(java.lang.String)" : {
    "add" : 4,
    "getKerberosEntry" : 1,
    "containsKey" : 1,
    "equals" : 2,
    "toArray" : 1
  },
  "org.apache.hadoop.conf.ReconfigurationServlet:printConf(java.io.PrintWriter,org.apache.hadoop.conf.Reconfigurable)" : {
    "print" : 6,
    "println" : 8,
    "getConf" : 1,
    "isPropertyReconfigurable" : 1,
    "escapeHtml4" : 6,
    "getChangedProperties" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getLen()" : {
    "getLen" : 1
  },
  "org.apache.hadoop.io.Text:<init>(byte[])" : {
    "set" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:setLastLogin(long)" : {
    "setLastLogin" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableInverseQuantiles$InversePercentile:<init>(double)" : { },
  "org.apache.hadoop.fs.shell.Command:run(java.lang.String[])" : {
    "displayError" : 2,
    "isDeprecated" : 1,
    "getReplacementCommand" : 1,
    "displayWarning" : 1,
    "processOptions" : 1,
    "processRawArguments" : 1,
    "asList" : 1,
    "exitCodeForError" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getStatistics()" : {
    "getStatistics" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSupport:snapshotIOStatistics(org.apache.hadoop.fs.statistics.IOStatistics)" : { },
  "org.apache.hadoop.fs.FilterFs:listXAttrs(org.apache.hadoop.fs.Path)" : {
    "listXAttrs" : 1
  },
  "org.apache.hadoop.http.HtmlQuoting:needsQuoting(java.lang.String)" : {
    "needsQuoting" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : { },
  "org.apache.hadoop.fs.HarFileSystem:getUsed(org.apache.hadoop.fs.Path)" : {
    "getUsed" : 1
  },
  "org.apache.hadoop.fs.shell.Command:processArgument(org.apache.hadoop.fs.shell.PathData)" : {
    "processNonexistentPath" : 1,
    "processPathArgument" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:disconnect(org.apache.commons.net.ftp.FTPClient)" : {
    "warn" : 1,
    "disconnect" : 1,
    "logout" : 1,
    "isConnected" : 1,
    "getReplyCode" : 1
  },
  "org.apache.hadoop.io.InputBuffer:reset(byte[],int)" : {
    "reset" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getCpuFrequency()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.fs.FSInputStream:readFully(long,byte[],int,int)" : {
    "read" : 1,
    "validatePositionedReadArgs" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getAllStoragePolicies()" : {
    "addAll" : 1,
    "getAllStoragePolicies" : 1,
    "getChildFileSystems" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:<init>(java.lang.Class,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getConnectionId" : 1
  },
  "org.apache.hadoop.fs.FileSystem:newInstance(org.apache.hadoop.conf.Configuration)" : {
    "getDefaultUri" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:flushBuffer()" : {
    "writeChunk" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileMeta:makeComparator(java.lang.String)" : {
    "forName" : 1,
    "trim" : 1,
    "equals" : 1,
    "length" : 2,
    "newInstance" : 1,
    "toString" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.DefaultStringifier:toString(java.lang.Object)" : {
    "encodeBase64" : 1,
    "serialize" : 1,
    "arraycopy" : 1,
    "getLength" : 1,
    "reset" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:<init>(java.io.File,long,org.apache.hadoop.fs.FileSystem)" : {
    "getLastAccessTime" : 1,
    "getWorkingDirectory" : 1,
    "makeQualified" : 1,
    "getPath" : 1,
    "length" : 1,
    "lastModified" : 1,
    "getUri" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.StringUtils:byteToHexString(byte[])" : {
    "byteToHexString" : 1
  },
  "org.apache.hadoop.fs.Path:isRoot()" : {
    "getParent" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableCounterLong:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "clearChanged" : 1,
    "value" : 1,
    "info" : 1,
    "addCounter" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.crypto.JceCtrCryptoCodec$JceCtrCipher:<init>(int,java.lang.String,org.apache.hadoop.crypto.CipherSuite,java.lang.String)" : {
    "getName" : 2,
    "isEmpty" : 1,
    "getInstance" : 2
  },
  "org.apache.hadoop.fs.Trash:moveToAppropriateTrash(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : {
    "getTrashInterval" : 1,
    "warn" : 1,
    "setLong" : 1,
    "resolvePath" : 1,
    "toUri" : 1,
    "get" : 1,
    "moveToTrash" : 2,
    "getBoolean" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:checksumOpt(org.apache.hadoop.fs.Options$ChecksumOpt)" : {
    "checkNotNull" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:write(java.io.DataOutput)" : {
    "writeString" : 1,
    "getAclString" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSEncryptedKeyVersion:<init>(java.lang.String,java.lang.String,byte[],java.lang.String,byte[])" : { },
  "org.apache.hadoop.conf.Configuration:getPasswordFromCredentialProviders(java.lang.String)" : {
    "getCredentialEntry" : 1,
    "getClass" : 1,
    "getName" : 1,
    "getProviders" : 1,
    "getCredential" : 1
  },
  "org.apache.hadoop.ipc.Server:refreshCallQueue(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "getSchedulerClass" : 1,
    "getQueueClassPrefix" : 1,
    "getQueueClass" : 1,
    "setClientBackoffEnabled" : 1,
    "getClientBackoffEnable" : 1,
    "swapQueue" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:getServerFailOverEnable(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "split" : 1,
    "get" : 1,
    "getBoolean" : 2,
    "info" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolServerSideTranslatorPB:refresh(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ipc.proto.GenericRefreshProtocolProtos$GenericRefreshRequestProto)" : {
    "hasIdentifier" : 1,
    "size" : 1,
    "getIdentifier" : 1,
    "toArray" : 1,
    "refresh" : 1,
    "pack" : 1,
    "getArgsList" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.DummyRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:blockSort()" : {
    "randomiseBlock" : 1,
    "mainSort" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:release(org.apache.hadoop.fs.impl.prefetch.BufferData)" : {
    "checkNotNull" : 1,
    "releaseDoneBlocks" : 1,
    "release" : 1,
    "get" : 1,
    "clear" : 1,
    "format" : 1,
    "canRelease" : 1,
    "checkArgument" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.ipc.RetryCache$CacheEntryWithPayload:<init>(byte[],int,java.lang.Object,long)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:<init>(org.apache.hadoop.fs.AbstractFileSystem,org.apache.hadoop.fs.Path)" : {
    "checkPath" : 2,
    "getScheme" : 1,
    "toUri" : 2,
    "getUriPath" : 1,
    "getPath" : 2,
    "toString" : 1,
    "getUriDefaultPort" : 1,
    "getAuthority" : 1,
    "substring" : 1,
    "getUri" : 4
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:<init>(org.apache.hadoop.fs.FileSystem$Statistics)" : {
    "add" : 1,
    "visitAll" : 1
  },
  "org.apache.hadoop.conf.Configuration:set(java.lang.String,java.lang.String,java.lang.String)" : {
    "isDeprecated" : 1,
    "getProps" : 4,
    "isEmpty" : 1,
    "checkArgument" : 2,
    "getDeprecatedKeyMap" : 1,
    "getAlternativeNames" : 1,
    "trim" : 1,
    "equals" : 1,
    "setProperty" : 6,
    "get" : 2,
    "getOverlay" : 3,
    "handleDeprecation" : 1,
    "putIntoUpdatingResource" : 3
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:release()" : {
    "release" : 2
  },
  "org.apache.hadoop.fs.FilterFileSystem:resolveLink(org.apache.hadoop.fs.Path)" : {
    "resolveLink" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "makeQualified" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:chooseRandom(java.lang.String,java.lang.String,java.util.Collection)" : {
    "contains" : 1,
    "isChildScope" : 2,
    "unlock" : 1,
    "debug" : 3,
    "readLock" : 2,
    "getNumOfLeaves" : 2,
    "lock" : 1,
    "isDebugEnabled" : 1,
    "getNode" : 2,
    "countNumOfAvailableNodes" : 3,
    "chooseRandom" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "deleteSnapshot" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:sendResponse(org.apache.hadoop.ipc.Server$RpcCall)" : {
    "doRespond" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[],long,boolean)" : {
    "createEncryptor" : 1,
    "checkCodec" : 1,
    "allocateDirect" : 2,
    "updateEncryptor" : 1,
    "checkBufferSize" : 1,
    "clone" : 3
  },
  "org.apache.hadoop.ipc.internal.ShadedProtobufHelper:tokenFromProto(org.apache.hadoop.security.proto.SecurityProtos$TokenProto)" : {
    "getPassword" : 1,
    "getIdentifier" : 1,
    "toByteArray" : 2,
    "getKind" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_getCurrent()" : {
    "invoke" : 1,
    "checkIoStatisticsContextAvailable" : 1
  },
  "org.apache.hadoop.util.FindClass:loadedClass(java.lang.String,java.lang.Class)" : {
    "getLocation" : 1,
    "getProtectionDomain" : 1,
    "getCodeSource" : 1,
    "out" : 2
  },
  "org.apache.hadoop.security.authorize.AccessControlList:removeUser(java.lang.String)" : {
    "isAllAllowed" : 1,
    "isWildCardACLValue" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache:closeAll(org.apache.hadoop.security.UserGroupInformation)" : {
    "add" : 2,
    "getValue" : 1,
    "getKey" : 1,
    "size" : 1,
    "entrySet" : 2,
    "equals" : 1,
    "isEmpty" : 1,
    "createIOException" : 1,
    "close" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:offer(org.apache.hadoop.ipc.Schedulable,long,java.util.concurrent.TimeUnit)" : {
    "offer" : 1,
    "signalNotEmpty" : 1,
    "get" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Du:setUsagesTable(org.apache.hadoop.fs.shell.FsUsage$TableBuilder)" : { },
  "org.apache.hadoop.util.JvmPauseMonitor:serviceStop()" : {
    "currentThread" : 1,
    "interrupt" : 2,
    "serviceStop" : 1,
    "join" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "createSymlink" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:append(java.lang.Object,java.lang.Object)" : {
    "writeInt" : 2,
    "checkAndWriteSync" : 1,
    "serialize" : 3,
    "getClass" : 4,
    "getName" : 2,
    "flush" : 1,
    "resetState" : 1,
    "getLength" : 3,
    "reset" : 1,
    "finish" : 1,
    "write" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : {
    "initBloomFilter" : 1,
    "getFileSystem" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec:createOutputStream(java.io.OutputStream)" : {
    "createOutputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "nflyStatus" : 2,
    "mayThrowFileNotFound" : 1,
    "contains" : 1,
    "workSet" : 1,
    "processThrowable" : 2,
    "getModificationTime" : 1,
    "createIOException" : 1,
    "updateFileStatus" : 1
  },
  "org.apache.hadoop.util.FindClass:explainResult(int,java.lang.String)" : {
    "err" : 1
  },
  "org.apache.hadoop.fs.FSDataInputStream:minSeekForVectorReads()" : {
    "minSeekForVectorReads" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:openFile(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "openFile" : 1
  },
  "org.apache.hadoop.io.compress.DefaultCodec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.ipc.ExternalCall:<init>(java.security.PrivilegedExceptionAction)" : { },
  "org.apache.hadoop.util.InstrumentedLock:logWaitWarning(long,org.apache.hadoop.util.InstrumentedLock$SuppressedSnapshot)" : {
    "warn" : 1,
    "currentThread" : 1,
    "getStackTrace" : 1,
    "getMaxSuppressedWait" : 1,
    "format" : 1,
    "getSuppressedCount" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.conf.ConfigurationWithLogging:set(java.lang.String,java.lang.String,java.lang.String)" : {
    "set" : 1,
    "redact" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.IntrusiveCollection:removeAll(java.util.Collection)" : {
    "remove" : 1
  },
  "org.apache.hadoop.fs.PathPermissionException:<init>(java.lang.String,java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm:getDecompressor()" : {
    "getDecompressor" : 1,
    "warn" : 1,
    "debug" : 1,
    "getCodec" : 1,
    "hashCode" : 1,
    "reset" : 1,
    "finished" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:processRpcOutOfBandRequest(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto,org.apache.hadoop.ipc.RpcWritable$Buffer)" : {
    "saslReadAndProcess" : 1,
    "debug" : 1,
    "processConnectionContext" : 1,
    "getCallId" : 1
  },
  "org.apache.hadoop.security.User:<init>(java.lang.String)" : { },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:writeBufData(byte[],int,int)" : {
    "writeVInt" : 1,
    "write" : 2
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:createTmpFileForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration)" : {
    "getParent" : 1,
    "getName" : 1,
    "getLocalPathForWrite" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "createTempFile" : 1,
    "deleteOnExit" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:needsPassword()" : {
    "get" : 1,
    "locatePassword" : 1
  },
  "org.apache.hadoop.security.ProviderUtils:noPasswordError(java.lang.String,java.lang.String)" : {
    "noPasswordInstruction" : 1
  },
  "org.apache.hadoop.crypto.OpensslCipher:finalize()" : {
    "clean" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getClientBackoffDisconnected()" : {
    "value" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "fullPath" : 1,
    "mkdirs" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:wrapLocalFileStatus(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$TokenSelector:<init>()" : { },
  "org.apache.hadoop.service.launcher.ServiceLauncher:launchServiceAndExit(java.util.List)" : {
    "loadConfigurationClasses" : 1,
    "registerFailureHandling" : 1,
    "debug" : 2,
    "bindCommandOptions" : 1,
    "getUsageMessage" : 1,
    "getExitCode" : 1,
    "noteException" : 1,
    "exit" : 1,
    "println" : 2,
    "flush" : 2,
    "extractCommandOptions" : 1,
    "addResource" : 1,
    "startupShutdownMessage" : 1,
    "createConfiguration" : 1,
    "launchService" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1,
    "append" : 3
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "unsetStoragePolicy" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:logWarning(long,org.apache.hadoop.util.InstrumentedLock$SuppressedSnapshot)" : {
    "warn" : 1,
    "currentThread" : 1,
    "getStackTrace" : 1,
    "getMaxSuppressedWait" : 1,
    "format" : 1,
    "getSuppressedCount" : 1
  },
  "org.apache.hadoop.security.ssl.SSLFactory:createSSLEngine()" : {
    "disableExcludedCiphers" : 1,
    "createSSLEngine" : 1,
    "setUseClientMode" : 2,
    "setEnabledProtocols" : 1,
    "setNeedClientAuth" : 1
  },
  "org.apache.hadoop.io.MapWritable:equals(java.lang.Object)" : {
    "size" : 2,
    "entrySet" : 2,
    "equals" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:setPmdkSupportState(int)" : {
    "values" : 1,
    "getStateCode" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.shell.SetReplication:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "add" : 1,
    "println" : 2,
    "isErasureCoded" : 1,
    "isFile" : 1,
    "toString" : 1,
    "setReplication" : 1,
    "isSymlink" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$ProgressableOption:<init>(org.apache.hadoop.util.Progressable)" : { },
  "org.apache.hadoop.conf.Configuration:addResource(java.io.InputStream)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getFileChecksum(org.apache.hadoop.fs.Path,long)" : {
    "fullPath" : 1,
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:startUpload()" : {
    "startUpload" : 1,
    "limit" : 1,
    "position" : 2,
    "bufferCapacityUsed" : 1
  },
  "org.apache.hadoop.fs.FileSystem:fixRelativePart(org.apache.hadoop.fs.Path)" : {
    "getWorkingDirectory" : 1,
    "isUriPathAbsolute" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 3
  },
  "org.apache.hadoop.fs.FSOutputSummer:writeChecksumChunks(byte[],int,int)" : {
    "createWriteTraceScope" : 1,
    "min" : 1,
    "getBytesPerChecksum" : 3,
    "writeChunk" : 1,
    "getChecksumSize" : 2,
    "close" : 1,
    "calculateChunkedSums" : 1
  },
  "org.apache.hadoop.tracing.NullTraceScope:<init>()" : { },
  "org.apache.hadoop.fs.ftp.FTPInputStream:read()" : {
    "read" : 1,
    "incrementBytesRead" : 1
  },
  "org.apache.hadoop.http.HttpServer2:stop()" : {
    "cancel" : 1,
    "stop" : 2,
    "getDisplayName" : 4,
    "clearAttributes" : 1,
    "get" : 1,
    "destroy" : 1,
    "isPresent" : 1,
    "ifExceptionThrow" : 1,
    "error" : 4,
    "close" : 1,
    "remove" : 1,
    "addMultiException" : 4
  },
  "org.apache.hadoop.crypto.CryptoInputStream:getPos()" : {
    "checkStream" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.util.Shell:getRunScriptCommand(java.io.File)" : {
    "getAbsolutePath" : 1,
    "bashQuote" : 1
  },
  "org.apache.hadoop.conf.Configuration:setFloat(java.lang.String,float)" : {
    "set" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.viewfs.FsGetter:getNewInstance(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "newInstance" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:putMetricsImmediate(org.apache.hadoop.metrics2.impl.MetricsBuffer)" : {
    "waitTillNotified" : 1,
    "warn" : 2,
    "enqueue" : 1,
    "refreshQueueSizeGauge" : 1,
    "incr" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.StatisticDurationTracker:<init>(org.apache.hadoop.fs.statistics.impl.IOStatisticsStore,java.lang.String,long)" : {
    "incrementCounter" : 1
  },
  "org.apache.hadoop.ipc.Server:getQueueClass(java.lang.String,int,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 2,
    "convertQueueClass" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:loginUserFromKeytabAndReturnUGI(java.lang.String,java.lang.String)" : {
    "doSubjectLogin" : 1,
    "getCurrentUser" : 1,
    "isSecurityEnabled" : 1,
    "put" : 2
  },
  "org.apache.hadoop.io.compress.CompressionOutputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.net.TableMapping$RawTableMapping:resolve(java.util.List)" : {
    "add" : 2,
    "warn" : 1,
    "size" : 1,
    "load" : 1,
    "get" : 1,
    "emptyMap" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrSentBytes(int)" : {
    "incr" : 1
  },
  "org.apache.hadoop.fs.shell.Command:isDeprecated()" : {
    "getReplacementCommand" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:parseGeneralOptions(org.apache.commons.cli.Options,java.lang.String[])" : {
    "printHelp" : 1,
    "warn" : 1,
    "buildGeneralOptions" : 1,
    "getMessage" : 1,
    "parse" : 1,
    "processGeneralOptions" : 1,
    "preProcessForWindows" : 1
  },
  "org.apache.hadoop.fs.FilterFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "setXAttr" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:binarySearch(org.apache.hadoop.io.WritableComparable)" : {
    "compare" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newQuantiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)" : {
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.DefaultStringifier:load(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.Class)" : {
    "get" : 1,
    "fromString" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:flushBuffer(boolean,boolean)" : {
    "arraycopy" : 1,
    "getBytesPerChecksum" : 1,
    "writeChecksumChunks" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:setConf(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getQuotaUsage(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getQuotaUsage" : 1
  },
  "org.apache.hadoop.fs.BBUploadHandle:from(java.nio.ByteBuffer)" : { },
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:newZooKeeper(java.lang.String,int,org.apache.zookeeper.Watcher,boolean)" : {
    "newZooKeeper" : 1
  },
  "org.apache.hadoop.fs.shell.FsCommand:processRawArguments(java.util.LinkedList)" : {
    "expandArguments" : 1,
    "getConf" : 2,
    "equals" : 1,
    "getTrimmed" : 1,
    "getCommandName" : 1,
    "getBoolean" : 1,
    "processArguments" : 1,
    "printf" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNumberOfElements(java.util.Collection,int,java.lang.String)" : {
    "checkNotNull" : 1,
    "size" : 2,
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.erasurecode.ECChunk:toBuffers(org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "getBuffer" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : {
    "rename" : 1
  },
  "org.apache.hadoop.fs.HardLink$HardLinkCGUnix:linkCount(java.io.File)" : {
    "arraycopy" : 1,
    "makeShellPath" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:getLocalHostName(org.apache.hadoop.conf.Configuration)" : {
    "getCanonicalHostName" : 1,
    "getDefaultHost" : 1,
    "get" : 2,
    "getLocalHost" : 1
  },
  "org.apache.hadoop.ipc.RpcScheduler:addResponseTime(java.lang.String,org.apache.hadoop.ipc.Schedulable,org.apache.hadoop.ipc.ProcessingDetails)" : {
    "addResponseTime" : 1,
    "get" : 2,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy,int,long,long)" : { },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:<init>(org.apache.hadoop.io.compress.zlib.ZlibCompressor$CompressionLevel,org.apache.hadoop.io.compress.zlib.ZlibCompressor$CompressionStrategy,org.apache.hadoop.io.compress.zlib.ZlibCompressor$CompressionHeader,int)" : {
    "init" : 1,
    "allocateDirect" : 2,
    "compressionStrategy" : 1,
    "position" : 1,
    "compressionLevel" : 1,
    "windowBits" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl:add(org.apache.hadoop.net.Node)" : {
    "add" : 3,
    "set" : 1,
    "isParent" : 1,
    "getName" : 5,
    "getNextAncestorName" : 1,
    "put" : 2,
    "setLevel" : 1,
    "isAncestor" : 1,
    "getNetworkLocation" : 1,
    "size" : 1,
    "equals" : 1,
    "get" : 2,
    "getPath" : 1,
    "setParent" : 1,
    "createParentNode" : 1
  },
  "org.apache.hadoop.util.NativeCrc32:isAvailable()" : {
    "isNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState:checkOutputBuffers(byte[][])" : { },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:encrypt(java.nio.ByteBuffer,java.nio.ByteBuffer)" : {
    "process" : 1
  },
  "org.apache.hadoop.metrics2.lib.MethodMetric:newGauge(java.lang.Class)" : {
    "getName" : 2,
    "isLong" : 2,
    "addGauge" : 4,
    "intValue" : 1,
    "isInt" : 2,
    "floatValue" : 1,
    "invoke" : 1,
    "isFloat" : 2,
    "doubleValue" : 1,
    "error" : 1,
    "longValue" : 1,
    "isDouble" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:prepareAppendKey(int)" : {
    "initDataBlock" : 1,
    "name" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:getDirectoryContentsIterator()" : {
    "getStringForChildPath" : 1,
    "getPath" : 1,
    "listStatusIterator" : 1,
    "mappingRemoteIterator" : 1,
    "checkIfExists" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:<init>(org.apache.hadoop.io.retry.FailoverProxyProvider,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "emptyMap" : 1
  },
  "org.apache.hadoop.fs.FilterFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "modifyAclEntries" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "cd" : 2,
    "disconnect" : 3,
    "getParent" : 1,
    "getName" : 1,
    "toUri" : 1,
    "format" : 2,
    "getDefault" : 1,
    "delete" : 1,
    "put" : 1,
    "mkdirs" : 1,
    "getPath" : 1,
    "exists" : 1,
    "pwd" : 2,
    "close" : 1,
    "makeAbsolute" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : {
    "getLen" : 2
  },
  "org.apache.hadoop.util.VersionInfo:getSrcChecksum()" : {
    "_getSrcChecksum" : 1
  },
  "org.apache.hadoop.io.OutputBuffer:getData()" : {
    "getData" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector$WatcherWithClientRef:process(org.apache.zookeeper.WatchedEvent)" : {
    "processWatchEvent" : 1,
    "debug" : 1,
    "fatalError" : 1,
    "await" : 1,
    "stringifyException" : 1,
    "countDown" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:innerSetKeyVersion(java.lang.String,java.lang.String,byte[],java.lang.String)" : {
    "setKeyEntry" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:<init>(org.apache.hadoop.fs.FSDataInputStream,int,long,long,org.apache.hadoop.conf.Configuration)" : {
    "stream" : 1,
    "length" : 1,
    "start" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Du:getUsagesTable()" : { },
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:addOverallProcessingTime(java.lang.String,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.FileStatus:compareTo(org.apache.hadoop.fs.FileStatus)" : {
    "getPath" : 2,
    "compareTo" : 1
  },
  "org.apache.hadoop.security.alias.KeyStoreProvider:createPermissions(java.lang.String)" : { },
  "org.apache.hadoop.util.HostsFileReader:refresh(java.io.InputStream,java.io.InputStream)" : {
    "readFileToSetWithFileInputStream" : 1,
    "set" : 1,
    "unmodifiableSet" : 1,
    "get" : 1,
    "readFileToMapWithFileInputStream" : 1,
    "unmodifiableMap" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.RateLimitingFactory:create(int)" : {
    "unlimitedRate" : 1
  },
  "org.apache.hadoop.fs.FileSystem$FSDataInputStreamBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.PathHandle)" : { },
  "org.apache.hadoop.http.HttpServer2$Builder:makeConfigurationChangeMonitor(long,org.eclipse.jetty.util.ssl.SslContextFactory$Server)" : {
    "add" : 2,
    "schedule" : 1,
    "reload" : 1,
    "get" : 2,
    "error" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "createSnapshot" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$UgiMetrics:create()" : {
    "instance" : 1,
    "register" : 1
  },
  "org.apache.hadoop.io.WritableUtils:writeVInt(java.io.DataOutput,int)" : {
    "writeVLong" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:initMode()" : {
    "getProperty" : 2,
    "debug" : 2,
    "valueOf" : 1,
    "name" : 1,
    "toUpperCase" : 1,
    "getenv" : 2
  },
  "org.apache.hadoop.util.StringUtils:byteDesc(long)" : {
    "long2String" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher:add(org.apache.hadoop.net.unix.DomainSocket,org.apache.hadoop.net.unix.DomainSocketWatcher$Handler)" : {
    "add" : 1,
    "reference" : 1,
    "contains" : 1,
    "unlock" : 1,
    "kick" : 1,
    "lock" : 1,
    "awaitUninterruptibly" : 1,
    "handle" : 2,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.util.Sets:newHashSetWithExpectedSize(int)" : {
    "capacity" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:toBuffers(org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "getBuffer" : 1,
    "resetBuffer" : 1,
    "isAllZero" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:isDirectory()" : {
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:createPath(org.apache.hadoop.fs.Path,java.lang.String,boolean)" : {
    "warn" : 1,
    "getParent" : 1,
    "checkStatus" : 1,
    "toUri" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.util.PureJavaCrc32:<init>()" : {
    "reset" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet$SetIterator:next()" : {
    "convert" : 1,
    "ensureNext" : 1
  },
  "org.apache.hadoop.io.InputBuffer:getLength()" : {
    "getLength" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:advance()" : {
    "atEnd" : 1,
    "initBlock" : 1,
    "inBlockAdvance" : 1,
    "parkCursorAtEnd" : 1,
    "compareTo" : 1,
    "getBlockIndex" : 1,
    "getBlockEntryCount" : 1,
    "getRecordIndex" : 1
  },
  "org.apache.hadoop.io.retry.FailoverProxyProvider$ProxyInfo:getString(java.lang.String)" : {
    "proxyName" : 1
  },
  "org.apache.hadoop.io.DataInputBuffer:reset(byte[],int)" : {
    "reset" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Reader:probablyHasKey(org.apache.hadoop.io.WritableComparable)" : {
    "set" : 1,
    "byteArrayForBloomKey" : 1,
    "membershipTest" : 1,
    "reset" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getServerDefaults()" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.ipc.Server$Call:<init>(int,int,org.apache.hadoop.ipc.RPC$RpcKind,byte[],org.apache.hadoop.tracing.Span,org.apache.hadoop.ipc.CallerContext)" : {
    "monotonicNowNanos" : 1
  },
  "org.apache.hadoop.fs.GlobFilter:accept(org.apache.hadoop.fs.Path)" : {
    "getName" : 1,
    "matches" : 1,
    "accept" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$HaltableRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator,org.apache.hadoop.util.functional.CallableRaisingIOE)" : { },
  "org.apache.hadoop.io.SequenceFile$Writer:stream(org.apache.hadoop.fs.FSDataOutputStream)" : { },
  "org.apache.hadoop.crypto.CryptoInputStream:readFromUnderlyingStream(java.nio.ByteBuffer)" : {
    "read" : 1,
    "put" : 1,
    "remaining" : 1,
    "getTmpBuf" : 1
  },
  "org.apache.hadoop.net.TableMapping:getConf()" : {
    "getConf" : 1,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:run(boolean)" : {
    "nextRaw" : 1,
    "debug" : 1,
    "grow" : 1,
    "getCompressionCodec" : 1,
    "getCompressionType" : 1,
    "clear" : 1,
    "sort" : 1,
    "delete" : 1,
    "flush" : 1,
    "createValueBytes" : 1,
    "progress" : 1,
    "getLength" : 2,
    "reset" : 1,
    "isDebugEnabled" : 1,
    "close" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:reset()" : {
    "seek" : 1
  },
  "org.apache.hadoop.fs.BufferedFSInputStream:readFully(long,byte[])" : {
    "readFully" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:putQueue(int,org.apache.hadoop.ipc.Schedulable)" : {
    "signalNotEmpty" : 1,
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$Context:getAndIncrDirNumLastAccessed()" : {
    "getAndIncrDirNumLastAccessed" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:listStatus(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path)" : {
    "add" : 1,
    "toUri" : 1,
    "ls" : 1,
    "getFilename" : 1,
    "size" : 2,
    "get" : 1,
    "toArray" : 1,
    "getPath" : 1,
    "getFileStatus" : 2,
    "equalsIgnoreCase" : 2,
    "pwd" : 1,
    "makeAbsolute" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:seek(long)" : {
    "seek" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addMinimumSample(java.lang.String,long)" : {
    "addMinimumSample" : 1,
    "getInnerStatistics" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:<init>(org.apache.hadoop.fs.Path)" : {
    "of" : 1,
    "empty" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:containsKmsDt(org.apache.hadoop.security.UserGroupInformation)" : {
    "debug" : 1,
    "selectDelegationToken" : 1,
    "getAllTokens" : 1,
    "isEmpty" : 1,
    "getCredentials" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$KeyClassOption:<init>(java.lang.Class)" : { },
  "org.apache.hadoop.ipc.RPC$Server:getHighestSupportedProtocol(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.String)" : {
    "getValue" : 1,
    "getKey" : 3,
    "debug" : 1,
    "size" : 1,
    "entrySet" : 1,
    "equals" : 1,
    "isDebugEnabled" : 1,
    "getProtocolImplMap" : 2
  },
  "org.apache.hadoop.util.ComparableVersion$StringItem:compareTo(org.apache.hadoop.util.ComparableVersion$Item)" : {
    "getClass" : 1,
    "getType" : 1,
    "compareTo" : 2,
    "comparableQualifier" : 3
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int)" : { },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:rollNewVersion(java.lang.String)" : {
    "doOp" : 1,
    "invalidateCache" : 1,
    "nextIdx" : 1,
    "getCause" : 3,
    "rollNewVersion" : 1
  },
  "org.apache.hadoop.http.HtmlQuoting:quoteHtmlChars(java.lang.String)" : {
    "needsQuoting" : 1,
    "quoteHtmlChars" : 1,
    "toByteArray" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "unlock" : 1,
    "writeLock" : 2,
    "getNumDataUnits" : 1,
    "lock" : 1,
    "getNumParityUnits" : 1,
    "initImpl" : 1
  },
  "org.apache.hadoop.security.Credentials:addToken(org.apache.hadoop.io.Text,org.apache.hadoop.security.token.Token)" : {
    "warn" : 1,
    "privateClone" : 1,
    "getKey" : 1,
    "getValue" : 1,
    "entrySet" : 1,
    "isPrivateCloneOf" : 1,
    "putAll" : 1,
    "getService" : 1,
    "put" : 2
  },
  "org.apache.hadoop.util.LightWeightCache:remove(java.lang.Object)" : {
    "evictExpiredEntries" : 1,
    "checkState" : 1,
    "remove" : 2
  },
  "org.apache.hadoop.util.dynamic.BindingUtils:checkAvailable(org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod)" : {
    "available" : 1
  },
  "org.apache.hadoop.fs.FileContext:msync()" : {
    "msync" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_fromJsonString(java.lang.String)" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "mayThrowFileNotFound" : 1,
    "size" : 1,
    "processThrowable" : 2,
    "createIOException" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.FileSystem:primitiveMkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : {
    "getParent" : 1,
    "mkdirs" : 1,
    "getFileStatus" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.StringUtils:createStartupShutdownMessage(java.lang.String,java.lang.String,java.lang.String[])" : {
    "getVersion" : 1,
    "getUrl" : 1,
    "getProperty" : 2,
    "toStartupShutdownString" : 1,
    "getUser" : 1,
    "getDate" : 1,
    "asList" : 1,
    "getRevision" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$Windows:access(java.lang.String,org.apache.hadoop.io.nativeio.NativeIO$Windows$AccessRight)" : {
    "accessRight" : 1,
    "access0" : 1
  },
  "org.apache.hadoop.ipc.Client:call(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable,org.apache.hadoop.ipc.Client$ConnectionId,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "call" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : {
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getEnclosingRoot(org.apache.hadoop.fs.Path)" : {
    "depth" : 2,
    "getEnclosingRoot" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1,
    "makeQualified" : 1,
    "getUriPath" : 2,
    "initCause" : 1,
    "format" : 1,
    "getMessage" : 1
  },
  "org.apache.hadoop.http.HttpServer2:bindForSinglePort(org.eclipse.jetty.server.ServerConnector,int)" : {
    "sleep" : 1,
    "constructBindException" : 1,
    "setPort" : 1,
    "bindListener" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:minimums()" : {
    "getWrapped" : 1,
    "minimums" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Invoker:<init>(java.lang.Class,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getClient" : 1,
    "getConnectionId" : 1
  },
  "org.apache.hadoop.fs.shell.find.BaseExpression:isAction()" : {
    "getChildren" : 1,
    "isAction" : 1
  },
  "org.apache.hadoop.io.SortedMapWritable:<init>(org.apache.hadoop.io.SortedMapWritable)" : {
    "copy" : 1
  },
  "org.apache.hadoop.fs.shell.Mkdir:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.io.TwoDArrayWritable:<init>(java.lang.Class,org.apache.hadoop.io.Writable[][])" : { },
  "org.apache.hadoop.ipc.Server:getRemoteUser()" : {
    "getRemoteUser" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:tryAcquire()" : {
    "acquireHelper" : 1
  },
  "org.apache.hadoop.io.FloatWritable:<init>(float)" : {
    "set" : 1
  },
  "org.apache.hadoop.conf.Configuration$Parser:handleEndElement()" : {
    "add" : 1,
    "getLocalName" : 1,
    "trim" : 1,
    "equals" : 1,
    "length" : 3,
    "toString" : 1,
    "weakIntern" : 4,
    "handleEndProperty" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:doDecodeImpl(java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : {
    "solveVandermondeSystem" : 1,
    "findFirstValidInput" : 1,
    "substitute" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager,java.lang.String)" : { },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:getConfigViewFsPrefix()" : {
    "getConfigViewFsPrefix" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:read(java.io.DataInput)" : {
    "fromShort" : 1,
    "readShort" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceShutdownHook:register(int)" : {
    "get" : 1,
    "unregister" : 1,
    "addShutdownHook" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Dus:processOptions(java.util.LinkedList)" : {
    "processOptions" : 1,
    "addFirst" : 1
  },
  "org.apache.hadoop.fs.FileSystem:makeQualified(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getWorkingDirectory" : 1,
    "makeQualified" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:buildACL(java.lang.String[])" : {
    "cacheGroupsAdd" : 1,
    "isWildCardACLValue" : 1,
    "getTrimmedStringCollection" : 2
  },
  "org.apache.hadoop.crypto.key.KeyShell$CreateCommand:validate()" : {
    "noPasswordError" : 1,
    "getOut" : 3,
    "println" : 3,
    "noPasswordWarning" : 1,
    "printStackTrace" : 1,
    "needsPassword" : 1,
    "getKeyProvider" : 1,
    "getErr" : 1
  },
  "org.apache.hadoop.fs.shell.FsCommand:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.shell.find.Find:isAncestor(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : {
    "getParent" : 1,
    "isRoot" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:relativize(java.net.URI,java.net.URI,boolean)" : {
    "findLongestDirPrefix" : 1,
    "equals" : 1,
    "length" : 3,
    "getPath" : 2,
    "insert" : 2,
    "toString" : 1,
    "indexOf" : 1,
    "substring" : 1,
    "append" : 1
  },
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:newInstanceChecked(java.lang.Object[])" : {
    "throwIfInstance" : 2,
    "newInstance" : 1,
    "getCause" : 3
  },
  "org.apache.hadoop.fs.FsShell:init()" : {
    "getConf" : 3,
    "addObject" : 2,
    "registerCommands" : 1,
    "setQuietMode" : 1,
    "setConfiguration" : 1
  },
  "org.apache.hadoop.util.VersionInfo:main(java.lang.String[])" : {
    "getVersion" : 2,
    "getUrl" : 1,
    "getSrcChecksum" : 1,
    "println" : 7,
    "debug" : 1,
    "getUser" : 1,
    "findContainingJar" : 1,
    "getCompilePlatform" : 1,
    "getProtocVersion" : 1,
    "getDate" : 1,
    "getRevision" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:addKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "getKeyId" : 3,
    "getCurrentKeyId" : 1,
    "setCurrentKeyId" : 1,
    "put" : 1
  },
  "org.apache.hadoop.util.bloom.BloomFilter:<init>(int,int,int)" : { },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:set(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.protocolPB.PBHelper:convert(org.apache.hadoop.fs.FSProtos$FsPermissionProto)" : {
    "getPerm" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "removeDefaultAcl" : 1
  },
  "org.apache.hadoop.io.LongWritable$DecreasingComparator:compare(byte[],int,int,byte[],int,int)" : {
    "compare" : 1
  },
  "org.apache.hadoop.ipc.RpcWritable$ProtobufWrapper:writeTo(org.apache.hadoop.ipc.ResponseBuffer)" : {
    "getSerializedSize" : 1,
    "ensureCapacity" : 1,
    "writeDelimitedTo" : 1,
    "computeUInt32SizeNoTag" : 1
  },
  "org.apache.hadoop.fs.impl.FutureIOSupport:raiseInnerCause(java.util.concurrent.ExecutionException)" : {
    "raiseInnerCause" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$BlockUploadData:<init>(java.io.File)" : {
    "exists" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferData:setDone()" : {
    "getChecksum" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsContext:getCurrentIOStatisticsContext()" : {
    "getCurrentIOStatisticsContext" : 1,
    "requireNonNull" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.crypto.JceSm4CtrCryptoCodec:createDecryptor()" : {
    "getCipherSuite" : 1,
    "getProvider" : 1
  },
  "org.apache.hadoop.fs.FilterFs:msync()" : {
    "msync" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(java.io.InputStream,boolean)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:getFS()" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.ipc.Server$RpcCall:setDeferredResponse(org.apache.hadoop.io.Writable)" : {
    "getServer" : 1,
    "currentThread" : 1,
    "getName" : 1,
    "sendDeferedResponse" : 1,
    "setupResponse" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.shell.MoveCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 3
  },
  "org.apache.hadoop.fs.AbstractFileSystem:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "createFileSystem" : 1
  },
  "org.apache.hadoop.util.Lists:newArrayList(java.lang.Object[])" : {
    "computeArrayListCapacity" : 1,
    "addAll" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:counter(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "add" : 1,
    "newAttrInfo" : 1
  },
  "org.apache.hadoop.conf.Configuration:getStringCollection(java.lang.String)" : {
    "get" : 1,
    "getStringCollection" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getStorageBytesRead()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:isLoginSuccess()" : {
    "getLogin" : 1,
    "isLoginSuccess" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:formatZK(boolean,boolean)" : {
    "clearParentZNode" : 1,
    "ensureParentZNode" : 1,
    "confirmFormat" : 1,
    "error" : 1,
    "parentZNodeExists" : 1
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInZlibDeflater:reinit(org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "debug" : 1,
    "compressionStrategy" : 1,
    "setStrategy" : 2,
    "reset" : 1,
    "isDebugEnabled" : 1,
    "getCompressionStrategy" : 1,
    "compressionLevel" : 1,
    "getCompressionLevel" : 1,
    "setLevel" : 1
  },
  "org.apache.hadoop.util.StringUtils:getTrimmedStringCollectionSplitByEquals(java.lang.String)" : {
    "getTrimmedStringsSplitByEquals" : 1,
    "isEmpty" : 3,
    "getTrimmedStrings" : 1,
    "checkArgument" : 2,
    "put" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getMetricsTimeUnit(org.apache.hadoop.conf.Configuration)" : {
    "valueOf" : 1,
    "get" : 1,
    "isNotEmpty" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.ExitUtil:terminate(int,java.lang.Throwable)" : {
    "terminate" : 2
  },
  "org.apache.hadoop.security.UserGroupInformation:checkTGTAndReloginFromKeytab()" : {
    "reloginFromKeytab" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$ValueClassOption:<init>(java.lang.Class)" : { },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall:invoke()" : {
    "getCounters" : 1,
    "getClass" : 1,
    "initAsyncCall" : 1,
    "debug" : 1,
    "isAsynchronousMode" : 1,
    "isDone" : 1,
    "isZeros" : 1,
    "setAsynchronousMode" : 2,
    "trace" : 3,
    "get" : 1,
    "checkState" : 1,
    "getSimpleName" : 1,
    "getLowerLayerAsyncReturn" : 1,
    "invokeMethod" : 1,
    "getCallId" : 3
  },
  "org.apache.hadoop.fs.FileUtil:isRegularFile(java.io.File)" : {
    "isRegularFile" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:<init>()" : { },
  "org.apache.hadoop.ipc.Server$Connection:buildSaslNegotiateResponse()" : {
    "contains" : 1,
    "build" : 1,
    "getAuthsBuilder" : 1,
    "setChallenge" : 1,
    "evaluateResponse" : 1,
    "createSaslServer" : 1,
    "newBuilder" : 1,
    "copyFrom" : 1
  },
  "org.apache.hadoop.io.SetFile$Reader:get(org.apache.hadoop.io.WritableComparable)" : {
    "next" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.fs.FileContext:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Merge:processOptions(java.util.LinkedList)" : {
    "getConf" : 1,
    "getOpt" : 2,
    "toString" : 1,
    "parse" : 1,
    "removeLast" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainChannel:isOpen()" : {
    "isOpen" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "modifyAclEntries" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.security.SaslPlainServer:unwrap(byte[],int,int)" : {
    "throwIfNotComplete" : 1
  },
  "org.apache.hadoop.metrics2.sink.StatsDSink:writeMetric(java.lang.String)" : {
    "warn" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:write(int)" : {
    "flushBuffer" : 1
  },
  "org.apache.hadoop.fs.shell.Head:dumpToOffset(org.apache.hadoop.fs.shell.PathData)" : {
    "openFile" : 1,
    "copyBytes" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:read()" : {
    "read" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem$1:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.conf.Configuration:writeXml(java.lang.String,java.io.Writer)" : {
    "writeXml" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFileDumper:dumpInfo(java.lang.String,java.io.PrintStream,org.apache.hadoop.conf.Configuration)" : {
    "next" : 5,
    "getName" : 1,
    "checkTFileDataIndex" : 1,
    "getOffset" : 2,
    "values" : 1,
    "put" : 18,
    "cleanupWithLogger" : 1,
    "printf" : 6,
    "println" : 3,
    "iterator" : 5,
    "getComparatorName" : 1,
    "min" : 1,
    "get" : 2,
    "getLen" : 1,
    "getFileStatus" : 1,
    "getMetaName" : 1,
    "getBlockCount" : 1,
    "getEntry" : 1,
    "getBlockRegionList" : 2,
    "getRawSize" : 4,
    "getKey" : 5,
    "max" : 2,
    "entrySet" : 2,
    "length" : 7,
    "format" : 26,
    "hasNext" : 5,
    "getFileSystem" : 1,
    "getCompressedSize" : 4,
    "getValue" : 4,
    "print" : 3,
    "getCompressionAlgorithm" : 2,
    "size" : 3,
    "getRegion" : 3,
    "calculateWidth" : 9,
    "equals" : 1,
    "toString" : 13,
    "isSorted" : 2,
    "getEntryCount" : 2,
    "getDefaultCompressionName" : 2,
    "open" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "unlock" : 1,
    "writeLock" : 2,
    "getNumDataUnits" : 1,
    "lock" : 1,
    "getNumParityUnits" : 1,
    "initImpl" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:doDecodeMultiAndParity(java.nio.ByteBuffer[][],java.nio.ByteBuffer[][],int[],int)" : {
    "get" : 4,
    "limit" : 2,
    "getNumDataUnits" : 1,
    "position" : 7,
    "getNumParityUnits" : 1,
    "decode" : 2,
    "put" : 2,
    "getPiggyBacksFromInput" : 1
  },
  "org.apache.hadoop.util.DiskChecker:checkDir(org.apache.hadoop.fs.LocalFileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "checkDirInternal" : 1
  },
  "org.apache.hadoop.fs.GlobPattern:compile(java.lang.String)" : {
    "compiled" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:<init>(org.apache.hadoop.fs.PathHandle)" : {
    "of" : 1,
    "empty" : 1
  },
  "org.apache.hadoop.ipc.UnexpectedServerException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:replication(short)" : {
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:reinit(org.apache.hadoop.conf.Configuration)" : {
    "init" : 2,
    "debug" : 1,
    "getBlockSize" : 1,
    "reset" : 1,
    "end" : 1,
    "isDebugEnabled" : 1,
    "getWorkFactor" : 1
  },
  "org.apache.hadoop.io.file.tfile.BoundedRangeFileInputStream:read(byte[],int,int)" : {
    "read" : 1,
    "min" : 2,
    "seek" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:shutdownSingleton()" : {
    "shutdown" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:pathToFile(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getWorkingDirectory" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "isAbsolute" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:<init>(java.lang.Object,org.apache.hadoop.metrics2.lib.MutableMetricsFactory)" : {
    "add" : 2,
    "getDeclaredMethodsIncludingInherited" : 1,
    "getClass" : 1,
    "checkNotNull" : 2,
    "initRegistry" : 1,
    "getDeclaredFieldsIncludingInherited" : 1
  },
  "org.apache.hadoop.net.NetUtils:getLocalInetAddress(java.lang.String)" : {
    "getByName" : 1,
    "getByInetAddress" : 1
  },
  "org.apache.hadoop.security.KDiag:loginFromKeytab()" : {
    "warn" : 1,
    "loginUserFromKeytabAndReturnUGI" : 1,
    "println" : 2,
    "debug" : 1,
    "reloginFromKeytab" : 1,
    "getCanonicalFile" : 1,
    "setShouldRenewImmediatelyForTests" : 1,
    "getPath" : 1,
    "dumpUGI" : 1,
    "title" : 1,
    "failif" : 1,
    "validateUGI" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:append(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : {
    "add" : 1,
    "set" : 1,
    "byteArrayForBloomKey" : 1,
    "reset" : 1,
    "write" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:appendFile(org.apache.hadoop.fs.Path)" : {
    "appendFile" : 1
  },
  "org.apache.hadoop.fs.InvalidPathException:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.io.ObjectWritable:loadClass(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "forName" : 1,
    "getClassByName" : 1
  },
  "org.apache.hadoop.util.Shell:execCommand(java.util.Map,java.lang.String[])" : {
    "execCommand" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:read(byte[])" : {
    "read" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:impl(java.lang.Class,java.lang.String,java.lang.Class[])" : {
    "debug" : 1,
    "getMethod" : 1
  },
  "org.apache.hadoop.security.Credentials:writeTokenStorageToStream(java.io.DataOutputStream,org.apache.hadoop.security.Credentials$SerializedFormat)" : {
    "writeWritableOutputStream" : 1,
    "writeProtobufOutputStream" : 1
  },
  "org.apache.hadoop.io.UTF8$Comparator:<init>()" : { },
  "org.apache.hadoop.io.compress.CodecPool:updateLeaseCount(org.apache.hadoop.thirdparty.com.google.common.cache.LoadingCache,java.lang.Object,int)" : {
    "getClass" : 1,
    "addAndGet" : 1,
    "getUnchecked" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$ExponentialBackoffRetry:<init>(int,long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : {
    "getPathWithoutSchemeAndAuthority" : 1,
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 2,
    "getName" : 1,
    "equals" : 1,
    "getPath" : 3,
    "getFileBlockLocations" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getEnclosingRoot(org.apache.hadoop.fs.Path)" : {
    "makeQualified" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.security.alias.UserProvider:getCredentialEntry(java.lang.String)" : {
    "getSecretKey" : 1,
    "toCharArray" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:isPmdkAvailable()" : {
    "getMessage" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:handleConnectionTimeout(int,int,java.io.IOException)" : {
    "info" : 1,
    "closeConnection" : 1
  },
  "org.apache.hadoop.net.NodeBase:hashCode()" : {
    "hashCode" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScanner()" : { },
  "org.apache.hadoop.ha.SshFenceByTcpPort:getSshConnectTimeout()" : {
    "getInt" : 1,
    "getConf" : 1
  },
  "org.apache.hadoop.util.dynamic.BindingUtils:noop(java.lang.String)" : {
    "orNoop" : 1,
    "build" : 1
  },
  "org.apache.hadoop.fs.FsShellPermissions$Chmod:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "removeFirst" : 1,
    "parse" : 1,
    "setRecursive" : 1
  },
  "org.apache.hadoop.util.StringUtils:escapeString(java.lang.String,char,char)" : {
    "escapeString" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:isNativeCodeLoaded()" : {
    "isNativeCodeLoaded" : 2
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getServerDefaults()" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.util.DiskChecker:diskIoCheckWithoutNativeIo(java.io.File)" : {
    "get" : 2,
    "exists" : 1,
    "delete" : 1,
    "close" : 1,
    "sync" : 1,
    "write" : 1,
    "cleanupWithLogger" : 1,
    "getFD" : 1,
    "deleteQuietly" : 1
  },
  "org.apache.hadoop.util.IntrusiveCollection:containsAll(java.util.Collection)" : {
    "contains" : 1
  },
  "org.apache.hadoop.net.TableMapping:<init>()" : { },
  "org.apache.hadoop.ipc.FairCallQueue:put(org.apache.hadoop.ipc.Schedulable)" : {
    "size" : 1,
    "offerQueues" : 1,
    "putQueue" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.ipc.Server:getClientBackoffEnable(java.lang.String,int,org.apache.hadoop.conf.Configuration)" : {
    "getBoolean" : 2
  },
  "org.apache.hadoop.ipc.Server$Connection:setupBadVersionResponse(int)" : {
    "writeInt" : 1,
    "getName" : 3,
    "toByteArray" : 1,
    "sendResponse" : 3,
    "setResponse" : 1,
    "setupResponse" : 1,
    "setupResponseOldVersionFatal" : 1,
    "wrap" : 1,
    "writeString" : 2,
    "writeBoolean" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:cacheGroupsAdd(java.util.List)" : {
    "add" : 1,
    "getUsersForNetgroup" : 1,
    "length" : 1,
    "isCached" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:waitForWork()" : {
    "wait" : 1,
    "currentThread" : 1,
    "trace" : 1,
    "markClosed" : 2,
    "now" : 1,
    "get" : 6,
    "initCause" : 1,
    "interrupt" : 1,
    "isEmpty" : 3
  },
  "org.apache.hadoop.io.compress.BZip2Codec:getDecompressorType()" : {
    "getBzip2DecompressorType" : 1
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:getSize(java.lang.String)" : {
    "getAllPresent" : 1,
    "size" : 1,
    "get" : 1,
    "readLock" : 1,
    "readUnlock" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.fs.FileUtil:setOwner(java.io.File,java.lang.String,java.lang.String)" : {
    "execCommand" : 1,
    "getSetOwnerCommand" : 1
  },
  "org.apache.hadoop.fs.FileContext:resolveAbstractFileSystems(org.apache.hadoop.fs.Path)" : {
    "add" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.permission.FsCreateModes:create(org.apache.hadoop.fs.permission.FsPermission,org.apache.hadoop.fs.permission.FsPermission)" : {
    "getUnmasked" : 2
  },
  "org.apache.hadoop.util.functional.RemoteIterators$SingletonIterator:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.util.FileBasedIPList:<init>(java.lang.String)" : {
    "readLines" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.ipc.ProtocolSignature:getProtocolSignature(java.lang.String,long)" : {
    "forName" : 1,
    "getSigFingerprint" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "getLinkTarget" : 1
  },
  "org.apache.hadoop.fs.impl.WeakReferenceThreadMap:removeForCurrentThread()" : {
    "currentThreadId" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:distance(org.apache.hadoop.fs.impl.prefetch.BufferData,int)" : {
    "abs" : 1,
    "getBlockNumber" : 1
  },
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,java.lang.CharSequence)" : {
    "write" : 1
  },
  "org.apache.hadoop.fs.impl.FutureIOSupport:awaitFuture(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)" : {
    "awaitFuture" : 1
  },
  "org.apache.hadoop.fs.RawPathHandle:equals(java.lang.Object)" : {
    "bytes" : 2,
    "equals" : 1
  },
  "org.apache.hadoop.fs.FileContext:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1,
    "hasPathCapability" : 1
  },
  "org.apache.hadoop.io.SetFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "comparator" : 1,
    "valueClass" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.fs.FileSystem$FileSystemDataOutputStreamBuilder:build()" : {
    "emptySet" : 1,
    "getPermission" : 2,
    "getBufferSize" : 3,
    "getProgress" : 3,
    "rejectUnknownMandatoryKeys" : 1,
    "isRecursive" : 1,
    "contains" : 3,
    "getReplication" : 2,
    "getBlockSize" : 2,
    "createNonRecursive" : 1,
    "getChecksumOpt" : 1,
    "getFS" : 3,
    "getPath" : 5,
    "create" : 1,
    "toString" : 1,
    "getFlags" : 5,
    "append" : 1
  },
  "org.apache.hadoop.net.NetUtils:normalizeIP2HostName(java.lang.String)" : {
    "getHostPortString" : 1,
    "createSocketAddr" : 1,
    "matcher" : 1,
    "matches" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.ErasureCodec:setCodecOptions(org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : {
    "getSchema" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:listStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.conf.Configuration$DeprecationDelta:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.conf.Configuration$DeprecationDelta:<init>(java.lang.String,java.lang.String[],java.lang.String)" : {
    "checkNotNull" : 2,
    "checkArgument" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newInverseQuantiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)" : {
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.RefreshCallQueueProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : {
    "getProtocolVersion" : 1,
    "isMethodSupported" : 1
  },
  "org.apache.hadoop.io.WritableFactories:newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "newInstance" : 2,
    "getFactory" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.io.OutputBuffer$Buffer:write(java.io.InputStream,int)" : {
    "max" : 1,
    "readFully" : 1,
    "arraycopy" : 1
  },
  "org.apache.hadoop.util.JvmPauseMonitor$GcTimes:subtract(org.apache.hadoop.util.JvmPauseMonitor$GcTimes)" : { },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getServer(java.lang.Class,java.lang.Object,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : { },
  "org.apache.hadoop.service.AbstractService:enterState(org.apache.hadoop.service.Service$STATE)" : {
    "getClass" : 1,
    "getName" : 1,
    "debug" : 1,
    "enterState" : 1,
    "getServiceState" : 1,
    "recordLifecycleEvent" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.net.SocketInputStream:read()" : {
    "read" : 1
  },
  "org.apache.hadoop.util.LightWeightCache:get(java.lang.Object)" : {
    "offer" : 1,
    "setExpirationTime" : 1,
    "get" : 1,
    "checkState" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter:init(javax.servlet.FilterConfig)" : {
    "init" : 1,
    "refreshSuperUserGroupsConfiguration" : 1,
    "getProxyuserConfiguration" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:getDefaultCompressionAlgorithm()" : {
    "getDefaultCompressionAlgorithm" : 1
  },
  "org.apache.hadoop.util.CrcUtil:composeWithMonomial(int,int,int,int)" : {
    "galoisFieldMultiply" : 1
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipCompressor:reinit(org.apache.hadoop.conf.Configuration)" : {
    "init" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getChecksumFile" : 2,
    "rename" : 4,
    "exists" : 1,
    "getMyFs" : 4,
    "isDirectory" : 2
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:logExpireTokens(java.util.Collection)" : {
    "removeExpiredStoredToken" : 1,
    "formatTokenId" : 1,
    "logExpireToken" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.RetryCache$CacheEntry:<init>(byte[],int,long,boolean)" : { },
  "org.apache.hadoop.fs.FileContext:processDeleteOnExit()" : {
    "warn" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "entrySet" : 1,
    "clear" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:isExpression(java.lang.String)" : {
    "isExpression" : 1,
    "getExpressionFactory" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator:ifExists(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "obtainContext" : 1,
    "ifExists" : 1
  },
  "org.apache.hadoop.io.WritableComparator:<init>()" : { },
  "org.apache.hadoop.fs.FileContext:removeAcl(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "removeAcl" : 1
  },
  "org.apache.hadoop.util.FindClass:getClass(java.lang.String)" : {
    "getConf" : 1,
    "getClassByName" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(org.apache.hadoop.conf.Configuration)" : {
    "getProps" : 1,
    "addResourceObject" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:add(org.apache.hadoop.util.bloom.Key)" : {
    "add" : 1,
    "set" : 1,
    "clear" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.fs.FileSystem:addFileSystemForTesting(java.net.URI,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)" : {
    "put" : 1
  },
  "org.apache.hadoop.io.BoundedByteArrayOutputStream:<init>(byte[],int,int)" : {
    "resetBuffer" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:setPreserve(boolean)" : {
    "clear" : 1,
    "preserve" : 3
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:noteException(org.apache.hadoop.util.ExitUtil$ExitException)" : {
    "warn" : 1,
    "debug" : 1,
    "toString" : 1,
    "getCause" : 1,
    "getExitCode" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.util.VersionInfo:getBranch()" : {
    "_getBranch" : 1
  },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:process(java.nio.ByteBuffer,java.nio.ByteBuffer)" : {
    "update" : 1,
    "remaining" : 1,
    "doFinal" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO:isAvailable()" : {
    "isNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.util.ApplicationClassLoader:constructUrlsFromClasspath(java.lang.String)" : {
    "add" : 2,
    "toURL" : 2,
    "split" : 1,
    "size" : 1,
    "toUri" : 1,
    "toURI" : 1,
    "toArray" : 1,
    "isEmpty" : 1,
    "endsWith" : 1,
    "getJarsInDirectory" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:initializeAuthContext(int)" : {
    "contains" : 1,
    "doSaslReply" : 2,
    "valueOf" : 1
  },
  "org.apache.hadoop.util.StringUtils:formatTimeDiff(long,long)" : {
    "formatTime" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : {
    "readOnlyMountTable" : 1,
    "getPathWithoutSchemeAndAuthority" : 1,
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 2,
    "debug" : 1,
    "getName" : 1,
    "isRoot" : 1,
    "equals" : 1,
    "toString" : 2,
    "isDebugEnabled" : 1,
    "mkdir" : 1,
    "getUri" : 1,
    "append" : 1
  },
  "org.apache.hadoop.ipc.RpcNoSuchProtocolException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.ha.ActiveStandbyElector:clearParentZNode()" : {
    "checkState" : 1,
    "zkDoWithRetries" : 1,
    "deleteRecursive" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:seek(long)" : {
    "validatePosition" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.metrics2.lib.UniqueNames:uniqueName(java.lang.String)" : {
    "equals" : 1,
    "get" : 2,
    "join" : 1,
    "put" : 2
  },
  "org.apache.hadoop.security.UserGroupInformation:main(java.lang.String[])" : {
    "print" : 2,
    "getCurrentUser" : 2,
    "println" : 9,
    "getAuthenticationMethod" : 2,
    "loginUserFromKeytab" : 1,
    "getLoginUser" : 1,
    "isFromKeytab" : 2
  },
  "org.apache.hadoop.fs.HarFileSystem:canonicalizeUri(java.net.URI)" : {
    "canonicalizeUri" : 1
  },
  "org.apache.hadoop.fs.FileContext$FileContextFinalizer:run()" : {
    "processDeleteOnExit" : 1
  },
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.Options$ChecksumOpt:processChecksumOpt(org.apache.hadoop.fs.Options$ChecksumOpt,org.apache.hadoop.fs.Options$ChecksumOpt,int)" : {
    "getBytesPerChecksum" : 3,
    "getChecksumType" : 3
  },
  "org.apache.hadoop.fs.HarFileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getConf" : 2,
    "getLocal" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.util.StringUtils:unEscapeString(java.lang.String,char,char)" : {
    "unEscapeString" : 1
  },
  "org.apache.hadoop.io.compress.BlockDecompressorStream:decompress(byte[],int,int)" : {
    "getCompressedData" : 1,
    "needsDictionary" : 1,
    "decompress" : 1,
    "needsInput" : 1,
    "finished" : 1,
    "rawReadInt" : 1,
    "setInput" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:buildResolveResultForRegexMountPoint(org.apache.hadoop.fs.viewfs.InodeTree$ResultKind,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path)" : {
    "apply" : 1,
    "format" : 2,
    "initAndGetTargetFs" : 1,
    "error" : 2
  },
  "org.apache.hadoop.ipc.Server$Connection:getAuthorizedUgi(java.lang.String)" : {
    "getIdentifier" : 1,
    "getUser" : 1,
    "createRemoteUser" : 1,
    "addTokenIdentifier" : 1
  },
  "org.apache.hadoop.metrics2.MetricsTag:toString()" : {
    "add" : 2,
    "getClass" : 1,
    "getSimpleName" : 1,
    "toString" : 1,
    "value" : 1
  },
  "org.apache.hadoop.net.NetUtils:getFreeSocketPorts(int)" : {
    "add" : 1,
    "size" : 1,
    "checkArgument" : 1,
    "getFreeSocketPort" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:getParentZnode()" : {
    "getScopeInsideParentNode" : 1,
    "get" : 1,
    "endsWith" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addContext(org.eclipse.jetty.servlet.ServletContextHandler,boolean)" : {
    "addHandler" : 1,
    "addNoCacheFilter" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticationHandler:<init>()" : { },
  "org.apache.hadoop.io.SequenceFile$Reader:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : {
    "getValue" : 6,
    "openFile" : 1,
    "getLen" : 1,
    "getFileStatus" : 1,
    "getBufferSize" : 1,
    "getOption" : 6,
    "initialize" : 1,
    "getFileSystem" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:ioStatisticsToString(org.apache.hadoop.fs.statistics.IOStatistics)" : {
    "counters" : 1,
    "toString" : 1,
    "gauges" : 1,
    "meanStatistics" : 1,
    "minimums" : 1,
    "mapToString" : 5,
    "maximums" : 1
  },
  "org.apache.hadoop.crypto.CipherSuite:getConfigSuffix()" : {
    "split" : 1,
    "toLowerCase" : 1,
    "toString" : 1,
    "append" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:writeFile(org.apache.hadoop.io.SequenceFile$Sorter$RawKeyValueIterator,org.apache.hadoop.io.SequenceFile$Writer)" : {
    "next" : 1,
    "getValue" : 1,
    "getKey" : 2,
    "getLength" : 1,
    "sync" : 1,
    "getData" : 1,
    "appendRaw" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.security.http.CrossOriginFilter:init(javax.servlet.FilterConfig)" : {
    "initializeAllowedOrigins" : 1,
    "initializeMaxAge" : 1,
    "initializeAllowedMethods" : 1,
    "initializeAllowedHeaders" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:main(java.lang.String[])" : {
    "serviceMain" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.util.MachineList:<init>(java.util.Collection)" : { },
  "org.apache.hadoop.util.ShutdownHookManager:hasShutdownHook(java.lang.Runnable)" : {
    "contains" : 1
  },
  "org.apache.hadoop.fs.FsShell:printUsage(java.io.PrintStream)" : {
    "printInfo" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:getNextIdToTry(org.apache.hadoop.fs.Path,int)" : {
    "next" : 1,
    "extractId" : 1,
    "getName" : 1,
    "getPath" : 1,
    "hasNext" : 1,
    "toString" : 1,
    "listFiles" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.UTF8:fromBytes(byte[])" : {
    "readChars" : 1,
    "reset" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:lessThan(java.lang.Object,java.lang.Object)" : {
    "getKey" : 4,
    "compare" : 1,
    "getLength" : 2,
    "progress" : 1,
    "getData" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getUsed()" : {
    "resolve" : 1,
    "getUsed" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1
  },
  "org.apache.hadoop.conf.Configuration:getFile(java.lang.String,java.lang.String)" : {
    "hashCode" : 1,
    "mkdirs" : 1,
    "getParentFile" : 1,
    "getTrimmedStrings" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "readOnlyMountTable" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getUGIFromSubject(javax.security.auth.Subject)" : {
    "doSubjectLogin" : 1,
    "isEmpty" : 1,
    "getPrincipals" : 1
  },
  "org.apache.hadoop.jmx.JMXJsonServlet:listBeans(com.fasterxml.jackson.core.JsonGenerator,javax.management.ObjectName,java.lang.String,javax.servlet.http.HttpServletResponse)" : {
    "next" : 1,
    "queryNames" : 1,
    "getAttributes" : 1,
    "debug" : 1,
    "writeStringField" : 4,
    "writeStartObject" : 1,
    "hasNext" : 1,
    "writeEndObject" : 2,
    "error" : 6,
    "setStatus" : 1,
    "iterator" : 1,
    "getAttribute" : 2,
    "equals" : 1,
    "writeArrayFieldStart" : 1,
    "writeEndArray" : 2,
    "toString" : 1,
    "getClassName" : 1,
    "close" : 1,
    "writeAttribute" : 2,
    "getMBeanInfo" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:<init>(long,int,org.apache.hadoop.fs.store.BlockUploadStatistics)" : {
    "blockAllocated" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:activeInstance()" : {
    "checkState" : 1
  },
  "org.apache.hadoop.security.alias.BouncyCastleFipsKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.ipc.Server$Call:<init>(int,int,java.lang.Void,java.lang.Void,org.apache.hadoop.ipc.RPC$RpcKind,byte[])" : { },
  "org.apache.hadoop.io.SortedMapWritable:write(java.io.DataOutput)" : {
    "writeInt" : 1,
    "getValue" : 2,
    "getKey" : 2,
    "getClass" : 2,
    "writeByte" : 2,
    "size" : 1,
    "entrySet" : 1,
    "getId" : 2,
    "write" : 3
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:lowerBound(byte[])" : {
    "lowerBound" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:initRegistry(java.lang.Object)" : {
    "warn" : 1,
    "getClass" : 1,
    "getInfo" : 1,
    "setAccessible" : 1,
    "getType" : 1,
    "get" : 1,
    "context" : 1,
    "setContext" : 1,
    "getSimpleName" : 1,
    "getDeclaredFieldsIncludingInherited" : 1,
    "getAnnotations" : 1
  },
  "org.apache.hadoop.fs.shell.find.Name:prepare()" : {
    "toLowerCase" : 1,
    "getArgument" : 1
  },
  "org.apache.hadoop.fs.FileSystem:checkAccessPermissions(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.permission.FsAction)" : {
    "getShortUserName" : 1,
    "getCurrentUser" : 1,
    "getPermission" : 1,
    "format" : 1,
    "getOwner" : 2,
    "getGroupAction" : 1,
    "getGroupsSet" : 1,
    "contains" : 1,
    "getOtherAction" : 1,
    "getUserAction" : 1,
    "getGroup" : 2,
    "equals" : 1,
    "getPath" : 1,
    "implies" : 3,
    "isDirectory" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:checkForErrors(java.lang.String)" : {
    "checkError" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:copyFromLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getConf" : 1,
    "getLocal" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:noPasswordError()" : {
    "noPasswordError" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getDefaultBlockSize()" : {
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : { },
  "org.apache.hadoop.fs.shell.Command:displayError(java.lang.Exception)" : {
    "add" : 1,
    "displayError" : 1,
    "split" : 1,
    "getName" : 1,
    "debug" : 2,
    "getLocalizedMessage" : 1,
    "stringifyException" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable:readFields(java.io.DataInput)" : {
    "readIntArray" : 1,
    "readDoubleArray" : 1,
    "readString" : 1,
    "getPrimitiveClass" : 1,
    "newInstance" : 1,
    "readShortArray" : 1,
    "readLongArray" : 1,
    "readByteArray" : 1,
    "readCharArray" : 1,
    "checkDeclaredComponentType" : 1,
    "readFloatArray" : 1,
    "toString" : 1,
    "readBooleanArray" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path)" : {
    "create" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPointResolvedDstPathReplaceInterceptor:deserializeFromString(java.lang.String)" : {
    "split" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.util.ProgramDriver:run(java.lang.String[])" : {
    "println" : 2,
    "get" : 1,
    "invoke" : 1,
    "printUsage" : 2
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getWorkingDirectory()" : {
    "getHomeDirectory" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addRawCallVolume(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "getTotalRawCallVolume" : 1,
    "info" : 1,
    "addCounter" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:power(int,int)" : {
    "getFieldSize" : 1
  },
  "org.apache.hadoop.util.DurationInfo:<init>(org.slf4j.Logger,java.lang.String,java.lang.Object[])" : { },
  "org.apache.hadoop.crypto.random.OsSecureRandom:next(int)" : {
    "fillReservoir" : 1
  },
  "org.apache.hadoop.fs.permission.AclUtil:getMinimalAcl(org.apache.hadoop.fs.permission.FsPermission)" : {
    "newArrayList" : 1,
    "getOtherAction" : 1,
    "build" : 3,
    "getUserAction" : 1,
    "setPermission" : 3,
    "setScope" : 3,
    "setType" : 3,
    "getGroupAction" : 1
  },
  "org.apache.hadoop.util.StringUtils:getStrings(java.lang.String)" : {
    "getStrings" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$TypeCastingRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator)" : { },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:skipToNextMarker(long,int)" : {
    "bsR" : 2
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getTokenInfoFromZK(java.lang.String,boolean)" : {
    "readFields" : 1,
    "read" : 1,
    "readLong" : 1,
    "readInt" : 1,
    "error" : 1,
    "createIdentifier" : 1,
    "getData" : 1,
    "forPath" : 1
  },
  "org.apache.hadoop.security.KDiag:printEnv(java.lang.String)" : {
    "println" : 1,
    "getenv" : 1
  },
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.CharSequence,java.nio.charset.Charset)" : {
    "build" : 1,
    "newEncoder" : 1,
    "requireNonNull" : 3,
    "overwrite" : 1,
    "append" : 1,
    "createFile" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:getChecksumFileLength(org.apache.hadoop.fs.Path,long)" : {
    "getBytesPerSum" : 1,
    "getChecksumLength" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:build(java.lang.Object)" : {
    "bind" : 1,
    "build" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_snapshot()" : {
    "getCurrentIOStatisticsContext" : 1,
    "snapshot" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "debug" : 2,
    "load" : 1,
    "get" : 1,
    "getBoolean" : 2,
    "initialize" : 1,
    "isDebugEnabled" : 2,
    "getMountTableConfigLoader" : 1,
    "setBoolean" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:initBlock()" : {
    "getAllowableBlockSize" : 1,
    "initialiseCRC" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:toString()" : {
    "getState" : 1,
    "getIndex" : 1,
    "dataSize" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFormat:parse(java.util.List)" : {
    "size" : 4,
    "containsKey" : 2,
    "equals" : 3,
    "get" : 3,
    "put" : 2,
    "substring" : 1,
    "remove" : 4,
    "startsWith" : 3
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "createSnapshot" : 1
  },
  "org.apache.hadoop.fs.shell.TouchCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 2
  },
  "org.apache.hadoop.util.LightWeightGSet:<init>(int)" : {
    "debug" : 1,
    "isDebugEnabled" : 1,
    "actualArrayLength" : 1
  },
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,boolean,org.apache.hadoop.conf.Configuration)" : {
    "next" : 1,
    "openFile" : 1,
    "getName" : 2,
    "hasNext" : 1,
    "delete" : 1,
    "cleanupWithLogger" : 1,
    "checkDependencies" : 1,
    "checkDest" : 1,
    "opt" : 1,
    "build" : 1,
    "optLong" : 1,
    "mkdirs" : 1,
    "getLen" : 1,
    "getPath" : 2,
    "listStatusIterator" : 1,
    "create" : 1,
    "copy" : 1,
    "awaitFuture" : 1,
    "copyBytes" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.fs.FileSystem$Statistics,long)" : { },
  "org.apache.hadoop.io.retry.RetryPolicies:shouldFailoverOnException(java.lang.Exception)" : {
    "unwrapRemoteException" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:put(org.apache.hadoop.ipc.Schedulable)" : {
    "addInternal" : 1,
    "get" : 1,
    "isClientBackoffEnabled" : 1,
    "throwBackoff" : 1,
    "put" : 1,
    "shouldBackOff" : 1
  },
  "org.apache.hadoop.util.CrcComposer:digest()" : {
    "toByteArray" : 1,
    "reset" : 1,
    "write" : 1,
    "intToBytes" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getDefaultUri(org.apache.hadoop.conf.Configuration)" : {
    "getScheme" : 1,
    "getTrimmed" : 1,
    "fixName" : 1,
    "create" : 1
  },
  "org.apache.hadoop.security.token.delegation.DelegationKey:getKey()" : {
    "createSecretKey" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getNamed(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "fixName" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.fs.FileStatus)" : {
    "checkIfSchemeInferredFromPath" : 1,
    "setStat" : 1,
    "makeQualified" : 1,
    "stringToUri" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferData:setReady(org.apache.hadoop.fs.impl.prefetch.BufferData$State[])" : {
    "updateState" : 1,
    "rewind" : 1,
    "getChecksum" : 1,
    "asReadOnlyBuffer" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:<init>(java.lang.String,org.slf4j.Logger,long,long)" : { },
  "org.apache.hadoop.util.ComparableVersion$StringItem:isNull()" : {
    "compareTo" : 1,
    "comparableQualifier" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:read(long,byte[],int,int)" : {
    "read" : 1,
    "validatePositionedReadArgs" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:init(java.lang.Class)" : {
    "add" : 1,
    "contains" : 1,
    "debug" : 1,
    "getName" : 1,
    "addMetricIfNotExists" : 1,
    "getMethods" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "fullPath" : 2,
    "rename" : 1
  },
  "org.apache.hadoop.conf.ReconfigurableBase:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.FileUtil:execCommand(java.io.File,java.lang.String[])" : {
    "execCommand" : 1,
    "getCanonicalPath" : 1,
    "arraycopy" : 1
  },
  "org.apache.hadoop.io.compress.BlockCompressorStream:compress()" : {
    "compress" : 1,
    "write" : 1,
    "rawWriteInt" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:offer(java.lang.Object)" : {
    "offer" : 1,
    "get" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:processRpcRequest(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto,org.apache.hadoop.ipc.RpcWritable$Buffer)" : {
    "internalQueueCall" : 1,
    "getClientId" : 1,
    "setSignature" : 1,
    "getTraceInfo" : 1,
    "getRouterFederatedState" : 1,
    "getMaxIdleTime" : 1,
    "convert" : 1,
    "byteStringToSpanContext" : 1,
    "getDeclaringClassProtocolName" : 1,
    "setClientStateId" : 1,
    "isCoordinatedCall" : 1,
    "getRpcRequestWrapper" : 1,
    "curThreadTracer" : 1,
    "hasRouterFederatedState" : 1,
    "getHostAddress" : 2,
    "getSpanContext" : 1,
    "getRetryCount" : 1,
    "getCallId" : 1,
    "getRequestHeader" : 2,
    "receiveRequestState" : 1,
    "getMethodName" : 1,
    "hasCallerContext" : 1,
    "toTraceName" : 1,
    "incRpcCount" : 1,
    "setFederatedNamespaceState" : 1,
    "getCallerContext" : 2,
    "getSignature" : 1,
    "getMessage" : 1,
    "newInstance" : 1,
    "getRpcKind" : 5,
    "hasTraceInfo" : 1,
    "newSpan" : 1,
    "warn" : 2,
    "setPriorityLevel" : 1,
    "build" : 1,
    "toByteArray" : 2,
    "hasSpanContext" : 1,
    "toString" : 1,
    "markCallCoordinated" : 2,
    "getContext" : 1,
    "setTracer" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Df:getUsagesTable()" : { },
  "org.apache.hadoop.fs.viewfs.ViewFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "setXAttr" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:decryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : {
    "doOp" : 1,
    "decryptEncryptedKey" : 1,
    "nextIdx" : 1,
    "getCause" : 3
  },
  "org.apache.hadoop.io.Text:readString(java.io.DataInput)" : {
    "readString" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$RpcProtobufRequest:toString()" : {
    "getDeclaringClassProtocolName" : 1,
    "getRequestHeader" : 1,
    "getMethodName" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:setJobConf(java.lang.Object,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 2,
    "invoke" : 1,
    "getMethod" : 1,
    "isAssignableFrom" : 2,
    "getClassByNameOrNull" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState)" : {
    "resetOutputBuffers" : 1,
    "encodeData" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getHomeDirectory()" : {
    "getShortUserName" : 1,
    "warn" : 1,
    "getCurrentUser" : 1,
    "getProperty" : 1,
    "makeQualified" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getServerDefaults()" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.ipc.Server:setupResponseForWritable(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto,org.apache.hadoop.io.Writable)" : {
    "writeTo" : 2,
    "toByteArray" : 1,
    "get" : 1,
    "reset" : 1,
    "setCapacity" : 1,
    "wrap" : 2,
    "capacity" : 1
  },
  "org.apache.hadoop.log.LogThrottlingHelper:<init>(long,java.lang.String)" : { },
  "org.apache.hadoop.ha.HAAdmin:help(java.lang.String[],java.util.Map)" : {
    "println" : 3,
    "get" : 1,
    "printUsage" : 3,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:getChecksumOpt()" : {
    "getCrcType" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsMappingWithFallback:<init>()" : {
    "getClass" : 1,
    "getName" : 1,
    "debug" : 2,
    "isDebugEnabled" : 1,
    "isNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.ha.HAServiceTarget:getProxyForAddress(org.apache.hadoop.conf.Configuration,int,int,java.net.InetSocketAddress)" : {
    "getDefaultSocketFactory" : 1,
    "setInt" : 1
  },
  "org.apache.hadoop.http.HttpServer2:<init>(org.apache.hadoop.http.HttpServer2$Builder)" : {
    "constructSecretProvider" : 1,
    "setAttribute" : 1,
    "createWebAppContext" : 1,
    "getServletContext" : 2,
    "getWebAppsPath" : 1,
    "initializeWebServer" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:<init>()" : { },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:updateReportedByteCount(int)" : {
    "updateProcessedByteCount" : 1
  },
  "org.apache.hadoop.util.IntrusiveCollection:toArray()" : {
    "next" : 1,
    "iterator" : 1,
    "hasNext" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "keyClass" : 1,
    "valueClass" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.security.SaslPropertiesResolver:getInstance(org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.shell.Delete$Rm:processOptions(java.util.LinkedList)" : {
    "getOpt" : 5,
    "parse" : 1
  },
  "org.apache.hadoop.fs.StorageType:getMovableTypes()" : {
    "getNonTransientTypes" : 1
  },
  "org.apache.hadoop.util.QuickSort:sort(org.apache.hadoop.util.IndexedSortable,int,int,org.apache.hadoop.util.Progressable)" : {
    "sortInternal" : 1,
    "getMaxDepth" : 1
  },
  "org.apache.hadoop.util.ToolRunner:run(org.apache.hadoop.util.Tool,java.lang.String[])" : {
    "getConf" : 1,
    "run" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:getInstance(org.apache.hadoop.conf.Configuration)" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.fs.shell.Display$AvroFileInputStream:<init>(org.apache.hadoop.fs.FileStatus)" : {
    "jsonEncoder" : 1,
    "get" : 1,
    "getFileContext" : 1,
    "getPath" : 1,
    "openReader" : 1,
    "getSchema" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:readChunk(long,byte[],int,int,byte[])" : {
    "read" : 1,
    "min" : 2,
    "needChecksum" : 1,
    "readFully" : 1,
    "getPos" : 2,
    "getChecksumFilePos" : 1,
    "seek" : 2
  },
  "org.apache.hadoop.ipc.RpcWritable$Buffer:wrap(java.nio.ByteBuffer)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getStoragePolicy" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:read(long,java.nio.ByteBuffer)" : {
    "getClass" : 1,
    "read" : 1,
    "checkStream" : 1,
    "getCanonicalName" : 1,
    "position" : 1,
    "decrypt" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:createOptions()" : {
    "getCommandFactory" : 1,
    "setErr" : 1,
    "setIn" : 1,
    "getConf" : 1,
    "setCommandFactory" : 1,
    "setConfiguration" : 1,
    "setOut" : 1
  },
  "org.apache.hadoop.ipc.Server:getServerRpcInvoker(org.apache.hadoop.ipc.RPC$RpcKind)" : {
    "getRpcInvoker" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "deleteSnapshot" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,long)" : {
    "mustLong" : 1
  },
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,java.lang.Iterable,java.nio.charset.Charset)" : {
    "newLine" : 1,
    "build" : 1,
    "newEncoder" : 1,
    "requireNonNull" : 3,
    "create" : 1,
    "overwrite" : 1,
    "append" : 1
  },
  "org.apache.hadoop.conf.ReconfigurableBase:reconfigureProperty(java.lang.String,java.lang.String)" : {
    "reconfigurePropertyImpl" : 1,
    "set" : 1,
    "getConf" : 5,
    "isPropertyReconfigurable" : 1,
    "get" : 2,
    "unset" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileContext:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "removeXAttr" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.util.ZKUtil:getPermFromString(java.lang.String)" : {
    "length" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getDataBlock(int)" : {
    "createReader" : 1,
    "get" : 1,
    "format" : 1,
    "getBlockCount" : 2,
    "getBlockRegionList" : 1,
    "getDefaultCompressionAlgorithm" : 1
  },
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:<init>()" : { },
  "org.apache.hadoop.fs.FileSystem:getQuotaUsage(org.apache.hadoop.fs.Path)" : {
    "getContentSummary" : 1
  },
  "org.apache.hadoop.fs.permission.AclEntry:parseAclSpec(java.lang.String,boolean)" : {
    "add" : 1,
    "parseAclEntry" : 1,
    "getStringCollection" : 1
  },
  "org.apache.hadoop.fs.shell.Delete$Expunge:processArguments(java.util.LinkedList)" : {
    "checkpoint" : 2,
    "set" : 1,
    "getConf" : 4,
    "get" : 1,
    "expunge" : 2,
    "length" : 1,
    "expungeImmediately" : 2,
    "getChildFileSystems" : 1
  },
  "org.apache.hadoop.net.SocketOutputStream:transferToFully(java.nio.channels.FileChannel,long,int)" : {
    "transferToFully" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$DataIndex:write(java.io.DataOutput)" : {
    "getName" : 1,
    "size" : 1,
    "writeVInt" : 1,
    "write" : 1,
    "writeString" : 1
  },
  "org.apache.hadoop.fs.shell.Command:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.io.MD5Hash:read(java.io.DataInput)" : {
    "readFields" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:<init>(org.apache.hadoop.util.DataChecksum)" : {
    "getBytesPerChecksum" : 1,
    "getChecksumSize" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:writeConnectionContext(org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : {
    "getProtocolName" : 1,
    "makeRpcRequestHeader" : 1,
    "toByteArray" : 1,
    "getProtocol" : 1,
    "makeIpcConnectionContext" : 1,
    "writeDelimitedTo" : 2,
    "sendRequest" : 1,
    "getTicket" : 1
  },
  "org.apache.hadoop.fs.FileSystem:completeLocalOutput(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "moveFromLocalFile" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:setContext(java.lang.String)" : {
    "tuple" : 1
  },
  "org.apache.hadoop.fs.FileSystem:moveToLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyToLocalFile" : 1
  },
  "org.apache.hadoop.util.MachineList:<init>(java.lang.String)" : { },
  "org.apache.hadoop.security.AuthenticationFilterInitializer:getFilterConfigMap(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getValue" : 1,
    "getKey" : 1,
    "entrySet" : 1,
    "get" : 2,
    "getServerPrincipal" : 1,
    "toString" : 1,
    "getPropsWithPrefix" : 1,
    "put" : 3
  },
  "org.apache.hadoop.util.functional.RemoteIterators$MappingRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator,org.apache.hadoop.util.functional.FunctionRaisingIOE)" : {
    "requireNonNull" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreBuilderImpl:withSampleTracking(java.lang.String[])" : {
    "withMaximums" : 1,
    "withMinimums" : 1,
    "withMeanStatistics" : 1,
    "withCounters" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileMeta:<init>(java.lang.String)" : {
    "makeComparator" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet$Values:clear()" : {
    "clear" : 1
  },
  "org.apache.hadoop.fs.CachingGetSpaceUsed$RefreshThread:run()" : {
    "running" : 1,
    "sleep" : 1,
    "warn" : 1,
    "current" : 1,
    "currentThread" : 1,
    "max" : 1,
    "interrupt" : 1,
    "refresh" : 1,
    "getMessage" : 1,
    "nextLong" : 1
  },
  "org.apache.hadoop.conf.Configuration:getInts(java.lang.String)" : {
    "parseInt" : 1,
    "getTrimmedStrings" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:compareKeys(org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "compare" : 1,
    "isSorted" : 1
  },
  "org.apache.hadoop.fs.viewfs.FsGetter:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:updateFileNames(java.lang.String,java.lang.String)" : {
    "set" : 1,
    "get" : 1,
    "info" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(java.util.List,org.apache.hadoop.fs.Path)" : {
    "merge" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:getInstance(org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.ha.PowerShellFencer:tryFence(org.apache.hadoop.ha.HAServiceTarget,java.lang.String)" : {
    "getHostName" : 1,
    "start" : 3,
    "error" : 1,
    "getInputStream" : 1,
    "warn" : 2,
    "getErrorStream" : 1,
    "buildPSScript" : 1,
    "getOutputStream" : 1,
    "getAddress" : 1,
    "join" : 2,
    "waitFor" : 1,
    "close" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.RpcNoSuchMethodException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.conf.Configuration:getClass(java.lang.String,java.lang.Class)" : {
    "getClassByName" : 1,
    "getTrimmed" : 1
  },
  "org.apache.hadoop.util.DurationInfo:toString()" : {
    "getFormattedText" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:listStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "makeQualified" : 1,
    "getUriPath" : 1,
    "length" : 1,
    "getPath" : 1,
    "isInternalDir" : 1,
    "listStatus" : 1,
    "stripOutRoot" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile:getSupportedCompressionAlgorithms()" : {
    "getSupportedAlgorithms" : 1
  },
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "getInt" : 1,
    "checkNotNull" : 2,
    "getConf" : 1,
    "getDefaultReplication" : 1,
    "makeQualified" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.fs.FileContext:getAbstractFileSystem(org.apache.hadoop.security.UserGroupInformation,java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "doAs" : 1,
    "get" : 1,
    "toString" : 1,
    "error" : 1,
    "getCause" : 1
  },
  "org.apache.hadoop.metrics2.sink.GraphiteSink$Graphite:write(java.lang.String)" : {
    "isConnected" : 2,
    "write" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.metrics2.sink.FileSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : {
    "println" : 1,
    "print" : 13,
    "name" : 3,
    "context" : 1,
    "metrics" : 1,
    "value" : 2,
    "tags" : 1,
    "timestamp" : 1
  },
  "org.apache.hadoop.ipc.Server:registerProtocolEngine(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.Class,org.apache.hadoop.ipc.RPC$RpcInvoker)" : {
    "debug" : 1,
    "put" : 2
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:cancelDelegationToken(org.apache.hadoop.security.token.Token)" : {
    "getActualUgi" : 1,
    "generateDelegationToken" : 1,
    "doAs" : 1,
    "debug" : 1,
    "getDoAsUser" : 1,
    "createAuthenticatedURL" : 1,
    "cancelDelegationToken" : 1,
    "createURL" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:toString()" : {
    "getLeaf" : 1,
    "getNumOfLeaves" : 1,
    "getPath" : 1,
    "toString" : 1,
    "append" : 8
  },
  "org.apache.hadoop.security.SecurityUtil:getZKAuthInfos(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "emptyList" : 1,
    "getPassword" : 1,
    "resolveConfIndirection" : 1,
    "valueOf" : 1,
    "error" : 1,
    "parseAuth" : 1
  },
  "org.apache.hadoop.conf.Configuration:getInt(java.lang.String,int)" : {
    "parseInt" : 2,
    "getHexDigits" : 1,
    "getTrimmed" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.io.NullWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getChrootedPath(org.apache.hadoop.fs.viewfs.InodeTree$ResolveResult,org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Path)" : {
    "stripRoot" : 1,
    "makeQualified" : 1,
    "length" : 1,
    "getPath" : 1,
    "stripOutRoot" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:<init>(long,long,long,long,long,long)" : {
    "setSpaceQuota" : 1,
    "setSpaceConsumed" : 1,
    "setQuota" : 1
  },
  "org.apache.hadoop.fs.FileUtil:stat2Paths(org.apache.hadoop.fs.FileStatus[])" : {
    "getPath" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$BoundMethod:invoke(java.lang.Object[])" : {
    "invoke" : 1
  },
  "org.apache.hadoop.ipc.Client:getRpcResponse(org.apache.hadoop.ipc.Client$Call,org.apache.hadoop.ipc.Client$Connection,long,java.util.concurrent.TimeUnit)" : {
    "getHostname" : 1,
    "wait" : 1,
    "currentThread" : 1,
    "getPort" : 1,
    "getHostName" : 1,
    "getRpcResponse" : 1,
    "getRemoteAddress" : 1,
    "interrupt" : 1,
    "wrapException" : 1,
    "fillInStackTrace" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:checkDataLength(int)" : {
    "warn" : 2,
    "getHostAddress" : 2
  },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:getRack(java.lang.String)" : {
    "getNetworkLocation" : 1,
    "unlock" : 1,
    "normalize" : 1,
    "readLock" : 2,
    "isRack" : 1,
    "lock" : 1,
    "getNode" : 1,
    "isNodeGroup" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:getActiveData()" : {
    "code" : 1,
    "getDataWithRetries" : 1,
    "createConnection" : 1,
    "isNodeDoesNotExist" : 1
  },
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getParameter(java.lang.String)" : {
    "quoteHtmlChars" : 1,
    "unquoteHtmlChars" : 1,
    "getParameter" : 1
  },
  "org.apache.hadoop.http.ProfileOutputServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getPathInfo" : 1,
    "getServletContext" : 2,
    "getRequestURI" : 1,
    "setResponseHeader" : 2,
    "getQueryString" : 2,
    "length" : 1,
    "getRealPath" : 1,
    "setHeader" : 1,
    "setStatus" : 1,
    "getWriter" : 2,
    "write" : 2,
    "isInstrumentationAccessAllowed" : 1,
    "sanitize" : 1,
    "info" : 1,
    "doGet" : 1
  },
  "org.apache.hadoop.io.IOUtils:copyBytes(java.io.InputStream,java.io.OutputStream,org.apache.hadoop.conf.Configuration,boolean)" : {
    "getInt" : 1,
    "copyBytes" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:safeDelete(java.lang.String,java.util.List,java.lang.String)" : {
    "commit" : 1,
    "exists" : 1,
    "delete" : 1,
    "createTransaction" : 1
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipCompressor:compress(byte[],int,int)" : {
    "writeHeader" : 1,
    "deflate" : 1,
    "writeTrailer" : 1,
    "fillTrailer" : 1,
    "finished" : 2
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:createZooKeeper()" : {
    "initiateZookeeper" : 1,
    "setSslConfiguration" : 1
  },
  "org.apache.hadoop.io.retry.CallReturn:getReturnValue()" : {
    "checkState" : 1
  },
  "org.apache.hadoop.fs.FileContext:listStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "listStatusIterator" : 1
  },
  "org.apache.hadoop.fs.shell.Stat:processOptions(java.util.LinkedList)" : {
    "contains" : 1,
    "getOpt" : 1,
    "getFirst" : 1,
    "removeFirst" : 1,
    "parse" : 2,
    "setRecursive" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:getUser()" : {
    "setAuthenticationMethod" : 1,
    "createProxyUser" : 1,
    "equals" : 1,
    "isEmpty" : 2,
    "toString" : 5,
    "createRemoteUser" : 2
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Invoker:close()" : {
    "stopClient" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.XORErasureEncoder:prepareEncodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getConf" : 1,
    "getOutputBlocks" : 1,
    "createRawEncoder" : 1,
    "getOptions" : 1,
    "getInputBlocks" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:<init>(org.apache.hadoop.fs.permission.FsAction,org.apache.hadoop.fs.permission.FsAction,org.apache.hadoop.fs.permission.FsAction,boolean)" : {
    "set" : 1
  },
  "org.apache.hadoop.conf.Configuration$Parser:handleEndProperty()" : {
    "add" : 3,
    "size" : 1,
    "readTagFromConfig" : 1,
    "get" : 1,
    "toArray" : 1,
    "isEmpty" : 1,
    "getDeprecatedKeyMap" : 1,
    "clearAccessed" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatus" : 1,
    "getSymlink" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getFileStatus(org.apache.commons.net.ftp.FTPFile,org.apache.hadoop.fs.Path)" : {
    "getSize" : 1,
    "getName" : 1,
    "getTimestamp" : 1,
    "makeQualified" : 1,
    "getGroup" : 1,
    "getUser" : 1,
    "getPermissions" : 1,
    "getTimeInMillis" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:handleException(java.lang.reflect.Method,int,org.apache.hadoop.io.retry.RetryPolicy,org.apache.hadoop.io.retry.RetryInvocationHandler$Counters,long,java.lang.Exception)" : {
    "idempotentOrAtMostOnce" : 1,
    "isFailover" : 1,
    "getName" : 1,
    "debug" : 1,
    "log" : 1,
    "getFailException" : 1,
    "isFail" : 1,
    "newRetryInfo" : 1,
    "getString" : 1,
    "isDebugEnabled" : 1,
    "getProxyInfo" : 1
  },
  "org.apache.hadoop.crypto.key.UserProvider:getMetadata(java.lang.String)" : {
    "getSecretKey" : 1,
    "containsKey" : 1,
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor$ZStandardDirectDecompressor:<init>(int)" : { },
  "org.apache.hadoop.util.StringUtils:getTrimmedStringCollection(java.lang.String)" : {
    "getTrimmedStrings" : 1,
    "remove" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getStorageStatistics()" : {
    "toString" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementBytesWritten(long)" : {
    "getThreadStatistics" : 1
  },
  "org.apache.hadoop.ipc.CallerContext$Builder:appendIfAbsent(java.lang.String,java.lang.String)" : {
    "contains" : 1,
    "isValid" : 2,
    "length" : 1,
    "toString" : 1,
    "append" : 4
  },
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[],java.io.File,java.util.Map,long)" : { },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker:call(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.ipc.RpcWritable$Buffer,long,java.lang.String,java.lang.String,long)" : {
    "call" : 1,
    "isShadedPBImpl" : 1,
    "processCall" : 1,
    "getProtocolImpl" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "getProxy" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "getShortUserName" : 1,
    "owner" : 1,
    "addEntries" : 1,
    "stickyBit" : 1,
    "build" : 1,
    "getPrimaryGroupName" : 1,
    "checkPathIsSlash" : 1,
    "group" : 1,
    "getMinimalAcl" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:reset()" : {
    "terminateConnection" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:<init>(org.apache.hadoop.metrics2.MetricsInfo,long,java.util.List,java.lang.Iterable)" : {
    "checkNotNull" : 3,
    "checkArg" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:removeAcl(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "removeAcl" : 1
  },
  "org.apache.hadoop.net.DNS:getDefaultIP(java.lang.String)" : {
    "getIPs" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getLen()" : {
    "getLen" : 1
  },
  "org.apache.hadoop.util.AsyncDiskService:awaitTermination(long)" : {
    "warn" : 1,
    "getValue" : 1,
    "entrySet" : 1,
    "max" : 1,
    "now" : 2,
    "awaitTermination" : 1,
    "info" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat$MinMax:reset(org.apache.hadoop.metrics2.util.SampleStat$MinMax)" : {
    "min" : 1,
    "max" : 1
  },
  "org.apache.hadoop.io.Text:decode(byte[],int,int)" : {
    "decode" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:decrypt(long,byte[],int,int)" : {
    "getBuffer" : 2,
    "getPadding" : 1,
    "returnBuffer" : 2,
    "put" : 1,
    "remaining" : 1,
    "afterDecryption" : 1,
    "min" : 1,
    "getDecryptor" : 1,
    "get" : 1,
    "clone" : 1,
    "position" : 1,
    "decrypt" : 1,
    "updateDecryptor" : 1,
    "returnDecryptor" : 1
  },
  "org.apache.hadoop.fs.FSInputChecker:fill()" : {
    "readChecksumChunk" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:saslReadAndProcess(org.apache.hadoop.ipc.RpcWritable$Buffer)" : {
    "getDefaultInstance" : 1,
    "getState" : 1,
    "getToken" : 1,
    "toByteArray" : 1,
    "getMessage" : 1,
    "saslProcess" : 1,
    "unwrapPacketAndProcessRpcs" : 1
  },
  "org.apache.hadoop.security.http.XFrameOptionsFilter:getFilterParams(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getPropsWithPrefix" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:getByName(java.lang.String)" : {
    "warn" : 1,
    "trace" : 1,
    "stop" : 1,
    "now" : 1,
    "start" : 1,
    "getByName" : 2,
    "isTraceEnabled" : 2
  },
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader:<init>(org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader$Builder)" : {
    "getValue" : 1,
    "getKey" : 1,
    "buildHttpReferrer" : 1,
    "addAttribute" : 4,
    "requireNonNull" : 3,
    "copyOf" : 1,
    "putIfAbsent" : 1
  },
  "org.apache.hadoop.util.Shell:getSetPermissionCommand(java.lang.String,boolean)" : {
    "getWinUtilsPath" : 2
  },
  "org.apache.hadoop.fs.AbstractFileSystem:makeQualified(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "makeQualified" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Df:setHumanReadable(boolean)" : { },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall:processWaitTimeAndRetryInfo()" : {
    "processRetryInfo" : 1,
    "getWaitTime" : 1,
    "trace" : 1,
    "monotonicNow" : 1,
    "getCallId" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkMerge(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI[])" : {
    "set" : 1,
    "toString" : 1,
    "getConfigViewFsPrefix" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:fromShort(short)" : {
    "set" : 1
  },
  "org.apache.hadoop.security.token.Token:isManaged()" : {
    "getRenewer" : 1,
    "isManaged" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseBackOffByResponseTimeEnabled(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getBoolean" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency:setConf(org.apache.hadoop.conf.Configuration)" : {
    "setConf" : 2,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.AbstractNativeRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState)" : {
    "debug" : 1,
    "get" : 1,
    "doDecode" : 1,
    "convertToByteBufferState" : 1
  },
  "org.apache.hadoop.security.token.DtUtilShell$Append:execute()" : {
    "getConf" : 1,
    "appendTokenFiles" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "satisfyStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.FileSystem:get(org.apache.hadoop.conf.Configuration)" : {
    "getDefaultUri" : 1,
    "get" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProtocolEngine(java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "getName" : 1,
    "get" : 1,
    "newInstance" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.shell.Ls:formatSize(long)" : {
    "long2String" : 1,
    "valueOf" : 1
  },
  "org.apache.hadoop.util.RunJar:unJar(java.io.InputStream,java.io.File,java.util.regex.Pattern)" : {
    "ensureDirectory" : 1,
    "getCanonicalPath" : 2,
    "getName" : 3,
    "getTime" : 1,
    "matcher" : 1,
    "getNextJarEntry" : 2,
    "matches" : 1,
    "warn" : 1,
    "toPath" : 1,
    "newOutputStream" : 1,
    "getParentFile" : 1,
    "setLastModified" : 1,
    "copyBytes" : 2,
    "isDirectory" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.XORErasureDecoder:getOutputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getParityBlocks" : 2,
    "isErased" : 2,
    "getNumErasedBlocks" : 1,
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1,
    "getDataBlocks" : 2
  },
  "org.apache.hadoop.conf.ConfServlet:writeResponse(org.apache.hadoop.conf.Configuration,java.io.Writer,java.lang.String,java.lang.String)" : {
    "equals" : 2,
    "writeXml" : 1,
    "dumpConfiguration" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:gauges()" : {
    "getWrapped" : 1,
    "gauges" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecRegistry:<init>()" : {
    "load" : 1,
    "updateCoders" : 1
  },
  "org.apache.hadoop.fs.permission.AclStatus:getEffectivePermission(org.apache.hadoop.fs.permission.AclEntry)" : {
    "getEffectivePermission" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:getDefault()" : { },
  "org.apache.hadoop.net.NetUtils:getIPs(java.lang.String,boolean)" : {
    "getInfo" : 1,
    "hasMoreElements" : 2,
    "getSubInterfaces" : 1,
    "error" : 1,
    "addMatchingAddrs" : 2,
    "getNetworkInterfaces" : 1,
    "nextElement" : 2
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenInformation:write(java.io.DataOutput)" : {
    "writeVInt" : 2,
    "writeVLong" : 1,
    "writeString" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:requestPrefetch(int)" : {
    "checkNotNegative" : 1,
    "now" : 1,
    "requestPrefetch" : 1,
    "stateEqualsOneOf" : 2,
    "tryAcquire" : 1,
    "end" : 1,
    "setPrefetch" : 1,
    "executeFunction" : 1
  },
  "org.apache.hadoop.io.erasurecode.ECSchema:<init>(java.lang.String,int,int)" : { },
  "org.apache.hadoop.fs.UnionStorageStatistics$LongStatisticIterator:next()" : {
    "next" : 1,
    "getIter" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:lockInterruptibly()" : {
    "monotonicNow" : 2,
    "lockInterruptibly" : 1,
    "startLockTiming" : 1,
    "check" : 1
  },
  "org.apache.hadoop.ipc.Server:addSuppressedLoggingExceptions(java.lang.Class[])" : {
    "addSuppressedLoggingExceptions" : 1
  },
  "org.apache.hadoop.fs.local.RawLocalFs:getServerDefaults()" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:toString()" : {
    "getDelay" : 1,
    "get" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.RefreshCallQueueProtocolClientSideTranslatorPB:refreshCallQueue()" : {
    "refreshCallQueue" : 1,
    "ipc" : 1
  },
  "org.apache.hadoop.util.dynamic.DynConstructors$Builder:hiddenImpl(java.lang.String,java.lang.Class[])" : {
    "forName" : 1,
    "hiddenImpl" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.PassthroughCodec$PassthroughDecompressorStream:<init>(java.io.InputStream)" : { },
  "org.apache.hadoop.ipc.Client$Connection:handleConnectionFailure(int,java.io.IOException)" : {
    "sleep" : 1,
    "warn" : 1,
    "currentThread" : 1,
    "debug" : 1,
    "isInterrupted" : 1,
    "shouldRetry" : 1,
    "initCause" : 1,
    "isDebugEnabled" : 1,
    "info" : 1,
    "closeConnection" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "createSnapshot" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:prepareMetaBlock(java.lang.String,java.lang.String)" : {
    "getCompressionAlgorithmByName" : 1,
    "prepareMetaBlock" : 1
  },
  "org.apache.hadoop.io.BooleanWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.security.UserGroupInformation:addToken(org.apache.hadoop.security.token.Token)" : {
    "addToken" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getVirtualMemorySize()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:run(java.lang.String[])" : {
    "sendLogLevelRequest" : 1,
    "printUsage" : 1,
    "parseArguments" : 1
  },
  "org.apache.hadoop.io.serializer.DeserializerComparator:<init>(org.apache.hadoop.io.serializer.Deserializer)" : {
    "open" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:file(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.PathOperationException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.io.MapWritable:write(java.io.DataOutput)" : {
    "writeInt" : 1,
    "getValue" : 2,
    "getKey" : 2,
    "getClass" : 2,
    "writeByte" : 2,
    "size" : 1,
    "entrySet" : 1,
    "getId" : 2,
    "write" : 3
  },
  "org.apache.hadoop.util.LightWeightResizableGSet:<init>(int)" : { },
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:newForField(java.lang.reflect.Field,org.apache.hadoop.metrics2.annotation.Metric,org.apache.hadoop.metrics2.lib.MetricsRegistry)" : {
    "always" : 2,
    "add" : 1,
    "getName" : 2,
    "debug" : 1,
    "newGauge" : 3,
    "getInfo" : 1,
    "valueName" : 3,
    "about" : 1,
    "description" : 2,
    "newStat" : 1,
    "sampleName" : 2,
    "newRatesWithAggregation" : 1,
    "getType" : 2,
    "newCounter" : 2,
    "name" : 6,
    "newForField" : 1,
    "interval" : 1,
    "newRate" : 1,
    "isDebugEnabled" : 1,
    "newMutableRollingAverages" : 1,
    "newQuantiles" : 1
  },
  "org.apache.hadoop.ipc.Server:getAuxiliaryListenerAddresses()" : {
    "add" : 1,
    "size" : 1,
    "values" : 1,
    "getAddress" : 1
  },
  "org.apache.hadoop.io.compress.Lz4Codec:createCompressor()" : {
    "getInt" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.PathNotFoundException:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.fs.statistics.DurationStatisticSummary:fetchDurationSummary(org.apache.hadoop.fs.statistics.IOStatistics,java.lang.String,boolean)" : {
    "getOrDefault" : 3,
    "counters" : 1,
    "get" : 1,
    "meanStatistics" : 1,
    "minimums" : 1,
    "maximums" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getTotalRequests()" : {
    "getTotalRequests" : 1
  },
  "org.apache.hadoop.util.GcTimeMonitor$Builder:build()" : { },
  "org.apache.hadoop.http.HttpServer2:initializeWebServer(java.lang.String,java.lang.String,org.apache.hadoop.conf.Configuration,java.lang.String[])" : {
    "addDefaultApps" : 1,
    "setHandler" : 1,
    "getName" : 1,
    "getSessionCookieConfig" : 1,
    "initFilter" : 1,
    "getSessionHandler" : 1,
    "checkNotNull" : 1,
    "getBoolean" : 1,
    "addGlobalFilter" : 1,
    "getRequestLog" : 1,
    "insertHandler" : 1,
    "setHeaders" : 1,
    "addHandler" : 3,
    "getThreadPool" : 1,
    "set" : 1,
    "getWebAppsPath" : 1,
    "setRequestLog" : 1,
    "addPrometheusServlet" : 1,
    "setDaemon" : 1,
    "getInt" : 1,
    "addDefaultServlets" : 1,
    "getFilterInitializers" : 1,
    "setHttpOnly" : 1,
    "setMaxThreads" : 1,
    "addAsyncProfilerServlet" : 1,
    "setSecure" : 1
  },
  "org.apache.hadoop.fs.shell.Delete$Rm:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "println" : 1,
    "canBeSafelyDeleted" : 1,
    "moveToTrash" : 1,
    "toString" : 2,
    "delete" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.retry.LossyRetryInvocationHandler:invokeMethod(java.lang.reflect.Method,java.lang.Object[])" : {
    "set" : 1,
    "debug" : 2,
    "get" : 1,
    "isDebugEnabled" : 2,
    "invokeMethod" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.String)" : {
    "getSip" : 1,
    "authorize" : 1
  },
  "org.apache.hadoop.crypto.key.KeyShell$RollCommand:execute()" : {
    "getOut" : 4,
    "printProviderWritten" : 1,
    "println" : 4,
    "warnIfTransientProvider" : 1,
    "flush" : 1,
    "rollNewVersion" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:getPmdkSupportStateMessage()" : {
    "getPmdkLibPath" : 2,
    "getMessage" : 2
  },
  "org.apache.hadoop.security.UserGroupInformation:getPrimaryGroupName()" : {
    "next" : 1,
    "iterator" : 1,
    "isEmpty" : 1,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "unlock" : 1,
    "writeLock" : 2,
    "getNumDataUnits" : 1,
    "lock" : 1,
    "getNumParityUnits" : 1,
    "initImpl" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable$Internal:<init>()" : { },
  "org.apache.hadoop.ipc.RPC:getProtocolInterfaces(java.lang.Class)" : {
    "getSuperInterfaces" : 1,
    "getInterfaces" : 1
  },
  "org.apache.hadoop.util.IdentityHashStore:put(java.lang.Object,java.lang.Object)" : {
    "checkNotNull" : 1,
    "putInternal" : 1,
    "realloc" : 2
  },
  "org.apache.hadoop.security.SaslPropertiesResolver:getServerProperties(java.net.InetAddress,int)" : {
    "getServerProperties" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainOutputStream:write(int)" : {
    "reference" : 1,
    "unreference" : 1,
    "writeArray0" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$TestingGroups:getGroups(java.lang.String)" : {
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getMaximumReference(java.lang.String)" : {
    "lookup" : 1
  },
  "org.apache.hadoop.fs.impl.PathCapabilitiesSupport:validatePathCapabilityArgs(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "toLowerCase" : 1,
    "isEmpty" : 1,
    "checkArgument" : 3
  },
  "org.apache.hadoop.conf.Configuration:loadResources(java.util.Properties,java.util.ArrayList,int,boolean,boolean)" : {
    "addTags" : 1,
    "set" : 1,
    "size" : 1,
    "loadResource" : 2,
    "get" : 1
  },
  "org.apache.hadoop.fs.Path:isAbsolute()" : {
    "isUriPathAbsolute" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileMeta:write(java.io.DataOutput)" : {
    "writeVLong" : 1,
    "writeString" : 1,
    "write" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:renewDelegationToken(org.apache.hadoop.security.token.Token)" : {
    "getActualUgi" : 1,
    "generateDelegationToken" : 1,
    "doAs" : 1,
    "debug" : 1,
    "getDoAsUser" : 1,
    "renewDelegationToken" : 1,
    "createAuthenticatedURL" : 1,
    "createURL" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$ConcurrentQueue:isEmpty(long)" : {
    "monotonicNow" : 1,
    "get" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addInternalServlet(java.lang.String,java.lang.String,java.lang.Class)" : {
    "addInternalServlet" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtobufRpcEngineCallbackImpl:setResponse(org.apache.hadoop.thirdparty.protobuf.Message)" : {
    "now" : 1,
    "setDeferredResponse" : 1,
    "updateDeferredMetrics" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:deleteCheckpoint(boolean)" : {
    "getTrashRoots" : 1,
    "deleteCheckpoint" : 1,
    "getPath" : 2,
    "info" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getOutputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getParityBlocks" : 2,
    "isErased" : 2,
    "getNumErasedBlocks" : 1,
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1,
    "getDataBlocks" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getBlockSize()" : {
    "getBlockSize" : 1
  },
  "org.apache.hadoop.service.launcher.HadoopUncaughtExceptionHandler:uncaughtException(java.lang.Thread,java.lang.Throwable)" : {
    "isShutdownInProgress" : 1,
    "println" : 1,
    "haltOnOutOfMemory" : 1,
    "get" : 1,
    "uncaughtException" : 1,
    "toString" : 3,
    "terminate" : 1,
    "error" : 3,
    "convertToExitException" : 1
  },
  "org.apache.hadoop.fs.FileSystem:listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "size" : 1,
    "toArray" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.PseudoDelegationTokenAuthenticationHandler:<init>()" : { },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:getWeight(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : {
    "isOnSameNodeGroup" : 1,
    "equals" : 1,
    "isOnSameRack" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:connect()" : {
    "setBufferSize" : 1,
    "setFileType" : 1,
    "getConf" : 1,
    "getTransferMode" : 1,
    "isPositiveCompletion" : 1,
    "wrapException" : 1,
    "login" : 1,
    "getReplyCode" : 1,
    "getInt" : 1,
    "setTimeout" : 1,
    "setFileTransferMode" : 1,
    "get" : 3,
    "setDataConnectionMode" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getMinimumReference(java.lang.String)" : {
    "lookup" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:addProcessingTime(java.lang.String,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:prefetch(org.apache.hadoop.fs.impl.prefetch.BufferData,java.time.Instant)" : {
    "readBlock" : 1,
    "executorAcquired" : 1,
    "now" : 1,
    "between" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:<init>(org.apache.hadoop.conf.Configuration,org.apache.commons.cli.Options,java.lang.String[])" : {
    "parseGeneralOptions" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:create(java.lang.String,java.lang.String[])" : {
    "loadFirst" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:truncate(org.apache.hadoop.fs.Path,long)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool:trimIdleSelectors(long)" : {
    "set" : 1,
    "compareAndSet" : 1,
    "values" : 1,
    "peekFirst" : 1,
    "close" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$WBlockState:getCompressedSize()" : {
    "getCurrentPos" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec)" : {
    "createWriter" : 1,
    "file" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "compression" : 1,
    "filesystem" : 1
  },
  "org.apache.hadoop.fs.shell.find.ExpressionFactory:registerExpression(java.lang.Class)" : {
    "stringifyException" : 1,
    "invoke" : 1,
    "getMethod" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:updateCurrentKey()" : {
    "incrementCurrentKeyId" : 1,
    "currentTimeMillis" : 1,
    "logUpdateMasterKey" : 1,
    "generateSecret" : 1,
    "storeDelegationKey" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:<init>(java.io.OutputStream)" : { },
  "org.apache.hadoop.ipc.ProtocolSignature:getFingerprint(java.lang.reflect.Method[])" : {
    "getFingerprints" : 1,
    "getFingerprint" : 1
  },
  "org.apache.hadoop.util.Progress:addNewPhase()" : {
    "add" : 1,
    "setParent" : 1
  },
  "org.apache.hadoop.ha.HealthMonitor:doHealthChecks()" : {
    "getServiceStatus" : 1,
    "sleep" : 2,
    "warn" : 2,
    "isHealthCheckFailedException" : 1,
    "setLastServiceStatus" : 1,
    "enterState" : 3,
    "stopProxy" : 1,
    "monitorHealth" : 1
  },
  "org.apache.hadoop.fs.Stat:<init>(org.apache.hadoop.fs.Path,long,boolean,org.apache.hadoop.fs.FileSystem)" : {
    "getWorkingDirectory" : 2,
    "singletonMap" : 1,
    "makeQualified" : 2,
    "toUri" : 2,
    "getPath" : 2,
    "setEnvironment" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeInt:decr()" : {
    "decr" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setMinimum(java.lang.String,long)" : {
    "minimums" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "checkPath" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibCompressor(org.apache.hadoop.conf.Configuration)" : {
    "isNativeZlibLoaded" : 1,
    "compressionLevel" : 1,
    "getCompressionLevel" : 1
  },
  "org.apache.hadoop.io.ArrayFile$Reader:seek(long)" : {
    "set" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.io.DataInputByteBuffer:getData()" : {
    "getData" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : {
    "add" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getRpcRequeueCalls()" : {
    "value" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:writeBreadCrumbNode(org.apache.zookeeper.data.Stat)" : {
    "getVersion" : 1,
    "checkState" : 1,
    "createWithRetries" : 1,
    "setDataWithRetries" : 1,
    "info" : 1
  },
  "org.apache.hadoop.conf.Configuration:dumpConfiguration(org.apache.hadoop.conf.Configuration,java.io.Writer)" : {
    "getKey" : 1,
    "createGenerator" : 1,
    "flush" : 2,
    "entrySet" : 1,
    "getProps" : 1,
    "appendJSONProperty" : 1,
    "writeFieldName" : 1,
    "writeStartObject" : 1,
    "writeEndArray" : 1,
    "writeStartArray" : 1,
    "toString" : 1,
    "writeEndObject" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:nextRawKey(org.apache.hadoop.io.DataOutputBuffer)" : {
    "readBlock" : 1,
    "readVInt" : 1,
    "getPos" : 1,
    "readRecordLength" : 1,
    "readInt" : 1,
    "write" : 2
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:close()" : {
    "finish" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:matchAlias(org.apache.hadoop.security.token.Token,org.apache.hadoop.io.Text)" : {
    "equals" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:getInternal(org.apache.hadoop.fs.impl.prefetch.BufferData)" : {
    "read" : 1,
    "getState" : 1,
    "checkNotNull" : 1,
    "getPrefetched" : 1,
    "getBlockNumber" : 1,
    "throwIfStateIncorrect" : 1,
    "stateEqualsOneOf" : 2,
    "end" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addAsyncProfilerServlet(org.eclipse.jetty.server.handler.ContextHandlerCollection,org.apache.hadoop.conf.Configuration)" : {
    "trim" : 1,
    "addServlet" : 3,
    "getAsyncProfilerHome" : 1,
    "get" : 1,
    "toAbsolutePath" : 1,
    "notExists" : 1,
    "isEmpty" : 1,
    "toString" : 1,
    "setResourceBase" : 1,
    "setDisplayName" : 1,
    "setContextAttributes" : 1,
    "createDirectories" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLink(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.net.URI)" : {
    "set" : 1,
    "toString" : 1,
    "getConfigViewFsPrefix" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$1:createCompressionStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor,int)" : { },
  "org.apache.hadoop.util.functional.FutureIO:awaitAllFutures(java.util.Collection,java.time.Duration)" : {
    "add" : 1,
    "toMillis" : 1,
    "awaitFuture" : 1
  },
  "org.apache.hadoop.util.AutoCloseableLock:<init>()" : { },
  "org.apache.hadoop.fs.FileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : {
    "rejectUnknownMandatoryKeys" : 1,
    "eval" : 1,
    "getBufferSize" : 1,
    "getMandatoryKeys" : 1,
    "open" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:trackRemoveToken(org.apache.hadoop.util.functional.InvocationRaisingIOE)" : {
    "trackInvocation" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState:checkBuffers(byte[][])" : { },
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeLink:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation,java.lang.Object,java.lang.String[])" : { },
  "org.apache.hadoop.net.SocksSocketFactory:createSocket(java.lang.String,int)" : {
    "createSocket" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:keyClass(java.lang.Class)" : { },
  "org.apache.hadoop.security.token.delegation.DelegationKey:readFields(java.io.DataInput)" : {
    "readVInt" : 1,
    "readFully" : 1,
    "readVIntInRange" : 1,
    "readVLong" : 1
  },
  "org.apache.hadoop.io.SequenceFile:setDefaultCompressionType(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "set" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.FilterFs:listStatus(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.security.KDiag:verifyFileIsValid(java.io.File,java.lang.String,java.lang.String)" : {
    "isFile" : 1,
    "canRead" : 1,
    "length" : 1,
    "exists" : 1,
    "verify" : 4
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : {
    "checkPath" : 1,
    "primitiveCreate" : 1,
    "get" : 1,
    "getOptionalParentPath" : 1,
    "getFileStatus" : 1,
    "isPresent" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.Text:readFields(java.io.DataInput,int)" : {
    "readVInt" : 1,
    "readWithKnownLength" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:reattachMetrics()" : {
    "reattach" : 1
  },
  "org.apache.hadoop.security.Credentials:mergeAll(org.apache.hadoop.security.Credentials)" : {
    "addAll" : 1
  },
  "org.apache.hadoop.crypto.key.KeyShell$CreateCommand:execute()" : {
    "getOut" : 4,
    "printProviderWritten" : 1,
    "println" : 4,
    "warnIfTransientProvider" : 1,
    "flush" : 1,
    "createKey" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.Groups:getGroupInternal(java.lang.String)" : {
    "contains" : 1,
    "get" : 3,
    "noGroupsForUser" : 1,
    "getCause" : 1,
    "isNegativeCacheEnabled" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:addFalsePositive(java.util.List)" : {
    "addFalsePositive" : 1
  },
  "org.apache.hadoop.net.NetUtils:getConnectAddress(org.apache.hadoop.ipc.Server)" : {
    "getListenerAddress" : 1,
    "getConnectAddress" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFileContext(org.apache.hadoop.fs.AbstractFileSystem,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:emptyStatistics()" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.crypto.key.KeyShell$ListCommand:execute()" : {
    "getKeysMetadata" : 1,
    "getOut" : 4,
    "println" : 4,
    "size" : 1,
    "get" : 1,
    "toArray" : 1,
    "getKeys" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell$CreateCommand:validate()" : {
    "noPasswordError" : 1,
    "getOut" : 3,
    "println" : 3,
    "noPasswordWarning" : 1,
    "printStackTrace" : 1,
    "getCredentialProvider" : 1,
    "needsPassword" : 1,
    "getErr" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:fromInstance(java.lang.Object)" : {
    "toJson" : 1,
    "fromJson" : 1
  },
  "org.apache.hadoop.fs.PathAccessDeniedException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,long,long,int)" : {
    "seek" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:get(int,java.nio.ByteBuffer)" : {
    "checkNotNull" : 1,
    "rewind" : 1,
    "validateEntry" : 1,
    "readFile" : 1,
    "releaseLock" : 1,
    "get" : 1,
    "clear" : 1,
    "takeLock" : 1,
    "getEntry" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:refreshIfNeeded()" : {
    "parseInt" : 1,
    "warn" : 3,
    "split" : 1,
    "parseLong" : 10,
    "now" : 1,
    "reset" : 1,
    "getSystemInfoInfoFromShell" : 1,
    "indexOf" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:getBytesWritten()" : {
    "checkStream" : 1
  },
  "org.apache.hadoop.fs.permission.ScopedAclEntries:calculatePivotOnDefaultEntries(java.util.List)" : {
    "size" : 1,
    "get" : 1,
    "getScope" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekTo(byte[],int,int)" : {
    "seekTo" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.RSErasureEncoder:checkCreateRSRawEncoder()" : {
    "getConf" : 1,
    "createRawEncoder" : 1,
    "getOptions" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:createLoginUser(javax.security.auth.Subject)" : {
    "readTokenStorageFile" : 1,
    "addToken" : 1,
    "getCanonicalPath" : 3,
    "getProperty" : 3,
    "debug" : 5,
    "addCredentials" : 2,
    "isFile" : 1,
    "length" : 2,
    "getMessage" : 1,
    "error" : 1,
    "getService" : 1,
    "createProxyUser" : 1,
    "doSubjectLogin" : 1,
    "decodeFromUrlString" : 1,
    "numberOfTokens" : 1,
    "addAll" : 6,
    "get" : 2,
    "exists" : 1,
    "getTrimmedStringCollection" : 6,
    "info" : 1,
    "getenv" : 3
  },
  "org.apache.hadoop.fs.FileContext:resolvePath(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:add(org.apache.hadoop.ipc.Schedulable)" : {
    "size" : 1,
    "offerQueues" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:addEntry(org.apache.hadoop.io.file.tfile.TFile$TFileIndexEntry)" : {
    "add" : 2,
    "entries" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:shouldRelogin()" : {
    "hasKerberosCredentials" : 1,
    "isHadoopLogin" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager)" : { },
  "org.apache.hadoop.io.Text:encode(java.lang.String)" : {
    "encode" : 1
  },
  "org.apache.hadoop.fs.Options$CreateOpts:donotCreateParent()" : { },
  "org.apache.hadoop.io.DataOutputBuffer:write(java.io.DataInput,int)" : {
    "write" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicLongCounter(java.lang.String,java.util.concurrent.atomic.AtomicLong)" : {
    "withLongFunctionCounter" : 1,
    "get" : 1
  },
  "org.apache.hadoop.security.KDiag:close()" : {
    "flush" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:recursePath(org.apache.hadoop.fs.shell.PathData)" : {
    "checkPathsForReservedRaw" : 1,
    "getTargetPath" : 1,
    "mkdirs" : 1,
    "preserveAttributes" : 1,
    "refreshStatus" : 1,
    "setOperation" : 1,
    "toString" : 2,
    "recursePath" : 1,
    "isDirectory" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:validateEntry(org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache$Entry,java.nio.ByteBuffer)" : {
    "format" : 2,
    "limit" : 2,
    "getChecksum" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:unlock()" : {
    "monotonicNow" : 1,
    "unlock" : 1,
    "check" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.RSErasureDecoder:checkCreateRSRawDecoder()" : {
    "getConf" : 1,
    "getOptions" : 1,
    "createRawDecoder" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache:closeAll()" : {
    "closeAll" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:<init>(long,long,long)" : { },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup$InnerNodeWithNodeGroup:<init>(java.lang.String)" : { },
  "org.apache.hadoop.util.KMSUtil:getKeyProviderUri(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getTrimmed" : 1,
    "isEmpty" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : {
    "getDefaultReplication" : 1
  },
  "org.apache.hadoop.conf.Configuration:getRaw(java.lang.String)" : {
    "getProperty" : 1,
    "getProps" : 1,
    "get" : 1,
    "handleDeprecation" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:endBlock()" : {
    "bsW" : 2,
    "moveToFrontCodeAndSend" : 1,
    "getFinalCRC" : 1,
    "bsPutInt" : 1,
    "blockSort" : 1,
    "bsPutUByte" : 6
  },
  "org.apache.hadoop.ipc.internal.ShadedProtobufHelper:ipc(org.apache.hadoop.ipc.internal.ShadedProtobufHelper$IpcCall)" : {
    "call" : 1,
    "getRemoteException" : 1
  },
  "org.apache.hadoop.util.functional.TaskPool$Builder:setStatisticsContext()" : {
    "setThreadIOStatisticsContext" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.FsShell:displayError(java.lang.String,java.lang.String)" : {
    "println" : 2,
    "split" : 1,
    "getInstance" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:<init>(java.lang.String)" : {
    "split" : 1,
    "buildACL" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getSize(int)" : {
    "isLastBlock" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:checkEligibleForFailover()" : {
    "getLastHealthState" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:isKerberosKeyTabLoginRenewalEnabled()" : {
    "ensureInitialized" : 1
  },
  "org.apache.hadoop.util.BlockingThreadPoolExecutorService:toString()" : {
    "toString" : 2,
    "getActiveCount" : 1,
    "append" : 4
  },
  "org.apache.hadoop.conf.Configuration:getTimeDurations(java.lang.String,java.util.concurrent.TimeUnit)" : {
    "getTimeDurationHelper" : 1,
    "getTrimmedStrings" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemUtil:getStatus(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "updateMountPointFsStatus" : 2,
    "equals" : 1,
    "getUriPath" : 1,
    "clear" : 1,
    "getMountedOnPath" : 2,
    "toString" : 1,
    "breakIntoPathComponents" : 2,
    "getMountPoints" : 1,
    "getUri" : 1,
    "isViewFileSystemOverloadScheme" : 1,
    "isViewFileSystem" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createKey(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "createKeyInternal" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.conf.Configuration:getDeprecatedKey(java.lang.String)" : {
    "get" : 2,
    "getReverseDeprecatedKeyMap" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotEmpty(int,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:throwMetricsException(java.lang.String)" : { },
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:checkPutArguments(org.apache.hadoop.fs.Path,java.io.InputStream,int,org.apache.hadoop.fs.UploadHandle,long)" : {
    "checkPath" : 1,
    "checkArgument" : 4
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState)" : {
    "resetOutputBuffers" : 1,
    "allocate" : 1,
    "arraycopy" : 3,
    "remainder" : 1,
    "flip" : 1,
    "allowChangeInputs" : 1,
    "put" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncodingStep:doEncode(java.nio.ByteBuffer[][],java.nio.ByteBuffer[][])" : {
    "encode" : 1,
    "encodeWithPiggyBacks" : 1,
    "getNumParityUnits" : 1,
    "isDirect" : 1,
    "getSubPacketSize" : 1,
    "getPiggyBacksFromInput" : 1
  },
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:getBytes()" : {
    "toByteArray" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:take()" : {
    "removeNextElement" : 1,
    "acquire" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:tryAcquire(int)" : {
    "acquireHelper" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:reloginFromKeytab()" : {
    "reloginFromKeytab" : 1
  },
  "org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool:release(org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool$SelectorInfo)" : {
    "addLast" : 1,
    "trimIdleSelectors" : 1,
    "get" : 1,
    "now" : 1
  },
  "org.apache.hadoop.fs.FileSystemStorageStatistics:getScheme()" : {
    "getScheme" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPInputStream:available()" : {
    "checkNotClosed" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:<init>(java.io.InputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[],long)" : {
    "checkCodec" : 1,
    "allocateDirect" : 2,
    "getDecryptor" : 1,
    "resetStreamOffset" : 1,
    "checkBufferSize" : 1,
    "clone" : 3
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:toString()" : {
    "getAll" : 1,
    "getBlockNumber" : 2,
    "toString" : 3,
    "sort" : 1,
    "append" : 4
  },
  "org.apache.hadoop.fs.shell.Ls:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "isUseAtime" : 2,
    "getPermission" : 2,
    "isFile" : 2,
    "getContentSummary" : 1,
    "getModificationTime" : 2,
    "format" : 4,
    "getAccessTime" : 2,
    "getOwner" : 2,
    "getErasureCodingPolicy" : 1,
    "println" : 3,
    "isHideNonPrintable" : 2,
    "formatSize" : 2,
    "getReplication" : 2,
    "hasAcl" : 2,
    "getLen" : 2,
    "getGroup" : 2,
    "toString" : 3,
    "isDirectory" : 2
  },
  "org.apache.hadoop.conf.Configuration$Parser:handleStartProperty()" : {
    "add" : 1,
    "getAttributeValue" : 5,
    "equals" : 6,
    "clear" : 1,
    "getAttributeCount" : 1,
    "weakIntern" : 4,
    "getAttributeLocalName" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getBlockEntryCount(int)" : {
    "entries" : 1,
    "getEntry" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:getClientPrincipal(java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "isEmpty" : 1,
    "clientPrincipal" : 1,
    "getKerberosInfo" : 1
  },
  "org.apache.hadoop.io.ObjectWritable:write(java.io.DataOutput)" : {
    "writeObject" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:aggregate(org.apache.hadoop.fs.statistics.IOStatistics)" : {
    "counters" : 1,
    "aggregateMaps" : 5,
    "gauges" : 1,
    "meanStatistics" : 1,
    "minimums" : 1,
    "maximums" : 1
  },
  "org.apache.hadoop.fs.Options$ChecksumOpt:<init>()" : { },
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:renew()" : {
    "setDelegationToken" : 1,
    "getConf" : 1,
    "addDelegationTokens" : 1,
    "now" : 1,
    "get" : 1,
    "updateRenewalTime" : 2,
    "renew" : 1
  },
  "org.apache.hadoop.http.HttpServer2Metrics:create(org.eclipse.jetty.server.handler.StatisticsHandler,int)" : {
    "instance" : 1,
    "remove" : 1,
    "register" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:updateFileStatus(org.apache.hadoop.fs.Path)" : {
    "notFoundStatus" : 1,
    "getFs" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:<init>(java.lang.String,int,org.apache.hadoop.ipc.DecayRpcScheduler)" : {
    "registerMetrics2Source" : 1,
    "register" : 1,
    "setDelegate" : 1
  },
  "org.apache.hadoop.ipc.ProtobufHelper:protoFromToken(org.apache.hadoop.security.token.Token)" : {
    "protoFromToken" : 1
  },
  "org.apache.hadoop.util.FileBasedIPList:reload()" : { },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:loadFromPath(org.apache.hadoop.fs.Path,char[])" : {
    "getPermission" : 1,
    "load" : 1,
    "getFileStatus" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:toFile()" : {
    "pathToFile" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:decr()" : {
    "incr" : 1
  },
  "org.apache.hadoop.io.SetFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "get" : 1
  },
  "org.apache.hadoop.fs.PartialListing:<init>(org.apache.hadoop.fs.Path,org.apache.hadoop.ipc.RemoteException)" : { },
  "org.apache.hadoop.fs.FileContext$Util:globStatus(org.apache.hadoop.fs.Path)" : {
    "glob" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:mapToString(java.lang.StringBuilder,java.lang.String,java.util.Map,java.lang.String)" : {
    "getValue" : 1,
    "getKey" : 1,
    "entrySet" : 1,
    "entryToString" : 1,
    "append" : 5
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:removeExpiredStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "removeStoredToken" : 1
  },
  "org.apache.hadoop.fs.Trash:getCurrentTrashDir(org.apache.hadoop.fs.Path)" : {
    "getCurrentTrashDir" : 1
  },
  "org.apache.hadoop.net.NodeBase:<init>(java.lang.String,java.lang.String,org.apache.hadoop.net.Node,int)" : {
    "set" : 1,
    "normalize" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_save(java.io.Serializable,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean)" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.shell.SetReplication:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "removeFirst" : 1,
    "parseShort" : 1,
    "displayWarning" : 1,
    "parse" : 1,
    "setRecursive" : 1
  },
  "org.apache.hadoop.fs.FileContext:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "setTimes" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:removeStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier,boolean)" : {
    "debug" : 3,
    "getSequenceNumber" : 3,
    "checkExists" : 1,
    "getRenewDate" : 1,
    "getTokenInfoFromZK" : 1,
    "getNodePath" : 1,
    "now" : 1,
    "guaranteed" : 1,
    "isDebugEnabled" : 1,
    "delete" : 1,
    "forPath" : 2,
    "info" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:getValueClass()" : {
    "getValueClass" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:isStaleClient(java.lang.Object)" : {
    "warn" : 1,
    "checkNotNull" : 1,
    "format" : 1,
    "getSessionId" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_getCurrent()" : {
    "getCurrentIOStatisticsContext" : 1
  },
  "org.apache.hadoop.log.LogThrottlingHelper:record(java.lang.String,long,double[])" : {
    "shouldLog" : 1,
    "setHasLogged" : 1,
    "hasLogged" : 2,
    "containsKey" : 1,
    "equals" : 1,
    "get" : 1,
    "getValueCount" : 1,
    "recordValues" : 1,
    "setShouldLog" : 2,
    "replaceAll" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.DUHelper:getFolderUsage(java.lang.String)" : {
    "calculateFolderSize" : 1
  },
  "org.apache.hadoop.fs.protocolPB.PBHelper:convert(org.apache.hadoop.fs.permission.FsPermission)" : {
    "build" : 1,
    "setPerm" : 1,
    "newBuilder" : 1,
    "toShort" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:close()" : {
    "close" : 2,
    "freeBuffers" : 1
  },
  "org.apache.hadoop.io.compress.CompressorStream:write(int)" : {
    "write" : 1
  },
  "org.apache.hadoop.conf.Configuration:getAlternativeNames(java.lang.String)" : {
    "add" : 1,
    "size" : 1,
    "addAll" : 1,
    "containsKey" : 1,
    "getProps" : 1,
    "get" : 3,
    "toArray" : 1,
    "getReverseDeprecatedKeyMap" : 1,
    "getDeprecatedKeyMap" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.fs.FsShell:getCurrentTrashDir(org.apache.hadoop.fs.Path)" : {
    "getCurrentTrashDir" : 1,
    "getTrash" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:removeAcl(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "removeAcl" : 1
  },
  "org.apache.hadoop.fs.shell.Command:expandArguments(java.util.LinkedList)" : {
    "displayError" : 1,
    "addAll" : 1,
    "expandArgument" : 1
  },
  "org.apache.hadoop.fs.shell.Tail:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "sleep" : 1,
    "toString" : 1,
    "dumpFromOffset" : 2,
    "isDirectory" : 1
  },
  "org.apache.hadoop.ipc.Server$Call:getUserGroupInformation()" : {
    "getRemoteUser" : 1
  },
  "org.apache.hadoop.security.protocolPB.RefreshAuthorizationPolicyProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : {
    "getProtocolVersion" : 1,
    "isMethodSupported" : 1
  },
  "org.apache.hadoop.util.ProtoUtil:makeRpcRequestHeader(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto$OperationProto,int,int,byte[],org.apache.hadoop.ipc.AlignmentContext)" : {
    "getCurrentSpan" : 1,
    "setRpcOp" : 1,
    "setSignature" : 1,
    "getSignature" : 2,
    "spanContextToByteString" : 1,
    "convert" : 1,
    "setRpcKind" : 1,
    "newBuilder" : 3,
    "copyFrom" : 2,
    "setRetryCount" : 1,
    "build" : 1,
    "setTraceInfo" : 1,
    "updateRequestState" : 1,
    "setContext" : 1,
    "getCurrent" : 1,
    "setSpanContext" : 1,
    "setCallerContext" : 1,
    "isContextValid" : 1,
    "getContext" : 2,
    "setCallId" : 1,
    "setClientId" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:isAuthenticationMethodEnabled(org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod)" : {
    "ensureInitialized" : 1
  },
  "org.apache.hadoop.conf.Configuration$Resource:<init>(java.lang.Object,java.lang.String)" : {
    "getRestrictParserDefault" : 1
  },
  "org.apache.hadoop.fs.FileUtil:makeSecureShellPath(java.io.File)" : {
    "replace" : 1,
    "makeShellPath" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addGlobalFilter(java.lang.String,java.lang.String,java.util.Map)" : {
    "getFilterHolder" : 1,
    "defineFilter" : 2,
    "keySet" : 1,
    "getFilterMapping" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean,boolean,boolean)" : {
    "attributes" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server:registerForDeferredResponse2()" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:truncate(org.apache.hadoop.fs.Path,long)" : {
    "readOnlyMountTable" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:setContext(java.lang.String)" : {
    "tuple" : 1
  },
  "org.apache.hadoop.util.ExitUtil:terminate(int,java.lang.String)" : {
    "terminate" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:openFileWithOptions(org.apache.hadoop.fs.PathHandle,org.apache.hadoop.fs.impl.OpenFileParameters)" : {
    "openFileWithOptions" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getStoragePolicy(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.service.launcher.ServiceLauncher:registerFailureHandling()" : {
    "warn" : 1,
    "setDefaultUncaughtExceptionHandler" : 1,
    "register" : 2
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSOutputSummer:<init>(org.apache.hadoop.fs.ChecksumFileSystem,org.apache.hadoop.fs.Path,boolean,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.permission.FsPermission)" : {
    "writeInt" : 1,
    "getChecksumFile" : 1,
    "getBytesPerSum" : 2,
    "create" : 2,
    "getSumBufferSize" : 1,
    "write" : 1,
    "getRawFileSystem" : 2,
    "newDataChecksum" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient:getOutputStream(java.io.OutputStream)" : {
    "parseInt" : 1,
    "getNegotiatedProperty" : 1,
    "useWrap" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:compareTo(org.apache.hadoop.fs.FileStatus)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.fs.shell.Count:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "println" : 1,
    "isHumanReadable" : 3,
    "toErasureCodingPolicy" : 1,
    "toSnapshot" : 1,
    "getContentSummary" : 3,
    "toString" : 3,
    "getQuotaUsage" : 1,
    "append" : 5
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher:remove(org.apache.hadoop.net.unix.DomainSocket)" : {
    "unlock" : 1,
    "kick" : 1,
    "containsKey" : 1,
    "lock" : 1,
    "awaitUninterruptibly" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.SetFile$Writer:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class)" : { },
  "org.apache.hadoop.crypto.key.KeyShell:main(java.lang.String[])" : {
    "exit" : 1,
    "run" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:unpack(org.apache.hadoop.ipc.proto.GenericRefreshProtocolProtos$GenericRefreshResponseCollectionProto)" : {
    "add" : 1,
    "getResponsesList" : 1,
    "unpack" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:setInput(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "limit" : 1,
    "position" : 1
  },
  "org.apache.hadoop.fs.FilterFs:isValidName(java.lang.String)" : {
    "isValidName" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:<init>(java.lang.String)" : {
    "getPermission" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:close()" : {
    "enterClosedState" : 1,
    "debug" : 1,
    "innerClose" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt$Data:<init>(boolean)" : { },
  "org.apache.hadoop.fs.shell.XAttrCommands$GetfattrCommand:printXAttr(java.lang.String,byte[])" : {
    "println" : 2,
    "encodeValue" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "setSymlink" : 1,
    "qualifySymlinkTarget" : 1,
    "getPath" : 1,
    "getFileLinkStatusInternal" : 1,
    "getSymlink" : 1,
    "isSymlink" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.util.KMSUtil:createKeyProviderFromUri(org.apache.hadoop.conf.Configuration,java.net.URI)" : {
    "get" : 1,
    "toString" : 1,
    "isTransient" : 1
  },
  "org.apache.hadoop.io.WritableUtils:readEnum(java.io.DataInput,java.lang.Class)" : {
    "valueOf" : 1,
    "readString" : 1
  },
  "org.apache.hadoop.metrics2.sink.GraphiteSink$Graphite:flush()" : {
    "flush" : 1,
    "isConnected" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtobufRpcEngineCallbackImpl:error(java.lang.Throwable)" : {
    "getClass" : 1,
    "now" : 1,
    "setDeferredError" : 1,
    "getSimpleName" : 1,
    "updateDeferredMetrics" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache$Key:hashCode()" : {
    "hashCode" : 2
  },
  "org.apache.hadoop.fs.Path:toString()" : {
    "getScheme" : 3,
    "hasWindowsDrive" : 1,
    "getPath" : 2,
    "toString" : 1,
    "getFragment" : 2,
    "getAuthority" : 3,
    "indexOf" : 1,
    "substring" : 1,
    "append" : 7
  },
  "org.apache.hadoop.security.KDiag:<init>(org.apache.hadoop.conf.Configuration,java.io.PrintWriter,java.io.File,java.lang.String,long,boolean)" : { },
  "org.apache.hadoop.ha.FailoverController:preFailoverChecks(org.apache.hadoop.ha.HAServiceTarget,org.apache.hadoop.ha.HAServiceTarget,boolean)" : {
    "getServiceStatus" : 1,
    "warn" : 1,
    "createReqInfo" : 1,
    "getState" : 2,
    "getNotReadyReason" : 1,
    "getProxy" : 1,
    "equals" : 2,
    "isReadyToBecomeActive" : 1,
    "getAddress" : 2,
    "error" : 1,
    "monitorHealth" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:checkToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "warn" : 1,
    "getRenewDate" : 2,
    "getTokenInfo" : 1,
    "now" : 1,
    "formatTime" : 2,
    "formatTokenId" : 2,
    "getRealUser" : 2,
    "info" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getRpcSlowCalls()" : {
    "value" : 1
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:readLock(java.lang.String)" : {
    "getLock" : 1,
    "readLock" : 1,
    "lock" : 1
  },
  "org.apache.hadoop.io.Text:append(byte[],int,int)" : {
    "arraycopy" : 2,
    "ensureCapacity" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1
  },
  "org.apache.hadoop.fs.impl.WeakReferenceThreadMap:setForCurrentThread(java.lang.Object)" : {
    "lookup" : 1,
    "resolve" : 1,
    "requireNonNull" : 1,
    "currentThreadId" : 1,
    "put" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRate(java.lang.String)" : {
    "newRate" : 1
  },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec:calculateIV(byte[],long,byte[],int)" : {
    "checkArgument" : 2
  },
  "org.apache.hadoop.ipc.Server:getPriorityLevel(org.apache.hadoop.ipc.Schedulable)" : {
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "glob" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:toString()" : {
    "add" : 5,
    "getClass" : 1,
    "name" : 1,
    "description" : 1,
    "getSimpleName" : 1,
    "toString" : 2,
    "metrics" : 1,
    "timestamp" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:comparator(org.apache.hadoop.io.WritableComparator)" : { },
  "org.apache.hadoop.fs.MD5MD5CRC32CastagnoliFileChecksum:<init>()" : { },
  "org.apache.hadoop.fs.FilterFs:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "checkPath" : 1,
    "setReplication" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:gaussianElimination(int[][])" : {
    "add" : 2,
    "divide" : 1,
    "multiply" : 2
  },
  "org.apache.hadoop.fs.FileStatus:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "fullPath" : 1,
    "setTimes" : 1
  },
  "org.apache.hadoop.security.token.Token$TrivialRenewer:handleKind(org.apache.hadoop.io.Text)" : {
    "equals" : 1,
    "getKind" : 1
  },
  "org.apache.hadoop.net.DNS:getDefaultHost(java.lang.String,java.lang.String)" : {
    "getDefaultHost" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getFileChecksum(org.apache.hadoop.fs.Path,long)" : {
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:compression(org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec)" : { },
  "org.apache.hadoop.fs.FilterFileSystem:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatus" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:<init>(int,java.io.DataInput,org.apache.hadoop.io.file.tfile.CompareUtils$BytesComparator)" : {
    "add" : 2,
    "entries" : 1,
    "readVInt" : 3,
    "readFully" : 3,
    "buffer" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:listXAttrs(org.apache.hadoop.fs.Path)" : {
    "listXAttrs" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:cloneWritableInto(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)" : {
    "readFields" : 1,
    "moveData" : 1,
    "get" : 1,
    "reset" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.FileSystem:copyToLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyToLocalFile" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet:put(java.lang.Object)" : {
    "getClass" : 1,
    "getIndex" : 1,
    "setNext" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:setInput(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "limit" : 1,
    "position" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableStat:toString()" : {
    "lastStat" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ipc.ProtocolSignature:getSigFingerprint(java.lang.Class,long)" : {
    "getProtocolName" : 1,
    "getFingerprints" : 1,
    "get" : 1,
    "getFingerprint" : 1,
    "getMethods" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.KDiag:endln()" : {
    "println" : 2
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSOutputSummer:<init>(org.apache.hadoop.fs.ChecksumFs,org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : {
    "writeInt" : 1,
    "getChecksumFile" : 1,
    "createInternal" : 2,
    "getBytesPerSum" : 2,
    "of" : 1,
    "getSumBufferSize" : 1,
    "write" : 1,
    "getRawFs" : 2,
    "newDataChecksum" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$EncryptedQueueRefiller:fillQueueForKey(java.lang.String,java.util.Queue,int)" : {
    "call" : 1,
    "checkNotNull" : 1,
    "addAll" : 1,
    "setRequestProperty" : 1,
    "createConnection" : 1,
    "createURL" : 1,
    "parseJSONEncKeyVersions" : 1,
    "put" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:readOnlyMountTable(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.security.authorize.AccessControlList:getAclString()" : {
    "getUsersString" : 1,
    "getGroupsString" : 1,
    "toString" : 1,
    "append" : 4
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:verifyCanMlock()" : {
    "isAvailable" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFormat$NotEnoughArgumentsException:<init>(int,int)" : { },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:getHomeDirValue(org.apache.hadoop.conf.Configuration)" : {
    "getHomeDirValue" : 1,
    "getDefaultMountTableName" : 1
  },
  "org.apache.hadoop.io.MD5Hash:<init>(java.lang.String)" : {
    "setDigest" : 1
  },
  "org.apache.hadoop.util.ChunkedArrayList:<init>(int,int)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:bulkDelete_pageSize(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "extractIOEs" : 1,
    "invoke" : 1,
    "checkAvailable" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.RSErasureEncoder:release()" : {
    "release" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:readOnlyMountTable(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.fs.permission.FsCreateModes:<init>(org.apache.hadoop.fs.permission.FsPermission,org.apache.hadoop.fs.permission.FsPermission)" : {
    "getUnmasked" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileMeta:<init>(java.io.DataInput)" : {
    "compatibleWith" : 1,
    "readString" : 1,
    "makeComparator" : 1,
    "readVLong" : 1
  },
  "org.apache.hadoop.util.CloseableReferenceCount:unreference()" : {
    "checkState" : 1,
    "decrementAndGet" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:<init>(java.lang.Class,java.lang.Class,boolean,int,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "parseNumLevels" : 1,
    "getServerFailOverEnable" : 1,
    "parseCapacityWeights" : 1,
    "createScheduler" : 1,
    "createCallQueueInstance" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.token.Token:<init>(byte[],byte[],org.apache.hadoop.io.Text,org.apache.hadoop.io.Text)" : { },
  "org.apache.hadoop.ha.ActiveStandbyElector$WatcherWithClientRef:setZooKeeperRef(org.apache.zookeeper.ZooKeeper)" : {
    "checkState" : 1,
    "countDown" : 1
  },
  "org.apache.hadoop.ipc.Server:setupResponseOldVersionFatal(java.io.ByteArrayOutputStream,org.apache.hadoop.ipc.Server$RpcCall,org.apache.hadoop.io.Writable,java.lang.String,java.lang.String)" : {
    "writeInt" : 2,
    "toByteArray" : 1,
    "reset" : 1,
    "setResponse" : 1,
    "wrap" : 1,
    "writeString" : 2
  },
  "org.apache.hadoop.fs.shell.XAttrCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 2
  },
  "org.apache.hadoop.fs.shell.find.Find:recursePath(org.apache.hadoop.fs.shell.PathData)" : {
    "isFollowLink" : 1,
    "getDepth" : 1,
    "getConf" : 1,
    "isStop" : 1,
    "getErr" : 1,
    "getSymlink" : 1,
    "recursePath" : 1,
    "isAncestor" : 1,
    "println" : 1,
    "toString" : 3,
    "getOptions" : 3,
    "isSymlink" : 1,
    "isDirectory" : 1,
    "getMaxDepth" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class)" : {
    "keyClass" : 1,
    "valueClass" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:shutdown()" : {
    "instance" : 1,
    "unregisterSource" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : {
    "newKey" : 1,
    "getKeyClass" : 1,
    "keyClass" : 2,
    "getOption" : 2,
    "prependOptions" : 2,
    "getFileSystem" : 1,
    "getValue" : 2,
    "getInt" : 1,
    "createWriter" : 2,
    "file" : 2,
    "mkdirs" : 1,
    "get" : 1,
    "valueClass" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.ha.FailoverController:getRpcTimeoutToNewActive(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.conf.ConfigurationWithLogging:get(java.lang.String,java.lang.String)" : {
    "redact" : 2,
    "get" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "fullPath" : 2,
    "renameInternal" : 1
  },
  "org.apache.hadoop.fs.Path:initialize(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : {
    "normalize" : 1,
    "normalizePath" : 1
  },
  "org.apache.hadoop.fs.FsServerDefaults:<init>(long,int,int,short,int,boolean,long,org.apache.hadoop.util.DataChecksum$Type,java.lang.String)" : { },
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:addProcessingTime(int,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.DummyRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.util.PureJavaCrc32C:<init>()" : {
    "reset" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:flush()" : {
    "osException" : 1,
    "flush" : 1,
    "mayThrow" : 1,
    "nextSetBit" : 2
  },
  "org.apache.hadoop.conf.ReconfigurableBase:startReconfigurationTask()" : {
    "setName" : 1,
    "setDaemon" : 1,
    "warn" : 2,
    "now" : 1,
    "start" : 1
  },
  "org.apache.hadoop.security.token.delegation.DelegationTokenLoadingCache:isEmpty()" : {
    "size" : 1
  },
  "org.apache.hadoop.http.HttpServer2:bindForPortRange(org.eclipse.jetty.server.ServerConnector,int)" : {
    "sleep" : 1,
    "constructBindException" : 1,
    "getCause" : 1,
    "setPort" : 1,
    "bindListener" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:hasCapability(java.lang.String)" : {
    "isProbeForSyncable" : 1,
    "toLowerCase" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:readProcDisksInfoFile()" : {
    "warn" : 2,
    "contains" : 2,
    "newInputStream" : 1,
    "parseLong" : 2,
    "find" : 1,
    "get" : 2,
    "readDiskBlockInformation" : 1,
    "matcher" : 1,
    "readLine" : 3,
    "close" : 1,
    "put" : 1,
    "group" : 3
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScannerByKey(org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "compareKeys" : 1
  },
  "org.apache.hadoop.util.ConfigurationHelper:parseEnumSet(java.lang.String,java.lang.String,java.lang.Class,boolean)" : {
    "add" : 1,
    "joining" : 1,
    "getName" : 1,
    "mapEnumNamesToValues" : 1,
    "values" : 1,
    "toLowerCase" : 1,
    "checkArgument" : 1,
    "noneOf" : 1,
    "stream" : 1,
    "addAll" : 1,
    "get" : 1,
    "equals" : 1,
    "getTrimmedStringCollection" : 1,
    "keySet" : 1,
    "collect" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$DataIndex:<init>(java.io.DataInput)" : {
    "add" : 1,
    "getCompressionAlgorithmByName" : 1,
    "readVInt" : 1,
    "readString" : 1
  },
  "org.apache.hadoop.security.alias.KeyStoreProvider:getOutputStreamForKeystore()" : {
    "getPath" : 1,
    "create" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:configureConnection(java.net.HttpURLConnection)" : {
    "createSSLSocketFactory" : 1,
    "getHostnameVerifier" : 1,
    "setSSLSocketFactory" : 1,
    "setHostnameVerifier" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec:createOutputStream(java.io.OutputStream)" : {
    "createOutputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableQuantiles:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)" : {
    "uncapitalize" : 3,
    "setInterval" : 1,
    "scheduleWithFixedDelay" : 1,
    "setQuantiles" : 1,
    "setQuantileInfos" : 1,
    "setNumInfo" : 1,
    "format" : 1,
    "setEstimator" : 1,
    "capitalize" : 3,
    "getQuantiles" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:<init>(org.apache.hadoop.fs.permission.FsAction,org.apache.hadoop.fs.permission.FsAction,org.apache.hadoop.fs.permission.FsAction)" : { },
  "org.apache.hadoop.net.NetworkTopology:sortByDistanceUsingNetworkLocation(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int,java.util.function.Consumer)" : {
    "sortByDistance" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getClient(org.apache.hadoop.conf.Configuration)" : {
    "getDefault" : 1,
    "getClient" : 1
  },
  "org.apache.hadoop.http.HttpServer2:defineFilter(org.eclipse.jetty.servlet.ServletContextHandler,java.lang.String,java.lang.String,java.util.Map,java.lang.String[])" : {
    "getFilterHolder" : 1,
    "defineFilter" : 1,
    "getFilterMapping" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:<init>()" : { },
  "org.apache.hadoop.fs.shell.find.Print:registerExpression(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : {
    "addClass" : 2
  },
  "org.apache.hadoop.fs.FilterFileSystem:getInitialWorkingDirectory()" : {
    "getInitialWorkingDirectory" : 1
  },
  "org.apache.hadoop.util.QuickSort:sort(org.apache.hadoop.util.IndexedSortable,int,int)" : {
    "sort" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:setConf(org.apache.hadoop.conf.Configuration)" : {
    "getTimeDuration" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "hasPathCapability" : 1,
    "makeQualified" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getLength(org.apache.hadoop.fs.Path)" : {
    "getLen" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:performCoding(java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : {
    "findFirstValidInput" : 1,
    "doDecodeMultiAndParity" : 1,
    "doDecodeSingle" : 1,
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1,
    "isDirect" : 1,
    "remaining" : 1,
    "getSubPacketSize" : 3
  },
  "org.apache.hadoop.security.Credentials:writeTokenStorageFile(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.Credentials$SerializedFormat)" : {
    "create" : 1,
    "writeTokenStorageToStream" : 1,
    "getFileSystem" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:genCauchyMatrix(byte[],int,int)" : {
    "gfInv" : 1
  },
  "org.apache.hadoop.io.MapFile:delete(org.apache.hadoop.fs.FileSystem,java.lang.String)" : {
    "delete" : 3
  },
  "org.apache.hadoop.util.functional.RemoteIterators$WrappingRemoteIterator:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:runCmd(java.lang.String[])" : {
    "confirmForceManual" : 1,
    "parseOpts" : 1,
    "checkHealth" : 1,
    "addTransitionToActiveCliOpts" : 1,
    "error" : 1,
    "getServiceState" : 1,
    "help" : 1,
    "checkParameterValidity" : 1,
    "getAllServiceState" : 1,
    "transitionToActive" : 1,
    "hasOption" : 1,
    "addOption" : 1,
    "transitionToStandby" : 1,
    "equals" : 9
  },
  "org.apache.hadoop.io.SequenceFile$Metadata:readFields(java.io.DataInput)" : {
    "readFields" : 2,
    "readInt" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:isIOStatisticsSnapshot(java.io.Serializable)" : {
    "ioStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:getCanonicalServiceName()" : {
    "buildDTServiceName" : 1,
    "getUriDefaultPort" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:registerIfNeeded()" : {
    "instance" : 1,
    "getSource" : 1,
    "name" : 1,
    "description" : 1,
    "register" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:<init>(int,int,java.lang.String,boolean,org.apache.hadoop.conf.Configuration)" : {
    "getDefaultQueueCapacityWeights" : 1
  },
  "org.apache.hadoop.fs.FilterFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "removeAclEntries" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.EmptyPrefetchingStatistics:prefetchOperationStarted()" : {
    "stubDurationTracker" : 1
  },
  "org.apache.hadoop.security.SaslOutputStream:close()" : {
    "disposeSasl" : 1,
    "close" : 1
  },
  "org.apache.hadoop.ipc.Server:channelWrite(java.nio.channels.WritableByteChannel,java.nio.ByteBuffer)" : {
    "incrSentBytes" : 1,
    "channelIO" : 1,
    "write" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getDefaultReplication()" : { },
  "org.apache.hadoop.ipc.RetryCache:newEntry(long,byte[],int)" : {
    "nanoTime" : 1
  },
  "org.apache.hadoop.fs.http.AbstractHttpFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "initialize" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:copy()" : { },
  "org.apache.hadoop.util.concurrent.AsyncGetFuture:get()" : {
    "get" : 1,
    "callAsyncGet" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:skip(long)" : {
    "read" : 1,
    "min" : 1,
    "checkStream" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:sendRpcRequest(org.apache.hadoop.ipc.Client$Call)" : {
    "offer" : 1,
    "writeTo" : 1,
    "makeRpcRequestHeader" : 1,
    "of" : 1,
    "get" : 2,
    "writeDelimitedTo" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.security.token.TokenIdentifier:getBytes()" : {
    "getLength" : 1,
    "copyOf" : 1,
    "write" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.ipc.RemoteException:unwrapRemoteException()" : {
    "forName" : 1,
    "asSubclass" : 1,
    "instantiateException" : 1,
    "getClassName" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:<init>(org.apache.hadoop.crypto.key.JavaKeyStoreProvider)" : { },
  "org.apache.hadoop.fs.HarFileSystem$HarMetaData:parseMetaData()" : {
    "add" : 1,
    "addPartFileStatuses" : 1,
    "getParent" : 1,
    "getConf" : 2,
    "clear" : 2,
    "getModificationTime" : 2,
    "readLine" : 3,
    "seek" : 1,
    "put" : 1,
    "cleanupWithLogger" : 2,
    "parseInt" : 1,
    "warn" : 1,
    "split" : 3,
    "decodeFileName" : 1,
    "parseLong" : 2,
    "getLen" : 1,
    "getFileStatus" : 2,
    "toString" : 3,
    "open" : 2
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:byteBufferPositionedReadable_available()" : {
    "available" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:read(java.nio.ByteBuffer)" : {
    "hasArray" : 1,
    "read" : 4,
    "array" : 1,
    "limit" : 3,
    "checkStream" : 1,
    "position" : 5,
    "decrypt" : 1,
    "put" : 3,
    "remaining" : 4
  },
  "org.apache.hadoop.util.LightWeightGSet:contains(java.lang.Object)" : {
    "get" : 1
  },
  "org.apache.hadoop.io.compress.Lz4Codec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:selectDelegationToken(org.apache.hadoop.security.Credentials)" : {
    "selectDelegationToken" : 2
  },
  "org.apache.hadoop.fs.DU:<init>(java.io.File,long,long,long)" : { },
  "org.apache.hadoop.security.authorize.AccessControlList:<init>(java.lang.String,java.lang.String)" : {
    "buildACL" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystemPathHandle:verify(org.apache.hadoop.fs.FileStatus)" : {
    "getModificationTime" : 1
  },
  "org.apache.hadoop.http.HttpServer2:isInstrumentationAccessAllowed(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getAttribute" : 1,
    "hasAdministratorAccess" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:getAtMost(java.lang.String,int)" : {
    "add" : 1,
    "min" : 1,
    "size" : 4,
    "readLock" : 1,
    "get" : 1,
    "fillQueueForKey" : 1,
    "readUnlock" : 1,
    "poll" : 1,
    "submitRefillTask" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:readFields(java.io.DataInput)" : {
    "split" : 1,
    "buildACL" : 1,
    "readString" : 1
  },
  "org.apache.hadoop.io.WritableComparator:newKey()" : {
    "newInstance" : 1
  },
  "org.apache.hadoop.conf.Configuration:getPassword(java.lang.String)" : {
    "getPasswordFromCredentialProviders" : 1,
    "getPasswordFromConfig" : 1
  },
  "org.apache.hadoop.util.Shell:getSetOwnerCommand(java.lang.String)" : {
    "getWinUtilsPath" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getNextTgtRenewalTime(long,long,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "min" : 1,
    "shouldRetry" : 1,
    "value" : 1
  },
  "org.apache.hadoop.conf.Configuration:getValByRegex(java.lang.String)" : {
    "add" : 1,
    "getValue" : 1,
    "getKey" : 3,
    "getProperty" : 1,
    "substituteVars" : 1,
    "compile" : 1,
    "entrySet" : 1,
    "forEach" : 1,
    "find" : 1,
    "getProps" : 2,
    "matcher" : 1,
    "put" : 1
  },
  "org.apache.hadoop.conf.ReconfigurationServlet:doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getClass" : 1,
    "println" : 1,
    "printFooter" : 1,
    "applyChanges" : 1,
    "getReconfigurable" : 1,
    "getWriter" : 1,
    "getServletPath" : 1,
    "sendError" : 1,
    "printHeader" : 1,
    "stringifyException" : 1,
    "getCanonicalName" : 1,
    "setContentType" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:lazyRefresh(java.lang.String,java.lang.String)" : {
    "refreshInternal" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:getAttributes(java.lang.String[])" : {
    "add" : 1,
    "updateJmxCache" : 1,
    "debug" : 1,
    "get" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.io.IOUtils:wrapException(java.lang.String,java.lang.String,java.io.IOException)" : {
    "getClass" : 1,
    "getName" : 1,
    "format" : 1,
    "wrapWithMessage" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "getProxy" : 1,
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:setLogin(javax.security.auth.login.LoginContext)" : {
    "setLogin" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:<init>(java.lang.String,java.lang.String)" : {
    "emptySet" : 1,
    "emptyMap" : 1,
    "refresh" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:reattach(org.apache.hadoop.metrics2.MetricsSystem,org.apache.hadoop.metrics2.source.JvmMetrics)" : {
    "name" : 1,
    "description" : 1,
    "register" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:checkMetricName(java.lang.String)" : {
    "containsKey" : 1,
    "length" : 1,
    "isWhitespace" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "next" : 1,
    "fixFileStatus" : 1,
    "resolve" : 1,
    "getChrootedPath" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1,
    "hasNext" : 1,
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setVerifyChecksum(boolean)" : {
    "readOnlyMountTable" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:getWrappedRetriableException(java.lang.Exception)" : {
    "unwrapRemoteException" : 1
  },
  "org.apache.hadoop.security.WhitelistBasedResolver:setConf(org.apache.hadoop.conf.Configuration)" : {
    "getLong" : 1,
    "getSaslProperties" : 1,
    "get" : 2,
    "getBoolean" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:setInput(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "limit" : 1,
    "position" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getComparatorName()" : {
    "getComparatorString" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:open(org.apache.hadoop.fs.PathHandle,int)" : {
    "bytes" : 1,
    "getPath" : 2,
    "getFileStatus" : 1,
    "verify" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBzip2Decompressor(org.apache.hadoop.conf.Configuration)" : {
    "isNativeBzip2Loaded" : 1
  },
  "org.apache.hadoop.util.BlockingThreadPoolExecutorService:<init>(int,java.util.concurrent.ThreadPoolExecutor)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:publishMetrics(org.apache.hadoop.metrics2.impl.MetricsBuffer,boolean)" : {
    "add" : 1,
    "monotonicNow" : 2,
    "incr" : 1,
    "putMetrics" : 1,
    "putMetricsImmediate" : 1,
    "values" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:isOnSameRack(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : {
    "isSameParents" : 1
  },
  "org.apache.hadoop.fs.Stat:parseExecResult(java.io.BufferedReader)" : {
    "split" : 1,
    "nextToken" : 8,
    "parseLong" : 3,
    "parseShort" : 1,
    "isEmpty" : 1,
    "length" : 3,
    "endsWith" : 3,
    "equalsIgnoreCase" : 1,
    "readLine" : 1,
    "substring" : 2
  },
  "org.apache.hadoop.fs.FileStatus:equals(java.lang.Object)" : {
    "equals" : 1,
    "getPath" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getDurationInfo(java.lang.StringBuilder)" : {
    "duration" : 1,
    "getMin" : 1,
    "getMax" : 1,
    "get" : 2,
    "getKind" : 2,
    "getAverage" : 1,
    "getSum" : 1,
    "getCount" : 1,
    "append" : 3,
    "asList" : 1,
    "put" : 1,
    "accept" : 1
  },
  "org.apache.hadoop.conf.Configuration:getLong(java.lang.String,long)" : {
    "getHexDigits" : 1,
    "parseLong" : 2,
    "getTrimmed" : 1
  },
  "org.apache.hadoop.fs.shell.AclCommands$GetfaclCommand:processOptions(java.util.LinkedList)" : {
    "size" : 1,
    "getOpt" : 1,
    "isEmpty" : 1,
    "parse" : 1,
    "setRecursive" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:cleanup()" : {
    "delete" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.HHXORErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : { },
  "org.apache.hadoop.io.SetFile$Reader:seek(org.apache.hadoop.io.WritableComparable)" : {
    "seek" : 1
  },
  "org.apache.hadoop.fs.impl.FlagSet:pathCapabilities()" : {
    "filter" : 1,
    "stream" : 1,
    "toList" : 1,
    "keySet" : 1,
    "collect" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:isFile()" : {
    "isFile" : 1
  },
  "org.apache.hadoop.util.Shell:<init>(long)" : { },
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:grow()" : {
    "grow" : 4
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getEnclosingRoot(org.apache.hadoop.fs.Path)" : {
    "depth" : 2,
    "getEnclosingRoot" : 1,
    "resolve" : 1,
    "initCause" : 1,
    "format" : 1,
    "getMessage" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:read(long,byte[],int,int)" : {
    "read" : 1,
    "incrementCounter" : 2,
    "getChannel" : 1,
    "validatePositionedReadArgs" : 1,
    "incrementBytesRead" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:listStatus(org.apache.hadoop.fs.Path)" : {
    "add" : 1,
    "size" : 1,
    "isChecksumFile" : 1,
    "toArray" : 1,
    "getPath" : 1,
    "listStatus" : 1,
    "getMyFs" : 1
  },
  "org.apache.hadoop.ipc.Server$Call:getHostAddress()" : {
    "getHostInetAddress" : 1,
    "getHostAddress" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : {
    "fullPath" : 1,
    "truncate" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:listStatus(org.apache.hadoop.fs.Path)" : {
    "add" : 1,
    "size" : 1,
    "fileStatusesInIndex" : 1,
    "get" : 1,
    "makeQualified" : 1,
    "toArray" : 1,
    "getPathInHar" : 1,
    "toFileStatus" : 1,
    "isDir" : 1
  },
  "org.apache.hadoop.util.bloom.BloomFilter:readFields(java.io.DataInput)" : {
    "readFields" : 1,
    "set" : 1,
    "getNBytes" : 1,
    "readFully" : 1
  },
  "org.apache.hadoop.util.CacheableIPList:reset()" : {
    "reload" : 1,
    "updateCacheExpiryTime" : 1
  },
  "org.apache.hadoop.net.SocketInputStream:read(byte[],int,int)" : {
    "read" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.fs.FSDataInputStream:read(org.apache.hadoop.io.ByteBufferPool,int)" : {
    "read" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:append()" : {
    "add" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.util.functional.FutureIO:awaitFuture(java.util.concurrent.Future)" : {
    "debug" : 1,
    "raiseInnerCause" : 1,
    "get" : 1,
    "initCause" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:init()" : {
    "getClass" : 1,
    "startThreads" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRate(java.lang.String,java.lang.String,boolean)" : {
    "newRate" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink:loadGangliaConf(org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink$GangliaConfType)" : {
    "setTmax" : 1,
    "valueOf" : 1,
    "length" : 1,
    "setDmax" : 1,
    "error" : 1,
    "put" : 1,
    "parseInt" : 2,
    "split" : 1,
    "trim" : 2,
    "get" : 1,
    "name" : 2,
    "setSlope" : 1,
    "getStringArray" : 1,
    "setUnits" : 1
  },
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:<init>()" : {
    "isSupported" : 1,
    "getLoadingFailureReason" : 1
  },
  "org.apache.hadoop.util.bloom.HashFunction:<init>(int,int,int)" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 7
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:<init>(org.apache.hadoop.metrics2.MetricsCollector,org.apache.hadoop.metrics2.MetricsInfo,org.apache.hadoop.metrics2.MetricsFilter,org.apache.hadoop.metrics2.MetricsFilter,boolean)" : {
    "newArrayList" : 2,
    "now" : 1
  },
  "org.apache.hadoop.io.AbstractMapWritable:addToMap(java.lang.Class)" : {
    "containsKey" : 1,
    "addToMap" : 1
  },
  "org.apache.hadoop.io.compress.CompressorStream:<init>(java.io.OutputStream)" : { },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:init(byte[],byte[])" : {
    "init" : 1,
    "checkNotNull" : 2
  },
  "org.apache.hadoop.fs.shell.MoveCommands$Rename:processOptions(java.util.LinkedList)" : {
    "getRemoteDestination" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:cancelDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String)" : {
    "getAuthenticator" : 1,
    "checkNotNull" : 3,
    "cancelDelegationToken" : 1
  },
  "org.apache.hadoop.fs.shell.FsCommand:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "registerCommands" : 21
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getBlockNumber(long)" : {
    "throwIfInvalidOffset" : 1
  },
  "org.apache.hadoop.fs.FsServerDefaults:write(java.io.DataOutput)" : {
    "writeInt" : 3,
    "writeByte" : 1,
    "writeLong" : 1,
    "writeEnum" : 1,
    "writeShort" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt)" : {
    "create" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader$BufferSizeOption:<init>(int)" : { },
  "org.apache.hadoop.security.token.Token$PrivateToken:equals(java.lang.Object)" : {
    "getClass" : 2,
    "equals" : 2
  },
  "org.apache.hadoop.fs.permission.FsPermission:applyUMask(org.apache.hadoop.fs.permission.FsPermission)" : {
    "not" : 3,
    "and" : 3
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:resetOutputBuffers(java.nio.ByteBuffer[],int)" : {
    "resetBuffer" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.util.StringUtils:split(java.lang.String,char,char)" : {
    "add" : 2,
    "setLength" : 1,
    "size" : 2,
    "get" : 1,
    "equals" : 1,
    "toArray" : 1,
    "toString" : 2,
    "findNext" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:counters()" : {
    "counters" : 1,
    "getInnerStatistics" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:createUserForTesting(java.lang.String,java.lang.String[])" : {
    "getShortUserName" : 1,
    "ensureInitialized" : 1,
    "setUserGroups" : 1,
    "createRemoteUser" : 1
  },
  "org.apache.hadoop.fs.shell.XAttrCommands$GetfattrCommand:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "next" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "printXAttr" : 2,
    "iterator" : 1,
    "println" : 1,
    "getXAttr" : 1,
    "entrySet" : 1,
    "getXAttrs" : 1,
    "hasNext" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:getDecompressorType()" : {
    "checkNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.fs.CompositeCrcFileChecksum:getChecksumOpt()" : { },
  "org.apache.hadoop.fs.impl.FileRangeImpl:toString()" : {
    "getOffset" : 2,
    "format" : 1,
    "getLength" : 2,
    "getReference" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState)" : {
    "resetOutputBuffers" : 1,
    "getNumDataUnits" : 3,
    "prepareDecoding" : 1,
    "encodeData" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.AbstractNativeRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState)" : {
    "debug" : 1,
    "doEncode" : 1,
    "get" : 1,
    "convertToByteBufferState" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[],long,boolean)" : {
    "getConf" : 1,
    "getBufferSize" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell$Command:warnIfTransientProvider()" : {
    "getOut" : 1,
    "println" : 1,
    "isTransient" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:<init>(java.net.URI,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,java.lang.String,boolean)" : {
    "getStatistics" : 1,
    "getDefaultPortIfDefined" : 1,
    "initialize" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_save(java.io.Serializable,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean)" : {
    "applyToIOStatisticsSnapshot" : 1,
    "save" : 1,
    "serializer" : 1
  },
  "org.apache.hadoop.util.LineReader:readCustomLine(org.apache.hadoop.io.Text,int,int)" : {
    "unsetNeedAdditionalRecordAfterSplit" : 1,
    "fillBuffer" : 1,
    "clear" : 1,
    "append" : 3
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcProcessingTime(long)" : {
    "add" : 2
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfigException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.io.compress.Lz4Codec:createDecompressor()" : {
    "getInt" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:configureSources()" : {
    "getFilter" : 1,
    "getInstanceConfigs" : 1,
    "registerSystemSource" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:getHomeDirectory()" : {
    "getShortUserName" : 1,
    "warn" : 1,
    "getCurrentUser" : 1,
    "getProperty" : 1,
    "makeQualified" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.io.ElasticByteBufferPool:getBuffer(boolean,int)" : {
    "getValue" : 2,
    "getKey" : 1,
    "allocateDirect" : 1,
    "ceilingEntry" : 1,
    "allocate" : 1,
    "getBufferTree" : 1,
    "clear" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:connect(java.net.URL)" : {
    "init" : 1,
    "createSSLSocketFactory" : 1,
    "getConf" : 1,
    "setSSLSocketFactory" : 1,
    "openConnection" : 2,
    "equals" : 1,
    "getProtocol" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : {
    "init" : 1,
    "getProxy" : 1,
    "isSecurityEnabled" : 1,
    "getProtocolEngine" : 1
  },
  "org.apache.hadoop.metrics2.sink.PrometheusMetricsSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : {
    "prometheusName" : 1,
    "computeIfAbsent" : 1,
    "name" : 2,
    "metrics" : 1,
    "type" : 2,
    "put" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyServers:isProxyServer(java.lang.String)" : {
    "contains" : 1,
    "refresh" : 1
  },
  "org.apache.hadoop.security.http.CrossOriginFilter:initializeAllowedHeaders(javax.servlet.FilterConfig)" : {
    "split" : 1,
    "trim" : 1,
    "getInitParameter" : 1,
    "addAll" : 1,
    "getAllowedHeadersHeader" : 1,
    "asList" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.StringInterner:internStringsInArray(java.lang.String[])" : {
    "weakIntern" : 1
  },
  "org.apache.hadoop.io.serializer.WritableSerialization:getDeserializer(java.lang.Class)" : {
    "getConf" : 1
  },
  "org.apache.hadoop.fs.FileSystem$FSDataInputStreamBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.security.alias.UserProvider:deleteCredentialEntry(java.lang.String)" : {
    "getSecretKey" : 1,
    "removeSecretKey" : 1
  },
  "org.apache.hadoop.metrics2.lib.Interns:tag(java.lang.String,java.lang.String,java.lang.String)" : {
    "add" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.token.Token:encodeWritable(org.apache.hadoop.io.Writable)" : {
    "arraycopy" : 1,
    "encodeToString" : 1,
    "getLength" : 2,
    "write" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.fs.CachingGetSpaceUsed:init()" : {
    "set" : 1,
    "get" : 1,
    "refresh" : 1,
    "initRefreshThread" : 2
  },
  "org.apache.hadoop.crypto.JceCtrCryptoCodec$JceCtrCipher:encrypt(java.nio.ByteBuffer,java.nio.ByteBuffer)" : {
    "process" : 1
  },
  "org.apache.hadoop.fs.statistics.DurationStatisticSummary:fetchSuccessSummary(org.apache.hadoop.fs.statistics.IOStatistics,java.lang.String)" : {
    "fetchDurationSummary" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:newLoginContext(java.lang.String,javax.security.auth.Subject,org.apache.hadoop.security.UserGroupInformation$HadoopConfiguration)" : {
    "currentThread" : 1,
    "getContextClassLoader" : 1,
    "getClassLoader" : 1,
    "setContextClassLoader" : 2
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:advance()" : {
    "exists" : 1
  },
  "org.apache.hadoop.conf.Configuration:setBoolean(java.lang.String,boolean)" : {
    "set" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:<init>(java.io.OutputStream)" : { },
  "org.apache.hadoop.fs.http.AbstractHttpFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "toURL" : 1,
    "openConnection" : 1,
    "makeQualified" : 1,
    "toUri" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:<init>(java.lang.String,java.io.InputStream,java.lang.String,java.io.InputStream)" : {
    "emptySet" : 1,
    "emptyMap" : 1,
    "refresh" : 1
  },
  "org.apache.hadoop.util.functional.LazyAtomicReference:get()" : {
    "uncheckIOExceptions" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.util.HHUtil:findFirstValidInput(java.lang.Object[])" : { },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : {
    "getPathWithoutSchemeAndAuthority" : 1,
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 2,
    "getName" : 1,
    "equals" : 1,
    "getFileBlockLocations" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.shell.Command:processRawArguments(java.util.LinkedList)" : {
    "expandArguments" : 1,
    "processArguments" : 1
  },
  "org.apache.hadoop.security.authorize.AuthorizationException:printStackTrace()" : {
    "printStackTrace" : 1
  },
  "org.apache.hadoop.metrics2.impl.SinkQueue:consumeAll(org.apache.hadoop.metrics2.impl.SinkQueue$Consumer)" : {
    "size" : 1,
    "_dequeue" : 1,
    "clearConsumerLock" : 1,
    "consume" : 1,
    "front" : 1,
    "waitForData" : 1
  },
  "org.apache.hadoop.http.HttpServer2$Builder:loadSSLConfiguration()" : {
    "get" : 4,
    "getTrimmed" : 1,
    "format" : 2,
    "isEmpty" : 1,
    "getBoolean" : 1,
    "getPasswordString" : 3
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:invokeMethod(java.lang.reflect.Method,java.lang.Object[])" : {
    "isAccessible" : 1,
    "setAccessible" : 1,
    "getProxy" : 1,
    "invoke" : 1,
    "getCause" : 1
  },
  "org.apache.hadoop.fs.shell.Tail:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "parseLong" : 1,
    "getOptValue" : 1,
    "isEmpty" : 1,
    "addOptionWithValue" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:syncTokenOwnerStats()" : {
    "addTokenForOwnerStats" : 1,
    "clear" : 1,
    "keySet" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScannerByKey(byte[],byte[])" : {
    "createScannerByKey" : 1
  },
  "org.apache.hadoop.fs.FileUtil:permissionsFromMode(int)" : {
    "addPermissions" : 3,
    "noneOf" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:skip(long)" : {
    "min" : 1,
    "skip" : 1,
    "checkEOF" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:getTargetPath(org.apache.hadoop.fs.shell.PathData)" : {
    "getDepth" : 1,
    "getPathDataForChild" : 2,
    "isDirectory" : 1,
    "representsDirectory" : 1
  },
  "org.apache.hadoop.fs.FilterFs:open(org.apache.hadoop.fs.Path,int)" : {
    "checkPath" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.shell.SnapshotCommands$DeleteSnapshot:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "toString" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:open(org.apache.hadoop.fs.Path,int)" : {
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:optDouble(java.lang.String,double)" : {
    "opt" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:getSip()" : {
    "refreshSuperUserGroupsConfiguration" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:newSourceName(java.lang.String,boolean)" : {
    "uniqueName" : 1,
    "containsKey" : 1
  },
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:badArg(java.lang.String)" : {
    "printUsage" : 1
  },
  "org.apache.hadoop.fs.GlobalStorageStatistics$StorageIterator:next()" : {
    "getValue" : 1,
    "getName" : 1,
    "higherEntry" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "comparator" : 1,
    "valueClass" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:transitionToObserver(org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : {
    "setReqInfo" : 1,
    "build" : 1,
    "transitionToObserver" : 1,
    "convert" : 1,
    "ipc" : 1,
    "newBuilder" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:exponentialBackoffRetry(int,long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.io.SequenceFile$Reader:next(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)" : {
    "next" : 1,
    "getValueClass" : 1,
    "getClass" : 1,
    "getCurrentValue" : 1
  },
  "org.apache.hadoop.conf.ReconfigurationUtil:parseChangedProperties(org.apache.hadoop.conf.Configuration,org.apache.hadoop.conf.Configuration)" : {
    "getChangedProperties" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addUniqueIdentityCount(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "getUniqueIdentityCount" : 1,
    "info" : 1,
    "addCounter" : 1
  },
  "org.apache.hadoop.crypto.OpensslCipher:tokenizeTransformation(java.lang.String)" : {
    "hasMoreTokens" : 2,
    "trim" : 1,
    "nextToken" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:deleteCheckpoint()" : {
    "deleteCheckpoint" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:transitionToActive(org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : {
    "setReqInfo" : 1,
    "transitionToActive" : 1,
    "build" : 1,
    "convert" : 1,
    "ipc" : 1,
    "newBuilder" : 1
  },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:getNodeForNetworkLocation(org.apache.hadoop.net.Node)" : {
    "getNetworkLocation" : 5,
    "setNetworkLocation" : 1,
    "equals" : 1,
    "getNode" : 2
  },
  "org.apache.hadoop.io.SecureIOUtils:insecureCreateForWrite(java.io.File,int)" : {
    "getAbsolutePath" : 1,
    "exists" : 1,
    "setPermission" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:nextRawValue(org.apache.hadoop.io.SequenceFile$ValueBytes)" : {
    "readVInt" : 1,
    "reset" : 3,
    "seekToCurrentValue" : 1
  },
  "org.apache.hadoop.security.token.DelegationTokenIssuer:collectDelegationTokens(org.apache.hadoop.security.token.DelegationTokenIssuer,java.lang.String,org.apache.hadoop.security.Credentials,java.util.List)" : {
    "add" : 1,
    "addToken" : 1,
    "debug" : 3,
    "getAdditionalTokenIssuers" : 1,
    "getToken" : 1,
    "getCanonicalServiceName" : 1,
    "collectDelegationTokens" : 1,
    "isDebugEnabled" : 3,
    "getDelegationToken" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:remainingCapacity()" : {
    "dataSize" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:checkEOF()" : {
    "readLength" : 1,
    "isClosed" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable:checkPrimitive(java.lang.Class)" : {
    "getName" : 2,
    "containsKey" : 1
  },
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[],java.io.File,java.util.Map)" : { },
  "org.apache.hadoop.util.curator.ZKCuratorManager:createRootDirRecursively(java.lang.String)" : {
    "createRootDirRecursively" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkValuesEqual(long,java.lang.String,long,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:primitiveMkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "primitiveMkdir" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages$RatesRoller:<init>(org.apache.hadoop.metrics2.lib.MutableRollingAverages)" : { },
  "org.apache.hadoop.io.compress.DefaultCodec:getCompressorType()" : {
    "getZlibCompressorType" : 1
  },
  "org.apache.hadoop.util.StringUtils:getStrings(java.lang.String,java.lang.String)" : {
    "size" : 2,
    "toArray" : 1,
    "getStringCollection" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:<init>()" : { },
  "org.apache.hadoop.fs.FileSystem:getStatus(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:isParentOf(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "toUri" : 2,
    "endsWith" : 1,
    "getPath" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String,int)" : {
    "createSocketAddr" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addTopNCallerSummary(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "getValue" : 1,
    "getName" : 2,
    "size" : 1,
    "get" : 2,
    "getTopCallers" : 1,
    "poll" : 1,
    "info" : 2,
    "addCounter" : 2
  },
  "org.apache.hadoop.fs.FSOutputSummer:getChecksumSize()" : {
    "getChecksumSize" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:cancelToken(org.apache.hadoop.security.token.Token,java.lang.String)" : {
    "readFields" : 1,
    "getIdentifier" : 1,
    "syncLocalCacheWithZk" : 1,
    "cancelToken" : 1,
    "createIdentifier" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPInputStream:seek(long)" : {
    "checkNotClosed" : 1
  },
  "org.apache.hadoop.ipc.ExternalCall:get()" : {
    "waitForCompletion" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:getLastKey()" : {
    "size" : 2,
    "get" : 1,
    "buffer" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler$RetryInfo:newRetryInfo(org.apache.hadoop.io.retry.RetryPolicy,java.lang.Exception,org.apache.hadoop.io.retry.RetryInvocationHandler$Counters,boolean,long)" : {
    "getExceptions" : 1,
    "shouldRetry" : 1,
    "values" : 1,
    "singletonList" : 1,
    "compareTo" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider$KeyMetadata:readObject(java.io.ObjectInputStream)" : {
    "readFully" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderExtension:isTransient()" : {
    "isTransient" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : { },
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:write(java.io.DataOutput)" : {
    "writeInt" : 1,
    "writeLong" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:listXAttrs(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "listXAttrs" : 1
  },
  "org.apache.hadoop.log.LogThrottlingHelper:getCurrentStats(java.lang.String,int)" : {
    "getStats" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:getChecksumFile(org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "getName" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_setThreadIOStatisticsContext(java.lang.Object)" : {
    "setThreadIOStatisticsContext" : 1
  },
  "org.apache.hadoop.util.CombinedIPWhiteList:<init>(java.lang.String,java.lang.String,long)" : { },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:write(java.io.DataOutput)" : {
    "writeInt" : 2,
    "size" : 2,
    "write" : 3,
    "writeDouble" : 1
  },
  "org.apache.hadoop.io.IOUtils:closeStream(java.io.Closeable)" : {
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableStat:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" : {
    "uncapitalize" : 3,
    "capitalize" : 3,
    "info" : 8
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:initBlock()" : {
    "bsR" : 2,
    "initialiseCRC" : 2,
    "bsGetInt" : 2,
    "bsGetUByte" : 6,
    "complete" : 1,
    "getAndMoveToFrontDecode" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "makeAbsolute" : 1
  },
  "org.apache.hadoop.io.ElasticByteBufferPool:size(boolean)" : {
    "getBufferTree" : 1,
    "size" : 1
  },
  "org.apache.hadoop.util.RunJar:createClassLoader(java.io.File,java.io.File)" : {
    "add" : 4,
    "getClass" : 1,
    "toURL" : 4,
    "toURI" : 4,
    "isEmpty" : 1,
    "getClassLoader" : 1,
    "asList" : 1,
    "getSystemClasses" : 1,
    "useClientClassLoader" : 1,
    "size" : 1,
    "getTrimmedStrings" : 1,
    "toArray" : 1,
    "toString" : 1,
    "getHadoopClasspath" : 1,
    "listFiles" : 1,
    "append" : 12
  },
  "org.apache.hadoop.io.erasurecode.ECSchema:<init>(java.util.Map)" : {
    "get" : 1,
    "isEmpty" : 2,
    "unmodifiableMap" : 1,
    "remove" : 3,
    "extractIntOption" : 2
  },
  "org.apache.hadoop.util.Progress:addPhase(java.lang.String,float)" : {
    "addPhase" : 1,
    "setStatus" : 1
  },
  "org.apache.hadoop.io.AbstractMapWritable:copy(org.apache.hadoop.io.Writable)" : {
    "readFields" : 1,
    "getLength" : 1,
    "reset" : 1,
    "getMessage" : 1,
    "write" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:listXAttrs(org.apache.hadoop.fs.Path)" : {
    "listXAttrs" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.FileUtil:setExecutable(java.io.File,boolean)" : {
    "getCanonicalPath" : 1,
    "setExecutable" : 1,
    "chmod" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:<init>(long,int)" : {
    "checkNotNegative" : 2,
    "checkPositiveInteger" : 1,
    "setState" : 1
  },
  "org.apache.hadoop.io.ArrayFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : {
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.io.WritableComparator:readVInt(byte[],int)" : {
    "readVLong" : 1
  },
  "org.apache.hadoop.fs.PartialListing:get()" : {
    "unwrapRemoteException" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:registerSystemSource()" : {
    "makeSource" : 1,
    "get" : 1,
    "start" : 1,
    "subset" : 1
  },
  "org.apache.hadoop.ipc.RetryCache$CacheEntry:<init>(byte[],int,long)" : {
    "checkArgument" : 1,
    "getLsb" : 1,
    "getMsb" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getDefaultCompressionName()" : {
    "getName" : 1,
    "getDefaultCompressionAlgorithm" : 1
  },
  "org.apache.hadoop.fs.PathIOException:getTargetPath()" : { },
  "org.apache.hadoop.crypto.CryptoInputStream:decrypt(java.nio.ByteBuffer,int,int)" : {
    "afterDecryption" : 1,
    "min" : 1,
    "limit" : 2,
    "position" : 2,
    "duplicate" : 1,
    "decrypt" : 1,
    "put" : 2,
    "remaining" : 2
  },
  "org.apache.hadoop.ipc.Client$Connection:setFallBackToSimpleAuth(java.util.concurrent.atomic.AtomicBoolean)" : {
    "trace" : 4,
    "set" : 2,
    "isSecurityEnabled" : 1,
    "get" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:becomeActive()" : {
    "warn" : 1,
    "debug" : 1,
    "writeBreadCrumbNode" : 1,
    "becomeActive" : 1,
    "fenceOldActive" : 1
  },
  "org.apache.hadoop.io.BooleanWritable:toString()" : {
    "get" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.UTF8:compareTo(org.apache.hadoop.io.UTF8)" : {
    "compareBytes" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState:<init>(org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder,java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : {
    "checkBuffers" : 2,
    "findFirstValidInput" : 1,
    "checkParameters" : 1,
    "isDirect" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockManager:get(int)" : {
    "getStartOffset" : 1,
    "getSize" : 1,
    "checkNotNegative" : 1,
    "read" : 1,
    "allocate" : 1,
    "flip" : 1
  },
  "org.apache.hadoop.fs.shell.Ls:isSorted()" : {
    "isOrderSize" : 1,
    "isRecursive" : 1,
    "isOrderReverse" : 1,
    "isOrderTime" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:call(java.net.HttpURLConnection,java.lang.Object,int,java.lang.Class,int)" : {
    "readValue" : 1,
    "disconnect" : 1,
    "debug" : 1,
    "validateResponse" : 1,
    "toLowerCase" : 1,
    "isEmpty" : 2,
    "createConnection" : 1,
    "getResponseMessage" : 3,
    "getRequestMethod" : 1,
    "getInputStream" : 2,
    "getRequestProperty" : 1,
    "writeJson" : 1,
    "call" : 1,
    "getURL" : 1,
    "contains" : 1,
    "trim" : 1,
    "setRequestProperty" : 1,
    "equals" : 1,
    "getResponseCode" : 3,
    "closeStream" : 2,
    "getContentType" : 2,
    "getOutputStream" : 1,
    "isDebugEnabled" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.util.ReadWriteDiskValidator:checkStatus(java.io.File)" : {
    "createTempFile" : 1,
    "convert" : 2,
    "diskCheckFailed" : 4,
    "delete" : 1,
    "addWriteFileLatency" : 1,
    "nextBytes" : 1,
    "toPath" : 1,
    "addReadFileLatency" : 1,
    "equals" : 1,
    "nanoTime" : 4,
    "readAllBytes" : 1,
    "toString" : 1,
    "getMetric" : 1,
    "write" : 1,
    "isDirectory" : 1,
    "checkDir" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Metadata:<init>()" : { },
  "org.apache.hadoop.security.ShellBasedIdMapping$PassThroughMap:<init>()" : {
    "emptyMap" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:createTokenInfo(byte[])" : {
    "readFields" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:printUsage(java.io.PrintStream,java.lang.String,java.util.Map)" : {
    "println" : 2,
    "get" : 1,
    "getUsageString" : 2
  },
  "org.apache.hadoop.util.LightWeightCache:setExpirationTime(org.apache.hadoop.util.LightWeightCache$Entry,long)" : {
    "setExpirationTime" : 1,
    "monotonicNowNanos" : 1
  },
  "org.apache.hadoop.crypto.random.OsSecureRandom:close()" : {
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.io.ObjectWritable:writeObject(java.io.DataOutput,java.lang.Object,java.lang.Class,org.apache.hadoop.conf.Configuration,boolean)" : {
    "getClass" : 3,
    "getName" : 4,
    "writeFloat" : 1,
    "isAssignableFrom" : 2,
    "longValue" : 1,
    "writeLong" : 1,
    "get" : 1,
    "shortValue" : 1,
    "writeDelimitedTo" : 1,
    "write" : 2,
    "writeDouble" : 1,
    "writeInt" : 2,
    "writeByte" : 1,
    "charValue" : 1,
    "writeObject" : 1,
    "intValue" : 1,
    "constructOutputStream" : 1,
    "floatValue" : 1,
    "isEnum" : 1,
    "doubleValue" : 1,
    "writeChar" : 1,
    "getComponentType" : 2,
    "equals" : 1,
    "name" : 1,
    "getLength" : 1,
    "booleanValue" : 1,
    "writeShort" : 1,
    "isArray" : 2,
    "writeString" : 4,
    "isPrimitive" : 2,
    "writeBoolean" : 1,
    "byteValue" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getHomeDirectory()" : {
    "getShortUserName" : 2,
    "makeQualified" : 2,
    "equals" : 1,
    "getHomeDirPrefixValue" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$UgiMetrics:addGetGroups(long)" : {
    "add" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "debug" : 1,
    "renameTo" : 1,
    "getConf" : 1,
    "pathToFile" : 2,
    "copy" : 1,
    "isDebugEnabled" : 1,
    "handleEmptyDstDirectoryOnWindows" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:serviceMain(java.lang.String[])" : {
    "serviceMain" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.http.HttpsFileSystem:getWorkingDirectory()" : { },
  "org.apache.hadoop.fs.shell.Head:expandArgument(java.lang.String)" : {
    "add" : 1,
    "getConf" : 1
  },
  "org.apache.hadoop.fs.shell.Command:processPathArgument(org.apache.hadoop.fs.shell.PathData)" : {
    "processPaths" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeLink:getTargetLink()" : {
    "toString" : 3,
    "append" : 2
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getTokenInfoFromZK(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getTokenInfoFromZK" : 1
  },
  "org.apache.hadoop.fs.FsShell:printInstanceUsage(java.io.PrintStream,org.apache.hadoop.fs.shell.Command)" : {
    "getUsagePrefix" : 1,
    "println" : 1,
    "getUsage" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkWithinRange(long,java.lang.String,long,long)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekToEnd()" : {
    "parkCursorAtEnd" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getUsed(org.apache.hadoop.fs.Path)" : {
    "getContentSummary" : 1,
    "getLength" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$FilteringRemoteIterator:next()" : {
    "hasNext" : 1
  },
  "org.apache.hadoop.fs.FileUtil:unZip(java.io.InputStream,java.io.File)" : {
    "getCanonicalPath" : 2,
    "getName" : 2,
    "getAbsolutePath" : 1,
    "getTime" : 1,
    "warn" : 1,
    "getNextZipEntry" : 2,
    "toPath" : 2,
    "setPosixFilePermissions" : 1,
    "newOutputStream" : 1,
    "mkdirs" : 1,
    "getParentFile" : 1,
    "getUnixMode" : 1,
    "permissionsFromMode" : 1,
    "getPlatform" : 1,
    "setLastModified" : 1,
    "copyBytes" : 1,
    "isDirectory" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:available()" : {
    "available" : 2
  },
  "org.apache.hadoop.security.alias.KeyStoreProvider:getInputStreamForFile()" : {
    "getPath" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:getUriPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "isValidName" : 1,
    "toUri" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.fs.FilterFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "renameInternal" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getMetadata(java.lang.String)" : {
    "getMetadata" : 1,
    "doOp" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.io.Text:find(java.lang.String,int)" : {
    "encode" : 1,
    "hasRemaining" : 3,
    "get" : 4,
    "reset" : 4,
    "position" : 2,
    "wrap" : 1,
    "mark" : 2
  },
  "org.apache.hadoop.fs.shell.find.Find:getExpression(java.lang.String)" : {
    "getExpression" : 1,
    "getConf" : 1,
    "getExpressionFactory" : 1
  },
  "org.apache.hadoop.fs.ContentSummary$Builder:spaceConsumed(long)" : {
    "spaceConsumed" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.util.Shell:appendScriptExtension(java.io.File,java.lang.String)" : {
    "appendScriptExtension" : 1
  },
  "org.apache.hadoop.ipc.RpcWritable$Buffer:writeTo(org.apache.hadoop.ipc.ResponseBuffer)" : {
    "array" : 1,
    "arrayOffset" : 1,
    "position" : 1,
    "ensureCapacity" : 1,
    "write" : 1,
    "remaining" : 2
  },
  "org.apache.hadoop.security.authorize.ServiceAuthorizationManager:refresh(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.authorize.PolicyProvider)" : {
    "getProperty" : 1,
    "refreshWithLoadedConfiguration" : 1,
    "addResource" : 1
  },
  "org.apache.hadoop.util.CleanerUtil:unmapHackImpl()" : {
    "getDeclaredField" : 1,
    "lookup" : 1,
    "filterReturnValue" : 1,
    "constant" : 1,
    "setAccessible" : 2,
    "forName" : 2,
    "getMethod" : 1,
    "type" : 1,
    "bindTo" : 1,
    "asType" : 3,
    "findVirtual" : 2,
    "findStatic" : 1,
    "methodType" : 6,
    "unreflect" : 1,
    "dropArguments" : 1,
    "get" : 1,
    "newBufferCleaner" : 2,
    "guardWithTest" : 1,
    "returnType" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:revertFromOld(org.apache.hadoop.fs.Path,boolean)" : {
    "renameOrFail" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getLocationByRecordNum(long)" : {
    "getLocationByRecordNum" : 1,
    "checkTFileDataIndex" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "setXAttr" : 1
  },
  "org.apache.hadoop.util.functional.TaskPool$Builder:suppressExceptions()" : {
    "suppressExceptions" : 1
  },
  "org.apache.hadoop.fs.shell.find.Result:negate()" : {
    "isDescend" : 1,
    "isPass" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:write(int)" : {
    "write" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockManager:<init>(org.apache.hadoop.fs.impl.prefetch.BlockData)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:getSumBufferSize(int,int,org.apache.hadoop.fs.Path)" : {
    "getFileBufferSize" : 1,
    "max" : 2,
    "getMyFs" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path[],boolean,org.apache.hadoop.fs.Path)" : {
    "merge" : 1
  },
  "org.apache.hadoop.ipc.CallerContext$Builder:<init>(java.lang.String,java.lang.String)" : {
    "isValid" : 1,
    "checkFieldSeparator" : 1,
    "append" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeLong:<init>(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "set" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$LinkedSegmentsDescriptor:cleanup()" : {
    "shouldPreserveInput" : 1,
    "cleanup" : 1,
    "close" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int)" : { },
  "org.apache.hadoop.crypto.CryptoOutputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "create" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.ipc.ProtobufHelper:getFixedByteString(org.apache.hadoop.io.Text)" : {
    "getFixedByteString" : 1
  },
  "org.apache.hadoop.io.compress.CodecPool:returnDecompressor(org.apache.hadoop.io.compress.Decompressor)" : {
    "getClass" : 1,
    "isAnnotationPresent" : 1,
    "payback" : 1,
    "reset" : 1,
    "updateLeaseCount" : 1,
    "end" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.fs.GlobExpander:expand(java.lang.String)" : {
    "add" : 2,
    "addAll" : 1,
    "isEmpty" : 1,
    "expandLeftmost" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "addGauge" : 1,
    "clearChanged" : 1,
    "value" : 1,
    "info" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getLong" : 5,
    "getInt" : 2,
    "getTimeDuration" : 1
  },
  "org.apache.hadoop.io.ArrayFile:<init>()" : { },
  "org.apache.hadoop.crypto.CryptoStreamUtils:getBufferSize(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.fs.ContentSummary$Builder:typeConsumed(org.apache.hadoop.fs.StorageType,long)" : {
    "typeConsumed" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:close()" : {
    "writeChunk" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:rollMasterKey()" : {
    "removeExpiredKeys" : 1,
    "setExpiryDate" : 1,
    "now" : 1,
    "updateCurrentKey" : 1,
    "updateDelegationKey" : 1
  },
  "org.apache.hadoop.ipc.Server:bind(java.net.ServerSocket,java.net.InetSocketAddress,int,org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "bind" : 2,
    "getPort" : 2,
    "getHostName" : 1,
    "isBound" : 2,
    "getRange" : 1,
    "isEmpty" : 1,
    "getAddress" : 1,
    "wrapException" : 1
  },
  "org.apache.hadoop.util.StringUtils:escapeString(java.lang.String)" : {
    "escapeString" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getXAttrs(org.apache.hadoop.fs.Path)" : {
    "getXAttrs" : 1
  },
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,java.lang.CharSequence,java.nio.charset.Charset)" : {
    "build" : 1,
    "newEncoder" : 1,
    "requireNonNull" : 3,
    "create" : 1,
    "overwrite" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "checkPath" : 1,
    "setTimes" : 1
  },
  "org.apache.hadoop.net.NetUtils:getOutputStream(java.net.Socket,long)" : {
    "getChannel" : 1,
    "getOutputStream" : 1
  },
  "org.apache.hadoop.io.SequenceFile:getDefaultCompressionType(org.apache.hadoop.conf.Configuration)" : {
    "valueOf" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],org.apache.hadoop.fs.StorageType[],long,long,boolean)" : {
    "internStringsInArray" : 5
  },
  "org.apache.hadoop.fs.WindowsGetSpaceUsed:refresh()" : {
    "set" : 1,
    "getDirPath" : 1,
    "getFolderUsage" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:renewDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token)" : {
    "renewDelegationToken" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:listStatus(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.PathFilter)" : {
    "size" : 1,
    "toArray" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:createOutputStream(org.apache.hadoop.fs.Path,boolean)" : {
    "createOutputStreamWithMode" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:tag(java.lang.String,java.lang.String,java.lang.String,boolean)" : {
    "tag" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.RawPathHandle:toString()" : {
    "bytes" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getCounterReference(java.lang.String)" : {
    "getInnerStatistics" : 1,
    "getCounterReference" : 1
  },
  "org.apache.hadoop.util.BlockingThreadPoolExecutorService:newDaemonThreadFactory(java.lang.String)" : {
    "setDaemon" : 1,
    "newThread" : 1,
    "getNamedThreadFactory" : 1,
    "isDaemon" : 1,
    "getPriority" : 1,
    "setPriority" : 1
  },
  "org.apache.hadoop.crypto.OpensslCipher:checkState()" : {
    "checkState" : 1
  },
  "org.apache.hadoop.fs.FileSystemStorageStatistics:reset()" : {
    "reset" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:initTokenManager(java.util.Properties)" : {
    "init" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "set" : 1,
    "trim" : 1,
    "entrySet" : 1,
    "get" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:compression(org.apache.hadoop.io.SequenceFile$CompressionType)" : { },
  "org.apache.hadoop.fs.ContentSummary$Builder:typeQuota(org.apache.hadoop.fs.StorageType,long)" : {
    "typeQuota" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:rewind()" : {
    "seekTo" : 1
  },
  "org.apache.hadoop.fs.FilterFs:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : {
    "checkPath" : 1,
    "mkdir" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:closeChildFileSystems(org.apache.hadoop.fs.FileSystem)" : {
    "getScheme" : 1,
    "format" : 1,
    "getBoolean" : 1,
    "close" : 1,
    "getChildFileSystems" : 1,
    "getUri" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:incrementGauge(java.lang.String,long)" : {
    "incrementGauge" : 1,
    "getInnerStatistics" : 1
  },
  "org.apache.hadoop.util.hash.MurmurHash:hash(byte[],int,int)" : {
    "hash" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem$2:close()" : {
    "getAndSet" : 1,
    "close" : 1,
    "shutdown" : 1
  },
  "org.apache.hadoop.ipc.CallerContext$Builder:<init>(java.lang.String)" : { },
  "org.apache.hadoop.crypto.OpensslCipher:getInstance(java.lang.String,java.lang.String)" : {
    "initEngine" : 1,
    "get" : 2,
    "tokenizeTransformation" : 1,
    "initContext" : 1
  },
  "org.apache.hadoop.util.VersionInfo:getUrl()" : {
    "_getUrl" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:login(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.lang.String)" : {
    "getProperty" : 1,
    "isSecurityEnabled" : 1,
    "get" : 2,
    "getServerPrincipal" : 1,
    "length" : 1,
    "loginUserFromKeytab" : 1
  },
  "org.apache.hadoop.security.http.RestCsrfPreventionFilter:getFilterParams(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getPropsWithPrefix" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:copyFromLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getConf" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.util.Progress:addPhase()" : {
    "addNewPhase" : 1,
    "size" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:close()" : {
    "stopClient" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:setAbsolute(long)" : {
    "isValid" : 1,
    "isWithinCurrentBuffer" : 1,
    "position" : 1
  },
  "org.apache.hadoop.metrics2.MetricsTag:<init>(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.io.Text:<init>(org.apache.hadoop.io.Text)" : {
    "set" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrRpcCallSuccesses()" : {
    "incr" : 1
  },
  "org.apache.hadoop.util.hash.JenkinsHash:main(java.lang.String[])" : {
    "exit" : 1,
    "println" : 2,
    "abs" : 1,
    "read" : 2,
    "newInputStream" : 1,
    "get" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.fs.FileContext:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "setReplication" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$TableBuilder:<init>(java.lang.Object[])" : {
    "addRow" : 1
  },
  "org.apache.hadoop.conf.Configuration:dumpConfiguration(org.apache.hadoop.conf.Configuration,java.lang.String,java.io.Writer)" : {
    "createGenerator" : 1,
    "flush" : 1,
    "isNullOrEmpty" : 2,
    "appendJSONProperty" : 1,
    "writeFieldName" : 1,
    "get" : 1,
    "writeStartObject" : 1,
    "writeEndObject" : 1,
    "dumpConfiguration" : 1
  },
  "org.apache.hadoop.net.DNSDomainNameResolver:getHostnameByIP(java.net.InetAddress)" : {
    "warn" : 1,
    "debug" : 1,
    "getCanonicalHostName" : 1,
    "reverseDns" : 1,
    "equals" : 1,
    "length" : 3,
    "getHostAddress" : 2,
    "substring" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.util.WeakReferenceMap:<init>(java.util.function.Function,java.util.function.Consumer)" : {
    "requireNonNull" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:getAndMoveToFrontDecode0(int)" : {
    "bsR" : 1,
    "readAByte" : 1
  },
  "org.apache.hadoop.util.functional.FutureIO:awaitAllFutures(java.util.Collection)" : {
    "add" : 1,
    "awaitFuture" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:add(java.lang.String,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableStat:resetMinMax()" : {
    "reset" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream:skip(long)" : {
    "getFileLength" : 1,
    "getPos" : 1,
    "skip" : 1
  },
  "org.apache.hadoop.util.ZKUtil:parseAuth(java.lang.String)" : {
    "add" : 1,
    "split" : 2,
    "newArrayList" : 2,
    "omitEmptyStrings" : 1,
    "getBytes" : 1,
    "trimResults" : 1,
    "on" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:getConfiguration(java.lang.String,javax.servlet.FilterConfig)" : {
    "getConfiguration" : 1,
    "setAuthHandlerClass" : 1
  },
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)" : {
    "copy" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:createToken(org.apache.hadoop.security.UserGroupInformation,java.lang.String,java.lang.String)" : {
    "getShortUserName" : 1,
    "setService" : 1,
    "debug" : 1,
    "setRenewer" : 1,
    "setRealUser" : 1,
    "getUserName" : 2,
    "getRealUser" : 2,
    "createIdentifier" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.fs.FSInputChecker:read(byte[],int,int)" : {
    "read1" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:<init>()" : { },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getSummary(boolean)" : {
    "getSummary" : 1,
    "getDurationInfo" : 1,
    "toString" : 1,
    "getDebugInfo" : 1,
    "append" : 4
  },
  "org.apache.hadoop.net.unix.DomainSocket:setAttribute(int,int)" : {
    "reference" : 1,
    "setAttribute0" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.ipc.Server$Call:<init>(int,int,org.apache.hadoop.ipc.RPC$RpcKind,byte[])" : { },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:getCompressedSize()" : {
    "getCompressedSize" : 1,
    "getBlockRegion" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBzip2Compressor(org.apache.hadoop.conf.Configuration)" : {
    "isNativeBzip2Loaded" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:lock()" : {
    "monotonicNow" : 2,
    "lock" : 1,
    "startLockTiming" : 1,
    "check" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_create(java.lang.Object)" : { },
  "org.apache.hadoop.fs.AbstractFileSystem:createFileSystem(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "getScheme" : 2,
    "format" : 2,
    "newInstance" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:becomeStandby()" : {
    "createReqInfo" : 1,
    "getProxy" : 1,
    "getGracefulFenceTimeout" : 1,
    "transitionToStandby" : 1,
    "error" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "setAcl" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "removeDefaultAcl" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient:<init>(org.apache.hadoop.security.UserGroupInformation,java.lang.Class,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.util.DiskChecker:checkAccessByFileMethods(java.io.File)" : {
    "canExecute" : 1,
    "canRead" : 1,
    "canWrite" : 1,
    "toString" : 4,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:readProcMemInfoFile()" : {
    "readProcMemInfoFile" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:reset()" : {
    "setDelegationTokenSeqNum" : 1,
    "clear" : 2,
    "setCurrentKeyId" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:ctorImpl(java.lang.Class,java.lang.Class[])" : {
    "impl" : 1,
    "debug" : 1,
    "buildChecked" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainInputStream:available()" : {
    "reference" : 1,
    "available0" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSOutputSummer:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:startMetricsMBeans()" : {
    "values" : 1,
    "startMBeans" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:finalize()" : {
    "reset" : 1
  },
  "org.apache.hadoop.fs.ContentSummary$Builder:typeQuota(long[])" : {
    "typeQuota" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:equals(java.lang.Object)" : {
    "getClass" : 2,
    "equals" : 1,
    "toString" : 2
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getHomeDirectory()" : {
    "disconnect" : 1,
    "printWorkingDirectory" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.tracing.Tracer:newSpan(java.lang.String,org.apache.hadoop.tracing.SpanContext)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getDefaultReplication()" : {
    "fullPath" : 1,
    "getDefaultReplication" : 1
  },
  "org.apache.hadoop.fs.VectoredReadUtils:mergeSortedRanges(java.util.List,int,int,int)" : {
    "add" : 1,
    "size" : 1,
    "merge" : 1,
    "getOffset" : 2,
    "getLength" : 1,
    "roundDown" : 1,
    "roundUp" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getStorageBytesWritten()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.fs.BulkDeleteUtils:validateBulkDeletePaths(java.util.Collection,int,org.apache.hadoop.fs.Path)" : {
    "size" : 2,
    "forEach" : 1,
    "requireNonNull" : 1,
    "isAbsolute" : 1,
    "checkArgument" : 3,
    "validatePathIsUnderParent" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodecFactory:setCodecClasses(org.apache.hadoop.conf.Configuration,java.util.List)" : {
    "next" : 2,
    "iterator" : 1,
    "set" : 1,
    "getName" : 2,
    "toString" : 1,
    "hasNext" : 2,
    "append" : 3
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:loadFullMaps()" : {
    "loadFullGroupMap" : 1,
    "loadFullUserMap" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$BlockUploadData:close()" : {
    "debug" : 1,
    "delete" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.fs.FsShell:printInfo(java.io.PrintStream,java.lang.String,boolean)" : {
    "add" : 1,
    "printInstanceUsage" : 1,
    "isDeprecated" : 1,
    "getUsagePrefix" : 1,
    "println" : 4,
    "printGenericCommandUsage" : 1,
    "getNames" : 1,
    "getInstance" : 2,
    "printInstanceHelp" : 2,
    "getUsage" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl:<init>(java.lang.String)" : { },
  "org.apache.hadoop.io.retry.RetryPolicies:retryOtherThanRemoteAndSaslException(org.apache.hadoop.io.retry.RetryPolicy,java.util.Map)" : { },
  "org.apache.hadoop.ha.HAAdmin:createReqInfo()" : { },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:trackDuration(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String,org.apache.hadoop.util.functional.CallableRaisingIOE)" : {
    "apply" : 1,
    "trackDurationOfOperation" : 1
  },
  "org.apache.hadoop.io.MultipleIOException$Builder:build()" : {
    "createIOException" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:create(org.apache.hadoop.fs.Path,boolean,boolean,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.permission.FsPermission)" : {
    "getParent" : 1,
    "createOutputStreamWithMode" : 1,
    "mkdirs" : 1,
    "exists" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ipc.WeightedRoundRobinMultiplexer:advanceIndex()" : {
    "decrementAndGet" : 1,
    "moveToNextQueue" : 1
  },
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:append(java.lang.Object,java.lang.Object)" : {
    "serialize" : 2,
    "getClass" : 2,
    "writeVInt" : 2,
    "getLength" : 6,
    "sync" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable$Internal:<init>(java.lang.Object)" : { },
  "org.apache.hadoop.fs.TrashPolicyDefault:moveToTrash(org.apache.hadoop.fs.Path)" : {
    "makeTrashRelativePath" : 2,
    "getParent" : 3,
    "getName" : 1,
    "getWorkingDirectory" : 1,
    "replace" : 1,
    "getTrashRoot" : 1,
    "warn" : 2,
    "rename" : 1,
    "mkdirs" : 1,
    "now" : 2,
    "makeQualified" : 1,
    "isEnabled" : 1,
    "getFileStatus" : 1,
    "exists" : 2,
    "isAbsolute" : 1,
    "toString" : 7,
    "info" : 1,
    "startsWith" : 2
  },
  "org.apache.hadoop.io.DataInputBuffer:getPosition()" : {
    "getPosition" : 1
  },
  "org.apache.hadoop.fs.FileSystem:globStatus(org.apache.hadoop.fs.Path)" : {
    "withResolveSymlinks" : 1,
    "createGlobber" : 1,
    "build" : 1,
    "glob" : 1,
    "withPathFiltern" : 1,
    "withPathPattern" : 1
  },
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:getAlgorithmName()" : {
    "getCrcType" : 1,
    "name" : 1
  },
  "org.apache.hadoop.util.functional.FutureIO:raiseInnerCause(java.util.concurrent.CompletionException)" : {
    "unwrapInnerException" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSTokenRenewer:handleKind(org.apache.hadoop.io.Text)" : {
    "equals" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:renewToken(org.apache.hadoop.security.token.Token,java.lang.String)" : {
    "getKey" : 1,
    "getDelegationKey" : 1,
    "getTrackingIdIfEnabled" : 1,
    "getSequenceNumber" : 1,
    "updateToken" : 1,
    "trackUpdateToken" : 1,
    "getTokenInfo" : 1,
    "isEqual" : 1,
    "isEmpty" : 1,
    "formatTime" : 2,
    "getMaxDate" : 3,
    "formatTokenId" : 7,
    "getRenewer" : 4,
    "createPassword" : 1,
    "readFields" : 1,
    "getPassword" : 1,
    "min" : 1,
    "size" : 1,
    "getIdentifier" : 2,
    "equals" : 1,
    "now" : 1,
    "toString" : 2,
    "getMasterKeyId" : 2,
    "createIdentifier" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:getThisBuilder()" : { },
  "org.apache.hadoop.conf.ConfigurationWithLogging:getFloat(java.lang.String,float)" : {
    "getFloat" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.Shell:isSetsidSupported()" : {
    "contains" : 1,
    "debug" : 3,
    "getMessage" : 2,
    "isDebugEnabled" : 1,
    "execute" : 1,
    "getExitCode" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileContext:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.io.compress.DefaultCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:open(org.apache.hadoop.fs.PathHandle,int)" : {
    "open" : 1
  },
  "org.apache.hadoop.fs.FileSystem:setQuota(org.apache.hadoop.fs.Path,long,long)" : {
    "methodNotSupported" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "mkdirs" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,java.lang.String[])" : {
    "add" : 1,
    "getThisBuilder" : 1,
    "setStrings" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState)" : {
    "resetOutputBuffers" : 1,
    "getNumDataUnits" : 2,
    "prepareDecoding" : 1,
    "encodeData" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlockFactory:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:toString()" : {
    "getAuthenticationMethod" : 1,
    "getUserName" : 1,
    "toString" : 2,
    "getRealUser" : 2,
    "append" : 3
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:<init>(org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory$SSLChannelMode)" : {
    "getVersion" : 1,
    "getSocketFactory" : 1,
    "getName" : 1,
    "getProperty" : 1,
    "alterCipherList" : 1,
    "initializeSSLContext" : 1,
    "getSupportedCipherSuites" : 1,
    "getProvider" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:start(java.util.List)" : {
    "start" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:readAByte(java.io.InputStream)" : {
    "read" : 1,
    "updateProcessedByteCount" : 1
  },
  "org.apache.hadoop.fs.Trash:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration)" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.util.StringUtils:limitDecimalTo2(double)" : {
    "format" : 1
  },
  "org.apache.hadoop.io.ArrayFile$Reader:key()" : {
    "get" : 1
  },
  "org.apache.hadoop.security.ssl.FileMonitoringTimerTask:<init>(java.nio.file.Path,java.util.function.Consumer,java.util.function.Consumer)" : {
    "singletonList" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:checkTagName(java.lang.String)" : {
    "containsKey" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:shouldRetry(java.lang.Exception,int,int,boolean)" : {
    "current" : 1,
    "round" : 1,
    "searchPair" : 1,
    "nextDouble" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementBytesRead(long)" : {
    "getThreadStatistics" : 1
  },
  "org.apache.hadoop.tools.protocolPB.GetUserMappingsProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : {
    "getProtocolVersion" : 1,
    "isMethodSupported" : 1
  },
  "org.apache.hadoop.net.NetUtils:wrapException(java.lang.String,int,java.lang.String,int,java.io.IOException)" : {
    "see" : 8,
    "getHostDetailsAsString" : 3,
    "equals" : 3,
    "initCause" : 1,
    "getMessage" : 1,
    "wrapWithMessage" : 10
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:blockSize(long)" : {
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:applyToIOStatisticsSnapshot(java.io.Serializable,org.apache.hadoop.util.functional.FunctionRaisingIOE)" : {
    "requireIOStatisticsSnapshot" : 1,
    "unchecked" : 1
  },
  "org.apache.hadoop.fs.ContentSummary$Builder:<init>()" : { },
  "org.apache.hadoop.security.token.DtUtilShell$Remove:execute()" : {
    "getConf" : 1,
    "removeTokenFromFile" : 1
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.net.InetAddress,int)" : {
    "getSocketFactory" : 1,
    "createSocket" : 1,
    "configureSocket" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodecFactory:getCodecClasses(org.apache.hadoop.conf.Configuration)" : {
    "add" : 2,
    "getClass" : 1,
    "trim" : 1,
    "hasMoreElements" : 1,
    "asSubclass" : 1,
    "getClassByName" : 1,
    "nextToken" : 1,
    "get" : 1,
    "length" : 1,
    "isAssignableFrom" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:bsGetBit()" : {
    "readAByte" : 1
  },
  "org.apache.hadoop.metrics2.AbstractMetric:equals(java.lang.Object)" : {
    "equal" : 2,
    "value" : 2,
    "info" : 1
  },
  "org.apache.hadoop.conf.ReconfigurationServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getClass" : 1,
    "printFooter" : 1,
    "getReconfigurable" : 1,
    "getWriter" : 1,
    "printHeader" : 1,
    "getCanonicalName" : 1,
    "setContentType" : 1,
    "printConf" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.KDiag:validateJAAS(boolean)" : {
    "verifyFileIsValid" : 1,
    "println" : 1,
    "getProperty" : 1,
    "verify" : 1,
    "dump" : 1,
    "title" : 1,
    "endln" : 1
  },
  "org.apache.hadoop.service.AbstractService:serviceInit(org.apache.hadoop.conf.Configuration)" : {
    "debug" : 1,
    "setConfig" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.PathIsNotDirectoryException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.util.concurrent.HadoopScheduledThreadPoolExecutor:afterExecute(java.lang.Runnable,java.lang.Throwable)" : {
    "logThrowableFromAfterExecute" : 1,
    "afterExecute" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:addCacheEntryWithPayload(byte[],int,java.lang.Object)" : {
    "unlock" : 1,
    "incrCacheUpdated" : 1,
    "nanoTime" : 1,
    "lock" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommandWithMultiThread:processArguments(java.util.LinkedList)" : {
    "initThreadPoolExecutor" : 1,
    "isMultiThreadNecessary" : 1,
    "waitForCompletion" : 1,
    "processArguments" : 1
  },
  "org.apache.hadoop.service.AbstractService:unregisterServiceListener(org.apache.hadoop.service.ServiceStateChangeListener)" : {
    "remove" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:valueOf(java.lang.String)" : {
    "format" : 1,
    "length" : 2,
    "charAt" : 3
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "next" : 1,
    "iterator" : 1,
    "values" : 1,
    "get" : 1,
    "hasNext" : 1,
    "snapshot" : 1,
    "remove" : 1,
    "aggregateLocalStatesToGlobalMetrics" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:getGcUsage(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "getGcInfo" : 1,
    "getCollectionTime" : 1,
    "getCollectionCount" : 1,
    "getName" : 1,
    "addGauge" : 1,
    "getNumGcWarnThresholdExceeded" : 1,
    "getTotalGcExtraSleepTime" : 1,
    "getLatestGcData" : 1,
    "getGcTimePercentage" : 1,
    "getNumGcInfoThresholdExceeded" : 1,
    "addCounter" : 7
  },
  "org.apache.hadoop.ipc.Server:stop()" : {
    "size" : 1,
    "doStop" : 2,
    "notifyAll" : 1,
    "values" : 1,
    "interrupt" : 4,
    "shutdownMetricsUpdaterExecutor" : 1,
    "shutdown" : 2,
    "info" : 1
  },
  "org.apache.hadoop.util.PriorityQueue:put(java.lang.Object)" : {
    "upHeap" : 1
  },
  "org.apache.hadoop.fs.PathPermissionException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.ha.HAServiceTarget:getHealthMonitorProxy(org.apache.hadoop.conf.Configuration,int,int)" : {
    "getProxyForAddress" : 1,
    "getAddress" : 1,
    "getHealthMonitorAddress" : 1
  },
  "org.apache.hadoop.io.compress.DefaultCodec:createOutputStream(java.io.OutputStream)" : {
    "createOutputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.fs.CachingGetSpaceUsed:initRefreshThread(boolean)" : {
    "setDaemon" : 1,
    "set" : 1,
    "start" : 1
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean,int,short,long)" : {
    "create" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolServerSideTranslatorPB:pack(java.util.Collection)" : {
    "setExitStatus" : 1,
    "addResponses" : 1,
    "setUserMessage" : 1,
    "build" : 1,
    "getSenderName" : 1,
    "setSenderName" : 1,
    "getMessage" : 1,
    "newBuilder" : 2,
    "getReturnCode" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileContext,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.io.SequenceFile$Metadata,java.util.EnumSet,org.apache.hadoop.fs.Options$CreateOpts[])" : {
    "createWriter" : 1,
    "create" : 1,
    "ownStream" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:<init>(org.apache.hadoop.fs.FileSystem,java.lang.Class,java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:emptyStatisticsStore()" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getLinkTarget" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:encrypt()" : {
    "updateEncryptor" : 1,
    "encrypt" : 1,
    "get" : 1,
    "clear" : 2,
    "checkState" : 1,
    "position" : 3,
    "write" : 1,
    "flip" : 2,
    "isContextReset" : 1,
    "remaining" : 1,
    "getTmpBuf" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:getMountPathInfo(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : {
    "fullPath" : 1,
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 2,
    "resolve" : 1,
    "toUri" : 1,
    "get" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1,
    "fsGetter" : 1,
    "getMyFs" : 1
  },
  "org.apache.hadoop.fs.HarFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:toLongStatistic(java.util.Map$Entry)" : {
    "getValue" : 1,
    "getKey" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:getCompressionBufferSize(org.apache.hadoop.conf.Configuration)" : {
    "getBufferSize" : 1,
    "getRecommendedBufferSize" : 1
  },
  "org.apache.hadoop.fs.shell.Command:recursePath(org.apache.hadoop.fs.shell.PathData)" : {
    "getDirectoryContentsIterator" : 1,
    "getDirectoryContents" : 1,
    "processPaths" : 2,
    "isSorted" : 1,
    "maybeIgnoreMissingDirectory" : 1
  },
  "org.apache.hadoop.security.Groups:getGroupsSet(java.lang.String)" : {
    "getGroupInternal" : 1,
    "unmodifiableSet" : 1
  },
  "org.apache.hadoop.ipc.Server:getRemotePort()" : {
    "get" : 1,
    "getRemotePort" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:getRemaining()" : {
    "checkStream" : 1
  },
  "org.apache.hadoop.fs.shell.Count:<init>(java.lang.String[],int,org.apache.hadoop.conf.Configuration)" : {
    "copyOfRange" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:innerComplete(org.apache.hadoop.fs.UploadHandle,org.apache.hadoop.fs.Path,java.util.Map)" : {
    "checkUploadId" : 1,
    "getName" : 1,
    "entrySet" : 1,
    "checkArgument" : 1,
    "getPathHandle" : 1,
    "concat" : 1,
    "toList" : 1,
    "sort" : 1,
    "delete" : 1,
    "mergePaths" : 1,
    "totalPartsLen" : 1,
    "getValue" : 1,
    "checkPath" : 1,
    "size" : 3,
    "rename" : 1,
    "addAll" : 1,
    "stream" : 1,
    "toByteArray" : 3,
    "toArray" : 1,
    "comparingInt" : 1,
    "create" : 2,
    "checkPartHandles" : 1,
    "close" : 2,
    "map" : 1,
    "collect" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:aggregateMeanStatistics(org.apache.hadoop.fs.statistics.MeanStatistic,org.apache.hadoop.fs.statistics.MeanStatistic)" : {
    "add" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.io.MD5Hash$Comparator:<init>()" : { },
  "org.apache.hadoop.fs.FilterFileSystem:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "removeXAttr" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:processArguments(java.util.LinkedList)" : {
    "getRootExpression" : 1,
    "prepare" : 1,
    "setOptions" : 1,
    "finish" : 1,
    "getOptions" : 1,
    "processArguments" : 1
  },
  "org.apache.hadoop.fs.permission.ChmodParser:applyNewPermission(org.apache.hadoop.fs.FileStatus)" : {
    "getPermission" : 1,
    "combineModes" : 1,
    "isDirectory" : 1,
    "toShort" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:sampleMetrics()" : {
    "getValue" : 1,
    "getKey" : 1,
    "entrySet" : 1,
    "accepts" : 1,
    "get" : 1,
    "clear" : 1,
    "snapshotMetrics" : 2
  },
  "org.apache.hadoop.fs.FileContext:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "satisfyStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.FileSystem:setDefaultUri(org.apache.hadoop.conf.Configuration,java.net.URI)" : {
    "set" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:close()" : {
    "flush" : 1,
    "close" : 2,
    "freeBuffers" : 1
  },
  "org.apache.hadoop.net.TableMapping:reloadCachedMappings()" : {
    "reloadCachedMappings" : 2,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.fs.FileSystem:createDataInputStreamBuilder(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.security.SaslPropertiesResolver:getSaslProperties(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.security.SaslRpcServer$QualityOfProtection)" : {
    "getSaslQop" : 1,
    "valueOf" : 1,
    "toUpperCase" : 1,
    "toString" : 1,
    "join" : 1,
    "put" : 2,
    "getStrings" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,boolean)" : {
    "toString" : 1,
    "must" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:getConnectionId()" : {
    "getConnectionIdForProxy" : 1,
    "getProxy" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping$StaticMapping:<init>(java.util.Map,java.util.Map)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : {
    "add" : 1,
    "tag" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:syncLocalCacheWithZk(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getSequenceNumber" : 1,
    "getTokenInfoFromZK" : 1,
    "containsKey" : 2,
    "error" : 1,
    "put" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.Path:getParentUtil()" : {
    "lastIndexOf" : 1,
    "getScheme" : 1,
    "length" : 2,
    "getPath" : 1,
    "getAuthority" : 1,
    "substring" : 1,
    "startPositionWithoutWindowsDrive" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPConnectionPool:connect(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)" : {
    "setPassword" : 1,
    "getProperty" : 1,
    "length" : 2,
    "isConnected" : 1,
    "openChannel" : 1,
    "addIdentity" : 1,
    "stringifyException" : 1,
    "put" : 2,
    "remove" : 1,
    "setConfig" : 1,
    "getFromPool" : 1,
    "getSession" : 2,
    "connect" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getAllStoragePolicies()" : {
    "addAll" : 1,
    "getAllStoragePolicies" : 1,
    "getChildFileSystems" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell:main(java.lang.String[])" : {
    "exit" : 1,
    "run" : 1
  },
  "org.apache.hadoop.fs.shell.Display$TextRecordInputStream:read()" : {
    "next" : 1,
    "read" : 2,
    "getCurrentValue" : 1,
    "getLength" : 1,
    "reset" : 2,
    "toString" : 2,
    "write" : 4,
    "getData" : 1,
    "getBytes" : 2
  },
  "org.apache.hadoop.fs.FSDataInputStream:read(org.apache.hadoop.io.ByteBufferPool,int,java.util.EnumSet)" : {
    "read" : 1,
    "fallbackRead" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.FileSystem$FileSystemDataOutputStreamBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.ipc.RPC:getRpcTimeout(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.fs.FileSystem:appendFile(org.apache.hadoop.fs.Path)" : {
    "createDataOutputStreamBuilder" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.PathNotFoundException:<init>(java.lang.String,java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.io.IOUtils:fsync(java.io.File)" : {
    "fsync" : 1,
    "toPath" : 1,
    "getAbsolutePath" : 1,
    "exists" : 1,
    "open" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation$ThreadSafeSampleStat:snapshotInto(org.apache.hadoop.metrics2.lib.MutableRate)" : {
    "add" : 1,
    "total" : 1,
    "round" : 1,
    "numSamples" : 2,
    "reset" : 1
  },
  "org.apache.hadoop.io.WritableUtils:cloneInto(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)" : {
    "cloneWritableInto" : 1
  },
  "org.apache.hadoop.ipc.RpcServerException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:decode(byte[][],int[],byte[][])" : {
    "adjustOrder" : 1,
    "decode" : 1
  },
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String,int,java.lang.String,boolean)" : {
    "createSocketAddr" : 1
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:processNonexistentPath(org.apache.hadoop.fs.shell.PathData)" : {
    "withFullyQualifiedPath" : 1,
    "parentExists" : 1,
    "toUri" : 1,
    "touch" : 1,
    "toString" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:read(byte[],int,int)" : {
    "init" : 1,
    "changeStateToProcessABlock" : 2,
    "skipToNextBlockMarker" : 1,
    "read0" : 1
  },
  "org.apache.hadoop.util.CrcUtil:compose(int,int,long,int)" : {
    "composeWithMonomial" : 1,
    "getMonomial" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getCurrentUser" : 1,
    "valueOf" : 1,
    "isEmpty" : 1,
    "error" : 1,
    "getAuthority" : 1,
    "doAs" : 1,
    "getType" : 1,
    "get" : 1,
    "equals" : 1,
    "now" : 1,
    "getPath" : 1,
    "toString" : 2,
    "getBoolean" : 1,
    "getUri" : 1,
    "createFileSystem" : 1
  },
  "org.apache.hadoop.fs.FsUrlStreamHandler:openConnection(java.net.URL)" : { },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:setDropBehind(java.lang.Boolean)" : {
    "setDropBehind" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.RSErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : { },
  "org.apache.hadoop.io.SequenceFile$Writer:hasCapability(java.lang.String)" : {
    "hasCapability" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : {
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.ipc.RPC:waitForProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : {
    "getProxy" : 1,
    "waitForProtocolProxy" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:load(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "load" : 1
  },
  "org.apache.hadoop.fs.DF:<init>(java.io.File,long)" : {
    "getCanonicalPath" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_aggregate(java.lang.Object)" : {
    "invoke" : 1,
    "checkIoStatisticsContextAvailable" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:cloneFileAttributes(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.util.Progressable)" : {
    "createWriter" : 1,
    "file" : 2,
    "getCompressionCodec" : 1,
    "getCompressionType" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1,
    "close" : 1
  },
  "org.apache.hadoop.net.NodeBase:toString()" : {
    "getPath" : 1
  },
  "org.apache.hadoop.fs.FSLinkResolver:qualifySymlinkTarget(java.net.URI,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "getScheme" : 1,
    "makeQualified" : 1,
    "toUri" : 1,
    "getAuthority" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:encode(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "encode" : 1,
    "toBuffers" : 2
  },
  "org.apache.hadoop.crypto.CryptoInputStream:read()" : {
    "read" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.FilterFileSystem:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "getXAttr" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setCounter(java.lang.String,long)" : {
    "counters" : 1,
    "put" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider$KeyMetadata:getAlgorithm()" : {
    "getCipher" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker:call(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.ipc.RpcWritable$Buffer,java.lang.String,org.apache.hadoop.ipc.RPC$Server$ProtoClassProtoImpl)" : {
    "init" : 1,
    "getClass" : 2,
    "set" : 3,
    "getDescriptorForType" : 1,
    "getRequestPrototype" : 1,
    "findMethodByName" : 1,
    "setDetailedMetricsName" : 3,
    "getCurCall" : 1,
    "getCause" : 2,
    "getValue" : 1,
    "warn" : 1,
    "callBlockingMethod" : 1,
    "get" : 2,
    "getSimpleName" : 2,
    "deferResponse" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:resetOutputBuffers(byte[][],int[],int)" : {
    "resetBuffer" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging$SourceToString:toString()" : {
    "ioStatisticsSourceToString" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:write(byte[],int,int)" : {
    "encrypt" : 1,
    "checkStream" : 1,
    "put" : 2,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:deprecatedGetFileStatus(org.apache.hadoop.fs.Path)" : {
    "pathToFile" : 2,
    "exists" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:buildTokenService(java.net.InetSocketAddress)" : {
    "isUnresolved" : 1,
    "getPort" : 1,
    "getHostName" : 2,
    "toLowerCase" : 1,
    "getAddress" : 1,
    "getHostAddress" : 1
  },
  "org.apache.hadoop.net.DNS:getDefaultHost(java.lang.String)" : {
    "getDefaultHost" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:transitionToStandby(org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : {
    "setReqInfo" : 1,
    "build" : 1,
    "transitionToStandby" : 1,
    "convert" : 1,
    "ipc" : 1,
    "newBuilder" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:<init>(short)" : {
    "fromShort" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FSDataOutputStream,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.io.SequenceFile$Metadata)" : {
    "metadata" : 1,
    "createWriter" : 1,
    "stream" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec:createInputStream(java.io.InputStream)" : {
    "createInputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.ipc.ResponseBuffer:ensureCapacity(int)" : {
    "setCapacity" : 1,
    "capacity" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:interAddNodeWithEmptyRack(org.apache.hadoop.net.Node)" : {
    "add" : 1,
    "contains" : 1,
    "getNetworkLocation" : 1,
    "countEmptyRacks" : 1,
    "getName" : 2,
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:toSnapshot(boolean)" : {
    "formatSize" : 4,
    "format" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler:initAsyncCall(org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall,org.apache.hadoop.io.retry.AsyncCallHandler$AsyncValue)" : {
    "set" : 1,
    "getReturnValue" : 1,
    "isDone" : 1,
    "addCall" : 1,
    "waitAsyncValue" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:loadConfigurationClasses()" : {
    "debug" : 1,
    "getConfigurationsToCreate" : 1,
    "loadClass" : 1,
    "newInstance" : 1,
    "getClassLoader" : 1,
    "getConstructor" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.authorize.AuthorizationException:<init>()" : { },
  "org.apache.hadoop.security.http.CrossOriginFilter:doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" : {
    "doFilter" : 1,
    "doCrossFilter" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:truncate(org.apache.hadoop.fs.Path,long)" : {
    "truncate" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.local.RawLocalFs:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.util.GenericOptionsParser:validateFiles(java.lang.String,boolean)" : {
    "add" : 2,
    "getWorkingDirectory" : 2,
    "getScheme" : 1,
    "toURI" : 1,
    "length" : 1,
    "isEmpty" : 2,
    "getFileSystem" : 1,
    "matchesCurrentDirectory" : 1,
    "substring" : 1,
    "expandWildcard" : 2,
    "split" : 1,
    "getLocal" : 1,
    "makeQualified" : 2,
    "getFileStatus" : 2,
    "endsWith" : 1,
    "toString" : 2,
    "join" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.fs.FileSystem$Cache:getInternal(java.net.URI,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem$Cache$Key)" : {
    "add" : 1,
    "incrementAndGet" : 1,
    "debug" : 2,
    "release" : 1,
    "isEmpty" : 1,
    "addShutdownHook" : 1,
    "cleanupWithLogger" : 1,
    "put" : 1,
    "isShutdownInProgress" : 1,
    "getTimeDuration" : 1,
    "get" : 5,
    "getBoolean" : 1,
    "acquireUninterruptibly" : 1,
    "createFileSystem" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeDirLink:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.fs.viewfs.InodeTree$INodeLink)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "fullPath" : 2,
    "renameInternal" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:reencryptEncryptedKeys(java.util.List)" : {
    "add" : 1,
    "getEncryptedKeyVersion" : 3,
    "getEncryptionKeyName" : 3,
    "set" : 1,
    "isEmpty" : 1,
    "createConnection" : 1,
    "checkArgument" : 3,
    "getVersionName" : 2,
    "call" : 1,
    "toJSON" : 1,
    "checkNotNull" : 5,
    "size" : 3,
    "setRequestProperty" : 1,
    "get" : 1,
    "equals" : 2,
    "getEncryptedKeyIv" : 1,
    "createURL" : 1,
    "getEncryptionKeyVersionName" : 1,
    "parseJSONEncKeyVersion" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:isLoginKeytabBased()" : {
    "getLoginUser" : 1,
    "isFromKeytab" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt)" : {
    "contains" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekTo(byte[])" : {
    "seekTo" : 1
  },
  "org.apache.hadoop.fs.shell.Mkdir:processNonexistentPath(org.apache.hadoop.fs.shell.PathData)" : {
    "getParent" : 1,
    "mkdirs" : 1,
    "format" : 1,
    "exists" : 1,
    "toString" : 4
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:<init>(java.io.InputStream,long,long,org.apache.hadoop.io.compress.SplittableCompressionCodec$READ_MODE)" : {
    "read" : 1,
    "getPos" : 1,
    "updatePos" : 1,
    "skip" : 1,
    "readStreamHeader" : 1,
    "updateReportedByteCount" : 3
  },
  "org.apache.hadoop.fs.Path:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.util.ShutdownHookManager:executeShutdown()" : {
    "cancel" : 1,
    "getClass" : 2,
    "warn" : 2,
    "submit" : 1,
    "getShutdownHooksInOrder" : 1,
    "getTimeout" : 1,
    "get" : 1,
    "getHook" : 3,
    "toString" : 2,
    "getSimpleName" : 2,
    "getTimeUnit" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$SingleChunkEncoder:<init>(java.io.DataOutputStream,int)" : {
    "writeVInt" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency:<init>()" : { },
  "org.apache.hadoop.metrics2.lib.MetricsAnnotations:makeSource(java.lang.Object)" : {
    "getAnnotatedMetricsFactory" : 1,
    "build" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$HadoopLoginContext:logout()" : {
    "logout" : 1,
    "compareAndSet" : 1,
    "getSubjectLock" : 1
  },
  "org.apache.hadoop.io.WritableUtils:readVLong(java.io.DataInput)" : {
    "decodeVIntSize" : 1,
    "isNegativeVInt" : 1,
    "readByte" : 2
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:configure(java.lang.String)" : {
    "configureSources" : 1,
    "configureSystem" : 1,
    "configureSinks" : 1,
    "create" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : {
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:getFallbackFileSystem()" : {
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 2,
    "error" : 1,
    "getMyFs" : 1
  },
  "org.apache.hadoop.fs.DF:toString()" : {
    "getUsed" : 1,
    "getPercentUsed" : 1,
    "getAvailable" : 1,
    "getCapacity" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$Pmem:memSync(org.apache.hadoop.io.nativeio.NativeIO$POSIX$PmemMappedRegion)" : {
    "isPmem" : 1,
    "getLength" : 1,
    "pmemDrain" : 1,
    "getAddress" : 1,
    "pmemSync" : 1
  },
  "org.apache.hadoop.fs.LocatedFileStatus:compareTo(org.apache.hadoop.fs.FileStatus)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine:getServer(java.lang.Class,java.lang.Object,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : { },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:<init>(java.lang.Class,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getConnectionId" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:fromBytes(byte[])" : {
    "fromJson" : 1
  },
  "org.apache.hadoop.fs.FileContext$FCDataOutputStreamBuilder:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:createDataFileReader(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : {
    "file" : 1,
    "prependOptions" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:gracefulFailoverToYou()" : {
    "doAs" : 1,
    "doGracefulFailover" : 1,
    "getLoginUser" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:switchBindUser(javax.naming.AuthenticationException)" : {
    "next" : 1,
    "equals" : 1,
    "getMessage" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileSystem:append(org.apache.hadoop.fs.Path,boolean)" : {
    "getInt" : 1,
    "getConf" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getBlockSize()" : {
    "getBlockSize" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping:<init>()" : { },
  "org.apache.hadoop.fs.FileContext:createSnapshot(org.apache.hadoop.fs.Path)" : {
    "createSnapshot" : 1
  },
  "org.apache.hadoop.crypto.JceAesCtrCryptoCodec:createDecryptor()" : {
    "getCipherSuite" : 1,
    "getProvider" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:switchToSimple()" : {
    "disposeSasl" : 1
  },
  "org.apache.hadoop.ipc.Server$FatalRpcServerException:<init>(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcErrorCodeProto,java.lang.String)" : { },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_create()" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:reset()" : {
    "init" : 1,
    "rewind" : 1,
    "limit" : 1,
    "checkStream" : 1,
    "position" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getDefaultBlockSize()" : {
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:<init>(org.apache.hadoop.conf.Configuration,boolean)" : {
    "getLong" : 1,
    "updateStaticMapping" : 1,
    "get" : 1,
    "updateMaps" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:startUpload()" : {
    "debug" : 1,
    "enterState" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextIntegration:getCurrentIOStatisticsContext()" : {
    "getInstance" : 1,
    "getForCurrentThread" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStream:getPos()" : {
    "getPos" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RetryUpToMaximumCountWithFixedSleep:<init>(int,long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.security.ssl.SSLFactory:readSSLConfiguration(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.ssl.SSLFactory$Mode)" : {
    "getResource" : 1,
    "debug" : 1,
    "addResource" : 1,
    "get" : 2,
    "getBoolean" : 1,
    "setBoolean" : 1
  },
  "org.apache.hadoop.fs.FileContext:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:posixFadviseIfPossible(java.lang.String,java.io.FileDescriptor,long,long,int)" : {
    "posixFadviseIfPossible" : 1
  },
  "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec:createDecryptor()" : {
    "getCipherSuite" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:remove(org.apache.hadoop.net.Node)" : {
    "getNetworkLocation" : 1,
    "debug" : 1,
    "unlock" : 1,
    "writeLock" : 2,
    "interRemoveNodeWithEmptyRack" : 1,
    "getPath" : 2,
    "lock" : 1,
    "getNode" : 1,
    "remove" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:<init>(java.lang.String)" : {
    "instance" : 1,
    "register" : 2
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:setAclsWithRetries(java.lang.String)" : {
    "containsAll" : 2,
    "zkDoWithRetries" : 1,
    "setACL" : 1,
    "getAversion" : 1,
    "getACL" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:flush()" : {
    "hflush" : 1,
    "throwMetricsException" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:selectiveClearing(org.apache.hadoop.util.bloom.Key,short)" : {
    "randomRemove" : 1,
    "ratioRemove" : 1,
    "maximumFpRemove" : 1,
    "membershipTest" : 1,
    "clearBit" : 1,
    "minimumFnRemove" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getHomeDirectory()" : {
    "getHomeDirectory" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Retryer:<init>(int,int,int)" : {
    "checkPositiveInteger" : 2,
    "checkGreater" : 1
  },
  "org.apache.hadoop.util.StringUtils$TraditionalBinaryPrefix:long2String(long,java.lang.String,int)" : {
    "values" : 4,
    "isEmpty" : 1,
    "format" : 2,
    "toString" : 2,
    "append" : 9,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.shell.Concat:processArguments(java.util.LinkedList)" : {
    "getScheme" : 1,
    "isFile" : 2,
    "size" : 4,
    "get" : 1,
    "removeFirst" : 1,
    "format" : 2,
    "concat" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:write(int)" : {
    "internalReset" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getHomeDirectory()" : {
    "getShortUserName" : 2,
    "makeQualified" : 2,
    "equals" : 1,
    "getHomeDirPrefixValue" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:reinit(org.apache.hadoop.conf.Configuration)" : {
    "debug" : 1,
    "reset" : 1,
    "getCompressionLevel" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSupport:snapshotIOStatistics()" : { },
  "org.apache.hadoop.util.HostsFileReader:getHosts()" : {
    "get" : 1,
    "getIncludedHosts" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsMapping:getGroupsSet(java.lang.String)" : {
    "addAll" : 1,
    "getGroupsInternal" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:valueClass(java.lang.Class)" : { },
  "org.apache.hadoop.ha.ActiveStandbyElector:processWatchEvent(org.apache.zookeeper.ZooKeeper,org.apache.zookeeper.WatchedEvent)" : {
    "reJoinElection" : 1,
    "getState" : 3,
    "debug" : 2,
    "getType" : 1,
    "fatalError" : 2,
    "monitorActiveStatus" : 3,
    "enterNeutralMode" : 3,
    "getPath" : 2,
    "isStaleClient" : 1,
    "joinElectionInternal" : 1,
    "isDebugEnabled" : 2,
    "info" : 4
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:generateDelegationToken(org.apache.hadoop.security.token.Token)" : {
    "setDelegationToken" : 1,
    "getPassword" : 1,
    "getIdentifier" : 1,
    "getKind" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.util.Shell:getSignalKillCommand(int,java.lang.String)" : {
    "getWinUtilsPath" : 2,
    "bashQuote" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.DumpUtil:dumpChunk(org.apache.hadoop.io.erasurecode.ECChunk)" : {
    "bytesToHex" : 1,
    "println" : 1,
    "toBytesArray" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : {
    "renameInternal" : 1
  },
  "org.apache.hadoop.fs.Globber:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "getTracer" : 1
  },
  "org.apache.hadoop.security.token.Token$PrivateToken:hashCode()" : {
    "hashCode" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:getBlockLocations()" : {
    "getBlockLocations" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:getDefaultImpersonationProvider()" : {
    "getSip" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$WrappingRemoteIterator:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:close()" : {
    "returnCompressor" : 1,
    "flush" : 1,
    "close" : 4
  },
  "org.apache.hadoop.io.SequenceFile$RecordCompressWriter:append(java.lang.Object,java.lang.Object)" : {
    "writeInt" : 2,
    "checkAndWriteSync" : 1,
    "serialize" : 2,
    "getClass" : 4,
    "getName" : 2,
    "flush" : 1,
    "resetState" : 1,
    "getLength" : 3,
    "reset" : 1,
    "finish" : 1,
    "write" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.fs.FileContext:listXAttrs(org.apache.hadoop.fs.Path)" : {
    "listXAttrs" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:permission(org.apache.hadoop.fs.permission.FsPermission)" : {
    "checkNotNull" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl:createParentNode(java.lang.String)" : {
    "getLevel" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.util.DataChecksum:getChecksumSize(int)" : {
    "getBytesPerChecksum" : 1,
    "getChecksumSize" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:poll(long,java.util.concurrent.TimeUnit)" : {
    "removeNextElement" : 1,
    "tryAcquire" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getServerDefaults()" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:isNodeInScope(org.apache.hadoop.net.Node,java.lang.String)" : {
    "getPath" : 1,
    "endsWith" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getReplication()" : {
    "getReplication" : 1
  },
  "org.apache.hadoop.fs.FileContext:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "setXAttr" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:doDecodeSingle(java.nio.ByteBuffer[][],java.nio.ByteBuffer[][],int,int,boolean)" : {
    "allocateByteBuffer" : 1,
    "array" : 3,
    "arrayOffset" : 2,
    "getNumDataUnits" : 1,
    "doDecodeByPiggyBack" : 2,
    "position" : 4,
    "getNumParityUnits" : 1,
    "decode" : 1,
    "getPiggyBackForDecode" : 1,
    "getSubPacketSize" : 8
  },
  "org.apache.hadoop.io.WritableUtils:writeCompressedByteArray(java.io.DataOutput,byte[])" : {
    "writeInt" : 2,
    "toByteArray" : 1,
    "closeStream" : 1,
    "close" : 1,
    "write" : 2
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:updateDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "getKeyId" : 1,
    "put" : 1
  },
  "org.apache.hadoop.jmx.JMXJsonServlet:writeAttribute(com.fasterxml.jackson.core.JsonGenerator,javax.management.ObjectName,javax.management.MBeanAttributeInfo)" : {
    "getAttribute" : 1,
    "debug" : 1,
    "getName" : 1,
    "equals" : 1,
    "error" : 5,
    "getCause" : 1,
    "indexOf" : 3,
    "isReadable" : 1,
    "writeAttribute" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:canonicalizeUri(java.net.URI)" : {
    "canonicalizeUri" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:hiddenImpl(java.lang.String,java.lang.String,java.lang.Class[])" : {
    "debug" : 1,
    "forName" : 1,
    "hiddenImpl" : 1
  },
  "org.apache.hadoop.ha.HAServiceProtocolHelper:transitionToActive(org.apache.hadoop.ha.HAServiceProtocol,org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : {
    "transitionToActive" : 1,
    "unwrapRemoteException" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicLongMaximum(java.lang.String,java.util.concurrent.atomic.AtomicLong)" : {
    "withLongFunctionMaximum" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.audit.CommonAuditContext:noteEntryPoint(java.lang.Object)" : {
    "lastIndexOf" : 1,
    "getClass" : 1,
    "setGlobalContextEntry" : 1,
    "containsKey" : 1,
    "length" : 1,
    "toString" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.fs.permission.FsCreateModes:equals(java.lang.Object)" : {
    "getClass" : 2,
    "getUnmasked" : 2,
    "equals" : 2
  },
  "org.apache.hadoop.ipc.internal.ShadedProtobufHelper:getFixedByteString(org.apache.hadoop.io.Text)" : {
    "copyFromUtf8" : 1,
    "get" : 1,
    "toString" : 1,
    "copyBytes" : 1,
    "put" : 1
  },
  "org.apache.hadoop.net.DomainNameResolverFactory:newInstance(org.apache.hadoop.conf.Configuration,java.net.URI,java.lang.String)" : {
    "newInstance" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.conf.ConfigRedactor:redactXml(java.lang.String,java.lang.String)" : {
    "configIsSensitive" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:removeStoredMasterKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "warn" : 1,
    "getKeyId" : 1,
    "deleteDelegationKey" : 1
  },
  "org.apache.hadoop.fs.shell.Mkdir:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:loadConf()" : { },
  "org.apache.hadoop.security.token.Token:write(java.io.DataOutput)" : {
    "writeVInt" : 2,
    "write" : 4
  },
  "org.apache.hadoop.security.UserGroupInformation:isSecurityEnabled()" : {
    "isAuthenticationMethodEnabled" : 1
  },
  "org.apache.hadoop.service.launcher.InterruptEscalator:interrupted(org.apache.hadoop.service.launcher.IrqHandler$InterruptData)" : {
    "setName" : 1,
    "setDaemon" : 1,
    "halt" : 1,
    "warn" : 3,
    "compareAndSet" : 1,
    "getServiceWasShutdown" : 1,
    "start" : 1,
    "toString" : 1,
    "terminate" : 1,
    "join" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:getGidAllowingUnknown(java.lang.String)" : {
    "getGid" : 1,
    "hashCode" : 1,
    "checkAndUpdateMaps" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:suffix(java.lang.String)" : { },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:<init>(int,float,long,int,org.apache.hadoop.crypto.key.kms.ValueQueue$SyncGenerationPolicy,org.apache.hadoop.crypto.key.kms.ValueQueue$QueueRefiller)" : {
    "add" : 1,
    "setDaemon" : 1,
    "checkNotNull" : 1,
    "build" : 2,
    "setNameFormat" : 1,
    "fillQueueForKey" : 1,
    "checkArgument" : 5,
    "expireAfterAccess" : 1,
    "newBuilder" : 1
  },
  "org.apache.hadoop.fs.FileSystem:moveFromLocalFile(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : {
    "copyFromLocalFile" : 1
  },
  "org.apache.hadoop.io.serializer.SerializationFactory:<init>(org.apache.hadoop.conf.Configuration)" : {
    "add" : 1,
    "getName" : 3,
    "getTrimmedStrings" : 1
  },
  "org.apache.hadoop.fs.FilterFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "setAcl" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:<init>(java.lang.String,java.lang.String,org.apache.hadoop.fs.statistics.IOStatistics)" : { },
  "org.apache.hadoop.ipc.RpcClientUtil:getVersionSignatureMap(java.net.InetSocketAddress,java.lang.String,java.lang.String)" : {
    "get" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getAclStatus" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock$SuppressedStats:snapshot()" : { },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newStat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" : {
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getLinkTarget" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricCounterLong:<init>(org.apache.hadoop.metrics2.MetricsInfo,long)" : { },
  "org.apache.hadoop.tools.protocolPB.GetUserMappingsProtocolClientSideTranslatorPB:getGroupsForUser(java.lang.String)" : {
    "getGroupsList" : 1,
    "build" : 1,
    "toArray" : 1,
    "getGroupsCount" : 1,
    "getGroupsForUser" : 1,
    "setUser" : 1,
    "ipc" : 1,
    "newBuilder" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:newForMethod(java.lang.Object,java.lang.reflect.Method,org.apache.hadoop.metrics2.annotation.Metric,org.apache.hadoop.metrics2.lib.MetricsRegistry)" : {
    "add" : 1,
    "debug" : 1,
    "getInfo" : 1,
    "newForMethod" : 1,
    "name" : 1,
    "isDebugEnabled" : 1,
    "type" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:innerClose()" : {
    "debug" : 3,
    "getState" : 1,
    "getIndex" : 2,
    "closeBlock" : 2,
    "exists" : 1
  },
  "org.apache.hadoop.fs.shell.Ls:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.net.TableMapping$RawTableMapping:reloadCachedMappings(java.util.List)" : {
    "reloadCachedMappings" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.PairedDurationTrackerFactory:trackDuration(java.lang.String,long)" : {
    "trackDuration" : 2
  },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension:createKeyProviderCryptoExtension(org.apache.hadoop.crypto.key.KeyProvider)" : {
    "getKeyProvider" : 2
  },
  "org.apache.hadoop.fs.FilterFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "satisfyStoragePolicy" : 1
  },
  "org.apache.hadoop.service.AbstractService:isInState(org.apache.hadoop.service.Service$STATE)" : {
    "isInState" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:updatePos(boolean)" : {
    "getProcessedByteCount" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:ctorImpl(java.lang.String,java.lang.Class[])" : {
    "impl" : 1,
    "debug" : 1,
    "buildChecked" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:onTimerEvent()" : {
    "size" : 1,
    "publishMetrics" : 1,
    "sampleMetrics" : 1
  },
  "org.apache.hadoop.io.ReadaheadPool:readaheadStream(java.lang.String,java.io.FileDescriptor,long,long,long,org.apache.hadoop.io.ReadaheadPool$ReadaheadRequest)" : {
    "cancel" : 1,
    "min" : 1,
    "getOffset" : 1,
    "checkArgument" : 1,
    "submitReadahead" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "readOnlyMountTable" : 1,
    "resolve" : 1,
    "getUriPath" : 1,
    "create" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState:checkBuffers(java.nio.ByteBuffer[])" : {
    "isDirect" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.conf.Configuration:size()" : {
    "size" : 1,
    "getProps" : 1
  },
  "org.apache.hadoop.util.StopWatch:toString()" : {
    "valueOf" : 1,
    "now" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:add(java.lang.String,long)" : {
    "add" : 2,
    "set" : 1,
    "get" : 2,
    "put" : 1
  },
  "org.apache.hadoop.fs.FileRange:createFileRange(long,int,java.lang.Object)" : { },
  "org.apache.hadoop.fs.crypto.CryptoFSDataOutputStream:<init>(org.apache.hadoop.fs.FSDataOutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[])" : { },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:checkKey()" : {
    "getRemain" : 1,
    "isLastChunk" : 1,
    "atEnd" : 1,
    "readVInt" : 1,
    "readFully" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:isFile()" : {
    "isFile" : 1
  },
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:getCacheUpdated()" : {
    "value" : 1
  },
  "org.apache.hadoop.crypto.CryptoStreamUtils:checkBufferSize(org.apache.hadoop.crypto.CryptoCodec,int)" : {
    "getCipherSuite" : 1,
    "getAlgorithmBlockSize" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getClass" : 4,
    "registerProtocolAndImpl" : 2,
    "setAlignmentContext" : 1,
    "serverNameFromClass" : 1,
    "equals" : 1,
    "getProtocolInterfaces" : 2,
    "isAssignableFrom" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:setWorkFactor(org.apache.hadoop.conf.Configuration,int)" : {
    "setInt" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:createCollectorPath(org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "getName" : 1,
    "split" : 1,
    "randomUUID" : 1,
    "toString" : 1,
    "mergePaths" : 3
  },
  "org.apache.hadoop.conf.Configuration:getStreamReader(org.apache.hadoop.conf.Configuration$Resource,boolean)" : {
    "getResource" : 2,
    "debug" : 1,
    "toPath" : 1,
    "newInputStream" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "exists" : 1,
    "toString" : 1,
    "getAbsoluteFile" : 1,
    "parse" : 4,
    "isParserRestricted" : 1
  },
  "org.apache.hadoop.fs.Path:<init>(java.lang.String,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.ha.ZKFailoverController:startRPC()" : {
    "start" : 1
  },
  "org.apache.hadoop.fs.CompositeCrcFileChecksum:getBytes()" : {
    "intToBytes" : 1
  },
  "org.apache.hadoop.io.ObjectWritable:readObject(java.io.DataInput,org.apache.hadoop.io.ObjectWritable,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "set" : 1,
    "tryInstantiateProtobuf" : 1,
    "valueOf" : 9,
    "readString" : 4,
    "isEnum" : 1,
    "newInstance" : 2,
    "isAssignableFrom" : 1,
    "readChar" : 1,
    "readObject" : 1,
    "readFields" : 2,
    "readLong" : 1,
    "readShort" : 1,
    "readDouble" : 1,
    "getComponentType" : 1,
    "loadClass" : 2,
    "get" : 2,
    "readFloat" : 1,
    "readBoolean" : 1,
    "isArray" : 1,
    "readByte" : 1,
    "readInt" : 2,
    "isPrimitive" : 1
  },
  "org.apache.hadoop.fs.FileContext:<init>(org.apache.hadoop.fs.AbstractFileSystem,org.apache.hadoop.conf.Configuration)" : {
    "getCurrentUser" : 1,
    "getHomeDirectory" : 1,
    "get" : 1,
    "getBoolean" : 1,
    "getInitialWorkingDirectory" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:visitAll(org.apache.hadoop.fs.FileSystem$Statistics$StatisticsAggregator)" : {
    "getData" : 1,
    "aggregate" : 1,
    "accept" : 2
  },
  "org.apache.hadoop.util.CrcComposer:newCrcComposer(org.apache.hadoop.util.DataChecksum$Type,long)" : {
    "newStripedCrcComposer" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:requestCaching(int)" : {
    "add" : 1,
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:getRemoteDestination(java.util.LinkedList)" : {
    "getConf" : 2,
    "size" : 1,
    "removeLast" : 1,
    "expandAsGlob" : 1
  },
  "org.apache.hadoop.fs.PathIOException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addMinimumFunction(java.lang.String,java.util.function.Function)" : {
    "addFunction" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:toString(boolean,boolean)" : {
    "toString" : 1
  },
  "org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool:select(java.nio.channels.SelectableChannel,int,long)" : {
    "cancel" : 1,
    "currentThread" : 1,
    "selectNow" : 1,
    "select" : 1,
    "isInterrupted" : 1,
    "max" : 1,
    "release" : 1,
    "now" : 2,
    "get" : 1,
    "close" : 1,
    "register" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:write(int)" : {
    "flushBuffer" : 1
  },
  "org.apache.hadoop.io.Text:<init>(java.lang.String)" : {
    "set" : 1
  },
  "org.apache.hadoop.net.StandardSocketFactory:createSocket(java.lang.String,int)" : {
    "createSocket" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.io.MapFile:rename(org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.String)" : {
    "rename" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:confChanged(org.apache.hadoop.conf.Configuration)" : {
    "add" : 2,
    "set" : 2,
    "toUri" : 1,
    "getMessage" : 1,
    "nextInt" : 1,
    "warn" : 3,
    "checkStatus" : 1,
    "size" : 4,
    "getLocal" : 1,
    "makeQualified" : 1,
    "mkdirs" : 1,
    "equals" : 1,
    "get" : 2,
    "toArray" : 2,
    "getPath" : 1,
    "getTrimmedStrings" : 1,
    "isAbsolute" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.io.VLongWritable:<init>(long)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlockFactory:create(long,int,org.apache.hadoop.fs.store.BlockUploadStatistics)" : {
    "getConf" : 1,
    "format" : 1,
    "createTmpFileForWrite" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addMinimumSample(java.lang.String,long)" : {
    "get" : 1,
    "maybeUpdateMinimum" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:getFileLength()" : {
    "getLen" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "setStoragePolicy" : 1
  },
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:initFileSystem(java.net.URI)" : {
    "trace" : 2,
    "debug" : 3,
    "canRead" : 1,
    "initFileSystem" : 1,
    "length" : 1,
    "getPath" : 1,
    "isTraceEnabled" : 1,
    "exists" : 1,
    "canWrite" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.fs.FsShell:newShellInstance()" : { },
  "org.apache.hadoop.io.BytesWritable:setSize(int)" : {
    "min" : 1,
    "setCapacity" : 1,
    "getCapacity" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : {
    "getXAttrs" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createKey(java.lang.String,org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "createKeyInternal" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextIntegration:setThreadIOStatisticsContext(org.apache.hadoop.fs.statistics.IOStatisticsContext)" : {
    "removeForCurrentThread" : 1,
    "setForCurrentThread" : 1
  },
  "org.apache.hadoop.util.LightWeightResizableGSet:<init>()" : { },
  "org.apache.hadoop.security.alias.LocalBouncyCastleFipsKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.ipc.RPC$Builder:build()" : {
    "getServer" : 1,
    "getProtocolEngine" : 1
  },
  "org.apache.hadoop.tools.TableListing$Builder:addField(java.lang.String,org.apache.hadoop.tools.TableListing$Justification)" : {
    "addField" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:hashCode()" : {
    "hashCode" : 1,
    "name" : 1,
    "description" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.ipc.Server$Listener:doRead(java.nio.channels.SelectionKey)" : {
    "currentThread" : 2,
    "getName" : 2,
    "attachment" : 1,
    "shouldClose" : 1,
    "now" : 2,
    "setLastContact" : 2,
    "readAndProcess" : 1,
    "closeConnection" : 1,
    "info" : 2
  },
  "org.apache.hadoop.net.NetworkTopology:getDatanodesInRack(java.lang.String)" : {
    "getChildren" : 1,
    "getLoc" : 1,
    "unlock" : 1,
    "equals" : 1,
    "normalize" : 1,
    "readLock" : 2,
    "lock" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:hasKerberosCredentials()" : {
    "getAuthenticationMethod" : 1
  },
  "org.apache.hadoop.tools.CommandShell:run(java.lang.String[])" : {
    "init" : 1,
    "printShellUsage" : 3,
    "printException" : 1,
    "execute" : 1,
    "validate" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "pathToFile" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Metadata:toString()" : {
    "next" : 1,
    "getKey" : 1,
    "getValue" : 1,
    "iterator" : 1,
    "size" : 1,
    "entrySet" : 1,
    "hasNext" : 1,
    "toString" : 3,
    "append" : 8
  },
  "org.apache.hadoop.util.SysInfoLinux:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)" : { },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:isLastBlock()" : {
    "blockNumber" : 1,
    "isLastBlock" : 1
  },
  "org.apache.hadoop.service.AbstractService:start()" : {
    "serviceStart" : 1,
    "noteFailure" : 1,
    "getName" : 1,
    "debug" : 1,
    "stopQuietly" : 1,
    "enterState" : 1,
    "notifyListeners" : 1,
    "currentTimeMillis" : 1,
    "convert" : 1,
    "isInState" : 2
  },
  "org.apache.hadoop.security.KDiag:execute()" : {
    "validateHadoopTokenFiles" : 1,
    "dumpUGI" : 1,
    "printConfOpt" : 1,
    "validateKrb5File" : 1,
    "printSysprop" : 2,
    "title" : 6,
    "isLoginTicketBased" : 1,
    "validateJAAS" : 1,
    "println" : 9,
    "get" : 1,
    "isLoginKeytabBased" : 1,
    "getAndSet" : 2,
    "setConfiguration" : 1,
    "validateUGI" : 1,
    "endln" : 3,
    "printDefaultRealm" : 1,
    "validateKinitExecutable" : 1,
    "getConf" : 1,
    "getCanonicalHostName" : 1,
    "getProperties" : 1,
    "stringPropertyNames" : 1,
    "sort" : 1,
    "validateSasl" : 2,
    "getLoginUser" : 1,
    "failif" : 2,
    "validateNTPConf" : 1,
    "getLocalHost" : 1,
    "validateShortName" : 1,
    "warn" : 2,
    "validateKeyLength" : 1,
    "isSimpleAuthentication" : 2,
    "setProperty" : 2,
    "currentTimeMillis" : 1,
    "loginFromKeytab" : 1,
    "toString" : 2,
    "printEnv" : 1,
    "dumpKeytab" : 1,
    "getKrb5LoginModuleName" : 1
  },
  "org.apache.hadoop.security.SaslRpcServer$AuthMethod:read(java.io.DataInput)" : {
    "valueOf" : 1,
    "readByte" : 1
  },
  "org.apache.hadoop.util.StringUtils:unEscapeString(java.lang.String,char,char[])" : {
    "hasChar" : 2,
    "length" : 2,
    "toString" : 1,
    "append" : 2,
    "charAt" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:close()" : {
    "flush" : 1,
    "closeStream" : 1,
    "create" : 1,
    "write" : 1,
    "close" : 2
  },
  "org.apache.hadoop.crypto.key.KeyProviderExtension:createKey(java.lang.String,org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "createKey" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:run()" : {
    "receiveRpcResponse" : 1,
    "warn" : 1,
    "getName" : 2,
    "debug" : 2,
    "size" : 2,
    "markClosed" : 1,
    "start" : 1,
    "isDebugEnabled" : 2,
    "close" : 1,
    "waitForWork" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher:sendCallbackAndRemove(java.lang.String,java.util.TreeMap,org.apache.hadoop.net.unix.DomainSocketWatcher$FdSet,int)" : {
    "sendCallback" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.ContentSummary$Builder:typeConsumed(long[])" : {
    "typeConsumed" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec:createDirectDecompressor()" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.fs.permission.AclEntry:toString()" : {
    "toStringStable" : 1
  },
  "org.apache.hadoop.util.functional.TaskPool:foreach(java.lang.Object[])" : {
    "requireNonNull" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:configureSystem()" : {
    "add" : 1,
    "getHostname" : 1,
    "tag" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setGauge(java.lang.String,long)" : {
    "gauges" : 1,
    "put" : 1
  },
  "org.apache.hadoop.ipc.Server:setupResponseForProtobuf(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto,org.apache.hadoop.io.Writable)" : {
    "writeTo" : 2,
    "writeRawByte" : 4,
    "getSerializedSize" : 2,
    "getMessage" : 1,
    "newInstance" : 1,
    "writeUInt32NoTag" : 2,
    "getDelimitedLength" : 2
  },
  "org.apache.hadoop.io.compress.BlockCompressorStream:finish()" : {
    "compress" : 1,
    "finish" : 1,
    "finished" : 2,
    "getBytesRead" : 1,
    "rawWriteInt" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:getChecksumFile(org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "getName" : 1
  },
  "org.apache.hadoop.util.HttpExceptionUtils:createServletExceptionResponse(javax.servlet.http.HttpServletResponse,int,java.lang.Throwable)" : {
    "getClass" : 2,
    "getName" : 1,
    "flush" : 1,
    "getWriter" : 1,
    "singletonMap" : 1,
    "getOneLineMessage" : 1,
    "getSimpleName" : 1,
    "writer" : 1,
    "setContentType" : 1,
    "writeValue" : 1,
    "put" : 3,
    "setStatus" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getFileStatus(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.ChannelSftp$LsEntry,org.apache.hadoop.fs.Path)" : {
    "getMTime" : 1,
    "isLink" : 1,
    "getWorkingDirectory" : 1,
    "getGId" : 1,
    "getATime" : 1,
    "realpath" : 1,
    "getPermissions" : 1,
    "toUri" : 1,
    "getAttrs" : 1,
    "getUId" : 1,
    "getSize" : 1,
    "getFilename" : 2,
    "makeQualified" : 1,
    "getLen" : 1,
    "getFileStatus" : 1,
    "getPath" : 1,
    "toString" : 2,
    "getUri" : 1,
    "isDirectory" : 1,
    "isDir" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:createMultipartUploader(org.apache.hadoop.fs.Path)" : {
    "methodNotSupported" : 1
  },
  "org.apache.hadoop.ha.HealthMonitor$MonitorDaemon:run()" : {
    "doHealthChecks" : 1,
    "checkState" : 1,
    "loopUntilConnected" : 1
  },
  "org.apache.hadoop.fs.Globber:authorityFromPath(org.apache.hadoop.fs.Path)" : {
    "fixRelativePart" : 1,
    "toUri" : 1,
    "getFSofPath" : 1,
    "getAuthority" : 3,
    "getUri" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:lowerBound(byte[],int,int)" : {
    "seekTo" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getRecordNumByLocation(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : {
    "checkTFileDataIndex" : 1,
    "getRecordNumByLocation" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "merge" : 1,
    "getSegmentList" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "checkPath" : 1,
    "setReplication" : 1
  },
  "org.apache.hadoop.util.bloom.Key:compareTo(org.apache.hadoop.util.bloom.Key)" : {
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:available()" : {
    "checkOpenState" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.security.token.delegation.DelegationKey:<init>()" : { },
  "org.apache.hadoop.io.WritableUtils:writeCompressedStringArray(java.io.DataOutput,java.lang.String[])" : {
    "writeInt" : 2,
    "writeCompressedString" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "fullPath" : 1,
    "access" : 1
  },
  "org.apache.hadoop.fs.statistics.BufferedIOStatisticsOutputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicIntegerMaximum(java.lang.String,java.util.concurrent.atomic.AtomicInteger)" : {
    "withLongFunctionMaximum" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:processThrowable(org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode,java.lang.String,java.lang.Throwable,java.util.List,org.apache.hadoop.fs.Path[])" : {
    "add" : 1,
    "initCause" : 1,
    "toString" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.security.SecurityUtil$TruststoreKeystore:<init>(org.apache.hadoop.conf.Configuration)" : {
    "get" : 4
  },
  "org.apache.hadoop.security.SecurityUtil$QualifiedHostResolver:getByExactName(java.lang.String)" : {
    "endsWith" : 1,
    "getByAddress" : 1,
    "getAddress" : 1,
    "getInetAddressByName" : 1
  },
  "org.apache.hadoop.util.functional.LazyAutoCloseableReference:eval()" : {
    "eval" : 1,
    "get" : 1,
    "checkState" : 1
  },
  "org.apache.hadoop.fs.FsServerDefaults:<init>(long,int,int,short,int,boolean,long,org.apache.hadoop.util.DataChecksum$Type)" : { },
  "org.apache.hadoop.fs.RawLocalFileSystem:getNativeFileLinkStatus(org.apache.hadoop.fs.Path,boolean)" : {
    "checkPath" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : {
    "fullPath" : 1,
    "mkdir" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$FinishOnFlushCompressionStream:flush()" : {
    "flush" : 1,
    "resetState" : 1,
    "finish" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getProcessingStdDev()" : {
    "lastStat" : 1,
    "stddev" : 1
  },
  "org.apache.hadoop.crypto.JceSm4CtrCryptoCodec:calculateIV(byte[],long,byte[])" : {
    "getCipherSuite" : 1,
    "getAlgorithmBlockSize" : 1,
    "calculateIV" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile:makeComparator(java.lang.String)" : {
    "makeComparator" : 1
  },
  "org.apache.hadoop.io.LongWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:registerSink(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSink)" : {
    "checkNotNull" : 1,
    "get" : 1,
    "start" : 1,
    "newSink" : 2,
    "put" : 2,
    "subset" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.Globber:fixRelativePart(org.apache.hadoop.fs.Path)" : {
    "fixRelativePart" : 2
  },
  "org.apache.hadoop.io.Text:toString()" : {
    "decode" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:getTokenRealOwner(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getUser" : 1,
    "isEmpty" : 1,
    "getUserName" : 1,
    "toString" : 2,
    "getRealUser" : 3
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtobufRpcEngineCallbackImpl:error(java.lang.Throwable)" : {
    "getClass" : 1,
    "now" : 1,
    "setDeferredError" : 1,
    "getSimpleName" : 1,
    "updateDeferredMetrics" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getCanonicalUri()" : {
    "canonicalizeUri" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNegative(long,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.FileUtil:createJarWithClassPath(java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.util.Map)" : {
    "add" : 2,
    "getCanonicalPath" : 1,
    "toURL" : 2,
    "debug" : 1,
    "toUri" : 1,
    "toURI" : 1,
    "isEmpty" : 1,
    "length" : 1,
    "createTempFile" : 1,
    "getMainAttributes" : 2,
    "toExternalForm" : 2,
    "split" : 1,
    "toPath" : 1,
    "newOutputStream" : 1,
    "mkdirs" : 1,
    "endsWith" : 3,
    "replaceTokens" : 1,
    "getJarsInDirectory" : 1,
    "isAbsolute" : 1,
    "putValue" : 2,
    "toString" : 5,
    "join" : 1,
    "close" : 1,
    "append" : 2
  },
  "org.apache.hadoop.fs.impl.FsLinkResolution:resolve(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.FsLinkResolution$FsLinkResolutionFunction)" : {
    "resolve" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:read(byte[],int,int)" : {
    "read" : 1,
    "min" : 1,
    "checkEOF" : 1
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:getLock(java.lang.String)" : {
    "indexFor" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "renameSnapshot" : 1
  },
  "org.apache.hadoop.fs.FsUrlStreamHandlerFactory:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getFileSystemClass" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:handleChecksumException(org.apache.hadoop.fs.ChecksumException)" : {
    "getInt" : 1,
    "warn" : 1,
    "getPosition" : 2,
    "getBoolean" : 1,
    "sync" : 1
  },
  "org.apache.hadoop.io.compress.Lz4Codec:createOutputStream(java.io.OutputStream)" : {
    "createOutputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.fs.FilterFs:resolvePath(org.apache.hadoop.fs.Path)" : {
    "resolvePath" : 1
  },
  "org.apache.hadoop.fs.FsShell:run(java.lang.String[])" : {
    "init" : 1,
    "copyOfRange" : 1,
    "printInstanceUsage" : 1,
    "debug" : 1,
    "printStackTrace" : 2,
    "getConf" : 1,
    "getSpan" : 2,
    "getLocalizedMessage" : 1,
    "length" : 1,
    "getMessage" : 1,
    "run" : 1,
    "conf" : 1,
    "printUsage" : 2,
    "addKVAnnotation" : 1,
    "substring" : 1,
    "displayError" : 3,
    "wrapHadoopConf" : 1,
    "newScope" : 1,
    "build" : 1,
    "getCommandName" : 1,
    "join" : 1,
    "getInstance" : 1,
    "close" : 2
  },
  "org.apache.hadoop.fs.AbstractFileSystem:open(org.apache.hadoop.fs.Path)" : {
    "getFileBufferSize" : 1,
    "getServerDefaults" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:makeTrashRelativePath(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "mergePaths" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:isChecksumFile(org.apache.hadoop.fs.Path)" : {
    "getName" : 1,
    "endsWith" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.impl.CombinedFileRange:merge(long,long,org.apache.hadoop.fs.FileRange,int,int)" : {
    "setLength" : 1,
    "max" : 1,
    "getOffset" : 3,
    "getLength" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:read(long,byte[],int,int)" : {
    "read" : 1,
    "validatePositionedReadArgs" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:toString()" : {
    "add" : 3,
    "getClass" : 1,
    "getSimpleName" : 1,
    "toString" : 2,
    "metrics" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkPathExistsAsFile(java.nio.file.Path,java.lang.String)" : {
    "checkPathExists" : 1,
    "isRegularFile" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.net.AbstractDNSToSwitchMapping:isSingleSwitchByScriptPolicy()" : {
    "get" : 1
  },
  "org.apache.hadoop.fs.shell.Command:isPathRecursable(org.apache.hadoop.fs.shell.PathData)" : {
    "isDirectory" : 1
  },
  "org.apache.hadoop.service.ServiceStateModel:<init>(java.lang.String)" : { },
  "org.apache.hadoop.net.NetworkTopology:getInstance(org.apache.hadoop.conf.Configuration,org.apache.hadoop.net.InnerNode$Factory)" : {
    "init" : 1,
    "getClass" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "touch" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$AsyncHandler:completed(java.lang.Integer,java.lang.Integer)" : {
    "read" : 1,
    "getOffset" : 1,
    "get" : 1,
    "failed" : 1,
    "position" : 1,
    "complete" : 1,
    "flip" : 1,
    "getData" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:<init>(java.lang.String[])" : { },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkRegex(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : {
    "set" : 1,
    "isEmpty" : 1,
    "getConfigViewFsPrefix" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.SplittableCompressionCodec$READ_MODE)" : { },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:<init>()" : { },
  "org.apache.hadoop.util.InstrumentedLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.Lock,long,long,org.apache.hadoop.util.Timer)" : {
    "monotonicNow" : 1,
    "max" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getFsStatus()" : { },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcLockWaitTime(long)" : {
    "add" : 2
  },
  "org.apache.hadoop.tools.GetGroupsBase:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.io.erasurecode.codec.XORErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : {
    "getNumParityUnits" : 1,
    "getSchema" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferData:<init>(int,java.nio.ByteBuffer)" : {
    "checkNotNegative" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getBlockSize" : 1,
    "getWorkFactor" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:<init>(org.apache.hadoop.fs.ChecksumFileSystem,org.apache.hadoop.fs.Path)" : {
    "getInt" : 1,
    "getConf" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:checkManualStateManagementOK(org.apache.hadoop.ha.HAServiceTarget)" : {
    "warn" : 1,
    "println" : 1,
    "isAutoFailoverEnabled" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:flush(int,int,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,boolean)" : {
    "metadata" : 1,
    "createWriter" : 1,
    "flush" : 1,
    "stream" : 1,
    "getPos" : 2,
    "writeVLong" : 2,
    "keyClass" : 1,
    "create" : 2,
    "valueClass" : 1,
    "compression" : 1,
    "suffix" : 2,
    "close" : 1,
    "appendRaw" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine:initialize()" : {
    "registerProtocolEngine" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:isOriginalTGT(javax.security.auth.kerberos.KerberosTicket)" : {
    "getServer" : 1,
    "isTGSPrincipal" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:forceReloginFromKeytab()" : {
    "reloginFromKeytab" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:storeDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "getKeyId" : 1,
    "toByteArray" : 1,
    "insertDelegationKey" : 1,
    "write" : 1,
    "storeDelegationKey" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "disconnect" : 1,
    "rename" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:toFileStatus(org.apache.hadoop.fs.HarFileSystem$HarStatus)" : {
    "getVersion" : 1,
    "makeRelative" : 1,
    "getPermission" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "getGroup" : 1,
    "getPath" : 1,
    "getModificationTime" : 2,
    "getPartFileStatus" : 1,
    "getAccessTime" : 1,
    "getLength" : 1,
    "getOwner" : 1,
    "isDir" : 2
  },
  "org.apache.hadoop.util.functional.RemoteIterators$RangeExcludingLongIterator:next()" : {
    "hasNext" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:sort(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "sort" : 1
  },
  "org.apache.hadoop.security.KDiag:run(java.lang.String[])" : {
    "getClass" : 1,
    "usage" : 1,
    "getResourceAsStream" : 1,
    "isEmpty" : 1,
    "popOptionWithArgument" : 5,
    "getClassLoader" : 1,
    "execute" : 1,
    "asList" : 1,
    "parseInt" : 1,
    "println" : 5,
    "verify" : 1,
    "popOption" : 5,
    "addDefaultResource" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:munmap(java.nio.MappedByteBuffer)" : {
    "trace" : 1,
    "freeBuffer" : 1,
    "getCleaner" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:getCredentialEntry(java.lang.String)" : {
    "getKey" : 1,
    "unlock" : 1,
    "getPathAsString" : 3,
    "getEncoded" : 1,
    "containsAlias" : 1,
    "bytesToChars" : 1,
    "lock" : 1
  },
  "org.apache.hadoop.util.StopWatch:now()" : {
    "monotonicNowNanos" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:skip(long)" : {
    "seek" : 1
  },
  "org.apache.hadoop.security.SaslRpcServer$SaslDigestCallbackHandler:getPassword(org.apache.hadoop.security.token.TokenIdentifier)" : {
    "encodePassword" : 1,
    "retriableRetrievePassword" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.DummyErasureCodec:createDecoder()" : {
    "getCoderOptions" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.DummyErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : { },
  "org.apache.hadoop.util.functional.TaskPool$Builder:run(org.apache.hadoop.util.functional.TaskPool$Task)" : {
    "requireNonNull" : 1,
    "hasNext" : 1,
    "runSingleThreaded" : 1,
    "runParallel" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:getGroupsSet(java.lang.String)" : {
    "warn" : 1,
    "emptySet" : 1,
    "trace" : 1,
    "failover" : 1,
    "switchBindUser" : 1,
    "doGetGroups" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setGauge(java.lang.String,long)" : {
    "setGauge" : 1,
    "getInnerStatistics" : 1
  },
  "org.apache.hadoop.security.Groups:getUserToGroupsMappingService(org.apache.hadoop.conf.Configuration)" : {
    "debug" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.net.TableMapping$RawTableMapping:load()" : {
    "warn" : 3,
    "split" : 1,
    "trim" : 1,
    "newInputStream" : 1,
    "getConf" : 1,
    "get" : 2,
    "length" : 1,
    "isBlank" : 1,
    "readLine" : 2,
    "put" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.fs.FileContext:getStatistics(java.net.URI)" : {
    "getStatistics" : 1
  },
  "org.apache.hadoop.io.compress.lz4.Lz4Decompressor:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "getXAttr" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,float)" : {
    "optLong" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl:<init>(java.lang.String,java.lang.String,org.apache.hadoop.net.InnerNode,int)" : { },
  "org.apache.hadoop.conf.StorageUnit$2:getDefault(double)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:delete(org.apache.hadoop.fs.Path)" : {
    "delete" : 1
  },
  "org.apache.hadoop.io.file.tfile.Utils:readVInt(java.io.DataInput)" : {
    "readVLong" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:<init>(org.apache.hadoop.fs.FSDataInputStream,long,org.apache.hadoop.conf.Configuration)" : {
    "compatibleWith" : 1,
    "readLong" : 1,
    "size" : 2,
    "getMetaBlock" : 1,
    "readAndVerify" : 1,
    "close" : 1,
    "seek" : 2
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getRemoteReadTime()" : {
    "visitAll" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "unsetStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "getChecksumFile" : 1,
    "getFileStatus" : 1,
    "exists" : 1,
    "delete" : 3,
    "getMyFs" : 4,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.JvmPauseMonitor:main(java.lang.String[])" : {
    "add" : 1,
    "init" : 1,
    "newArrayList" : 1,
    "valueOf" : 1,
    "start" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:stripOutRoot(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "isRoot" : 1,
    "toUri" : 1,
    "length" : 3,
    "getPath" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:compression(org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "compression" : 1
  },
  "org.apache.hadoop.conf.Configuration:getClassByName(java.lang.String)" : {
    "getClassByNameOrNull" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[])" : { },
  "org.apache.hadoop.ipc.Client:getCallId()" : {
    "nextCallId" : 1,
    "get" : 2
  },
  "org.apache.hadoop.security.Credentials:writeWritableOutputStream(java.io.DataOutputStream)" : {
    "write" : 3
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:rejectUnknownMandatoryKeys(java.util.Collection,java.lang.String)" : {
    "rejectUnknownMandatoryKeys" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:aggregateLocalStatesToGlobalMetrics(java.util.concurrent.ConcurrentMap)" : {
    "getValue" : 1,
    "snapshotInto" : 1,
    "getKey" : 1,
    "addMetricIfNotExists" : 1,
    "entrySet" : 1
  },
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:<init>(org.apache.hadoop.ipc.RetryCache)" : {
    "debug" : 1,
    "isDebugEnabled" : 1,
    "getCacheName" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_toPrettyString(java.lang.Object)" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getServerDefaults()" : {
    "fullPath" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:setAuthenticationMethod(org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : {
    "setAuthenticationMethod" : 1,
    "valueOf" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:refreshStatus()" : {
    "lookupStat" : 1,
    "setStat" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:verifyToken(org.apache.hadoop.security.token.Token)" : {
    "getPassword" : 1,
    "verifyToken" : 1,
    "getUser" : 1,
    "decodeTokenIdentifier" : 1
  },
  "org.apache.hadoop.fs.permission.AclEntryType:toString()" : {
    "toStringStable" : 1
  },
  "org.apache.hadoop.net.SocketIOWithTimeout:connect(java.nio.channels.SocketChannel,java.net.SocketAddress,int)" : {
    "timeoutExceptionString" : 1,
    "select" : 1,
    "isOpen" : 1,
    "isBlocking" : 1,
    "now" : 2,
    "finishConnect" : 1,
    "close" : 1,
    "connect" : 1,
    "configureBlocking" : 2
  },
  "org.apache.hadoop.ipc.ProcessingDetails:toString()" : {
    "values" : 1,
    "toLowerCase" : 1,
    "get" : 1,
    "name" : 1,
    "length" : 1,
    "toString" : 1,
    "append" : 4
  },
  "org.apache.hadoop.conf.Configuration:getEnumSet(java.lang.String,java.lang.Class,boolean)" : {
    "parseEnumSet" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:bufferSize(int)" : {
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getActualUgi()" : {
    "getCurrentUser" : 1,
    "debug" : 1,
    "containsKmsDt" : 1,
    "isSecurityEnabled" : 1,
    "shouldRelogin" : 1,
    "getRealUser" : 2,
    "getLoginUser" : 1,
    "logAllUserInfo" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "getXAttr" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getServerDefaults()" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:getRemainingPath(java.lang.String[],int)" : {
    "toString" : 1,
    "append" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "getShortUserName" : 1,
    "getPrimaryGroupName" : 1,
    "makeQualified" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.service.launcher.ServiceLauncher:uncaughtException(java.lang.Thread,java.lang.Throwable)" : {
    "exit" : 1,
    "error" : 1,
    "convertToExitException" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.DummyErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getBlockIndexNear(long)" : {
    "size" : 1,
    "lowerBound" : 1,
    "getBlockRegionList" : 1
  },
  "org.apache.hadoop.ipc.ResponseBuffer:toByteArray()" : {
    "getFramedBuffer" : 1,
    "toByteArray" : 1
  },
  "org.apache.hadoop.util.Shell$1:run()" : {
    "monotonicNow" : 1,
    "setProperty" : 1,
    "runCommand" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$CompressionOption:<init>(org.apache.hadoop.io.SequenceFile$CompressionType)" : { },
  "org.apache.hadoop.security.token.Token:buildCacheKey()" : {
    "toString" : 1,
    "concat" : 1,
    "nameUUIDFromBytes" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class)" : {
    "keyClass" : 1,
    "valueClass" : 1
  },
  "org.apache.hadoop.util.Lists:newArrayList(java.util.Iterator)" : {
    "newArrayList" : 1,
    "addAll" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int)" : { },
  "org.apache.hadoop.fs.FilterFileSystem:listStatusIterator(org.apache.hadoop.fs.Path)" : {
    "listStatusIterator" : 1
  },
  "org.apache.hadoop.ipc.Server$Call:sendResponse()" : {
    "doResponse" : 1,
    "decrementAndGet" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncValue:waitAsyncValue(long,java.util.concurrent.TimeUnit)" : {
    "wait" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:reloginFromTicketCache(boolean)" : {
    "getLogin" : 1,
    "relogin" : 1,
    "shouldRelogin" : 1,
    "isFromTicket" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:getFactory(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.net.NetworkTopology:getLeaves(java.lang.String)" : {
    "add" : 2,
    "getLeaf" : 1,
    "getNumOfLeaves" : 1,
    "getNode" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:refresh()" : {
    "get" : 1,
    "refresh" : 1
  },
  "org.apache.hadoop.fs.FileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "supportsSymlinks" : 1,
    "makeQualified" : 1,
    "areSymlinksEnabled" : 1
  },
  "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec:<init>()" : {
    "getLoadingFailureReason" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:throwIfInvalidBuffer()" : {
    "checkState" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:initTables(int,int,byte[],int,byte[])" : {
    "gfVectMulInit" : 1
  },
  "org.apache.hadoop.security.token.Token:decodeWritable(org.apache.hadoop.io.Writable,java.lang.String)" : {
    "readFields" : 1,
    "reset" : 1,
    "decode" : 1
  },
  "org.apache.hadoop.ipc.Client:call(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable,org.apache.hadoop.ipc.Client$ConnectionId,int,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getConnection" : 1,
    "sendRpcRequest" : 1,
    "currentThread" : 1,
    "set" : 1,
    "isAsynchronousMode" : 2,
    "setAlignmentContext" : 1,
    "getRpcResponse" : 2,
    "initCause" : 1,
    "interrupt" : 1,
    "checkAsyncCall" : 1,
    "releaseAsyncCall" : 2,
    "createCall" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:waitForCompletion(org.apache.hadoop.ipc.RetryCache$CacheEntry)" : {
    "incrCacheHit" : 1,
    "wait" : 1,
    "currentThread" : 1,
    "trace" : 1,
    "checkNotNull" : 1,
    "unlock" : 1,
    "incrCacheUpdated" : 1,
    "get" : 1,
    "interrupt" : 1,
    "isTraceEnabled" : 1,
    "lock" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodec$Util:createOutputStreamWithCodecPool(org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.conf.Configuration,java.io.OutputStream)" : {
    "getCompressor" : 1,
    "returnCompressor" : 1,
    "setTrackedCompressor" : 1,
    "createOutputStream" : 1
  },
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:getPassword(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "warn" : 1,
    "getPassword" : 1,
    "getMessage" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:getHomeDirValue(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "get" : 1,
    "getConfigViewFsPrefix" : 1
  },
  "org.apache.hadoop.io.compress.CodecPool:getLeasedCompressorsCount(org.apache.hadoop.io.compress.CompressionCodec)" : {
    "getLeaseCount" : 1,
    "getCompressorType" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:appendTokenFiles(java.util.ArrayList,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "readTokenStorageFile" : 1,
    "addToken" : 1,
    "getAllTokens" : 1,
    "doFormattedWrite" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:getPriorityLevel(org.apache.hadoop.security.UserGroupInformation)" : {
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.util.bloom.Key:equals(java.lang.Object)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:setGcTimeMonitor(org.apache.hadoop.util.GcTimeMonitor)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.ipc.Server$Responder:processResponse(java.util.LinkedList,boolean)" : {
    "currentThread" : 4,
    "debug" : 3,
    "getName" : 4,
    "channelWrite" : 1,
    "wakeup" : 1,
    "hasRemaining" : 1,
    "monotonicNowNanos" : 1,
    "closeConnection" : 1,
    "warn" : 1,
    "size" : 1,
    "removeFirst" : 1,
    "decRpcCount" : 1,
    "decPending" : 1,
    "incPending" : 1,
    "addFirst" : 1,
    "register" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:nextRawKey()" : {
    "getValueClass" : 2,
    "ignoreSync" : 1,
    "nextRawKey" : 1,
    "file" : 1,
    "getKeyClass" : 2,
    "length" : 1,
    "start" : 1,
    "getBufferSize" : 1,
    "reset" : 1,
    "bufferSize" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:delegationTokenToJSON(org.apache.hadoop.security.token.Token)" : {
    "singletonMap" : 2,
    "encodeToUrlString" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:parentZNodeExists()" : {
    "checkState" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.ipc.RetryCache$CacheEntryWithPayload:<init>(byte[],int,java.lang.Object,long,boolean)" : { },
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:hasCapacity(long)" : {
    "remainingCapacity" : 1
  },
  "org.apache.hadoop.util.IdentityHashStore:remove(java.lang.Object)" : {
    "getElementIndex" : 1
  },
  "org.apache.hadoop.util.StopWatch:now(java.util.concurrent.TimeUnit)" : {
    "now" : 1,
    "convert" : 1
  },
  "org.apache.hadoop.fs.FSDataInputStream:unbuffer()" : {
    "unbuffer" : 1
  },
  "org.apache.hadoop.util.ShutdownHookManager:removeShutdownHook(java.lang.Runnable)" : {
    "get" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:getBytesWritten()" : {
    "checkStream" : 1,
    "getBytesWritten" : 1
  },
  "org.apache.hadoop.ipc.ProtocolProxy:fetchServerMethods(java.lang.reflect.Method)" : {
    "add" : 1,
    "getVersion" : 1,
    "getProtocolName" : 1,
    "getDeclaringClass" : 2,
    "getProtocolVersion" : 1,
    "getName" : 1,
    "valueOf" : 1,
    "getMethods" : 2,
    "getFingerprint" : 1,
    "getProtocolSignature" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:getUserName(int,java.lang.String)" : {
    "warn" : 1,
    "updateMapIncr" : 1,
    "get" : 2,
    "checkAndUpdateMaps" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:get(org.apache.hadoop.io.BytesWritable,org.apache.hadoop.io.BytesWritable)" : {
    "getValue" : 1,
    "getKey" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:hashCode()" : {
    "hashBytes" : 1,
    "getKeyLength" : 1
  },
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:<init>(java.lang.String)" : {
    "debug" : 1,
    "valueOf" : 1,
    "toString" : 1,
    "tag" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:put(java.lang.Object)" : {
    "size" : 1,
    "offerQueues" : 1,
    "putQueue" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:build()" : {
    "addRecord" : 1,
    "snapshot" : 1,
    "info" : 1
  },
  "org.apache.hadoop.conf.ConfServlet:writeResponse(org.apache.hadoop.conf.Configuration,java.io.Writer,java.lang.String)" : {
    "writeResponse" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,java.lang.String[])" : {
    "add" : 1,
    "getThisBuilder" : 1,
    "setStrings" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:<init>()" : { },
  "org.apache.hadoop.ipc.FairCallQueue:add(java.lang.Object)" : {
    "size" : 1,
    "offerQueues" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:reloginFromKeytab(boolean)" : {
    "reloginFromKeytab" : 1
  },
  "org.apache.hadoop.fs.shell.SnapshotCommands$RenameSnapshot:processArguments(java.util.LinkedList)" : {
    "println" : 1,
    "size" : 1,
    "getFirst" : 1,
    "checkArgument" : 1,
    "processArguments" : 1,
    "renameSnapshot" : 1
  },
  "org.apache.hadoop.metrics2.util.MBeans:register(java.lang.String,java.lang.String,java.lang.Object)" : {
    "emptyMap" : 1,
    "register" : 1
  },
  "org.apache.hadoop.io.UTF8:<init>(org.apache.hadoop.io.UTF8)" : {
    "set" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:write(java.io.DataOutput)" : {
    "size" : 2,
    "writeVInt" : 4,
    "reset" : 1,
    "getLength" : 3,
    "buffer" : 1,
    "write" : 4,
    "getData" : 2
  },
  "org.apache.hadoop.fs.FilterFs:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "checkPath" : 1,
    "access" : 1
  },
  "org.apache.hadoop.io.UTF8:writeString(java.io.DataOutput,java.lang.String)" : {
    "warn" : 1,
    "length" : 3,
    "writeShort" : 1,
    "writeChars" : 1,
    "utf8Length" : 1,
    "substring" : 2
  },
  "org.apache.hadoop.fs.Path:isWindowsAbsolutePath(java.lang.String,boolean)" : {
    "length" : 1,
    "charAt" : 2,
    "startPositionWithoutWindowsDrive" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Server$WritableRpcInvoker:call(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.io.Writable,long)" : {
    "init" : 1,
    "getClass" : 1,
    "getName" : 1,
    "setAccessible" : 1,
    "getMethodName" : 2,
    "getTargetException" : 1,
    "log" : 2,
    "getParameterClasses" : 1,
    "invoke" : 1,
    "getMethod" : 1,
    "setDetailedMetricsName" : 2,
    "getCurCall" : 1,
    "error" : 1,
    "getRpcVersion" : 2,
    "getProtocolVersion" : 1,
    "getReturnType" : 1,
    "getStackTrace" : 2,
    "setStackTrace" : 2,
    "get" : 2,
    "equals" : 1,
    "getParameters" : 1,
    "getHighestSupportedProtocol" : 2,
    "getSimpleName" : 1,
    "toString" : 2,
    "getProtocolImplMap" : 1
  },
  "org.apache.hadoop.fs.audit.CommonAuditContext:init()" : {
    "put" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtobufRpcEngineCallbackImpl:setResponse(com.google.protobuf.Message)" : {
    "now" : 1,
    "setDeferredResponse" : 1,
    "updateDeferredMetrics" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:startUpload(org.apache.hadoop.fs.Path)" : {
    "createCollectorPath" : 1,
    "checkPath" : 1,
    "eval" : 1,
    "mkdirs" : 1,
    "from" : 1,
    "toString" : 1,
    "wrap" : 1,
    "getBytes" : 1,
    "getDirDefault" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:createCheckpoint(java.util.Date)" : {
    "getTrashRoots" : 1,
    "createCheckpoint" : 1,
    "getPath" : 2,
    "info" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:createTokenIdent(byte[])" : {
    "readFields" : 1,
    "createIdentifier" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:finalize()" : {
    "end" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt:moved(boolean)" : { },
  "org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB:refreshSuperUserGroupsConfiguration()" : {
    "refreshSuperUserGroupsConfiguration" : 1,
    "ipc" : 1
  },
  "org.apache.hadoop.security.token.DtUtilShell:main(java.lang.String[])" : {
    "exit" : 1,
    "run" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:loadPermissionInfo()" : {
    "isAvailable" : 1,
    "debug" : 1,
    "isPermissionLoaded" : 2,
    "loadPermissionInfoByNonNativeIO" : 1,
    "loadPermissionInfoByNativeIO" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:getAttribute(int)" : {
    "reference" : 1,
    "getAttribute0" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState:checkInputBuffers(byte[][])" : {
    "getNumDataUnits" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:doGetLevel()" : {
    "process" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:getWorkingDirectory()" : {
    "getWorkingDirectory" : 1
  },
  "org.apache.hadoop.security.KerberosAuthException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.io.compress.BlockDecompressorStream:<init>(java.io.InputStream)" : { },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:next()" : {
    "advance" : 1
  },
  "org.apache.hadoop.util.functional.FunctionalIO:toUncheckedFunction(org.apache.hadoop.util.functional.FunctionRaisingIOE)" : { },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:<init>()" : { },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:releaseReadyBlock(int)" : {
    "warn" : 1,
    "getAll" : 1,
    "distance" : 2,
    "stateEqualsOneOf" : 1,
    "setDone" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ArrayBlockFactory:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.crypto.JceCtrCryptoCodec:setConf(org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "addProvider" : 1,
    "setProvider" : 1,
    "equals" : 1,
    "get" : 2,
    "getLogger" : 1,
    "getMessage" : 1,
    "getInstance" : 2
  },
  "org.apache.hadoop.util.FindClass:usage(java.lang.String[])" : {
    "err" : 3,
    "explainResult" : 6
  },
  "org.apache.hadoop.util.LineReader:readDefaultLine(org.apache.hadoop.io.Text,int,int)" : {
    "fillBuffer" : 1,
    "clear" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getTransferMode(org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "equals" : 3,
    "get" : 1,
    "toUpperCase" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:read(byte[],int,int)" : {
    "internalReset" : 1,
    "read" : 2,
    "updatePos" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupRandPartA()" : {
    "setupBlock" : 1,
    "initBlock" : 1,
    "updateCRC" : 1,
    "endBlock" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getSymlink()" : {
    "getSymlink" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsCollectorImpl:addRecord(org.apache.hadoop.metrics2.MetricsInfo)" : {
    "add" : 1,
    "accepts" : 1,
    "name" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:transitionToActive(org.apache.commons.cli.CommandLine)" : {
    "createReqInfo" : 1,
    "isOtherTargetNodeActive" : 1,
    "println" : 1,
    "transitionToActive" : 1,
    "getConf" : 1,
    "hasOption" : 2,
    "getProxy" : 1,
    "resolveTarget" : 1,
    "printUsage" : 1,
    "getArgs" : 1,
    "checkManualStateManagementOK" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : { },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:setConfigurationFromURI(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 2,
    "split" : 1,
    "getPort" : 1,
    "set" : 3,
    "equals" : 1,
    "get" : 2,
    "decode" : 1,
    "getUserInfo" : 1,
    "getHost" : 1,
    "setInt" : 1
  },
  "org.apache.hadoop.ipc.ProxyCombiner$CombinedProxyInvocationHandler:getConnectionId()" : {
    "getConnectionIdForProxy" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicIntegerGauge(java.lang.String,java.util.concurrent.atomic.AtomicInteger)" : {
    "get" : 1,
    "withLongFunctionGauge" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getDelegationTokens(java.lang.String)" : {
    "getTargetFileSystem" : 2,
    "getRootFallbackLink" : 2,
    "size" : 1,
    "addAll" : 2,
    "get" : 1,
    "getMountPoints" : 1,
    "getDelegationTokens" : 2
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:entryToString(java.util.Map$Entry)" : {
    "getValue" : 1,
    "getKey" : 1,
    "entryToString" : 1
  },
  "org.apache.hadoop.util.VersionInfo:getProtocVersion()" : {
    "_getProtocVersion" : 1
  },
  "org.apache.hadoop.util.IdentityHashStore:get(java.lang.Object)" : {
    "getElementIndex" : 1
  },
  "org.apache.hadoop.security.Groups:getGroups(java.lang.String)" : {
    "getGroupInternal" : 1,
    "unmodifiableList" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:add(org.apache.hadoop.util.bloom.Key)" : {
    "add" : 1,
    "addRow" : 1,
    "getActiveStandardBF" : 1
  },
  "org.apache.hadoop.security.RuleBasedLdapGroupsMapping:setConf(org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "valueOf" : 1,
    "get" : 1,
    "toUpperCase" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:needsInput()" : {
    "setInputFromSavedData" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.FsUrlStreamHandlerFactory:<init>()" : { },
  "org.apache.hadoop.net.InnerNodeImpl:remove(org.apache.hadoop.net.Node)" : {
    "isParent" : 1,
    "getName" : 6,
    "containsKey" : 1,
    "getNextAncestorName" : 1,
    "remove" : 5,
    "isAncestor" : 1,
    "getNetworkLocation" : 1,
    "size" : 2,
    "getNumOfChildren" : 1,
    "equals" : 2,
    "get" : 3,
    "getPath" : 1,
    "setParent" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:getRawSize()" : {
    "getBlockRegion" : 1,
    "getRawSize" : 1
  },
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:invoke(java.lang.Object,java.lang.Object[])" : {
    "checkArgument" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.shell.SnapshotCommands$CreateSnapshot:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "toString" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher:addNotificationSocket(java.util.TreeMap,org.apache.hadoop.net.unix.DomainSocketWatcher$FdSet)" : {
    "add" : 1,
    "reference" : 1,
    "trace" : 1,
    "isTraceEnabled" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.PassthroughCodec:setConf(org.apache.hadoop.conf.Configuration)" : {
    "getTrimmed" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:writeImpl(java.io.DataOutput)" : {
    "writeByte" : 1,
    "writeVInt" : 2,
    "writeVLong" : 2,
    "write" : 3
  },
  "org.apache.hadoop.io.SequenceFile$Writer:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)" : {
    "init" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Get:processOptions(java.util.LinkedList)" : {
    "setOverwrite" : 1,
    "setWriteChecksum" : 1,
    "setPreserve" : 1,
    "getOpt" : 4,
    "getOptValue" : 2,
    "getLocalDestination" : 1,
    "setVerifyChecksum" : 1,
    "addOptionWithValue" : 2,
    "setThreadCount" : 1,
    "parse" : 1,
    "setRecursive" : 1,
    "setThreadPoolQueueSize" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : {
    "getInt" : 1,
    "createOutputStream" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:close()" : {
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 2,
    "closeChildFileSystems" : 2,
    "isRootInternalDir" : 1,
    "clear" : 1,
    "closeAll" : 1,
    "getMountPoints" : 1,
    "close" : 1,
    "getTargetFileSystemForClose" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:getData(int)" : {
    "tryAcquire" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator:createTmpFileForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration)" : {
    "obtainContext" : 1,
    "createTmpFileForWrite" : 1
  },
  "org.apache.hadoop.io.DoubleWritable:<init>(double)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getServerDefaults()" : {
    "getInt" : 2,
    "getConf" : 1,
    "getDefaultReplication" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.conf.Configuration$DeprecationContext:<init>(org.apache.hadoop.conf.Configuration$DeprecationContext,org.apache.hadoop.conf.Configuration$DeprecationDelta[])" : {
    "decorate" : 2,
    "getValue" : 2,
    "getKey" : 3,
    "entrySet" : 2,
    "containsKey" : 1,
    "getNewKeys" : 2,
    "put" : 4,
    "getCustomMessage" : 1
  },
  "org.apache.hadoop.conf.Configuration$Resource:getRestrictParserDefault(java.lang.Object)" : {
    "getCurrentUser" : 1,
    "isInitialized" : 1,
    "getRealUser" : 1
  },
  "org.apache.hadoop.util.KMSUtil:parseJSONKeyVersion(java.util.Map)" : {
    "checkNotNull" : 1,
    "decodeBase64" : 1,
    "containsKey" : 1,
    "get" : 3,
    "isEmpty" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)" : {
    "createWriter" : 1,
    "file" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "filesystem" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getQuotaUsage(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.io.Text$Comparator:<init>()" : { },
  "org.apache.hadoop.ipc.RetryCache$CacheEntryWithPayload:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.util.ComparableVersion:<init>(java.lang.String)" : {
    "parseVersion" : 1
  },
  "org.apache.hadoop.fs.FileStatus:write(java.io.DataOutput)" : {
    "writeInt" : 1,
    "toByteArray" : 1,
    "getSerializedSize" : 1,
    "convert" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.FilterFs:makeQualified(org.apache.hadoop.fs.Path)" : {
    "makeQualified" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:replaceScheduledTask(int,long,java.util.concurrent.TimeUnit)" : {
    "scheduleAtFixedRate" : 1,
    "cancel" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat:reset(long,double,double,org.apache.hadoop.metrics2.util.SampleStat$MinMax)" : {
    "reset" : 1
  },
  "org.apache.hadoop.util.DataChecksum:mapByteToChecksumType(int)" : {
    "valueOf" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState:convertToByteArrayState()" : {
    "array" : 2,
    "arrayOffset" : 2,
    "position" : 2
  },
  "org.apache.hadoop.util.Progress:addPhases(int)" : {
    "addNewPhase" : 1,
    "size" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addCounterFunction(java.lang.String,java.util.function.Function)" : {
    "addFunction" : 1
  },
  "org.apache.hadoop.util.bloom.HashFunction:hash(org.apache.hadoop.util.bloom.Key)" : {
    "abs" : 1,
    "hash" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getCredentials()" : {
    "next" : 1,
    "iterator" : 1,
    "getAllTokens" : 1,
    "hasNext" : 1,
    "isPrivate" : 1,
    "getCredentialsInternal" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.shell.SetReplication:waitForReplication()" : {
    "sleep" : 1,
    "println" : 2,
    "print" : 2,
    "flush" : 2,
    "getLen" : 1,
    "refreshStatus" : 1,
    "getFileBlockLocations" : 1,
    "getHosts" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.XORErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.FileUtil:chmod(java.lang.String,java.lang.String)" : {
    "chmod" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:doDelegationTokenOperation(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator$DelegationTokenOperation,java.lang.String,org.apache.hadoop.security.token.Token,boolean,java.lang.String)" : {
    "encode" : 1,
    "disconnect" : 1,
    "setRequestMethod" : 1,
    "requiresKerberosCredentials" : 1,
    "put" : 4,
    "encodeToUrlString" : 1,
    "readValue" : 1,
    "getKey" : 1,
    "validateResponse" : 1,
    "entrySet" : 1,
    "mapReader" : 1,
    "openConnection" : 1,
    "toLowerCase" : 1,
    "format" : 2,
    "getMessage" : 1,
    "getAuthority" : 2,
    "getInputStream" : 1,
    "getValue" : 1,
    "getHeaderField" : 1,
    "setDelegationToken" : 2,
    "contains" : 2,
    "toExternalForm" : 1,
    "getHttpMethod" : 1,
    "toString" : 2,
    "getDelegationToken" : 1,
    "append" : 4
  },
  "org.apache.hadoop.service.launcher.ServiceShutdownHook:<init>(org.apache.hadoop.service.Service)" : { },
  "org.apache.hadoop.fs.shell.Display$TextRecordInputStream:close()" : {
    "close" : 2
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:<init>(org.apache.hadoop.security.authentication.client.ConnectionConfigurator)" : { },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:membershipTest(org.apache.hadoop.util.bloom.Key)" : {
    "clear" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:clear(org.apache.hadoop.ipc.RetryCache)" : {
    "clear" : 1,
    "incrCacheClearedCounter" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getBytesReadErasureCoded()" : {
    "visitAll" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:next(org.apache.hadoop.io.DataOutputBuffer)" : {
    "next" : 1,
    "readRecordLength" : 1,
    "handleChecksumException" : 1,
    "readInt" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.crypto.CryptoFSDataOutputStream:getPos()" : {
    "getPos" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:buildStaticChecked()" : {
    "asStatic" : 1,
    "buildChecked" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:needsInput()" : {
    "setInputFromSavedData" : 1,
    "remaining" : 3
  },
  "org.apache.hadoop.net.SocksSocketFactory:setConf(org.apache.hadoop.conf.Configuration)" : {
    "setProxy" : 1,
    "get" : 1,
    "length" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(short[],java.lang.String)" : {
    "checkNotEmpty" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.fs.FileSystem:removeFileSystemForTesting(java.net.URI,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)" : {
    "remove" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:run(java.lang.String[])" : {
    "doRun" : 1,
    "isAutoFailoverEnabled" : 1,
    "doAsLoginUserOrFatal" : 1,
    "terminateConnection" : 1,
    "error" : 1,
    "getCause" : 1,
    "loginAsFCUser" : 1
  },
  "org.apache.hadoop.io.SortedMapWritable:readFields(java.io.DataInput)" : {
    "readFields" : 3,
    "getClass" : 2,
    "getConf" : 2,
    "newInstance" : 2,
    "readByte" : 2,
    "readInt" : 1,
    "put" : 1
  },
  "org.apache.hadoop.crypto.key.kms.ValueQueue:submitRefillTask(java.lang.String,java.util.Queue)" : {
    "isCanceled" : 2,
    "writeLock" : 1,
    "size" : 2,
    "prestartAllCoreThreads" : 1,
    "clear" : 1,
    "fillQueueForKey" : 1,
    "writeUnlock" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.Path:mergePaths(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getScheme" : 1,
    "toUri" : 4,
    "getPath" : 2,
    "getAuthority" : 1,
    "substring" : 1,
    "startPositionWithoutWindowsDrive" : 1
  },
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilterInitializer:initFilter(org.apache.hadoop.http.FilterContainer,org.apache.hadoop.conf.Configuration)" : {
    "getName" : 1,
    "createFilterConfig" : 1,
    "addFilter" : 1
  },
  "org.apache.hadoop.fs.shell.find.BaseExpression:setOptions(org.apache.hadoop.fs.shell.find.FindOptions)" : {
    "getChildren" : 1,
    "setOptions" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setMeanStatistic(java.lang.String,org.apache.hadoop.fs.statistics.MeanStatistic)" : {
    "getInnerStatistics" : 1,
    "setMeanStatistic" : 1
  },
  "org.apache.hadoop.crypto.key.CachingKeyProvider:rollNewVersion(java.lang.String,byte[])" : {
    "invalidateCache" : 1,
    "getKeyProvider" : 1,
    "rollNewVersion" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getGroupsSet()" : {
    "getShortUserName" : 2,
    "ensureInitialized" : 1,
    "emptySet" : 1,
    "debug" : 1,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "checkPath" : 2,
    "rename" : 1
  },
  "org.apache.hadoop.util.DataChecksum:verifyChunkedSums(java.nio.ByteBuffer,java.nio.ByteBuffer,java.lang.String,long)" : {
    "verifyChunked" : 2,
    "isAvailable" : 2,
    "hasArray" : 2,
    "verifyChunkedSumsByteArray" : 1,
    "array" : 4,
    "arrayOffset" : 2,
    "position" : 2,
    "verifyChunkedSums" : 1,
    "isDirect" : 1,
    "remaining" : 2
  },
  "org.apache.hadoop.io.SecureIOUtils:createForWrite(java.io.File,int)" : {
    "getCreateForWriteFileOutputStream" : 1,
    "insecureCreateForWrite" : 1
  },
  "org.apache.hadoop.io.DataInputBuffer:<init>()" : { },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:decode(java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : {
    "adjustOrder" : 1,
    "decode" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:read(byte[],int,int)" : {
    "read" : 1,
    "incrementCounter" : 1,
    "validatePositionedReadArgs" : 1,
    "addAndGet" : 1,
    "incrementBytesRead" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:processErasures(int[])" : {
    "bytesToHex" : 1,
    "println" : 1,
    "initTables" : 1,
    "getNumAllUnits" : 4,
    "allowVerboseDump" : 1,
    "generateDecodeMatrix" : 1,
    "getNumDataUnits" : 5
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:processRetryInfo()" : {
    "isFailover" : 1,
    "failover" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:<init>(org.apache.hadoop.fs.statistics.IOStatistics)" : {
    "createMaps" : 1,
    "snapshot" : 1
  },
  "org.apache.hadoop.util.Shell:getReadlinkCommand(java.lang.String)" : {
    "getWinUtilsPath" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:removeNextElement()" : {
    "getAndAdvanceCurrentIndex" : 1,
    "size" : 1,
    "get" : 2,
    "poll" : 2
  },
  "org.apache.hadoop.fs.shell.CopyCommandWithMultiThread:hasMoreThanOneSourcePaths(java.util.LinkedList)" : {
    "isPathRecursable" : 1,
    "size" : 2,
    "get" : 1,
    "refreshStatus" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "isFile" : 1,
    "pathToFile" : 1,
    "exists" : 1,
    "toString" : 1,
    "delete" : 1,
    "listFiles" : 1,
    "fullyDelete" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:getDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : {
    "getLevel" : 2,
    "warn" : 3,
    "getParent" : 6,
    "unlock" : 1,
    "readLock" : 2,
    "equals" : 1,
    "getPath" : 2,
    "lock" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.DummyErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.shell.Delete$Rm:moveToTrash(org.apache.hadoop.fs.shell.PathData)" : {
    "getConf" : 1,
    "getMessage" : 2,
    "moveToAppropriateTrash" : 1,
    "getCause" : 2
  },
  "org.apache.hadoop.util.functional.RemoteIterators:cleanupRemoteIterator(org.apache.hadoop.fs.RemoteIterator)" : {
    "logIOStatisticsAtDebug" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:readFields(java.io.DataInput)" : {
    "readFields" : 3,
    "readVInt" : 2,
    "readByte" : 1,
    "readVLong" : 2
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:getKeyVersions(java.lang.String)" : {
    "add" : 1,
    "getKeyVersion" : 1,
    "getMetadata" : 1,
    "unlock" : 1,
    "getVersions" : 1,
    "lock" : 1,
    "buildVersionName" : 1
  },
  "org.apache.hadoop.conf.Configuration:main(java.lang.String[])" : {
    "writeXml" : 1
  },
  "org.apache.hadoop.service.ServiceStateModel:checkStateTransition(java.lang.String,org.apache.hadoop.service.Service$STATE,org.apache.hadoop.service.Service$STATE)" : {
    "isValidStateTransition" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:getZKAcls(org.apache.hadoop.conf.Configuration)" : {
    "resolveConfIndirection" : 1,
    "get" : 1,
    "parseACLs" : 1,
    "error" : 1
  },
  "org.apache.hadoop.ipc.RPC$Server:getSupportedProtocolVersions(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.String)" : {
    "getValue" : 1,
    "getKey" : 2,
    "size" : 1,
    "entrySet" : 1,
    "arraycopy" : 1,
    "equals" : 1,
    "getProtocolImplMap" : 2
  },
  "org.apache.hadoop.net.InnerNodeImpl:getNextAncestorName(org.apache.hadoop.net.Node)" : {
    "isAncestor" : 1,
    "getNetworkLocation" : 1,
    "getPath" : 1,
    "length" : 1,
    "indexOf" : 1,
    "charAt" : 1,
    "substring" : 3
  },
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:updateRenewalTime(long)" : {
    "now" : 1
  },
  "org.apache.hadoop.metrics2.AbstractMetric:<init>(org.apache.hadoop.metrics2.MetricsInfo)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableCounterLong:<init>(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getPermission()" : {
    "getPermission" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : {
    "getStartIndex" : 2,
    "fixBlockLocations" : 1,
    "getPartFileStatus" : 1,
    "getPath" : 1,
    "getFileHarStatus" : 1,
    "getFileBlockLocations" : 1,
    "getPartName" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server:registerForDeferredResponse()" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "fullPath" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:compareTo(org.apache.hadoop.fs.shell.PathData)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_reset()" : {
    "invoke" : 1,
    "checkIoStatisticsContextAvailable" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFormat:<init>(java.lang.String,int,int,java.lang.String[])" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "initialize" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager$ZKSecretManager:createIdentifier()" : { },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:init(java.lang.String)" : {
    "warn" : 2,
    "initSystemMBean" : 1,
    "debug" : 1,
    "checkNotNull" : 1,
    "inMiniClusterMode" : 1,
    "start" : 1,
    "getMessage" : 1,
    "initMode" : 1,
    "info" : 2
  },
  "org.apache.hadoop.ipc.Server$Connection:checkRpcHeaders(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto)" : {
    "hasRpcKind" : 1,
    "hasRpcOp" : 1,
    "getRpcOp" : 2
  },
  "org.apache.hadoop.io.WritableComparator:get(java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "forceInit" : 1,
    "get" : 2,
    "setConf" : 1
  },
  "org.apache.hadoop.conf.ConfigurationWithLogging:get(java.lang.String)" : {
    "redact" : 1,
    "get" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:rollNewVersion(java.lang.String)" : {
    "rollNewVersionInternal" : 1
  },
  "org.apache.hadoop.fs.FileUtil:copy(java.io.File,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)" : {
    "getName" : 2,
    "isFile" : 1,
    "canRead" : 1,
    "checkDest" : 1,
    "toPath" : 1,
    "newInputStream" : 1,
    "mkdirs" : 1,
    "closeStream" : 2,
    "create" : 1,
    "toString" : 2,
    "copy" : 1,
    "listFiles" : 1,
    "fullyDelete" : 1,
    "copyBytes" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:countNumOfAvailableNodes(java.lang.String,java.util.Collection)" : {
    "unlock" : 1,
    "getNumOfLeaves" : 3,
    "readLock" : 2,
    "normalize" : 1,
    "getPath" : 1,
    "lock" : 1,
    "getNode" : 2,
    "isNodeInScope" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:<init>(org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder,org.apache.hadoop.fs.FileSystem)" : {
    "getPermission" : 1,
    "getBlockSize" : 1,
    "getChecksumOpt" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkPathExists(java.nio.file.Path,java.lang.String)" : {
    "checkNotNull" : 1,
    "exists" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(org.apache.hadoop.fs.Path)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,byte[])" : {
    "build" : 1,
    "requireNonNull" : 2,
    "create" : 1,
    "write" : 1,
    "overwrite" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.BufferedFSInputStream:readVectored(java.util.List,java.util.function.IntFunction)" : {
    "readVectored" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:unreference(boolean)" : {
    "unreferenceCheckClosed" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createServiceURL(org.apache.hadoop.fs.Path)" : {
    "toExternalForm" : 1,
    "length" : 1,
    "endsWith" : 1,
    "toString" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.util.Shell:checkIsBashSupported()" : {
    "warn" : 2,
    "execute" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FilterFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "removeDefaultAcl" : 1
  },
  "org.apache.hadoop.ipc.Client$IpcStreams:<init>(java.net.Socket,int)" : {
    "setOutputStream" : 1,
    "setInputStream" : 1,
    "getOutputStream" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodecFactory:<init>(org.apache.hadoop.conf.Configuration)" : {
    "isEmpty" : 1,
    "newInstance" : 1,
    "getCodecClasses" : 1,
    "addCodec" : 3
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:joinElectionInternal()" : {
    "fatalError" : 1,
    "checkState" : 1,
    "createLockNodeAsync" : 1,
    "reEstablishSession" : 1
  },
  "org.apache.hadoop.io.retry.RetryProxy:create(java.lang.Class,java.lang.Object,java.util.Map)" : {
    "create" : 1
  },
  "org.apache.hadoop.service.launcher.InterruptEscalator:lookup(java.lang.String)" : {
    "getName" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(java.lang.String,java.lang.String,float)" : {
    "newGauge" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : {
    "comparator" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault$Emptier:ceiling(long,long)" : {
    "floor" : 1
  },
  "org.apache.hadoop.ipc.ProtocolSignature:getProtocolSignature(int,long,java.lang.Class)" : {
    "getSigFingerprint" : 1
  },
  "org.apache.hadoop.io.MapWritable:readFields(java.io.DataInput)" : {
    "readFields" : 3,
    "getClass" : 2,
    "getConf" : 2,
    "clear" : 1,
    "newInstance" : 2,
    "readByte" : 2,
    "readInt" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : { },
  "org.apache.hadoop.util.functional.RemoteIterators$WrappedJavaIterator:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.security.SaslPropertiesResolver:getClientProperties(java.net.InetAddress,int)" : {
    "getClientProperties" : 1
  },
  "org.apache.hadoop.fs.FilterFs:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : {
    "openFileWithOptions" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "readOnlyMountTable" : 1,
    "resolve" : 1,
    "createNonRecursive" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.PathExistsException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.metrics2.lib.MethodMetric:newImpl(org.apache.hadoop.metrics2.annotation.Metric$Type)" : {
    "newTag" : 2,
    "checkArg" : 1,
    "newGauge" : 2,
    "getReturnType" : 1,
    "newCounter" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.fs.FileSystem:open(org.apache.hadoop.fs.PathHandle)" : {
    "getInt" : 1,
    "getConf" : 1,
    "open" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_load(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getLocationNear(long)" : {
    "getBlockIndexNear" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getWorkFactor(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.ipc.Server:getQueueClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "convertQueueClass" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:validateFiles(java.lang.String)" : {
    "validateFiles" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:getInstance(java.lang.String)" : {
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.BytesWritable:set(org.apache.hadoop.io.BytesWritable)" : {
    "set" : 1
  },
  "org.apache.hadoop.io.BytesWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.ipc.Server$Handler:requeueCall(org.apache.hadoop.ipc.Server$Call)" : {
    "internalQueueCall" : 1,
    "doResponse" : 1,
    "incrRequeueCalls" : 1,
    "getCause" : 1,
    "getRpcStatusProto" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkValid(boolean,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRates:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "snapshot" : 1
  },
  "org.apache.hadoop.crypto.key.CachingKeyProvider:<init>(org.apache.hadoop.crypto.key.KeyProvider,long,long)" : { },
  "org.apache.hadoop.io.DefaultStringifier:fromString(java.lang.String)" : {
    "decodeBase64" : 1,
    "reset" : 1,
    "getBytes" : 1,
    "deserialize" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "fullPath" : 1,
    "access" : 1
  },
  "org.apache.hadoop.fs.Globber:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter,boolean)" : {
    "debug" : 1,
    "getTracer" : 1
  },
  "org.apache.hadoop.util.functional.FunctionalIO:toUncheckedIOExceptionSupplier(org.apache.hadoop.util.functional.CallableRaisingIOE)" : { },
  "org.apache.hadoop.fs.Path:getFileSystem(org.apache.hadoop.conf.Configuration)" : {
    "toUri" : 1,
    "get" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_maximums(java.io.Serializable)" : {
    "invoke" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:removeAcl(org.apache.hadoop.fs.Path)" : {
    "removeAcl" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue$Processor:tryStart()" : {
    "wait" : 1,
    "currentThread" : 1,
    "debug" : 1,
    "isRunning" : 1,
    "compareAndSet" : 2,
    "tryStop" : 1,
    "start" : 1,
    "checkState" : 1,
    "checkCalls" : 1,
    "isDebugEnabled" : 1,
    "kill" : 1
  },
  "org.apache.hadoop.io.WritableUtils:readVInt(java.io.DataInput)" : {
    "readVLong" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:clone()" : {
    "copy" : 1
  },
  "org.apache.hadoop.fs.FileSystem$DirListingIterator:next()" : {
    "fetchMore" : 1,
    "getEntries" : 2,
    "hasNext" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getTotalCallVolume()" : {
    "get" : 1,
    "getTotalCallVolume" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:clearNameMaps()" : {
    "monotonicNow" : 1,
    "clear" : 2
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:getFileSystem()" : {
    "get" : 1,
    "toString" : 3
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:connectToZooKeeper()" : {
    "addAuthInfo" : 1,
    "getAuth" : 1,
    "getScheme" : 1,
    "setZooKeeperRef" : 1,
    "createZooKeeper" : 1,
    "waitForZKConnectionEvent" : 1
  },
  "org.apache.hadoop.io.DefaultStringifier:loadArray(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.Class)" : {
    "add" : 1,
    "split" : 1,
    "get" : 1,
    "toArray" : 1,
    "isEmpty" : 1,
    "fromString" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,java.lang.String)" : {
    "add" : 1,
    "set" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getHomeDirectory(com.jcraft.jsch.ChannelSftp)" : {
    "pwd" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:cancelDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.Token,java.lang.String)" : {
    "getMessage" : 1,
    "doDelegationTokenOperation" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getValue(byte[])" : {
    "getValue" : 1
  },
  "org.apache.hadoop.ipc.RpcClientUtil:getProtocolMetaInfoProxy(java.lang.Object,org.apache.hadoop.conf.Configuration)" : {
    "getProxy" : 1,
    "getDefaultSocketFactory" : 1,
    "getInvocationHandler" : 1,
    "getConnectionId" : 1,
    "getProtocolMetaInfoProxy" : 1,
    "getProtocolEngine" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InnerCache:closeAll()" : {
    "values" : 1,
    "close" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:upperBound(org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "size" : 1,
    "upperBound" : 1
  },
  "org.apache.hadoop.fs.FileContext:makeQualified(org.apache.hadoop.fs.Path)" : {
    "getWorkingDirectory" : 1,
    "makeQualified" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:createSaslServer(org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : {
    "create" : 1,
    "getServerProperties" : 1
  },
  "org.apache.hadoop.fs.shell.Head:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "dumpToOffset" : 1,
    "toString" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.compress.SplitCompressionInputStream:<init>(java.io.InputStream,long,long)" : { },
  "org.apache.hadoop.metrics2.lib.MethodMetric$2:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "snapshot" : 1
  },
  "org.apache.hadoop.util.Shell:getQualifiedBin(java.lang.String)" : {
    "getHadoopHomeDir" : 1,
    "getQualifiedBinInner" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "checkAccessPermissions" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.conf.Configuration:loadProps(java.util.Properties,int,boolean)" : {
    "getKey" : 1,
    "entrySet" : 1,
    "get" : 1,
    "putAll" : 1,
    "loadResources" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.KDiag:validateHadoopTokenFiles(org.apache.hadoop.conf.Configuration)" : {
    "verifyFileIsValid" : 1,
    "println" : 3,
    "getProperty" : 2,
    "get" : 3,
    "getTrimmedStrings" : 1,
    "length" : 1,
    "verify" : 1,
    "title" : 1
  },
  "org.apache.hadoop.io.retry.CallReturn:<init>(java.lang.Object)" : { },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:hasCapability(java.lang.String)" : {
    "hasCapability" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class)" : {
    "comparator" : 1,
    "valueClass" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getFileLinkStatus" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:allowVerboseDump()" : {
    "allowVerboseDump" : 1
  },
  "org.apache.hadoop.fs.FsServerDefaults:<init>(long,int,int,short,int,boolean,long,org.apache.hadoop.util.DataChecksum$Type,java.lang.String,byte)" : { },
  "org.apache.hadoop.conf.Configuration:getStorageSize(java.lang.String,java.lang.String,org.apache.hadoop.conf.StorageUnit)" : {
    "getValue" : 1,
    "get" : 1,
    "isNotBlank" : 1,
    "checkState" : 1,
    "isBlank" : 1,
    "parse" : 1,
    "getUnit" : 1,
    "convertStorageUnit" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:addTokenForOwnerStats(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getOrDefault" : 1,
    "getTokenRealOwner" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator:<init>(java.lang.String)" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.io.VLongWritable:readFields(java.io.DataInput)" : {
    "readVLong" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndex:addEntry(org.apache.hadoop.io.file.tfile.BCFile$MetaIndexEntry)" : {
    "getMetaName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:processSaslToken(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto)" : {
    "debug" : 1,
    "getToken" : 1,
    "toByteArray" : 1,
    "buildSaslResponse" : 1,
    "hasToken" : 1,
    "evaluateResponse" : 1,
    "isComplete" : 1
  },
  "org.apache.hadoop.util.functional.TaskPool$Builder:resetStatisticsContext()" : {
    "setThreadIOStatisticsContext" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addServlet(java.lang.String,java.lang.String,java.lang.Class)" : {
    "addInternalServlet" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:decodeToken(org.apache.hadoop.security.token.Token,org.apache.hadoop.io.Text)" : {
    "readFields" : 1,
    "getIdentifier" : 1,
    "close" : 1
  },
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:init(java.lang.String)" : {
    "getValue" : 1,
    "getKey" : 2,
    "quote" : 3,
    "entrySet" : 2,
    "getValByRegex" : 2,
    "containsKey" : 1,
    "get" : 2,
    "replace" : 1,
    "endsWith" : 1,
    "getAclKey" : 1,
    "put" : 2
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeLong:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "addGauge" : 1,
    "clearChanged" : 1,
    "value" : 1,
    "info" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.ipc.Server:setLogSlowRPCThresholdTime(long)" : {
    "convert" : 1,
    "getMetricsTimeUnit" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getUri()" : {
    "getUri" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPInputStream:close()" : {
    "disconnect" : 1,
    "logout" : 1,
    "isConnected" : 1,
    "getReplyCode" : 1,
    "completePendingCommand" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues5(int,int)" : {
    "bsW" : 2,
    "write" : 2
  },
  "org.apache.hadoop.fs.FilterFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : {
    "mkdirs" : 1
  },
  "org.apache.hadoop.crypto.random.OsSecureRandom:nextBytes(byte[])" : {
    "fillReservoir" : 1,
    "min" : 1,
    "arraycopy" : 1
  },
  "org.apache.hadoop.io.VIntWritable:readFields(java.io.DataInput)" : {
    "readVInt" : 1
  },
  "org.apache.hadoop.fs.FileContext:getHomeDirectory()" : {
    "getHomeDirectory" : 1
  },
  "org.apache.hadoop.util.concurrent.AsyncGetFuture:isDone()" : {
    "callAsyncGet" : 1,
    "isDone" : 1
  },
  "org.apache.hadoop.io.Text:writeString(java.io.DataOutput,java.lang.String,int)" : {
    "encode" : 1,
    "array" : 1,
    "writeVInt" : 1,
    "limit" : 1,
    "write" : 1
  },
  "org.apache.hadoop.metrics2.util.Metrics2Util$NameValuePair:equals(java.lang.Object)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.fs.FilterFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "createSnapshot" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getPathInHar(org.apache.hadoop.fs.Path)" : {
    "getParent" : 2,
    "getName" : 2,
    "equals" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "toString" : 1,
    "compareTo" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Writer:hsync()" : {
    "hsync" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_load(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "load" : 1,
    "uncheckIOExceptions" : 1,
    "serializer" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:createConfiguration()" : { },
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : {
    "appendPrefix" : 1,
    "length" : 1,
    "update" : 1,
    "isSupportSparseMetrics" : 1,
    "getGangliaConfForMetric" : 2,
    "getValue" : 1,
    "getSlope" : 2,
    "setLength" : 2,
    "size" : 1,
    "emitMetric" : 2,
    "getType" : 2,
    "resetBuffer" : 1,
    "context" : 1,
    "name" : 3,
    "calculateSlope" : 2,
    "toString" : 5,
    "metricsEntrySet" : 2,
    "visit" : 2,
    "metrics" : 2,
    "value" : 2,
    "append" : 6
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkMerge(org.apache.hadoop.conf.Configuration,java.net.URI[])" : {
    "getDefaultMountTableName" : 1,
    "addLinkMerge" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$TableBuilder:isEmpty()" : {
    "size" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getTokens()" : {
    "unmodifiableCollection" : 1,
    "getAllTokens" : 1,
    "getCredentialsInternal" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker:call(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.io.Writable,long)" : {
    "call" : 1,
    "getDeclaringClassProtocolName" : 1,
    "getRequestHeader" : 1,
    "getClientProtocolVersion" : 1,
    "getMethodName" : 1
  },
  "org.apache.hadoop.net.DNS:getHosts(java.lang.String)" : {
    "getHosts" : 1
  },
  "org.apache.hadoop.io.SortedMapWritable:<init>()" : { },
  "org.apache.hadoop.fs.TrashPolicy:getInstance(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "getClass" : 1,
    "newInstance" : 1,
    "initialize" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:clone()" : { },
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor$SnappyDirectDecompressor:reset()" : {
    "reset" : 1
  },
  "org.apache.hadoop.security.KDiag:validateSasl(java.lang.String)" : {
    "getClass" : 1,
    "println" : 1,
    "getConf" : 2,
    "getTrimmed" : 1,
    "title" : 1
  },
  "org.apache.hadoop.util.RunJar:unJarAndSave(java.io.InputStream,java.io.File,java.lang.String,java.util.regex.Pattern)" : {
    "unJar" : 1,
    "ensureDirectory" : 1,
    "toPath" : 1,
    "newOutputStream" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path,boolean)" : {
    "add" : 1,
    "preserveInput" : 1,
    "merge" : 1,
    "getLen" : 1,
    "getFileStatus" : 1,
    "doSync" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getCached(int)" : {
    "add" : 1,
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.fs.Path:isAbsoluteAndSchemeAuthorityNull()" : {
    "getScheme" : 1,
    "isUriPathAbsolute" : 1,
    "getAuthority" : 1
  },
  "org.apache.hadoop.security.token.DtUtilShell$Print:execute()" : {
    "getOut" : 1,
    "getConf" : 1,
    "printTokenFile" : 1
  },
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter:doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" : {
    "addHeader" : 1,
    "doFilter" : 1,
    "forEach" : 1,
    "inferMimeType" : 1,
    "setContentType" : 3,
    "startsWith" : 2
  },
  "org.apache.hadoop.io.compress.SnappyCodec:createDecompressor()" : {
    "getInt" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getOwner()" : {
    "getOwner" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "mkdirsWithOptionalPermission" : 1
  },
  "org.apache.hadoop.conf.Configuration:setDouble(java.lang.String,double)" : {
    "set" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.SaslRpcServer:getIdentifier(java.lang.String,org.apache.hadoop.security.token.SecretManager)" : {
    "readFields" : 1,
    "initCause" : 1,
    "createIdentifier" : 1,
    "decodeIdentifier" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getCpuFrequency()" : {
    "readProcCpuInfoFile" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:pathToFile(org.apache.hadoop.fs.Path)" : {
    "pathToFile" : 1
  },
  "org.apache.hadoop.service.launcher.InterruptEscalator$ServiceForcedShutdown:<init>(org.apache.hadoop.service.Service,int)" : { },
  "org.apache.hadoop.ha.ShellCommandFencer:tryFence(org.apache.hadoop.ha.HAServiceTarget,java.lang.String)" : {
    "abbreviate" : 1,
    "setConfAsEnvVars" : 1,
    "getTransitionTargetHAStatus" : 1,
    "parseArgs" : 1,
    "start" : 3,
    "getInputStream" : 1,
    "warn" : 2,
    "environment" : 2,
    "getErrorStream" : 1,
    "addTargetInfoAsEnvVars" : 1,
    "tryGetPid" : 1,
    "getOutputStream" : 1,
    "join" : 2,
    "waitFor" : 1,
    "close" : 1,
    "info" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:getInfo(org.apache.hadoop.metrics2.annotation.Metric,java.lang.String)" : {
    "value" : 1,
    "info" : 3
  },
  "org.apache.hadoop.crypto.key.KeyProviderFactory:getProviders(org.apache.hadoop.conf.Configuration)" : {
    "add" : 1,
    "get" : 1,
    "getStringCollection" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:gauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "add" : 1,
    "newAttrInfo" : 1
  },
  "org.apache.hadoop.http.HttpServer2:toString()" : {
    "isAlive" : 1,
    "getPort" : 1,
    "isEmpty" : 1,
    "checkState" : 1,
    "toString" : 1,
    "getHost" : 1,
    "append" : 6
  },
  "org.apache.hadoop.io.serializer.JavaSerialization$JavaSerializationDeserializer:deserialize(java.lang.Object)" : {
    "toString" : 1,
    "readObject" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRatesWithAggregation(java.lang.String)" : {
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "name" : 2,
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:getBytesRead()" : {
    "checkStream" : 1,
    "getBytesRead" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getDefaultBlockSize()" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:<init>()" : {
    "getCurrentUser" : 1,
    "now" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatusInternal" : 1,
    "getSymlink" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:skip(long)" : {
    "incrementCounter" : 2,
    "skip" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:getLocationByRecordNum(long)" : {
    "upperBound" : 1,
    "get" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getAvailableVirtualMemorySize()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getBlockContainsKey(org.apache.hadoop.io.file.tfile.RawComparable,boolean)" : {
    "upperBound" : 1,
    "checkTFileDataIndex" : 1,
    "lowerBound" : 1,
    "isSorted" : 1
  },
  "org.apache.hadoop.util.VersionInfo:getRevision()" : {
    "_getRevision" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,int,short,long,boolean,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.io.SequenceFile$Metadata)" : {
    "repFac" : 1,
    "createWriter" : 1,
    "of" : 1,
    "getFileContext" : 1,
    "donotCreateParent" : 1,
    "createParent" : 1,
    "blockSize" : 1,
    "getUri" : 1,
    "bufferSize" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$2:createDecompressionStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int)" : { },
  "org.apache.hadoop.fs.FileContext:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:constructOldPath(org.apache.hadoop.fs.Path)" : {
    "toString" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:gracefulFailoverThroughZKFCs(org.apache.hadoop.ha.HAServiceTarget)" : {
    "getRpcTimeoutToNewActive" : 1,
    "println" : 2,
    "getZKFCProxy" : 1,
    "getConf" : 2,
    "getLocalizedMessage" : 1,
    "gracefulFailover" : 1
  },
  "org.apache.hadoop.conf.Configuration:asXmlDocument(java.lang.String,org.apache.hadoop.conf.ConfigRedactor)" : {
    "appendChild" : 4,
    "createTextNode" : 3,
    "isNullOrEmpty" : 1,
    "containsKey" : 1,
    "keys" : 1,
    "createElement" : 1,
    "newInstance" : 1,
    "hasMoreElements" : 1,
    "newDocumentBuilder" : 1,
    "handleDeprecation" : 1,
    "appendXMLProperty" : 2,
    "newDocument" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String[],javax.net.ssl.SSLSocket)" : {
    "startHandshake" : 1,
    "available" : 2,
    "check" : 1,
    "getPeerCertificates" : 1,
    "getInputStream" : 2,
    "getSession" : 3
  },
  "org.apache.hadoop.util.SysInfoLinux:getConf(java.lang.String)" : {
    "parseLong" : 1,
    "replace" : 1,
    "execute" : 1,
    "getOutput" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getCurrentKey(java.lang.String)" : {
    "doOp" : 1,
    "getCurrentKey" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.ha.HAServiceProtocolHelper:transitionToObserver(org.apache.hadoop.ha.HAServiceProtocol,org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : {
    "unwrapRemoteException" : 1,
    "transitionToObserver" : 1
  },
  "org.apache.hadoop.util.bloom.Key:<init>(byte[])" : { },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:isSymlink()" : {
    "isSymlink" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newCounter(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "name" : 2,
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:<init>(java.lang.String,java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:listStatusIterator(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "listStatusIterator" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "next" : 1,
    "isChecksumFile" : 1,
    "getPath" : 1,
    "hasNext" : 2,
    "listLocatedStatus" : 1,
    "getMyFs" : 1
  },
  "org.apache.hadoop.fs.GlobalStorageStatistics:put(java.lang.String,org.apache.hadoop.fs.GlobalStorageStatistics$StorageStatisticsProvider)" : {
    "getName" : 2,
    "checkNotNull" : 1,
    "provide" : 1,
    "equals" : 1,
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScannerByByteRange(long,long)" : { },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "tuple" : 1,
    "name" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,boolean)" : {
    "opt" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:createCheckpoint(org.apache.hadoop.fs.Path,java.util.Date)" : {
    "rename" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "format" : 1,
    "exists" : 1,
    "suffix" : 1,
    "info" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "extractKMSPath" : 1,
    "getInt" : 5,
    "init" : 1,
    "getDtService" : 1,
    "debug" : 1,
    "createServiceURL" : 1,
    "buildTokenService" : 1,
    "create" : 1,
    "getProtocol" : 1,
    "toString" : 1,
    "getFloat" : 1,
    "equalsIgnoreCase" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)" : {
    "offer" : 1,
    "signalNotEmpty" : 1,
    "get" : 1,
    "getPriorityLevel" : 1
  },
  "org.apache.hadoop.crypto.OpensslCipher:doFinal(java.nio.ByteBuffer)" : {
    "checkState" : 1,
    "checkArgument" : 1,
    "position" : 3,
    "isDirect" : 1,
    "remaining" : 1,
    "doFinal" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getEnclosingRoot(org.apache.hadoop.fs.Path)" : {
    "getEnclosingRoot" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:read()" : {
    "read" : 1,
    "checkStream" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:getNumParityUnits()" : {
    "getNumParityUnits" : 1
  },
  "org.apache.hadoop.fs.shell.Command:<init>()" : { },
  "org.apache.hadoop.fs.FileContext:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean)" : {
    "init" : 1,
    "getProxy" : 1,
    "isSecurityEnabled" : 1,
    "getProtocolEngine" : 1
  },
  "org.apache.hadoop.util.VersionInfo:getVersion()" : {
    "_getVersion" : 1
  },
  "org.apache.hadoop.ha.HealthMonitor:createProxy()" : {
    "getHealthMonitorProxy" : 1
  },
  "org.apache.hadoop.ha.SshFenceByTcpPort:doFence(com.jcraft.jsch.Session,java.net.InetSocketAddress)" : {
    "execCommand" : 2,
    "warn" : 3,
    "getPort" : 2,
    "getHostName" : 1,
    "info" : 5
  },
  "org.apache.hadoop.fs.shell.Delete$Rm:canBeSafelyDeleted(org.apache.hadoop.fs.shell.PathData)" : {
    "getLong" : 1,
    "println" : 1,
    "confirmPrompt" : 1,
    "getConf" : 1,
    "getFileCount" : 1,
    "getContentSummary" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "execCommand" : 1,
    "isAvailable" : 1,
    "getCanonicalPath" : 1,
    "pathToFile" : 2,
    "format" : 1,
    "chmod" : 1,
    "getSetPermissionCommand" : 1,
    "makeShellPath" : 1,
    "toShort" : 2
  },
  "org.apache.hadoop.metrics2.sink.PrometheusMetricsSink:getMetricKey(java.lang.String,org.apache.hadoop.metrics2.AbstractMetric,java.util.List)" : {
    "groupCount" : 1,
    "addAll" : 1,
    "find" : 1,
    "format" : 1,
    "name" : 1,
    "parseTopMetricsTags" : 1,
    "matcher" : 1,
    "group" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBzip2DecompressorType(org.apache.hadoop.conf.Configuration)" : {
    "isNativeBzip2Loaded" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile:getFSInputBufferSize(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBlockSize(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.util.DiskChecker:checkDirInternal(org.apache.hadoop.fs.LocalFileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "mkdirsWithExistsAndPermissionCheck" : 1,
    "checkAccessByFileMethods" : 1,
    "pathToFile" : 1
  },
  "org.apache.hadoop.ipc.Server$Listener:doStop()" : {
    "currentThread" : 1,
    "getName" : 1,
    "wakeup" : 1,
    "yield" : 1,
    "socket" : 1,
    "close" : 1,
    "shutdown" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:processTokenAddOrUpdate(byte[])" : {
    "readFields" : 1,
    "read" : 1,
    "readLong" : 1,
    "readInt" : 1,
    "createIdentifier" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:toString()" : {
    "length" : 2,
    "replace" : 1,
    "toString" : 1,
    "implies" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:save(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.Object,boolean)" : {
    "writeJsonAsBytes" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.FilterFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "checkPath" : 2,
    "rename" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "unsetStoragePolicy" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getNumInProcessHandler()" : {
    "getNumInProcessHandler" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "disconnect" : 1,
    "getFileStatus" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "getStartIndex" : 1,
    "getLength" : 1,
    "getFileHarStatus" : 1,
    "getPartName" : 1,
    "isDir" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedIO:bulkDelete_pageSize(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "createBulkDelete" : 1,
    "uncheckIOExceptions" : 1,
    "pageSize" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],java.lang.String[],long,long,boolean)" : { },
  "org.apache.hadoop.ipc.WritableRpcEngine$Invocation:<init>(java.lang.reflect.Method,java.lang.Object[])" : {
    "getProtocolName" : 1,
    "getProtocolVersion" : 1,
    "getDeclaringClass" : 4,
    "getName" : 1,
    "equals" : 1,
    "getParameterTypes" : 1,
    "getMethods" : 1,
    "getFingerprint" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : {
    "name" : 2,
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseDecayFactor(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "getDouble" : 2
  },
  "org.apache.hadoop.fs.shell.Command:processNonexistentPath(org.apache.hadoop.fs.shell.PathData)" : {
    "toString" : 1
  },
  "org.apache.hadoop.io.compress.lz4.Lz4Compressor:compress(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "min" : 2,
    "compressDirectBuf" : 1,
    "get" : 2,
    "limit" : 2,
    "clear" : 2,
    "position" : 2,
    "remaining" : 1
  },
  "org.apache.hadoop.util.IdentityHashStore:realloc(int)" : {
    "putInternal" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:write(byte[],int,int)" : {
    "checkClosed" : 1,
    "write1" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:toOctal()" : {
    "toShort" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:setFirstKey(byte[],int,int)" : {
    "arraycopy" : 1,
    "buffer" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:getPriorityLevel(org.apache.hadoop.ipc.Schedulable)" : {
    "max" : 1,
    "getIdentity" : 1,
    "cachedOrComputedPriorityLevel" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : {
    "checkPath" : 1,
    "primitiveMkdir" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_retrieve(java.lang.Object)" : {
    "retrieveIOStatistics" : 1,
    "iostatisticsSnapshot_create" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "disconnect" : 1,
    "getFileStatus" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderExtension:getCurrentKey(java.lang.String)" : {
    "getCurrentKey" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:isCacheSpaceAvailable(long,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.LocalDirAllocator)" : {
    "getUsableSpace" : 1,
    "deleteIfExists" : 1,
    "getTempFilePath" : 1,
    "toString" : 1,
    "error" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.serializer.JavaSerializationComparator:compare(java.lang.Object,java.lang.Object)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:readRecordLength()" : {
    "readFully" : 1,
    "getPos" : 2,
    "equals" : 1,
    "readInt" : 2
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:toString()" : {
    "isClassnameDefined" : 1,
    "toString" : 1,
    "append" : 6
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touchz:touchz(org.apache.hadoop.fs.shell.PathData)" : {
    "create" : 1,
    "close" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:getPathAsString()" : {
    "getPath" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : {
    "truncate" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.io.SequenceFile:getBufferSize(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.fs.FileSystem:createFileSystem(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "debug" : 1,
    "getScheme" : 2,
    "newScope" : 1,
    "get" : 1,
    "toString" : 1,
    "newInstance" : 1,
    "getFileSystemClass" : 1,
    "initialize" : 1,
    "cleanupWithLogger" : 1,
    "addKVAnnotation" : 1
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:<init>(int,int,int)" : {
    "buckets2words" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:getLength()" : {
    "getPos" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:uriToString(java.net.URI,boolean)" : {
    "getScheme" : 1,
    "isWindowsAbsolutePath" : 1,
    "toString" : 1,
    "getSchemeSpecificPart" : 1,
    "substring" : 1,
    "append" : 3
  },
  "org.apache.hadoop.fs.FileSystem$FSDataInputStreamBuilder:build()" : {
    "withStatus" : 1,
    "getOptionalKeys" : 1,
    "getBufferSize" : 1,
    "isPresent" : 1,
    "withBufferSize" : 1,
    "getPathHandle" : 1,
    "getStatus" : 1,
    "withOptionalKeys" : 1,
    "getInt" : 1,
    "withOptions" : 1,
    "getOptionalPath" : 1,
    "get" : 1,
    "getFS" : 2,
    "getMandatoryKeys" : 1,
    "withMandatoryKeys" : 1,
    "getOptions" : 2,
    "openFileWithOptions" : 2
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:getBufferSize(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,long,long,int)" : { },
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:adjustPriorityQueue(org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor)" : {
    "pop" : 1,
    "nextRawKey" : 1,
    "getPosition" : 2,
    "updateProgress" : 1,
    "cleanup" : 1,
    "adjustTop" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:removeStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "warn" : 1,
    "getSequenceNumber" : 1,
    "deleteToken" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:<init>(org.apache.hadoop.fs.AbstractFileSystem)" : {
    "getBytesPerChecksum" : 1,
    "getMyFs" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:cloneStatus()" : {
    "getReplication" : 1,
    "getBlockSize" : 1,
    "getLen" : 1,
    "getPath" : 1,
    "getModificationTime" : 1,
    "getAccessTime" : 1,
    "getSymlink" : 1,
    "isSymlink" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.security.token.Token:encodeToUrlString()" : {
    "encodeWritable" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:meanStatistics()" : {
    "getWrapped" : 1,
    "meanStatistics" : 1
  },
  "org.apache.hadoop.fs.StorageType:getTypesSupportingQuota()" : {
    "getNonTransientTypes" : 1
  },
  "org.apache.hadoop.util.Shell$ShellTimeoutTimerTask:<init>(org.apache.hadoop.util.Shell)" : { },
  "org.apache.hadoop.io.AbstractMapWritable:readFields(java.io.DataInput)" : {
    "currentThread" : 1,
    "readUTF" : 1,
    "getContextClassLoader" : 1,
    "loadClass" : 1,
    "addToMap" : 1,
    "readByte" : 2
  },
  "org.apache.hadoop.ha.HAAdmin:parseOpts(java.lang.String,org.apache.commons.cli.Options,java.lang.String[])" : {
    "parseOpts" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:isAvailable()" : {
    "isNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:listStatus(org.apache.hadoop.fs.Path)" : {
    "fixFileStatus" : 1,
    "resolve" : 1,
    "getChrootedPath" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod$1:<init>(java.lang.reflect.Method,java.lang.String)" : { },
  "org.apache.hadoop.io.SequenceFile$Writer:writeFileHeader()" : {
    "getClass" : 1,
    "getName" : 3,
    "flush" : 1,
    "writeString" : 3,
    "write" : 3,
    "isCompressed" : 2,
    "writeBoolean" : 2,
    "isBlockCompressed" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:write(java.io.DataOutput)" : {
    "writeInt" : 3,
    "write" : 2
  },
  "org.apache.hadoop.ha.FailoverController:getGracefulFenceTimeout(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "name" : 2,
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "hasPathCapability" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:getBytesWritten()" : {
    "checkStream" : 1,
    "getBytesWritten" : 1
  },
  "org.apache.hadoop.fs.FileUtil:unTar(java.io.File,java.io.File)" : {
    "unTarUsingTar" : 1,
    "mkdirs" : 1,
    "unTarUsingJava" : 1,
    "endsWith" : 1,
    "toString" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:openFile(org.apache.hadoop.fs.PathHandle)" : {
    "openFile" : 1
  },
  "org.apache.hadoop.fs.shell.Count:processOptions(java.util.LinkedList)" : {
    "add" : 1,
    "getOptValue" : 1,
    "isEmpty" : 1,
    "addOptionWithValue" : 1,
    "parse" : 1,
    "getStorageTypeHeader" : 1,
    "getHeader" : 2,
    "println" : 2,
    "getAndCheckStorageTypes" : 1,
    "getOpt" : 7,
    "getSnapshotHeader" : 1,
    "toString" : 1,
    "append" : 6,
    "getErasureCodingPolicyHeader" : 1
  },
  "org.apache.hadoop.fs.VectoredReadUtils:validateAndSortRanges(java.util.List,java.util.Optional)" : {
    "debug" : 1,
    "size" : 2,
    "get" : 3,
    "getOffset" : 4,
    "isEmpty" : 1,
    "requireNonNull" : 1,
    "isPresent" : 1,
    "getLength" : 2,
    "checkArgument" : 1,
    "validateRangeRequest" : 2,
    "sortRangeList" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getQuotaUsage(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getQuotaUsage" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawEncoder:preferDirectBuffer()" : { },
  "org.apache.hadoop.tools.TableListing$Builder:addField(java.lang.String,org.apache.hadoop.tools.TableListing$Justification,boolean)" : {
    "add" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$CloseRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator,java.io.Closeable)" : {
    "requireNonNull" : 1
  },
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getRequestURL()" : {
    "getRequestURL" : 1,
    "quoteHtmlChars" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:<init>()" : {
    "setRecursive" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkGreaterOrEqual(long,java.lang.String,long,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:waitForCompletion(org.apache.hadoop.ipc.RetryCache,byte[],int)" : {
    "skipRetryCache" : 1,
    "newEntry" : 1,
    "waitForCompletion" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:removeGroup(java.lang.String)" : {
    "isAllAllowed" : 1,
    "isWildCardACLValue" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:quitElection(boolean)" : {
    "tryDeleteOwnBreadCrumbNode" : 1,
    "reset" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:prepareAppendValue(int)" : {
    "name" : 1,
    "getChunkBufferSize" : 1
  },
  "org.apache.hadoop.fs.Globber:glob()" : {
    "doGlob" : 1,
    "newScope" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "close" : 1,
    "addKVAnnotation" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:monitorHealth()" : {
    "ipc" : 1,
    "monitorHealth" : 1
  },
  "org.apache.hadoop.fs.VectoredReadUtils:sortRanges(java.util.List)" : {
    "toArray" : 1,
    "sortRangeList" : 1
  },
  "org.apache.hadoop.fs.FilterFs:truncate(org.apache.hadoop.fs.Path,long)" : {
    "checkPath" : 1,
    "truncate" : 1
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touchz:processNonexistentPath(org.apache.hadoop.fs.shell.PathData)" : {
    "withFullyQualifiedPath" : 1,
    "parentExists" : 1,
    "toUri" : 1,
    "toString" : 2,
    "touchz" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:flushBuffer()" : {
    "flushBuffer" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setGauge(java.lang.String,long)" : {
    "setAtomicLong" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.StorageType:parseStorageType(java.lang.String)" : {
    "valueOf" : 1,
    "toUpperCase" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$AppendToFile:processArguments(java.util.LinkedList)" : {
    "toPath" : 1,
    "newInputStream" : 1,
    "size" : 1,
    "closeStream" : 2,
    "toFile" : 1,
    "create" : 1,
    "close" : 1,
    "copyBytes" : 2,
    "append" : 2
  },
  "org.apache.hadoop.util.LimitInputStream:<init>(java.io.InputStream,long)" : {
    "checkNotNull" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkLessOrEqual(long,java.lang.String,long,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme$ChildFsGetter:getNewInstance(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "debug" : 1,
    "getScheme" : 1,
    "equals" : 1,
    "newInstance" : 1,
    "isDebugEnabled" : 1,
    "createFileSystem" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:removeStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "removeStoredToken" : 1
  },
  "org.apache.hadoop.ipc.Client:call(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable,org.apache.hadoop.ipc.Client$ConnectionId,java.util.concurrent.atomic.AtomicBoolean)" : {
    "call" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getLoginUser()" : {
    "ensureInitialized" : 1,
    "compareAndSet" : 1,
    "get" : 2,
    "createLoginUser" : 1,
    "spawnAutoRenewalThreadForUserCreds" : 1
  },
  "org.apache.hadoop.fs.BufferedFSInputStream:read(long,byte[],int,int)" : {
    "read" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "resolvePath" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrReceivedBytes(int)" : {
    "incr" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:setPriorityLevel(org.apache.hadoop.security.UserGroupInformation,int)" : {
    "newSchedulable" : 1,
    "min" : 1,
    "getIdentity" : 1,
    "put" : 1,
    "info" : 1
  },
  "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec:calculateIV(byte[],long,byte[])" : {
    "getCipherSuite" : 1,
    "getAlgorithmBlockSize" : 1,
    "calculateIV" : 1
  },
  "org.apache.hadoop.fs.shell.find.Name$Iname:<init>()" : { },
  "org.apache.hadoop.io.OutputBuffer:getLength()" : {
    "getLength" : 1
  },
  "org.apache.hadoop.fs.FilterFs:<init>(org.apache.hadoop.fs.AbstractFileSystem)" : {
    "getScheme" : 1,
    "getUriDefaultPort" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.fs.FilterFileSystem:copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyFromLocalFile" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:<init>(org.apache.hadoop.io.erasurecode.ECBlock[],int[],org.apache.hadoop.io.erasurecode.ECBlock[],org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder,org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder)" : {
    "initPiggyBackIndexWithoutPBVec" : 1,
    "initPiggyBackFullIndexVec" : 1,
    "getNumDataUnits" : 2,
    "getNumParityUnits" : 2
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:<init>(int,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "scheduleAtFixedRate" : 1,
    "init" : 1,
    "parseDecayFactor" : 1,
    "parseBackOffResponseTimeThreshold" : 1,
    "parseBackOffByResponseTimeEnabled" : 1,
    "recomputeScheduleCache" : 1,
    "checkArgument" : 1,
    "parseIdentityProvider" : 1,
    "parseThresholds" : 1,
    "getInt" : 1,
    "parseCostProvider" : 1,
    "parseServiceUserNames" : 1,
    "create" : 1,
    "getInstance" : 1,
    "parseDecayPeriodMillis" : 1,
    "getMetricsTimeUnit" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable:<init>(java.lang.Class)" : {
    "checkPrimitive" : 1
  },
  "org.apache.hadoop.util.GenericsUtil:toArray(java.util.List)" : {
    "getClass" : 1,
    "get" : 1,
    "toArray" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping:cacheGroupsRefresh()" : {
    "cacheGroupsAdd" : 1,
    "clear" : 1,
    "getNetgroupNames" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "renameInternal" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getPermissions(org.apache.commons.net.ftp.FTPFile)" : {
    "getFsAction" : 3
  },
  "org.apache.hadoop.fs.FSInputChecker:read()" : {
    "fill" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:write(java.io.DataOutput)" : {
    "writeShort" : 1,
    "toShort" : 1
  },
  "org.apache.hadoop.security.token.delegation.DelegationKey:write(java.io.DataOutput)" : {
    "writeVInt" : 3,
    "writeVLong" : 1,
    "write" : 1
  },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:<init>(int,org.apache.hadoop.crypto.CipherSuite)" : {
    "getName" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.util.StringUtils:getFormattedTimeWithDiff(java.lang.String,long,long)" : {
    "formatTimeDiff" : 1,
    "toString" : 1,
    "append" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "toPath" : 1,
    "fromMillis" : 2,
    "getFileAttributeView" : 1,
    "pathToFile" : 1,
    "setTimes" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "createSymlink" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : { },
  "org.apache.hadoop.util.curator.ZKCuratorManager:create(java.lang.String,java.util.List)" : {
    "withACL" : 1,
    "withMode" : 1,
    "create" : 1,
    "exists" : 1,
    "forPath" : 1
  },
  "org.apache.hadoop.fs.FileSystem:isDirectory(org.apache.hadoop.fs.Path)" : {
    "getFileStatus" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:appendRaw(byte[],int,int,org.apache.hadoop.io.SequenceFile$ValueBytes)" : {
    "writeInt" : 2,
    "checkAndWriteSync" : 1,
    "writeUncompressedBytes" : 1,
    "getSize" : 1,
    "write" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:checkKey(org.apache.hadoop.io.WritableComparable)" : {
    "readFields" : 1,
    "compare" : 1,
    "getLength" : 1,
    "reset" : 2,
    "write" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.io.Text:getTextLength()" : {
    "length" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:getCurrentTrashDir(org.apache.hadoop.fs.Path)" : {
    "getTrashRoot" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:getNode(java.lang.String)" : {
    "getLoc" : 1,
    "unlock" : 1,
    "equals" : 1,
    "normalize" : 1,
    "readLock" : 2,
    "lock" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:encodeData(byte[],java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : {
    "get" : 18,
    "position" : 2,
    "gfMulTab" : 1,
    "put" : 9,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockManager:release(org.apache.hadoop.fs.impl.prefetch.BufferData)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.tracing.Tracer$Builder:build()" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.crypto.CryptoOutputStream:hasCapability(java.lang.String)" : {
    "hasCapability" : 1
  },
  "org.apache.hadoop.conf.Configuration$Parser:handleStartElement()" : {
    "setLength" : 1,
    "getLocalName" : 1,
    "handleInclude" : 1,
    "handleStartProperty" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:setPath(org.apache.hadoop.fs.Path)" : {
    "setPath" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getFsStatus(org.apache.hadoop.fs.Path)" : {
    "getFsStatus" : 1
  },
  "org.apache.hadoop.fs.LocatedFileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.BlockLocation[])" : {
    "getEncryptedBit" : 1,
    "getAclBit" : 1,
    "getErasureCodedBit" : 1
  },
  "org.apache.hadoop.fs.FsUrlStreamHandlerFactory:createURLStreamHandler(java.lang.String)" : {
    "debug" : 4,
    "containsKey" : 1,
    "get" : 1,
    "getFileSystemClass" : 1,
    "put" : 1
  },
  "org.apache.hadoop.conf.Configuration:getDeprecatedKeyInfo(java.lang.String)" : {
    "get" : 2,
    "getDeprecatedKeyMap" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getFileSystemClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "findClassLocation" : 1,
    "debug" : 8,
    "get" : 1,
    "findContainingJar" : 1,
    "isDebugEnabled" : 1,
    "loadFileSystems" : 1
  },
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter:getProxyuserConfiguration(javax.servlet.FilterConfig)" : {
    "set" : 1,
    "getInitParameter" : 1,
    "hasMoreElements" : 1,
    "getInitParameterNames" : 1,
    "startsWith" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:sourceName(java.lang.String,boolean)" : {
    "newSourceName" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:hsync()" : {
    "flush" : 1,
    "sync" : 1,
    "getFD" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getContentSummary(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getContentSummary" : 1
  },
  "org.apache.hadoop.ipc.Server$ConnectionManager:register(java.nio.channels.SocketChannel,int,boolean)" : {
    "add" : 1,
    "debug" : 1,
    "size" : 2,
    "now" : 1,
    "isFull" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getKeyVersion(java.lang.String)" : {
    "getKeyVersion" : 1,
    "doOp" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:readBlock(org.apache.hadoop.fs.impl.prefetch.BufferData,boolean,org.apache.hadoop.fs.impl.prefetch.BufferData$State[])" : {
    "setReady" : 2,
    "prefetchOperationStarted" : 1,
    "getStartOffset" : 1,
    "read" : 1,
    "incrementAndGet" : 1,
    "getBuffer" : 2,
    "prefetchOperationCompleted" : 1,
    "getBlockData" : 2,
    "prefetch" : 1,
    "clear" : 1,
    "getRead" : 1,
    "containsBlock" : 1,
    "stateEqualsOneOf" : 1,
    "failed" : 1,
    "setDone" : 1,
    "getSize" : 1,
    "getCached" : 1,
    "get" : 1,
    "getBlockNumber" : 5,
    "throwIfStateIncorrect" : 1,
    "end" : 1,
    "flip" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:openFile(org.apache.hadoop.fs.Path)" : {
    "openFile" : 1
  },
  "org.apache.hadoop.conf.StorageUnit$6:getDefault(double)" : { },
  "org.apache.hadoop.security.KDiag$KerberosDiagsFailure:<init>(java.lang.String,java.lang.String,java.lang.Object[])" : {
    "format" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:writeJson(java.lang.Object,java.io.OutputStream)" : {
    "writer" : 1,
    "writeValue" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.fs.FileSystem$Statistics)" : { },
  "org.apache.hadoop.io.retry.AsyncCallHandler:getAsyncReturn()" : {
    "set" : 1,
    "get" : 1,
    "getLowerLayerAsyncReturn" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:init(javax.servlet.FilterConfig)" : {
    "setExternalDelegationTokenSecretManager" : 1,
    "init" : 1,
    "getAttribute" : 1,
    "refreshSuperUserGroupsConfiguration" : 1,
    "getServletContext" : 1,
    "getProxyuserConfiguration" : 1,
    "setHandlerAuthMethod" : 2,
    "getAuthenticationHandler" : 2
  },
  "org.apache.hadoop.fs.ChecksumFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "getChecksumFile" : 2,
    "rename" : 4,
    "exists" : 1,
    "getMyFs" : 4,
    "isDirectory" : 2
  },
  "org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB:refreshUserToGroupsMappings()" : {
    "refreshUserToGroupsMappings" : 1,
    "ipc" : 1
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:decompress(byte[],int,int)" : {
    "executeHeaderState" : 1,
    "inflate" : 1,
    "getRemaining" : 1,
    "update" : 1,
    "getMessage" : 1,
    "finished" : 1,
    "executeTrailerState" : 1,
    "setInput" : 1
  },
  "org.apache.hadoop.util.StopWatch:<init>()" : { },
  "org.apache.hadoop.io.nativeio.NativeIO:getCreateForWriteFileOutputStream(java.io.File,int)" : {
    "getErrno" : 1,
    "getCanonicalPath" : 2,
    "getAbsolutePath" : 1,
    "getErrorCode" : 1,
    "chmod" : 1,
    "open" : 1,
    "createFile" : 1
  },
  "org.apache.hadoop.security.alias.LocalJavaKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.io.retry.RetryUtils$WrapperRetryPolicy:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.fs.FileSystem:copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : {
    "getConf" : 1,
    "getLocal" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.io.ArrayFile$Writer:append(org.apache.hadoop.io.Writable)" : {
    "set" : 1,
    "get" : 1,
    "append" : 1
  },
  "org.apache.hadoop.io.VLongWritable:write(java.io.DataOutput)" : {
    "writeVLong" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:trackInvocation(org.apache.hadoop.util.functional.InvocationRaisingIOE,java.lang.String,org.apache.hadoop.metrics2.lib.MutableRate)" : {
    "add" : 1,
    "monotonicNow" : 2,
    "incr" : 1,
    "trackDurationOfInvocation" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$TicketCacheRenewalRunnable:relogin()" : {
    "execCommand" : 1,
    "debug" : 1,
    "reloginFromTicketCache" : 1
  },
  "org.apache.hadoop.fs.Options$CreateOpts:repFac(short)" : { },
  "org.apache.hadoop.security.SaslRpcClient:saslConnect(org.apache.hadoop.ipc.Client$IpcStreams)" : {
    "createSaslReply" : 2,
    "readResponse" : 1,
    "evaluateChallenge" : 1,
    "selectSaslClient" : 1,
    "getMethod" : 1,
    "getStatus" : 1,
    "getDefaultInstance" : 2,
    "getExceptionClassName" : 1,
    "addAuths" : 1,
    "getAuthsList" : 1,
    "clearChallenge" : 1,
    "saslEvaluateToken" : 2,
    "getCallId" : 1,
    "getErrorMsg" : 1,
    "sendSaslMessage" : 2,
    "valueOf" : 1,
    "getChallenge" : 1,
    "newBuilder" : 1,
    "remaining" : 1,
    "getValue" : 2,
    "getState" : 2,
    "hasChallenge" : 1,
    "build" : 2,
    "toByteArray" : 1,
    "hasInitialResponse" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.ipc.Server:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.String,java.net.InetAddress)" : {
    "getConf" : 2,
    "getProtocolClass" : 1,
    "authorize" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getCpuUsagePercentage()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:getNodeGroup(java.lang.String)" : {
    "getNetworkLocation" : 3,
    "unlock" : 1,
    "normalize" : 1,
    "readLock" : 2,
    "isEmpty" : 1,
    "getNodeGroup" : 1,
    "isRack" : 1,
    "lock" : 1,
    "getNode" : 1,
    "isNodeGroup" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:add(java.lang.String,long)" : {
    "add" : 2,
    "get" : 1,
    "newRate" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.UTF8:skip(java.io.DataInput)" : {
    "skipFully" : 1,
    "readUnsignedShort" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:toString()" : {
    "toString" : 1
  },
  "org.apache.hadoop.util.LineReader:<init>(java.io.InputStream,org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:loadFullUserMap()" : {
    "monotonicNow" : 1,
    "create" : 1,
    "updateMapInternal" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:initHM()" : {
    "start" : 1,
    "addServiceStateCallback" : 1,
    "addCallback" : 1
  },
  "org.apache.hadoop.fs.FileContext:createMultipartUploader(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "createMultipartUploader" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState)" : {
    "resetOutputBuffers" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:<init>(org.apache.hadoop.fs.impl.prefetch.BlockManagerParameters)" : {
    "getBufferPoolSize" : 2,
    "getTrackerFactory" : 1,
    "getConf" : 1,
    "createCache" : 1,
    "getBlockData" : 3,
    "setDebug" : 1,
    "getPrefetchingStatistics" : 1,
    "getFileSize" : 1,
    "checkPositiveInteger" : 1,
    "getBlockSize" : 1,
    "getLocalDirAllocator" : 1,
    "requireNonNull" : 3,
    "getMaxBlocksCount" : 1,
    "getFuturePool" : 1
  },
  "org.apache.hadoop.security.KDiag:warn(java.lang.String,java.lang.String,java.lang.Object[])" : {
    "println" : 1,
    "format" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$StreamOption:<init>(org.apache.hadoop.fs.FSDataOutputStream)" : { },
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:diskCheckFailed()" : {
    "set" : 1,
    "incr" : 1,
    "nanoTime" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:shutdown()" : {
    "warn" : 1,
    "debug" : 2,
    "stop" : 1,
    "unregister" : 1,
    "clear" : 4,
    "info" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient$WrappedInputStream:read(byte[],int,int)" : {
    "readNextRpcPacket" : 1,
    "min" : 1,
    "get" : 1,
    "remaining" : 2
  },
  "org.apache.hadoop.ipc.Server:isServerFailOverEnabledByQueue()" : {
    "isServerFailOverEnabledByQueue" : 1
  },
  "org.apache.hadoop.ipc.Server:buildNegotiateResponse(java.util.List)" : {
    "setMethod" : 1,
    "setMechanism" : 1,
    "contains" : 1,
    "size" : 1,
    "build" : 1,
    "setServerId" : 1,
    "setProtocol" : 1,
    "setState" : 2,
    "toString" : 1,
    "addAuthsBuilder" : 1,
    "newBuilder" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:fatalError(java.lang.String)" : {
    "reset" : 1,
    "error" : 1,
    "notifyFatalError" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderDelegationTokenExtension:createKeyProviderDelegationTokenExtension(org.apache.hadoop.crypto.key.KeyProvider)" : { },
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementReadOps(int)" : {
    "getThreadStatistics" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:write(byte[],int,int)" : {
    "min" : 1,
    "remainingCapacity" : 1,
    "write" : 2
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getPath()" : {
    "getPath" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:permission(org.apache.hadoop.fs.permission.FsPermission)" : {
    "checkNotNull" : 1,
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:getDirContext()" : {
    "getClass" : 1,
    "currentThread" : 3,
    "getName" : 1,
    "getContextClassLoader" : 1,
    "valueOf" : 2,
    "setConfigurations" : 1,
    "get" : 2,
    "getClassLoader" : 1,
    "setContextClassLoader" : 2,
    "put" : 9
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getCallVolumeSummary()" : {
    "getCallVolumeSummary" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(java.lang.String,java.lang.String)" : {
    "checkNotNull" : 1,
    "isEmpty" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:close()" : {
    "skip" : 1,
    "checkEOF" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:toString(boolean,boolean,boolean,boolean,java.util.List)" : {
    "formatSize" : 6,
    "getTypesQuotaUsage" : 1,
    "format" : 2,
    "getQuotaUsage" : 1
  },
  "org.apache.hadoop.fs.FileSystem:resolvePath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getFileStatus" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$AppendToFile:expandArgument(java.lang.String)" : {
    "add" : 2,
    "getConf" : 2,
    "equals" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.util.LineReader:readLine(org.apache.hadoop.io.Text,int,int)" : {
    "readDefaultLine" : 1,
    "readCustomLine" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.io.SequenceFile$Metadata)" : {
    "init" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:startLocalOutput(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "startLocalOutput" : 1
  },
  "org.apache.hadoop.util.XMLUtils:setOptionalSecureTransformerAttributes(javax.xml.transform.TransformerFactory)" : {
    "bestEffortSetAttribute" : 2
  },
  "org.apache.hadoop.ipc.RpcClientUtil:convertProtocolSignatureProtos(java.util.List)" : {
    "getVersion" : 2,
    "size" : 1,
    "getMethodsList" : 2,
    "put" : 1
  },
  "org.apache.hadoop.crypto.random.OpensslSecureRandom:next(int)" : {
    "checkArgument" : 1,
    "nextBytes" : 1
  },
  "org.apache.hadoop.fs.FSDataInputStream:readVectored(java.util.List,java.util.function.IntFunction)" : {
    "readVectored" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "getStoragePolicy" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getUsed()" : {
    "getUsed" : 1
  },
  "org.apache.hadoop.fs.Globber:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter,boolean)" : {
    "debug" : 1,
    "getConf" : 1,
    "get" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:<init>(int)" : {
    "debug" : 1,
    "valueOf" : 1,
    "toString" : 1,
    "tag" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "create" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:createCheckpoint()" : {
    "createCheckpoint" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:finish()" : {
    "internalReset" : 1,
    "finish" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState:convertToByteArrayState()" : {
    "array" : 2,
    "arrayOffset" : 2,
    "position" : 2
  },
  "org.apache.hadoop.io.compress.GzipCodec$GzipZlibDecompressor:<init>()" : { },
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:create(org.apache.hadoop.ipc.RetryCache)" : {
    "instance" : 1,
    "register" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.XORErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.FileContext:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "getXAttr" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:<init>(org.apache.hadoop.fs.viewfs.InodeTree$INodeDir,long,org.apache.hadoop.security.UserGroupInformation,java.net.URI,org.apache.hadoop.fs.viewfs.InodeTree,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.HarFileSystem:archivePath(org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "depth" : 1,
    "endsWith" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.util.LightWeightResizableGSet:remove(java.lang.Object)" : {
    "remove" : 1
  },
  "org.apache.hadoop.io.ReadaheadPool$ReadaheadRequestImpl:run()" : {
    "valid" : 1,
    "warn" : 1,
    "getCacheManipulator" : 1,
    "posixFadviseIfPossible" : 1
  },
  "org.apache.hadoop.fs.FilterFs:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "checkPath" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:processPathArgument(org.apache.hadoop.fs.shell.PathData)" : {
    "getTargetPath" : 1,
    "makeQualified" : 2,
    "equals" : 2,
    "processPathArgument" : 1,
    "endsWith" : 1,
    "toString" : 6,
    "setTargetPath" : 2,
    "isDirectory" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec:getCompressorType()" : {
    "getBzip2CompressorType" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:<init>()" : { },
  "org.apache.hadoop.fs.permission.AclEntry:parseAclEntry(java.lang.String,boolean)" : {
    "setName" : 1,
    "split" : 1,
    "build" : 1,
    "valueOf" : 1,
    "equals" : 1,
    "isEmpty" : 1,
    "toUpperCase" : 1,
    "getFsAction" : 1,
    "setPermission" : 1,
    "setType" : 1,
    "setScope" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getTokenInfoFromZK(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier,boolean)" : {
    "getSequenceNumber" : 1,
    "getTokenInfoFromZK" : 1,
    "getNodePath" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:gauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "add" : 1,
    "newAttrInfo" : 1
  },
  "org.apache.hadoop.io.WritableComparator:compare(byte[],int,int,byte[],int,int)" : {
    "readFields" : 2,
    "compare" : 1,
    "reset" : 3
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:mainSort()" : {
    "mainQSort3" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getUriPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "makeAbsolute" : 1
  },
  "org.apache.hadoop.io.EnumSetWritable:readFields(java.io.DataInput)" : {
    "add" : 1,
    "loadClass" : 1,
    "of" : 1,
    "readString" : 1,
    "noneOf" : 1,
    "readInt" : 1,
    "readObject" : 2
  },
  "org.apache.hadoop.ipc.RPC:setProtocolEngine(org.apache.hadoop.conf.Configuration,java.lang.Class,java.lang.Class)" : {
    "getName" : 2,
    "setClass" : 1,
    "get" : 1
  },
  "org.apache.hadoop.io.WritableUtils:clone(org.apache.hadoop.io.Writable,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "newInstance" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.fs.FSInputChecker:readChecksumChunk(byte[],int,int)" : {
    "needChecksum" : 1,
    "readChunk" : 1,
    "seekToNewSource" : 1,
    "verifySums" : 1,
    "seek" : 1,
    "byteToHexString" : 1,
    "info" : 1
  },
  "org.apache.hadoop.crypto.key.KeyShell$InvalidateCacheCommand:execute()" : {
    "getOut" : 3,
    "printProviderWritten" : 1,
    "println" : 3,
    "warnIfTransientProvider" : 1,
    "invalidateCache" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseDecayPeriodMillis(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getLong" : 2,
    "warn" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:addInternal(org.apache.hadoop.ipc.Schedulable,boolean)" : {
    "add" : 1,
    "get" : 1,
    "isClientBackoffEnabled" : 1,
    "throwBackoff" : 2,
    "shouldBackOff" : 1
  },
  "org.apache.hadoop.security.KDiag:main(java.lang.String[])" : {
    "halt" : 1,
    "exit" : 1,
    "toString" : 2,
    "terminate" : 1,
    "error" : 2,
    "exec" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getUriPath(org.apache.hadoop.fs.Path)" : {
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:mkdirsWithOptionalPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "getCanonicalPath" : 1,
    "getParent" : 1,
    "mkdirs" : 1,
    "pathToFile" : 2,
    "exists" : 3,
    "mkOneDirWithMode" : 1,
    "isDirectory" : 3
  },
  "org.apache.hadoop.io.erasurecode.ErasureCoderOptions:<init>(int,int)" : { },
  "org.apache.hadoop.io.MapFile:fix(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,boolean,org.apache.hadoop.conf.Configuration)" : {
    "next" : 1,
    "getValueClass" : 2,
    "set" : 1,
    "getName" : 4,
    "getKeyClass" : 2,
    "keyClass" : 1,
    "newInstance" : 2,
    "getInt" : 1,
    "createWriter" : 1,
    "getPosition" : 3,
    "file" : 2,
    "equals" : 2,
    "exists" : 2,
    "valueClass" : 1,
    "close" : 2,
    "append" : 1,
    "isBlockCompressed" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:newSink(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.impl.MetricsConfig)" : {
    "getPlugin" : 1,
    "newSink" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:openFile(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus,java.lang.String)" : {
    "openFileOnInstance" : 1,
    "instance" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:measureDurationOfInvocation(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String,org.apache.hadoop.util.functional.InvocationRaisingIOE)" : {
    "apply" : 1,
    "asDuration" : 1,
    "failed" : 1,
    "createTracker" : 1,
    "close" : 1
  },
  "org.apache.hadoop.util.OperationDuration:toString()" : {
    "getDurationString" : 1
  },
  "org.apache.hadoop.ipc.Server:updateDeferredMetrics(java.lang.String,long)" : {
    "addDeferredRpcProcessingTime" : 1,
    "addDeferredProcessingTime" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat:copyTo(org.apache.hadoop.metrics2.util.SampleStat)" : {
    "reset" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:transitionToObserver(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ha.proto.HAServiceProtocolProtos$TransitionToObserverRequestProto)" : {
    "convert" : 1,
    "transitionToObserver" : 1,
    "getReqInfo" : 1
  },
  "org.apache.hadoop.util.Shell:getCheckProcessIsAliveCommand(java.lang.String)" : {
    "getSignalKillCommand" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getKeysMetadata(java.lang.String[])" : {
    "parseJSONMetadata" : 1,
    "add" : 1,
    "call" : 1,
    "size" : 1,
    "toArray" : 1,
    "createConnection" : 1,
    "createURL" : 1,
    "put" : 1,
    "createKeySets" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getMountPoints()" : {
    "size" : 2,
    "get" : 2,
    "getMountPoints" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:<init>(java.net.URI[],org.apache.hadoop.conf.Configuration,int,java.util.EnumSet,org.apache.hadoop.fs.viewfs.FsGetter)" : {
    "next" : 3,
    "add" : 2,
    "getClass" : 2,
    "getScheme" : 1,
    "getStatistics" : 1,
    "resolve" : 1,
    "getHostName" : 1,
    "getRack" : 1,
    "getNewInstance" : 1,
    "newInstance" : 1,
    "sortByDistance" : 1,
    "setConf" : 1,
    "getLocalHost" : 1,
    "iterator" : 1,
    "get" : 2,
    "getInstance" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getSymlink()" : {
    "getSymlink" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementBytesReadByDistance(int,long)" : {
    "getThreadStatistics" : 4
  },
  "org.apache.hadoop.fs.shell.find.BaseExpression:getFileStatus(org.apache.hadoop.fs.shell.PathData,int)" : {
    "isFollowLink" : 1,
    "resolvePath" : 1,
    "isFollowArgLink" : 1,
    "getFileStatus" : 1,
    "getFileSystem" : 1,
    "getSymlink" : 1,
    "isSymlink" : 1
  },
  "org.apache.hadoop.io.file.tfile.BoundedRangeFileInputStream:read(byte[])" : {
    "read" : 1
  },
  "org.apache.hadoop.fs.shell.Truncate:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "parseLong" : 1,
    "removeFirst" : 1,
    "displayWarning" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:decodeFileName(java.lang.String)" : {
    "getVersion" : 1,
    "decodeString" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:flush()" : {
    "flush" : 1,
    "encrypt" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:getOperatingSystemPageSize()" : {
    "getOperatingSystemPageSize" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getContentSummary(org.apache.hadoop.fs.Path)" : {
    "getPathWithoutSchemeAndAuthority" : 1,
    "resolve" : 1,
    "directoryCount" : 1,
    "build" : 1,
    "getFileCount" : 1,
    "getDirectoryCount" : 1,
    "length" : 1,
    "getContentSummary" : 1,
    "getPath" : 1,
    "listStatus" : 1,
    "getLength" : 1,
    "toString" : 1,
    "fileCount" : 1
  },
  "org.apache.hadoop.util.Classpath:terminate(int,java.lang.String)" : {
    "println" : 1,
    "terminate" : 1
  },
  "org.apache.hadoop.crypto.JceAesCtrCryptoCodec:createEncryptor()" : {
    "getCipherSuite" : 1,
    "getProvider" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:createRemoteUser(java.lang.String,org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : {
    "setAuthenticationMethod" : 1,
    "add" : 1,
    "isEmpty" : 1,
    "getPrincipals" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : {
    "get" : 1,
    "getMetrics" : 1
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:<init>()" : {
    "reset" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addCost(java.lang.Object,long)" : {
    "add" : 2,
    "isServiceUser" : 1,
    "get" : 3,
    "getAndAdd" : 6,
    "putIfAbsent" : 1
  },
  "org.apache.hadoop.ipc.CallerContext:toString()" : {
    "isContextValid" : 1
  },
  "org.apache.hadoop.fs.shell.Tail:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.security.token.Token:equals(java.lang.Object)" : {
    "getClass" : 2,
    "equals" : 2,
    "isEqual" : 2
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:updateDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "addOrUpdateDelegationKey" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:createConnection()" : {
    "debug" : 1,
    "connectToZooKeeper" : 1,
    "isDebugEnabled" : 1,
    "close" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:getServerPrincipal(java.lang.String,java.net.InetAddress)" : {
    "replacePattern" : 1,
    "getHostnameByIP" : 1,
    "equals" : 1,
    "getComponents" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:getPosition()" : {
    "getPos" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getErasedIndexes(org.apache.hadoop.io.erasurecode.ECBlock[])" : {
    "isErased" : 1,
    "getNumErasedBlocks" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:addCounter(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:<init>(java.util.concurrent.ExecutorService,int,boolean)" : { },
  "org.apache.hadoop.io.SequenceFile$Reader:sync(long)" : {
    "getPos" : 2,
    "readFully" : 1,
    "handleChecksumException" : 1,
    "readByte" : 1,
    "seek" : 4
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getAverageResponseTime()" : {
    "get" : 1,
    "getAverageResponseTime" : 1
  },
  "org.apache.hadoop.fs.LocatedFileStatus:<init>()" : { },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:byteBufferPositionedReadable_readFully(java.io.InputStream,long,java.nio.ByteBuffer)" : {
    "extractIOEs" : 1,
    "invoke" : 1,
    "checkAvailable" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:appendFile(org.apache.hadoop.fs.Path)" : {
    "createDataOutputStreamBuilder" : 1,
    "append" : 1
  },
  "org.apache.hadoop.security.KDiag:println()" : {
    "println" : 1
  },
  "org.apache.hadoop.fs.statistics.DurationTrackerFactory:trackDuration(java.lang.String)" : {
    "trackDuration" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecodingStep:performCoding(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "decode" : 1
  },
  "org.apache.hadoop.util.functional.FutureIO:propagateOptions(org.apache.hadoop.fs.FSBuilder,org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "propagateOptions" : 2
  },
  "org.apache.hadoop.io.retry.RetryUtils:getDefaultRetryPolicy(org.apache.hadoop.conf.Configuration,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String)" : {
    "debug" : 1,
    "getMultipleLinearRandomRetry" : 1
  },
  "org.apache.hadoop.fs.FileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "getConf" : 1,
    "getLocal" : 2,
    "copy" : 1,
    "getRawFileSystem" : 1
  },
  "org.apache.hadoop.fs.FileContext:getXAttrs(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "getXAttrs" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:get(int)" : {
    "warn" : 1,
    "checkNotNegative" : 1,
    "updateStatus" : 1,
    "continueRetry" : 1,
    "format" : 1,
    "getInternal" : 1,
    "toString" : 1,
    "acquire" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues4()" : {
    "bsW" : 1,
    "write" : 1
  },
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:<init>(java.util.concurrent.ExecutorService,int,boolean,org.apache.hadoop.fs.statistics.DurationTrackerFactory)" : {
    "requireNonNull" : 1,
    "stubDurationTrackerFactory" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher:close()" : {
    "joinUninterruptibly" : 1,
    "debug" : 1,
    "unlock" : 1,
    "lock" : 1,
    "isDebugEnabled" : 1,
    "close" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:add(java.lang.Object,java.lang.reflect.Method)" : {
    "newForMethod" : 1,
    "getAnnotations" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : { },
  "org.apache.hadoop.io.compress.lz4.Lz4Compressor:<init>(int)" : { },
  "org.apache.hadoop.util.DiskChecker:checkDirWithDiskIo(java.io.File)" : {
    "checkDirInternal" : 1,
    "doDiskIo" : 1
  },
  "org.apache.hadoop.fs.FileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : {
    "getParent" : 1,
    "getFileLinkStatus" : 2,
    "rename" : 1,
    "getFileStatus" : 1,
    "listStatus" : 1,
    "delete" : 1,
    "isDirectory" : 4
  },
  "org.apache.hadoop.ipc.RetryCache:addCacheEntry(byte[],int)" : {
    "unlock" : 1,
    "incrCacheUpdated" : 1,
    "nanoTime" : 1,
    "lock" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:isTracked(java.lang.String)" : {
    "counters" : 1,
    "containsKey" : 2,
    "gauges" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression:getCompressionAlgorithmByName(java.lang.String)" : {
    "getName" : 1,
    "equals" : 1,
    "getEnumConstants" : 1
  },
  "org.apache.hadoop.io.ObjectWritable$NullInstance:readFields(java.io.DataInput)" : {
    "getConf" : 1,
    "getClassByName" : 1,
    "get" : 1,
    "readString" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:printTokenFile(java.io.File,org.apache.hadoop.io.Text,org.apache.hadoop.conf.Configuration,java.io.PrintStream)" : {
    "readTokenStorageFile" : 1,
    "println" : 1,
    "printCredentials" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.ha.PowerShellFencer:buildPSScript(java.lang.String,java.lang.String)" : {
    "flush" : 1,
    "getAbsolutePath" : 1,
    "createTempFile" : 1,
    "join" : 1,
    "error" : 2,
    "write" : 1,
    "close" : 1,
    "deleteOnExit" : 1,
    "info" : 2
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:createToken(org.apache.hadoop.security.UserGroupInformation,java.lang.String)" : {
    "createToken" : 1
  },
  "org.apache.hadoop.io.Text:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:addReadFileLatency(long)" : {
    "add" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$ReplicationOption:<init>(int)" : { },
  "org.apache.hadoop.net.TableMapping$RawTableMapping:reloadCachedMappings()" : {
    "load" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:getRootFallbackLink()" : {
    "isInternalDir" : 1,
    "checkState" : 1
  },
  "org.apache.hadoop.ipc.Client:<init>(java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "getDefaultSocketFactory" : 1
  },
  "org.apache.hadoop.fs.Path:checkNotSchemeWithRelative()" : {
    "isUriPathAbsolute" : 1,
    "toUri" : 1,
    "isAbsolute" : 1
  },
  "org.apache.hadoop.crypto.key.KeyShell$Command:warnIfTransientProvider()" : {
    "getOut" : 1,
    "println" : 1,
    "isTransient" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:analyze(java.lang.StringBuilder)" : {
    "getIntList" : 2,
    "add" : 3,
    "getValue" : 1,
    "getKey" : 1,
    "getOrDefault" : 8,
    "entrySet" : 1,
    "containsKey" : 1,
    "get" : 1,
    "isEmpty" : 2,
    "keySet" : 1,
    "append" : 4,
    "put" : 3
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicLongGauge(java.lang.String,java.util.concurrent.atomic.AtomicLong)" : {
    "get" : 1,
    "withLongFunctionGauge" : 1
  },
  "org.apache.hadoop.ha.HealthMonitor:isHealthCheckFailedException(java.lang.Throwable)" : {
    "unwrapRemoteException" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration,java.lang.Class[],java.lang.Object[])" : {
    "setAccessible" : 1,
    "get" : 1,
    "newInstance" : 1,
    "getDeclaredConstructor" : 1,
    "setConf" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:release()" : {
    "release" : 2
  },
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:loadNativeZLib()" : {
    "warn" : 1,
    "isNativeZlibLoaded" : 2,
    "info" : 1,
    "isNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_maximums(java.io.Serializable)" : {
    "applyToIOStatisticsSnapshot" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:initBloomFilter(org.apache.hadoop.conf.Configuration)" : {
    "getHashType" : 1,
    "getInt" : 1,
    "log" : 1,
    "pow" : 1,
    "ceil" : 1,
    "getFloat" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:locateKeystore()" : {
    "toCharArray" : 1,
    "load" : 2,
    "getPathAsString" : 1,
    "getInputStreamForFile" : 1,
    "get" : 1,
    "createPermissions" : 1,
    "getInstance" : 1,
    "locatePassword" : 1,
    "getKeyStoreType" : 1,
    "stashOriginalFilePermissions" : 1,
    "keystoreExists" : 1
  },
  "org.apache.hadoop.metrics2.lib.Interns:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.ha.ShellCommandFencer:addTargetInfoAsEnvVars(org.apache.hadoop.ha.HAServiceTarget,java.util.Map)" : {
    "getValue" : 1,
    "getKey" : 1,
    "getTransitionTargetHAStatus" : 1,
    "entrySet" : 1,
    "equals" : 2,
    "replace" : 1,
    "getFencingParameters" : 1,
    "put" : 1
  },
  "org.apache.hadoop.util.IntrusiveCollection:remove(java.lang.Object)" : {
    "isInList" : 1,
    "removeElement" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:spawnAutoRenewalThreadForKeytab()" : {
    "executeAutoRenewalTask" : 1,
    "getTGT" : 1,
    "getRefreshTime" : 1,
    "shouldRelogin" : 1,
    "getUserName" : 1,
    "isFromTicket" : 1
  },
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:addWriteFileLatency(long)" : {
    "add" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher:kick()" : {
    "isHeldByCurrentThread" : 1,
    "getOutputStream" : 1,
    "error" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getPrefetched(int)" : {
    "add" : 1,
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.ha.FailoverController:failover(org.apache.hadoop.ha.HAServiceTarget,org.apache.hadoop.ha.HAServiceTarget,boolean,boolean)" : {
    "createReqInfo" : 1,
    "transitionToActive" : 1,
    "failover" : 1,
    "getProxy" : 1,
    "preFailoverChecks" : 1,
    "tryGracefulFence" : 1,
    "getMessage" : 2,
    "checkArgument" : 1,
    "error" : 3,
    "fence" : 1,
    "getFencer" : 2
  },
  "org.apache.hadoop.io.WritableComparator:compareBytes(byte[],int,int,byte[],int,int)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:openFileOnInstance(org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus,java.lang.String)" : {
    "fileSystem_openFile" : 1,
    "debug" : 2,
    "getPath" : 2,
    "open" : 1,
    "fileSystem_openFile_available" : 1
  },
  "org.apache.hadoop.util.Sets:newHashSet(java.lang.Object[])" : {
    "addAll" : 1,
    "newHashSetWithExpectedSize" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:doGracefulFailover()" : {
    "add" : 2,
    "getGracefulFenceTimeout" : 1,
    "waitForActiveAttempt" : 1,
    "checkArgument" : 1,
    "cedeActive" : 1,
    "size" : 1,
    "nanoTime" : 1,
    "equals" : 2,
    "getAllOtherNodes" : 1,
    "getCurrentActive" : 1,
    "getAddress" : 4,
    "cedeRemoteActive" : 2,
    "checkEligibleForFailover" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean,int)" : {
    "getDefaultReplication" : 1,
    "create" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:isWithinCurrentBuffer(long)" : {
    "throwIfInvalidBuffer" : 1,
    "limit" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,double)" : {
    "tuple" : 1,
    "name" : 1
  },
  "org.apache.hadoop.fs.shell.Display$Cat:processOptions(java.util.LinkedList)" : {
    "getOpt" : 1,
    "parse" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "fullPath" : 1,
    "modifyAclEntries" : 1
  },
  "org.apache.hadoop.ipc.RpcClientException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getDeferredRpcProcessingSampleCount()" : {
    "numSamples" : 1,
    "lastStat" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator:getLocalPathForWrite(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getLocalPathForWrite" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:toString()" : {
    "toString" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:logoutUserFromKeytab()" : {
    "hasKerberosCredentials" : 1,
    "debug" : 1,
    "isPresent" : 1,
    "setKeytabFile" : 1,
    "getLogin" : 1,
    "logout" : 1,
    "get" : 1,
    "getKerberosLoginRenewalExecutor" : 2,
    "getUserName" : 2,
    "getKeytab" : 1,
    "toString" : 1,
    "shutdownNow" : 1,
    "setUser" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipCompressor:init(org.apache.hadoop.conf.Configuration)" : {
    "compressionStrategy" : 1,
    "setStrategy" : 1,
    "compressionLevel" : 1,
    "getCompressionStrategy" : 1,
    "getCompressionLevel" : 1
  },
  "org.apache.hadoop.fs.FileUtil:execSetPermission(java.io.File,org.apache.hadoop.fs.permission.FsPermission)" : {
    "execCommand" : 1,
    "isAvailable" : 1,
    "getCanonicalPath" : 1,
    "format" : 1,
    "chmod" : 1,
    "getSetPermissionCommand" : 1,
    "toShort" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "fullPath" : 1,
    "modifyAclEntries" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:removeAcl(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "removeAcl" : 1
  },
  "org.apache.hadoop.ipc.Client$IpcStreams:readResponse()" : {
    "allocate" : 1,
    "array" : 1,
    "readFully" : 1,
    "format" : 2,
    "readString" : 2,
    "readInt" : 2
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : {
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getTrashRoots(boolean)" : {
    "getShortUserName" : 2,
    "add" : 1,
    "getTrashRoots" : 1,
    "getRootFallbackLink" : 2,
    "toUri" : 1,
    "values" : 2,
    "length" : 1,
    "listStatus" : 1,
    "getChildFileSystems" : 1,
    "substring" : 1,
    "put" : 3,
    "getTargetFileSystem" : 1,
    "warn" : 1,
    "makeQualified" : 3,
    "getFileStatus" : 1,
    "getPath" : 5,
    "exists" : 2,
    "getBoolean" : 1,
    "getMountPoints" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Reader:getDeserializer(org.apache.hadoop.io.serializer.SerializationFactory,java.lang.Class)" : {
    "getDeserializer" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:readFileToMap(java.lang.String,java.lang.String,java.util.Map)" : {
    "toPath" : 1,
    "newInputStream" : 1,
    "readFileToMapWithFileInputStream" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.service.ServiceStateException:convert(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkPositiveInteger(long,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : {
    "getInt" : 1,
    "createDecompressor" : 1
  },
  "org.apache.hadoop.util.HeapSort:sort(org.apache.hadoop.util.IndexedSortable,int,int,org.apache.hadoop.util.Progressable)" : {
    "downHeap" : 2,
    "swap" : 1,
    "progress" : 1,
    "highestOneBit" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:setConfiguration(org.apache.hadoop.conf.Configuration)" : {
    "setConfigurationInternal" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileContext:isSameFS(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getScheme" : 2,
    "equals" : 2,
    "toUri" : 2,
    "getAuthority" : 4
  },
  "org.apache.hadoop.fs.FileContext:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "setAcl" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:meanStatistics()" : {
    "getInnerStatistics" : 1,
    "meanStatistics" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:getFileLinkStatusInternal(org.apache.hadoop.fs.Path,boolean)" : {
    "getNativeFileLinkStatus" : 1,
    "deprecatedGetFileStatus" : 1,
    "deprecatedGetFileLinkStatusInternal" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getSystemInfoInfoFromShell()" : {
    "getCanonicalPath" : 1,
    "getWinUtilsFile" : 1,
    "stringifyException" : 1,
    "error" : 1,
    "execute" : 1,
    "getOutput" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:getMemoryUsage(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "calculateMaxMemoryUsage" : 2,
    "addGauge" : 7,
    "getUsed" : 2,
    "getCommitted" : 2,
    "getNonHeapMemoryUsage" : 1,
    "maxMemory" : 1,
    "getRuntime" : 1,
    "getHeapMemoryUsage" : 1
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket()" : {
    "getSocketFactory" : 1,
    "createSocket" : 1,
    "configureSocket" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "removeDefaultAcl" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:bufferFullyRead()" : {
    "throwIfInvalidBuffer" : 1,
    "limit" : 2,
    "relative" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getCumulativeCpuTime()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.service.CompositeService:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "fullPath" : 1,
    "removeXAttr" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:put(int,java.nio.ByteBuffer,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.LocalDirAllocator)" : {
    "releaseLock" : 1,
    "containsKey" : 1,
    "format" : 1,
    "getChecksum" : 1,
    "put" : 1,
    "getCacheFilePath" : 1,
    "checkNotNull" : 1,
    "size" : 1,
    "checkPositiveInteger" : 1,
    "addToLinkedListHead" : 1,
    "validateEntry" : 1,
    "get" : 2,
    "limit" : 2,
    "addToLinkedListAndEvictIfRequired" : 1,
    "blockAddedToFileCache" : 1,
    "takeLock" : 1,
    "writeFile" : 1
  },
  "org.apache.hadoop.io.SetFile$Reader:next(org.apache.hadoop.io.WritableComparable)" : {
    "next" : 1,
    "get" : 1
  },
  "org.apache.hadoop.util.UTF8ByteArrayUtils:findNthByte(byte[],byte,int)" : {
    "findNthByte" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_enabled()" : {
    "enabled" : 1
  },
  "org.apache.hadoop.io.Text:write(java.io.DataOutput)" : {
    "writeVInt" : 1,
    "write" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:deleteKey(java.lang.String)" : {
    "doOp" : 1,
    "invalidateCache" : 1,
    "deleteKey" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency:toString()" : {
    "toString" : 1,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:bsGetInt()" : {
    "bsR" : 4
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:cleanupNewAndOld(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "renameOrFail" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlockFactory:createTmpFileForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration)" : {
    "getParent" : 1,
    "getName" : 1,
    "getLocalPathForWrite" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "createTempFile" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getHomeDirectory()" : {
    "disconnect" : 1,
    "pwd" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedIO:byteBufferPositionedReadable_readFullyAvailable(java.io.InputStream)" : {
    "streamCapabilities_hasCapability" : 1,
    "getWrappedStream" : 1,
    "byteBufferPositionedReadable_readFullyAvailable" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.fs.HardLink:getLinkCount(java.io.File)" : {
    "parseInt" : 2,
    "split" : 1,
    "closeStream" : 1,
    "linkCount" : 1,
    "getMessage" : 1,
    "exists" : 1,
    "createIOException" : 3,
    "readLine" : 1,
    "execute" : 1,
    "getExitCode" : 2,
    "getOutput" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferData:updateState(org.apache.hadoop.fs.impl.prefetch.BufferData$State,org.apache.hadoop.fs.impl.prefetch.BufferData$State[])" : {
    "checkNotNull" : 2,
    "throwIfStateIncorrect" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getData()" : {
    "add" : 1,
    "visitAll" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicy$RetryAction:<init>(org.apache.hadoop.io.retry.RetryPolicy$RetryAction$RetryDecision)" : { },
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:init(java.lang.Class)" : {
    "init" : 3
  },
  "org.apache.hadoop.util.LightWeightResizableGSet:getIterator(java.util.function.Consumer)" : {
    "iterator" : 1,
    "values" : 1,
    "accept" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:prepareMetaBlock(java.lang.String)" : {
    "prepareMetaBlock" : 1,
    "name" : 1,
    "finishDataBlock" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkWithinRange(double,java.lang.String,double,double)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.XORErasureDecoder:prepareDecodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getConf" : 1,
    "getOutputBlocks" : 1,
    "getErasedIndexes" : 1,
    "getOptions" : 1,
    "getInputBlocks" : 1,
    "createRawDecoder" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getNetworkBytesRead()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.util.Lists:newArrayListWithExpectedSize(int)" : {
    "computeArrayListCapacity" : 1
  },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:hasRemaining()" : {
    "checkOpenState" : 1,
    "hasRemaining" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:<init>(java.io.OutputStream,int)" : {
    "init" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:removeAcl(org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.FileSystem:listStatus(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.PathFilter)" : {
    "size" : 1,
    "toArray" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:getPathHandle(org.apache.hadoop.fs.Path)" : {
    "getFileStatus" : 1,
    "getPathHandle" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getFileStatus(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "getName" : 2,
    "equals" : 1,
    "toUri" : 1,
    "makeQualified" : 1,
    "getFileStatus" : 1,
    "getPath" : 1,
    "listFiles" : 1,
    "makeAbsolute" : 1,
    "printWorkingDirectory" : 1
  },
  "org.apache.hadoop.util.ApplicationClassLoader:<init>(java.net.URL[],java.lang.ClassLoader,java.util.List)" : {
    "getTrimmedStrings" : 1,
    "isEmpty" : 1,
    "toString" : 1,
    "asList" : 1,
    "info" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekTo(org.apache.hadoop.io.file.tfile.RawComparable,boolean)" : {
    "compareCursorKeyTo" : 1,
    "atEnd" : 1,
    "inBlockAdvance" : 1,
    "compareTo" : 2,
    "getBlockContainsKey" : 1,
    "getBlockIndex" : 2,
    "seekTo" : 2
  },
  "org.apache.hadoop.io.MultipleIOException:createIOException(java.util.List)" : {
    "size" : 1,
    "get" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.util.Progress:toString()" : {
    "toString" : 2
  },
  "org.apache.hadoop.fs.HarFileSystem:initializeMetadataCache(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "synchronizedMap" : 1
  },
  "org.apache.hadoop.fs.Options$CreateOpts:bufferSize(int)" : { },
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseThresholds(java.lang.String,org.apache.hadoop.conf.Configuration,int)" : {
    "getDefaultThresholds" : 1,
    "warn" : 1,
    "getInts" : 2
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:overwrite(boolean)" : {
    "add" : 1,
    "getThisBuilder" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getDefaultPortIfDefined(org.apache.hadoop.fs.FileSystem)" : {
    "getDefaultPort" : 1
  },
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:incrCacheCleared()" : {
    "incr" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:hiddenImpl(java.lang.String,java.lang.Class[])" : {
    "hiddenImpl" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:instantiateService(org.apache.hadoop.conf.Configuration)" : {
    "debug" : 1,
    "loadClass" : 1,
    "isEmpty" : 1,
    "checkArgument" : 3,
    "newInstance" : 2,
    "getClassLoader" : 1,
    "serviceCreationFailure" : 1,
    "getConstructor" : 2
  },
  "org.apache.hadoop.security.UserGroupInformation:<init>(javax.security.auth.Subject)" : {
    "next" : 1,
    "iterator" : 1,
    "getName" : 1,
    "getPrincipals" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:buildStatic()" : {
    "asStatic" : 1,
    "build" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:<init>(org.apache.hadoop.fs.statistics.MeanStatistic)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:read()" : {
    "get" : 1,
    "available" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:<init>(java.lang.String)" : {
    "loadStaticMethod" : 7,
    "loadClass" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_aggregate(java.io.Serializable,java.lang.Object)" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.FileSystem:checkPath(org.apache.hadoop.fs.Path)" : {
    "getDefaultUri" : 1,
    "getScheme" : 3,
    "canonicalizeUri" : 1,
    "getConf" : 1,
    "toUri" : 1,
    "checkArgument" : 1,
    "getAuthority" : 3,
    "equalsIgnoreCase" : 3,
    "getUri" : 1,
    "getCanonicalUri" : 1
  },
  "org.apache.hadoop.util.ProgramDriver:driver(java.lang.String[])" : {
    "exit" : 1,
    "run" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:inBlockAdvance(long)" : {
    "isClosed" : 1,
    "incRecordIndex" : 1,
    "close" : 1,
    "checkKey" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:stopSources()" : {
    "getClass" : 1,
    "getKey" : 1,
    "getValue" : 1,
    "debug" : 1,
    "stop" : 2,
    "entrySet" : 1,
    "clear" : 1,
    "source" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$RBlockState:getCompressionName()" : {
    "getName" : 1
  },
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolClientSideTranslatorPB:cedeActive(int)" : {
    "setMillisToCede" : 1,
    "build" : 1,
    "cedeActive" : 1,
    "ipc" : 1,
    "newBuilder" : 1
  },
  "org.apache.hadoop.security.SaslPropertiesResolver:setConf(org.apache.hadoop.conf.Configuration)" : {
    "getSaslQop" : 1,
    "valueOf" : 1,
    "toUpperCase" : 1,
    "getTrimmedStrings" : 1,
    "toString" : 1,
    "join" : 1,
    "put" : 2
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:getGroupName(int,java.lang.String)" : {
    "warn" : 1,
    "updateMapIncr" : 1,
    "get" : 2,
    "checkAndUpdateMaps" : 1
  },
  "org.apache.hadoop.util.ProtoUtil:makeRpcRequestHeader(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto$OperationProto,int,int,byte[])" : {
    "makeRpcRequestHeader" : 1
  },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:<init>()" : { },
  "org.apache.hadoop.metrics2.util.Metrics2Util$TopN:offer(org.apache.hadoop.metrics2.util.Metrics2Util$NameValuePair)" : {
    "offer" : 1,
    "size" : 1,
    "poll" : 1,
    "peek" : 1,
    "updateTotal" : 1
  },
  "org.apache.hadoop.util.InstrumentedReadLock:startLockTiming()" : {
    "monotonicNow" : 1,
    "set" : 1,
    "getReadHoldCount" : 1,
    "getTimer" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "makeQualified" : 1,
    "hasPathCapability" : 1,
    "areSymlinksEnabled" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferData:throwIfStateIncorrect(org.apache.hadoop.fs.impl.prefetch.BufferData$State[])" : {
    "add" : 1,
    "checkNotNull" : 1,
    "format" : 1,
    "stateEqualsOneOf" : 1,
    "toString" : 1,
    "join" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:<init>(org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text)" : {
    "setRenewer" : 1,
    "setRealUser" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:getCachePoolDefault()" : { },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations$End:duration()" : {
    "getTimestamp" : 2
  },
  "org.apache.hadoop.fs.shell.XAttrCommands$GetfattrCommand:processOptions(java.util.LinkedList)" : {
    "size" : 1,
    "valueOf" : 1,
    "isEmpty" : 1,
    "toUpperCase" : 1,
    "checkArgument" : 1,
    "popOptionWithArgument" : 2,
    "popOption" : 2,
    "setRecursive" : 1
  },
  "org.apache.hadoop.conf.Configuration:hasWarnedDeprecation(java.lang.String)" : {
    "containsKey" : 1,
    "get" : 3,
    "getDeprecatedKeyMap" : 2
  },
  "org.apache.hadoop.util.dynamic.DynConstructors$Builder:hiddenImpl(java.lang.Class[])" : {
    "hiddenImpl" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addPrometheusServlet(org.apache.hadoop.conf.Configuration)" : {
    "setAttribute" : 1,
    "getServletContext" : 1,
    "addServlet" : 1,
    "getWebAppContext" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFsStatus()" : { },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:init(java.lang.Class,java.lang.String)" : {
    "init" : 1
  },
  "org.apache.hadoop.net.AbstractDNSToSwitchMapping:isMappingSingleSwitch(org.apache.hadoop.net.DNSToSwitchMapping)" : {
    "isSingleSwitch" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:<init>()" : { },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.MapFile$Reader:getKeyClass()" : {
    "getKeyClass" : 1
  },
  "org.apache.hadoop.security.KDiag:validateUGI(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : {
    "hasKerberosCredentials" : 1,
    "getAuthenticationMethod" : 2,
    "verify" : 3
  },
  "org.apache.hadoop.net.ScriptBasedMapping:setConf(org.apache.hadoop.conf.Configuration)" : {
    "setConf" : 2,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:append(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : {
    "set" : 1,
    "getLength" : 1,
    "checkKey" : 1,
    "append" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:mainQSort3(org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream$Data,int,int,int)" : {
    "med3" : 1,
    "mainSimpleSort" : 1,
    "vswap" : 2
  },
  "org.apache.hadoop.fs.FileSystem:getBlockSize(org.apache.hadoop.fs.Path)" : {
    "getBlockSize" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:ioStatisticsSourceToString(java.lang.Object)" : {
    "retrieveIOStatistics" : 1,
    "debug" : 1,
    "ioStatisticsToString" : 1
  },
  "org.apache.hadoop.util.Classpath:main(java.lang.String[])" : {
    "getProperty" : 2,
    "isEmpty" : 2,
    "getMessage" : 2,
    "parse" : 1,
    "replaceFile" : 1,
    "asList" : 1,
    "println" : 2,
    "getOpt" : 2,
    "get" : 3,
    "equals" : 2,
    "terminate" : 4,
    "createJarWithClassPath" : 1,
    "getenv" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:seek(long)" : {
    "getClass" : 1,
    "resetStreamOffset" : 1,
    "checkStream" : 1,
    "getCanonicalName" : 1,
    "position" : 2,
    "seek" : 1,
    "remaining" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:close()" : {
    "prepareMetaBlock" : 2,
    "write" : 2,
    "close" : 3,
    "finishDataBlock" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:metadata(org.apache.hadoop.io.SequenceFile$Metadata)" : { },
  "org.apache.hadoop.metrics2.lib.MutableRate:<init>(java.lang.String,java.lang.String,boolean)" : { },
  "org.apache.hadoop.io.file.tfile.SimpleBufferedOutputStream:write(int)" : {
    "flushBuffer" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:initialize(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "getBoolean" : 1,
    "getFloat" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:getPermission()" : {
    "getPermission" : 1,
    "loadPermissionInfo" : 1,
    "isPermissionLoaded" : 1
  },
  "org.apache.hadoop.io.ArrayWritable:<init>(java.lang.Class,org.apache.hadoop.io.Writable[])" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:makeAbsolute(org.apache.hadoop.fs.Path)" : {
    "isAbsolute" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : {
    "size" : 4,
    "addGauge" : 4,
    "values" : 1,
    "addRecord" : 1,
    "snapshot" : 2
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:shouldRetry(java.lang.Exception,int,int,boolean)" : {
    "getReason" : 2,
    "calculateSleepTime" : 1,
    "toMillis" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtobufRpcEngineCallbackImpl:<init>()" : {
    "getServer" : 1,
    "getMethodName" : 1,
    "now" : 1,
    "get" : 3,
    "getCurCall" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:getWorkingDirectory()" : { },
  "org.apache.hadoop.util.CrcUtil:toMultiCrcString(byte[])" : {
    "format" : 2,
    "toString" : 2,
    "readInt" : 1,
    "append" : 4
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:setHomeDirConf(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "setHomeDirConf" : 1,
    "getDefaultMountTableName" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newCounter(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "name" : 2,
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:getSumBufferSize(int,int)" : {
    "getInt" : 1,
    "getConf" : 1,
    "max" : 2
  },
  "org.apache.hadoop.util.functional.RemoteIterators$WrappedJavaIterator:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:equals(java.lang.Object)" : {
    "getClass" : 2,
    "equals" : 1,
    "toString" : 2
  },
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:createTrustManagersFromConfiguration(org.apache.hadoop.security.ssl.SSLFactory$Mode,java.lang.String,java.lang.String,long)" : {
    "getLong" : 1,
    "schedule" : 1,
    "getPassword" : 1,
    "debug" : 2,
    "resolvePropertyName" : 2,
    "get" : 1,
    "isEmpty" : 1,
    "toString" : 2,
    "loadFrom" : 1,
    "isDebugEnabled" : 2,
    "error" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1
  },
  "org.apache.hadoop.util.ServletUtil:getRawPath(javax.servlet.http.HttpServletRequest,java.lang.String)" : {
    "getRequestURI" : 2,
    "length" : 1,
    "checkArgument" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.http.HttpServer2$Builder:createHttpChannelConnector(org.eclipse.jetty.server.Server,org.eclipse.jetty.server.HttpConfiguration)" : {
    "addConnectionFactory" : 1,
    "getInt" : 2,
    "setReuseAddress" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.XORErasureCodec:createDecoder()" : {
    "getCoderOptions" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "getTargetPath" : 1,
    "processPath" : 1
  },
  "org.apache.hadoop.util.StopWatch:stop()" : {
    "monotonicNowNanos" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:parseOpts(java.lang.String,org.apache.commons.cli.Options,java.lang.String[],java.util.Map)" : {
    "copyOfRange" : 1,
    "println" : 1,
    "parse" : 1,
    "printUsage" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.conf.Configuration:updateConnectAddr(java.lang.String,java.net.InetSocketAddress)" : {
    "setSocketAddr" : 1,
    "getConnectAddress" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:isSorted()" : {
    "isSorted" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:get(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : {
    "getCurrentValue" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.DummyErasureCodec:createEncoder()" : {
    "getCoderOptions" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet:computeCapacity(long,double,java.lang.String)" : {
    "long2String" : 2,
    "getProperty" : 1,
    "log" : 2,
    "equals" : 1,
    "info" : 4
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:getPluginLoader()" : {
    "getClass" : 1,
    "debug" : 2,
    "split" : 1,
    "getProperty" : 1,
    "size" : 1,
    "toString" : 1,
    "getClassLoader" : 1,
    "isDebugEnabled" : 1,
    "doPrivileged" : 1,
    "getPluginLoader" : 1
  },
  "org.apache.hadoop.http.HttpServer2$StackServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "logThreadInfo" : 1,
    "printThreadInfo" : 1,
    "getServletContext" : 1,
    "getOutputStream" : 1,
    "setContentType" : 1,
    "isInstrumentationAccessAllowed" : 1
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "create" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "createSnapshot" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "deleteSnapshot" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.metrics2.sink.StatsDSink$StatsD:createSocket()" : {
    "getAddress" : 1,
    "wrapException" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(java.lang.String,java.lang.String,long)" : {
    "newGauge" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:<init>(java.lang.String)" : {
    "loadStaticMethod" : 23,
    "loadClass" : 1
  },
  "org.apache.hadoop.io.FastByteComparisons$LexicographicalComparerHolder$UnsafeComparer:compareTo(byte[],int,int,byte[],int,int)" : {
    "getLong" : 2,
    "compare" : 1,
    "lessThanUnsigned" : 1,
    "min" : 1,
    "numberOfTrailingZeros" : 1
  },
  "org.apache.hadoop.ipc.Client:setConnectTimeout(org.apache.hadoop.conf.Configuration,int)" : {
    "setInt" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:create(org.apache.hadoop.fs.Path,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "create" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.RSErasureCodec:createEncoder()" : {
    "getCoderOptions" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:setupIOstreams(java.util.concurrent.atomic.AtomicBoolean)" : {
    "addTimelineAnnotation" : 2,
    "getCurrentSpan" : 2,
    "currentThread" : 1,
    "debug" : 2,
    "set" : 2,
    "setSaslClient" : 1,
    "setupSaslConnection" : 1,
    "writeConnectionContext" : 1,
    "start" : 1,
    "touch" : 1,
    "getAuthMethod" : 1,
    "writeConnectionHeader" : 1,
    "getRealUser" : 1,
    "doAs" : 1,
    "setInputStream" : 1,
    "setFallBackToSimpleAuth" : 2,
    "get" : 1,
    "markClosed" : 2,
    "isDebugEnabled" : 1,
    "getTicket" : 1,
    "close" : 1,
    "setupConnection" : 1,
    "getNegotiatedProperty" : 1,
    "handleSaslConnectionFailure" : 1
  },
  "org.apache.hadoop.ha.NodeFencer:<init>(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "parseMethods" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:decrypt(long,java.nio.ByteBuffer,int,int)" : {
    "getBuffer" : 2,
    "getPadding" : 1,
    "returnBuffer" : 2,
    "duplicate" : 1,
    "put" : 2,
    "remaining" : 2,
    "afterDecryption" : 1,
    "min" : 1,
    "getDecryptor" : 1,
    "limit" : 2,
    "clone" : 1,
    "position" : 3,
    "decrypt" : 1,
    "updateDecryptor" : 1,
    "returnDecryptor" : 1
  },
  "org.apache.hadoop.http.HttpServer2:openListeners()" : {
    "bindForPortRange" : 1,
    "getPort" : 1,
    "getLocalPort" : 2,
    "debug" : 1,
    "bindForSinglePort" : 1
  },
  "org.apache.hadoop.net.NodeBase:getPathComponents(org.apache.hadoop.net.Node)" : {
    "split" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.RSErasureEncoder:prepareEncodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getOutputBlocks" : 1,
    "checkCreateRSRawEncoder" : 1,
    "getInputBlocks" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:write0(int)" : {
    "writeRun" : 2
  },
  "org.apache.hadoop.fs.shell.CopyCommandWithMultiThread:copyFileToTarget(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : {
    "displayError" : 1,
    "submit" : 1,
    "copyFileToTarget" : 2
  },
  "org.apache.hadoop.ipc.ResponseBuffer:getFramedBuffer()" : {
    "setSize" : 1
  },
  "org.apache.hadoop.jmx.JMXJsonServlet:isInstrumentationAccessAllowed(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getServletContext" : 1,
    "isInstrumentationAccessAllowed" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:createFile(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "createFile" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:setExternalDelegationTokenSecretManager(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager)" : {
    "stopThreads" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:listStatus(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.ipc.DecayRpcScheduler:getTopCallers(int)" : {
    "offer" : 1,
    "next" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "iterator" : 1,
    "entrySet" : 1,
    "get" : 2,
    "hasNext" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ipc.Client:getTimeout(org.apache.hadoop.conf.Configuration)" : {
    "getRpcTimeout" : 1,
    "getPingInterval" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.DF:<init>(java.io.File,org.apache.hadoop.conf.Configuration)" : {
    "getLong" : 1
  },
  "org.apache.hadoop.metrics2.impl.SinkQueue:clear()" : {
    "checkConsumer" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:allowChangeInputs()" : {
    "allowChangeInputs" : 1
  },
  "org.apache.hadoop.ipc.Server:<init>(java.lang.String,int,java.lang.Class,int,int,int,org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.security.token.SecretManager,java.lang.String)" : {
    "addTerseLoggingExceptions" : 2,
    "init" : 1,
    "getQueueClassPrefix" : 1,
    "getQueueClass" : 1,
    "buildNegotiateResponse" : 1,
    "scheduleWithFixedDelay" : 1,
    "setLogSlowRPC" : 1,
    "getAuthMethods" : 1,
    "getLong" : 2,
    "setDaemon" : 1,
    "getInt" : 6,
    "getSchedulerClass" : 1,
    "setLogSlowRPCThresholdTime" : 1,
    "getPort" : 1,
    "build" : 1,
    "isSecurityEnabled" : 1,
    "setNameFormat" : 1,
    "create" : 2,
    "getClientBackoffEnable" : 1,
    "setPurgeIntervalNanos" : 1,
    "getAddress" : 1,
    "getBoolean" : 3,
    "getInstance" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:isDirectory()" : {
    "isDirectory" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:processOneRpc(java.nio.ByteBuffer)" : {
    "getClass" : 1,
    "processRpcRequest" : 1,
    "currentThread" : 1,
    "getName" : 2,
    "debug" : 2,
    "getMessage" : 2,
    "sendResponse" : 1,
    "getRpcErrorCodeProto" : 1,
    "getCause" : 2,
    "processRpcOutOfBandRequest" : 1,
    "getDefaultInstance" : 1,
    "checkRpcHeaders" : 1,
    "setupResponse" : 1,
    "wrap" : 1,
    "getRetryCount" : 1,
    "getCallId" : 1,
    "getRpcStatusProto" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:incrCacheClearedCounter()" : {
    "incrCacheCleared" : 1
  },
  "org.apache.hadoop.ha.SshFenceByTcpPort$Args:<init>(java.lang.String)" : {
    "getProperty" : 1,
    "isEmpty" : 1,
    "matcher" : 1,
    "matches" : 1,
    "parseConfiggedPort" : 1,
    "group" : 4
  },
  "org.apache.hadoop.crypto.CryptoCodec:getInstance(org.apache.hadoop.conf.Configuration,org.apache.hadoop.crypto.CipherSuite)" : {
    "getCipherSuite" : 1,
    "getName" : 6,
    "debug" : 3,
    "equals" : 1,
    "newInstance" : 1,
    "getCodecClasses" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getTrashRoot(org.apache.hadoop.fs.Path)" : {
    "getHomeDirectory" : 1,
    "toUri" : 1,
    "makeQualified" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.net.NetUtils:getSocketFactoryFromProperty(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getClassByName" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:createPathHandle(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Options$HandleOpt[])" : {
    "moved" : 1,
    "toUri" : 1,
    "getModificationTime" : 1,
    "getAuthority" : 1,
    "orElse" : 2,
    "empty" : 1,
    "getOpt" : 2,
    "of" : 1,
    "equals" : 1,
    "getPath" : 3,
    "toString" : 1,
    "isSymlink" : 1,
    "isDirectory" : 1,
    "allowChange" : 2,
    "changed" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:cancelToken(org.apache.hadoop.security.token.Token,java.lang.String)" : {
    "removeStoredToken" : 1,
    "removeTokenForOwnerStats" : 1,
    "getUser" : 2,
    "isEmpty" : 1,
    "formatTokenId" : 4,
    "remove" : 1,
    "getRenewer" : 1,
    "readFields" : 1,
    "getIdentifier" : 1,
    "equals" : 2,
    "getShortName" : 1,
    "getUserName" : 1,
    "trackRemoveToken" : 1,
    "toString" : 2,
    "createIdentifier" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.permission.FsCreateModes:applyUMask(org.apache.hadoop.fs.permission.FsPermission,org.apache.hadoop.fs.permission.FsPermission)" : {
    "getUnmasked" : 1,
    "applyUMask" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.FilterFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : {
    "checkPath" : 1,
    "createInternal" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:getPriorityLevel(org.apache.hadoop.security.UserGroupInformation)" : {
    "newSchedulable" : 1,
    "getIdentity" : 1,
    "cachedOrComputedPriorityLevel" : 1
  },
  "org.apache.hadoop.util.ComparableVersion:parseVersion(java.lang.String)" : {
    "pop" : 1,
    "add" : 8,
    "normalize" : 2,
    "toLowerCase" : 1,
    "isEmpty" : 1,
    "length" : 3,
    "isDigit" : 2,
    "toString" : 1,
    "substring" : 5,
    "parseItem" : 4,
    "charAt" : 2,
    "push" : 2
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getFileStatus(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "getName" : 1,
    "getWorkingDirectory" : 1,
    "ls" : 1,
    "toUri" : 1,
    "format" : 3,
    "getFilename" : 1,
    "equals" : 1,
    "makeQualified" : 1,
    "getFileStatus" : 1,
    "getPath" : 1,
    "pwd" : 1,
    "makeAbsolute" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$ExpiredTokenRemover:run()" : {
    "sleep" : 1,
    "rollMasterKey" : 1,
    "exit" : 1,
    "min" : 1,
    "now" : 1,
    "removeExpiredToken" : 1,
    "error" : 3,
    "getRuntime" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:<init>()" : { },
  "org.apache.hadoop.fs.FilterFileSystem:setWriteChecksum(boolean)" : {
    "setWriteChecksum" : 1
  },
  "org.apache.hadoop.util.WeakReferenceMap:containsKey(java.lang.Object)" : {
    "lookup" : 1,
    "resolve" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:cancelPrefetches()" : {
    "requestCaching" : 1,
    "cancelPrefetches" : 1,
    "getAll" : 1,
    "stateEqualsOneOf" : 1,
    "end" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:setInput(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "limit" : 1,
    "position" : 1
  },
  "org.apache.hadoop.fs.FileContext:checkDependencies(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "length" : 2,
    "isSameFS" : 1,
    "toString" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addDecayedCallVolume(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "getTotalCallVolume" : 1,
    "info" : 1,
    "addCounter" : 1
  },
  "org.apache.hadoop.security.NetgroupCache:isCached(java.lang.String)" : {
    "contains" : 1,
    "getGroups" : 1
  },
  "org.apache.hadoop.ipc.WeightedTimeCostProvider:init(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "toLowerCase" : 1,
    "values" : 2,
    "name" : 1,
    "ordinal" : 1
  },
  "org.apache.hadoop.ipc.Server:queueCall(org.apache.hadoop.ipc.Server$Call)" : {
    "internalQueueCall" : 1,
    "getCause" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:getNonNegative(java.lang.String,int)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.security.HadoopKerberosName:setConfiguration(org.apache.hadoop.conf.Configuration)" : {
    "getDefaultRealm" : 1,
    "setRuleMechanism" : 1,
    "get" : 2,
    "getAuthenticationMethod" : 1,
    "setRules" : 1
  },
  "org.apache.hadoop.conf.Configuration:getConfResourceAsInputStream(java.lang.String)" : {
    "getResource" : 1,
    "openStream" : 1,
    "info" : 2
  },
  "org.apache.hadoop.security.alias.JavaKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getKeyFromZK(int)" : {
    "readFields" : 1,
    "getNodePath" : 1,
    "error" : 1,
    "getData" : 1,
    "forPath" : 1
  },
  "org.apache.hadoop.conf.Configuration:addDeprecation(java.lang.String,java.lang.String)" : {
    "addDeprecation" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:parseSetLevelArgs(java.lang.String[],int)" : { },
  "org.apache.hadoop.util.LightWeightCache:evictEntries()" : {
    "size" : 1,
    "evict" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:noPasswordWarning()" : {
    "noPasswordWarning" : 1
  },
  "org.apache.hadoop.conf.Configuration:writeXml(java.lang.String,java.io.Writer,org.apache.hadoop.conf.Configuration)" : {
    "transform" : 1,
    "newTransformer" : 1,
    "asXmlDocument" : 1,
    "newSecureTransformerFactory" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:numAvailable()" : {
    "size" : 1,
    "numCreated" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_counters(java.io.Serializable)" : {
    "applyToIOStatisticsSnapshot" : 1
  },
  "org.apache.hadoop.io.WritableUtils:toByteArray(org.apache.hadoop.io.Writable[])" : {
    "close" : 1,
    "write" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.ipc.RemoteException:unwrapRemoteException(java.lang.Class[])" : {
    "getName" : 1,
    "asSubclass" : 1,
    "equals" : 1,
    "instantiateException" : 1,
    "getClassName" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "satisfyStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getDefaultReplication" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO:copyFileUnbuffered(java.io.File,java.io.File)" : {
    "copyFileUnbuffered0" : 1,
    "size" : 1,
    "getAbsolutePath" : 2,
    "getChannel" : 2,
    "transferTo" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:setHosts(java.lang.String[])" : {
    "internStringsInArray" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:doFence(org.apache.hadoop.ha.HAServiceTarget)" : {
    "checkFencingConfigured" : 1,
    "tryGracefulFence" : 1,
    "error" : 1,
    "fence" : 1,
    "getFencer" : 1,
    "recordActiveAttempt" : 1,
    "info" : 2
  },
  "org.apache.hadoop.ipc.ResponseBuffer$FramedBuffer:reset()" : {
    "setSize" : 1
  },
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:close()" : {
    "close" : 1,
    "sync" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:seek(long)" : {
    "getFileLength" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:stopThreads()" : {
    "stopThreads" : 1,
    "error" : 5,
    "close" : 5
  },
  "org.apache.hadoop.fs.MD5MD5CRC32GzipFileChecksum:<init>(int,long,org.apache.hadoop.io.MD5Hash)" : { },
  "org.apache.hadoop.fs.FSInputChecker:verifySums(byte[],int,int)" : {
    "getValue" : 1,
    "min" : 1,
    "rewind" : 1,
    "get" : 1,
    "limit" : 1,
    "reset" : 1,
    "update" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:ratioRemove(int[])" : {
    "computeRatio" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:add(org.apache.hadoop.metrics2.AbstractMetric)" : {
    "tuple" : 1,
    "name" : 1,
    "toString" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.functional.CommonCallableSupplier:waitForCompletionIgnoringExceptions(java.util.concurrent.CompletableFuture)" : {
    "debug" : 1,
    "join" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:computeRatio()" : {
    "getWeight" : 2
  },
  "org.apache.hadoop.fs.FileStatus:toString()" : {
    "getClass" : 1,
    "hasAcl" : 1,
    "isErasureCoded" : 1,
    "isEncrypted" : 1,
    "toString" : 1,
    "getSimpleName" : 1,
    "getSymlink" : 1,
    "isSymlink" : 2,
    "isDirectory" : 1,
    "append" : 18
  },
  "org.apache.hadoop.fs.FileContext:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "applyUMask" : 1,
    "getUMask" : 1,
    "mkdir" : 1,
    "getDirDefault" : 1
  },
  "org.apache.hadoop.fs.shell.Command:displayError(java.lang.String)" : {
    "displayWarning" : 1
  },
  "org.apache.hadoop.conf.ConfigurationWithLogging:getLong(java.lang.String,long)" : {
    "getLong" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getPhysicalMemorySize()" : {
    "readProcMemInfoFile" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getNetworkBytesWritten()" : {
    "readProcNetInfoFile" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicIntegerMinimum(java.lang.String,java.util.concurrent.atomic.AtomicInteger)" : {
    "get" : 1,
    "withLongFunctionMinimum" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:cancelDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token)" : {
    "cancelDelegationToken" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getXAttrs(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.security.KDiag:println(java.lang.String,java.lang.Object[])" : {
    "println" : 2,
    "flush" : 2,
    "format" : 1
  },
  "org.apache.hadoop.fs.Path:startPositionWithoutWindowsDrive(java.lang.String)" : {
    "hasWindowsDrive" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:resolvePath(org.apache.hadoop.fs.Path)" : {
    "resolvePath" : 1,
    "resolve" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:numAvailable()" : {
    "numAvailable" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getKey(org.apache.hadoop.io.BytesWritable)" : {
    "getKey" : 1,
    "setSize" : 1,
    "getLength" : 1,
    "getKeyLength" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.util.Shell:runCommand()" : {
    "cancel" : 1,
    "monotonicNow" : 1,
    "error" : 1,
    "isTimedOut" : 1,
    "directory" : 1,
    "remove" : 1,
    "put" : 1,
    "getExecString" : 1,
    "getErrorStream" : 1,
    "get" : 1,
    "putAll" : 1,
    "interrupt" : 1,
    "waitFor" : 1,
    "close" : 2,
    "redirectErrorStream" : 1,
    "currentThread" : 1,
    "getProperty" : 1,
    "debug" : 1,
    "set" : 3,
    "isInterrupted" : 1,
    "initCause" : 1,
    "start" : 3,
    "clear" : 1,
    "destroy" : 1,
    "readLine" : 4,
    "getInputStream" : 1,
    "warn" : 3,
    "schedule" : 1,
    "environment" : 2,
    "joinThread" : 2,
    "toString" : 2,
    "parseExecResult" : 1,
    "append" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState)" : {
    "resetOutputBuffers" : 1,
    "copyOfRange" : 1,
    "arraycopy" : 6,
    "remainder" : 1,
    "allowChangeInputs" : 1
  },
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilterInitializer:createFilterConfig(org.apache.hadoop.conf.Configuration)" : {
    "getValue" : 1,
    "getKey" : 1,
    "entrySet" : 1,
    "getFilterConfigMap" : 1,
    "getPropsWithPrefix" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics$StatisticsDataReferenceCleaner:run()" : {
    "warn" : 2,
    "currentThread" : 1,
    "cleanUp" : 1,
    "interrupt" : 1,
    "interrupted" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:setIncludesFile(java.lang.String)" : {
    "set" : 1,
    "get" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.Text:decode(byte[])" : {
    "decode" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:<init>(java.lang.Class,boolean,boolean)" : {
    "checkArgument" : 1,
    "configure" : 2
  },
  "org.apache.hadoop.crypto.CryptoCodec:getInstance(org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "convert" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.fs.FilterFs:open(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "disconnect" : 1,
    "mkdirs" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.FsShell:printInstanceHelp(java.io.PrintStream,org.apache.hadoop.fs.shell.Command)" : {
    "println" : 4,
    "split" : 5,
    "trim" : 2,
    "createOptionTableListing" : 1,
    "toString" : 2,
    "addRow" : 1,
    "getDescription" : 1,
    "wrap" : 1,
    "matches" : 1,
    "getUsage" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping$LdapSslSocketFactory:createKeyManagers()" : {
    "init" : 1,
    "getPasswordCharArray" : 1,
    "isEmpty" : 1,
    "getDefaultAlgorithm" : 1,
    "getInstance" : 1,
    "createKeyStore" : 1,
    "getKeyManagers" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:storeDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : {
    "addOrUpdateDelegationKey" : 1
  },
  "org.apache.hadoop.io.UTF8:toStringChecked()" : {
    "readChars" : 1,
    "reset" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getResolvedQualifiedPath(org.apache.hadoop.fs.Path)" : {
    "toUri" : 1,
    "makeQualified" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.BytesWritable:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.util.JvmPauseMonitor:<init>()" : {
    "getName" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : { },
  "org.apache.hadoop.fs.PathAccessDeniedException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.fs.shell.CommandWithDestination$TargetFileSystem:create(org.apache.hadoop.fs.shell.PathData,boolean)" : {
    "getInt" : 1,
    "getConf" : 2,
    "applyUMask" : 1,
    "of" : 1,
    "getFileDefault" : 1,
    "getUMask" : 1,
    "create" : 2,
    "getDefaultBlockSize" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "fullPath" : 1,
    "setTimes" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm:getCompressor()" : {
    "getCompressor" : 1,
    "warn" : 1,
    "debug" : 1,
    "getCodec" : 1,
    "hashCode" : 1,
    "reset" : 1,
    "finished" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.fs.FileSystem:listStatusBatch(org.apache.hadoop.fs.Path,byte[])" : {
    "listStatus" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CRC:<init>()" : {
    "initialiseCRC" : 1
  },
  "org.apache.hadoop.util.LineReader:readLine(org.apache.hadoop.io.Text,int)" : {
    "readLine" : 1
  },
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String,java.security.cert.X509Certificate)" : {
    "check" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager$ZKSecretManager:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.Text)" : { },
  "org.apache.hadoop.crypto.key.CachingKeyProvider:rollNewVersion(java.lang.String)" : {
    "invalidateCache" : 1,
    "getKeyProvider" : 1,
    "rollNewVersion" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ArrayBlockFactory:create(long,int,org.apache.hadoop.fs.store.BlockUploadStatistics)" : { },
  "org.apache.hadoop.http.ProfileServlet:getEvent(javax.servlet.http.HttpServletRequest)" : {
    "fromInternalName" : 1,
    "getParameter" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable:write(java.io.DataOutput)" : {
    "writeInt" : 1,
    "writeByteArray" : 1,
    "getName" : 1,
    "writeShortArray" : 1,
    "writeLongArray" : 1,
    "writeBooleanArray" : 1,
    "toString" : 1,
    "writeFloatArray" : 1,
    "writeDoubleArray" : 1,
    "writeString" : 1,
    "writeCharArray" : 1,
    "writeIntArray" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:listStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:bsPutUByte(int)" : {
    "bsW" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:<init>(java.util.Optional,java.util.Optional)" : {
    "checkNotNull" : 2,
    "isPresent" : 2,
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.FileUtil:setPermission(java.io.File,org.apache.hadoop.fs.permission.FsPermission)" : {
    "setReadable" : 2,
    "isAvailable" : 1,
    "setWritable" : 2,
    "execSetPermission" : 1,
    "setExecutable" : 2,
    "getOtherAction" : 1,
    "getUserAction" : 1,
    "checkReturnValue" : 6,
    "implies" : 12,
    "getGroupAction" : 1
  },
  "org.apache.hadoop.service.AbstractService:recordLifecycleEvent()" : {
    "add" : 1,
    "currentTimeMillis" : 1,
    "getServiceState" : 1
  },
  "org.apache.hadoop.util.RunJar:run(java.lang.String[])" : {
    "ensureDirectory" : 2,
    "getManifest" : 1,
    "createClassLoader" : 1,
    "addShutdownHook" : 1,
    "invoke" : 1,
    "asFileAttribute" : 1,
    "getMethod" : 1,
    "replaceAll" : 1,
    "asList" : 1,
    "setContextClassLoader" : 1,
    "println" : 4,
    "get" : 1,
    "toArray" : 1,
    "close" : 1,
    "unJar" : 1,
    "subList" : 1,
    "currentThread" : 1,
    "getCanonicalPath" : 1,
    "getProperty" : 1,
    "forName" : 1,
    "createTempDirectory" : 1,
    "isFile" : 1,
    "getTargetException" : 1,
    "initCause" : 1,
    "skipUnjar" : 1,
    "getMessage" : 1,
    "getMainAttributes" : 1,
    "getValue" : 1,
    "exit" : 4,
    "size" : 1,
    "toPath" : 1,
    "toFile" : 1,
    "exists" : 1,
    "fromString" : 1,
    "fullyDelete" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:initialize(org.apache.hadoop.conf.Configuration,boolean)" : {
    "getLong" : 1,
    "hasRulesBeenSet" : 1,
    "getUserToGroupsMappingService" : 1,
    "get" : 1,
    "getAuthenticationMethod" : 1,
    "getInts" : 1,
    "getBoolean" : 1,
    "newQuantiles" : 1,
    "setConfiguration" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:fenceOldActive()" : {
    "code" : 1,
    "equals" : 1,
    "zkDoWithRetries" : 1,
    "fenceOldActive" : 1,
    "isNodeDoesNotExist" : 1,
    "getData" : 1,
    "byteToHexString" : 1,
    "info" : 4
  },
  "org.apache.hadoop.fs.shell.Command:getName()" : {
    "getCommandField" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:drain(java.lang.String)" : {
    "drain" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPInputStream:checkNotClosed()" : {
    "toUri" : 1
  },
  "org.apache.hadoop.util.functional.FunctionalIO:uncheckIOExceptions(org.apache.hadoop.util.functional.CallableRaisingIOE)" : {
    "unchecked" : 1
  },
  "org.apache.hadoop.tracing.TraceScope:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:<init>()" : { },
  "org.apache.hadoop.util.MachineList:includes(java.lang.String)" : {
    "getByName" : 1,
    "includes" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "getParent" : 1,
    "getWorkingDirectory" : 1,
    "getChecksumFile" : 1,
    "mkdirs" : 1,
    "create" : 1,
    "exists" : 3,
    "delete" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:createRootDirRecursively(java.lang.String,java.util.List)" : {
    "split" : 1,
    "isEmpty" : 1,
    "create" : 1,
    "checkArgument" : 1,
    "toString" : 1,
    "append" : 2
  },
  "org.apache.hadoop.io.compress.DefaultCodec:createDirectDecompressor()" : {
    "getZlibDirectDecompressor" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:chooseRandom(java.lang.String)" : {
    "chooseRandom" : 1
  },
  "org.apache.hadoop.io.ObjectWritable:writeObject(java.io.DataOutput,java.lang.Object,java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "writeObject" : 1
  },
  "org.apache.hadoop.conf.StorageSize:parse(java.lang.String)" : {
    "parseDouble" : 1,
    "trim" : 1,
    "values" : 1,
    "toLowerCase" : 1,
    "length" : 2,
    "getShortName" : 3,
    "endsWith" : 6,
    "isNotBlank" : 1,
    "checkState" : 2,
    "getSuffixChar" : 3,
    "substring" : 1,
    "getLongName" : 3
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBzip2CompressorType(org.apache.hadoop.conf.Configuration)" : {
    "isNativeBzip2Loaded" : 1
  },
  "org.apache.hadoop.fs.shell.MoveCommands$MoveFromLocal:postProcessPath(org.apache.hadoop.fs.shell.PathData)" : {
    "setOperation" : 1,
    "toString" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.conf.ReconfigurableBase:getReconfigurationTaskStatus()" : { },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec:setConf(org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "debug" : 1,
    "getName" : 2,
    "getLogger" : 2,
    "newInstance" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:getBytesRead()" : {
    "checkStream" : 1,
    "getBytesRead" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:finishDataBlock(boolean)" : {
    "getCompressedSize" : 1,
    "addEntry" : 1,
    "size" : 1,
    "getBuffer" : 1,
    "close" : 1
  },
  "org.apache.hadoop.ha.HAServiceTarget:getHealthMonitorProxy(org.apache.hadoop.conf.Configuration,int)" : {
    "getHealthMonitorProxy" : 1
  },
  "org.apache.hadoop.ipc.Server:isClientBackoffEnabled()" : {
    "isClientBackoffEnabled" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "initialize" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.fs.shell.Delete$Rmr:processOptions(java.util.LinkedList)" : {
    "processOptions" : 1,
    "addFirst" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getScheme" : 2,
    "getConf" : 1,
    "equals" : 1,
    "initialize" : 2,
    "getUri" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:getCompressedData()" : {
    "read" : 1,
    "checkStream" : 1
  },
  "org.apache.hadoop.fs.impl.WrappedIOException:<init>(java.io.IOException)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.ipc.RemoteException:<init>(java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getAclStatus" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:createWithRetries(java.lang.String,byte[],java.util.List,org.apache.zookeeper.CreateMode)" : {
    "create" : 1,
    "zkDoWithRetries" : 1
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,short,org.apache.hadoop.util.Progressable)" : {
    "getInt" : 1,
    "getConf" : 1,
    "create" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.io.Text:readString(java.io.DataInput,int)" : {
    "readFully" : 1,
    "readVIntInRange" : 1,
    "decode" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getNumCores()" : {
    "getNumProcessors" : 1
  },
  "org.apache.hadoop.fs.shell.Test:processOptions(java.util.LinkedList)" : {
    "getOpts" : 1,
    "toArray" : 1,
    "parse" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus,java.io.File,boolean,org.apache.hadoop.conf.Configuration)" : {
    "getName" : 1,
    "openFile" : 1,
    "listStatus" : 1,
    "delete" : 1,
    "opt" : 1,
    "toPath" : 1,
    "build" : 1,
    "mkdirs" : 1,
    "newOutputStream" : 1,
    "getPath" : 2,
    "copy" : 1,
    "awaitFuture" : 1,
    "copyBytes" : 1,
    "isDirectory" : 1,
    "withFileStatus" : 1
  },
  "org.apache.hadoop.io.WritableUtils:skipCompressedByteArray(java.io.DataInput)" : {
    "skipFully" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.fs.shell.SnapshotCommands$RenameSnapshot:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "toString" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:accept()" : {
    "reference" : 1,
    "accept0" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:authenticate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getShortUserName" : 1,
    "getClass" : 1,
    "setAttribute" : 1,
    "verifyToken" : 1,
    "decodeFromUrlString" : 1,
    "authenticate" : 1,
    "debug" : 2,
    "getType" : 1,
    "setExpires" : 1,
    "createServletExceptionResponse" : 1,
    "getUserName" : 1,
    "getDelegationToken" : 1
  },
  "org.apache.hadoop.fs.FSBuilder:must(java.lang.String,long)" : {
    "mustLong" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getScheme" : 2,
    "getConf" : 1,
    "equals" : 1,
    "initialize" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.util.DataChecksum:verifyChunked(org.apache.hadoop.util.DataChecksum$Type,java.util.zip.Checksum,java.nio.ByteBuffer,int,java.nio.ByteBuffer,java.lang.String,long)" : {
    "getInt" : 2,
    "getValue" : 2,
    "get" : 2,
    "update" : 2,
    "reset" : 4,
    "position" : 3,
    "mark" : 2,
    "remaining" : 1,
    "throwChecksumException" : 2
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:getChecksumFileLength(org.apache.hadoop.fs.Path,long)" : {
    "getBytesPerSum" : 1,
    "getChecksumLength" : 1
  },
  "org.apache.hadoop.util.CombinedIPList:<init>(java.lang.String,java.lang.String,long)" : { },
  "org.apache.hadoop.io.GenericWritable:readFields(java.io.DataInput)" : {
    "readFields" : 1,
    "printStackTrace" : 1,
    "newInstance" : 1,
    "getTypes" : 1,
    "readByte" : 1
  },
  "org.apache.hadoop.fs.FilterFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "removeXAttr" : 1
  },
  "org.apache.hadoop.fs.shell.find.Print:<init>()" : { },
  "org.apache.hadoop.service.AbstractService:notifyListeners()" : {
    "warn" : 1,
    "notifyListeners" : 2
  },
  "org.apache.hadoop.fs.shell.PathData:parentExists()" : {
    "getParent" : 1,
    "exists" : 2,
    "representsDirectory" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getXAttrs(org.apache.hadoop.fs.Path)" : {
    "getXAttrs" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:doGetGroups(java.lang.String,int)" : {
    "add" : 1,
    "next" : 1,
    "getDirContext" : 1,
    "getRelativeDistinguishedName" : 1,
    "emptySet" : 2,
    "getAll" : 1,
    "getAttributes" : 1,
    "debug" : 2,
    "isEmpty" : 1,
    "hasMore" : 1,
    "clear" : 1,
    "search" : 1,
    "lookupGroup" : 1,
    "hasMoreElements" : 1,
    "get" : 1,
    "toString" : 2,
    "info" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.crypto.key.KeyShell:init(java.lang.String[])" : {
    "set" : 1,
    "setBitLength" : 1,
    "getConf" : 3,
    "containsKey" : 1,
    "getErr" : 1,
    "isEmpty" : 3,
    "setAttributes" : 1,
    "setDescription" : 1,
    "put" : 1,
    "parseInt" : 1,
    "getOut" : 2,
    "println" : 2,
    "split" : 1,
    "trim" : 2,
    "setCipher" : 1,
    "setSubCommand" : 5,
    "printGenericCommandUsage" : 1,
    "equals" : 19,
    "options" : 1,
    "setBoolean" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:connect(java.lang.String)" : {
    "connect0" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$MetaBlockRegister:register(long,long,long)" : {
    "addEntry" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages$RatesRoller:run()" : {
    "getGlobalMetrics" : 1,
    "size" : 1,
    "getRecords" : 1,
    "checkState" : 1,
    "rollOverAvgs" : 1,
    "setChanged" : 1,
    "addRecord" : 1,
    "snapshot" : 1
  },
  "org.apache.hadoop.util.OperationDuration:getDurationString()" : {
    "humanTime" : 1,
    "value" : 1
  },
  "org.apache.hadoop.fs.BBPartHandle:equals(java.lang.Object)" : {
    "bytes" : 2,
    "equals" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:getCurrentActive()" : {
    "getActiveData" : 1,
    "dataToTarget" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupRandPartC()" : {
    "setupRandPartA" : 1,
    "updateCRC" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping:toString()" : {
    "toString" : 1,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.util.VersionInfo:getUser()" : {
    "_getUser" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$WBlockState:getCurrentPos()" : {
    "size" : 1,
    "getPos" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:setHomeDirConf(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "set" : 1,
    "getConfigViewFsPrefix" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.WritableComparator:readLong(byte[],int)" : {
    "readInt" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "deleteSnapshot" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getServerDefaults()" : { },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:impl(java.lang.Class,java.lang.Class[])" : {
    "impl" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:start()" : {
    "startMBeans" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:refresh(java.lang.String,java.lang.String[])" : {
    "build" : 1,
    "setIdentifier" : 1,
    "refresh" : 1,
    "unpack" : 1,
    "addAllArgs" : 1,
    "ipc" : 1,
    "newBuilder" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.ipc.Client$Call:<init>(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable)" : {
    "nextCallId" : 1,
    "set" : 1,
    "get" : 3
  },
  "org.apache.hadoop.fs.statistics.impl.EmptyIOStatisticsContextImpl:getAggregator()" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme$ChildFsGetter:createFileSystem(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "getScheme" : 2,
    "format" : 2,
    "newInstance" : 1,
    "initialize" : 1
  },
  "org.apache.hadoop.conf.Configuration:setPattern(java.lang.String,java.util.regex.Pattern)" : {
    "set" : 1,
    "pattern" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:clearClientCache()" : {
    "clearCache" : 1
  },
  "org.apache.hadoop.io.nativeio.SharedFileDescriptorFactory:getLoadingFailureReason()" : {
    "isAvailable" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Cp:processOptions(java.util.LinkedList)" : {
    "setOverwrite" : 1,
    "getRemoteDestination" : 1,
    "getOpt" : 2,
    "getOptValue" : 2,
    "popPreserveOption" : 1,
    "addOptionWithValue" : 2,
    "setThreadCount" : 1,
    "parse" : 1,
    "setRecursive" : 1,
    "setThreadPoolQueueSize" : 1,
    "setDirectWrite" : 1
  },
  "org.apache.hadoop.io.erasurecode.grouper.BlockGrouper:getRequiredNumDataBlocks()" : {
    "getNumDataUnits" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:<init>(org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator)" : { },
  "org.apache.hadoop.io.file.tfile.Utils:readString(java.io.DataInput)" : {
    "readVInt" : 1,
    "readFully" : 1,
    "decode" : 1
  },
  "org.apache.hadoop.conf.Configuration:reloadExistingConfigurations()" : {
    "reloadConfiguration" : 1,
    "debug" : 1,
    "size" : 1,
    "isDebugEnabled" : 1,
    "keySet" : 2
  },
  "org.apache.hadoop.conf.Configuration:getBoolean(java.lang.String,boolean)" : {
    "warn" : 1,
    "getTrimmed" : 1,
    "isEmpty" : 1,
    "equalsIgnoreCase" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:cancelPrefetches()" : {
    "add" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:processKeyAddOrUpdate(byte[])" : {
    "readFields" : 1,
    "getKeyId" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndexEntry:<init>(java.io.DataInput)" : {
    "getCompressionAlgorithmByName" : 1,
    "length" : 2,
    "readString" : 2,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.ipc.RpcWritable:wrap(java.lang.Object)" : {
    "getClass" : 1,
    "isUnshadedProtobufMessage" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSupport:retrieveIOStatistics(java.lang.Object)" : {
    "getIOStatistics" : 1
  },
  "org.apache.hadoop.security.alias.KeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.impl.prefetch.BufferData:setPrefetch(java.util.concurrent.Future)" : {
    "updateState" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt:resolve(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Options$HandleOpt[])" : {
    "resolve" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:getPrimitivePower(int,int)" : {
    "power" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:readVectored(java.util.List,java.util.function.IntFunction)" : {
    "sliceTo" : 1,
    "getFileLength" : 1,
    "getUnderlying" : 2,
    "setData" : 1,
    "checkBytes" : 1,
    "findChecksumRanges" : 1,
    "getOffset" : 5,
    "validateAndSortRanges" : 1,
    "minSeekForVectorReads" : 1,
    "thenCombineAsync" : 1,
    "setLength" : 1,
    "mergeSortedRanges" : 1,
    "of" : 1,
    "getLength" : 1,
    "maxReadSizeForVectorReads" : 2,
    "thenApply" : 1,
    "getData" : 2,
    "readVectored" : 3
  },
  "org.apache.hadoop.metrics2.filter.GlobFilter:compile(java.lang.String)" : {
    "compile" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:close()" : {
    "parkCursorAtEnd" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:initialize(java.lang.String)" : {
    "init" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.DecodingValidator:validate(org.apache.hadoop.io.erasurecode.ECChunk[],int[],org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "toBuffers" : 2,
    "validate" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat:toString()" : {
    "min" : 1,
    "max" : 1,
    "mean" : 1,
    "numSamples" : 1,
    "toString" : 1,
    "stddev" : 1
  },
  "org.apache.hadoop.fs.FsShell:<init>()" : { },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addMeanStatisticSample(java.lang.String,long)" : {
    "addSample" : 1,
    "get" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:syncFs()" : {
    "hflush" : 1
  },
  "org.apache.hadoop.util.bloom.BloomFilter:membershipTest(org.apache.hadoop.util.bloom.Key)" : {
    "get" : 1,
    "clear" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricGaugeFloat:<init>(org.apache.hadoop.metrics2.MetricsInfo,float)" : { },
  "org.apache.hadoop.util.FindClass:loadResource(java.lang.String)" : {
    "getResource" : 1,
    "err" : 1,
    "out" : 1
  },
  "org.apache.hadoop.fs.shell.Head:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec$GzipZlibCompressor:<init>()" : { },
  "org.apache.hadoop.fs.FileSystem:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getDefaultUri" : 1,
    "debug" : 1,
    "getScheme" : 2,
    "equals" : 1,
    "get" : 3,
    "format" : 1,
    "getBoolean" : 1,
    "getAuthority" : 2,
    "createFileSystem" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getCompressionStrategy" : 1,
    "getCompressionLevel" : 1
  },
  "org.apache.hadoop.fs.WindowsGetSpaceUsed:<init>(org.apache.hadoop.fs.GetSpaceUsed$Builder)" : {
    "getInitialUsed" : 1,
    "getInterval" : 1,
    "getJitter" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getGroupsForUserCommand(java.lang.String)" : {
    "getGroupsForUserCommand" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod:valueOf(org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : {
    "values" : 1,
    "getAuthMethod" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:getAllLocalPathsToRead(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "confChanged" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:<init>(int)" : { },
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader:buildHttpReferrer()" : {
    "toASCIIString" : 1,
    "getKey" : 2,
    "joining" : 1,
    "debug" : 1,
    "entrySet" : 1,
    "forEach" : 1,
    "format" : 1,
    "put" : 1,
    "filter" : 1,
    "getValue" : 1,
    "warn" : 2,
    "contains" : 1,
    "stream" : 1,
    "get" : 1,
    "toString" : 1,
    "map" : 1,
    "collect" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getServer(java.lang.Class,java.lang.Object,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : { },
  "org.apache.hadoop.metrics2.util.MBeans:unregister(javax.management.ObjectName)" : {
    "warn" : 1,
    "debug" : 2,
    "unregisterMBean" : 1,
    "getPlatformMBeanServer" : 1,
    "removeMBeanName" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:initDataBlock()" : {
    "prepareDataBlock" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Du:processPathArgument(org.apache.hadoop.fs.shell.PathData)" : {
    "processPathArgument" : 1,
    "recursePath" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:<init>()" : { },
  "org.apache.hadoop.util.MergeSort:<init>(java.util.Comparator)" : { },
  "org.apache.hadoop.io.ArrayFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:reencryptEncryptedKeys(java.util.List)" : {
    "doOp" : 1,
    "reencryptEncryptedKeys" : 1,
    "nextIdx" : 1,
    "getCause" : 3
  },
  "org.apache.hadoop.fs.FilterFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "setTimes" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:readFully(long,java.nio.ByteBuffer)" : {
    "getClass" : 1,
    "readFully" : 1,
    "checkStream" : 1,
    "getCanonicalName" : 1,
    "position" : 2,
    "decrypt" : 1
  },
  "org.apache.hadoop.fs.LocatedFileStatus:<init>(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.BlockLocation[])" : {
    "getPermission" : 1,
    "setSymlink" : 1,
    "getModificationTime" : 1,
    "getAccessTime" : 1,
    "getOwner" : 1,
    "getSymlink" : 1,
    "isErasureCoded" : 1,
    "hasAcl" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "isEncrypted" : 1,
    "getGroup" : 1,
    "getLen" : 1,
    "getPath" : 1,
    "isSymlink" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newMutableRollingAverages(java.lang.String,java.lang.String)" : {
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:equals(java.lang.Object)" : {
    "equals" : 1,
    "toString" : 2
  },
  "org.apache.hadoop.fs.shell.Truncate:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "add" : 1,
    "println" : 2,
    "truncate" : 1,
    "getLen" : 1,
    "toString" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:abort(org.apache.hadoop.fs.UploadHandle,org.apache.hadoop.fs.Path)" : {
    "checkUploadId" : 1,
    "checkPath" : 1,
    "eval" : 1,
    "toByteArray" : 1,
    "getFileStatus" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.security.ssl.FileMonitoringTimerTask:<init>(java.util.List,java.util.function.Consumer,java.util.function.Consumer)" : {
    "add" : 1,
    "checkNotNull" : 2,
    "forEach" : 1,
    "toFile" : 1,
    "lastModified" : 1
  },
  "org.apache.hadoop.io.DataOutputBuffer$Buffer:setCount(int)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.util.StringUtils:equalsIgnoreCase(java.lang.String,java.lang.String)" : {
    "checkNotNull" : 1,
    "equalsIgnoreCase" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_means(java.io.Serializable)" : {
    "applyToIOStatisticsSnapshot" : 1,
    "forEach" : 1,
    "getSamples" : 1,
    "meanStatistics" : 1,
    "getSum" : 1,
    "pair" : 1,
    "put" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:add(java.lang.String,org.apache.hadoop.metrics2.lib.MutableMetric)" : {
    "checkMetricName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:init(java.lang.String[])" : {
    "addMetricIfNotExists" : 1
  },
  "org.apache.hadoop.fs.FileSystem:<init>()" : { },
  "org.apache.hadoop.fs.ContentSummary$Builder:quota(long)" : {
    "quota" : 1
  },
  "org.apache.hadoop.ipc.Client:<init>(java.lang.Class,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "getInt" : 2,
    "getClientId" : 1,
    "getBoolean" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:removeAcl(org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.util.ShutdownHookManager:addShutdownHook(java.lang.Runnable,int)" : {
    "add" : 1,
    "get" : 1
  },
  "org.apache.hadoop.conf.Configuration:getClass(java.lang.String,java.lang.Class,java.lang.Class)" : {
    "getClass" : 1,
    "getName" : 1,
    "asSubclass" : 1,
    "isAssignableFrom" : 1
  },
  "org.apache.hadoop.service.CompositeService:stop(int,boolean)" : {
    "debug" : 1,
    "stopQuietly" : 1,
    "get" : 1,
    "convert" : 1,
    "isDebugEnabled" : 1,
    "getServices" : 1,
    "getServiceState" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : {
    "constructRpcRequest" : 1,
    "addTimelineAnnotation" : 1,
    "currentThread" : 2,
    "set" : 1,
    "debug" : 1,
    "getName" : 5,
    "isAsynchronousMode" : 1,
    "getId" : 2,
    "methodToTraceString" : 1,
    "isDone" : 1,
    "getAsyncRpcResponse" : 1,
    "call" : 1,
    "trace" : 2,
    "newScope" : 1,
    "curThreadTracer" : 1,
    "shortDebugString" : 1,
    "get" : 1,
    "now" : 2,
    "isTraceEnabled" : 2,
    "toString" : 1,
    "isDebugEnabled" : 2,
    "close" : 1,
    "getReturnMessage" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:compareCursorKeyTo(org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "size" : 1,
    "offset" : 1,
    "buffer" : 1,
    "checkKey" : 1,
    "compareKeys" : 1
  },
  "org.apache.hadoop.io.DataOutputBuffer:getLength()" : {
    "getLength" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:write(int)" : {
    "write0" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:refreshQueueSizeGauge()" : {
    "set" : 1,
    "size" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:deleteKey(java.lang.String)" : {
    "getMetadata" : 1,
    "unlock" : 1,
    "deleteEntry" : 2,
    "containsAlias" : 2,
    "getVersions" : 1,
    "lock" : 1,
    "remove" : 1,
    "buildVersionName" : 1
  },
  "org.apache.hadoop.net.SocketOutputStream:transferToFully(java.nio.channels.FileChannel,long,int,org.apache.hadoop.io.LongWritable,org.apache.hadoop.io.LongWritable)" : {
    "set" : 2,
    "size" : 2,
    "getChannel" : 1,
    "nanoTime" : 3,
    "transferTo" : 1,
    "waitForWritable" : 1
  },
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:toString()" : {
    "getPermitCount" : 1,
    "getWaitingCount" : 1,
    "toString" : 1,
    "getAvailablePermits" : 1,
    "append" : 7
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:deprecatedGetFileLinkStatusInternal(org.apache.hadoop.fs.Path)" : {
    "getPermission" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "readLink" : 1,
    "getGroup" : 1,
    "getLen" : 1,
    "getModificationTime" : 1,
    "getFileStatus" : 1,
    "isEmpty" : 2,
    "getAccessTime" : 1,
    "getDefault" : 1,
    "toString" : 1,
    "getOwner" : 1
  },
  "org.apache.hadoop.conf.ConfigurationWithLogging:getBoolean(java.lang.String,boolean)" : {
    "getBoolean" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(long[],java.lang.String)" : {
    "checkNotEmpty" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.AvroFSInput:seek(long)" : {
    "seek" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell:promptForCredential()" : {
    "equals" : 1,
    "format" : 1,
    "readPassword" : 2,
    "getPasswordReader" : 1,
    "fill" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$StaticMethod:invoke(java.lang.Object[])" : {
    "invoke" : 1
  },
  "org.apache.hadoop.ha.NodeFencer:create(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "get" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "add" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenIdentifier:<init>(org.apache.hadoop.io.Text)" : { },
  "org.apache.hadoop.fs.LocatedFileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean,boolean,boolean,org.apache.hadoop.fs.BlockLocation[])" : {
    "attributes" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(byte[],java.lang.String)" : {
    "checkNotEmpty" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getClass" : 1,
    "registerProtocolAndImpl" : 1,
    "setAlignmentContext" : 1,
    "serverNameFromClass" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:bsPutInt(int)" : {
    "bsW" : 4
  },
  "org.apache.hadoop.ipc.Client$Call:setException(java.io.IOException)" : {
    "callComplete" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec:getCompressorType()" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.util.WeakReferenceMap:get(java.lang.Object)" : {
    "lookup" : 1,
    "resolve" : 1,
    "create" : 1,
    "noteLost" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.io.MD5Hash:compareTo(org.apache.hadoop.io.MD5Hash)" : {
    "compareBytes" : 1
  },
  "org.apache.hadoop.io.compress.BlockCompressorStream:<init>(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : { },
  "org.apache.hadoop.security.UserGroupInformation:getLogin()" : {
    "getLogin" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:rollNewVersion(java.lang.String,byte[])" : {
    "rollNewVersionInternal" : 1,
    "checkNotNull" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration)" : {
    "initialize" : 1
  },
  "org.apache.hadoop.fs.FileUtil:makeShellPath(java.io.File,boolean)" : {
    "getCanonicalPath" : 1,
    "toString" : 1,
    "makeShellPath" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:doDecodeImpl(byte[][],int[],int,int[],byte[][],int[])" : {
    "solveVandermondeSystem" : 1,
    "substitute" : 1
  },
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:init(int)" : {
    "init" : 2,
    "getProcessingName" : 1,
    "getQueueName" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getLong" : 4,
    "getInt" : 1,
    "get" : 3,
    "getBoolean" : 1,
    "usingNamespace" : 1,
    "createCuratorClient" : 1
  },
  "org.apache.hadoop.fs.crypto.CryptoFSDataOutputStream:<init>(org.apache.hadoop.fs.FSDataOutputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[])" : {
    "getPos" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:next()" : {
    "getKey" : 1,
    "getPosition" : 2,
    "adjustPriorityQueue" : 1,
    "updateProgress" : 1,
    "top" : 1,
    "size" : 2,
    "createValueBytes" : 1,
    "nextRawValue" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getRecordNumNear(long)" : {
    "getLocationNear" : 1,
    "getRecordNumByLocation" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "removeXAttr" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.conf.Configuration$Parser:parseNext()" : {
    "next" : 1,
    "getTextCharacters" : 1,
    "getTextLength" : 1,
    "getTextStart" : 1,
    "handleStartElement" : 1,
    "handleEndElement" : 1,
    "append" : 1
  },
  "org.apache.hadoop.io.UTF8:readChars(java.io.DataInput,java.lang.StringBuilder,int)" : {
    "highSurrogate" : 1,
    "min" : 1,
    "lowSurrogate" : 1,
    "get" : 1,
    "reset" : 1,
    "write" : 1,
    "append" : 5,
    "getData" : 1,
    "byteToHexString" : 4
  },
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:getCacheHit()" : {
    "value" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(java.lang.String)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.fs.Options$ChecksumOpt:processChecksumOpt(org.apache.hadoop.fs.Options$ChecksumOpt,org.apache.hadoop.fs.Options$ChecksumOpt)" : {
    "processChecksumOpt" : 1
  },
  "org.apache.hadoop.security.SecurityUtil$QualifiedHostResolver:getByName(java.lang.String)" : {
    "contains" : 1,
    "getByNameWithSearch" : 2,
    "getHostName" : 1,
    "getByExactName" : 3,
    "getByName" : 1,
    "endsWith" : 1,
    "getByAddress" : 2,
    "getAddress" : 2,
    "equalsIgnoreCase" : 1,
    "forString" : 1,
    "isInetAddress" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:increaseRemoteReadTime(long)" : {
    "getThreadStatistics" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableQuantiles:setQuantiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.DecimalFormat)" : {
    "addQuantileInfo" : 1,
    "getInterval" : 1,
    "format" : 2,
    "info" : 1
  },
  "org.apache.hadoop.util.Shell:run()" : {
    "monotonicNow" : 1,
    "setProperty" : 1,
    "runCommand" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:getAttribute(java.lang.String)" : {
    "getValue" : 1,
    "updateJmxCache" : 1,
    "debug" : 1,
    "get" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.util.StopWatch:start()" : {
    "monotonicNowNanos" : 1
  },
  "org.apache.hadoop.metrics2.sink.FileSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : {
    "get" : 1,
    "newOutputStream" : 1,
    "getString" : 1
  },
  "org.apache.hadoop.io.serializer.avro.AvroReflectSerialization:getPackages()" : {
    "add" : 1,
    "trim" : 1,
    "getConf" : 1,
    "getStrings" : 1
  },
  "org.apache.hadoop.fs.PathPermissionException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.ipc.ResponseBuffer:capacity()" : {
    "capacity" : 1
  },
  "org.apache.hadoop.ipc.Server:logSlowRpcCalls(java.lang.String,org.apache.hadoop.ipc.Server$Call,org.apache.hadoop.ipc.ProcessingDetails)" : {
    "warn" : 1,
    "getProcessingSampleCount" : 1,
    "getProcessingStdDev" : 1,
    "getLogSlowRPCThresholdTime" : 2,
    "get" : 1,
    "toString" : 1,
    "incrSlowRpc" : 1,
    "getProcessingMean" : 1,
    "getMetricsTimeUnit" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getHomeDirectory()" : {
    "getHomeDirectory" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine:ensureInitialized()" : {
    "initialize" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Merge:processArguments(java.util.LinkedList)" : {
    "getConf" : 1,
    "writeDelimiter" : 2,
    "getLen" : 1,
    "create" : 1,
    "openForSequentialIO" : 1,
    "processArguments" : 1,
    "close" : 1,
    "copyBytes" : 1
  },
  "org.apache.hadoop.fs.FileStatus:setPermission(org.apache.hadoop.fs.permission.FsPermission)" : {
    "getFileDefault" : 1
  },
  "org.apache.hadoop.fs.QuotaUsage:getTypesQuotaUsage(boolean,java.util.List)" : {
    "formatSize" : 2,
    "getTypeQuota" : 1,
    "getTypeConsumed" : 1,
    "format" : 1,
    "toString" : 1,
    "append" : 1
  },
  "org.apache.hadoop.io.SecureIOUtils:openForRandomRead(java.io.File,java.lang.String,java.lang.String,java.lang.String)" : {
    "forceSecureOpenForRandomRead" : 1,
    "isSecurityEnabled" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:removeMBeanName(javax.management.ObjectName)" : {
    "removeObjectName" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:resetBuffer(byte[],int,int)" : {
    "arraycopy" : 1,
    "getEmptyChunk" : 1
  },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipCompressor:<init>(org.apache.hadoop.conf.Configuration)" : {
    "init" : 1
  },
  "org.apache.hadoop.fs.StorageType:getConf(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.StorageType,java.lang.String)" : {
    "get" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:printUsage(java.io.PrintStream,java.util.Map)" : {
    "getValue" : 1,
    "getKey" : 1,
    "println" : 4,
    "entrySet" : 1,
    "printGenericCommandUsage" : 1,
    "getUsageString" : 1
  },
  "org.apache.hadoop.util.functional.TaskPool:foreach(org.apache.hadoop.fs.RemoteIterator)" : { },
  "org.apache.hadoop.ha.ShellCommandFencer:setConfAsEnvVars(java.util.Map)" : {
    "getValue" : 1,
    "getKey" : 1,
    "getConf" : 1,
    "replace" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.WritableUtils:readVIntInRange(java.io.DataInput,int,int)" : {
    "readVLong" : 1
  },
  "org.apache.hadoop.net.DNS:getIPs(java.lang.String,boolean)" : {
    "warn" : 1,
    "removeAll" : 1,
    "size" : 1,
    "addAll" : 1,
    "getSubinterface" : 1,
    "equals" : 1,
    "getByName" : 1,
    "getHostAddress" : 1,
    "list" : 1,
    "getSubinterfaceInetAddrs" : 1,
    "getInetAddresses" : 1
  },
  "org.apache.hadoop.io.MapWritable:<init>()" : { },
  "org.apache.hadoop.metrics2.util.SampleQuantiles:toString()" : {
    "withKeyValueSeparator" : 1,
    "join" : 1,
    "snapshot" : 1,
    "on" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:reportChecksumFailure(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FSDataInputStream,long,org.apache.hadoop.fs.FSDataInputStream,long)" : {
    "renameTo" : 2,
    "getName" : 2,
    "getChecksumFile" : 1,
    "getConf" : 1,
    "getCanonicalFile" : 1,
    "pathToFile" : 2,
    "canWrite" : 1,
    "nextInt" : 1,
    "warn" : 4,
    "getMount" : 1,
    "mkdirs" : 1,
    "getParentFile" : 2,
    "toString" : 2,
    "close" : 2,
    "isDirectory" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:getCurrentValue(java.lang.Object)" : {
    "getPosition" : 1,
    "read" : 1,
    "debug" : 1,
    "deserializeValue" : 2,
    "readVInt" : 1,
    "available" : 1,
    "getLength" : 1,
    "isDebugEnabled" : 1,
    "seekToCurrentValue" : 1,
    "setConf" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.IOUtils:copyBytes(java.io.InputStream,java.io.OutputStream,long,boolean)" : {
    "read" : 1,
    "closeStream" : 2,
    "close" : 2,
    "write" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:setNames(java.lang.String[])" : {
    "internStringsInArray" : 1
  },
  "org.apache.hadoop.util.InstrumentedReadLock:unlock()" : {
    "monotonicNow" : 1,
    "getLock" : 1,
    "unlock" : 1,
    "getReadHoldCount" : 1,
    "get" : 1,
    "check" : 1,
    "remove" : 1,
    "getTimer" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Reader:<init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : {
    "initBloomFilter" : 1
  },
  "org.apache.hadoop.fs.shell.find.Name:registerExpression(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : {
    "addClass" : 2
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:exists(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path)" : {
    "getFileStatus" : 1
  },
  "org.apache.hadoop.ipc.ResponseBuffer:reset()" : {
    "reset" : 1
  },
  "org.apache.hadoop.util.functional.FutureIO:propagateOptions(org.apache.hadoop.fs.FSBuilder,org.apache.hadoop.conf.Configuration,java.lang.String,boolean)" : {
    "getValue" : 1,
    "getKey" : 1,
    "opt" : 1,
    "entrySet" : 1,
    "endsWith" : 1,
    "must" : 1,
    "getPropsWithPrefix" : 1
  },
  "org.apache.hadoop.fs.impl.FlagSet:copy()" : { },
  "org.apache.hadoop.fs.FileSystem:newInstance(java.net.URI,org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "doAs" : 1,
    "get" : 1,
    "newInstance" : 1,
    "getBestUGI" : 1
  },
  "org.apache.hadoop.fs.DF:getFilesystem()" : {
    "getCanonicalPath" : 1,
    "verifyExitCode" : 1,
    "parseOutput" : 1,
    "run" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.ipc.RpcClientUtil:isMethodSupported(java.lang.Object,java.lang.Class,org.apache.hadoop.ipc.RPC$RpcKind,long,java.lang.String)" : {
    "getVersionSignatureMap" : 1,
    "getServerAddress" : 1,
    "getName" : 4,
    "setProtocol" : 1,
    "putVersionSignatureMap" : 1,
    "convertProtocolSignatureProtos" : 1,
    "setRpcKind" : 1,
    "newBuilder" : 1,
    "getProtocolMetaInfoProxy" : 1,
    "methodExists" : 1,
    "getProtocolSignatureList" : 1,
    "build" : 1,
    "equals" : 1,
    "setProtocolEngine" : 1,
    "toString" : 3,
    "getFingerprint" : 1,
    "getMethods" : 1,
    "ipc" : 1,
    "getProtocolSignature" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getGaugeReference(java.lang.String)" : {
    "getInnerStatistics" : 1,
    "getGaugeReference" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getStatus(org.apache.hadoop.fs.Path)" : {
    "getPathWithoutSchemeAndAuthority" : 1,
    "resolve" : 1,
    "getUsed" : 1,
    "getRemaining" : 1,
    "getPath" : 1,
    "listStatus" : 1,
    "toString" : 1,
    "getStatus" : 1,
    "getCapacity" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:bindAndListen(java.lang.String)" : {
    "bind0" : 1,
    "validateSocketPathSecurity0" : 1
  },
  "org.apache.hadoop.fs.FileSystemLinkResolver:resolve(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "next" : 1,
    "getConf" : 1,
    "equals" : 1,
    "resolveLink" : 1,
    "qualifySymlinkTarget" : 1,
    "doCall" : 1,
    "getFSofPath" : 1,
    "areSymlinksEnabled" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getProcessingSampleCount()" : {
    "numSamples" : 1,
    "lastStat" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "stringToUri" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "getChecksumFile" : 1,
    "getFileStatus" : 1,
    "exists" : 1,
    "delete" : 3,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "fullPath" : 2,
    "getTargetFileSystem" : 1,
    "isLastInternalDirLink" : 1,
    "getRootFallbackLink" : 3,
    "resolve" : 4,
    "verifyRenameStrategy" : 1,
    "getUriPath" : 4,
    "isInternalDir" : 4,
    "renameInternal" : 1,
    "getMyFs" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addCallVolumePerPriority(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "addGauge" : 1,
    "get" : 1,
    "length" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : {
    "getProxy" : 1
  },
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolServerSideTranslatorPB:getProtocolSignature(java.lang.String,long,int)" : {
    "getProtocolName" : 2,
    "getProtocolVersion" : 1,
    "equals" : 1,
    "getProtocolSignature" : 1
  },
  "org.apache.hadoop.fs.FileSystem:createNewFile(org.apache.hadoop.fs.Path)" : {
    "getInt" : 1,
    "getConf" : 1,
    "create" : 1,
    "exists" : 1,
    "close" : 1
  },
  "org.apache.hadoop.ipc.ProtobufHelper:getByteString(byte[])" : {
    "getByteString" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:execShellGetUserForNetgroup(java.lang.String)" : {
    "execCommand" : 1,
    "warn" : 1,
    "getUsersForNetgroupCommand" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:becomeActive()" : {
    "getRpcTimeoutToNewActive" : 1,
    "createReqInfo" : 1,
    "transitionToActive" : 1,
    "getProxy" : 1,
    "stringifyException" : 1,
    "error" : 1,
    "recordActiveAttempt" : 2,
    "info" : 2
  },
  "org.apache.hadoop.io.UTF8:<init>(java.lang.String)" : {
    "set" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$FailoverOnNetworkExceptionRetry:<init>(org.apache.hadoop.io.retry.RetryPolicy,int)" : { },
  "org.apache.hadoop.ipc.Server$ConnectionManager:isFull()" : {
    "size" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:getTokenFile(java.io.File,java.lang.String,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,java.lang.String,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "next" : 1,
    "readTokenStorageFile" : 1,
    "addToken" : 1,
    "stripPrefix" : 1,
    "debug" : 1,
    "addDelegationTokens" : 1,
    "copyToken" : 1,
    "isTokenRequired" : 1,
    "doFormattedWrite" : 1,
    "hasNext" : 1,
    "error" : 2,
    "matchService" : 1,
    "setService" : 1,
    "iterator" : 1,
    "load" : 1,
    "exists" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getRelativeOffset(int,long)" : {
    "getStartOffset" : 1,
    "throwIfInvalidOffset" : 1
  },
  "org.apache.hadoop.fs.FileSystem:mkdirs(org.apache.hadoop.fs.Path)" : {
    "mkdirs" : 1,
    "getDirDefault" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withMeanStatisticFunction(java.lang.String,java.util.function.Function)" : {
    "addMeanStatisticFunction" : 1,
    "activeInstance" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:getRecordNum()" : {
    "getRecordNumByLocation" : 1
  },
  "org.apache.hadoop.fs.FileUtil:unTarUsingTar(java.io.File,java.io.File,boolean)" : {
    "makeSecureShellPath" : 2,
    "debug" : 1,
    "toString" : 1,
    "getExitCode" : 1,
    "execute" : 1,
    "append" : 9
  },
  "org.apache.hadoop.fs.protocolPB.PBHelper:convert(org.apache.hadoop.fs.FileStatus)" : {
    "setAccessTime" : 1,
    "getModificationTime" : 1,
    "convert" : 1,
    "getOwner" : 1,
    "setOwner" : 1,
    "hasAcl" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "isEncrypted" : 1,
    "getLen" : 1,
    "getPath" : 1,
    "setPermission" : 1,
    "isSnapshotEnabled" : 1,
    "getPermission" : 1,
    "setFileType" : 3,
    "setSymlink" : 1,
    "getAccessTime" : 1,
    "setBlockReplication" : 1,
    "setPath" : 1,
    "getSymlink" : 1,
    "setBlockSize" : 1,
    "newBuilder" : 1,
    "setGroup" : 1,
    "setLength" : 1,
    "isErasureCoded" : 1,
    "build" : 1,
    "getGroup" : 1,
    "toString" : 2,
    "isSymlink" : 1,
    "setFlags" : 1,
    "isDirectory" : 1,
    "setModificationTime" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$BoundMethod:invokeChecked(java.lang.Object[])" : {
    "invokeChecked" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:coreServiceLaunch(org.apache.hadoop.conf.Configuration,org.apache.hadoop.service.Service,java.util.List,boolean,boolean)" : {
    "init" : 1,
    "debug" : 4,
    "waitForServiceToStop" : 1,
    "start" : 1,
    "unregister" : 1,
    "getServiceName" : 1,
    "execute" : 1,
    "bindArgs" : 1,
    "warn" : 1,
    "stop" : 1,
    "instantiateService" : 1,
    "noteEntryPoint" : 1,
    "isInState" : 3,
    "register" : 1
  },
  "org.apache.hadoop.fs.LocatedFileStatus:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "resolve" : 1,
    "mkdirs" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:shouldBackOff(org.apache.hadoop.ipc.Schedulable)" : {
    "getUserGroupInformation" : 1,
    "debug" : 2,
    "get" : 1,
    "getUserName" : 1,
    "isDebugEnabled" : 1,
    "getAverageResponseTime" : 1,
    "getPriorityLevel" : 2
  },
  "org.apache.hadoop.fs.statistics.impl.PairedDurationTrackerFactory$PairedDurationTracker:asDuration()" : {
    "asDuration" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer$KeyClassOption:<init>(java.lang.Class)" : { },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:trackStoreToken(org.apache.hadoop.util.functional.InvocationRaisingIOE)" : {
    "trackInvocation" : 1
  },
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newCachedThreadPool(java.util.concurrent.ThreadFactory)" : { },
  "org.apache.hadoop.jmx.JMXJsonServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "writeStringField" : 2,
    "writeStartObject" : 1,
    "error" : 2,
    "setHeader" : 2,
    "setStatus" : 3,
    "listBeans" : 2,
    "useDefaultPrettyPrinter" : 1,
    "createGenerator" : 1,
    "split" : 1,
    "flush" : 1,
    "disable" : 1,
    "getWriter" : 1,
    "setContentType" : 1,
    "close" : 2,
    "isInstrumentationAccessAllowed" : 1,
    "getParameter" : 2
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall:<init>(java.lang.reflect.Method,java.lang.Object[],boolean,int,org.apache.hadoop.io.retry.RetryInvocationHandler,org.apache.hadoop.io.retry.AsyncCallHandler)" : { },
  "org.apache.hadoop.fs.FsShell:getCurrentTrashDir()" : {
    "getCurrentTrashDir" : 1,
    "getTrash" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : { },
  "org.apache.hadoop.service.launcher.InterruptEscalator:getService()" : {
    "getOwner" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:write(byte[],int,int)" : {
    "checkArgument" : 4,
    "verifyState" : 1
  },
  "org.apache.hadoop.util.LineReader:<init>(java.io.InputStream,org.apache.hadoop.conf.Configuration,byte[])" : {
    "getInt" : 1
  },
  "org.apache.hadoop.net.NetUtils:getCanonicalUri(java.net.URI,int)" : {
    "getScheme" : 1,
    "getPort" : 1,
    "canonicalizeHost" : 1,
    "equals" : 1,
    "getPath" : 1,
    "getFragment" : 1,
    "getUserInfo" : 1,
    "getQuery" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.http.HttpServer2:createWebAppContext(org.apache.hadoop.http.HttpServer2$Builder,org.apache.hadoop.security.authorize.AccessControlList,java.lang.String)" : {
    "setDefaultsDescriptor" : 1,
    "getServletContext" : 2,
    "setWar" : 1,
    "addServlet" : 1,
    "setInitParameters" : 1,
    "setTempDirectory" : 1,
    "isEmpty" : 1,
    "addNoCacheFilter" : 1,
    "setContextPath" : 1,
    "setDisplayName" : 1,
    "put" : 4,
    "setAttribute" : 3,
    "build" : 1,
    "get" : 1,
    "builder" : 1,
    "setWelcomeFiles" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:processResult(int,java.lang.String,java.lang.Object,org.apache.zookeeper.data.Stat)" : {
    "debug" : 2,
    "becomeStandby" : 1,
    "fatalError" : 1,
    "enterNeutralMode" : 1,
    "isStaleClient" : 1,
    "joinElectionInternal" : 1,
    "isNodeDoesNotExist" : 1,
    "warn" : 1,
    "reJoinElectionAfterFailureToBecomeActive" : 1,
    "shouldRetry" : 1,
    "becomeActive" : 1,
    "monitorLockNodeAsync" : 1,
    "get" : 1,
    "getEphemeralOwner" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1,
    "getSessionId" : 1,
    "isSessionExpired" : 1,
    "isSuccess" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:add(org.apache.hadoop.metrics2.MetricsTag)" : {
    "tuple" : 1,
    "name" : 1,
    "value" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$1:getCodec()" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:listXAttrs(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "listXAttrs" : 1
  },
  "org.apache.hadoop.io.compress.BlockDecompressorStream:getCompressedData()" : {
    "read" : 1,
    "checkStream" : 1,
    "rawReadInt" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "fullPath" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleQuantiles:insertBatch()" : {
    "next" : 2,
    "add" : 2,
    "previous" : 1,
    "size" : 3,
    "allowableError" : 1,
    "listIterator" : 1,
    "nextIndex" : 3,
    "sort" : 1,
    "floor" : 1,
    "previousIndex" : 1
  },
  "org.apache.hadoop.conf.Configuration:setLong(java.lang.String,long)" : {
    "set" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.net.SocketInputStream:<init>(java.net.Socket,long)" : {
    "getChannel" : 1
  },
  "org.apache.hadoop.ipc.RpcServerException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.io.WritableComparator:<init>(java.lang.Class)" : { },
  "org.apache.hadoop.metrics2.lib.MutableRates:<init>(org.apache.hadoop.metrics2.lib.MetricsRegistry)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "getKey" : 1,
    "monotonicNow" : 1,
    "addGauge" : 1,
    "entrySet" : 1,
    "clearChanged" : 1,
    "format" : 2,
    "capitalize" : 1,
    "getSnapshotTimeStamp" : 1,
    "getValue" : 1,
    "uncapitalize" : 1,
    "getSum" : 1,
    "getCount" : 1,
    "info" : 1,
    "changed" : 2
  },
  "org.apache.hadoop.fs.GetSpaceUsed$Builder:getInterval()" : {
    "getLong" : 1
  },
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.util.Set)" : {
    "getFileDefault" : 1,
    "getDefault" : 1,
    "getDirDefault" : 1
  },
  "org.apache.hadoop.fs.VectoredReadUtils:readInDirectBuffer(org.apache.hadoop.fs.FileRange,java.nio.ByteBuffer,org.apache.hadoop.util.functional.Function4RaisingIOE)" : {
    "min" : 1,
    "debug" : 2,
    "apply" : 1,
    "getOffset" : 1,
    "getLength" : 1,
    "validateRangeRequest" : 1,
    "put" : 1
  },
  "org.apache.hadoop.util.StringUtils$TraditionalBinaryPrefix:string2long(java.lang.String)" : {
    "trim" : 1,
    "parseLong" : 2,
    "valueOf" : 1,
    "isDigit" : 1,
    "length" : 1,
    "substring" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:bufferStartOffset()" : {
    "throwIfInvalidBuffer" : 1
  },
  "org.apache.hadoop.util.JsonSerialization:load(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileStatus)" : {
    "fromJsonStream" : 1,
    "opt" : 1,
    "openFile" : 1,
    "build" : 1,
    "getLen" : 1,
    "toString" : 1,
    "awaitFuture" : 1,
    "withFileStatus" : 1
  },
  "org.apache.hadoop.fs.shell.Truncate:waitForRecovery()" : {
    "sleep" : 1,
    "println" : 2,
    "flush" : 2,
    "getLen" : 1,
    "refreshStatus" : 1
  },
  "org.apache.hadoop.io.compress.lz4.Lz4Decompressor:setInput(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "limit" : 1,
    "position" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getScheme" : 1,
    "valueOf" : 1,
    "supportAutoAddingFallbackOnNoMounts" : 1,
    "fsGetter" : 2,
    "error" : 1,
    "getAuthority" : 1,
    "setConf" : 1,
    "doAs" : 1,
    "getPort" : 1,
    "getHomeDirectory" : 1,
    "get" : 3,
    "toString" : 2,
    "getBoolean" : 2,
    "initialize" : 1,
    "createFileSystem" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFormat$NotEnoughArgumentsException:getMessage()" : {
    "getMessage" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcEnQueueTime(long)" : {
    "add" : 2
  },
  "org.apache.hadoop.io.Text:writeString(java.io.DataOutput,java.lang.String)" : {
    "encode" : 1,
    "array" : 1,
    "writeVInt" : 1,
    "limit" : 1,
    "write" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : {
    "getVersion" : 2,
    "getValueClass" : 1,
    "init" : 1,
    "getClass" : 2,
    "getMetadata" : 1,
    "metadata" : 1,
    "getCodec" : 1,
    "getKeyClass" : 1,
    "getCompressionCodec" : 1,
    "getCompressionType" : 1,
    "getBufferSize" : 1,
    "getOption" : 13,
    "getFileSystem" : 1,
    "getDefaultBlockSize" : 1,
    "getValue" : 15,
    "file" : 1,
    "getSync" : 1,
    "getDefaultReplication" : 1,
    "create" : 1,
    "exists" : 1,
    "close" : 1,
    "append" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:ioStatisticsContextAvailable()" : {
    "available" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:makeAbsolute(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "isAbsolute" : 1
  },
  "org.apache.hadoop.fs.impl.FSBuilderSupport:getLong(java.lang.String,long)" : {
    "getLong" : 1,
    "warn" : 1,
    "debug" : 1,
    "getTrimmed" : 1,
    "format" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainOutputStream:write(byte[],int,int)" : {
    "reference" : 1,
    "unreference" : 1,
    "writeArray0" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$AutoRenewalForUserCredsRunnable:run()" : {
    "set" : 1,
    "getTGT" : 1,
    "debug" : 1,
    "max" : 1,
    "incr" : 2,
    "getTime" : 1,
    "isDestroyed" : 1,
    "format" : 1,
    "error" : 4,
    "sleep" : 1,
    "warn" : 3,
    "getEndTime" : 1,
    "relogin" : 1,
    "exponentialBackoffRetry" : 1,
    "getRefreshTime" : 1,
    "now" : 2,
    "getUserName" : 5,
    "getNextTgtRenewalTime" : 1,
    "value" : 2
  },
  "org.apache.hadoop.fs.Globber:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "getConf" : 1,
    "get" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:getInfo(org.apache.hadoop.metrics2.annotation.Metric,java.lang.reflect.Field)" : {
    "getName" : 1,
    "getInfo" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:acquire(int)" : {
    "debug" : 2,
    "updateStatus" : 1,
    "continueRetry" : 1,
    "releaseReadyBlock" : 1,
    "format" : 1,
    "tryAcquire" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:setContext(java.lang.String)" : {
    "tag" : 1
  },
  "org.apache.hadoop.io.compress.SnappyCodec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:listStatusForFallbackLink()" : {
    "getPathWithoutSchemeAndAuthority" : 1,
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 2,
    "getName" : 1,
    "isRoot" : 1,
    "getPath" : 1,
    "setPath" : 1,
    "listStatus" : 1,
    "exists" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.protocolPB.PBHelper:convert(org.apache.hadoop.fs.FSProtos$FileStatusProto)" : {
    "getPermission" : 1,
    "getModificationTime" : 1,
    "format" : 1,
    "getAccessTime" : 1,
    "convert" : 1,
    "getOwner" : 1,
    "weakIntern" : 2,
    "getSymlink" : 1,
    "getFileType" : 2,
    "getBlockSize" : 1,
    "getGroup" : 1,
    "getPath" : 1,
    "getLength" : 1,
    "attributes" : 1,
    "getFlags" : 1,
    "getBlockReplication" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:transitionToActive(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ha.proto.HAServiceProtocolProtos$TransitionToActiveRequestProto)" : {
    "transitionToActive" : 1,
    "convert" : 1,
    "getReqInfo" : 1
  },
  "org.apache.hadoop.metrics2.lib.MethodMetric:newTag(java.lang.Class)" : {
    "getName" : 2,
    "invoke" : 1,
    "tag" : 1,
    "error" : 1
  },
  "org.apache.hadoop.io.serializer.WritableSerialization$WritableDeserializer:<init>(org.apache.hadoop.conf.Configuration,java.lang.Class)" : {
    "setConf" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : {
    "resolvePath" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:getAllStatistics()" : {
    "getValue" : 1,
    "getKey" : 1,
    "size" : 1,
    "entrySet" : 1,
    "create" : 1,
    "toString" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.local.RawLocalFs:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:toString()" : {
    "absolute" : 1,
    "blockNumber" : 1,
    "get" : 1,
    "format" : 2,
    "limit" : 2,
    "toString" : 1,
    "position" : 1,
    "append" : 3
  },
  "org.apache.hadoop.io.MapFile$Reader:seek(org.apache.hadoop.io.WritableComparable)" : {
    "seekInternal" : 1
  },
  "org.apache.hadoop.ipc.Server:getCallQueueLen()" : {
    "size" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:<init>(org.apache.hadoop.fs.viewfs.ChRootedFileSystem,org.apache.hadoop.fs.FileStatus)" : {
    "getPath" : 1,
    "stripOutRoot" : 1
  },
  "org.apache.hadoop.conf.Configuration:writeXml(java.io.OutputStream)" : {
    "writeXml" : 1
  },
  "org.apache.hadoop.fs.shell.MoveCommands$MoveFromLocal:processPath(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : {
    "processPath" : 1,
    "toString" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.ipc.Client:getPingInterval(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.util.functional.TaskPool:throwOne(java.util.Collection)" : {
    "next" : 2,
    "isInstance" : 1,
    "getClass" : 1,
    "iterator" : 1,
    "addSuppressed" : 1,
    "castAndThrow" : 1,
    "hasNext" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSDelegationToken$KMSDelegationTokenIdentifier:<init>()" : { },
  "org.apache.hadoop.fs.shell.Stat:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "toCharArray" : 1,
    "getName" : 1,
    "getPermission" : 2,
    "isFile" : 1,
    "getModificationTime" : 2,
    "format" : 2,
    "getAccessTime" : 2,
    "getOwner" : 1,
    "println" : 1,
    "getReplication" : 1,
    "toOctal" : 1,
    "getBlockSize" : 1,
    "getGroup" : 1,
    "getLen" : 1,
    "toString" : 1,
    "isDirectory" : 1,
    "append" : 15
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "fullPath" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.FileContext:deleteOnExit(org.apache.hadoop.fs.Path)" : {
    "add" : 1,
    "util" : 1,
    "get" : 2,
    "isEmpty" : 1,
    "addShutdownHook" : 1,
    "exists" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.shell.find.Result:combine(org.apache.hadoop.fs.shell.find.Result)" : {
    "isDescend" : 2,
    "isPass" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:createHuffmanDecodingTables(int,int)" : {
    "hbCreateDecodeTables" : 1
  },
  "org.apache.hadoop.io.BytesWritable:getSize()" : {
    "getLength" : 1
  },
  "org.apache.hadoop.ipc.Server:getNumDroppedConnections()" : {
    "getDroppedConnections" : 1
  },
  "org.apache.hadoop.ha.HealthMonitor:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.ha.HAServiceTarget)" : {
    "getLong" : 3,
    "getInt" : 2
  },
  "org.apache.hadoop.fs.FileContext:listCorruptFileBlocks(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "listCorruptFileBlocks" : 1
  },
  "org.apache.hadoop.io.compress.DefaultCodec:getDecompressorType()" : {
    "getZlibDecompressorType" : 1
  },
  "org.apache.hadoop.ipc.ProtobufWrapperLegacy:<init>(java.lang.Object)" : {
    "getClass" : 1,
    "checkArgument" : 1,
    "isUnshadedProtobufMessage" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "contains" : 1,
    "create" : 1
  },
  "org.apache.hadoop.util.DiskValidatorFactory:getInstance(java.lang.Class)" : {
    "containsKey" : 1,
    "get" : 1,
    "newInstance" : 1,
    "putIfAbsent" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:retryUpToMaximumCountWithProportionalSleep(int,long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations$End:<init>(org.apache.hadoop.fs.impl.prefetch.BlockOperations$Operation)" : { },
  "org.apache.hadoop.security.UserGroupInformation:createProxyUserForTesting(java.lang.String,org.apache.hadoop.security.UserGroupInformation,java.lang.String[])" : {
    "getShortUserName" : 1,
    "createProxyUser" : 1,
    "ensureInitialized" : 1,
    "setUserGroups" : 1
  },
  "org.apache.hadoop.ipc.ProtobufHelper:getRemoteException(org.apache.hadoop.thirdparty.protobuf.ServiceException)" : {
    "getRemoteException" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:hashCode()" : {
    "toShort" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:getStringData(java.lang.String,org.apache.zookeeper.data.Stat)" : {
    "getData" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:init(boolean)" : {
    "getValueClass" : 2,
    "getDeserializer" : 2,
    "toStringChecked" : 2,
    "getKeyClass" : 2,
    "asSubclass" : 1,
    "readString" : 3,
    "getCanonicalName" : 2,
    "newInstance" : 1,
    "setConf" : 1,
    "createInputStream" : 4,
    "getDecompressor" : 4,
    "readFields" : 3,
    "getPos" : 1,
    "getClassByName" : 1,
    "readFully" : 2,
    "readBoolean" : 2,
    "open" : 3
  },
  "org.apache.hadoop.util.VersionInfo:getDate()" : {
    "_getDate" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseServiceUserNames(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getStringCollection" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:validateSslConfiguration(org.apache.hadoop.conf.Configuration)" : {
    "get" : 4,
    "isEmpty" : 4
  },
  "org.apache.hadoop.io.SequenceFile$Writer:append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)" : {
    "append" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet$SetIterator:ensureNext()" : {
    "nextNonemptyEntry" : 1,
    "getNext" : 1
  },
  "org.apache.hadoop.io.Text:set(org.apache.hadoop.io.Text)" : {
    "set" : 1,
    "getLength" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getCanonicalUri()" : {
    "getCanonicalUri" : 1
  },
  "org.apache.hadoop.security.Credentials:readTokenStorageFile(java.io.File,org.apache.hadoop.conf.Configuration)" : {
    "toPath" : 1,
    "newInputStream" : 1,
    "readTokenStorageStream" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleQuantiles:snapshot()" : {
    "query" : 1,
    "isEmpty" : 1,
    "insertBatch" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.ContentSummary$Builder:spaceQuota(long)" : {
    "spaceQuota" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodecFactory:main(java.lang.String[])" : {
    "println" : 1,
    "read" : 4,
    "getCodec" : 1,
    "equals" : 2,
    "createOutputStream" : 1,
    "write" : 2,
    "close" : 3,
    "getDefaultExtension" : 1,
    "removeSuffix" : 1,
    "createInputStream" : 1
  },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:add(org.apache.hadoop.net.Node)" : {
    "add" : 1,
    "getParent" : 1,
    "debug" : 1,
    "unlock" : 1,
    "writeLock" : 2,
    "getNetworkLocation" : 5,
    "setNetworkLocation" : 1,
    "equals" : 1,
    "getPath" : 2,
    "lock" : 1,
    "toString" : 2,
    "isDebugEnabled" : 1,
    "getNode" : 2,
    "incrementRacks" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.Shell:getGetPermissionCommand()" : {
    "getWinUtilsPath" : 1
  },
  "org.apache.hadoop.util.ProtoUtil:getUgi(org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$UserInformationProto)" : {
    "createProxyUser" : 1,
    "hasEffectiveUser" : 1,
    "hasRealUser" : 1,
    "getRealUser" : 1,
    "createRemoteUser" : 2,
    "getEffectiveUser" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:enterClosedState()" : {
    "enterState" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:removeAcl(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "removeAcl" : 1
  },
  "org.apache.hadoop.util.ConfTest:checkConf(java.io.InputStream)" : {
    "getXMLEventsForQName" : 2,
    "add" : 9,
    "getKey" : 1,
    "getDuplicatedQNames" : 1,
    "getLocation" : 2,
    "getStartElement" : 2,
    "parseConf" : 1,
    "getName" : 1,
    "entrySet" : 1,
    "format" : 6,
    "isEmpty" : 3,
    "getMessage" : 1,
    "put" : 1,
    "getValue" : 2,
    "getLineNumber" : 2,
    "size" : 1,
    "getElement" : 1,
    "isAttribute" : 1,
    "get" : 1,
    "equals" : 2,
    "join" : 1,
    "asStartElement" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getStatus(org.apache.hadoop.fs.Path)" : {
    "getStatus" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:bufferSize(int)" : { },
  "org.apache.hadoop.security.UserGroupInformation:getBestUGI(java.lang.String,java.lang.String)" : {
    "getCurrentUser" : 1,
    "getUGIFromTicketCache" : 1,
    "createRemoteUser" : 1
  },
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String,int,java.lang.String)" : {
    "createSocketAddr" : 1
  },
  "org.apache.hadoop.security.SaslRpcServer:init(org.apache.hadoop.conf.Configuration)" : {
    "addProvider" : 1
  },
  "org.apache.hadoop.ipc.internal.ShadedProtobufHelper:protoFromToken(org.apache.hadoop.security.token.Token)" : {
    "getByteString" : 2,
    "setPassword" : 1,
    "getPassword" : 1,
    "setServiceBytes" : 1,
    "build" : 1,
    "getIdentifier" : 1,
    "setIdentifier" : 1,
    "setKindBytes" : 1,
    "getKind" : 1,
    "getFixedByteString" : 2,
    "newBuilder" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:createProxyUser(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : {
    "add" : 2,
    "isEmpty" : 1,
    "getPrincipals" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:getTopTokenRealOwners(int)" : {
    "add" : 1,
    "offer" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "min" : 1,
    "size" : 1,
    "entrySet" : 1,
    "isEmpty" : 1,
    "poll" : 1,
    "reverse" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:publishMetricsFromQueue()" : {
    "sleep" : 1,
    "consumeAll" : 1,
    "min" : 1,
    "refreshQueueSizeGauge" : 2,
    "max" : 1,
    "nanoTime" : 1,
    "clear" : 1,
    "nextInt" : 1,
    "error" : 2,
    "info" : 2
  },
  "org.apache.hadoop.fs.shell.Ls:processOptions(java.util.LinkedList)" : {
    "add" : 1,
    "getOpt" : 10,
    "initialiseOrderComparator" : 1,
    "isEmpty" : 1,
    "parse" : 1,
    "setRecursive" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:notFoundStatus(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:startUpload()" : {
    "startUpload" : 1,
    "flush" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.ArrayWritable:readFields(java.io.DataInput)" : {
    "readFields" : 1,
    "newInstance" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createConnection(java.net.URL,java.lang.String)" : {
    "getActualUgi" : 1,
    "getUndeclaredThrowable" : 1,
    "setRequestMethod" : 1,
    "openConnection" : 1,
    "createAuthenticatedURL" : 1,
    "setUseCaches" : 1,
    "configureConnection" : 1,
    "warn" : 2,
    "doAs" : 1,
    "getPort" : 1,
    "getDoAsUser" : 1,
    "equals" : 2,
    "toString" : 1,
    "getHost" : 1,
    "setDoOutput" : 1
  },
  "org.apache.hadoop.util.GenericsUtil:isLog4jLogger(java.lang.Class)" : {
    "getName" : 1,
    "isLog4jLogger" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:snapshotMap(java.util.Map,java.util.function.Function)" : {
    "copyMap" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:add(org.apache.hadoop.metrics2.MetricsTag)" : {
    "tuple" : 1,
    "name" : 1,
    "value" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:getDistanceByPath(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : {
    "warn" : 1,
    "getPathComponents" : 2,
    "abs" : 1,
    "min" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.fs.FileSystem:newInstanceLocal(org.apache.hadoop.conf.Configuration)" : {
    "newInstance" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:checkParameterValidity(java.lang.String[])" : {
    "checkParameterValidity" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addDefaultServlets(org.apache.hadoop.conf.Configuration)" : {
    "addServlet" : 4,
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.crypto.CryptoFSDataOutputStream:<init>(org.apache.hadoop.fs.FSDataOutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[],boolean)" : {
    "getPos" : 2
  },
  "org.apache.hadoop.io.WritableUtils:writeStringArray(java.io.DataOutput,java.lang.String[])" : {
    "writeInt" : 1,
    "writeString" : 1
  },
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor$SnappyDirectDecompressor:finished()" : {
    "finished" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "getLinkTarget" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme$ChildFsGetter:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "debug" : 1,
    "getScheme" : 1,
    "get" : 1,
    "equals" : 1,
    "isDebugEnabled" : 1,
    "createFileSystem" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:createDecoder(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : {
    "checkNotNull" : 2,
    "getCodecName" : 1,
    "createCodec" : 1,
    "createDecoder" : 1,
    "getCodecClassName" : 1,
    "getSchema" : 1
  },
  "org.apache.hadoop.io.DataInputBuffer:reset(byte[],int,int)" : {
    "reset" : 1
  },
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:execute()" : {
    "run" : 1,
    "join" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.io.InputStream)" : { },
  "org.apache.hadoop.crypto.CryptoInputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.io.compress.snappy.SnappyCompressor:reinit(org.apache.hadoop.conf.Configuration)" : {
    "reset" : 1
  },
  "org.apache.hadoop.io.EnumSetWritable:write(java.io.DataOutput)" : {
    "writeInt" : 2,
    "getClass" : 1,
    "getName" : 2,
    "writeObject" : 1,
    "toArray" : 1,
    "writeString" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Writer:replication(short)" : { },
  "org.apache.hadoop.fs.FileUtil:maybeIgnoreMissingDirectory(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.io.FileNotFoundException)" : {
    "debug" : 1,
    "addSuppressed" : 1,
    "hasPathCapability" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.CachingGetSpaceUsed:<init>(org.apache.hadoop.fs.GetSpaceUsed$Builder)" : {
    "getInitialUsed" : 1,
    "getInterval" : 1,
    "getJitter" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupRandPartB()" : {
    "setupRandPartC" : 1,
    "setupRandPartA" : 2
  },
  "org.apache.hadoop.ipc.Server:closeConnection(org.apache.hadoop.ipc.Server$Connection)" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:isChecksumFile(org.apache.hadoop.fs.Path)" : {
    "getName" : 1,
    "endsWith" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.shell.Count:<init>()" : { },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:hiddenImpl(java.lang.Class,java.lang.Class[])" : {
    "hiddenImpl" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : {
    "createOutputStreamWithMode" : 1,
    "getLen" : 1,
    "getFileStatus" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:getName(org.apache.hadoop.io.nativeio.NativeIO$POSIX$IdCache,int)" : {
    "getGroupName" : 1,
    "debug" : 1,
    "currentTimeMillis" : 1,
    "get" : 1,
    "getUserName" : 1,
    "isDebugEnabled" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:close()" : {
    "close" : 3
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getUriDefaultPort()" : {
    "getDefaultPortIfDefined" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Du:setHumanReadable(boolean)" : { },
  "org.apache.hadoop.service.launcher.ServiceLauncher:exitWithMessage(int,java.lang.String)" : {
    "terminate" : 1
  },
  "org.apache.hadoop.io.compress.BlockDecompressorStream:resetState()" : {
    "resetState" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache$ClientFinalizer:run()" : {
    "closeAll" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Du:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "getSnapshotSpaceConsumed" : 1,
    "formatSize" : 2,
    "getUsagesTable" : 1,
    "getSnapshotLength" : 1,
    "getContentSummary" : 1,
    "getLength" : 1,
    "addRow" : 1,
    "getSpaceConsumed" : 1
  },
  "org.apache.hadoop.metrics2.sink.GraphiteSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : {
    "parseInt" : 1,
    "getString" : 3,
    "connect" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:incrementGauge(java.lang.String,long)" : {
    "get" : 1,
    "incAtomicLong" : 1
  },
  "org.apache.hadoop.fs.FileSystem:copyFromLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyFromLocalFile" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:sync()" : {
    "writeInt" : 1,
    "getPos" : 2,
    "write" : 1
  },
  "org.apache.hadoop.util.dynamic.BindingUtils:loadStaticMethod(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Class[])" : {
    "isStatic" : 1,
    "debug" : 1,
    "checkState" : 1,
    "available" : 1,
    "loadInvocation" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addCounter(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "tuple" : 1,
    "name" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:supportsSymlinks()" : {
    "supportsSymlinks" : 1
  },
  "org.apache.hadoop.io.WritableUtils:writeCompressedString(java.io.DataOutput,java.lang.String)" : {
    "writeCompressedByteArray" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:cedeActive(int)" : {
    "doCedeActive" : 1,
    "doAs" : 1,
    "getLoginUser" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:writeToNew(org.apache.hadoop.fs.Path)" : {
    "create" : 1,
    "store" : 1
  },
  "org.apache.hadoop.io.BoundedByteArrayOutputStream:<init>(int,int)" : { },
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:execute(java.lang.Runnable)" : {
    "currentThread" : 1,
    "interrupt" : 1,
    "execute" : 1,
    "acquire" : 1,
    "trackDuration" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "resolve" : 1,
    "setStoragePolicy" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:compareTo(java.lang.Object)" : {
    "toString" : 2,
    "compareTo" : 1
  },
  "org.apache.hadoop.fs.FSDataInputStream:maxReadSizeForVectorReads()" : {
    "maxReadSizeForVectorReads" : 1
  },
  "org.apache.hadoop.io.ObjectWritable$NullInstance:<init>(java.lang.Class,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.security.token.delegation.web.PseudoDelegationTokenAuthenticator:<init>()" : {
    "getShortUserName" : 1,
    "getCurrentUser" : 1
  },
  "org.apache.hadoop.util.ShutdownHookManager:getShutdownTimeout(org.apache.hadoop.conf.Configuration)" : {
    "getTimeDuration" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:getPlugin(java.lang.String)" : {
    "init" : 1,
    "forName" : 1,
    "isEmpty" : 1,
    "newInstance" : 1,
    "getClassName" : 1,
    "subset" : 1,
    "getPluginLoader" : 1
  },
  "org.apache.hadoop.fs.FileContext:open(org.apache.hadoop.fs.Path,int)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "open" : 1
  },
  "org.apache.hadoop.util.StringUtils:formatPercent(double,int)" : {
    "format" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:needsInput()" : {
    "setInputFromSavedData" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSelector:selectToken(org.apache.hadoop.io.Text,java.util.Collection)" : {
    "equals" : 2,
    "getKind" : 1,
    "getService" : 1
  },
  "org.apache.hadoop.ipc.ProcessingDetails:set(org.apache.hadoop.ipc.ProcessingDetails$Timing,long,java.util.concurrent.TimeUnit)" : {
    "set" : 1,
    "convert" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : {
    "fullPath" : 1,
    "createInternal" : 1
  },
  "org.apache.hadoop.fs.Globber:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "debug" : 1,
    "getFileStatus" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues3(int,int)" : {
    "hbAssignCodes" : 1
  },
  "org.apache.hadoop.security.http.CrossOriginFilter:doCrossFilter(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "encodeHeader" : 1,
    "isMethodAllowed" : 1,
    "debug" : 5,
    "getAllowedHeadersHeader" : 1,
    "toString" : 1,
    "isDebugEnabled" : 5,
    "getAllowedMethodsHeader" : 1,
    "isCrossOrigin" : 1,
    "areHeadersAllowed" : 1,
    "areOriginsAllowed" : 1,
    "setHeader" : 5,
    "getHeader" : 3
  },
  "org.apache.hadoop.util.StringUtils:split(java.lang.String)" : {
    "split" : 1
  },
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:equals(java.lang.Object)" : {
    "equal" : 4,
    "elementsEqual" : 1,
    "name" : 2,
    "description" : 2,
    "metrics" : 2,
    "tags" : 2,
    "timestamp" : 2
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : {
    "checkPath" : 1,
    "getFileBlockLocations" : 1
  },
  "org.apache.hadoop.fs.shell.find.BaseExpression:finish()" : {
    "getChildren" : 1,
    "finish" : 1
  },
  "org.apache.hadoop.io.WritableUtils:readStringSafely(java.io.DataInput,int)" : {
    "readVInt" : 1,
    "readFully" : 1,
    "decode" : 1
  },
  "org.apache.hadoop.ipc.Client:checkAsyncCall()" : {
    "incrementAndGet" : 1,
    "isAsynchronousMode" : 1,
    "format" : 1,
    "decrementAndGet" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:getMountTableConfigLoader(org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "getName" : 1,
    "get" : 1,
    "format" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.ipc.WeightedTimeCostProvider:getCost(org.apache.hadoop.ipc.ProcessingDetails)" : {
    "values" : 2,
    "get" : 1
  },
  "org.apache.hadoop.ipc.Client:toString()" : {
    "getClass" : 1,
    "getSimpleName" : 1,
    "byteToHexString" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:progressable(org.apache.hadoop.util.Progressable)" : { },
  "org.apache.hadoop.fs.DUHelper:main(java.lang.String[])" : {
    "println" : 2,
    "getFolderUsage" : 2
  },
  "org.apache.hadoop.ipc.Server:getRemoteIp()" : {
    "get" : 1,
    "getHostInetAddress" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Cp:popPreserveOption(java.util.List)" : {
    "next" : 1,
    "iterator" : 1,
    "getAttribute" : 1,
    "setPreserve" : 1,
    "equals" : 1,
    "length" : 2,
    "hasNext" : 1,
    "preserve" : 1,
    "charAt" : 1,
    "substring" : 1,
    "remove" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:<init>(int)" : {
    "checkPositiveInteger" : 1,
    "newSetFromMap" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:getNodeForNetworkLocation(org.apache.hadoop.net.Node)" : {
    "getNetworkLocation" : 1,
    "getNode" : 1
  },
  "org.apache.hadoop.util.StringUtils:getFormattedTimeWithDiff(org.apache.commons.lang3.time.FastDateFormat,long,long)" : {
    "format" : 1,
    "getFormattedTimeWithDiff" : 1
  },
  "org.apache.hadoop.ha.SshFenceByTcpPort$Args:parseConfiggedPort(java.lang.String)" : {
    "parseInt" : 1
  },
  "org.apache.hadoop.io.retry.RetryUtils$WrapperRetryPolicy:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.fs.crypto.CryptoFSDataInputStream:<init>(org.apache.hadoop.fs.FSDataInputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[])" : { },
  "org.apache.hadoop.io.DataInputByteBuffer:getPosition()" : {
    "getPosition" : 1
  },
  "org.apache.hadoop.crypto.key.UserProvider:deleteKey(java.lang.String)" : {
    "getMetadata" : 1,
    "getVersions" : 1,
    "removeSecretKey" : 2,
    "remove" : 1,
    "buildVersionName" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "fullPath" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:setExternalDelegationTokenSecretManager(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager)" : {
    "setExternalDelegationTokenSecretManager" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleQuantiles:query(double)" : {
    "next" : 2,
    "size" : 2,
    "get" : 1,
    "isEmpty" : 1,
    "checkState" : 1,
    "allowableError" : 1,
    "listIterator" : 1
  },
  "org.apache.hadoop.util.LightWeightResizableGSet:<init>(int,float)" : {
    "actualArrayLength" : 1
  },
  "org.apache.hadoop.io.MapFile$Merger:mergePass()" : {
    "next" : 2,
    "compare" : 1,
    "newInstance" : 2,
    "append" : 1
  },
  "org.apache.hadoop.fs.Path:<init>(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getScheme" : 2,
    "resolve" : 1,
    "equals" : 1,
    "isEmpty" : 1,
    "getPath" : 3,
    "initialize" : 1,
    "getFragment" : 2,
    "getAuthority" : 2
  },
  "org.apache.hadoop.ha.FailoverController:createReqInfo()" : { },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:canRelease(org.apache.hadoop.fs.impl.prefetch.BufferData)" : {
    "stateEqualsOneOf" : 1
  },
  "org.apache.hadoop.fs.local.LocalFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.util.SysInfoWindows:getNumVCoresUsed()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$WrappingRemoteIterator:sourceHasNext()" : {
    "getSource" : 1,
    "hasNext" : 1,
    "close" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:cancel()" : {
    "cancel" : 1,
    "getConf" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementLargeReadOps(int)" : {
    "getThreadStatistics" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "newInstance" : 1
  },
  "org.apache.hadoop.net.NetUtils:getHostDetailsAsString(java.lang.String,int,java.lang.String)" : {
    "quoteHost" : 2,
    "toString" : 1,
    "append" : 8
  },
  "org.apache.hadoop.util.DataChecksum:getHeader()" : {
    "getChecksumHeaderSize" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:isHadoopLogin()" : {
    "getLogin" : 1
  },
  "org.apache.hadoop.fs.FileContext:truncate(org.apache.hadoop.fs.Path,long)" : {
    "truncate" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.fs.FutureDataInputStreamBuilder:build()" : { },
  "org.apache.hadoop.net.NetUtils:createSocketAddrUnresolved(java.lang.String)" : {
    "createSocketAddr" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicy$RetryAction:<init>(org.apache.hadoop.io.retry.RetryPolicy$RetryAction$RetryDecision,long)" : { },
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "initFromFS" : 1,
    "requireNonNull" : 2
  },
  "org.apache.hadoop.fs.permission.FsCreateModes:toString()" : {
    "getUnmasked" : 1,
    "format" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrAuthorizationSuccesses()" : {
    "incr" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:addServiceUserRawCallVolume(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : {
    "getTotalServiceUserRawCallVolume" : 1,
    "info" : 1,
    "addCounter" : 1
  },
  "org.apache.hadoop.log.LogLevel$Servlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getClass" : 1,
    "initHTML" : 1,
    "process" : 1,
    "println" : 7,
    "getName" : 1,
    "getServletContext" : 1,
    "hasAdministratorAccess" : 1,
    "getLogger" : 2,
    "isLog4jLogger" : 1,
    "getParameter" : 2
  },
  "org.apache.hadoop.fs.FileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "createNonRecursive" : 1,
    "of" : 2
  },
  "org.apache.hadoop.util.Timer:now()" : {
    "now" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:parseCommandArgs(org.apache.hadoop.conf.Configuration,java.util.List)" : {
    "add" : 1,
    "toURL" : 1,
    "createGenericOptionsParser" : 1,
    "debug" : 4,
    "isParseSuccessful" : 1,
    "toURI" : 1,
    "asList" : 2,
    "getCommandLine" : 1,
    "checkNotNull" : 1,
    "hasOption" : 2,
    "size" : 2,
    "addAll" : 1,
    "getOptionValues" : 2,
    "toArray" : 1,
    "getRemainingArgs" : 1,
    "append" : 3,
    "verifyConfigurationFilesExist" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "removeAclEntries" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:getReason()" : {
    "constructReasonString" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,double)" : {
    "mustLong" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:blockSize(long)" : { },
  "org.apache.hadoop.security.ssl.SSLFactory:init()" : {
    "getSocketFactory" : 1,
    "setProtocols" : 1,
    "init" : 2,
    "getHostnameVerifier" : 1,
    "getTrustManagers" : 1,
    "getInstance" : 1,
    "getDefaultSSLParameters" : 1,
    "getKeyManagers" : 1
  },
  "org.apache.hadoop.util.ComparableVersion:compareTo(org.apache.hadoop.util.ComparableVersion)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.util.IdentityHashStore:<init>(int)" : {
    "log" : 2,
    "pow" : 1,
    "checkArgument" : 1,
    "ceil" : 1,
    "realloc" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:decommissionNode(org.apache.hadoop.net.Node)" : {
    "add" : 1,
    "getName" : 1,
    "unlock" : 1,
    "writeLock" : 2,
    "interRemoveNodeWithEmptyRack" : 1,
    "getPath" : 1,
    "lock" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "removeXAttr" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawEncoderWithFallback(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "contains" : 1,
    "debug" : 2,
    "createRawCoderFactory" : 1,
    "createEncoder" : 1,
    "getBoolean" : 1,
    "isDebugEnabled" : 1,
    "getRawCoderNames" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:createCodec(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : {
    "getClassByName" : 1,
    "asSubclass" : 1,
    "newInstance" : 1,
    "getConstructor" : 1
  },
  "org.apache.hadoop.security.KDiag:dumpTokens(org.apache.hadoop.security.UserGroupInformation)" : {
    "println" : 1,
    "size" : 1,
    "getAllTokens" : 1,
    "getCredentials" : 1,
    "getKind" : 1,
    "title" : 1,
    "endln" : 1
  },
  "org.apache.hadoop.io.compress.CodecPool:payback(java.util.Map,java.lang.Object)" : {
    "add" : 1,
    "getClass" : 1,
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.retry.CallReturn:<init>(java.lang.Object,java.lang.Throwable,org.apache.hadoop.io.retry.CallReturn$State)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:listCorruptFileBlocks(org.apache.hadoop.fs.Path)" : {
    "listCorruptFileBlocks" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainOutputStream:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:toString()" : {
    "getIntList" : 1,
    "getStats" : 1,
    "blocks" : 1,
    "toString" : 1,
    "append" : 5
  },
  "org.apache.hadoop.security.Groups:parseStaticMapping(org.apache.hadoop.conf.Configuration)" : {
    "emptySet" : 1,
    "set" : 1,
    "size" : 3,
    "get" : 1,
    "isEmpty" : 1,
    "toArray" : 1,
    "getStringCollection" : 3,
    "put" : 1
  },
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:getDelay(java.util.concurrent.TimeUnit)" : {
    "now" : 1,
    "convert" : 1
  },
  "org.apache.hadoop.fs.MD5MD5CRC32GzipFileChecksum:<init>()" : { },
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:bind(java.lang.Object)" : {
    "getDeclaringClass" : 1,
    "getClass" : 2,
    "isStatic" : 1,
    "toGenericString" : 2,
    "checkState" : 1,
    "checkArgument" : 1,
    "isAssignableFrom" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:hashCode()" : {
    "hashCode" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:disconnect(com.jcraft.jsch.ChannelSftp)" : {
    "disconnect" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState:convertToByteBufferState()" : {
    "allocateDirect" : 1,
    "cloneAsDirectByteBuffer" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:sendLogLevelRequest()" : {
    "doSetLevel" : 1,
    "doGetLevel" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getWriteOps()" : {
    "visitAll" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker:getProtocolImpl(org.apache.hadoop.ipc.RPC$Server,java.lang.String,long)" : {
    "get" : 1,
    "getHighestSupportedProtocol" : 1,
    "getProtocolImplMap" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : {
    "getFileBlockLocations" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:reinit(org.apache.hadoop.conf.Configuration)" : {
    "init" : 1,
    "debug" : 1,
    "compressionStrategy" : 1,
    "reset" : 1,
    "end" : 1,
    "isDebugEnabled" : 1,
    "compressionLevel" : 1,
    "getCompressionStrategy" : 1,
    "windowBits" : 1,
    "getCompressionLevel" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression:getSupportedAlgorithms()" : {
    "add" : 1,
    "getName" : 1,
    "size" : 1,
    "toArray" : 1,
    "isSupported" : 1,
    "getEnumConstants" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferData:toString()" : {
    "getFutureStr" : 1,
    "identityHashCode" : 1,
    "format" : 1,
    "getBufferStr" : 1
  },
  "org.apache.hadoop.http.ProfileServlet$Event:fromInternalName(java.lang.String)" : {
    "getInternalName" : 1,
    "values" : 1,
    "equalsIgnoreCase" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:available()" : {
    "available" : 1,
    "checkStream" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:filesystem(org.apache.hadoop.fs.FileSystem)" : { },
  "org.apache.hadoop.conf.Configuration$DeprecatedKeyInfo:getWarningMessage(java.lang.String)" : {
    "getWarningMessage" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.MD5Hash:setDigest(java.lang.String)" : {
    "length" : 2,
    "charToNibble" : 2,
    "charAt" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getXAttrs(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getXAttrs" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:exists(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path)" : {
    "getFileStatus" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newCounter(java.lang.String,java.lang.String,long)" : {
    "newCounter" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:requestPrefetch(int)" : {
    "add" : 1,
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.service.ServiceStateException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.store.ByteBufferInputStream:mark(int)" : {
    "checkOpenState" : 1,
    "debug" : 1,
    "position" : 1,
    "mark" : 1
  },
  "org.apache.hadoop.fs.shell.find.And:registerExpression(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : {
    "addClass" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer$ValueRegister:close()" : {
    "incRecordCount" : 1,
    "finishDataBlock" : 1,
    "close" : 1
  },
  "org.apache.hadoop.util.ThreadUtil:sleepAtLeastIgnoreInterrupts(long)" : {
    "sleep" : 1,
    "warn" : 1,
    "now" : 3
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler:getLowerLayerAsyncReturn()" : {
    "set" : 1,
    "checkNotNull" : 1,
    "get" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:create(int)" : {
    "instance" : 1,
    "register" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResourceObject(org.apache.hadoop.conf.Configuration$Resource)" : {
    "add" : 1,
    "size" : 1,
    "loadProps" : 1,
    "isParserRestricted" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.fs.Options$CreateOpts:blockSize(long)" : { },
  "org.apache.hadoop.fs.FilterFileSystem:primitiveCreate(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt)" : {
    "primitiveCreate" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:connect()" : {
    "getInt" : 1,
    "getConf" : 1,
    "checkNotClosed" : 1,
    "get" : 4,
    "connect" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : {
    "getParent" : 1,
    "cloneFileAttributes" : 1,
    "merge" : 1,
    "exists" : 1,
    "close" : 1,
    "writeFile" : 1
  },
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:setInput(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "limit" : 1,
    "position" : 1
  },
  "org.apache.hadoop.io.InputBuffer:reset(byte[],int,int)" : {
    "reset" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader$StartOption:<init>(long)" : { },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:resolvePartialGroupNames(java.lang.String,java.lang.String,java.lang.String)" : {
    "warn" : 1,
    "parsePartialGroupNames" : 1,
    "isEmpty" : 1,
    "createGroupIDExecutor" : 1,
    "execute" : 1,
    "isTimedOut" : 1,
    "getOutput" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension:close()" : {
    "getKeyProvider" : 1,
    "close" : 1
  },
  "org.apache.hadoop.net.SocketInputWrapper:getReadableByteChannel()" : {
    "checkState" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getBlockSize()" : {
    "getBlockSize" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:buildDTServiceName(java.net.URI,int)" : {
    "createSocketAddr" : 1,
    "buildTokenService" : 1,
    "toString" : 1,
    "getAuthority" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:doCedeActive(int)" : {
    "getCurrentUser" : 1,
    "getProxy" : 1,
    "getLocalizedMessage" : 1,
    "getGracefulFenceTimeout" : 1,
    "getRemoteAddress" : 1,
    "quitElection" : 1,
    "toNanos" : 1,
    "warn" : 2,
    "recheckElectability" : 2,
    "createReqInfo" : 1,
    "nanoTime" : 1,
    "transitionToStandby" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.shell.MoveCommands$MoveFromLocal:processOptions(java.util.LinkedList)" : {
    "contains" : 1,
    "processOptions" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:close()" : {
    "getKMSUrl" : 1,
    "error" : 1,
    "close" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:<init>(java.net.URI,org.apache.hadoop.crypto.key.kms.KMSClientProvider[],org.apache.hadoop.conf.Configuration)" : {
    "monotonicNow" : 1
  },
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:appendRaw(byte[],int,int,org.apache.hadoop.io.SequenceFile$ValueBytes)" : {
    "writeUncompressedBytes" : 1,
    "getSize" : 1,
    "writeVInt" : 2,
    "getLength" : 2,
    "sync" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : {
    "fullPath" : 1,
    "getXAttrs" : 1
  },
  "org.apache.hadoop.io.Text:charAt(int)" : {
    "bytesToCodePoint" : 1,
    "slice" : 1,
    "position" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:setDataConnectionMode(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.conf.Configuration)" : {
    "enterLocalPassiveMode" : 1,
    "warn" : 1,
    "equals" : 3,
    "get" : 1,
    "toUpperCase" : 1,
    "enterRemotePassiveMode" : 1
  },
  "org.apache.hadoop.conf.Configuration:updateConnectAddr(java.lang.String,java.lang.String,java.lang.String,java.net.InetSocketAddress)" : {
    "getPort" : 1,
    "createSocketAddrForHost" : 1,
    "split" : 1,
    "getTrimmed" : 1,
    "get" : 1,
    "updateConnectAddr" : 2,
    "isEmpty" : 2
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:numDroppedConnections()" : {
    "getNumDroppedConnections" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:initSystemMBean()" : {
    "checkNotNull" : 1,
    "register" : 1
  },
  "org.apache.hadoop.fs.FileUtil:grantPermissions(java.io.File)" : {
    "setReadable" : 1,
    "setWritable" : 1,
    "setExecutable" : 1
  },
  "org.apache.hadoop.net.NetUtils:getOutputStream(java.net.Socket)" : {
    "getOutputStream" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getStartOffset(int)" : {
    "throwIfInvalidBlockNumber" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet:computeCapacity(double,java.lang.String)" : {
    "computeCapacity" : 1,
    "getRuntime" : 1,
    "maxMemory" : 1
  },
  "org.apache.hadoop.fs.CompositeCrcFileChecksum:toString()" : {
    "getAlgorithmName" : 1,
    "format" : 1
  },
  "org.apache.hadoop.util.ShutdownHookManager:shutdownExecutor(org.apache.hadoop.conf.Configuration)" : {
    "getShutdownTimeout" : 1,
    "currentThread" : 1,
    "debug" : 1,
    "interrupt" : 1,
    "awaitTermination" : 1,
    "shutdownNow" : 2,
    "error" : 2,
    "shutdown" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_toJsonString(java.io.Serializable)" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:toString()" : {
    "numAvailable" : 1,
    "size" : 1,
    "format" : 1,
    "numCreated" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:selectDelegationToken(java.net.URL,org.apache.hadoop.security.Credentials)" : {
    "debug" : 1,
    "getPort" : 1,
    "getToken" : 1,
    "buildTokenService" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.crypto.key.UserProvider:rollNewVersion(java.lang.String,byte[])" : {
    "serialize" : 1,
    "getMetadata" : 1,
    "addVersion" : 1,
    "addSecretKey" : 2,
    "getBitLength" : 2,
    "buildVersionName" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:printUsage(java.io.PrintStream)" : {
    "printUsage" : 1
  },
  "org.apache.hadoop.io.compress.CompressionInputStream:close()" : {
    "returnDecompressor" : 1,
    "close" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:createRemoteUser(java.lang.String)" : {
    "createRemoteUser" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getKerberosLoginRenewalExecutor()" : {
    "ensureInitialized" : 1
  },
  "org.apache.hadoop.security.token.Token:<init>()" : { },
  "org.apache.hadoop.fs.FilterFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : { },
  "org.apache.hadoop.ipc.WeightedRoundRobinMultiplexer:getAndAdvanceCurrentIndex()" : {
    "getCurrentIndex" : 1,
    "advanceIndex" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:maximums()" : {
    "getWrapped" : 1,
    "maximums" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:hasCapability(java.lang.String)" : {
    "hasCapability" : 2,
    "getClass" : 1,
    "toLowerCase" : 1,
    "getCanonicalName" : 1
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[],long)" : { },
  "org.apache.hadoop.conf.Configuration:clear()" : {
    "getProps" : 1,
    "clear" : 2,
    "getOverlay" : 1
  },
  "org.apache.hadoop.io.OutputBuffer:write(java.io.InputStream,int)" : {
    "write" : 1
  },
  "org.apache.hadoop.util.GcTimeMonitor:calculateGCTimePercentageWithinObservedInterval()" : {
    "getCollectionCount" : 1,
    "getCollectionTime" : 1,
    "min" : 2,
    "setValues" : 1,
    "currentTimeMillis" : 1,
    "update" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getStatus(org.apache.hadoop.fs.Path)" : {
    "getStatus" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState:<init>(org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder,java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : {
    "findFirstValidInput" : 1,
    "checkInputBuffers" : 1,
    "checkParameters" : 1,
    "checkOutputBuffers" : 1,
    "isDirect" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$BlockUploadData:toByteArray()" : {
    "readFileToByteArray" : 1,
    "toByteArray" : 1,
    "checkState" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicIntegerCounter(java.lang.String,java.util.concurrent.atomic.AtomicInteger)" : {
    "withLongFunctionCounter" : 1,
    "get" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:getWeightUsingNetworkLocation(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : {
    "getNetworkLocation" : 2,
    "getName" : 2,
    "split" : 2,
    "equals" : 3,
    "normalizeNetworkLocationPath" : 2
  },
  "org.apache.hadoop.security.token.delegation.web.HttpUserGroupInformation:get()" : {
    "getHttpUserGroupInformationInContext" : 1
  },
  "org.apache.hadoop.metrics2.util.Servers:parse(java.lang.String,int)" : {
    "add" : 2,
    "createSocketAddr" : 1,
    "split" : 1,
    "newArrayList" : 1
  },
  "org.apache.hadoop.io.erasurecode.grouper.BlockGrouper:makeBlockGroup(org.apache.hadoop.io.erasurecode.ECBlock[],org.apache.hadoop.io.erasurecode.ECBlock[])" : { },
  "org.apache.hadoop.ha.HAAdmin:printUsage(java.io.PrintStream,java.lang.String)" : {
    "printUsage" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:getRootLink()" : {
    "isInternalDir" : 1,
    "checkState" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getContentSummary(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getContentSummary" : 1
  },
  "org.apache.hadoop.ha.HAServiceProtocolHelper:transitionToStandby(org.apache.hadoop.ha.HAServiceProtocol,org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : {
    "unwrapRemoteException" : 1,
    "transitionToStandby" : 1
  },
  "org.apache.hadoop.fs.Path:getParent()" : {
    "getParentUtil" : 1
  },
  "org.apache.hadoop.http.HttpServer2$Builder:build()" : {
    "loadListeners" : 1,
    "setPort" : 1,
    "checkNotNull" : 1,
    "stream" : 1,
    "noneMatch" : 1,
    "get" : 2,
    "checkState" : 1,
    "setRequestHeaderSize" : 1,
    "initSpnego" : 1,
    "getBoolean" : 1,
    "getHost" : 2,
    "addListener" : 1,
    "setHost" : 1,
    "getScheme" : 2,
    "setResponseHeaderSize" : 1,
    "createHttpChannelConnector" : 1,
    "isEmpty" : 1,
    "createHttpsChannelConnector" : 1,
    "setSendServerVersion" : 1,
    "getInt" : 4,
    "loadSSLConfiguration" : 1,
    "setAcceptQueueSize" : 1,
    "getPort" : 2,
    "getFilterProperties" : 1,
    "equals" : 4,
    "setIdleTimeout" : 1
  },
  "org.apache.hadoop.security.token.Token:renew(org.apache.hadoop.conf.Configuration)" : {
    "renew" : 1,
    "getRenewer" : 1
  },
  "org.apache.hadoop.util.MachineList:<init>(java.util.Collection,org.apache.hadoop.util.MachineList$InetAddressFactory)" : {
    "add" : 2,
    "warn" : 2,
    "contains" : 1,
    "emptyList" : 1,
    "getInfo" : 1,
    "size" : 3,
    "getByName" : 1,
    "toString" : 1,
    "indexOf" : 1,
    "setInclusiveHostCount" : 1
  },
  "org.apache.hadoop.ipc.ResponseBuffer:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : {
    "fullPath" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:getStatistics(java.net.URI)" : {
    "getScheme" : 1,
    "get" : 1,
    "getBaseUri" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.util.RunJar:unJar(java.io.File,java.io.File)" : {
    "unJar" : 1
  },
  "org.apache.hadoop.fs.FileSystem$DirListingIterator:hasNext()" : {
    "getEntries" : 1,
    "hasMore" : 1
  },
  "org.apache.hadoop.service.launcher.IrqHandler:bind()" : {
    "checkState" : 1,
    "handle" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:open(org.apache.hadoop.fs.Path,int)" : {
    "fullPath" : 1,
    "open" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$HadoopLoginModule:commit()" : {
    "add" : 1,
    "getName" : 2,
    "getProperty" : 1,
    "debug" : 6,
    "isSecurityEnabled" : 1,
    "initCause" : 1,
    "isEmpty" : 1,
    "toString" : 1,
    "getPrincipals" : 3,
    "getCanonicalUser" : 2,
    "getenv" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient$SaslClientCallbackHandler:<init>(org.apache.hadoop.security.token.Token)" : {
    "getPassword" : 1,
    "getIdentifier" : 1,
    "encodePassword" : 1,
    "encodeIdentifier" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:formatSize(long,boolean)" : {
    "long2String" : 1,
    "valueOf" : 1
  },
  "org.apache.hadoop.util.WeakReferenceMap:put(java.lang.Object,java.lang.Object)" : {
    "resolve" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:mergePass(org.apache.hadoop.fs.Path)" : {
    "cloneFileAttributes" : 1,
    "debug" : 1,
    "merge" : 1,
    "isDebugEnabled" : 1,
    "suffix" : 3,
    "close" : 1,
    "writeFile" : 1
  },
  "org.apache.hadoop.http.HttpServer2:addJerseyResourcePackage(java.lang.String,java.lang.String)" : {
    "addJerseyResourcePackage" : 1,
    "emptyMap" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.util.HHUtil:getPiggyBacksFromInput(java.nio.ByteBuffer[],int[],int,int,org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder)" : {
    "encode" : 1,
    "cloneBufferData" : 1,
    "allocateByteBuffer" : 2,
    "clear" : 1,
    "position" : 3,
    "isDirect" : 2,
    "remaining" : 2
  },
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.io.File,boolean,org.apache.hadoop.conf.Configuration)" : {
    "getFileStatus" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.io.InputBuffer:<init>()" : { },
  "org.apache.hadoop.util.DiskChecker:checkDirWithDiskIo(org.apache.hadoop.fs.LocalFileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "pathToFile" : 1,
    "checkDirInternal" : 1,
    "doDiskIo" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_gauges(java.io.Serializable)" : {
    "applyToIOStatisticsSnapshot" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:<init>(org.apache.hadoop.io.file.tfile.TFile$Reader,org.apache.hadoop.io.file.tfile.TFile$Reader$Location,org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : {
    "inBlockAdvance" : 1,
    "initBlock" : 1,
    "checkTFileDataIndex" : 1,
    "compareTo" : 1,
    "getBlockIndex" : 1,
    "getRecordIndex" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "readOnlyMountTable" : 1
  },
  "org.apache.hadoop.io.AbstractMapWritable:<init>()" : {
    "addToMap" : 15
  },
  "org.apache.hadoop.fs.FilterFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "getLinkTarget" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : {
    "comparator" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.util.SignalLogger:register(org.slf4j.Logger)" : {
    "debug" : 1,
    "toString" : 1,
    "append" : 4,
    "info" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection$1:run()" : {
    "receiveRpcResponse" : 1,
    "warn" : 1,
    "getName" : 2,
    "debug" : 2,
    "size" : 2,
    "markClosed" : 1,
    "start" : 1,
    "isDebugEnabled" : 2,
    "close" : 1,
    "waitForWork" : 1
  },
  "org.apache.hadoop.fs.GlobExpander:expandLeftmost(org.apache.hadoop.fs.GlobExpander$StringWithOffset)" : {
    "add" : 3,
    "setLength" : 3,
    "length" : 3,
    "leftmostOuterCurlyContainingSlash" : 1,
    "toString" : 2,
    "append" : 6,
    "charAt" : 2,
    "substring" : 1
  },
  "org.apache.hadoop.util.InstrumentedWriteLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.ReentrantReadWriteLock,long,long,org.apache.hadoop.util.Timer)" : {
    "writeLock" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "disconnect" : 1,
    "getParent" : 1,
    "getName" : 1,
    "toUri" : 1,
    "getReplyCode" : 1,
    "printWorkingDirectory" : 1,
    "allocate" : 1,
    "isPositivePreliminary" : 1,
    "getPath" : 1,
    "getFileStatus" : 1,
    "changeWorkingDirectory" : 1,
    "retrieveFileStream" : 1,
    "close" : 1,
    "makeAbsolute" : 1,
    "isDirectory" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:internalReset()" : {
    "readStreamHeader" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:doSaslReply(org.apache.hadoop.thirdparty.protobuf.Message)" : {
    "sendResponse" : 1,
    "setupResponse" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.io.DefaultStringifier:<init>(org.apache.hadoop.conf.Configuration,java.lang.Class)" : {
    "getDeserializer" : 1,
    "getSerializer" : 1,
    "open" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:getBytesWritten()" : {
    "checkStream" : 1,
    "getBytesWritten" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:snapshotMap(java.util.Map)" : {
    "snapshotMap" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getStatistics(java.lang.String,java.lang.Class)" : {
    "get" : 1,
    "checkArgument" : 1,
    "put" : 2
  },
  "org.apache.hadoop.fs.LocatedFileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.util.Set,org.apache.hadoop.fs.BlockLocation[])" : { },
  "org.apache.hadoop.security.UserGroupInformation:print()" : {
    "print" : 3,
    "println" : 3,
    "getGroupNames" : 1,
    "getUserName" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],long,long,boolean)" : { },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:build()" : {
    "activeInstance" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:addToCacheAndRelease(org.apache.hadoop.fs.impl.prefetch.BufferData,java.util.concurrent.Future,java.time.Instant)" : {
    "executorAcquired" : 1,
    "incrementAndGet" : 1,
    "debug" : 2,
    "cachePut" : 1,
    "getBuffer" : 1,
    "format" : 1,
    "containsBlock" : 1,
    "stateEqualsOneOf" : 2,
    "getMessage" : 2,
    "duplicate" : 1,
    "setDone" : 6,
    "duration" : 2,
    "warn" : 1,
    "addToCache" : 1,
    "rewind" : 1,
    "getBlockNumber" : 3,
    "get" : 3,
    "now" : 1,
    "end" : 1,
    "getAndSet" : 1,
    "between" : 1,
    "info" : 2
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:<init>(java.lang.String)" : {
    "info" : 1
  },
  "org.apache.hadoop.ipc.ClientCache:getClient(org.apache.hadoop.conf.Configuration)" : {
    "getDefault" : 1,
    "getClient" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:incrementCounter(java.lang.String,long)" : {
    "incrementCounter" : 1,
    "getInnerStatistics" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.DummyErasureDecoder:prepareDecodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getOutputBlocks" : 1,
    "getErasedIndexes" : 1,
    "getOptions" : 1,
    "getInputBlocks" : 1
  },
  "org.apache.hadoop.ipc.ObserverRetryOnActiveException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.io.IOUtils:closeStreams(java.io.Closeable[])" : {
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.security.alias.UserProvider:getAliases()" : {
    "add" : 1,
    "getAllSecretKeys" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.Text:set(java.lang.String)" : {
    "encode" : 1,
    "array" : 1,
    "length" : 1,
    "limit" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:solveVandermondeSystem(int[],int[])" : {
    "solveVandermondeSystem" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:<init>(int)" : {
    "allocateDirect" : 2,
    "reset" : 1,
    "create" : 1,
    "position" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_create()" : {
    "iostatisticsSnapshot_create" : 1
  },
  "org.apache.hadoop.ipc.Server$Call:abortResponse(java.lang.Throwable)" : {
    "doResponse" : 1,
    "getAndSet" : 1
  },
  "org.apache.hadoop.ipc.Server$FatalRpcServerException:<init>(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcErrorCodeProto,java.io.IOException)" : {
    "toString" : 1
  },
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter:toLowerCase(javax.servlet.http.HttpServletRequest)" : {
    "next" : 1,
    "add" : 1,
    "getKey" : 2,
    "containsUpperCase" : 1,
    "entrySet" : 2,
    "toLowerCase" : 1,
    "getParameterMap" : 2,
    "hasNext" : 1,
    "put" : 2,
    "getValue" : 2,
    "iterator" : 1,
    "size" : 1,
    "get" : 4,
    "toArray" : 1,
    "keySet" : 2
  },
  "org.apache.hadoop.conf.ConfServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getServletContext" : 1,
    "getWriter" : 1,
    "equals" : 2,
    "sendError" : 2,
    "writeResponse" : 1,
    "getMessage" : 2,
    "parseAcceptHeader" : 1,
    "setContentType" : 2,
    "close" : 1,
    "isInstrumentationAccessAllowed" : 1,
    "getConfFromContext" : 1,
    "getParameter" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.io.Text:find(java.lang.String)" : {
    "find" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withLongFunctionCounter(java.lang.String,java.util.function.ToLongFunction)" : {
    "activeInstance" : 1,
    "addCounterFunction" : 1
  },
  "org.apache.hadoop.util.CacheableIPList:isIn(java.lang.String)" : {
    "currentTimeMillis" : 2,
    "reset" : 1,
    "isIn" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators:toList(org.apache.hadoop.fs.RemoteIterator)" : {
    "foreach" : 1
  },
  "org.apache.hadoop.io.UTF8:equals(java.lang.Object)" : {
    "compareBytes" : 1
  },
  "org.apache.hadoop.ipc.RPC$Server:initProtocolMetaInfo(org.apache.hadoop.conf.Configuration)" : {
    "addProtocol" : 1,
    "newReflectiveBlockingService" : 1,
    "setProtocolEngine" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:parseExpression(java.util.Deque)" : {
    "add" : 1,
    "addArguments" : 1,
    "isExpression" : 1,
    "getPrecedence" : 4,
    "isEmpty" : 5,
    "push" : 6,
    "peek" : 2,
    "isOperator" : 2,
    "pop" : 5,
    "getExpression" : 4,
    "equals" : 2,
    "addChildren" : 3,
    "parseExpression" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "getAclStatus" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:setAuthenticationMethod(org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod)" : {
    "setAuthenticationMethod" : 1
  },
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:decrypt(java.nio.ByteBuffer,java.nio.ByteBuffer)" : {
    "process" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:fromStorageStatistics(org.apache.hadoop.fs.StorageStatistics)" : {
    "getLong" : 1,
    "next" : 1,
    "withLongFunctionCounter" : 1,
    "getName" : 1,
    "build" : 1,
    "getLongStatistics" : 1,
    "dynamicIOStatistics" : 1,
    "hasNext" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getChecksumOpt()" : {
    "getChecksumOpt" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:isValidName(java.lang.String)" : {
    "fullPath" : 1,
    "isValidName" : 1,
    "toUri" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ipc.Client$ConnectionId:<init>(java.net.InetSocketAddress,java.lang.Class,org.apache.hadoop.security.UserGroupInformation,int,org.apache.hadoop.io.retry.RetryPolicy,org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 3,
    "getPingInterval" : 1,
    "getBoolean" : 3
  },
  "org.apache.hadoop.ha.NodeFencer:createFenceMethod(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "forName" : 1,
    "get" : 1,
    "newInstance" : 1,
    "checkArgs" : 1,
    "isAssignableFrom" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:releaseDoneBlocks()" : {
    "getAll" : 1,
    "release" : 1,
    "stateEqualsOneOf" : 1
  },
  "org.apache.hadoop.fs.FileRange:createFileRange(long,int)" : { },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:write(byte[],int,int)" : {
    "write0" : 1
  },
  "org.apache.hadoop.io.compress.DefaultCodec:createDecompressor()" : {
    "getZlibDecompressor" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getAclStatus" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.FileUtil:checkDependencies(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "makeQualified" : 2,
    "length" : 2,
    "toString" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:appendIfExists(boolean)" : { },
  "org.apache.hadoop.metrics2.MetricStringBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,double)" : {
    "add" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping:getGroups(java.lang.String)" : {
    "getNetgroups" : 1,
    "getGroups" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:isPermissionLoaded()" : {
    "isEmpty" : 1,
    "getOwner" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues1(int,int)" : {
    "min" : 1,
    "hbMakeCodeLengths" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getInitialWorkingDirectory()" : {
    "getInitialWorkingDirectory" : 1
  },
  "org.apache.hadoop.security.authorize.ProxyUsers:refreshSuperUserGroupsConfiguration(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "init" : 1,
    "isEmpty" : 1,
    "refresh" : 1,
    "checkArgument" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.fs.PathNotFoundException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:chmod(java.lang.String,int)" : {
    "warn" : 1,
    "getErrorCode" : 2,
    "format" : 1,
    "getMessage" : 1,
    "chmodImpl" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.ExecutorServiceFuturePool:shutdown(org.slf4j.Logger,long,java.util.concurrent.TimeUnit)" : {
    "shutdown" : 1
  },
  "org.apache.hadoop.util.ChunkedArrayList:<init>()" : { },
  "org.apache.hadoop.fs.statistics.impl.EvaluatingStatisticsMap:<init>()" : { },
  "org.apache.hadoop.util.Sets:newHashSet(java.util.Iterator)" : {
    "newHashSet" : 1,
    "addAll" : 1
  },
  "org.apache.hadoop.io.WritableFactories:newInstance(java.lang.Class)" : {
    "newInstance" : 1
  },
  "org.apache.hadoop.util.ComparableVersion:parseItem(boolean,java.lang.String)" : { },
  "org.apache.hadoop.security.Groups$GroupCacheLoader:fetchGroupSet(java.lang.String)" : {
    "warn" : 1,
    "monotonicNow" : 2,
    "addGetGroups" : 1,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:readFields(java.io.DataInput)" : {
    "fromShort" : 1,
    "readShort" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:setTimeout(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.conf.Configuration)" : {
    "getLong" : 1,
    "setControlKeepAliveTimeout" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:listStatusIterator(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1,
    "listStatusIterator" : 1
  },
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String[],java.security.cert.X509Certificate)" : {
    "getDNSSubjectAlts" : 1,
    "getCNs" : 1,
    "check" : 1,
    "error" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:getReturnMessage(java.lang.reflect.Method,org.apache.hadoop.ipc.RpcWritable$Buffer)" : {
    "getValue" : 1,
    "currentThread" : 1,
    "trace" : 1,
    "getName" : 1,
    "shortDebugString" : 1,
    "getDefaultInstanceForType" : 1,
    "isTraceEnabled" : 1,
    "getId" : 1,
    "getReturnProtoType" : 1
  },
  "org.apache.hadoop.util.FindClass:getResource(java.lang.String)" : {
    "getResource" : 1,
    "getConf" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:readAndProcess()" : {
    "getHostName" : 2,
    "initializeAuthContext" : 1,
    "setServiceClass" : 1,
    "clear" : 2,
    "setupHttpRequestOnIpcPortResponse" : 1,
    "remaining" : 4,
    "checkDataLength" : 1,
    "channelRead" : 3,
    "processOneRpc" : 1,
    "getInt" : 1,
    "warn" : 2,
    "allocate" : 2,
    "shouldClose" : 1,
    "equals" : 2,
    "get" : 3,
    "setupBadVersionResponse" : 2,
    "flip" : 3
  },
  "org.apache.hadoop.util.functional.RemoteIterators:foreach(org.apache.hadoop.fs.RemoteIterator,org.apache.hadoop.util.functional.ConsumerRaisingIOE)" : {
    "next" : 1,
    "cleanupRemoteIterator" : 1,
    "hasNext" : 1,
    "accept" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$TestingGroups:<init>(org.apache.hadoop.security.Groups)" : { },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:retrievePassword(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "getPassword" : 1,
    "checkToken" : 1
  },
  "org.apache.hadoop.fs.impl.FsLinkResolution:<init>(org.apache.hadoop.fs.impl.FsLinkResolution$FsLinkResolutionFunction)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.security.token.Token:identifierToString(java.lang.StringBuilder)" : {
    "addBinaryBuffer" : 1,
    "decodeIdentifier" : 1,
    "append" : 3
  },
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency:getDependency(java.lang.String)" : {
    "emptyList" : 1,
    "normalizeHostName" : 1,
    "get" : 1,
    "put" : 1,
    "getDependency" : 1,
    "getRawMapping" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.net.NodeBase:equals(java.lang.Object)" : {
    "equals" : 1,
    "getPath" : 2
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:read(byte[])" : {
    "read" : 1
  },
  "org.apache.hadoop.io.serializer.SerializationFactory:add(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "add" : 1,
    "warn" : 1,
    "getConf" : 1,
    "getClassByName" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:makeAbsolute(org.apache.hadoop.fs.Path)" : {
    "isAbsolute" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:write(byte[],int,int)" : {
    "osException" : 1,
    "mayThrow" : 1,
    "nextSetBit" : 2,
    "write" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:optLong(java.lang.String,long)" : {
    "opt" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : {
    "getDefaultReplication" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getNetworkBytesWritten()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "resolve" : 1,
    "hasPathCapability" : 1,
    "getUriPath" : 1,
    "makeQualified" : 1
  },
  "org.apache.hadoop.http.PrometheusServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "writeMetrics" : 1,
    "instance" : 1,
    "flush" : 1,
    "getWriter" : 2,
    "publishMetricsNow" : 1,
    "getPrometheusSink" : 1
  },
  "org.apache.hadoop.io.BooleanWritable:<init>(boolean)" : {
    "set" : 1
  },
  "org.apache.hadoop.ipc.ClientCache:getClient(org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,java.lang.Class)" : {
    "debug" : 1,
    "get" : 1,
    "isDebugEnabled" : 1,
    "incCount" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.permission.AclStatus:getEffectivePermission(org.apache.hadoop.fs.permission.AclEntry,org.apache.hadoop.fs.permission.FsPermission)" : {
    "contains" : 1,
    "getPermission" : 4,
    "getName" : 1,
    "size" : 2,
    "getType" : 1,
    "and" : 2,
    "get" : 1,
    "checkArgument" : 2,
    "getGroupAction" : 1,
    "getScope" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricCounterInt:<init>(org.apache.hadoop.metrics2.MetricsInfo,int)" : { },
  "org.apache.hadoop.io.compress.CodecPool:getCompressor(org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "debug" : 1,
    "isAnnotationPresent" : 1,
    "borrow" : 1,
    "updateLeaseCount" : 1,
    "reinit" : 1,
    "createCompressor" : 1,
    "isDebugEnabled" : 1,
    "getCompressorType" : 1,
    "getDefaultExtension" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)" : {
    "offer" : 1,
    "get" : 1
  },
  "org.apache.hadoop.conf.Configuration$Resource:<init>(java.lang.Object)" : {
    "toString" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:invokeChecked(java.lang.Object,java.lang.Object[])" : {
    "copyOfRange" : 1,
    "throwIfInstance" : 2,
    "invoke" : 2,
    "error" : 1,
    "getCause" : 3
  },
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[])" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "access" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.io.RawComparator,java.lang.Class,java.lang.Class,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:getGroup()" : {
    "loadPermissionInfo" : 1,
    "isPermissionLoaded" : 1,
    "getGroup" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtobufRpcEngineCallbackImpl:<init>()" : {
    "getServer" : 1,
    "getMethodName" : 1,
    "now" : 1,
    "get" : 3,
    "getCurCall" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getHarHash(org.apache.hadoop.fs.Path)" : {
    "hashCode" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ipc.Server$ConnectionManager:closeIdle(boolean)" : {
    "size" : 1,
    "now" : 1,
    "isIdle" : 1,
    "close" : 1,
    "getLastContact" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency$RawScriptBasedMappingWithDependency:setConf(org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:midKey()" : {
    "readIndex" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "getChecksumFile" : 1,
    "exists" : 1,
    "getMyFs" : 2,
    "setReplication" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkGreater(long,java.lang.String,long,java.lang.String)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:<init>(org.apache.hadoop.crypto.key.kms.KMSClientProvider[],long,org.apache.hadoop.conf.Configuration)" : {
    "create" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_enabled()" : {
    "ioStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.io.BinaryComparable:equals(java.lang.Object)" : {
    "getLength" : 2,
    "compareTo" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Metadata:equals(java.lang.Object)" : {
    "getClass" : 2,
    "equals" : 1
  },
  "org.apache.hadoop.fs.impl.FutureIOSupport:raiseInnerCause(java.util.concurrent.CompletionException)" : {
    "raiseInnerCause" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:setIndexInterval(org.apache.hadoop.conf.Configuration,int)" : {
    "setInt" : 1
  },
  "org.apache.hadoop.security.CompositeGroupsMapping:loadMappingProviders()" : {
    "getClass" : 1,
    "error" : 1,
    "addMappingProvider" : 1,
    "getStrings" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:configureSinks()" : {
    "getKey" : 1,
    "entrySet" : 1,
    "sink" : 1,
    "start" : 1,
    "newSink" : 1,
    "gcd" : 1,
    "getString" : 1,
    "put" : 2,
    "getLong" : 2,
    "warn" : 1,
    "getInt" : 2,
    "getValue" : 1,
    "getInstanceConfigs" : 1,
    "getClassName" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getTrashRoot(org.apache.hadoop.fs.Path)" : {
    "getShortUserName" : 1,
    "resolve" : 1,
    "toUri" : 2,
    "getUriPath" : 1,
    "length" : 1,
    "getTrashRoot" : 1,
    "substring" : 1,
    "getHomeDirectory" : 1,
    "makeQualified" : 2,
    "equals" : 2,
    "endsWith" : 1,
    "getPath" : 3,
    "toString" : 2,
    "getBoolean" : 1,
    "getUri" : 1,
    "startsWith" : 2
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm:returnDecompressor(org.apache.hadoop.io.compress.Decompressor)" : {
    "debug" : 1,
    "hashCode" : 1,
    "returnDecompressor" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.fs.shell.CommandFormat:addOptionWithValue(java.lang.String)" : {
    "containsKey" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:openConnection(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String)" : {
    "encode" : 1,
    "getCurrentUser" : 1,
    "useQueryStringForDelegationToken" : 2,
    "debug" : 2,
    "getAllTokens" : 2,
    "isSet" : 2,
    "openConnection" : 1,
    "augmentURL" : 1,
    "isEmpty" : 1,
    "getCredentials" : 1,
    "put" : 2,
    "checkNotNull" : 2,
    "setRequestProperty" : 1,
    "selectDelegationToken" : 1,
    "numberOfTokens" : 1,
    "encodeToUrlString" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Reader$LengthOption:<init>(long)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "unsetStoragePolicy" : 1
  },
  "org.apache.hadoop.ipc.RpcWritable$Buffer:getValue(java.lang.Object)" : {
    "readFrom" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "setStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:readOnlyMountTable(java.lang.String,org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher$MinimalGenericOptionsParser:<init>(org.apache.hadoop.conf.Configuration,org.apache.commons.cli.Options,java.lang.String[])" : { },
  "org.apache.hadoop.ha.ShellCommandFencer:checkArgs(java.lang.String)" : {
    "isEmpty" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:resolve(java.lang.String,boolean)" : {
    "getKey" : 1,
    "debug" : 1,
    "getSrcPathRegex" : 1,
    "interceptRemainingPath" : 1,
    "entrySet" : 1,
    "getVarInDestPathMap" : 1,
    "getPathToResolve" : 1,
    "interceptResolvedDestPathStr" : 1,
    "getRemainingPathStr" : 1,
    "matcher" : 1,
    "substring" : 1,
    "replaceRegexCaptureGroupInPath" : 1,
    "getValue" : 1,
    "buildResolveResultForRegexMountPoint" : 1,
    "find" : 1,
    "getDstPath" : 1,
    "interceptSource" : 1,
    "end" : 1,
    "getSrcPattern" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:open(org.apache.hadoop.fs.Path,int)" : { },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:gauges()" : {
    "getInnerStatistics" : 1,
    "gauges" : 1
  },
  "org.apache.hadoop.net.DNS:getIPsAsInetAddressList(java.lang.String,boolean)" : {
    "warn" : 1,
    "removeAll" : 1,
    "addAll" : 1,
    "getSubinterface" : 1,
    "equals" : 1,
    "getByName" : 3,
    "getMessage" : 1,
    "list" : 1,
    "getSubinterfaceInetAddrs" : 1,
    "getInetAddresses" : 1,
    "asList" : 2
  },
  "org.apache.hadoop.util.SysInfoLinux:getStorageBytesRead()" : {
    "readProcDisksInfoFile" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient$WrappedInputStream:read(byte[])" : {
    "read" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:unregisterSource(java.lang.String)" : {
    "instance" : 1,
    "unregisterSource" : 1,
    "unregister" : 1
  },
  "org.apache.hadoop.util.JvmPauseMonitor:serviceStart()" : {
    "serviceStart" : 1,
    "start" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:close()" : {
    "stopProxy" : 1
  },
  "org.apache.hadoop.http.HttpServer2$Builder:setEnabledProtocols(org.eclipse.jetty.util.ssl.SslContextFactory)" : {
    "setIncludeProtocols" : 1,
    "add" : 1,
    "contains" : 1,
    "setExcludeProtocols" : 1,
    "debug" : 1,
    "getExcludeProtocols" : 1,
    "equals" : 1,
    "get" : 1,
    "toArray" : 1,
    "getTrimmedStrings" : 1,
    "asList" : 1,
    "info" : 2
  },
  "org.apache.hadoop.io.Text:decode(byte[],int,int,boolean)" : {
    "decode" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.fs.Options$HandleOpt:exact()" : {
    "moved" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:<init>()" : {
    "getStreamSize" : 1
  },
  "org.apache.hadoop.security.ssl.ReloadingX509KeystoreManager:loadFrom(java.nio.file.Path)" : {
    "set" : 1,
    "loadKeyManager" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:getPasswordFromCredentialProviders(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "getPasswordFromCredentialProviders" : 1,
    "warn" : 1
  },
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader:extractQueryParameters(java.lang.String)" : {
    "getValue" : 1,
    "getName" : 1,
    "size" : 1,
    "parse" : 1,
    "put" : 1,
    "maybeStripWrappedQuotes" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:getAuthenticationMethod(org.apache.hadoop.conf.Configuration)" : {
    "valueOf" : 1,
    "get" : 1,
    "toUpperCase" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:blockNumber()" : {
    "throwIfInvalidBuffer" : 1,
    "getBlockNumber" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics$Singleton:shutdown()" : {
    "instance" : 1,
    "unregisterSource" : 1,
    "name" : 1
  },
  "org.apache.hadoop.security.authorize.ImpersonationProvider:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.String)" : {
    "getByName" : 1,
    "authorize" : 1
  },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkFallback(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI)" : {
    "set" : 1,
    "toString" : 1,
    "getConfigViewFsPrefix" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : {
    "openFileWithOptions" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:mustDouble(java.lang.String,double)" : {
    "toString" : 1,
    "must" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Invoker:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : {
    "call" : 1,
    "monotonicNow" : 2,
    "getName" : 1,
    "debug" : 1,
    "newScope" : 1,
    "curThreadTracer" : 1,
    "get" : 1,
    "methodToTraceString" : 1,
    "isDebugEnabled" : 2,
    "close" : 1
  },
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolClientSideTranslatorPB:close()" : {
    "stopProxy" : 1
  },
  "org.apache.hadoop.fs.shell.find.ExpressionFactory:createExpression(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "forName" : 1,
    "asSubclass" : 1,
    "createExpression" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addCounter(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "tuple" : 1,
    "name" : 1
  },
  "org.apache.hadoop.fs.FileSystem:clearStatistics()" : {
    "reset" : 1
  },
  "org.apache.hadoop.conf.Configuration:handleDeprecation(org.apache.hadoop.conf.Configuration$DeprecationContext,java.lang.String)" : {
    "getProperty" : 1,
    "containsKey" : 1,
    "getProps" : 1,
    "isEmpty" : 1,
    "getReverseDeprecatedKeyMap" : 1,
    "updatePropertiesWithDeprecatedKeys" : 1,
    "logDeprecation" : 1,
    "getDeprecatedKeyMap" : 1,
    "trim" : 1,
    "setProperty" : 2,
    "get" : 2,
    "getAndSetAccessed" : 1,
    "getOverlay" : 1,
    "getWarningMessage" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient:sendSaslMessage(java.io.OutputStream,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto)" : {
    "writeTo" : 1,
    "debug" : 1,
    "flush" : 1,
    "isDebugEnabled" : 1,
    "writeDelimitedTo" : 2
  },
  "org.apache.hadoop.fs.sftp.SFTPConnectionPool:shutdown()" : {
    "disconnect" : 1,
    "size" : 2,
    "get" : 1,
    "error" : 1,
    "keySet" : 1,
    "getHost" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.ipc.Server$RpcCall:doResponse(java.lang.Throwable,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcStatusProto)" : {
    "getClass" : 1,
    "getName" : 1,
    "stringifyException" : 1,
    "sendResponse" : 1,
    "setupResponse" : 2
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:getReason()" : {
    "constructReasonString" : 1
  },
  "org.apache.hadoop.fs.PathIsNotEmptyDirectoryException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.AvroFSInput:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : {
    "opt" : 1,
    "openFile" : 1,
    "build" : 1,
    "getLen" : 1,
    "getFileStatus" : 1,
    "awaitFuture" : 1,
    "withFileStatus" : 1
  },
  "org.apache.hadoop.fs.FileSystem:loadFileSystems()" : {
    "next" : 1,
    "getClass" : 4,
    "warn" : 2,
    "iterator" : 1,
    "getScheme" : 2,
    "debug" : 2,
    "load" : 1,
    "findContainingJar" : 2,
    "hasNext" : 1,
    "isDebugEnabled" : 1,
    "put" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.HadoopKerberosName:main(java.lang.String[])" : {
    "println" : 1,
    "getShortName" : 1,
    "setConfiguration" : 1
  },
  "org.apache.hadoop.fs.Path:getOptionalParentPath()" : {
    "ofNullable" : 1,
    "getParentUtil" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:getPhysicalMemorySize()" : {
    "refreshIfNeeded" : 1
  },
  "org.apache.hadoop.ipc.Client$ConnectionId:equals(java.lang.Object)" : {
    "isEqual" : 4
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue$Processor:kill(org.apache.hadoop.util.Daemon)" : {
    "debug" : 1,
    "compareAndSet" : 1,
    "checkState" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell$CreateCommand:execute()" : {
    "getOut" : 3,
    "printProviderWritten" : 1,
    "toCharArray" : 1,
    "println" : 3,
    "warnIfTransientProvider" : 1,
    "flush" : 1,
    "promptForCredential" : 1,
    "equals" : 1,
    "getMessage" : 2,
    "createCredentialEntry" : 1,
    "doHelp" : 1
  },
  "org.apache.hadoop.fs.FileContext$FCDataOutputStreamBuilder:build()" : {
    "add" : 3,
    "repFac" : 1,
    "getPermission" : 1,
    "getBufferSize" : 1,
    "getProgress" : 2,
    "checksumParam" : 1,
    "blockSize" : 1,
    "asList" : 1,
    "isRecursive" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "getChecksumOpt" : 2,
    "toArray" : 1,
    "getPath" : 1,
    "create" : 1,
    "createParent" : 1,
    "progress" : 1,
    "perms" : 1,
    "getFlags" : 1,
    "bufferSize" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile:getFSOutputBufferSize(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:and(org.apache.hadoop.util.bloom.Filter)" : {
    "buckets2words" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.RSErasureDecoder:prepareDecodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "checkCreateRSRawDecoder" : 1,
    "getOutputBlocks" : 1,
    "getErasedIndexes" : 1,
    "getInputBlocks" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getDeferredRpcProcessingMean()" : {
    "mean" : 1,
    "lastStat" : 1
  },
  "org.apache.hadoop.ipc.Server$RpcCall:toString()" : {
    "toString" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:getLibJars(org.apache.hadoop.conf.Configuration)" : {
    "add" : 1,
    "warn" : 1,
    "toURL" : 1,
    "split" : 1,
    "trim" : 1,
    "getLocal" : 2,
    "toURI" : 1,
    "equals" : 1,
    "get" : 1,
    "toArray" : 1,
    "pathToFile" : 1,
    "isEmpty" : 1,
    "getFileSystem" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:<init>(java.lang.String,int)" : { },
  "org.apache.hadoop.io.BloomMapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration)" : {
    "comparator" : 1
  },
  "org.apache.hadoop.fs.InvalidPathException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:<init>(java.net.URI[],org.apache.hadoop.conf.Configuration,int,java.util.EnumSet)" : { },
  "org.apache.hadoop.conf.ConfigurationWithLogging:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.util.ApplicationClassLoader:loadClass(java.lang.String)" : {
    "loadClass" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:completeLocalOutput(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "completeLocalOutput" : 1
  },
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:stashOriginalFilePermissions()" : {
    "execCommand" : 1,
    "getCanonicalPath" : 2,
    "getPosixFilePermissions" : 1,
    "nextToken" : 1,
    "arraycopy" : 1,
    "get" : 1,
    "getGetPermissionCommand" : 1,
    "fromString" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:createCache(int,org.apache.hadoop.fs.statistics.DurationTrackerFactory)" : { },
  "org.apache.hadoop.security.WhitelistBasedResolver:getServerProperties(java.lang.String)" : {
    "getByName" : 1,
    "getServerProperties" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:findFirstValidInput(java.lang.Object[])" : { },
  "org.apache.hadoop.ipc.ProtobufWrapperLegacy:writeTo(org.apache.hadoop.ipc.ResponseBuffer)" : {
    "getSerializedSize" : 1,
    "ensureCapacity" : 1,
    "writeDelimitedTo" : 1,
    "computeUInt32SizeNoTag" : 1
  },
  "org.apache.hadoop.conf.Configuration:getPasswordFromConfig(java.lang.String)" : {
    "toCharArray" : 1,
    "get" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.ByteBufferUtil:fallbackRead(java.io.InputStream,org.apache.hadoop.io.ByteBufferPool,int)" : {
    "putBuffer" : 1,
    "read" : 2,
    "min" : 1,
    "getBuffer" : 1,
    "array" : 1,
    "limit" : 2,
    "clear" : 2,
    "checkState" : 2,
    "arrayOffset" : 1,
    "flip" : 1,
    "isDirect" : 1,
    "streamHasByteBufferRead" : 1,
    "capacity" : 2
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,short)" : {
    "getInt" : 1,
    "getConf" : 1,
    "create" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodecFactory:addCodec(org.apache.hadoop.io.compress.CompressionCodec)" : {
    "getClass" : 2,
    "toLowerCase" : 2,
    "length" : 2,
    "endsWith" : 1,
    "getCanonicalName" : 1,
    "getSimpleName" : 1,
    "toString" : 1,
    "reverse" : 1,
    "substring" : 1,
    "put" : 4,
    "getDefaultExtension" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:<init>()" : {
    "reset" : 1
  },
  "org.apache.hadoop.io.UTF8:hashCode()" : {
    "hashBytes" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:checkIoStatisticsAvailable()" : {
    "checkAvailable" : 1
  },
  "org.apache.hadoop.security.Groups$TimerToTickerAdapter:read()" : {
    "monotonicNow" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:entry()" : {
    "checkKey" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,int,short,long,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable,org.apache.hadoop.io.SequenceFile$Metadata)" : {
    "replication" : 1,
    "metadata" : 1,
    "createWriter" : 1,
    "file" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1,
    "blockSize" : 1,
    "filesystem" : 1,
    "bufferSize" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator:obtainContext(java.lang.String)" : {
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.ipc.RetryCache$CacheEntryWithPayload:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:finalize()" : {
    "finalize" : 1,
    "finish" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:setContext(java.lang.String)" : {
    "tag" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:replaceRegexCaptureGroupInPath(java.lang.String,java.util.regex.Matcher,java.lang.String,java.util.Set)" : {
    "debug" : 1,
    "getRegexGroupValueFromMather" : 1,
    "replace" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:truncate(org.apache.hadoop.fs.Path,long)" : {
    "fullPath" : 1,
    "truncate" : 1
  },
  "org.apache.hadoop.security.CompositeGroupsMapping:prepareConf(java.lang.String)" : {
    "next" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "iterator" : 1,
    "set" : 1,
    "equals" : 1,
    "replace" : 1,
    "hasNext" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:<init>(org.apache.hadoop.io.file.tfile.TFile$Reader,org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "set" : 2,
    "inBlockAdvance" : 1,
    "end" : 1,
    "getBlockContainsKey" : 1,
    "begin" : 1,
    "seekTo" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "bytesToHex" : 1,
    "println" : 1,
    "getFieldSize" : 1,
    "initTables" : 1,
    "dumpMatrix" : 1,
    "getNumAllUnits" : 5,
    "allowVerboseDump" : 2,
    "getNumDataUnits" : 7,
    "getNumParityUnits" : 1,
    "genCauchyMatrix" : 1
  },
  "org.apache.hadoop.http.AdminAuthorizedServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "getServletContext" : 1,
    "hasAdministratorAccess" : 1,
    "doGet" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.io.compress.CodecPool:getDecompressor(org.apache.hadoop.io.compress.CompressionCodec)" : {
    "getClass" : 1,
    "debug" : 1,
    "isAnnotationPresent" : 1,
    "createDecompressor" : 1,
    "borrow" : 1,
    "updateLeaseCount" : 1,
    "isDebugEnabled" : 1,
    "getDecompressorType" : 1,
    "getDefaultExtension" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.Sets:newTreeSet(java.lang.Iterable)" : {
    "addAll" : 1,
    "newTreeSet" : 1
  },
  "org.apache.hadoop.fs.FileStatus:hashCode()" : {
    "hashCode" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.fs.FileContext:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "setStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getChildFileSystems()" : {
    "getTargetFileSystem" : 1,
    "getRootFallbackLink" : 3,
    "isRootInternalDir" : 1,
    "addAll" : 2,
    "get" : 1,
    "toArray" : 1,
    "error" : 1,
    "getMountPoints" : 1,
    "getChildFileSystems" : 2,
    "asList" : 2,
    "initializeMountedFileSystems" : 1
  },
  "org.apache.hadoop.util.Shell:<init>()" : { },
  "org.apache.hadoop.security.protocolPB.RefreshAuthorizationPolicyProtocolClientSideTranslatorPB:refreshServiceAcl()" : {
    "refreshServiceAcl" : 1,
    "ipc" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "locateKeystore" : 1,
    "unnestUri" : 1,
    "writeLock" : 1,
    "readLock" : 1,
    "getFileSystem" : 1
  },
  "org.apache.hadoop.net.SocketInputWrapper:setTimeout(long)" : {
    "setTimeout" : 1,
    "setSoTimeout" : 1
  },
  "org.apache.hadoop.ipc.Server:getRpcRequestWrapper(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcKindProto)" : {
    "get" : 1,
    "convert" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$RpcProtobufRequest:<init>()" : { },
  "org.apache.hadoop.util.functional.RemoteIterators$FilteringRemoteIterator:hasNext()" : {
    "fetch" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:registerMetrics2Source(java.lang.String)" : {
    "instance" : 1,
    "register" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:getLongStatistics()" : {
    "toLongStatistic" : 1,
    "add" : 1,
    "toSet" : 1,
    "iterator" : 1,
    "counters" : 1,
    "stream" : 1,
    "entrySet" : 2,
    "forEach" : 1,
    "gauges" : 1,
    "map" : 1,
    "collect" : 1
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:delete(org.apache.hadoop.util.bloom.Key)" : {
    "clear" : 1,
    "membershipTest" : 1,
    "hash" : 1
  },
  "org.apache.hadoop.fs.FSInputChecker:read1(byte[],int,int)" : {
    "arraycopy" : 1,
    "fill" : 1,
    "readChecksumChunk" : 1
  },
  "org.apache.hadoop.util.FindClass:printStack(java.lang.Throwable,java.lang.String,java.lang.Object[])" : {
    "printStackTrace" : 1,
    "err" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderExtension:rollNewVersion(java.lang.String)" : {
    "rollNewVersion" : 1
  },
  "org.apache.hadoop.ipc.Server$Responder:doRespond(org.apache.hadoop.ipc.Server$RpcCall)" : {
    "wrapWithSasl" : 1,
    "addLast" : 1,
    "size" : 1,
    "processResponse" : 1
  },
  "org.apache.hadoop.conf.Configuration:iterator()" : {
    "getValue" : 2,
    "getKey" : 2,
    "iterator" : 1,
    "entrySet" : 2,
    "getProps" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.compress.SnappyCodec:createCompressor()" : {
    "getInt" : 1
  },
  "org.apache.hadoop.io.compress.CodecPool:getLeasedDecompressorsCount(org.apache.hadoop.io.compress.CompressionCodec)" : {
    "getLeaseCount" : 1,
    "getDecompressorType" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:setInstance(org.apache.hadoop.metrics2.MetricsSystem)" : {
    "setImpl" : 1
  },
  "org.apache.hadoop.conf.Configuration:get(java.lang.String)" : {
    "getProperty" : 1,
    "substituteVars" : 1,
    "getProps" : 1,
    "get" : 1,
    "handleDeprecation" : 1
  },
  "org.apache.hadoop.io.SecureIOUtils:forceSecureOpenForRandomRead(java.io.File,java.lang.String,java.lang.String,java.lang.String)" : {
    "getFstat" : 1,
    "getGroup" : 1,
    "getOwner" : 1,
    "checkStat" : 1,
    "close" : 1,
    "getFD" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:<init>(org.apache.hadoop.fs.ContentSummary$Builder)" : { },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getInstance(java.lang.String,int,org.apache.hadoop.ipc.DecayRpcScheduler)" : {
    "get" : 2,
    "put" : 1,
    "setDelegate" : 1
  },
  "org.apache.hadoop.util.CrcComposer:newStripedCrcComposer(org.apache.hadoop.util.DataChecksum$Type,long,long)" : {
    "getCrcPolynomialForType" : 1,
    "getMonomial" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.CreateFlag:validate(java.lang.Object,boolean,java.util.EnumSet)" : {
    "contains" : 3,
    "toString" : 2,
    "validate" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$Factory:createProvider(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "parseInt" : 1,
    "extractKMSPath" : 1,
    "contains" : 1,
    "split" : 1,
    "getScheme" : 1,
    "isNullOrEmpty" : 1,
    "equals" : 1,
    "toString" : 1,
    "getAuthority" : 1,
    "createProviders" : 1
  },
  "org.apache.hadoop.fs.shell.Command:getDescription()" : {
    "getCommandField" : 1,
    "isDeprecated" : 1,
    "getReplacementCommand" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:resetChecksumBufSize()" : {
    "getBytesPerChecksum" : 1,
    "setChecksumBufSize" : 1
  },
  "org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool:get(java.nio.channels.SelectableChannel)" : {
    "trimIdleSelectors" : 1,
    "provider" : 1,
    "now" : 1,
    "computeIfAbsent" : 1,
    "pollLast" : 1,
    "openSelector" : 1
  },
  "org.apache.hadoop.conf.Configuration:addDeprecations(org.apache.hadoop.conf.Configuration$DeprecationDelta[])" : {
    "compareAndSet" : 1,
    "get" : 1
  },
  "org.apache.hadoop.util.Timer:monotonicNowNanos()" : {
    "monotonicNowNanos" : 1
  },
  "org.apache.hadoop.fs.FileSystem:createFile(org.apache.hadoop.fs.Path)" : {
    "create" : 1,
    "createDataOutputStreamBuilder" : 1,
    "overwrite" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:interRemoveNodeWithEmptyRack(org.apache.hadoop.net.Node)" : {
    "contains" : 1,
    "getNetworkLocation" : 2,
    "countEmptyRacks" : 1,
    "getName" : 2,
    "get" : 1,
    "getNode" : 1,
    "put" : 1,
    "remove" : 2
  },
  "org.apache.hadoop.fs.FilterFileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "access" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue:addCall(org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall)" : {
    "offer" : 1,
    "debug" : 1,
    "tryStart" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_aggregate(java.io.Serializable,java.lang.Object)" : {
    "applyToIOStatisticsSnapshot" : 1,
    "requireIOStatisticsSnapshot" : 1,
    "checkArgument" : 1,
    "aggregate" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:tryLoadFromPath(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "renameOrFail" : 2,
    "debug" : 2,
    "currentTimeMillis" : 1,
    "loadFromPath" : 2,
    "isBadorWrongPassword" : 1,
    "format" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.ipc.Server:logException(org.slf4j.Logger,java.lang.Throwable,org.apache.hadoop.ipc.Server$Call)" : {
    "warn" : 1,
    "getClass" : 2,
    "currentThread" : 1,
    "getName" : 1,
    "isSuppressedLog" : 1,
    "isTerseLog" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.UnionStorageStatistics:<init>(java.lang.String,org.apache.hadoop.fs.StorageStatistics[])" : {
    "checkArgument" : 3
  },
  "org.apache.hadoop.util.dynamic.DynConstructors$Builder:impl(java.lang.String,java.lang.Class[])" : {
    "impl" : 1,
    "forName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.QuotaUsage:isTypeQuotaSet()" : {
    "getTypesSupportingQuota" : 1,
    "ordinal" : 1
  },
  "org.apache.hadoop.conf.Configuration:appendXMLProperty(org.w3c.dom.Document,org.w3c.dom.Element,java.lang.String,org.apache.hadoop.conf.ConfigRedactor)" : {
    "appendChild" : 9,
    "contains" : 1,
    "createTextNode" : 4,
    "getProperty" : 2,
    "isNullOrEmpty" : 1,
    "valueOf" : 1,
    "get" : 1,
    "redactXml" : 1,
    "createElement" : 5
  },
  "org.apache.hadoop.io.compress.DecompressorStream:read(byte[],int,int)" : {
    "decompress" : 1,
    "checkStream" : 1
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" : {
    "getSocketFactory" : 1,
    "createSocket" : 1,
    "configureSocket" : 1
  },
  "org.apache.hadoop.util.Shell:checkWindowsCommandLineLength(java.lang.String[])" : {
    "format" : 1,
    "length" : 1,
    "join" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$TableBuilder:printToStream(java.io.PrintStream)" : {
    "println" : 1,
    "format" : 1,
    "length" : 1,
    "isEmpty" : 1,
    "toString" : 1,
    "append" : 4
  },
  "org.apache.hadoop.io.SequenceFile$Sorter:sort(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path,boolean)" : {
    "mergePass" : 1,
    "getParent" : 1,
    "sortPass" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:initializeAuthHandler(java.lang.String,javax.servlet.FilterConfig)" : {
    "getAttribute" : 1,
    "initializeAuthHandler" : 1,
    "getServletContext" : 1,
    "setCurator" : 2
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSTokenRenewer:createKeyProvider(org.apache.hadoop.security.token.Token,org.apache.hadoop.conf.Configuration)" : {
    "createKeyProviderFromUri" : 1,
    "debug" : 1,
    "create" : 1,
    "toString" : 1,
    "getKeyProviderUri" : 1,
    "getService" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:noPasswordError()" : {
    "noPasswordError" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getPathHandle(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Options$HandleOpt[])" : {
    "path" : 1,
    "createPathHandle" : 2
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$RBlockState:<init>(org.apache.hadoop.io.file.tfile.Compression$Algorithm,org.apache.hadoop.fs.FSDataInputStream,org.apache.hadoop.io.file.tfile.BCFile$BlockRegion,org.apache.hadoop.conf.Configuration)" : {
    "getCompressedSize" : 1,
    "getDecompressor" : 1,
    "createDecompressionStream" : 1,
    "getOffset" : 1,
    "returnDecompressor" : 1,
    "getFSInputBufferSize" : 1
  },
  "org.apache.hadoop.io.ElasticByteBufferPool$Key:equals(java.lang.Object)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:newZooKeeper(java.lang.String,int,org.apache.zookeeper.Watcher,boolean,org.apache.zookeeper.client.ZKClientConfig)" : {
    "isSaslClientEnabled" : 1,
    "setJaasConfiguration" : 1,
    "isJaasConfigurationSet" : 1,
    "setProperty" : 1,
    "setSslConfiguration" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.Progress:complete()" : {
    "startNextPhase" : 1
  },
  "org.apache.hadoop.conf.StorageUnit$3:getDefault(double)" : { },
  "org.apache.hadoop.fs.HarFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndex:write(java.io.DataOutput)" : {
    "size" : 1,
    "writeVInt" : 1,
    "values" : 1,
    "write" : 1
  },
  "org.apache.hadoop.util.CrcComposer:update(byte[],int,int,long)" : {
    "format" : 1,
    "update" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:toString()" : {
    "getState" : 1,
    "getIndex" : 1,
    "dataSize" : 1,
    "remainingCapacity" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:getRemainingPathStr(java.lang.String,java.lang.String)" : {
    "length" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getVirtualMemorySize()" : {
    "getPhysicalMemorySize" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.Text)" : {
    "getBoolean" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:deleteBlockFileAndEvictCache(org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache$Entry)" : {
    "blockRemovedFromFileCache" : 1,
    "warn" : 1,
    "releaseLock" : 1,
    "deleteIfExists" : 1,
    "error" : 1,
    "takeLock" : 1,
    "trackDuration" : 1,
    "blockEvictedFromFileCache" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.io.compress.CompressionCodec$Util:createInputStreamWithCodecPool(org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.conf.Configuration,java.io.InputStream)" : {
    "getDecompressor" : 1,
    "setTrackedDecompressor" : 1,
    "returnDecompressor" : 1,
    "createInputStream" : 1
  },
  "org.apache.hadoop.util.InstrumentedReadLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.ReentrantReadWriteLock,long,long,org.apache.hadoop.util.Timer)" : {
    "readLock" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream:getFileLength()" : {
    "getContentSummary" : 1,
    "getLength" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableCounterInt:incr()" : {
    "incr" : 1
  },
  "org.apache.hadoop.service.AbstractService:unregisterGlobalListener(org.apache.hadoop.service.ServiceStateChangeListener)" : {
    "remove" : 1
  },
  "org.apache.hadoop.util.ExitUtil:halt(int)" : {
    "halt" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:startupShutdownMessage(java.lang.String,java.util.List)" : {
    "getHostname" : 1,
    "size" : 1,
    "toArray" : 1,
    "createStartupShutdownMessage" : 1
  },
  "org.apache.hadoop.ipc.ClientId:toString(byte[])" : {
    "checkArgument" : 1,
    "toString" : 1,
    "getLsb" : 1,
    "getMsb" : 1
  },
  "org.apache.hadoop.fs.QuotaUsage:toString(boolean,boolean,java.util.List)" : {
    "getTypesQuotaUsage" : 1,
    "getQuotaUsage" : 1
  },
  "org.apache.hadoop.io.BloomMapFile:delete(org.apache.hadoop.fs.FileSystem,java.lang.String)" : {
    "delete" : 4
  },
  "org.apache.hadoop.fs.shell.Count:getAndCheckStorageTypes(java.lang.String)" : {
    "add" : 1,
    "parseStorageType" : 1,
    "split" : 1,
    "equals" : 1,
    "getTypesSupportingQuota" : 1,
    "equalsIgnoreCase" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getAdditionalTokenIssuers()" : {
    "getChildFileSystems" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:addToLinkedListAndEvictIfRequired(org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache$Entry)" : {
    "getPrevious" : 1,
    "addToHeadOfLinkedList" : 1,
    "deleteBlockFileAndEvictCache" : 1,
    "unlock" : 1,
    "writeLock" : 2,
    "get" : 1,
    "setNext" : 1,
    "lock" : 1,
    "setPrevious" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:<init>(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSink,java.lang.String,org.apache.hadoop.metrics2.MetricsFilter,org.apache.hadoop.metrics2.MetricsFilter,org.apache.hadoop.metrics2.MetricsFilter,int,int,int,float,int)" : {
    "setName" : 1,
    "publishMetricsFromQueue" : 1,
    "setDaemon" : 1,
    "checkNotNull" : 2,
    "newGauge" : 1,
    "checkArg" : 4,
    "newCounter" : 1,
    "pow" : 1,
    "newRate" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet$SetIterator:remove()" : {
    "remove" : 1,
    "ensureNext" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsFactory:getAnnotatedMetricsFactory()" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.util.Shell:checkHadoopHome()" : {
    "getProperty" : 1,
    "checkHadoopHomeInner" : 1,
    "getenv" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine:getClient(org.apache.hadoop.conf.Configuration)" : {
    "getClient" : 1
  },
  "org.apache.hadoop.fs.FileContext:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getAclStatus" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.ipc.RPC:getServerAddress(java.lang.Object)" : {
    "getConnectionIdForProxy" : 1,
    "getAddress" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Du:processOptions(java.util.LinkedList)" : {
    "add" : 1,
    "getOpt" : 4,
    "isEmpty" : 1,
    "parse" : 1,
    "setHumanReadable" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableStat:add(long)" : {
    "add" : 2,
    "setChanged" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:available()" : {
    "available" : 2
  },
  "org.apache.hadoop.security.Credentials:writeProtobufOutputStream(java.io.DataOutputStream)" : {
    "writeProto" : 1,
    "write" : 2
  },
  "org.apache.hadoop.conf.Configuration:<init>(boolean)" : {
    "put" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping:getPassword(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "warn" : 1,
    "getPassword" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getValue(org.apache.hadoop.io.BytesWritable)" : {
    "getRemain" : 1,
    "setSize" : 1,
    "readFully" : 1,
    "getValueStream" : 1,
    "getLength" : 1,
    "close" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "locateKeystore" : 1,
    "writeLock" : 1,
    "initFileSystem" : 1,
    "readLock" : 1
  },
  "org.apache.hadoop.metrics2.lib.MethodMetric:<init>(java.lang.Object,java.lang.reflect.Method,org.apache.hadoop.metrics2.MetricsInfo,org.apache.hadoop.metrics2.annotation.Metric$Type)" : {
    "checkNotNull" : 3,
    "setAccessible" : 1,
    "checkArg" : 1,
    "newImpl" : 1,
    "getParameterTypes" : 1
  },
  "org.apache.hadoop.conf.Configuration:setClass(java.lang.String,java.lang.Class,java.lang.Class)" : {
    "set" : 1,
    "getName" : 2,
    "isAssignableFrom" : 1
  },
  "org.apache.hadoop.fs.GetSpaceUsed$Builder:getKlass()" : {
    "getClass" : 1
  },
  "org.apache.hadoop.fs.FileSystem:closeAll()" : {
    "debugLogFileSystemClose" : 1,
    "closeAll" : 1
  },
  "org.apache.hadoop.ipc.Server:refreshServiceAcl(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.authorize.PolicyProvider)" : {
    "refresh" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:sendFileDescriptors(java.io.FileDescriptor[],byte[],int,int)" : {
    "reference" : 1,
    "sendFileDescriptors0" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:isIOStatisticsSource(java.lang.Object)" : {
    "ioStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:trackUpdateToken(org.apache.hadoop.util.functional.InvocationRaisingIOE)" : {
    "trackInvocation" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$KeytabRenewalRunnable:relogin()" : {
    "reloginFromKeytab" : 1
  },
  "org.apache.hadoop.fs.DUHelper:calculateFolderSize(java.lang.String)" : {
    "getFileSize" : 1
  },
  "org.apache.hadoop.fs.FSBuilder:opt(java.lang.String,int)" : {
    "optLong" : 1
  },
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader:set(java.lang.String,java.lang.String)" : {
    "addAttribute" : 1,
    "requireNonNull" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getWorkingDirectory(com.jcraft.jsch.ChannelSftp)" : {
    "getHomeDirectory" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:seekToCurrentValue()" : {
    "readBuffer" : 2,
    "readVInt" : 1,
    "resetState" : 1,
    "reset" : 1,
    "skipBytes" : 1
  },
  "org.apache.hadoop.fs.FileUtil:getJarsInDirectory(java.lang.String,boolean)" : {
    "add" : 1,
    "util" : 1,
    "getLocalFSFileContext" : 1,
    "toUri" : 1,
    "getFileContext" : 1,
    "getPath" : 1,
    "endsWith" : 1,
    "globStatus" : 1,
    "suffix" : 1
  },
  "org.apache.hadoop.fs.FileSystem:close()" : {
    "identityHashCode" : 1,
    "toHexString" : 1,
    "processDeleteOnExit" : 1,
    "debugLogFileSystemClose" : 1,
    "remove" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:initRPC()" : {
    "getPolicyProvider" : 1,
    "info" : 1,
    "getRpcAddressToBindTo" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:pairedTrackerFactory(org.apache.hadoop.fs.statistics.DurationTrackerFactory,org.apache.hadoop.fs.statistics.DurationTrackerFactory)" : { },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:reencryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : {
    "generateEncryptedKey" : 1,
    "getEncryptedKeyVersion" : 3,
    "getEncryptionKeyName" : 1,
    "getConf" : 1,
    "getCurrentKey" : 1,
    "checkArgument" : 1,
    "getVersionName" : 2,
    "getMaterial" : 1,
    "createEncryptor" : 1,
    "checkNotNull" : 1,
    "decryptEncryptedKey" : 1,
    "getEncryptedKeyIv" : 1,
    "equals" : 2,
    "getInstance" : 1,
    "close" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:decayCurrentCosts()" : {
    "next" : 1,
    "getKey" : 3,
    "set" : 5,
    "debug" : 4,
    "entrySet" : 1,
    "recomputeScheduleCache" : 1,
    "hasNext" : 1,
    "error" : 1,
    "remove" : 1,
    "getValue" : 2,
    "isServiceUser" : 1,
    "iterator" : 1,
    "getStackTrace" : 1,
    "updateAverageResponseTime" : 1,
    "get" : 6
  },
  "org.apache.hadoop.util.concurrent.AsyncGetFuture:get(long,java.util.concurrent.TimeUnit)" : {
    "get" : 1,
    "callAsyncGet" : 1
  },
  "org.apache.hadoop.fs.ContentSummary:<init>()" : { },
  "org.apache.hadoop.fs.FileUtil:symLink(java.lang.String,java.lang.String)" : {
    "debug" : 1,
    "stringifyException" : 1,
    "getMessage" : 1,
    "getSymlinkCommand" : 1,
    "execute" : 1,
    "getExitCode" : 2,
    "getPathWithoutSchemeAndAuthority" : 2,
    "warn" : 3,
    "getParentFile" : 2,
    "isAbsolute" : 1,
    "toString" : 4,
    "isDebugEnabled" : 1,
    "join" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration)" : {
    "comparator" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$HadoopConfiguration:getKerberosEntry()" : {
    "prependFileAuthority" : 2,
    "containsKey" : 2,
    "get" : 5,
    "put" : 15
  },
  "org.apache.hadoop.net.DNS:getDefaultHost(java.lang.String,java.lang.String,boolean)" : {
    "equals" : 2,
    "getHosts" : 1
  },
  "org.apache.hadoop.fs.FsShell:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.EmptyIOStatisticsContextImpl:snapshot()" : { },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:<init>(org.apache.hadoop.fs.ChecksumFs,org.apache.hadoop.fs.Path)" : {
    "getFileBufferSize" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.FsUrlConnection:connect()" : {
    "getScheme" : 1,
    "debug" : 1,
    "isOpaque" : 1,
    "equals" : 1,
    "get" : 1,
    "toURI" : 1,
    "checkState" : 1,
    "toString" : 1,
    "getSchemeSpecificPart" : 1,
    "open" : 2
  },
  "org.apache.hadoop.security.UserGroupInformation:logAllUserInfo(org.slf4j.Logger,org.apache.hadoop.security.UserGroupInformation)" : {
    "getCurrentUser" : 1,
    "logUserInfo" : 3,
    "getRealUser" : 2,
    "isDebugEnabled" : 1,
    "getLoginUser" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:createGroupIDExecutor(java.lang.String)" : {
    "getGroupsIDForUserCommand" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl:getLeaf(int,org.apache.hadoop.net.Node)" : {
    "isAncestor" : 1,
    "getName" : 1,
    "size" : 1,
    "getNumOfChildren" : 1,
    "containsKey" : 1,
    "getLeaf" : 1,
    "isLeafParent" : 1,
    "get" : 2,
    "getNumOfLeaves" : 2,
    "indexOf" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.security.Credentials:readTokenStorageStream(java.io.DataInputStream)" : {
    "readFields" : 1,
    "valueOf" : 1,
    "readFully" : 1,
    "equals" : 1,
    "readProto" : 1,
    "readByte" : 1
  },
  "org.apache.hadoop.util.hash.Hash:getInstance(int)" : {
    "getInstance" : 2
  },
  "org.apache.hadoop.io.serializer.DeserializerComparator:compare(byte[],int,int,byte[],int,int)" : {
    "compare" : 1,
    "reset" : 2,
    "deserialize" : 2
  },
  "org.apache.hadoop.metrics2.lib.MutableCounter:<init>(org.apache.hadoop.metrics2.MetricsInfo)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.fs.Path:suffix(java.lang.String)" : {
    "getParent" : 1,
    "getName" : 2
  },
  "org.apache.hadoop.util.ProgramDriver:addClass(java.lang.String,java.lang.Class,java.lang.String)" : {
    "put" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "hasPathCapability" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:isAvailable()" : {
    "loaded" : 1,
    "instance" : 1
  },
  "org.apache.hadoop.util.Shell:getGroupsIDForUserCommand(java.lang.String)" : {
    "getWinUtilsPath" : 1,
    "bashQuote" : 1
  },
  "org.apache.hadoop.util.BasicDiskValidator:checkStatus(java.io.File)" : {
    "checkDir" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$DecayTask:<init>(org.apache.hadoop.ipc.DecayRpcScheduler,java.util.Timer)" : { },
  "org.apache.hadoop.conf.Configuration:getTrimmedStrings(java.lang.String,java.lang.String[])" : {
    "get" : 1,
    "getTrimmedStrings" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.io.compress.CompressorStream:<init>(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : { },
  "org.apache.hadoop.security.UserGroupInformation:isLoginTicketBased()" : {
    "getLoginUser" : 1,
    "isFromTicket" : 1
  },
  "org.apache.hadoop.ipc.CallerContext$Builder:append(java.lang.String)" : {
    "isValid" : 1,
    "length" : 1,
    "append" : 2
  },
  "org.apache.hadoop.ipc.Client$IpcStreams:close()" : {
    "closeStream" : 2
  },
  "org.apache.hadoop.security.UserGroupInformation$RealUser:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.conf.Configuration:substituteCommonVariables(java.lang.String)" : {
    "substituteVars" : 1
  },
  "org.apache.hadoop.util.DataChecksum:newCrc32C()" : {
    "createChecksum" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.FileStatus:isDir()" : {
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.serializer.JavaSerializationComparator:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkNfly(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI[])" : {
    "addLinkNfly" : 1,
    "getDefaultMountTableName" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:init(java.util.Properties)" : {
    "initJsonFactory" : 1,
    "init" : 1,
    "initTokenManager" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getGroups(java.lang.String)" : {
    "getUnixGroups" : 1
  },
  "org.apache.hadoop.io.erasurecode.grouper.BlockGrouper:getRequiredNumParityBlocks()" : {
    "getNumParityUnits" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:<init>(org.apache.commons.configuration2.Configuration,java.lang.String)" : {
    "toLowerCase" : 1
  },
  "org.apache.hadoop.util.KMSUtil:checkNotEmpty(java.lang.String,java.lang.String)" : {
    "checkNotNull" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.util.DiskChecker:mkdirsWithExistsAndPermissionCheck(org.apache.hadoop.fs.LocalFileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "mkdirsWithExistsCheck" : 1,
    "getPermission" : 1,
    "equals" : 1,
    "getFileStatus" : 1,
    "pathToFile" : 1,
    "exists" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.ipc.Server:getListenerAddress()" : {
    "getAddress" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:flush()" : {
    "getKey" : 2,
    "renameOrFail" : 2,
    "unlock" : 1,
    "constructNewPath" : 1,
    "entrySet" : 1,
    "backupToOld" : 1,
    "constructOldPath" : 1,
    "getValue" : 1,
    "cleanupNewAndOld" : 1,
    "setKeyEntry" : 1,
    "currentTimeMillis" : 2,
    "revertFromOld" : 1,
    "lock" : 1,
    "toString" : 2,
    "writeToNew" : 1,
    "resetKeyStoreState" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:createKey(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "innerSetKeyVersion" : 1,
    "getCipher" : 2,
    "getAttributes" : 1,
    "unlock" : 1,
    "containsKey" : 1,
    "toLowerCase" : 1,
    "containsAlias" : 1,
    "checkArgument" : 1,
    "getDescription" : 1,
    "buildVersionName" : 1,
    "put" : 1,
    "equals" : 1,
    "lock" : 1,
    "getBitLength" : 3
  },
  "org.apache.hadoop.fs.FileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "getDefaultUri" : 1,
    "getScheme" : 4,
    "getStatistics" : 1,
    "isEmpty" : 1,
    "getBoolean" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:prepareMetaBlock(java.lang.String,org.apache.hadoop.io.file.tfile.Compression$Algorithm)" : {
    "getMetaByName" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:getPathToResolve(java.lang.String,boolean)" : {
    "lastIndexOf" : 1,
    "toString" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:readFields(java.io.DataInput)" : {
    "read" : 1,
    "readLong" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:decompress(byte[],int,int)" : {
    "getCompressedData" : 2,
    "needsDictionary" : 1,
    "decompress" : 1,
    "needsInput" : 1,
    "getRemaining" : 1,
    "reset" : 2,
    "finished" : 1,
    "setInput" : 3
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setCounter(java.lang.String,long)" : {
    "setAtomicLong" : 1,
    "debug" : 1,
    "get" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable:<init>(java.lang.Object)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.impl.DefaultBulkDeleteOperation:bulkDelete(java.util.Collection)" : {
    "add" : 1,
    "next" : 1,
    "iterator" : 1,
    "debug" : 1,
    "isEmpty" : 1,
    "toString" : 1,
    "validateBulkDeletePaths" : 1,
    "delete" : 1,
    "pair" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:deleteKey(java.lang.String)" : {
    "call" : 1,
    "checkNotEmpty" : 1,
    "createConnection" : 1,
    "createURL" : 1
  },
  "org.apache.hadoop.util.LineReader:<init>(java.io.InputStream)" : { },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:addRow()" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "fullPath" : 1,
    "removeAclEntries" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:getDelegationKey(int)" : {
    "readFields" : 1,
    "selectDelegationKey" : 1,
    "getDelegationKey" : 1,
    "error" : 1,
    "put" : 1
  },
  "org.apache.hadoop.util.DataChecksum:calculateChunkedSums(java.nio.ByteBuffer,java.nio.ByteBuffer)" : {
    "isAvailable" : 1,
    "hasArray" : 2,
    "putInt" : 1,
    "update" : 1,
    "remaining" : 3,
    "getValue" : 1,
    "min" : 1,
    "array" : 2,
    "get" : 1,
    "reset" : 3,
    "arrayOffset" : 2,
    "position" : 2,
    "mark" : 2,
    "calculateChunkedSums" : 2
  },
  "org.apache.hadoop.fs.FSBuilder:opt(java.lang.String,long)" : {
    "optLong" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.StatisticDurationTracker:close()" : {
    "incrementCounter" : 1,
    "asDuration" : 1,
    "finished" : 1,
    "addTimedOperation" : 1
  },
  "org.apache.hadoop.http.HttpServer2$Builder:getPasswordString(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "getPassword" : 1
  },
  "org.apache.hadoop.net.SocketIOWithTimeout:<init>(java.nio.channels.SelectableChannel,long)" : {
    "checkChannelValidity" : 1,
    "configureBlocking" : 1
  },
  "org.apache.hadoop.util.bloom.Filter:readFields(java.io.DataInput)" : {
    "readByte" : 1,
    "readInt" : 3
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:decompress(byte[],int,int)" : {
    "inflateBytesDirect" : 1,
    "rewind" : 1,
    "limit" : 2,
    "checkStream" : 1,
    "populateUncompressedBuffer" : 2,
    "remaining" : 1
  },
  "org.apache.hadoop.io.file.tfile.Utils:writeString(java.io.DataOutput,java.lang.String)" : {
    "writeVInt" : 2,
    "getLength" : 1,
    "write" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.util.CrcUtil:toSingleCrcString(byte[])" : {
    "format" : 2,
    "toString" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:read()" : {
    "read" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:getOptions()" : {
    "createOptions" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,long,long,org.apache.hadoop.io.compress.SplittableCompressionCodec$READ_MODE)" : {
    "getName" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSOutputSummer:close()" : {
    "flushBuffer" : 1,
    "close" : 2
  },
  "org.apache.hadoop.util.functional.RemoteIterators$CloseRemoteIterator:close()" : {
    "debug" : 1,
    "close" : 2
  },
  "org.apache.hadoop.conf.Configuration:setIfUnset(java.lang.String,java.lang.String)" : {
    "set" : 1,
    "get" : 1
  },
  "org.apache.hadoop.util.DiskValidatorFactory:getInstance(java.lang.String)" : {
    "forName" : 1,
    "getInstance" : 1,
    "equalsIgnoreCase" : 2
  },
  "org.apache.hadoop.util.FindClass:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.util.functional.LazyAtomicReference:lazyAtomicReferenceFromSupplier(java.util.function.Supplier)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsCollectorImpl:addRecord(java.lang.String)" : {
    "addRecord" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.RSErasureCodec:createDecoder()" : {
    "getCoderOptions" : 1
  },
  "org.apache.hadoop.fs.PartialListing:<init>(org.apache.hadoop.fs.Path,java.util.List)" : { },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:write(byte[])" : {
    "write" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:delete(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path,boolean)" : {
    "deleteFile" : 1,
    "isFile" : 1,
    "removeDirectory" : 1,
    "toUri" : 1,
    "getFileStatus" : 1,
    "getPath" : 2,
    "listStatus" : 1,
    "delete" : 1,
    "makeAbsolute" : 1,
    "printWorkingDirectory" : 1
  },
  "org.apache.hadoop.http.ProfilerDisabledServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "setResponseHeader" : 1,
    "getWriter" : 1,
    "write" : 1,
    "setStatus" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:read()" : {
    "read" : 1,
    "incrementCounter" : 1,
    "addAndGet" : 1,
    "incrementBytesRead" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics$StatisticsDataReference:cleanUp()" : {
    "add" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.ipc.Server$Call:doResponse(java.lang.Throwable)" : {
    "doResponse" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:mkdirs(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "getParent" : 1,
    "makeDirectory" : 1,
    "getName" : 1,
    "isFile" : 1,
    "toUri" : 1,
    "mkdirs" : 1,
    "getPath" : 1,
    "format" : 1,
    "exists" : 1,
    "changeWorkingDirectory" : 1,
    "makeAbsolute" : 1,
    "printWorkingDirectory" : 1,
    "getDirDefault" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getPermission()" : {
    "getPermission" : 1
  },
  "org.apache.hadoop.io.WritableUtils:readCompressedStringArray(java.io.DataInput)" : {
    "readCompressedString" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "makeQualified" : 1,
    "getUriPath" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLaunchException:<init>(int,java.lang.String)" : { },
  "org.apache.hadoop.metrics2.lib.MutableQuantiles$RolloverSample:<init>(org.apache.hadoop.metrics2.lib.MutableQuantiles)" : { },
  "org.apache.hadoop.util.ExitUtil:terminate(int)" : {
    "terminate" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat:stddev()" : {
    "variance" : 1,
    "sqrt" : 1
  },
  "org.apache.hadoop.net.AbstractDNSToSwitchMapping:dumpTopology()" : {
    "add" : 1,
    "getKey" : 1,
    "getValue" : 2,
    "size" : 2,
    "entrySet" : 1,
    "getSwitchMap" : 1,
    "toString" : 2,
    "append" : 16
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProtocolMetaInfoProxy(org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:reset()" : {
    "init" : 1,
    "rewind" : 1,
    "limit" : 1,
    "checkStream" : 1,
    "end" : 1,
    "position" : 1
  },
  "org.apache.hadoop.security.SaslRpcServer$SaslDigestCallbackHandler:handle(javax.security.auth.callback.Callback[])" : {
    "setPassword" : 1,
    "debug" : 2,
    "getUser" : 3,
    "getAuthorizationID" : 1,
    "setAuthorized" : 2,
    "isAuthorized" : 1,
    "getPassword" : 1,
    "getIdentifier" : 2,
    "equals" : 1,
    "getAuthenticationID" : 1,
    "setAuthorizedID" : 1,
    "getUserName" : 1,
    "isDebugEnabled" : 2,
    "getDefaultName" : 1
  },
  "org.apache.hadoop.metrics2.util.MBeans:getMBeanName(java.lang.String,java.lang.String,java.util.Map)" : {
    "warn" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "joining" : 1,
    "entrySet" : 1,
    "stream" : 1,
    "isEmpty" : 1,
    "newMBeanName" : 1,
    "map" : 1,
    "collect" : 1
  },
  "org.apache.hadoop.fs.FileContext:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "deleteSnapshot" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPointResolvedDstPathReplaceInterceptor:serializeToString()" : {
    "getConfigName" : 1
  },
  "org.apache.hadoop.util.Shell:getQualifiedBinInner(java.io.File,java.lang.String)" : {
    "isFile" : 1,
    "getCanonicalFile" : 1,
    "exists" : 2,
    "toString" : 1,
    "isDirectory" : 1,
    "fileNotFoundException" : 1,
    "addOsText" : 4
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:renewDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String)" : {
    "getAuthenticator" : 1,
    "checkNotNull" : 3,
    "renewDelegationToken" : 1
  },
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : {
    "getFileBufferSize" : 1,
    "checkNotNull" : 2,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:mayThrow(java.util.List)" : {
    "debug" : 1,
    "createIOException" : 1,
    "isDebugEnabled" : 1,
    "cardinality" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:valueClass(java.lang.Class)" : {
    "valueClass" : 1
  },
  "org.apache.hadoop.util.JvmPauseMonitor$Monitor:run()" : {
    "sleep" : 1,
    "warn" : 1,
    "formatMessage" : 2,
    "now" : 1,
    "start" : 1,
    "reset" : 1,
    "getGcTimes" : 2,
    "info" : 2
  },
  "org.apache.hadoop.fs.Globber:createGlobber(org.apache.hadoop.fs.FileContext)" : { },
  "org.apache.hadoop.fs.shell.Command:processPaths(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.RemoteIterator)" : {
    "next" : 2,
    "add" : 1,
    "cleanupRemoteIterator" : 1,
    "size" : 2,
    "clear" : 1,
    "toArray" : 1,
    "hasNext" : 3,
    "processPaths" : 2,
    "getListingGroupSize" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getModificationTime()" : {
    "getModificationTime" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.AbstractNativeRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.shell.Truncate:processArguments(java.util.LinkedList)" : {
    "processArguments" : 1,
    "waitForRecovery" : 1
  },
  "org.apache.hadoop.ipc.Server:setupResponse(org.apache.hadoop.ipc.Server$RpcCall,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto,org.apache.hadoop.io.Writable)" : {
    "warn" : 1,
    "setupResponseForWritable" : 1,
    "setupResponseForProtobuf" : 1,
    "setResponse" : 1,
    "toString" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:stringifySecurityProperty(java.lang.String)" : {
    "containsKey" : 1,
    "get" : 1,
    "getString" : 4
  },
  "org.apache.hadoop.io.SequenceFile$CompressedBytes:writeUncompressedBytes(java.io.DataOutputStream)" : {
    "read" : 1,
    "resetState" : 1,
    "reset" : 1,
    "write" : 1,
    "createInputStream" : 1
  },
  "org.apache.hadoop.fs.FileSystem:listStatus(java.util.ArrayList,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "add" : 1,
    "checkNotNull" : 1,
    "getPath" : 1,
    "listStatus" : 1,
    "accept" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:processPath(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : {
    "isRecursive" : 1,
    "isFile" : 1,
    "copyFileToTarget" : 1,
    "toString" : 2,
    "isSymlink" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:submit(java.lang.Runnable)" : {
    "currentThread" : 1,
    "submit" : 1,
    "interrupt" : 1,
    "immediateFailedFuture" : 1,
    "acquire" : 1,
    "trackDuration" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "fullPath" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.util.IntrusiveCollection:toArray(java.lang.Object[])" : {
    "next" : 1,
    "iterator" : 1,
    "toArray" : 1,
    "hasNext" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : {
    "checkNativeCodeLoaded" : 1,
    "getDecompressionBufferSize" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureEncodingStep:performCoding(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "encode" : 1
  },
  "org.apache.hadoop.service.launcher.HadoopUncaughtExceptionHandler:<init>()" : { },
  "org.apache.hadoop.security.token.DtUtilShell$Edit:execute()" : {
    "getConf" : 1,
    "aliasTokenFile" : 1
  },
  "org.apache.hadoop.metrics2.sink.GraphiteSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : {
    "warn" : 1,
    "replace" : 1,
    "context" : 1,
    "name" : 3,
    "toString" : 1,
    "metrics" : 1,
    "write" : 1,
    "close" : 1,
    "value" : 3,
    "append" : 15,
    "timestamp" : 1,
    "tags" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrAuthorizationFailures()" : {
    "incr" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:getStat(java.lang.String)" : {
    "warn" : 2,
    "stat" : 2,
    "getName" : 2,
    "getErrorCode" : 1,
    "getMessage" : 1
  },
  "org.apache.hadoop.conf.Configuration$IntegerRanges:iterator()" : { },
  "org.apache.hadoop.io.ArrayPrimitiveWritable:checkArray(java.lang.Object)" : {
    "getClass" : 2,
    "isArray" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:getGroupsString()" : {
    "getString" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_toPrettyString(java.lang.Object)" : {
    "ioStatisticsToPrettyString" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:shutdown()" : {
    "reference" : 1,
    "shutdown0" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "readOnlyMountTable" : 1,
    "resolve" : 1,
    "createSymlink" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "getXAttr" : 1
  },
  "org.apache.hadoop.util.DataChecksum:verifyChunked(org.apache.hadoop.util.DataChecksum$Type,java.util.zip.Checksum,byte[],int,int,int,byte[],int,java.lang.String,long)" : {
    "getValue" : 2,
    "update" : 2,
    "reset" : 2,
    "throwChecksumException" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:write(byte[],int,int)" : {
    "incrementCounter" : 2,
    "write" : 1
  },
  "org.apache.hadoop.conf.Configuration:getTrimmedStringCollection(java.lang.String)" : {
    "get" : 1,
    "getTrimmedStringCollection" : 1
  },
  "org.apache.hadoop.util.Shell$ShellTimeoutTimerTask:run()" : {
    "getProcess" : 1,
    "exitValue" : 1,
    "get" : 1,
    "destroy" : 1,
    "setTimedOut" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection$RpcRequestSender:run()" : {
    "getName" : 2,
    "debug" : 1,
    "getRight" : 1,
    "flush" : 1,
    "toByteArray" : 1,
    "get" : 2,
    "closeStream" : 1,
    "markClosed" : 1,
    "isDebugEnabled" : 1,
    "poll" : 1,
    "sendRequest" : 1,
    "getLeft" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createKeyInternal(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "getCipher" : 1,
    "getAttributes" : 3,
    "isEmpty" : 1,
    "createConnection" : 1,
    "getDescription" : 2,
    "encodeBase64String" : 1,
    "put" : 6,
    "call" : 1,
    "parseJSONKeyVersion" : 1,
    "checkNotEmpty" : 1,
    "checkNotNull" : 1,
    "setRequestProperty" : 1,
    "createURL" : 1,
    "getBitLength" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:<init>(java.io.InputStream)" : { },
  "org.apache.hadoop.io.UTF8:set(java.lang.String)" : {
    "warn" : 1,
    "arraycopy" : 1,
    "get" : 1,
    "length" : 3,
    "reset" : 1,
    "writeChars" : 1,
    "utf8Length" : 1,
    "getData" : 1,
    "substring" : 2
  },
  "org.apache.hadoop.fs.FSLinkResolver:resolve(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : {
    "next" : 1,
    "qualifySymlinkTarget" : 1,
    "areSymlinksEnabled" : 1,
    "getFSofPath" : 2,
    "getLinkTarget" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:matchService(org.apache.hadoop.security.token.DtFetcher,org.apache.hadoop.io.Text,java.lang.String)" : {
    "equals" : 1,
    "getServiceName" : 1,
    "toString" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.util.SysInfo:newInstance()" : { },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:assertCodeLoaded()" : {
    "isAvailable" : 1
  },
  "org.apache.hadoop.fs.FileStatus:isFile()" : {
    "isSymlink" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.tools.GetGroupsBase:run(java.lang.String[])" : {
    "println" : 1,
    "getCurrentUser" : 1,
    "getUserName" : 1,
    "getGroupsForUser" : 1,
    "getUgmProtocol" : 1,
    "append" : 3
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:getLocalPathToRead(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "exists" : 1,
    "confChanged" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.ipc.Server:isServerFailOverEnabled()" : {
    "isServerFailOverEnabled" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.util.Progressable,org.apache.hadoop.io.SequenceFile$Metadata)" : {
    "init" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:isLastBlock(int)" : {
    "throwIfInvalidBlockNumber" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:fileSystem_openFile_available()" : {
    "available" : 1
  },
  "org.apache.hadoop.security.KDiag:error(java.lang.String,java.lang.String,java.lang.Object[])" : {
    "println" : 1,
    "format" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:or(org.apache.hadoop.util.bloom.Filter)" : {
    "or" : 1
  },
  "org.apache.hadoop.io.file.tfile.BoundedRangeFileInputStream:read()" : {
    "read" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:createGenericOptionsParser(org.apache.hadoop.conf.Configuration,java.lang.String[])" : { },
  "org.apache.hadoop.fs.FileContext$Util:copy(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copy" : 1
  },
  "org.apache.hadoop.ha.HAServiceTarget:getZKFCProxy(org.apache.hadoop.conf.Configuration,int)" : {
    "getDefaultSocketFactory" : 1,
    "getZKFCAddress" : 1,
    "setInt" : 1
  },
  "org.apache.hadoop.ipc.Server:updateMetrics(org.apache.hadoop.ipc.Server$Call,long,boolean)" : {
    "addRpcProcessingTime" : 1,
    "logSlowRpcCalls" : 1,
    "addProcessingTime" : 1,
    "set" : 2,
    "getReturnStatus" : 1,
    "addRpcEnQueueTime" : 1,
    "addResponseTime" : 1,
    "addRpcLockWaitTime" : 1,
    "incrRpcCallSuccesses" : 1,
    "increment" : 1,
    "convert" : 1,
    "monotonicNowNanos" : 1,
    "isResponseDeferred" : 1,
    "addRpcQueueTime" : 1,
    "addOverallProcessingTime" : 1,
    "getProcessingDetails" : 1,
    "get" : 8,
    "addRpcResponseTime" : 1,
    "isLogSlowRPC" : 1,
    "getDetailedMetricsName" : 1,
    "getMetricsTimeUnit" : 6
  },
  "org.apache.hadoop.fs.shell.Test:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "isFile" : 1,
    "getLen" : 2,
    "testAccess" : 2,
    "isDirectory" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableStat:add(long,long)" : {
    "add" : 1,
    "setChanged" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:fsGetter()" : {
    "getScheme" : 1
  },
  "org.apache.hadoop.ipc.Server:getSchedulerClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 3,
    "setClass" : 1,
    "equals" : 1,
    "getCanonicalName" : 2,
    "convertSchedulerClass" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:exit(int,java.lang.String)" : {
    "terminate" : 1
  },
  "org.apache.hadoop.crypto.key.CachingKeyProvider:invalidateCache(java.lang.String)" : {
    "getExtension" : 3,
    "invalidateAll" : 1,
    "invalidateCache" : 1,
    "getKeyProvider" : 1,
    "invalidate" : 2
  },
  "org.apache.hadoop.fs.QuotaUsage:formatSize(long,boolean)" : {
    "long2String" : 1,
    "valueOf" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:compression(org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec)" : {
    "compression" : 1
  },
  "org.apache.hadoop.http.HtmlQuoting:main(java.lang.String[])" : {
    "quoteHtmlChars" : 1,
    "println" : 4,
    "unquoteHtmlChars" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMappingWithFallback:<init>()" : {
    "getClass" : 1,
    "getName" : 1,
    "debug" : 1,
    "isDebugEnabled" : 1,
    "info" : 1,
    "isNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$BlockAppender:close()" : {
    "getCurrentPos" : 1,
    "finish" : 1,
    "getStartPos" : 1,
    "getRawSize" : 1,
    "register" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "unsetStoragePolicy" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.ipc.RefreshResponse:successResponse()" : { },
  "org.apache.hadoop.ipc.Client$Connection:cleanupCalls()" : {
    "next" : 1,
    "getValue" : 1,
    "iterator" : 1,
    "entrySet" : 1,
    "hasNext" : 1,
    "setException" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.shell.find.Name:<init>()" : { },
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],long,long,boolean)" : { },
  "org.apache.hadoop.io.retry.RetryPolicies:failoverOnNetworkException(int)" : {
    "failoverOnNetworkException" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:<init>(java.lang.Class,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getProtocolName" : 1,
    "getProtocolVersion" : 1,
    "getClient" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:getAllServiceState()" : {
    "getServiceStatus" : 1,
    "getTargetIds" : 1,
    "println" : 3,
    "getState" : 1,
    "getPort" : 1,
    "getConf" : 1,
    "getHostName" : 1,
    "getProxy" : 1,
    "format" : 2,
    "resolveTarget" : 1,
    "isEmpty" : 1,
    "getMessage" : 1,
    "getAddress" : 2
  },
  "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:hashCode()" : {
    "hashCode" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:trackDuration(java.lang.String,long)" : {
    "stubDurationTracker" : 1,
    "containsKey" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:write(java.io.DataOutput)" : {
    "loadPermissionInfo" : 1,
    "isPermissionLoaded" : 1,
    "write" : 1
  },
  "org.apache.hadoop.conf.ReconfigurableBase$ReconfigurationThread:run()" : {
    "ofNullable" : 1,
    "set" : 1,
    "getConf" : 1,
    "isPropertyReconfigurable" : 1,
    "redact" : 2,
    "format" : 1,
    "newHashMap" : 1,
    "getMessage" : 2,
    "getChangedProperties" : 1,
    "unset" : 1,
    "getCause" : 1,
    "unmodifiableMap" : 1,
    "put" : 1,
    "getNewConf" : 1,
    "reconfigurePropertyImpl" : 1,
    "now" : 1,
    "info" : 3
  },
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.PathHandle)" : {
    "initFromFS" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : {
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:setAuthenticationMethod(org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod,org.apache.hadoop.conf.Configuration)" : {
    "set" : 1,
    "toLowerCase" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:release(java.lang.Object)" : {
    "contains" : 1,
    "checkNotNull" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.KDiag$KerberosDiagsFailure:<init>(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])" : {
    "initCause" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getMetaBlock(java.lang.String)" : {
    "getCompressionAlgorithm" : 1,
    "createReader" : 1,
    "getRegion" : 1,
    "getMetaByName" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : { },
  "org.apache.hadoop.fs.shell.CommandFormat$TooManyArgumentsException:getMessage()" : {
    "getMessage" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainChannel:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:serviceCreationFailure(java.lang.Exception)" : { },
  "org.apache.hadoop.util.ShutdownThreadsHelper:shutdownExecutorService(java.util.concurrent.ExecutorService)" : {
    "shutdownExecutorService" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:checkIfExists(org.apache.hadoop.fs.shell.PathData$FileTypeRequirement)" : {
    "toString" : 3,
    "isDirectory" : 2
  },
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:authorize(org.apache.hadoop.security.UserGroupInformation,java.net.InetAddress)" : {
    "getShortUserName" : 2,
    "isUserAllowed" : 1,
    "get" : 2,
    "getUserName" : 3,
    "includes" : 1,
    "getRealUser" : 1,
    "getProxySuperuserIpConfKey" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : {
    "readOnlyMountTable" : 1,
    "getRootFallbackLink" : 2,
    "getName" : 3,
    "createInternal" : 1,
    "containsKey" : 1,
    "error" : 1,
    "getPathWithoutSchemeAndAuthority" : 1,
    "getTargetFileSystem" : 1,
    "getChildren" : 2,
    "checkNotNull" : 1,
    "get" : 1,
    "equals" : 1,
    "toString" : 1,
    "getUri" : 1,
    "append" : 3
  },
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibDirectDecompressor(org.apache.hadoop.conf.Configuration)" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:<init>()" : { },
  "org.apache.hadoop.service.launcher.IrqHandler:<init>(java.lang.String,org.apache.hadoop.service.launcher.IrqHandler$Interrupted)" : {
    "checkArgument" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:compareTo(byte[])" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:createLink(java.lang.String,java.lang.String,org.apache.hadoop.fs.viewfs.InodeTree$LinkType,java.lang.String,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration)" : {
    "add" : 1,
    "resolveInternal" : 2,
    "addDirLink" : 1,
    "isInternalDir" : 3,
    "initAndGetTargetFs" : 1,
    "setInternalDirFs" : 1,
    "getStrings" : 1,
    "getTargetFileSystem" : 2,
    "checkState" : 1,
    "addDir" : 1,
    "getRootDir" : 1,
    "breakIntoPathComponents" : 1,
    "isAbsoluteAndSchemeAuthorityNull" : 1,
    "stringToURI" : 1,
    "addLink" : 1,
    "append" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:listXAttrs(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.shell.Command:getUsage()" : {
    "getCommandField" : 1,
    "isDeprecated" : 1,
    "getName" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.util.LightWeightGSet:remove(int,java.lang.Object)" : {
    "equals" : 2,
    "setNext" : 3,
    "convert" : 2,
    "getNext" : 4
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:reset()" : {
    "add" : 2,
    "visitAll" : 1,
    "negate" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:managementOperation(org.apache.hadoop.security.authentication.server.AuthenticationToken,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "renewToken" : 1,
    "authenticate" : 1,
    "getRemoteAddr" : 1,
    "sendError" : 4,
    "requiresKerberosCredentials" : 1,
    "getMethod" : 2,
    "trace" : 2,
    "flush" : 1,
    "singletonMap" : 1,
    "toUpperCase" : 1,
    "getUserName" : 1,
    "setContentType" : 1,
    "writeValue" : 1,
    "write" : 1,
    "authorize" : 1,
    "getParameter" : 5,
    "getShortUserName" : 2,
    "isManagementOperation" : 1,
    "valueOf" : 1,
    "format" : 3,
    "cancelToken" : 1,
    "createToken" : 1,
    "createRemoteUser" : 1,
    "getDoAs" : 1,
    "setStatus" : 1,
    "createProxyUser" : 1,
    "decodeFromUrlString" : 2,
    "delegationTokenToJSON" : 1,
    "getWriter" : 1,
    "equals" : 1,
    "createServletExceptionResponse" : 1,
    "toString" : 2,
    "getHttpMethod" : 2
  },
  "org.apache.hadoop.ipc.CallQueueManager:isServerFailOverEnabledByQueue()" : {
    "isServerFailOverEnabled" : 1,
    "get" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher$NotificationHandler:handle(org.apache.hadoop.net.unix.DomainSocket)" : {
    "trace" : 4,
    "read" : 1,
    "isTraceEnabled" : 4,
    "isHeldByCurrentThread" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:rollLogDirIfNeeded()" : {
    "findCurrentDirectory" : 1,
    "scheduleFlush" : 2,
    "initFs" : 1,
    "getTime" : 2,
    "throwMetricsException" : 1,
    "rollLogDir" : 1,
    "after" : 1,
    "updateFlushTime" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$LinkedSegmentsDescriptor:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getTag(java.lang.String)" : {
    "getTag" : 1
  },
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:init(org.apache.commons.configuration2.SubsetConfiguration)" : {
    "add" : 1,
    "next" : 1,
    "init" : 1,
    "trim" : 1,
    "equals" : 1,
    "length" : 2,
    "hasNext" : 1,
    "getStringArray" : 1,
    "getKeys" : 1,
    "setListDelimiterHandler" : 1,
    "put" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getDefaultReplication()" : {
    "getDefaultReplication" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(java.lang.String,java.lang.String,int)" : {
    "newGauge" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.Shell:getSetPermissionCommand(java.lang.String,boolean,java.lang.String)" : {
    "getSetPermissionCommand" : 1,
    "copyOf" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:checkPath(org.apache.hadoop.fs.Path)" : {
    "requireNonNull" : 1,
    "checkArgument" : 1,
    "toString" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:doOp(org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider$ProviderCallable,int,boolean)" : {
    "call" : 1,
    "sleep" : 1,
    "getInt" : 1,
    "warn" : 1,
    "getConf" : 1,
    "shouldRetry" : 1,
    "getKMSUrl" : 1,
    "initCause" : 1,
    "getMessage" : 1,
    "error" : 1
  },
  "org.apache.hadoop.ipc.ProtocolMetaInfoServerSideTranslatorPB:getProtocolSignature(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureRequestProto)" : {
    "addMethods" : 1,
    "setVersion" : 1,
    "build" : 3,
    "getProtocolVersionForRpcKind" : 1,
    "valueOf" : 1,
    "getRpcKind" : 1,
    "getProtocol" : 1,
    "getMethods" : 1,
    "newBuilder" : 2,
    "addProtocolSignature" : 1,
    "getProtocolSignature" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Put:processArguments(java.util.LinkedList)" : {
    "getTargetPath" : 1,
    "size" : 1,
    "copyStreamToTarget" : 1,
    "get" : 2,
    "equals" : 1,
    "toString" : 1,
    "processArguments" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:saslProcess(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto)" : {
    "doSaslReply" : 1,
    "set" : 1,
    "isLoginSuccess" : 1,
    "getTrueCause" : 2,
    "debug" : 4,
    "processSaslMessage" : 2,
    "getLocalizedMessage" : 2,
    "stringifyException" : 1,
    "getAuthorizationID" : 1,
    "incrAuthenticationSuccesses" : 1,
    "doKerberosRelogin" : 1,
    "getLoginUser" : 1,
    "incrAuthenticationFailures" : 1,
    "warn" : 1,
    "disposeSasl" : 1,
    "toString" : 4,
    "isDebugEnabled" : 2,
    "equalsIgnoreCase" : 1,
    "getAuthorizedUgi" : 1,
    "getNegotiatedProperty" : 2,
    "isComplete" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.statistics.DurationStatisticSummary:<init>(java.lang.String,boolean,long,long,long,org.apache.hadoop.fs.statistics.MeanStatistic)" : {
    "clone" : 1
  },
  "org.apache.hadoop.util.OperationDuration:<init>()" : {
    "time" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getInternal" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementWriteOps(int)" : {
    "getThreadStatistics" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:listStatus(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.shell.CommandWithDestination$TargetFileSystem:writeStreamToFile(java.io.InputStream,org.apache.hadoop.fs.shell.PathData,boolean,boolean)" : {
    "getConf" : 1,
    "closeStream" : 1,
    "create" : 1,
    "copyBytes" : 1,
    "deleteOnExit" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:enterState(org.apache.hadoop.fs.store.DataBlocks$DataBlock$DestState,org.apache.hadoop.fs.store.DataBlocks$DataBlock$DestState)" : {
    "debug" : 1,
    "verifyState" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(java.lang.Iterable,java.lang.String)" : {
    "checkNotEmpty" : 1,
    "iterator" : 1,
    "checkNotNull" : 1,
    "hasNext" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getLastKey()" : {
    "checkTFileDataIndex" : 1,
    "getLastKey" : 1
  },
  "org.apache.hadoop.fs.MD5MD5CRC32CastagnoliFileChecksum:<init>(int,long,org.apache.hadoop.io.MD5Hash)" : { },
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:flush()" : {
    "flush" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState:convertToByteBufferState()" : {
    "allocateDirect" : 1,
    "cloneAsDirectByteBuffer" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addTimedOperation(java.lang.String,java.time.Duration)" : {
    "getInnerStatistics" : 1,
    "addTimedOperation" : 1
  },
  "org.apache.hadoop.fs.Path:<init>(java.lang.String,java.lang.String,java.lang.String)" : {
    "hasWindowsDrive" : 1,
    "initialize" : 1,
    "checkPathArg" : 1,
    "charAt" : 2
  },
  "org.apache.hadoop.net.NetUtils:createSocketAddrForHost(java.lang.String,int)" : {
    "createUnresolved" : 1,
    "getStaticResolution" : 1,
    "getByName" : 1,
    "getByAddress" : 1,
    "getAddress" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getEntryComparator()" : {
    "compare" : 1,
    "getKeyBuffer" : 2,
    "isSorted" : 1,
    "getKeyLength" : 2
  },
  "org.apache.hadoop.service.launcher.AbstractLaunchableService:<init>(java.lang.String)" : { },
  "org.apache.hadoop.fs.FilterFs:getAllStoragePolicies()" : {
    "getAllStoragePolicies" : 1
  },
  "org.apache.hadoop.fs.FileContext:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.io.DataInputBuffer:getLength()" : {
    "getLength" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFileDumper$Align:format(long,int,org.apache.hadoop.io.file.tfile.TFileDumper$Align)" : {
    "format" : 2,
    "toString" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableInverseQuantiles:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)" : { },
  "org.apache.hadoop.fs.FilterFileSystem:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : {
    "setAcl" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getGroup()" : {
    "getGroup" : 1
  },
  "org.apache.hadoop.fs.shell.Command:expandArgument(java.lang.String)" : {
    "getConf" : 1,
    "asList" : 1,
    "expandAsGlob" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:destroy()" : {
    "destroy" : 2
  },
  "org.apache.hadoop.fs.impl.FlagSet:<init>(java.lang.Class,java.lang.String,java.util.EnumSet)" : {
    "mapEnumNamesToValues" : 1,
    "requireNonNull" : 2,
    "noneOf" : 1,
    "copyOf" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:rollNewVersion(java.lang.String,byte[])" : {
    "getCipher" : 1,
    "innerSetKeyVersion" : 1,
    "getMetadata" : 1,
    "unlock" : 1,
    "addVersion" : 1,
    "lock" : 1,
    "getBitLength" : 2,
    "buildVersionName" : 1
  },
  "org.apache.hadoop.fs.FsShellPermissions$Chmod:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "debug" : 1,
    "getPermission" : 1,
    "applyNewPermission" : 1,
    "getMessage" : 1,
    "setPermission" : 1,
    "toShort" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:skipRetryCache(byte[],int)" : {
    "equals" : 1,
    "isRpcInvocation" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:toString(org.apache.commons.configuration2.Configuration)" : {
    "toByteArray" : 1,
    "copy" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "initialize" : 1,
    "getDefaultBlockSize" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.crypto.OpensslCipher:getInstance(java.lang.String)" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.io.compress.DefaultCodec:createInputStream(java.io.InputStream)" : {
    "createInputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.RSErasureDecoder:release()" : {
    "release" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,long)" : {
    "optLong" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "tuple" : 1,
    "name" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:<init>(org.apache.hadoop.fs.FSDataOutputStream,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getPos" : 1,
    "write" : 1
  },
  "org.apache.hadoop.service.ServiceStateModel:ensureCurrentState(org.apache.hadoop.service.Service$STATE)" : { },
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkMergeSlash(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI)" : {
    "set" : 1,
    "toString" : 1,
    "getConfigViewFsPrefix" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : { },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,float)" : {
    "mustLong" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:transitionToStandby(org.apache.commons.cli.CommandLine)" : {
    "createReqInfo" : 1,
    "println" : 1,
    "getConf" : 1,
    "getProxy" : 1,
    "transitionToStandby" : 1,
    "resolveTarget" : 1,
    "printUsage" : 1,
    "getArgs" : 1,
    "checkManualStateManagementOK" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeDir:addDir(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : {
    "isRoot" : 1,
    "containsKey" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,boolean,org.apache.hadoop.conf.Configuration)" : {
    "getFileStatus" : 1,
    "getMessage" : 1,
    "toString" : 1,
    "copy" : 2,
    "append" : 2,
    "isDirectory" : 1
  },
  "org.apache.hadoop.security.token.DtUtilShell$Get:validate()" : {
    "error" : 3,
    "indexOf" : 1,
    "isGenericUrl" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getAccessTime()" : {
    "getAccessTime" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy)" : {
    "getProxy" : 1
  },
  "org.apache.hadoop.util.SequentialNumber:skipTo(long)" : {
    "compareAndSet" : 1,
    "getCurrentValue" : 1
  },
  "org.apache.hadoop.fs.BufferedFSInputStream:skip(long)" : {
    "getPos" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getDelegationKey(int)" : {
    "get" : 1,
    "getKeyFromZK" : 1,
    "error" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO:link(java.io.File,java.io.File)" : {
    "createHardLink" : 1,
    "getAbsolutePath" : 2,
    "link0" : 1
  },
  "org.apache.hadoop.security.http.CrossOriginFilter:initializeAllowedMethods(javax.servlet.FilterConfig)" : {
    "split" : 1,
    "trim" : 1,
    "getInitParameter" : 1,
    "addAll" : 1,
    "getAllowedMethodsHeader" : 1,
    "asList" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.XMLUtils:newSecureTransformerFactory()" : {
    "setFeature" : 1,
    "setOptionalSecureTransformerAttributes" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.FSInputChecker:readAndDiscard(int)" : {
    "min" : 1,
    "readChecksumChunk" : 1
  },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:cancelToken(org.apache.hadoop.security.token.Token,java.lang.String)" : {
    "getTokenInfo" : 1,
    "getIdentifier" : 1,
    "cancelToken" : 1,
    "createTokenIdent" : 1
  },
  "org.apache.hadoop.conf.Configuration$IntegerRanges:<init>(java.lang.String)" : {
    "add" : 1,
    "hasMoreTokens" : 1,
    "split" : 1,
    "trim" : 1,
    "nextToken" : 1,
    "convertToInt" : 2
  },
  "org.apache.hadoop.util.WeakReferenceMap:remove(java.lang.Object)" : {
    "resolve" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell$DeleteCommand:validate()" : {
    "getOut" : 3,
    "println" : 3,
    "confirmPrompt" : 1,
    "printStackTrace" : 1,
    "getCredentialProvider" : 1,
    "getErr" : 1,
    "equals" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:stopSinks()" : {
    "getClass" : 1,
    "getKey" : 1,
    "getValue" : 1,
    "debug" : 1,
    "stop" : 1,
    "entrySet" : 1,
    "sink" : 1,
    "clear" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:setData(java.lang.String,java.lang.String,int)" : {
    "setData" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:close()" : {
    "clear" : 2,
    "close" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPConnectionPool:disconnect(com.jcraft.jsch.ChannelSftp)" : {
    "disconnect" : 2,
    "returnToPool" : 1,
    "isConnected" : 1,
    "stringifyException" : 1,
    "getSession" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.security.token.Token:hashCode()" : {
    "hashBytes" : 1
  },
  "org.apache.hadoop.conf.Configuration:get(java.lang.String,java.lang.String)" : {
    "getProperty" : 1,
    "substituteVars" : 1,
    "getProps" : 1,
    "get" : 1,
    "handleDeprecation" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "snapshot" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getMeanStatistic(java.lang.String)" : {
    "lookup" : 1
  },
  "org.apache.hadoop.net.SocketInputStream$Reader:<init>(java.nio.channels.ReadableByteChannel,long)" : { },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:reset()" : {
    "init" : 1,
    "limit" : 1,
    "checkStream" : 1,
    "end" : 1,
    "position" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:main(java.lang.String[])" : {
    "getNetworkBytesRead" : 1,
    "getCpuFrequency" : 1,
    "getCumulativeCpuTime" : 1,
    "getStorageBytesWritten" : 1,
    "getNumProcessors" : 1,
    "getStorageBytesRead" : 1,
    "getPhysicalMemorySize" : 1,
    "getVirtualMemorySize" : 1,
    "sleep" : 1,
    "println" : 12,
    "getAvailablePhysicalMemorySize" : 1,
    "getNetworkBytesWritten" : 1,
    "getAvailableVirtualMemorySize" : 1,
    "getCpuUsagePercentage" : 1
  },
  "org.apache.hadoop.util.functional.FutureIO:cancelAllFuturesAndAwaitCompletion(java.util.Collection,boolean,java.time.Duration)" : {
    "add" : 1,
    "cancel" : 1,
    "debug" : 1,
    "now" : 2,
    "toMillis" : 1,
    "awaitFuture" : 1
  },
  "org.apache.hadoop.fs.FileSystem:openFileWithOptions(org.apache.hadoop.fs.PathHandle,org.apache.hadoop.fs.impl.OpenFileParameters)" : {
    "rejectUnknownMandatoryKeys" : 1,
    "getBufferSize" : 1,
    "getMandatoryKeys" : 1,
    "complete" : 1,
    "completeExceptionally" : 1,
    "open" : 1
  },
  "org.apache.hadoop.util.InstrumentedWriteLock:unlock()" : {
    "monotonicNow" : 1,
    "getLock" : 1,
    "unlock" : 1,
    "check" : 1,
    "getWriteHoldCount" : 1,
    "getTimer" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:getUsed(org.apache.hadoop.fs.Path)" : {
    "getUsed" : 1
  },
  "org.apache.hadoop.util.Shell:execCommand(java.lang.String[])" : {
    "execCommand" : 1
  },
  "org.apache.hadoop.io.serializer.avro.AvroReflectSerialization:accept(java.lang.Class)" : {
    "contains" : 1,
    "getPackage" : 2,
    "getName" : 1,
    "getPackages" : 1,
    "isAssignableFrom" : 1
  },
  "org.apache.hadoop.ipc.Server$RpcCall:getRemotePort()" : {
    "getRemotePort" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:recomputeScheduleCache()" : {
    "getValue" : 1,
    "getKey" : 1,
    "set" : 1,
    "entrySet" : 1,
    "computePriorityLevel" : 1,
    "get" : 2,
    "unmodifiableMap" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.WritableComparator:compare(java.lang.Object,java.lang.Object)" : {
    "compare" : 1
  },
  "org.apache.hadoop.security.KDiag:<init>()" : { },
  "org.apache.hadoop.io.file.tfile.TFile$Writer$KeyRegister:close()" : {
    "compare" : 1,
    "getComparator" : 1,
    "size" : 2,
    "getBuffer" : 2,
    "writeVInt" : 1,
    "getFirstKey" : 1,
    "getRecordCount" : 1,
    "setFirstKey" : 1,
    "isSorted" : 1,
    "write" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:checkCreateRSRawEncoder()" : {
    "getConf" : 1,
    "createRawEncoder" : 1,
    "getOptions" : 1
  },
  "org.apache.hadoop.io.SetFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration)" : {
    "comparator" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:formatTokenId(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "warn" : 1,
    "getSequenceNumber" : 1
  },
  "org.apache.hadoop.conf.Configuration:setBooleanIfUnset(java.lang.String,boolean)" : {
    "setIfUnset" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocketWatcher:sendCallback(java.lang.String,java.util.TreeMap,org.apache.hadoop.net.unix.DomainSocketWatcher$FdSet,int)" : {
    "trace" : 4,
    "checkNotNull" : 1,
    "getDomainSocket" : 1,
    "unreferenceCheckClosed" : 1,
    "get" : 1,
    "checkArgument" : 1,
    "isTraceEnabled" : 4,
    "handle" : 1,
    "getHandler" : 1,
    "cleanupWithLogger" : 1,
    "remove" : 2
  },
  "org.apache.hadoop.util.bloom.Key:<init>(byte[],double)" : {
    "set" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecRegistry:getCoderByName(java.lang.String,java.lang.String)" : {
    "getCoderName" : 1,
    "getCoders" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:renewDelegationToken(org.apache.hadoop.security.token.Token)" : {
    "doOp" : 1,
    "renewDelegationToken" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.metrics2.impl.SinkQueue:consume(org.apache.hadoop.metrics2.impl.SinkQueue$Consumer)" : {
    "_dequeue" : 1,
    "clearConsumerLock" : 1,
    "consume" : 1,
    "waitForData" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.MultiSchemeDelegationTokenAuthenticationHandler:authenticate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : {
    "matchAuthScheme" : 1,
    "addHeader" : 1,
    "authenticate" : 1,
    "isManagementOperation" : 1,
    "setStatus" : 1,
    "getHeader" : 1
  },
  "org.apache.hadoop.fs.FileSystem:newInstance(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getDefaultUri" : 1,
    "getScheme" : 2,
    "equals" : 1,
    "getUnique" : 1,
    "newInstance" : 2,
    "getAuthority" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:acquire()" : {
    "acquireHelper" : 1
  },
  "org.apache.hadoop.ipc.Server:getAuxiliaryPortEstablishedQOP()" : {
    "getEstablishedQOP" : 1,
    "isOnAuxiliaryPort" : 1,
    "get" : 1
  },
  "org.apache.hadoop.util.VersionInfo:_getBuildVersion()" : {
    "_getSrcChecksum" : 1,
    "_getVersion" : 1,
    "_getUser" : 1,
    "_getRevision" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:createLogFile(org.apache.hadoop.fs.Path)" : {
    "name" : 1,
    "create" : 1,
    "exists" : 1,
    "toString" : 1,
    "getNextIdToTry" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureEncoder:getOutputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getParityBlocks" : 1
  },
  "org.apache.hadoop.conf.Configuration:dumpDeprecatedKeys()" : {
    "getKey" : 1,
    "getValue" : 1,
    "println" : 1,
    "entrySet" : 1,
    "get" : 1,
    "toString" : 1,
    "getDeprecatedKeyMap" : 1,
    "append" : 2
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:delete(org.apache.hadoop.fs.Path)" : {
    "delete" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:updateMapInternal(org.apache.hadoop.thirdparty.com.google.common.collect.BiMap,java.lang.String,java.lang.String,java.lang.String,java.util.Map)" : {
    "inverse" : 1,
    "reportDuplicateEntry" : 2,
    "debug" : 2,
    "containsKey" : 1,
    "readLine" : 1,
    "error" : 2,
    "getInputStream" : 1,
    "put" : 1,
    "containsValue" : 1,
    "parseId" : 1,
    "split" : 1,
    "size" : 1,
    "equals" : 1,
    "get" : 3,
    "getRuntime" : 1,
    "close" : 1,
    "exec" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:relative()" : {
    "throwIfInvalidBuffer" : 1,
    "position" : 1
  },
  "org.apache.hadoop.crypto.CipherSuite:convert(java.lang.String)" : {
    "getName" : 1,
    "equals" : 1,
    "values" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:prepareMetaBlock(java.lang.String)" : {
    "prepareMetaBlock" : 1,
    "getDefaultCompressionAlgorithm" : 1
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean,int,org.apache.hadoop.util.Progressable)" : {
    "getDefaultReplication" : 1,
    "create" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.ipc.Server$Listener:doAccept(java.nio.channels.SelectionKey)" : {
    "getAndIncrement" : 1,
    "isOpen" : 1,
    "getReader" : 1,
    "setTcpNoDelay" : 1,
    "channel" : 1,
    "addConnection" : 1,
    "attach" : 1,
    "setKeepAlive" : 1,
    "socket" : 2,
    "cleanupWithLogger" : 1,
    "accept" : 1,
    "register" : 1,
    "configureBlocking" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getGroups()" : {
    "getShortUserName" : 2,
    "ensureInitialized" : 1,
    "emptyList" : 1,
    "debug" : 1,
    "getGroups" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeInt:<init>(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "set" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:<init>(java.io.InputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[])" : {
    "getConf" : 1,
    "getBufferSize" : 1
  },
  "org.apache.hadoop.util.LightWeightResizableGSet:get(java.lang.Object)" : {
    "get" : 1
  },
  "org.apache.hadoop.metrics2.util.MetricsCache:update(org.apache.hadoop.metrics2.MetricsRecord,boolean)" : {
    "get" : 2,
    "name" : 3,
    "metrics" : 1,
    "value" : 1,
    "put" : 4,
    "tags" : 2
  },
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:updateTime(org.apache.hadoop.fs.shell.PathData)" : {
    "toPattern" : 1,
    "getTime" : 1,
    "currentTimeMillis" : 1,
    "setTimes" : 2,
    "parse" : 1
  },
  "org.apache.hadoop.fs.shell.Command:runAll()" : {
    "displayError" : 1,
    "getConf" : 1,
    "run" : 1,
    "expandAsGlob" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:close()" : {
    "close" : 2
  },
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : {
    "getInt" : 1,
    "close" : 2,
    "open" : 2
  },
  "org.apache.hadoop.io.compress.GzipCodec:getDecompressorType()" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.fs.FsShell:printHelp(java.io.PrintStream,java.lang.String)" : {
    "printInfo" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:<init>(java.io.InputStream)" : { },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:innerPutPart(org.apache.hadoop.fs.Path,java.io.InputStream,int,org.apache.hadoop.fs.UploadHandle,long)" : {
    "checkUploadId" : 1,
    "checksumOpt" : 1,
    "getBufferSize" : 1,
    "permission" : 1,
    "mergePaths" : 2,
    "getBytes" : 1,
    "blockSize" : 1,
    "cleanupWithLogger" : 1,
    "createFile" : 1,
    "build" : 1,
    "toByteArray" : 1,
    "toString" : 1,
    "from" : 1,
    "copy" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:innerSetCredential(java.lang.String,char[])" : {
    "unlock" : 1,
    "setKeyEntry" : 1,
    "getAlgorithm" : 1,
    "lock" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:isNativeBzip2Loaded(org.apache.hadoop.conf.Configuration)" : {
    "warn" : 1,
    "equals" : 2,
    "get" : 1,
    "initSymbols" : 2,
    "info" : 2,
    "isNativeCodeLoaded" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:readFileToSet(java.lang.String,java.lang.String,java.util.Set)" : {
    "readFileToSetWithFileInputStream" : 1,
    "toPath" : 1,
    "newInputStream" : 1
  },
  "org.apache.hadoop.security.token.DtFileOperations:doFormattedWrite(java.io.File,java.lang.String,org.apache.hadoop.security.Credentials,org.apache.hadoop.conf.Configuration)" : {
    "equals" : 1,
    "writeTokenStorageFile" : 1,
    "fileToPath" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:deleteWithRetries(java.lang.String,int)" : {
    "zkDoWithRetries" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceShutdownHook:unregister()" : {
    "get" : 1,
    "removeShutdownHook" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.shell.Delete:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 4
  },
  "org.apache.hadoop.io.compress.lz4.Lz4Decompressor:decompress(byte[],int,int)" : {
    "min" : 2,
    "rewind" : 1,
    "get" : 2,
    "limit" : 2,
    "decompressDirectBuf" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.util.DataChecksum:calculateChunkedSums(byte[],int,int,byte[],int)" : {
    "getValue" : 1,
    "isAvailable" : 1,
    "min" : 1,
    "update" : 1,
    "reset" : 1,
    "calculateChunkedSumsByteArray" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:write(byte[],int,int)" : {
    "internalReset" : 1,
    "write" : 1
  },
  "org.apache.hadoop.fs.FileContext:clearStatistics()" : {
    "clearStatistics" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection:shouldAuthenticateOverKrb()" : {
    "hasKerberosCredentials" : 1,
    "getCurrentUser" : 1,
    "equals" : 2,
    "getRealUser" : 1,
    "getLoginUser" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:concat(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path[])" : {
    "create" : 1,
    "copyBytes" : 1,
    "open" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient$WrappedInputStream:read()" : {
    "read" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState)" : {
    "resetOutputBuffers" : 1,
    "get" : 2,
    "limit" : 1,
    "position" : 2,
    "put" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:readProcMemInfoFile(boolean)" : {
    "warn" : 4,
    "safeParseLong" : 2,
    "newInputStream" : 1,
    "parseLong" : 7,
    "find" : 1,
    "equals" : 9,
    "get" : 1,
    "matcher" : 1,
    "readLine" : 2,
    "close" : 2,
    "group" : 18
  },
  "org.apache.hadoop.fs.VectoredReadUtils:readRangeFrom(org.apache.hadoop.fs.PositionedReadable,org.apache.hadoop.fs.FileRange,java.util.function.IntFunction)" : {
    "debug" : 2,
    "apply" : 1,
    "readFully" : 1,
    "readNonByteBufferPositionedReadable" : 1,
    "getOffset" : 1,
    "getLength" : 1,
    "validateRangeRequest" : 1,
    "complete" : 1,
    "completeExceptionally" : 1,
    "flip" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$FilteringRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator,org.apache.hadoop.util.functional.FunctionRaisingIOE)" : {
    "requireNonNull" : 1
  },
  "org.apache.hadoop.fs.impl.FutureIOSupport:propagateOptions(org.apache.hadoop.fs.FSBuilder,org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "propagateOptions" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:verifyChangedServiceState(org.apache.hadoop.ha.HAServiceProtocol$HAServiceState)" : {
    "toNanos" : 1,
    "recheckElectability" : 1,
    "debug" : 1,
    "nanoTime" : 1,
    "error" : 1,
    "quitElection" : 2
  },
  "org.apache.hadoop.fs.shell.Count:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:open(org.apache.hadoop.fs.Path,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : {
    "createDataFileReader" : 1,
    "file" : 1,
    "getPosition" : 1,
    "getKeyClass" : 1,
    "asSubclass" : 1,
    "get" : 1,
    "prependOptions" : 1
  },
  "org.apache.hadoop.fs.BatchedRemoteIterator:next()" : {
    "makeRequestIfNeeded" : 1,
    "elementToPrevKey" : 1,
    "get" : 1
  },
  "org.apache.hadoop.io.LongWritable:<init>(long)" : {
    "set" : 1
  },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:readFields(java.io.DataInput)" : {
    "add" : 2,
    "readFields" : 3,
    "createVector" : 1,
    "readDouble" : 1,
    "readInt" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.AbstractNativeRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.log.LogThrottlingHelper:record(double[])" : {
    "monotonicNow" : 1,
    "record" : 1
  },
  "org.apache.hadoop.security.KDiag:printDefaultRealm()" : {
    "warn" : 2,
    "println" : 1,
    "contains" : 1,
    "debug" : 1,
    "getDefaultRealm" : 1,
    "stringifyException" : 1,
    "toString" : 2,
    "error" : 1,
    "getCause" : 2
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:serviceMain(java.util.List)" : {
    "exitWithUsageMessage" : 1,
    "launchServiceAndExit" : 1,
    "get" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:complete()" : {
    "bsGetInt" : 1,
    "reportCRCError" : 1
  },
  "org.apache.hadoop.security.http.RestCsrfPreventionFilter:doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" : {
    "handleHttpInteraction" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.ipc.RPC:waitForProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,int,long)" : {
    "getProxy" : 1,
    "waitForProtocolProxy" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "satisfyStoragePolicy" : 1
  },
  "org.apache.hadoop.fs.ftp.FtpFs:getServerDefaults()" : {
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.ByteBufferUtil:streamHasByteBufferRead(java.io.InputStream)" : {
    "getWrappedStream" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:loadPermissionInfoByNonNativeIO()" : {
    "execCommand" : 1,
    "valueOf" : 1,
    "toUri" : 1,
    "removeDomain" : 2,
    "length" : 1,
    "getGetPermissionCommand" : 1,
    "stringifyException" : 1,
    "getExitCode" : 1,
    "substring" : 1,
    "setOwner" : 2,
    "setGroup" : 2,
    "nextToken" : 4,
    "getPath" : 1,
    "setPermission" : 2
  },
  "org.apache.hadoop.fs.FilterFs:listCorruptFileBlocks(org.apache.hadoop.fs.Path)" : {
    "listCorruptFileBlocks" : 1
  },
  "org.apache.hadoop.net.SocketOutputStream:<init>(java.nio.channels.WritableByteChannel,long)" : {
    "checkChannelValidity" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:setInput(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "limit" : 1,
    "position" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:poll()" : {
    "removeNextElement" : 1,
    "tryAcquire" : 1
  },
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:decompressDirect(java.nio.ByteBuffer,java.nio.ByteBuffer)" : {
    "slice" : 2,
    "limit" : 1,
    "position" : 4,
    "decompressDirectBuf" : 1,
    "remaining" : 2
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:unregisterSource(java.lang.String)" : {
    "stop" : 1,
    "containsKey" : 3,
    "get" : 1,
    "removeSourceName" : 1,
    "remove" : 3
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Put:processOptions(java.util.LinkedList)" : {
    "setLazyPersist" : 1,
    "setOverwrite" : 1,
    "getRemoteDestination" : 1,
    "setPreserve" : 1,
    "getOpt" : 4,
    "getOptValue" : 2,
    "addOptionWithValue" : 2,
    "setThreadCount" : 1,
    "parse" : 1,
    "setRecursive" : 1,
    "setDirectWrite" : 1,
    "setThreadPoolQueueSize" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.StatisticDurationTracker:toString()" : {
    "toString" : 1
  },
  "org.apache.hadoop.fs.shell.find.BaseExpression:addChildren(java.util.Deque,int)" : {
    "pop" : 1,
    "addChild" : 1
  },
  "org.apache.hadoop.fs.FsUrlConnection:getInputStream()" : {
    "connect" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String)" : {
    "lookupStat" : 1
  },
  "org.apache.hadoop.ha.NodeFencer:parseMethod(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "createFenceMethod" : 2,
    "matcher" : 2,
    "matches" : 2,
    "group" : 3
  },
  "org.apache.hadoop.conf.ReconfigurableBase:setReconfigurationUtil(org.apache.hadoop.conf.ReconfigurationUtil)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:generateEncryptedKey(java.lang.String)" : {
    "getNext" : 1,
    "getCause" : 2
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:write(byte[],int,int)" : {
    "arraycopy" : 1,
    "writeBufData" : 1
  },
  "org.apache.hadoop.util.StringUtils:join(char,java.lang.String[])" : {
    "join" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:instance()" : {
    "getImpl" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getFS()" : {
    "getFS" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncodingStep:<init>(org.apache.hadoop.io.erasurecode.ECBlock[],org.apache.hadoop.io.erasurecode.ECBlock[],org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder,org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder)" : {
    "initPiggyBackIndexWithoutPBVec" : 1,
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:endBlock()" : {
    "reportCRCError" : 1,
    "getFinalCRC" : 1
  },
  "org.apache.hadoop.util.Progress:toString(java.lang.StringBuilder)" : {
    "phase" : 1,
    "size" : 2,
    "toString" : 1,
    "append" : 2
  },
  "org.apache.hadoop.util.HttpExceptionUtils:createJerseyExceptionResponse(javax.ws.rs.core.Response$Status,java.lang.Throwable)" : {
    "getClass" : 2,
    "getName" : 1,
    "build" : 1,
    "singletonMap" : 1,
    "getOneLineMessage" : 1,
    "getSimpleName" : 1,
    "type" : 1,
    "entity" : 1,
    "put" : 3,
    "status" : 1
  },
  "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec:createEncryptor()" : {
    "getCipherSuite" : 1
  },
  "org.apache.hadoop.fs.FileStatus:readFields(java.io.DataInput)" : {
    "getModificationTime" : 1,
    "parseFrom" : 1,
    "convert" : 1,
    "getOwner" : 1,
    "setOwner" : 1,
    "hasAcl" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "readFully" : 1,
    "isEncrypted" : 1,
    "getLen" : 1,
    "getPath" : 1,
    "setPermission" : 1,
    "isSnapshotEnabled" : 1,
    "readInt" : 1,
    "getPermission" : 1,
    "setSymlink" : 1,
    "setPath" : 1,
    "getAccessTime" : 1,
    "getSymlink" : 1,
    "setGroup" : 1,
    "isErasureCoded" : 1,
    "getGroup" : 1,
    "attributes" : 1,
    "isSymlink" : 2,
    "isDirectory" : 2
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicLongMinimum(java.lang.String,java.util.concurrent.atomic.AtomicLong)" : {
    "get" : 1,
    "withLongFunctionMinimum" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_create(java.lang.Object)" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks:validateWriteArgs(byte[],int,int)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.http.lib.StaticUserWebFilter:initFilter(org.apache.hadoop.http.FilterContainer,org.apache.hadoop.conf.Configuration)" : {
    "getName" : 1,
    "singletonMap" : 1,
    "addFilter" : 1,
    "getUsernameFromConf" : 1
  },
  "org.apache.hadoop.ipc.WritableRpcEngine$Invocation:write(java.io.DataOutput)" : {
    "writeInt" : 2,
    "writeLong" : 2,
    "writeObject" : 1,
    "writeString" : 2
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor$ZStandardDirectDecompressor:finished()" : {
    "finished" : 1
  },
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:toString()" : {
    "getAlgorithmName" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec$GzipZlibCompressor:<init>(org.apache.hadoop.conf.Configuration)" : {
    "getCompressionStrategy" : 1,
    "getCompressionLevel" : 1
  },
  "org.apache.hadoop.fs.ftp.FtpFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:createKey(java.lang.String,org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "doOp" : 1,
    "createKey" : 1,
    "nextIdx" : 1,
    "getCause" : 3
  },
  "org.apache.hadoop.fs.Path:isUriPathAbsolute()" : {
    "getPath" : 2,
    "startsWith" : 1,
    "startPositionWithoutWindowsDrive" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_minimums(java.io.Serializable)" : {
    "invoke" : 1
  },
  "org.apache.hadoop.conf.Configuration:addDeprecation(java.lang.String,java.lang.String,java.lang.String)" : {
    "addDeprecation" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:<init>(java.lang.String,java.lang.String)" : {
    "newArrayList" : 1
  },
  "org.apache.hadoop.net.NetUtils:normalizeHostNames(java.util.Collection)" : {
    "add" : 1,
    "normalizeHostName" : 1,
    "size" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:fileSystem_openFile(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.String,org.apache.hadoop.fs.FileStatus,java.lang.Long,java.util.Map)" : {
    "extractIOEs" : 1,
    "invoke" : 1,
    "checkAvailable" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:atEnd()" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket$DomainInputStream:read(byte[],int,int)" : {
    "reference" : 1,
    "readArray0" : 1,
    "unreference" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:close()" : {
    "pop" : 1,
    "cleanup" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:getExcludedHosts()" : {
    "get" : 1,
    "getExcludedHosts" : 1
  },
  "org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB:close()" : {
    "stopProxy" : 1
  },
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:remove(org.apache.hadoop.net.Node)" : {
    "newInnerNode" : 1,
    "getNetworkLocation" : 3,
    "debug" : 1,
    "unlock" : 1,
    "writeLock" : 2,
    "getPath" : 2,
    "lock" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1,
    "getNode" : 2,
    "remove" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:obtainDelegationTokenAuthenticator(org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator,org.apache.hadoop.security.authentication.client.ConnectionConfigurator)" : {
    "setConnectionConfigurator" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:listXAttrs(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.FileStatus:getSymlink()" : {
    "isSymlink" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStream:hasCapability(java.lang.String)" : {
    "hasCapability" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:freeBuffers()" : {
    "cleanBufferPool" : 1,
    "freeDB" : 2
  },
  "org.apache.hadoop.fs.Globber:listStatus(org.apache.hadoop.fs.Path)" : {
    "debug" : 1,
    "util" : 1,
    "listStatus" : 2
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:convert(org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : {
    "setReqSource" : 1,
    "build" : 1,
    "getSource" : 2,
    "newBuilder" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory:releaseBuffer(java.nio.ByteBuffer)" : {
    "debug" : 1,
    "returnBuffer" : 1,
    "decrementAndGet" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProvider:getCurrentKey(java.lang.String)" : {
    "getKeyVersion" : 1,
    "getMetadata" : 1,
    "getVersions" : 1,
    "buildVersionName" : 1
  },
  "org.apache.hadoop.fs.DF:getPercentUsed()" : {
    "getAvailable" : 1,
    "getCapacity" : 1
  },
  "org.apache.hadoop.io.Text:readWithKnownLength(java.io.DataInput,int)" : {
    "readFully" : 1,
    "ensureCapacity" : 1
  },
  "org.apache.hadoop.fs.FileSystem:globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "glob" : 1
  },
  "org.apache.hadoop.conf.ReconfigurationException:<init>(java.lang.String,java.lang.String,java.lang.String)" : {
    "constructMessage" : 1
  },
  "org.apache.hadoop.conf.Configuration:addDeprecation(java.lang.String,java.lang.String[],java.lang.String)" : {
    "addDeprecations" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:addCredentials(org.apache.hadoop.security.Credentials)" : {
    "addAll" : 1,
    "getCredentialsInternal" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:isExpired()" : {
    "monotonicNow" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "add" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:setDataWithRetries(java.lang.String,byte[],int)" : {
    "setData" : 1,
    "zkDoWithRetries" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "setXAttr" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:createSecretKey(byte[])" : {
    "createSecretKey" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:getGroups(java.lang.String)" : {
    "getNetgroups" : 1,
    "getGroups" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.EncodingState:checkParameters(java.lang.Object[],java.lang.Object[])" : {
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:processConnectionContext(org.apache.hadoop.ipc.RpcWritable$Buffer)" : {
    "getShortUserName" : 1,
    "createProxyUser" : 1,
    "setAuthenticationMethod" : 1,
    "getDefaultInstance" : 1,
    "incrUserConnections" : 1,
    "authorizeConnection" : 1,
    "equals" : 1,
    "getUserName" : 3,
    "getUgi" : 1,
    "getMessage" : 1,
    "getProtocol" : 1,
    "hasProtocol" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getBufferSize()" : {
    "getBufferSize" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:close()" : {
    "sleep" : 1,
    "getReferenceCount" : 1,
    "currentThread" : 1,
    "shutdown0" : 1,
    "interrupt" : 1,
    "error" : 1,
    "setClosed" : 1,
    "close0" : 1
  },
  "org.apache.hadoop.fs.FileUtil:setReadable(java.io.File,boolean)" : {
    "setReadable" : 1,
    "getCanonicalPath" : 1,
    "chmod" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : {
    "rejectUnknownMandatoryKeys" : 1,
    "emptySet" : 1,
    "eval" : 1,
    "getBufferSize" : 1,
    "getMandatoryKeys" : 1,
    "open" : 1
  },
  "org.apache.hadoop.conf.StorageUnit$5:getDefault(double)" : { },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:getServiceStatus(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ha.proto.HAServiceProtocolProtos$GetServiceStatusRequestProto)" : {
    "setReadyToBecomeActive" : 1,
    "getServiceStatus" : 1,
    "setNotReadyReason" : 1,
    "getState" : 1,
    "getNotReadyReason" : 1,
    "build" : 1,
    "setState" : 1,
    "isReadyToBecomeActive" : 2,
    "newBuilder" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor$ZlibDirectDecompressor:<init>()" : { },
  "org.apache.hadoop.security.SecurityUtil:doAsCurrentUser(java.security.PrivilegedExceptionAction)" : {
    "getCurrentUser" : 1,
    "doAsUser" : 1
  },
  "org.apache.hadoop.fs.FilterFs:createMultipartUploader(org.apache.hadoop.fs.Path)" : {
    "createMultipartUploader" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:makeQualified(org.apache.hadoop.fs.Path)" : {
    "getScheme" : 1,
    "toUri" : 1,
    "getPath" : 1,
    "isAbsolute" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:offerQueues(int,org.apache.hadoop.ipc.Schedulable,boolean)" : {
    "getAndIncrement" : 1,
    "size" : 1,
    "get" : 1,
    "offerQueue" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getFileLinkStatus" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_reset()" : {
    "getCurrentIOStatisticsContext" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:removeTokenForOwnerStats(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : {
    "containsKey" : 1,
    "get" : 2,
    "getTokenRealOwner" : 1,
    "remove" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.shell.Display$Cat:getInputStream(org.apache.hadoop.fs.shell.PathData)" : {
    "openForSequentialIO" : 1
  },
  "org.apache.hadoop.util.LineReader:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$ConcurrentQueue:checkEmpty()" : {
    "monotonicNow" : 1,
    "set" : 1,
    "isEmpty" : 1
  },
  "org.apache.hadoop.fs.impl.CombinedFileRange:toString()" : {
    "size" : 1,
    "format" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ha.SshFenceByTcpPort:execCommand(com.jcraft.jsch.Session,java.lang.String)" : {
    "debug" : 1,
    "cleanup" : 1,
    "setInputStream" : 1,
    "start" : 2,
    "getExitStatus" : 1,
    "openChannel" : 1,
    "join" : 2,
    "getErrStream" : 1,
    "getInputStream" : 1,
    "setCommand" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.shell.find.Name:apply(org.apache.hadoop.fs.shell.PathData,int)" : {
    "getName" : 1,
    "toLowerCase" : 1,
    "getPath" : 1,
    "matches" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : {
    "comparator" : 1,
    "valueClass" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.fs.FileSystemStorageStatistics:getLongStatistics()" : {
    "getData" : 1
  },
  "org.apache.hadoop.util.LightWeightCache:iterator()" : {
    "next" : 1,
    "iterator" : 1,
    "hasNext" : 1
  },
  "org.apache.hadoop.security.SaslInputStream:read()" : {
    "read" : 1,
    "readMoreData" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:getRemaining()" : {
    "getRemaining" : 1,
    "checkStream" : 1
  },
  "org.apache.hadoop.crypto.JceCtrCryptoCodec$JceCtrCipher:decrypt(java.nio.ByteBuffer,java.nio.ByteBuffer)" : {
    "process" : 1
  },
  "org.apache.hadoop.util.InstrumentedWriteLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.ReentrantReadWriteLock,long,long)" : { },
  "org.apache.hadoop.fs.FileContext:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "getXAttrs" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:getMemlockLimit()" : {
    "getMemlockLimit" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : { },
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:invokeMethod()" : {
    "get" : 1,
    "setCallIdAndRetryCount" : 1,
    "invokeMethod" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:open(org.apache.hadoop.fs.Path,int)" : {
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.security.KDiag:validateKeyLength()" : {
    "println" : 1,
    "verify" : 1,
    "getMaxAllowedKeyLength" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.util.HHUtil:getPiggyBackForDecode(java.nio.ByteBuffer[][],java.nio.ByteBuffer[][],int,int,int,int)" : {
    "add" : 4,
    "allocateByteBuffer" : 1,
    "findFirstValidInput" : 1,
    "get" : 5,
    "position" : 5,
    "isDirect" : 1,
    "put" : 2,
    "remaining" : 1
  },
  "org.apache.hadoop.util.ClassUtil:findContainingJar(java.lang.Class)" : {
    "getName" : 1,
    "findContainingResource" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:processWaitTimeAndRetryInfo()" : {
    "sleep" : 1,
    "processRetryInfo" : 1,
    "getWaitTime" : 1,
    "currentThread" : 1,
    "trace" : 1,
    "monotonicNow" : 1,
    "debug" : 1,
    "initCause" : 1,
    "interrupt" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.service.CompositeService:serviceStop()" : {
    "getName" : 1,
    "debug" : 1,
    "stop" : 1,
    "size" : 1,
    "serviceStop" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:makeQualified(org.apache.hadoop.fs.Path)" : {
    "toUri" : 1,
    "makeQualified" : 1,
    "getSchemeSpecificPart" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:gauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : {
    "add" : 1,
    "newAttrInfo" : 1
  },
  "org.apache.hadoop.util.ShutdownHookManager$HookEntry:<init>(java.lang.Runnable,int)" : {
    "getShutdownTimeout" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:loadAndReturnPerm(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "renameOrFail" : 1,
    "debug" : 1,
    "loadFromPath" : 1,
    "isBadorWrongPassword" : 1,
    "format" : 1,
    "isDebugEnabled" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.Path:makeQualified(org.apache.hadoop.fs.FileSystem)" : {
    "getWorkingDirectory" : 1,
    "makeQualified" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.fs.FileContext:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "access" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem$HarMetaData:addPartFileStatuses(org.apache.hadoop.fs.Path)" : {
    "getPath" : 1,
    "listStatus" : 1,
    "getPathInHar" : 1,
    "put" : 1
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int)" : {
    "getSocketFactory" : 1,
    "createSocket" : 1,
    "configureSocket" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:useStatIfAvailable()" : {
    "isAvailable" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:seekToNewSource(long)" : {
    "getClass" : 1,
    "resetStreamOffset" : 1,
    "checkStream" : 1,
    "seekToNewSource" : 1,
    "getCanonicalName" : 1,
    "checkArgument" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:create()" : {
    "instance" : 1,
    "register" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "getShortUserName" : 2,
    "isLink" : 1,
    "getPermission" : 1,
    "toUri" : 1,
    "getModificationTime" : 1,
    "getAccessTime" : 1,
    "getOwner" : 1,
    "getMyFs" : 1,
    "substring" : 1,
    "getTargetFileSystem" : 2,
    "getChildren" : 1,
    "getLink" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "getPrimaryGroupName" : 2,
    "getGroup" : 1,
    "getLen" : 1,
    "makeQualified" : 3,
    "get" : 1,
    "getFileStatus" : 1,
    "getPath" : 1,
    "toString" : 1,
    "getUri" : 1,
    "getTargetLink" : 2
  },
  "org.apache.hadoop.io.compress.SnappyCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "hasPathCapability" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:stopMBeans()" : {
    "unregister" : 1
  },
  "org.apache.hadoop.fs.FsShell:main(java.lang.String[])" : {
    "exit" : 1,
    "newShellInstance" : 1,
    "run" : 1,
    "setQuietMode" : 1,
    "close" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : {
    "setWorkingDirectory" : 1
  },
  "org.apache.hadoop.util.hash.Hash:getHashType(org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "parseHashType" : 1
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:getFailoverCount()" : {
    "getFailoverCount" : 1
  },
  "org.apache.hadoop.security.alias.KeyStoreProvider:keystoreExists()" : {
    "getPath" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.fs.FileUtil:rename(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : {
    "rename" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:getDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,java.lang.String)" : {
    "getDelegationToken" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:createTracker(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String)" : {
    "trackDuration" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeLong:decr()" : {
    "decr" : 1
  },
  "org.apache.hadoop.fs.PathIOException:getPath()" : { },
  "org.apache.hadoop.util.StringUtils:byteToHexString(byte[],int,int)" : {
    "format" : 1,
    "toString" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.shell.FsUsage$Df:setUsagesTable(org.apache.hadoop.fs.shell.FsUsage$TableBuilder)" : { },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:rollLogDir()" : {
    "getHostName" : 1,
    "mkdirs" : 1,
    "createLogFile" : 1,
    "createOrAppendLogFile" : 1,
    "getLocalHost" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.EmptyIOStatisticsContextImpl:getIOStatistics()" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.fs.shell.AclCommands$GetfaclCommand:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "printAclEntriesForSingleScope" : 2,
    "getAclFromPermAndEntries" : 1,
    "getStickyBit" : 1,
    "getPermission" : 1,
    "getAclStatus" : 1,
    "getDefaultEntries" : 1,
    "getOwner" : 1,
    "emptyList" : 1,
    "println" : 5,
    "hasAcl" : 1,
    "getAccessEntries" : 1,
    "getEntries" : 1,
    "getOtherAction" : 1,
    "getGroup" : 1,
    "implies" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:readOnlyMountTable(java.lang.String,org.apache.hadoop.fs.Path)" : {
    "readOnlyMountTable" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:requireIOStatisticsSnapshot(java.io.Serializable)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:getUsersForNetgroup(java.lang.String)" : {
    "add" : 1,
    "split" : 1,
    "replaceFirst" : 4,
    "replaceAll" : 1,
    "execShellGetUserForNetgroup" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfigException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.security.SaslPlainServer:getAuthorizationID()" : {
    "throwIfNotComplete" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient:getInputStream(java.io.InputStream)" : {
    "useWrap" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault$Emptier:run()" : {
    "getTrashRoots" : 1,
    "sleep" : 1,
    "warn" : 3,
    "ceiling" : 1,
    "deleteCheckpoint" : 1,
    "createCheckpoint" : 1,
    "now" : 2,
    "getPath" : 3,
    "close" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:tryLoadIncompleteFlush(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "debug" : 1,
    "loadAndReturnPerm" : 2,
    "load" : 1,
    "exists" : 2
  },
  "org.apache.hadoop.conf.ConfigurationWithLogging:getInt(java.lang.String,int)" : {
    "getInt" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getUnixGroups(java.lang.String)" : {
    "handleExecutorTimeout" : 2,
    "debug" : 1,
    "resolvePartialGroupNames" : 1,
    "createGroupExecutor" : 1,
    "getMessage" : 1,
    "resolveFullGroupNames" : 1,
    "execute" : 1,
    "getOutput" : 2
  },
  "org.apache.hadoop.io.retry.RetryInvocationHandler:newCall(java.lang.reflect.Method,java.lang.Object[],boolean,int)" : {
    "isAsynchronousMode" : 1,
    "newAsyncCall" : 1
  },
  "org.apache.hadoop.util.StringUtils:humanReadableInt(long)" : {
    "long2String" : 1
  },
  "org.apache.hadoop.io.compress.CodecPool:getCompressor(org.apache.hadoop.io.compress.CompressionCodec)" : {
    "getCompressor" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "getParent" : 1,
    "getScheme" : 1,
    "mkdirs" : 1,
    "equals" : 1,
    "toUri" : 1,
    "symLink" : 1,
    "toString" : 3,
    "areSymlinksEnabled" : 1,
    "makeAbsolute" : 1
  },
  "org.apache.hadoop.io.UTF8:toString()" : {
    "readChars" : 1,
    "reset" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.shell.find.ExpressionFactory:getExpression(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "createExpression" : 1
  },
  "org.apache.hadoop.security.authorize.AuthorizationException:<init>(java.lang.Throwable)" : { },
  "org.apache.hadoop.ipc.Server$Call:<init>()" : { },
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,boolean,org.apache.hadoop.conf.Configuration)" : {
    "getFileStatus" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:isFromTicket()" : {
    "hasKerberosCredentials" : 1,
    "getKeytab" : 1,
    "isHadoopLogin" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination$TargetFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : { },
  "org.apache.hadoop.fs.FileSystem:getContentSummary(org.apache.hadoop.fs.Path)" : {
    "isFile" : 1,
    "directoryCount" : 3,
    "getDirectoryCount" : 1,
    "getContentSummary" : 1,
    "length" : 3,
    "listStatus" : 1,
    "spaceConsumed" : 3,
    "fileCount" : 3,
    "build" : 3,
    "getFileCount" : 1,
    "getLen" : 2,
    "getPath" : 1,
    "getFileStatus" : 1,
    "getLength" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:publishAsStorageStatistics(java.lang.String,java.lang.String,org.apache.hadoop.fs.statistics.IOStatistics)" : { },
  "org.apache.hadoop.fs.FileUtil:unTarUsingJava(java.io.InputStream,java.io.File,boolean)" : {
    "unpackEntries" : 1,
    "cleanupWithLogger" : 1,
    "getNextTarEntry" : 2
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:addCounter(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "add" : 1
  },
  "org.apache.hadoop.ipc.RetryCache$CacheEntry:hashCode()" : {
    "hashCode" : 2
  },
  "org.apache.hadoop.util.RunJar:unJar(java.io.File,java.io.File,java.util.regex.Pattern)" : {
    "ensureDirectory" : 1,
    "getCanonicalPath" : 2,
    "getName" : 3,
    "getTime" : 1,
    "matcher" : 1,
    "getInputStream" : 1,
    "matches" : 1,
    "warn" : 1,
    "entries" : 1,
    "toPath" : 1,
    "hasMoreElements" : 1,
    "newOutputStream" : 1,
    "getParentFile" : 1,
    "setLastModified" : 1,
    "copyBytes" : 1,
    "isDirectory" : 1,
    "startsWith" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:membershipTest(org.apache.hadoop.util.bloom.Key)" : {
    "membershipTest" : 1
  },
  "org.apache.hadoop.util.KMSUtil:toJSON(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : {
    "getEncryptedKeyVersion" : 1,
    "toJSON" : 1,
    "getEncryptedKeyIv" : 1,
    "encodeBase64URLSafeString" : 1,
    "getEncryptionKeyVersionName" : 1,
    "put" : 3
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getFileChecksum(org.apache.hadoop.fs.Path,long)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibDecompressorType(org.apache.hadoop.conf.Configuration)" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.service.CompositeService:serviceStart()" : {
    "serviceStart" : 1,
    "getName" : 1,
    "debug" : 1,
    "size" : 1,
    "start" : 1,
    "isDebugEnabled" : 1,
    "getServices" : 1
  },
  "org.apache.hadoop.ipc.ClientCache:getClient(org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "getClient" : 1
  },
  "org.apache.hadoop.fs.ftp.FtpConfigKeys:getServerDefaults()" : { },
  "org.apache.hadoop.security.UserGroupInformation:getKeytab()" : {
    "getLogin" : 1,
    "getConfiguration" : 1,
    "get" : 1,
    "getParameters" : 1
  },
  "org.apache.hadoop.fs.PartialListing:<init>(org.apache.hadoop.fs.Path,java.util.List,org.apache.hadoop.ipc.RemoteException)" : {
    "checkArgument" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager$PrefetchTask:get()" : {
    "debug" : 1,
    "prefetch" : 1,
    "getBlockNumber" : 2,
    "getMessage" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getCurrentUser()" : {
    "ensureInitialized" : 1,
    "getSubject" : 1,
    "isEmpty" : 1,
    "getPrincipals" : 1,
    "getLoginUser" : 1,
    "getContext" : 1
  },
  "org.apache.hadoop.io.erasurecode.ECBlockGroup:getErasedCount()" : {
    "isErased" : 2
  },
  "org.apache.hadoop.fs.FilterFs:removeAcl(org.apache.hadoop.fs.Path)" : {
    "removeAcl" : 1
  },
  "org.apache.hadoop.util.ToolRunner:run(org.apache.hadoop.conf.Configuration,org.apache.hadoop.util.Tool,java.lang.String[])" : {
    "build" : 1,
    "run" : 1,
    "getCurrent" : 1,
    "noteEntryPoint" : 1,
    "setCurrent" : 1,
    "getRemainingArgs" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.metrics2.lib.Interns:info(java.lang.String,java.lang.String)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "validatePathCapabilityArgs" : 1,
    "makeQualified" : 1,
    "hasPathCapability" : 1
  },
  "org.apache.hadoop.security.ssl.ReloadingX509TrustManager:<init>(java.lang.String,java.lang.String,java.lang.String)" : {
    "set" : 1,
    "loadTrustManager" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.Options$CreateOpts:progress(org.apache.hadoop.util.Progressable)" : { },
  "org.apache.hadoop.fs.FilterFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : {
    "setXAttr" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:setPriorityLevel(org.apache.hadoop.security.UserGroupInformation,int)" : {
    "setPriorityLevel" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:stopMetricsMBeans()" : {
    "values" : 1,
    "stopMBeans" : 1
  },
  "org.apache.hadoop.fs.FsShell$UnknownCommandException:<init>()" : { },
  "org.apache.hadoop.io.retry.RetryInvocationHandler$ProxyDescriptor:failover(long,java.lang.reflect.Method,int)" : {
    "performFailover" : 1,
    "warn" : 1,
    "getName" : 1,
    "getProxy" : 1,
    "getString" : 1
  },
  "org.apache.hadoop.fs.CreateFlag:validate(java.util.EnumSet)" : {
    "contains" : 2,
    "isEmpty" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:isFromKeytab()" : {
    "hasKerberosCredentials" : 1,
    "getKeytab" : 1,
    "isHadoopLogin" : 1
  },
  "org.apache.hadoop.conf.ConfigRedactor:<init>(org.apache.hadoop.conf.Configuration)" : {
    "add" : 1,
    "compile" : 1,
    "get" : 1,
    "getTrimmedStrings" : 1,
    "asList" : 1
  },
  "org.apache.hadoop.util.Progress:getProgress()" : {
    "getInternal" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:create(java.lang.String)" : {
    "create" : 1
  },
  "org.apache.hadoop.fs.Globber:doGlob()" : {
    "getPathComponents" : 1,
    "getName" : 1,
    "listStatus" : 1,
    "remove" : 1,
    "schemeFromPath" : 1,
    "get" : 2,
    "toArray" : 1,
    "getFileStatus" : 3,
    "getPath" : 14,
    "authorityFromPath" : 1,
    "add" : 4,
    "debug" : 6,
    "toUri" : 3,
    "isEmpty" : 4,
    "setPath" : 2,
    "hasPattern" : 3,
    "sort" : 1,
    "accept" : 2,
    "warn" : 1,
    "expand" : 1,
    "size" : 6,
    "fixRelativePart" : 1,
    "equals" : 1,
    "isWindowsAbsolutePath" : 1,
    "unescapePathComponent" : 1,
    "isDirectory" : 2
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatus" : 1,
    "setSymlink" : 1,
    "getLinkTarget" : 1,
    "isSymlink" : 1
  },
  "org.apache.hadoop.security.SaslRpcClient:selectSaslClient(java.util.List)" : {
    "add" : 1,
    "debug" : 1,
    "createSaslClient" : 1,
    "valueOf" : 1,
    "isValidAuthType" : 1,
    "getSimpleName" : 1,
    "isDebugEnabled" : 1,
    "getMethod" : 3
  },
  "org.apache.hadoop.fs.FileSystem:canonicalizeUri(java.net.URI)" : {
    "getScheme" : 1,
    "getPort" : 1,
    "getDefaultPort" : 2,
    "getPath" : 1,
    "getFragment" : 1,
    "getUserInfo" : 1,
    "getQuery" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.fs.permission.PermissionStatus:readFields(java.io.DataInput)" : {
    "read" : 1,
    "readString" : 2
  },
  "org.apache.hadoop.security.UserGroupInformation:hasSufficientTimeElapsed(long)" : {
    "warn" : 1,
    "getLastLogin" : 2
  },
  "org.apache.hadoop.fs.FileUtil:unTarUsingJava(java.io.File,java.io.File,boolean)" : {
    "toPath" : 2,
    "newInputStream" : 2,
    "unpackEntries" : 1,
    "cleanupWithLogger" : 1,
    "getNextTarEntry" : 2
  },
  "org.apache.hadoop.fs.shell.find.Find:isPathRecursable(org.apache.hadoop.fs.shell.PathData)" : {
    "isFollowLink" : 1,
    "resolvePath" : 1,
    "getDepth" : 1,
    "isFollowArgLink" : 1,
    "getConf" : 1,
    "toString" : 1,
    "getOptions" : 2,
    "getSymlink" : 1,
    "isSymlink" : 1,
    "isDirectory" : 2
  },
  "org.apache.hadoop.util.StringUtils:getStringCollection(java.lang.String)" : {
    "getStringCollection" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getUserName()" : {
    "getName" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndexEntry:write(java.io.DataOutput)" : {
    "getName" : 1,
    "write" : 1,
    "writeString" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:equals(java.lang.Object)" : {
    "compareTo" : 1,
    "getKeyLength" : 1
  },
  "org.apache.hadoop.net.StandardSocketFactory:createSocket(java.net.InetAddress,int)" : {
    "createSocket" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.ipc.Server:addAuxiliaryListener(int)" : {
    "getPort" : 2,
    "setIsAuxiliary" : 1,
    "containsKey" : 1,
    "getAddress" : 2,
    "put" : 1,
    "info" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:recommissionNode(org.apache.hadoop.net.Node)" : {
    "interAddNodeWithEmptyRack" : 1,
    "getName" : 1,
    "unlock" : 1,
    "writeLock" : 2,
    "getPath" : 1,
    "lock" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.FileSystem:createMultipartUploader(org.apache.hadoop.fs.Path)" : {
    "methodNotSupported" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : {
    "loadConf" : 1,
    "getNonNegative" : 1,
    "checkIfPropertyExists" : 2,
    "getRollInterval" : 1,
    "isSecurityEnabled" : 1,
    "toString" : 1,
    "getBoolean" : 2,
    "getString" : 4,
    "login" : 1,
    "setConfiguration" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$RBlockState:finish()" : {
    "returnDecompressor" : 1,
    "close" : 1
  },
  "org.apache.hadoop.metrics2.source.JvmMetrics:getGcInfo(java.lang.String)" : {
    "get" : 1,
    "putIfAbsent" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:close()" : {
    "cancel" : 1,
    "getAll" : 1,
    "memoryFreed" : 1,
    "clear" : 1,
    "getActionFuture" : 1,
    "close" : 1,
    "numCreated" : 1
  },
  "org.apache.hadoop.io.ReadaheadPool:getInstance()" : {
    "isAvailable" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream:seek(long)" : {
    "getFileLength" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.util.ConfigurationHelper:mapEnumNamesToValues(java.lang.String,java.lang.Class)" : {
    "toLowerCase" : 1,
    "name" : 1,
    "checkArgument" : 1,
    "put" : 1,
    "getEnumConstants" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getSchedulingDecisionSummary()" : {
    "getSchedulingDecisionSummary" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.FilterFs:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "checkPath" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:finalKey(org.apache.hadoop.io.WritableComparable)" : {
    "next" : 1,
    "getPosition" : 1,
    "readIndex" : 1,
    "reset" : 1,
    "seek" : 2
  },
  "org.apache.hadoop.fs.shell.Display$Text:getInputStream(org.apache.hadoop.fs.shell.PathData)" : {
    "getCodec" : 1,
    "getConf" : 1,
    "readShort" : 1,
    "readByte" : 2,
    "close" : 2,
    "seek" : 4,
    "getInputStream" : 1,
    "createInputStream" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:<init>(java.lang.String,int,java.lang.String,java.util.List,java.util.List,org.apache.hadoop.ha.ActiveStandbyElector$ActiveStandbyElectorCallback,int,boolean,org.apache.hadoop.security.SecurityUtil$TruststoreKeystore)" : {
    "createConnection" : 1,
    "reEstablishSession" : 1
  },
  "org.apache.hadoop.fs.http.HttpsFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : { },
  "org.apache.hadoop.tools.TableListing:toString()" : {
    "repeat" : 1,
    "setWrapWidth" : 1,
    "toString" : 1,
    "getRow" : 1,
    "append" : 4,
    "getMaxWidth" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextImpl:snapshot()" : {
    "debug" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:startLockTiming()" : {
    "monotonicNow" : 1
  },
  "org.apache.hadoop.util.KMSUtil:getKeyProviderUri(org.apache.hadoop.conf.Configuration)" : {
    "getKeyProviderUri" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:parseCommaSeparatedString(java.lang.String)" : {
    "add" : 1,
    "warn" : 2,
    "parsePositiveInt" : 2,
    "split" : 1
  },
  "org.apache.hadoop.fs.LocatedFileStatus:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.io.SetFile:<init>()" : { },
  "org.apache.hadoop.security.SecurityUtil:setSslConfiguration(org.apache.zookeeper.client.ZKClientConfig,org.apache.hadoop.security.SecurityUtil$TruststoreKeystore)" : {
    "setSslConfiguration" : 1
  },
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:isLocalhost(java.lang.String)" : {
    "lastIndexOf" : 1,
    "trim" : 1,
    "toLowerCase" : 1,
    "binarySearch" : 1,
    "substring" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:getCounter(long)" : {
    "getCipherSuite" : 1,
    "getAlgorithmBlockSize" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:initializeInterceptors()" : {
    "add" : 1,
    "split" : 1,
    "isEmpty" : 1,
    "create" : 1,
    "initialize" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : {
    "init" : 1,
    "getProxy" : 1,
    "isSecurityEnabled" : 1,
    "getProtocolEngine" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:listStatus(org.apache.hadoop.fs.Path)" : {
    "getFileStatus" : 2,
    "pathToFile" : 1,
    "exists" : 1,
    "copyOf" : 1,
    "list" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.Path:getPathWithoutSchemeAndAuthority(org.apache.hadoop.fs.Path)" : {
    "toUri" : 1,
    "isUriPathAbsolute" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsBufferBuilder:add(java.lang.String,java.lang.Iterable)" : {
    "add" : 1
  },
  "org.apache.hadoop.fs.CreateFlag:validateForAppend(java.util.EnumSet)" : {
    "contains" : 1,
    "validate" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:getNumDataUnits()" : {
    "getNumDataUnits" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemUtil:isViewFileSystem(org.apache.hadoop.fs.FileSystem)" : {
    "getScheme" : 1,
    "equals" : 1
  },
  "org.apache.hadoop.io.compress.DecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int,int)" : { },
  "org.apache.hadoop.fs.RawLocalFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "contains" : 1,
    "createOutputStreamWithMode" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.util.FindClass:dumpResource(java.lang.String)" : {
    "print" : 2,
    "getResource" : 1,
    "read" : 1,
    "err" : 1,
    "printStack" : 1,
    "openStream" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:append(byte[],int,int,byte[],int,int)" : {
    "prepareAppendKey" : 1,
    "prepareAppendValue" : 1,
    "write" : 2,
    "close" : 2
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getBytesRead()" : {
    "visitAll" : 1
  },
  "org.apache.hadoop.util.ProgramDriver:printUsage(java.util.Map)" : {
    "getValue" : 1,
    "getKey" : 1,
    "println" : 2,
    "entrySet" : 1,
    "getDescription" : 1
  },
  "org.apache.hadoop.crypto.random.OsSecureRandom:setConf(org.apache.hadoop.conf.Configuration)" : {
    "get" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:<init>(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI,boolean)" : {
    "getLinkType" : 2,
    "getCurrentUser" : 2,
    "getSettings" : 1,
    "addFallbackLink" : 2,
    "initAndGetTargetFs" : 3,
    "createLink" : 1,
    "substring" : 6,
    "getLinkEntries" : 1,
    "getTarget" : 2,
    "checkNotNull" : 1,
    "isNestedMountPointSupported" : 1,
    "getRootDir" : 5,
    "indexOf" : 1,
    "info" : 1,
    "buildLinkRegexEntry" : 1,
    "add" : 3,
    "getKey" : 1,
    "getScheme" : 1,
    "getHomeDirValue" : 1,
    "getSrc" : 1,
    "isEmpty" : 1,
    "length" : 5,
    "getUgi" : 1,
    "setRoot" : 1,
    "addRegexMountEntry" : 1,
    "getConfig" : 1,
    "setInternalDirFs" : 1,
    "checkMntEntryKeyEqualsTarget" : 2,
    "getTargetFileSystem" : 1,
    "getValue" : 2,
    "equals" : 1,
    "toString" : 3,
    "getDefaultMountTableName" : 1,
    "append" : 4,
    "startsWith" : 8
  },
  "org.apache.hadoop.io.compress.DecompressorStream:available()" : {
    "checkStream" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:isUserAllowed(org.apache.hadoop.security.UserGroupInformation)" : {
    "isUserInList" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:getPermission()" : {
    "getFileDefault" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getKeyNear(long)" : {
    "checkTFileDataIndex" : 1,
    "getEntry" : 1,
    "getBlockIndexNear" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$1:isDone()" : { },
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.net.unix.DomainSocket:isOpen()" : {
    "isOpen" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:authorizeConnection()" : {
    "incrAuthorizationFailures" : 1,
    "incrAuthorizationSuccesses" : 1,
    "debug" : 1,
    "getHostInetAddress" : 1,
    "getRealUser" : 1,
    "getProtocol" : 1,
    "getHostAddress" : 1,
    "authorize" : 2,
    "info" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:data()" : {
    "throwIfInvalidBuffer" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:loadPermissionInfoByNativeIO()" : {
    "setGroup" : 2,
    "getGroup" : 1,
    "toUri" : 1,
    "getPath" : 2,
    "getMode" : 1,
    "setPermission" : 2,
    "getOwner" : 1,
    "setOwner" : 2,
    "substring" : 1,
    "getStat" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.shell.find.Print:apply(org.apache.hadoop.fs.shell.PathData,int)" : {
    "getOut" : 1,
    "print" : 1,
    "toString" : 1,
    "getOptions" : 1
  },
  "org.apache.hadoop.util.functional.CommonCallableSupplier:waitForCompletion(java.util.concurrent.CompletableFuture)" : {
    "raiseInnerCause" : 1,
    "join" : 1
  },
  "org.apache.hadoop.fs.shell.AclCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 2
  },
  "org.apache.hadoop.util.XMLUtils:transform(java.io.InputStream,java.io.InputStream,java.io.Writer)" : {
    "transform" : 1,
    "newTransformer" : 1,
    "newSecureTransformerFactory" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreBuilderImpl:build()" : { },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:registerProtocolEngine()" : {
    "getRpcInvoker" : 1,
    "registerProtocolEngine" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:fixBlockLocations(org.apache.hadoop.fs.BlockLocation[],long,long,long)" : {
    "setLength" : 2,
    "setOffset" : 2,
    "getOffset" : 1,
    "getLength" : 3
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:getInstance()" : {
    "getInstance" : 1
  },
  "org.apache.hadoop.io.FloatWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:throwIfInvalidBlockNumber(int)" : {
    "checkWithinRange" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:<init>(int,long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:trackDurationOfSupplier(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String,java.util.function.Supplier)" : {
    "get" : 1,
    "failed" : 1,
    "createTracker" : 1,
    "close" : 1
  },
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[],java.io.File)" : { },
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getServerName()" : {
    "quoteHtmlChars" : 1,
    "getServerName" : 1
  },
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newScheduledThreadPool(int)" : { },
  "org.apache.hadoop.ha.ZKFailoverController:doRun(java.lang.String[])" : {
    "checkFencingConfigured" : 1,
    "mainLoop" : 1,
    "formatZK" : 1,
    "error" : 5,
    "initZK" : 1,
    "quitElection" : 1,
    "parentZNodeExists" : 1,
    "badArg" : 2,
    "initRPC" : 1,
    "equals" : 3,
    "initHM" : 1,
    "join" : 1,
    "shutdown" : 1,
    "stopAndJoin" : 1,
    "startRPC" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:createDirectDecompressor()" : {
    "getDecompressionBufferSize" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:readXmlFileToMapWithFileInputStream(java.lang.String,java.lang.String,java.io.InputStream,java.util.Map)" : {
    "item" : 1,
    "getDocumentElement" : 1,
    "parse" : 1,
    "error" : 1,
    "put" : 1,
    "parseInt" : 1,
    "newSecureDocumentBuilderFactory" : 1,
    "newDocumentBuilder" : 1,
    "getTrimmedStrings" : 1,
    "getLength" : 1,
    "getNodeType" : 1,
    "readFirstTagValue" : 2,
    "getElementsByTagName" : 1,
    "close" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.authorize.AccessControlList:addUser(java.lang.String)" : {
    "add" : 1,
    "isAllAllowed" : 1,
    "isWildCardACLValue" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:unprotectedRelogin(org.apache.hadoop.security.UserGroupInformation$HadoopLoginContext,boolean)" : {
    "getSubject" : 1,
    "getAppName" : 1,
    "setLastLogin" : 1,
    "newLoginContext" : 1,
    "debug" : 2,
    "login" : 1,
    "hasSufficientTimeElapsed" : 1,
    "fixKerberosTicketOrder" : 1,
    "logout" : 1,
    "holdsLock" : 1,
    "getConfiguration" : 1,
    "setLogin" : 1,
    "now" : 1,
    "getUserName" : 3,
    "setUser" : 1,
    "getSubjectLock" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_counters(java.io.Serializable)" : {
    "invoke" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:addToCache(int)" : {
    "add" : 1,
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.fs.FileContext:getAllStatistics()" : {
    "getAllStatistics" : 1
  },
  "org.apache.hadoop.net.DNS:getIPs(java.lang.String)" : {
    "getIPs" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:seekInternal(org.apache.hadoop.io.WritableComparable)" : {
    "seekInternal" : 1
  },
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:getPermission()" : {
    "getFileDefault" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawDecoderWithFallback(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "contains" : 1,
    "debug" : 2,
    "createRawCoderFactory" : 1,
    "getBoolean" : 1,
    "isDebugEnabled" : 1,
    "getRawCoderNames" : 1,
    "createDecoder" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.ChecksumFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:merge(org.apache.hadoop.fs.FileStatus[],org.apache.hadoop.fs.FileStatus[])" : {
    "add" : 3,
    "contains" : 1,
    "getName" : 2,
    "size" : 1,
    "toArray" : 1,
    "getPath" : 2
  },
  "org.apache.hadoop.io.compress.SnappyCodec:createOutputStream(java.io.OutputStream)" : {
    "createOutputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsContext:setThreadIOStatisticsContext(org.apache.hadoop.fs.statistics.IOStatisticsContext)" : {
    "setThreadIOStatisticsContext" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrAuthenticationSuccesses()" : {
    "incr" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:appendFile(org.apache.hadoop.fs.Path)" : {
    "appendFile" : 1
  },
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:getMetric(java.lang.String)" : {
    "instance" : 1,
    "get" : 1,
    "sourceName" : 1,
    "put" : 1,
    "register" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableCounterInt:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : {
    "clearChanged" : 1,
    "value" : 1,
    "info" : 1,
    "addCounter" : 1,
    "changed" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:delete(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path,boolean)" : {
    "toUri" : 1,
    "format" : 1,
    "getFileStatus" : 1,
    "getPath" : 2,
    "listStatus" : 1,
    "rm" : 1,
    "rmdir" : 1,
    "pwd" : 1,
    "delete" : 1,
    "makeAbsolute" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.ipc.Server:doKerberosRelogin()" : {
    "forceReloginFromTicketCache" : 1,
    "warn" : 1,
    "isLoginTicketBased" : 2,
    "isLoginSuccess" : 1,
    "reloginFromTicketCache" : 1,
    "compareAndSet" : 1,
    "reloginFromKeytab" : 1,
    "forceReloginFromKeytab" : 1,
    "isLoginKeytabBased" : 2,
    "getLoginUser" : 5
  },
  "org.apache.hadoop.metrics2.sink.StatsDSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : {
    "replace" : 1,
    "type" : 2,
    "replaceAll" : 1,
    "substring" : 1,
    "tags" : 1,
    "writeMetric" : 1,
    "equals" : 5,
    "name" : 8,
    "context" : 1,
    "toString" : 2,
    "metrics" : 1,
    "indexOf" : 1,
    "value" : 7,
    "append" : 16,
    "info" : 3
  },
  "org.apache.hadoop.io.file.tfile.BCFile$BlockRegion:<init>(java.io.DataInput)" : {
    "readVLong" : 3
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getKeysMetadata(java.lang.String[])" : {
    "getKeysMetadata" : 1,
    "doOp" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:readFully(long,byte[])" : {
    "readFully" : 1
  },
  "org.apache.hadoop.fs.shell.Tail:expandArgument(java.lang.String)" : {
    "add" : 1,
    "getConf" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:getExpression(java.lang.Class)" : {
    "getConf" : 1,
    "getExpressionFactory" : 1,
    "createExpression" : 1
  },
  "org.apache.hadoop.fs.statistics.MeanStatistic:setSamplesAndSum(long,long)" : {
    "setSamples" : 1,
    "setSum" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:run(java.lang.String[])" : {
    "println" : 2,
    "runCmd" : 1,
    "debug" : 1,
    "getLocalizedMessage" : 2,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.ha.FailoverController:tryGracefulFence(org.apache.hadoop.ha.HAServiceTarget)" : {
    "warn" : 2,
    "createReqInfo" : 1,
    "getProxy" : 1,
    "transitionToStandby" : 1,
    "stopProxy" : 1,
    "getMessage" : 1
  },
  "org.apache.hadoop.net.NetUtils:getSocketFactory(org.apache.hadoop.conf.Configuration,java.lang.Class)" : {
    "getSocketFactoryFromProperty" : 1,
    "get" : 1,
    "getDefaultSocketFactory" : 1,
    "length" : 1,
    "getSimpleName" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableRates:init(java.lang.Class)" : {
    "add" : 1,
    "getDeclaredMethods" : 1,
    "contains" : 1,
    "debug" : 1,
    "getName" : 2,
    "newRate" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:listStatus(org.apache.hadoop.fs.Path)" : {
    "getModificationTime" : 1,
    "getOwner" : 1,
    "getMyFs" : 1,
    "checkPathIsSlash" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "merge" : 2,
    "getLen" : 1,
    "toArray" : 2,
    "getFileStatus" : 1,
    "getPath" : 1,
    "getTargetLink" : 1,
    "getShortUserName" : 2,
    "add" : 3,
    "isLink" : 1,
    "getPermission" : 1,
    "entrySet" : 1,
    "getAccessTime" : 1,
    "getTargetFileSystem" : 3,
    "getChildren" : 1,
    "warn" : 1,
    "getValue" : 1,
    "getLink" : 1,
    "size" : 2,
    "getPrimaryGroupName" : 2,
    "listStatusForFallbackLink" : 1,
    "getGroup" : 1,
    "equals" : 1,
    "makeQualified" : 1,
    "isDirectory" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.io.DataInputByteBuffer:reset(java.nio.ByteBuffer[])" : {
    "reset" : 1
  },
  "org.apache.hadoop.util.HostsFileReader:refreshInternal(java.lang.String,java.lang.String,boolean)" : {
    "set" : 2,
    "readFileToSet" : 1,
    "unmodifiableSet" : 1,
    "get" : 1,
    "isEmpty" : 2,
    "readFileToMap" : 1,
    "unmodifiableMap" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.DataOutputBuffer:getData()" : {
    "getData" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:logUserInfo(org.slf4j.Logger,java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : {
    "getValue" : 1,
    "getKey" : 1,
    "debug" : 2,
    "entrySet" : 1,
    "getTokenMap" : 1,
    "getCredentials" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:getBytesRead()" : {
    "checkStream" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory:requestBuffer(int)" : {
    "incrementAndGet" : 1,
    "debug" : 1,
    "getBuffer" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "mkdirs" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatusInternal" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:<init>(org.apache.hadoop.metrics2.MetricsInfo,float)" : {
    "floatToIntBits" : 1,
    "set" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getAclStatus(org.apache.hadoop.fs.Path)" : {
    "getShortUserName" : 1,
    "owner" : 1,
    "addEntries" : 1,
    "stickyBit" : 1,
    "build" : 1,
    "getPrimaryGroupName" : 1,
    "checkPathIsSlash" : 1,
    "group" : 1,
    "getMinimalAcl" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getBytesReadByDistance(int)" : {
    "getBytesReadDistanceOfFiveOrLarger" : 1,
    "getBytesReadDistanceOfOneOrTwo" : 1,
    "getBytesReadDistanceOfThreeOrFour" : 1,
    "getData" : 4,
    "getBytesReadLocalHost" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "setTimes" : 1
  },
  "org.apache.hadoop.util.InstrumentedReadLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.ReentrantReadWriteLock,long,long)" : { },
  "org.apache.hadoop.security.SaslRpcClient:getServerPrincipal(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth)" : {
    "serverPrincipal" : 1,
    "getName" : 1,
    "debug" : 2,
    "getHostName" : 1,
    "format" : 2,
    "isEmpty" : 2,
    "getCanonicalName" : 1,
    "getProtocol" : 1,
    "matcher" : 1,
    "matches" : 1,
    "getKerberosInfo" : 1,
    "compile" : 1,
    "equals" : 1,
    "get" : 3,
    "getServerPrincipal" : 1,
    "getServerId" : 1,
    "getAddress" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.io.retry.CallReturn:<init>(org.apache.hadoop.io.retry.CallReturn$State)" : { },
  "org.apache.hadoop.security.CompositeGroupsMapping:getGroupsSet(java.lang.String)" : {
    "getClass" : 1,
    "warn" : 1,
    "debug" : 1,
    "addAll" : 1,
    "isEmpty" : 1,
    "toString" : 1,
    "getSimpleName" : 1,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:safeSetData(java.lang.String,byte[],int,java.util.List,java.lang.String)" : {
    "setData" : 1,
    "commit" : 1,
    "createTransaction" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:listStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:check(long,long,boolean)" : {
    "monotonicNow" : 1,
    "incrementSuppressed" : 1,
    "compareAndSet" : 1,
    "logWarning" : 1,
    "get" : 1,
    "isWarnEnabled" : 1,
    "logWaitWarning" : 1,
    "snapshot" : 1
  },
  "org.apache.hadoop.io.SecureIOUtils:forceSecureOpenFSDataInputStream(java.io.File,java.lang.String,java.lang.String)" : {
    "getFstat" : 1,
    "getAbsolutePath" : 1,
    "getGroup" : 1,
    "getFileDescriptor" : 1,
    "getOwner" : 1,
    "checkStat" : 1,
    "close" : 1,
    "open" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:nextRawValue(org.apache.hadoop.io.SequenceFile$ValueBytes)" : {
    "nextRawValue" : 1
  },
  "org.apache.hadoop.fs.BatchedRemoteIterator:hasNext()" : {
    "makeRequestIfNeeded" : 1
  },
  "org.apache.hadoop.util.ZKUtil$BadAclFormatException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.ipc.Server$Connection:unwrapPacketAndProcessRpcs(byte[])" : {
    "processOneRpc" : 1,
    "getInt" : 1,
    "debug" : 1,
    "allocate" : 1,
    "shouldClose" : 1,
    "clear" : 1,
    "flip" : 2,
    "newChannel" : 1,
    "remaining" : 4,
    "channelRead" : 2,
    "unwrap" : 1
  },
  "org.apache.hadoop.io.WeakReferencedElasticByteBufferPool:putBuffer(java.nio.ByteBuffer)" : {
    "getBufferTree" : 1,
    "containsKey" : 1,
    "nanoTime" : 1,
    "clear" : 1,
    "isDirect" : 1,
    "put" : 1,
    "capacity" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupBlock()" : {
    "setupRandPartA" : 1,
    "arraycopy" : 1,
    "setupNoRandPartA" : 1,
    "initTT" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatus" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:prepareDecoding(java.lang.Object[],int[])" : {
    "getValidIndexes" : 1,
    "equals" : 2,
    "copyOf" : 2,
    "processErasures" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addTimedOperation(java.lang.String,java.time.Duration)" : {
    "toMillis" : 1,
    "addTimedOperation" : 1
  },
  "org.apache.hadoop.util.Sets:newHashSet(java.lang.Iterable)" : {
    "cast" : 1,
    "iterator" : 1,
    "newHashSet" : 1
  },
  "org.apache.hadoop.util.FindClass:createClassInstance(java.lang.String)" : {
    "loadedClass" : 1,
    "getClass" : 1,
    "printStack" : 4,
    "toString" : 1,
    "newInstance" : 1,
    "out" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getRead(int)" : {
    "add" : 1,
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.metrics2.filter.AbstractPatternFilter:init(org.apache.commons.configuration2.SubsetConfiguration)" : {
    "setExcludeTagPattern" : 1,
    "setExcludePattern" : 1,
    "compile" : 4,
    "isEmpty" : 2,
    "getStringArray" : 2,
    "getString" : 2,
    "matcher" : 2,
    "setIncludeTagPattern" : 1,
    "matches" : 2,
    "group" : 4,
    "setIncludePattern" : 1
  },
  "org.apache.hadoop.util.QuickSort:sortInternal(org.apache.hadoop.util.IndexedSortable,int,int,org.apache.hadoop.util.Progressable,int)" : {
    "compare" : 3,
    "fix" : 3,
    "swap" : 6,
    "progress" : 1,
    "sort" : 1,
    "sortInternal" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:add(int[],int[])" : {
    "add" : 1,
    "max" : 1
  },
  "org.apache.hadoop.log.LogLevel$CLI:parseGetLevelArgs(java.lang.String[],int)" : { },
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:minimumFnRemove(int[])" : {
    "getWeight" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache$Key:<init>(java.net.URI,org.apache.hadoop.conf.Configuration,long)" : {
    "getCurrentUser" : 1,
    "getScheme" : 2,
    "toLowerCase" : 2,
    "getAuthority" : 2
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:resetKeyStoreState(org.apache.hadoop.fs.Path)" : {
    "debug" : 3,
    "loadFromPath" : 1,
    "clear" : 1
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:readFields(java.io.DataInput)" : {
    "readFields" : 1,
    "readLong" : 1,
    "buckets2words" : 1
  },
  "org.apache.hadoop.io.retry.CallReturn:<init>(java.lang.Throwable)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.fs.FSBuilder:must(java.lang.String,int)" : {
    "mustLong" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:supportsSymlinks()" : {
    "supportsSymlinks" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks:createFactory(java.lang.String,org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "debug" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "getXAttrs" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.ipc.Server:internalQueueCall(org.apache.hadoop.ipc.Server$Call)" : {
    "internalQueueCall" : 1
  },
  "org.apache.hadoop.service.ServiceOperations:stopQuietly(org.apache.hadoop.service.Service)" : {
    "stopQuietly" : 1
  },
  "org.apache.hadoop.fs.FsShell:getTrash()" : {
    "getConf" : 1
  },
  "org.apache.hadoop.ipc.Client$IpcStreams:setSaslClient(org.apache.hadoop.security.SaslRpcClient)" : {
    "setOutputStream" : 1,
    "setInputStream" : 1,
    "getOutputStream" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.conf.ReconfigurationUtil:getChangedProperties(org.apache.hadoop.conf.Configuration,org.apache.hadoop.conf.Configuration)" : {
    "getValue" : 2,
    "getKey" : 2,
    "values" : 1,
    "get" : 1,
    "equals" : 1,
    "getRaw" : 1,
    "put" : 2
  },
  "org.apache.hadoop.ipc.Server$Handler:run()" : {
    "incrementAndGet" : 1,
    "getName" : 5,
    "run" : 1,
    "decrementAndGet" : 1,
    "cleanupWithLogger" : 1,
    "getClientStateId" : 1,
    "activateSpan" : 1,
    "setCurrent" : 1,
    "info" : 2,
    "addTimelineAnnotation" : 3,
    "currentThread" : 5,
    "set" : 3,
    "debug" : 4,
    "requeueCall" : 1,
    "stringifyException" : 2,
    "monotonicNowNanos" : 1,
    "isResponseDeferred" : 1,
    "take" : 1,
    "doAs" : 1,
    "isOpen" : 1,
    "updateMetrics" : 1,
    "getRemoteUser" : 2,
    "getProcessingDetails" : 1,
    "getLastSeenStateId" : 1,
    "isCallCoordinated" : 1,
    "getDetailedMetricsName" : 1
  },
  "org.apache.hadoop.fs.FileUtil:fullyDelete(java.io.File)" : {
    "fullyDelete" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:getNumParityUnits()" : {
    "getNumParityUnits" : 1
  },
  "org.apache.hadoop.fs.local.LocalConfigKeys:getServerDefaults()" : { },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addCounter(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "add" : 1,
    "accepts" : 1,
    "name" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:checkPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:createKey(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "doOp" : 1,
    "createKey" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion:createForDecryption(java.lang.String,java.lang.String,byte[],byte[])" : { },
  "org.apache.hadoop.util.functional.TaskPool$Builder:<init>(java.lang.Iterable)" : {
    "remoteIteratorFromIterable" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:setVerifyChecksum(boolean)" : {
    "setVerifyChecksum" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:createReader(org.apache.hadoop.io.file.tfile.Compression$Algorithm,org.apache.hadoop.io.file.tfile.BCFile$BlockRegion)" : { },
  "org.apache.hadoop.util.LightWeightResizableGSet:put(java.lang.Object)" : {
    "expandIfNecessary" : 1,
    "put" : 1
  },
  "org.apache.hadoop.service.CompositeService:serviceInit(org.apache.hadoop.conf.Configuration)" : {
    "init" : 1,
    "getName" : 1,
    "debug" : 1,
    "size" : 1,
    "isDebugEnabled" : 1,
    "getServices" : 1,
    "serviceInit" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "readOnlyMountTable" : 1,
    "getRootFallbackLink" : 2,
    "debug" : 1,
    "getName" : 1,
    "isRoot" : 1,
    "containsKey" : 1,
    "substring" : 1,
    "getPathWithoutSchemeAndAuthority" : 1,
    "getTargetFileSystem" : 1,
    "getChildren" : 1,
    "mkdirs" : 1,
    "equals" : 1,
    "toString" : 2,
    "isDebugEnabled" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.io.ArrayPrimitiveWritable:checkDeclaredComponentType(java.lang.Class)" : {
    "getName" : 2
  },
  "org.apache.hadoop.util.functional.RemoteIterators$SingletonIterator:next()" : {
    "hasNext" : 1
  },
  "org.apache.hadoop.ha.NodeFencer:fence(org.apache.hadoop.ha.HAServiceTarget)" : {
    "fence" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addTimedOperation(java.lang.String,long)" : {
    "getInnerStatistics" : 1,
    "addTimedOperation" : 1
  },
  "org.apache.hadoop.fs.FSOutputSummer:flush()" : {
    "flushBuffer" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseBackOffResponseTimeThreshold(java.lang.String,org.apache.hadoop.conf.Configuration,int)" : {
    "getTimeDurations" : 1,
    "getDefaultBackOffResponseTimeThresholds" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:getCallVolumeSummary()" : {
    "getDecayedCallCosts" : 1,
    "getMessage" : 1,
    "writeValueAsString" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String,boolean)" : {
    "checkTagName" : 1,
    "name" : 2,
    "tag" : 1,
    "put" : 1
  },
  "org.apache.hadoop.net.SocketIOWithTimeout:doIO(java.nio.ByteBuffer,int)" : {
    "timeoutExceptionString" : 1,
    "select" : 1,
    "isOpen" : 1,
    "hasRemaining" : 2,
    "performIO" : 1
  },
  "org.apache.hadoop.fs.FsServerDefaults:readFields(java.io.DataInput)" : {
    "readEnum" : 1,
    "readLong" : 1,
    "readShort" : 1,
    "readByte" : 1,
    "readInt" : 3
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:getKeyVersion(java.lang.String)" : {
    "getKey" : 1,
    "unlock" : 1,
    "getEncoded" : 1,
    "containsAlias" : 1,
    "getBaseName" : 1,
    "lock" : 1
  },
  "org.apache.hadoop.fs.InternalOperations:rename(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : {
    "rename" : 1
  },
  "org.apache.hadoop.io.ShortWritable:<init>(short)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.FileSystemStorageStatistics:<init>(java.lang.String,org.apache.hadoop.fs.FileSystem$Statistics)" : {
    "checkArgument" : 2,
    "getData" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:mapToSortedString(java.lang.StringBuilder,java.lang.String,java.util.Map,java.util.function.Predicate)" : {
    "sortedMap" : 1,
    "mapToString" : 1
  },
  "org.apache.hadoop.security.RuleBasedLdapGroupsMapping:getGroupsSet(java.lang.String)" : {
    "stream" : 2,
    "toCollection" : 2,
    "map" : 2,
    "collect" : 2,
    "getGroupsSet" : 1
  },
  "org.apache.hadoop.io.compress.BlockCompressorStream:<init>(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor,int,int)" : { },
  "org.apache.hadoop.io.file.tfile.ByteArray:<init>(org.apache.hadoop.io.BytesWritable)" : {
    "getLength" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.security.protocolPB.RefreshAuthorizationPolicyProtocolClientSideTranslatorPB:close()" : {
    "stopProxy" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenInformation:<init>(long,byte[])" : { },
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[],long)" : { },
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : {
    "keyClass" : 1,
    "valueClass" : 1,
    "progressable" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.fs.shell.Test:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:checkPath(org.apache.hadoop.fs.Path)" : {
    "getPort" : 2,
    "getScheme" : 2,
    "isUriPathAbsolute" : 1,
    "toUri" : 1,
    "getUriDefaultPort" : 1,
    "equalsIgnoreCase" : 2,
    "getAuthority" : 1,
    "getHost" : 2,
    "getUri" : 5
  },
  "org.apache.hadoop.fs.FileSystem:getCanonicalServiceName()" : {
    "buildDTServiceName" : 1,
    "getDefaultPort" : 1,
    "getChildFileSystems" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Metadata:write(java.io.DataOutput)" : {
    "next" : 1,
    "writeInt" : 1,
    "getValue" : 1,
    "getKey" : 1,
    "iterator" : 1,
    "size" : 1,
    "entrySet" : 1,
    "hasNext" : 1,
    "write" : 2
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader:<init>(org.apache.hadoop.fs.FSDataInputStream,long,org.apache.hadoop.conf.Configuration)" : {
    "getComparator" : 1,
    "getMetaBlock" : 1,
    "getBlockCount" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:trackDurationOfInvocation(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String,org.apache.hadoop.util.functional.InvocationRaisingIOE)" : {
    "measureDurationOfInvocation" : 1
  },
  "org.apache.hadoop.fs.impl.FlagSet:buildFlagSet(java.lang.Class,org.apache.hadoop.conf.Configuration,java.lang.String,boolean)" : {
    "getEnumSet" : 1,
    "createFlagSet" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:processSaslMessage(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto)" : {
    "contains" : 1,
    "getState" : 2,
    "valueOf" : 1,
    "getAuthsCount" : 1,
    "buildSaslNegotiateResponse" : 2,
    "processSaslToken" : 2,
    "getMethod" : 2,
    "getAuthsList" : 1,
    "createSaslServer" : 1,
    "getAuths" : 1,
    "switchToSimple" : 2
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler:newAsyncCall(java.lang.reflect.Method,java.lang.Object[],boolean,int,org.apache.hadoop.io.retry.RetryInvocationHandler)" : { },
  "org.apache.hadoop.io.erasurecode.coder.RSErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : { },
  "org.apache.hadoop.ipc.Server$RpcCall:getHostInetAddress()" : {
    "getHostInetAddress" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Statistics:getReadOps()" : {
    "visitAll" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:<init>(java.lang.String,int,java.lang.String,java.util.List,java.util.List,org.apache.hadoop.ha.ActiveStandbyElector$ActiveStandbyElectorCallback,int,org.apache.hadoop.security.SecurityUtil$TruststoreKeystore)" : { },
  "org.apache.hadoop.ipc.CallQueueManager:addResponseTime(java.lang.String,org.apache.hadoop.ipc.Schedulable,org.apache.hadoop.ipc.ProcessingDetails)" : {
    "addResponseTime" : 1
  },
  "org.apache.hadoop.fs.local.LocalFs:<init>(org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : {
    "readOnlyMountTable" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getLinkTarget(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getLinkTarget" : 1
  },
  "org.apache.hadoop.fs.FilterFs:delete(org.apache.hadoop.fs.Path,boolean)" : {
    "checkPath" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.shell.AclCommands$GetfaclCommand:printAclEntriesForSingleScope(org.apache.hadoop.fs.permission.AclStatus,org.apache.hadoop.fs.permission.FsPermission,java.util.List)" : {
    "println" : 1,
    "toStringStable" : 1,
    "isEmpty" : 1,
    "isMinimalAcl" : 1,
    "printExtendedAclEntry" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:createEncoder(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : {
    "checkNotNull" : 2,
    "createEncoder" : 1,
    "getCodecName" : 1,
    "createCodec" : 1,
    "getCodecClassName" : 1,
    "getSchema" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSOutputSummer:hasCapability(java.lang.String)" : {
    "hasCapability" : 1,
    "isProbeForSyncable" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:cleanupAllTmpFiles()" : {
    "processThrowable" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.FsShell:printHelp(java.io.PrintStream)" : {
    "printInfo" : 1
  },
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:generateEncryptedKey(java.lang.String)" : {
    "createEncryptor" : 1,
    "getCipherSuite" : 1,
    "getMaterial" : 1,
    "generateEncryptedKey" : 1,
    "checkNotNull" : 1,
    "getConf" : 1,
    "getCurrentKey" : 1,
    "getAlgorithmBlockSize" : 1,
    "generateSecureRandom" : 2,
    "getInstance" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:writeRun()" : {
    "initBlock" : 1,
    "updateCRC" : 1,
    "writeRun" : 1,
    "endBlock" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:cleanBufferPool()" : {
    "poll" : 1,
    "freeDB" : 1
  },
  "org.apache.hadoop.util.DataChecksum:newDataChecksum(java.io.DataInputStream)" : {
    "mapByteToChecksumType" : 1,
    "readInt" : 1,
    "readByte" : 1,
    "newDataChecksum" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec:createDecompressor()" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.fs.Globber:schemeFromPath(org.apache.hadoop.fs.Path)" : {
    "getScheme" : 3,
    "fixRelativePart" : 1,
    "toUri" : 1,
    "getFSofPath" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.io.file.tfile.BCFile$BlockRegion:write(java.io.DataOutput)" : {
    "writeVLong" : 3
  },
  "org.apache.hadoop.security.UserGroupInformation:relogin(org.apache.hadoop.security.UserGroupInformation$HadoopLoginContext,boolean)" : {
    "getLogin" : 1,
    "unprotectedRelogin" : 1,
    "getSubjectLock" : 1
  },
  "org.apache.hadoop.fs.GetSpaceUsed$Builder:getJitter()" : {
    "getLong" : 1
  },
  "org.apache.hadoop.fs.FileContext:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : {
    "setXAttr" : 1,
    "of" : 1
  },
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:mkdirs(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "cd" : 2,
    "getParent" : 1,
    "getName" : 1,
    "isFile" : 1,
    "toUri" : 1,
    "format" : 2,
    "getDefault" : 1,
    "mkdirs" : 1,
    "getPath" : 1,
    "exists" : 1,
    "pwd" : 2,
    "mkdir" : 1,
    "makeAbsolute" : 1
  },
  "org.apache.hadoop.conf.Configuration$Resource:<init>(java.lang.Object,boolean)" : {
    "toString" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getDefaultReplication(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.fs.FSDataInputStream:<init>(java.io.InputStream)" : {
    "getClass" : 1,
    "getCanonicalName" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:tag(java.lang.String,java.lang.String,java.lang.String)" : {
    "tag" : 1
  },
  "org.apache.hadoop.fs.shell.Command:processPathInternal(org.apache.hadoop.fs.shell.PathData)" : {
    "isPathRecursable" : 1,
    "processPath" : 1,
    "postProcessPath" : 1,
    "recursePath" : 1
  },
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolClientSideTranslatorPB:<init>(java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : {
    "getProtocolVersion" : 1,
    "getCurrentUser" : 1,
    "getProxy" : 1,
    "setProtocolEngine" : 1
  },
  "org.apache.hadoop.conf.Configuration:<init>(org.apache.hadoop.conf.Configuration)" : {
    "addAll" : 1,
    "newSetFromMap" : 1,
    "putAll" : 1,
    "getProps" : 1,
    "clone" : 3,
    "getQuietMode" : 1,
    "setQuietMode" : 1,
    "put" : 1
  },
  "org.apache.hadoop.util.functional.CommonCallableSupplier:waitForCompletion(java.util.List)" : {
    "allOf" : 1,
    "toArray" : 1,
    "isEmpty" : 1,
    "waitForCompletion" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:ensureInitialized()" : {
    "isInitialized" : 2,
    "initialize" : 1
  },
  "org.apache.hadoop.fs.FSBuilder:opt(java.lang.String,float)" : {
    "optLong" : 1
  },
  "org.apache.hadoop.security.Groups$GroupCacheLoader:load(java.lang.String)" : {
    "add" : 1,
    "newScope" : 1,
    "debug" : 1,
    "curThreadTracer" : 1,
    "fetchGroupSet" : 1,
    "isEmpty" : 1,
    "noGroupsForUser" : 1,
    "isNegativeCacheEnabled" : 1,
    "close" : 1,
    "addKVAnnotation" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:newMBeanName(java.lang.String)" : {
    "newObjectName" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:compareTo(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:retryUpToMaximumCountWithFixedSleep(int,long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.metrics2.sink.GraphiteSink:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:add(org.apache.hadoop.fs.impl.prefetch.BlockOperations$Operation)" : {
    "add" : 1,
    "getDebugInfo" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:hasCodec(java.lang.String)" : {
    "getCoderNames" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:constructRpcRequest(java.lang.reflect.Method,com.google.protobuf.Message)" : {
    "constructRpcRequestHeader" : 1
  },
  "org.apache.hadoop.fs.shell.Ls:processPathArgument(org.apache.hadoop.fs.shell.PathData)" : {
    "getErasureCodingPolicy" : 1,
    "processPathArgument" : 1,
    "getContentSummary" : 1,
    "isDisplayECPolicy" : 1,
    "recursePath" : 1,
    "isDirectory" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticator:<init>()" : { },
  "org.apache.hadoop.fs.FileSystem:getFSofPath(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : {
    "toUri" : 1,
    "get" : 1,
    "checkNotSchemeWithRelative" : 1,
    "checkNotRelative" : 1
  },
  "org.apache.hadoop.fs.Options$CreateOpts:perms(org.apache.hadoop.fs.permission.FsPermission)" : { },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : {
    "getValue" : 1,
    "getOption" : 1,
    "prependOptions" : 1,
    "compression" : 1,
    "getDefaultCompressionType" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:sortByDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int,java.util.function.Consumer,boolean)" : {
    "add" : 1,
    "getRandom" : 1,
    "getWeight" : 1,
    "values" : 1,
    "computeIfAbsent" : 1,
    "checkState" : 1,
    "getWeightUsingNetworkLocation" : 1,
    "shuffle" : 1,
    "accept" : 1
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm:returnCompressor(org.apache.hadoop.io.compress.Compressor)" : {
    "returnCompressor" : 1,
    "debug" : 1,
    "hashCode" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.fs.FileUtil:readLink(java.io.File)" : {
    "execCommand" : 1,
    "warn" : 1,
    "trim" : 1,
    "getReadlinkCommand" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.net.NetworkTopology:sortByDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int,java.util.function.Consumer)" : {
    "sortByDistance" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:checkAndUpdateMaps()" : {
    "updateMaps" : 1,
    "error" : 1,
    "isExpired" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.fs.LocalDirAllocator:getLocalPathForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration)" : {
    "getLocalPathForWrite" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:<init>(org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode)" : {
    "getNetworkLocation" : 1,
    "getName" : 1
  },
  "org.apache.hadoop.io.DataInputByteBuffer$Buffer:read()" : {
    "read" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "getStoragePolicy" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile:getChunkBufferSize(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1
  },
  "org.apache.hadoop.util.bloom.CountingBloomFilter:<init>()" : { },
  "org.apache.hadoop.io.compress.Lz4Codec:createInputStream(java.io.InputStream)" : {
    "createInputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getGroup()" : {
    "getGroup" : 1
  },
  "org.apache.hadoop.service.AbstractService:getServiceState()" : {
    "getState" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:checkCreateXorRawEncoder()" : {
    "getConf" : 1,
    "createRawEncoder" : 1,
    "getOptions" : 1
  },
  "org.apache.hadoop.io.WritableComparator:<init>(java.lang.Class,boolean)" : { },
  "org.apache.hadoop.fs.FileUtil:setWritable(java.io.File,boolean)" : {
    "getCanonicalPath" : 1,
    "setWritable" : 1,
    "chmod" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:processResult(int,java.lang.String,java.lang.Object,java.lang.String)" : {
    "debug" : 3,
    "becomeStandby" : 1,
    "fatalError" : 1,
    "isStaleClient" : 1,
    "warn" : 1,
    "reJoinElectionAfterFailureToBecomeActive" : 1,
    "isNodeExists" : 1,
    "shouldRetry" : 1,
    "becomeActive" : 1,
    "monitorActiveStatus" : 2,
    "get" : 1,
    "toString" : 1,
    "isDebugEnabled" : 1,
    "createLockNodeAsync" : 1,
    "isSessionExpired" : 1,
    "isSuccess" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getKeyStream()" : {
    "reset" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getModificationTime()" : {
    "getModificationTime" : 1
  },
  "org.apache.hadoop.io.ArrayFile$Reader:get(long,org.apache.hadoop.io.Writable)" : {
    "set" : 1,
    "get" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:checkNativeCodeLoaded()" : {
    "buildSupportsZstd" : 1,
    "isNativeCodeLoaded" : 3
  },
  "org.apache.hadoop.io.MD5Hash:digest(java.lang.String)" : {
    "digest" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.permission.FsCreateModes:hashCode()" : {
    "getUnmasked" : 1,
    "hashCode" : 2
  },
  "org.apache.hadoop.fs.FilterFileSystem:getHomeDirectory()" : {
    "getHomeDirectory" : 1
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.lang.String,int)" : {
    "getSocketFactory" : 1,
    "createSocket" : 1,
    "configureSocket" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache$Key:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : { },
  "org.apache.hadoop.io.retry.RetryPolicies:calculateExponentialTime(long,int)" : {
    "calculateExponentialTime" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer$SyncIntervalOption:<init>(int)" : { },
  "org.apache.hadoop.metrics2.lib.MutableCounterInt:<init>(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "set" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat:reset()" : {
    "reset" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "removeAclEntries" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getValue(byte[],int)" : {
    "read" : 2,
    "readFully" : 1,
    "isValueLengthKnown" : 1,
    "getValueStream" : 1,
    "close" : 1
  },
  "org.apache.hadoop.fs.viewfs.HCFSMountTableConfigLoader:load(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "next" : 1,
    "debug" : 1,
    "getName" : 1,
    "getScheme" : 1,
    "toUri" : 2,
    "hasNext" : 1,
    "getNewInstance" : 1,
    "logInvalidFileNameFormat" : 2,
    "parseInt" : 1,
    "warn" : 1,
    "split" : 1,
    "addResource" : 2,
    "getPath" : 2,
    "isDebugEnabled" : 1,
    "listFiles" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addMaximumFunction(java.lang.String,java.util.function.Function)" : {
    "addFunction" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:setReadahead(java.lang.Long)" : {
    "setReadahead" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:buildChecked(java.lang.Object)" : {
    "bind" : 1,
    "buildChecked" : 1
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:initializeSSLContext(org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory$SSLChannelMode)" : {
    "debug" : 2,
    "getDefault" : 3,
    "bindToOpenSSLProvider" : 2
  },
  "org.apache.hadoop.fs.FileSystem:getLocal(org.apache.hadoop.conf.Configuration)" : {
    "get" : 1
  },
  "org.apache.hadoop.util.Shell:getHadoopHomeDir()" : {
    "toString" : 1,
    "addOsText" : 1,
    "fileNotFoundException" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:<init>(org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator,org.apache.hadoop.security.authentication.client.ConnectionConfigurator)" : {
    "obtainDelegationTokenAuthenticator" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency$RawScriptBasedMappingWithDependency:<init>()" : { },
  "org.apache.hadoop.fs.FilterFs:getDelegationTokens(java.lang.String)" : {
    "getDelegationTokens" : 1
  },
  "org.apache.hadoop.io.DataOutputBuffer:<init>(int)" : { },
  "org.apache.hadoop.fs.FileSystem:createBulkDelete(org.apache.hadoop.fs.Path)" : { },
  "org.apache.hadoop.conf.StorageUnit$7:getDefault(double)" : { },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.fs.FileUtil:fullyDeleteContents(java.io.File)" : {
    "fullyDeleteContents" : 1
  },
  "org.apache.hadoop.net.CachedDNSToSwitchMapping:resolve(java.util.List)" : {
    "getCachedHosts" : 1,
    "cacheResolvedHosts" : 1,
    "resolve" : 1,
    "size" : 1,
    "normalizeHostNames" : 1,
    "isEmpty" : 1,
    "getUncachedHosts" : 1
  },
  "org.apache.hadoop.fs.FileContext:resolveIntermediate(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatus" : 1,
    "resolve" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:emitMetric(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.hadoop.metrics2.sink.ganglia.GangliaConf,org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink$GangliaSlope)" : {
    "emitToGangliaHosts" : 1,
    "warn" : 3,
    "getTmax" : 1,
    "debug" : 1,
    "getHostName" : 1,
    "xdr_int" : 4,
    "getDmax" : 1,
    "getUnits" : 1,
    "name" : 1,
    "xdr_string" : 4,
    "isDebugEnabled" : 1,
    "ordinal" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:streamCapabilities_hasCapability(java.lang.Object,java.lang.String)" : {
    "available" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.tools.GetGroupsBase:<init>(org.apache.hadoop.conf.Configuration,java.io.PrintStream)" : { },
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:executeHeaderState()" : {
    "getValue" : 1,
    "min" : 4,
    "checkAndSkipBytesUntilNull" : 2,
    "checkAndCopyBytesToLocal" : 2,
    "copyBytesToLocal" : 1,
    "reset" : 2,
    "processBasicHeader" : 1,
    "readUShortLE" : 2,
    "checkAndSkipBytes" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getAccessTime()" : {
    "getAccessTime" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : {
    "truncate" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO:getOwner(java.io.FileDescriptor)" : {
    "getUIDforFDOwnerforOwner" : 1,
    "ensureInitialized" : 1,
    "stripDomain" : 1,
    "currentTimeMillis" : 1,
    "get" : 1,
    "getUserName" : 1,
    "getOwner" : 1,
    "put" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileSystem$Cache:closeAll(boolean)" : {
    "add" : 1,
    "contains" : 1,
    "addAll" : 1,
    "get" : 1,
    "isEmpty" : 1,
    "createIOException" : 1,
    "close" : 1,
    "keySet" : 1,
    "remove" : 2
  },
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:createKeyManagersFromConfiguration(org.apache.hadoop.security.ssl.SSLFactory$Mode,java.lang.String,long)" : {
    "schedule" : 1,
    "getPassword" : 2,
    "debug" : 1,
    "resolvePropertyName" : 3,
    "get" : 2,
    "isEmpty" : 2,
    "toString" : 1,
    "loadFrom" : 1,
    "isDebugEnabled" : 1,
    "error" : 1
  },
  "org.apache.hadoop.fs.http.HttpFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "makeQualified" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$DataIndex:<init>(java.lang.String)" : {
    "getCompressionAlgorithmByName" : 1
  },
  "org.apache.hadoop.util.GcTimeMonitor:<init>(long,long,int,org.apache.hadoop.util.GcTimeMonitor$GcTimeAlertHandler)" : {
    "setName" : 1,
    "setDaemon" : 1,
    "checkArgument" : 4
  },
  "org.apache.hadoop.conf.Configuration:setTimeDuration(java.lang.String,long,java.util.concurrent.TimeUnit)" : {
    "set" : 1,
    "suffix" : 1,
    "unitFor" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:reJoinElection(int)" : {
    "unlock" : 1,
    "sleepFor" : 1,
    "lock" : 1,
    "joinElectionInternal" : 1,
    "terminateConnection" : 1,
    "info" : 2
  },
  "org.apache.hadoop.util.curator.ZKCuratorManager:getZKAuths(org.apache.hadoop.conf.Configuration)" : {
    "getZKAuthInfos" : 1
  },
  "org.apache.hadoop.ipc.RPC:waitForProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,int,org.apache.hadoop.io.retry.RetryPolicy,long)" : {
    "sleep" : 1,
    "currentThread" : 2,
    "getCurrentUser" : 1,
    "isInterrupted" : 1,
    "now" : 2,
    "initCause" : 1,
    "interrupt" : 1,
    "getDefaultSocketFactory" : 1,
    "getProtocolProxy" : 1,
    "info" : 3
  },
  "org.apache.hadoop.security.Credentials:readTokenStorageFile(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : {
    "readTokenStorageStream" : 1,
    "toString" : 1,
    "getFileSystem" : 1,
    "wrapException" : 1,
    "close" : 1,
    "open" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.ipc.RetryCache:setState(org.apache.hadoop.ipc.RetryCache$CacheEntry,boolean)" : {
    "completed" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:login(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : {
    "getLocalHostName" : 1,
    "login" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:checkIfPropertyExists(java.lang.String)" : {
    "containsKey" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:clearStatistics()" : {
    "values" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:forceReloginFromTicketCache()" : {
    "reloginFromTicketCache" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:read(org.apache.hadoop.fs.impl.prefetch.BufferData)" : {
    "readBlock" : 1,
    "getBlockNumber" : 1,
    "error" : 1
  },
  "org.apache.hadoop.security.authorize.ServiceAuthorizationManager:refreshWithLoadedConfiguration(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.authorize.PolicyProvider)" : {
    "getServiceKey" : 3,
    "get" : 8,
    "getHostKey" : 2,
    "getProtocol" : 2,
    "getServices" : 1,
    "put" : 2
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:isIOStatistics(java.lang.Object)" : {
    "ioStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.fs.shell.Command:processArguments(java.util.LinkedList)" : {
    "displayError" : 1,
    "processArgument" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:prepareEncodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : {
    "getOutputBlocks" : 1,
    "checkCreateRSRawEncoder" : 1,
    "checkCreateXorRawEncoder" : 1,
    "getInputBlocks" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination:getLocalDestination(java.util.LinkedList)" : {
    "getConf" : 2,
    "size" : 1,
    "removeLast" : 1
  },
  "org.apache.hadoop.fs.FileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : {
    "setXAttr" : 1,
    "of" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_minimums(java.io.Serializable)" : {
    "applyToIOStatisticsSnapshot" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_retrieve(java.lang.Object)" : {
    "checkIoStatisticsAvailable" : 1,
    "invoke" : 1
  },
  "org.apache.hadoop.ipc.Server$RpcCall:setDeferredError(java.lang.Throwable)" : {
    "getServer" : 1,
    "populateResponseParamsOnError" : 1,
    "currentThread" : 1,
    "getName" : 1,
    "sendDeferedResponse" : 1,
    "setupResponse" : 1,
    "error" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncodingStep:performCoding(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : {
    "performCoding" : 1,
    "toBuffers" : 2
  },
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$1:isSupported()" : { },
  "org.apache.hadoop.fs.FileUtil:getJarsInDirectory(java.lang.String)" : {
    "getJarsInDirectory" : 1
  },
  "org.apache.hadoop.conf.Configuration:getRange(java.lang.String,java.lang.String)" : {
    "get" : 1
  },
  "org.apache.hadoop.io.retry.LossyRetryInvocationHandler:<init>(int,org.apache.hadoop.io.retry.FailoverProxyProvider,org.apache.hadoop.io.retry.RetryPolicy)" : { },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:read()" : {
    "read" : 1,
    "checkEOF" : 1
  },
  "org.apache.hadoop.http.lib.StaticUserWebFilter$StaticUserFilter:init(javax.servlet.FilterConfig)" : {
    "getInitParameter" : 1
  },
  "org.apache.hadoop.io.nativeio.NativeIO:getMemlockLimit()" : {
    "isAvailable" : 1,
    "getMemlockLimit0" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:createFile(org.apache.hadoop.fs.Path)" : {
    "create" : 1,
    "createDataOutputStreamBuilder" : 1,
    "overwrite" : 1
  },
  "org.apache.hadoop.fs.shell.find.ExpressionFactory:createExpression(java.lang.Class,org.apache.hadoop.conf.Configuration)" : {
    "newInstance" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGauge:<init>(org.apache.hadoop.metrics2.MetricsInfo)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:doAsLoginUser(java.security.PrivilegedExceptionAction)" : {
    "doAsUser" : 1,
    "getLoginUser" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:updateInfoCache(java.lang.Iterable)" : {
    "debug" : 2,
    "checkNotNull" : 1,
    "get" : 1,
    "reset" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrRequeueCalls()" : {
    "incr" : 1
  },
  "org.apache.hadoop.fs.VectoredReadUtils:readVectored(org.apache.hadoop.fs.PositionedReadable,java.util.List,java.util.function.IntFunction)" : {
    "setData" : 1,
    "validateAndSortRanges" : 1,
    "readRangeFrom" : 1,
    "empty" : 1
  },
  "org.apache.hadoop.fs.GlobFilter:hasPattern()" : {
    "hasWildcard" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:getFileHarStatus(org.apache.hadoop.fs.Path)" : {
    "get" : 1,
    "makeQualified" : 1,
    "getPathInHar" : 1
  },
  "org.apache.hadoop.fs.permission.UmaskParser:<init>(java.lang.String)" : {
    "combineModes" : 1
  },
  "org.apache.hadoop.conf.Configuration:parse(java.net.URL,boolean)" : {
    "debug" : 1,
    "openConnection" : 1,
    "setUseCaches" : 1,
    "toString" : 1,
    "parse" : 1,
    "isDebugEnabled" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.crypto.key.UserProvider:createKey(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : {
    "serialize" : 1,
    "getSecretKey" : 1,
    "getCipher" : 1,
    "getAttributes" : 1,
    "addSecretKey" : 2,
    "getBitLength" : 3,
    "getDescription" : 1,
    "buildVersionName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:aggregate(org.apache.hadoop.fs.statistics.IOStatistics)" : {
    "getInnerStatistics" : 1,
    "aggregate" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:decryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : {
    "getEncryptionKeyName" : 1,
    "getEncryptedKeyVersion" : 4,
    "createConnection" : 1,
    "checkArgument" : 1,
    "getVersionName" : 2,
    "encodeBase64String" : 2,
    "put" : 4,
    "call" : 1,
    "getMaterial" : 1,
    "parseJSONKeyVersion" : 1,
    "checkNotNull" : 3,
    "setRequestProperty" : 1,
    "equals" : 1,
    "getEncryptedKeyIv" : 2,
    "createURL" : 1,
    "getEncryptionKeyVersionName" : 2
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:read0()" : {
    "setupNoRandPartB" : 1,
    "setupRandPartC" : 1,
    "setupNoRandPartC" : 1,
    "setupRandPartB" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addGauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : {
    "add" : 1,
    "accepts" : 1,
    "name" : 1
  },
  "org.apache.hadoop.fs.permission.RawParser:<init>(java.lang.String)" : {
    "combineModes" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:initialize()" : {
    "compile" : 1,
    "initializeInterceptors" : 1,
    "getVarListInString" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server:processCall(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.ipc.RpcWritable$Buffer,java.lang.String,org.apache.hadoop.ipc.RPC$Server$ProtoClassProtoImpl)" : {
    "init" : 1,
    "getClass" : 2,
    "set" : 3,
    "getDescriptorForType" : 1,
    "getRequestPrototype" : 1,
    "findMethodByName" : 1,
    "setDetailedMetricsName" : 3,
    "getCurCall" : 1,
    "getCause" : 2,
    "getValue" : 1,
    "warn" : 1,
    "callBlockingMethod" : 1,
    "get" : 2,
    "getSimpleName" : 2,
    "deferResponse" : 1,
    "wrap" : 1
  },
  "org.apache.hadoop.metrics2.MetricStringBuilder:add(org.apache.hadoop.metrics2.AbstractMetric)" : {
    "add" : 1,
    "toString" : 1,
    "info" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:resetStreamOffset(long)" : {
    "getPadding" : 1,
    "limit" : 1,
    "clear" : 2,
    "position" : 1,
    "updateDecryptor" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:<init>(java.lang.Class,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : {
    "getProtocolName" : 1,
    "getProtocolVersion" : 1,
    "getClient" : 1
  },
  "org.apache.hadoop.util.functional.CommonCallableSupplier:submit(java.util.concurrent.Executor,java.util.concurrent.Callable)" : {
    "supplyAsync" : 1
  },
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:getProxyGroups()" : {
    "getValue" : 1,
    "getKey" : 1,
    "entrySet" : 1,
    "getGroups" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Merge:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "add" : 1,
    "getDepth" : 1,
    "recursePath" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextImpl:<init>(long,long)" : { },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getEncKeyQueueSize(java.lang.String)" : {
    "getSize" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:read(long,byte[],int,int)" : {
    "getClass" : 1,
    "read" : 1,
    "checkStream" : 1,
    "getCanonicalName" : 1,
    "decrypt" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "size" : 1,
    "toArray" : 1,
    "listStatus" : 1
  },
  "org.apache.hadoop.fs.shell.Ls:initialiseOrderComparator()" : {
    "isUseAtime" : 2,
    "isOrderSize" : 1,
    "isOrderReverse" : 3,
    "getLen" : 2,
    "isOrderTime" : 1,
    "getModificationTime" : 2,
    "getAccessTime" : 2,
    "compareTo" : 3
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getStatus(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getStatus" : 1
  },
  "org.apache.hadoop.ipc.Server$ConnectionManager:startIdleScan()" : {
    "scheduleIdleScanTask" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:mustLong(java.lang.String,long)" : {
    "toString" : 1,
    "must" : 1
  },
  "org.apache.hadoop.fs.permission.FsPermission:createImmutable(short)" : { },
  "org.apache.hadoop.ha.ActiveStandbyElector:zkDoWithRetries(org.apache.hadoop.ha.ActiveStandbyElector$ZKAction)" : {
    "zkDoWithRetries" : 1
  },
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getGroupsIDForUserCommand(java.lang.String)" : {
    "getGroupsIDForUserCommand" : 1
  },
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newFixedThreadPool(int)" : { },
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addCounter(org.apache.hadoop.metrics2.MetricsInfo,long)" : {
    "add" : 1,
    "accepts" : 1,
    "name" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RemoteExceptionDependentRetry:shouldRetry(java.lang.Exception,int,int,boolean)" : {
    "shouldRetry" : 1,
    "get" : 1,
    "getClassName" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:createCompressor()" : {
    "checkNativeCodeLoaded" : 1,
    "getCompressionBufferSize" : 1,
    "getCompressionLevel" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:needsInput()" : {
    "setInputFromSavedData" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.fs.PathAccessDeniedException:<init>(java.lang.String,java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:<init>(org.apache.hadoop.io.compress.zlib.ZlibDecompressor$CompressionHeader,int)" : {
    "init" : 1,
    "allocateDirect" : 2,
    "position" : 1,
    "windowBits" : 1
  },
  "org.apache.hadoop.security.KDiag:failif(boolean,java.lang.String,java.lang.String,java.lang.Object[])" : {
    "fail" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:checkAppend(org.apache.hadoop.fs.FileSystem)" : {
    "append" : 1
  },
  "org.apache.hadoop.util.DiskChecker:checkDirInternal(java.io.File)" : {
    "mkdirsWithExistsCheck" : 1,
    "checkAccessByFileMethods" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager$DelegationTokenSecretManager:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.Text)" : {
    "getLong" : 4
  },
  "org.apache.hadoop.fs.shell.Ls:processPaths(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData[])" : {
    "getOrderComparator" : 1,
    "adjustColumnWidths" : 1,
    "isRecursive" : 1,
    "println" : 1,
    "processPaths" : 1,
    "sort" : 1
  },
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:appendPrefix(org.apache.hadoop.metrics2.MetricsRecord,java.lang.StringBuilder)" : {
    "contains" : 1,
    "containsKey" : 1,
    "get" : 1,
    "name" : 2,
    "context" : 1,
    "value" : 2,
    "append" : 4,
    "info" : 2,
    "tags" : 1
  },
  "org.apache.hadoop.io.compress.PassthroughCodec:createInputStream(java.io.InputStream)" : {
    "createInputStream" : 1
  },
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:newAttrInfo(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : {
    "newAttrInfo" : 1,
    "name" : 1,
    "description" : 1
  },
  "org.apache.hadoop.security.Credentials:<init>(org.apache.hadoop.security.Credentials)" : {
    "addAll" : 1
  },
  "org.apache.hadoop.util.WeakReferenceMap:toString()" : {
    "size" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Reader:nextRaw(org.apache.hadoop.io.DataOutputBuffer,org.apache.hadoop.io.SequenceFile$ValueBytes)" : {
    "readBlock" : 1,
    "readVInt" : 2,
    "getPos" : 1,
    "readRecordLength" : 1,
    "reset" : 3,
    "readInt" : 1,
    "seekToCurrentValue" : 1,
    "write" : 2
  },
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newStat(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : {
    "newStat" : 1
  },
  "org.apache.hadoop.io.MD5Hash:digest(byte[])" : {
    "digest" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:isManagementOperation(javax.servlet.http.HttpServletRequest)" : {
    "contains" : 1,
    "equals" : 1,
    "toUpperCase" : 1,
    "getMethod" : 1,
    "getParameter" : 1
  },
  "org.apache.hadoop.fs.Options$CreateOpts:createParent()" : { },
  "org.apache.hadoop.ipc.DecayRpcScheduler:cachedOrComputedPriorityLevel(java.lang.Object)" : {
    "debug" : 2,
    "computePriorityLevel" : 1,
    "get" : 5
  },
  "org.apache.hadoop.crypto.key.KeyProvider:generateKey(int,java.lang.String)" : {
    "generateKey" : 1,
    "init" : 1,
    "getEncoded" : 1,
    "getAlgorithm" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.io.MD5Hash:digest(org.apache.hadoop.io.UTF8)" : {
    "digest" : 1,
    "getLength" : 1,
    "getBytes" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:minimums()" : {
    "getInnerStatistics" : 1,
    "minimums" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleQuantiles:insert(long)" : {
    "compress" : 1,
    "insertBatch" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getRealAuthenticationMethod(org.apache.hadoop.security.UserGroupInformation)" : {
    "getAuthenticationMethod" : 2,
    "getRealUser" : 1
  },
  "org.apache.hadoop.ipc.Server$Responder:run()" : {
    "doRunLoop" : 1,
    "currentThread" : 3,
    "set" : 1,
    "getName" : 3,
    "error" : 1,
    "close" : 1,
    "info" : 2
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$RpcProtobufRequest:<init>(org.apache.hadoop.ipc.protobuf.ProtobufRpcEngine2Protos$RequestHeaderProto,org.apache.hadoop.thirdparty.protobuf.Message)" : { },
  "org.apache.hadoop.security.UserGroupInformation:getRealUserOrSelf(org.apache.hadoop.security.UserGroupInformation)" : {
    "getRealUser" : 1
  },
  "org.apache.hadoop.io.Text:equals(java.lang.Object)" : {
    "equals" : 1
  },
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : {
    "getProtocolVersion" : 1,
    "isMethodSupported" : 1
  },
  "org.apache.hadoop.fs.shell.CopyCommands$Put:expandArgument(java.lang.String)" : {
    "add" : 2,
    "getConf" : 2
  },
  "org.apache.hadoop.fs.shell.XAttrCommands$SetfattrCommand:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "setXAttr" : 1,
    "removeXAttr" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:toString()" : {
    "toString" : 3,
    "append" : 5
  },
  "org.apache.hadoop.security.token.DtUtilShell:maybeDoLoginFromKeytabAndPrincipal(java.lang.String[])" : {
    "add" : 1,
    "warn" : 1,
    "size" : 1,
    "equals" : 2,
    "toArray" : 1,
    "loginUserFromKeytab" : 1
  },
  "org.apache.hadoop.io.DataOutputBuffer:<init>()" : { },
  "org.apache.hadoop.ipc.Server:getRemoteAddress()" : {
    "getHostAddress" : 1,
    "getRemoteIp" : 1
  },
  "org.apache.hadoop.service.launcher.InterruptEscalator:register(java.lang.String)" : {
    "add" : 1,
    "bind" : 1
  },
  "org.apache.hadoop.security.SaslOutputStream:write(byte[],int,int)" : {
    "writeInt" : 1,
    "toByteArray" : 1,
    "disposeSasl" : 1,
    "wrap" : 2,
    "write" : 3
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawDecoder:preferDirectBuffer()" : { },
  "org.apache.hadoop.io.compress.PassthroughCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : { },
  "org.apache.hadoop.security.RuleBasedLdapGroupsMapping:getGroups(java.lang.String)" : {
    "stream" : 2,
    "toList" : 2,
    "map" : 2,
    "collect" : 2,
    "getGroups" : 1
  },
  "org.apache.hadoop.util.LineReader:readLine(org.apache.hadoop.io.Text)" : {
    "readLine" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:seekInternal(org.apache.hadoop.io.WritableComparable,boolean)" : {
    "next" : 2,
    "compare" : 3,
    "getPosition" : 1,
    "newKey" : 1,
    "readIndex" : 1,
    "binarySearch" : 1,
    "seek" : 3
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:close()" : {
    "deleteCacheFiles" : 1,
    "getStats" : 1,
    "debug" : 1,
    "compareAndSet" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:write(byte[],int,int)" : {
    "min" : 1,
    "remainingCapacity" : 1,
    "write" : 2
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:invalidateCache(java.lang.String)" : {
    "call" : 1,
    "checkNotEmpty" : 1,
    "createConnection" : 1,
    "createURL" : 1,
    "drain" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:getLocalPathForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration,boolean)" : {
    "set" : 1,
    "debug" : 2,
    "getAndIncrDirNumLastAccessed" : 2,
    "getDirPath" : 1,
    "getMessage" : 1,
    "nextInt" : 1,
    "nextLong" : 1,
    "substring" : 1,
    "mkdirs" : 1,
    "createPath" : 2,
    "confChanged" : 1,
    "getAvailable" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:counters()" : {
    "counters" : 1,
    "getWrapped" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:updateStaticMapping()" : {
    "parseStaticMap" : 1,
    "clear" : 1,
    "exists" : 1,
    "lastModified" : 1,
    "info" : 2
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:allowChangeInputs()" : {
    "allowChangeInputs" : 1
  },
  "org.apache.hadoop.ipc.Server:getNumOpenConnections()" : {
    "size" : 1
  },
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String,int,java.lang.String,boolean,boolean)" : {
    "createUnresolved" : 1,
    "contains" : 1,
    "createSocketAddrForHost" : 1,
    "getPort" : 1,
    "trim" : 1,
    "isEmpty" : 1,
    "getPath" : 1,
    "createURI" : 1,
    "getHost" : 1
  },
  "org.apache.hadoop.fs.VectoredReadUtils:readNonByteBufferPositionedReadable(org.apache.hadoop.fs.PositionedReadable,org.apache.hadoop.fs.FileRange,java.nio.ByteBuffer)" : {
    "debug" : 2,
    "array" : 1,
    "readFully" : 2,
    "getOffset" : 1,
    "getLength" : 1,
    "arrayOffset" : 1,
    "flip" : 1,
    "isDirect" : 1,
    "readInDirectBuffer" : 1
  },
  "org.apache.hadoop.fs.GlobFilter:<init>(java.lang.String)" : {
    "init" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies:failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy,int,int,long,long)" : { },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getProcessingMean()" : {
    "mean" : 1,
    "lastStat" : 1
  },
  "org.apache.hadoop.ipc.ResponseBuffer:writeTo(java.io.OutputStream)" : {
    "writeTo" : 1,
    "getFramedBuffer" : 1
  },
  "org.apache.hadoop.security.token.DtUtilShell$Get:execute()" : {
    "getConf" : 1,
    "getTokenFile" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$WrappingRemoteIterator:sourceNext()" : {
    "next" : 1,
    "getSource" : 1,
    "sourceHasNext" : 1,
    "cleanupWithLogger" : 1
  },
  "org.apache.hadoop.util.StringUtils:stringToPath(java.lang.String[])" : { },
  "org.apache.hadoop.fs.ftp.FTPInputStream:read(byte[],int,int)" : {
    "read" : 1,
    "incrementBytesRead" : 1
  },
  "org.apache.hadoop.fs.FilterFs:getEnclosingRoot(org.apache.hadoop.fs.Path)" : {
    "getEnclosingRoot" : 1
  },
  "org.apache.hadoop.fs.FSDataInputStream:releaseBuffer(java.nio.ByteBuffer)" : {
    "putBuffer" : 1,
    "releaseBuffer" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:checkHealth(org.apache.commons.cli.CommandLine)" : {
    "createReqInfo" : 1,
    "println" : 2,
    "getConf" : 1,
    "getLocalizedMessage" : 1,
    "getProxy" : 1,
    "resolveTarget" : 1,
    "printUsage" : 1,
    "getArgs" : 1,
    "monitorHealth" : 1
  },
  "org.apache.hadoop.util.ClassUtil:findClassLocation(java.lang.Class)" : {
    "getName" : 1,
    "findContainingResource" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.net.SocketIOWithTimeout:waitForIO(int)" : {
    "timeoutExceptionString" : 1,
    "select" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:bsGetUByte()" : {
    "bsR" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:add(int,int)" : {
    "getFieldSize" : 2
  },
  "org.apache.hadoop.util.XMLUtils:newSecureSAXTransformerFactory()" : {
    "setFeature" : 1,
    "setOptionalSecureTransformerAttributes" : 1,
    "newInstance" : 1
  },
  "org.apache.hadoop.fs.viewfs.InodeTree:resolve(java.lang.String,boolean)" : {
    "isLink" : 1,
    "resolveInternal" : 1,
    "getRootFallbackLink" : 1,
    "isInternalDir" : 4,
    "getRemainingPath" : 4,
    "getTargetFileSystem" : 6,
    "getLink" : 2,
    "hasFallbackLink" : 1,
    "tryResolveInRegexMountpoint" : 1,
    "getRootLink" : 2,
    "checkState" : 1,
    "getInternalDirFs" : 2,
    "toString" : 2,
    "getRootDir" : 2,
    "breakIntoPathComponents" : 1,
    "append" : 4
  },
  "org.apache.hadoop.fs.AbstractFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getFileStatus" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.util.Shell:getWinUtilsFile()" : {
    "toString" : 1,
    "fileNotFoundException" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],java.lang.String[],long,long)" : { },
  "org.apache.hadoop.fs.FilterFs:supportsSymlinks()" : {
    "supportsSymlinks" : 1
  },
  "org.apache.hadoop.fs.shell.Mkdir:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "toString" : 2,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.hash.JenkinsHash:hash(byte[],int,int)" : {
    "rot" : 13
  },
  "org.apache.hadoop.fs.permission.FsPermission:setUMask(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.permission.FsPermission)" : {
    "set" : 1,
    "format" : 1,
    "toShort" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableGaugeInt:incr()" : {
    "incr" : 1
  },
  "org.apache.hadoop.util.Lists:newArrayList(java.lang.Iterable)" : {
    "cast" : 1,
    "iterator" : 1,
    "newArrayList" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:getUGIFromTicketCache(java.lang.String,java.lang.String)" : {
    "doSubjectLogin" : 1,
    "isAuthenticationMethodEnabled" : 1,
    "put" : 2,
    "getBestUGI" : 1
  },
  "org.apache.hadoop.fs.FsShell:getFS()" : {
    "getConf" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.FileContext:removeDefaultAcl(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "removeDefaultAcl" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations$End:getSummary(java.lang.StringBuilder)" : {
    "getSummary" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:fullPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "isRoot" : 1,
    "toUri" : 1,
    "getPath" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$RealUser:toString()" : {
    "toString" : 1
  },
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:initFileSystem(java.net.URI)" : {
    "unnestUri" : 1,
    "debug" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec:createCompressor()" : {
    "getBzip2Compressor" : 1
  },
  "org.apache.hadoop.ha.ActiveStandbyElector:toString()" : {
    "identityHashCode" : 1,
    "byteToHexString" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:prepareMetaBlock(java.lang.String,java.lang.String)" : {
    "prepareMetaBlock" : 1,
    "name" : 1,
    "finishDataBlock" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping$RawScriptBasedMapping:<init>()" : { },
  "org.apache.hadoop.io.SequenceFile$Reader:openFile(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,int,long)" : {
    "opt" : 2,
    "openFile" : 1,
    "build" : 1,
    "optLong" : 1,
    "awaitFuture" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "getShortUserName" : 1,
    "getPrimaryGroupName" : 1,
    "makeQualified" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.util.functional.FutureIO:raiseInnerCause(java.util.concurrent.ExecutionException)" : {
    "unwrapInnerException" : 1
  },
  "org.apache.hadoop.fs.permission.ScopedAclEntries:<init>(java.util.List)" : {
    "subList" : 2,
    "emptyList" : 2,
    "size" : 1,
    "calculatePivotOnDefaultEntries" : 1
  },
  "org.apache.hadoop.security.token.Token:<init>(org.apache.hadoop.security.token.Token)" : {
    "clone" : 2
  },
  "org.apache.hadoop.fs.shell.find.Name:<init>(boolean)" : {
    "setCaseSensitive" : 1,
    "setHelp" : 1,
    "setUsage" : 1
  },
  "org.apache.hadoop.conf.Configuration:getLocalPath(java.lang.String,java.lang.String)" : {
    "warn" : 2,
    "getParent" : 1,
    "getLocal" : 1,
    "hashCode" : 1,
    "mkdirs" : 1,
    "getTrimmedStrings" : 1,
    "exists" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:needsInput()" : {
    "setInputFromSavedData" : 1,
    "remaining" : 1
  },
  "org.apache.hadoop.security.ShellBasedIdMapping:updateMapIncr(int,boolean)" : {
    "monotonicNow" : 1,
    "contains" : 1,
    "getId2NameCmdMac" : 2,
    "updateStaticMapping" : 1,
    "checkSupportedPlatform" : 1,
    "equals" : 1,
    "getId2NameCmdNIX" : 2,
    "updateMapInternal" : 4,
    "startsWith" : 1
  },
  "org.apache.hadoop.crypto.JceCtrCryptoCodec$JceCtrCipher:init(byte[],byte[])" : {
    "init" : 1,
    "checkNotNull" : 2
  },
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:read(long,byte[],int,int)" : {
    "read" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getUniqueIdentityCount()" : {
    "getUniqueIdentityCount" : 1,
    "get" : 1
  },
  "org.apache.hadoop.fs.FileContext:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : {
    "resolve" : 1,
    "createSymlink" : 1,
    "fixRelativePart" : 1,
    "areSymlinksEnabled" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:removeExpiredKeys()" : {
    "next" : 1,
    "getValue" : 3,
    "iterator" : 1,
    "entrySet" : 1,
    "getExpiryDate" : 1,
    "equals" : 1,
    "now" : 1,
    "removeStoredMasterKey" : 1,
    "hasNext" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsContext:enabled()" : {
    "isIOStatisticsThreadLevelEnabled" : 1
  },
  "org.apache.hadoop.util.functional.RemoteIterators$HaltableRemoteIterator:hasNext()" : {
    "sourceHasNext" : 1
  },
  "org.apache.hadoop.ipc.Server$Call:<init>(org.apache.hadoop.ipc.Server$Call)" : { },
  "org.apache.hadoop.ha.HAServiceTarget:getFencingParameters()" : {
    "newHashMap" : 1,
    "addFencingParameters" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getNetworkBytesRead()" : {
    "readProcNetInfoFile" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.DecodingState:checkParameters(java.lang.Object[],int[],java.lang.Object[])" : {
    "getNumDataUnits" : 1,
    "getNumParityUnits" : 2
  },
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getKeys()" : {
    "doOp" : 1,
    "getKeys" : 1,
    "nextIdx" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:getLong(java.lang.String)" : {
    "counters" : 1,
    "get" : 2,
    "gauges" : 1
  },
  "org.apache.hadoop.crypto.JceSm4CtrCryptoCodec:createEncryptor()" : {
    "getCipherSuite" : 1,
    "getProvider" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:comparator(org.apache.hadoop.io.WritableComparator)" : { },
  "org.apache.hadoop.fs.FilterFs:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : {
    "checkPath" : 1,
    "getFileBlockLocations" : 1
  },
  "org.apache.hadoop.conf.Configuration:setDeprecatedProperties()" : {
    "getValue" : 1,
    "getKey" : 1,
    "contains" : 1,
    "getProperty" : 1,
    "entrySet" : 1,
    "setProperty" : 2,
    "getProps" : 1,
    "get" : 1,
    "getOverlay" : 1,
    "getDeprecatedKeyMap" : 1
  },
  "org.apache.hadoop.io.WritableComparator:readFloat(byte[],int)" : {
    "intBitsToFloat" : 1,
    "readInt" : 1
  },
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getNumErasedBlocks(org.apache.hadoop.io.erasurecode.ECBlock[])" : {
    "isErased" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getXAttrs(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getXAttrs" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:<init>(org.apache.hadoop.fs.FileSystem)" : {
    "getRenewToken" : 1,
    "updateRenewalTime" : 1
  },
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean)" : {
    "getInt" : 1,
    "getConf" : 1,
    "getDefaultReplication" : 1,
    "create" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.io.wrappedio.WrappedIO:bulkDelete_delete(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.util.Collection)" : {
    "createBulkDelete" : 1,
    "bulkDelete" : 1,
    "uncheckIOExceptions" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:getMessage(org.apache.hadoop.thirdparty.protobuf.Message,org.apache.hadoop.ipc.RpcWritable$Buffer)" : {
    "getValue" : 1,
    "getClass" : 1,
    "getSimpleName" : 1
  },
  "org.apache.hadoop.fs.shell.CommandWithDestination$TargetFileSystem:rename(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : {
    "rename" : 1,
    "setOperation" : 2,
    "cancelDeleteOnExit" : 1,
    "toString" : 3,
    "setTargetPath" : 1,
    "delete" : 1
  },
  "org.apache.hadoop.fs.BlockLocation:setStorageIds(java.lang.String[])" : {
    "internStringsInArray" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getAllStoragePolicies()" : {
    "getAllStoragePolicies" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:listStatus(org.apache.hadoop.fs.Path)" : {
    "disconnect" : 1,
    "listStatus" : 1,
    "connect" : 1
  },
  "org.apache.hadoop.fs.FileContext:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "modifyAclEntries" : 1
  },
  "org.apache.hadoop.util.InstrumentedLock:tryLock(long,java.util.concurrent.TimeUnit)" : {
    "monotonicNow" : 2,
    "check" : 1,
    "startLockTiming" : 1,
    "tryLock" : 1
  },
  "org.apache.hadoop.fs.LocalDirAllocator:getCurrentDirectoryIndex()" : {
    "obtainContext" : 1,
    "getCurrentDirectoryIndex" : 1
  },
  "org.apache.hadoop.util.InstrumentedWriteLock:startLockTiming()" : {
    "monotonicNow" : 1,
    "getWriteHoldCount" : 1,
    "getTimer" : 1
  },
  "org.apache.hadoop.io.IOUtils:copyBytes(java.io.InputStream,java.io.OutputStream,org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "copyBytes" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getPath" : 1,
    "getFileBlockLocations" : 1
  },
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndex:<init>(java.io.DataInput)" : {
    "readVInt" : 1,
    "getMetaName" : 1,
    "put" : 1
  },
  "org.apache.hadoop.fs.HarFileSystem:fileStatusesInIndex(org.apache.hadoop.fs.HarFileSystem$HarStatus,java.util.List)" : {
    "add" : 1,
    "getName" : 1,
    "get" : 1,
    "endsWith" : 1,
    "toFileStatus" : 1
  },
  "org.apache.hadoop.fs.FSInputChecker:skip(long)" : {
    "getPos" : 1,
    "seek" : 1
  },
  "org.apache.hadoop.ipc.RPC:stopProxy(java.lang.Object)" : {
    "getClass" : 2,
    "getName" : 1,
    "getInvocationHandler" : 1,
    "error" : 2,
    "close" : 2
  },
  "org.apache.hadoop.security.SaslPlainServer$SaslPlainServerFactory:createSaslServer(java.lang.String,java.lang.String,java.lang.String,java.util.Map,javax.security.auth.callback.CallbackHandler)" : {
    "equals" : 1
  },
  "org.apache.hadoop.service.LoggingStateChangeListener:<init>()" : { },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:listStatus(org.apache.hadoop.fs.Path)" : {
    "mayThrowFileNotFound" : 2,
    "contains" : 1,
    "workSet" : 1,
    "processThrowable" : 4,
    "getFs" : 2,
    "listStatus" : 1,
    "createIOException" : 1,
    "sort" : 1,
    "updateFileStatus" : 1
  },
  "org.apache.hadoop.io.MD5Hash:digest(java.io.InputStream)" : {
    "getDigester" : 1,
    "read" : 1,
    "digest" : 1,
    "update" : 1
  },
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:removeSourceName(java.lang.String)" : {
    "removeSource" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getDelegationToken(java.lang.String)" : {
    "getActualUgi" : 1,
    "setService" : 1,
    "doAs" : 1,
    "currentThread" : 1,
    "debug" : 1,
    "getDoAsUser" : 1,
    "interrupt" : 1,
    "createURL" : 1,
    "getDelegationToken" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.BloomMapFile$Reader:get(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : {
    "get" : 1,
    "probablyHasKey" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,double)" : {
    "optLong" : 1
  },
  "org.apache.hadoop.fs.FileUtil:unZip(java.io.File,java.io.File)" : {
    "getCanonicalPath" : 2,
    "read" : 1,
    "getName" : 2,
    "getInputStream" : 1,
    "toPath" : 2,
    "setPosixFilePermissions" : 1,
    "getEntries" : 1,
    "hasMoreElements" : 1,
    "newOutputStream" : 1,
    "mkdirs" : 1,
    "getParentFile" : 3,
    "toString" : 1,
    "getUnixMode" : 1,
    "write" : 1,
    "close" : 3,
    "permissionsFromMode" : 1,
    "getPlatform" : 1,
    "isDirectory" : 2,
    "startsWith" : 1,
    "nextElement" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:getDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String,java.lang.String)" : {
    "getAuthenticator" : 1,
    "checkNotNull" : 2,
    "getDelegationToken" : 1
  },
  "org.apache.hadoop.fs.BufferedFSInputStream:minSeekForVectorReads()" : {
    "minSeekForVectorReads" : 1
  },
  "org.apache.hadoop.fs.FileSystem:copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getConf" : 1,
    "getLocal" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getFileChecksum(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getFileChecksum" : 1
  },
  "org.apache.hadoop.io.IntWritable:<init>(int)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.FileContext:setWorkingDirectory(org.apache.hadoop.fs.Path)" : {
    "isFile" : 1,
    "checkNotSchemeWithRelative" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.FileUtil:unTarUsingTar(java.io.InputStream,java.io.File,boolean)" : {
    "makeSecureShellPath" : 1,
    "toString" : 1,
    "runCommandOnStream" : 1,
    "append" : 6
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "getConf" : 1,
    "getLocal" : 1,
    "copy" : 1
  },
  "org.apache.hadoop.util.DiskChecker:checkDir(java.io.File)" : {
    "checkDirInternal" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : {
    "satisfyStoragePolicy" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(java.io.InputStream,java.lang.String)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.fs.shell.PathData:hashCode()" : {
    "hashCode" : 1
  },
  "org.apache.hadoop.net.NetUtils:connect(java.net.Socket,java.net.SocketAddress,java.net.SocketAddress,int)" : {
    "getInetAddress" : 1,
    "getClass" : 2,
    "getLocalPort" : 1,
    "getMessage" : 1,
    "checkArgument" : 1,
    "getLocalAddress" : 1,
    "getPort" : 1,
    "bind" : 1,
    "getChannel" : 1,
    "equals" : 2,
    "toString" : 1,
    "close" : 1,
    "connect" : 2,
    "info" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : {
    "fixFileStatus" : 1,
    "resolve" : 1,
    "makeQualified" : 1,
    "getUriPath" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.crypto.CryptoStreamUtils:checkCodec(org.apache.hadoop.crypto.CryptoCodec)" : {
    "getCipherSuite" : 2
  },
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSOutputSummer:close()" : {
    "flushBuffer" : 1,
    "close" : 2
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "create" : 1
  },
  "org.apache.hadoop.ipc.ProtocolProxy:isMethodSupported(java.lang.String,java.lang.Class[])" : {
    "contains" : 1,
    "fetchServerMethods" : 1,
    "valueOf" : 1,
    "getDeclaredMethod" : 1,
    "getFingerprint" : 1
  },
  "org.apache.hadoop.io.retry.DefaultFailoverProxyProvider:close()" : {
    "stopProxy" : 1
  },
  "org.apache.hadoop.io.MapFile$Writer:progressable(org.apache.hadoop.util.Progressable)" : {
    "progressable" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:multiply(int,int)" : {
    "getFieldSize" : 2
  },
  "org.apache.hadoop.fs.DU:refresh()" : {
    "warn" : 1,
    "startRefresh" : 1,
    "getDirPath" : 1
  },
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : {
    "tuple" : 1,
    "name" : 1
  },
  "org.apache.hadoop.io.WritableComparator:readDouble(byte[],int)" : {
    "readLong" : 1,
    "longBitsToDouble" : 1
  },
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:shutdown()" : {
    "instance" : 1,
    "unregisterSource" : 1
  },
  "org.apache.hadoop.fs.TrashPolicyDefault:deleteCheckpointsImmediately()" : {
    "deleteCheckpoint" : 1
  },
  "org.apache.hadoop.net.NetUtils:getDefaultSocketFactory(org.apache.hadoop.conf.Configuration)" : {
    "getSocketFactoryFromProperty" : 1,
    "get" : 1,
    "length" : 1,
    "getDefault" : 1
  },
  "org.apache.hadoop.fs.FileContext:checkDest(java.lang.String,org.apache.hadoop.fs.Path,boolean)" : {
    "checkDest" : 1,
    "getFileStatus" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.util.SysInfoLinux:getNumProcessors()" : {
    "readProcCpuInfoFile" : 1
  },
  "org.apache.hadoop.metrics2.util.MetricsCache:<init>()" : { },
  "org.apache.hadoop.ipc.Client$Connection:close()" : {
    "warn" : 1,
    "getName" : 1,
    "debug" : 2,
    "closeStream" : 1,
    "get" : 1,
    "isEmpty" : 1,
    "disposeSasl" : 1,
    "getMessage" : 1,
    "isDebugEnabled" : 2,
    "cleanupCalls" : 2,
    "error" : 1,
    "closeConnection" : 1,
    "accept" : 1
  },
  "org.apache.hadoop.ipc.ClientCache:stopClient(org.apache.hadoop.ipc.Client)" : {
    "getSocketFactory" : 1,
    "debug" : 3,
    "stop" : 1,
    "isDebugEnabled" : 3,
    "remove" : 1,
    "decAndGetCount" : 1
  },
  "org.apache.hadoop.security.SaslRpcServer:<init>(org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : {
    "getCurrentUser" : 1,
    "split" : 1,
    "debug" : 1,
    "getMechanismName" : 1,
    "getUserName" : 1,
    "isDebugEnabled" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:impl(java.lang.String,java.lang.Class[])" : {
    "impl" : 1
  },
  "org.apache.hadoop.fs.FileContext:open(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "open" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:setConf(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "checkState" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setTimes(org.apache.hadoop.fs.Path,long,long)" : {
    "readOnlyMountTable" : 1,
    "checkPathIsSlash" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "getFileStatus" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils:logThreadInfo(org.apache.commons.logging.Log,java.lang.String,long)" : {
    "monotonicNow" : 1,
    "printThreadInfo" : 1,
    "isInfoEnabled" : 1,
    "name" : 1,
    "toString" : 1,
    "info" : 1
  },
  "org.apache.hadoop.ipc.FairCallQueue:<init>(int,int,java.lang.String,int[],boolean,org.apache.hadoop.conf.Configuration)" : {
    "add" : 3,
    "getInstance" : 1,
    "setDelegate" : 1,
    "info" : 1
  },
  "org.apache.hadoop.crypto.JceCtrCryptoCodec:calculateIV(byte[],long,byte[],int)" : {
    "checkArgument" : 2
  },
  "org.apache.hadoop.io.erasurecode.codec.HHXORErasureCodec:createDecoder()" : {
    "getCoderOptions" : 1
  },
  "org.apache.hadoop.fs.shell.find.Find:postProcessPath(org.apache.hadoop.fs.shell.PathData)" : {
    "applyItem" : 1,
    "isDepthFirst" : 1,
    "getOptions" : 1
  },
  "org.apache.hadoop.ipc.DecayRpcScheduler:computePriorityLevel(long,java.lang.Object)" : {
    "isServiceUser" : 1,
    "intValue" : 1,
    "get" : 2
  },
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:noPasswordWarning()" : {
    "noPasswordWarning" : 1
  },
  "org.apache.hadoop.fs.shell.Command:displayWarning(java.lang.String)" : {
    "println" : 1,
    "getName" : 1
  },
  "org.apache.hadoop.net.NodeBase:locationToDepth(java.lang.String)" : {
    "normalize" : 1,
    "length" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.fs.FsShell:createOptionTableListing()" : {
    "wrapWidth" : 1,
    "build" : 1,
    "addField" : 2
  },
  "org.apache.hadoop.fs.FilterFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "createNonRecursive" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation:addToken(org.apache.hadoop.io.Text,org.apache.hadoop.security.token.Token)" : {
    "addToken" : 1,
    "getCredentialsInternal" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:getBytesRead()" : {
    "checkStream" : 1,
    "getBytesRead" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:encodeData(byte[],int,byte[][],int[],byte[][],int[])" : {
    "gfMulTab" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:getCodecClassName(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "get" : 5
  },
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:skip(long)" : {
    "getFileLength" : 1,
    "getPos" : 1,
    "skip" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:bufferSize(int)" : {
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.fs.impl.FSBuilderSupport:getPositiveLong(java.lang.String,long)" : {
    "getLong" : 1,
    "debug" : 1
  },
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall:isDone()" : {
    "set" : 1,
    "getState" : 2,
    "debug" : 1,
    "checkState" : 1,
    "invokeOnce" : 2,
    "getCallId" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSTokenRenewer:renew(org.apache.hadoop.security.token.Token,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 1,
    "createKeyProvider" : 1,
    "debug" : 1,
    "renewDelegationToken" : 1,
    "format" : 1,
    "close" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:setInput(byte[],int,int)" : {
    "setInputFromSavedData" : 1,
    "limit" : 1,
    "position" : 1
  },
  "org.apache.hadoop.fs.shell.Stat:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : {
    "addClass" : 1
  },
  "org.apache.hadoop.fs.FilterFs:listLocatedStatus(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "listLocatedStatus" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:<init>(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : {
    "set" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsCollectorImpl:getRecords()" : {
    "add" : 1,
    "size" : 1,
    "getRecord" : 1,
    "newArrayListWithCapacity" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:incrementMinimum(java.lang.String,long)" : {
    "getInnerStatistics" : 1,
    "incrementMinimum" : 1
  },
  "org.apache.hadoop.fs.shell.find.And:apply(org.apache.hadoop.fs.shell.PathData,int)" : {
    "getChildren" : 1,
    "apply" : 1,
    "isPass" : 1,
    "combine" : 1
  },
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:createCuratorClient(org.apache.hadoop.conf.Configuration,java.lang.String)" : {
    "withKeystore" : 1,
    "withSessionTimeout" : 1,
    "withNamespace" : 1,
    "withPrincipal" : 1,
    "withAuthType" : 1,
    "withTruststorePassword" : 1,
    "withJaasLoginEntryName" : 1,
    "withZookeeperFactory" : 1,
    "configure" : 1,
    "withConnectionTimeout" : 1,
    "withTruststore" : 1,
    "enableSSL" : 1,
    "getInt" : 3,
    "withRetryPolicy" : 1,
    "withKeystorePassword" : 1,
    "trim" : 2,
    "withKeytab" : 1,
    "get" : 15,
    "withConnectionString" : 1,
    "getServerPrincipal" : 1,
    "create" : 1,
    "getBoolean" : 2
  },
  "org.apache.hadoop.net.SocketInputStream:<init>(java.net.Socket)" : {
    "getChannel" : 1,
    "getSoTimeout" : 1
  },
  "org.apache.hadoop.security.ssl.ReloadingX509TrustManager:loadFrom(java.nio.file.Path)" : {
    "set" : 1,
    "loadTrustManager" : 1
  },
  "org.apache.hadoop.fs.LocalFileSystem:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatus" : 1
  },
  "org.apache.hadoop.fs.FileStatus:compareTo(java.lang.Object)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.util.ConfTest:listFiles(java.io.File)" : {
    "getName" : 1,
    "isFile" : 1,
    "endsWith" : 1,
    "listFiles" : 1
  },
  "org.apache.hadoop.security.alias.UserProvider:<init>()" : {
    "getCurrentUser" : 1,
    "getCredentials" : 1
  },
  "org.apache.hadoop.io.file.tfile.CompareUtils$BytesComparator:compare(org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : {
    "compare" : 1,
    "size" : 2,
    "offset" : 2,
    "buffer" : 2
  },
  "org.apache.hadoop.io.retry.RetryPolicies:retryByException(org.apache.hadoop.io.retry.RetryPolicy,java.util.Map)" : { },
  "org.apache.hadoop.fs.FsShellPermissions$Chown:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "debug" : 1,
    "getGroup" : 1,
    "equals" : 2,
    "getMessage" : 1,
    "getOwner" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withMutableCounter(java.lang.String,org.apache.hadoop.metrics2.lib.MutableCounterLong)" : {
    "withLongFunctionCounter" : 1,
    "value" : 1
  },
  "org.apache.hadoop.io.MD5Hash:hashCode()" : {
    "quarterDigest" : 1
  },
  "org.apache.hadoop.security.SaslInputStream:read(byte[],int,int)" : {
    "read" : 1,
    "arraycopy" : 1,
    "readMoreData" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleStat:add(double)" : {
    "add" : 2
  },
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:incrCacheHit()" : {
    "incr" : 1
  },
  "org.apache.hadoop.security.UserGroupInformation$UgiMetrics:reattach()" : {
    "create" : 1
  },
  "org.apache.hadoop.crypto.key.UserProvider:getKeyVersions(java.lang.String)" : {
    "add" : 1,
    "getKeyVersion" : 1,
    "getMetadata" : 1,
    "getVersions" : 1,
    "buildVersionName" : 1
  },
  "org.apache.hadoop.fs.Options$CreateOpts:checksumParam(org.apache.hadoop.fs.Options$ChecksumOpt)" : { },
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:getCandidateTokensForCleanup()" : {
    "getValue" : 1,
    "getKey" : 1,
    "size" : 1,
    "entrySet" : 1,
    "getTokenRenewInterval" : 1,
    "now" : 1,
    "selectStaleTokenInfos" : 1,
    "error" : 1,
    "createTokenIdent" : 1,
    "put" : 1,
    "createTokenInfo" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.LdapGroupsMapping$LdapSslSocketFactory:createKeyStore(java.lang.String,java.lang.String)" : {
    "load" : 1,
    "getPasswordCharArray" : 1,
    "getInstance" : 1,
    "getDefaultType" : 1
  },
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:<init>(int,int,int)" : {
    "allocateDirect" : 2,
    "reset" : 1,
    "create" : 1,
    "position" : 1
  },
  "org.apache.hadoop.ipc.CallerContext:<init>(org.apache.hadoop.ipc.CallerContext$Builder)" : {
    "getSignature" : 1,
    "getContext" : 1
  },
  "org.apache.hadoop.fs.FileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "checkAccessPermissions" : 1,
    "getFileStatus" : 1
  },
  "org.apache.hadoop.fs.RawLocalFileSystem:getHomeDirectory()" : {
    "getProperty" : 1,
    "makeQualified" : 1
  },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:findCurrentDirectory(java.util.Date)" : {
    "getTime" : 1,
    "format" : 1,
    "getTimeInMillis" : 2
  },
  "org.apache.hadoop.ipc.Server$Listener$Reader:doRunLoop()" : {
    "next" : 1,
    "currentThread" : 2,
    "select" : 1,
    "getName" : 2,
    "doRead" : 1,
    "selectedKeys" : 1,
    "hasNext" : 1,
    "error" : 2,
    "remove" : 1,
    "take" : 1,
    "iterator" : 1,
    "attachment" : 1,
    "size" : 1,
    "terminate" : 1,
    "isReadable" : 1,
    "register" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:stripOutRoot(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "isRoot" : 1,
    "toUri" : 1,
    "length" : 3,
    "getPath" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getReplication()" : {
    "getReplication" : 1
  },
  "org.apache.hadoop.service.AbstractService:init(org.apache.hadoop.conf.Configuration)" : {
    "noteFailure" : 1,
    "getName" : 1,
    "stopQuietly" : 1,
    "enterState" : 1,
    "notifyListeners" : 1,
    "convert" : 1,
    "isInState" : 2,
    "serviceInit" : 1,
    "setConfig" : 1
  },
  "org.apache.hadoop.ipc.Server:getProtocolClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getClassByName" : 1,
    "get" : 1,
    "put" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndexEntry:write(java.io.DataOutput)" : {
    "writeVInt" : 1,
    "writeVLong" : 1,
    "write" : 1
  },
  "org.apache.hadoop.crypto.CryptoStreamUtils:freeDB(java.nio.ByteBuffer)" : {
    "trace" : 1,
    "freeBuffer" : 1,
    "getCleaner" : 1,
    "info" : 1
  },
  "org.apache.hadoop.util.ProtoUtil:getUgi(org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$IpcConnectionContextProto)" : {
    "getUgi" : 1,
    "getUserInfo" : 1,
    "hasUserInfo" : 1
  },
  "org.apache.hadoop.ha.SshFenceByTcpPort:tryFence(org.apache.hadoop.ha.HAServiceTarget,java.lang.String)" : {
    "disconnect" : 1,
    "warn" : 3,
    "getHostName" : 2,
    "doFence" : 1,
    "getSshConnectTimeout" : 1,
    "getAddress" : 1,
    "createSession" : 1,
    "connect" : 1,
    "info" : 2
  },
  "org.apache.hadoop.io.SequenceFile$Writer:init(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FSDataOutputStream,boolean,java.lang.Class,java.lang.Class,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.io.SequenceFile$Metadata,int)" : {
    "getCompressor" : 1,
    "getSerializer" : 3,
    "writeFileHeader" : 1,
    "getCanonicalName" : 3,
    "createOutputStream" : 1,
    "sync" : 1,
    "setConf" : 1,
    "open" : 3
  },
  "org.apache.hadoop.fs.FileSystem:closeAllForUGI(org.apache.hadoop.security.UserGroupInformation)" : {
    "debugLogFileSystemClose" : 1,
    "closeAll" : 1
  },
  "org.apache.hadoop.util.ExitUtil:halt(org.apache.hadoop.util.ExitUtil$HaltException)" : {
    "halt" : 1,
    "addSuppressed" : 4,
    "compareAndSet" : 1,
    "getMessage" : 1,
    "error" : 1,
    "getRuntime" : 1,
    "getExitCode" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.Credentials:writeProto(java.io.DataOutput)" : {
    "getKey" : 4,
    "addTokens" : 1,
    "protoFromToken" : 1,
    "entrySet" : 2,
    "addSecrets" : 1,
    "newBuilder" : 3,
    "getBytes" : 2,
    "copyFrom" : 3,
    "getValue" : 2,
    "setSecret" : 1,
    "build" : 3,
    "setToken" : 1,
    "getLength" : 2,
    "setAliasBytes" : 2,
    "writeDelimitedTo" : 1
  },
  "org.apache.hadoop.conf.Configuration:addDeprecation(java.lang.String,java.lang.String[])" : {
    "addDeprecation" : 1
  },
  "org.apache.hadoop.fs.shell.Ls:<init>()" : { },
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:unpack(org.apache.hadoop.ipc.proto.GenericRefreshProtocolProtos$GenericRefreshResponseProto)" : {
    "hasSenderName" : 1,
    "hasUserMessage" : 1,
    "setSenderName" : 1,
    "getSenderName" : 1,
    "getUserMessage" : 1,
    "getExitStatus" : 1,
    "hasExitStatus" : 1
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:internalReset()" : {
    "writeStreamHeader" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getStatus(org.apache.hadoop.fs.Path)" : {
    "fullPath" : 1,
    "getStatus" : 1
  },
  "org.apache.hadoop.fs.FileContext:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : {
    "resolve" : 1,
    "fixRelativePart" : 1,
    "createSnapshot" : 1
  },
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:hiddenImpl(java.lang.Class,java.lang.String,java.lang.Class[])" : {
    "debug" : 1,
    "getDeclaredMethod" : 1,
    "doPrivileged" : 1
  },
  "org.apache.hadoop.util.LightWeightCache:evictExpiredEntries()" : {
    "checkState" : 1,
    "isExpired" : 1,
    "monotonicNowNanos" : 1,
    "evict" : 1,
    "peek" : 1
  },
  "org.apache.hadoop.util.ReflectionUtils$CopyInCopyOutBuffer:moveData()" : {
    "getLength" : 1,
    "reset" : 1,
    "getData" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping:<init>(org.apache.hadoop.net.DNSToSwitchMapping)" : { },
  "org.apache.hadoop.util.LightWeightCache:evict()" : {
    "checkState" : 1,
    "poll" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.security.KDiag:title(java.lang.String,java.lang.Object[])" : {
    "println" : 4,
    "format" : 1
  },
  "org.apache.hadoop.fs.Globber$GlobBuilder:<init>(org.apache.hadoop.fs.FileContext)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.io.ShortWritable$Comparator:<init>()" : { },
  "org.apache.hadoop.fs.impl.WeakReferenceThreadMap:<init>(java.util.function.Function,java.util.function.Consumer)" : { },
  "org.apache.hadoop.util.ShutdownHookManager:addShutdownHook(java.lang.Runnable,int,long,java.util.concurrent.TimeUnit)" : {
    "add" : 1,
    "get" : 1
  },
  "org.apache.hadoop.util.bloom.Filter:<init>(int,int,int)" : { },
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:calculateSlope(org.apache.hadoop.metrics2.sink.ganglia.GangliaConf,org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink$GangliaSlope)" : {
    "getSlope" : 2
  },
  "org.apache.hadoop.fs.FSDataInputStream:hasCapability(java.lang.String)" : {
    "hasCapability" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:recvDecodingTables()" : {
    "bsR" : 3,
    "makeMaps" : 1,
    "bsGetBit" : 5,
    "createHuffmanDecodingTables" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Writer:checkAndWriteSync()" : {
    "getPos" : 1,
    "sync" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : {
    "copyFromLocalFile" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec:createCompressor()" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:getCacheFilePath(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.LocalDirAllocator)" : {
    "getTempFilePath" : 1
  },
  "org.apache.hadoop.io.compress.GzipCodec:createInputStream(java.io.InputStream)" : {
    "createInputStreamWithCodecPool" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:listStatus(org.apache.hadoop.fs.Path)" : {
    "getModificationTime" : 1,
    "getOwner" : 1,
    "getMyFs" : 1,
    "checkPathIsSlash" : 1,
    "getReplication" : 1,
    "getBlockSize" : 1,
    "merge" : 2,
    "getLen" : 1,
    "toArray" : 2,
    "getFileStatus" : 1,
    "getPath" : 1,
    "getTargetLink" : 1,
    "getShortUserName" : 2,
    "add" : 3,
    "isLink" : 1,
    "getPermission" : 1,
    "entrySet" : 1,
    "getAccessTime" : 1,
    "getTargetFileSystem" : 3,
    "getChildren" : 1,
    "warn" : 1,
    "getValue" : 1,
    "getLink" : 1,
    "size" : 2,
    "getPrimaryGroupName" : 2,
    "listStatusForFallbackLink" : 1,
    "getGroup" : 1,
    "equals" : 1,
    "makeQualified" : 1,
    "isDirectory" : 1,
    "getUri" : 2
  },
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:writeStreamHeader()" : {
    "writeHeader" : 1
  },
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:ioStatisticsAvailable()" : {
    "available" : 1
  },
  "org.apache.hadoop.net.InnerNodeImpl$Factory:newInnerNode(java.lang.String)" : { },
  "org.apache.hadoop.net.unix.DomainSocket:socketpair()" : {
    "socketpair0" : 1
  },
  "org.apache.hadoop.conf.Configuration:addResource(org.apache.hadoop.fs.Path,boolean)" : {
    "addResourceObject" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:inBlockAdvance(org.apache.hadoop.io.file.tfile.RawComparable,boolean)" : {
    "compareCursorKeyTo" : 1,
    "isClosed" : 1,
    "incRecordIndex" : 1,
    "close" : 1,
    "getBlockIndex" : 2,
    "getRecordIndex" : 2,
    "getBlockEntryCount" : 1
  },
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping:cacheGroupsAdd(java.util.List)" : {
    "add" : 1,
    "getUsersForNetgroup" : 1,
    "length" : 1,
    "isCached" : 1,
    "charAt" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:start()" : {
    "warn" : 1,
    "checkNotNull" : 1,
    "preStart" : 2,
    "values" : 2,
    "startTimer" : 1,
    "postStart" : 2,
    "configure" : 1,
    "info" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:drain(java.lang.String)" : {
    "drain" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibDecompressor(org.apache.hadoop.conf.Configuration)" : {
    "isNativeZlibLoaded" : 1
  },
  "org.apache.hadoop.fs.DF:main(java.lang.String[])" : {
    "println" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String[],java.lang.String[],java.lang.String[],boolean,boolean)" : {
    "next" : 1,
    "add" : 3,
    "toLowerCase" : 3,
    "isEmpty" : 1,
    "hasNext" : 2,
    "isIP4Address" : 1,
    "acceptableCountryWildcard" : 1,
    "substring" : 1,
    "lastIndexOf" : 1,
    "iterator" : 1,
    "trace" : 1,
    "countDots" : 2,
    "trim" : 2,
    "equals" : 1,
    "endsWith" : 1,
    "isTraceEnabled" : 1,
    "toString" : 4,
    "append" : 8,
    "startsWith" : 1
  },
  "org.apache.hadoop.ipc.Server$Connection:doSaslReply(java.lang.Exception)" : {
    "getClass" : 1,
    "getName" : 1,
    "getMessage" : 1,
    "sendResponse" : 1,
    "setupResponse" : 1
  },
  "org.apache.hadoop.fs.FileContext:fixRelativePart(org.apache.hadoop.fs.Path)" : {
    "checkNotNull" : 1,
    "isUriPathAbsolute" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:listStatus(org.apache.hadoop.fs.Path[])" : {
    "listStatus" : 1
  },
  "org.apache.hadoop.util.ToolRunner:printGenericCommandUsage(java.io.PrintStream)" : {
    "printGenericCommandUsage" : 1
  },
  "org.apache.hadoop.util.DurationInfo:<init>(org.slf4j.Logger,boolean,java.lang.String,java.lang.Object[])" : {
    "getFormattedText" : 2,
    "debug" : 1,
    "format" : 1,
    "isDebugEnabled" : 1,
    "info" : 1
  },
  "org.apache.hadoop.conf.Configured:<init>(org.apache.hadoop.conf.Configuration)" : {
    "setConf" : 1
  },
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:setRealUser(org.apache.hadoop.io.Text)" : { },
  "org.apache.hadoop.crypto.CryptoOutputStream:updateEncryptor()" : {
    "getCipherSuite" : 2,
    "init" : 1,
    "getAlgorithmBlockSize" : 2,
    "calculateIV" : 1,
    "position" : 1
  },
  "org.apache.hadoop.fs.FileUtil:canWrite(java.io.File)" : {
    "getCanonicalPath" : 1,
    "access" : 1,
    "canWrite" : 1
  },
  "org.apache.hadoop.ipc.Server$Responder:doRunLoop()" : {
    "add" : 1,
    "next" : 2,
    "currentThread" : 2,
    "debug" : 1,
    "getName" : 2,
    "select" : 1,
    "keys" : 3,
    "selectedKeys" : 1,
    "waitPending" : 1,
    "channel" : 1,
    "hasNext" : 2,
    "isWritable" : 1,
    "monotonicNowNanos" : 1,
    "remove" : 1,
    "sleep" : 1,
    "warn" : 2,
    "doAsyncWrite" : 1,
    "iterator" : 2,
    "size" : 1,
    "attachment" : 2,
    "doPurge" : 1,
    "toMillis" : 1,
    "info" : 2
  },
  "org.apache.hadoop.util.HostsFileReader:getHostDetails(java.util.Set,java.util.Set)" : {
    "addAll" : 2,
    "get" : 1,
    "getIncludedHosts" : 1,
    "getExcludedHosts" : 1
  },
  "org.apache.hadoop.io.ArrayFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class)" : {
    "keyClass" : 1,
    "valueClass" : 1
  },
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : {
    "getRpcTimeout" : 1,
    "getProtocolProxy" : 1
  },
  "org.apache.hadoop.security.SecurityUtil:setSslConfiguration(org.apache.zookeeper.client.ZKClientConfig,org.apache.hadoop.security.SecurityUtil$TruststoreKeystore,org.apache.zookeeper.common.ClientX509Util)" : {
    "getSslKeystoreLocationProperty" : 1,
    "debug" : 2,
    "getSslTruststoreLocationProperty" : 1,
    "setProperty" : 6,
    "getSslKeystorePasswdProperty" : 1,
    "getSslTruststorePasswdProperty" : 1,
    "info" : 1,
    "validateSslConfiguration" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:getBytesWritten()" : {
    "checkStream" : 1,
    "getBytesWritten" : 1
  },
  "org.apache.hadoop.fs.permission.AclStatus:<init>(java.lang.String,java.lang.String,boolean,java.lang.Iterable,org.apache.hadoop.fs.permission.FsPermission)" : {
    "newArrayList" : 1
  },
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:resolvePropertyName(org.apache.hadoop.security.ssl.SSLFactory$Mode,java.lang.String)" : {
    "toLowerCase" : 1,
    "format" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.util.hash.Hash:getInstance(org.apache.hadoop.conf.Configuration)" : {
    "getHashType" : 1,
    "getInstance" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile:main(java.lang.String[])" : {
    "exit" : 1,
    "println" : 2,
    "printStackTrace" : 1,
    "dumpInfo" : 1,
    "toString" : 2,
    "printf" : 1
  },
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawDecoder(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : {
    "createRawDecoderWithFallback" : 1,
    "checkNotNull" : 2
  },
  "org.apache.hadoop.metrics2.sink.PrometheusMetricsSink:writeMetrics(java.io.Writer)" : {
    "next" : 1,
    "getKey" : 2,
    "getMetricKey" : 1,
    "entrySet" : 2,
    "toLowerCase" : 2,
    "values" : 1,
    "clear" : 1,
    "isEmpty" : 1,
    "description" : 1,
    "type" : 1,
    "getValue" : 3,
    "iterator" : 1,
    "equals" : 1,
    "name" : 1,
    "toString" : 2,
    "write" : 1,
    "value" : 2,
    "append" : 22
  },
  "org.apache.hadoop.service.launcher.ServiceLaunchException:<init>(int,java.lang.Throwable)" : { },
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setReplication(org.apache.hadoop.fs.Path,short)" : {
    "fullPath" : 1,
    "setReplication" : 1
  },
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:put(org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor)" : {
    "size" : 1,
    "put" : 1,
    "isCompressed" : 2,
    "isBlockCompressed" : 2
  },
  "org.apache.hadoop.metrics2.filter.AbstractPatternFilter:accepts(java.lang.Iterable)" : {
    "get" : 2,
    "isEmpty" : 2,
    "name" : 2,
    "matcher" : 2,
    "value" : 2,
    "matches" : 2
  },
  "org.apache.hadoop.crypto.OpensslCipher:isSupported(org.apache.hadoop.crypto.CipherSuite)" : {
    "getName" : 1,
    "isSupportedSuite" : 1,
    "get" : 2,
    "tokenizeTransformation" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : {
    "newProxyInstance" : 1,
    "getClassLoader" : 1
  },
  "org.apache.hadoop.fs.shell.SnapshotCommands$CreateSnapshot:processArguments(java.util.LinkedList)" : {
    "println" : 1,
    "size" : 1,
    "getFirst" : 1,
    "createSnapshot" : 1,
    "processArguments" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:getRawFileSystem(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : {
    "resolve" : 1,
    "toUri" : 1,
    "get" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1,
    "fsGetter" : 1,
    "getMyFs" : 1
  },
  "org.apache.hadoop.fs.shell.Delete$Rmdir:processPath(org.apache.hadoop.fs.shell.PathData)" : {
    "listStatus" : 1,
    "toString" : 3,
    "delete" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:getNumAllUnits()" : {
    "getNumAllUnits" : 1
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getDeferredRpcProcessingStdDev()" : {
    "lastStat" : 1,
    "stddev" : 1
  },
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:add(java.lang.Object,java.lang.reflect.Field)" : {
    "warn" : 1,
    "set" : 1,
    "setAccessible" : 1,
    "get" : 1,
    "newForField" : 1,
    "getAnnotations" : 1
  },
  "org.apache.hadoop.util.ZKUtil$BadAuthFormatException:<init>(java.lang.String)" : { },
  "org.apache.hadoop.util.functional.FutureIO:awaitFuture(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)" : {
    "debug" : 1,
    "raiseInnerCause" : 1,
    "get" : 1,
    "initCause" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.ipc.CallQueueManager:add(java.lang.Object)" : {
    "addInternal" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : {
    "fullPath" : 1,
    "create" : 1
  },
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,java.lang.String)" : {
    "add" : 1,
    "set" : 1,
    "getThisBuilder" : 1,
    "remove" : 1
  },
  "org.apache.hadoop.io.compress.ZStandardCodec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : {
    "checkNativeCodeLoaded" : 1,
    "getCompressionBufferSize" : 1
  },
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getClient(org.apache.hadoop.conf.Configuration)" : {
    "getDefault" : 1,
    "getClient" : 1
  },
  "org.apache.hadoop.fs.FsTracer:get(org.apache.hadoop.conf.Configuration)" : {
    "wrapHadoopConf" : 1,
    "build" : 1,
    "conf" : 1
  },
  "org.apache.hadoop.util.ThreadUtil:getResourceAsStream(java.lang.String)" : {
    "currentThread" : 1,
    "getContextClassLoader" : 1,
    "getResourceAsStream" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : {
    "resolvePath" : 1,
    "resolve" : 1,
    "getUriPath" : 1,
    "isInternalDir" : 1
  },
  "org.apache.hadoop.io.retry.RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:<init>(long,long,java.util.concurrent.TimeUnit)" : { },
  "org.apache.hadoop.fs.viewfs.ViewFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "renameSnapshot" : 1
  },
  "org.apache.hadoop.util.SysInfoWindows:now()" : {
    "monotonicNow" : 1
  },
  "org.apache.hadoop.fs.AbstractFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : {
    "setXAttr" : 1,
    "of" : 1
  },
  "org.apache.hadoop.fs.FileUtil:checkReturnValue(boolean,java.io.File,org.apache.hadoop.fs.permission.FsPermission)" : {
    "format" : 1,
    "toShort" : 1
  },
  "org.apache.hadoop.crypto.CryptoProtocolVersion:supports(org.apache.hadoop.crypto.CryptoProtocolVersion)" : {
    "getVersion" : 4,
    "values" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFileLinkStatus(org.apache.hadoop.fs.Path)" : {
    "getFileLinkStatus" : 1,
    "resolve" : 1,
    "fixRelativePart" : 1,
    "qualifySymlinkTarget" : 1,
    "setSymlink" : 1,
    "getSymlink" : 1,
    "isSymlink" : 1,
    "getUri" : 1
  },
  "org.apache.hadoop.io.ObjectWritable$NullInstance:<init>()" : { },
  "org.apache.hadoop.fs.Stat:getExecString()" : {
    "toString" : 2
  },
  "org.apache.hadoop.security.alias.CredentialShell$Command:getCredentialProvider()" : {
    "getOut" : 1,
    "println" : 1,
    "getConf" : 1,
    "printStackTrace" : 1,
    "getProviders" : 1,
    "get" : 1,
    "getErr" : 1,
    "isTransient" : 1
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:serializer()" : { },
  "org.apache.hadoop.fs.shell.FsUsage:formatSize(long)" : {
    "long2String" : 1,
    "valueOf" : 1
  },
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:getServiceStatus()" : {
    "setReadyToBecomeActive" : 1,
    "getServiceStatus" : 1,
    "getReadyToBecomeActive" : 1,
    "setNotReadyToBecomeActive" : 1,
    "getState" : 1,
    "getNotReadyReason" : 1,
    "convert" : 1,
    "ipc" : 1
  },
  "org.apache.hadoop.http.HttpServer2:start()" : {
    "getLocalPort" : 1,
    "instance" : 1,
    "stop" : 1,
    "isFailed" : 1,
    "getHandlers" : 1,
    "start" : 1,
    "initCause" : 1,
    "create" : 1,
    "openListeners" : 1,
    "getUnavailableException" : 1,
    "register" : 1,
    "info" : 2
  },
  "org.apache.hadoop.fs.permission.PermissionStatus:createImmutable(java.lang.String,java.lang.String,org.apache.hadoop.fs.permission.FsPermission)" : { },
  "org.apache.hadoop.net.NetworkTopology:chooseRandom(java.lang.String,java.util.Collection)" : {
    "unlock" : 1,
    "readLock" : 2,
    "lock" : 1,
    "substring" : 1,
    "chooseRandom" : 2,
    "startsWith" : 1
  },
  "org.apache.hadoop.fs.Path:<init>(java.lang.String)" : {
    "hasWindowsDrive" : 1,
    "length" : 3,
    "initialize" : 1,
    "checkPathArg" : 1,
    "indexOf" : 3,
    "substring" : 3,
    "charAt" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:newInstance(java.lang.Object[])" : {
    "throwIfInstance" : 1,
    "newInstanceChecked" : 1
  },
  "org.apache.hadoop.conf.Configuration:isDeprecated(java.lang.String)" : {
    "containsKey" : 1,
    "get" : 1,
    "getDeprecatedKeyMap" : 1
  },
  "org.apache.hadoop.io.retry.RetryUtils$WrapperRetryPolicy:shouldRetry(java.lang.Exception,int,int,boolean)" : {
    "getClass" : 1,
    "getWrappedRetriableException" : 1,
    "debug" : 1,
    "shouldRetry" : 1,
    "equals" : 1,
    "getSimpleName" : 1,
    "getClassName" : 1,
    "getCause" : 1
  },
  "org.apache.hadoop.util.StopWatch:close()" : {
    "stop" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:recursive()" : {
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.fs.ftp.FTPFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "split" : 1,
    "getPort" : 1,
    "set" : 3,
    "get" : 3,
    "checkState" : 1,
    "initialize" : 1,
    "getUserInfo" : 1,
    "setConf" : 1,
    "getHost" : 1,
    "setInt" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:copy(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean,boolean)" : {
    "openFile" : 1,
    "getName" : 2,
    "listStatus" : 1,
    "delete" : 1,
    "checkDependencies" : 1,
    "checkDest" : 1,
    "opt" : 1,
    "build" : 1,
    "optLong" : 1,
    "closeStream" : 1,
    "getLen" : 1,
    "of" : 2,
    "makeQualified" : 4,
    "checkNotSchemeWithRelative" : 2,
    "getPath" : 2,
    "getFileStatus" : 1,
    "create" : 1,
    "copy" : 1,
    "awaitFuture" : 1,
    "mkdir" : 1,
    "getDirDefault" : 1,
    "copyBytes" : 1,
    "isDirectory" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:writeValue(java.io.OutputStream)" : {
    "getRemain" : 1,
    "setSize" : 1,
    "min" : 1,
    "readFully" : 1,
    "getValueStream" : 1,
    "write" : 1,
    "close" : 1,
    "getBytes" : 2
  },
  "org.apache.hadoop.conf.Configuration:getClasses(java.lang.String,java.lang.Class[])" : {
    "getClassByName" : 1,
    "getTrimmedStrings" : 1,
    "getRaw" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:call(java.net.HttpURLConnection,java.lang.Object,int,java.lang.Class)" : {
    "call" : 1
  },
  "org.apache.hadoop.io.erasurecode.codec.HHXORErasureCodec:createEncoder()" : {
    "getCoderOptions" : 1
  },
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:builder()" : {
    "getThisBuilder" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSMetadata:<init>(java.lang.String,int,java.lang.String,java.util.Map,java.util.Date,int)" : { },
  "org.apache.hadoop.fs.sftp.SFTPInputStream:<init>(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem$Statistics)" : {
    "getSize" : 1,
    "lstat" : 1,
    "toUri" : 1,
    "get" : 1,
    "getPath" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.service.ServiceOperations:stopQuietly(org.apache.commons.logging.Log,org.apache.hadoop.service.Service)" : {
    "warn" : 1,
    "getName" : 1,
    "stop" : 1
  },
  "org.apache.hadoop.io.EnumSetWritable:<init>(java.util.EnumSet)" : { },
  "org.apache.hadoop.fs.GlobPattern:set(java.lang.String)" : {
    "compile" : 1,
    "length" : 1,
    "toString" : 1,
    "error" : 4,
    "append" : 11,
    "charAt" : 3
  },
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getTotalRequestsPerSecond()" : {
    "getTotalRequestsPerSecond" : 1
  },
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.net.Socket,java.lang.String,int,boolean)" : {
    "getSocketFactory" : 1,
    "createSocket" : 1,
    "configureSocket" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:checkPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1
  },
  "org.apache.hadoop.io.BoundedByteArrayOutputStream:<init>(int)" : { },
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementBytesReadErasureCoded(long)" : {
    "getThreadStatistics" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:prefetch(int)" : {
    "add" : 1,
    "checkNotNegative" : 1
  },
  "org.apache.hadoop.fs.FileUtil:canExecute(java.io.File)" : {
    "getCanonicalPath" : 1,
    "canExecute" : 1,
    "access" : 1
  },
  "org.apache.hadoop.fs.DUHelper:check(java.lang.String)" : {
    "getFileSize" : 1,
    "getTotalSpace" : 2,
    "format" : 1,
    "getFreeSpace" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Writer:<init>(org.apache.hadoop.fs.FSDataOutputStream,int,java.lang.String,java.lang.String,org.apache.hadoop.conf.Configuration)" : {
    "getComparator" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getGaugeReference(java.lang.String)" : {
    "lookup" : 1
  },
  "org.apache.hadoop.util.Shell:execCommand(java.util.Map,java.lang.String[],long)" : {
    "execute" : 1,
    "getOutput" : 1
  },
  "org.apache.hadoop.ipc.Server:internalQueueCall(org.apache.hadoop.ipc.Server$Call,boolean)" : {
    "add" : 1,
    "set" : 1,
    "getProcessingDetails" : 1,
    "incrClientBackoffDisconnected" : 1,
    "incrClientBackoff" : 1,
    "monotonicNowNanos" : 1,
    "getCause" : 3,
    "put" : 1,
    "getRpcStatusProto" : 1
  },
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:build()" : {
    "getFS" : 1
  },
  "org.apache.hadoop.conf.Configuration:getCredentialEntry(org.apache.hadoop.security.alias.CredentialProvider,java.lang.String)" : {
    "getDeprecatedKey" : 1,
    "getCredentialEntry" : 3,
    "toString" : 1,
    "getDeprecatedKeyInfo" : 1,
    "logDeprecationOnce" : 2
  },
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:ioStatisticsToPrettyString(org.apache.hadoop.fs.statistics.IOStatistics)" : {
    "mapToSortedString" : 5,
    "counters" : 1,
    "toString" : 1,
    "gauges" : 1,
    "meanStatistics" : 1,
    "minimums" : 1,
    "maximums" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getMeanStatistic(java.lang.String)" : {
    "getInnerStatistics" : 1,
    "getMeanStatistic" : 1
  },
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getKeys()" : {
    "call" : 1,
    "createConnection" : 1,
    "createURL" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFs:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : {
    "access" : 1,
    "resolve" : 1,
    "getUriPath" : 1
  },
  "org.apache.hadoop.crypto.CryptoInputStream:afterDecryption(org.apache.hadoop.crypto.Decryptor,java.nio.ByteBuffer,long,byte[])" : {
    "getPadding" : 1,
    "position" : 1,
    "updateDecryptor" : 1,
    "isContextReset" : 1
  },
  "org.apache.hadoop.ipc.Client:setPingInterval(org.apache.hadoop.conf.Configuration,int)" : {
    "setInt" : 1
  },
  "org.apache.hadoop.fs.permission.PermissionStatus:read(java.io.DataInput)" : {
    "readFields" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferData:setCaching(java.util.concurrent.Future)" : {
    "checkNotNull" : 1,
    "throwIfStateIncorrect" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:cedeRemoteActive(org.apache.hadoop.ha.HAServiceTarget,int)" : {
    "getZKFCProxy" : 1,
    "cedeActive" : 1,
    "info" : 1
  },
  "org.apache.hadoop.fs.FileSystem:getTrashRoots(boolean)" : {
    "add" : 2,
    "warn" : 1,
    "getParent" : 1,
    "getHomeDirectory" : 1,
    "toUri" : 1,
    "getFileStatus" : 1,
    "getPath" : 2,
    "setPath" : 1,
    "listStatus" : 1,
    "exists" : 3
  },
  "org.apache.hadoop.io.ByteWritable:<init>(byte)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.FileSystem$DirListingIterator:fetchMore()" : {
    "listStatusBatch" : 1,
    "getToken" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getState(int)" : {
    "throwIfInvalidBlockNumber" : 1
  },
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : {
    "fullPath" : 1,
    "setOwner" : 1
  },
  "org.apache.hadoop.fs.ChecksumFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : { },
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:createOrAppendLogFile(org.apache.hadoop.fs.Path)" : {
    "name" : 2,
    "initCause" : 1,
    "create" : 1,
    "append" : 1
  },
  "org.apache.hadoop.ipc.RpcClientException:<init>(java.lang.String,java.lang.Throwable)" : { },
  "org.apache.hadoop.util.DataChecksum:newDataChecksum(byte[],int)" : {
    "mapByteToChecksumType" : 1,
    "getChecksumHeaderSize" : 1,
    "newDataChecksum" : 1
  },
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:readLength()" : {
    "readVInt" : 1
  },
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FSDataOutputStream,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec)" : {
    "createWriter" : 1,
    "stream" : 1,
    "keyClass" : 1,
    "valueClass" : 1,
    "compression" : 1
  },
  "org.apache.hadoop.ipc.Server:getSchedulerClass(java.lang.String,int,org.apache.hadoop.conf.Configuration)" : {
    "getClass" : 4,
    "setClass" : 1,
    "equals" : 1,
    "getCanonicalName" : 2,
    "convertSchedulerClass" : 1
  },
  "org.apache.hadoop.ipc.Client$Connection$PingInputStream:read(byte[],int,int)" : {
    "read" : 1,
    "handleTimeout" : 1
  },
  "org.apache.hadoop.metrics2.lib.MutableStat:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : { },
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:updateProgress(long)" : {
    "set" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "getServerDefaults" : 1
  },
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:numAvailable()" : {
    "numAvailable" : 1,
    "releaseDoneBlocks" : 1
  },
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : {
    "getInt" : 1,
    "checkNotNull" : 2,
    "getConf" : 1,
    "getDefaultReplication" : 1,
    "getDefaultBlockSize" : 1
  },
  "org.apache.hadoop.io.BloomMapFile:byteArrayForBloomKey(org.apache.hadoop.io.DataOutputBuffer)" : {
    "arraycopy" : 1,
    "getLength" : 1,
    "getData" : 2
  },
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:register(java.lang.String,java.lang.String,java.lang.Object)" : {
    "registerSource" : 2,
    "debug" : 1,
    "build" : 1,
    "name" : 1,
    "description" : 1,
    "sourceName" : 1,
    "newSourceBuilder" : 1,
    "put" : 1,
    "register" : 1,
    "info" : 1
  },
  "org.apache.hadoop.security.token.delegation.DelegationKey:<init>(int,long,javax.crypto.SecretKey)" : {
    "getEncoded" : 1
  },
  "org.apache.hadoop.security.alias.CredentialShell$CheckCommand:execute()" : {
    "getOut" : 4,
    "getCredentialEntry" : 1,
    "toCharArray" : 1,
    "println" : 4,
    "warnIfTransientProvider" : 1,
    "equals" : 2,
    "readPassword" : 1,
    "getCredential" : 1,
    "getMessage" : 1,
    "getPasswordReader" : 1,
    "toString" : 2,
    "doHelp" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:write(int)" : {
    "osException" : 1,
    "mayThrow" : 1,
    "nextSetBit" : 2,
    "write" : 1
  },
  "org.apache.hadoop.service.launcher.ServiceLauncher:verifyConfigurationFilesExist(java.lang.String[])" : {
    "debug" : 1,
    "getAbsolutePath" : 2,
    "exists" : 1
  },
  "org.apache.hadoop.ha.HAAdmin:isOtherTargetNodeActive(java.lang.String,boolean)" : {
    "getServiceStatus" : 1,
    "getTargetIds" : 1,
    "println" : 2,
    "getState" : 1,
    "getConf" : 1,
    "getProxy" : 1,
    "equals" : 1,
    "resolveTarget" : 1,
    "getMessage" : 1,
    "printUsage" : 2,
    "checkManualStateManagementOK" : 1
  },
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:startUpload()" : {
    "startUpload" : 1,
    "size" : 1,
    "getInputStream" : 1
  },
  "org.apache.hadoop.metrics2.impl.MetricsConfig:loadFirst(java.lang.String,java.lang.String[])" : {
    "warn" : 1,
    "setFileName" : 1,
    "debug" : 3,
    "load" : 1,
    "getMessage" : 1,
    "toString" : 1,
    "interpolatedConfiguration" : 1,
    "join" : 1,
    "isDebugEnabled" : 1,
    "setListDelimiterHandler" : 1,
    "on" : 1,
    "info" : 1,
    "startsWith" : 1
  },
  "org.apache.hadoop.util.Preconditions:checkNotNull(java.lang.Object)" : {
    "checkNotNull" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController:confirmFormat()" : {
    "println" : 1,
    "confirmPrompt" : 1,
    "debug" : 1,
    "getParentZnode" : 1
  },
  "org.apache.hadoop.metrics2.util.SampleQuantiles:compress()" : {
    "next" : 3,
    "previous" : 2,
    "size" : 1,
    "allowableError" : 1,
    "listIterator" : 1,
    "hasNext" : 1,
    "remove" : 1,
    "previousIndex" : 1
  },
  "org.apache.hadoop.io.MapFile$Reader:getClosest(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : {
    "getClosest" : 1
  },
  "org.apache.hadoop.fs.BufferedFSInputStream:getIOStatistics()" : {
    "retrieveIOStatistics" : 1
  },
  "org.apache.hadoop.util.KMSUtil:parseJSONMetadata(java.util.Map)" : {
    "checkNotNull" : 1,
    "get" : 6,
    "isEmpty" : 1
  },
  "org.apache.hadoop.fs.viewfs.RegexMountPointInterceptorFactory:create(java.lang.String)" : {
    "trim" : 1,
    "get" : 1,
    "toLowerCase" : 1,
    "deserializeFromString" : 1,
    "length" : 1,
    "indexOf" : 1,
    "substring" : 1
  },
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:<init>(org.apache.hadoop.io.file.tfile.TFile$Reader,long,long)" : {
    "getLocationNear" : 2
  },
  "org.apache.hadoop.conf.Configuration$Parser:handleInclude()" : {
    "getStreamReader" : 2,
    "toURL" : 1,
    "getResource" : 1,
    "getAttributeValue" : 1,
    "openConnection" : 1,
    "toURI" : 1,
    "parse" : 2,
    "getAttributeCount" : 1,
    "isParserRestricted" : 2,
    "addAll" : 1,
    "equals" : 1,
    "getPath" : 1,
    "getParentFile" : 1,
    "exists" : 1,
    "isAbsolute" : 1,
    "connect" : 1,
    "getAttributeLocalName" : 1
  },
  "org.apache.hadoop.fs.FileContext$FSDataInputStreamBuilder:build()" : {
    "withStatus" : 1,
    "getOptionalKeys" : 1,
    "resolve" : 1,
    "getBufferSize" : 1,
    "withBufferSize" : 1,
    "getStatus" : 1,
    "withOptionalKeys" : 1,
    "getInt" : 1,
    "withOptions" : 1,
    "fixRelativePart" : 1,
    "getPath" : 1,
    "getMandatoryKeys" : 1,
    "withMandatoryKeys" : 1,
    "getOptions" : 2,
    "openFileWithOptions" : 1
  },
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : {
    "resolve" : 1,
    "getUriPath" : 1,
    "append" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem:open(org.apache.hadoop.fs.Path,int)" : {
    "mayThrowFileNotFound" : 1,
    "contains" : 3,
    "workSet" : 1,
    "processThrowable" : 2,
    "notFoundStatus" : 1,
    "getFs" : 1,
    "createIOException" : 1,
    "sort" : 1,
    "repairAndOpen" : 1,
    "open" : 1,
    "updateFileStatus" : 1
  },
  "org.apache.hadoop.fs.impl.FutureIOSupport:eval(org.apache.hadoop.util.functional.CallableRaisingIOE)" : {
    "eval" : 1
  },
  "org.apache.hadoop.fs.DelegateToFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : {
    "checkPath" : 1,
    "setPermission" : 1
  },
  "org.apache.hadoop.util.GenericOptionsParser:<init>(org.apache.hadoop.conf.Configuration,java.lang.String[])" : { },
  "org.apache.hadoop.ipc.Client$Connection:disposeSasl()" : {
    "dispose" : 1
  },
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:<init>()" : { },
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:iterator()" : {
    "getLongStatistics" : 1
  },
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withLongFunctionMaximum(java.lang.String,java.util.function.ToLongFunction)" : {
    "activeInstance" : 1,
    "addMaximumFunction" : 1
  },
  "org.apache.hadoop.ha.ZKFailoverController$ServiceStateCallBacks:reportServiceStatus(org.apache.hadoop.ha.HAServiceStatus)" : {
    "verifyChangedServiceState" : 1,
    "getState" : 1
  },
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:reset()" : {
    "limit" : 1,
    "checkStream" : 1,
    "reset" : 1,
    "position" : 1
  },
  "org.apache.hadoop.io.SecureIOUtils:openForRead(java.io.File,java.lang.String,java.lang.String)" : {
    "isSecurityEnabled" : 1,
    "forceSecureOpenForRead" : 1
  },
  "org.apache.hadoop.fs.FileContext:getFSofPath(org.apache.hadoop.fs.Path)" : {
    "checkPath" : 1,
    "getAbstractFileSystem" : 1,
    "toUri" : 1,
    "checkNotSchemeWithRelative" : 1,
    "checkNotRelative" : 1
  },
  "org.apache.hadoop.net.ScriptBasedMapping$RawScriptBasedMapping:setConf(org.apache.hadoop.conf.Configuration)" : {
    "getInt" : 1,
    "get" : 1,
    "setConf" : 1
  },
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:equals(java.lang.Object)" : {
    "compareTo" : 1
  },
  "org.apache.hadoop.fs.FileContext$Util:listStatus(java.util.ArrayList,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : {
    "add" : 1,
    "getPath" : 1,
    "listStatus" : 1,
    "accept" : 1
  },
  "org.apache.hadoop.security.User:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod,javax.security.auth.login.LoginContext)" : {
    "getShortName" : 1,
    "toString" : 1
  },
  "org.apache.hadoop.fs.permission.PermissionStatus:write(java.io.DataOutput,java.lang.String,java.lang.String,org.apache.hadoop.fs.permission.FsPermission)" : {
    "write" : 1,
    "writeString" : 2
  },
  "org.apache.hadoop.metrics2.sink.StatsDSink:close()" : {
    "close" : 1
  },
  "org.apache.hadoop.fs.FilterFileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : {
    "copyToLocalFile" : 1
  },
  "org.apache.hadoop.conf.Configuration:logDeprecationOnce(java.lang.String,java.lang.String)" : {
    "getAndSetAccessed" : 1,
    "getWarningMessage" : 1,
    "getDeprecatedKeyInfo" : 1,
    "info" : 1
  },
  "org.apache.hadoop.io.file.tfile.SimpleBufferedOutputStream:write(byte[],int,int)" : {
    "flushBuffer" : 2,
    "arraycopy" : 1,
    "write" : 1
  }
}