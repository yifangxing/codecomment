{
  "org.apache.hadoop.io.SequenceFile$Writer$FileOption:<init>(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Server$MetricsUpdateRunner:run()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.NetUtils:canonicalizeHost(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProvider:options(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.CryptoCodec:getCodecClasses(org.apache.hadoop.conf.Configuration,org.apache.hadoop.crypto.CipherSuite)" : [ {
    "sourceMethod" : "getConfigSuffix",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getConfigSuffix",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getConfigSuffix",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.ByteWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.fs.shell.PathData:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.bloom.BloomFilter:write(java.io.DataOutput)" : [ {
    "sourceMethod" : "getNBytes",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.fs.FilterFs:getAclStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.Delete$Expunge:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:addDeferredProcessingTime(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:maximums()" : [ ],
  "org.apache.hadoop.util.VersionInfo:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ha.ZKFCRpcServer:<init>(org.apache.hadoop.conf.Configuration,java.net.InetSocketAddress,org.apache.hadoop.ha.ZKFailoverController,org.apache.hadoop.security.authorize.PolicyProvider)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.fs.Path:normalizePath(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getTokenInfo(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.io.retry.RetryProxy:create(java.lang.Class,java.lang.Object,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:getTestProvider()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:<init>(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:close()" : [ ],
  "org.apache.hadoop.io.BytesWritable:<init>(byte[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "removeXAttr"
  } ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newCounter(java.lang.String,java.lang.String,int)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "newCounter"
  } ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getNumErasedBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ {
    "sourceMethod" : "getParityBlocks",
    "targetMethod" : "getNumErasedBlocks"
  }, {
    "sourceMethod" : "getDataBlocks",
    "targetMethod" : "getNumErasedBlocks"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getStateString()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setReplication(org.apache.hadoop.fs.Path,short)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setMinimum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:getRootDir()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:allowVerboseDump()" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkNfly(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.lang.String,java.net.URI[])" : [ {
    "sourceMethod" : "uriToString",
    "targetMethod" : "addLinkNfly"
  } ],
  "org.apache.hadoop.util.ReflectionUtils:setConf(java.lang.Object,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupNoRandPartA()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:snapshotMetrics(org.apache.hadoop.metrics2.impl.MetricsSourceAdapter,org.apache.hadoop.metrics2.impl.MetricsBufferBuilder)" : [ {
    "sourceMethod" : "name",
    "targetMethod" : "add"
  }, {
    "sourceMethod" : "getMetrics",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.io.nativeio.SharedFileDescriptorFactory:create(java.lang.String,java.lang.String[])" : [ ],
  "org.apache.hadoop.security.KDiag$KerberosDiagsFailure:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:createFileSystem(java.net.URI[],org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.fs.viewfs.FsGetter)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setMaximum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:calculateIV(byte[],long,byte[])" : [ {
    "sourceMethod" : "getAlgorithmBlockSize",
    "targetMethod" : "calculateIV"
  } ],
  "org.apache.hadoop.conf.Configuration:getSocketAddr(java.lang.String,java.lang.String,java.lang.String,int)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "createSocketAddr"
  } ],
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:initFromFS()" : [ ],
  "org.apache.hadoop.tools.TableListing$Builder:build()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:next(org.apache.hadoop.io.Writable)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "reset"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "reset"
  } ],
  "org.apache.hadoop.ha.ZKFailoverController:fenceOldActive(byte[])" : [ ],
  "org.apache.hadoop.io.MapWritable:putAll(java.util.Map)" : [ ],
  "org.apache.hadoop.tools.protocolPB.GetUserMappingsProtocolClientSideTranslatorPB:close()" : [ ],
  "org.apache.hadoop.fs.shell.find.Print$Print0:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:getDirDefault()" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue$Processor:tryStop(org.apache.hadoop.util.Daemon)" : [ ],
  "org.apache.hadoop.conf.ReconfigurationException:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:decode(java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:close()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setReplication(org.apache.hadoop.fs.Path,short)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.ipc.Server:wrapWithSasl(org.apache.hadoop.ipc.Server$RpcCall)" : [ {
    "sourceMethod" : "wrap",
    "targetMethod" : "setupResponse"
  } ],
  "org.apache.hadoop.security.KDiag:validateShortName()" : [ {
    "sourceMethod" : "stringifyException",
    "targetMethod" : "error"
  } ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:getStringData(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:getPathDataForChild(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:flush()" : [ ],
  "org.apache.hadoop.service.ServiceStateException:convert(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.ErasureCodec:createBlockGrouper()" : [ {
    "sourceMethod" : "getSchema",
    "targetMethod" : "setSchema"
  } ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getMaximumReference(java.lang.String)" : [ ],
  "org.apache.hadoop.util.KMSUtil:createKeyProvider(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "getKeyProviderUri",
    "targetMethod" : "createKeyProviderFromUri"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:numOpenConnectionsPerUser()" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:cacheGroupsRefresh()" : [ {
    "sourceMethod" : "getNetgroupNames",
    "targetMethod" : "cacheGroupsAdd"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:buildDescription(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:reset()" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink31:emitMetric(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.hadoop.metrics2.sink.ganglia.GangliaConf,org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink$GangliaSlope)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:transitionToStandby(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ha.proto.HAServiceProtocolProtos$TransitionToStandbyRequestProto)" : [ ],
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter:doFilter(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "createRemoteUser",
    "targetMethod" : "createProxyUser"
  }, {
    "sourceMethod" : "createRemoteUser",
    "targetMethod" : "authorize"
  } ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:isFile(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.serializer.SerializationFactory:getDeserializer(java.lang.Class)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:upperBound(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort:createSession(java.lang.String,org.apache.hadoop.ha.SshFenceByTcpPort$Args)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getKey(byte[])" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$FsOperation:run(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.metrics2.lib.MutableCounterLong:incr()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:renewToken(org.apache.hadoop.security.token.Token,java.lang.String)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:setTokenService(org.apache.hadoop.security.token.Token,java.net.InetSocketAddress)" : [ {
    "sourceMethod" : "buildTokenService",
    "targetMethod" : "setService"
  } ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:newAttrInfo(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.ReconfigurableBase:getChangedProperties(org.apache.hadoop.conf.Configuration,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : [ {
    "sourceMethod" : "methodToTraceString",
    "targetMethod" : "newScope"
  }, {
    "sourceMethod" : "constructRpcRequest",
    "targetMethod" : "call"
  } ],
  "org.apache.hadoop.util.SysInfoLinux:readProcStatFile()" : [ {
    "sourceMethod" : "getCurrentTime",
    "targetMethod" : "updateElapsedJiffies"
  } ],
  "org.apache.hadoop.conf.Configuration:toString()" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:addFalsePositive(java.util.Collection)" : [ ],
  "org.apache.hadoop.security.http.RestCsrfPreventionFilter:init(javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.util.WeakReferenceMap:create(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileContext(org.apache.hadoop.fs.AbstractFileSystem)" : [ ],
  "org.apache.hadoop.conf.Configuration:getStrings(java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getStrings"
  } ],
  "org.apache.hadoop.io.file.tfile.ByteArray:<init>(byte[])" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:createOutputStream(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.io.Text:set(byte[])" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.fs.shell.CommandFormat:parse(java.lang.String[],int)" : [ ],
  "org.apache.hadoop.conf.Configuration:getPropsWithPrefix(java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:getKeyClass()" : [ {
    "sourceMethod" : "getKeyClassName",
    "targetMethod" : "getClass"
  } ],
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:getOverflowedCalls()" : [ ],
  "org.apache.hadoop.fs.impl.CombinedFileRange:<init>(long,long,org.apache.hadoop.fs.FileRange)" : [ ],
  "org.apache.hadoop.fs.FileUtil:canRead(java.io.File)" : [ ],
  "org.apache.hadoop.conf.Configuration:getInstances(java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:read()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getUsed()" : [ ],
  "org.apache.hadoop.fs.FileContext:getDelegationTokens(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.CharSequence)" : [ ],
  "org.apache.hadoop.fs.Path:makeQualified(java.net.URI,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_fromJsonString(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:getStrings(java.lang.String,java.lang.String[])" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getStrings"
  } ],
  "org.apache.hadoop.http.HttpServer2:addDefaultApps(org.eclipse.jetty.server.handler.ContextHandlerCollection,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.io.DefaultStringifier:storeArray(org.apache.hadoop.conf.Configuration,java.lang.Object[],java.lang.String)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:touch(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getNumVCoresUsed()" : [ ],
  "org.apache.hadoop.util.KMSUtil:parseJSONEncKeyVersion(java.lang.String,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:logIOStatisticsAtLevel(org.slf4j.Logger,java.lang.String,java.lang.Object)" : [ {
    "sourceMethod" : "retrieveIOStatistics",
    "targetMethod" : "ioStatisticsToPrettyString"
  }, {
    "sourceMethod" : "retrieveIOStatistics",
    "targetMethod" : "ioStatisticsToPrettyString"
  }, {
    "sourceMethod" : "retrieveIOStatistics",
    "targetMethod" : "ioStatisticsToPrettyString"
  } ],
  "org.apache.hadoop.fs.AbstractFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "validatePathCapabilityArgs"
  } ],
  "org.apache.hadoop.ipc.Server:getPriorityLevel()" : [ ],
  "org.apache.hadoop.ha.NodeFencer:parseMethods(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:set(org.apache.hadoop.fs.statistics.MeanStatistic)" : [ {
    "sourceMethod" : "getSamples",
    "targetMethod" : "setSamplesAndSum"
  }, {
    "sourceMethod" : "getSum",
    "targetMethod" : "setSamplesAndSum"
  } ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:executeTrailerState()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getStatistics()" : [ ],
  "org.apache.hadoop.io.DoubleWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:openForSequentialIO()" : [ ],
  "org.apache.hadoop.service.AbstractService:stop()" : [ ],
  "org.apache.hadoop.service.CompositeService:addIfService(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.permission.AclEntry:aclSpecToString(java.util.List)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getXAttrs"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:lowerBound(org.apache.hadoop.io.file.tfile.RawComparable)" : [ ],
  "org.apache.hadoop.net.NetUtils:getInputStream(java.net.Socket)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:initFs()" : [ ],
  "org.apache.hadoop.ha.HAAdmin:getServiceState(org.apache.commons.cli.CommandLine)" : [ ],
  "org.apache.hadoop.io.ObjectWritable$NullInstance:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:confirmForceManual()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getCanonicalServiceName()" : [ ],
  "org.apache.hadoop.security.SaslOutputStream:write(byte[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:fullPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.AclCommands$GetfaclCommand:printExtendedAclEntry(org.apache.hadoop.fs.permission.AclStatus,org.apache.hadoop.fs.permission.FsPermission,org.apache.hadoop.fs.permission.AclEntry)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:close()" : [ ],
  "org.apache.hadoop.conf.Configuration:getTimeDuration(java.lang.String,java.lang.String,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getTimeDurationHelper"
  } ],
  "org.apache.hadoop.ipc.protocolPB.RefreshCallQueueProtocolClientSideTranslatorPB:close()" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:getUri(java.net.URI,java.lang.String,boolean,int)" : [ ],
  "org.apache.hadoop.util.VersionInfo:getBuildVersion()" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:createCredentialEntry(java.lang.String,char[])" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getAuthenticationMethod()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getStatus()" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Reader:initBloomFilter(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:ifExists(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.ProviderUtils:unnestUri(java.net.URI)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:extractKMSPath(java.net.URI)" : [ ],
  "org.apache.hadoop.http.HttpServer2$Builder:createHttpsChannelConnector(org.eclipse.jetty.server.Server,org.eclipse.jetty.server.HttpConfiguration)" : [ {
    "sourceMethod" : "getLong",
    "targetMethod" : "makeConfigurationChangeMonitor"
  } ],
  "org.apache.hadoop.fs.FilterFs:getCanonicalServiceName()" : [ ],
  "org.apache.hadoop.fs.Options$HandleOpt:reference()" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:convertToByteStream(java.util.zip.Checksum,int)" : [ ],
  "org.apache.hadoop.fs.shell.CommandFactory:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFs:getLinkTarget(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkRequired(boolean,java.lang.String)" : [ ],
  "org.apache.hadoop.util.IntrusiveCollection:retainAll(java.util.Collection)" : [ ],
  "org.apache.hadoop.service.AbstractService:resetGlobalListeners()" : [ ],
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:createEncryptor()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:loginUserFromKeytab(java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "loginUserFromKeytabAndReturnUGI",
    "targetMethod" : "setLoginUser"
  } ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:listStatus(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "getFileStatus"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:bsR(long)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getFsAction(int,org.apache.commons.net.ftp.FTPFile)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.Configuration:getTrimmed(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_aggregate(java.lang.Object)" : [ ],
  "org.apache.hadoop.ipc.Client:getRpcTimeout(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getCumulativeCpuTime()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:getReturnMessage(java.lang.reflect.Method,org.apache.hadoop.ipc.RpcWritable$Buffer)" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodecFactory:getCodecByName(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:fullyDelete(java.io.File,boolean)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:<init>(org.apache.hadoop.fs.ChecksumFs,org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.io.VIntWritable:<init>(int)" : [ ],
  "org.apache.hadoop.conf.Configuration:substituteVars(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ ],
  "org.apache.hadoop.ha.HAServiceTarget:getProxy(org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.security.SaslPlainServer:getNegotiatedProperty(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.Iterable,java.nio.charset.Charset)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.DefaultStringifier:store(org.apache.hadoop.conf.Configuration,java.lang.Object,java.lang.String)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.service.ServiceStateModel:isValidStateTransition(org.apache.hadoop.service.Service$STATE,org.apache.hadoop.service.Service$STATE)" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyCompressor:<init>()" : [ ],
  "org.apache.hadoop.util.PriorityQueue:adjustTop()" : [ ],
  "org.apache.hadoop.fs.FileSystem:isFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.GlobFilter:init(java.lang.String,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.fs.FileSystem:primitiveCreate(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt)" : [ {
    "sourceMethod" : "exists",
    "targetMethod" : "validate"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:<init>(org.apache.hadoop.fs.viewfs.InodeTree$INodeDir,long,org.apache.hadoop.security.UserGroupInformation,java.net.URI,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.viewfs.InodeTree)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getReplication(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:getOwner()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getResponseTimeCountInLastWindow()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:setAttrCacheTag(org.apache.hadoop.metrics2.MetricsTag,int)" : [ {
    "sourceMethod" : "name",
    "targetMethod" : "tagName"
  } ],
  "org.apache.hadoop.conf.Configuration:getProps()" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$2:getCodec()" : [ ],
  "org.apache.hadoop.io.VIntWritable:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:clearBit(int)" : [ ],
  "org.apache.hadoop.fs.shell.Command:processPaths(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData[])" : [ ],
  "org.apache.hadoop.io.SecureIOUtils:forceSecureOpenForRead(java.io.File,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getGroup",
    "targetMethod" : "checkStat"
  }, {
    "sourceMethod" : "getOwner",
    "targetMethod" : "checkStat"
  } ],
  "org.apache.hadoop.util.dynamic.DynMethods$StaticMethod:invokeChecked(java.lang.Object[])" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:invoke(java.lang.Object,java.lang.Object[])" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:expandWildcard(java.util.List,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "getJarsInDirectory"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setStoragePolicy"
  } ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:getUri()" : [ ],
  "org.apache.hadoop.util.Shell:getGroupsForUserCommand(java.lang.String)" : [ ],
  "org.apache.hadoop.security.ssl.SSLFactory:configure(java.net.HttpURLConnection)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextIntegration:createNewInstance(java.lang.Long)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:rename(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "isParentOf"
  } ],
  "org.apache.hadoop.util.functional.RemoteIterators$MaybeClose:<init>(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader$FileOption:<init>(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:bindCommandOptions()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:<init>(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:<init>()" : [ ],
  "org.apache.hadoop.security.WhitelistBasedResolver:getServerProperties(java.net.InetAddress)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:getClosest(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable,boolean)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$BufferSizeOption:<init>(int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getStatus()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:handleEmptyDstDirectoryOnWindows(org.apache.hadoop.fs.Path,java.io.File,org.apache.hadoop.fs.Path,java.io.File)" : [ ],
  "org.apache.hadoop.ipc.WeightedRoundRobinMultiplexer:<init>(int,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:<init>(org.apache.commons.cli.Options,java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.ipc.Server:setClientBackoffEnabled(boolean)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:<init>(java.lang.String,java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSource,java.lang.Iterable,org.apache.hadoop.metrics2.MetricsFilter,org.apache.hadoop.metrics2.MetricsFilter,long,boolean)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsAnnotations:newSourceBuilder(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.ZKUtil:parseACLs(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.SplittableCompressionCodec$READ_MODE,boolean)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addServiceUserDecayedCallVolume(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.fs.crypto.CryptoFSDataInputStream:<init>(org.apache.hadoop.fs.FSDataInputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[])" : [ ],
  "org.apache.hadoop.ipc.Server:bind(java.net.ServerSocket,java.net.InetSocketAddress,int)" : [ ],
  "org.apache.hadoop.fs.FsShell:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.SaslInputStream:read(byte[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getAclStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getAclStatus"
  } ],
  "org.apache.hadoop.io.DataOutputOutputStream:constructOutputStream(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:getNflyTmpPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.JsonSerialization:toString(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.HttpCrossOriginFilterInitializer:getEnabledConfigKey()" : [ ],
  "org.apache.hadoop.util.MachineList:<init>(java.lang.String,org.apache.hadoop.util.MachineList$InetAddressFactory)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:addMetricIfNotExists(java.lang.String)" : [ ],
  "org.apache.hadoop.security.SecurityUtil$QualifiedHostResolver:getByNameWithSearch(java.lang.String)" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:getDataWithRetries(java.lang.String,boolean,org.apache.zookeeper.data.Stat)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getLargeReadOps()" : [ ],
  "org.apache.hadoop.fs.FileSystem:openFile(org.apache.hadoop.fs.PathHandle)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:<init>(org.apache.hadoop.fs.ChecksumFileSystem,org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:getCompressorType()" : [ ],
  "org.apache.hadoop.net.ScriptBasedMapping:getConf()" : [ ],
  "org.apache.hadoop.metrics2.lib.MethodMetric$1:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:checkBytes(java.nio.ByteBuffer,long,java.nio.ByteBuffer,long,int,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:reencryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : [ {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptedKeyIv",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptedKeyVersion",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getVersionName",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "createURL"
  }, {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  }, {
    "sourceMethod" : "call",
    "targetMethod" : "parseJSONEncKeyVersion"
  }, {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "parseJSONEncKeyVersion"
  } ],
  "org.apache.hadoop.log.LogLevel$CLI:parseProtocolArgs(java.lang.String[],int)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:lookupGroup(javax.naming.directory.SearchResult,javax.naming.directory.DirContext,int)" : [ ],
  "org.apache.hadoop.security.alias.KeyStoreProvider:stashOriginalFilePermissions()" : [ ],
  "org.apache.hadoop.fs.BufferedFSInputStream:maxReadSizeForVectorReads()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:putMetrics(org.apache.hadoop.metrics2.impl.MetricsBuffer,long)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addAvgResponseTimePerPriority(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:compareKeys(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.security.CompositeGroupsMapping:addMappingProvider(java.lang.String,java.lang.Class)" : [ {
    "sourceMethod" : "prepareConf",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:getAliases()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.util.functional.LazyAtomicReference:apply()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:getTempFilePath(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.LocalDirAllocator)" : [ ],
  "org.apache.hadoop.io.WritableName:getClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.conf.Configuration:readFields(java.io.DataInput)" : [ {
    "sourceMethod" : "readString",
    "targetMethod" : "set"
  }, {
    "sourceMethod" : "readCompressedStringArray",
    "targetMethod" : "putIntoUpdatingResource"
  }, {
    "sourceMethod" : "readString",
    "targetMethod" : "putIntoUpdatingResource"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addDeferredRpcProcessingTime(long)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache$Key:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.shell.Display$Checksum:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getMetaBlock(java.lang.String)" : [ ],
  "org.apache.hadoop.security.KDiag:printConfOpt(java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "println"
  } ],
  "org.apache.hadoop.fs.FilterFs:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.FileSystem:createDataInputStreamBuilder(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.PathHandle)" : [ ],
  "org.apache.hadoop.http.HttpServer2:userHasAdministratorAccess(javax.servlet.ServletContext,java.lang.String)" : [ {
    "sourceMethod" : "createRemoteUser",
    "targetMethod" : "isUserAllowed"
  } ],
  "org.apache.hadoop.util.ReflectionUtils:logThreadInfo(org.slf4j.Logger,java.lang.String,long)" : [ ],
  "org.apache.hadoop.util.DiskChecker:doDiskIo(java.io.File)" : [ {
    "sourceMethod" : "getFileNameForDiskIoCheck",
    "targetMethod" : "diskIoCheckWithoutNativeIo"
  } ],
  "org.apache.hadoop.security.KDiag:usage()" : [ ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:processBasicHeader()" : [ ],
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],long,long)" : [ ],
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:createDecryptor()" : [ ],
  "org.apache.hadoop.fs.ContentSummary:hashCode()" : [ ],
  "org.apache.hadoop.io.OutputBuffer:<init>()" : [ ],
  "org.apache.hadoop.io.WritableUtils:readStringArray(java.io.DataInput)" : [ ],
  "org.apache.hadoop.conf.Configuration:loadResource(java.util.Properties,org.apache.hadoop.conf.Configuration$Resource,boolean)" : [ ],
  "org.apache.hadoop.fs.DF:getMount()" : [ ],
  "org.apache.hadoop.fs.impl.StoreImplementationUtils:hasCapability(java.io.InputStream,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.SaslInputStream:readMoreData()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.DummyRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.BytesWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:processOptions(java.util.LinkedList)" : [ {
    "sourceMethod" : "parseExpression",
    "targetMethod" : "setRootExpression"
  } ],
  "org.apache.hadoop.util.FindClass:loadClass(java.lang.String)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "loadedClass"
  } ],
  "org.apache.hadoop.security.AuthenticationFilterInitializer:initFilter(org.apache.hadoop.http.FilterContainer,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.MapFile$Merger:open(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:isUserInList(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:updateAddress()" : [ {
    "sourceMethod" : "createSocketAddrForHost",
    "targetMethod" : "setAddress"
  } ],
  "org.apache.hadoop.fs.FileSystemStorageStatistics:getLong(java.lang.String)" : [ {
    "sourceMethod" : "getData",
    "targetMethod" : "fetch"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:getTGT()" : [ ],
  "org.apache.hadoop.security.token.Token:privateClone(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.ipc.Client:close()" : [ ],
  "org.apache.hadoop.fs.shell.XAttrCommands$SetfattrCommand:processOptions(java.util.LinkedList)" : [ {
    "sourceMethod" : "popOptionWithArgument",
    "targetMethod" : "decodeValue"
  } ],
  "org.apache.hadoop.security.LdapGroupsMapping:getPasswordForBindUser(java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getPasswordFromCredentialProviders"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "extractPassword"
  } ],
  "org.apache.hadoop.ipc.ProtocolSignature:getProtocolSignature(org.apache.hadoop.ipc.VersionedProtocol,java.lang.String,long,int)" : [ ],
  "org.apache.hadoop.util.StringUtils:byteToHexString(byte)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:decryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : [ {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getVersionName",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getConf",
    "targetMethod" : "getInstance"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:<init>(org.apache.hadoop.io.file.tfile.BCFile$Reader$RBlockState)" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:or(org.apache.hadoop.util.bloom.Filter)" : [ ],
  "org.apache.hadoop.fs.XAttrCodec:encodeValue(byte[],org.apache.hadoop.fs.XAttrCodec)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcResponseTime(long)" : [ ],
  "org.apache.hadoop.security.token.Token:copyToken()" : [ ],
  "org.apache.hadoop.util.Shell:getHadoopHome()" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission$ImmutableFsPermission:<init>(short)" : [ ],
  "org.apache.hadoop.fs.FsShell:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable,org.apache.hadoop.io.SequenceFile$Metadata)" : [ {
    "sourceMethod" : "metadata",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "progressable",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:launchService(org.apache.hadoop.conf.Configuration,java.util.List,boolean,boolean)" : [ ],
  "org.apache.hadoop.net.DomainNameResolverFactory:newInstance(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getEnclosingRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.HAServiceProtocolHelper:monitorHealth(org.apache.hadoop.ha.HAServiceProtocol,org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : [ ],
  "org.apache.hadoop.io.retry.RetryProxy:create(java.lang.Class,org.apache.hadoop.io.retry.FailoverProxyProvider,java.util.Map,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:processGeneralOptions(org.apache.commons.cli.CommandLine)" : [ {
    "sourceMethod" : "validateFiles",
    "targetMethod" : "set"
  }, {
    "sourceMethod" : "validateFiles",
    "targetMethod" : "set"
  }, {
    "sourceMethod" : "validateFiles",
    "targetMethod" : "set"
  }, {
    "sourceMethod" : "readTokenStorageFile",
    "targetMethod" : "addCredentials"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:pathCapabilities_hasPathCapability(java.lang.Object,org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:encode(java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.service.ServiceStateModel:enterState(org.apache.hadoop.service.Service$STATE)" : [ ],
  "org.apache.hadoop.fs.FileSystem:setDefaultUri(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:printCredentials(org.apache.hadoop.security.Credentials,org.apache.hadoop.io.Text,java.io.PrintStream)" : [ {
    "sourceMethod" : "getMaxDate",
    "targetMethod" : "formatDate"
  } ],
  "org.apache.hadoop.ipc.Server$Connection:close()" : [ ],
  "org.apache.hadoop.util.GcTimeMonitor:run()" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator:getAllLocalPathsToRead(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.conf.Configuration:writeXml(java.io.Writer)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$Factory:createProviders(org.apache.hadoop.conf.Configuration,java.net.URL,int,java.lang.String)" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:getServerToken(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth)" : [ ],
  "org.apache.hadoop.ipc.RPC$Server:registerProtocolAndImpl(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.Class,java.lang.Object)" : [ {
    "sourceMethod" : "getClientPrincipal",
    "targetMethod" : "createRemoteUser"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:init()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getXAttr"
  } ],
  "org.apache.hadoop.fs.shell.FsUsage$Df:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:getDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:reloginFromTicketCache()" : [ ],
  "org.apache.hadoop.http.HttpServer2Metrics:remove()" : [ ],
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:init(org.apache.hadoop.security.ssl.SSLFactory$Mode)" : [ {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "getLong"
  }, {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getLong",
    "targetMethod" : "createKeyManagersFromConfiguration"
  }, {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "createKeyManagersFromConfiguration"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "createKeyManagersFromConfiguration"
  }, {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getLong",
    "targetMethod" : "createTrustManagersFromConfiguration"
  }, {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "createTrustManagersFromConfiguration"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "createTrustManagersFromConfiguration"
  } ],
  "org.apache.hadoop.fs.FilterFileSystem:msync()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:toString()" : [ ],
  "org.apache.hadoop.metrics2.util.MBeans:register(java.lang.String,java.lang.String,java.util.Map,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:decryptEncryptedKey(org.apache.hadoop.crypto.Decryptor,org.apache.hadoop.crypto.key.KeyProvider$KeyVersion,org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : [ {
    "sourceMethod" : "getEncryptedKeyIv",
    "targetMethod" : "deriveIV"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:getStartPos()" : [ ],
  "org.apache.hadoop.ipc.CallerContext$Builder:append(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:dataSize()" : [ ],
  "org.apache.hadoop.fs.FSInputChecker:<init>(org.apache.hadoop.fs.Path,int,boolean,java.util.zip.Checksum,int,int)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:decodeHarURI(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : [ ],
  "org.apache.hadoop.security.KDiag:exec(org.apache.hadoop.conf.Configuration,java.lang.String[])" : [ ],
  "org.apache.hadoop.util.AutoCloseableLock:close()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setAcl"
  } ],
  "org.apache.hadoop.io.MapFile$Merger:close()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Du:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:hflush()" : [ ],
  "org.apache.hadoop.io.compress.CodecPool:returnCompressor(org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "decodeHarURI",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "decodeHarURI",
    "targetMethod" : "getHarAuth"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getBlockCount()" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:<init>(int,int,int,int)" : [ ],
  "org.apache.hadoop.io.erasurecode.grouper.BlockGrouper:anyRecoverable(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.io.InputBuffer:getPosition()" : [ ],
  "org.apache.hadoop.security.http.RestCsrfPreventionFilter:handleHttpInteraction(org.apache.hadoop.security.http.RestCsrfPreventionFilter$HttpInteraction)" : [ ],
  "org.apache.hadoop.fs.CachingGetSpaceUsed$RefreshThread:<init>(org.apache.hadoop.fs.CachingGetSpaceUsed,boolean)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:reJoinElectionAfterFailureToBecomeActive()" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:invokeStatic(java.lang.Object[])" : [ {
    "sourceMethod" : "isStatic",
    "targetMethod" : "checkState"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "checkState"
  } ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:close()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:close()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:initializeMountedFileSystems(java.util.List)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor$ZlibDirectDecompressor:reset()" : [ ],
  "org.apache.hadoop.security.SaslRpcServer:create(org.apache.hadoop.ipc.Server$Connection,java.util.Map,org.apache.hadoop.security.token.SecretManager)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:getInfo(java.lang.Class,org.apache.hadoop.metrics2.annotation.Metrics)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcProtobufRequest:<init>(org.apache.hadoop.ipc.protobuf.ProtobufRpcEngineProtos$RequestHeaderProto,com.google.protobuf.Message)" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:readUnlock(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.find.BaseExpression:addArguments(java.util.Deque,int)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderExtension:invalidateCache(java.lang.String)" : [ ],
  "org.apache.hadoop.io.WeakReferencedElasticByteBufferPool:getBuffer(boolean,int)" : [ ],
  "org.apache.hadoop.util.OperationDuration:asDuration()" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.fs.Path[])" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:incr()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:readBlock()" : [ ],
  "org.apache.hadoop.security.KDiag:dumpKeytab(java.io.File)" : [ ],
  "org.apache.hadoop.fs.ContentSummary$Builder:build()" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.fs.shell.SnapshotCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getFileDefault",
    "targetMethod" : "applyUMask"
  }, {
    "sourceMethod" : "getUMask",
    "targetMethod" : "applyUMask"
  } ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:setIsNestedMountPointSupported(org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:drain(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:wrap(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.io.SetFile$Writer:append(org.apache.hadoop.io.WritableComparable)" : [ ],
  "org.apache.hadoop.io.Text:readFields(java.io.DataInput)" : [ {
    "sourceMethod" : "readVInt",
    "targetMethod" : "readWithKnownLength"
  } ],
  "org.apache.hadoop.io.ElasticByteBufferPool:putBuffer(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.util.CrcUtil:intToBytes(int)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:find(int)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:convert(org.apache.hadoop.ha.proto.HAServiceProtocolProtos$HAStateChangeRequestInfoProto)" : [ ],
  "org.apache.hadoop.fs.RawPathHandle:hashCode()" : [ ],
  "org.apache.hadoop.io.ArrayWritable:<init>(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:getUri()" : [ ],
  "org.apache.hadoop.ipc.Client:call(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable,org.apache.hadoop.ipc.Client$ConnectionId,int,java.util.concurrent.atomic.AtomicBoolean)" : [ ],
  "org.apache.hadoop.io.Text:set(byte[],int,int)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:read(org.apache.hadoop.io.ByteBufferPool,int,java.util.EnumSet)" : [ {
    "sourceMethod" : "getPos",
    "targetMethod" : "resetStreamOffset"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$DataBlockRegister:register(long,long,long)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : [ ],
  "org.apache.hadoop.conf.Configuration:getTimeDurationHelper(java.lang.String,java.lang.String,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.FileContext:setVerifyChecksum(boolean,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "resolve"
  }, {
    "sourceMethod" : "resolve",
    "targetMethod" : "getFSofPath"
  }, {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "getFSofPath"
  } ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:initSingleton(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState:checkInputBuffers(java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:<init>(java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : [ ],
  "org.apache.hadoop.fs.DU:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:close()" : [ ],
  "org.apache.hadoop.io.SortedMapWritable:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.metrics2.sink.GraphiteSink:flush()" : [ ],
  "org.apache.hadoop.security.Credentials:readProto(java.io.DataInput)" : [ {
    "sourceMethod" : "tokenFromProto",
    "targetMethod" : "addToken"
  } ],
  "org.apache.hadoop.fs.FileContext:create(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.Options$CreateOpts[])" : [ {
    "sourceMethod" : "getValue",
    "targetMethod" : "applyUMask"
  }, {
    "sourceMethod" : "getUMask",
    "targetMethod" : "applyUMask"
  }, {
    "sourceMethod" : "getValue",
    "targetMethod" : "perms"
  } ],
  "org.apache.hadoop.fs.FSInputStream:read(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:getUMask(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:checkIoStatisticsContextAvailable()" : [ ],
  "org.apache.hadoop.util.Progress:addPhase(float)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:recheckElectability()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenIdentifier:<init>(org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:readVectored(java.util.List,java.util.function.IntFunction)" : [ ],
  "org.apache.hadoop.fs.PathIsDirectoryException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.DelegationTokenRenewer:getInstance()" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:registerExpressions(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler$RetryInfo:<init>(long,org.apache.hadoop.io.retry.RetryPolicy$RetryAction,long,java.lang.Exception)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileContext(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:hashCode()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:rollNewVersionInternal(java.lang.String,byte[])" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  }, {
    "sourceMethod" : "call",
    "targetMethod" : "parseJSONKeyVersion"
  } ],
  "org.apache.hadoop.security.Groups:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.util.Timer)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:finish()" : [ ],
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:<init>(java.lang.reflect.Constructor,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.shell.Ls:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getCpuUsagePercentage()" : [ ],
  "org.apache.hadoop.security.Groups:getUserToGroupsMappingServiceWithLoadedConfiguration(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.OperationDuration:finished()" : [ ],
  "org.apache.hadoop.io.compress.CompressorStream:finish()" : [ ],
  "org.apache.hadoop.io.MapFile$Merger:merge(org.apache.hadoop.fs.Path[],boolean,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "delete"
  }, {
    "sourceMethod" : "getFileSystem",
    "targetMethod" : "delete"
  } ],
  "org.apache.hadoop.log.LogLevel$CLI:doSetLevel()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getMinimumReference(java.lang.String)" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:parseArguments(java.lang.String[])" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:add(org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolClientSideTranslatorPB:gracefulFailover()" : [ ],
  "org.apache.hadoop.fs.ContentSummary:toString(boolean,boolean,boolean)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:mlock(java.lang.String,java.nio.ByteBuffer,long)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:isDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:getTokenTrackingId(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:recvFileInputStreams(java.io.FileInputStream[],byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "createNonRecursive"
  } ],
  "org.apache.hadoop.io.SecureIOUtils:openFSDataInputStream(java.io.File,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:fullyDeleteContents(java.io.File,boolean)" : [ ],
  "org.apache.hadoop.util.Lists:computeArrayListCapacity(int)" : [ ],
  "org.apache.hadoop.util.concurrent.HadoopThreadPoolExecutor:afterExecute(java.lang.Runnable,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:checkTFileDataIndex()" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:setupSaslConnection(org.apache.hadoop.ipc.Client$IpcStreams)" : [ ],
  "org.apache.hadoop.fs.FileSystem:open(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:add(org.apache.hadoop.metrics2.MetricsInfo,java.lang.Object)" : [ ],
  "org.apache.hadoop.security.alias.UserProvider:createCredentialEntry(java.lang.String,char[])" : [ ],
  "org.apache.hadoop.util.ExitUtil:halt(int,java.lang.String)" : [ ],
  "org.apache.hadoop.net.DNSDomainNameResolver:getAllResolvedHostnameByDomainName(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:rollNewVersion(java.lang.String,byte[])" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:checksumOpt(org.apache.hadoop.fs.Options$ChecksumOpt)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : [ {
    "sourceMethod" : "getMandatoryKeys",
    "targetMethod" : "rejectUnknownMandatoryKeys"
  } ],
  "org.apache.hadoop.util.ConfTest:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getDelegationToken(java.lang.String)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.security.authorize.ProxyServers:refresh(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$HadoopLoginContext:login()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:setState(int,org.apache.hadoop.fs.impl.prefetch.BlockData$State)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProtocolMetaInfoProxy(org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ ],
  "org.apache.hadoop.io.compress.CompressionOutputStream:close()" : [ ],
  "org.apache.hadoop.net.NetUtils:connect(java.net.Socket,java.net.SocketAddress,int)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:processTokenRemoved(org.apache.curator.framework.recipes.cache.ChildData)" : [ ],
  "org.apache.hadoop.util.ProtoUtil:makeIpcConnectionContext(java.lang.String,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreBuilderImpl:withDurationTracking(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.shell.CommandFactory:getInstance(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.CompressorStream:close()" : [ ],
  "org.apache.hadoop.fs.Options$HandleOpt:path()" : [ ],
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:getProxyHosts()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getTrashRoots(boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.CompareUtils$MemcmpRawComparator:compare(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:fromSummary(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getEntryCount()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getMountPoints()" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:startThreads()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:performCoding(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : [ {
    "sourceMethod" : "toBuffers",
    "targetMethod" : "performCoding"
  } ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue$UniqueKeyBlockingQueue:deleteByName(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:readChunk(long,byte[],int,int,byte[])" : [ {
    "sourceMethod" : "getChecksumFilePos",
    "targetMethod" : "seek"
  } ],
  "org.apache.hadoop.fs.AbstractFileSystem:getEnclosingRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Server:refreshServiceAclWithLoadedConfiguration(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.authorize.PolicyProvider)" : [ ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:get()" : [ {
    "sourceMethod" : "description",
    "targetMethod" : "newAttrInfo"
  } ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainInputStream:read()" : [ ],
  "org.apache.hadoop.fs.FileSystem:listStatus(org.apache.hadoop.fs.Path[])" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:generateDecodeMatrix(int[])" : [ ],
  "org.apache.hadoop.metrics2.util.MetricsCache:update(org.apache.hadoop.metrics2.MetricsRecord)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.DefaultFailoverProxyProvider:getProxy()" : [ ],
  "org.apache.hadoop.metrics2.MetricsTag:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileContext:getLocalFSFileContext()" : [ ],
  "org.apache.hadoop.fs.TrashPolicy:getInstance(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.fs.PositionedReadable:readVectored(java.util.List,java.util.function.IntFunction)" : [ ],
  "org.apache.hadoop.http.HttpServer2:addFilter(java.lang.String,java.lang.String,java.util.Map)" : [ {
    "sourceMethod" : "getFilterHolder",
    "targetMethod" : "defineFilter"
  }, {
    "sourceMethod" : "getFilterMapping",
    "targetMethod" : "defineFilter"
  }, {
    "sourceMethod" : "getFilterHolder",
    "targetMethod" : "defineFilter"
  }, {
    "sourceMethod" : "getFilterMapping",
    "targetMethod" : "defineFilter"
  } ],
  "org.apache.hadoop.conf.Configuration:getPattern(java.lang.String,java.util.regex.Pattern)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.StringUtils:camelize(java.lang.String)" : [ {
    "sourceMethod" : "toLowerCase",
    "targetMethod" : "split"
  } ],
  "org.apache.hadoop.conf.Configuration:getTrimmedStrings(java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getTrimmedStrings"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:addToLinkedListHead(org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache$Entry)" : [ ],
  "org.apache.hadoop.fs.FileContext:getLocalFSFileContext(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue:checkCalls()" : [ ],
  "org.apache.hadoop.fs.AvroFSInput:tell()" : [ ],
  "org.apache.hadoop.fs.FileContext:printStatistics()" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:parseNumLevels(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNull(java.lang.Object,java.lang.String)" : [ ],
  "org.apache.hadoop.io.ObjectWritable:<init>(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:sortByDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "renameSnapshot"
  } ],
  "org.apache.hadoop.ha.HAServiceTarget:getProxyForAddress(org.apache.hadoop.conf.Configuration,int,java.net.InetSocketAddress)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:getMetrics(org.apache.hadoop.metrics2.impl.MetricsCollectorImpl,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:repairAndOpen(org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode[],org.apache.hadoop.fs.Path,int)" : [ {
    "sourceMethod" : "getNflyTmpPath",
    "targetMethod" : "copy"
  }, {
    "sourceMethod" : "getNflyTmpPath",
    "targetMethod" : "rename"
  }, {
    "sourceMethod" : "getModificationTime",
    "targetMethod" : "setTimes"
  }, {
    "sourceMethod" : "getAccessTime",
    "targetMethod" : "setTimes"
  } ],
  "org.apache.hadoop.util.Progress:get()" : [ ],
  "org.apache.hadoop.ipc.Server$Listener$Reader:run()" : [ ],
  "org.apache.hadoop.security.token.Token:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:getMBeanInfo()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:loginUserFromSubject(javax.security.auth.Subject)" : [ {
    "sourceMethod" : "createLoginUser",
    "targetMethod" : "setLoginUser"
  } ],
  "org.apache.hadoop.fs.shell.SnapshotCommands$DeleteSnapshot:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(java.lang.Object[],java.lang.String)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:setVerifyChecksum(boolean)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:<init>()" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getAvailablePhysicalMemorySize()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.KDiag:isSimpleAuthentication(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScannerByRecordNum(long,long)" : [ ],
  "org.apache.hadoop.io.DataInputByteBuffer:<init>()" : [ ],
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,byte[])" : [ ],
  "org.apache.hadoop.fs.FilterFs:getFileChecksum(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:setChecksumBufSize(int)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:reset()" : [ ],
  "org.apache.hadoop.fs.EmptyStorageStatistics:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getMetadata(java.lang.String)" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  }, {
    "sourceMethod" : "call",
    "targetMethod" : "parseJSONMetadata"
  } ],
  "org.apache.hadoop.io.serializer.WritableSerialization$WritableDeserializer:deserialize(org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:mlock(java.nio.ByteBuffer,long)" : [ ],
  "org.apache.hadoop.util.InstrumentedReadWriteLock:<init>(boolean,java.lang.String,org.slf4j.Logger,long,long)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRate(java.lang.String,java.lang.String,boolean,boolean)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:removeExpiredToken()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setXAttr"
  } ],
  "org.apache.hadoop.fs.FileSystem:setQuotaByStorageType(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.StorageType,long)" : [ ],
  "org.apache.hadoop.service.ServiceOperations:stopQuietly(org.slf4j.Logger,org.apache.hadoop.service.Service)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$TryOnceThenFail:shouldRetry(java.lang.Exception,int,int,boolean)" : [ ],
  "org.apache.hadoop.security.token.Token$PrivateToken:<init>(org.apache.hadoop.security.token.Token,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:warmUpEncryptedKeys(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$SingleChunkEncoder:write(byte[])" : [ ],
  "org.apache.hadoop.fs.shell.FsCommand:<init>()" : [ ],
  "org.apache.hadoop.service.launcher.InterruptEscalator:toString()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getBlockReader(int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "removeDefaultAcl"
  } ],
  "org.apache.hadoop.security.authorize.ServiceAuthorizationManager:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.Class,org.apache.hadoop.conf.Configuration,java.net.InetAddress)" : [ ],
  "org.apache.hadoop.fs.FsShell:printUsage(java.io.PrintStream,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:<init>(int,float,long,int,org.apache.hadoop.crypto.key.kms.ValueQueue$QueueRefiller)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getFlags()" : [ ],
  "org.apache.hadoop.fs.shell.Test:testAccess(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "delete"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "closeStream"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  } ],
  "org.apache.hadoop.util.JsonSerialization:writeJsonAsBytes(java.lang.Object,java.io.OutputStream)" : [ ],
  "org.apache.hadoop.service.AbstractService:registerServiceListener(org.apache.hadoop.service.ServiceStateChangeListener)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getHomeDirectory()" : [ ],
  "org.apache.hadoop.fs.FileSystemStorageStatistics:fetch(org.apache.hadoop.fs.FileSystem$Statistics$StatisticsData,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setMaximum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.ipc.RpcWritable$Buffer:newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.HttpCrossOriginFilterInitializer:initFilter(org.apache.hadoop.http.FilterContainer,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getEnabledConfigKey",
    "targetMethod" : "getBoolean"
  }, {
    "sourceMethod" : "getPrefix",
    "targetMethod" : "getFilterParameters"
  } ],
  "org.apache.hadoop.fs.permission.PermissionStatus:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:joinElection(byte[])" : [ ],
  "org.apache.hadoop.fs.http.AbstractHttpFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:incrementMaximum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:getFileDefault()" : [ ],
  "org.apache.hadoop.ipc.Server$ConnectionManager:closeAll()" : [ ],
  "org.apache.hadoop.tools.GetGroupsBase:getUgmProtocol()" : [ {
    "sourceMethod" : "getSocketFactory",
    "targetMethod" : "getProxy"
  }, {
    "sourceMethod" : "getCurrentUser",
    "targetMethod" : "getProxy"
  } ],
  "org.apache.hadoop.util.StringUtils:join(char,java.lang.Iterable)" : [ ],
  "org.apache.hadoop.fs.FileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.SocksSocketFactory:createSocket(java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:getDelegationToken(javax.servlet.http.HttpServletRequest)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getWorkingDirectory()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass$SeqFileComparator:compare(org.apache.hadoop.io.IntWritable,org.apache.hadoop.io.IntWritable)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLaunchException:<init>(int,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.conf.Configuration:handleDeprecation()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProvider:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.LossyRetryInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getAvailablePhysicalMemorySize()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:openConnection(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncodingStep:performCoding(java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.util.HostsFileReader:getHostDetails(java.util.Set,java.util.Map)" : [ ],
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:invokeChecked(java.lang.Object,java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.BinaryComparable:compareTo(org.apache.hadoop.io.BinaryComparable)" : [ ],
  "org.apache.hadoop.io.MD5Hash:digest(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "deleteSnapshot"
  } ],
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ {
    "sourceMethod" : "getCurrentUser",
    "targetMethod" : "getProtocolProxy"
  } ],
  "org.apache.hadoop.ipc.RPC:waitForProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:invokeOnce()" : [ ],
  "org.apache.hadoop.fs.FileSystem:get(java.net.URI,org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getBestUGI"
  } ],
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:incrCacheUpdated()" : [ ],
  "org.apache.hadoop.ipc.Server:getClientBackoffEnable(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.conf.StorageUnit$4:getDefault(double)" : [ ],
  "org.apache.hadoop.util.bloom.BloomFilter:<init>()" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:close()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getServerDefaults"
  } ],
  "org.apache.hadoop.ipc.Server$RpcCall:run()" : [ {
    "sourceMethod" : "monotonicNowNanos",
    "targetMethod" : "set"
  }, {
    "sourceMethod" : "monotonicNowNanos",
    "targetMethod" : "set"
  }, {
    "sourceMethod" : "monotonicNowNanos",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.fs.permission.AclEntry:toStringStable()" : [ {
    "sourceMethod" : "toStringStable",
    "targetMethod" : "toLowerCase"
  } ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:<init>(java.io.File,int,long,org.apache.hadoop.fs.store.BlockUploadStatistics)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(java.net.URL)" : [ ],
  "org.apache.hadoop.net.SocksSocketFactory:createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$RealUser:getName()" : [ ],
  "org.apache.hadoop.util.JsonSerialization:save(java.io.File,java.lang.Object)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:setBlockSize(org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics$Singleton:init(java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "instance",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:commit()" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path[],boolean,int,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:needsInput()" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStream$PositionCache:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:getFS()" : [ ],
  "org.apache.hadoop.ha.ZKFCRpcServer:gracefulFailover()" : [ ],
  "org.apache.hadoop.security.token.DelegationTokenIssuer:addDelegationTokens(java.lang.String,org.apache.hadoop.security.Credentials)" : [ ],
  "org.apache.hadoop.io.erasurecode.ECBlock:<init>()" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawEncoder(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.impl.FutureIOSupport:propagateOptions(org.apache.hadoop.fs.FSBuilder,org.apache.hadoop.conf.Configuration,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.ipc.Server:setupResponse(org.apache.hadoop.ipc.Server$RpcCall,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcStatusProto,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcErrorCodeProto,org.apache.hadoop.io.Writable,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "stringifyException",
    "targetMethod" : "setupResponse"
  } ],
  "org.apache.hadoop.crypto.CryptoInputStream:skip(long)" : [ ],
  "org.apache.hadoop.conf.Configuration:unset(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFs:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:destroy()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:close()" : [ ],
  "org.apache.hadoop.util.HostsFileReader:readFileToMapWithFileInputStream(java.lang.String,java.lang.String,java.io.InputStream,java.util.Map)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:createPassword(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ {
    "sourceMethod" : "now",
    "targetMethod" : "setIssueDate"
  }, {
    "sourceMethod" : "getKeyId",
    "targetMethod" : "setMasterKeyId"
  } ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:findChecksumRanges(java.util.List,int,int,int)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:goUpGroupHierarchy(java.util.Set,int,java.util.Set)" : [ ],
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:toString()" : [ ],
  "org.apache.hadoop.fs.PathNotFoundException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.security.Credentials:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.http.HttpServer2:initSpnego(org.apache.hadoop.conf.Configuration,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getServerPrincipal"
  } ],
  "org.apache.hadoop.service.launcher.ServiceLaunchException:<init>(int,java.lang.Throwable,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:getContentSummary(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getLen",
    "targetMethod" : "spaceConsumed"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "length"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "spaceConsumed"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "length"
  } ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:hasCapacity(long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setAcl"
  } ],
  "org.apache.hadoop.conf.Configuration:getTimeDuration(java.lang.String,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:getHostFromPrincipal(java.lang.String)" : [ ],
  "org.apache.hadoop.net.StandardSocketFactory:createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.local.RawLocalFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:divide(int,int)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_toJsonString(java.io.Serializable)" : [ ],
  "org.apache.hadoop.conf.Configuration:appendJSONProperty(com.fasterxml.jackson.core.JsonGenerator,org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.conf.ConfigRedactor)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "redact"
  } ],
  "org.apache.hadoop.io.retry.RetryProxy:create(java.lang.Class,org.apache.hadoop.io.retry.FailoverProxyProvider,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:toString()" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:exit(org.apache.hadoop.util.ExitUtil$ExitException)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockManager:requestPrefetch(int)" : [ ],
  "org.apache.hadoop.io.WritableComparator:<init>(java.lang.Class,org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.http.HttpServer2$XFrameOption:getEnum(java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenInformation:<init>()" : [ ],
  "org.apache.hadoop.conf.Configuration:loadProperty(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[])" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:collectThreadLocalStates()" : [ ],
  "org.apache.hadoop.conf.Configuration:getPropertySources(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server:setPriorityLevel(org.apache.hadoop.security.UserGroupInformation,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeDir:addLink(java.lang.String,org.apache.hadoop.fs.viewfs.InodeTree$INodeLink)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:getNumDataUnits()" : [ ],
  "org.apache.hadoop.security.KDiag:validateNTPConf()" : [ ],
  "org.apache.hadoop.util.Shell:destroyAllShellProcesses()" : [ ],
  "org.apache.hadoop.crypto.key.KeyProvider:rollNewVersion(java.lang.String)" : [ {
    "sourceMethod" : "getCipher",
    "targetMethod" : "generateKey"
  }, {
    "sourceMethod" : "getBitLength",
    "targetMethod" : "generateKey"
  } ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider$KeyMetadata:writeObject(java.io.ObjectOutputStream)" : [ ],
  "org.apache.hadoop.security.token.Token:toString()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScanner(byte[],byte[])" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState)" : [ {
    "sourceMethod" : "checkGetBytesArrayBuffer",
    "targetMethod" : "resetBuffer"
  }, {
    "sourceMethod" : "getNullIndexes",
    "targetMethod" : "doDecodeImpl"
  } ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:getNext(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:unbuffer()" : [ ],
  "org.apache.hadoop.fs.ContentSummary:toString(boolean)" : [ ],
  "org.apache.hadoop.io.DataInputByteBuffer:getLength()" : [ ],
  "org.apache.hadoop.fs.VectoredReadUtils:validateVectoredReadRanges(java.util.List)" : [ ],
  "org.apache.hadoop.io.OutputBuffer:reset()" : [ ],
  "org.apache.hadoop.security.SecurityUtil:doAsUser(org.apache.hadoop.security.UserGroupInformation,java.security.PrivilegedExceptionAction)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getDelegationTokens(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:<init>(int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.shell.Ls:adjustColumnWidths(org.apache.hadoop.fs.shell.PathData[])" : [ {
    "sourceMethod" : "getReplication",
    "targetMethod" : "maxLength"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "maxLength"
  }, {
    "sourceMethod" : "getOwner",
    "targetMethod" : "maxLength"
  }, {
    "sourceMethod" : "getGroup",
    "targetMethod" : "maxLength"
  }, {
    "sourceMethod" : "getErasureCodingPolicy",
    "targetMethod" : "maxLength"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:buffer()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:rename(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.fs.permission.PermissionParser:<init>(java.lang.String,java.util.regex.Pattern,java.util.regex.Pattern)" : [ ],
  "org.apache.hadoop.ipc.RPC:waitForProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,long)" : [ {
    "sourceMethod" : "getRpcTimeout",
    "targetMethod" : "waitForProtocolProxy"
  } ],
  "org.apache.hadoop.security.SecurityUtil:getServerPrincipal(java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getComponents",
    "targetMethod" : "replacePattern"
  } ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:invalidateCache(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:getCurrentTrashDir()" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$BlockAppender:getCompressedSize()" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$HaltableRemoteIterator:sourceHasNext()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addMeanStatisticFunction(java.lang.String,java.util.function.Function)" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:expandIfNecessary()" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:createDecompressor()" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_gauges(java.io.Serializable)" : [ ],
  "org.apache.hadoop.util.functional.TaskPool$Builder:runParallel(org.apache.hadoop.util.functional.TaskPool$Task)" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.Lock,long,long)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:checkPartHandles(java.util.Map)" : [ ],
  "org.apache.hadoop.security.Credentials:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.util.HeapSort:sort(org.apache.hadoop.util.IndexedSortable,int,int)" : [ ],
  "org.apache.hadoop.net.TableMapping:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:checkScheme(java.net.URI,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "createSymlink"
  } ],
  "org.apache.hadoop.fs.shell.Display$Checksum:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:initBlock(int)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:start()" : [ ],
  "org.apache.hadoop.ipc.Client$ConnectionId:getConnectionId(java.net.InetSocketAddress,java.lang.Class,org.apache.hadoop.security.UserGroupInformation,int,org.apache.hadoop.io.retry.RetryPolicy,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "retryUpToMaximumCountWithFixedSleep"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.DummyRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:compress(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:sortAndIterate(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "suffix",
    "targetMethod" : "merge"
  } ],
  "org.apache.hadoop.io.compress.ZStandardCodec:getDecompressionBufferSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.ProtocolMetaInfoServerSideTranslatorPB:getProtocolVersions(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsRequestProto)" : [ ],
  "org.apache.hadoop.fs.VectoredReadUtils:validateRangeRequest(org.apache.hadoop.fs.FileRange)" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:getCompressionLevel(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.lib.MethodMetric:metricInfo(java.lang.reflect.Method)" : [ {
    "sourceMethod" : "nameFrom",
    "targetMethod" : "info"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:getRealUser()" : [ ],
  "org.apache.hadoop.util.StringUtils:startupShutdownMessage(java.lang.Class,java.lang.String[],org.slf4j.Logger)" : [ {
    "sourceMethod" : "getHostname",
    "targetMethod" : "createStartupShutdownMessage"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:doFilter(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "getDoAs",
    "targetMethod" : "createProxyUser"
  } ],
  "org.apache.hadoop.util.BlockingThreadPoolExecutorService:newInstance(int,int,long,java.util.concurrent.TimeUnit,java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:reset()" : [ ],
  "org.apache.hadoop.io.retry.FailoverProxyProvider$ProxyInfo:toString()" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:writeChunk(byte[],int,int,boolean)" : [ ],
  "org.apache.hadoop.ipc.RpcClientUtil:putVersionSignatureMap(java.net.InetSocketAddress,java.lang.String,java.lang.String,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addMaximumSample(java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndexEntry:<init>(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:next(java.lang.Object)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "reset"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "reset"
  } ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.Options$HandleOpt$Location:<init>(boolean)" : [ ],
  "org.apache.hadoop.fs.FileUtil:makeShellPath(java.io.File)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getWorkingDirectory()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScanner(org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:getEntry(int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:startMBeans()" : [ ],
  "org.apache.hadoop.fs.BatchedRemoteIterator:makeRequestIfNeeded()" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:requireAllMethodsAvailable()" : [ ],
  "org.apache.hadoop.io.MD5Hash:digest(byte[][],int,int)" : [ ],
  "org.apache.hadoop.ipc.Client:checkResponse(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto)" : [ ],
  "org.apache.hadoop.security.KDiag:verify(boolean,java.lang.String,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.io.Text$Comparator:compare(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:drainTo(java.util.Collection)" : [ ],
  "org.apache.hadoop.net.NetUtils:getConnectAddress(java.net.InetSocketAddress)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addTimedOperation(java.lang.String,long)" : [ ],
  "org.apache.hadoop.security.Groups:refresh()" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:collectThreadLocalStates()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:checkCreateXorRawEncoder()" : [ ],
  "org.apache.hadoop.io.BinaryComparable:hashCode()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfigException:<init>(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader$Builder:<init>()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:seekToNewSource(long)" : [ {
    "sourceMethod" : "getChecksumFilePos",
    "targetMethod" : "reportChecksumFailure"
  }, {
    "sourceMethod" : "getChecksumFilePos",
    "targetMethod" : "seekToNewSource"
  } ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:cancelDelegationToken(org.apache.hadoop.security.token.Token)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:decode(byte[][],int[],byte[][])" : [ ],
  "org.apache.hadoop.service.AbstractService:noteFailure(java.lang.Exception)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:close()" : [ {
    "sourceMethod" : "close",
    "targetMethod" : "end"
  } ],
  "org.apache.hadoop.http.HttpServer2:getFilterInitializers(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.RSErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getDefaultReplication()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.alias.KeyStoreProvider:initFileSystem(java.net.URI)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:impl(java.lang.String,java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:writeUnlock(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:copyFromLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:importTokenFile(java.io.File,java.lang.String,org.apache.hadoop.io.Text,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getService",
    "targetMethod" : "addToken"
  }, {
    "sourceMethod" : "readTokenStorageFile",
    "targetMethod" : "doFormattedWrite"
  } ],
  "org.apache.hadoop.util.KMSUtil:parseJSONEncKeyVersions(java.lang.String,java.util.List)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:getProtocolSignature(java.lang.String,long,int)" : [ {
    "sourceMethod" : "getProtocolVersion",
    "targetMethod" : "getProtocolSignature"
  } ],
  "org.apache.hadoop.security.SecurityUtil:buildTokenService(java.net.URI)" : [ {
    "sourceMethod" : "createSocketAddr",
    "targetMethod" : "buildTokenService"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:multiply(int[],int[])" : [ {
    "sourceMethod" : "multiply",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.fs.FileEncryptionInfo:<init>(org.apache.hadoop.crypto.CipherSuite,org.apache.hadoop.crypto.CryptoProtocolVersion,byte[],byte[],java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:getInstance(int,int)" : [ ],
  "org.apache.hadoop.util.VersionUtil:compareVersions(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:reloginFromKeytab(boolean,boolean)" : [ {
    "sourceMethod" : "getLogin",
    "targetMethod" : "relogin"
  } ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getLibraryName(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.Progress:getInternal()" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileChecksum(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.file.tfile.SimpleBufferedOutputStream:flush()" : [ ],
  "org.apache.hadoop.ipc.Server$RpcCall:populateResponseParamsOnError(java.lang.Throwable,org.apache.hadoop.ipc.Server$RpcCall$ResponseParams)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$2:createCompressionStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor,int)" : [ ],
  "org.apache.hadoop.security.Credentials:writeTokenStorageFile(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:<init>()" : [ ],
  "org.apache.hadoop.util.DataChecksum:writeValue(byte[],int,boolean)" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:tryLock()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:shutdown()" : [ ],
  "org.apache.hadoop.io.compress.CompressorStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getCanonicalUri()" : [ ],
  "org.apache.hadoop.util.LightWeightGSet$SetIterator:hasNext()" : [ ],
  "org.apache.hadoop.net.SocketInputWrapper:<init>(java.net.Socket,java.io.InputStream)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:getProxyuserConfiguration(javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:append(byte[],byte[])" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:handleExecutorTimeout(org.apache.hadoop.util.Shell$ShellCommandExecutor,java.lang.String)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:addGroup(java.lang.String)" : [ ],
  "org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : [ {
    "sourceMethod" : "getProtocolVersion",
    "targetMethod" : "isMethodSupported"
  } ],
  "org.apache.hadoop.security.HttpCrossOriginFilterInitializer:getFilterParameters(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:zkDoWithRetries(org.apache.hadoop.ha.ActiveStandbyElector$ZKAction,org.apache.zookeeper.KeeperException$Code)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:needsPassword()" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "locatePassword"
  } ],
  "org.apache.hadoop.fs.FSBuilder:must(java.lang.String,float)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrAuthenticationFailures()" : [ ],
  "org.apache.hadoop.util.ExitUtil:terminate(org.apache.hadoop.util.ExitUtil$ExitException)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(int[],java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawCoderFactory(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.PriorityQueue:pop()" : [ ],
  "org.apache.hadoop.fs.audit.CommonAuditContext:reset()" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:fileToPath(java.io.File)" : [ ],
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:verify(java.lang.String,javax.net.ssl.SSLSession)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:fixKerberosTicketOrder()" : [ ],
  "org.apache.hadoop.fs.shell.PathData:getDirectoryContents()" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "getStringForChildPath"
  } ],
  "org.apache.hadoop.fs.shell.FsUsage$Df:addToUsagesTable(java.net.URI,org.apache.hadoop.fs.FsStatus,java.lang.String)" : [ {
    "sourceMethod" : "formatPercent",
    "targetMethod" : "addRow"
  } ],
  "org.apache.hadoop.fs.FSBuilder:must(java.lang.String,double)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.io.WritableUtils:writeEnum(java.io.DataOutput,java.lang.Enum)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:<init>(int,int,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server:getConnections()" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:getUsersString()" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:stop()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getXAttrs(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getXAttrs"
  } ],
  "org.apache.hadoop.security.UserGroupInformation$RealUser:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileContext:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.Groups:getUserToGroupsMappingService()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:cancelToken(org.apache.hadoop.security.token.Token,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem:mkdirs(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  }, {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  }, {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  }, {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.util.dynamic.BindingUtils:implemented(org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod[])" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:compareTo(org.apache.hadoop.io.file.tfile.RawComparable)" : [ {
    "sourceMethod" : "getKeyLength",
    "targetMethod" : "compareKeys"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:upperBound(byte[])" : [ ],
  "org.apache.hadoop.util.HttpExceptionUtils:throwEx(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:cancelDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState:<init>(org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder,byte[][],byte[][])" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState:checkOutputBuffers(java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:constructNewPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.CacheableIPList:<init>(org.apache.hadoop.util.FileBasedIPList,long)" : [ ],
  "org.apache.hadoop.ipc.Server:addTerseExceptions(java.lang.Class[])" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:createFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(java.net.URL,boolean)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeInt:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:<init>(org.apache.hadoop.fs.LocatedFileStatus,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.ssl.SSLFactory:<init>(org.apache.hadoop.security.ssl.SSLFactory$Mode,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.KDiag:verify(java.io.File,org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:isFile(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getBytesWritten()" : [ ],
  "org.apache.hadoop.ipc.ProtobufHelper:tokenFromProto(org.apache.hadoop.security.proto.SecurityProtos$TokenProto)" : [ ],
  "org.apache.hadoop.fs.ClosedIOException:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:verifyToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier,byte[])" : [ ],
  "org.apache.hadoop.fs.FileContext:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : [ {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "getFSofPath"
  }, {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "getFSofPath"
  }, {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "resolveIntermediate"
  }, {
    "sourceMethod" : "resolveIntermediate",
    "targetMethod" : "rename"
  }, {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.ipc.FairCallQueue:offer(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkFallback(org.apache.hadoop.conf.Configuration,java.net.URI)" : [ {
    "sourceMethod" : "getDefaultMountTableName",
    "targetMethod" : "addLinkFallback"
  } ],
  "org.apache.hadoop.fs.HarFileSystem:close()" : [ ],
  "org.apache.hadoop.io.compress.lz4.Lz4Compressor:<init>()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:authenticate(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token)" : [ ],
  "org.apache.hadoop.tools.TableListing$Column:getRow(int)" : [ ],
  "org.apache.hadoop.conf.Configuration:getTimeDuration(java.lang.String,java.lang.String,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.util.FileBasedIPList:isIn(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextImpl:reset()" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStream$PositionCache:write(int)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:readFully(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:removeExpiredStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.util.Lists:addAll(java.util.Collection,java.lang.Iterable)" : [ {
    "sourceMethod" : "cast",
    "targetMethod" : "addAll"
  } ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:not()" : [ ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:counter(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.io.AbstractMapWritable:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.FilterFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager$DelegationTokenSecretManager:createIdentifier()" : [ ],
  "org.apache.hadoop.fs.HardLink$HardLinkCGWin:linkCount(java.io.File)" : [ ],
  "org.apache.hadoop.util.KMSUtil:toJSON(org.apache.hadoop.crypto.key.KeyProvider$KeyVersion)" : [ ],
  "org.apache.hadoop.security.ProviderUtils:excludeIncompatibleCredentialProviders(org.apache.hadoop.conf.Configuration,java.lang.Class)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "getFileSystemClass"
  } ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:maximumFpRemove(int[])" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:write1(byte[],int,int)" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort:checkArgs(java.lang.String)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:close()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:close()" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:size()" : [ ],
  "org.apache.hadoop.fs.UnionStorageStatistics$LongStatisticIterator:hasNext()" : [ ],
  "org.apache.hadoop.conf.Configuration:getTimeDuration(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getTimeDurationHelper"
  } ],
  "org.apache.hadoop.fs.FilterFs:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.util.ReflectionUtils:copy(org.apache.hadoop.conf.Configuration,java.lang.Object,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:setWrapped(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:position()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader$InputStreamOption:<init>(org.apache.hadoop.fs.FSDataInputStream)" : [ ],
  "org.apache.hadoop.fs.FilterFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addMeanStatisticSample(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$WrappingRemoteIterator:next()" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "stripOutRoot"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:parkCursorAtEnd()" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getAvailableVirtualMemorySize()" : [ ],
  "org.apache.hadoop.security.token.Token:cancel(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ha.FailoverController:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.ha.HAServiceProtocol$RequestSource)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:ensureParentZNode()" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:asStatic()" : [ {
    "sourceMethod" : "isStatic",
    "targetMethod" : "checkState"
  } ],
  "org.apache.hadoop.fs.FileSystem:processDeleteOnExit()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.security.ssl.SSLFactory:getHostnameVerifier(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toUpperCase",
    "targetMethod" : "getHostnameVerifier"
  } ],
  "org.apache.hadoop.io.serializer.SerializationFactory:getSerializer(java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:deleteCheckpoint(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "getTimeFromCheckpoint"
  } ],
  "org.apache.hadoop.ipc.Client$Connection$PingInputStream:read()" : [ ],
  "org.apache.hadoop.ipc.Server:getPriorityLevel(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkValid(boolean,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.IngressPortBasedResolver:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:retryForeverWithFixedSleep(long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.conf.Configuration:getTimeDurationHelper(java.lang.String,java.lang.String,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.net.NodeBase:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getDoAsUser()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(java.io.InputStream,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.security.token.Token$PrivateToken:isPrivateCloneOf(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:refreshSuperUserGroupsConfiguration()" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Df:processOptions(java.util.LinkedList)" : [ {
    "sourceMethod" : "getOpt",
    "targetMethod" : "setHumanReadable"
  } ],
  "org.apache.hadoop.fs.RawLocalFileSystem:moveFromLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:getCurrentValue(org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:setData(org.apache.hadoop.fs.impl.prefetch.BufferData,long,long)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:createFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getCredentialsInternal()" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:aliasTokenFile(java.io.File,java.lang.String,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getService",
    "targetMethod" : "addToken"
  }, {
    "sourceMethod" : "copyToken",
    "targetMethod" : "addToken"
  } ],
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:addQueueTime(int,long)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:expandAsGlob(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "removeAuthority"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "removeAuthority"
  }, {
    "sourceMethod" : "toUri",
    "targetMethod" : "uriToString"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "uriToString"
  }, {
    "sourceMethod" : "toUri",
    "targetMethod" : "relativize"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "relativize"
  }, {
    "sourceMethod" : "isDirectory",
    "targetMethod" : "relativize"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupNoRandPartC()" : [ ],
  "org.apache.hadoop.conf.Configuration:addDefaultResource(java.lang.String)" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:getFstat(java.io.FileDescriptor)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeLink:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation,java.util.function.Function,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFsStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileContext:getAllStoragePolicies()" : [ ],
  "org.apache.hadoop.conf.Configuration:getAllPropertiesByTags(java.util.List)" : [ ],
  "org.apache.hadoop.http.HttpServer2:setHeaders(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell$Import:execute()" : [ ],
  "org.apache.hadoop.ipc.CallerContext$Builder:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:process(java.lang.String)" : [ ],
  "org.apache.hadoop.io.VersionedWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getInitialWorkingDirectory()" : [ ],
  "org.apache.hadoop.security.SaslInputStream:close()" : [ ],
  "org.apache.hadoop.security.authorize.AuthorizationException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.RPC$VersionMismatch:<init>(java.lang.String,long,long)" : [ ],
  "org.apache.hadoop.security.KDiag:printSysprop(java.lang.String)" : [ ],
  "org.apache.hadoop.net.SocketOutputStream:write(int)" : [ ],
  "org.apache.hadoop.fs.BBUploadHandle:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:checkCreateRSRawDecoder()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:fixFileStatus(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:toString()" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedIO:fileSystem_getEnclosingRoot(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.CrcUtil:getMonomial(long,int)" : [ ],
  "org.apache.hadoop.fs.permission.ChmodParser:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell:getCommandUsage()" : [ ],
  "org.apache.hadoop.fs.shell.SetReplication:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:freeBuffers()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.io.RawComparator,java.lang.Class,java.lang.Class,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Metadata)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:locateKeystore()" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "locatePassword"
  }, {
    "sourceMethod" : "constructNewPath",
    "targetMethod" : "tryLoadIncompleteFlush"
  }, {
    "sourceMethod" : "constructOldPath",
    "targetMethod" : "tryLoadIncompleteFlush"
  }, {
    "sourceMethod" : "constructNewPath",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "constructOldPath",
    "targetMethod" : "tryLoadFromPath"
  } ],
  "org.apache.hadoop.security.ShellBasedIdMapping:loadFullGroupMap()" : [ ],
  "org.apache.hadoop.conf.Configuration:getLongBytes(java.lang.String,long)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "string2long"
  } ],
  "org.apache.hadoop.net.ScriptBasedMapping:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:logIOStatisticsAtDebug(org.slf4j.Logger,java.lang.String,java.lang.Object)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:setOwner(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableStat:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:setConf(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "getTrimmed"
  }, {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "getTrimmed"
  } ],
  "org.apache.hadoop.fs.FilterFs:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:doAsLoginUserOrFatal(java.security.PrivilegedAction)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:throwIfInvalidOffset(long)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:selectDelegationToken(org.apache.hadoop.security.Credentials)" : [ ],
  "org.apache.hadoop.conf.Configuration$DeprecationDelta:<init>(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.find.BaseExpression:prepare()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseIdentityProvider(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.BufferedIOStatisticsInputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:getGroups(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:prepareDataBlock()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:close()" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeDir:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.fs.shell.Truncate:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:release(int)" : [ ],
  "org.apache.hadoop.security.JniBasedUnixGroupsMapping:getGroups(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:reset()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:getDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:createGroupExecutor(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:consume(org.apache.hadoop.metrics2.impl.MetricsBuffer)" : [ {
    "sourceMethod" : "name",
    "targetMethod" : "accepts"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:compareTo(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:updateMapIncr(java.lang.String,boolean)" : [ {
    "sourceMethod" : "getName2IdCmdMac",
    "targetMethod" : "updateMapInternal"
  }, {
    "sourceMethod" : "bashQuote",
    "targetMethod" : "getName2IdCmdMac"
  }, {
    "sourceMethod" : "getName2IdCmdMac",
    "targetMethod" : "updateMapInternal"
  }, {
    "sourceMethod" : "bashQuote",
    "targetMethod" : "getName2IdCmdMac"
  }, {
    "sourceMethod" : "getName2IdCmdNIX",
    "targetMethod" : "updateMapInternal"
  }, {
    "sourceMethod" : "bashQuote",
    "targetMethod" : "getName2IdCmdNIX"
  }, {
    "sourceMethod" : "getName2IdCmdNIX",
    "targetMethod" : "updateMapInternal"
  }, {
    "sourceMethod" : "bashQuote",
    "targetMethod" : "getName2IdCmdNIX"
  } ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:<init>(java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:removeKey(org.apache.hadoop.util.bloom.Key,java.util.List[])" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:<init>(java.net.URI,java.lang.String,boolean,int)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:<init>(org.apache.hadoop.fs.impl.prefetch.PrefetchingStatistics,int,org.apache.hadoop.fs.statistics.DurationTrackerFactory)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setMaximum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.security.KDiag:dump(java.io.File)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:getNumAllUnits()" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.Utils:writeVInt(java.io.DataOutput,int)" : [ ],
  "org.apache.hadoop.http.ProfileServlet:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:supportsSymlinks()" : [ ],
  "org.apache.hadoop.io.IOUtils:copyBytes(java.io.InputStream,java.io.OutputStream,int,boolean)" : [ ],
  "org.apache.hadoop.fs.FsUrlConnection:<init>(org.apache.hadoop.conf.Configuration,java.net.URL)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:delete(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.security.JniBasedUnixGroupsMappingWithFallback:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,int)" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer$FramedBuffer:<init>(int)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:convertToExitException(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.conf.Configuration:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.util.DataChecksum:throwChecksumException(org.apache.hadoop.util.DataChecksum$Type,java.util.zip.Checksum,java.lang.String,long,int,int)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:callQueueLength()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getReplication()" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getHomeDirectory()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:logAllUserInfo(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.net.CachedDNSToSwitchMapping:<init>(org.apache.hadoop.net.DNSToSwitchMapping)" : [ ],
  "org.apache.hadoop.util.ApplicationClassLoader:getResource(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileStatus:<init>(org.apache.hadoop.fs.FileStatus)" : [ ],
  "org.apache.hadoop.fs.BlockLocation:setCachedHosts(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touchz:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.MultiSchemeDelegationTokenAuthenticationHandler:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor$ZStandardDirectDecompressor:reset()" : [ ],
  "org.apache.hadoop.conf.Configuration:getStorageSize(java.lang.String,double,org.apache.hadoop.conf.StorageUnit)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "parse"
  }, {
    "sourceMethod" : "getValue",
    "targetMethod" : "convertStorageUnit"
  }, {
    "sourceMethod" : "getUnit",
    "targetMethod" : "convertStorageUnit"
  } ],
  "org.apache.hadoop.security.token.DtFileOperations:removeTokenFromFile(boolean,java.io.File,java.lang.String,org.apache.hadoop.io.Text,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getService",
    "targetMethod" : "addToken"
  } ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:bulkDelete_available()" : [ ],
  "org.apache.hadoop.util.Lists:newLinkedList(java.lang.Iterable)" : [ {
    "sourceMethod" : "newLinkedList",
    "targetMethod" : "addAll"
  } ],
  "org.apache.hadoop.ipc.Server$Listener:run()" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:close()" : [ {
    "sourceMethod" : "getDefaultCompressionAlgorithm",
    "targetMethod" : "prepareMetaBlock"
  }, {
    "sourceMethod" : "prepareMetaBlock",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "getDefaultCompressionAlgorithm",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.fs.shell.CommandFactory:getInstance(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.http.HttpServer2:getFilterProperties(org.apache.hadoop.conf.Configuration,java.util.List)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getFirstKey()" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:reset()" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:<init>(java.net.URI,org.apache.hadoop.crypto.key.kms.KMSClientProvider[],long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.functional.CommonCallableSupplier:maybeAwaitCompletion(java.util.concurrent.CompletableFuture)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.QuotaUsage:isTypeConsumedAvailable()" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:<init>()" : [ ],
  "org.apache.hadoop.util.IntrusiveCollection:clear()" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getCanonicalServiceName()" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:isLastChunk()" : [ ],
  "org.apache.hadoop.security.KDiag:validateKrb5File()" : [ ],
  "org.apache.hadoop.io.DataOutputBuffer:writeInt(int,int)" : [ ],
  "org.apache.hadoop.io.DataInputBuffer:getData()" : [ ],
  "org.apache.hadoop.util.Timer:monotonicNow()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:end(org.apache.hadoop.fs.impl.prefetch.BlockOperations$Operation)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GF256:gfInvertMatrix(byte[],byte[],int)" : [ ],
  "org.apache.hadoop.fs.FileContext:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.util.functional.TaskPool:foreach(java.lang.Iterable)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:generateEncryptedKey(org.apache.hadoop.crypto.Encryptor,org.apache.hadoop.crypto.key.KeyProvider$KeyVersion,byte[],byte[])" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:invoke()" : [ ],
  "org.apache.hadoop.fs.FileSystem:openFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.Configuration:getTrimmed(java.lang.String)" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:refreshSuperUserGroupsConfiguration(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.http.lib.StaticUserWebFilter:getUsernameFromConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:register(org.apache.hadoop.metrics2.MetricsSystem$Callback)" : [ ],
  "org.apache.hadoop.fs.Options$ChecksumOpt:createDisabled()" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$ListCommand:validate()" : [ ],
  "org.apache.hadoop.fs.FileSystem:append(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.ProcessingDetails:get(org.apache.hadoop.ipc.ProcessingDetails$Timing,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.Trash:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.Credentials:writeTokenStorageToStream(java.io.DataOutputStream)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:setSymlink(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:isSymlink()" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:parsePartialGroupNames(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:decompress(byte[],int,int)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:updateMaps()" : [ ],
  "org.apache.hadoop.metrics2.util.SampleStat:max()" : [ ],
  "org.apache.hadoop.io.EnumSetWritable:<init>(java.util.EnumSet,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:stringToUri(java.lang.String)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping$LdapSslSocketFactory:createTrustManagers()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.DummyErasureEncoder:prepareEncodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "delete"
  } ],
  "org.apache.hadoop.ipc.UnexpectedServerException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.Delete$Rmdir:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.service.AbstractService:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.GcTimeMonitor:getLatestGcData()" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableInverseQuantiles:setQuantiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.DecimalFormat)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:incrementCounter(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setMinimum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:skip(long)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:touch()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:getInitialWorkingDirectory()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.permission.PermissionStatus$2:<init>(java.lang.String,java.lang.String,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : [ ],
  "org.apache.hadoop.io.ObjectWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.DFCachingGetSpaceUsed:<init>(org.apache.hadoop.fs.GetSpaceUsed$Builder)" : [ ],
  "org.apache.hadoop.security.token.Token:decodeIdentifier()" : [ {
    "sourceMethod" : "getKind",
    "targetMethod" : "getClassForIdentifier"
  }, {
    "sourceMethod" : "getClassForIdentifier",
    "targetMethod" : "newInstance"
  }, {
    "sourceMethod" : "getKind",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.ha.ActiveStandbyElector:tryDeleteOwnBreadCrumbNode()" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:totalPartsLen(java.util.List)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.tools.TableListing$Builder:addField(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:toString()" : [ ],
  "org.apache.hadoop.util.HttpExceptionUtils:validateResponse(java.net.HttpURLConnection,int)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.net.ScriptBasedMapping$RawScriptBasedMapping:resolve(java.util.List)" : [ ],
  "org.apache.hadoop.fs.Globber$GlobBuilder:<init>(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:create(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.security.KDiag:dumpUGI(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : [ {
    "sourceMethod" : "hasKerberosCredentials",
    "targetMethod" : "println"
  }, {
    "sourceMethod" : "getAuthenticationMethod",
    "targetMethod" : "println"
  }, {
    "sourceMethod" : "getRealAuthenticationMethod",
    "targetMethod" : "println"
  } ],
  "org.apache.hadoop.ipc.RpcClientUtil:methodExists(int,long,java.util.Map)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:setConfiguration(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.service.ServiceStateException:<init>(int,java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:merge()" : [ {
    "sourceMethod" : "getPosition",
    "targetMethod" : "updateProgress"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "getLocalPathForWrite"
  }, {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "cloneFileAttributes"
  }, {
    "sourceMethod" : "getLocalPathForWrite",
    "targetMethod" : "makeQualified"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "makeQualified"
  }, {
    "sourceMethod" : "cloneFileAttributes",
    "targetMethod" : "writeFile"
  }, {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "writeFile"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "put"
  } ],
  "org.apache.hadoop.fs.shell.AclCommands$SetfaclCommand:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getAclEntries",
    "targetMethod" : "setAcl"
  }, {
    "sourceMethod" : "getAclEntries",
    "targetMethod" : "removeAclEntries"
  }, {
    "sourceMethod" : "getAclEntries",
    "targetMethod" : "modifyAclEntries"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:compareTo(org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode)" : [ ],
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:setupHttpRequestOnIpcPortResponse()" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:logIOStatisticsAtDebug(java.lang.String,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:concat(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path[])" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:create(org.apache.hadoop.ipc.Server,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:create(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.Options$CreateOpts[])" : [ {
    "sourceMethod" : "getBytesPerChecksum",
    "targetMethod" : "processChecksumOpt"
  }, {
    "sourceMethod" : "getChecksumType",
    "targetMethod" : "processChecksumOpt"
  } ],
  "org.apache.hadoop.util.NativeLibraryChecker:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.util.ApplicationClassLoader:loadClass(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.PathIOException:getMessage()" : [ ],
  "org.apache.hadoop.net.DNS:getHosts(java.lang.String,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:stop()" : [ ],
  "org.apache.hadoop.crypto.key.UserProvider:flush()" : [ ],
  "org.apache.hadoop.fs.shell.MoveCommands$Rename:processPath(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.FsUrlStreamHandler:<init>()" : [ ],
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:submit(java.util.concurrent.Callable)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:getFileLength()" : [ ],
  "org.apache.hadoop.http.HttpServer2:constructSecretProvider(org.apache.hadoop.http.HttpServer2$Builder,javax.servlet.ServletContext)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:incrementMinimum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:initializeDefaultFactory(org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory$SSLChannelMode)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:retryByRemoteException(org.apache.hadoop.io.retry.RetryPolicy,java.util.Map)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode:<init>(java.lang.String,java.lang.String,org.apache.hadoop.fs.viewfs.ChRootedFileSystem)" : [ ],
  "org.apache.hadoop.io.compress.CompressorStream:<init>(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor,int)" : [ ],
  "org.apache.hadoop.service.launcher.IrqHandler:handle(sun.misc.Signal)" : [ ],
  "org.apache.hadoop.net.SocksSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:renewTokenFile(java.io.File,java.lang.String,org.apache.hadoop.io.Text,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "renew",
    "targetMethod" : "formatDate"
  }, {
    "sourceMethod" : "readTokenStorageFile",
    "targetMethod" : "doFormattedWrite"
  } ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:getBytesRead()" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec:close()" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:<init>()" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping$LdapSslSocketFactory:getDefault()" : [ ],
  "org.apache.hadoop.fs.FileSystem:deleteOnExit(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.ChunkedArrayList:addChunk(int)" : [ ],
  "org.apache.hadoop.util.ExitUtil:halt(int,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "open"
  } ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:hasCapacity(long)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:getQueueSizes()" : [ ],
  "org.apache.hadoop.metrics2.filter.AbstractPatternFilter:accepts(org.apache.hadoop.metrics2.MetricsTag)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getInitialWorkingDirectory()" : [ ],
  "org.apache.hadoop.util.Lists:newArrayListWithCapacity(int)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:setRenewer(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$WBlockState:<init>(org.apache.hadoop.io.file.tfile.Compression$Algorithm,org.apache.hadoop.fs.FSDataOutputStream,org.apache.hadoop.io.BytesWritable,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$ConcurrentQueue:offer(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getDefaultReplication",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getDefaultBlockSize",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.fs.FilterFileSystem:createPathHandle(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Options$HandleOpt[])" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:add(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:submit(java.lang.Runnable,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileSystem:createNonRecursive(org.apache.hadoop.fs.Path,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getFileDefault",
    "targetMethod" : "createNonRecursive"
  } ],
  "org.apache.hadoop.tools.TableListing$Column:<init>(java.lang.String,org.apache.hadoop.tools.TableListing$Justification,boolean)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState:<init>(org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder,byte[][],int[],byte[][])" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor$ZlibDirectDecompressor:<init>(org.apache.hadoop.io.compress.zlib.ZlibDecompressor$CompressionHeader,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getOwner()" : [ ],
  "org.apache.hadoop.fs.shell.Ls$Lsr:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:startThreads()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcQueueTime(long)" : [ ],
  "org.apache.hadoop.ipc.Server:getAuthMethods(org.apache.hadoop.security.token.SecretManager,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenInformation:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor$ZlibDirectDecompressor:finished()" : [ ],
  "org.apache.hadoop.fs.DFCachingGetSpaceUsed:refresh()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addGauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:parseStaticMap(java.io.File)" : [ ],
  "org.apache.hadoop.fs.QuotaUsage:getQuotaUsage(boolean)" : [ ],
  "org.apache.hadoop.metrics2.impl.SinkQueue:waitForData()" : [ ],
  "org.apache.hadoop.metrics2.sink.StatsDSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : [ ],
  "org.apache.hadoop.fs.Options$CreateOpts:bytesPerChecksum(short)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:encode(byte[][],byte[][])" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:exists(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.BytesWritable:set(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:<init>()" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy,int)" : [ ],
  "org.apache.hadoop.security.alias.CredentialProviderFactory:getProviders(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:getCacheCleared()" : [ ],
  "org.apache.hadoop.crypto.random.OsSecureRandom:fillReservoir(int)" : [ ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.ipc.Client:setCallIdAndRetryCount(int,int,java.lang.Object)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.ErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:toExtendedShort()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setMeanStatistic(java.lang.String,org.apache.hadoop.fs.statistics.MeanStatistic)" : [ ],
  "org.apache.hadoop.conf.Configuration:setSocketAddr(java.lang.String,java.net.InetSocketAddress)" : [ {
    "sourceMethod" : "getHostPortString",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : [ ],
  "org.apache.hadoop.ipc.ProtobufHelper:getFixedByteString(java.lang.String)" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withLongFunctionGauge(java.lang.String,java.util.function.ToLongFunction)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:absolute()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsInfoImpl:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:sortByDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:putPart(org.apache.hadoop.fs.UploadHandle,int,org.apache.hadoop.fs.Path,java.io.InputStream,long)" : [ ],
  "org.apache.hadoop.fs.FSInputChecker:seek(long)" : [ ],
  "org.apache.hadoop.ipc.Server$ConnectionManager:close(org.apache.hadoop.ipc.Server$Connection)" : [ {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "decrUserConnections"
  } ],
  "org.apache.hadoop.fs.shell.FsUsage$Df:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getStatus",
    "targetMethod" : "addToUsagesTable"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "addToUsagesTable"
  }, {
    "sourceMethod" : "getStatus",
    "targetMethod" : "addToUsagesTable"
  } ],
  "org.apache.hadoop.io.IntWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:addFalsePositive(org.apache.hadoop.util.bloom.Key[])" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:endCompression()" : [ ],
  "org.apache.hadoop.conf.ReconfigurationServlet:applyChanges(java.io.PrintWriter,org.apache.hadoop.conf.Reconfigurable,javax.servlet.http.HttpServletRequest)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher:<init>(int,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:readFully(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:loadSslConf(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "extractPassword"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "extractPassword"
  } ],
  "org.apache.hadoop.crypto.key.KeyProviderExtension:getKeysMetadata(java.lang.String[])" : [ ],
  "org.apache.hadoop.util.LightWeightGSet$Values:iterator()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:<init>(int,int,int)" : [ ],
  "org.apache.hadoop.conf.ConfigRedactor:redact(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.DurationTrackerFactory:trackDuration(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setXAttr"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:renewDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.Token,java.lang.String)" : [ ],
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolServerSideTranslatorPB:getProtocolVersion(java.lang.String,long)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:flush()" : [ {
    "sourceMethod" : "valueOf",
    "targetMethod" : "setPermission"
  } ],
  "org.apache.hadoop.security.UserGroupInformation$TestingGroups:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.Display$Cat:printToStdout(java.io.InputStream)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:<init>(int,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:<init>(org.apache.hadoop.fs.FileSystem,java.net.URI)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.dynamic.BindingUtils:loadInvocation(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.fs.FilterFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleStat:min()" : [ ],
  "org.apache.hadoop.crypto.random.OsSecureRandom:finalize()" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:create()" : [ ],
  "org.apache.hadoop.conf.Configuration:updatePropertiesWithDeprecatedKeys(org.apache.hadoop.conf.Configuration$DeprecationContext,java.lang.String[])" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Magic:readAndVerify(java.io.DataInput)" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:put(java.lang.Object)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:extractCommandOptions(org.apache.hadoop.conf.Configuration,java.util.List)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getAllStoragePolicies()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseCostProvider(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setCounter(java.lang.String,long)" : [ ],
  "org.apache.hadoop.conf.Configuration:onlyKeyExists(java.lang.String)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:chooseRandom(org.apache.hadoop.net.InnerNode,org.apache.hadoop.net.Node,java.util.Collection,int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setReplication(org.apache.hadoop.fs.Path,short)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setReplication"
  } ],
  "org.apache.hadoop.log.LogLevel:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:shutdown()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:mkOneDir(java.io.File)" : [ ],
  "org.apache.hadoop.fs.impl.FlagSet:checkMutable()" : [ ],
  "org.apache.hadoop.fs.Globber:createGlobber(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.conf.Configured:<init>()" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:readIndex()" : [ {
    "sourceMethod" : "newKey",
    "targetMethod" : "next"
  } ],
  "org.apache.hadoop.fs.shell.find.Result:toString()" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:decrypt(org.apache.hadoop.crypto.Decryptor,java.nio.ByteBuffer,java.nio.ByteBuffer,byte)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:constructRpcRequest(java.lang.reflect.Method,org.apache.hadoop.thirdparty.protobuf.Message)" : [ ],
  "org.apache.hadoop.util.functional.LazyAutoCloseableReference:<init>(org.apache.hadoop.util.functional.CallableRaisingIOE)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:needsInput()" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:buildLinkRegexEntry(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.UserGroupInformation,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.BlockDecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:applyItem(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getRootExpression",
    "targetMethod" : "equals"
  } ],
  "org.apache.hadoop.io.WritableComparator:get(java.lang.Class)" : [ ],
  "org.apache.hadoop.conf.Configuration:setStorageSize(java.lang.String,double,org.apache.hadoop.conf.StorageUnit)" : [ ],
  "org.apache.hadoop.net.StandardSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell:printException(java.lang.Exception)" : [ ],
  "org.apache.hadoop.ipc.RetryCache:newEntry(java.lang.Object,long,byte[],int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:stop()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "removeAclEntries"
  } ],
  "org.apache.hadoop.util.LightWeightCache:<init>(int,int,long,long)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:<init>(java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:reencryptEncryptedKeys(java.util.List)" : [ {
    "sourceMethod" : "getConf",
    "targetMethod" : "getInstance"
  }, {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptedKeyVersion",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "equals",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getVersionName",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "equals",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "equals"
  }, {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "getCurrentKey"
  }, {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getMaterial",
    "targetMethod" : "generateEncryptedKey"
  }, {
    "sourceMethod" : "getEncryptedKeyIv",
    "targetMethod" : "generateEncryptedKey"
  } ],
  "org.apache.hadoop.security.token.DtUtilShell$Renew:execute()" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.ErasureCodec:getName()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getResolvedQualifiedPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:and(org.apache.hadoop.util.bloom.Filter)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.ObjectWritable:tryInstantiateProtobuf(java.lang.Class,java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.FSInputStream:readFully(long,byte[])" : [ ],
  "org.apache.hadoop.security.ProviderUtils:noPasswordWarning(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkMergeSlash(org.apache.hadoop.conf.Configuration,java.net.URI)" : [ {
    "sourceMethod" : "getDefaultMountTableName",
    "targetMethod" : "addLinkMergeSlash"
  } ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:getStats(long)" : [ ],
  "org.apache.hadoop.io.Text:skip(java.io.DataInput)" : [ {
    "sourceMethod" : "readVInt",
    "targetMethod" : "skipFully"
  } ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:selectDelegationToken(org.apache.hadoop.security.Credentials,org.apache.hadoop.io.Text)" : [ {
    "sourceMethod" : "getKind",
    "targetMethod" : "equals"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemUtil:updateMountPointFsStatus(org.apache.hadoop.fs.viewfs.ViewFileSystem,java.util.Map,org.apache.hadoop.fs.viewfs.ViewFileSystem$MountPoint,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.token.Token:decodeFromUrlString(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.CommandFactory:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:getRemaining()" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:reencryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.net.NetworkTopology:sortByDistanceUsingNetworkLocation(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:release(org.apache.hadoop.fs.impl.prefetch.BufferData)" : [ {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "release"
  }, {
    "sourceMethod" : "release",
    "targetMethod" : "end"
  }, {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "end"
  } ],
  "org.apache.hadoop.conf.Configuration:setInt(java.lang.String,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:sortPass(boolean)" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink:xdr_string(java.lang.String)" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:isValidAuthType(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth)" : [ ],
  "org.apache.hadoop.io.compress.Lz4Codec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.io.compress.BlockDecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:generateEncryptedKey(java.lang.String)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.io.MapFile$Reader:next(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.io.BytesWritable:setCapacity(int)" : [ ],
  "org.apache.hadoop.fs.permission.AclUtil:getAclFromPermAndEntries(org.apache.hadoop.fs.permission.FsPermission,java.util.List)" : [ {
    "sourceMethod" : "getUserAction",
    "targetMethod" : "setPermission"
  }, {
    "sourceMethod" : "getGroupAction",
    "targetMethod" : "setPermission"
  }, {
    "sourceMethod" : "getOtherAction",
    "targetMethod" : "setPermission"
  } ],
  "org.apache.hadoop.ipc.ProxyCombiner$CombinedProxyInvocationHandler:close()" : [ ],
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:<init>()" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:<init>()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getDefaultBlockSize()" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer:<init>(int)" : [ ],
  "org.apache.hadoop.security.ssl.ReloadingX509KeystoreManager:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getStorageBytesWritten()" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:throwMetricsException(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.conf.Configuration:setStrings(java.lang.String,java.lang.String[])" : [ {
    "sourceMethod" : "arrayToString",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getFsStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.service.AbstractService:close()" : [ ],
  "org.apache.hadoop.conf.Configuration:<init>()" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommandWithMultiThread:isMultiThreadNecessary(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLink(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI)" : [ {
    "sourceMethod" : "getDefaultMountTableName",
    "targetMethod" : "addLink"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:hasDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.FindClass:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.security.alias.UserProvider:flush()" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:getDefaultMountTableName(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:getRecord()" : [ ],
  "org.apache.hadoop.util.ShutdownThreadsHelper:shutdownThread(java.lang.Thread)" : [ ],
  "org.apache.hadoop.util.ChunkedArrayList:add(java.lang.Object)" : [ ],
  "org.apache.hadoop.tools.TableListing$Builder:addField(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.GlobPattern:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$FailoverOnNetworkExceptionRetry:shouldRetry(java.lang.Exception,int,int,boolean)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:hflush()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:skipToNextBlockMarker()" : [ ],
  "org.apache.hadoop.fs.FsShellPermissions:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:available()" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:<init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:copyFileToTarget(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "build",
    "targetMethod" : "awaitFuture"
  }, {
    "sourceMethod" : "checkPathsForReservedRaw",
    "targetMethod" : "preserveAttributes"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:acquireHelper(int,boolean)" : [ ],
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getPermissions(com.jcraft.jsch.ChannelSftp$LsEntry)" : [ ],
  "org.apache.hadoop.metrics2.lib.MethodMetric:newCounter(java.lang.Class)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:incr(float)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:<init>()" : [ ],
  "org.apache.hadoop.fs.FileContext:getStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.LightWeightCache:<init>(int,int,long,long,org.apache.hadoop.util.Timer)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:spawnAutoRenewalThreadForUserCreds(boolean)" : [ {
    "sourceMethod" : "getTGT",
    "targetMethod" : "getRefreshTime"
  }, {
    "sourceMethod" : "getUserName",
    "targetMethod" : "executeAutoRenewalTask"
  } ],
  "org.apache.hadoop.fs.FileSystem:copyFromLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_snapshot()" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:offer(org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.io.MapFile:main(java.lang.String[])" : [ {
    "sourceMethod" : "getValueClass",
    "targetMethod" : "append"
  }, {
    "sourceMethod" : "getKeyClass",
    "targetMethod" : "append"
  }, {
    "sourceMethod" : "newInstance",
    "targetMethod" : "append"
  }, {
    "sourceMethod" : "getValueClass",
    "targetMethod" : "next"
  }, {
    "sourceMethod" : "getKeyClass",
    "targetMethod" : "next"
  }, {
    "sourceMethod" : "newInstance",
    "targetMethod" : "next"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:close()" : [ ],
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:abortUploadsUnderPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.WeakReferenceMap:prune()" : [ ],
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newFixedThreadPool(int,java.util.concurrent.ThreadFactory)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController$HealthCallbacks:enteredState(org.apache.hadoop.ha.HealthMonitor$State)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:start(java.util.List,boolean)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO:ensureInitialized()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:decode(org.apache.hadoop.io.erasurecode.ECChunk[],int[],org.apache.hadoop.io.erasurecode.ECChunk[])" : [ {
    "sourceMethod" : "toBuffers",
    "targetMethod" : "decode"
  } ],
  "org.apache.hadoop.security.SecurityUtil:getTokenServiceAddr(org.apache.hadoop.security.token.Token)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "createSocketAddr"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$WBlockState:finish()" : [ ],
  "org.apache.hadoop.service.CompositeService$CompositeServiceShutdownHook:run()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricGaugeInt:<init>(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.fs.FsShellPermissions$Chown:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "listStatus"
  } ],
  "org.apache.hadoop.io.SequenceFile$Writer:syncInterval(int)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:offerQueue(int,org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:<init>(long,int)" : [ ],
  "org.apache.hadoop.crypto.JceAesCtrCryptoCodec:calculateIV(byte[],long,byte[])" : [ {
    "sourceMethod" : "getAlgorithmBlockSize",
    "targetMethod" : "calculateIV"
  } ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "mkdirs"
  } ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:seekToNewSource(long)" : [ {
    "sourceMethod" : "getChecksumFilePos",
    "targetMethod" : "reportChecksumFailure"
  }, {
    "sourceMethod" : "getChecksumFilePos",
    "targetMethod" : "seekToNewSource"
  } ],
  "org.apache.hadoop.ipc.RPC$Server:<init>(java.lang.String,int,java.lang.Class,int,int,int,org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.security.token.SecretManager,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:<init>(java.io.InputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[])" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter$WaitableMetricsBuffer:<init>(org.apache.hadoop.metrics2.impl.MetricsBuffer)" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:writeLock(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server:getNumOpenConnectionsPerUser()" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getFsStatus()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupNoRandPartB()" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator:getLocalPathToRead(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileContext()" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:updateDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ {
    "sourceMethod" : "getKeyId",
    "targetMethod" : "updateDelegationKey"
  } ],
  "org.apache.hadoop.crypto.key.UserProvider:getKeyVersion(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:register(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSink)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricGaugeDouble:<init>(org.apache.hadoop.metrics2.MetricsInfo,double)" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:createSaslClient(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth)" : [ ],
  "org.apache.hadoop.fs.FSInputStream:toString()" : [ ],
  "org.apache.hadoop.security.KDiag:validateKinitExecutable()" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "println"
  } ],
  "org.apache.hadoop.metrics2.impl.SinkQueue:dequeue()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:getValueClass()" : [ {
    "sourceMethod" : "getValueClassName",
    "targetMethod" : "getClass"
  } ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addGauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_setThreadIOStatisticsContext(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:toString()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkPathExistsAsDir(java.nio.file.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricGaugeLong:<init>(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.EvaluatingStatisticsMap:snapshot()" : [ ],
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:checkUploadId(byte[])" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:forceDecay()" : [ ],
  "org.apache.hadoop.service.launcher.InterruptEscalator:<init>(org.apache.hadoop.service.launcher.ServiceLauncher,int)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StatisticDurationTracker:<init>(org.apache.hadoop.fs.statistics.impl.IOStatisticsStore,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:updateJmxCache()" : [ ],
  "org.apache.hadoop.ipc.ProtocolSignature:getFingerprints(java.lang.reflect.Method[])" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.DumpUtil:dumpChunks(java.lang.String,org.apache.hadoop.io.erasurecode.ECChunk[])" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:getFilter(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$1:createDecompressionStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int)" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$DeleteCommand:validate()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPInputStream:seekInternal()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getKeyVersion(java.lang.String)" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  }, {
    "sourceMethod" : "call",
    "targetMethod" : "parseJSONKeyVersion"
  } ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:addFalsePositive(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:checkPathsForReservedRaw(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators:toArray(org.apache.hadoop.fs.RemoteIterator,java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:complete(org.apache.hadoop.fs.UploadHandle,org.apache.hadoop.fs.Path,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.RefreshRegistry:dispatch(java.lang.String,java.lang.String[])" : [ {
    "sourceMethod" : "handlerName",
    "targetMethod" : "setSenderName"
  } ],
  "org.apache.hadoop.fs.shell.PathData:toString()" : [ ],
  "org.apache.hadoop.fs.GetSpaceUsed$Builder:build()" : [ ],
  "org.apache.hadoop.fs.PathIOException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSTokenRenewer:cancel(org.apache.hadoop.security.token.Token,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.NetgroupCache:getNetgroupNames()" : [ ],
  "org.apache.hadoop.fs.FileSystem:createSnapshot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystemStorageStatistics$LongStatisticIterator:next()" : [ ],
  "org.apache.hadoop.fs.impl.FutureIOSupport:awaitFuture(java.util.concurrent.Future)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addMaximumSample(java.lang.String,long)" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:getTokenInfoFromSQL(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ {
    "sourceMethod" : "getSequenceNumber",
    "targetMethod" : "createTokenInfo"
  } ],
  "org.apache.hadoop.conf.Configuration:set(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Invocation:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.ipc.Client$ConnectionId:hashCode()" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:xor(org.apache.hadoop.util.bloom.Filter)" : [ ],
  "org.apache.hadoop.io.compress.SnappyCodec:createInputStream(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPInputStream:read()" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibCompressorType(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.SocketInputStream:<init>(java.nio.channels.ReadableByteChannel,long)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:getGid(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:flush()" : [ ],
  "org.apache.hadoop.util.Shell:getSymlinkCommand(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureEncoder:getInputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:addRegexMountEntry(org.apache.hadoop.fs.viewfs.InodeTree$LinkEntry)" : [ ],
  "org.apache.hadoop.fs.FileSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSKeyVersion:<init>(java.lang.String,java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$FailoverOnNetworkExceptionRetry:<init>(org.apache.hadoop.io.retry.RetryPolicy,int,long,long)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableQuantiles:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:create(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:listStatusForFallbackLink()" : [ {
    "sourceMethod" : "getPathWithoutSchemeAndAuthority",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "getTargetFileSystem",
    "targetMethod" : "getFileContext"
  }, {
    "sourceMethod" : "getRootFallbackLink",
    "targetMethod" : "getFileContext"
  } ],
  "org.apache.hadoop.fs.QuotaUsage$Builder:build()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Metadata:equals(org.apache.hadoop.io.SequenceFile$Metadata)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:decodeTokenIdentifier(org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.ipc.Client$Call:setRpcResponse(org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.metrics2.sink.StatsDSink$StatsD:write(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:requestCaching(org.apache.hadoop.fs.impl.prefetch.BufferData)" : [ {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "requestCaching"
  }, {
    "sourceMethod" : "executeFunction",
    "targetMethod" : "setCaching"
  }, {
    "sourceMethod" : "requestCaching",
    "targetMethod" : "end"
  }, {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "end"
  } ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcProtobufRequest:toString()" : [ ],
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:sync()" : [ ],
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMappingWithFallback:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:receiveRpcResponse()" : [ {
    "sourceMethod" : "readResponse",
    "targetMethod" : "wrap"
  }, {
    "sourceMethod" : "getValue",
    "targetMethod" : "checkResponse"
  }, {
    "sourceMethod" : "newInstance",
    "targetMethod" : "setRpcResponse"
  } ],
  "org.apache.hadoop.service.AbstractService:registerGlobalListener(org.apache.hadoop.service.ServiceStateChangeListener)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:progress(org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.io.BinaryComparable:compareTo(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FilterFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:authorize(org.apache.hadoop.security.UserGroupInformation,java.net.InetAddress)" : [ ],
  "org.apache.hadoop.security.Credentials:addAll(org.apache.hadoop.security.Credentials,boolean)" : [ ],
  "org.apache.hadoop.fs.impl.StoreImplementationUtils:hasCapability(java.io.OutputStream,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:context()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getPermission()" : [ ],
  "org.apache.hadoop.fs.BBPartHandle:from(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$AppendIfExistsOption:<init>(boolean)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainChannel:read(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:addPersistedDelegationToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier,long)" : [ {
    "sourceMethod" : "getSequenceNumber",
    "targetMethod" : "setDelegationTokenSeqNum"
  } ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class)" : [ ],
  "org.apache.hadoop.io.BytesWritable:get()" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncValue:set(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.shell.Head:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.XAttrSetFlag:validate(java.lang.String,boolean,java.util.EnumSet)" : [ ],
  "org.apache.hadoop.util.CrcComposer:update(int,long)" : [ ],
  "org.apache.hadoop.util.StringUtils:unEscapeString(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : [ ],
  "org.apache.hadoop.fs.http.AbstractHttpFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.Text:write(java.io.DataOutput,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$BlockSizeOption:<init>(long)" : [ ],
  "org.apache.hadoop.fs.ftp.FtpFs:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.MergeSort:mergeSort(int[],int[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.sink.GraphiteSink$Graphite:connect()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:sort(int)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:init()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:write(int)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addResponseTime(java.lang.String,org.apache.hadoop.ipc.Schedulable,org.apache.hadoop.ipc.ProcessingDetails)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "addQueueTime"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "addProcessingTime"
  } ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "delete"
  } ],
  "org.apache.hadoop.ipc.CallQueueManager:swapQueue(java.lang.Class,java.lang.Class,int,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "parseNumLevels",
    "targetMethod" : "createScheduler"
  }, {
    "sourceMethod" : "parseNumLevels",
    "targetMethod" : "parseCapacityWeights"
  }, {
    "sourceMethod" : "parseNumLevels",
    "targetMethod" : "createCallQueueInstance"
  }, {
    "sourceMethod" : "parseCapacityWeights",
    "targetMethod" : "createCallQueueInstance"
  }, {
    "sourceMethod" : "createCallQueueInstance",
    "targetMethod" : "stringRepr"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:changeStateToProcessABlock()" : [ ],
  "org.apache.hadoop.util.Daemon$DaemonFactory:newThread(java.lang.Runnable)" : [ ],
  "org.apache.hadoop.http.ProfileServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.net.SocketOutputStream$Writer:<init>(java.nio.channels.WritableByteChannel,long)" : [ ],
  "org.apache.hadoop.util.ReflectionUtils:printThreadInfo(java.io.PrintStream,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:getAndMoveToFrontDecode()" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsFactory:getInstance(java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:mkOneDirWithMode(org.apache.hadoop.fs.Path,java.io.File,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "getUMask",
    "targetMethod" : "applyUMask"
  }, {
    "sourceMethod" : "toShort",
    "targetMethod" : "createDirectoryWithMode"
  } ],
  "org.apache.hadoop.ha.ZKFCRpcServer:cedeActive(int)" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.crypto.key.UserProvider:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.LightWeightGSet$Values:contains(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:keyClass(java.lang.Class)" : [ ],
  "org.apache.hadoop.util.DataChecksum:newDataChecksum(org.apache.hadoop.util.DataChecksum$Type,int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addGauge(org.apache.hadoop.metrics2.MetricsInfo,double)" : [ ],
  "org.apache.hadoop.io.retry.RetryUtils:getMultipleLinearRandomRetry(org.apache.hadoop.conf.Configuration,java.lang.String,boolean,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "parseCommaSeparatedString"
  } ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "progressable",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:publishMetricsNow()" : [ {
    "sourceMethod" : "sampleMetrics",
    "targetMethod" : "publishMetrics"
  } ],
  "org.apache.hadoop.io.retry.RetryPolicies:retryUpToMaximumTimeWithFixedSleep(long,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:resetBuffer(java.nio.ByteBuffer,int)" : [ ],
  "org.apache.hadoop.io.compress.lz4.Lz4Decompressor:needsInput()" : [ ],
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String,javax.net.ssl.SSLSocket)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:openFile(java.lang.String)" : [ {
    "sourceMethod" : "build",
    "targetMethod" : "awaitFuture"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrSlowRpc()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:updateAttrCache(java.lang.Iterable)" : [ ],
  "org.apache.hadoop.util.Shell:getQualifiedBinPath(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.BufferedFSInputStream:readFully(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:numberOfBytesTillNextMarker(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.FileUtil:checkDest(java.lang.String,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.util.LightWeightGSet:get(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues()" : [ {
    "sourceMethod" : "sendMTFValues1",
    "targetMethod" : "sendMTFValues2"
  }, {
    "sourceMethod" : "sendMTFValues1",
    "targetMethod" : "sendMTFValues5"
  }, {
    "sourceMethod" : "sendMTFValues1",
    "targetMethod" : "sendMTFValues7"
  } ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:getRollInterval()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "satisfyStoragePolicy"
  } ],
  "org.apache.hadoop.fs.Options$HandleOpt:content()" : [ ],
  "org.apache.hadoop.ha.HealthMonitor:tryConnect()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:copyToLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "copyToLocalFile"
  }, {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "copyToLocalFile"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsBufferBuilder:get()" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:getCompressionName()" : [ ],
  "org.apache.hadoop.security.SaslInputStream:read(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.QuotaUsage:toString(boolean)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProvider:createKey(java.lang.String,org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ {
    "sourceMethod" : "getCipher",
    "targetMethod" : "generateKey"
  }, {
    "sourceMethod" : "getBitLength",
    "targetMethod" : "generateKey"
  } ],
  "org.apache.hadoop.fs.shell.PathData:lookupStat(org.apache.hadoop.fs.FileSystem,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getGroupNames()" : [ ],
  "org.apache.hadoop.ha.HealthMonitor:loopUntilConnected()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  } ],
  "org.apache.hadoop.io.wrappedio.WrappedIO:fileSystem_openFile(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.String,org.apache.hadoop.fs.FileStatus,java.lang.Long,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:exists(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:initialize(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FSDataInputStream,long,long,org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:renewDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.fs.BlockLocation:setTopologyPaths(java.lang.String[])" : [ ],
  "org.apache.hadoop.security.token.TokenIdentifier:getTrackingId()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:<init>()" : [ ],
  "org.apache.hadoop.util.FindClass:<init>()" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell:init(java.lang.String[])" : [ ],
  "org.apache.hadoop.crypto.key.KeyProvider$Options:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.RetryCache:waitForCompletion(org.apache.hadoop.ipc.RetryCache,java.lang.Object,byte[],int)" : [ {
    "sourceMethod" : "newEntry",
    "targetMethod" : "waitForCompletion"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:doSubjectLogin(javax.security.auth.Subject,org.apache.hadoop.security.UserGroupInformation$LoginParams)" : [ {
    "sourceMethod" : "getLoginAppName",
    "targetMethod" : "newLoginContext"
  }, {
    "sourceMethod" : "getUserName",
    "targetMethod" : "put"
  }, {
    "sourceMethod" : "newLoginContext",
    "targetMethod" : "setLogin"
  }, {
    "sourceMethod" : "getLoginAppName",
    "targetMethod" : "setLogin"
  }, {
    "sourceMethod" : "now",
    "targetMethod" : "setLastLogin"
  } ],
  "org.apache.hadoop.http.HttpServer2:getConnectorAddress(int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:merge(org.apache.hadoop.fs.FileStatus[],org.apache.hadoop.fs.FileStatus[])" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:close()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState)" : [ ],
  "org.apache.hadoop.util.DataChecksum:writeValue(java.io.DataOutputStream,boolean)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getCounterReference(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getKeyVersions(java.lang.String)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.fs.FileSystem:getUsed()" : [ ],
  "org.apache.hadoop.fs.QuotaUsage:toString()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader$OnlyHeaderOption:<init>()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:makeRelative(java.lang.String,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.NetUtils:getInputStream(java.net.Socket,long)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:snapshot(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:createInputStream(java.io.InputStream)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:sendPing()" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:log(java.lang.reflect.Method,boolean,int,int,long,java.lang.Exception)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:exitWithUsageMessage()" : [ ],
  "org.apache.hadoop.ipc.UserIdentityProvider:makeIdentity(org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getParameterValues(java.lang.String)" : [ ],
  "org.apache.hadoop.util.UTF8ByteArrayUtils:findNthByte(byte[],int,int,byte,int)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:gauge(org.apache.hadoop.metrics2.MetricsInfo,double)" : [ ],
  "org.apache.hadoop.fs.FileUtil:unTar(java.io.InputStream,java.io.File,boolean)" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:checkOpenState()" : [ {
    "sourceMethod" : "isOpen",
    "targetMethod" : "checkState"
  } ],
  "org.apache.hadoop.io.compress.DefaultCodec:createCompressor()" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkNfly(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:refresh(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:createPermissions(java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getRealAuthenticationMethod()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState)" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "progressable",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.DecodingValidator:validate(java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withLongFunctionMinimum(java.lang.String,java.util.function.ToLongFunction)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:getPadding(long)" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : [ ],
  "org.apache.hadoop.fs.FilterFs:checkPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.AclCommands$SetfaclCommand:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:register(java.lang.String,org.apache.hadoop.metrics2.MetricsSystem$Callback)" : [ ],
  "org.apache.hadoop.conf.Configuration:getConfResourceAsReader(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server:<init>(java.lang.String,int,java.lang.Class,int,int,int,org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.security.token.SecretManager)" : [ ],
  "org.apache.hadoop.io.WritableUtils:readCompressedString(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:bulkDelete_delete(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.util.Collection)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:isNestedMountPointSupported(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyCompressor:compress(byte[],int,int)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getDtService(java.net.URI)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.ReconfigurableBase:<init>()" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileContext(java.net.URI)" : [ ],
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:writeBuffer(org.apache.hadoop.io.DataOutputBuffer)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "writeVInt"
  } ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:currentConfig()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getKeyVersions(java.lang.String)" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  } ],
  "org.apache.hadoop.fs.ContentSummary:equals(java.lang.Object)" : [ {
    "sourceMethod" : "getErasureCodingPolicy",
    "targetMethod" : "equals"
  } ],
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getParameterMap()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:getStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache:getUnique(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.RPC$Server:addProtocol(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.Class,java.lang.Object)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_means(java.io.Serializable)" : [ ],
  "org.apache.hadoop.fs.FileContext:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.RemoteException:valueOf(org.xml.sax.Attributes)" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:getRawCoderNames(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "getCoderNames",
    "targetMethod" : "getStrings"
  } ],
  "org.apache.hadoop.ipc.ResponseBuffer:setCapacity(int)" : [ ],
  "org.apache.hadoop.fs.FileUtil:unpackEntries(org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.io.File)" : [ ],
  "org.apache.hadoop.net.NodeBase:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.ContentSummary:toString()" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getShortUserName()" : [ ],
  "org.apache.hadoop.util.LightWeightGSet:remove(java.lang.Object)" : [ {
    "sourceMethod" : "getIndex",
    "targetMethod" : "remove"
  } ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:removeStoredMasterKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:listXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:getInstanceConfigs(java.lang.String)" : [ ],
  "org.apache.hadoop.io.BytesWritable:hashCode()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:registerSource(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSource)" : [ ],
  "org.apache.hadoop.fs.shell.SetReplication:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:safeCreate(java.lang.String,byte[],java.util.List,org.apache.zookeeper.CreateMode,java.util.List,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getSymlink",
    "targetMethod" : "equals"
  } ],
  "org.apache.hadoop.fs.FileSystem:moveFromLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:subset(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:<init>(java.lang.String,java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSource,java.lang.Iterable,long,org.apache.hadoop.metrics2.impl.MetricsConfig)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec:createDecompressor()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "renameSnapshot"
  } ],
  "org.apache.hadoop.security.SaslPlainServer:wrap(byte[],int,int)" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:<init>(int,org.apache.hadoop.crypto.CipherSuite,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.UserProvider:getKeys()" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getCanonicalServiceName()" : [ ],
  "org.apache.hadoop.fs.FileUtil:createJarWithClassPath(java.lang.String,org.apache.hadoop.fs.Path,java.util.Map)" : [ ],
  "org.apache.hadoop.ipc.Server:channelRead(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)" : [ {
    "sourceMethod" : "channelIO",
    "targetMethod" : "incrReceivedBytes"
  } ],
  "org.apache.hadoop.fs.Options$HandleOpt:changed(boolean)" : [ ],
  "org.apache.hadoop.conf.Configuration:getSocketAddr(java.lang.String,java.lang.String,int)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "createSocketAddr"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:numOpenConnections()" : [ ],
  "org.apache.hadoop.fs.shell.Concat:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:monitorActiveStatus()" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell$CheckCommand:validate()" : [ ],
  "org.apache.hadoop.service.ServiceStateModel:toString()" : [ ],
  "org.apache.hadoop.security.Groups:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:getStringForChildPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getInputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrClientBackoffDisconnected()" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort:getKeyFiles()" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodecFactory:getCodecClassByName(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:<init>(int,int,org.apache.hadoop.fs.impl.prefetch.PrefetchingStatistics)" : [ ],
  "org.apache.hadoop.fs.PathExistsException:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.WeakReferenceThreadMap:getForCurrentThread()" : [ ],
  "org.apache.hadoop.util.functional.LazyAutoCloseableReference:lazyAutoCloseablefromSupplier(java.util.function.Supplier)" : [ ],
  "org.apache.hadoop.fs.GlobFilter:<init>(java.lang.String,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.util.JvmPauseMonitor:serviceInit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:initZK()" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "resolveConfIndirection"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "parseACLs"
  }, {
    "sourceMethod" : "getFileSystemClass",
    "targetMethod" : "excludeIncompatibleCredentialProviders"
  }, {
    "sourceMethod" : "getInt",
    "targetMethod" : "checkArgument"
  } ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:backupToOld(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getCurrentKey(java.lang.String)" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  }, {
    "sourceMethod" : "call",
    "targetMethod" : "parseJSONKeyVersion"
  } ],
  "org.apache.hadoop.ipc.Server:<init>(java.lang.String,int,java.lang.Class,int,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:add(org.apache.hadoop.fs.statistics.MeanStatistic)" : [ ],
  "org.apache.hadoop.util.Progress:addPhase(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:clear()" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:initializeBindUsers()" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:hflush()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator:getLocalPathForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:getUidAllowingUnknown(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:stop()" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodecFactory:getCodec(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:setExcludesFile(java.lang.String)" : [ ],
  "org.apache.hadoop.http.HttpServer2:addNoCacheFilter(org.eclipse.jetty.servlet.ServletContextHandler)" : [ ],
  "org.apache.hadoop.io.Text:validateUTF8(byte[])" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging$StatisticsToString:toString()" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:setConfigurationInternal(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getBoolean",
    "targetMethod" : "setTokenServiceUseIp"
  } ],
  "org.apache.hadoop.fs.impl.FlagSet:createFlagSet(java.lang.Class,java.lang.String,java.util.EnumSet)" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$Command:getKeyProvider()" : [ ],
  "org.apache.hadoop.security.authorize.ProxyServers:refresh()" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : [ {
    "sourceMethod" : "getProxy",
    "targetMethod" : "isRpcInvocation"
  }, {
    "sourceMethod" : "nextCallId",
    "targetMethod" : "newCall"
  }, {
    "sourceMethod" : "getProxy",
    "targetMethod" : "newCall"
  }, {
    "sourceMethod" : "isRpcInvocation",
    "targetMethod" : "newCall"
  } ],
  "org.apache.hadoop.fs.shell.find.BaseExpression:toString()" : [ ],
  "org.apache.hadoop.util.ApplicationClassLoader:<init>(java.lang.String,java.lang.ClassLoader,java.util.List)" : [ ],
  "org.apache.hadoop.crypto.CipherOption:<init>(org.apache.hadoop.crypto.CipherSuite)" : [ ],
  "org.apache.hadoop.fs.shell.Display:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addGaugeFunction(java.lang.String,java.util.function.Function)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeLong:incr()" : [ ],
  "org.apache.hadoop.conf.Configuration:getFloat(java.lang.String,float)" : [ ],
  "org.apache.hadoop.ipc.ProtocolMetaInfoServerSideTranslatorPB:getProtocolVersionForRpcKind(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.String)" : [ {
    "sourceMethod" : "getProtocolName",
    "targetMethod" : "getSupportedProtocolVersions"
  } ],
  "org.apache.hadoop.security.alias.CredentialShell:init(java.lang.String[])" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:approximateCount(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedIO:byteBufferPositionedReadable_readFully(java.io.InputStream,long,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setMeanStatistic(java.lang.String,org.apache.hadoop.fs.statistics.MeanStatistic)" : [ ],
  "org.apache.hadoop.log.LogLevel:printUsage()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:newObjectName(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache$Key:toString()" : [ ],
  "org.apache.hadoop.ipc.Server$Responder:doAsyncWrite(java.nio.channels.SelectionKey)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:getUid(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:getRecordNumByLocation(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:copyStreamToTarget(java.io.InputStream,org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "suffix",
    "targetMethod" : "writeStreamToFile"
  }, {
    "sourceMethod" : "suffix",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.jmx.JMXJsonServlet:writeObject(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.lang.String)" : [ ],
  "org.apache.hadoop.net.DomainNameResolverFactory:newInstance(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:isLeafParent()" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:handleSaslConnectionFailure(int,int,java.io.IOException,java.util.Random,org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.fs.PathPermissionException:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.SetFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:getProtocolVersion(java.lang.String,long)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:createReqInfo()" : [ ],
  "org.apache.hadoop.security.Credentials:addAll(org.apache.hadoop.security.Credentials)" : [ ],
  "org.apache.hadoop.fs.FSBuilder:opt(java.lang.String,double)" : [ ],
  "org.apache.hadoop.util.FindClass:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:prepareDecodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:moveToFrontCodeAndSend()" : [ ],
  "org.apache.hadoop.io.SecureIOUtils:checkStat(java.io.File,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:replacePattern(java.lang.String[],java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:preserveAttributes(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData,boolean)" : [ {
    "sourceMethod" : "getModificationTime",
    "targetMethod" : "setTimes"
  }, {
    "sourceMethod" : "getAccessTime",
    "targetMethod" : "setTimes"
  }, {
    "sourceMethod" : "getGroup",
    "targetMethod" : "setOwner"
  }, {
    "sourceMethod" : "getOwner",
    "targetMethod" : "setOwner"
  }, {
    "sourceMethod" : "getPermission",
    "targetMethod" : "setPermission"
  }, {
    "sourceMethod" : "getPermission",
    "targetMethod" : "getAclFromPermAndEntries"
  }, {
    "sourceMethod" : "getEntries",
    "targetMethod" : "getAclFromPermAndEntries"
  }, {
    "sourceMethod" : "getAclStatus",
    "targetMethod" : "getAclFromPermAndEntries"
  }, {
    "sourceMethod" : "getAclFromPermAndEntries",
    "targetMethod" : "setAcl"
  } ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:<init>(org.apache.hadoop.io.retry.FailoverProxyProvider,org.apache.hadoop.io.retry.RetryPolicy,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:setAttrCacheMetric(org.apache.hadoop.metrics2.AbstractMetric,int)" : [ {
    "sourceMethod" : "name",
    "targetMethod" : "metricName"
  } ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable:set(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.BulkDeleteUtils:validatePathIsUnderParent(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getDefaultBlockSize()" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getDefaultBlockSize"
  } ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation$ThreadSafeSampleStat:add(double)" : [ ],
  "org.apache.hadoop.crypto.OpensslCipher:update(java.nio.ByteBuffer,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getTrashRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:msync()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getFileHarStatus",
    "targetMethod" : "toFileStatus"
  } ],
  "org.apache.hadoop.util.Sets:addAll(java.util.TreeSet,java.lang.Iterable)" : [ {
    "sourceMethod" : "cast",
    "targetMethod" : "addAll"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:<init>(org.apache.hadoop.ipc.Server,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:openConnection(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:flush()" : [ ],
  "org.apache.hadoop.fs.FileContext:getLinkTarget(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.Path:<init>(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:create(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSystem)" : [ ],
  "org.apache.hadoop.ipc.Server:getProtocol()" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:incrementCurrentKeyId()" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRates:add(java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.WritableComparator:hashBytes(byte[],int)" : [ ],
  "org.apache.hadoop.util.bloom.BloomFilter:add(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.ipc.RetryCache:<init>(java.lang.String,double,long)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcProtobufRequest:<init>()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:incrementMaximum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.permission.PermissionParser:combineModes(int,boolean)" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:parseCapacityWeights(int,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileContext:getUMask()" : [ ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:makeAbsolute(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:initialize(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.fs.shell.CommandFormat$TooManyArgumentsException:<init>(int,int)" : [ ],
  "org.apache.hadoop.fs.FileUtil:stat2Paths(org.apache.hadoop.fs.FileStatus[],org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.VersionInfo:getCompilePlatform()" : [ ],
  "org.apache.hadoop.ipc.RPC:waitForProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,long)" : [ ],
  "org.apache.hadoop.io.file.tfile.Utils$Version:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.audit.CommonAuditContext:createInstance()" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getDefaultSocketFactory",
    "targetMethod" : "getProtocolProxy"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:newSink(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSink,org.apache.hadoop.metrics2.impl.MetricsConfig)" : [ ],
  "org.apache.hadoop.io.compress.lz4.Lz4Compressor:reinit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:launchService(org.apache.hadoop.conf.Configuration,org.apache.hadoop.service.Service,java.util.List,boolean,boolean)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:setupConnection(org.apache.hadoop.security.UserGroupInformation)" : [ {
    "sourceMethod" : "getHostname",
    "targetMethod" : "wrapException"
  }, {
    "sourceMethod" : "getUserName",
    "targetMethod" : "getHostFromPrincipal"
  }, {
    "sourceMethod" : "getHostFromPrincipal",
    "targetMethod" : "getLocalInetAddress"
  }, {
    "sourceMethod" : "getLocalInetAddress",
    "targetMethod" : "bindToLocalAddress"
  } ],
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:getInfo(org.apache.hadoop.metrics2.annotation.Metric,java.lang.reflect.Method)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "getInfo"
  } ],
  "org.apache.hadoop.fs.DU:<init>(org.apache.hadoop.fs.GetSpaceUsed$Builder)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState)" : [ {
    "sourceMethod" : "checkGetDirectBuffer",
    "targetMethod" : "resetBuffer"
  }, {
    "sourceMethod" : "getNullIndexes",
    "targetMethod" : "doDecodeImpl"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode:<init>(java.lang.String,java.lang.String,java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:byteBufferPositionedReadable_readFullyAvailable(java.io.InputStream)" : [ ],
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter:init(javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.util.Lists:partition(java.util.List,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:tryResolveInRegexMountpoint(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getNumProcessors()" : [ ],
  "org.apache.hadoop.ha.HAAdmin:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileUtil:chmod(java.lang.String,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRate(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.log.LogThrottlingHelper:<init>(long)" : [ ],
  "org.apache.hadoop.io.UTF8:getBytes(java.lang.String)" : [ ],
  "org.apache.hadoop.security.KDiag:fail(java.lang.String,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touchz:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.util.RunJar:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceShutdownHook:run()" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:setJaasConfiguration(org.apache.zookeeper.client.ZKClientConfig)" : [ ],
  "org.apache.hadoop.fs.Path:checkNotRelative()" : [ ],
  "org.apache.hadoop.net.NetworkTopology:add(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:hsync()" : [ ],
  "org.apache.hadoop.net.ScriptBasedMapping$RawScriptBasedMapping:runResolveCommand(java.util.List,java.lang.String)" : [ ],
  "org.apache.hadoop.util.dynamic.BindingUtils:available(org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:readBuffer(org.apache.hadoop.io.DataInputBuffer,org.apache.hadoop.io.compress.CompressionInputStream)" : [ {
    "sourceMethod" : "readVInt",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "getLength",
    "targetMethod" : "reset"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "reset"
  } ],
  "org.apache.hadoop.util.LightWeightCache:put(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkIntegerMultiple(long,java.lang.String,long,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:addOrUpdateDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey,boolean)" : [ ],
  "org.apache.hadoop.net.SocketOutputStream:<init>(java.net.Socket,long)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileContext(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "getFileContext"
  } ],
  "org.apache.hadoop.io.compress.CompressionInputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ ],
  "org.apache.hadoop.fs.shell.CommandFactory:registerCommands(java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.shell.Display$Cat:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getInputStream",
    "targetMethod" : "printToStdout"
  } ],
  "org.apache.hadoop.fs.FSDataInputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.fs.FileUtil:list(java.io.File)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine:getProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : [ {
    "sourceMethod" : "getRetryPolicy",
    "targetMethod" : "getProxy"
  }, {
    "sourceMethod" : "getRpcTimeout",
    "targetMethod" : "getProxy"
  }, {
    "sourceMethod" : "getAddress",
    "targetMethod" : "getProxy"
  }, {
    "sourceMethod" : "getTicket",
    "targetMethod" : "getProxy"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:delete(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:incrementDelegationTokenSeqNum()" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:getRemain()" : [ ],
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:storeDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ ],
  "org.apache.hadoop.util.StringUtils:escapeString(java.lang.String,char,char[])" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.http.HttpServer2:hasAdministratorAccess(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:rollOverAvgs()" : [ ],
  "org.apache.hadoop.ha.HAAdmin:help(java.lang.String[])" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getNumCores()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getXAttrs(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getXAttrs"
  } ],
  "org.apache.hadoop.ha.HAAdmin:checkParameterValidity(java.lang.String[],java.util.Map)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainInputStream:close()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$LoginParams:getDefaults()" : [ ],
  "org.apache.hadoop.conf.StorageUnit$1:getDefault(double)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$AppendToFile:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InnerCache:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.SaslOutputStream:write(int)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:reEstablishSession()" : [ ],
  "org.apache.hadoop.util.PriorityQueue:insert(java.lang.Object)" : [ ],
  "org.apache.hadoop.conf.Configuration:getDouble(java.lang.String,double)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:updateDecryptor(org.apache.hadoop.crypto.Decryptor,long,byte[])" : [ ],
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[],java.io.File,java.util.Map,long,boolean)" : [ ],
  "org.apache.hadoop.security.CompositeGroupsMapping:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.Tail:dumpFromOffset(org.apache.hadoop.fs.shell.PathData,long)" : [ {
    "sourceMethod" : "openFile",
    "targetMethod" : "copyBytes"
  } ],
  "org.apache.hadoop.util.JvmPauseMonitor:formatMessage(long,java.util.Map,java.util.Map)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.MultiSchemeDelegationTokenAuthenticationHandler:init(java.util.Properties)" : [ ],
  "org.apache.hadoop.io.MapWritable:<init>(org.apache.hadoop.io.MapWritable)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.XORErasureCodec:createEncoder()" : [ ],
  "org.apache.hadoop.io.compress.BlockCompressorStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.ContentSummary:toString(boolean,boolean,boolean,java.util.List)" : [ ],
  "org.apache.hadoop.fs.FSInputStream:validatePositionedReadArgs(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekTo(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : [ {
    "sourceMethod" : "getBlockIndex",
    "targetMethod" : "initBlock"
  }, {
    "sourceMethod" : "getBlockIndex",
    "targetMethod" : "initBlock"
  } ],
  "org.apache.hadoop.fs.shell.AclCommands$SetfaclCommand:getAclEntries(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:warmUpEncryptedKeys(java.lang.String[])" : [ ],
  "org.apache.hadoop.net.SocketOutputStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.CrcComposer:update(java.io.DataInputStream,long,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "fullPath"
  } ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:getWeight(java.util.List)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrClientBackoff()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations$End:getDebugInfo()" : [ ],
  "org.apache.hadoop.io.UTF8:readString(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.SequenceFile$RecordCompressWriter:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$HadoopConfiguration:getAppConfigurationEntry(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.ReconfigurationServlet:printConf(java.io.PrintWriter,org.apache.hadoop.conf.Reconfigurable)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getLen()" : [ ],
  "org.apache.hadoop.io.Text:<init>(byte[])" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:setLastLogin(long)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableInverseQuantiles$InversePercentile:<init>(double)" : [ ],
  "org.apache.hadoop.fs.shell.Command:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.FilterFs:getStatistics()" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSupport:snapshotIOStatistics(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.fs.FilterFs:listXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.http.HtmlQuoting:needsQuoting(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getUsed(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.Command:processArgument(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:disconnect(org.apache.commons.net.ftp.FTPClient)" : [ ],
  "org.apache.hadoop.io.InputBuffer:reset(byte[],int)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getCpuFrequency()" : [ ],
  "org.apache.hadoop.fs.FSInputStream:readFully(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getAllStoragePolicies()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:<init>(java.lang.Class,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.fs.FileSystem:newInstance(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:flushBuffer()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileMeta:makeComparator(java.lang.String)" : [ ],
  "org.apache.hadoop.io.DefaultStringifier:toString(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:<init>(java.io.File,long,org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.util.StringUtils:byteToHexString(byte[])" : [ ],
  "org.apache.hadoop.fs.Path:isRoot()" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableCounterLong:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.crypto.JceCtrCryptoCodec$JceCtrCipher:<init>(int,java.lang.String,org.apache.hadoop.crypto.CipherSuite,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.Trash:moveToAppropriateTrash(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "resolvePath",
    "targetMethod" : "getServerDefaults"
  }, {
    "sourceMethod" : "getTrashInterval",
    "targetMethod" : "setLong"
  }, {
    "sourceMethod" : "getServerDefaults",
    "targetMethod" : "setLong"
  }, {
    "sourceMethod" : "resolvePath",
    "targetMethod" : "moveToTrash"
  } ],
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:checksumOpt(org.apache.hadoop.fs.Options$ChecksumOpt)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:write(java.io.DataOutput)" : [ {
    "sourceMethod" : "getAclString",
    "targetMethod" : "writeString"
  } ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSEncryptedKeyVersion:<init>(java.lang.String,java.lang.String,byte[],java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.conf.Configuration:getPasswordFromCredentialProviders(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server:refreshCallQueue(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getSchedulerClass",
    "targetMethod" : "swapQueue"
  }, {
    "sourceMethod" : "getQueueClassPrefix",
    "targetMethod" : "swapQueue"
  }, {
    "sourceMethod" : "getQueueClass",
    "targetMethod" : "swapQueue"
  }, {
    "sourceMethod" : "getClientBackoffEnable",
    "targetMethod" : "setClientBackoffEnabled"
  } ],
  "org.apache.hadoop.ipc.CallQueueManager:getServerFailOverEnable(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolServerSideTranslatorPB:refresh(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ipc.proto.GenericRefreshProtocolProtos$GenericRefreshRequestProto)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.DummyRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:blockSort()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:release(org.apache.hadoop.fs.impl.prefetch.BufferData)" : [ {
    "sourceMethod" : "canRelease",
    "targetMethod" : "checkArgument"
  } ],
  "org.apache.hadoop.ipc.RetryCache$CacheEntryWithPayload:<init>(byte[],int,java.lang.Object,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:<init>(org.apache.hadoop.fs.AbstractFileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:<init>(org.apache.hadoop.fs.FileSystem$Statistics)" : [ ],
  "org.apache.hadoop.conf.Configuration:set(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:release()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:resolveLink(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:chooseRandom(java.lang.String,java.lang.String,java.util.Collection)" : [ {
    "sourceMethod" : "getNode",
    "targetMethod" : "chooseRandom"
  } ],
  "org.apache.hadoop.fs.FilterFileSystem:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:sendResponse(org.apache.hadoop.ipc.Server$RpcCall)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[],long,boolean)" : [ ],
  "org.apache.hadoop.ipc.internal.ShadedProtobufHelper:tokenFromProto(org.apache.hadoop.security.proto.SecurityProtos$TokenProto)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_getCurrent()" : [ ],
  "org.apache.hadoop.util.FindClass:loadedClass(java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:removeUser(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache:closeAll(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:offer(org.apache.hadoop.ipc.Schedulable,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Du:setUsagesTable(org.apache.hadoop.fs.shell.FsUsage$TableBuilder)" : [ ],
  "org.apache.hadoop.util.JvmPauseMonitor:serviceStop()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:append(java.lang.Object,java.lang.Object)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec:createOutputStream(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.FindClass:explainResult(int,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FSDataInputStream:minSeekForVectorReads()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:openFile(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "openFile"
  } ],
  "org.apache.hadoop.io.compress.DefaultCodec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.ipc.ExternalCall:<init>(java.security.PrivilegedExceptionAction)" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:logWaitWarning(long,org.apache.hadoop.util.InstrumentedLock$SuppressedSnapshot)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.ConfigurationWithLogging:set(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.IntrusiveCollection:removeAll(java.util.Collection)" : [ ],
  "org.apache.hadoop.fs.PathPermissionException:<init>(java.lang.String,java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm:getDecompressor()" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:processRpcOutOfBandRequest(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto,org.apache.hadoop.ipc.RpcWritable$Buffer)" : [ ],
  "org.apache.hadoop.security.User:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:writeBufData(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:createTmpFileForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:needsPassword()" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "locatePassword"
  } ],
  "org.apache.hadoop.security.ProviderUtils:noPasswordError(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.OpensslCipher:finalize()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getClientBackoffDisconnected()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "mkdirs"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:wrapLocalFileStatus(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$TokenSelector:<init>()" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:launchServiceAndExit(java.util.List)" : [ {
    "sourceMethod" : "createConfiguration",
    "targetMethod" : "extractCommandOptions"
  }, {
    "sourceMethod" : "extractCommandOptions",
    "targetMethod" : "launchService"
  }, {
    "sourceMethod" : "createConfiguration",
    "targetMethod" : "launchService"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.util.InstrumentedLock:logWarning(long,org.apache.hadoop.util.InstrumentedLock$SuppressedSnapshot)" : [ ],
  "org.apache.hadoop.security.ssl.SSLFactory:createSSLEngine()" : [ ],
  "org.apache.hadoop.io.MapWritable:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:setPmdkSupportState(int)" : [ ],
  "org.apache.hadoop.fs.shell.SetReplication:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$ProgressableOption:<init>(org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getFileChecksum(org.apache.hadoop.fs.Path,long)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getFileChecksum"
  } ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:startUpload()" : [ ],
  "org.apache.hadoop.fs.FileSystem:fixRelativePart(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:writeChecksumChunks(byte[],int,int)" : [ ],
  "org.apache.hadoop.tracing.NullTraceScope:<init>()" : [ ],
  "org.apache.hadoop.fs.ftp.FTPInputStream:read()" : [ ],
  "org.apache.hadoop.http.HttpServer2:stop()" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:getPos()" : [ ],
  "org.apache.hadoop.util.Shell:getRunScriptCommand(java.io.File)" : [ ],
  "org.apache.hadoop.conf.Configuration:setFloat(java.lang.String,float)" : [ ],
  "org.apache.hadoop.fs.viewfs.FsGetter:getNewInstance(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:putMetricsImmediate(org.apache.hadoop.metrics2.impl.MetricsBuffer)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StatisticDurationTracker:<init>(org.apache.hadoop.fs.statistics.impl.IOStatisticsStore,java.lang.String,long)" : [ ],
  "org.apache.hadoop.ipc.Server:getQueueClass(java.lang.String,int,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "convertQueueClass"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:loginUserFromKeytabAndReturnUGI(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.CompressionOutputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.net.TableMapping$RawTableMapping:resolve(java.util.List)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrSentBytes(int)" : [ ],
  "org.apache.hadoop.fs.shell.Command:isDeprecated()" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:parseGeneralOptions(org.apache.commons.cli.Options,java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.FilterFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:binarySearch(org.apache.hadoop.io.WritableComparable)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newQuantiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)" : [ ],
  "org.apache.hadoop.io.DefaultStringifier:load(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.Class)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "fromString"
  } ],
  "org.apache.hadoop.fs.FSOutputSummer:flushBuffer(boolean,boolean)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getQuotaUsage(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getQuotaUsage"
  } ],
  "org.apache.hadoop.fs.BBUploadHandle:from(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:newZooKeeper(java.lang.String,int,org.apache.zookeeper.Watcher,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.FsCommand:processRawArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNumberOfElements(java.util.Collection,int,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.ECChunk:toBuffers(org.apache.hadoop.io.erasurecode.ECChunk[])" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : [ ],
  "org.apache.hadoop.fs.HardLink$HardLinkCGUnix:linkCount(java.io.File)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:getLocalHostName(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getDefaultHost"
  } ],
  "org.apache.hadoop.ipc.RpcScheduler:addResponseTime(java.lang.String,org.apache.hadoop.ipc.Schedulable,org.apache.hadoop.ipc.ProcessingDetails)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "addResponseTime"
  } ],
  "org.apache.hadoop.io.retry.RetryPolicies:failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy,int,long,long)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:<init>(org.apache.hadoop.io.compress.zlib.ZlibCompressor$CompressionLevel,org.apache.hadoop.io.compress.zlib.ZlibCompressor$CompressionStrategy,org.apache.hadoop.io.compress.zlib.ZlibCompressor$CompressionHeader,int)" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:add(org.apache.hadoop.net.Node)" : [ {
    "sourceMethod" : "getNextAncestorName",
    "targetMethod" : "createParentNode"
  } ],
  "org.apache.hadoop.util.NativeCrc32:isAvailable()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState:checkOutputBuffers(byte[][])" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:encrypt(java.nio.ByteBuffer,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.metrics2.lib.MethodMetric:newGauge(java.lang.Class)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:prepareAppendKey(int)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:getDirectoryContentsIterator()" : [ {
    "sourceMethod" : "listStatusIterator",
    "targetMethod" : "mappingRemoteIterator"
  } ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:<init>(org.apache.hadoop.io.retry.FailoverProxyProvider,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.fs.FilterFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "delete"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  } ],
  "org.apache.hadoop.fs.FileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : [ ],
  "org.apache.hadoop.util.VersionInfo:getSrcChecksum()" : [ ],
  "org.apache.hadoop.io.OutputBuffer:getData()" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector$WatcherWithClientRef:process(org.apache.zookeeper.WatchedEvent)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:innerSetKeyVersion(java.lang.String,java.lang.String,byte[],java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:<init>(org.apache.hadoop.fs.FSDataInputStream,int,long,long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Du:getUsagesTable()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:addOverallProcessingTime(java.lang.String,long)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileStatus:compareTo(org.apache.hadoop.fs.FileStatus)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "compareTo"
  } ],
  "org.apache.hadoop.security.alias.KeyStoreProvider:createPermissions(java.lang.String)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:refresh(java.io.InputStream,java.io.InputStream)" : [ ],
  "org.apache.hadoop.util.RateLimitingFactory:create(int)" : [ ],
  "org.apache.hadoop.fs.FileSystem$FSDataInputStreamBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.PathHandle)" : [ ],
  "org.apache.hadoop.http.HttpServer2$Builder:makeConfigurationChangeMonitor(long,org.eclipse.jetty.util.ssl.SslContextFactory$Server)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.security.UserGroupInformation$UgiMetrics:create()" : [ ],
  "org.apache.hadoop.io.WritableUtils:writeVInt(java.io.DataOutput,int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:initMode()" : [ ],
  "org.apache.hadoop.util.StringUtils:byteDesc(long)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher:add(org.apache.hadoop.net.unix.DomainSocket,org.apache.hadoop.net.unix.DomainSocketWatcher$Handler)" : [ ],
  "org.apache.hadoop.util.Sets:newHashSetWithExpectedSize(int)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:toBuffers(org.apache.hadoop.io.erasurecode.ECChunk[])" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:isDirectory()" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:createPath(org.apache.hadoop.fs.Path,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.util.PureJavaCrc32:<init>()" : [ ],
  "org.apache.hadoop.util.LightWeightGSet$SetIterator:next()" : [ ],
  "org.apache.hadoop.io.InputBuffer:getLength()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:advance()" : [ {
    "sourceMethod" : "getBlockIndex",
    "targetMethod" : "getBlockEntryCount"
  } ],
  "org.apache.hadoop.io.retry.FailoverProxyProvider$ProxyInfo:getString(java.lang.String)" : [ ],
  "org.apache.hadoop.io.DataInputBuffer:reset(byte[],int)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Reader:probablyHasKey(org.apache.hadoop.io.WritableComparable)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getServerDefaults()" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Server$Call:<init>(int,int,org.apache.hadoop.ipc.RPC$RpcKind,byte[],org.apache.hadoop.tracing.Span,org.apache.hadoop.ipc.CallerContext)" : [ ],
  "org.apache.hadoop.fs.GlobFilter:accept(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "matches"
  } ],
  "org.apache.hadoop.util.functional.RemoteIterators$HaltableRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator,org.apache.hadoop.util.functional.CallableRaisingIOE)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:stream(org.apache.hadoop.fs.FSDataOutputStream)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:readFromUnderlyingStream(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.net.TableMapping:getConf()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:run(boolean)" : [ {
    "sourceMethod" : "createValueBytes",
    "targetMethod" : "nextRaw"
  } ],
  "org.apache.hadoop.io.MapFile$Reader:reset()" : [ ],
  "org.apache.hadoop.fs.BufferedFSInputStream:readFully(long,byte[])" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:putQueue(int,org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$Context:getAndIncrDirNumLastAccessed()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:listStatus(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "getFileStatus"
  } ],
  "org.apache.hadoop.io.SequenceFile$Reader:seek(long)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addMinimumSample(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:<init>(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:containsKmsDt(org.apache.hadoop.security.UserGroupInformation)" : [ {
    "sourceMethod" : "getCredentials",
    "targetMethod" : "selectDelegationToken"
  } ],
  "org.apache.hadoop.io.SequenceFile$Writer$KeyClassOption:<init>(java.lang.Class)" : [ ],
  "org.apache.hadoop.ipc.RPC$Server:getHighestSupportedProtocol(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.String)" : [ ],
  "org.apache.hadoop.util.ComparableVersion$StringItem:compareTo(org.apache.hadoop.util.ComparableVersion$Item)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:rollNewVersion(java.lang.String)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.http.HtmlQuoting:quoteHtmlChars(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.security.Credentials:addToken(org.apache.hadoop.io.Text,org.apache.hadoop.security.token.Token)" : [ {
    "sourceMethod" : "getService",
    "targetMethod" : "privateClone"
  } ],
  "org.apache.hadoop.util.LightWeightCache:remove(java.lang.Object)" : [ {
    "sourceMethod" : "remove",
    "targetMethod" : "checkState"
  }, {
    "sourceMethod" : "remove",
    "targetMethod" : "remove"
  } ],
  "org.apache.hadoop.util.dynamic.BindingUtils:checkAvailable(org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod)" : [ ],
  "org.apache.hadoop.fs.FileContext:msync()" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_fromJsonString(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.FileSystem:primitiveMkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : [ ],
  "org.apache.hadoop.util.StringUtils:createStartupShutdownMessage(java.lang.String,java.lang.String,java.lang.String[])" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$Windows:access(java.lang.String,org.apache.hadoop.io.nativeio.NativeIO$Windows$AccessRight)" : [ ],
  "org.apache.hadoop.ipc.Client:call(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable,org.apache.hadoop.ipc.Client$ConnectionId,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getEnclosingRoot(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.http.HttpServer2:bindForSinglePort(org.eclipse.jetty.server.ServerConnector,int)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:minimums()" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Invoker:<init>(java.lang.Class,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.fs.shell.find.BaseExpression:isAction()" : [ ],
  "org.apache.hadoop.io.SortedMapWritable:<init>(org.apache.hadoop.io.SortedMapWritable)" : [ ],
  "org.apache.hadoop.fs.shell.Mkdir:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.io.TwoDArrayWritable:<init>(java.lang.Class,org.apache.hadoop.io.Writable[][])" : [ ],
  "org.apache.hadoop.ipc.Server:getRemoteUser()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:tryAcquire()" : [ ],
  "org.apache.hadoop.io.FloatWritable:<init>(float)" : [ ],
  "org.apache.hadoop.conf.Configuration$Parser:handleEndElement()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:doDecodeImpl(java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:getConfigViewFsPrefix()" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:read(java.io.DataInput)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceShutdownHook:register(int)" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Dus:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.FileSystem:makeQualified(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:buildACL(java.lang.String[])" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$CreateCommand:validate()" : [ ],
  "org.apache.hadoop.fs.shell.FsCommand:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:isAncestor(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:relativize(java.net.URI,java.net.URI,boolean)" : [ ],
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:newInstanceChecked(java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.FsShell:init()" : [ ],
  "org.apache.hadoop.util.VersionInfo:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:addKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ {
    "sourceMethod" : "getKeyId",
    "targetMethod" : "setCurrentKeyId"
  } ],
  "org.apache.hadoop.util.bloom.BloomFilter:<init>(int,int,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:set(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : [ ],
  "org.apache.hadoop.fs.protocolPB.PBHelper:convert(org.apache.hadoop.fs.FSProtos$FsPermissionProto)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.LongWritable$DecreasingComparator:compare(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.ipc.RpcWritable$ProtobufWrapper:writeTo(org.apache.hadoop.ipc.ResponseBuffer)" : [ ],
  "org.apache.hadoop.fs.impl.FutureIOSupport:raiseInnerCause(java.util.concurrent.ExecutionException)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$BlockUploadData:<init>(java.io.File)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferData:setDone()" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsContext:getCurrentIOStatisticsContext()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setReplication(org.apache.hadoop.fs.Path,short)" : [ ],
  "org.apache.hadoop.crypto.JceSm4CtrCryptoCodec:createDecryptor()" : [ ],
  "org.apache.hadoop.fs.FilterFs:msync()" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(java.io.InputStream,boolean)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:getFS()" : [ ],
  "org.apache.hadoop.ipc.Server$RpcCall:setDeferredResponse(org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.fs.shell.MoveCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.Lists:newArrayList(java.lang.Object[])" : [ ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:counter(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.conf.Configuration:getStringCollection(java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getStringCollection"
  } ],
  "org.apache.hadoop.util.SysInfoWindows:getStorageBytesRead()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:isLoginSuccess()" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:formatZK(boolean,boolean)" : [ ],
  "org.apache.hadoop.io.compress.zlib.BuiltInZlibDeflater:reinit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.StringUtils:getTrimmedStringCollectionSplitByEquals(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getMetricsTimeUnit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.ExitUtil:terminate(int,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:checkTGTAndReloginFromKeytab()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:close()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$ValueClassOption:<init>(java.lang.Class)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall:invoke()" : [ {
    "sourceMethod" : "isAsynchronousMode",
    "targetMethod" : "setAsynchronousMode"
  } ],
  "org.apache.hadoop.fs.FileUtil:isRegularFile(java.io.File)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:<init>()" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:buildSaslNegotiateResponse()" : [ ],
  "org.apache.hadoop.io.SetFile$Reader:get(org.apache.hadoop.io.WritableComparable)" : [ ],
  "org.apache.hadoop.fs.FileContext:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$Merge:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainChannel:isOpen()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.security.SaslPlainServer:unwrap(byte[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.sink.StatsDSink:writeMetric(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:write(int)" : [ ],
  "org.apache.hadoop.fs.shell.Head:dumpToOffset(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "openFile",
    "targetMethod" : "copyBytes"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:read()" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem$1:close()" : [ ],
  "org.apache.hadoop.conf.Configuration:writeXml(java.lang.String,java.io.Writer)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFileDumper:dumpInfo(java.lang.String,java.io.PrintStream,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "open",
    "targetMethod" : "cleanupWithLogger"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "toString"
  }, {
    "sourceMethod" : "getEntryCount",
    "targetMethod" : "toString"
  }, {
    "sourceMethod" : "isSorted",
    "targetMethod" : "toString"
  }, {
    "sourceMethod" : "getBlockCount",
    "targetMethod" : "toString"
  }, {
    "sourceMethod" : "size",
    "targetMethod" : "toString"
  }, {
    "sourceMethod" : "size",
    "targetMethod" : "toString"
  }, {
    "sourceMethod" : "getBlockCount",
    "targetMethod" : "calculateWidth"
  }, {
    "sourceMethod" : "getBlockCount",
    "targetMethod" : "calculateWidth"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "calculateWidth"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getEntryCount",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "format",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getOffset",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getCompressedSize",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getRawSize",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getEntryCount",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "calculateWidth"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getMetaName",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getOffset",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getCompressedSize",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "calculateWidth",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getRawSize",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "format"
  }, {
    "sourceMethod" : "getCompressionAlgorithm",
    "targetMethod" : "format"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:doDecodeMultiAndParity(java.nio.ByteBuffer[][],java.nio.ByteBuffer[][],int[],int)" : [ {
    "sourceMethod" : "getNumParityUnits",
    "targetMethod" : "getPiggyBacksFromInput"
  } ],
  "org.apache.hadoop.util.DiskChecker:checkDir(org.apache.hadoop.fs.LocalFileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.fs.GlobPattern:compile(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:<init>(org.apache.hadoop.fs.PathHandle)" : [ ],
  "org.apache.hadoop.ipc.UnexpectedServerException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:replication(short)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:reinit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.file.tfile.BoundedRangeFileInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:shutdownSingleton()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:pathToFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:<init>(java.lang.Object,org.apache.hadoop.metrics2.lib.MutableMetricsFactory)" : [ ],
  "org.apache.hadoop.net.NetUtils:getLocalInetAddress(java.lang.String)" : [ ],
  "org.apache.hadoop.security.KDiag:loginFromKeytab()" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:append(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:appendFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.InvalidPathException:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.ObjectWritable:loadClass(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.util.Shell:execCommand(java.util.Map,java.lang.String[])" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:read(byte[])" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:impl(java.lang.Class,java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.security.Credentials:writeTokenStorageToStream(java.io.DataOutputStream,org.apache.hadoop.security.Credentials$SerializedFormat)" : [ ],
  "org.apache.hadoop.io.UTF8$Comparator:<init>()" : [ ],
  "org.apache.hadoop.io.compress.CodecPool:updateLeaseCount(org.apache.hadoop.thirdparty.com.google.common.cache.LoadingCache,java.lang.Object,int)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$ExponentialBackoffRetry:<init>(int,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "getFileBlockLocations"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "getFileBlockLocations"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "checkPathIsSlash"
  } ],
  "org.apache.hadoop.fs.FileSystem:getEnclosingRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.security.alias.UserProvider:getCredentialEntry(java.lang.String)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:isPmdkAvailable()" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:handleConnectionTimeout(int,int,java.io.IOException)" : [ ],
  "org.apache.hadoop.net.NodeBase:hashCode()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScanner()" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort:getSshConnectTimeout()" : [ ],
  "org.apache.hadoop.util.dynamic.BindingUtils:noop(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FsShellPermissions$Chmod:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.util.StringUtils:escapeString(java.lang.String,char,char)" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:isNativeCodeLoaded()" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getServerDefaults()" : [ ],
  "org.apache.hadoop.util.DiskChecker:diskIoCheckWithoutNativeIo(java.io.File)" : [ ],
  "org.apache.hadoop.util.IntrusiveCollection:containsAll(java.util.Collection)" : [ ],
  "org.apache.hadoop.net.TableMapping:<init>()" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:put(org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.ipc.Server:getClientBackoffEnable(java.lang.String,int,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:setupBadVersionResponse(int)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:cacheGroupsAdd(java.util.List)" : [ {
    "sourceMethod" : "getUsersForNetgroup",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.ipc.Client$Connection:waitForWork()" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec:getDecompressorType()" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:getSize(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:setOwner(java.io.File,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getSetOwnerCommand",
    "targetMethod" : "execCommand"
  } ],
  "org.apache.hadoop.fs.FileContext:resolveAbstractFileSystems(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.permission.FsCreateModes:create(org.apache.hadoop.fs.permission.FsPermission,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$SingletonIterator:getIOStatistics()" : [ ],
  "org.apache.hadoop.util.FileBasedIPList:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.ProtocolSignature:getProtocolSignature(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.WeakReferenceThreadMap:removeForCurrentThread()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:distance(org.apache.hadoop.fs.impl.prefetch.BufferData,int)" : [ ],
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,java.lang.CharSequence)" : [ ],
  "org.apache.hadoop.fs.impl.FutureIOSupport:awaitFuture(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.RawPathHandle:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileContext:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.SetFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.fs.FileSystem$FileSystemDataOutputStreamBuilder:build()" : [ ],
  "org.apache.hadoop.net.NetUtils:normalizeIP2HostName(java.lang.String)" : [ {
    "sourceMethod" : "createSocketAddr",
    "targetMethod" : "getHostPortString"
  } ],
  "org.apache.hadoop.io.erasurecode.codec.ErasureCodec:setCodecOptions(org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.Configuration$DeprecationDelta:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration$DeprecationDelta:<init>(java.lang.String,java.lang.String[],java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newInverseQuantiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)" : [ ],
  "org.apache.hadoop.ipc.protocolPB.RefreshCallQueueProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : [ {
    "sourceMethod" : "getProtocolVersion",
    "targetMethod" : "isMethodSupported"
  } ],
  "org.apache.hadoop.io.WritableFactories:newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.OutputBuffer$Buffer:write(java.io.InputStream,int)" : [ ],
  "org.apache.hadoop.util.JvmPauseMonitor$GcTimes:subtract(org.apache.hadoop.util.JvmPauseMonitor$GcTimes)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getServer(java.lang.Class,java.lang.Object,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.service.AbstractService:enterState(org.apache.hadoop.service.Service$STATE)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.net.SocketInputStream:read()" : [ ],
  "org.apache.hadoop.util.LightWeightCache:get(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter:init(javax.servlet.FilterConfig)" : [ {
    "sourceMethod" : "getProxyuserConfiguration",
    "targetMethod" : "refreshSuperUserGroupsConfiguration"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:getDefaultCompressionAlgorithm()" : [ ],
  "org.apache.hadoop.util.CrcUtil:composeWithMonomial(int,int,int,int)" : [ ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipCompressor:reinit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "rename"
  }, {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:logExpireTokens(java.util.Collection)" : [ ],
  "org.apache.hadoop.ipc.RetryCache$CacheEntry:<init>(byte[],int,long,boolean)" : [ ],
  "org.apache.hadoop.fs.FileContext:processDeleteOnExit()" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:isExpression(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator:ifExists(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.WritableComparator:<init>()" : [ ],
  "org.apache.hadoop.fs.FileContext:removeAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.FindClass:getClass(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:add(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.fs.FileSystem:addFileSystemForTesting(java.net.URI,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.io.BoundedByteArrayOutputStream:<init>(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:setPreserve(boolean)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:noteException(org.apache.hadoop.util.ExitUtil$ExitException)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.util.VersionInfo:getBranch()" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:process(java.nio.ByteBuffer,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO:isAvailable()" : [ ],
  "org.apache.hadoop.util.ApplicationClassLoader:constructUrlsFromClasspath(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:initializeAuthContext(int)" : [ ],
  "org.apache.hadoop.util.StringUtils:formatTimeDiff(long,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : [ ],
  "org.apache.hadoop.ipc.RpcNoSuchProtocolException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:clearParentZNode()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:seek(long)" : [ ],
  "org.apache.hadoop.metrics2.lib.UniqueNames:uniqueName(java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:canonicalizeUri(java.net.URI)" : [ ],
  "org.apache.hadoop.fs.FileContext$FileContextFinalizer:run()" : [ ],
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.Options$ChecksumOpt:processChecksumOpt(org.apache.hadoop.fs.Options$ChecksumOpt,org.apache.hadoop.fs.Options$ChecksumOpt,int)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getConf",
    "targetMethod" : "copy"
  } ],
  "org.apache.hadoop.util.StringUtils:unEscapeString(java.lang.String,char,char)" : [ ],
  "org.apache.hadoop.io.compress.BlockDecompressorStream:decompress(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:buildResolveResultForRegexMountPoint(org.apache.hadoop.fs.viewfs.InodeTree$ResultKind,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:getAuthorizedUgi(java.lang.String)" : [ {
    "sourceMethod" : "getIdentifier",
    "targetMethod" : "addTokenIdentifier"
  } ],
  "org.apache.hadoop.metrics2.MetricsTag:toString()" : [ ],
  "org.apache.hadoop.net.NetUtils:getFreeSocketPorts(int)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:getParentZnode()" : [ ],
  "org.apache.hadoop.http.HttpServer2:addContext(org.eclipse.jetty.servlet.ServletContextHandler,boolean)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticationHandler:<init>()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:ioStatisticsToString(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.crypto.CipherSuite:getConfigSuffix()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:writeFile(org.apache.hadoop.io.SequenceFile$Sorter$RawKeyValueIterator,org.apache.hadoop.io.SequenceFile$Writer)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "appendRaw"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "appendRaw"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getDefaultBlockSize"
  } ],
  "org.apache.hadoop.security.http.CrossOriginFilter:init(javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.util.MachineList:<init>(java.util.Collection)" : [ ],
  "org.apache.hadoop.util.ShutdownHookManager:hasShutdownHook(java.lang.Runnable)" : [ ],
  "org.apache.hadoop.fs.FsShell:printUsage(java.io.PrintStream)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:getNextIdToTry(org.apache.hadoop.fs.Path,int)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "extractId"
  } ],
  "org.apache.hadoop.io.UTF8:fromBytes(byte[])" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:lessThan(java.lang.Object,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getUsed()" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.conf.Configuration:getFile(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getUGIFromSubject(javax.security.auth.Subject)" : [ ],
  "org.apache.hadoop.jmx.JMXJsonServlet:listBeans(com.fasterxml.jackson.core.JsonGenerator,javax.management.ObjectName,java.lang.String,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:<init>(long,int,org.apache.hadoop.fs.store.BlockUploadStatistics)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:activeInstance()" : [ ],
  "org.apache.hadoop.security.alias.BouncyCastleFipsKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server$Call:<init>(int,int,java.lang.Void,java.lang.Void,org.apache.hadoop.ipc.RPC$RpcKind,byte[])" : [ ],
  "org.apache.hadoop.io.SortedMapWritable:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:lowerBound(byte[])" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:initRegistry(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.shell.find.Name:prepare()" : [ ],
  "org.apache.hadoop.fs.FileSystem:checkAccessPermissions(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:checkForErrors(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:copyFromLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:noPasswordError()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getDefaultBlockSize()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.Command:displayError(java.lang.Exception)" : [ ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable:readFields(java.io.DataInput)" : [ {
    "sourceMethod" : "readString",
    "targetMethod" : "getPrimitiveClass"
  }, {
    "sourceMethod" : "getPrimitiveClass",
    "targetMethod" : "checkDeclaredComponentType"
  } ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPointResolvedDstPathReplaceInterceptor:deserializeFromString(java.lang.String)" : [ ],
  "org.apache.hadoop.util.ProgramDriver:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getWorkingDirectory()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addRawCallVolume(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:power(int,int)" : [ ],
  "org.apache.hadoop.util.DurationInfo:<init>(org.slf4j.Logger,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.crypto.random.OsSecureRandom:next(int)" : [ ],
  "org.apache.hadoop.fs.permission.AclUtil:getMinimalAcl(org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "build",
    "targetMethod" : "newArrayList"
  }, {
    "sourceMethod" : "getUserAction",
    "targetMethod" : "setPermission"
  }, {
    "sourceMethod" : "getGroupAction",
    "targetMethod" : "setPermission"
  }, {
    "sourceMethod" : "getOtherAction",
    "targetMethod" : "setPermission"
  } ],
  "org.apache.hadoop.util.StringUtils:getStrings(java.lang.String)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$TypeCastingRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:skipToNextMarker(long,int)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getTokenInfoFromZK(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.security.KDiag:printEnv(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.CharSequence,java.nio.charset.Charset)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:getChecksumFileLength(org.apache.hadoop.fs.Path,long)" : [ {
    "sourceMethod" : "getBytesPerSum",
    "targetMethod" : "getChecksumLength"
  } ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:build(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_snapshot()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getBoolean",
    "targetMethod" : "setBoolean"
  }, {
    "sourceMethod" : "getBoolean",
    "targetMethod" : "setBoolean"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:initBlock()" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:toString()" : [ ],
  "org.apache.hadoop.fs.shell.CommandFormat:parse(java.util.List)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "createSnapshot"
  } ],
  "org.apache.hadoop.fs.shell.TouchCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.util.LightWeightGSet:<init>(int)" : [ ],
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,boolean,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "checkDest"
  }, {
    "sourceMethod" : "build",
    "targetMethod" : "awaitFuture"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "openFile"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "checkDependencies"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "listStatusIterator"
  } ],
  "org.apache.hadoop.fs.FSDataOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.fs.FileSystem$Statistics,long)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:shouldFailoverOnException(java.lang.Exception)" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:put(org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.util.CrcComposer:digest()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getDefaultUri(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "fixName"
  } ],
  "org.apache.hadoop.security.token.delegation.DelegationKey:getKey()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getNamed(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.fs.FileStatus)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferData:setReady(org.apache.hadoop.fs.impl.prefetch.BufferData$State[])" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:<init>(java.lang.String,org.slf4j.Logger,long,long)" : [ ],
  "org.apache.hadoop.util.ComparableVersion$StringItem:isNull()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:read(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:init(java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.conf.ReconfigurableBase:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileUtil:execCommand(java.io.File,java.lang.String[])" : [ ],
  "org.apache.hadoop.io.compress.BlockCompressorStream:compress()" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:offer(java.lang.Object)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:processRpcRequest(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto,org.apache.hadoop.ipc.RpcWritable$Buffer)" : [ {
    "sourceMethod" : "getRpcRequestWrapper",
    "targetMethod" : "newInstance"
  }, {
    "sourceMethod" : "curThreadTracer",
    "targetMethod" : "setTracer"
  }, {
    "sourceMethod" : "toTraceName",
    "targetMethod" : "newSpan"
  }, {
    "sourceMethod" : "byteStringToSpanContext",
    "targetMethod" : "newSpan"
  }, {
    "sourceMethod" : "convert",
    "targetMethod" : "getPriorityLevel"
  } ],
  "org.apache.hadoop.fs.shell.FsUsage$Df:getUsagesTable()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:decryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.io.Text:readString(java.io.DataInput)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$RpcProtobufRequest:toString()" : [ ],
  "org.apache.hadoop.util.ReflectionUtils:setJobConf(java.lang.Object,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getHomeDirectory()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getServerDefaults()" : [ ],
  "org.apache.hadoop.ipc.Server:setupResponseForWritable(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.log.LogThrottlingHelper:<init>(long,java.lang.String)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:help(java.lang.String[],java.util.Map)" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:getChecksumOpt()" : [ ],
  "org.apache.hadoop.security.JniBasedUnixGroupsMappingWithFallback:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFs:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.HAServiceTarget:getProxyForAddress(org.apache.hadoop.conf.Configuration,int,int,java.net.InetSocketAddress)" : [ ],
  "org.apache.hadoop.http.HttpServer2:<init>(org.apache.hadoop.http.HttpServer2$Builder)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:<init>()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:updateReportedByteCount(int)" : [ ],
  "org.apache.hadoop.util.IntrusiveCollection:toArray()" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.security.SaslPropertiesResolver:getInstance(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.fs.shell.Delete$Rm:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.StorageType:getMovableTypes()" : [ ],
  "org.apache.hadoop.util.QuickSort:sort(org.apache.hadoop.util.IndexedSortable,int,int,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getMaxDepth",
    "targetMethod" : "sortInternal"
  } ],
  "org.apache.hadoop.util.ToolRunner:run(org.apache.hadoop.util.Tool,java.lang.String[])" : [ ],
  "org.apache.hadoop.net.NetworkTopology:getInstance(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.Display$AvroFileInputStream:<init>(org.apache.hadoop.fs.FileStatus)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:readChunk(long,byte[],int,int,byte[])" : [ {
    "sourceMethod" : "getChecksumFilePos",
    "targetMethod" : "seek"
  } ],
  "org.apache.hadoop.ipc.RpcWritable$Buffer:wrap(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getStoragePolicy(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getStoragePolicy"
  } ],
  "org.apache.hadoop.crypto.CryptoInputStream:read(long,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:createOptions()" : [ ],
  "org.apache.hadoop.ipc.Server:getServerRpcInvoker(org.apache.hadoop.ipc.RPC$RpcKind)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "deleteSnapshot"
  } ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,java.lang.Iterable,java.nio.charset.Charset)" : [ ],
  "org.apache.hadoop.conf.ReconfigurableBase:reconfigureProperty(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileContext:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.util.ZKUtil:getPermFromString(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getDataBlock(int)" : [ {
    "sourceMethod" : "getBlockRegionList",
    "targetMethod" : "createReader"
  }, {
    "sourceMethod" : "getDefaultCompressionAlgorithm",
    "targetMethod" : "createReader"
  } ],
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:<init>()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getQuotaUsage(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.permission.AclEntry:parseAclSpec(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.Delete$Expunge:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.net.SocketOutputStream:transferToFully(java.nio.channels.FileChannel,long,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$DataIndex:write(java.io.DataOutput)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "writeString"
  } ],
  "org.apache.hadoop.fs.shell.Command:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.MD5Hash:read(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:<init>(org.apache.hadoop.util.DataChecksum)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:writeConnectionContext(org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : [ {
    "sourceMethod" : "getProtocolName",
    "targetMethod" : "makeIpcConnectionContext"
  }, {
    "sourceMethod" : "getTicket",
    "targetMethod" : "makeIpcConnectionContext"
  }, {
    "sourceMethod" : "getProtocol",
    "targetMethod" : "getProtocolName"
  }, {
    "sourceMethod" : "toByteArray",
    "targetMethod" : "sendRequest"
  } ],
  "org.apache.hadoop.fs.FileSystem:completeLocalOutput(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:setContext(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem:moveToLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.MachineList:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.security.AuthenticationFilterInitializer:getFilterConfigMap(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getServerPrincipal"
  } ],
  "org.apache.hadoop.util.functional.RemoteIterators$MappingRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator,org.apache.hadoop.util.functional.FunctionRaisingIOE)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreBuilderImpl:withSampleTracking(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileMeta:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.LightWeightGSet$Values:clear()" : [ ],
  "org.apache.hadoop.fs.CachingGetSpaceUsed$RefreshThread:run()" : [ ],
  "org.apache.hadoop.conf.Configuration:getInts(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:compareKeys(org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : [ ],
  "org.apache.hadoop.fs.viewfs.FsGetter:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:updateFileNames(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(java.util.List,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:getInstance(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.ha.PowerShellFencer:tryFence(org.apache.hadoop.ha.HAServiceTarget,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.RpcNoSuchMethodException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getServerDefaults(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getServerDefaults"
  } ],
  "org.apache.hadoop.conf.Configuration:getClass(java.lang.String,java.lang.Class)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "getClassByName"
  } ],
  "org.apache.hadoop.util.DurationInfo:toString()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "stripOutRoot"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile:getSupportedCompressionAlgorithms()" : [ ],
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileContext:getAbstractFileSystem(org.apache.hadoop.security.UserGroupInformation,java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.sink.GraphiteSink$Graphite:write(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.sink.FileSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : [ ],
  "org.apache.hadoop.ipc.Server:registerProtocolEngine(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.Class,org.apache.hadoop.ipc.RPC$RpcInvoker)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:cancelDelegationToken(org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:toString()" : [ ],
  "org.apache.hadoop.security.SecurityUtil:getZKAuthInfos(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:getInt(java.lang.String,int)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "getHexDigits"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.NullWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getChrootedPath(org.apache.hadoop.fs.viewfs.InodeTree$ResolveResult,org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "stripOutRoot"
  } ],
  "org.apache.hadoop.fs.ContentSummary:<init>(long,long,long,long,long,long)" : [ ],
  "org.apache.hadoop.fs.FileUtil:stat2Paths(org.apache.hadoop.fs.FileStatus[])" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$BoundMethod:invoke(java.lang.Object[])" : [ ],
  "org.apache.hadoop.ipc.Client:getRpcResponse(org.apache.hadoop.ipc.Client$Call,org.apache.hadoop.ipc.Client$Connection,long,java.util.concurrent.TimeUnit)" : [ {
    "sourceMethod" : "getHostname",
    "targetMethod" : "wrapException"
  } ],
  "org.apache.hadoop.ipc.Server$Connection:checkDataLength(int)" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:getRack(java.lang.String)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:getActiveData()" : [ ],
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getParameter(java.lang.String)" : [ ],
  "org.apache.hadoop.http.ProfileOutputServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.io.IOUtils:copyBytes(java.io.InputStream,java.io.OutputStream,org.apache.hadoop.conf.Configuration,boolean)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "copyBytes"
  } ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:safeDelete(java.lang.String,java.util.List,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipCompressor:compress(byte[],int,int)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:createZooKeeper()" : [ ],
  "org.apache.hadoop.io.retry.CallReturn:getReturnValue()" : [ ],
  "org.apache.hadoop.fs.FileContext:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.Stat:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:getUser()" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "createRemoteUser"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "createProxyUser"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "createRemoteUser"
  } ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Invoker:close()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.XORErasureEncoder:prepareEncodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:<init>(org.apache.hadoop.fs.permission.FsAction,org.apache.hadoop.fs.permission.FsAction,org.apache.hadoop.fs.permission.FsAction,boolean)" : [ ],
  "org.apache.hadoop.conf.Configuration$Parser:handleEndProperty()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getLinkTarget(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getFileStatus(org.apache.commons.net.ftp.FTPFile,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:handleException(java.lang.reflect.Method,int,org.apache.hadoop.io.retry.RetryPolicy,org.apache.hadoop.io.retry.RetryInvocationHandler$Counters,long,java.lang.Exception)" : [ {
    "sourceMethod" : "idempotentOrAtMostOnce",
    "targetMethod" : "newRetryInfo"
  }, {
    "sourceMethod" : "isFailover",
    "targetMethod" : "log"
  } ],
  "org.apache.hadoop.crypto.key.UserProvider:getMetadata(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor$ZStandardDirectDecompressor:<init>(int)" : [ ],
  "org.apache.hadoop.util.StringUtils:getTrimmedStringCollection(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getStorageStatistics()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementBytesWritten(long)" : [ ],
  "org.apache.hadoop.ipc.CallerContext$Builder:appendIfAbsent(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[],java.io.File,java.util.Map,long)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker:call(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.ipc.RpcWritable$Buffer,long,java.lang.String,java.lang.String,long)" : [ {
    "sourceMethod" : "getProtocolImpl",
    "targetMethod" : "call"
  }, {
    "sourceMethod" : "getProtocolImpl",
    "targetMethod" : "processCall"
  } ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getAclStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getMinimalAcl",
    "targetMethod" : "addEntries"
  }, {
    "sourceMethod" : "getPrimaryGroupName",
    "targetMethod" : "group"
  }, {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "owner"
  } ],
  "org.apache.hadoop.ha.ActiveStandbyElector:reset()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:<init>(org.apache.hadoop.metrics2.MetricsInfo,long,java.util.List,java.lang.Iterable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:removeAcl(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "removeAcl"
  } ],
  "org.apache.hadoop.net.DNS:getDefaultIP(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getLen()" : [ ],
  "org.apache.hadoop.util.AsyncDiskService:awaitTermination(long)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleStat$MinMax:reset(org.apache.hadoop.metrics2.util.SampleStat$MinMax)" : [ ],
  "org.apache.hadoop.io.Text:decode(byte[],int,int)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:decrypt(long,byte[],int,int)" : [ {
    "sourceMethod" : "getPadding",
    "targetMethod" : "decrypt"
  } ],
  "org.apache.hadoop.fs.FSInputChecker:fill()" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:saslReadAndProcess(org.apache.hadoop.ipc.RpcWritable$Buffer)" : [ {
    "sourceMethod" : "getMessage",
    "targetMethod" : "saslProcess"
  } ],
  "org.apache.hadoop.security.http.XFrameOptionsFilter:getFilterParams(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:getByName(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader:<init>(org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader$Builder)" : [ ],
  "org.apache.hadoop.util.Shell:getSetPermissionCommand(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:makeQualified(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUri",
    "targetMethod" : "makeQualified"
  } ],
  "org.apache.hadoop.fs.shell.FsUsage$Df:setHumanReadable(boolean)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall:processWaitTimeAndRetryInfo()" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkMerge(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI[])" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:fromShort(short)" : [ ],
  "org.apache.hadoop.security.token.Token:isManaged()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseBackOffByResponseTimeEnabled(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.AbstractNativeRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState)" : [ {
    "sourceMethod" : "convertToByteBufferState",
    "targetMethod" : "doDecode"
  } ],
  "org.apache.hadoop.security.token.DtUtilShell$Append:execute()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.FileSystem:get(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolEngine(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.fs.shell.Ls:formatSize(long)" : [ ],
  "org.apache.hadoop.util.RunJar:unJar(java.io.InputStream,java.io.File,java.util.regex.Pattern)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.XORErasureDecoder:getOutputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.conf.ConfServlet:writeResponse(org.apache.hadoop.conf.Configuration,java.io.Writer,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:gauges()" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecRegistry:<init>()" : [ ],
  "org.apache.hadoop.fs.permission.AclStatus:getEffectivePermission(org.apache.hadoop.fs.permission.AclEntry)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:getDefault()" : [ ],
  "org.apache.hadoop.net.NetUtils:getIPs(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenInformation:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:requestPrefetch(int)" : [ {
    "sourceMethod" : "executeFunction",
    "targetMethod" : "setPrefetch"
  }, {
    "sourceMethod" : "requestPrefetch",
    "targetMethod" : "end"
  } ],
  "org.apache.hadoop.io.erasurecode.ECSchema:<init>(java.lang.String,int,int)" : [ ],
  "org.apache.hadoop.fs.UnionStorageStatistics$LongStatisticIterator:next()" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:lockInterruptibly()" : [ {
    "sourceMethod" : "monotonicNow",
    "targetMethod" : "check"
  } ],
  "org.apache.hadoop.ipc.Server:addSuppressedLoggingExceptions(java.lang.Class[])" : [ ],
  "org.apache.hadoop.fs.local.RawLocalFs:getServerDefaults()" : [ ],
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:toString()" : [ ],
  "org.apache.hadoop.ipc.protocolPB.RefreshCallQueueProtocolClientSideTranslatorPB:refreshCallQueue()" : [ ],
  "org.apache.hadoop.util.dynamic.DynConstructors$Builder:hiddenImpl(java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.io.compress.PassthroughCodec$PassthroughDecompressorStream:<init>(java.io.InputStream)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:handleConnectionFailure(int,java.io.IOException)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "createSnapshot"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:prepareMetaBlock(java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getCompressionAlgorithmByName",
    "targetMethod" : "prepareMetaBlock"
  } ],
  "org.apache.hadoop.io.BooleanWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:addToken(org.apache.hadoop.security.token.Token)" : [ {
    "sourceMethod" : "getService",
    "targetMethod" : "addToken"
  } ],
  "org.apache.hadoop.util.SysInfoWindows:getVirtualMemorySize()" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.serializer.DeserializerComparator:<init>(org.apache.hadoop.io.serializer.Deserializer)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:file(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.PathOperationException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.MapWritable:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:<init>(int)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:newForField(java.lang.reflect.Field,org.apache.hadoop.metrics2.annotation.Metric,org.apache.hadoop.metrics2.lib.MetricsRegistry)" : [ {
    "sourceMethod" : "newForField",
    "targetMethod" : "add"
  }, {
    "sourceMethod" : "getInfo",
    "targetMethod" : "newCounter"
  }, {
    "sourceMethod" : "getInfo",
    "targetMethod" : "newCounter"
  }, {
    "sourceMethod" : "getInfo",
    "targetMethod" : "newGauge"
  }, {
    "sourceMethod" : "getInfo",
    "targetMethod" : "newGauge"
  }, {
    "sourceMethod" : "getInfo",
    "targetMethod" : "newGauge"
  } ],
  "org.apache.hadoop.ipc.Server:getAuxiliaryListenerAddresses()" : [ ],
  "org.apache.hadoop.io.compress.Lz4Codec:createCompressor()" : [ ],
  "org.apache.hadoop.fs.PathNotFoundException:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.DurationStatisticSummary:fetchDurationSummary(org.apache.hadoop.fs.statistics.IOStatistics,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getTotalRequests()" : [ ],
  "org.apache.hadoop.util.GcTimeMonitor$Builder:build()" : [ ],
  "org.apache.hadoop.http.HttpServer2:initializeWebServer(java.lang.String,java.lang.String,org.apache.hadoop.conf.Configuration,java.lang.String[])" : [ {
    "sourceMethod" : "getWebAppsPath",
    "targetMethod" : "addDefaultApps"
  }, {
    "sourceMethod" : "setHeaders",
    "targetMethod" : "addGlobalFilter"
  } ],
  "org.apache.hadoop.fs.shell.Delete$Rm:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.io.retry.LossyRetryInvocationHandler:invokeMethod(java.lang.reflect.Method,java.lang.Object[])" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$RollCommand:execute()" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:getPmdkSupportStateMessage()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getPrimaryGroupName()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable$Internal:<init>()" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolInterfaces(java.lang.Class)" : [ ],
  "org.apache.hadoop.util.IdentityHashStore:put(java.lang.Object,java.lang.Object)" : [ ],
  "org.apache.hadoop.security.SaslPropertiesResolver:getServerProperties(java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainOutputStream:write(int)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$TestingGroups:getGroups(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getMaximumReference(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.PathCapabilitiesSupport:validatePathCapabilityArgs(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:loadResources(java.util.Properties,java.util.ArrayList,int,boolean,boolean)" : [ ],
  "org.apache.hadoop.fs.Path:isAbsolute()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileMeta:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:renewDelegationToken(org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$ConcurrentQueue:isEmpty(long)" : [ ],
  "org.apache.hadoop.http.HttpServer2:addInternalServlet(java.lang.String,java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtobufRpcEngineCallbackImpl:setResponse(org.apache.hadoop.thirdparty.protobuf.Message)" : [ {
    "sourceMethod" : "wrap",
    "targetMethod" : "setDeferredResponse"
  } ],
  "org.apache.hadoop.fs.TrashPolicyDefault:deleteCheckpoint(boolean)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "deleteCheckpoint"
  } ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getOutputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getBlockSize()" : [ ],
  "org.apache.hadoop.service.launcher.HadoopUncaughtExceptionHandler:uncaughtException(java.lang.Thread,java.lang.Throwable)" : [ {
    "sourceMethod" : "convertToExitException",
    "targetMethod" : "terminate"
  } ],
  "org.apache.hadoop.fs.FileSystem:listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.PseudoDelegationTokenAuthenticationHandler:<init>()" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:getWeight(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:connect()" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "wrapException"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "wrapException"
  } ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getMinimumReference(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:addProcessingTime(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:prefetch(org.apache.hadoop.fs.impl.prefetch.BufferData,java.time.Instant)" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:<init>(org.apache.hadoop.conf.Configuration,org.apache.commons.cli.Options,java.lang.String[])" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:create(java.lang.String,java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:truncate(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:close()" : [ ],
  "org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool:trimIdleSelectors(long)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$WBlockState:getCompressedSize()" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec)" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.fs.shell.find.ExpressionFactory:registerExpression(java.lang.Class)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:updateCurrentKey()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:<init>(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.ipc.ProtocolSignature:getFingerprint(java.lang.reflect.Method[])" : [ {
    "sourceMethod" : "getFingerprints",
    "targetMethod" : "getFingerprint"
  } ],
  "org.apache.hadoop.util.Progress:addNewPhase()" : [ ],
  "org.apache.hadoop.ha.HealthMonitor:doHealthChecks()" : [ ],
  "org.apache.hadoop.fs.Stat:<init>(org.apache.hadoop.fs.Path,long,boolean,org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeInt:decr()" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setMinimum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibCompressor(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.ArrayFile$Reader:seek(long)" : [ ],
  "org.apache.hadoop.io.DataInputByteBuffer:getData()" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getRpcRequeueCalls()" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:writeBreadCrumbNode(org.apache.zookeeper.data.Stat)" : [ ],
  "org.apache.hadoop.conf.Configuration:dumpConfiguration(org.apache.hadoop.conf.Configuration,java.io.Writer)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:nextRawKey(org.apache.hadoop.io.DataOutputBuffer)" : [ {
    "sourceMethod" : "readVInt",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "readVInt",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:close()" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:matchAlias(org.apache.hadoop.security.token.Token,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:getInternal(org.apache.hadoop.fs.impl.prefetch.BufferData)" : [ {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "getPrefetched"
  }, {
    "sourceMethod" : "getPrefetched",
    "targetMethod" : "end"
  } ],
  "org.apache.hadoop.http.HttpServer2:addAsyncProfilerServlet(org.eclipse.jetty.server.handler.ContextHandlerCollection,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLink(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.net.URI)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$1:createCompressionStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor,int)" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:awaitAllFutures(java.util.Collection,java.time.Duration)" : [ ],
  "org.apache.hadoop.util.AutoCloseableLock:<init>()" : [ ],
  "org.apache.hadoop.fs.FileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : [ {
    "sourceMethod" : "getMandatoryKeys",
    "targetMethod" : "rejectUnknownMandatoryKeys"
  } ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:trackRemoveToken(org.apache.hadoop.util.functional.InvocationRaisingIOE)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState:checkBuffers(byte[][])" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeLink:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation,java.lang.Object,java.lang.String[])" : [ ],
  "org.apache.hadoop.net.SocksSocketFactory:createSocket(java.lang.String,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:keyClass(java.lang.Class)" : [ ],
  "org.apache.hadoop.security.token.delegation.DelegationKey:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.SequenceFile:setDefaultCompressionType(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.fs.FilterFs:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.KDiag:verifyFileIsValid(java.io.File,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : [ ],
  "org.apache.hadoop.io.Text:readFields(java.io.DataInput,int)" : [ {
    "sourceMethod" : "readVInt",
    "targetMethod" : "readWithKnownLength"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:reattachMetrics()" : [ ],
  "org.apache.hadoop.security.Credentials:mergeAll(org.apache.hadoop.security.Credentials)" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$CreateCommand:execute()" : [ ],
  "org.apache.hadoop.security.Groups:getGroupInternal(java.lang.String)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:addFalsePositive(java.util.List)" : [ ],
  "org.apache.hadoop.net.NetUtils:getConnectAddress(org.apache.hadoop.ipc.Server)" : [ {
    "sourceMethod" : "getListenerAddress",
    "targetMethod" : "getConnectAddress"
  } ],
  "org.apache.hadoop.fs.FileContext:getFileContext(org.apache.hadoop.fs.AbstractFileSystem,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:emptyStatistics()" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$ListCommand:execute()" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell$CreateCommand:validate()" : [ ],
  "org.apache.hadoop.util.JsonSerialization:fromInstance(java.lang.Object)" : [ {
    "sourceMethod" : "toJson",
    "targetMethod" : "fromJson"
  } ],
  "org.apache.hadoop.fs.PathAccessDeniedException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,long,long,int)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:get(int,java.nio.ByteBuffer)" : [ {
    "sourceMethod" : "getEntry",
    "targetMethod" : "validateEntry"
  } ],
  "org.apache.hadoop.util.SysInfoWindows:refreshIfNeeded()" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:getBytesWritten()" : [ ],
  "org.apache.hadoop.fs.permission.ScopedAclEntries:calculatePivotOnDefaultEntries(java.util.List)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekTo(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.RSErasureEncoder:checkCreateRSRawEncoder()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:createLoginUser(javax.security.auth.Subject)" : [ {
    "sourceMethod" : "doSubjectLogin",
    "targetMethod" : "createProxyUser"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "getTrimmedStringCollection"
  }, {
    "sourceMethod" : "readTokenStorageFile",
    "targetMethod" : "addCredentials"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "getTrimmedStringCollection"
  }, {
    "sourceMethod" : "getService",
    "targetMethod" : "addToken"
  }, {
    "sourceMethod" : "readTokenStorageFile",
    "targetMethod" : "addCredentials"
  } ],
  "org.apache.hadoop.fs.FileContext:resolvePath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:add(org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:addEntry(org.apache.hadoop.io.file.tfile.TFile$TFileIndexEntry)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:shouldRelogin()" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager)" : [ ],
  "org.apache.hadoop.io.Text:encode(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.Options$CreateOpts:donotCreateParent()" : [ ],
  "org.apache.hadoop.io.DataOutputBuffer:write(java.io.DataInput,int)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicLongCounter(java.lang.String,java.util.concurrent.atomic.AtomicLong)" : [ ],
  "org.apache.hadoop.security.KDiag:close()" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:recursePath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "checkPathsForReservedRaw",
    "targetMethod" : "preserveAttributes"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:validateEntry(org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache$Entry,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:unlock()" : [ {
    "sourceMethod" : "monotonicNow",
    "targetMethod" : "check"
  } ],
  "org.apache.hadoop.io.erasurecode.coder.RSErasureDecoder:checkCreateRSRawDecoder()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache:closeAll()" : [ ],
  "org.apache.hadoop.fs.ContentSummary:<init>(long,long,long)" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup$InnerNodeWithNodeGroup:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.KMSUtil:getKeyProviderUri(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.Configuration:getRaw(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:endBlock()" : [ ],
  "org.apache.hadoop.ipc.internal.ShadedProtobufHelper:ipc(org.apache.hadoop.ipc.internal.ShadedProtobufHelper$IpcCall)" : [ ],
  "org.apache.hadoop.util.functional.TaskPool$Builder:setStatisticsContext()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.FsShell:displayError(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getSize(int)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:checkEligibleForFailover()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:isKerberosKeyTabLoginRenewalEnabled()" : [ ],
  "org.apache.hadoop.util.BlockingThreadPoolExecutorService:toString()" : [ ],
  "org.apache.hadoop.conf.Configuration:getTimeDurations(java.lang.String,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemUtil:getStatus(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "breakIntoPathComponents"
  }, {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "breakIntoPathComponents"
  }, {
    "sourceMethod" : "getMountedOnPath",
    "targetMethod" : "updateMountPointFsStatus"
  } ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createKey(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ ],
  "org.apache.hadoop.conf.Configuration:getDeprecatedKey(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotEmpty(int,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:throwMetricsException(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:checkPutArguments(org.apache.hadoop.fs.Path,java.io.InputStream,int,org.apache.hadoop.fs.UploadHandle,long)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncodingStep:doEncode(java.nio.ByteBuffer[][],java.nio.ByteBuffer[][])" : [ {
    "sourceMethod" : "getNumParityUnits",
    "targetMethod" : "getPiggyBacksFromInput"
  }, {
    "sourceMethod" : "getNumParityUnits",
    "targetMethod" : "encodeWithPiggyBacks"
  }, {
    "sourceMethod" : "getPiggyBacksFromInput",
    "targetMethod" : "encodeWithPiggyBacks"
  } ],
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:getBytes()" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:take()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:tryAcquire(int)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:reloginFromKeytab()" : [ ],
  "org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool:release(org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool$SelectorInfo)" : [ {
    "sourceMethod" : "now",
    "targetMethod" : "trimIdleSelectors"
  } ],
  "org.apache.hadoop.fs.FileSystemStorageStatistics:getScheme()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPInputStream:available()" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:<init>(java.io.InputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[],long)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:toString()" : [ ],
  "org.apache.hadoop.fs.shell.Ls:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getLen",
    "targetMethod" : "formatSize"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "formatSize"
  } ],
  "org.apache.hadoop.conf.Configuration$Parser:handleStartProperty()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getBlockEntryCount(int)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:getClientPrincipal(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.ObjectWritable:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:aggregate(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.fs.Options$ChecksumOpt:<init>()" : [ ],
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:renew()" : [ ],
  "org.apache.hadoop.http.HttpServer2Metrics:create(org.eclipse.jetty.server.handler.StatisticsHandler,int)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:updateFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:<init>(java.lang.String,int,org.apache.hadoop.ipc.DecayRpcScheduler)" : [ ],
  "org.apache.hadoop.ipc.ProtobufHelper:protoFromToken(org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.util.FileBasedIPList:reload()" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:loadFromPath(org.apache.hadoop.fs.Path,char[])" : [ ],
  "org.apache.hadoop.fs.shell.PathData:toFile()" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:decr()" : [ ],
  "org.apache.hadoop.io.SetFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.fs.PartialListing:<init>(org.apache.hadoop.fs.Path,org.apache.hadoop.ipc.RemoteException)" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:globStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:mapToString(java.lang.StringBuilder,java.lang.String,java.util.Map,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:removeExpiredStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.fs.Trash:getCurrentTrashDir(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.NodeBase:<init>(java.lang.String,java.lang.String,org.apache.hadoop.net.Node,int)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_save(java.io.Serializable,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.SetReplication:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.FileContext:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:removeStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier,boolean)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:getValueClass()" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:isStaleClient(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_getCurrent()" : [ ],
  "org.apache.hadoop.log.LogThrottlingHelper:record(java.lang.String,long,double[])" : [ ],
  "org.apache.hadoop.fs.DUHelper:getFolderUsage(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.protocolPB.PBHelper:convert(org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:close()" : [ ],
  "org.apache.hadoop.io.compress.CompressorStream:write(int)" : [ ],
  "org.apache.hadoop.conf.Configuration:getAlternativeNames(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FsShell:getCurrentTrashDir(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:removeAcl(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.shell.Command:expandArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.shell.Tail:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "dumpFromOffset",
    "targetMethod" : "dumpFromOffset"
  } ],
  "org.apache.hadoop.ipc.Server$Call:getUserGroupInformation()" : [ ],
  "org.apache.hadoop.security.protocolPB.RefreshAuthorizationPolicyProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : [ {
    "sourceMethod" : "getProtocolVersion",
    "targetMethod" : "isMethodSupported"
  } ],
  "org.apache.hadoop.util.ProtoUtil:makeRpcRequestHeader(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto$OperationProto,int,int,byte[],org.apache.hadoop.ipc.AlignmentContext)" : [ {
    "sourceMethod" : "getContext",
    "targetMethod" : "spanContextToByteString"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:isAuthenticationMethodEnabled(org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod)" : [ ],
  "org.apache.hadoop.conf.Configuration$Resource:<init>(java.lang.Object,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:makeSecureShellPath(java.io.File)" : [ ],
  "org.apache.hadoop.http.HttpServer2:addGlobalFilter(java.lang.String,java.lang.String,java.util.Map)" : [ {
    "sourceMethod" : "getFilterHolder",
    "targetMethod" : "defineFilter"
  }, {
    "sourceMethod" : "getFilterMapping",
    "targetMethod" : "defineFilter"
  }, {
    "sourceMethod" : "getFilterHolder",
    "targetMethod" : "defineFilter"
  }, {
    "sourceMethod" : "getFilterMapping",
    "targetMethod" : "defineFilter"
  } ],
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean,boolean,boolean)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server:registerForDeferredResponse2()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:truncate(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:setContext(java.lang.String)" : [ ],
  "org.apache.hadoop.util.ExitUtil:terminate(int,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:openFileWithOptions(org.apache.hadoop.fs.PathHandle,org.apache.hadoop.fs.impl.OpenFileParameters)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:registerFailureHandling()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSOutputSummer:<init>(org.apache.hadoop.fs.ChecksumFileSystem,org.apache.hadoop.fs.Path,boolean,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:getOutputStream(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:compareTo(org.apache.hadoop.fs.FileStatus)" : [ ],
  "org.apache.hadoop.fs.shell.Count:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "isHumanReadable",
    "targetMethod" : "toString"
  }, {
    "sourceMethod" : "isHumanReadable",
    "targetMethod" : "toString"
  }, {
    "sourceMethod" : "isHumanReadable",
    "targetMethod" : "toSnapshot"
  } ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher:remove(org.apache.hadoop.net.unix.DomainSocket)" : [ ],
  "org.apache.hadoop.io.SetFile$Writer:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:unpack(org.apache.hadoop.ipc.proto.GenericRefreshProtocolProtos$GenericRefreshResponseCollectionProto)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:setInput(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FilterFs:isValidName(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:close()" : [ ],
  "org.apache.hadoop.fs.Options$HandleOpt$Data:<init>(boolean)" : [ ],
  "org.apache.hadoop.fs.shell.XAttrCommands$GetfattrCommand:printXAttr(java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "qualifySymlinkTarget"
  }, {
    "sourceMethod" : "getSymlink",
    "targetMethod" : "qualifySymlinkTarget"
  }, {
    "sourceMethod" : "getUri",
    "targetMethod" : "qualifySymlinkTarget"
  }, {
    "sourceMethod" : "qualifySymlinkTarget",
    "targetMethod" : "setSymlink"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "setSymlink"
  }, {
    "sourceMethod" : "getSymlink",
    "targetMethod" : "setSymlink"
  }, {
    "sourceMethod" : "getUri",
    "targetMethod" : "setSymlink"
  } ],
  "org.apache.hadoop.util.KMSUtil:createKeyProviderFromUri(org.apache.hadoop.conf.Configuration,java.net.URI)" : [ ],
  "org.apache.hadoop.io.WritableUtils:readEnum(java.io.DataInput,java.lang.Class)" : [ ],
  "org.apache.hadoop.metrics2.sink.GraphiteSink$Graphite:flush()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtobufRpcEngineCallbackImpl:error(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache$Key:hashCode()" : [ ],
  "org.apache.hadoop.fs.Path:toString()" : [ ],
  "org.apache.hadoop.security.KDiag:<init>(org.apache.hadoop.conf.Configuration,java.io.PrintWriter,java.io.File,java.lang.String,long,boolean)" : [ ],
  "org.apache.hadoop.ha.FailoverController:preFailoverChecks(org.apache.hadoop.ha.HAServiceTarget,org.apache.hadoop.ha.HAServiceTarget,boolean)" : [ {
    "sourceMethod" : "createReqInfo",
    "targetMethod" : "monitorHealth"
  } ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:checkToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ {
    "sourceMethod" : "getRenewDate",
    "targetMethod" : "formatTime"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getRpcSlowCalls()" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:readLock(java.lang.String)" : [ ],
  "org.apache.hadoop.io.Text:append(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.impl.WeakReferenceThreadMap:setForCurrentThread(java.lang.Object)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRate(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec:calculateIV(byte[],long,byte[],int)" : [ ],
  "org.apache.hadoop.ipc.Server:getPriorityLevel(org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:toString()" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:comparator(org.apache.hadoop.io.WritableComparator)" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32CastagnoliFileChecksum:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFs:setReplication(org.apache.hadoop.fs.Path,short)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:gaussianElimination(int[][])" : [ {
    "sourceMethod" : "multiply",
    "targetMethod" : "add"
  }, {
    "sourceMethod" : "multiply",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.fs.FileStatus:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setTimes"
  } ],
  "org.apache.hadoop.security.token.Token$TrivialRenewer:handleKind(org.apache.hadoop.io.Text)" : [ {
    "sourceMethod" : "getKind",
    "targetMethod" : "equals"
  } ],
  "org.apache.hadoop.net.DNS:getDefaultHost(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getFileChecksum(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:compression(org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:<init>(int,java.io.DataInput,org.apache.hadoop.io.file.tfile.CompareUtils$BytesComparator)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:listXAttrs(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.util.ReflectionUtils:cloneWritableInto(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.fs.FileSystem:copyToLocalFile(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.LightWeightGSet:put(java.lang.Object)" : [ {
    "sourceMethod" : "getIndex",
    "targetMethod" : "remove"
  } ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:setInput(byte[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableStat:toString()" : [ ],
  "org.apache.hadoop.ipc.ProtocolSignature:getSigFingerprint(java.lang.Class,long)" : [ {
    "sourceMethod" : "getFingerprints",
    "targetMethod" : "getFingerprint"
  } ],
  "org.apache.hadoop.security.KDiag:endln()" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSOutputSummer:<init>(org.apache.hadoop.fs.ChecksumFs,org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$EncryptedQueueRefiller:fillQueueForKey(java.lang.String,java.util.Queue,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:readOnlyMountTable(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:getAclString()" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:verifyCanMlock()" : [ ],
  "org.apache.hadoop.fs.shell.CommandFormat$NotEnoughArgumentsException:<init>(int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:getHomeDirValue(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getDefaultMountTableName",
    "targetMethod" : "getHomeDirValue"
  } ],
  "org.apache.hadoop.io.MD5Hash:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.ChunkedArrayList:<init>(int,int)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:bulkDelete_pageSize(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.RSErasureEncoder:release()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:readOnlyMountTable(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.permission.FsCreateModes:<init>(org.apache.hadoop.fs.permission.FsPermission,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileMeta:<init>(java.io.DataInput)" : [ ],
  "org.apache.hadoop.util.CloseableReferenceCount:unreference()" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:<init>(java.lang.Class,java.lang.Class,boolean,int,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.Token:<init>(byte[],byte[],org.apache.hadoop.io.Text,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector$WatcherWithClientRef:setZooKeeperRef(org.apache.zookeeper.ZooKeeper)" : [ ],
  "org.apache.hadoop.ipc.Server:setupResponseOldVersionFatal(java.io.ByteArrayOutputStream,org.apache.hadoop.ipc.Server$RpcCall,org.apache.hadoop.io.Writable,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.XAttrCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:recursePath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "isAncestor"
  }, {
    "sourceMethod" : "getSymlink",
    "targetMethod" : "isAncestor"
  } ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:shutdown()" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : [ ],
  "org.apache.hadoop.ha.FailoverController:getRpcTimeoutToNewActive(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.conf.ConfigurationWithLogging:get(java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "redact"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.Path:initialize(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FsServerDefaults:<init>(long,int,int,short,int,boolean,long,org.apache.hadoop.util.DataChecksum$Type,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:addProcessingTime(int,long)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.DummyRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.util.PureJavaCrc32C:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:flush()" : [ ],
  "org.apache.hadoop.conf.ReconfigurableBase:startReconfigurationTask()" : [ ],
  "org.apache.hadoop.security.token.delegation.DelegationTokenLoadingCache:isEmpty()" : [ ],
  "org.apache.hadoop.http.HttpServer2:bindForPortRange(org.eclipse.jetty.server.ServerConnector,int)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:hasCapability(java.lang.String)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:readProcDisksInfoFile()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScannerByKey(org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : [ ],
  "org.apache.hadoop.util.ConfigurationHelper:parseEnumSet(java.lang.String,java.lang.String,java.lang.Class,boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$DataIndex:<init>(java.io.DataInput)" : [ ],
  "org.apache.hadoop.security.alias.KeyStoreProvider:getOutputStreamForKeystore()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:configureConnection(java.net.HttpURLConnection)" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec:createOutputStream(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableQuantiles:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:<init>(org.apache.hadoop.fs.permission.FsAction,org.apache.hadoop.fs.permission.FsAction,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:sortByDistanceUsingNetworkLocation(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int,java.util.function.Consumer)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getClient(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.http.HttpServer2:defineFilter(org.eclipse.jetty.servlet.ServletContextHandler,java.lang.String,java.lang.String,java.util.Map,java.lang.String[])" : [ {
    "sourceMethod" : "getFilterHolder",
    "targetMethod" : "defineFilter"
  }, {
    "sourceMethod" : "getFilterMapping",
    "targetMethod" : "defineFilter"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:<init>()" : [ ],
  "org.apache.hadoop.fs.shell.find.Print:registerExpression(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getInitialWorkingDirectory()" : [ ],
  "org.apache.hadoop.util.QuickSort:sort(org.apache.hadoop.util.IndexedSortable,int,int)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getLength(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:performCoding(java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.security.Credentials:writeTokenStorageFile(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.Credentials$SerializedFormat)" : [ {
    "sourceMethod" : "create",
    "targetMethod" : "writeTokenStorageToStream"
  }, {
    "sourceMethod" : "getFileSystem",
    "targetMethod" : "writeTokenStorageToStream"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:genCauchyMatrix(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.MapFile:delete(org.apache.hadoop.fs.FileSystem,java.lang.String)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$WrappingRemoteIterator:close()" : [ ],
  "org.apache.hadoop.ha.HAAdmin:runCmd(java.lang.String[])" : [ {
    "sourceMethod" : "parseOpts",
    "targetMethod" : "checkHealth"
  }, {
    "sourceMethod" : "parseOpts",
    "targetMethod" : "getServiceState"
  }, {
    "sourceMethod" : "parseOpts",
    "targetMethod" : "transitionToStandby"
  }, {
    "sourceMethod" : "parseOpts",
    "targetMethod" : "transitionToActive"
  } ],
  "org.apache.hadoop.io.SequenceFile$Metadata:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:isIOStatisticsSnapshot(java.io.Serializable)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:getCanonicalServiceName()" : [ {
    "sourceMethod" : "getUri",
    "targetMethod" : "buildDTServiceName"
  } ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:registerIfNeeded()" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:<init>(int,int,java.lang.String,boolean,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FilterFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.EmptyPrefetchingStatistics:prefetchOperationStarted()" : [ ],
  "org.apache.hadoop.security.SaslOutputStream:close()" : [ ],
  "org.apache.hadoop.ipc.Server:channelWrite(java.nio.channels.WritableByteChannel,java.nio.ByteBuffer)" : [ {
    "sourceMethod" : "channelIO",
    "targetMethod" : "incrSentBytes"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getDefaultReplication()" : [ ],
  "org.apache.hadoop.ipc.RetryCache:newEntry(long,byte[],int)" : [ ],
  "org.apache.hadoop.fs.http.AbstractHttpFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:copy()" : [ ],
  "org.apache.hadoop.util.concurrent.AsyncGetFuture:get()" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:skip(long)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:sendRpcRequest(org.apache.hadoop.ipc.Client$Call)" : [ ],
  "org.apache.hadoop.security.token.TokenIdentifier:getBytes()" : [ ],
  "org.apache.hadoop.ipc.RemoteException:unwrapRemoteException()" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:<init>(org.apache.hadoop.crypto.key.JavaKeyStoreProvider)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarMetaData:parseMetaData()" : [ {
    "sourceMethod" : "open",
    "targetMethod" : "cleanupWithLogger"
  }, {
    "sourceMethod" : "getParent",
    "targetMethod" : "addPartFileStatuses"
  } ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:byteBufferPositionedReadable_available()" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:read(java.nio.ByteBuffer)" : [ {
    "sourceMethod" : "read",
    "targetMethod" : "decrypt"
  } ],
  "org.apache.hadoop.util.LightWeightGSet:contains(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.compress.Lz4Codec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:selectDelegationToken(org.apache.hadoop.security.Credentials)" : [ ],
  "org.apache.hadoop.fs.DU:<init>(java.io.File,long,long,long)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.LocalFileSystemPathHandle:verify(org.apache.hadoop.fs.FileStatus)" : [ ],
  "org.apache.hadoop.http.HttpServer2:isInstrumentationAccessAllowed(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:getAtMost(java.lang.String,int)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.WritableComparator:newKey()" : [ ],
  "org.apache.hadoop.conf.Configuration:getPassword(java.lang.String)" : [ ],
  "org.apache.hadoop.util.Shell:getSetOwnerCommand(java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getNextTgtRenewalTime(long,long,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.conf.Configuration:getValByRegex(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.ReconfigurationServlet:doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "getReconfigurable",
    "targetMethod" : "applyChanges"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:lazyRefresh(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:getAttributes(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.IOUtils:wrapException(java.lang.String,java.lang.String,java.io.IOException)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:setLogin(javax.security.auth.login.LoginContext)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:reattach(org.apache.hadoop.metrics2.MetricsSystem,org.apache.hadoop.metrics2.source.JvmMetrics)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:checkMetricName(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setVerifyChecksum(boolean)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:getWrappedRetriableException(java.lang.Exception)" : [ ],
  "org.apache.hadoop.security.WhitelistBasedResolver:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:setInput(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getComparatorName()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:open(org.apache.hadoop.fs.PathHandle,int)" : [ {
    "sourceMethod" : "getFileStatus",
    "targetMethod" : "verify"
  } ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBzip2Decompressor(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.BlockingThreadPoolExecutorService:<init>(int,java.util.concurrent.ThreadPoolExecutor)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:publishMetrics(org.apache.hadoop.metrics2.impl.MetricsBuffer,boolean)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:isOnSameRack(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.Stat:parseExecResult(java.io.BufferedReader)" : [ ],
  "org.apache.hadoop.fs.FileStatus:equals(java.lang.Object)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "equals"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getDurationInfo(java.lang.StringBuilder)" : [ ],
  "org.apache.hadoop.conf.Configuration:getLong(java.lang.String,long)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "getHexDigits"
  } ],
  "org.apache.hadoop.fs.shell.AclCommands$GetfaclCommand:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:cleanup()" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.HHXORErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ ],
  "org.apache.hadoop.io.SetFile$Reader:seek(org.apache.hadoop.io.WritableComparable)" : [ ],
  "org.apache.hadoop.fs.impl.FlagSet:pathCapabilities()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:isFile()" : [ ],
  "org.apache.hadoop.util.Shell:<init>(long)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:grow()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getEnclosingRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:read(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "isChecksumFile"
  } ],
  "org.apache.hadoop.ipc.Server$Call:getHostAddress()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "truncate"
  } ],
  "org.apache.hadoop.fs.HarFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "getPathInHar"
  } ],
  "org.apache.hadoop.util.bloom.BloomFilter:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.util.CacheableIPList:reset()" : [ ],
  "org.apache.hadoop.net.SocketInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FSDataInputStream:read(org.apache.hadoop.io.ByteBufferPool,int)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:append()" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:awaitFuture(java.util.concurrent.Future)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:init()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRate(java.lang.String,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink:loadGangliaConf(org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink$GangliaConfType)" : [ ],
  "org.apache.hadoop.crypto.OpensslSm4CtrCryptoCodec:<init>()" : [ ],
  "org.apache.hadoop.util.bloom.HashFunction:<init>(int,int,int)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:<init>(org.apache.hadoop.metrics2.MetricsCollector,org.apache.hadoop.metrics2.MetricsInfo,org.apache.hadoop.metrics2.MetricsFilter,org.apache.hadoop.metrics2.MetricsFilter,boolean)" : [ ],
  "org.apache.hadoop.io.AbstractMapWritable:addToMap(java.lang.Class)" : [ ],
  "org.apache.hadoop.io.compress.CompressorStream:<init>(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:init(byte[],byte[])" : [ ],
  "org.apache.hadoop.fs.shell.MoveCommands$Rename:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:cancelDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.FsCommand:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getBlockNumber(long)" : [ ],
  "org.apache.hadoop.fs.FsServerDefaults:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader$BufferSizeOption:<init>(int)" : [ ],
  "org.apache.hadoop.security.token.Token$PrivateToken:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:applyUMask(org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "not",
    "targetMethod" : "and"
  }, {
    "sourceMethod" : "not",
    "targetMethod" : "and"
  }, {
    "sourceMethod" : "not",
    "targetMethod" : "and"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:resetOutputBuffers(java.nio.ByteBuffer[],int)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setReplication(org.apache.hadoop.fs.Path,short)" : [ ],
  "org.apache.hadoop.util.StringUtils:split(java.lang.String,char,char)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:counters()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:createUserForTesting(java.lang.String,java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.shell.XAttrCommands$GetfattrCommand:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getXAttr",
    "targetMethod" : "printXAttr"
  } ],
  "org.apache.hadoop.io.compress.ZStandardCodec:getDecompressorType()" : [ ],
  "org.apache.hadoop.fs.CompositeCrcFileChecksum:getChecksumOpt()" : [ ],
  "org.apache.hadoop.fs.impl.FileRangeImpl:toString()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.AbstractNativeRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState)" : [ {
    "sourceMethod" : "convertToByteBufferState",
    "targetMethod" : "doEncode"
  } ],
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[],long,boolean)" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell$Command:warnIfTransientProvider()" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:<init>(java.net.URI,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_save(java.io.Serializable,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.util.LineReader:readCustomLine(org.apache.hadoop.io.Text,int,int)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcProcessingTime(long)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfigException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.Lz4Codec:createDecompressor()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:configureSources()" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:getHomeDirectory()" : [ {
    "sourceMethod" : "getUri",
    "targetMethod" : "makeQualified"
  } ],
  "org.apache.hadoop.io.ElasticByteBufferPool:getBuffer(boolean,int)" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:connect(java.net.URL)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.metrics2.sink.PrometheusMetricsSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : [ {
    "sourceMethod" : "name",
    "targetMethod" : "prometheusName"
  } ],
  "org.apache.hadoop.security.authorize.ProxyServers:isProxyServer(java.lang.String)" : [ ],
  "org.apache.hadoop.security.http.CrossOriginFilter:initializeAllowedHeaders(javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.util.StringInterner:internStringsInArray(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.serializer.WritableSerialization:getDeserializer(java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.FileSystem$FSDataInputStreamBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.alias.UserProvider:deleteCredentialEntry(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.Interns:tag(java.lang.String,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.security.token.Token:encodeWritable(org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.fs.CachingGetSpaceUsed:init()" : [ ],
  "org.apache.hadoop.crypto.JceCtrCryptoCodec$JceCtrCipher:encrypt(java.nio.ByteBuffer,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.statistics.DurationStatisticSummary:fetchSuccessSummary(org.apache.hadoop.fs.statistics.IOStatistics,java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:newLoginContext(java.lang.String,javax.security.auth.Subject,org.apache.hadoop.security.UserGroupInformation$HadoopConfiguration)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:advance()" : [ ],
  "org.apache.hadoop.conf.Configuration:setBoolean(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:<init>(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.fs.http.AbstractHttpFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:<init>(java.lang.String,java.io.InputStream,java.lang.String,java.io.InputStream)" : [ ],
  "org.apache.hadoop.util.functional.LazyAtomicReference:get()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.util.HHUtil:findFirstValidInput(java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.fs.shell.Command:processRawArguments(java.util.LinkedList)" : [ {
    "sourceMethod" : "expandArguments",
    "targetMethod" : "processArguments"
  } ],
  "org.apache.hadoop.security.authorize.AuthorizationException:printStackTrace()" : [ ],
  "org.apache.hadoop.metrics2.impl.SinkQueue:consumeAll(org.apache.hadoop.metrics2.impl.SinkQueue$Consumer)" : [ ],
  "org.apache.hadoop.http.HttpServer2$Builder:loadSSLConfiguration()" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:invokeMethod(java.lang.reflect.Method,java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.shell.Tail:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:syncTokenOwnerStats()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScannerByKey(byte[],byte[])" : [ ],
  "org.apache.hadoop.fs.FileUtil:permissionsFromMode(int)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:skip(long)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:getTargetPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.FilterFs:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.fs.shell.SnapshotCommands$DeleteSnapshot:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:optDouble(java.lang.String,double)" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:getSip()" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:newSourceName(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:hashCode()" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:badArg(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.GlobalStorageStatistics$StorageIterator:next()" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:transitionToObserver(org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:exponentialBackoffRetry(int,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:next(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.conf.ReconfigurationUtil:parseChangedProperties(org.apache.hadoop.conf.Configuration,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addUniqueIdentityCount(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.crypto.OpensslCipher:tokenizeTransformation(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:deleteCheckpoint()" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:transitionToActive(org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:getNodeForNetworkLocation(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.io.SecureIOUtils:insecureCreateForWrite(java.io.File,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:nextRawValue(org.apache.hadoop.io.SequenceFile$ValueBytes)" : [ ],
  "org.apache.hadoop.security.token.DelegationTokenIssuer:collectDelegationTokens(org.apache.hadoop.security.token.DelegationTokenIssuer,java.lang.String,org.apache.hadoop.security.Credentials,java.util.List)" : [ {
    "sourceMethod" : "getToken",
    "targetMethod" : "addToken"
  } ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:remainingCapacity()" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:checkEOF()" : [ ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable:checkPrimitive(java.lang.Class)" : [ ],
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[],java.io.File,java.util.Map)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:createRootDirRecursively(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkValuesEqual(long,java.lang.String,long,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:primitiveMkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages$RatesRoller:<init>(org.apache.hadoop.metrics2.lib.MutableRollingAverages)" : [ ],
  "org.apache.hadoop.io.compress.DefaultCodec:getCompressorType()" : [ ],
  "org.apache.hadoop.util.StringUtils:getStrings(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:<init>()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:isParentOf(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String,int)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addTopNCallerSummary(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:getChecksumSize()" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:cancelToken(org.apache.hadoop.security.token.Token,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPInputStream:seek(long)" : [ ],
  "org.apache.hadoop.ipc.ExternalCall:get()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:getLastKey()" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler$RetryInfo:newRetryInfo(org.apache.hadoop.io.retry.RetryPolicy,java.lang.Exception,org.apache.hadoop.io.retry.RetryInvocationHandler$Counters,boolean,long)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider$KeyMetadata:readObject(java.io.ObjectInputStream)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderExtension:isTransient()" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:listXAttrs(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "listXAttrs"
  } ],
  "org.apache.hadoop.log.LogThrottlingHelper:getCurrentStats(java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:getChecksumFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_setThreadIOStatisticsContext(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.CombinedIPWhiteList:<init>(java.lang.String,java.lang.String,long)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.io.IOUtils:closeStream(java.io.Closeable)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableStat:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:initBlock()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.ElasticByteBufferPool:size(boolean)" : [ ],
  "org.apache.hadoop.util.RunJar:createClassLoader(java.io.File,java.io.File)" : [ {
    "sourceMethod" : "getSystemClasses",
    "targetMethod" : "getTrimmedStrings"
  } ],
  "org.apache.hadoop.io.erasurecode.ECSchema:<init>(java.util.Map)" : [ ],
  "org.apache.hadoop.util.Progress:addPhase(java.lang.String,float)" : [ ],
  "org.apache.hadoop.io.AbstractMapWritable:copy(org.apache.hadoop.io.Writable)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "reset"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "reset"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs:listXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileUtil:setExecutable(java.io.File,boolean)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:<init>(long,int)" : [ ],
  "org.apache.hadoop.io.ArrayFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.io.WritableComparator:readVInt(byte[],int)" : [ ],
  "org.apache.hadoop.fs.PartialListing:get()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:registerSystemSource()" : [ ],
  "org.apache.hadoop.ipc.RetryCache$CacheEntry:<init>(byte[],int,long)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getDefaultCompressionName()" : [ ],
  "org.apache.hadoop.fs.PathIOException:getTargetPath()" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:decrypt(java.nio.ByteBuffer,int,int)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:setFallBackToSimpleAuth(java.util.concurrent.atomic.AtomicBoolean)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:becomeActive()" : [ {
    "sourceMethod" : "fenceOldActive",
    "targetMethod" : "writeBreadCrumbNode"
  } ],
  "org.apache.hadoop.io.BooleanWritable:toString()" : [ ],
  "org.apache.hadoop.io.UTF8:compareTo(org.apache.hadoop.io.UTF8)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState:<init>(org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder,java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockManager:get(int)" : [ ],
  "org.apache.hadoop.fs.shell.Ls:isSorted()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:call(java.net.HttpURLConnection,java.lang.Object,int,java.lang.Class,int)" : [ ],
  "org.apache.hadoop.util.ReadWriteDiskValidator:checkStatus(java.io.File)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Metadata:<init>()" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping$PassThroughMap:<init>()" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:createTokenInfo(byte[])" : [ ],
  "org.apache.hadoop.ha.HAAdmin:printUsage(java.io.PrintStream,java.lang.String,java.util.Map)" : [ ],
  "org.apache.hadoop.util.LightWeightCache:setExpirationTime(org.apache.hadoop.util.LightWeightCache$Entry,long)" : [ ],
  "org.apache.hadoop.crypto.random.OsSecureRandom:close()" : [ ],
  "org.apache.hadoop.io.ObjectWritable:writeObject(java.io.DataOutput,java.lang.Object,java.lang.Class,org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getHomeDirectory()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$UgiMetrics:addGetGroups(long)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "pathToFile",
    "targetMethod" : "handleEmptyDstDirectoryOnWindows"
  } ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:serviceMain(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:getWorkingDirectory()" : [ ],
  "org.apache.hadoop.fs.shell.Head:expandArgument(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.Command:processPathArgument(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeLink:getTargetLink()" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getTokenInfoFromZK(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.fs.FsShell:printInstanceUsage(java.io.PrintStream,org.apache.hadoop.fs.shell.Command)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkWithinRange(long,java.lang.String,long,long)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekToEnd()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getUsed(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$FilteringRemoteIterator:next()" : [ ],
  "org.apache.hadoop.fs.FileUtil:unZip(java.io.InputStream,java.io.File)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:available()" : [ ],
  "org.apache.hadoop.security.alias.KeyStoreProvider:getInputStreamForFile()" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:getUriPath(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "isValidName"
  } ],
  "org.apache.hadoop.fs.FilterFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getMetadata(java.lang.String)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.io.Text:find(java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:getExpression(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.ContentSummary$Builder:spaceConsumed(long)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:hashCode()" : [ ],
  "org.apache.hadoop.util.Shell:appendScriptExtension(java.io.File,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.RpcWritable$Buffer:writeTo(org.apache.hadoop.ipc.ResponseBuffer)" : [ ],
  "org.apache.hadoop.security.authorize.ServiceAuthorizationManager:refresh(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.authorize.PolicyProvider)" : [ ],
  "org.apache.hadoop.util.CleanerUtil:unmapHackImpl()" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:revertFromOld(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getLocationByRecordNum(long)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ ],
  "org.apache.hadoop.util.functional.TaskPool$Builder:suppressExceptions()" : [ ],
  "org.apache.hadoop.fs.shell.find.Result:negate()" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:write(int)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockManager:<init>(org.apache.hadoop.fs.impl.prefetch.BlockData)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:getSumBufferSize(int,int,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path[],boolean,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.CallerContext$Builder:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeLong:<init>(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$LinkedSegmentsDescriptor:cleanup()" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.ipc.ProtobufHelper:getFixedByteString(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.io.compress.CodecPool:returnDecompressor(org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:hashCode()" : [ ],
  "org.apache.hadoop.fs.GlobExpander:expand(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.ArrayFile:<init>()" : [ ],
  "org.apache.hadoop.crypto.CryptoStreamUtils:getBufferSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.ContentSummary$Builder:typeConsumed(org.apache.hadoop.fs.StorageType,long)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:close()" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:rollMasterKey()" : [ ],
  "org.apache.hadoop.ipc.Server:bind(java.net.ServerSocket,java.net.InetSocketAddress,int,org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.util.StringUtils:escapeString(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,java.lang.CharSequence,java.nio.charset.Charset)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.net.NetUtils:getOutputStream(java.net.Socket,long)" : [ ],
  "org.apache.hadoop.io.SequenceFile:getDefaultCompressionType(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],org.apache.hadoop.fs.StorageType[],long,long,boolean)" : [ ],
  "org.apache.hadoop.fs.WindowsGetSpaceUsed:refresh()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:renewDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token)" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:listStatus(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:createOutputStream(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:tag(java.lang.String,java.lang.String,java.lang.String,boolean)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "tag"
  } ],
  "org.apache.hadoop.fs.RawPathHandle:toString()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getCounterReference(java.lang.String)" : [ ],
  "org.apache.hadoop.util.BlockingThreadPoolExecutorService:newDaemonThreadFactory(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.OpensslCipher:checkState()" : [ ],
  "org.apache.hadoop.fs.FileSystemStorageStatistics:reset()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:initTokenManager(java.util.Properties)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:compression(org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.fs.ContentSummary$Builder:typeQuota(org.apache.hadoop.fs.StorageType,long)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:rewind()" : [ ],
  "org.apache.hadoop.fs.FilterFs:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:closeChildFileSystems(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:incrementGauge(java.lang.String,long)" : [ ],
  "org.apache.hadoop.util.hash.MurmurHash:hash(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem$2:close()" : [ ],
  "org.apache.hadoop.ipc.CallerContext$Builder:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.OpensslCipher:getInstance(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.VersionInfo:getUrl()" : [ ],
  "org.apache.hadoop.security.SecurityUtil:login(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getServerPrincipal"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "loginUserFromKeytab"
  }, {
    "sourceMethod" : "getServerPrincipal",
    "targetMethod" : "loginUserFromKeytab"
  } ],
  "org.apache.hadoop.security.http.RestCsrfPreventionFilter:getFilterParams(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:copyFromLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.Progress:addPhase()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:close()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:setAbsolute(long)" : [ ],
  "org.apache.hadoop.metrics2.MetricsTag:<init>(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : [ ],
  "org.apache.hadoop.io.Text:<init>(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrRpcCallSuccesses()" : [ ],
  "org.apache.hadoop.util.hash.JenkinsHash:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.FileContext:setReplication(org.apache.hadoop.fs.Path,short)" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$TableBuilder:<init>(java.lang.Object[])" : [ ],
  "org.apache.hadoop.conf.Configuration:dumpConfiguration(org.apache.hadoop.conf.Configuration,java.lang.String,java.io.Writer)" : [ ],
  "org.apache.hadoop.net.DNSDomainNameResolver:getHostnameByIP(java.net.InetAddress)" : [ ],
  "org.apache.hadoop.util.WeakReferenceMap:<init>(java.util.function.Function,java.util.function.Consumer)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:getAndMoveToFrontDecode0(int)" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:awaitAllFutures(java.util.Collection)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:add(java.lang.String,long)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableStat:resetMinMax()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream:skip(long)" : [ ],
  "org.apache.hadoop.util.ZKUtil:parseAuth(java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:getConfiguration(java.lang.String,javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:createToken(org.apache.hadoop.security.UserGroupInformation,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FSInputChecker:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:<init>()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getSummary(boolean)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:setAttribute(int,int)" : [ ],
  "org.apache.hadoop.ipc.Server$Call:<init>(int,int,org.apache.hadoop.ipc.RPC$RpcKind,byte[])" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:getCompressedSize()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBzip2Compressor(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:lock()" : [ {
    "sourceMethod" : "monotonicNow",
    "targetMethod" : "check"
  } ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_create(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:createFileSystem(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.ha.ZKFailoverController:becomeStandby()" : [ {
    "sourceMethod" : "getGracefulFenceTimeout",
    "targetMethod" : "getProxy"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.FilterFileSystem:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:<init>(org.apache.hadoop.security.UserGroupInformation,java.lang.Class,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.DiskChecker:checkAccessByFileMethods(java.io.File)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:readProcMemInfoFile()" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:reset()" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:ctorImpl(java.lang.Class,java.lang.Class[])" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainInputStream:available()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSOutputSummer:getIOStatistics()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:startMetricsMBeans()" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:finalize()" : [ ],
  "org.apache.hadoop.fs.ContentSummary$Builder:typeQuota(long[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getHomeDirectory()" : [ ],
  "org.apache.hadoop.tracing.Tracer:newSpan(java.lang.String,org.apache.hadoop.tracing.SpanContext)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getDefaultReplication()" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getDefaultReplication"
  } ],
  "org.apache.hadoop.fs.VectoredReadUtils:mergeSortedRanges(java.util.List,int,int,int)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getStorageBytesWritten()" : [ ],
  "org.apache.hadoop.fs.BulkDeleteUtils:validateBulkDeletePaths(java.util.Collection,int,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodecFactory:setCodecClasses(org.apache.hadoop.conf.Configuration,java.util.List)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:loadFullMaps()" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$BlockUploadData:close()" : [ ],
  "org.apache.hadoop.fs.FsShell:printInfo(java.io.PrintStream,java.lang.String,boolean)" : [ {
    "sourceMethod" : "getInstance",
    "targetMethod" : "printInstanceHelp"
  }, {
    "sourceMethod" : "getInstance",
    "targetMethod" : "printInstanceUsage"
  }, {
    "sourceMethod" : "getInstance",
    "targetMethod" : "printInstanceHelp"
  } ],
  "org.apache.hadoop.net.InnerNodeImpl:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:retryOtherThanRemoteAndSaslException(org.apache.hadoop.io.retry.RetryPolicy,java.util.Map)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:createReqInfo()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:trackDuration(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String,org.apache.hadoop.util.functional.CallableRaisingIOE)" : [ ],
  "org.apache.hadoop.io.MultipleIOException$Builder:build()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:create(org.apache.hadoop.fs.Path,boolean,boolean,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.ipc.WeightedRoundRobinMultiplexer:advanceIndex()" : [ ],
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:append(java.lang.Object,java.lang.Object)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "writeVInt"
  }, {
    "sourceMethod" : "getLength",
    "targetMethod" : "writeVInt"
  } ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable$Internal:<init>(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:moveToTrash(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "makeTrashRelativePath"
  }, {
    "sourceMethod" : "makeTrashRelativePath",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "makeTrashRelativePath",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.io.DataInputBuffer:getPosition()" : [ ],
  "org.apache.hadoop.fs.FileSystem:globStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:getAlgorithmName()" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:raiseInnerCause(java.util.concurrent.CompletionException)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSTokenRenewer:handleKind(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:renewToken(org.apache.hadoop.security.token.Token,java.lang.String)" : [ {
    "sourceMethod" : "now",
    "targetMethod" : "formatTime"
  }, {
    "sourceMethod" : "getMasterKeyId",
    "targetMethod" : "getDelegationKey"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:getThisBuilder()" : [ ],
  "org.apache.hadoop.conf.ConfigurationWithLogging:getFloat(java.lang.String,float)" : [ ],
  "org.apache.hadoop.util.Shell:isSetsidSupported()" : [ ],
  "org.apache.hadoop.fs.FileContext:getServerDefaults(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.compress.DefaultCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:open(org.apache.hadoop.fs.PathHandle,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:setQuota(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "mkdirs"
  } ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,java.lang.String[])" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlockFactory:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:toString()" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:<init>(org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory$SSLChannelMode)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:start(java.util.List)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:readAByte(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.Trash:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.StringUtils:limitDecimalTo2(double)" : [ ],
  "org.apache.hadoop.io.ArrayFile$Reader:key()" : [ ],
  "org.apache.hadoop.security.ssl.FileMonitoringTimerTask:<init>(java.nio.file.Path,java.util.function.Consumer,java.util.function.Consumer)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:checkTagName(java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:shouldRetry(java.lang.Exception,int,int,boolean)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementBytesRead(long)" : [ ],
  "org.apache.hadoop.tools.protocolPB.GetUserMappingsProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : [ {
    "sourceMethod" : "getProtocolVersion",
    "targetMethod" : "isMethodSupported"
  } ],
  "org.apache.hadoop.net.NetUtils:wrapException(java.lang.String,int,java.lang.String,int,java.io.IOException)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:blockSize(long)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:applyToIOStatisticsSnapshot(java.io.Serializable,org.apache.hadoop.util.functional.FunctionRaisingIOE)" : [ {
    "sourceMethod" : "requireIOStatisticsSnapshot",
    "targetMethod" : "unchecked"
  } ],
  "org.apache.hadoop.fs.ContentSummary$Builder:<init>()" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell$Remove:execute()" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodecFactory:getCodecClasses(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:bsGetBit()" : [ ],
  "org.apache.hadoop.metrics2.AbstractMetric:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.conf.ReconfigurationServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "getReconfigurable",
    "targetMethod" : "printConf"
  } ],
  "org.apache.hadoop.security.KDiag:validateJAAS(boolean)" : [ ],
  "org.apache.hadoop.service.AbstractService:serviceInit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.PathIsNotDirectoryException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.concurrent.HadoopScheduledThreadPoolExecutor:afterExecute(java.lang.Runnable,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.ipc.RetryCache:addCacheEntryWithPayload(byte[],int,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommandWithMultiThread:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.service.AbstractService:unregisterServiceListener(org.apache.hadoop.service.ServiceStateChangeListener)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:valueOf(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:getGcUsage(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.ipc.Server:stop()" : [ ],
  "org.apache.hadoop.util.PriorityQueue:put(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.PathPermissionException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ha.HAServiceTarget:getHealthMonitorProxy(org.apache.hadoop.conf.Configuration,int,int)" : [ {
    "sourceMethod" : "getHealthMonitorAddress",
    "targetMethod" : "getProxyForAddress"
  } ],
  "org.apache.hadoop.io.compress.DefaultCodec:createOutputStream(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.fs.CachingGetSpaceUsed:initRefreshThread(boolean)" : [ ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean,int,short,long)" : [ ],
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolServerSideTranslatorPB:pack(java.util.Collection)" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileContext,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.io.SequenceFile$Metadata,java.util.EnumSet,org.apache.hadoop.fs.Options$CreateOpts[])" : [ {
    "sourceMethod" : "create",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.io.SequenceFile$Sorter:<init>(org.apache.hadoop.fs.FileSystem,java.lang.Class,java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:emptyStatisticsStore()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getLinkTarget"
  } ],
  "org.apache.hadoop.crypto.CryptoOutputStream:encrypt()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:getMountPathInfo(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.fs.HarFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:toLongStatistic(java.util.Map$Entry)" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:getCompressionBufferSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.Command:recursePath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getDirectoryContentsIterator",
    "targetMethod" : "processPaths"
  }, {
    "sourceMethod" : "getDirectoryContents",
    "targetMethod" : "processPaths"
  } ],
  "org.apache.hadoop.security.Groups:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server:getRemotePort()" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:getRemaining()" : [ ],
  "org.apache.hadoop.fs.shell.Count:<init>(java.lang.String[],int,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:innerComplete(org.apache.hadoop.fs.UploadHandle,org.apache.hadoop.fs.Path,java.util.Map)" : [ {
    "sourceMethod" : "toByteArray",
    "targetMethod" : "totalPartsLen"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "mergePaths",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "concat"
  }, {
    "sourceMethod" : "mergePaths",
    "targetMethod" : "concat"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "rename"
  }, {
    "sourceMethod" : "mergePaths",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:aggregateMeanStatistics(org.apache.hadoop.fs.statistics.MeanStatistic,org.apache.hadoop.fs.statistics.MeanStatistic)" : [ ],
  "org.apache.hadoop.io.MD5Hash$Comparator:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.permission.ChmodParser:applyNewPermission(org.apache.hadoop.fs.FileStatus)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:sampleMetrics()" : [ ],
  "org.apache.hadoop.fs.FileContext:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem:setDefaultUri(org.apache.hadoop.conf.Configuration,java.net.URI)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:close()" : [ ],
  "org.apache.hadoop.net.TableMapping:reloadCachedMappings()" : [ ],
  "org.apache.hadoop.fs.FileSystem:createDataInputStreamBuilder(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.SaslPropertiesResolver:getSaslProperties(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.security.SaslRpcServer$QualityOfProtection)" : [ {
    "sourceMethod" : "getStrings",
    "targetMethod" : "join"
  } ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:getConnectionId()" : [ {
    "sourceMethod" : "getProxy",
    "targetMethod" : "getConnectionIdForProxy"
  } ],
  "org.apache.hadoop.security.ShellBasedIdMapping$StaticMapping:<init>(java.util.Map,java.util.Map)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:syncLocalCacheWithZk(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.fs.Path:getParentUtil()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPConnectionPool:connect(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getAllStoragePolicies()" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.shell.Display$TextRecordInputStream:read()" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "reset"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "reset"
  } ],
  "org.apache.hadoop.fs.FSDataInputStream:read(org.apache.hadoop.io.ByteBufferPool,int,java.util.EnumSet)" : [ {
    "sourceMethod" : "fallbackRead",
    "targetMethod" : "put"
  } ],
  "org.apache.hadoop.fs.FileSystem$FileSystemDataOutputStreamBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.RPC:getRpcTimeout(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileSystem:appendFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.PathNotFoundException:<init>(java.lang.String,java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.IOUtils:fsync(java.io.File)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation$ThreadSafeSampleStat:snapshotInto(org.apache.hadoop.metrics2.lib.MutableRate)" : [ ],
  "org.apache.hadoop.io.WritableUtils:cloneInto(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.ipc.RpcServerException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:decode(byte[][],int[],byte[][])" : [ ],
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String,int,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:processNonexistentPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.CrcUtil:compose(int,int,long,int)" : [ {
    "sourceMethod" : "getMonomial",
    "targetMethod" : "composeWithMonomial"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FsUrlStreamHandler:openConnection(java.net.URL)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:setDropBehind(java.lang.Boolean)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.RSErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:hasCapability(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.RPC:waitForProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.JsonSerialization:load(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.DF:<init>(java.io.File,long)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_aggregate(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:cloneFileAttributes(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "progressable",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "getCompressionCodec",
    "targetMethod" : "compression"
  }, {
    "sourceMethod" : "getCompressionType",
    "targetMethod" : "compression"
  } ],
  "org.apache.hadoop.net.NodeBase:toString()" : [ ],
  "org.apache.hadoop.fs.FSLinkResolver:qualifySymlinkTarget(java.net.URI,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "makeQualified"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:encode(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : [ {
    "sourceMethod" : "toBuffers",
    "targetMethod" : "encode"
  } ],
  "org.apache.hadoop.crypto.CryptoInputStream:read()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setCounter(java.lang.String,long)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider$KeyMetadata:getAlgorithm()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker:call(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.ipc.RpcWritable$Buffer,java.lang.String,org.apache.hadoop.ipc.RPC$Server$ProtoClassProtoImpl)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:resetOutputBuffers(byte[][],int[],int)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging$SourceToString:toString()" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:deprecatedGetFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:buildTokenService(java.net.InetSocketAddress)" : [ ],
  "org.apache.hadoop.net.DNS:getDefaultHost(java.lang.String)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:transitionToStandby(org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:<init>(short)" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FSDataOutputStream,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.io.SequenceFile$Metadata)" : [ {
    "sourceMethod" : "metadata",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "stream",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.io.compress.BZip2Codec:createInputStream(java.io.InputStream)" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer:ensureCapacity(int)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:interAddNodeWithEmptyRack(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.ContentSummary:toSnapshot(boolean)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler:initAsyncCall(org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall,org.apache.hadoop.io.retry.AsyncCallHandler$AsyncValue)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:loadConfigurationClasses()" : [ ],
  "org.apache.hadoop.security.authorize.AuthorizationException:<init>()" : [ ],
  "org.apache.hadoop.security.http.CrossOriginFilter:doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:truncate(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.fs.local.RawLocalFs:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:validateFiles(java.lang.String,boolean)" : [ {
    "sourceMethod" : "getFileSystem",
    "targetMethod" : "expandWildcard"
  }, {
    "sourceMethod" : "getLocal",
    "targetMethod" : "expandWildcard"
  } ],
  "org.apache.hadoop.fs.FileSystem$Cache:getInternal(java.net.URI,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem$Cache$Key)" : [ {
    "sourceMethod" : "getTimeDuration",
    "targetMethod" : "addShutdownHook"
  } ],
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeDirLink:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.fs.viewfs.InodeTree$INodeLink)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "renameInternal"
  } ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:reencryptEncryptedKeys(java.util.List)" : [ {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptedKeyIv",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptedKeyVersion",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getVersionName",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:isLoginKeytabBased()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekTo(byte[])" : [ ],
  "org.apache.hadoop.fs.shell.Mkdir:processNonexistentPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:<init>(java.io.InputStream,long,long,org.apache.hadoop.io.compress.SplittableCompressionCodec$READ_MODE)" : [ ],
  "org.apache.hadoop.fs.Path:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.ShutdownHookManager:executeShutdown()" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$SingleChunkEncoder:<init>(java.io.DataOutputStream,int)" : [ ],
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency:<init>()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsAnnotations:makeSource(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$HadoopLoginContext:logout()" : [ ],
  "org.apache.hadoop.io.WritableUtils:readVLong(java.io.DataInput)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:configure(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:getFallbackFileSystem()" : [ ],
  "org.apache.hadoop.fs.DF:toString()" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$Pmem:memSync(org.apache.hadoop.io.nativeio.NativeIO$POSIX$PmemMappedRegion)" : [ ],
  "org.apache.hadoop.fs.LocatedFileStatus:compareTo(org.apache.hadoop.fs.FileStatus)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine:getServer(java.lang.Class,java.lang.Object,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:<init>(java.lang.Class,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.util.JsonSerialization:fromBytes(byte[])" : [ ],
  "org.apache.hadoop.fs.FileContext$FCDataOutputStreamBuilder:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:createDataFileReader(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "prependOptions"
  } ],
  "org.apache.hadoop.ha.ZKFailoverController:gracefulFailoverToYou()" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:switchBindUser(javax.naming.AuthenticationException)" : [ ],
  "org.apache.hadoop.fs.FileSystem:append(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "append"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getBlockSize()" : [ ],
  "org.apache.hadoop.net.ScriptBasedMapping:<init>()" : [ ],
  "org.apache.hadoop.fs.FileContext:createSnapshot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.JceAesCtrCryptoCodec:createDecryptor()" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:switchToSimple()" : [ ],
  "org.apache.hadoop.ipc.Server$FatalRpcServerException:<init>(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcErrorCodeProto,java.lang.String)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_create()" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:reset()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getDefaultBlockSize()" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:<init>(org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:startUpload()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextIntegration:getCurrentIOStatisticsContext()" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStream:getPos()" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$RetryUpToMaximumCountWithFixedSleep:<init>(int,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.security.ssl.SSLFactory:readSSLConfiguration(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.ssl.SSLFactory$Mode)" : [ {
    "sourceMethod" : "getBoolean",
    "targetMethod" : "setBoolean"
  } ],
  "org.apache.hadoop.fs.FileContext:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:posixFadviseIfPossible(java.lang.String,java.io.FileDescriptor,long,long,int)" : [ ],
  "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec:createDecryptor()" : [ ],
  "org.apache.hadoop.net.NetworkTopology:remove(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:setAclsWithRetries(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:flush()" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:selectiveClearing(org.apache.hadoop.util.bloom.Key,short)" : [ {
    "sourceMethod" : "hash",
    "targetMethod" : "minimumFnRemove"
  }, {
    "sourceMethod" : "hash",
    "targetMethod" : "maximumFpRemove"
  }, {
    "sourceMethod" : "hash",
    "targetMethod" : "ratioRemove"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getHomeDirectory()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Retryer:<init>(int,int,int)" : [ ],
  "org.apache.hadoop.util.StringUtils$TraditionalBinaryPrefix:long2String(long,java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.shell.Concat:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:write(int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getHomeDirectory()" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:reinit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSupport:snapshotIOStatistics()" : [ ],
  "org.apache.hadoop.util.HostsFileReader:getHosts()" : [ ],
  "org.apache.hadoop.security.JniBasedUnixGroupsMapping:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:valueClass(java.lang.Class)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:processWatchEvent(org.apache.zookeeper.ZooKeeper,org.apache.zookeeper.WatchedEvent)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:generateDelegationToken(org.apache.hadoop.security.token.Token)" : [ {
    "sourceMethod" : "getPassword",
    "targetMethod" : "setDelegationToken"
  }, {
    "sourceMethod" : "getIdentifier",
    "targetMethod" : "setDelegationToken"
  }, {
    "sourceMethod" : "getKind",
    "targetMethod" : "setDelegationToken"
  }, {
    "sourceMethod" : "getService",
    "targetMethod" : "setDelegationToken"
  } ],
  "org.apache.hadoop.util.Shell:getSignalKillCommand(int,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.DumpUtil:dumpChunk(org.apache.hadoop.io.erasurecode.ECChunk)" : [ {
    "sourceMethod" : "toBytesArray",
    "targetMethod" : "bytesToHex"
  } ],
  "org.apache.hadoop.fs.AbstractFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : [ ],
  "org.apache.hadoop.fs.Globber:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.security.token.Token$PrivateToken:hashCode()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsLocatedFileStatus:getBlockLocations()" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:getDefaultImpersonationProvider()" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$WrappingRemoteIterator:getIOStatistics()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:close()" : [ ],
  "org.apache.hadoop.io.SequenceFile$RecordCompressWriter:append(java.lang.Object,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileContext:listXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:permission(org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:createParentNode(java.lang.String)" : [ ],
  "org.apache.hadoop.util.DataChecksum:getChecksumSize(int)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:poll(long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getServerDefaults()" : [ ],
  "org.apache.hadoop.net.NetworkTopology:isNodeInScope(org.apache.hadoop.net.Node,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getReplication()" : [ ],
  "org.apache.hadoop.fs.FileContext:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:doDecodeSingle(java.nio.ByteBuffer[][],java.nio.ByteBuffer[][],int,int,boolean)" : [ {
    "sourceMethod" : "getNumDataUnits",
    "targetMethod" : "getPiggyBackForDecode"
  }, {
    "sourceMethod" : "getNumParityUnits",
    "targetMethod" : "getPiggyBackForDecode"
  }, {
    "sourceMethod" : "getPiggyBackForDecode",
    "targetMethod" : "doDecodeByPiggyBack"
  } ],
  "org.apache.hadoop.io.WritableUtils:writeCompressedByteArray(java.io.DataOutput,byte[])" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:updateDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ ],
  "org.apache.hadoop.jmx.JMXJsonServlet:writeAttribute(com.fasterxml.jackson.core.JsonGenerator,javax.management.ObjectName,javax.management.MBeanAttributeInfo)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:canonicalizeUri(java.net.URI)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:hiddenImpl(java.lang.String,java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.ha.HAServiceProtocolHelper:transitionToActive(org.apache.hadoop.ha.HAServiceProtocol,org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicLongMaximum(java.lang.String,java.util.concurrent.atomic.AtomicLong)" : [ ],
  "org.apache.hadoop.fs.audit.CommonAuditContext:noteEntryPoint(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.permission.FsCreateModes:equals(java.lang.Object)" : [ {
    "sourceMethod" : "getUnmasked",
    "targetMethod" : "equals"
  } ],
  "org.apache.hadoop.ipc.internal.ShadedProtobufHelper:getFixedByteString(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.net.DomainNameResolverFactory:newInstance(org.apache.hadoop.conf.Configuration,java.net.URI,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.ConfigRedactor:redactXml(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:removeStoredMasterKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ ],
  "org.apache.hadoop.fs.shell.Mkdir:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:loadConf()" : [ ],
  "org.apache.hadoop.security.token.Token:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:isSecurityEnabled()" : [ ],
  "org.apache.hadoop.service.launcher.InterruptEscalator:interrupted(org.apache.hadoop.service.launcher.IrqHandler$InterruptData)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "halt"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "terminate"
  } ],
  "org.apache.hadoop.security.ShellBasedIdMapping:getGidAllowingUnknown(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:suffix(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:<init>(int,float,long,int,org.apache.hadoop.crypto.key.kms.ValueQueue$SyncGenerationPolicy,org.apache.hadoop.crypto.key.kms.ValueQueue$QueueRefiller)" : [ ],
  "org.apache.hadoop.fs.FileSystem:moveFromLocalFile(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.serializer.SerializationFactory:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FilterFs:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:<init>(java.lang.String,java.lang.String,org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.ipc.RpcClientUtil:getVersionSignatureMap(java.net.InetSocketAddress,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getAclStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getAclStatus"
  } ],
  "org.apache.hadoop.util.InstrumentedLock$SuppressedStats:snapshot()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newStat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getLinkTarget(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricCounterLong:<init>(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.tools.protocolPB.GetUserMappingsProtocolClientSideTranslatorPB:getGroupsForUser(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:newForMethod(java.lang.Object,java.lang.reflect.Method,org.apache.hadoop.metrics2.annotation.Metric,org.apache.hadoop.metrics2.lib.MetricsRegistry)" : [ {
    "sourceMethod" : "newForMethod",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:innerClose()" : [ ],
  "org.apache.hadoop.fs.shell.Ls:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.TableMapping$RawTableMapping:reloadCachedMappings(java.util.List)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.PairedDurationTrackerFactory:trackDuration(java.lang.String,long)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension:createKeyProviderCryptoExtension(org.apache.hadoop.crypto.key.KeyProvider)" : [ ],
  "org.apache.hadoop.fs.FilterFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.service.AbstractService:isInState(org.apache.hadoop.service.Service$STATE)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:updatePos(boolean)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:ctorImpl(java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:onTimerEvent()" : [ {
    "sourceMethod" : "sampleMetrics",
    "targetMethod" : "publishMetrics"
  } ],
  "org.apache.hadoop.io.ReadaheadPool:readaheadStream(java.lang.String,java.io.FileDescriptor,long,long,long,org.apache.hadoop.io.ReadaheadPool$ReadaheadRequest)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState:checkBuffers(java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.conf.Configuration:size()" : [ ],
  "org.apache.hadoop.util.StopWatch:toString()" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:add(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.FileRange:createFileRange(long,int,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.crypto.CryptoFSDataOutputStream:<init>(org.apache.hadoop.fs.FSDataOutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[])" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:checkKey()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:isFile()" : [ ],
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:getCacheUpdated()" : [ ],
  "org.apache.hadoop.crypto.CryptoStreamUtils:checkBufferSize(org.apache.hadoop.crypto.CryptoCodec,int)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:setWorkFactor(org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:createCollectorPath(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "mergePaths"
  }, {
    "sourceMethod" : "mergePaths",
    "targetMethod" : "mergePaths"
  }, {
    "sourceMethod" : "mergePaths",
    "targetMethod" : "mergePaths"
  } ],
  "org.apache.hadoop.conf.Configuration:getStreamReader(org.apache.hadoop.conf.Configuration$Resource,boolean)" : [ {
    "sourceMethod" : "isParserRestricted",
    "targetMethod" : "parse"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "parse"
  }, {
    "sourceMethod" : "isParserRestricted",
    "targetMethod" : "parse"
  }, {
    "sourceMethod" : "getResource",
    "targetMethod" : "parse"
  }, {
    "sourceMethod" : "isParserRestricted",
    "targetMethod" : "parse"
  }, {
    "sourceMethod" : "isParserRestricted",
    "targetMethod" : "parse"
  } ],
  "org.apache.hadoop.fs.Path:<init>(java.lang.String,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:startRPC()" : [ ],
  "org.apache.hadoop.fs.CompositeCrcFileChecksum:getBytes()" : [ ],
  "org.apache.hadoop.io.ObjectWritable:readObject(java.io.DataInput,org.apache.hadoop.io.ObjectWritable,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "readString",
    "targetMethod" : "loadClass"
  }, {
    "sourceMethod" : "readString",
    "targetMethod" : "loadClass"
  } ],
  "org.apache.hadoop.fs.FileContext:<init>(org.apache.hadoop.fs.AbstractFileSystem,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:visitAll(org.apache.hadoop.fs.FileSystem$Statistics$StatisticsAggregator)" : [ ],
  "org.apache.hadoop.util.CrcComposer:newCrcComposer(org.apache.hadoop.util.DataChecksum$Type,long)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:requestCaching(int)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:getRemoteDestination(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.PathIOException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addMinimumFunction(java.lang.String,java.util.function.Function)" : [ ],
  "org.apache.hadoop.fs.ContentSummary:toString(boolean,boolean)" : [ ],
  "org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool:select(java.nio.channels.SelectableChannel,int,long)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "release"
  } ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:write(int)" : [ ],
  "org.apache.hadoop.io.Text:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.net.StandardSocketFactory:createSocket(java.lang.String,int)" : [ ],
  "org.apache.hadoop.io.MapFile:rename(org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:confChanged(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getTrimmedStrings"
  } ],
  "org.apache.hadoop.io.VLongWritable:<init>(long)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlockFactory:create(long,int,org.apache.hadoop.fs.store.BlockUploadStatistics)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addMinimumSample(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:getFileLength()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setStoragePolicy"
  } ],
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:initFileSystem(java.net.URI)" : [ ],
  "org.apache.hadoop.fs.FsShell:newShellInstance()" : [ ],
  "org.apache.hadoop.io.BytesWritable:setSize(int)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createKey(java.lang.String,org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextIntegration:setThreadIOStatisticsContext(org.apache.hadoop.fs.statistics.IOStatisticsContext)" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:<init>()" : [ ],
  "org.apache.hadoop.security.alias.LocalBouncyCastleFipsKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.RPC$Builder:build()" : [ ],
  "org.apache.hadoop.tools.TableListing$Builder:addField(java.lang.String,org.apache.hadoop.tools.TableListing$Justification)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:hashCode()" : [ ],
  "org.apache.hadoop.ipc.Server$Listener:doRead(java.nio.channels.SelectionKey)" : [ {
    "sourceMethod" : "now",
    "targetMethod" : "setLastContact"
  }, {
    "sourceMethod" : "now",
    "targetMethod" : "setLastContact"
  } ],
  "org.apache.hadoop.net.NetworkTopology:getDatanodesInRack(java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:hasKerberosCredentials()" : [ ],
  "org.apache.hadoop.tools.CommandShell:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "pathToFile",
    "targetMethod" : "setOwner"
  } ],
  "org.apache.hadoop.io.SequenceFile$Metadata:toString()" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:isLastBlock()" : [ {
    "sourceMethod" : "blockNumber",
    "targetMethod" : "isLastBlock"
  } ],
  "org.apache.hadoop.service.AbstractService:start()" : [ ],
  "org.apache.hadoop.security.KDiag:execute()" : [ {
    "sourceMethod" : "getLoginUser",
    "targetMethod" : "dumpUGI"
  }, {
    "sourceMethod" : "getLoginUser",
    "targetMethod" : "validateUGI"
  }, {
    "sourceMethod" : "isLoginTicketBased",
    "targetMethod" : "println"
  }, {
    "sourceMethod" : "isLoginKeytabBased",
    "targetMethod" : "println"
  } ],
  "org.apache.hadoop.security.SaslRpcServer$AuthMethod:read(java.io.DataInput)" : [ ],
  "org.apache.hadoop.util.StringUtils:unEscapeString(java.lang.String,char,char[])" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:close()" : [ {
    "sourceMethod" : "create",
    "targetMethod" : "closeStream"
  }, {
    "sourceMethod" : "create",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.crypto.key.KeyProviderExtension:createKey(java.lang.String,org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:run()" : [ ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher:sendCallbackAndRemove(java.lang.String,java.util.TreeMap,org.apache.hadoop.net.unix.DomainSocketWatcher$FdSet,int)" : [ ],
  "org.apache.hadoop.fs.ContentSummary$Builder:typeConsumed(long[])" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec:createDirectDecompressor()" : [ ],
  "org.apache.hadoop.fs.permission.AclEntry:toString()" : [ ],
  "org.apache.hadoop.util.functional.TaskPool:foreach(java.lang.Object[])" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:configureSystem()" : [ {
    "sourceMethod" : "getHostname",
    "targetMethod" : "tag"
  } ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:setGauge(java.lang.String,long)" : [ ],
  "org.apache.hadoop.ipc.Server:setupResponseForProtobuf(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto,org.apache.hadoop.io.Writable)" : [ {
    "sourceMethod" : "getMessage",
    "targetMethod" : "getDelimitedLength"
  } ],
  "org.apache.hadoop.io.compress.BlockCompressorStream:finish()" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:getChecksumFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.HttpExceptionUtils:createServletExceptionResponse(javax.servlet.http.HttpServletResponse,int,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getFileStatus(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.ChannelSftp$LsEntry,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getWorkingDirectory",
    "targetMethod" : "makeQualified"
  }, {
    "sourceMethod" : "getUri",
    "targetMethod" : "makeQualified"
  } ],
  "org.apache.hadoop.fs.AbstractFileSystem:createMultipartUploader(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.HealthMonitor$MonitorDaemon:run()" : [ ],
  "org.apache.hadoop.fs.Globber:authorityFromPath(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "getFSofPath"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:lowerBound(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getRecordNumByLocation(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:setReplication(org.apache.hadoop.fs.Path,short)" : [ ],
  "org.apache.hadoop.util.bloom.Key:compareTo(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:available()" : [ ],
  "org.apache.hadoop.security.token.delegation.DelegationKey:<init>()" : [ ],
  "org.apache.hadoop.io.WritableUtils:writeCompressedStringArray(java.io.DataOutput,java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "access"
  } ],
  "org.apache.hadoop.fs.statistics.BufferedIOStatisticsOutputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicIntegerMaximum(java.lang.String,java.util.concurrent.atomic.AtomicInteger)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:processThrowable(org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode,java.lang.String,java.lang.Throwable,java.util.List,org.apache.hadoop.fs.Path[])" : [ ],
  "org.apache.hadoop.security.SecurityUtil$TruststoreKeystore:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.SecurityUtil$QualifiedHostResolver:getByExactName(java.lang.String)" : [ ],
  "org.apache.hadoop.util.functional.LazyAutoCloseableReference:eval()" : [ ],
  "org.apache.hadoop.fs.FsServerDefaults:<init>(long,int,int,short,int,boolean,long,org.apache.hadoop.util.DataChecksum$Type)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:getNativeFileLinkStatus(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression$FinishOnFlushCompressionStream:flush()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getProcessingStdDev()" : [ ],
  "org.apache.hadoop.crypto.JceSm4CtrCryptoCodec:calculateIV(byte[],long,byte[])" : [ {
    "sourceMethod" : "getAlgorithmBlockSize",
    "targetMethod" : "calculateIV"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile:makeComparator(java.lang.String)" : [ ],
  "org.apache.hadoop.io.LongWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:registerSink(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSink)" : [ {
    "sourceMethod" : "subset",
    "targetMethod" : "newSink"
  } ],
  "org.apache.hadoop.fs.Globber:fixRelativePart(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.Text:toString()" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:getTokenRealOwner(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtobufRpcEngineCallbackImpl:error(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getCanonicalUri()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNegative(long,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:createJarWithClassPath(java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.impl.FsLinkResolution:resolve(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.FsLinkResolution$FsLinkResolutionFunction)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:getLock(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.FsUrlStreamHandlerFactory:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:handleChecksumException(org.apache.hadoop.fs.ChecksumException)" : [ ],
  "org.apache.hadoop.io.compress.Lz4Codec:createOutputStream(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.fs.FilterFs:resolvePath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FsShell:run(java.lang.String[])" : [ {
    "sourceMethod" : "wrapHadoopConf",
    "targetMethod" : "conf"
  }, {
    "sourceMethod" : "join",
    "targetMethod" : "addKVAnnotation"
  } ],
  "org.apache.hadoop.fs.AbstractFileSystem:open(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:makeTrashRelativePath(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:isChecksumFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.CombinedFileRange:merge(long,long,org.apache.hadoop.fs.FileRange,int,int)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:read(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:toString()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkPathExistsAsFile(java.nio.file.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.net.AbstractDNSToSwitchMapping:isSingleSwitchByScriptPolicy()" : [ ],
  "org.apache.hadoop.fs.shell.Command:isPathRecursable(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.service.ServiceStateModel:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:getInstance(org.apache.hadoop.conf.Configuration,org.apache.hadoop.net.InnerNode$Factory)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$AsyncHandler:completed(java.lang.Integer,java.lang.Integer)" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:<init>(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkRegex(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.SplittableCompressionCodec$READ_MODE)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:<init>()" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.Lock,long,long,org.apache.hadoop.util.Timer)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getFsStatus()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcLockWaitTime(long)" : [ ],
  "org.apache.hadoop.tools.GetGroupsBase:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.XORErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferData:<init>(int,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:<init>(org.apache.hadoop.fs.ChecksumFileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:checkManualStateManagementOK(org.apache.hadoop.ha.HAServiceTarget)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:flush(int,int,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,boolean)" : [ {
    "sourceMethod" : "suffix",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "metadata",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "stream",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "getPos",
    "targetMethod" : "writeVLong"
  } ],
  "org.apache.hadoop.ipc.WritableRpcEngine:initialize()" : [ ],
  "org.apache.hadoop.security.SecurityUtil:isOriginalTGT(javax.security.auth.kerberos.KerberosTicket)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:forceReloginFromKeytab()" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:storeDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.fs.HarFileSystem:toFileStatus(org.apache.hadoop.fs.HarFileSystem$HarStatus)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$RangeExcludingLongIterator:next()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:sort(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.KDiag:run(java.lang.String[])" : [ {
    "sourceMethod" : "usage",
    "targetMethod" : "println"
  }, {
    "sourceMethod" : "popOptionWithArgument",
    "targetMethod" : "println"
  } ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:munmap(java.nio.MappedByteBuffer)" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:getCredentialEntry(java.lang.String)" : [ ],
  "org.apache.hadoop.util.StopWatch:now()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:skip(long)" : [ ],
  "org.apache.hadoop.security.SaslRpcServer$SaslDigestCallbackHandler:getPassword(org.apache.hadoop.security.token.TokenIdentifier)" : [ {
    "sourceMethod" : "retriableRetrievePassword",
    "targetMethod" : "encodePassword"
  } ],
  "org.apache.hadoop.io.erasurecode.codec.DummyErasureCodec:createDecoder()" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.DummyErasureCodec:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ ],
  "org.apache.hadoop.util.functional.TaskPool$Builder:run(org.apache.hadoop.util.functional.TaskPool$Task)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setGauge(java.lang.String,long)" : [ ],
  "org.apache.hadoop.security.Groups:getUserToGroupsMappingService(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.TableMapping$RawTableMapping:load()" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.fs.FileContext:getStatistics(java.net.URI)" : [ ],
  "org.apache.hadoop.io.compress.lz4.Lz4Decompressor:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,float)" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:<init>(java.lang.String,java.lang.String,org.apache.hadoop.net.InnerNode,int)" : [ ],
  "org.apache.hadoop.conf.StorageUnit$2:getDefault(double)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:delete(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.file.tfile.Utils:readVInt(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:<init>(org.apache.hadoop.fs.FSDataInputStream,long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getRemoteReadTime()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "unsetStoragePolicy"
  } ],
  "org.apache.hadoop.fs.ChecksumFs:delete(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.util.JvmPauseMonitor:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:stripOutRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:compression(org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.conf.Configuration:getClassByName(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[])" : [ ],
  "org.apache.hadoop.ipc.Client:getCallId()" : [ ],
  "org.apache.hadoop.security.Credentials:writeWritableOutputStream(java.io.DataOutputStream)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:rejectUnknownMandatoryKeys(java.util.Collection,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:aggregateLocalStatesToGlobalMetrics(java.util.concurrent.ConcurrentMap)" : [ {
    "sourceMethod" : "addMetricIfNotExists",
    "targetMethod" : "snapshotInto"
  } ],
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:<init>(org.apache.hadoop.ipc.RetryCache)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_toPrettyString(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getServerDefaults()" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getServerDefaults"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:setAuthenticationMethod(org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : [ {
    "sourceMethod" : "valueOf",
    "targetMethod" : "setAuthenticationMethod"
  } ],
  "org.apache.hadoop.fs.shell.PathData:refreshStatus()" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "lookupStat"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:verifyToken(org.apache.hadoop.security.token.Token)" : [ {
    "sourceMethod" : "getPassword",
    "targetMethod" : "verifyToken"
  }, {
    "sourceMethod" : "decodeTokenIdentifier",
    "targetMethod" : "verifyToken"
  } ],
  "org.apache.hadoop.fs.permission.AclEntryType:toString()" : [ ],
  "org.apache.hadoop.net.SocketIOWithTimeout:connect(java.nio.channels.SocketChannel,java.net.SocketAddress,int)" : [ ],
  "org.apache.hadoop.ipc.ProcessingDetails:toString()" : [ ],
  "org.apache.hadoop.conf.Configuration:getEnumSet(java.lang.String,java.lang.Class,boolean)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "parseEnumSet"
  } ],
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:bufferSize(int)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getActualUgi()" : [ {
    "sourceMethod" : "getCurrentUser",
    "targetMethod" : "logAllUserInfo"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getXAttr"
  } ],
  "org.apache.hadoop.fs.FilterFileSystem:getServerDefaults()" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:getRemainingPath(java.lang.String[],int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:uncaughtException(java.lang.Thread,java.lang.Throwable)" : [ {
    "sourceMethod" : "convertToExitException",
    "targetMethod" : "exit"
  } ],
  "org.apache.hadoop.io.erasurecode.coder.DummyErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getBlockIndexNear(long)" : [ {
    "sourceMethod" : "getBlockRegionList",
    "targetMethod" : "lowerBound"
  } ],
  "org.apache.hadoop.ipc.ResponseBuffer:toByteArray()" : [ ],
  "org.apache.hadoop.util.Shell$1:run()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$CompressionOption:<init>(org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.security.token.Token:buildCacheKey()" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class)" : [ ],
  "org.apache.hadoop.util.Lists:newArrayList(java.util.Iterator)" : [ {
    "sourceMethod" : "newArrayList",
    "targetMethod" : "addAll"
  } ],
  "org.apache.hadoop.io.compress.DecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:listStatusIterator(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Server$Call:sendResponse()" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncValue:waitAsyncValue(long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:reloginFromTicketCache(boolean)" : [ {
    "sourceMethod" : "getLogin",
    "targetMethod" : "relogin"
  } ],
  "org.apache.hadoop.util.ReflectionUtils:getFactory(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:getLeaves(java.lang.String)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:refresh()" : [ ],
  "org.apache.hadoop.fs.FileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "validatePathCapabilityArgs"
  } ],
  "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec:<init>()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:throwIfInvalidBuffer()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:initTables(int,int,byte[],int,byte[])" : [ ],
  "org.apache.hadoop.security.token.Token:decodeWritable(org.apache.hadoop.io.Writable,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Client:call(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable,org.apache.hadoop.ipc.Client$ConnectionId,int,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ {
    "sourceMethod" : "createCall",
    "targetMethod" : "getConnection"
  }, {
    "sourceMethod" : "createCall",
    "targetMethod" : "sendRpcRequest"
  }, {
    "sourceMethod" : "getConnection",
    "targetMethod" : "getRpcResponse"
  }, {
    "sourceMethod" : "createCall",
    "targetMethod" : "getRpcResponse"
  }, {
    "sourceMethod" : "getConnection",
    "targetMethod" : "getRpcResponse"
  }, {
    "sourceMethod" : "createCall",
    "targetMethod" : "getRpcResponse"
  } ],
  "org.apache.hadoop.ipc.RetryCache:waitForCompletion(org.apache.hadoop.ipc.RetryCache$CacheEntry)" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodec$Util:createOutputStreamWithCodecPool(org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.conf.Configuration,java.io.OutputStream)" : [ {
    "sourceMethod" : "getCompressor",
    "targetMethod" : "setTrackedCompressor"
  }, {
    "sourceMethod" : "getCompressor",
    "targetMethod" : "returnCompressor"
  } ],
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:getPassword(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:getHomeDirValue(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.CodecPool:getLeasedCompressorsCount(org.apache.hadoop.io.compress.CompressionCodec)" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:appendTokenFiles(java.util.ArrayList,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getService",
    "targetMethod" : "addToken"
  } ],
  "org.apache.hadoop.ipc.CallQueueManager:getPriorityLevel(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.util.bloom.Key:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:setGcTimeMonitor(org.apache.hadoop.util.GcTimeMonitor)" : [ ],
  "org.apache.hadoop.ipc.Server$Responder:processResponse(java.util.LinkedList,boolean)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:nextRawKey()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:delegationTokenToJSON(org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:parentZNodeExists()" : [ ],
  "org.apache.hadoop.ipc.RetryCache$CacheEntryWithPayload:<init>(byte[],int,java.lang.Object,long,boolean)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:hasCapacity(long)" : [ ],
  "org.apache.hadoop.util.IdentityHashStore:remove(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.StopWatch:now(java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.FSDataInputStream:unbuffer()" : [ ],
  "org.apache.hadoop.util.ShutdownHookManager:removeShutdownHook(java.lang.Runnable)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:getBytesWritten()" : [ ],
  "org.apache.hadoop.ipc.ProtocolProxy:fetchServerMethods(java.lang.reflect.Method)" : [ {
    "sourceMethod" : "getMethods",
    "targetMethod" : "getFingerprint"
  } ],
  "org.apache.hadoop.security.ShellBasedIdMapping:getUserName(int,java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:get(org.apache.hadoop.io.BytesWritable,org.apache.hadoop.io.BytesWritable)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:hashCode()" : [ {
    "sourceMethod" : "getKeyLength",
    "targetMethod" : "hashBytes"
  } ],
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:put(java.lang.Object)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:build()" : [ ],
  "org.apache.hadoop.conf.ConfServlet:writeResponse(org.apache.hadoop.conf.Configuration,java.io.Writer,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,java.lang.String[])" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:<init>()" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:add(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:reloginFromKeytab(boolean)" : [ ],
  "org.apache.hadoop.fs.shell.SnapshotCommands$RenameSnapshot:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.metrics2.util.MBeans:register(java.lang.String,java.lang.String,java.lang.Object)" : [ ],
  "org.apache.hadoop.io.UTF8:<init>(org.apache.hadoop.io.UTF8)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:write(java.io.DataOutput)" : [ {
    "sourceMethod" : "size",
    "targetMethod" : "writeVInt"
  }, {
    "sourceMethod" : "buffer",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "size",
    "targetMethod" : "writeVInt"
  }, {
    "sourceMethod" : "getLength",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "getLength",
    "targetMethod" : "writeVInt"
  }, {
    "sourceMethod" : "getLength",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.fs.FilterFs:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.io.UTF8:writeString(java.io.DataOutput,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.Path:isWindowsAbsolutePath(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Server$WritableRpcInvoker:call(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.io.Writable,long)" : [ {
    "sourceMethod" : "getMethodName",
    "targetMethod" : "setDetailedMetricsName"
  } ],
  "org.apache.hadoop.fs.audit.CommonAuditContext:init()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtobufRpcEngineCallbackImpl:setResponse(com.google.protobuf.Message)" : [ {
    "sourceMethod" : "wrap",
    "targetMethod" : "setDeferredResponse"
  } ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:startUpload(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:createCheckpoint(java.util.Date)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "createCheckpoint"
  } ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:createTokenIdent(byte[])" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:finalize()" : [ ],
  "org.apache.hadoop.fs.Options$HandleOpt:moved(boolean)" : [ ],
  "org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB:refreshSuperUserGroupsConfiguration()" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:loadPermissionInfo()" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:getAttribute(int)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState:checkInputBuffers(byte[][])" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:doGetLevel()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:getWorkingDirectory()" : [ ],
  "org.apache.hadoop.security.KerberosAuthException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.compress.BlockDecompressorStream:<init>(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:next()" : [ ],
  "org.apache.hadoop.util.functional.FunctionalIO:toUncheckedFunction(org.apache.hadoop.util.functional.FunctionRaisingIOE)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:<init>()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:releaseReadyBlock(int)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ArrayBlockFactory:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.JceCtrCryptoCodec:setConf(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "setProvider"
  } ],
  "org.apache.hadoop.util.FindClass:usage(java.lang.String[])" : [ ],
  "org.apache.hadoop.util.LineReader:readDefaultLine(org.apache.hadoop.io.Text,int,int)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getTransferMode(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupRandPartA()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getSymlink()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsCollectorImpl:addRecord(org.apache.hadoop.metrics2.MetricsInfo)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:transitionToActive(org.apache.commons.cli.CommandLine)" : [ {
    "sourceMethod" : "createReqInfo",
    "targetMethod" : "transitionToActive"
  }, {
    "sourceMethod" : "getProxy",
    "targetMethod" : "transitionToActive"
  } ],
  "org.apache.hadoop.fs.LocalFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:setConfigurationFromURI(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.ProxyCombiner$CombinedProxyInvocationHandler:getConnectionId()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicIntegerGauge(java.lang.String,java.util.concurrent.atomic.AtomicInteger)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getDelegationTokens(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:entryToString(java.util.Map$Entry)" : [ ],
  "org.apache.hadoop.util.VersionInfo:getProtocVersion()" : [ ],
  "org.apache.hadoop.util.IdentityHashStore:get(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.Groups:getGroups(java.lang.String)" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:add(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.security.RuleBasedLdapGroupsMapping:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:needsInput()" : [ ],
  "org.apache.hadoop.fs.FsUrlStreamHandlerFactory:<init>()" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:remove(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$BlockReader:getRawSize()" : [ ],
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:invoke(java.lang.Object,java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.shell.SnapshotCommands$CreateSnapshot:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher:addNotificationSocket(java.util.TreeMap,org.apache.hadoop.net.unix.DomainSocketWatcher$FdSet)" : [ ],
  "org.apache.hadoop.io.compress.PassthroughCodec:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:writeImpl(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$Get:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:close()" : [ {
    "sourceMethod" : "getTargetFileSystemForClose",
    "targetMethod" : "closeChildFileSystems"
  }, {
    "sourceMethod" : "getTargetFileSystem",
    "targetMethod" : "closeChildFileSystems"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:getData(int)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator:createTmpFileForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.DoubleWritable:<init>(double)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getServerDefaults()" : [ ],
  "org.apache.hadoop.conf.Configuration$DeprecationContext:<init>(org.apache.hadoop.conf.Configuration$DeprecationContext,org.apache.hadoop.conf.Configuration$DeprecationDelta[])" : [ ],
  "org.apache.hadoop.conf.Configuration$Resource:getRestrictParserDefault(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.KMSUtil:parseJSONKeyVersion(java.util.Map)" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getQuotaUsage(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.Text$Comparator:<init>()" : [ ],
  "org.apache.hadoop.ipc.RetryCache$CacheEntryWithPayload:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.ComparableVersion:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileStatus:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.FilterFs:makeQualified(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:replaceScheduledTask(int,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleStat:reset(long,double,double,org.apache.hadoop.metrics2.util.SampleStat$MinMax)" : [ ],
  "org.apache.hadoop.util.DataChecksum:mapByteToChecksumType(int)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferEncodingState:convertToByteArrayState()" : [ ],
  "org.apache.hadoop.util.Progress:addPhases(int)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addCounterFunction(java.lang.String,java.util.function.Function)" : [ ],
  "org.apache.hadoop.util.bloom.HashFunction:hash(org.apache.hadoop.util.bloom.Key)" : [ {
    "sourceMethod" : "getBytes",
    "targetMethod" : "hash"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:getCredentials()" : [ ],
  "org.apache.hadoop.fs.shell.SetReplication:waitForReplication()" : [ {
    "sourceMethod" : "getLen",
    "targetMethod" : "getFileBlockLocations"
  } ],
  "org.apache.hadoop.io.erasurecode.coder.XORErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.FileUtil:chmod(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:doDelegationTokenOperation(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator$DelegationTokenOperation,java.lang.String,org.apache.hadoop.security.token.Token,boolean,java.lang.String)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceShutdownHook:<init>(org.apache.hadoop.service.Service)" : [ ],
  "org.apache.hadoop.fs.shell.Display$TextRecordInputStream:close()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:<init>(org.apache.hadoop.security.authentication.client.ConnectionConfigurator)" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:membershipTest(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.ipc.RetryCache:clear(org.apache.hadoop.ipc.RetryCache)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getBytesReadErasureCoded()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:next(org.apache.hadoop.io.DataOutputBuffer)" : [ {
    "sourceMethod" : "readRecordLength",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.fs.crypto.CryptoFSDataOutputStream:getPos()" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:buildStaticChecked()" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:needsInput()" : [ ],
  "org.apache.hadoop.net.SocksSocketFactory:setConf(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "setProxy"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(short[],java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem:removeFileSystemForTesting(java.net.URI,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.SortedMapWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.crypto.key.kms.ValueQueue:submitRefillTask(java.lang.String,java.util.Queue)" : [ ],
  "org.apache.hadoop.fs.Path:mergePaths(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "startPositionWithoutWindowsDrive"
  } ],
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilterInitializer:initFilter(org.apache.hadoop.http.FilterContainer,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.find.BaseExpression:setOptions(org.apache.hadoop.fs.shell.find.FindOptions)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:setMeanStatistic(java.lang.String,org.apache.hadoop.fs.statistics.MeanStatistic)" : [ ],
  "org.apache.hadoop.crypto.key.CachingKeyProvider:rollNewVersion(java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getGroupsSet()" : [ {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "getGroupsSet"
  } ],
  "org.apache.hadoop.fs.DelegateToFileSystem:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.DataChecksum:verifyChunkedSums(java.nio.ByteBuffer,java.nio.ByteBuffer,java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.SecureIOUtils:createForWrite(java.io.File,int)" : [ ],
  "org.apache.hadoop.io.DataInputBuffer:<init>()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:decode(java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:processErasures(int[])" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:processRetryInfo()" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:<init>(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.util.Shell:getReadlinkCommand(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:removeNextElement()" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommandWithMultiThread:hasMoreThanOneSourcePaths(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "pathToFile",
    "targetMethod" : "fullyDelete"
  } ],
  "org.apache.hadoop.net.NetworkTopology:getDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.DummyErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.shell.Delete$Rm:moveToTrash(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators:cleanupRemoteIterator(org.apache.hadoop.fs.RemoteIterator)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:getKeyVersions(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.service.ServiceStateModel:checkStateTransition(java.lang.String,org.apache.hadoop.service.Service$STATE,org.apache.hadoop.service.Service$STATE)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:getZKAcls(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "resolveConfIndirection"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "parseACLs"
  } ],
  "org.apache.hadoop.ipc.RPC$Server:getSupportedProtocolVersions(org.apache.hadoop.ipc.RPC$RpcKind,java.lang.String)" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:getNextAncestorName(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:updateRenewalTime(long)" : [ ],
  "org.apache.hadoop.metrics2.AbstractMetric:<init>(org.apache.hadoop.metrics2.MetricsInfo)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableCounterLong:<init>(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getPermission()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "getFileHarStatus"
  }, {
    "sourceMethod" : "getPartName",
    "targetMethod" : "getPartFileStatus"
  }, {
    "sourceMethod" : "getPartFileStatus",
    "targetMethod" : "getFileBlockLocations"
  }, {
    "sourceMethod" : "getStartIndex",
    "targetMethod" : "fixBlockLocations"
  }, {
    "sourceMethod" : "getFileBlockLocations",
    "targetMethod" : "fixBlockLocations"
  } ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server:registerForDeferredResponse()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:compareTo(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_reset()" : [ ],
  "org.apache.hadoop.fs.shell.CommandFormat:<init>(java.lang.String,int,int,java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager$ZKSecretManager:createIdentifier()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:init(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:checkRpcHeaders(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto)" : [ ],
  "org.apache.hadoop.io.WritableComparator:get(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.conf.ConfigurationWithLogging:get(java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "redact"
  } ],
  "org.apache.hadoop.io.MapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:rollNewVersion(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileUtil:copy(java.io.File,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:countNumOfAvailableNodes(java.lang.String,java.util.Collection)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "getNode"
  } ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:<init>(org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder,org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkPathExists(java.nio.file.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileUtil:write(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,byte[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.BufferedFSInputStream:readVectored(java.util.List,java.util.function.IntFunction)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:unreference(boolean)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createServiceURL(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.Shell:checkIsBashSupported()" : [ ],
  "org.apache.hadoop.fs.FilterFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Client$IpcStreams:<init>(java.net.Socket,int)" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodecFactory:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:joinElectionInternal()" : [ ],
  "org.apache.hadoop.io.retry.RetryProxy:create(java.lang.Class,java.lang.Object,java.util.Map)" : [ ],
  "org.apache.hadoop.service.launcher.InterruptEscalator:lookup(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(java.lang.String,java.lang.String,float)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "newGauge"
  } ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault$Emptier:ceiling(long,long)" : [ ],
  "org.apache.hadoop.ipc.ProtocolSignature:getProtocolSignature(int,long,java.lang.Class)" : [ ],
  "org.apache.hadoop.io.MapWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$WrappedJavaIterator:close()" : [ ],
  "org.apache.hadoop.security.SaslPropertiesResolver:getClientProperties(java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.fs.FilterFs:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.PathExistsException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MethodMetric:newImpl(org.apache.hadoop.metrics2.annotation.Metric$Type)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode:hashCode()" : [ ],
  "org.apache.hadoop.fs.FileSystem:open(org.apache.hadoop.fs.PathHandle)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "open"
  } ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_load(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getLocationNear(long)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getWorkFactor(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server:getQueueClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "convertQueueClass"
  } ],
  "org.apache.hadoop.util.GenericOptionsParser:validateFiles(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue$MetricsProxy:getInstance(java.lang.String)" : [ ],
  "org.apache.hadoop.io.BytesWritable:set(org.apache.hadoop.io.BytesWritable)" : [ ],
  "org.apache.hadoop.io.BytesWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.ipc.Server$Handler:requeueCall(org.apache.hadoop.ipc.Server$Call)" : [ {
    "sourceMethod" : "getRpcStatusProto",
    "targetMethod" : "doResponse"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkValid(boolean,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRates:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.crypto.key.CachingKeyProvider:<init>(org.apache.hadoop.crypto.key.KeyProvider,long,long)" : [ ],
  "org.apache.hadoop.io.DefaultStringifier:fromString(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "access"
  } ],
  "org.apache.hadoop.fs.Globber:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter,boolean)" : [ ],
  "org.apache.hadoop.util.functional.FunctionalIO:toUncheckedIOExceptionSupplier(org.apache.hadoop.util.functional.CallableRaisingIOE)" : [ ],
  "org.apache.hadoop.fs.Path:getFileSystem(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_maximums(java.io.Serializable)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:removeAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue$Processor:tryStart()" : [ ],
  "org.apache.hadoop.io.WritableUtils:readVInt(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:clone()" : [ ],
  "org.apache.hadoop.fs.FileSystem$DirListingIterator:next()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getTotalCallVolume()" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:clearNameMaps()" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:getFileSystem()" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:connectToZooKeeper()" : [ ],
  "org.apache.hadoop.io.DefaultStringifier:loadArray(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getHomeDirectory(com.jcraft.jsch.ChannelSftp)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:cancelDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,org.apache.hadoop.security.token.Token,java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getValue(byte[])" : [ ],
  "org.apache.hadoop.ipc.RpcClientUtil:getProtocolMetaInfoProxy(java.lang.Object,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InnerCache:closeAll()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:upperBound(org.apache.hadoop.io.file.tfile.RawComparable)" : [ ],
  "org.apache.hadoop.fs.FileContext:makeQualified(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getWorkingDirectory",
    "targetMethod" : "makeQualified"
  }, {
    "sourceMethod" : "getUri",
    "targetMethod" : "makeQualified"
  } ],
  "org.apache.hadoop.ipc.Server$Connection:createSaslServer(org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : [ {
    "sourceMethod" : "getServerProperties",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.fs.shell.Head:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.io.compress.SplitCompressionInputStream:<init>(java.io.InputStream,long,long)" : [ ],
  "org.apache.hadoop.metrics2.lib.MethodMetric$2:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.util.Shell:getQualifiedBin(java.lang.String)" : [ {
    "sourceMethod" : "getHadoopHomeDir",
    "targetMethod" : "getQualifiedBinInner"
  } ],
  "org.apache.hadoop.fs.AbstractFileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.conf.Configuration:loadProps(java.util.Properties,int,boolean)" : [ ],
  "org.apache.hadoop.security.KDiag:validateHadoopTokenFiles(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.CallReturn:<init>(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:hasCapability(java.lang.String)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:allowVerboseDump()" : [ ],
  "org.apache.hadoop.fs.FsServerDefaults:<init>(long,int,int,short,int,boolean,long,org.apache.hadoop.util.DataChecksum$Type,java.lang.String,byte)" : [ ],
  "org.apache.hadoop.conf.Configuration:getStorageSize(java.lang.String,java.lang.String,org.apache.hadoop.conf.StorageUnit)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "parse"
  }, {
    "sourceMethod" : "getValue",
    "targetMethod" : "convertStorageUnit"
  }, {
    "sourceMethod" : "getUnit",
    "targetMethod" : "convertStorageUnit"
  } ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:addTokenForOwnerStats(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.VLongWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndex:addEntry(org.apache.hadoop.io.file.tfile.BCFile$MetaIndexEntry)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:processSaslToken(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto)" : [ ],
  "org.apache.hadoop.util.functional.TaskPool$Builder:resetStatisticsContext()" : [ ],
  "org.apache.hadoop.http.HttpServer2:addServlet(java.lang.String,java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:decodeToken(org.apache.hadoop.security.token.Token,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:init(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeLong:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.ipc.Server:setLogSlowRPCThresholdTime(long)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getUri()" : [ ],
  "org.apache.hadoop.fs.ftp.FTPInputStream:close()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues5(int,int)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.random.OsSecureRandom:nextBytes(byte[])" : [ ],
  "org.apache.hadoop.io.VIntWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.FileContext:getHomeDirectory()" : [ ],
  "org.apache.hadoop.util.concurrent.AsyncGetFuture:isDone()" : [ ],
  "org.apache.hadoop.io.Text:writeString(java.io.DataOutput,java.lang.String,int)" : [ ],
  "org.apache.hadoop.metrics2.util.Metrics2Util$NameValuePair:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FilterFs:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getPathInHar(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "compareTo"
  } ],
  "org.apache.hadoop.io.SequenceFile$Writer:hsync()" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_load(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:createConfiguration()" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkMerge(org.apache.hadoop.conf.Configuration,java.net.URI[])" : [ {
    "sourceMethod" : "getDefaultMountTableName",
    "targetMethod" : "addLinkMerge"
  } ],
  "org.apache.hadoop.fs.shell.FsUsage$TableBuilder:isEmpty()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getTokens()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker:call(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.io.Writable,long)" : [ ],
  "org.apache.hadoop.net.DNS:getHosts(java.lang.String)" : [ ],
  "org.apache.hadoop.io.SortedMapWritable:<init>()" : [ ],
  "org.apache.hadoop.fs.TrashPolicy:getInstance(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:clone()" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor$SnappyDirectDecompressor:reset()" : [ ],
  "org.apache.hadoop.security.KDiag:validateSasl(java.lang.String)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "println"
  } ],
  "org.apache.hadoop.util.RunJar:unJarAndSave(java.io.InputStream,java.io.File,java.lang.String,java.util.regex.Pattern)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getCached(int)" : [ ],
  "org.apache.hadoop.fs.Path:isAbsoluteAndSchemeAuthorityNull()" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell$Print:execute()" : [ ],
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter:doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" : [ ],
  "org.apache.hadoop.io.compress.SnappyCodec:createDecompressor()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getOwner()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.conf.Configuration:setDouble(java.lang.String,double)" : [ ],
  "org.apache.hadoop.security.SaslRpcServer:getIdentifier(java.lang.String,org.apache.hadoop.security.token.SecretManager)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getCpuFrequency()" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:pathToFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.service.launcher.InterruptEscalator$ServiceForcedShutdown:<init>(org.apache.hadoop.service.Service,int)" : [ ],
  "org.apache.hadoop.ha.ShellCommandFencer:tryFence(org.apache.hadoop.ha.HAServiceTarget,java.lang.String)" : [ {
    "sourceMethod" : "getTransitionTargetHAStatus",
    "targetMethod" : "parseArgs"
  }, {
    "sourceMethod" : "parseArgs",
    "targetMethod" : "abbreviate"
  }, {
    "sourceMethod" : "getTransitionTargetHAStatus",
    "targetMethod" : "abbreviate"
  } ],
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:getInfo(org.apache.hadoop.metrics2.annotation.Metric,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderFactory:getProviders(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:gauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.http.HttpServer2:toString()" : [ ],
  "org.apache.hadoop.io.serializer.JavaSerialization$JavaSerializationDeserializer:deserialize(java.lang.Object)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newRatesWithAggregation(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:getBytesRead()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getDefaultBlockSize()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:<init>()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:skip(long)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:getLocationByRecordNum(long)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getAvailableVirtualMemorySize()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getBlockContainsKey(org.apache.hadoop.io.file.tfile.RawComparable,boolean)" : [ ],
  "org.apache.hadoop.util.VersionInfo:getRevision()" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,int,short,long,boolean,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.io.SequenceFile$Metadata)" : [ {
    "sourceMethod" : "repFac",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "getFileContext",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "blockSize",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "bufferSize",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$2:createDecompressionStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:constructOldPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:gracefulFailoverThroughZKFCs(org.apache.hadoop.ha.HAServiceTarget)" : [ {
    "sourceMethod" : "getRpcTimeoutToNewActive",
    "targetMethod" : "getZKFCProxy"
  } ],
  "org.apache.hadoop.conf.Configuration:asXmlDocument(java.lang.String,org.apache.hadoop.conf.ConfigRedactor)" : [ ],
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String[],javax.net.ssl.SSLSocket)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getConf(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getCurrentKey(java.lang.String)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.ha.HAServiceProtocolHelper:transitionToObserver(org.apache.hadoop.ha.HAServiceProtocol,org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : [ ],
  "org.apache.hadoop.util.bloom.Key:<init>(byte[])" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:isSymlink()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newCounter(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:<init>(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:listStatusIterator(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "listStatusIterator"
  } ],
  "org.apache.hadoop.fs.ChecksumFs:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.GlobalStorageStatistics:put(java.lang.String,org.apache.hadoop.fs.GlobalStorageStatistics$StorageStatisticsProvider)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:createScannerByByteRange(long,long)" : [ ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:createCheckpoint(org.apache.hadoop.fs.Path,java.util.Date)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.crypto.OpensslCipher:doFinal(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getEnclosingRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:read()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:getNumParityUnits()" : [ ],
  "org.apache.hadoop.fs.shell.Command:<init>()" : [ ],
  "org.apache.hadoop.fs.FileContext:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean)" : [ ],
  "org.apache.hadoop.util.VersionInfo:getVersion()" : [ ],
  "org.apache.hadoop.ha.HealthMonitor:createProxy()" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort:doFence(com.jcraft.jsch.Session,java.net.InetSocketAddress)" : [ ],
  "org.apache.hadoop.fs.shell.Delete$Rm:canBeSafelyDeleted(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "getSetPermissionCommand",
    "targetMethod" : "execCommand"
  }, {
    "sourceMethod" : "makeShellPath",
    "targetMethod" : "getSetPermissionCommand"
  }, {
    "sourceMethod" : "toShort",
    "targetMethod" : "getSetPermissionCommand"
  }, {
    "sourceMethod" : "pathToFile",
    "targetMethod" : "makeShellPath"
  }, {
    "sourceMethod" : "toShort",
    "targetMethod" : "chmod"
  } ],
  "org.apache.hadoop.metrics2.sink.PrometheusMetricsSink:getMetricKey(java.lang.String,org.apache.hadoop.metrics2.AbstractMetric,java.util.List)" : [ {
    "sourceMethod" : "name",
    "targetMethod" : "parseTopMetricsTags"
  } ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBzip2DecompressorType(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile:getFSInputBufferSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBlockSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.DiskChecker:checkDirInternal(org.apache.hadoop.fs.LocalFileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "pathToFile",
    "targetMethod" : "checkAccessByFileMethods"
  } ],
  "org.apache.hadoop.ipc.Server$Listener:doStop()" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:processTokenAddOrUpdate(byte[])" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:toString()" : [ ],
  "org.apache.hadoop.util.JsonSerialization:save(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.Object,boolean)" : [ {
    "sourceMethod" : "create",
    "targetMethod" : "writeJsonAsBytes"
  } ],
  "org.apache.hadoop.fs.FilterFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getNumInProcessHandler()" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "getFileStatus"
  } ],
  "org.apache.hadoop.fs.HarFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedIO:bulkDelete_pageSize(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],java.lang.String[],long,long,boolean)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Invocation:<init>(java.lang.reflect.Method,java.lang.Object[])" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseDecayFactor(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.Command:processNonexistentPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.io.compress.lz4.Lz4Compressor:compress(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.IdentityHashStore:realloc(int)" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:toOctal()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndex:setFirstKey(byte[],int,int)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:getPriorityLevel(org.apache.hadoop.ipc.Schedulable)" : [ {
    "sourceMethod" : "getIdentity",
    "targetMethod" : "cachedOrComputedPriorityLevel"
  } ],
  "org.apache.hadoop.fs.DelegateToFileSystem:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_retrieve(java.lang.Object)" : [ {
    "sourceMethod" : "retrieveIOStatistics",
    "targetMethod" : "iostatisticsSnapshot_create"
  } ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "getFileStatus"
  } ],
  "org.apache.hadoop.crypto.key.KeyProviderExtension:getCurrentKey(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:isCacheSpaceAvailable(long,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.LocalDirAllocator)" : [ ],
  "org.apache.hadoop.io.serializer.JavaSerializationComparator:compare(java.lang.Object,java.lang.Object)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:readRecordLength()" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:toString()" : [ ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touchz:touchz(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:getPathAsString()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.SequenceFile:getBufferSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileSystem:createFileSystem(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getFileSystemClass",
    "targetMethod" : "newInstance"
  }, {
    "sourceMethod" : "newInstance",
    "targetMethod" : "cleanupWithLogger"
  } ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:<init>(int,int,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:getLength()" : [ ],
  "org.apache.hadoop.fs.shell.PathData:uriToString(java.net.URI,boolean)" : [ ],
  "org.apache.hadoop.fs.FileSystem$FSDataInputStreamBuilder:build()" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "withBufferSize"
  }, {
    "sourceMethod" : "getStatus",
    "targetMethod" : "withStatus"
  }, {
    "sourceMethod" : "withStatus",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "getInt",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withOptionalKeys",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withOptions",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withBufferSize",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withMandatoryKeys",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "getStatus",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withStatus",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "getInt",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withOptionalKeys",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withOptions",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withBufferSize",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "withMandatoryKeys",
    "targetMethod" : "openFileWithOptions"
  }, {
    "sourceMethod" : "getStatus",
    "targetMethod" : "openFileWithOptions"
  } ],
  "org.apache.hadoop.io.compress.ZStandardCodec:getBufferSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,long,long,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:adjustPriorityQueue(org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor)" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:removeStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:<init>(org.apache.hadoop.fs.AbstractFileSystem)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:cloneStatus()" : [ ],
  "org.apache.hadoop.security.token.Token:encodeToUrlString()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:meanStatistics()" : [ ],
  "org.apache.hadoop.fs.StorageType:getTypesSupportingQuota()" : [ ],
  "org.apache.hadoop.util.Shell$ShellTimeoutTimerTask:<init>(org.apache.hadoop.util.Shell)" : [ ],
  "org.apache.hadoop.io.AbstractMapWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:parseOpts(java.lang.String,org.apache.commons.cli.Options,java.lang.String[])" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:isAvailable()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  }, {
    "sourceMethod" : "getChrootedPath",
    "targetMethod" : "fixFileStatus"
  }, {
    "sourceMethod" : "resolve",
    "targetMethod" : "getChrootedPath"
  }, {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "getChrootedPath"
  } ],
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod$1:<init>(java.lang.reflect.Method,java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:writeFileHeader()" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.ha.FailoverController:getGracefulFenceTimeout(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "hasPathCapability"
  } ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:getBytesWritten()" : [ ],
  "org.apache.hadoop.fs.FileUtil:unTar(java.io.File,java.io.File)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:openFile(org.apache.hadoop.fs.PathHandle)" : [ ],
  "org.apache.hadoop.fs.shell.Count:processOptions(java.util.LinkedList)" : [ {
    "sourceMethod" : "getOptValue",
    "targetMethod" : "getAndCheckStorageTypes"
  } ],
  "org.apache.hadoop.fs.VectoredReadUtils:validateAndSortRanges(java.util.List,java.util.Optional)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getQuotaUsage(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawEncoder:preferDirectBuffer()" : [ ],
  "org.apache.hadoop.tools.TableListing$Builder:addField(java.lang.String,org.apache.hadoop.tools.TableListing$Justification,boolean)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$CloseRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator,java.io.Closeable)" : [ ],
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getRequestURL()" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:<init>()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkGreaterOrEqual(long,java.lang.String,long,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.RetryCache:waitForCompletion(org.apache.hadoop.ipc.RetryCache,byte[],int)" : [ {
    "sourceMethod" : "newEntry",
    "targetMethod" : "waitForCompletion"
  } ],
  "org.apache.hadoop.security.authorize.AccessControlList:removeGroup(java.lang.String)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:quitElection(boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:prepareAppendValue(int)" : [ ],
  "org.apache.hadoop.fs.Globber:glob()" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:monitorHealth()" : [ ],
  "org.apache.hadoop.fs.VectoredReadUtils:sortRanges(java.util.List)" : [ ],
  "org.apache.hadoop.fs.FilterFs:truncate(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touchz:processNonexistentPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:flushBuffer()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setGauge(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.StorageType:parseStorageType(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$AppendToFile:processArguments(java.util.LinkedList)" : [ {
    "sourceMethod" : "append",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "append",
    "targetMethod" : "copyBytes"
  } ],
  "org.apache.hadoop.util.LimitInputStream:<init>(java.io.InputStream,long)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkLessOrEqual(long,java.lang.String,long,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme$ChildFsGetter:getNewInstance(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:removeStoredToken(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.ipc.Client:call(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable,org.apache.hadoop.ipc.Client$ConnectionId,java.util.concurrent.atomic.AtomicBoolean)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getLoginUser()" : [ ],
  "org.apache.hadoop.fs.BufferedFSInputStream:read(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "resolvePath"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrReceivedBytes(int)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:setPriorityLevel(org.apache.hadoop.security.UserGroupInformation,int)" : [ {
    "sourceMethod" : "newSchedulable",
    "targetMethod" : "getIdentity"
  } ],
  "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec:calculateIV(byte[],long,byte[])" : [ {
    "sourceMethod" : "getAlgorithmBlockSize",
    "targetMethod" : "calculateIV"
  } ],
  "org.apache.hadoop.fs.shell.find.Name$Iname:<init>()" : [ ],
  "org.apache.hadoop.io.OutputBuffer:getLength()" : [ ],
  "org.apache.hadoop.fs.FilterFs:<init>(org.apache.hadoop.fs.AbstractFileSystem)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecodingStep:<init>(org.apache.hadoop.io.erasurecode.ECBlock[],int[],org.apache.hadoop.io.erasurecode.ECBlock[],org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder,org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:<init>(int,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable:<init>(java.lang.Class)" : [ ],
  "org.apache.hadoop.util.GenericsUtil:toArray(java.util.List)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "toArray"
  } ],
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping:cacheGroupsRefresh()" : [ {
    "sourceMethod" : "getNetgroupNames",
    "targetMethod" : "cacheGroupsAdd"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getPermissions(org.apache.commons.net.ftp.FTPFile)" : [ ],
  "org.apache.hadoop.fs.FSInputChecker:read()" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.security.token.delegation.DelegationKey:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:<init>(int,org.apache.hadoop.crypto.CipherSuite)" : [ ],
  "org.apache.hadoop.util.StringUtils:getFormattedTimeWithDiff(java.lang.String,long,long)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:create(java.lang.String,java.util.List)" : [ ],
  "org.apache.hadoop.fs.FileSystem:isDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:appendRaw(byte[],int,int,org.apache.hadoop.io.SequenceFile$ValueBytes)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:checkKey(org.apache.hadoop.io.WritableComparable)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "reset"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "reset"
  } ],
  "org.apache.hadoop.io.Text:getTextLength()" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:getCurrentTrashDir(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:getNode(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:encodeData(byte[],java.nio.ByteBuffer[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockManager:release(org.apache.hadoop.fs.impl.prefetch.BufferData)" : [ ],
  "org.apache.hadoop.tracing.Tracer$Builder:build()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:hasCapability(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration$Parser:handleStartElement()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:setPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getFsStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.LocatedFileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.BlockLocation[])" : [ ],
  "org.apache.hadoop.fs.FsUrlStreamHandlerFactory:createURLStreamHandler(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:getDeprecatedKeyInfo(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getFileSystemClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter:getProxyuserConfiguration(javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:sourceName(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:hsync()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getContentSummary(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.ipc.Server$ConnectionManager:register(java.nio.channels.SocketChannel,int,boolean)" : [ {
    "sourceMethod" : "now",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getKeyVersion(java.lang.String)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:readBlock(org.apache.hadoop.fs.impl.prefetch.BufferData,boolean,org.apache.hadoop.fs.impl.prefetch.BufferData$State[])" : [ {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "getCached"
  }, {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "getRead"
  }, {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "prefetch"
  }, {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "getStartOffset"
  }, {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "getSize"
  } ],
  "org.apache.hadoop.fs.FilterFileSystem:openFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.StorageUnit$6:getDefault(double)" : [ ],
  "org.apache.hadoop.security.KDiag$KerberosDiagsFailure:<init>(java.lang.String,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:writeJson(java.lang.Object,java.io.OutputStream)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.fs.FileSystem$Statistics)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler:getAsyncReturn()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:init(javax.servlet.FilterConfig)" : [ {
    "sourceMethod" : "getProxyuserConfiguration",
    "targetMethod" : "refreshSuperUserGroupsConfiguration"
  } ],
  "org.apache.hadoop.fs.ChecksumFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "rename"
  }, {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "rename"
  } ],
  "org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB:refreshUserToGroupsMappings()" : [ ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:decompress(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.StopWatch:<init>()" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO:getCreateForWriteFileOutputStream(java.io.File,int)" : [ ],
  "org.apache.hadoop.security.alias.LocalJavaKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.RetryUtils$WrapperRetryPolicy:hashCode()" : [ ],
  "org.apache.hadoop.fs.FileSystem:copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getLocal",
    "targetMethod" : "copy"
  } ],
  "org.apache.hadoop.io.ArrayFile$Writer:append(org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.io.VLongWritable:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:trackInvocation(org.apache.hadoop.util.functional.InvocationRaisingIOE,java.lang.String,org.apache.hadoop.metrics2.lib.MutableRate)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$TicketCacheRenewalRunnable:relogin()" : [ ],
  "org.apache.hadoop.fs.Options$CreateOpts:repFac(short)" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:saslConnect(org.apache.hadoop.ipc.Client$IpcStreams)" : [ {
    "sourceMethod" : "readResponse",
    "targetMethod" : "wrap"
  }, {
    "sourceMethod" : "getValue",
    "targetMethod" : "saslEvaluateToken"
  }, {
    "sourceMethod" : "saslEvaluateToken",
    "targetMethod" : "createSaslReply"
  }, {
    "sourceMethod" : "getValue",
    "targetMethod" : "saslEvaluateToken"
  } ],
  "org.apache.hadoop.ipc.Server:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.String,java.net.InetAddress)" : [ {
    "sourceMethod" : "getConf",
    "targetMethod" : "getProtocolClass"
  }, {
    "sourceMethod" : "getConf",
    "targetMethod" : "authorize"
  } ],
  "org.apache.hadoop.util.SysInfoWindows:getCpuUsagePercentage()" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:getNodeGroup(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:add(java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.UTF8:skip(java.io.DataInput)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:toString()" : [ ],
  "org.apache.hadoop.util.LineReader:<init>(java.io.InputStream,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:loadFullUserMap()" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:initHM()" : [ ],
  "org.apache.hadoop.fs.FileContext:createMultipartUploader(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:<init>(org.apache.hadoop.fs.impl.prefetch.BlockManagerParameters)" : [ ],
  "org.apache.hadoop.security.KDiag:warn(java.lang.String,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$StreamOption:<init>(org.apache.hadoop.fs.FSDataOutputStream)" : [ ],
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:diskCheckFailed()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:shutdown()" : [ ],
  "org.apache.hadoop.security.SaslRpcClient$WrappedInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.ipc.Server:isServerFailOverEnabledByQueue()" : [ ],
  "org.apache.hadoop.ipc.Server:buildNegotiateResponse(java.util.List)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:fatalError(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderDelegationTokenExtension:createKeyProviderDelegationTokenExtension(org.apache.hadoop.crypto.key.KeyProvider)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementReadOps(int)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:write(byte[],int,int)" : [ {
    "sourceMethod" : "remainingCapacity",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getPath()" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:permission(org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:getDirContext()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getCallVolumeSummary()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:close()" : [ ],
  "org.apache.hadoop.fs.ContentSummary:toString(boolean,boolean,boolean,boolean,java.util.List)" : [ ],
  "org.apache.hadoop.fs.FileSystem:resolvePath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$AppendToFile:expandArgument(java.lang.String)" : [ ],
  "org.apache.hadoop.util.LineReader:readLine(org.apache.hadoop.io.Text,int,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.io.SequenceFile$Metadata)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:startLocalOutput(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.XMLUtils:setOptionalSecureTransformerAttributes(javax.xml.transform.TransformerFactory)" : [ ],
  "org.apache.hadoop.ipc.RpcClientUtil:convertProtocolSignatureProtos(java.util.List)" : [ ],
  "org.apache.hadoop.crypto.random.OpensslSecureRandom:next(int)" : [ ],
  "org.apache.hadoop.fs.FSDataInputStream:readVectored(java.util.List,java.util.function.IntFunction)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getUsed()" : [ ],
  "org.apache.hadoop.fs.Globber:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter,boolean)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:<init>(int)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:createCheckpoint()" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:finish()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState:convertToByteArrayState()" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec$GzipZlibDecompressor:<init>()" : [ ],
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:create(org.apache.hadoop.ipc.RetryCache)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.XORErasureEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.FileContext:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:<init>(org.apache.hadoop.fs.viewfs.InodeTree$INodeDir,long,org.apache.hadoop.security.UserGroupInformation,java.net.URI,org.apache.hadoop.fs.viewfs.InodeTree,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:archivePath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:remove(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.ReadaheadPool$ReadaheadRequestImpl:run()" : [ ],
  "org.apache.hadoop.fs.FilterFs:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:processPathArgument(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "setTargetPath"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "setTargetPath"
  } ],
  "org.apache.hadoop.io.compress.BZip2Codec:getCompressorType()" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:<init>()" : [ ],
  "org.apache.hadoop.fs.permission.AclEntry:parseAclEntry(java.lang.String,boolean)" : [ {
    "sourceMethod" : "getFsAction",
    "targetMethod" : "setPermission"
  } ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getTokenInfoFromZK(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier,boolean)" : [ {
    "sourceMethod" : "getSequenceNumber",
    "targetMethod" : "getTokenInfoFromZK"
  }, {
    "sourceMethod" : "getNodePath",
    "targetMethod" : "getTokenInfoFromZK"
  } ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:gauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.io.WritableComparator:compare(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:mainSort()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getUriPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.EnumSetWritable:readFields(java.io.DataInput)" : [ {
    "sourceMethod" : "readString",
    "targetMethod" : "loadClass"
  } ],
  "org.apache.hadoop.ipc.RPC:setProtocolEngine(org.apache.hadoop.conf.Configuration,java.lang.Class,java.lang.Class)" : [ ],
  "org.apache.hadoop.io.WritableUtils:clone(org.apache.hadoop.io.Writable,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "newInstance",
    "targetMethod" : "copy"
  } ],
  "org.apache.hadoop.fs.FSInputChecker:readChecksumChunk(byte[],int,int)" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$InvalidateCacheCommand:execute()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseDecayPeriodMillis(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:addInternal(org.apache.hadoop.ipc.Schedulable,boolean)" : [ ],
  "org.apache.hadoop.security.KDiag:main(java.lang.String[])" : [ {
    "sourceMethod" : "exec",
    "targetMethod" : "terminate"
  } ],
  "org.apache.hadoop.fs.FilterFs:getUriPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:mkdirsWithOptionalPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "pathToFile"
  } ],
  "org.apache.hadoop.io.erasurecode.ErasureCoderOptions:<init>(int,int)" : [ ],
  "org.apache.hadoop.io.MapFile:fix(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,boolean,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "getPosition",
    "targetMethod" : "set"
  }, {
    "sourceMethod" : "newInstance",
    "targetMethod" : "append"
  }, {
    "sourceMethod" : "newInstance",
    "targetMethod" : "next"
  } ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:newSink(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.impl.MetricsConfig)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:openFile(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus,java.lang.String)" : [ {
    "sourceMethod" : "instance",
    "targetMethod" : "openFileOnInstance"
  } ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:measureDurationOfInvocation(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String,org.apache.hadoop.util.functional.InvocationRaisingIOE)" : [ ],
  "org.apache.hadoop.util.OperationDuration:toString()" : [ ],
  "org.apache.hadoop.ipc.Server:updateDeferredMetrics(java.lang.String,long)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleStat:copyTo(org.apache.hadoop.metrics2.util.SampleStat)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:transitionToObserver(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ha.proto.HAServiceProtocolProtos$TransitionToObserverRequestProto)" : [ ],
  "org.apache.hadoop.util.Shell:getCheckProcessIsAliveCommand(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getKeysMetadata(java.lang.String[])" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getMountPoints()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:<init>(java.net.URI[],org.apache.hadoop.conf.Configuration,int,java.util.EnumSet,org.apache.hadoop.fs.viewfs.FsGetter)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getSymlink()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementBytesReadByDistance(int,long)" : [ ],
  "org.apache.hadoop.fs.shell.find.BaseExpression:getFileStatus(org.apache.hadoop.fs.shell.PathData,int)" : [ {
    "sourceMethod" : "getSymlink",
    "targetMethod" : "resolvePath"
  } ],
  "org.apache.hadoop.io.file.tfile.BoundedRangeFileInputStream:read(byte[])" : [ ],
  "org.apache.hadoop.fs.shell.Truncate:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:decodeFileName(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:flush()" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:getOperatingSystemPageSize()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getContentSummary(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "getPathWithoutSchemeAndAuthority"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.util.Classpath:terminate(int,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.JceAesCtrCryptoCodec:createEncryptor()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:createRemoteUser(java.lang.String,org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : [ ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:<init>()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addCost(java.lang.Object,long)" : [ ],
  "org.apache.hadoop.ipc.CallerContext:toString()" : [ ],
  "org.apache.hadoop.fs.shell.Tail:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.security.token.Token:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:updateDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:createConnection()" : [ ],
  "org.apache.hadoop.security.SecurityUtil:getServerPrincipal(java.lang.String,java.net.InetAddress)" : [ {
    "sourceMethod" : "getComponents",
    "targetMethod" : "replacePattern"
  } ],
  "org.apache.hadoop.io.SequenceFile$Reader:getPosition()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getErasedIndexes(org.apache.hadoop.io.erasurecode.ECBlock[])" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:addCounter(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:<init>(java.util.concurrent.ExecutorService,int,boolean)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:sync(long)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getAverageResponseTime()" : [ ],
  "org.apache.hadoop.fs.LocatedFileStatus:<init>()" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:byteBufferPositionedReadable_readFully(java.io.InputStream,long,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:appendFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.KDiag:println()" : [ ],
  "org.apache.hadoop.fs.statistics.DurationTrackerFactory:trackDuration(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecodingStep:performCoding(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:propagateOptions(org.apache.hadoop.fs.FSBuilder,org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryUtils:getDefaultRetryPolicy(org.apache.hadoop.conf.Configuration,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.FileContext:getXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:get(int)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues4()" : [ ],
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:<init>(java.util.concurrent.ExecutorService,int,boolean,org.apache.hadoop.fs.statistics.DurationTrackerFactory)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher:close()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:add(java.lang.Object,java.lang.reflect.Method)" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.io.compress.lz4.Lz4Compressor:<init>(int)" : [ ],
  "org.apache.hadoop.util.DiskChecker:checkDirWithDiskIo(java.io.File)" : [ ],
  "org.apache.hadoop.fs.FileSystem:rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : [ ],
  "org.apache.hadoop.ipc.RetryCache:addCacheEntry(byte[],int)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:isTracked(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression:getCompressionAlgorithmByName(java.lang.String)" : [ ],
  "org.apache.hadoop.io.ObjectWritable$NullInstance:readFields(java.io.DataInput)" : [ {
    "sourceMethod" : "readString",
    "targetMethod" : "getClassByName"
  } ],
  "org.apache.hadoop.security.token.DtFileOperations:printTokenFile(java.io.File,org.apache.hadoop.io.Text,org.apache.hadoop.conf.Configuration,java.io.PrintStream)" : [ {
    "sourceMethod" : "readTokenStorageFile",
    "targetMethod" : "printCredentials"
  } ],
  "org.apache.hadoop.ha.PowerShellFencer:buildPSScript(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:createToken(org.apache.hadoop.security.UserGroupInformation,java.lang.String)" : [ ],
  "org.apache.hadoop.io.Text:hashCode()" : [ ],
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:addReadFileLatency(long)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$ReplicationOption:<init>(int)" : [ ],
  "org.apache.hadoop.net.TableMapping$RawTableMapping:reloadCachedMappings()" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:getRootFallbackLink()" : [ ],
  "org.apache.hadoop.ipc.Client:<init>(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.Path:checkNotSchemeWithRelative()" : [ ],
  "org.apache.hadoop.crypto.key.KeyShell$Command:warnIfTransientProvider()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:analyze(java.lang.StringBuilder)" : [ {
    "sourceMethod" : "getIntList",
    "targetMethod" : "append"
  }, {
    "sourceMethod" : "getIntList",
    "targetMethod" : "append"
  } ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicLongGauge(java.lang.String,java.util.concurrent.atomic.AtomicLong)" : [ ],
  "org.apache.hadoop.ha.HealthMonitor:isHealthCheckFailedException(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.util.ReflectionUtils:newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration,java.lang.Class[],java.lang.Object[])" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureDecoder:release()" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:loadNativeZLib()" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_maximums(java.io.Serializable)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:initBloomFilter(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:locateKeystore()" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "locatePassword"
  } ],
  "org.apache.hadoop.metrics2.lib.Interns:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.ha.ShellCommandFencer:addTargetInfoAsEnvVars(org.apache.hadoop.ha.HAServiceTarget,java.util.Map)" : [ ],
  "org.apache.hadoop.util.IntrusiveCollection:remove(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:spawnAutoRenewalThreadForKeytab()" : [ {
    "sourceMethod" : "getTGT",
    "targetMethod" : "getRefreshTime"
  }, {
    "sourceMethod" : "getUserName",
    "targetMethod" : "executeAutoRenewalTask"
  } ],
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:addWriteFileLatency(long)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher:kick()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getPrefetched(int)" : [ ],
  "org.apache.hadoop.ha.FailoverController:failover(org.apache.hadoop.ha.HAServiceTarget,org.apache.hadoop.ha.HAServiceTarget,boolean,boolean)" : [ {
    "sourceMethod" : "createReqInfo",
    "targetMethod" : "transitionToActive"
  }, {
    "sourceMethod" : "getProxy",
    "targetMethod" : "transitionToActive"
  } ],
  "org.apache.hadoop.io.WritableComparator:compareBytes(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:openFileOnInstance(org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus,java.lang.String)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "open"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "fileSystem_openFile"
  } ],
  "org.apache.hadoop.util.Sets:newHashSet(java.lang.Object[])" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:doGracefulFailover()" : [ {
    "sourceMethod" : "getGracefulFenceTimeout",
    "targetMethod" : "cedeRemoteActive"
  }, {
    "sourceMethod" : "getGracefulFenceTimeout",
    "targetMethod" : "cedeRemoteActive"
  } ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean,int)" : [ {
    "sourceMethod" : "getDefaultReplication",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getDefaultBlockSize",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:isWithinCurrentBuffer(long)" : [ ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,double)" : [ ],
  "org.apache.hadoop.fs.shell.Display$Cat:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "modifyAclEntries"
  } ],
  "org.apache.hadoop.ipc.RpcClientException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getDeferredRpcProcessingSampleCount()" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator:getLocalPathForWrite(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:toString()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:logoutUserFromKeytab()" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "setUser"
  }, {
    "sourceMethod" : "getKeytab",
    "targetMethod" : "setKeytabFile"
  } ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipCompressor:init(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileUtil:execSetPermission(java.io.File,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "getSetPermissionCommand",
    "targetMethod" : "execCommand"
  }, {
    "sourceMethod" : "toShort",
    "targetMethod" : "chmod"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "modifyAclEntries"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:removeAcl(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "removeAcl"
  } ],
  "org.apache.hadoop.ipc.Client$IpcStreams:readResponse()" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getTrashRoots(boolean)" : [ {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "listStatus"
  }, {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "getFileStatus"
  } ],
  "org.apache.hadoop.io.SequenceFile$Reader:getDeserializer(org.apache.hadoop.io.serializer.SerializationFactory,java.lang.Class)" : [ ],
  "org.apache.hadoop.util.HostsFileReader:readFileToMap(java.lang.String,java.lang.String,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.service.ServiceStateException:convert(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkPositiveInteger(long,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.util.HeapSort:sort(org.apache.hadoop.util.IndexedSortable,int,int,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:setConfiguration(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileContext:isSameFS(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileContext:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:meanStatistics()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:getFileLinkStatusInternal(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getSystemInfoInfoFromShell()" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:getMemoryUsage(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "removeDefaultAcl"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:bufferFullyRead()" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getCumulativeCpuTime()" : [ ],
  "org.apache.hadoop.service.CompositeService:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "removeXAttr"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:put(int,java.nio.ByteBuffer,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.LocalDirAllocator)" : [ {
    "sourceMethod" : "getCacheFilePath",
    "targetMethod" : "writeFile"
  } ],
  "org.apache.hadoop.io.SetFile$Reader:next(org.apache.hadoop.io.WritableComparable)" : [ ],
  "org.apache.hadoop.util.UTF8ByteArrayUtils:findNthByte(byte[],byte,int)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_enabled()" : [ ],
  "org.apache.hadoop.io.Text:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:deleteKey(java.lang.String)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency:toString()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:bsGetInt()" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:cleanupNewAndOld(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlockFactory:createTmpFileForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getHomeDirectory()" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedIO:byteBufferPositionedReadable_readFullyAvailable(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.HardLink:getLinkCount(java.io.File)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferData:updateState(org.apache.hadoop.fs.impl.prefetch.BufferData$State,org.apache.hadoop.fs.impl.prefetch.BufferData$State[])" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getData()" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicy$RetryAction:<init>(org.apache.hadoop.io.retry.RetryPolicy$RetryAction$RetryDecision)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:init(java.lang.Class)" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:getIterator(java.util.function.Consumer)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:prepareMetaBlock(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkWithinRange(double,java.lang.String,double,double)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.XORErasureDecoder:prepareDecodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getNetworkBytesRead()" : [ ],
  "org.apache.hadoop.util.Lists:newArrayListWithExpectedSize(int)" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:hasRemaining()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:<init>(java.io.OutputStream,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:removeAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem:listStatus(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:getPathHandle(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:getFileStatus(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "getFileStatus"
  } ],
  "org.apache.hadoop.util.ApplicationClassLoader:<init>(java.net.URL[],java.lang.ClassLoader,java.util.List)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:seekTo(org.apache.hadoop.io.file.tfile.RawComparable,boolean)" : [ {
    "sourceMethod" : "getBlockContainsKey",
    "targetMethod" : "seekTo"
  } ],
  "org.apache.hadoop.io.MultipleIOException:createIOException(java.util.List)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:close()" : [ ],
  "org.apache.hadoop.util.Progress:toString()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:initializeMetadataCache(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.Options$CreateOpts:bufferSize(int)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseThresholds(java.lang.String,org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:overwrite(boolean)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getDefaultPortIfDefined(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:incrCacheCleared()" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:hiddenImpl(java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:instantiateService(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:<init>(javax.security.auth.Subject)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:buildStatic()" : [ ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:<init>(org.apache.hadoop.fs.statistics.MeanStatistic)" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:read()" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_aggregate(java.io.Serializable,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileSystem:checkPath(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "canonicalizeUri"
  } ],
  "org.apache.hadoop.util.ProgramDriver:driver(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:inBlockAdvance(long)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:stopSources()" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$RBlockState:getCompressionName()" : [ ],
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolClientSideTranslatorPB:cedeActive(int)" : [ ],
  "org.apache.hadoop.security.SaslPropertiesResolver:setConf(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getTrimmedStrings",
    "targetMethod" : "join"
  } ],
  "org.apache.hadoop.security.ShellBasedIdMapping:getGroupName(int,java.lang.String)" : [ ],
  "org.apache.hadoop.util.ProtoUtil:makeRpcRequestHeader(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto$OperationProto,int,int,byte[])" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:<init>()" : [ ],
  "org.apache.hadoop.metrics2.util.Metrics2Util$TopN:offer(org.apache.hadoop.metrics2.util.Metrics2Util$NameValuePair)" : [ ],
  "org.apache.hadoop.util.InstrumentedReadLock:startLockTiming()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferData:throwIfStateIncorrect(org.apache.hadoop.fs.impl.prefetch.BufferData$State[])" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:<init>(org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:getCachePoolDefault()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations$End:duration()" : [ ],
  "org.apache.hadoop.fs.shell.XAttrCommands$GetfattrCommand:processOptions(java.util.LinkedList)" : [ {
    "sourceMethod" : "popOptionWithArgument",
    "targetMethod" : "toUpperCase"
  } ],
  "org.apache.hadoop.conf.Configuration:hasWarnedDeprecation(java.lang.String)" : [ ],
  "org.apache.hadoop.util.dynamic.DynConstructors$Builder:hiddenImpl(java.lang.Class[])" : [ ],
  "org.apache.hadoop.http.HttpServer2:addPrometheusServlet(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFsStatus()" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:init(java.lang.Class,java.lang.String)" : [ ],
  "org.apache.hadoop.net.AbstractDNSToSwitchMapping:isMappingSingleSwitch(org.apache.hadoop.net.DNSToSwitchMapping)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:<init>()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:getKeyClass()" : [ ],
  "org.apache.hadoop.security.KDiag:validateUGI(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : [ {
    "sourceMethod" : "hasKerberosCredentials",
    "targetMethod" : "verify"
  } ],
  "org.apache.hadoop.net.ScriptBasedMapping:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:append(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:mainQSort3(org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream$Data,int,int,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getBlockSize(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:ioStatisticsSourceToString(java.lang.Object)" : [ {
    "sourceMethod" : "retrieveIOStatistics",
    "targetMethod" : "ioStatisticsToString"
  } ],
  "org.apache.hadoop.util.Classpath:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:seek(long)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:close()" : [ {
    "sourceMethod" : "prepareMetaBlock",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "prepareMetaBlock",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.io.SequenceFile$Writer:metadata(org.apache.hadoop.io.SequenceFile$Metadata)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRate:<init>(java.lang.String,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.SimpleBufferedOutputStream:write(int)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:initialize(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:getPermission()" : [ ],
  "org.apache.hadoop.io.ArrayWritable:<init>(java.lang.Class,org.apache.hadoop.io.Writable[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:makeAbsolute(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:getMetrics(org.apache.hadoop.metrics2.MetricsCollector,boolean)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:shouldRetry(java.lang.Exception,int,int,boolean)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtobufRpcEngineCallbackImpl:<init>()" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:getWorkingDirectory()" : [ ],
  "org.apache.hadoop.util.CrcUtil:toMultiCrcString(byte[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:setHomeDirConf(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "getDefaultMountTableName",
    "targetMethod" : "setHomeDirConf"
  } ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newCounter(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:getSumBufferSize(int,int)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$WrappedJavaIterator:getIOStatistics()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:createTrustManagersFromConfiguration(org.apache.hadoop.security.ssl.SSLFactory$Mode,java.lang.String,java.lang.String,long)" : [ {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "getPassword"
  }, {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "getLong"
  } ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.util.ServletUtil:getRawPath(javax.servlet.http.HttpServletRequest,java.lang.String)" : [ ],
  "org.apache.hadoop.http.HttpServer2$Builder:createHttpChannelConnector(org.eclipse.jetty.server.Server,org.eclipse.jetty.server.HttpConfiguration)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.XORErasureCodec:createDecoder()" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getTargetPath",
    "targetMethod" : "processPath"
  } ],
  "org.apache.hadoop.util.StopWatch:stop()" : [ ],
  "org.apache.hadoop.ha.HAAdmin:parseOpts(java.lang.String,org.apache.commons.cli.Options,java.lang.String[],java.util.Map)" : [ ],
  "org.apache.hadoop.conf.Configuration:updateConnectAddr(java.lang.String,java.net.InetSocketAddress)" : [ {
    "sourceMethod" : "getConnectAddress",
    "targetMethod" : "setSocketAddr"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:isSorted()" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:get(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.DummyErasureCodec:createEncoder()" : [ ],
  "org.apache.hadoop.util.LightWeightGSet:computeCapacity(long,double,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:getPluginLoader()" : [ ],
  "org.apache.hadoop.http.HttpServer2$StackServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.metrics2.sink.StatsDSink$StatsD:createSocket()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(java.lang.String,java.lang.String,long)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "newGauge"
  } ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.FastByteComparisons$LexicographicalComparerHolder$UnsafeComparer:compareTo(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.ipc.Client:setConnectTimeout(org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:create(org.apache.hadoop.fs.Path,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.RSErasureCodec:createEncoder()" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:setupIOstreams(java.util.concurrent.atomic.AtomicBoolean)" : [ {
    "sourceMethod" : "getTicket",
    "targetMethod" : "setupConnection"
  }, {
    "sourceMethod" : "getTicket",
    "targetMethod" : "handleSaslConnectionFailure"
  } ],
  "org.apache.hadoop.ha.NodeFencer:<init>(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:decrypt(long,java.nio.ByteBuffer,int,int)" : [ {
    "sourceMethod" : "getPadding",
    "targetMethod" : "decrypt"
  } ],
  "org.apache.hadoop.http.HttpServer2:openListeners()" : [ ],
  "org.apache.hadoop.net.NodeBase:getPathComponents(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.RSErasureEncoder:prepareEncodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:write0(int)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommandWithMultiThread:copyFileToTarget(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer:getFramedBuffer()" : [ ],
  "org.apache.hadoop.jmx.JMXJsonServlet:isInstrumentationAccessAllowed(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:createFile(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "createFile"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:setExternalDelegationTokenSecretManager(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "listLocatedStatus"
  } ],
  "org.apache.hadoop.fs.http.HttpFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:getTopCallers(int)" : [ ],
  "org.apache.hadoop.ipc.Client:getTimeout(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.DF:<init>(java.io.File,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.impl.SinkQueue:clear()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:allowChangeInputs()" : [ ],
  "org.apache.hadoop.ipc.Server:<init>(java.lang.String,int,java.lang.Class,int,int,int,org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.security.token.SecretManager,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:isDirectory()" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:processOneRpc(java.nio.ByteBuffer)" : [ {
    "sourceMethod" : "wrap",
    "targetMethod" : "getMessage"
  }, {
    "sourceMethod" : "getMessage",
    "targetMethod" : "checkRpcHeaders"
  }, {
    "sourceMethod" : "getMessage",
    "targetMethod" : "processRpcRequest"
  }, {
    "sourceMethod" : "wrap",
    "targetMethod" : "processRpcRequest"
  }, {
    "sourceMethod" : "getMessage",
    "targetMethod" : "processRpcOutOfBandRequest"
  }, {
    "sourceMethod" : "wrap",
    "targetMethod" : "processRpcOutOfBandRequest"
  } ],
  "org.apache.hadoop.ipc.RetryCache:incrCacheClearedCounter()" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort$Args:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoCodec:getInstance(org.apache.hadoop.conf.Configuration,org.apache.hadoop.crypto.CipherSuite)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getTrashRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.NetUtils:getSocketFactoryFromProperty(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "getClassByName",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.fs.RawLocalFileSystem:createPathHandle(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Options$HandleOpt[])" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:cancelToken(org.apache.hadoop.security.token.Token,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.permission.FsCreateModes:applyUMask(org.apache.hadoop.fs.permission.FsPermission,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "applyUMask",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.fs.FilterFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:getPriorityLevel(org.apache.hadoop.security.UserGroupInformation)" : [ {
    "sourceMethod" : "newSchedulable",
    "targetMethod" : "getIdentity"
  }, {
    "sourceMethod" : "newSchedulable",
    "targetMethod" : "cachedOrComputedPriorityLevel"
  }, {
    "sourceMethod" : "getIdentity",
    "targetMethod" : "cachedOrComputedPriorityLevel"
  } ],
  "org.apache.hadoop.util.ComparableVersion:parseVersion(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getFileStatus(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getWorkingDirectory",
    "targetMethod" : "makeQualified"
  }, {
    "sourceMethod" : "getUri",
    "targetMethod" : "makeQualified"
  } ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$ExpiredTokenRemover:run()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getFileChecksum"
  } ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setWriteChecksum(boolean)" : [ ],
  "org.apache.hadoop.util.WeakReferenceMap:containsKey(java.lang.Object)" : [ {
    "sourceMethod" : "lookup",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:cancelPrefetches()" : [ {
    "sourceMethod" : "cancelPrefetches",
    "targetMethod" : "end"
  } ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:setInput(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FileContext:checkDependencies(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addDecayedCallVolume(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.security.NetgroupCache:isCached(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.WeightedTimeCostProvider:init(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server:queueCall(org.apache.hadoop.ipc.Server$Call)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:getNonNegative(java.lang.String,int)" : [ ],
  "org.apache.hadoop.security.HadoopKerberosName:setConfiguration(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.conf.Configuration:getConfResourceAsInputStream(java.lang.String)" : [ ],
  "org.apache.hadoop.security.alias.JavaKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getKeyFromZK(int)" : [ ],
  "org.apache.hadoop.conf.Configuration:addDeprecation(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:parseSetLevelArgs(java.lang.String[],int)" : [ ],
  "org.apache.hadoop.util.LightWeightCache:evictEntries()" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:noPasswordWarning()" : [ ],
  "org.apache.hadoop.conf.Configuration:writeXml(java.lang.String,java.io.Writer,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:numAvailable()" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_counters(java.io.Serializable)" : [ ],
  "org.apache.hadoop.io.WritableUtils:toByteArray(org.apache.hadoop.io.Writable[])" : [ ],
  "org.apache.hadoop.ipc.RemoteException:unwrapRemoteException(java.lang.Class[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getDefaultReplication"
  } ],
  "org.apache.hadoop.io.nativeio.NativeIO:copyFileUnbuffered(java.io.File,java.io.File)" : [ ],
  "org.apache.hadoop.fs.BlockLocation:setHosts(java.lang.String[])" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:doFence(org.apache.hadoop.ha.HAServiceTarget)" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer$FramedBuffer:reset()" : [ ],
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:close()" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:seek(long)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:stopThreads()" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32GzipFileChecksum:<init>(int,long,org.apache.hadoop.io.MD5Hash)" : [ ],
  "org.apache.hadoop.fs.FSInputChecker:verifySums(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:ratioRemove(int[])" : [ ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:add(org.apache.hadoop.metrics2.AbstractMetric)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "tuple"
  } ],
  "org.apache.hadoop.util.functional.CommonCallableSupplier:waitForCompletionIgnoringExceptions(java.util.concurrent.CompletableFuture)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:computeRatio()" : [ ],
  "org.apache.hadoop.fs.FileStatus:toString()" : [ ],
  "org.apache.hadoop.fs.FileContext:mkdir(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean)" : [ {
    "sourceMethod" : "getUMask",
    "targetMethod" : "applyUMask"
  } ],
  "org.apache.hadoop.fs.shell.Command:displayError(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.ConfigurationWithLogging:getLong(java.lang.String,long)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getPhysicalMemorySize()" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getNetworkBytesWritten()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicIntegerMinimum(java.lang.String,java.util.concurrent.atomic.AtomicInteger)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:cancelDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.KDiag:println(java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.Path:startPositionWithoutWindowsDrive(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:resolvePath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:numAvailable()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getKey(org.apache.hadoop.io.BytesWritable)" : [ {
    "sourceMethod" : "getKeyLength",
    "targetMethod" : "setSize"
  }, {
    "sourceMethod" : "getBytes",
    "targetMethod" : "getKey"
  } ],
  "org.apache.hadoop.util.Shell:runCommand()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawEncoder:doEncode(org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState)" : [ ],
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilterInitializer:createFilterConfig(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics$StatisticsDataReferenceCleaner:run()" : [ ],
  "org.apache.hadoop.util.HostsFileReader:setIncludesFile(java.lang.String)" : [ ],
  "org.apache.hadoop.io.Text:decode(byte[])" : [ ],
  "org.apache.hadoop.util.JsonSerialization:<init>(java.lang.Class,boolean,boolean)" : [ ],
  "org.apache.hadoop.crypto.CryptoCodec:getInstance(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "convert",
    "targetMethod" : "getInstance"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "convert"
  } ],
  "org.apache.hadoop.fs.FilterFs:open(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "mkdirs"
  } ],
  "org.apache.hadoop.fs.FsShell:printInstanceHelp(java.io.PrintStream,org.apache.hadoop.fs.shell.Command)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping$LdapSslSocketFactory:createKeyManagers()" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:storeDelegationKey(org.apache.hadoop.security.token.delegation.DelegationKey)" : [ ],
  "org.apache.hadoop.io.UTF8:toStringChecked()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getResolvedQualifiedPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.BytesWritable:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.JvmPauseMonitor:<init>()" : [ ],
  "org.apache.hadoop.fs.http.HttpFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.PathAccessDeniedException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination$TargetFileSystem:create(org.apache.hadoop.fs.shell.PathData,boolean)" : [ {
    "sourceMethod" : "getUMask",
    "targetMethod" : "applyUMask"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm:getCompressor()" : [ ],
  "org.apache.hadoop.fs.FileSystem:listStatusBatch(org.apache.hadoop.fs.Path,byte[])" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CRC:<init>()" : [ ],
  "org.apache.hadoop.util.LineReader:readLine(org.apache.hadoop.io.Text,int)" : [ ],
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String,java.security.cert.X509Certificate)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager$ZKSecretManager:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.crypto.key.CachingKeyProvider:rollNewVersion(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ArrayBlockFactory:create(long,int,org.apache.hadoop.fs.store.BlockUploadStatistics)" : [ ],
  "org.apache.hadoop.http.ProfileServlet:getEvent(javax.servlet.http.HttpServletRequest)" : [ ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:bsPutUByte(int)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:<init>(java.util.Optional,java.util.Optional)" : [ ],
  "org.apache.hadoop.fs.FileUtil:setPermission(java.io.File,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.service.AbstractService:recordLifecycleEvent()" : [ ],
  "org.apache.hadoop.util.RunJar:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:initialize(org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:fenceOldActive()" : [ ],
  "org.apache.hadoop.fs.shell.Command:getName()" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:drain(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPInputStream:checkNotClosed()" : [ ],
  "org.apache.hadoop.util.functional.FunctionalIO:uncheckIOExceptions(org.apache.hadoop.util.functional.CallableRaisingIOE)" : [ ],
  "org.apache.hadoop.tracing.TraceScope:close()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:<init>()" : [ ],
  "org.apache.hadoop.util.MachineList:includes(java.lang.String)" : [ {
    "sourceMethod" : "getByName",
    "targetMethod" : "includes"
  } ],
  "org.apache.hadoop.fs.ChecksumFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "mkdirs"
  }, {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:createRootDirRecursively(java.lang.String,java.util.List)" : [ ],
  "org.apache.hadoop.io.compress.DefaultCodec:createDirectDecompressor()" : [ ],
  "org.apache.hadoop.net.NetworkTopology:chooseRandom(java.lang.String)" : [ ],
  "org.apache.hadoop.io.ObjectWritable:writeObject(java.io.DataOutput,java.lang.Object,java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.conf.StorageSize:parse(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:getBzip2CompressorType(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.MoveCommands$MoveFromLocal:postProcessPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.conf.ReconfigurableBase:getReconfigurationTaskStatus()" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec:setConf(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:getBytesRead()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:finishDataBlock(boolean)" : [ {
    "sourceMethod" : "getBuffer",
    "targetMethod" : "addEntry"
  }, {
    "sourceMethod" : "size",
    "targetMethod" : "addEntry"
  } ],
  "org.apache.hadoop.ha.HAServiceTarget:getHealthMonitorProxy(org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.ipc.Server:isClientBackoffEnabled()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.Delete$Rmr:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:getCompressedData()" : [ ],
  "org.apache.hadoop.fs.impl.WrappedIOException:<init>(java.io.IOException)" : [ ],
  "org.apache.hadoop.ipc.RemoteException:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getAclStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.ha.ActiveStandbyElector:createWithRetries(java.lang.String,byte[],java.util.List,org.apache.zookeeper.CreateMode)" : [ ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,short,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getDefaultBlockSize",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.io.Text:readString(java.io.DataInput,int)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getNumCores()" : [ ],
  "org.apache.hadoop.fs.shell.Test:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus,java.io.File,boolean,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "build",
    "targetMethod" : "awaitFuture"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "openFile"
  }, {
    "sourceMethod" : "openFile",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "build",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "awaitFuture",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "withFileStatus",
    "targetMethod" : "copyBytes"
  } ],
  "org.apache.hadoop.io.WritableUtils:skipCompressedByteArray(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.shell.SnapshotCommands$RenameSnapshot:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:accept()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:authenticate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "getDelegationToken",
    "targetMethod" : "decodeFromUrlString"
  } ],
  "org.apache.hadoop.fs.FSBuilder:must(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.DataChecksum:verifyChunked(org.apache.hadoop.util.DataChecksum$Type,java.util.zip.Checksum,java.nio.ByteBuffer,int,java.nio.ByteBuffer,java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:getChecksumFileLength(org.apache.hadoop.fs.Path,long)" : [ {
    "sourceMethod" : "getBytesPerSum",
    "targetMethod" : "getChecksumLength"
  } ],
  "org.apache.hadoop.util.CombinedIPList:<init>(java.lang.String,java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.GenericWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.FilterFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.find.Print:<init>()" : [ ],
  "org.apache.hadoop.service.AbstractService:notifyListeners()" : [ ],
  "org.apache.hadoop.fs.shell.PathData:parentExists()" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.fs.FilterFileSystem:getXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:doGetGroups(java.lang.String,int)" : [ {
    "sourceMethod" : "getDirContext",
    "targetMethod" : "lookupGroup"
  } ],
  "org.apache.hadoop.crypto.key.KeyShell:init(java.lang.String[])" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:connect(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$MetaBlockRegister:register(long,long,long)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages$RatesRoller:run()" : [ {
    "sourceMethod" : "addRecord",
    "targetMethod" : "snapshot"
  } ],
  "org.apache.hadoop.util.OperationDuration:getDurationString()" : [ {
    "sourceMethod" : "value",
    "targetMethod" : "humanTime"
  } ],
  "org.apache.hadoop.fs.BBPartHandle:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:getCurrentActive()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupRandPartC()" : [ ],
  "org.apache.hadoop.net.ScriptBasedMapping:toString()" : [ ],
  "org.apache.hadoop.util.VersionInfo:getUser()" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$WBlockState:getCurrentPos()" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:setHomeDirConf(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.WritableComparator:readLong(byte[],int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getServerDefaults()" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:impl(java.lang.Class,java.lang.Class[])" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:start()" : [ ],
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:refresh(java.lang.String,java.lang.String[])" : [ {
    "sourceMethod" : "ipc",
    "targetMethod" : "unpack"
  } ],
  "org.apache.hadoop.ipc.Client$Call:<init>(org.apache.hadoop.ipc.RPC$RpcKind,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.EmptyIOStatisticsContextImpl:getAggregator()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme$ChildFsGetter:createFileSystem(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.conf.Configuration:setPattern(java.lang.String,java.util.regex.Pattern)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:clearClientCache()" : [ ],
  "org.apache.hadoop.io.nativeio.SharedFileDescriptorFactory:getLoadingFailureReason()" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$Cp:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.io.erasurecode.grouper.BlockGrouper:getRequiredNumDataBlocks()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:<init>(org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator)" : [ ],
  "org.apache.hadoop.io.file.tfile.Utils:readString(java.io.DataInput)" : [ ],
  "org.apache.hadoop.conf.Configuration:reloadExistingConfigurations()" : [ ],
  "org.apache.hadoop.conf.Configuration:getBoolean(java.lang.String,boolean)" : [ {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "equalsIgnoreCase"
  }, {
    "sourceMethod" : "getTrimmed",
    "targetMethod" : "equalsIgnoreCase"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:cancelPrefetches()" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:processKeyAddOrUpdate(byte[])" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndexEntry:<init>(java.io.DataInput)" : [ ],
  "org.apache.hadoop.ipc.RpcWritable:wrap(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSupport:retrieveIOStatistics(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.alias.KeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferData:setPrefetch(java.util.concurrent.Future)" : [ ],
  "org.apache.hadoop.fs.Options$HandleOpt:resolve(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Options$HandleOpt[])" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:getPrimitivePower(int,int)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:readVectored(java.util.List,java.util.function.IntFunction)" : [ {
    "sourceMethod" : "validateAndSortRanges",
    "targetMethod" : "mergeSortedRanges"
  }, {
    "sourceMethod" : "mergeSortedRanges",
    "targetMethod" : "findChecksumRanges"
  }, {
    "sourceMethod" : "findChecksumRanges",
    "targetMethod" : "readVectored"
  }, {
    "sourceMethod" : "mergeSortedRanges",
    "targetMethod" : "readVectored"
  } ],
  "org.apache.hadoop.metrics2.filter.GlobFilter:compile(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:close()" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:initialize(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.DecodingValidator:validate(org.apache.hadoop.io.erasurecode.ECChunk[],int[],org.apache.hadoop.io.erasurecode.ECChunk[])" : [ {
    "sourceMethod" : "toBuffers",
    "targetMethod" : "validate"
  } ],
  "org.apache.hadoop.metrics2.util.SampleStat:toString()" : [ ],
  "org.apache.hadoop.fs.FsShell:<init>()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addMeanStatisticSample(java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:syncFs()" : [ ],
  "org.apache.hadoop.util.bloom.BloomFilter:membershipTest(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricGaugeFloat:<init>(org.apache.hadoop.metrics2.MetricsInfo,float)" : [ ],
  "org.apache.hadoop.util.FindClass:loadResource(java.lang.String)" : [ {
    "sourceMethod" : "getResource",
    "targetMethod" : "out"
  } ],
  "org.apache.hadoop.fs.shell.Head:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec$GzipZlibCompressor:<init>()" : [ ],
  "org.apache.hadoop.fs.FileSystem:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getDefaultUri",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.WindowsGetSpaceUsed:<init>(org.apache.hadoop.fs.GetSpaceUsed$Builder)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getGroupsForUserCommand(java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod:valueOf(org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:getAllLocalPathsToRead(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:<init>(int)" : [ ],
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader:buildHttpReferrer()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getServer(java.lang.Class,java.lang.Object,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.metrics2.util.MBeans:unregister(javax.management.ObjectName)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:initDataBlock()" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Du:processPathArgument(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.BlockLocation:<init>()" : [ ],
  "org.apache.hadoop.util.MergeSort:<init>(java.util.Comparator)" : [ ],
  "org.apache.hadoop.io.ArrayFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:reencryptEncryptedKeys(java.util.List)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.fs.FilterFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:readFully(long,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.LocatedFileStatus:<init>(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.BlockLocation[])" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newMutableRollingAverages(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.shell.Truncate:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:abort(org.apache.hadoop.fs.UploadHandle,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.ssl.FileMonitoringTimerTask:<init>(java.util.List,java.util.function.Consumer,java.util.function.Consumer)" : [ ],
  "org.apache.hadoop.io.DataOutputBuffer$Buffer:setCount(int)" : [ ],
  "org.apache.hadoop.util.StringUtils:equalsIgnoreCase(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_means(java.io.Serializable)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:add(java.lang.String,org.apache.hadoop.metrics2.lib.MutableMetric)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation:init(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.FileSystem:<init>()" : [ ],
  "org.apache.hadoop.fs.ContentSummary$Builder:quota(long)" : [ ],
  "org.apache.hadoop.ipc.Client:<init>(java.lang.Class,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:removeAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.ShutdownHookManager:addShutdownHook(java.lang.Runnable,int)" : [ ],
  "org.apache.hadoop.conf.Configuration:getClass(java.lang.String,java.lang.Class,java.lang.Class)" : [ ],
  "org.apache.hadoop.service.CompositeService:stop(int,boolean)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : [ {
    "sourceMethod" : "methodToTraceString",
    "targetMethod" : "newScope"
  }, {
    "sourceMethod" : "constructRpcRequest",
    "targetMethod" : "call"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:compareCursorKeyTo(org.apache.hadoop.io.file.tfile.RawComparable)" : [ ],
  "org.apache.hadoop.io.DataOutputBuffer:getLength()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:write(int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:refreshQueueSizeGauge()" : [ {
    "sourceMethod" : "size",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:deleteKey(java.lang.String)" : [ ],
  "org.apache.hadoop.net.SocketOutputStream:transferToFully(java.nio.channels.FileChannel,long,int,org.apache.hadoop.io.LongWritable,org.apache.hadoop.io.LongWritable)" : [ ],
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:toString()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:deprecatedGetFileLinkStatusInternal(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.ConfigurationWithLogging:getBoolean(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(long[],java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.AvroFSInput:seek(long)" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell:promptForCredential()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$StaticMethod:invoke(java.lang.Object[])" : [ ],
  "org.apache.hadoop.ha.NodeFencer:create(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenIdentifier:<init>(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.fs.LocatedFileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean,boolean,boolean,org.apache.hadoop.fs.BlockLocation[])" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(byte[],java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server:<init>(java.lang.Class,java.lang.Object,org.apache.hadoop.conf.Configuration,java.lang.String,int,int,int,int,boolean,org.apache.hadoop.security.token.SecretManager,java.lang.String,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:bsPutInt(int)" : [ ],
  "org.apache.hadoop.ipc.Client$Call:setException(java.io.IOException)" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec:getCompressorType()" : [ ],
  "org.apache.hadoop.util.WeakReferenceMap:get(java.lang.Object)" : [ {
    "sourceMethod" : "lookup",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.MD5Hash:compareTo(org.apache.hadoop.io.MD5Hash)" : [ ],
  "org.apache.hadoop.io.compress.BlockCompressorStream:<init>(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getLogin()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:rollNewVersion(java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileUtil:makeShellPath(java.io.File,boolean)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawDecoder:doDecodeImpl(byte[][],int[],int,int[],byte[][],int[])" : [ ],
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:init(int)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.crypto.CryptoFSDataOutputStream:<init>(org.apache.hadoop.fs.FSDataOutputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[])" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:next()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getRecordNumNear(long)" : [ {
    "sourceMethod" : "getLocationNear",
    "targetMethod" : "getRecordNumByLocation"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.conf.Configuration$Parser:parseNext()" : [ ],
  "org.apache.hadoop.io.UTF8:readChars(java.io.DataInput,java.lang.StringBuilder,int)" : [ {
    "sourceMethod" : "getData",
    "targetMethod" : "byteToHexString"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "byteToHexString"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "byteToHexString"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "byteToHexString"
  } ],
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:getCacheHit()" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.Options$ChecksumOpt:processChecksumOpt(org.apache.hadoop.fs.Options$ChecksumOpt,org.apache.hadoop.fs.Options$ChecksumOpt)" : [ ],
  "org.apache.hadoop.security.SecurityUtil$QualifiedHostResolver:getByName(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:increaseRemoteReadTime(long)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableQuantiles:setQuantiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.DecimalFormat)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "addQuantileInfo"
  }, {
    "sourceMethod" : "getInterval",
    "targetMethod" : "info"
  } ],
  "org.apache.hadoop.util.Shell:run()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:getAttribute(java.lang.String)" : [ ],
  "org.apache.hadoop.util.StopWatch:start()" : [ ],
  "org.apache.hadoop.metrics2.sink.FileSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : [ ],
  "org.apache.hadoop.io.serializer.avro.AvroReflectSerialization:getPackages()" : [ ],
  "org.apache.hadoop.fs.PathPermissionException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer:capacity()" : [ ],
  "org.apache.hadoop.ipc.Server:logSlowRpcCalls(java.lang.String,org.apache.hadoop.ipc.Server$Call,org.apache.hadoop.ipc.ProcessingDetails)" : [ {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.fs.FilterFs:getHomeDirectory()" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine:ensureInitialized()" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$Merge:processArguments(java.util.LinkedList)" : [ {
    "sourceMethod" : "create",
    "targetMethod" : "writeDelimiter"
  }, {
    "sourceMethod" : "create",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "openForSequentialIO",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "create",
    "targetMethod" : "writeDelimiter"
  } ],
  "org.apache.hadoop.fs.FileStatus:setPermission(org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.fs.QuotaUsage:getTypesQuotaUsage(boolean,java.util.List)" : [ {
    "sourceMethod" : "getTypeQuota",
    "targetMethod" : "formatSize"
  } ],
  "org.apache.hadoop.io.SecureIOUtils:openForRandomRead(java.io.File,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:removeMBeanName(javax.management.ObjectName)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:resetBuffer(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipCompressor:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.StorageType:getConf(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.StorageType,java.lang.String)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:printUsage(java.io.PrintStream,java.util.Map)" : [ ],
  "org.apache.hadoop.util.functional.TaskPool:foreach(org.apache.hadoop.fs.RemoteIterator)" : [ ],
  "org.apache.hadoop.ha.ShellCommandFencer:setConfAsEnvVars(java.util.Map)" : [ ],
  "org.apache.hadoop.io.WritableUtils:readVIntInRange(java.io.DataInput,int,int)" : [ ],
  "org.apache.hadoop.net.DNS:getIPs(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.MapWritable:<init>()" : [ ],
  "org.apache.hadoop.metrics2.util.SampleQuantiles:toString()" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:reportChecksumFailure(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FSDataInputStream,long,org.apache.hadoop.fs.FSDataInputStream,long)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:getCurrentValue(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.IOUtils:copyBytes(java.io.InputStream,java.io.OutputStream,long,boolean)" : [ ],
  "org.apache.hadoop.fs.BlockLocation:setNames(java.lang.String[])" : [ ],
  "org.apache.hadoop.util.InstrumentedReadLock:unlock()" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Reader:<init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : [ ],
  "org.apache.hadoop.fs.shell.find.Name:registerExpression(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:exists(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer:reset()" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:propagateOptions(org.apache.hadoop.fs.FSBuilder,org.apache.hadoop.conf.Configuration,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.impl.FlagSet:copy()" : [ ],
  "org.apache.hadoop.fs.FileSystem:newInstance(java.net.URI,org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getBestUGI"
  } ],
  "org.apache.hadoop.fs.DF:getFilesystem()" : [ ],
  "org.apache.hadoop.ipc.RpcClientUtil:isMethodSupported(java.lang.Object,java.lang.Class,org.apache.hadoop.ipc.RPC$RpcKind,long,java.lang.String)" : [ {
    "sourceMethod" : "getServerAddress",
    "targetMethod" : "getVersionSignatureMap"
  }, {
    "sourceMethod" : "getServerAddress",
    "targetMethod" : "putVersionSignatureMap"
  }, {
    "sourceMethod" : "getVersionSignatureMap",
    "targetMethod" : "putVersionSignatureMap"
  }, {
    "sourceMethod" : "getVersionSignatureMap",
    "targetMethod" : "methodExists"
  }, {
    "sourceMethod" : "getFingerprint",
    "targetMethod" : "methodExists"
  } ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getGaugeReference(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getPath",
    "targetMethod" : "getPathWithoutSchemeAndAuthority"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.net.unix.DomainSocket:bindAndListen(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystemLinkResolver:resolve(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "resolveLink",
    "targetMethod" : "qualifySymlinkTarget"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getProcessingSampleCount()" : [ ],
  "org.apache.hadoop.fs.shell.PathData:<init>(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs:renameInternal(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getUri",
    "targetMethod" : "verifyRenameStrategy"
  }, {
    "sourceMethod" : "fullPath",
    "targetMethod" : "renameInternal"
  } ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addCallVolumePerPriority(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : [ ],
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolServerSideTranslatorPB:getProtocolSignature(java.lang.String,long,int)" : [ {
    "sourceMethod" : "getProtocolVersion",
    "targetMethod" : "getProtocolSignature"
  } ],
  "org.apache.hadoop.fs.FileSystem:createNewFile(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.ipc.ProtobufHelper:getByteString(byte[])" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:execShellGetUserForNetgroup(java.lang.String)" : [ {
    "sourceMethod" : "getUsersForNetgroupCommand",
    "targetMethod" : "execCommand"
  } ],
  "org.apache.hadoop.ha.ZKFailoverController:becomeActive()" : [ {
    "sourceMethod" : "createReqInfo",
    "targetMethod" : "transitionToActive"
  }, {
    "sourceMethod" : "getProxy",
    "targetMethod" : "transitionToActive"
  }, {
    "sourceMethod" : "getRpcTimeoutToNewActive",
    "targetMethod" : "getProxy"
  } ],
  "org.apache.hadoop.io.UTF8:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$FailoverOnNetworkExceptionRetry:<init>(org.apache.hadoop.io.retry.RetryPolicy,int)" : [ ],
  "org.apache.hadoop.ipc.Server$ConnectionManager:isFull()" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:getTokenFile(java.io.File,java.lang.String,org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,java.lang.String,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "copyToken",
    "targetMethod" : "addToken"
  }, {
    "sourceMethod" : "readTokenStorageFile",
    "targetMethod" : "doFormattedWrite"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getRelativeOffset(int,long)" : [ ],
  "org.apache.hadoop.fs.FileSystem:mkdirs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withMeanStatisticFunction(java.lang.String,java.util.function.Function)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:getRecordNum()" : [ ],
  "org.apache.hadoop.fs.FileUtil:unTarUsingTar(java.io.File,java.io.File,boolean)" : [ ],
  "org.apache.hadoop.fs.protocolPB.PBHelper:convert(org.apache.hadoop.fs.FileStatus)" : [ {
    "sourceMethod" : "getPermission",
    "targetMethod" : "convert"
  } ],
  "org.apache.hadoop.util.dynamic.DynMethods$BoundMethod:invokeChecked(java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFileChecksum(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:coreServiceLaunch(org.apache.hadoop.conf.Configuration,org.apache.hadoop.service.Service,java.util.List,boolean,boolean)" : [ ],
  "org.apache.hadoop.fs.LocatedFileStatus:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:shouldBackOff(org.apache.hadoop.ipc.Schedulable)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.PairedDurationTrackerFactory$PairedDurationTracker:asDuration()" : [ ],
  "org.apache.hadoop.io.MapFile$Writer$KeyClassOption:<init>(java.lang.Class)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:trackStoreToken(org.apache.hadoop.util.functional.InvocationRaisingIOE)" : [ ],
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newCachedThreadPool(java.util.concurrent.ThreadFactory)" : [ ],
  "org.apache.hadoop.jmx.JMXJsonServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall:<init>(java.lang.reflect.Method,java.lang.Object[],boolean,int,org.apache.hadoop.io.retry.RetryInvocationHandler,org.apache.hadoop.io.retry.AsyncCallHandler)" : [ ],
  "org.apache.hadoop.fs.FsShell:getCurrentTrashDir()" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.service.launcher.InterruptEscalator:getService()" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.LineReader:<init>(java.io.InputStream,org.apache.hadoop.conf.Configuration,byte[])" : [ ],
  "org.apache.hadoop.net.NetUtils:getCanonicalUri(java.net.URI,int)" : [ ],
  "org.apache.hadoop.http.HttpServer2:createWebAppContext(org.apache.hadoop.http.HttpServer2$Builder,org.apache.hadoop.security.authorize.AccessControlList,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:processResult(int,java.lang.String,java.lang.Object,org.apache.zookeeper.data.Stat)" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:add(org.apache.hadoop.metrics2.MetricsTag)" : [ {
    "sourceMethod" : "name",
    "targetMethod" : "tuple"
  }, {
    "sourceMethod" : "value",
    "targetMethod" : "tuple"
  } ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$1:getCodec()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:listXAttrs(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "listXAttrs"
  } ],
  "org.apache.hadoop.io.compress.BlockDecompressorStream:getCompressedData()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleQuantiles:insertBatch()" : [ ],
  "org.apache.hadoop.conf.Configuration:setLong(java.lang.String,long)" : [ ],
  "org.apache.hadoop.net.SocketInputStream:<init>(java.net.Socket,long)" : [ ],
  "org.apache.hadoop.ipc.RpcServerException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.WritableComparator:<init>(java.lang.Class)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRates:<init>(org.apache.hadoop.metrics2.lib.MetricsRegistry)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableRollingAverages:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.fs.GetSpaceUsed$Builder:getInterval()" : [ ],
  "org.apache.hadoop.fs.FileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.util.Set)" : [ ],
  "org.apache.hadoop.fs.VectoredReadUtils:readInDirectBuffer(org.apache.hadoop.fs.FileRange,java.nio.ByteBuffer,org.apache.hadoop.util.functional.Function4RaisingIOE)" : [ ],
  "org.apache.hadoop.util.StringUtils$TraditionalBinaryPrefix:string2long(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:bufferStartOffset()" : [ ],
  "org.apache.hadoop.util.JsonSerialization:load(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileStatus)" : [ {
    "sourceMethod" : "build",
    "targetMethod" : "awaitFuture"
  }, {
    "sourceMethod" : "build",
    "targetMethod" : "fromJsonStream"
  }, {
    "sourceMethod" : "awaitFuture",
    "targetMethod" : "fromJsonStream"
  } ],
  "org.apache.hadoop.fs.shell.Truncate:waitForRecovery()" : [ ],
  "org.apache.hadoop.io.compress.lz4.Lz4Decompressor:setInput(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.CommandFormat$NotEnoughArgumentsException:getMessage()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:addRpcEnQueueTime(long)" : [ ],
  "org.apache.hadoop.io.Text:writeString(java.io.DataOutput,java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:ioStatisticsContextAvailable()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:makeAbsolute(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.FSBuilderSupport:getLong(java.lang.String,long)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainOutputStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$AutoRenewalForUserCredsRunnable:run()" : [ {
    "sourceMethod" : "now",
    "targetMethod" : "getNextTgtRenewalTime"
  } ],
  "org.apache.hadoop.fs.Globber:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableMetricsFactory:getInfo(org.apache.hadoop.metrics2.annotation.Metric,java.lang.reflect.Field)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "getInfo"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:acquire(int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:setContext(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.SnappyCodec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:listStatusForFallbackLink()" : [ {
    "sourceMethod" : "getPathWithoutSchemeAndAuthority",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.fs.protocolPB.PBHelper:convert(org.apache.hadoop.fs.FSProtos$FileStatusProto)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:transitionToActive(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ha.proto.HAServiceProtocolProtos$TransitionToActiveRequestProto)" : [ ],
  "org.apache.hadoop.metrics2.lib.MethodMetric:newTag(java.lang.Class)" : [ ],
  "org.apache.hadoop.io.serializer.WritableSerialization$WritableDeserializer:<init>(org.apache.hadoop.conf.Configuration,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:getAllStatistics()" : [ ],
  "org.apache.hadoop.fs.local.RawLocalFs:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:toString()" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:seek(org.apache.hadoop.io.WritableComparable)" : [ ],
  "org.apache.hadoop.ipc.Server:getCallQueueLen()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:<init>(org.apache.hadoop.fs.viewfs.ChRootedFileSystem,org.apache.hadoop.fs.FileStatus)" : [ ],
  "org.apache.hadoop.conf.Configuration:writeXml(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.fs.shell.MoveCommands$MoveFromLocal:processPath(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.ipc.Client:getPingInterval(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.functional.TaskPool:throwOne(java.util.Collection)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSDelegationToken$KMSDelegationTokenIdentifier:<init>()" : [ ],
  "org.apache.hadoop.fs.shell.Stat:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "delete"
  } ],
  "org.apache.hadoop.fs.FileContext:deleteOnExit(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.find.Result:combine(org.apache.hadoop.fs.shell.find.Result)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:createHuffmanDecodingTables(int,int)" : [ ],
  "org.apache.hadoop.io.BytesWritable:getSize()" : [ ],
  "org.apache.hadoop.ipc.Server:getNumDroppedConnections()" : [ ],
  "org.apache.hadoop.ha.HealthMonitor:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.ha.HAServiceTarget)" : [ ],
  "org.apache.hadoop.fs.FileContext:listCorruptFileBlocks(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.DefaultCodec:getDecompressorType()" : [ ],
  "org.apache.hadoop.ipc.ProtobufWrapperLegacy:<init>(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.util.DiskValidatorFactory:getInstance(java.lang.Class)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:retryUpToMaximumCountWithProportionalSleep(int,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations$End:<init>(org.apache.hadoop.fs.impl.prefetch.BlockOperations$Operation)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:createProxyUserForTesting(java.lang.String,org.apache.hadoop.security.UserGroupInformation,java.lang.String[])" : [ ],
  "org.apache.hadoop.ipc.ProtobufHelper:getRemoteException(org.apache.hadoop.thirdparty.protobuf.ServiceException)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:hashCode()" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:getStringData(java.lang.String,org.apache.zookeeper.data.Stat)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:init(boolean)" : [ {
    "sourceMethod" : "readString",
    "targetMethod" : "getClassByName"
  }, {
    "sourceMethod" : "getClassByName",
    "targetMethod" : "newInstance"
  }, {
    "sourceMethod" : "getKeyClass",
    "targetMethod" : "getDeserializer"
  }, {
    "sourceMethod" : "getValueClass",
    "targetMethod" : "getDeserializer"
  } ],
  "org.apache.hadoop.util.VersionInfo:getDate()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseServiceUserNames(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:validateSslConfiguration(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.util.LightWeightGSet$SetIterator:ensureNext()" : [ ],
  "org.apache.hadoop.io.Text:set(org.apache.hadoop.io.Text)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "set"
  }, {
    "sourceMethod" : "getBytes",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.fs.HarFileSystem:getCanonicalUri()" : [ ],
  "org.apache.hadoop.security.Credentials:readTokenStorageFile(java.io.File,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleQuantiles:snapshot()" : [ ],
  "org.apache.hadoop.fs.ContentSummary$Builder:spaceQuota(long)" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodecFactory:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:add(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.util.Shell:getGetPermissionCommand()" : [ ],
  "org.apache.hadoop.util.ProtoUtil:getUgi(org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$UserInformationProto)" : [ {
    "sourceMethod" : "createRemoteUser",
    "targetMethod" : "createProxyUser"
  } ],
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:enterClosedState()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:removeAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.ConfTest:checkConf(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:bufferSize(int)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getBestUGI(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String,int,java.lang.String)" : [ ],
  "org.apache.hadoop.security.SaslRpcServer:init(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.internal.ShadedProtobufHelper:protoFromToken(org.apache.hadoop.security.token.Token)" : [ {
    "sourceMethod" : "getService",
    "targetMethod" : "getFixedByteString"
  }, {
    "sourceMethod" : "getKind",
    "targetMethod" : "getFixedByteString"
  }, {
    "sourceMethod" : "getPassword",
    "targetMethod" : "getByteString"
  }, {
    "sourceMethod" : "getIdentifier",
    "targetMethod" : "getByteString"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:createProxyUser(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:getTopTokenRealOwners(int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:publishMetricsFromQueue()" : [ ],
  "org.apache.hadoop.fs.shell.Ls:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:notFoundStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:startUpload()" : [ ],
  "org.apache.hadoop.io.ArrayWritable:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createConnection(java.net.URL,java.lang.String)" : [ ],
  "org.apache.hadoop.util.GenericsUtil:isLog4jLogger(java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:snapshotMap(java.util.Map,java.util.function.Function)" : [ ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:add(org.apache.hadoop.metrics2.MetricsTag)" : [ {
    "sourceMethod" : "name",
    "targetMethod" : "tuple"
  }, {
    "sourceMethod" : "value",
    "targetMethod" : "tuple"
  } ],
  "org.apache.hadoop.net.NetworkTopology:getDistanceByPath(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.FileSystem:newInstanceLocal(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:checkParameterValidity(java.lang.String[])" : [ ],
  "org.apache.hadoop.http.HttpServer2:addDefaultServlets(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.crypto.CryptoFSDataOutputStream:<init>(org.apache.hadoop.fs.FSDataOutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[],boolean)" : [ ],
  "org.apache.hadoop.io.WritableUtils:writeStringArray(java.io.DataOutput,java.lang.String[])" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor$SnappyDirectDecompressor:finished()" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme$ChildFsGetter:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:createDecoder(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ {
    "sourceMethod" : "getCodecName",
    "targetMethod" : "getCodecClassName"
  }, {
    "sourceMethod" : "getCodecName",
    "targetMethod" : "createCodec"
  }, {
    "sourceMethod" : "getCodecClassName",
    "targetMethod" : "createCodec"
  }, {
    "sourceMethod" : "getSchema",
    "targetMethod" : "createCodec"
  } ],
  "org.apache.hadoop.io.DataInputBuffer:reset(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:execute()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.io.InputStream)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyCompressor:reinit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.EnumSetWritable:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:replication(short)" : [ ],
  "org.apache.hadoop.fs.FileUtil:maybeIgnoreMissingDirectory(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.io.FileNotFoundException)" : [ ],
  "org.apache.hadoop.fs.CachingGetSpaceUsed:<init>(org.apache.hadoop.fs.GetSpaceUsed$Builder)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupRandPartB()" : [ ],
  "org.apache.hadoop.ipc.Server:closeConnection(org.apache.hadoop.ipc.Server$Connection)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:isChecksumFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.Count:<init>()" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:hiddenImpl(java.lang.Class,java.lang.Class[])" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:getName(org.apache.hadoop.io.nativeio.NativeIO$POSIX$IdCache,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SortPass:close()" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getUriDefaultPort()" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Du:setHumanReadable(boolean)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:exitWithMessage(int,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.BlockDecompressorStream:resetState()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache$ClientFinalizer:run()" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Du:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.metrics2.sink.GraphiteSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:incrementGauge(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.FileSystem:copyFromLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:sync()" : [ ],
  "org.apache.hadoop.util.dynamic.BindingUtils:loadStaticMethod(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Class[])" : [ {
    "sourceMethod" : "loadInvocation",
    "targetMethod" : "available"
  }, {
    "sourceMethod" : "isStatic",
    "targetMethod" : "checkState"
  }, {
    "sourceMethod" : "loadInvocation",
    "targetMethod" : "checkState"
  } ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addCounter(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:supportsSymlinks()" : [ ],
  "org.apache.hadoop.io.WritableUtils:writeCompressedString(java.io.DataOutput,java.lang.String)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:cedeActive(int)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:writeToNew(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.BoundedByteArrayOutputStream:<init>(int,int)" : [ ],
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:execute(java.lang.Runnable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:compareTo(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FSDataInputStream:maxReadSizeForVectorReads()" : [ ],
  "org.apache.hadoop.io.ObjectWritable$NullInstance:<init>(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.PseudoDelegationTokenAuthenticator:<init>()" : [ ],
  "org.apache.hadoop.util.ShutdownHookManager:getShutdownTimeout(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:getPlugin(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileContext:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.util.StringUtils:formatPercent(double,int)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:needsInput()" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSelector:selectToken(org.apache.hadoop.io.Text,java.util.Collection)" : [ {
    "sourceMethod" : "getKind",
    "targetMethod" : "equals"
  }, {
    "sourceMethod" : "getService",
    "targetMethod" : "equals"
  } ],
  "org.apache.hadoop.ipc.ProcessingDetails:set(org.apache.hadoop.ipc.ProcessingDetails$Timing,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : [ ],
  "org.apache.hadoop.fs.Globber:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues3(int,int)" : [ ],
  "org.apache.hadoop.security.http.CrossOriginFilter:doCrossFilter(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "encodeHeader",
    "targetMethod" : "isCrossOrigin"
  }, {
    "sourceMethod" : "encodeHeader",
    "targetMethod" : "areOriginsAllowed"
  } ],
  "org.apache.hadoop.util.StringUtils:split(java.lang.String)" : [ ],
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordImpl:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.fs.shell.find.BaseExpression:finish()" : [ ],
  "org.apache.hadoop.io.WritableUtils:readStringSafely(java.io.DataInput,int)" : [ ],
  "org.apache.hadoop.ipc.Client:checkAsyncCall()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:getMountTableConfigLoader(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.ipc.WeightedTimeCostProvider:getCost(org.apache.hadoop.ipc.ProcessingDetails)" : [ ],
  "org.apache.hadoop.ipc.Client:toString()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:progressable(org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.DUHelper:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.ipc.Server:getRemoteIp()" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$Cp:popPreserveOption(java.util.List)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:<init>(int)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:getNodeForNetworkLocation(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.util.StringUtils:getFormattedTimeWithDiff(org.apache.commons.lang3.time.FastDateFormat,long,long)" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort$Args:parseConfiggedPort(java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryUtils$WrapperRetryPolicy:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.crypto.CryptoFSDataInputStream:<init>(org.apache.hadoop.fs.FSDataInputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[])" : [ ],
  "org.apache.hadoop.io.DataInputByteBuffer:getPosition()" : [ ],
  "org.apache.hadoop.crypto.key.UserProvider:deleteKey(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:setExternalDelegationTokenSecretManager(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleQuantiles:query(double)" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:<init>(int,float)" : [ ],
  "org.apache.hadoop.io.MapFile$Merger:mergePass()" : [ ],
  "org.apache.hadoop.fs.Path:<init>(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.FailoverController:createReqInfo()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:canRelease(org.apache.hadoop.fs.impl.prefetch.BufferData)" : [ ],
  "org.apache.hadoop.fs.local.LocalFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getNumVCoresUsed()" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$WrappingRemoteIterator:sourceHasNext()" : [ ],
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:cancel()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementLargeReadOps(int)" : [ ],
  "org.apache.hadoop.util.ReflectionUtils:newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.NetUtils:getHostDetailsAsString(java.lang.String,int,java.lang.String)" : [ ],
  "org.apache.hadoop.util.DataChecksum:getHeader()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:isHadoopLogin()" : [ ],
  "org.apache.hadoop.fs.FileContext:truncate(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.fs.FutureDataInputStreamBuilder:build()" : [ ],
  "org.apache.hadoop.net.NetUtils:createSocketAddrUnresolved(java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicy$RetryAction:<init>(org.apache.hadoop.io.retry.RetryPolicy$RetryAction$RetryDecision,long)" : [ ],
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.permission.FsCreateModes:toString()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrAuthorizationSuccesses()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:addServiceUserRawCallVolume(org.apache.hadoop.metrics2.MetricsRecordBuilder)" : [ ],
  "org.apache.hadoop.log.LogLevel$Servlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "getParameter",
    "targetMethod" : "isLog4jLogger"
  }, {
    "sourceMethod" : "initHTML",
    "targetMethod" : "process"
  }, {
    "sourceMethod" : "getParameter",
    "targetMethod" : "process"
  } ],
  "org.apache.hadoop.fs.FileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.util.Timer:now()" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:parseCommandArgs(org.apache.hadoop.conf.Configuration,java.util.List)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.retry.RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:getReason()" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,double)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:blockSize(long)" : [ ],
  "org.apache.hadoop.security.ssl.SSLFactory:init()" : [ ],
  "org.apache.hadoop.util.ComparableVersion:compareTo(org.apache.hadoop.util.ComparableVersion)" : [ ],
  "org.apache.hadoop.util.IdentityHashStore:<init>(int)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:decommissionNode(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:removeXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawEncoderWithFallback(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:createCodec(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ ],
  "org.apache.hadoop.security.KDiag:dumpTokens(org.apache.hadoop.security.UserGroupInformation)" : [ {
    "sourceMethod" : "getKind",
    "targetMethod" : "println"
  } ],
  "org.apache.hadoop.io.compress.CodecPool:payback(java.util.Map,java.lang.Object)" : [ ],
  "org.apache.hadoop.io.retry.CallReturn:<init>(java.lang.Object,java.lang.Throwable,org.apache.hadoop.io.retry.CallReturn$State)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:listCorruptFileBlocks(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainOutputStream:close()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:toString()" : [ {
    "sourceMethod" : "blocks",
    "targetMethod" : "getIntList"
  } ],
  "org.apache.hadoop.security.Groups:parseStaticMapping(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getStringCollection"
  } ],
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:getDelay(java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32GzipFileChecksum:<init>()" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:bind(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:hashCode()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:disconnect(com.jcraft.jsch.ChannelSftp)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayEncodingState:convertToByteBufferState()" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:sendLogLevelRequest()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getWriteOps()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker:getProtocolImpl(org.apache.hadoop.ipc.RPC$Server,java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:reinit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression:getSupportedAlgorithms()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferData:toString()" : [ ],
  "org.apache.hadoop.http.ProfileServlet$Event:fromInternalName(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:available()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:filesystem(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.conf.Configuration$DeprecatedKeyInfo:getWarningMessage(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.MD5Hash:setDigest(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:exists(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newCounter(java.lang.String,java.lang.String,long)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "newCounter"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:requestPrefetch(int)" : [ ],
  "org.apache.hadoop.service.ServiceStateException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.store.ByteBufferInputStream:mark(int)" : [ ],
  "org.apache.hadoop.fs.shell.find.And:registerExpression(org.apache.hadoop.fs.shell.find.ExpressionFactory)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer$ValueRegister:close()" : [ ],
  "org.apache.hadoop.util.ThreadUtil:sleepAtLeastIgnoreInterrupts(long)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler:getLowerLayerAsyncReturn()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcDetailedMetrics:create(int)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResourceObject(org.apache.hadoop.conf.Configuration$Resource)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getFileChecksum(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.Options$CreateOpts:blockSize(long)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:primitiveCreate(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:connect()" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "connect"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "connect"
  } ],
  "org.apache.hadoop.io.SequenceFile$Sorter:merge(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "merge"
  }, {
    "sourceMethod" : "getParent",
    "targetMethod" : "writeFile"
  }, {
    "sourceMethod" : "cloneFileAttributes",
    "targetMethod" : "writeFile"
  }, {
    "sourceMethod" : "merge",
    "targetMethod" : "writeFile"
  } ],
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:setInput(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.InputBuffer:reset(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader$StartOption:<init>(long)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:resolvePartialGroupNames(java.lang.String,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getOutput",
    "targetMethod" : "parsePartialGroupNames"
  } ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension:close()" : [ ],
  "org.apache.hadoop.net.SocketInputWrapper:getReadableByteChannel()" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getBlockSize()" : [ ],
  "org.apache.hadoop.security.SecurityUtil:buildDTServiceName(java.net.URI,int)" : [ {
    "sourceMethod" : "createSocketAddr",
    "targetMethod" : "buildTokenService"
  } ],
  "org.apache.hadoop.ha.ZKFailoverController:doCedeActive(int)" : [ {
    "sourceMethod" : "getGracefulFenceTimeout",
    "targetMethod" : "getProxy"
  } ],
  "org.apache.hadoop.fs.shell.MoveCommands$MoveFromLocal:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:close()" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:<init>(java.net.URI,org.apache.hadoop.crypto.key.kms.KMSClientProvider[],org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:appendRaw(byte[],int,int,org.apache.hadoop.io.SequenceFile$ValueBytes)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getXAttrs"
  } ],
  "org.apache.hadoop.io.Text:charAt(int)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:setDataConnectionMode(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.conf.Configuration:updateConnectAddr(java.lang.String,java.lang.String,java.lang.String,java.net.InetSocketAddress)" : [ {
    "sourceMethod" : "createSocketAddrForHost",
    "targetMethod" : "updateConnectAddr"
  } ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:numDroppedConnections()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:initSystemMBean()" : [ ],
  "org.apache.hadoop.fs.FileUtil:grantPermissions(java.io.File)" : [ ],
  "org.apache.hadoop.net.NetUtils:getOutputStream(java.net.Socket)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getStartOffset(int)" : [ ],
  "org.apache.hadoop.util.LightWeightGSet:computeCapacity(double,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.CompositeCrcFileChecksum:toString()" : [ ],
  "org.apache.hadoop.util.ShutdownHookManager:shutdownExecutor(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_toJsonString(java.io.Serializable)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:toString()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getFileChecksum(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:selectDelegationToken(java.net.URL,org.apache.hadoop.security.Credentials)" : [ {
    "sourceMethod" : "buildTokenService",
    "targetMethod" : "getToken"
  } ],
  "org.apache.hadoop.crypto.key.UserProvider:rollNewVersion(java.lang.String,byte[])" : [ {
    "sourceMethod" : "serialize",
    "targetMethod" : "addSecretKey"
  } ],
  "org.apache.hadoop.ha.HAAdmin:printUsage(java.io.PrintStream)" : [ ],
  "org.apache.hadoop.io.compress.CompressionInputStream:close()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:createRemoteUser(java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getKerberosLoginRenewalExecutor()" : [ ],
  "org.apache.hadoop.security.token.Token:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.ipc.WeightedRoundRobinMultiplexer:getAndAdvanceCurrentIndex()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:maximums()" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:hasCapability(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[],long)" : [ ],
  "org.apache.hadoop.conf.Configuration:clear()" : [ ],
  "org.apache.hadoop.io.OutputBuffer:write(java.io.InputStream,int)" : [ ],
  "org.apache.hadoop.util.GcTimeMonitor:calculateGCTimePercentageWithinObservedInterval()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState:<init>(org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder,java.nio.ByteBuffer[],int[],java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$BlockUploadData:toByteArray()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicIntegerCounter(java.lang.String,java.util.concurrent.atomic.AtomicInteger)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:getWeightUsingNetworkLocation(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.HttpUserGroupInformation:get()" : [ ],
  "org.apache.hadoop.metrics2.util.Servers:parse(java.lang.String,int)" : [ ],
  "org.apache.hadoop.io.erasurecode.grouper.BlockGrouper:makeBlockGroup(org.apache.hadoop.io.erasurecode.ECBlock[],org.apache.hadoop.io.erasurecode.ECBlock[])" : [ ],
  "org.apache.hadoop.ha.HAAdmin:printUsage(java.io.PrintStream,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:getRootLink()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getContentSummary(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getContentSummary"
  } ],
  "org.apache.hadoop.ha.HAServiceProtocolHelper:transitionToStandby(org.apache.hadoop.ha.HAServiceProtocol,org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : [ ],
  "org.apache.hadoop.fs.Path:getParent()" : [ ],
  "org.apache.hadoop.http.HttpServer2$Builder:build()" : [ ],
  "org.apache.hadoop.security.token.Token:renew(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.MachineList:<init>(java.util.Collection,org.apache.hadoop.util.MachineList$InetAddressFactory)" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "append"
  } ],
  "org.apache.hadoop.fs.AbstractFileSystem:getStatistics(java.net.URI)" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:close()" : [ ],
  "org.apache.hadoop.util.RunJar:unJar(java.io.File,java.io.File)" : [ ],
  "org.apache.hadoop.fs.FileSystem$DirListingIterator:hasNext()" : [ ],
  "org.apache.hadoop.service.launcher.IrqHandler:bind()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$HadoopLoginModule:commit()" : [ ],
  "org.apache.hadoop.security.SaslRpcClient$SaslClientCallbackHandler:<init>(org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.fs.ContentSummary:formatSize(long,boolean)" : [ ],
  "org.apache.hadoop.util.WeakReferenceMap:put(java.lang.Object,java.lang.Object)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:mergePass(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "suffix",
    "targetMethod" : "cloneFileAttributes"
  }, {
    "sourceMethod" : "suffix",
    "targetMethod" : "merge"
  }, {
    "sourceMethod" : "cloneFileAttributes",
    "targetMethod" : "writeFile"
  }, {
    "sourceMethod" : "merge",
    "targetMethod" : "writeFile"
  }, {
    "sourceMethod" : "suffix",
    "targetMethod" : "writeFile"
  } ],
  "org.apache.hadoop.http.HttpServer2:addJerseyResourcePackage(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.util.HHUtil:getPiggyBacksFromInput(java.nio.ByteBuffer[],int[],int,int,org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder)" : [ ],
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.io.File,boolean,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.InputBuffer:<init>()" : [ ],
  "org.apache.hadoop.util.DiskChecker:checkDirWithDiskIo(org.apache.hadoop.fs.LocalFileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "pathToFile",
    "targetMethod" : "doDiskIo"
  } ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_gauges(java.io.Serializable)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:<init>(org.apache.hadoop.io.file.tfile.TFile$Reader,org.apache.hadoop.io.file.tfile.TFile$Reader$Location,org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.AbstractMapWritable:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getLinkTarget(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.util.SignalLogger:register(org.slf4j.Logger)" : [ ],
  "org.apache.hadoop.ipc.Client$Connection$1:run()" : [ ],
  "org.apache.hadoop.fs.GlobExpander:expandLeftmost(org.apache.hadoop.fs.GlobExpander$StringWithOffset)" : [ ],
  "org.apache.hadoop.util.InstrumentedWriteLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.ReentrantReadWriteLock,long,long,org.apache.hadoop.util.Timer)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  } ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:internalReset()" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:doSaslReply(org.apache.hadoop.thirdparty.protobuf.Message)" : [ ],
  "org.apache.hadoop.io.DefaultStringifier:<init>(org.apache.hadoop.conf.Configuration,java.lang.Class)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:getBytesWritten()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:snapshotMap(java.util.Map)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getStatistics(java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.LocatedFileStatus:<init>(long,boolean,int,long,long,long,org.apache.hadoop.fs.permission.FsPermission,java.lang.String,java.lang.String,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.util.Set,org.apache.hadoop.fs.BlockLocation[])" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:print()" : [ ],
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],long,long,boolean)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:build()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:addToCacheAndRelease(org.apache.hadoop.fs.impl.prefetch.BufferData,java.util.concurrent.Future,java.time.Instant)" : [ {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "addToCache"
  }, {
    "sourceMethod" : "getBuffer",
    "targetMethod" : "cachePut"
  }, {
    "sourceMethod" : "getBlockNumber",
    "targetMethod" : "cachePut"
  } ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.ClientCache:getClient(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:incrementCounter(java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.DummyErasureDecoder:prepareDecodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.ipc.ObserverRetryOnActiveException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.IOUtils:closeStreams(java.io.Closeable[])" : [ ],
  "org.apache.hadoop.security.alias.UserProvider:getAliases()" : [ ],
  "org.apache.hadoop.io.Text:set(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:solveVandermondeSystem(int[],int[])" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:<init>(int)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_create()" : [ ],
  "org.apache.hadoop.ipc.Server$Call:abortResponse(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.ipc.Server$FatalRpcServerException:<init>(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcErrorCodeProto,java.io.IOException)" : [ ],
  "org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter:toLowerCase(javax.servlet.http.HttpServletRequest)" : [ ],
  "org.apache.hadoop.conf.ConfServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "parseAcceptHeader",
    "targetMethod" : "writeResponse"
  }, {
    "sourceMethod" : "getConfFromContext",
    "targetMethod" : "writeResponse"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawErasureCoderFactory:createEncoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.io.Text:find(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withLongFunctionCounter(java.lang.String,java.util.function.ToLongFunction)" : [ ],
  "org.apache.hadoop.util.CacheableIPList:isIn(java.lang.String)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators:toList(org.apache.hadoop.fs.RemoteIterator)" : [ ],
  "org.apache.hadoop.io.UTF8:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.ipc.RPC$Server:initProtocolMetaInfo(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:parseExpression(java.util.Deque)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getAclStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:setAuthenticationMethod(org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod)" : [ ],
  "org.apache.hadoop.crypto.OpensslCtrCryptoCodec$OpensslCtrCipher:decrypt(java.nio.ByteBuffer,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:fromStorageStatistics(org.apache.hadoop.fs.StorageStatistics)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "withLongFunctionCounter"
  } ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getChecksumOpt()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:isValidName(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Client$ConnectionId:<init>(java.net.InetSocketAddress,java.lang.Class,org.apache.hadoop.security.UserGroupInformation,int,org.apache.hadoop.io.retry.RetryPolicy,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ha.NodeFencer:createFenceMethod(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:releaseDoneBlocks()" : [ ],
  "org.apache.hadoop.fs.FileRange:createFileRange(long,int)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.compress.DefaultCodec:createDecompressor()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getAclStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileUtil:checkDependencies(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:appendIfExists(boolean)" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,double)" : [ ],
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping:getGroups(java.lang.String)" : [ {
    "sourceMethod" : "getGroups",
    "targetMethod" : "getNetgroups"
  } ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:isPermissionLoaded()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:sendMTFValues1(int,int)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getInitialWorkingDirectory()" : [ ],
  "org.apache.hadoop.security.authorize.ProxyUsers:refreshSuperUserGroupsConfiguration(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.PathNotFoundException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:chmod(java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.ExecutorServiceFuturePool:shutdown(org.slf4j.Logger,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.util.ChunkedArrayList:<init>()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.EvaluatingStatisticsMap:<init>()" : [ ],
  "org.apache.hadoop.util.Sets:newHashSet(java.util.Iterator)" : [ {
    "sourceMethod" : "newHashSet",
    "targetMethod" : "addAll"
  } ],
  "org.apache.hadoop.io.WritableFactories:newInstance(java.lang.Class)" : [ ],
  "org.apache.hadoop.util.ComparableVersion:parseItem(boolean,java.lang.String)" : [ ],
  "org.apache.hadoop.security.Groups$GroupCacheLoader:fetchGroupSet(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:setTimeout(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:listStatusIterator(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String[],java.security.cert.X509Certificate)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:getReturnMessage(java.lang.reflect.Method,org.apache.hadoop.ipc.RpcWritable$Buffer)" : [ ],
  "org.apache.hadoop.util.FindClass:getResource(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:readAndProcess()" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators:foreach(org.apache.hadoop.fs.RemoteIterator,org.apache.hadoop.util.functional.ConsumerRaisingIOE)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$TestingGroups:<init>(org.apache.hadoop.security.Groups)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:retrievePassword(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.fs.impl.FsLinkResolution:<init>(org.apache.hadoop.fs.impl.FsLinkResolution$FsLinkResolutionFunction)" : [ ],
  "org.apache.hadoop.security.token.Token:identifierToString(java.lang.StringBuilder)" : [ ],
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency:getDependency(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.net.NodeBase:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:read(byte[])" : [ ],
  "org.apache.hadoop.io.serializer.SerializationFactory:add(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "getClassByName",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.fs.RawLocalFileSystem:makeAbsolute(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:optLong(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getDefaultReplication(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getNetworkBytesWritten()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.http.PrometheusServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.io.BooleanWritable:<init>(boolean)" : [ ],
  "org.apache.hadoop.ipc.ClientCache:getClient(org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.permission.AclStatus:getEffectivePermission(org.apache.hadoop.fs.permission.AclEntry,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "getPermission",
    "targetMethod" : "and"
  }, {
    "sourceMethod" : "getGroupAction",
    "targetMethod" : "and"
  } ],
  "org.apache.hadoop.metrics2.impl.MetricCounterInt:<init>(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.io.compress.CodecPool:getCompressor(org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "borrow",
    "targetMethod" : "updateLeaseCount"
  } ],
  "org.apache.hadoop.ipc.CallQueueManager:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.conf.Configuration$Resource:<init>(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$UnboundMethod:invokeChecked(java.lang.Object,java.lang.Object[])" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.SequenceFile$Sorter:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.io.RawComparator,java.lang.Class,java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:getGroup()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtobufRpcEngineCallbackImpl:<init>()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getHarHash(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Server$ConnectionManager:closeIdle(boolean)" : [ ],
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency$RawScriptBasedMappingWithDependency:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:midKey()" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:setReplication(org.apache.hadoop.fs.Path,short)" : [ {
    "sourceMethod" : "getChecksumFile",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkGreater(long,java.lang.String,long,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:<init>(org.apache.hadoop.crypto.key.kms.KMSClientProvider[],long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsContext_enabled()" : [ ],
  "org.apache.hadoop.io.BinaryComparable:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Metadata:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.impl.FutureIOSupport:raiseInnerCause(java.util.concurrent.CompletionException)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:setIndexInterval(org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.security.CompositeGroupsMapping:loadMappingProviders()" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "addMappingProvider"
  } ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:configureSinks()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getTrashRoot(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm:returnDecompressor(org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.fs.shell.CommandFormat:addOptionWithValue(java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:openConnection(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String)" : [ {
    "sourceMethod" : "getCurrentUser",
    "targetMethod" : "selectDelegationToken"
  }, {
    "sourceMethod" : "getCredentials",
    "targetMethod" : "selectDelegationToken"
  } ],
  "org.apache.hadoop.io.SequenceFile$Reader$LengthOption:<init>(long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "unsetStoragePolicy"
  } ],
  "org.apache.hadoop.ipc.RpcWritable$Buffer:getValue(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:readOnlyMountTable(java.lang.String,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "readOnlyMountTable"
  } ],
  "org.apache.hadoop.service.launcher.ServiceLauncher$MinimalGenericOptionsParser:<init>(org.apache.hadoop.conf.Configuration,org.apache.commons.cli.Options,java.lang.String[])" : [ ],
  "org.apache.hadoop.ha.ShellCommandFencer:checkArgs(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:resolve(java.lang.String,boolean)" : [ {
    "sourceMethod" : "getDstPath",
    "targetMethod" : "replaceRegexCaptureGroupInPath"
  }, {
    "sourceMethod" : "getSrcPattern",
    "targetMethod" : "replaceRegexCaptureGroupInPath"
  }, {
    "sourceMethod" : "getDstPath",
    "targetMethod" : "buildResolveResultForRegexMountPoint"
  }, {
    "sourceMethod" : "getRemainingPathStr",
    "targetMethod" : "buildResolveResultForRegexMountPoint"
  } ],
  "org.apache.hadoop.fs.ChecksumFs:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:gauges()" : [ ],
  "org.apache.hadoop.net.DNS:getIPsAsInetAddressList(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getStorageBytesRead()" : [ ],
  "org.apache.hadoop.security.SaslRpcClient$WrappedInputStream:read(byte[])" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:unregisterSource(java.lang.String)" : [ ],
  "org.apache.hadoop.util.JvmPauseMonitor:serviceStart()" : [ ],
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:close()" : [ ],
  "org.apache.hadoop.http.HttpServer2$Builder:setEnabledProtocols(org.eclipse.jetty.util.ssl.SslContextFactory)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getTrimmedStrings"
  } ],
  "org.apache.hadoop.io.Text:decode(byte[],int,int,boolean)" : [ ],
  "org.apache.hadoop.fs.Options$HandleOpt:exact()" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:<init>()" : [ ],
  "org.apache.hadoop.security.ssl.ReloadingX509KeystoreManager:loadFrom(java.nio.file.Path)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:getPasswordFromCredentialProviders(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader:extractQueryParameters(java.lang.String)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:getAuthenticationMethod(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "toUpperCase"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:blockNumber()" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics$Singleton:shutdown()" : [ ],
  "org.apache.hadoop.security.authorize.ImpersonationProvider:authorize(org.apache.hadoop.security.UserGroupInformation,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkFallback(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:mustDouble(java.lang.String,double)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Invoker:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" : [ {
    "sourceMethod" : "methodToTraceString",
    "targetMethod" : "newScope"
  } ],
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolClientSideTranslatorPB:close()" : [ ],
  "org.apache.hadoop.fs.shell.find.ExpressionFactory:createExpression(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addCounter(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:clearStatistics()" : [ ],
  "org.apache.hadoop.conf.Configuration:handleDeprecation(org.apache.hadoop.conf.Configuration$DeprecationContext,java.lang.String)" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:sendSaslMessage(java.io.OutputStream,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPConnectionPool:shutdown()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.ipc.Server$RpcCall:doResponse(java.lang.Throwable,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$RpcStatusProto)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:getReason()" : [ ],
  "org.apache.hadoop.fs.PathIsNotEmptyDirectoryException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.AvroFSInput:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem:loadFileSystems()" : [ ],
  "org.apache.hadoop.security.HadoopKerberosName:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.Path:getOptionalParentPath()" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:getPhysicalMemorySize()" : [ ],
  "org.apache.hadoop.ipc.Client$ConnectionId:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue$Processor:kill(org.apache.hadoop.util.Daemon)" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell$CreateCommand:execute()" : [ ],
  "org.apache.hadoop.fs.FileContext$FCDataOutputStreamBuilder:build()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile:getFSOutputBufferSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:and(org.apache.hadoop.util.bloom.Filter)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.RSErasureDecoder:prepareDecodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getDeferredRpcProcessingMean()" : [ ],
  "org.apache.hadoop.ipc.Server$RpcCall:toString()" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:getLibJars(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:<init>(java.lang.String,int)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.InvalidPathException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:<init>(java.net.URI[],org.apache.hadoop.conf.Configuration,int,java.util.EnumSet)" : [ ],
  "org.apache.hadoop.conf.ConfigurationWithLogging:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.ApplicationClassLoader:loadClass(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:completeLocalOutput(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.alias.LocalKeyStoreProvider:stashOriginalFilePermissions()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:createCache(int,org.apache.hadoop.fs.statistics.DurationTrackerFactory)" : [ ],
  "org.apache.hadoop.security.WhitelistBasedResolver:getServerProperties(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.CoderUtil:findFirstValidInput(java.lang.Object[])" : [ ],
  "org.apache.hadoop.ipc.ProtobufWrapperLegacy:writeTo(org.apache.hadoop.ipc.ResponseBuffer)" : [ ],
  "org.apache.hadoop.conf.Configuration:getPasswordFromConfig(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.ByteBufferUtil:fallbackRead(java.io.InputStream,org.apache.hadoop.io.ByteBufferPool,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,short)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getDefaultBlockSize",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.io.compress.CompressionCodecFactory:addCodec(org.apache.hadoop.io.compress.CompressionCodec)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:<init>()" : [ ],
  "org.apache.hadoop.io.UTF8:hashCode()" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:checkIoStatisticsAvailable()" : [ ],
  "org.apache.hadoop.security.Groups$TimerToTickerAdapter:read()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:entry()" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,int,short,long,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.util.Progressable,org.apache.hadoop.io.SequenceFile$Metadata)" : [ {
    "sourceMethod" : "replication",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "metadata",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "file",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "progressable",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "blockSize",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "bufferSize",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.fs.LocalDirAllocator:obtainContext(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.RetryCache$CacheEntryWithPayload:hashCode()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:finalize()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:setContext(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:replaceRegexCaptureGroupInPath(java.lang.String,java.util.regex.Matcher,java.lang.String,java.util.Set)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:truncate(org.apache.hadoop.fs.Path,long)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "truncate"
  } ],
  "org.apache.hadoop.security.CompositeGroupsMapping:prepareConf(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:<init>(org.apache.hadoop.io.file.tfile.TFile$Reader,org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.http.AdminAuthorizedServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getFileStatus"
  } ],
  "org.apache.hadoop.io.compress.CodecPool:getDecompressor(org.apache.hadoop.io.compress.CompressionCodec)" : [ {
    "sourceMethod" : "borrow",
    "targetMethod" : "updateLeaseCount"
  } ],
  "org.apache.hadoop.util.Sets:newTreeSet(java.lang.Iterable)" : [ {
    "sourceMethod" : "newTreeSet",
    "targetMethod" : "addAll"
  } ],
  "org.apache.hadoop.fs.FileStatus:hashCode()" : [ ],
  "org.apache.hadoop.fs.FileContext:setStoragePolicy(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getChildFileSystems()" : [ {
    "sourceMethod" : "getMountPoints",
    "targetMethod" : "initializeMountedFileSystems"
  } ],
  "org.apache.hadoop.util.Shell:<init>()" : [ ],
  "org.apache.hadoop.security.protocolPB.RefreshAuthorizationPolicyProtocolClientSideTranslatorPB:refreshServiceAcl()" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.net.SocketInputWrapper:setTimeout(long)" : [ ],
  "org.apache.hadoop.ipc.Server:getRpcRequestWrapper(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcKindProto)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$RpcProtobufRequest:<init>()" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$FilteringRemoteIterator:hasNext()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:registerMetrics2Source(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:getLongStatistics()" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:delete(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.fs.FSInputChecker:read1(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.FindClass:printStack(java.lang.Throwable,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderExtension:rollNewVersion(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server$Responder:doRespond(org.apache.hadoop.ipc.Server$RpcCall)" : [ ],
  "org.apache.hadoop.conf.Configuration:iterator()" : [ ],
  "org.apache.hadoop.io.compress.SnappyCodec:createCompressor()" : [ ],
  "org.apache.hadoop.io.compress.CodecPool:getLeasedDecompressorsCount(org.apache.hadoop.io.compress.CompressionCodec)" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:setInstance(org.apache.hadoop.metrics2.MetricsSystem)" : [ ],
  "org.apache.hadoop.conf.Configuration:get(java.lang.String)" : [ ],
  "org.apache.hadoop.io.SecureIOUtils:forceSecureOpenForRandomRead(java.io.File,java.lang.String,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getGroup",
    "targetMethod" : "checkStat"
  }, {
    "sourceMethod" : "getOwner",
    "targetMethod" : "checkStat"
  } ],
  "org.apache.hadoop.fs.ContentSummary:<init>(org.apache.hadoop.fs.ContentSummary$Builder)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getInstance(java.lang.String,int,org.apache.hadoop.ipc.DecayRpcScheduler)" : [ ],
  "org.apache.hadoop.util.CrcComposer:newStripedCrcComposer(org.apache.hadoop.util.DataChecksum$Type,long,long)" : [ {
    "sourceMethod" : "getCrcPolynomialForType",
    "targetMethod" : "getMonomial"
  } ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:close()" : [ ],
  "org.apache.hadoop.fs.CreateFlag:validate(java.lang.Object,boolean,java.util.EnumSet)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$Factory:createProvider(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "createProviders"
  } ],
  "org.apache.hadoop.fs.shell.Command:getDescription()" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:resetChecksumBufSize()" : [ ],
  "org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool:get(java.nio.channels.SelectableChannel)" : [ {
    "sourceMethod" : "now",
    "targetMethod" : "trimIdleSelectors"
  } ],
  "org.apache.hadoop.conf.Configuration:addDeprecations(org.apache.hadoop.conf.Configuration$DeprecationDelta[])" : [ ],
  "org.apache.hadoop.util.Timer:monotonicNowNanos()" : [ ],
  "org.apache.hadoop.fs.FileSystem:createFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:interRemoveNodeWithEmptyRack(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCallQueue:addCall(org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall)" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsSnapshot_aggregate(java.io.Serializable,java.lang.Object)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:tryLoadFromPath(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.Server:logException(org.slf4j.Logger,java.lang.Throwable,org.apache.hadoop.ipc.Server$Call)" : [ ],
  "org.apache.hadoop.fs.UnionStorageStatistics:<init>(java.lang.String,org.apache.hadoop.fs.StorageStatistics[])" : [ ],
  "org.apache.hadoop.util.dynamic.DynConstructors$Builder:impl(java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.fs.QuotaUsage:isTypeQuotaSet()" : [ ],
  "org.apache.hadoop.conf.Configuration:appendXMLProperty(org.w3c.dom.Document,org.w3c.dom.Element,java.lang.String,org.apache.hadoop.conf.ConfigRedactor)" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.util.Shell:checkWindowsCommandLineLength(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$TableBuilder:printToStream(java.io.PrintStream)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter:sort(org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "mergePass"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter:initializeAuthHandler(java.lang.String,javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSTokenRenewer:createKeyProvider(org.apache.hadoop.security.token.Token,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:noPasswordError()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getPathHandle(org.apache.hadoop.fs.FileStatus,org.apache.hadoop.fs.Options$HandleOpt[])" : [ {
    "sourceMethod" : "path",
    "targetMethod" : "createPathHandle"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$RBlockState:<init>(org.apache.hadoop.io.file.tfile.Compression$Algorithm,org.apache.hadoop.fs.FSDataInputStream,org.apache.hadoop.io.file.tfile.BCFile$BlockRegion,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.ElasticByteBufferPool$Key:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager$HadoopZookeeperFactory:newZooKeeper(java.lang.String,int,org.apache.zookeeper.Watcher,boolean,org.apache.zookeeper.client.ZKClientConfig)" : [ ],
  "org.apache.hadoop.util.Progress:complete()" : [ ],
  "org.apache.hadoop.conf.StorageUnit$3:getDefault(double)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndex:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.util.CrcComposer:update(byte[],int,int,long)" : [ {
    "sourceMethod" : "readInt",
    "targetMethod" : "update"
  } ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory$ByteBufferBlock:toString()" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:getRemainingPathStr(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getVirtualMemorySize()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:deleteBlockFileAndEvictCache(org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache$Entry)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.CompressionCodec$Util:createInputStreamWithCodecPool(org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.conf.Configuration,java.io.InputStream)" : [ {
    "sourceMethod" : "getDecompressor",
    "targetMethod" : "setTrackedDecompressor"
  }, {
    "sourceMethod" : "getDecompressor",
    "targetMethod" : "returnDecompressor"
  } ],
  "org.apache.hadoop.util.InstrumentedReadLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.ReentrantReadWriteLock,long,long,org.apache.hadoop.util.Timer)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream:getFileLength()" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableCounterInt:incr()" : [ ],
  "org.apache.hadoop.service.AbstractService:unregisterGlobalListener(org.apache.hadoop.service.ServiceStateChangeListener)" : [ ],
  "org.apache.hadoop.util.ExitUtil:halt(int)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:startupShutdownMessage(java.lang.String,java.util.List)" : [ {
    "sourceMethod" : "getHostname",
    "targetMethod" : "createStartupShutdownMessage"
  } ],
  "org.apache.hadoop.ipc.ClientId:toString(byte[])" : [ ],
  "org.apache.hadoop.fs.QuotaUsage:toString(boolean,boolean,java.util.List)" : [ ],
  "org.apache.hadoop.io.BloomMapFile:delete(org.apache.hadoop.fs.FileSystem,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.Count:getAndCheckStorageTypes(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getAdditionalTokenIssuers()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:addToLinkedListAndEvictIfRequired(org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache$Entry)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:<init>(java.lang.String,java.lang.String,org.apache.hadoop.metrics2.MetricsSink,java.lang.String,org.apache.hadoop.metrics2.MetricsFilter,org.apache.hadoop.metrics2.MetricsFilter,org.apache.hadoop.metrics2.MetricsFilter,int,int,int,float,int)" : [ ],
  "org.apache.hadoop.util.LightWeightGSet$SetIterator:remove()" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsFactory:getAnnotatedMetricsFactory()" : [ ],
  "org.apache.hadoop.util.Shell:checkHadoopHome()" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine:getClient(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileContext:getAclStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.RPC:getServerAddress(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Du:processOptions(java.util.LinkedList)" : [ {
    "sourceMethod" : "getOpt",
    "targetMethod" : "setHumanReadable"
  } ],
  "org.apache.hadoop.metrics2.lib.MutableStat:add(long)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:available()" : [ ],
  "org.apache.hadoop.security.Credentials:writeProtobufOutputStream(java.io.DataOutputStream)" : [ ],
  "org.apache.hadoop.conf.Configuration:<init>(boolean)" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping:getPassword(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getValue(org.apache.hadoop.io.BytesWritable)" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.lib.MethodMetric:<init>(java.lang.Object,java.lang.reflect.Method,org.apache.hadoop.metrics2.MetricsInfo,org.apache.hadoop.metrics2.annotation.Metric$Type)" : [ ],
  "org.apache.hadoop.conf.Configuration:setClass(java.lang.String,java.lang.Class,java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.GetSpaceUsed$Builder:getKlass()" : [ ],
  "org.apache.hadoop.fs.FileSystem:closeAll()" : [ ],
  "org.apache.hadoop.ipc.Server:refreshServiceAcl(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.authorize.PolicyProvider)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:sendFileDescriptors(java.io.FileDescriptor[],byte[],int,int)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:isIOStatisticsSource(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:trackUpdateToken(org.apache.hadoop.util.functional.InvocationRaisingIOE)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$KeytabRenewalRunnable:relogin()" : [ ],
  "org.apache.hadoop.fs.DUHelper:calculateFolderSize(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FSBuilder:opt(java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.store.audit.HttpReferrerAuditHeader:set(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:getWorkingDirectory(com.jcraft.jsch.ChannelSftp)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:seekToCurrentValue()" : [ ],
  "org.apache.hadoop.fs.FileUtil:getJarsInDirectory(java.lang.String,boolean)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "getFileContext"
  }, {
    "sourceMethod" : "suffix",
    "targetMethod" : "globStatus"
  } ],
  "org.apache.hadoop.fs.FileSystem:close()" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:initRPC()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:pairedTrackerFactory(org.apache.hadoop.fs.statistics.DurationTrackerFactory,org.apache.hadoop.fs.statistics.DurationTrackerFactory)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:reencryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : [ {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "getCurrentKey"
  }, {
    "sourceMethod" : "getEncryptionKeyName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getCurrentKey",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "equals",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getVersionName",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getCurrentKey",
    "targetMethod" : "equals"
  }, {
    "sourceMethod" : "getConf",
    "targetMethod" : "getInstance"
  }, {
    "sourceMethod" : "getMaterial",
    "targetMethod" : "generateEncryptedKey"
  }, {
    "sourceMethod" : "getCurrentKey",
    "targetMethod" : "generateEncryptedKey"
  }, {
    "sourceMethod" : "getEncryptedKeyIv",
    "targetMethod" : "generateEncryptedKey"
  } ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:decayCurrentCosts()" : [ ],
  "org.apache.hadoop.util.concurrent.AsyncGetFuture:get(long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.ContentSummary:<init>()" : [ ],
  "org.apache.hadoop.fs.FileUtil:symLink(java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "getSymlinkCommand"
  } ],
  "org.apache.hadoop.io.MapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$HadoopConfiguration:getKerberosEntry()" : [ ],
  "org.apache.hadoop.net.DNS:getDefaultHost(java.lang.String,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.FsShell:close()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.EmptyIOStatisticsContextImpl:snapshot()" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:<init>(org.apache.hadoop.fs.ChecksumFs,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FsUrlConnection:connect()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:logAllUserInfo(org.slf4j.Logger,org.apache.hadoop.security.UserGroupInformation)" : [ {
    "sourceMethod" : "getCurrentUser",
    "targetMethod" : "logUserInfo"
  }, {
    "sourceMethod" : "getRealUser",
    "targetMethod" : "logUserInfo"
  }, {
    "sourceMethod" : "getLoginUser",
    "targetMethod" : "logUserInfo"
  } ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:createGroupIDExecutor(java.lang.String)" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:getLeaf(int,org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:hashCode()" : [ ],
  "org.apache.hadoop.security.Credentials:readTokenStorageStream(java.io.DataInputStream)" : [ ],
  "org.apache.hadoop.util.hash.Hash:getInstance(int)" : [ ],
  "org.apache.hadoop.io.serializer.DeserializerComparator:compare(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableCounter:<init>(org.apache.hadoop.metrics2.MetricsInfo)" : [ ],
  "org.apache.hadoop.fs.Path:suffix(java.lang.String)" : [ ],
  "org.apache.hadoop.util.ProgramDriver:addClass(java.lang.String,java.lang.Class,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:isAvailable()" : [ ],
  "org.apache.hadoop.util.Shell:getGroupsIDForUserCommand(java.lang.String)" : [ ],
  "org.apache.hadoop.util.BasicDiskValidator:checkStatus(java.io.File)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$DecayTask:<init>(org.apache.hadoop.ipc.DecayRpcScheduler,java.util.Timer)" : [ ],
  "org.apache.hadoop.conf.Configuration:getTrimmedStrings(java.lang.String,java.lang.String[])" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getTrimmedStrings"
  } ],
  "org.apache.hadoop.fs.FileSystem$Cache:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.CompressorStream:<init>(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:isLoginTicketBased()" : [ ],
  "org.apache.hadoop.ipc.CallerContext$Builder:append(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Client$IpcStreams:close()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$RealUser:hashCode()" : [ ],
  "org.apache.hadoop.conf.Configuration:substituteCommonVariables(java.lang.String)" : [ ],
  "org.apache.hadoop.util.DataChecksum:newCrc32C()" : [ ],
  "org.apache.hadoop.fs.FileStatus:isDir()" : [ ],
  "org.apache.hadoop.io.serializer.JavaSerializationComparator:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkNfly(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI[])" : [ {
    "sourceMethod" : "getDefaultMountTableName",
    "targetMethod" : "addLinkNfly"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:init(java.util.Properties)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getGroups(java.lang.String)" : [ ],
  "org.apache.hadoop.io.erasurecode.grouper.BlockGrouper:getRequiredNumParityBlocks()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:<init>(org.apache.commons.configuration2.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.util.KMSUtil:checkNotEmpty(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.DiskChecker:mkdirsWithExistsAndPermissionCheck(org.apache.hadoop.fs.LocalFileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "pathToFile",
    "targetMethod" : "mkdirsWithExistsCheck"
  } ],
  "org.apache.hadoop.ipc.Server:getListenerAddress()" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:flush()" : [ {
    "sourceMethod" : "constructNewPath",
    "targetMethod" : "renameOrFail"
  }, {
    "sourceMethod" : "constructOldPath",
    "targetMethod" : "renameOrFail"
  }, {
    "sourceMethod" : "constructOldPath",
    "targetMethod" : "backupToOld"
  }, {
    "sourceMethod" : "backupToOld",
    "targetMethod" : "revertFromOld"
  }, {
    "sourceMethod" : "constructOldPath",
    "targetMethod" : "revertFromOld"
  }, {
    "sourceMethod" : "constructNewPath",
    "targetMethod" : "writeToNew"
  }, {
    "sourceMethod" : "constructNewPath",
    "targetMethod" : "cleanupNewAndOld"
  }, {
    "sourceMethod" : "constructOldPath",
    "targetMethod" : "cleanupNewAndOld"
  } ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:createKey(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ {
    "sourceMethod" : "getCipher",
    "targetMethod" : "innerSetKeyVersion"
  } ],
  "org.apache.hadoop.fs.FileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:prepareMetaBlock(java.lang.String,org.apache.hadoop.io.file.tfile.Compression$Algorithm)" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:getPathToResolve(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:decompress(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:setCounter(java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable:<init>(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.impl.DefaultBulkDeleteOperation:bulkDelete(java.util.Collection)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:deleteKey(java.lang.String)" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  } ],
  "org.apache.hadoop.util.LineReader:<init>(java.io.InputStream)" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:addRow()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "removeAclEntries"
  } ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:getDelegationKey(int)" : [ ],
  "org.apache.hadoop.util.DataChecksum:calculateChunkedSums(java.nio.ByteBuffer,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.FSBuilder:opt(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StatisticDurationTracker:close()" : [ ],
  "org.apache.hadoop.http.HttpServer2$Builder:getPasswordString(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.net.SocketIOWithTimeout:<init>(java.nio.channels.SelectableChannel,long)" : [ ],
  "org.apache.hadoop.util.bloom.Filter:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:decompress(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.Utils:writeString(java.io.DataOutput,java.lang.String)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "writeVInt"
  } ],
  "org.apache.hadoop.util.CrcUtil:toSingleCrcString(byte[])" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:read()" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:getOptions()" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,long,long,org.apache.hadoop.io.compress.SplittableCompressionCodec$READ_MODE)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSOutputSummer:close()" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$CloseRemoteIterator:close()" : [ ],
  "org.apache.hadoop.conf.Configuration:setIfUnset(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.DiskValidatorFactory:getInstance(java.lang.String)" : [ ],
  "org.apache.hadoop.util.FindClass:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.functional.LazyAtomicReference:lazyAtomicReferenceFromSupplier(java.util.function.Supplier)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsCollectorImpl:addRecord(java.lang.String)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "addRecord"
  } ],
  "org.apache.hadoop.io.erasurecode.codec.RSErasureCodec:createDecoder()" : [ ],
  "org.apache.hadoop.fs.PartialListing:<init>(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:write(byte[])" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:delete(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "listStatus"
  } ],
  "org.apache.hadoop.http.ProfilerDisabledServlet:doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream:read()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics$StatisticsDataReference:cleanUp()" : [ ],
  "org.apache.hadoop.ipc.Server$Call:doResponse(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:mkdirs(org.apache.commons.net.ftp.FTPClient,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "isFile"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getPermission()" : [ ],
  "org.apache.hadoop.io.WritableUtils:readCompressedStringArray(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLaunchException:<init>(int,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableQuantiles$RolloverSample:<init>(org.apache.hadoop.metrics2.lib.MutableQuantiles)" : [ ],
  "org.apache.hadoop.util.ExitUtil:terminate(int)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleStat:stddev()" : [ ],
  "org.apache.hadoop.net.AbstractDNSToSwitchMapping:dumpTopology()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProtocolMetaInfoProxy(org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Compressor:reset()" : [ ],
  "org.apache.hadoop.security.SaslRpcServer$SaslDigestCallbackHandler:handle(javax.security.auth.callback.Callback[])" : [ {
    "sourceMethod" : "getIdentifier",
    "targetMethod" : "getPassword"
  } ],
  "org.apache.hadoop.metrics2.util.MBeans:getMBeanName(java.lang.String,java.lang.String,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.FileContext:deleteSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPointResolvedDstPathReplaceInterceptor:serializeToString()" : [ ],
  "org.apache.hadoop.util.Shell:getQualifiedBinInner(java.io.File,java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:renewDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:<init>(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:mayThrow(java.util.List)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:valueClass(java.lang.Class)" : [ ],
  "org.apache.hadoop.util.JvmPauseMonitor$Monitor:run()" : [ ],
  "org.apache.hadoop.fs.Globber:createGlobber(org.apache.hadoop.fs.FileContext)" : [ ],
  "org.apache.hadoop.fs.shell.Command:processPaths(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.RemoteIterator)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getModificationTime()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.AbstractNativeRawEncoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.shell.Truncate:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.ipc.Server:setupResponse(org.apache.hadoop.ipc.Server$RpcCall,org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:stringifySecurityProperty(java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$CompressedBytes:writeUncompressedBytes(java.io.DataOutputStream)" : [ ],
  "org.apache.hadoop.fs.FileSystem:listStatus(java.util.ArrayList,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:processPath(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.util.SemaphoredDelegatingExecutor:submit(java.lang.Runnable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setPermission"
  } ],
  "org.apache.hadoop.util.IntrusiveCollection:toArray(java.lang.Object[])" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureEncodingStep:performCoding(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : [ ],
  "org.apache.hadoop.service.launcher.HadoopUncaughtExceptionHandler:<init>()" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell$Edit:execute()" : [ ],
  "org.apache.hadoop.metrics2.sink.GraphiteSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrAuthorizationFailures()" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:getStat(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration$IntegerRanges:iterator()" : [ ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable:checkArray(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:getGroupsString()" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_toPrettyString(java.lang.Object)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:shutdown()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.util.DataChecksum:verifyChunked(org.apache.hadoop.util.DataChecksum$Type,java.util.zip.Checksum,byte[],int,int,int,byte[],int,java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileOutputStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.conf.Configuration:getTrimmedStringCollection(java.lang.String)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getTrimmedStringCollection"
  } ],
  "org.apache.hadoop.util.Shell$ShellTimeoutTimerTask:run()" : [ ],
  "org.apache.hadoop.ipc.Client$Connection$RpcRequestSender:run()" : [ {
    "sourceMethod" : "toByteArray",
    "targetMethod" : "sendRequest"
  } ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:createKeyInternal(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  }, {
    "sourceMethod" : "call",
    "targetMethod" : "parseJSONKeyVersion"
  } ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionInputStream:<init>(java.io.InputStream)" : [ ],
  "org.apache.hadoop.io.UTF8:set(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FSLinkResolver:resolve(org.apache.hadoop.fs.FileContext,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getLinkTarget",
    "targetMethod" : "qualifySymlinkTarget"
  }, {
    "sourceMethod" : "getUri",
    "targetMethod" : "qualifySymlinkTarget"
  } ],
  "org.apache.hadoop.security.token.DtFileOperations:matchService(org.apache.hadoop.security.token.DtFetcher,org.apache.hadoop.io.Text,java.lang.String)" : [ ],
  "org.apache.hadoop.util.SysInfo:newInstance()" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX:assertCodeLoaded()" : [ ],
  "org.apache.hadoop.fs.FileStatus:isFile()" : [ ],
  "org.apache.hadoop.tools.GetGroupsBase:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:getLocalPathToRead(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server:isServerFailOverEnabled()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,org.apache.hadoop.util.Progressable,org.apache.hadoop.io.SequenceFile$Metadata)" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:isLastBlock(int)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:fileSystem_openFile_available()" : [ ],
  "org.apache.hadoop.security.KDiag:error(java.lang.String,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:or(org.apache.hadoop.util.bloom.Filter)" : [ ],
  "org.apache.hadoop.io.file.tfile.BoundedRangeFileInputStream:read()" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:createGenericOptionsParser(org.apache.hadoop.conf.Configuration,java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:copy(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.HAServiceTarget:getZKFCProxy(org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.ipc.Server:updateMetrics(org.apache.hadoop.ipc.Server$Call,long,boolean)" : [ {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "addRpcEnQueueTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "addRpcEnQueueTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "addRpcQueueTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "addRpcQueueTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "addRpcLockWaitTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "addRpcLockWaitTime"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "addRpcProcessingTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "addRpcProcessingTime"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "addRpcResponseTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "addRpcResponseTime"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "addProcessingTime"
  }, {
    "sourceMethod" : "getDetailedMetricsName",
    "targetMethod" : "addProcessingTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "addProcessingTime"
  }, {
    "sourceMethod" : "getDetailedMetricsName",
    "targetMethod" : "addOverallProcessingTime"
  }, {
    "sourceMethod" : "getMetricsTimeUnit",
    "targetMethod" : "addOverallProcessingTime"
  }, {
    "sourceMethod" : "getProcessingDetails",
    "targetMethod" : "addResponseTime"
  }, {
    "sourceMethod" : "getDetailedMetricsName",
    "targetMethod" : "addResponseTime"
  }, {
    "sourceMethod" : "getProcessingDetails",
    "targetMethod" : "logSlowRpcCalls"
  }, {
    "sourceMethod" : "getDetailedMetricsName",
    "targetMethod" : "logSlowRpcCalls"
  } ],
  "org.apache.hadoop.fs.shell.Test:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableStat:add(long,long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:fsGetter()" : [ ],
  "org.apache.hadoop.ipc.Server:getSchedulerClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "convertSchedulerClass"
  } ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:exit(int,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.CachingKeyProvider:invalidateCache(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.QuotaUsage:formatSize(long,boolean)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:compression(org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec)" : [ ],
  "org.apache.hadoop.http.HtmlQuoting:main(java.lang.String[])" : [ {
    "sourceMethod" : "quoteHtmlChars",
    "targetMethod" : "unquoteHtmlChars"
  } ],
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMappingWithFallback:<init>()" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer$BlockAppender:close()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:unsetStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.RefreshResponse:successResponse()" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:cleanupCalls()" : [ ],
  "org.apache.hadoop.fs.shell.find.Name:<init>()" : [ ],
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],long,long,boolean)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:failoverOnNetworkException(int)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$Invoker:<init>(java.lang.Class,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:getAllServiceState()" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:hashCode()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:trackDuration(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.conf.ReconfigurableBase$ReconfigurationThread:run()" : [ ],
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.PathHandle)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getDefaultBlockSize(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:setAuthenticationMethod(org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toLowerCase",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:release(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.KDiag$KerberosDiagsFailure:<init>(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:getMetaBlock(java.lang.String)" : [ {
    "sourceMethod" : "getCompressionAlgorithm",
    "targetMethod" : "createReader"
  }, {
    "sourceMethod" : "getRegion",
    "targetMethod" : "createReader"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getXAttr(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.CommandFormat$TooManyArgumentsException:getMessage()" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainChannel:close()" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:serviceCreationFailure(java.lang.Exception)" : [ ],
  "org.apache.hadoop.util.ShutdownThreadsHelper:shutdownExecutorService(java.util.concurrent.ExecutorService)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:checkIfExists(org.apache.hadoop.fs.shell.PathData$FileTypeRequirement)" : [ ],
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:authorize(org.apache.hadoop.security.UserGroupInformation,java.net.InetAddress)" : [ {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "getProxySuperuserIpConfKey"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibDirectDecompressor(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:<init>()" : [ ],
  "org.apache.hadoop.service.launcher.IrqHandler:<init>(java.lang.String,org.apache.hadoop.service.launcher.IrqHandler$Interrupted)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:compareTo(byte[])" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:createLink(java.lang.String,java.lang.String,org.apache.hadoop.fs.viewfs.InodeTree$LinkType,java.lang.String,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "isInternalDir",
    "targetMethod" : "checkState"
  }, {
    "sourceMethod" : "getStrings",
    "targetMethod" : "stringToURI"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:listXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.Command:getUsage()" : [ ],
  "org.apache.hadoop.util.LightWeightGSet:remove(int,java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:reset()" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:managementOperation(org.apache.hadoop.security.authentication.server.AuthenticationToken,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ {
    "sourceMethod" : "getParameter",
    "targetMethod" : "toUpperCase"
  }, {
    "sourceMethod" : "createRemoteUser",
    "targetMethod" : "createProxyUser"
  }, {
    "sourceMethod" : "getDoAs",
    "targetMethod" : "createProxyUser"
  }, {
    "sourceMethod" : "createRemoteUser",
    "targetMethod" : "authorize"
  }, {
    "sourceMethod" : "createRemoteUser",
    "targetMethod" : "createToken"
  }, {
    "sourceMethod" : "getParameter",
    "targetMethod" : "createToken"
  }, {
    "sourceMethod" : "createToken",
    "targetMethod" : "delegationTokenToJSON"
  }, {
    "sourceMethod" : "getParameter",
    "targetMethod" : "decodeFromUrlString"
  }, {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "renewToken"
  }, {
    "sourceMethod" : "getParameter",
    "targetMethod" : "decodeFromUrlString"
  } ],
  "org.apache.hadoop.ipc.CallQueueManager:isServerFailOverEnabledByQueue()" : [ ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher$NotificationHandler:handle(org.apache.hadoop.net.unix.DomainSocket)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:rollLogDirIfNeeded()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$LinkedSegmentsDescriptor:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getTag(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:init(org.apache.commons.configuration2.SubsetConfiguration)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getDefaultReplication()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newGauge(java.lang.String,java.lang.String,int)" : [ {
    "sourceMethod" : "info",
    "targetMethod" : "newGauge"
  } ],
  "org.apache.hadoop.util.Shell:getSetPermissionCommand(java.lang.String,boolean,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractMultipartUploader:checkPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:doOp(org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider$ProviderCallable,int,boolean)" : [ ],
  "org.apache.hadoop.ipc.ProtocolMetaInfoServerSideTranslatorPB:getProtocolSignature(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureRequestProto)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$Put:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:saslProcess(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto)" : [ ],
  "org.apache.hadoop.fs.statistics.DurationStatisticSummary:<init>(java.lang.String,boolean,long,long,long,org.apache.hadoop.fs.statistics.MeanStatistic)" : [ ],
  "org.apache.hadoop.util.OperationDuration:<init>()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache:get(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementWriteOps(int)" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination$TargetFileSystem:writeStreamToFile(java.io.InputStream,org.apache.hadoop.fs.shell.PathData,boolean,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:hashCode()" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DataBlock:enterState(org.apache.hadoop.fs.store.DataBlocks$DataBlock$DestState,org.apache.hadoop.fs.store.DataBlocks$DataBlock$DestState)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.Validate:checkNotNullAndNotEmpty(java.lang.Iterable,java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getLastKey()" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32CastagnoliFileChecksum:<init>(int,long,org.apache.hadoop.io.MD5Hash)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$DiskBlock:flush()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.ByteArrayDecodingState:convertToByteBufferState()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addTimedOperation(java.lang.String,java.time.Duration)" : [ ],
  "org.apache.hadoop.fs.Path:<init>(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.net.NetUtils:createSocketAddrForHost(java.lang.String,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getEntryComparator()" : [ ],
  "org.apache.hadoop.service.launcher.AbstractLaunchableService:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getAllStoragePolicies()" : [ ],
  "org.apache.hadoop.fs.FileContext:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.DataInputBuffer:getLength()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFileDumper$Align:format(long,int,org.apache.hadoop.io.file.tfile.TFileDumper$Align)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableInverseQuantiles:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setAcl(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getGroup()" : [ ],
  "org.apache.hadoop.fs.shell.Command:expandArgument(java.lang.String)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:destroy()" : [ ],
  "org.apache.hadoop.fs.impl.FlagSet:<init>(java.lang.Class,java.lang.String,java.util.EnumSet)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:rollNewVersion(java.lang.String,byte[])" : [ {
    "sourceMethod" : "getCipher",
    "targetMethod" : "innerSetKeyVersion"
  } ],
  "org.apache.hadoop.fs.FsShellPermissions$Chmod:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.ipc.RetryCache:skipRetryCache(byte[],int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:toString(org.apache.commons.configuration2.Configuration)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.OpensslCipher:getInstance(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.DefaultCodec:createInputStream(java.io.InputStream)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.RSErasureDecoder:release()" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,long)" : [ ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:<init>(org.apache.hadoop.fs.FSDataOutputStream,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.service.ServiceStateModel:ensureCurrentState(org.apache.hadoop.service.Service$STATE)" : [ ],
  "org.apache.hadoop.fs.viewfs.ConfigUtil:addLinkMergeSlash(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:must(java.lang.String,float)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:transitionToStandby(org.apache.commons.cli.CommandLine)" : [ {
    "sourceMethod" : "createReqInfo",
    "targetMethod" : "transitionToStandby"
  }, {
    "sourceMethod" : "getProxy",
    "targetMethod" : "transitionToStandby"
  } ],
  "org.apache.hadoop.fs.viewfs.InodeTree$INodeDir:addDir(java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,boolean,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell$Get:validate()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getAccessTime()" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine:getProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.util.SequentialNumber:skipTo(long)" : [ ],
  "org.apache.hadoop.fs.BufferedFSInputStream:skip(long)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:getDelegationKey(int)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO:link(java.io.File,java.io.File)" : [ ],
  "org.apache.hadoop.security.http.CrossOriginFilter:initializeAllowedMethods(javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.util.XMLUtils:newSecureTransformerFactory()" : [ ],
  "org.apache.hadoop.fs.FSInputChecker:readAndDiscard(int)" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:cancelToken(org.apache.hadoop.security.token.Token,java.lang.String)" : [ {
    "sourceMethod" : "getIdentifier",
    "targetMethod" : "createTokenIdent"
  } ],
  "org.apache.hadoop.conf.Configuration$IntegerRanges:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.WeakReferenceMap:remove(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell$DeleteCommand:validate()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:stopSinks()" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:setData(java.lang.String,java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:close()" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPConnectionPool:disconnect(com.jcraft.jsch.ChannelSftp)" : [ ],
  "org.apache.hadoop.security.token.Token:hashCode()" : [ ],
  "org.apache.hadoop.conf.Configuration:get(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getMeanStatistic(java.lang.String)" : [ ],
  "org.apache.hadoop.net.SocketInputStream$Reader:<init>(java.nio.channels.ReadableByteChannel,long)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:reset()" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:cancelAllFuturesAndAwaitCompletion(java.util.Collection,boolean,java.time.Duration)" : [ ],
  "org.apache.hadoop.fs.FileSystem:openFileWithOptions(org.apache.hadoop.fs.PathHandle,org.apache.hadoop.fs.impl.OpenFileParameters)" : [ {
    "sourceMethod" : "getMandatoryKeys",
    "targetMethod" : "rejectUnknownMandatoryKeys"
  }, {
    "sourceMethod" : "getBufferSize",
    "targetMethod" : "open"
  } ],
  "org.apache.hadoop.util.InstrumentedWriteLock:unlock()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getUsed(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.Shell:execCommand(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.serializer.avro.AvroReflectSerialization:accept(java.lang.Class)" : [ ],
  "org.apache.hadoop.ipc.Server$RpcCall:getRemotePort()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:recomputeScheduleCache()" : [ ],
  "org.apache.hadoop.io.WritableComparator:compare(java.lang.Object,java.lang.Object)" : [ ],
  "org.apache.hadoop.security.KDiag:<init>()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer$KeyRegister:close()" : [ {
    "sourceMethod" : "size",
    "targetMethod" : "writeVInt"
  }, {
    "sourceMethod" : "getBuffer",
    "targetMethod" : "setFirstKey"
  }, {
    "sourceMethod" : "size",
    "targetMethod" : "setFirstKey"
  }, {
    "sourceMethod" : "getBuffer",
    "targetMethod" : "compare"
  }, {
    "sourceMethod" : "size",
    "targetMethod" : "compare"
  } ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:checkCreateRSRawEncoder()" : [ ],
  "org.apache.hadoop.io.SetFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:formatTokenId(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.conf.Configuration:setBooleanIfUnset(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocketWatcher:sendCallback(java.lang.String,java.util.TreeMap,org.apache.hadoop.net.unix.DomainSocketWatcher$FdSet,int)" : [ {
    "sourceMethod" : "getDomainSocket",
    "targetMethod" : "cleanupWithLogger"
  } ],
  "org.apache.hadoop.util.bloom.Key:<init>(byte[],double)" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecRegistry:getCoderByName(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:renewDelegationToken(org.apache.hadoop.security.token.Token)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.metrics2.impl.SinkQueue:consume(org.apache.hadoop.metrics2.impl.SinkQueue$Consumer)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.MultiSchemeDelegationTokenAuthenticationHandler:authenticate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" : [ ],
  "org.apache.hadoop.fs.FileSystem:newInstance(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getDefaultUri",
    "targetMethod" : "newInstance"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BoundedResourcePool:acquire()" : [ ],
  "org.apache.hadoop.ipc.Server:getAuxiliaryPortEstablishedQOP()" : [ ],
  "org.apache.hadoop.util.VersionInfo:_getBuildVersion()" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:createLogFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureEncoder:getOutputBlocks(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.conf.Configuration:dumpDeprecatedKeys()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:delete(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:updateMapInternal(org.apache.hadoop.thirdparty.com.google.common.collect.BiMap,java.lang.String,java.lang.String,java.lang.String,java.util.Map)" : [ {
    "sourceMethod" : "parseId",
    "targetMethod" : "reportDuplicateEntry"
  }, {
    "sourceMethod" : "parseId",
    "targetMethod" : "reportDuplicateEntry"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:relative()" : [ ],
  "org.apache.hadoop.crypto.CipherSuite:convert(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Writer:prepareMetaBlock(java.lang.String)" : [ {
    "sourceMethod" : "getDefaultCompressionAlgorithm",
    "targetMethod" : "prepareMetaBlock"
  } ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean,int,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getDefaultReplication",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getDefaultBlockSize",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.ipc.Server$Listener:doAccept(java.nio.channels.SelectionKey)" : [ {
    "sourceMethod" : "register",
    "targetMethod" : "addConnection"
  } ],
  "org.apache.hadoop.security.UserGroupInformation:getGroups()" : [ {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "getGroups"
  } ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeInt:<init>(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:<init>(java.io.InputStream,org.apache.hadoop.crypto.CryptoCodec,byte[],byte[])" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:get(java.lang.Object)" : [ ],
  "org.apache.hadoop.metrics2.util.MetricsCache:update(org.apache.hadoop.metrics2.MetricsRecord,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.TouchCommands$Touch:updateTime(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.shell.Command:runAll()" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:close()" : [ ],
  "org.apache.hadoop.io.SequenceFile$BlockCompressWriter:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec:getDecompressorType()" : [ ],
  "org.apache.hadoop.fs.FsShell:printHelp(java.io.PrintStream,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:<init>(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploader:innerPutPart(org.apache.hadoop.fs.Path,java.io.InputStream,int,org.apache.hadoop.fs.UploadHandle,long)" : [ {
    "sourceMethod" : "mergePaths",
    "targetMethod" : "mergePaths"
  }, {
    "sourceMethod" : "mergePaths",
    "targetMethod" : "createFile"
  } ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:innerSetCredential(java.lang.String,char[])" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Factory:isNativeBzip2Loaded(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "initSymbols"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "initSymbols"
  } ],
  "org.apache.hadoop.util.HostsFileReader:readFileToSet(java.lang.String,java.lang.String,java.util.Set)" : [ ],
  "org.apache.hadoop.security.token.DtFileOperations:doFormattedWrite(java.io.File,java.lang.String,org.apache.hadoop.security.Credentials,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "fileToPath",
    "targetMethod" : "writeTokenStorageFile"
  } ],
  "org.apache.hadoop.ha.ActiveStandbyElector:deleteWithRetries(java.lang.String,int)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceShutdownHook:unregister()" : [ ],
  "org.apache.hadoop.fs.shell.Delete:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.io.compress.lz4.Lz4Decompressor:decompress(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.DataChecksum:calculateChunkedSums(byte[],int,int,byte[],int)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FileContext:clearStatistics()" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:shouldAuthenticateOverKrb()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:concat(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path[])" : [ ],
  "org.apache.hadoop.security.SaslRpcClient$WrappedInputStream:read()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.XORRawDecoder:doDecode(org.apache.hadoop.io.erasurecode.rawcoder.ByteBufferDecodingState)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:readProcMemInfoFile(boolean)" : [ ],
  "org.apache.hadoop.fs.VectoredReadUtils:readRangeFrom(org.apache.hadoop.fs.PositionedReadable,org.apache.hadoop.fs.FileRange,java.util.function.IntFunction)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$FilteringRemoteIterator:<init>(org.apache.hadoop.fs.RemoteIterator,org.apache.hadoop.util.functional.FunctionRaisingIOE)" : [ ],
  "org.apache.hadoop.fs.impl.FutureIOSupport:propagateOptions(org.apache.hadoop.fs.FSBuilder,org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:verifyChangedServiceState(org.apache.hadoop.ha.HAServiceProtocol$HAServiceState)" : [ ],
  "org.apache.hadoop.fs.shell.Count:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:open(org.apache.hadoop.fs.Path,org.apache.hadoop.io.WritableComparator,org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Reader$Option[])" : [ {
    "sourceMethod" : "file",
    "targetMethod" : "prependOptions"
  } ],
  "org.apache.hadoop.fs.BatchedRemoteIterator:next()" : [ ],
  "org.apache.hadoop.io.LongWritable:<init>(long)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.AbstractNativeRawDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.log.LogThrottlingHelper:record(double[])" : [ {
    "sourceMethod" : "monotonicNow",
    "targetMethod" : "record"
  } ],
  "org.apache.hadoop.security.KDiag:printDefaultRealm()" : [ {
    "sourceMethod" : "stringifyException",
    "targetMethod" : "error"
  } ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:serviceMain(java.util.List)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:complete()" : [ ],
  "org.apache.hadoop.security.http.RestCsrfPreventionFilter:doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.RPC:waitForProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,int,long)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.ftp.FtpFs:getServerDefaults()" : [ ],
  "org.apache.hadoop.fs.ByteBufferUtil:streamHasByteBufferRead(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:loadPermissionInfoByNonNativeIO()" : [ {
    "sourceMethod" : "getGetPermissionCommand",
    "targetMethod" : "execCommand"
  } ],
  "org.apache.hadoop.fs.FilterFs:listCorruptFileBlocks(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.net.SocketOutputStream:<init>(java.nio.channels.WritableByteChannel,long)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor:setInput(byte[],int,int)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:poll()" : [ ],
  "org.apache.hadoop.io.compress.snappy.SnappyDecompressor:decompressDirect(java.nio.ByteBuffer,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:unregisterSource(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$Put:processOptions(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StatisticDurationTracker:toString()" : [ ],
  "org.apache.hadoop.fs.shell.find.BaseExpression:addChildren(java.util.Deque,int)" : [ ],
  "org.apache.hadoop.fs.FsUrlConnection:getInputStream()" : [ ],
  "org.apache.hadoop.fs.shell.PathData:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String)" : [ ],
  "org.apache.hadoop.ha.NodeFencer:parseMethod(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.ReconfigurableBase:setReconfigurationUtil(org.apache.hadoop.conf.ReconfigurationUtil)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:generateEncryptedKey(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkEncoder:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.util.StringUtils:join(char,java.lang.String[])" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:instance()" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getFS()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncodingStep:<init>(org.apache.hadoop.io.erasurecode.ECBlock[],org.apache.hadoop.io.erasurecode.ECBlock[],org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder,org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:endBlock()" : [ ],
  "org.apache.hadoop.util.Progress:toString(java.lang.StringBuilder)" : [ ],
  "org.apache.hadoop.util.HttpExceptionUtils:createJerseyExceptionResponse(javax.ws.rs.core.Response$Status,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec:createEncryptor()" : [ ],
  "org.apache.hadoop.fs.FileStatus:readFields(java.io.DataInput)" : [ {
    "sourceMethod" : "getPermission",
    "targetMethod" : "setPermission"
  }, {
    "sourceMethod" : "getOwner",
    "targetMethod" : "setOwner"
  }, {
    "sourceMethod" : "getGroup",
    "targetMethod" : "setGroup"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "setPath"
  }, {
    "sourceMethod" : "hasAcl",
    "targetMethod" : "attributes"
  }, {
    "sourceMethod" : "isErasureCoded",
    "targetMethod" : "attributes"
  }, {
    "sourceMethod" : "isEncrypted",
    "targetMethod" : "attributes"
  }, {
    "sourceMethod" : "isSnapshotEnabled",
    "targetMethod" : "attributes"
  } ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withAtomicLongMinimum(java.lang.String,java.util.concurrent.atomic.AtomicLong)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_create(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks:validateWriteArgs(byte[],int,int)" : [ ],
  "org.apache.hadoop.http.lib.StaticUserWebFilter:initFilter(org.apache.hadoop.http.FilterContainer,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.WritableRpcEngine$Invocation:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardDecompressor$ZStandardDirectDecompressor:finished()" : [ ],
  "org.apache.hadoop.fs.MD5MD5CRC32FileChecksum:toString()" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec$GzipZlibCompressor:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.ftp.FtpFs:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:createKey(java.lang.String,org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.fs.Path:isUriPathAbsolute()" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_minimums(java.io.Serializable)" : [ ],
  "org.apache.hadoop.conf.Configuration:addDeprecation(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:<init>(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.net.NetUtils:normalizeHostNames(java.util.Collection)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:fileSystem_openFile(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.lang.String,org.apache.hadoop.fs.FileStatus,java.lang.Long,java.util.Map)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:atEnd()" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket$DomainInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:close()" : [ ],
  "org.apache.hadoop.util.HostsFileReader:getExcludedHosts()" : [ ],
  "org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB:close()" : [ ],
  "org.apache.hadoop.net.NetworkTopologyWithNodeGroup:remove(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:obtainDelegationTokenAuthenticator(org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator,org.apache.hadoop.security.authentication.client.ConnectionConfigurator)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:listXAttrs(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileStatus:getSymlink()" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStream:hasCapability(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:freeBuffers()" : [ ],
  "org.apache.hadoop.fs.Globber:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:convert(org.apache.hadoop.ha.HAServiceProtocol$StateChangeRequestInfo)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory:releaseBuffer(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProvider:getCurrentKey(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.DF:getPercentUsed()" : [ ],
  "org.apache.hadoop.io.Text:readWithKnownLength(java.io.DataInput,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.conf.ReconfigurationException:<init>(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:addDeprecation(java.lang.String,java.lang.String[],java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:addCredentials(org.apache.hadoop.security.Credentials)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:isExpired()" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:setDataWithRetries(java.lang.String,byte[],int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:createSecretKey(byte[])" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:getGroups(java.lang.String)" : [ {
    "sourceMethod" : "getGroups",
    "targetMethod" : "getNetgroups"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.EncodingState:checkParameters(java.lang.Object[],java.lang.Object[])" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:processConnectionContext(org.apache.hadoop.ipc.RpcWritable$Buffer)" : [ {
    "sourceMethod" : "getUserName",
    "targetMethod" : "createProxyUser"
  }, {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "incrUserConnections"
  } ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getBufferSize()" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:close()" : [ ],
  "org.apache.hadoop.fs.FileUtil:setReadable(java.io.File,boolean)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:openFileWithOptions(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.impl.OpenFileParameters)" : [ {
    "sourceMethod" : "getMandatoryKeys",
    "targetMethod" : "rejectUnknownMandatoryKeys"
  } ],
  "org.apache.hadoop.conf.StorageUnit$5:getDefault(double)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB:getServiceStatus(org.apache.hadoop.thirdparty.protobuf.RpcController,org.apache.hadoop.ha.proto.HAServiceProtocolProtos$GetServiceStatusRequestProto)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor$ZlibDirectDecompressor:<init>()" : [ ],
  "org.apache.hadoop.security.SecurityUtil:doAsCurrentUser(java.security.PrivilegedExceptionAction)" : [ {
    "sourceMethod" : "getCurrentUser",
    "targetMethod" : "doAsUser"
  } ],
  "org.apache.hadoop.fs.FilterFs:createMultipartUploader(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:makeQualified(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:offerQueues(int,org.apache.hadoop.ipc.Schedulable,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getFileLinkStatus"
  } ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatisticsContext_reset()" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:removeTokenForOwnerStats(org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier)" : [ ],
  "org.apache.hadoop.fs.shell.Display$Cat:getInputStream(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.util.LineReader:getIOStatistics()" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$ConcurrentQueue:checkEmpty()" : [ ],
  "org.apache.hadoop.fs.impl.CombinedFileRange:toString()" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort:execCommand(com.jcraft.jsch.Session,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.find.Name:apply(org.apache.hadoop.fs.shell.PathData,int)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "toLowerCase"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "matches"
  } ],
  "org.apache.hadoop.io.BloomMapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.io.WritableComparator,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType)" : [ ],
  "org.apache.hadoop.fs.FileSystemStorageStatistics:getLongStatistics()" : [ ],
  "org.apache.hadoop.util.LightWeightCache:iterator()" : [ ],
  "org.apache.hadoop.security.SaslInputStream:read()" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:getRemaining()" : [ ],
  "org.apache.hadoop.crypto.JceCtrCryptoCodec$JceCtrCipher:decrypt(java.nio.ByteBuffer,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.util.InstrumentedWriteLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.ReentrantReadWriteLock,long,long)" : [ ],
  "org.apache.hadoop.fs.FileContext:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO$POSIX$CacheManipulator:getMemlockLimit()" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:invokeMethod()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.security.KDiag:validateKeyLength()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.util.HHUtil:getPiggyBackForDecode(java.nio.ByteBuffer[][],java.nio.ByteBuffer[][],int,int,int,int)" : [ ],
  "org.apache.hadoop.util.ClassUtil:findContainingJar(java.lang.Class)" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler$Call:processWaitTimeAndRetryInfo()" : [ {
    "sourceMethod" : "monotonicNow",
    "targetMethod" : "getWaitTime"
  } ],
  "org.apache.hadoop.service.CompositeService:serviceStop()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:makeQualified(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:gauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : [ ],
  "org.apache.hadoop.util.ShutdownHookManager$HookEntry:<init>(java.lang.Runnable,int)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:loadAndReturnPerm(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.Path:makeQualified(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.fs.FileContext:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarMetaData:addPartFileStatuses(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:useStatIfAvailable()" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:seekToNewSource(long)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenSecretManagerMetrics:create()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.SnappyCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:stopMBeans()" : [ ],
  "org.apache.hadoop.fs.FsShell:main(java.lang.String[])" : [ {
    "sourceMethod" : "newShellInstance",
    "targetMethod" : "run"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:setWorkingDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.hash.Hash:getHashType(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "parseHashType"
  } ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:getFailoverCount()" : [ ],
  "org.apache.hadoop.security.alias.KeyStoreProvider:keystoreExists()" : [ ],
  "org.apache.hadoop.fs.FileUtil:rename(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator:getDelegationToken(java.net.URL,org.apache.hadoop.security.authentication.client.AuthenticatedURL$Token,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:createTracker(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeLong:decr()" : [ ],
  "org.apache.hadoop.fs.PathIOException:getPath()" : [ ],
  "org.apache.hadoop.util.StringUtils:byteToHexString(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage$Df:setUsagesTable(org.apache.hadoop.fs.shell.FsUsage$TableBuilder)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:rollLogDir()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.EmptyIOStatisticsContextImpl:getIOStatistics()" : [ ],
  "org.apache.hadoop.fs.shell.AclCommands$GetfaclCommand:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getPermission",
    "targetMethod" : "getAclFromPermAndEntries"
  }, {
    "sourceMethod" : "getPermission",
    "targetMethod" : "printAclEntriesForSingleScope"
  }, {
    "sourceMethod" : "getAccessEntries",
    "targetMethod" : "printAclEntriesForSingleScope"
  }, {
    "sourceMethod" : "getPermission",
    "targetMethod" : "printAclEntriesForSingleScope"
  }, {
    "sourceMethod" : "getDefaultEntries",
    "targetMethod" : "printAclEntriesForSingleScope"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:readOnlyMountTable(java.lang.String,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "readOnlyMountTable"
  } ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:requireIOStatisticsSnapshot(java.io.Serializable)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsNetgroupMapping:getUsersForNetgroup(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfigException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.security.SaslPlainServer:getAuthorizationID()" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:getInputStream(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault$Emptier:run()" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:tryLoadIncompleteFlush(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.ConfigurationWithLogging:getInt(java.lang.String,int)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getUnixGroups(java.lang.String)" : [ {
    "sourceMethod" : "createGroupExecutor",
    "targetMethod" : "handleExecutorTimeout"
  }, {
    "sourceMethod" : "getOutput",
    "targetMethod" : "resolvePartialGroupNames"
  }, {
    "sourceMethod" : "createGroupExecutor",
    "targetMethod" : "handleExecutorTimeout"
  }, {
    "sourceMethod" : "getOutput",
    "targetMethod" : "resolveFullGroupNames"
  } ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler:newCall(java.lang.reflect.Method,java.lang.Object[],boolean,int)" : [ ],
  "org.apache.hadoop.util.StringUtils:humanReadableInt(long)" : [ ],
  "org.apache.hadoop.io.compress.CodecPool:getCompressor(org.apache.hadoop.io.compress.CompressionCodec)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "mkdirs"
  }, {
    "sourceMethod" : "toString",
    "targetMethod" : "symLink"
  } ],
  "org.apache.hadoop.io.UTF8:toString()" : [ ],
  "org.apache.hadoop.fs.shell.find.ExpressionFactory:getExpression(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.authorize.AuthorizationException:<init>(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.ipc.Server$Call:<init>()" : [ ],
  "org.apache.hadoop.fs.FileUtil:copy(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,boolean,boolean,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:isFromTicket()" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination$TargetFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getContentSummary(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getLen",
    "targetMethod" : "spaceConsumed"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "length"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "spaceConsumed"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "length"
  } ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:publishAsStorageStatistics(java.lang.String,java.lang.String,org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.fs.FileUtil:unTarUsingJava(java.io.InputStream,java.io.File,boolean)" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:addCounter(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.ipc.RetryCache$CacheEntry:hashCode()" : [ ],
  "org.apache.hadoop.util.RunJar:unJar(java.io.File,java.io.File,java.util.regex.Pattern)" : [ ],
  "org.apache.hadoop.util.bloom.DynamicBloomFilter:membershipTest(org.apache.hadoop.util.bloom.Key)" : [ ],
  "org.apache.hadoop.util.KMSUtil:toJSON(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : [ {
    "sourceMethod" : "getEncryptedKeyVersion",
    "targetMethod" : "toJSON"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawErasureCoderFactory:createDecoder(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getFileChecksum(org.apache.hadoop.fs.Path,long)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibDecompressorType(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.service.CompositeService:serviceStart()" : [ ],
  "org.apache.hadoop.ipc.ClientCache:getClient(org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ ],
  "org.apache.hadoop.fs.ftp.FtpConfigKeys:getServerDefaults()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getKeytab()" : [ ],
  "org.apache.hadoop.fs.PartialListing:<init>(org.apache.hadoop.fs.Path,java.util.List,org.apache.hadoop.ipc.RemoteException)" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager$PrefetchTask:get()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getCurrentUser()" : [ ],
  "org.apache.hadoop.io.erasurecode.ECBlockGroup:getErasedCount()" : [ ],
  "org.apache.hadoop.fs.FilterFs:removeAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.ToolRunner:run(org.apache.hadoop.conf.Configuration,org.apache.hadoop.util.Tool,java.lang.String[])" : [ {
    "sourceMethod" : "build",
    "targetMethod" : "setCurrent"
  } ],
  "org.apache.hadoop.metrics2.lib.Interns:info(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:hasPathCapability(org.apache.hadoop.fs.Path,java.lang.String)" : [ {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "validatePathCapabilityArgs"
  } ],
  "org.apache.hadoop.security.ssl.ReloadingX509TrustManager:<init>(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.Options$CreateOpts:progress(org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:setPriorityLevel(org.apache.hadoop.security.UserGroupInformation,int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:stopMetricsMBeans()" : [ ],
  "org.apache.hadoop.fs.FsShell$UnknownCommandException:<init>()" : [ ],
  "org.apache.hadoop.io.retry.RetryInvocationHandler$ProxyDescriptor:failover(long,java.lang.reflect.Method,int)" : [ ],
  "org.apache.hadoop.fs.CreateFlag:validate(java.util.EnumSet)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:isFromKeytab()" : [ ],
  "org.apache.hadoop.conf.ConfigRedactor:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.Progress:getProgress()" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:create(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.Globber:doGlob()" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "expand"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "expand"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "getPathComponents"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "isWindowsAbsolutePath"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "listStatus"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "equals"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "accept"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "accept"
  } ],
  "org.apache.hadoop.fs.DelegateToFileSystem:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getLinkTarget",
    "targetMethod" : "setSymlink"
  } ],
  "org.apache.hadoop.security.SaslRpcClient:selectSaslClient(java.util.List)" : [ ],
  "org.apache.hadoop.fs.FileSystem:canonicalizeUri(java.net.URI)" : [ ],
  "org.apache.hadoop.fs.permission.PermissionStatus:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:hasSufficientTimeElapsed(long)" : [ ],
  "org.apache.hadoop.fs.FileUtil:unTarUsingJava(java.io.File,java.io.File,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:isPathRecursable(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getSymlink",
    "targetMethod" : "resolvePath"
  } ],
  "org.apache.hadoop.util.StringUtils:getStringCollection(java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getUserName()" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndexEntry:write(java.io.DataOutput)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "writeString"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:equals(java.lang.Object)" : [ {
    "sourceMethod" : "getKeyLength",
    "targetMethod" : "compareTo"
  } ],
  "org.apache.hadoop.net.StandardSocketFactory:createSocket(java.net.InetAddress,int)" : [ ],
  "org.apache.hadoop.ipc.Server:addAuxiliaryListener(int)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:recommissionNode(org.apache.hadoop.net.Node)" : [ ],
  "org.apache.hadoop.fs.FileSystem:createMultipartUploader(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:init(org.apache.commons.configuration2.SubsetConfiguration)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader$RBlockState:finish()" : [ ],
  "org.apache.hadoop.metrics2.source.JvmMetrics:getGcInfo(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:close()" : [ ],
  "org.apache.hadoop.io.ReadaheadPool:getInstance()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream:seek(long)" : [ ],
  "org.apache.hadoop.util.ConfigurationHelper:mapEnumNamesToValues(java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getSchedulingDecisionSummary()" : [ ],
  "org.apache.hadoop.fs.FilterFs:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:finalKey(org.apache.hadoop.io.WritableComparable)" : [ {
    "sourceMethod" : "getPosition",
    "targetMethod" : "seek"
  } ],
  "org.apache.hadoop.fs.shell.Display$Text:getInputStream(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:<init>(java.lang.String,int,java.lang.String,java.util.List,java.util.List,org.apache.hadoop.ha.ActiveStandbyElector$ActiveStandbyElectorCallback,int,boolean,org.apache.hadoop.security.SecurityUtil$TruststoreKeystore)" : [ ],
  "org.apache.hadoop.fs.http.HttpsFileSystem:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.tools.TableListing:toString()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextImpl:snapshot()" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:startLockTiming()" : [ ],
  "org.apache.hadoop.util.KMSUtil:getKeyProviderUri(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:parseCommaSeparatedString(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.LocatedFileStatus:hashCode()" : [ ],
  "org.apache.hadoop.io.SetFile:<init>()" : [ ],
  "org.apache.hadoop.security.SecurityUtil:setSslConfiguration(org.apache.zookeeper.client.ZKClientConfig,org.apache.hadoop.security.SecurityUtil$TruststoreKeystore)" : [ ],
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:isLocalhost(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:getCounter(long)" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:initializeInterceptors()" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int,org.apache.hadoop.io.retry.RetryPolicy,java.util.concurrent.atomic.AtomicBoolean,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "pathToFile",
    "targetMethod" : "list"
  } ],
  "org.apache.hadoop.fs.Path:getPathWithoutSchemeAndAuthority(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsBufferBuilder:add(java.lang.String,java.lang.Iterable)" : [ ],
  "org.apache.hadoop.fs.CreateFlag:validateForAppend(java.util.EnumSet)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:getNumDataUnits()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemUtil:isViewFileSystem(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:<init>(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor,int,int)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.util.FindClass:dumpResource(java.lang.String)" : [ {
    "sourceMethod" : "getResource",
    "targetMethod" : "printStack"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:append(byte[],int,int,byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getBytesRead()" : [ ],
  "org.apache.hadoop.util.ProgramDriver:printUsage(java.util.Map)" : [ ],
  "org.apache.hadoop.crypto.random.OsSecureRandom:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:<init>(org.apache.hadoop.conf.Configuration,java.lang.String,java.net.URI,boolean)" : [ ],
  "org.apache.hadoop.io.compress.DecompressorStream:available()" : [ ],
  "org.apache.hadoop.security.authorize.AccessControlList:isUserAllowed(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:getPermission()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:getKeyNear(long)" : [ {
    "sourceMethod" : "getBlockIndexNear",
    "targetMethod" : "getEntry"
  } ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$1:isDone()" : [ ],
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:isOpen()" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:authorizeConnection()" : [ {
    "sourceMethod" : "getHostAddress",
    "targetMethod" : "authorize"
  }, {
    "sourceMethod" : "getHostInetAddress",
    "targetMethod" : "authorize"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.FilePosition:data()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem$DeprecatedRawLocalFileStatus:loadPermissionInfoByNativeIO()" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "getStat"
  } ],
  "org.apache.hadoop.fs.shell.find.Print:apply(org.apache.hadoop.fs.shell.PathData,int)" : [ ],
  "org.apache.hadoop.util.functional.CommonCallableSupplier:waitForCompletion(java.util.concurrent.CompletableFuture)" : [ ],
  "org.apache.hadoop.fs.shell.AclCommands:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.util.XMLUtils:transform(java.io.InputStream,java.io.InputStream,java.io.Writer)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreBuilderImpl:build()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:registerProtocolEngine()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:fixBlockLocations(org.apache.hadoop.fs.BlockLocation[],long,long,long)" : [ {
    "sourceMethod" : "getOffset",
    "targetMethod" : "setOffset"
  } ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:getInstance()" : [ ],
  "org.apache.hadoop.io.FloatWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:throwIfInvalidBlockNumber(int)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:<init>(int,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:trackDurationOfSupplier(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String,java.util.function.Supplier)" : [ ],
  "org.apache.hadoop.util.Shell$ShellCommandExecutor:<init>(java.lang.String[],java.io.File)" : [ ],
  "org.apache.hadoop.http.HttpServer2$QuotingInputFilter$RequestQuoter:getServerName()" : [ ],
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newScheduledThreadPool(int)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:doRun(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:createDirectDecompressor()" : [ ],
  "org.apache.hadoop.util.HostsFileReader:readXmlFileToMapWithFileInputStream(java.lang.String,java.lang.String,java.io.InputStream,java.util.Map)" : [ {
    "sourceMethod" : "readFirstTagValue",
    "targetMethod" : "getTrimmedStrings"
  } ],
  "org.apache.hadoop.security.authorize.AccessControlList:addUser(java.lang.String)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:unprotectedRelogin(org.apache.hadoop.security.UserGroupInformation$HadoopLoginContext,boolean)" : [ {
    "sourceMethod" : "now",
    "targetMethod" : "setLastLogin"
  }, {
    "sourceMethod" : "getUserName",
    "targetMethod" : "setUser"
  }, {
    "sourceMethod" : "getAppName",
    "targetMethod" : "newLoginContext"
  }, {
    "sourceMethod" : "getConfiguration",
    "targetMethod" : "newLoginContext"
  } ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatistics_counters(java.io.Serializable)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:addToCache(int)" : [ ],
  "org.apache.hadoop.fs.FileContext:getAllStatistics()" : [ ],
  "org.apache.hadoop.net.DNS:getIPs(java.lang.String)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:seekInternal(org.apache.hadoop.io.WritableComparable)" : [ ],
  "org.apache.hadoop.fs.impl.MultipartUploaderBuilderImpl:getPermission()" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawDecoderWithFallback(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs:createInternal(org.apache.hadoop.fs.Path,java.util.EnumSet,org.apache.hadoop.fs.permission.FsPermission,int,short,long,org.apache.hadoop.util.Progressable,org.apache.hadoop.fs.Options$ChecksumOpt,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:merge(org.apache.hadoop.fs.FileStatus[],org.apache.hadoop.fs.FileStatus[])" : [ ],
  "org.apache.hadoop.io.compress.SnappyCodec:createOutputStream(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsContext:setThreadIOStatisticsContext(org.apache.hadoop.fs.statistics.IOStatisticsContext)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrAuthenticationSuccesses()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:appendFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.ReadWriteDiskValidatorMetrics:getMetric(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableCounterInt:snapshot(org.apache.hadoop.metrics2.MetricsRecordBuilder,boolean)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:delete(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "listStatus"
  } ],
  "org.apache.hadoop.ipc.Server:doKerberosRelogin()" : [ ],
  "org.apache.hadoop.metrics2.sink.StatsDSink:putMetrics(org.apache.hadoop.metrics2.MetricsRecord)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$BlockRegion:<init>(java.io.DataInput)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getKeysMetadata(java.lang.String[])" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.crypto.CryptoInputStream:readFully(long,byte[])" : [ ],
  "org.apache.hadoop.fs.shell.Tail:expandArgument(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:getExpression(java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.statistics.MeanStatistic:setSamplesAndSum(long,long)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:run(java.lang.String[])" : [ ],
  "org.apache.hadoop.ha.FailoverController:tryGracefulFence(org.apache.hadoop.ha.HAServiceTarget)" : [ ],
  "org.apache.hadoop.net.NetUtils:getSocketFactory(org.apache.hadoop.conf.Configuration,java.lang.Class)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getSocketFactoryFromProperty"
  } ],
  "org.apache.hadoop.metrics2.lib.MutableRates:init(java.lang.Class)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "listStatusForFallbackLink",
    "targetMethod" : "merge"
  } ],
  "org.apache.hadoop.io.DataInputByteBuffer:reset(java.nio.ByteBuffer[])" : [ ],
  "org.apache.hadoop.util.HostsFileReader:refreshInternal(java.lang.String,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.io.DataOutputBuffer:getData()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:logUserInfo(org.slf4j.Logger,java.lang.String,org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:getBytesRead()" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteBufferBlockFactory:requestBuffer(int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:mkdirs(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.RawLocalFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeFloat:<init>(org.apache.hadoop.metrics2.MetricsInfo,float)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getAclStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getMinimalAcl",
    "targetMethod" : "addEntries"
  }, {
    "sourceMethod" : "getPrimaryGroupName",
    "targetMethod" : "group"
  }, {
    "sourceMethod" : "getShortUserName",
    "targetMethod" : "owner"
  } ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getBytesReadByDistance(int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.util.InstrumentedReadLock:<init>(java.lang.String,org.slf4j.Logger,java.util.concurrent.locks.ReentrantReadWriteLock,long,long)" : [ ],
  "org.apache.hadoop.security.SaslRpcClient:getServerPrincipal(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getServerPrincipal"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "compile"
  } ],
  "org.apache.hadoop.io.retry.CallReturn:<init>(org.apache.hadoop.io.retry.CallReturn$State)" : [ ],
  "org.apache.hadoop.security.CompositeGroupsMapping:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:safeSetData(java.lang.String,byte[],int,java.util.List,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "listStatus"
  } ],
  "org.apache.hadoop.fs.FilterFs:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:check(long,long,boolean)" : [ {
    "sourceMethod" : "snapshot",
    "targetMethod" : "logWaitWarning"
  }, {
    "sourceMethod" : "snapshot",
    "targetMethod" : "logWarning"
  } ],
  "org.apache.hadoop.io.SecureIOUtils:forceSecureOpenFSDataInputStream(java.io.File,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getFileDescriptor",
    "targetMethod" : "getFstat"
  }, {
    "sourceMethod" : "getGroup",
    "targetMethod" : "checkStat"
  }, {
    "sourceMethod" : "getOwner",
    "targetMethod" : "checkStat"
  } ],
  "org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor:nextRawValue(org.apache.hadoop.io.SequenceFile$ValueBytes)" : [ ],
  "org.apache.hadoop.fs.BatchedRemoteIterator:hasNext()" : [ ],
  "org.apache.hadoop.util.ZKUtil$BadAclFormatException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:unwrapPacketAndProcessRpcs(byte[])" : [ ],
  "org.apache.hadoop.io.WeakReferencedElasticByteBufferPool:putBuffer(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:setupBlock()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder:prepareDecoding(java.lang.Object[],int[])" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:addTimedOperation(java.lang.String,java.time.Duration)" : [ ],
  "org.apache.hadoop.util.Sets:newHashSet(java.lang.Iterable)" : [ ],
  "org.apache.hadoop.util.FindClass:createClassInstance(java.lang.String)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "loadedClass"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:getRead(int)" : [ ],
  "org.apache.hadoop.metrics2.filter.AbstractPatternFilter:init(org.apache.commons.configuration2.SubsetConfiguration)" : [ ],
  "org.apache.hadoop.util.QuickSort:sortInternal(org.apache.hadoop.util.IndexedSortable,int,int,org.apache.hadoop.util.Progressable,int)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:add(int[],int[])" : [ ],
  "org.apache.hadoop.log.LogLevel$CLI:parseGetLevelArgs(java.lang.String[],int)" : [ ],
  "org.apache.hadoop.util.bloom.RetouchedBloomFilter:minimumFnRemove(int[])" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache$Key:<init>(java.net.URI,org.apache.hadoop.conf.Configuration,long)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:resetKeyStoreState(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.io.retry.CallReturn:<init>(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.FSBuilder:must(java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:supportsSymlinks()" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks:createFactory(java.lang.String,org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getXAttrs(org.apache.hadoop.fs.Path,java.util.List)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.ipc.Server:internalQueueCall(org.apache.hadoop.ipc.Server$Call)" : [ ],
  "org.apache.hadoop.service.ServiceOperations:stopQuietly(org.apache.hadoop.service.Service)" : [ ],
  "org.apache.hadoop.fs.FsShell:getTrash()" : [ ],
  "org.apache.hadoop.ipc.Client$IpcStreams:setSaslClient(org.apache.hadoop.security.SaslRpcClient)" : [ {
    "sourceMethod" : "getOutputStream",
    "targetMethod" : "setOutputStream"
  } ],
  "org.apache.hadoop.conf.ReconfigurationUtil:getChangedProperties(org.apache.hadoop.conf.Configuration,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server$Handler:run()" : [ ],
  "org.apache.hadoop.fs.FileUtil:fullyDelete(java.io.File)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureEncoder:getNumParityUnits()" : [ ],
  "org.apache.hadoop.fs.local.LocalConfigKeys:getServerDefaults()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addCounter(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:checkPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:createKey(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion:createForDecryption(java.lang.String,java.lang.String,byte[],byte[])" : [ ],
  "org.apache.hadoop.util.functional.TaskPool$Builder:<init>(java.lang.Iterable)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:setVerifyChecksum(boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$Reader:createReader(org.apache.hadoop.io.file.tfile.Compression$Algorithm,org.apache.hadoop.io.file.tfile.BCFile$BlockRegion)" : [ ],
  "org.apache.hadoop.util.LightWeightResizableGSet:put(java.lang.Object)" : [ ],
  "org.apache.hadoop.service.CompositeService:serviceInit(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:mkdirs(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.io.ArrayPrimitiveWritable:checkDeclaredComponentType(java.lang.Class)" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$SingletonIterator:next()" : [ ],
  "org.apache.hadoop.ha.NodeFencer:fence(org.apache.hadoop.ha.HAServiceTarget)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:addTimedOperation(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.FSOutputSummer:flush()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:parseBackOffResponseTimeThreshold(java.lang.String,org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:getCallVolumeSummary()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:tag(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.net.SocketIOWithTimeout:doIO(java.nio.ByteBuffer,int)" : [ ],
  "org.apache.hadoop.fs.FsServerDefaults:readFields(java.io.DataInput)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:getKeyVersion(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.InternalOperations:rename(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Options$Rename[])" : [ ],
  "org.apache.hadoop.io.ShortWritable:<init>(short)" : [ ],
  "org.apache.hadoop.fs.FileSystemStorageStatistics:<init>(java.lang.String,org.apache.hadoop.fs.FileSystem$Statistics)" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:mapToSortedString(java.lang.StringBuilder,java.lang.String,java.util.Map,java.util.function.Predicate)" : [ {
    "sourceMethod" : "sortedMap",
    "targetMethod" : "mapToString"
  } ],
  "org.apache.hadoop.security.RuleBasedLdapGroupsMapping:getGroupsSet(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.BlockCompressorStream:<init>(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor,int,int)" : [ ],
  "org.apache.hadoop.io.file.tfile.ByteArray:<init>(org.apache.hadoop.io.BytesWritable)" : [ ],
  "org.apache.hadoop.security.protocolPB.RefreshAuthorizationPolicyProtocolClientSideTranslatorPB:close()" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager$DelegationTokenInformation:<init>(long,byte[])" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:<init>(java.io.OutputStream,org.apache.hadoop.crypto.CryptoCodec,int,byte[],byte[],long)" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.shell.Test:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:checkPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getCanonicalServiceName()" : [ {
    "sourceMethod" : "getDefaultPort",
    "targetMethod" : "buildDTServiceName"
  } ],
  "org.apache.hadoop.io.SequenceFile$Metadata:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader:<init>(org.apache.hadoop.fs.FSDataInputStream,long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding:trackDurationOfInvocation(org.apache.hadoop.fs.statistics.DurationTrackerFactory,java.lang.String,org.apache.hadoop.util.functional.InvocationRaisingIOE)" : [ ],
  "org.apache.hadoop.fs.impl.FlagSet:buildFlagSet(java.lang.Class,org.apache.hadoop.conf.Configuration,java.lang.String,boolean)" : [ {
    "sourceMethod" : "getEnumSet",
    "targetMethod" : "createFlagSet"
  } ],
  "org.apache.hadoop.ipc.Server$Connection:processSaslMessage(org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler:newAsyncCall(java.lang.reflect.Method,java.lang.Object[],boolean,int,org.apache.hadoop.io.retry.RetryInvocationHandler)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.RSErasureDecoder:<init>(org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.ipc.Server$RpcCall:getHostInetAddress()" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:getReadOps()" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:<init>(java.lang.String,int,java.lang.String,java.util.List,java.util.List,org.apache.hadoop.ha.ActiveStandbyElector$ActiveStandbyElectorCallback,int,org.apache.hadoop.security.SecurityUtil$TruststoreKeystore)" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:addResponseTime(java.lang.String,org.apache.hadoop.ipc.Schedulable,org.apache.hadoop.ipc.ProcessingDetails)" : [ ],
  "org.apache.hadoop.fs.local.LocalFs:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getLinkTarget(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getLinkTarget"
  } ],
  "org.apache.hadoop.fs.FilterFs:delete(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.fs.shell.AclCommands$GetfaclCommand:printAclEntriesForSingleScope(org.apache.hadoop.fs.permission.AclStatus,org.apache.hadoop.fs.permission.FsPermission,java.util.List)" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:createEncoder(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.erasurecode.ErasureCodecOptions)" : [ {
    "sourceMethod" : "getCodecName",
    "targetMethod" : "getCodecClassName"
  }, {
    "sourceMethod" : "getCodecName",
    "targetMethod" : "createCodec"
  }, {
    "sourceMethod" : "getCodecClassName",
    "targetMethod" : "createCodec"
  }, {
    "sourceMethod" : "getSchema",
    "targetMethod" : "createCodec"
  } ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSOutputSummer:hasCapability(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:cleanupAllTmpFiles()" : [ ],
  "org.apache.hadoop.fs.FsShell:printHelp(java.io.PrintStream)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension:generateEncryptedKey(java.lang.String)" : [ {
    "sourceMethod" : "getCurrentKey",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getConf",
    "targetMethod" : "getInstance"
  }, {
    "sourceMethod" : "getMaterial",
    "targetMethod" : "generateEncryptedKey"
  }, {
    "sourceMethod" : "getCurrentKey",
    "targetMethod" : "generateEncryptedKey"
  }, {
    "sourceMethod" : "getAlgorithmBlockSize",
    "targetMethod" : "generateEncryptedKey"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2OutputStream:writeRun()" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:cleanBufferPool()" : [ ],
  "org.apache.hadoop.util.DataChecksum:newDataChecksum(java.io.DataInputStream)" : [ {
    "sourceMethod" : "mapByteToChecksumType",
    "targetMethod" : "newDataChecksum"
  } ],
  "org.apache.hadoop.io.compress.GzipCodec:createDecompressor()" : [ ],
  "org.apache.hadoop.fs.shell.PathData:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.Globber:schemeFromPath(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fixRelativePart",
    "targetMethod" : "getFSofPath"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$BlockRegion:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:relogin(org.apache.hadoop.security.UserGroupInformation$HadoopLoginContext,boolean)" : [ ],
  "org.apache.hadoop.fs.GetSpaceUsed$Builder:getJitter()" : [ ],
  "org.apache.hadoop.fs.FileContext:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPFileSystem:mkdirs(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "makeAbsolute",
    "targetMethod" : "isFile"
  } ],
  "org.apache.hadoop.conf.Configuration$Resource:<init>(java.lang.Object,boolean)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:getDefaultReplication(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FSDataInputStream:<init>(java.io.InputStream)" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:tag(java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.Command:processPathInternal(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.ha.protocolPB.ZKFCProtocolClientSideTranslatorPB:<init>(java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,int)" : [ ],
  "org.apache.hadoop.conf.Configuration:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.functional.CommonCallableSupplier:waitForCompletion(java.util.List)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:ensureInitialized()" : [ ],
  "org.apache.hadoop.fs.FSBuilder:opt(java.lang.String,float)" : [ ],
  "org.apache.hadoop.security.Groups$GroupCacheLoader:load(java.lang.String)" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:newMBeanName(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:compareTo(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:retryUpToMaximumCountWithFixedSleep(int,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.metrics2.sink.GraphiteSink:close()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:add(org.apache.hadoop.fs.impl.prefetch.BlockOperations$Operation)" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:hasCodec(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:constructRpcRequest(java.lang.reflect.Method,com.google.protobuf.Message)" : [ ],
  "org.apache.hadoop.fs.shell.Ls:processPathArgument(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticator:<init>()" : [ ],
  "org.apache.hadoop.fs.FileSystem:getFSofPath(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.fs.Options$CreateOpts:perms(org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.SequenceFile$Writer$Option[])" : [ {
    "sourceMethod" : "compression",
    "targetMethod" : "prependOptions"
  } ],
  "org.apache.hadoop.net.NetworkTopology:sortByDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int,java.util.function.Consumer,boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm:returnCompressor(org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.fs.FileUtil:readLink(java.io.File)" : [ {
    "sourceMethod" : "getReadlinkCommand",
    "targetMethod" : "execCommand"
  } ],
  "org.apache.hadoop.net.NetworkTopology:sortByDistance(org.apache.hadoop.net.Node,org.apache.hadoop.net.Node[],int,java.util.function.Consumer)" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:checkAndUpdateMaps()" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Reader:<init>(org.apache.hadoop.fs.FileSystem,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.LocalDirAllocator:getLocalPathForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:<init>(org.apache.hadoop.fs.viewfs.NflyFSystem$NflyNode)" : [ ],
  "org.apache.hadoop.io.DataInputByteBuffer$Buffer:read()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getStoragePolicy(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile:getChunkBufferSize(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.bloom.CountingBloomFilter:<init>()" : [ ],
  "org.apache.hadoop.io.compress.Lz4Codec:createInputStream(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getGroup()" : [ ],
  "org.apache.hadoop.service.AbstractService:getServiceState()" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:checkCreateXorRawEncoder()" : [ ],
  "org.apache.hadoop.io.WritableComparator:<init>(java.lang.Class,boolean)" : [ ],
  "org.apache.hadoop.fs.FileUtil:setWritable(java.io.File,boolean)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:processResult(int,java.lang.String,java.lang.Object,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getKeyStream()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFsFileStatus:getModificationTime()" : [ ],
  "org.apache.hadoop.io.ArrayFile$Reader:get(long,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:checkNativeCodeLoaded()" : [ ],
  "org.apache.hadoop.io.MD5Hash:digest(java.lang.String)" : [ {
    "sourceMethod" : "getBytes",
    "targetMethod" : "digest"
  } ],
  "org.apache.hadoop.fs.permission.FsCreateModes:hashCode()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:getHomeDirectory()" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.lang.String,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache$Key:<init>(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:calculateExponentialTime(long,int)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer$SyncIntervalOption:<init>(int)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableCounterInt:<init>(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleStat:reset()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:removeAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:getValue(byte[],int)" : [ ],
  "org.apache.hadoop.fs.viewfs.HCFSMountTableConfigLoader:load(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "getNewInstance"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "logInvalidFileNameFormat"
  }, {
    "sourceMethod" : "getName",
    "targetMethod" : "logInvalidFileNameFormat"
  }, {
    "sourceMethod" : "open",
    "targetMethod" : "addResource"
  } ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatistics:addMaximumFunction(java.lang.String,java.util.function.Function)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:setReadahead(java.lang.Long)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:buildChecked(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:initializeSSLContext(org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory$SSLChannelMode)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getLocal(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.util.Shell:getHadoopHomeDir()" : [ {
    "sourceMethod" : "addOsText",
    "targetMethod" : "fileNotFoundException"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:<init>(org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator,org.apache.hadoop.security.authentication.client.ConnectionConfigurator)" : [ ],
  "org.apache.hadoop.net.ScriptBasedMappingWithDependency$RawScriptBasedMappingWithDependency:<init>()" : [ ],
  "org.apache.hadoop.fs.FilterFs:getDelegationTokens(java.lang.String)" : [ ],
  "org.apache.hadoop.io.DataOutputBuffer:<init>(int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:createBulkDelete(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.StorageUnit$7:getDefault(double)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker:getIOStatistics()" : [ ],
  "org.apache.hadoop.fs.FileUtil:fullyDeleteContents(java.io.File)" : [ ],
  "org.apache.hadoop.net.CachedDNSToSwitchMapping:resolve(java.util.List)" : [ {
    "sourceMethod" : "getUncachedHosts",
    "targetMethod" : "cacheResolvedHosts"
  } ],
  "org.apache.hadoop.fs.FileContext:resolveIntermediate(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:emitMetric(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.hadoop.metrics2.sink.ganglia.GangliaConf,org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink$GangliaSlope)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedIO:streamCapabilities_hasCapability(java.lang.Object,java.lang.String)" : [ ],
  "org.apache.hadoop.tools.GetGroupsBase:<init>(org.apache.hadoop.conf.Configuration,java.io.PrintStream)" : [ ],
  "org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor:executeHeaderState()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyStatus:getAccessTime()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:truncate(org.apache.hadoop.fs.Path,long)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO:getOwner(java.io.FileDescriptor)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Cache:closeAll(boolean)" : [ ],
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:createKeyManagersFromConfiguration(org.apache.hadoop.security.ssl.SSLFactory$Mode,java.lang.String,long)" : [ {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "getPassword"
  }, {
    "sourceMethod" : "getPassword",
    "targetMethod" : "getPassword"
  }, {
    "sourceMethod" : "resolvePropertyName",
    "targetMethod" : "getPassword"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.fs.http.HttpFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.file.tfile.BCFile$DataIndex:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.GcTimeMonitor:<init>(long,long,int,org.apache.hadoop.util.GcTimeMonitor$GcTimeAlertHandler)" : [ ],
  "org.apache.hadoop.conf.Configuration:setTimeDuration(java.lang.String,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:reJoinElection(int)" : [ ],
  "org.apache.hadoop.util.curator.ZKCuratorManager:getZKAuths(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.RPC:waitForProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.conf.Configuration,int,org.apache.hadoop.io.retry.RetryPolicy,long)" : [ {
    "sourceMethod" : "getCurrentUser",
    "targetMethod" : "getProtocolProxy"
  }, {
    "sourceMethod" : "getDefaultSocketFactory",
    "targetMethod" : "getProtocolProxy"
  } ],
  "org.apache.hadoop.security.Credentials:readTokenStorageFile(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "wrapException"
  } ],
  "org.apache.hadoop.ipc.RetryCache:setState(org.apache.hadoop.ipc.RetryCache$CacheEntry,boolean)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:login(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "getLocalHostName",
    "targetMethod" : "login"
  } ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:checkIfPropertyExists(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:clearStatistics()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:forceReloginFromTicketCache()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:read(org.apache.hadoop.fs.impl.prefetch.BufferData)" : [ ],
  "org.apache.hadoop.security.authorize.ServiceAuthorizationManager:refreshWithLoadedConfiguration(org.apache.hadoop.conf.Configuration,org.apache.hadoop.security.authorize.PolicyProvider)" : [ {
    "sourceMethod" : "getHostKey",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getServiceKey",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getServiceKey",
    "targetMethod" : "getHostKey"
  }, {
    "sourceMethod" : "getServiceKey",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "getHostKey",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:isIOStatistics(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.shell.Command:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncoder:prepareEncodingStep(org.apache.hadoop.io.erasurecode.ECBlockGroup)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination:getLocalDestination(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.FileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.io.wrappedio.WrappedStatistics:iostatistics_minimums(java.io.Serializable)" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:iostatisticsSnapshot_retrieve(java.lang.Object)" : [ ],
  "org.apache.hadoop.ipc.Server$RpcCall:setDeferredError(java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.HHXORErasureEncodingStep:performCoding(org.apache.hadoop.io.erasurecode.ECChunk[],org.apache.hadoop.io.erasurecode.ECChunk[])" : [ {
    "sourceMethod" : "toBuffers",
    "targetMethod" : "performCoding"
  } ],
  "org.apache.hadoop.io.file.tfile.Compression$Algorithm$1:isSupported()" : [ ],
  "org.apache.hadoop.fs.FileUtil:getJarsInDirectory(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:getRange(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.LossyRetryInvocationHandler:<init>(int,org.apache.hadoop.io.retry.FailoverProxyProvider,org.apache.hadoop.io.retry.RetryPolicy)" : [ ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:read()" : [ ],
  "org.apache.hadoop.http.lib.StaticUserWebFilter$StaticUserFilter:init(javax.servlet.FilterConfig)" : [ ],
  "org.apache.hadoop.io.nativeio.NativeIO:getMemlockLimit()" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:createFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.shell.find.ExpressionFactory:createExpression(java.lang.Class,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGauge:<init>(org.apache.hadoop.metrics2.MetricsInfo)" : [ ],
  "org.apache.hadoop.security.SecurityUtil:doAsLoginUser(java.security.PrivilegedExceptionAction)" : [ {
    "sourceMethod" : "getLoginUser",
    "targetMethod" : "doAsUser"
  } ],
  "org.apache.hadoop.metrics2.impl.MetricsSourceAdapter:updateInfoCache(java.lang.Iterable)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:incrRequeueCalls()" : [ ],
  "org.apache.hadoop.fs.VectoredReadUtils:readVectored(org.apache.hadoop.fs.PositionedReadable,java.util.List,java.util.function.IntFunction)" : [ ],
  "org.apache.hadoop.fs.GlobFilter:hasPattern()" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:getFileHarStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "getPathInHar"
  } ],
  "org.apache.hadoop.fs.permission.UmaskParser:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.conf.Configuration:parse(java.net.URL,boolean)" : [ ],
  "org.apache.hadoop.crypto.key.UserProvider:createKey(java.lang.String,byte[],org.apache.hadoop.crypto.key.KeyProvider$Options)" : [ {
    "sourceMethod" : "serialize",
    "targetMethod" : "addSecretKey"
  } ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:aggregate(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:decryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion)" : [ {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptedKeyIv",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getVersionName",
    "targetMethod" : "checkArgument"
  }, {
    "sourceMethod" : "getEncryptedKeyVersion",
    "targetMethod" : "checkNotNull"
  }, {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "createURL"
  }, {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "getEncryptionKeyVersionName",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  }, {
    "sourceMethod" : "call",
    "targetMethod" : "parseJSONKeyVersion"
  } ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:read0()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addGauge(org.apache.hadoop.metrics2.MetricsInfo,int)" : [ ],
  "org.apache.hadoop.fs.permission.RawParser:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPoint:initialize()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Server:processCall(org.apache.hadoop.ipc.RPC$Server,java.lang.String,org.apache.hadoop.ipc.RpcWritable$Buffer,java.lang.String,org.apache.hadoop.ipc.RPC$Server$ProtoClassProtoImpl)" : [ ],
  "org.apache.hadoop.metrics2.MetricStringBuilder:add(org.apache.hadoop.metrics2.AbstractMetric)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "add"
  }, {
    "sourceMethod" : "info",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.crypto.CryptoInputStream:resetStreamOffset(long)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker:<init>(java.lang.Class,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.util.functional.CommonCallableSupplier:submit(java.util.concurrent.Executor,java.util.concurrent.Callable)" : [ ],
  "org.apache.hadoop.security.authorize.DefaultImpersonationProvider:getProxyGroups()" : [ ],
  "org.apache.hadoop.fs.shell.CopyCommands$Merge:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsContextImpl:<init>(long,long)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getEncKeyQueueSize(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:read(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.fs.shell.Ls:initialiseOrderComparator()" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.ipc.Server$ConnectionManager:startIdleScan()" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:mustLong(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:createImmutable(short)" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:zkDoWithRetries(org.apache.hadoop.ha.ActiveStandbyElector$ZKAction)" : [ ],
  "org.apache.hadoop.security.ShellBasedUnixGroupsMapping:getGroupsIDForUserCommand(java.lang.String)" : [ ],
  "org.apache.hadoop.util.concurrent.HadoopExecutors:newFixedThreadPool(int)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsRecordBuilderImpl:addCounter(org.apache.hadoop.metrics2.MetricsInfo,long)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies$RemoteExceptionDependentRetry:shouldRetry(java.lang.Exception,int,int,boolean)" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:createCompressor()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:needsInput()" : [ ],
  "org.apache.hadoop.fs.PathAccessDeniedException:<init>(java.lang.String,java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:<init>(org.apache.hadoop.io.compress.zlib.ZlibDecompressor$CompressionHeader,int)" : [ ],
  "org.apache.hadoop.security.KDiag:failif(boolean,java.lang.String,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:checkAppend(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.util.DiskChecker:checkDirInternal(java.io.File)" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenManager$DelegationTokenSecretManager:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.fs.shell.Ls:processPaths(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData[])" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:appendPrefix(org.apache.hadoop.metrics2.MetricsRecord,java.lang.StringBuilder)" : [ ],
  "org.apache.hadoop.io.compress.PassthroughCodec:createInputStream(java.io.InputStream)" : [ ],
  "org.apache.hadoop.metrics2.impl.MBeanInfoBuilder:newAttrInfo(org.apache.hadoop.metrics2.MetricsInfo,java.lang.String)" : [ ],
  "org.apache.hadoop.security.Credentials:<init>(org.apache.hadoop.security.Credentials)" : [ ],
  "org.apache.hadoop.util.WeakReferenceMap:toString()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:nextRaw(org.apache.hadoop.io.DataOutputBuffer,org.apache.hadoop.io.SequenceFile$ValueBytes)" : [ {
    "sourceMethod" : "readVInt",
    "targetMethod" : "write"
  }, {
    "sourceMethod" : "readVInt",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.metrics2.lib.MetricsRegistry:newStat(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.MD5Hash:digest(byte[])" : [ ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationHandler:isManagementOperation(javax.servlet.http.HttpServletRequest)" : [ {
    "sourceMethod" : "getParameter",
    "targetMethod" : "toUpperCase"
  } ],
  "org.apache.hadoop.fs.Options$CreateOpts:createParent()" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:cachedOrComputedPriorityLevel(java.lang.Object)" : [ ],
  "org.apache.hadoop.crypto.key.KeyProvider:generateKey(int,java.lang.String)" : [ ],
  "org.apache.hadoop.io.MD5Hash:digest(org.apache.hadoop.io.UTF8)" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "digest"
  }, {
    "sourceMethod" : "getBytes",
    "targetMethod" : "digest"
  } ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:minimums()" : [ ],
  "org.apache.hadoop.metrics2.util.SampleQuantiles:insert(long)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getRealAuthenticationMethod(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.ipc.Server$Responder:run()" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2$RpcProtobufRequest:<init>(org.apache.hadoop.ipc.protobuf.ProtobufRpcEngine2Protos$RequestHeaderProto,org.apache.hadoop.thirdparty.protobuf.Message)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getRealUserOrSelf(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.io.Text:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:isMethodSupported(java.lang.String)" : [ {
    "sourceMethod" : "getProtocolVersion",
    "targetMethod" : "isMethodSupported"
  } ],
  "org.apache.hadoop.fs.shell.CopyCommands$Put:expandArgument(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.XAttrCommands$SetfattrCommand:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.CachingBlockManager:toString()" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell:maybeDoLoginFromKeytabAndPrincipal(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.DataOutputBuffer:<init>()" : [ ],
  "org.apache.hadoop.ipc.Server:getRemoteAddress()" : [ ],
  "org.apache.hadoop.service.launcher.InterruptEscalator:register(java.lang.String)" : [ ],
  "org.apache.hadoop.security.SaslOutputStream:write(byte[],int,int)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawDecoder:preferDirectBuffer()" : [ ],
  "org.apache.hadoop.io.compress.PassthroughCodec:createInputStream(java.io.InputStream,org.apache.hadoop.io.compress.Decompressor)" : [ ],
  "org.apache.hadoop.security.RuleBasedLdapGroupsMapping:getGroups(java.lang.String)" : [ ],
  "org.apache.hadoop.util.LineReader:readLine(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:seekInternal(org.apache.hadoop.io.WritableComparable,boolean)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:close()" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:write(byte[],int,int)" : [ {
    "sourceMethod" : "remainingCapacity",
    "targetMethod" : "write"
  } ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:invalidateCache(java.lang.String)" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  } ],
  "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext:getLocalPathForWrite(java.lang.String,long,org.apache.hadoop.conf.Configuration,boolean)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.WrappedIOStatistics:counters()" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:updateStaticMapping()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:allowChangeInputs()" : [ ],
  "org.apache.hadoop.ipc.Server:getNumOpenConnections()" : [ ],
  "org.apache.hadoop.net.NetUtils:createSocketAddr(java.lang.String,int,java.lang.String,boolean,boolean)" : [ ],
  "org.apache.hadoop.fs.VectoredReadUtils:readNonByteBufferPositionedReadable(org.apache.hadoop.fs.PositionedReadable,org.apache.hadoop.fs.FileRange,java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.fs.GlobFilter:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy,int,int,long,long)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getProcessingMean()" : [ ],
  "org.apache.hadoop.ipc.ResponseBuffer:writeTo(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.security.token.DtUtilShell$Get:execute()" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$WrappingRemoteIterator:sourceNext()" : [ ],
  "org.apache.hadoop.util.StringUtils:stringToPath(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.ftp.FTPInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getEnclosingRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FSDataInputStream:releaseBuffer(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.ha.HAAdmin:checkHealth(org.apache.commons.cli.CommandLine)" : [ {
    "sourceMethod" : "createReqInfo",
    "targetMethod" : "monitorHealth"
  }, {
    "sourceMethod" : "getProxy",
    "targetMethod" : "monitorHealth"
  } ],
  "org.apache.hadoop.util.ClassUtil:findClassLocation(java.lang.Class)" : [ ],
  "org.apache.hadoop.net.SocketIOWithTimeout:waitForIO(int)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:bsGetUByte()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:add(int,int)" : [ ],
  "org.apache.hadoop.util.XMLUtils:newSecureSAXTransformerFactory()" : [ ],
  "org.apache.hadoop.fs.viewfs.InodeTree:resolve(java.lang.String,boolean)" : [ {
    "sourceMethod" : "breakIntoPathComponents",
    "targetMethod" : "getRemainingPath"
  }, {
    "sourceMethod" : "breakIntoPathComponents",
    "targetMethod" : "getRemainingPath"
  }, {
    "sourceMethod" : "breakIntoPathComponents",
    "targetMethod" : "getRemainingPath"
  }, {
    "sourceMethod" : "breakIntoPathComponents",
    "targetMethod" : "getRemainingPath"
  } ],
  "org.apache.hadoop.fs.AbstractFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.Shell:getWinUtilsFile()" : [ ],
  "org.apache.hadoop.fs.BlockLocation:<init>(java.lang.String[],java.lang.String[],java.lang.String[],long,long)" : [ ],
  "org.apache.hadoop.fs.FilterFs:supportsSymlinks()" : [ ],
  "org.apache.hadoop.fs.shell.Mkdir:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.util.hash.JenkinsHash:hash(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.permission.FsPermission:setUMask(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableGaugeInt:incr()" : [ ],
  "org.apache.hadoop.util.Lists:newArrayList(java.lang.Iterable)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:getUGIFromTicketCache(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FsShell:getFS()" : [ ],
  "org.apache.hadoop.fs.FileContext:removeDefaultAcl(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations$End:getSummary(java.lang.StringBuilder)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:fullPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$RealUser:toString()" : [ ],
  "org.apache.hadoop.security.alias.AbstractJavaKeyStoreProvider:initFileSystem(java.net.URI)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec:createCompressor()" : [ ],
  "org.apache.hadoop.ha.ActiveStandbyElector:toString()" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:prepareMetaBlock(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.net.ScriptBasedMapping$RawScriptBasedMapping:<init>()" : [ ],
  "org.apache.hadoop.io.SequenceFile$Reader:openFile(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,int,long)" : [ {
    "sourceMethod" : "build",
    "targetMethod" : "awaitFuture"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:getFileStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:raiseInnerCause(java.util.concurrent.ExecutionException)" : [ ],
  "org.apache.hadoop.fs.permission.ScopedAclEntries:<init>(java.util.List)" : [ ],
  "org.apache.hadoop.security.token.Token:<init>(org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.fs.shell.find.Name:<init>(boolean)" : [ ],
  "org.apache.hadoop.conf.Configuration:getLocalPath(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:needsInput()" : [ ],
  "org.apache.hadoop.security.ShellBasedIdMapping:updateMapIncr(int,boolean)" : [ {
    "sourceMethod" : "getId2NameCmdMac",
    "targetMethod" : "updateMapInternal"
  }, {
    "sourceMethod" : "getId2NameCmdMac",
    "targetMethod" : "updateMapInternal"
  }, {
    "sourceMethod" : "getId2NameCmdNIX",
    "targetMethod" : "updateMapInternal"
  }, {
    "sourceMethod" : "getId2NameCmdNIX",
    "targetMethod" : "updateMapInternal"
  } ],
  "org.apache.hadoop.crypto.JceCtrCryptoCodec$JceCtrCipher:init(byte[],byte[])" : [ ],
  "org.apache.hadoop.fs.HarFileSystem$HarFSDataInputStream$HarFsInputStream:read(long,byte[],int,int)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler$MetricsProxy:getUniqueIdentityCount()" : [ ],
  "org.apache.hadoop.fs.FileContext:createSymlink(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager:removeExpiredKeys()" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsContext:enabled()" : [ ],
  "org.apache.hadoop.util.functional.RemoteIterators$HaltableRemoteIterator:hasNext()" : [ ],
  "org.apache.hadoop.ipc.Server$Call:<init>(org.apache.hadoop.ipc.Server$Call)" : [ ],
  "org.apache.hadoop.ha.HAServiceTarget:getFencingParameters()" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getNetworkBytesRead()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.DecodingState:checkParameters(java.lang.Object[],int[],java.lang.Object[])" : [ ],
  "org.apache.hadoop.crypto.key.kms.LoadBalancingKMSClientProvider:getKeys()" : [ {
    "sourceMethod" : "nextIdx",
    "targetMethod" : "doOp"
  } ],
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:getLong(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.JceSm4CtrCryptoCodec:createEncryptor()" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:comparator(org.apache.hadoop.io.WritableComparator)" : [ ],
  "org.apache.hadoop.fs.FilterFs:getFileBlockLocations(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.conf.Configuration:setDeprecatedProperties()" : [ ],
  "org.apache.hadoop.io.WritableComparator:readFloat(byte[],int)" : [ ],
  "org.apache.hadoop.io.erasurecode.coder.ErasureDecoder:getNumErasedBlocks(org.apache.hadoop.io.erasurecode.ECBlock[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getXAttrs(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.DelegationTokenRenewer$RenewAction:<init>(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.fs.FileSystem:create(org.apache.hadoop.fs.Path,boolean)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getDefaultReplication",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "getDefaultBlockSize",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.io.wrappedio.WrappedIO:bulkDelete_delete(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,java.util.Collection)" : [ ],
  "org.apache.hadoop.ipc.Server$Connection:getMessage(org.apache.hadoop.thirdparty.protobuf.Message,org.apache.hadoop.ipc.RpcWritable$Buffer)" : [ ],
  "org.apache.hadoop.fs.shell.CommandWithDestination$TargetFileSystem:rename(org.apache.hadoop.fs.shell.PathData,org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "toString",
    "targetMethod" : "setTargetPath"
  } ],
  "org.apache.hadoop.fs.BlockLocation:setStorageIds(java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getAllStoragePolicies()" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "connect",
    "targetMethod" : "disconnect"
  }, {
    "sourceMethod" : "connect",
    "targetMethod" : "listStatus"
  } ],
  "org.apache.hadoop.fs.FileContext:modifyAclEntries(org.apache.hadoop.fs.Path,java.util.List)" : [ ],
  "org.apache.hadoop.util.InstrumentedLock:tryLock(long,java.util.concurrent.TimeUnit)" : [ {
    "sourceMethod" : "monotonicNow",
    "targetMethod" : "check"
  } ],
  "org.apache.hadoop.fs.LocalDirAllocator:getCurrentDirectoryIndex()" : [ ],
  "org.apache.hadoop.util.InstrumentedWriteLock:startLockTiming()" : [ ],
  "org.apache.hadoop.io.IOUtils:copyBytes(java.io.InputStream,java.io.OutputStream,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "copyBytes"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "getUriPath"
  } ],
  "org.apache.hadoop.io.file.tfile.BCFile$MetaIndex:<init>(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.HarFileSystem:fileStatusesInIndex(org.apache.hadoop.fs.HarFileSystem$HarStatus,java.util.List)" : [ ],
  "org.apache.hadoop.fs.FSInputChecker:skip(long)" : [ ],
  "org.apache.hadoop.ipc.RPC:stopProxy(java.lang.Object)" : [ ],
  "org.apache.hadoop.security.SaslPlainServer$SaslPlainServerFactory:createSaslServer(java.lang.String,java.lang.String,java.lang.String,java.util.Map,javax.security.auth.callback.CallbackHandler)" : [ ],
  "org.apache.hadoop.service.LoggingStateChangeListener:<init>()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:listStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.MD5Hash:digest(java.io.InputStream)" : [ ],
  "org.apache.hadoop.metrics2.lib.DefaultMetricsSystem:removeSourceName(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getDelegationToken(java.lang.String)" : [ ],
  "org.apache.hadoop.io.BloomMapFile$Reader:get(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[],java.util.EnumSet)" : [ ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,double)" : [ ],
  "org.apache.hadoop.fs.FileUtil:unZip(java.io.File,java.io.File)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "listLocatedStatus"
  } ],
  "org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL:getDelegationToken(java.net.URL,org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL$Token,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.BufferedFSInputStream:minSeekForVectorReads()" : [ ],
  "org.apache.hadoop.fs.FileSystem:copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getLocal",
    "targetMethod" : "copy"
  } ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:getFileChecksum(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.IntWritable:<init>(int)" : [ ],
  "org.apache.hadoop.fs.FileContext:setWorkingDirectory(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileUtil:unTarUsingTar(java.io.InputStream,java.io.File,boolean)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.util.DiskChecker:checkDir(java.io.File)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:satisfyStoragePolicy(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(java.io.InputStream,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.shell.PathData:hashCode()" : [ ],
  "org.apache.hadoop.net.NetUtils:connect(java.net.Socket,java.net.SocketAddress,java.net.SocketAddress,int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getFileStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.crypto.CryptoStreamUtils:checkCodec(org.apache.hadoop.crypto.CryptoCodec)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSOutputSummer:close()" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.ipc.ProtocolProxy:isMethodSupported(java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.io.retry.DefaultFailoverProxyProvider:close()" : [ ],
  "org.apache.hadoop.io.MapFile$Writer:progressable(org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.GaloisField:multiply(int,int)" : [ ],
  "org.apache.hadoop.fs.DU:refresh()" : [ ],
  "org.apache.hadoop.metrics2.MetricsJsonBuilder:addGauge(org.apache.hadoop.metrics2.MetricsInfo,float)" : [ ],
  "org.apache.hadoop.io.WritableComparator:readDouble(byte[],int)" : [ ],
  "org.apache.hadoop.ipc.metrics.DecayRpcSchedulerDetailedMetrics:shutdown()" : [ ],
  "org.apache.hadoop.fs.TrashPolicyDefault:deleteCheckpointsImmediately()" : [ ],
  "org.apache.hadoop.net.NetUtils:getDefaultSocketFactory(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "get",
    "targetMethod" : "getSocketFactoryFromProperty"
  } ],
  "org.apache.hadoop.fs.FileContext:checkDest(java.lang.String,org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.util.SysInfoLinux:getNumProcessors()" : [ ],
  "org.apache.hadoop.metrics2.util.MetricsCache:<init>()" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:close()" : [ ],
  "org.apache.hadoop.ipc.ClientCache:stopClient(org.apache.hadoop.ipc.Client)" : [ ],
  "org.apache.hadoop.security.SaslRpcServer:<init>(org.apache.hadoop.security.SaslRpcServer$AuthMethod)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:impl(java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.fs.FileContext:open(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.ChecksumFileSystem:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs:setTimes(org.apache.hadoop.fs.Path,long,long)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:open(org.apache.hadoop.fs.Path,int)" : [ ],
  "org.apache.hadoop.util.ReflectionUtils:logThreadInfo(org.apache.commons.logging.Log,java.lang.String,long)" : [ ],
  "org.apache.hadoop.ipc.FairCallQueue:<init>(int,int,java.lang.String,int[],boolean,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.crypto.JceCtrCryptoCodec:calculateIV(byte[],long,byte[],int)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.HHXORErasureCodec:createDecoder()" : [ ],
  "org.apache.hadoop.fs.shell.find.Find:postProcessPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.ipc.DecayRpcScheduler:computePriorityLevel(long,java.lang.Object)" : [ ],
  "org.apache.hadoop.crypto.key.JavaKeyStoreProvider:noPasswordWarning()" : [ ],
  "org.apache.hadoop.fs.shell.Command:displayWarning(java.lang.String)" : [ ],
  "org.apache.hadoop.net.NodeBase:locationToDepth(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FsShell:createOptionTableListing()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:createNonRecursive(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,java.util.EnumSet,int,short,long,org.apache.hadoop.util.Progressable)" : [ ],
  "org.apache.hadoop.security.UserGroupInformation:addToken(org.apache.hadoop.io.Text,org.apache.hadoop.security.token.Token)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:getBytesRead()" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.util.RSUtil:encodeData(byte[],int,byte[][],int[],byte[][],int[])" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:getCodecClassName(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.ChecksumFs$ChecksumFSInputChecker:skip(long)" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:bufferSize(int)" : [ ],
  "org.apache.hadoop.fs.impl.FSBuilderSupport:getPositiveLong(java.lang.String,long)" : [ ],
  "org.apache.hadoop.io.retry.AsyncCallHandler$AsyncCall:isDone()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSTokenRenewer:renew(org.apache.hadoop.security.token.Token,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:setInput(byte[],int,int)" : [ ],
  "org.apache.hadoop.fs.shell.Stat:registerCommands(org.apache.hadoop.fs.shell.CommandFactory)" : [ ],
  "org.apache.hadoop.fs.FilterFs:listLocatedStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Location:<init>(org.apache.hadoop.io.file.tfile.TFile$Reader$Location)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsCollectorImpl:getRecords()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:incrementMinimum(java.lang.String,long)" : [ ],
  "org.apache.hadoop.fs.shell.find.And:apply(org.apache.hadoop.fs.shell.PathData,int)" : [ ],
  "org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager:createCuratorClient(org.apache.hadoop.conf.Configuration,java.lang.String)" : [ {
    "sourceMethod" : "getBoolean",
    "targetMethod" : "getBoolean"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  }, {
    "sourceMethod" : "get",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.net.SocketInputStream:<init>(java.net.Socket)" : [ ],
  "org.apache.hadoop.security.ssl.ReloadingX509TrustManager:loadFrom(java.nio.file.Path)" : [ ],
  "org.apache.hadoop.fs.LocalFileSystem:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileStatus:compareTo(java.lang.Object)" : [ ],
  "org.apache.hadoop.util.ConfTest:listFiles(java.io.File)" : [ ],
  "org.apache.hadoop.security.alias.UserProvider:<init>()" : [ ],
  "org.apache.hadoop.io.file.tfile.CompareUtils$BytesComparator:compare(org.apache.hadoop.io.file.tfile.RawComparable,org.apache.hadoop.io.file.tfile.RawComparable)" : [ ],
  "org.apache.hadoop.io.retry.RetryPolicies:retryByException(org.apache.hadoop.io.retry.RetryPolicy,java.util.Map)" : [ ],
  "org.apache.hadoop.fs.FsShellPermissions$Chown:processPath(org.apache.hadoop.fs.shell.PathData)" : [ {
    "sourceMethod" : "getGroup",
    "targetMethod" : "setOwner"
  }, {
    "sourceMethod" : "getOwner",
    "targetMethod" : "setOwner"
  } ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withMutableCounter(java.lang.String,org.apache.hadoop.metrics2.lib.MutableCounterLong)" : [ ],
  "org.apache.hadoop.io.MD5Hash:hashCode()" : [ ],
  "org.apache.hadoop.security.SaslInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.util.SampleStat:add(double)" : [ ],
  "org.apache.hadoop.ipc.metrics.RetryCacheMetrics:incrCacheHit()" : [ ],
  "org.apache.hadoop.security.UserGroupInformation$UgiMetrics:reattach()" : [ ],
  "org.apache.hadoop.crypto.key.UserProvider:getKeyVersions(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.Options$CreateOpts:checksumParam(org.apache.hadoop.fs.Options$ChecksumOpt)" : [ ],
  "org.apache.hadoop.security.token.delegation.SQLDelegationTokenSecretManager:getCandidateTokensForCleanup()" : [ ],
  "org.apache.hadoop.security.LdapGroupsMapping$LdapSslSocketFactory:createKeyStore(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.zstd.ZStandardCompressor:<init>(int,int,int)" : [ ],
  "org.apache.hadoop.ipc.CallerContext:<init>(org.apache.hadoop.ipc.CallerContext$Builder)" : [ ],
  "org.apache.hadoop.fs.FileSystem:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.fs.RawLocalFileSystem:getHomeDirectory()" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:findCurrentDirectory(java.util.Date)" : [ ],
  "org.apache.hadoop.ipc.Server$Listener$Reader:doRunLoop()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:stripOutRoot(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:getReplication()" : [ ],
  "org.apache.hadoop.service.AbstractService:init(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.ipc.Server:getProtocolClass(java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$TFileIndexEntry:write(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.crypto.CryptoStreamUtils:freeDB(java.nio.ByteBuffer)" : [ ],
  "org.apache.hadoop.util.ProtoUtil:getUgi(org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$IpcConnectionContextProto)" : [ ],
  "org.apache.hadoop.ha.SshFenceByTcpPort:tryFence(org.apache.hadoop.ha.HAServiceTarget,java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Writer:init(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FSDataOutputStream,boolean,java.lang.Class,java.lang.Class,org.apache.hadoop.io.compress.CompressionCodec,org.apache.hadoop.io.SequenceFile$Metadata,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:closeAllForUGI(org.apache.hadoop.security.UserGroupInformation)" : [ ],
  "org.apache.hadoop.util.ExitUtil:halt(org.apache.hadoop.util.ExitUtil$HaltException)" : [ ],
  "org.apache.hadoop.security.Credentials:writeProto(java.io.DataOutput)" : [ ],
  "org.apache.hadoop.conf.Configuration:addDeprecation(java.lang.String,java.lang.String[])" : [ ],
  "org.apache.hadoop.fs.shell.Ls:<init>()" : [ ],
  "org.apache.hadoop.ipc.protocolPB.GenericRefreshProtocolClientSideTranslatorPB:unpack(org.apache.hadoop.ipc.proto.GenericRefreshProtocolProtos$GenericRefreshResponseProto)" : [ ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:internalReset()" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:getStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "getStatus"
  } ],
  "org.apache.hadoop.fs.FileContext:createSnapshot(org.apache.hadoop.fs.Path,java.lang.String)" : [ ],
  "org.apache.hadoop.util.dynamic.DynMethods$Builder:hiddenImpl(java.lang.Class,java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.util.LightWeightCache:evictExpiredEntries()" : [ ],
  "org.apache.hadoop.util.ReflectionUtils$CopyInCopyOutBuffer:moveData()" : [ {
    "sourceMethod" : "getLength",
    "targetMethod" : "reset"
  }, {
    "sourceMethod" : "getData",
    "targetMethod" : "reset"
  } ],
  "org.apache.hadoop.net.ScriptBasedMapping:<init>(org.apache.hadoop.net.DNSToSwitchMapping)" : [ ],
  "org.apache.hadoop.util.LightWeightCache:evict()" : [ ],
  "org.apache.hadoop.security.KDiag:title(java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.fs.Globber$GlobBuilder:<init>(org.apache.hadoop.fs.FileContext)" : [ ],
  "org.apache.hadoop.io.ShortWritable$Comparator:<init>()" : [ ],
  "org.apache.hadoop.fs.impl.WeakReferenceThreadMap:<init>(java.util.function.Function,java.util.function.Consumer)" : [ ],
  "org.apache.hadoop.util.ShutdownHookManager:addShutdownHook(java.lang.Runnable,int,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.util.bloom.Filter:<init>(int,int,int)" : [ ],
  "org.apache.hadoop.metrics2.sink.ganglia.GangliaSink30:calculateSlope(org.apache.hadoop.metrics2.sink.ganglia.GangliaConf,org.apache.hadoop.metrics2.sink.ganglia.AbstractGangliaSink$GangliaSlope)" : [ ],
  "org.apache.hadoop.fs.FSDataInputStream:hasCapability(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.bzip2.CBZip2InputStream:recvDecodingTables()" : [ {
    "sourceMethod" : "bsR",
    "targetMethod" : "createHuffmanDecodingTables"
  } ],
  "org.apache.hadoop.io.SequenceFile$Writer:checkAndWriteSync()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path[],org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec:createCompressor()" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.SingleFilePerBlockCache:getCacheFilePath(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.LocalDirAllocator)" : [ ],
  "org.apache.hadoop.io.compress.GzipCodec:createInputStream(java.io.InputStream)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs:listStatus(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "listStatusForFallbackLink",
    "targetMethod" : "merge"
  } ],
  "org.apache.hadoop.io.compress.BZip2Codec$BZip2CompressionOutputStream:writeStreamHeader()" : [ ],
  "org.apache.hadoop.io.wrappedio.impl.DynamicWrappedStatistics:ioStatisticsAvailable()" : [ ],
  "org.apache.hadoop.net.InnerNodeImpl$Factory:newInnerNode(java.lang.String)" : [ ],
  "org.apache.hadoop.net.unix.DomainSocket:socketpair()" : [ ],
  "org.apache.hadoop.conf.Configuration:addResource(org.apache.hadoop.fs.Path,boolean)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:inBlockAdvance(org.apache.hadoop.io.file.tfile.RawComparable,boolean)" : [ {
    "sourceMethod" : "getBlockIndex",
    "targetMethod" : "getBlockEntryCount"
  } ],
  "org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping:cacheGroupsAdd(java.util.List)" : [ {
    "sourceMethod" : "getUsersForNetgroup",
    "targetMethod" : "add"
  } ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:start()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:drain(java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibFactory:getZlibDecompressor(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.DF:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.security.ssl.SSLHostnameVerifier$AbstractVerifier:check(java.lang.String[],java.lang.String[],java.lang.String[],boolean,boolean)" : [ {
    "sourceMethod" : "toLowerCase",
    "targetMethod" : "acceptableCountryWildcard"
  }, {
    "sourceMethod" : "toLowerCase",
    "targetMethod" : "countDots"
  }, {
    "sourceMethod" : "toLowerCase",
    "targetMethod" : "countDots"
  } ],
  "org.apache.hadoop.ipc.Server$Connection:doSaslReply(java.lang.Exception)" : [ ],
  "org.apache.hadoop.fs.FileContext:fixRelativePart(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:listStatus(org.apache.hadoop.fs.Path[])" : [ ],
  "org.apache.hadoop.util.ToolRunner:printGenericCommandUsage(java.io.PrintStream)" : [ ],
  "org.apache.hadoop.util.DurationInfo:<init>(org.slf4j.Logger,boolean,java.lang.String,java.lang.Object[])" : [ ],
  "org.apache.hadoop.conf.Configured:<init>(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier:setRealUser(org.apache.hadoop.io.Text)" : [ ],
  "org.apache.hadoop.crypto.CryptoOutputStream:updateEncryptor()" : [ ],
  "org.apache.hadoop.fs.FileUtil:canWrite(java.io.File)" : [ ],
  "org.apache.hadoop.ipc.Server$Responder:doRunLoop()" : [ {
    "sourceMethod" : "monotonicNowNanos",
    "targetMethod" : "doPurge"
  } ],
  "org.apache.hadoop.util.HostsFileReader:getHostDetails(java.util.Set,java.util.Set)" : [ ],
  "org.apache.hadoop.io.ArrayFile$Writer:<init>(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem,java.lang.String,java.lang.Class)" : [ ],
  "org.apache.hadoop.ipc.RPC:getProtocolProxy(java.lang.Class,long,java.net.InetSocketAddress,org.apache.hadoop.security.UserGroupInformation,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory)" : [ {
    "sourceMethod" : "getRpcTimeout",
    "targetMethod" : "getProtocolProxy"
  } ],
  "org.apache.hadoop.security.SecurityUtil:setSslConfiguration(org.apache.zookeeper.client.ZKClientConfig,org.apache.hadoop.security.SecurityUtil$TruststoreKeystore,org.apache.zookeeper.common.ClientX509Util)" : [ ],
  "org.apache.hadoop.io.compress.zlib.ZlibCompressor:getBytesWritten()" : [ ],
  "org.apache.hadoop.fs.permission.AclStatus:<init>(java.lang.String,java.lang.String,boolean,java.lang.Iterable,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory:resolvePropertyName(org.apache.hadoop.security.ssl.SSLFactory$Mode,java.lang.String)" : [ ],
  "org.apache.hadoop.util.hash.Hash:getInstance(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getHashType",
    "targetMethod" : "getInstance"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile:main(java.lang.String[])" : [ ],
  "org.apache.hadoop.io.erasurecode.CodecUtil:createRawDecoder(org.apache.hadoop.conf.Configuration,java.lang.String,org.apache.hadoop.io.erasurecode.ErasureCoderOptions)" : [ ],
  "org.apache.hadoop.metrics2.sink.PrometheusMetricsSink:writeMetrics(java.io.Writer)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLaunchException:<init>(int,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFs:setReplication(org.apache.hadoop.fs.Path,short)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:put(org.apache.hadoop.io.SequenceFile$Sorter$SegmentDescriptor)" : [ ],
  "org.apache.hadoop.metrics2.filter.AbstractPatternFilter:accepts(java.lang.Iterable)" : [ ],
  "org.apache.hadoop.crypto.OpensslCipher:isSupported(org.apache.hadoop.crypto.CipherSuite)" : [ {
    "sourceMethod" : "getName",
    "targetMethod" : "tokenizeTransformation"
  } ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getProxy(java.lang.Class,long,org.apache.hadoop.ipc.Client$ConnectionId,org.apache.hadoop.conf.Configuration,javax.net.SocketFactory,org.apache.hadoop.ipc.AlignmentContext)" : [ ],
  "org.apache.hadoop.fs.shell.SnapshotCommands$CreateSnapshot:processArguments(java.util.LinkedList)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme:getRawFileSystem(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "get"
  } ],
  "org.apache.hadoop.fs.shell.Delete$Rmdir:processPath(org.apache.hadoop.fs.shell.PathData)" : [ ],
  "org.apache.hadoop.io.erasurecode.rawcoder.RawErasureDecoder:getNumAllUnits()" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getDeferredRpcProcessingStdDev()" : [ ],
  "org.apache.hadoop.metrics2.lib.MetricsSourceBuilder:add(java.lang.Object,java.lang.reflect.Field)" : [ ],
  "org.apache.hadoop.util.ZKUtil$BadAuthFormatException:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.functional.FutureIO:awaitFuture(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.ipc.CallQueueManager:add(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:create(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission,boolean,int,short,long,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "create"
  } ],
  "org.apache.hadoop.fs.impl.AbstractFSBuilderImpl:opt(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.compress.ZStandardCodec:createOutputStream(java.io.OutputStream,org.apache.hadoop.io.compress.Compressor)" : [ ],
  "org.apache.hadoop.ipc.ProtobufRpcEngine2:getClient(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FsTracer:get(org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "wrapHadoopConf",
    "targetMethod" : "conf"
  } ],
  "org.apache.hadoop.util.ThreadUtil:getResourceAsStream(java.lang.String)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:resolvePath(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.io.retry.RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:<init>(long,long,java.util.concurrent.TimeUnit)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFs:renameSnapshot(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.util.SysInfoWindows:now()" : [ ],
  "org.apache.hadoop.fs.AbstractFileSystem:setXAttr(org.apache.hadoop.fs.Path,java.lang.String,byte[])" : [ ],
  "org.apache.hadoop.fs.FileUtil:checkReturnValue(boolean,java.io.File,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.crypto.CryptoProtocolVersion:supports(org.apache.hadoop.crypto.CryptoProtocolVersion)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFileLinkStatus(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.ObjectWritable$NullInstance:<init>()" : [ ],
  "org.apache.hadoop.fs.Stat:getExecString()" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell$Command:getCredentialProvider()" : [ ],
  "org.apache.hadoop.fs.statistics.IOStatisticsSnapshot:serializer()" : [ ],
  "org.apache.hadoop.fs.shell.FsUsage:formatSize(long)" : [ ],
  "org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB:getServiceStatus()" : [ ],
  "org.apache.hadoop.http.HttpServer2:start()" : [ ],
  "org.apache.hadoop.fs.permission.PermissionStatus:createImmutable(java.lang.String,java.lang.String,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.net.NetworkTopology:chooseRandom(java.lang.String,java.util.Collection)" : [ ],
  "org.apache.hadoop.fs.Path:<init>(java.lang.String)" : [ ],
  "org.apache.hadoop.util.dynamic.DynConstructors$Ctor:newInstance(java.lang.Object[])" : [ ],
  "org.apache.hadoop.conf.Configuration:isDeprecated(java.lang.String)" : [ ],
  "org.apache.hadoop.io.retry.RetryUtils$WrapperRetryPolicy:shouldRetry(java.lang.Exception,int,int,boolean)" : [ ],
  "org.apache.hadoop.util.StopWatch:close()" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:recursive()" : [ ],
  "org.apache.hadoop.fs.ftp.FTPFileSystem:initialize(java.net.URI,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:copy(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean,boolean)" : [ {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "getFileStatus"
  }, {
    "sourceMethod" : "build",
    "targetMethod" : "awaitFuture"
  }, {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "openFile"
  }, {
    "sourceMethod" : "openFile",
    "targetMethod" : "closeStream"
  }, {
    "sourceMethod" : "build",
    "targetMethod" : "closeStream"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "closeStream"
  }, {
    "sourceMethod" : "awaitFuture",
    "targetMethod" : "closeStream"
  }, {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "create"
  }, {
    "sourceMethod" : "openFile",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "build",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "getLen",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "create",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "awaitFuture",
    "targetMethod" : "copyBytes"
  }, {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "mkdir"
  }, {
    "sourceMethod" : "getDirDefault",
    "targetMethod" : "mkdir"
  }, {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "listStatus"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "makeQualified"
  }, {
    "sourceMethod" : "makeQualified",
    "targetMethod" : "delete"
  } ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner$Entry:writeValue(java.io.OutputStream)" : [ ],
  "org.apache.hadoop.conf.Configuration:getClasses(java.lang.String,java.lang.Class[])" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:call(java.net.HttpURLConnection,java.lang.Object,int,java.lang.Class)" : [ ],
  "org.apache.hadoop.io.erasurecode.codec.HHXORErasureCodec:createEncoder()" : [ ],
  "org.apache.hadoop.fs.impl.FutureDataInputStreamBuilderImpl:builder()" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider$KMSMetadata:<init>(java.lang.String,int,java.lang.String,java.util.Map,java.util.Date,int)" : [ ],
  "org.apache.hadoop.fs.sftp.SFTPInputStream:<init>(com.jcraft.jsch.ChannelSftp,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.FileSystem$Statistics)" : [ ],
  "org.apache.hadoop.service.ServiceOperations:stopQuietly(org.apache.commons.logging.Log,org.apache.hadoop.service.Service)" : [ ],
  "org.apache.hadoop.io.EnumSetWritable:<init>(java.util.EnumSet)" : [ ],
  "org.apache.hadoop.fs.GlobPattern:set(java.lang.String)" : [ ],
  "org.apache.hadoop.ipc.metrics.RpcMetrics:getTotalRequestsPerSecond()" : [ ],
  "org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory:createSocket(java.net.Socket,java.lang.String,int,boolean)" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:checkPath(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.BoundedByteArrayOutputStream:<init>(int)" : [ ],
  "org.apache.hadoop.fs.FileSystem$Statistics:incrementBytesReadErasureCoded(long)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BlockOperations:prefetch(int)" : [ ],
  "org.apache.hadoop.fs.FileUtil:canExecute(java.io.File)" : [ ],
  "org.apache.hadoop.fs.DUHelper:check(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Writer:<init>(org.apache.hadoop.fs.FSDataOutputStream,int,java.lang.String,java.lang.String,org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.IOStatisticsStoreImpl:getGaugeReference(java.lang.String)" : [ ],
  "org.apache.hadoop.util.Shell:execCommand(java.util.Map,java.lang.String[],long)" : [ ],
  "org.apache.hadoop.ipc.Server:internalQueueCall(org.apache.hadoop.ipc.Server$Call,boolean)" : [ {
    "sourceMethod" : "monotonicNowNanos",
    "targetMethod" : "set"
  } ],
  "org.apache.hadoop.fs.impl.FileSystemMultipartUploaderBuilder:build()" : [ ],
  "org.apache.hadoop.conf.Configuration:getCredentialEntry(org.apache.hadoop.security.alias.CredentialProvider,java.lang.String)" : [ {
    "sourceMethod" : "getDeprecatedKey",
    "targetMethod" : "logDeprecationOnce"
  } ],
  "org.apache.hadoop.fs.statistics.IOStatisticsLogging:ioStatisticsToPrettyString(org.apache.hadoop.fs.statistics.IOStatistics)" : [ ],
  "org.apache.hadoop.fs.statistics.impl.ForwardingIOStatisticsStore:getMeanStatistic(java.lang.String)" : [ ],
  "org.apache.hadoop.crypto.key.kms.KMSClientProvider:getKeys()" : [ {
    "sourceMethod" : "createURL",
    "targetMethod" : "createConnection"
  }, {
    "sourceMethod" : "createConnection",
    "targetMethod" : "call"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFs:access(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsAction)" : [ ],
  "org.apache.hadoop.crypto.CryptoInputStream:afterDecryption(org.apache.hadoop.crypto.Decryptor,java.nio.ByteBuffer,long,byte[])" : [ ],
  "org.apache.hadoop.ipc.Client:setPingInterval(org.apache.hadoop.conf.Configuration,int)" : [ ],
  "org.apache.hadoop.fs.permission.PermissionStatus:read(java.io.DataInput)" : [ ],
  "org.apache.hadoop.fs.impl.prefetch.BufferData:setCaching(java.util.concurrent.Future)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:cedeRemoteActive(org.apache.hadoop.ha.HAServiceTarget,int)" : [ ],
  "org.apache.hadoop.fs.FileSystem:getTrashRoots(boolean)" : [ {
    "sourceMethod" : "getParent",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "exists"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "setPath"
  }, {
    "sourceMethod" : "getPath",
    "targetMethod" : "exists"
  } ],
  "org.apache.hadoop.io.ByteWritable:<init>(byte)" : [ ],
  "org.apache.hadoop.fs.FileSystem$DirListingIterator:fetchMore()" : [ {
    "sourceMethod" : "getToken",
    "targetMethod" : "listStatusBatch"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BlockData:getState(int)" : [ ],
  "org.apache.hadoop.fs.viewfs.ChRootedFileSystem:setOwner(org.apache.hadoop.fs.Path,java.lang.String,java.lang.String)" : [ {
    "sourceMethod" : "fullPath",
    "targetMethod" : "setOwner"
  } ],
  "org.apache.hadoop.fs.ChecksumFileSystem:<init>(org.apache.hadoop.fs.FileSystem)" : [ ],
  "org.apache.hadoop.metrics2.sink.RollingFileSystemSink:createOrAppendLogFile(org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.ipc.RpcClientException:<init>(java.lang.String,java.lang.Throwable)" : [ ],
  "org.apache.hadoop.util.DataChecksum:newDataChecksum(byte[],int)" : [ {
    "sourceMethod" : "mapByteToChecksumType",
    "targetMethod" : "newDataChecksum"
  } ],
  "org.apache.hadoop.io.file.tfile.Chunk$ChunkDecoder:readLength()" : [ ],
  "org.apache.hadoop.io.SequenceFile:createWriter(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FSDataOutputStream,java.lang.Class,java.lang.Class,org.apache.hadoop.io.SequenceFile$CompressionType,org.apache.hadoop.io.compress.CompressionCodec)" : [ {
    "sourceMethod" : "stream",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "keyClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "valueClass",
    "targetMethod" : "createWriter"
  }, {
    "sourceMethod" : "compression",
    "targetMethod" : "createWriter"
  } ],
  "org.apache.hadoop.ipc.Server:getSchedulerClass(java.lang.String,int,org.apache.hadoop.conf.Configuration)" : [ {
    "sourceMethod" : "getClass",
    "targetMethod" : "convertSchedulerClass"
  } ],
  "org.apache.hadoop.ipc.Client$Connection$PingInputStream:read(byte[],int,int)" : [ ],
  "org.apache.hadoop.metrics2.lib.MutableStat:<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.SequenceFile$Sorter$MergeQueue:updateProgress(long)" : [ ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:getServerDefaults(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.impl.prefetch.BufferPool:numAvailable()" : [ ],
  "org.apache.hadoop.fs.FSDataOutputStreamBuilder:<init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.io.BloomMapFile:byteArrayForBloomKey(org.apache.hadoop.io.DataOutputBuffer)" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsSystemImpl:register(java.lang.String,java.lang.String,java.lang.Object)" : [ {
    "sourceMethod" : "build",
    "targetMethod" : "registerSource"
  }, {
    "sourceMethod" : "sourceName",
    "targetMethod" : "registerSource"
  }, {
    "sourceMethod" : "sourceName",
    "targetMethod" : "register"
  }, {
    "sourceMethod" : "build",
    "targetMethod" : "registerSource"
  }, {
    "sourceMethod" : "sourceName",
    "targetMethod" : "registerSource"
  } ],
  "org.apache.hadoop.security.token.delegation.DelegationKey:<init>(int,long,javax.crypto.SecretKey)" : [ ],
  "org.apache.hadoop.security.alias.CredentialShell$CheckCommand:execute()" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$NflyOutputStream:write(int)" : [ ],
  "org.apache.hadoop.service.launcher.ServiceLauncher:verifyConfigurationFilesExist(java.lang.String[])" : [ ],
  "org.apache.hadoop.ha.HAAdmin:isOtherTargetNodeActive(java.lang.String,boolean)" : [ ],
  "org.apache.hadoop.fs.store.DataBlocks$ByteArrayBlock:startUpload()" : [ ],
  "org.apache.hadoop.metrics2.impl.MetricsConfig:loadFirst(java.lang.String,java.lang.String[])" : [ ],
  "org.apache.hadoop.util.Preconditions:checkNotNull(java.lang.Object)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController:confirmFormat()" : [ ],
  "org.apache.hadoop.metrics2.util.SampleQuantiles:compress()" : [ ],
  "org.apache.hadoop.io.MapFile$Reader:getClosest(org.apache.hadoop.io.WritableComparable,org.apache.hadoop.io.Writable)" : [ ],
  "org.apache.hadoop.fs.BufferedFSInputStream:getIOStatistics()" : [ ],
  "org.apache.hadoop.util.KMSUtil:parseJSONMetadata(java.util.Map)" : [ ],
  "org.apache.hadoop.fs.viewfs.RegexMountPointInterceptorFactory:create(java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.TFile$Reader$Scanner:<init>(org.apache.hadoop.io.file.tfile.TFile$Reader,long,long)" : [ ],
  "org.apache.hadoop.conf.Configuration$Parser:handleInclude()" : [ ],
  "org.apache.hadoop.fs.FileContext$FSDataInputStreamBuilder:build()" : [ {
    "sourceMethod" : "getInt",
    "targetMethod" : "withBufferSize"
  } ],
  "org.apache.hadoop.fs.viewfs.ViewFileSystem:append(org.apache.hadoop.fs.Path,int,org.apache.hadoop.util.Progressable)" : [ {
    "sourceMethod" : "getUriPath",
    "targetMethod" : "resolve"
  } ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem:open(org.apache.hadoop.fs.Path,int)" : [ {
    "sourceMethod" : "workSet",
    "targetMethod" : "repairAndOpen"
  } ],
  "org.apache.hadoop.fs.impl.FutureIOSupport:eval(org.apache.hadoop.util.functional.CallableRaisingIOE)" : [ ],
  "org.apache.hadoop.fs.DelegateToFileSystem:setPermission(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.util.GenericOptionsParser:<init>(org.apache.hadoop.conf.Configuration,java.lang.String[])" : [ ],
  "org.apache.hadoop.ipc.Client$Connection:disposeSasl()" : [ ],
  "org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor:<init>()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.StorageStatisticsFromIOStatistics:iterator()" : [ ],
  "org.apache.hadoop.fs.statistics.impl.DynamicIOStatisticsBuilder:withLongFunctionMaximum(java.lang.String,java.util.function.ToLongFunction)" : [ ],
  "org.apache.hadoop.ha.ZKFailoverController$ServiceStateCallBacks:reportServiceStatus(org.apache.hadoop.ha.HAServiceStatus)" : [ {
    "sourceMethod" : "getState",
    "targetMethod" : "verifyChangedServiceState"
  } ],
  "org.apache.hadoop.io.compress.zlib.ZlibDecompressor:reset()" : [ ],
  "org.apache.hadoop.io.SecureIOUtils:openForRead(java.io.File,java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.fs.FileContext:getFSofPath(org.apache.hadoop.fs.Path)" : [ {
    "sourceMethod" : "toUri",
    "targetMethod" : "getAbstractFileSystem"
  } ],
  "org.apache.hadoop.net.ScriptBasedMapping$RawScriptBasedMapping:setConf(org.apache.hadoop.conf.Configuration)" : [ ],
  "org.apache.hadoop.fs.viewfs.NflyFSystem$MRNflyNode:equals(java.lang.Object)" : [ ],
  "org.apache.hadoop.fs.FileContext$Util:listStatus(java.util.ArrayList,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)" : [ ],
  "org.apache.hadoop.security.User:<init>(java.lang.String,org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod,javax.security.auth.login.LoginContext)" : [ ],
  "org.apache.hadoop.fs.permission.PermissionStatus:write(java.io.DataOutput,java.lang.String,java.lang.String,org.apache.hadoop.fs.permission.FsPermission)" : [ ],
  "org.apache.hadoop.metrics2.sink.StatsDSink:close()" : [ ],
  "org.apache.hadoop.fs.FilterFileSystem:copyToLocalFile(boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)" : [ ],
  "org.apache.hadoop.conf.Configuration:logDeprecationOnce(java.lang.String,java.lang.String)" : [ ],
  "org.apache.hadoop.io.file.tfile.SimpleBufferedOutputStream:write(byte[],int,int)" : [ ]
}