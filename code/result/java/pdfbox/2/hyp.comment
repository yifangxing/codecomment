1 Retrieves the revision number at a specified index. @param index position of the revision number in the list @return integer value of the revision number
2 Retrieves the current stroking color space from the graphics context. @return PDColorSpace object representing the stroke color space
3 Initializes a new PDActionSound with a given COSDictionary. @param a COSDictionary containing sound action details
4 Transforms the given width based on the current graphics state's transformation matrix. @param width original width to be transformed @return adjusted width considering scaling and shearing factors
5 Retrieves the current non-stroking color from the graphics state. @return PDColor object representing the non-stroking color
6 Retrieves an object by its index. @param index position of the object in the list @return object at the specified index or null if out of bounds
7 Sets the stroking color in the current PDF graphics context. @param color PDColor object representing the new stroke color
8 Sets the non-stroking color in the current graphics state. @param color PDColor object to be used for non-stroking operations
9 Retrieves the current stroking color from the graphics context. @return PDColor object representing the stroking color
10 Returns the number of objects managed by the Revisions class. @return int representing the count of managed objects
11 Retrieves the non-stroking color space from the current graphics state. @return PDColorSpace object representing the non-stroking color space
12 Retrieves an integer value from the array at a specified index. @param index the position of the element to retrieve @param defaultValue the default value to return if no valid integer is found @return the integer value at the specified index or the default value
13 Parses PNG chunks from image data. Validates and processes each chunk type, updating state accordingly. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
14 Retrieves the current text line matrix from the graphics state. @return The text line matrix representing the transformation applied to text lines.
15 Constructs a new PDActionURI from a COSDictionary. @param a dictionary containing URI action details
16 Sets the text line matrix in the current graphics state. @param value new transformation matrix for text lines
17 Executes a sequence of instructions within the given context. @param context execution environment for the instructions
18 Retrieves a PDF object from the pool by its key. @param key unique identifier for the PDF object @return COSBase object or null if not found
19 Initializes a new PDActionThread instance. @param a COSDictionary containing thread action details
20 Constructs a new PDActionSubmitForm instance. @param a COSDictionary containing action details
21 Parses the PDF trailer. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
22 Adds a PDF source file to the merger. @param source path to the PDF file @throws FileNotFoundException if the specified file does not exist
23 Returns the index of the selected radio button. @return Index of the selected radio button or -1 if none is selected
24 Creates a PDSoftMask from a dictionary or returns null if invalid. @param dictionary PDF dictionary containing mask properties @param resourceCache cache for managing resources @return PDSoftMask object or null if creation fails
25 Retrieves an instance of Encoding based on the provided COSName. @param name the COSName representing the encoding type @return the corresponding Encoding instance or null if not found
26 Retrieves the current text matrix from the graphics state. @return The Matrix representing the current transformation applied to text.
27 Sets the text transformation matrix in the current graphics state. @param value new transformation matrix for text rendering
28 Returns the number of key-value pairs in the COSDictionaryMap.
29 Retrieves the field tree associated with this form. @return PDFieldTree representing the form's fields
30 Retrieves the list of filters applied to the PDF stream. @return List of COSName representing the filters or an empty list if none set
31 Creates and returns a copy of this matrix. @return A new Matrix instance with identical transformation parameters
32 Constructs a new PDSoftMask from a dictionary. @param dictionary PDF dictionary containing mask properties
33 Creates a scaling transformation matrix. @param x scale factor for the x-axis @param y scale factor for the y-axis @return Matrix object representing the scaling transformation
34 Creates a translation transformation matrix. @param x horizontal translation value @param y vertical translation value @return Matrix representing the translation
35 Creates a rotation transformation matrix. @param theta angle of rotation in radians @param tx translation along X-axis after rotation @param ty translation along Y-axis after rotation @return Matrix representing the rotation and translation
36 Transforms a vector using the matrix. @param vector input vector to be transformed @return transformed vector after applying matrix operations
37 Retrieves the list of file filters from the PDF stream. @return List of filter names or empty list if no filters are present
38 Scales the vector by a given factor. @param sxy scaling factor @return new Vector object with scaled coordinates
39 Retrieves the name of a COSName object at the specified index. @param index position in the array @param defaultValue default string if not found @return name of COSName or default value
40 Finds the index of a specified COSBase object in the array. @param object the COSBase object to search for @return index of the object or -1 if not found
41 Retrieves the Z tristimulus value. @return the Z value as a float
42 Constructs a new PDNonTerminalField instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any
43 Constructs a new PDTerminalField instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any
44 Constructs a PDRectlinearMeasureDictionary instance. @param dictionary COSDictionary representing rectilinear measurement data
45 Evaluates the Function Type 2 with given input. @param input array of float values to interpolate @return interpolated result as a float array
46 Initializes a new instance of PDExtendedGraphicsState with a COSDictionary. @param dictionary the COSDictionary containing graphics state properties
47 Retrieves and initializes the list of filters for a PDF stream. @return List of Filter objects associated with the stream @throws IOException if an invalid filter type is encountered
48 Writes COSBoolean to PDF stream. @param output the OutputStream to write to @param cosBoolean the COSBoolean object to write @throws IOException if an I/O error occurs
49 Constructs a PlainText object from a string. @param textValue the input text to be processed
50 Retrieves the Y tristimulus value of the color. @return Y component as a float
51 Initializes a new instance of PDActionLaunch with a given COSDictionary. @param a COSDictionary containing launch action details
52 Determines if an edge is a line based on control points. @param ctl array of control points defining the edge @return true if the edge can be considered a line, false otherwise
53 Constructs a new PDActionMovie instance. @param a COSDictionary containing movie action details
54 Returns string representation of COSArrayList. Utilizes makeConcatWithConstants to format the output. @return formatted string containing array elements
55 Retrieves or creates an Operator instance for a given PDF operator string. @param operator the operator string to be processed @return Operator object representing the PDF operator
56 Constructs a new PDActionJavaScript instance. @param a COSDictionary containing JavaScript action details
57 Constructs a named PDF action from a COSDictionary. @param a COSDictionary containing action details
58 Finds an ImageReader for a given format that can read raster data. @param formatName name of the image format (e.g., "JPEG", "PNG") @param errorCause detailed error message if no suitable reader is found @return ImageReader object capable of reading raster data @throws MissingImageReaderException if no appropriate reader is available
59 Finds an appropriate ImageReader for the given format. @param formatName name of the image format (e.g., "JPEG", "PNG") @param errorCause detailed reason for failure @return ImageReader instance if found, otherwise throws MissingImageReaderException
60 Initializes a new instance of PDActionResetForm with a given COSDictionary. @param a COSDictionary containing action details
61 Creates a raw input stream for reading. @throws IOException if the stream is closed or not initialized
62 Constructs a new remote goto action. @param a COSDictionary containing action details
63 Initializes a new PDActionHide instance with a given COSDictionary. @param a COSDictionary containing action details
64 Retrieves the X tristimulus value. @return the X value as a float
65 Retrieves the blue component of the color. @return blue component value as a float
66 Writes text to output stream using ASCII encoding. @param text string to be written @throws IOException if an I/O error occurs
67 Retrieves the green component value. @return green component as float
68 Retrieves the red component value. @return float representing the red color component
69 Initializes a new instance of PDActionImportData with a given COSDictionary. @param a COSDictionary containing action details
70 Retrieves the font size from the PDFontSetting. @return the font size as a float value
71 Retrieves the x-coordinate of the upper-right corner. @return x-coordinate as a float
72 Retrieves the Y-coordinate of the lower-left corner. @return the Y-coordinate as a float
73 Checks for changes in user property and notifies if changed. @param oldEntry the previous value of the property @param newEntry the current value of the property
74 Retrieves the x-coordinate of the lower-left corner. @return x-coordinate as a float
75 Creates a new PDActionEmbeddedGoTo instance. @param a COSDictionary containing action details
76 Constructs a new PDActionGoTo instance. @param a COSDictionary containing action details
77 Retrieves the Y-coordinate of the upper-right corner. @return Y-coordinate as a float
78 Checks if a point is within the shaded triangle. @param p point to check @return true if point is inside or on the edge of the triangle, false otherwise
79 Retrieves COSObject by key. @param key unique identifier for the item @return COSObject or null if not found or not a COSObject
80 Inserts a diacritic character into the text at the specified position. @param i index where to insert the diacritic @param diacritic TextPosition object representing the diacritic
81 Initializes a Line segment with specified points and colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array at point p0 @param c1 color array at point p1
82 Initializes a SoftMask with specified parameters. @param paint the graphics paint used for rendering @param mask the BufferedImage representing the mask @param bboxDevice the device space bounding box @param backdropColor the background color of the mask @param transferFunction the function to apply during rendering
83 Removes backdrop from a group image by adjusting RGB values. @param backdrop BufferedImage representing the backdrop to remove @param offsetX horizontal offset for backdrop alignment @param offsetY vertical offset for backdrop alignment
84 Parses XML input stream into a Document object without namespace awareness. @param is input stream containing XML data @return parsed Document object @throws IOException if parsing fails
85 Constructs a COSFloat from a string, handling various formats. @param aFloat string representation of the float @throws IOException if parsing fails or format is unsupported
86 Constructs a PDPageFitDestination from a COSArray. @param arr COSArray containing destination information
87 Initializes a page destination to fit height. @param arr COSArray containing destination details
88 Initializes a PDF page destination from a COSArray. @param arr COSArray containing destination information
89 Constructs a PDF page destination to fit width. @param arr COSArray containing destination information
90 Initializes a PDF page destination with specified properties. @param arr COSArray containing destination information
91 Initializes Mac OS Roman character encoding. Populates character mappings from MAC_OS_ROMAN_ENCODING_TABLE.
92 Creates a Type1Encoding instance from a FontBox Encoding. @param encoding source FontBox encoding @return Type1Encoding object initialized with the given encoding's mappings
93 Retrieves or creates a COSInteger instance for the given value. @param val numeric value to represent @return COSInteger object representing the input value
94 Constructs a new Type7ShadingPaint object. @param shading PDShadingType7 object representing the shading effect @param matrix transformation matrix for the shading effect
95 Normalizes a word by handling Unicode normalization and text direction. @param word the input string to normalize @return normalized and directionally handled string
96 Draws a tiling pattern on the specified graphics context. @param g Graphics2D context for drawing @param pattern PDTilingPattern to be drawn @param colorSpace PDColorSpace used for coloring @param color PDColor for pattern fill @param patternMatrix Matrix defining pattern transformation @throws IOException if an I/O error occurs
97 Constructs a GlyphList from an input stream. @param input stream containing glyph data @param numberOfEntries expected number of entries for memory allocation @throws IOException if an I/O error occurs during loading
98 Constructs a GlyphList by copying another and loading from an input stream. @param glyphList existing GlyphList to copy mappings from @param input stream containing additional glyph data @throws IOException if an I/O error occurs while loading
99 Converts character code to glyph ID. @param code character code @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
100 Retrieves the font name for a given glyph. @param name glyph name to find in the font @return font name or ".notdef" if not found @throws IOException if an I/O error occurs
101 Retrieves the font name for a given glyph. @param name glyph name to find in the font @return font name or ".notdef" if not found
102 Initializes CMYK color space with ICC profile and sets up rendering options. @throws IOException if default CMYK profile cannot be loaded
103 Applies a mask to an image. @param image original BufferedImage to apply mask on @param mask BufferedImage representing the mask @param interpolateMask true for smooth scaling of mask, false for pixelated scaling @param isSoft true if mask is soft, false otherwise @param matte array of float values for matte color @return BufferedImage with applied mask
104 Calculates interpolated color at a given point within the triangle. @param p point within the triangle @return float array representing interpolated color components
105 Intersects current clipping path with a new GeneralPath. @param path the GeneralPath object representing the new clipping path
106 Intersects the current clipping path with a new area. @param area the Area object to intersect with the clipping path
107 Transfers the current clipping path to a Graphics2D object. Handles empty clipping paths by setting them to an empty rectangle.
108 Initializes a cubic Bezier curve with control points and detail level. @param ctrlPnts array of control points defining the curve @param l level of detail (number of segments)
109 Sets the stroking color using a PDColor object. @param color PDColor object representing the color @return true if color is successfully set, false otherwise @throws IOException if an I/O error occurs while writing to the content stream
110 Writes an FDF document to the output stream. @param doc FDFDocument object to write @throws IOException if I/O error occurs during writing
111 Writes a COS integer to the PDF output stream. @param output target output stream for writing @param cosInteger the COS integer to write @throws IOException if an I/O error occurs during writing
112 Compares this XReferenceEntry with another based on their referenced keys. @param xReferenceEntry the other entry to compare with @return negative integer, zero, or positive integer if less than, equal to, or greater than
113 Retrieves the X scaling factor of the text matrix. @return The absolute value of the X scaling factor
114 Retrieves the vertical scaling factor of the text. @return vertical scaling factor or shear component if scaling is zero
115 Creates a raw output stream for writing data to the COSStream. @return OutputStream for writing data @throws IOException if an I/O error occurs or if the stream is already open
116 Initializes a new COSWriter instance for PDF document output. @param outputStream underlying OutputStream to write data to @param compressParameters parameters for compression settings
117 Initializes a new instance of COSWriter for incremental PDF updates. @param outputStream destination stream for the updated PDF @param inputData original PDF data for reference
118 Returns the string representation of the byte array. Handles UTF-16BE and UTF-16LE BOMs, defaulting to PDFDocEncoding. @return String representation of the byte array
119 Constructs a new resource cache instance with stable caching enabled.
120 Initializes a COSString from a given text. @param text the input string to be encoded @param forceHex if true, forces hexadecimal encoding
121 Initializes a new instance of LayerUtility. @param targetDoc the PDDocument to manipulate and manage layers for
122 Writes a COS array to the output stream. @param output the OutputStream to write to @param cosArray the COSArray to be written @throws IOException if an I/O error occurs
123 Retrieves item by first key, or second key if first is null. @param firstKey primary key to search for @param secondKey fallback key if first key not found @return COSBase object or null if both keys are missing
124 Returns the number of recipients in the encryption settings. @return int representing the count of recipients
125 Retrieves recipient string at specified index. @param i index of the recipient in the recipients array @return COSString containing recipient data or null if not found
126 Retrieves the direction of the transition. @return COSBase object representing the direction or zero if not specified
127 Retrieves all metadata keys from the PDF document. @return Set of metadata keys as strings
128 Retrieves a list of attribute names from the COSDictionary. Excludes the "O" key if present. @return List of attribute names as strings
129 Adds trailer information to the PDF cross-reference stream. @param trailerDict dictionary containing trailer entries
130 Constructs a COSDictionary by copying entries from another. @param dict source dictionary to copy entries from
131 Determines if a COSDictionary represents document info. @param dictionary the dictionary to check @return true if dictionary contains info keys, false otherwise
132 Checks if font descriptor contains width information. @return true if WIDTHS or MISSING_WIDTH key is present, false otherwise
133 Checks if the font descriptor contains missing width information. @return true if missing width is defined, false otherwise
134 Checks if the form contains XFA data. @return true if XFA key is present in the dictionary, false otherwise
135 Returns string representation of COSFloat. Uses formatted float value in plain or scientific notation. @return formatted string with float value enclosed
136 Writes formatted float value to PDF stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
137 Converts update state to an increment. @return COSIncrement instance representing the update
138 Determines if the font is one of the standard 14 PDF fonts. @return true if the font is a standard 14 font, false otherwise
139 Reads bytes from an ASCII85 encoded input stream into a buffer. @param data buffer to store the read bytes @param offset starting index in the buffer @param len maximum number of bytes to read @return number of bytes actually read, or -1 if end of stream @throws IOException if an I/O error occurs
140 Calculates the final encryption key for a PDF object. @param objectNumber unique object identifier in PDF @param genNumber generation number of the object @return byte array representing the final key
141 Initializes a new content stream for PDF appearance. @param appearance the PDAppearanceStream to manage @param outputStream the OutputStream to write content
142 Initializes a new content stream for an appearance stream. @param doc the PDDocument containing the appearance @param appearance the PDAppearanceStream to write to @param outputStream the OutputStream to write content
143 Transforms a point using the current graphics state's transformation matrix. @param x x-coordinate of the point to transform @param y y-coordinate of the point to transform @return transformed Point2D.Float object
144 Creates a paint context for tiling patterns. @param cm color model for the graphics context @param deviceBounds bounding box of the device space @param userBounds bounding box of the user space @param xform transformation matrix @param hints rendering hints @return PaintContext object for pattern rendering
145 Concatenates another transformation matrix to this one. @param matrix Matrix to concatenate
146 Applies translation to the matrix. @param tx horizontal translation factor @param ty vertical translation factor
147 Scales the matrix by given factors. @param sx scaling factor for x-axis @param sy scaling factor for y-axis
148 Multiplies this matrix with another. @param other Matrix to multiply with @return Resulting Matrix after multiplication
149 Creates a SecurityHandler for a given ProtectionPolicy. @param policy the protection policy to apply @return SecurityHandler instance or null if not found
150 Creates a SecurityHandler instance for a given filter name. @param name unique security handler identifier @return SecurityHandler object or null if not found
151 Parses all objects in a PDF stream. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs during parsing
152 Reads the next byte from the decoded data stream. @return the next byte as an integer, or -1 if end of stream is reached
153 Reads a specified number of bytes from the decoded data stream. @param data buffer to store read bytes @param offset starting position in the data buffer @param length number of bytes to read @return actual number of bytes read or -1 if end of stream is reached
154 Reads an image from an input stream and sets it as the signature image. @param stream InputStream containing the image data @throws IOException if an I/O error occurs while reading the stream
155 Sets non-stroking color on demand. @param color PDColor object to be applied @return true if color is successfully set, false otherwise @throws IOException if an I/O error occurs
156 Selects the best row for writing by estimating compression sums. @return byte array of the row with the highest estimated compression sum
157 Converts a COSName to its corresponding RenderState. @param state COSName representing the rendering state @return RenderState object or null if invalid
158 Converts COSName to corresponding BaseState. @param state COSName representing the state @return BaseState object, defaulting to ON if null
159 Initializes the parser with content from a PDF stream. @param pdContentstream the PDF content stream to parse @throws IOException if an I/O error occurs while parsing
160 Initializes the parser with a byte array containing PDF data. @param bytes PDF content as a byte array
161 Parses a PDF object by its number. @param objectNumber the ID of the PDF object to parse @return COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
162 Reads and maps PDF object numbers to their offsets. @return Map of object numbers to offsets @throws IOException if an I/O error occurs
163 Encodes raw data using LZW compression. @param rawData input stream of raw data to encode @param encoded output stream for compressed data @param parameters optional encoding parameters @throws IOException if an I/O error occurs during processing
164 Constructs a new Type6ShadingPaint object. @param shading PDShadingType6 object representing the shading effect @param matrix transformation matrix for the shading effect
165 Extracts and returns PANOSE classification data. @return PDPanoseClassification object containing font classification info
166 Constructs a new Type4ShadingPaint object. @param shading PDShadingType4 object representing the type 4 shading @param matrix transformation matrix for the shading effect
167 Adds a TextPosition to the PDF content. @param text TextPosition object representing the text element
168 Adds marked content to the PDF document. @param markedContent PDMarkedContent object to be added
169 Adds an XObject to the PDF document content. @param xobject the graphical object to be added
170 Sets printing permission for PDF documents. @param allowPrinting true to allow printing, false to disallow
171 Sets modification permission for PDF documents. @param allowModifications true to enable modification, false to disable
172 Sets permission to extract content from PDF. @param allowExtraction true to allow extraction, false to disallow
173 Enables or disables modification of annotations in PDF documents. @param allowAnnotationModification true to allow, false to restrict annotation modifications
174 Sets permission to fill in forms within PDF documents. @param allowFillingInForm true to enable form filling, false to disable
175 Sets permission to extract content for accessibility. @param allowExtraction true to allow extraction, false to disallow
176 Sets permission to assemble document. @param allowAssembly true to enable, false to disable assembly
177 Applies GSUB rules to transform character glyphs in a word. @param gsubWorker worker for applying GSUB transformations @param out output stream for writing transformed glyphs @param font PDF font used for character mapping and encoding @param word input string to be processed @return list of glyph IDs after GSUB transformation
178 Constructs a new PDDocument from a COSDocument. @param doc the underlying COSDocument representing the PDF @param source the source of the PDF data @param permission the access permissions for the document
179 Sets the permission for faithful printing of a PDF document. @param canPrintFaithful true to allow faithful printing, false otherwise
180 Constructs an FDFDocument from a COSDocument and data source. @param doc the underlying COSDocument @param source the RandomAccessRead source containing FDF data
181 Returns a string representation of the FunctionType2. @return formatted string with C0, C1, and N values
182 Checks if printing permission is granted. @return true if print permission is enabled, false otherwise
183 Checks if content extraction permission is granted. @return true if content extraction is allowed, false otherwise
184 Retrieves the default Adobe Glyph List. @return predefined GlyphList instance for Adobe glyphs
185 Constructs a PDColor with specified components, pattern name, and color space. @param components array of color components @param patternName name of the pattern @param colorSpace associated color space
186 Returns the COSDictionary representing image parameters. @return COSDictionary containing image attributes
187 Checks if annotation modification permission is granted. @return true if annotations can be modified, false otherwise
188 Checks if form filling permission is granted. @return true if fill-in-form permission is enabled, false otherwise
189 Checks if extraction for accessibility is permitted. @return true if permission is granted, false otherwise
190 Checks if assembling of the document is permitted. @return true if assemble permission is granted, false otherwise
191 Checks if the document allows faithful printing. @return true if faithful print permission is granted, false otherwise
192 Sets encryption key for RC4 cipher. @param key byte array representing the encryption key (1-32 bytes)
193 Writes a single byte to the output stream after encrypting it using RC4. @param aByte the byte to be encrypted and written @param output the OutputStream to write the encrypted byte to @throws IOException if an I/O error occurs while writing
194 Determines if a code point is prohibited for SASL use. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
195 Checks if modification permission is granted. @return true if modification is allowed, false otherwise
196 Computes PDF version number based on key length and encryption preferences. @return Version number for encryption settings
197 Converts a character code to its corresponding CID. @param code character code to convert @return CID associated with the character code
198 Retrieves the highest cross-reference object number from the pool. @return The highest XRef object number managed by the pool.
199 Closes the PDF document and associated resources, logging any IO exceptions. Ensures all open streams and COSWriter are properly closed.
200 Closes the FDF document and associated streams. @throws IOException if an I/O error occurs during closing
201 Returns the underlying COS object. @return COSDictionary representing the PDF function or stream
202 Initializes a PDXObject with a PDStream and subtype. @param stream the PDStream containing the object's data @param subtype the COSName representing the object subtype
203 Returns the underlying COSStream object. @return COSStream representing the PDF stream
204 Retrieves metadata from the PDF stream. @return COSStream containing metadata or null if not found
205 Sets the metadata for the ICC profile. @param metadata COSStream containing the metadata to be set
206 Compares this annotation with another for equality. @param o the object to compare @return true if equal, false otherwise
207 Constructs a new Type5ShadingPaint instance. @param shading PDShadingType5 object representing the shading effect @param matrix transformation matrix for rendering the shading
208 Decodes a hexadecimal string to a byte array. @param s input hexadecimal string @return byte array representation of the hex string
209 Sets the bounding box for the form XObject. @param bbox PDRectangle representing the new bounding box or null to remove it
210 Unchecks the checkbox by setting its value to "Off". @throws IOException if an I/O error occurs while updating the PDF
211 Converts standard Boolean to COSBoolean. @param value standard Boolean object @return corresponding COSBoolean instance
212 Determines the text direction based on transformation matrix. @return Direction in degrees (0, 90, 180, 270)
213 Determines if the COS object needs to be updated. @return true if the update state indicates an update is needed, false otherwise
214 Checks equality with another COSInteger based on their integer values. @param o the object to compare @return true if equal, false otherwise
215 Constructs a COSObjectKey with validation. @param num object number, must be non-negative @param gen generation number, must be non-negative @param index stream index
216 Checks if the next character in the source is a digit. @return true if the next character is a digit, false otherwise @throws IOException if an I/O error occurs while reading from the source
217 Checks if the document is accepting updates. @return true if the document is open for updates, false otherwise
218 Writes a byte to the ASCII85 encoded stream. @param b byte to encode and write
219 Flushes the ASCII85 encoded data to the output stream. Handles padding, transformation, and formatting according to ASCII85 rules.
220 Decodes a row of image data using specified predictor algorithm. @param predictor type of prediction algorithm to use @param colors number of color components per pixel @param bitsPerComponent bits per color component @param columns number of columns in the image @param actline active line buffer for decoding @param lastline previous line buffer for reference
221 Retrieves the numeric value of the reference type. @return Long representing the numeric value of the reference type
222 Retrieves the generation number of the referenced object. @return The generation component from the COSObjectKey
223 Returns a string representation of the FreeReference. @return String in the format "FreeReference{key=..., nextFreeObject=..., type=...}"
224 Retrieves the byte offset of the referenced object. @return byte offset value
225 Returns the generation number of the referenced object. @return The generation component extracted from the COSObjectKey
226 Returns a string representation of the reference. @return String describing the reference type, key, numeric value, and byte offset
227 Retrieves the object number from the parent key. @return The object number of the parent key
228 Retrieves the index of the object stream. @return Index representing the position of the object stream
229 Returns a string representation of the ObjectStreamEntry. @return String containing key, type, object stream index, and parent key details
230 Writes data to the output stream without starting on a new line. @param b byte array containing data to write @param off offset within the byte array to start writing from @param len number of bytes to write
231 Writes a single byte to the output stream. Ensures no new line is started before writing. @param b the byte to be written
232 Writes an end-of-line character if not already on a new line. @throws IOException if an I/O error occurs
233 Checks if compression is enabled based on current settings. @return true if compression is enabled, false otherwise
234 Adds a cross-reference entry to the PDF document. @param entry XReferenceEntry object representing the entry to be added
235 Writes a PDF object reference to the output stream. @param output the output stream for writing @param indirectReference the COSObjectKey representing the object reference @throws IOException if an I/O error occurs
236 Adds a cross-reference entry to the PDF. @param entry XReferenceEntry to be added
237 Checks if the next character in the source is a space or newline. @return true if the next character is a space or newline, false otherwise
238 Retrieves the type of the pattern. @return The string representation of the pattern type
239 Sets the cross-reference entry for a given object key. @param objKey unique identifier for the PDF object @param offset file position of the object
240 Checks if the next character in the source is a space. @return true if the next character is a space, false otherwise @throws IOException if an I/O error occurs while reading from the source
241 Skips a line break in the PDF source. @param linebreak character code of the potential line break @return true if a valid line break is skipped, false otherwise
242 Checks for end of string in PDF parsing. @param bracesParameter current brace count @return updated brace count or 0 if end of string detected
243 Checks if character code represents end of line. @param c character code to check @return true if c is end of line, false otherwise
244 Reads a numeric string from the PDF source. @return StringBuilder containing the numeric string @throws IOException if an I/O error occurs or number exceeds MAX_LENGTH_LONG
245 Checks if the next character in the source is whitespace. @return true if the next character is whitespace, false otherwise @throws IOException if an I/O error occurs while reading from the source
246 Parses the startxref value in a PDF file. @return long representing the byte offset of the first object reference, or -1 if not found
247 Searches for the last EOF marker in a PDF. @return position of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs
248 Searches for XRef streams in the PDF. @return List of offsets for found XRef streams @throws IOException if an I/O error occurs
249 Retrieves the cross-reference table from the PDF document. @return Map of COSObjectKey to object number or null if not resolved
250 Reads and parses the PDF file to find the startxref offset. @return Offset of the startxref in the PDF file @throws IOException if an I/O error occurs or required markers are missing
251 Reads data until "endstream" is found. @param out stream to filter content into @return effective length of the filtered content
252 Retrieves the default value of the button. @return The string representation of the default value or an empty string if none set
253 Retrieves the type of shading. @return The string representation of the shading type
254 Searches for cross-reference tables in the PDF. @return List of offsets where xref tables are found @throws IOException if an I/O error occurs
255 Constructs a new COSName instance with the specified name. @param aName the string representation of the PDF name
256 Private constructor to prevent instantiation.
257 Constructs a COSString from a byte array. @param bytes the byte array to be stored @param forceHex if true, forces hexadecimal representation
258 Initializes a new COSDictionary with an associated update state. @param this reference to the current COSDictionary instance
259 Constructs a COSObject wrapping a given COSBase. @param object the underlying COSBase to manage
260 Constructs a COSObject wrapping a COSBase. @param object the underlying COSBase object @param parser the ICOSParser instance for parsing
261 Initializes a COSObject with a given key and parser. @param key unique identifier for the COS object @param parser ICOSParser instance for parsing operations
262 Initializes new DecodeOptions with specified source region. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width width of the region to decode @param height height of the region to decode
263 Constructs a FreeXReference instance. @param key object key for the reference @param nextFreeObject ID of the next free object in the PDF
264 Constructs an ObjectStreamXReference. @param objectStreamIndex index of the object stream @param key reference key for the object @param object referenced PDF object @param parentKey key of the parent object
265 Constructs a resource cache with stable caching enabled by default.
266 Wraps a COSDictionary object. @param dictionary PDF dictionary to be wrapped
267 Initializes a PDAttributeObject with a given COSDictionary. @param dictionary PDF dictionary to be wrapped
268 Constructs a new COSBoolean instance. @param aValue boolean value to encapsulate
269 Constructs a PDUserProperty with a given COSDictionary and user attribute object. @param dictionary PDF dictionary to be wrapped @param userAttributeObject associated user attribute object
270 Constructs a PDOutlineNode from a COSDictionary. @param dict PDF dictionary representing the outline node
271 Constructs a new PDDestinationNameTreeNode from a COSDictionary. @param dic COSDictionary representing the node's data
272 Constructs a new square annotation from a COSDictionary. @param a PDF dictionary representing the annotation
273 Constructs an FDFAnnotationStamp instance. @param a PDF dictionary representing the stamp annotation
274 Constructs a new FDFAnnotationText instance. @param a the underlying PDF dictionary representing the annotation
275 Constructs a new text markup annotation from a COSDictionary. @param a the underlying PDF dictionary representing the annotation
276 Returns a Composite instance for blending images. @param blendMode the blending mode to apply @param constantAlpha the alpha value for transparency (clamped between 0 and 1) @return Composite object configured with specified blend mode and alpha
277 Retrieves transparency group attributes. @return PDTransparencyGroupAttributes object or null if not present
278 Constructs a new PDShadingPattern from a given COSDictionary. @param resourceDictionary dictionary containing pattern properties
279 Constructs a new tiling pattern with the given dictionary and resource cache. @param dictionary COSDictionary containing pattern properties @param resourceCache ResourceCache for managing resources
280 Constructs a PDShadingType1 instance from a given COSDictionary. @param shadingDictionary dictionary containing Type 1 shading properties
281 Constructs a new PDShadingType2 instance. @param shadingDictionary COSDictionary containing Type 2 shading properties
282 Constructs an axial shading paint object. @param shadingType2 axial shading type to apply @param matrix transformation matrix for the shading effect
283 Constructs a new RadialShadingPaint object. @param shading PDShadingType3 instance representing the radial shading @param matrix transformation matrix for the shading effect
284 Constructs a new Type1ShadingPaint instance. @param shading the PDShadingType1 object to be applied @param matrix transformation matrix for the shading effect
285 Constructs an FDFAnnotationSound from a COSDictionary. @param a the underlying PDF dictionary representing the sound annotation
286 Initializes a new polyline annotation from a COS dictionary. @param a the underlying PDF dictionary representing the annotation
287 Constructs an FDFAnnotationPolygon from a COSDictionary. @param a the underlying PDF dictionary representing the polygon annotation
288 Initializes a new FDFAnnotationLink instance with a given COSDictionary. @param a the underlying PDF dictionary representing the annotation link
289 Constructs a new PDEmbeddedFilesNameTreeNode from a COSDictionary. @param dic COSDictionary representing the node's data
290 Initializes a new PDJavascriptNameTreeNode with a given dictionary. @param dic COSDictionary representing the node's data
291 Constructs a new PDStructureElementNameTreeNode from a COSDictionary. @param dic COSDictionary representing the node's data
292 Creates a child node from a COS dictionary. @param dic the COSDictionary representing the child node @return a new PDNumberTreeNode instance initialized with the given dictionary and value type
293 Constructs a PDMetadata instance from a COSStream. @param str underlying COSStream object representing XMP metadata
294 Constructs a PDObjectStream instance from a COSStream. @param str underlying COSStream object
295 Constructs a PDEmbeddedFile instance from a COSStream. @param str underlying COSStream object representing the embedded file
296 Initializes a PDFunction from a given COSBase object. @param function the underlying COSBase object representing the function
297 Initializes a PDXObject with a given COSStream and subtype. @param stream underlying COSStream object @param subtype type of the XObject
298 Constructs a PDTransition object. @param dictionary PDF dictionary containing transition properties
299 Constructs a new PDF structure element. @param dic COS dictionary representing the structure node
300 Initializes a new structure tree root with a given COS dictionary. @param dic COS dictionary representing the structure node
301 Default constructor for SecurityHandler.
302 Constructs a new FDFAnnotationCaret instance. @param a the underlying PDF dictionary representing the annotation
303 Initializes a circular annotation from a COSDictionary. @param a PDF dictionary representing the annotation
304 Constructs an FDFAnnotationFileAttachment instance from a COSDictionary. @param a the underlying PDF dictionary representing the annotation
305 Constructs an FDFAnnotationFreeText instance. @param a COSDictionary representing the annotation
306 Constructs an FDFAnnotationInk instance from a COSDictionary. @param a the underlying PDF dictionary representing the ink annotation
307 Initializes a new FDFAnnotationLine instance with a given COSDictionary. @param a the underlying PDF dictionary representing the line annotation
308 Writes paragraph start marker to output. Handles existing paragraphs by ending them first.
309 Writes the line separator to the output stream. @throws IOException if an I/O error occurs
310 Writes the word separator to the output stream. Uses the current word separator character.
311 Writes the start position of the current page to the output stream.
312 Writes the end marker of the current page to the output. @throws IOException if an I/O error occurs during writing
313 Returns the Unicode representation of text in visually ordered form. @return Visually ordered Unicode string
314 Determines if a character is a diacritic. @return true if the character is a diacritic, false otherwise
315 Converts a byte to its hexadecimal string representation. @param b input byte @return two-character hexadecimal string
316 Converts byte array to hexadecimal string. @param bytes input byte array @return Hexadecimal representation of the input bytes
317 Converts a single byte to its hexadecimal byte representation. @param b input byte @return array of two bytes representing the high and low nibbles in hex
318 Converts byte array to ASCII representation in hexadecimal. @param bytes input byte array @return ASCII byte array representing hexadecimal values
319 Writes a byte as two hexadecimal characters to an output stream. @param b the byte to convert and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
320 Formats a float into ASCII bytes. @param value the float to format @param maxFractionDigits maximum number of fraction digits @param asciiBuffer buffer to store ASCII representation @return new offset after formatting or -1 if invalid input
321 Searches for a value based on a byte sequence. @param bytes input byte array to search @return associated value or default if not found
322 Ends an article in the PDF text extraction process. Writes the end position of the current article to the output stream.
323 Starts an article in the PDF text extraction process. @param isLTR indicates if text direction is left-to-right @throws IOException if an I/O error occurs during writing
324 Returns the Unicode representation of the text. @return Unicode string representing the text content
325 Writes extracted text to the output stream. @param text TextPosition object containing the text to be written
326 Retrieves the height of the template. @return Height of the template in points
327 Ensures the provided outline item has no siblings. @param node PDOutlineItem to validate @throws IllegalArgumentException if node has any siblings
328 Calculates the X rotation based on the given rotation angle. @param rotation the rotation angle in degrees @return the calculated X position after rotation
329 Calculates the Y-coordinate of the lower-left corner based on rotation. @param rotation angle of rotation in degrees @return Y-coordinate after applying rotation
330 Calculates the width of a rotated text element. @param rotation angle of rotation in degrees @return width based on the orientation of rotation
331 Sets the signature's position on the PDF page. @param x horizontal coordinate for positioning @param y vertical coordinate for positioning @return reference to this designer instance
332 Initializes a PDMarkedContent with a tag and properties. @param tag COSName representing the content tag, can be null @param properties COSDictionary containing additional properties
333 Constructs a new highlight annotation from a COSDictionary. @param a the underlying PDF dictionary representing the annotation
334 Constructs a new tiling pattern with the given dictionary. @param dictionary COSDictionary containing pattern properties
335 Constructs a new PDSignatureField instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any
336 Constructs a new PDVariableText instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any
337 Generates a string representation of the Revisions object. @return String listing objects with their revision numbers
338 Generates a unique partial name for a signature field. @return Unique signature field name
339 Default constructor for PublicKeySecurityHandler.
340 Constructs a PDFormXObject with a given COSStream and resource cache. @param stream underlying COSStream object representing the form XObject @param cache resource cache for managing resources
341 Initializes a new StandardSecurityHandler with a specified protection policy. @param standardProtectionPolicy the security policy to apply
342 Constructs a PDFormXObject from a given COSStream. @param stream underlying COSStream object representing the form XObject
343 Constructs a PostScript XObject from a given COSStream. @param stream underlying COSStream object containing PostScript data
344 Constructs a COSDocument instance using a memory-only stream cache. @param parser parser for PDF document
345 Creates a PDSoftMask from a dictionary. @param dictionary PDF dictionary containing mask properties @return PDSoftMask object or null if creation fails
346 Constructs a new PDShadingType3 instance. @param shadingDictionary COSDictionary containing Type 3 shading properties
347 Constructs a new instance of PDShadingType4. @param shadingDictionary COSDictionary containing triangle-based shading properties
348 Constructs a new strikeout annotation from a COSDictionary. @param a the underlying PDF dictionary representing the annotation
349 Initializes a new PublicKeySecurityHandler with a specified protection policy. @param publicKeyProtectionPolicy the security policy to apply using public key cryptography
350 Constructs an underline annotation from a COSDictionary. @param a the underlying PDF dictionary representing the annotation
351 Constructs a new PDButton instance. @param acroForm the AcroForm containing this button @param field the COSDictionary representing the button @param parent the parent PDNonTerminalField, if any
352 Constructs a squiggly annotation from a COSDictionary. @param a PDF dictionary representing the annotation
353 Constructs a new instance of PDShadingType5. @param shadingDictionary COSDictionary containing triangle-based shading properties
354 Default constructor for SecurityHandler.
355 Applies translation to the current text matrix. @param tx horizontal translation factor @param ty vertical translation factor
356 Checks if a point is within the rectangle. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
357 Initializes a ShadedTriangle with vertices and colors. @param p array of Point2D representing triangle vertices @param c 2D float array representing colors at each vertex
358 Sets the font provider and updates internal font mappings. @param fontProvider new FontProvider instance
359 Saves font information to disk cache. @throws SecurityException if unable to create a writer for the cache file
360 Retrieves or loads a FontBoxFont based on font format. @return loaded FontBoxFont or null if not found
361 Encrypts or decrypts data using AES-256. @param data input stream of the data to process @param output output stream for processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors during processing
362 Encrypts or decrypts data using AES algorithm. @param finalKey encryption key bytes @param data input stream containing data to process @param output output stream for processed data @param decrypt true if decryption is required, false for encryption @throws IOException on I/O errors or security exceptions
363 Processes a character sequence as a token. Converts to string and delegates to token processing method. @param text the character sequence to process
364 Concatenates two matrices by multiplying them. @param a First matrix @param b Second matrix @return Resulting Matrix after concatenation
365 Applies translation to the matrix using vector coordinates. @param vector the translation vector
366 Constructs a PDFunctionType3 instance from a COSBase object. @param functionStream the underlying COSBase object representing the function stream
367 Loads a glyph list from a specified resource file. @param filename name of the glyph list file @param numberOfEntries expected number of entries in the glyph list @return GlyphList object initialized with data from the file
368 Sets the current clipping path on the graphics context. Compares with previous paths and updates if changed.
369 Ends text clipping by applying buffered clip areas. @param none @return void
370 Retrieves mapping of glyph IDs to character codes. @return Map with glyph ID as key and character code as value @throws IOException if an I/O error occurs during font processing
371 Calculates rectangle width. @return width as a float
372 Rotates the matrix by a specified angle around the origin. @param theta angle of rotation in radians
373 Writes a COSFloat to the PDF stream. @param output the OutputStream to write to @param cosFloat the COSFloat object to write @throws IOException if an I/O error occurs
374 Checks if the COSDictionaryMap is empty. @return true if no key-value pairs are present, false otherwise
375 Writes an operator to the output stream followed by a newline. @param text operator string to be written @throws IOException if an I/O error occurs
376 Writes an integer operand to the output stream. @param integer the integer value to write @throws IOException if an I/O error occurs
377 Writes a float operand to the output stream. @param real the float value to write @throws IOException if an I/O error occurs
378 Determines the file suffix based on image filters. @return File suffix string or null if no matching filter found
379 Initializes a PDImageXObject with a PDStream and resources. @param stream the PDStream containing image data @param resources the PDResources associated with the image
380 Creates an output stream for writing data to a PDF stream. @param filters optional filters to apply during writing @return OutputStream for writing filtered data @throws IOException if the stream or document is closed
381 Retrieves the name of a COSName object at the specified index. @param index position in the array @return name of COSName or null if not found
382 Retrieves an integer value from the array at a specified index. @param index the position of the element to retrieve @return the integer value at the specified index or -1 if not found
383 Generates a string representation of the rectangle's coordinates. @return String in the format "[x1,y1,x2,y2]"
384 Converts the rectangle to a GeneralPath object. @return GeneralPath representing the rectangle's boundary
385 Transforms the rectangle using a matrix and returns a GeneralPath. @param matrix transformation matrix to apply @return transformed GeneralPath representing the rectangle
386 Calculates the height of the rectangle. @return Height as a float
387 Converts update state of a COS object to an increment. @return COSIncrement instance representing the update
388 Initializes a new COSWriter instance with default compression. @param outputStream underlying OutputStream to write data to
389 Computes the owner password for a PDF document. @param ownerPassword owner's password as byte array @param userPassword user's password as byte array @param encRevision encryption revision level @param length desired key length in bytes @return encrypted owner password as byte array
390 Computes user password for PDF encryption. @param password user password bytes @param owner owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return encrypted user password as byte array
391 Sets the signature image from a file. @param path file path to the signature image @return PDVisibleSignDesigner instance for method chaining @throws IOException if an I/O error occurs while reading the file
392 Initializes signature designer with an image stream. @param imageStream InputStream containing the signature image data @throws IOException if an I/O error occurs while reading the stream
393 Initializes a COSString from a given text. @param text the input string to be encoded
394 Retrieves the default appearance string for text fields. @return Default appearance string or null if not set
395 Retrieves export values for the button. @return List of export values as strings
396 Retrieves pairable items from a COSBase object. @param items the COSBase object containing key-value pairs @param pairIdx index specifying which element to retrieve (0 or 1) @return List of strings representing the retrieved items, empty if not applicable
397 Retrieves the name of the named destination. @return The string representation of the named destination
398 Retrieves the string representation of the file. @return String representation of the file content
399 Retrieves a string from the array at the specified index. @param index position of the element in the array @param defaultValue value to return if the element is not found or is not a COSString @return String representation of the COSBase object at the given index, or default value
400 Constructs a PDFunctionType0 from a COSBase object. @param function the underlying COSBase object representing the Type 0 PDF function
401 Retrieves metadata associated with the image. @return PDMetadata object or null if no metadata exists
402 Searches for the nearest cross-reference offset to a given xref offset. @param xrefOffset target offset value @return nearest cross-reference offset or -1 if not found @throws IOException if an I/O error occurs
403 Parses the PDF header. @return true if header is successfully parsed, false otherwise @throws IOException if an I/O error occurs
404 Parses the FDF (Forms Data Format) header. @return true if header is successfully parsed, false otherwise @throws IOException if an I/O error occurs
405 Constructs a new PDDocument from a COSDocument. @param doc the underlying COSDocument representing the PDF @param source the source of the PDF data
406 Reads a line from the PDF source. Handles end-of-line characters and returns the line as a string. Throws IOException if end-of-file is reached unexpectedly.
407 Attempts to skip a line break in the PDF source. @return true if a valid line break is skipped, false otherwise
408 Creates a new PDDocument instance. @return PDDocument object initialized with document, source, and access permissions
409 Retrieves the COSBase representation of transition degrees. @return COSInteger object representing the degrees value
410 Detects the file type from a BufferedInputStream. @param inputStream stream containing file data @return FileType object representing the detected file type @throws IOException if input stream does not support mark/reset or ends prematurely
411 Writes an array of bytes as hexadecimal characters to a stream. @param bytes the byte array to convert and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
412 Writes the COSName to a PDF output stream. @param output OutputStream to write the name to @throws IOException if an I/O error occurs
413 Writes an external signature to a PDF document. @param cmsSignature CMS signature bytes to be written @throws IOException if writing fails or PDF is not prepared for signing
414 Converts byte array to hexadecimal string. @return Hexadecimal representation of the internal byte array
415 Converts Calendar to ISO 8601 string. @param cal Calendar instance to convert @return ISO 8601 formatted date-time string
416 Converts Calendar to string in PDF date format. @param cal Calendar instance to convert @return formatted date string or null if input is null
417 Skips spaces and comments in the PDF source. @throws IOException if reading from the source fails
418 Writes paragraph end marker to output. Ensures correct paragraph formatting by starting new paragraphs as needed. @throws IOException if an I/O error occurs during writing
419 Starts an article in PDF text extraction with left-to-right text direction. @throws IOException if an I/O error occurs during writing
420 Calculates adjusted width of text based on direction. @return Width considering text direction
421 Retrieves the width of the text element based on its rotation. @return width of the rotated text element
422 Adjusts Y-coordinate direction for PDF text positioning. @return Adjusted Y-coordinate based on page dimensions and rotation
423 Initializes a TextPosition object with specified properties. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of an individual character @param spaceWidth width of a space character @param unicode Unicode representation of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize font size in user space units @param fontSizeInPt font size in points
424 Retrieves adjusted X direction based on text rotation. @return Adjusted X direction in degrees
425 Checks if all permissions are granted, indicating owner rights. @return true if all permissions (assemble, extract, fill, modify, print) are enabled, false otherwise
426 Skips leading whitespaces and line breaks in the PDF source. Reads characters until a non-whitespace or non-line break character is encountered.
427 Checks if any revision 3 permissions are set. @return true if any of fill-in-form, extract for accessibility, assemble document, or faithful print is permitted
428 Checks if a PDF object needs to be updated. @param base the PDF object to check @return true if the object needs updating, false otherwise
429 Appends a child element to the PDF structure. @param mcid unique identifier for the media content @throws IllegalArgumentException if MCID is negative
430 Parses and returns a COSNumber from a string. @param number string representation of the numeric value @return COSFloat or COSInteger based on input, or throws IOException if invalid
431 Retrieves the extended object stream. @return PDObjectStream representing the extended stream or null if none exists
432 Closes the ASCII85OutputStream, flushing any remaining data and releasing resources.
433 Updates the document's state. @param updated flag indicating whether the document has been updated
434 Constructs a COSObjectKey with default stream index. @param num object number, must be non-negative @param gen generation number, must be non-negative
435 Retrieves font metrics for a given font name. @param fontName the name of the font to retrieve metrics for @return FontMetrics object or null if not found
436 Writes an array of bytes to the output stream after encrypting each one. @param data array of bytes to be encrypted and written @param output OutputStream to write the encrypted bytes to @throws IOException if an I/O error occurs while writing
437 Constructs a PDFormXObject with a given stream. @param stream the PDStream containing the form data
438 Writes a portion of byte array to an output stream after encrypting it. @param data the byte array containing the data to be written @param offset the starting index in the data array @param len the number of bytes to write @param output the OutputStream to write the encrypted data to @throws IOException if an I/O error occurs while writing
439 Closes all overlay resources and documents. Ensures all open overlays and PDF documents are properly closed and cleared.
440 Initializes a new instance of PDPageAdditionalActions with an empty COSDictionary.
441 Initializes a new instance of PDFormFieldAdditionalActions. Creates an empty COSDictionary to store additional form field actions.
442 Initializes a new instance of PDDocumentCatalogAdditionalActions. Sets up the internal COSDictionary to manage document catalog actions.
443 Initializes a new instance of PDAnnotationAdditionalActions. Creates an empty COSDictionary to store annotation actions.
444 Initializes a new PDAdditionalActions instance with an empty COSDictionary.
445 Initializes a new PDShading instance with an empty COSDictionary.
446 Initializes a new PDDeviceNProcess with an empty COSDictionary.
447 Initializes a new PDDeviceNAttributes with an empty COSDictionary.
448 Constructs a new PDTargetDirectory with an associated COSDictionary.
449 Initializes a new FDF template with an empty COSDictionary.
450 Constructs a new FDFPage with an empty underlying COSDictionary.
451 Initializes a new named page reference. Creates an underlying COSDictionary to manage page metadata.
452 Constructs a new instance of FDFJavaScript. Initializes an associated COSDictionary for storing JavaScript data.
453 Initializes a new FDFIconFit with an empty COSDictionary.
454 Initializes a new FDFField with an empty COSDictionary.
455 Constructs a new FDFDictionary instance. Initializes an underlying COSDictionary to manage FDF data.
456 Initializes a new FDFCatalog with an empty COSDictionary.
457 Initializes a new instance of FDFPageInfo with a default COSDictionary.
458 Constructs a new PDCryptFilterDictionary. Initializes an underlying COSDictionary to manage cryptographic filters.
459 Initializes a new PDURIDictionary with an empty COSDictionary.
460 Initializes a new border effect dictionary. Creates an underlying COSDictionary to store properties.
461 Retrieves metadata from the PDF stream. @return PDMetadata object or null if no metadata is present
462 Constructs a PDOutlineItem from a COSDictionary. @param dic PDF dictionary representing the outline item
463 Constructs a PDStandardAttributeObject wrapping a given COSDictionary. @param dictionary PDF dictionary to be wrapped
464 Constructs a PDUserAttributeObject with a given COSDictionary. @param dictionary PDF dictionary to be wrapped
465 Initializes a new PDWindowsLaunchParams with an empty COSDictionary.
466 Constructs a PDDefaultAttributeObject wrapping the given COSDictionary. @param dictionary PDF dictionary to be wrapped
467 Initializes viewer preferences with a new dictionary.
468 Constructs a new PDViewportDictionary with an empty viewport dictionary.
469 Constructs a new PDField instance with default settings. @param acroForm the AcroForm containing this field
470 Initializes a new instance of PDSeedValueTimeStamp with an empty COSDictionary. The dictionary is set to be direct for efficient storage.
471 Initializes a new PDSeedValueMDP with an associated update state.
472 Initializes a new instance of PDPropBuildDataDict with an empty COSDictionary. Ensures that the dictionary uses direct objects as per the specification.
473 Constructs a new PDPropBuild instance with a direct COSDictionary.
474 Constructs a new PDBorderStyleDictionary. Initializes the internal dictionary to store border style properties.
475 Initializes a COSObject with a given base object and key. @param object the underlying COSBase object @param objectKey unique identifier for the COS object
476 Initializes a new PDBoxStyle with an empty COSDictionary.
477 Initializes a new PDEncryption object with an empty COSDictionary.
478 Initializes a new instance of PDMarkInfo with an empty COSDictionary.
479 Initializes a new PDPropertyList with an associated COSDictionary.
480 Initializes the LegacyPDFStreamEngine with various text operators. Sets up PDF processing for text extraction and rendering.
481 Creates a new PDPageLabelRange with default settings.
482 Initializes a new PDNameTreeNode with an empty COSDictionary.
483 Constructs a new PDDictionaryWrapper with an empty COSDictionary.
484 Initializes a new instance of PDResources. Constructs an empty COSDictionary for storing resources and sets up caches.
485 Initializes a new PDDocumentInformation with an empty metadata dictionary.
486 Creates a default DecodeResult instance. @return DecodeResult object initialized with an empty COSDictionary
487 Wraps a COSDictionary in an unmodifiable view. @param dict the original COSDictionary to wrap
488 Initializes a new COSStream with a specified cache. @param streamCache the cache for managing stream data
489 Retrieves or creates a COSName instance for the given PDF name. @param aName PDF name string @return COSName object associated with the name
490 Initializes an empty COSArray. @param new ArrayList<COSBase>(), true
491 Constructs a COSString from a byte array. @param bytes the byte array to be stored
492 Constructs a PDAppearanceStream from a COSStream. @param stream underlying COSStream object representing the appearance stream
493 Initializes a PDTransparencyGroup with a COSStream and resource cache. @param stream underlying COSStream object representing the form XObject @param cache resource cache for managing resources
494 Adds a TrueType collection font by processing its headers and computing checksum. @param ttcFile the TrueType collection file to add
495 Adds a TrueType font to the list. @param fontHeaders headers of the font @param file font file @param hash font hash
496 Adds a Type1 font from a PFB file. @param pfbFile PFB font file to add
497 Initializes a COSArrayList with a given dictionary and key. @param dictionary the parent COSDictionary containing the list @param dictionaryKey the key in the dictionary for this list
498 Constructs a PDPrintFieldAttributeObject wrapping a given COSDictionary. @param dictionary PDF dictionary to be wrapped
499 Retrieves resources associated with the form XObject. @return PDResources object or null if no resources are found
500 Retrieves the most recent decode result. @return DecodeResult object, either the last one or a default if none exist
501 Returns an unmodifiable view of this dictionary. @return UnmodifiableCOSDictionary instance wrapping this dictionary
502 Initializes a COSStream with cache and read view. @param streamCache the cache for managing stream data @param randomAccessReadView the view for reading stream data @throws IOException if an I/O error occurs
503 Constructs a new COSStream with no initial cache.
504 Creates a new COSStream and adds it to the document. @return the newly created COSStream
505 Constructs a PDRectangle with specified dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
506 Initializes an empty PDPageDestination with a new COSArray.
507 Initializes a new COSArrayList with empty underlying structures.
508 Parses a hexadecimal string into a COSString. @param hex the input hexadecimal string @return COSString object representing the parsed data @throws IOException if parsing fails due to invalid characters
509 Constructs a PDRectangle from a bounding box. @param box BoundingBox object containing rectangle coordinates
510 Default constructor for PDAttributeObject.
511 Constructs a new PDUserProperty with the specified user attribute object. @param userAttributeObject the user attribute object to encapsulate
512 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary PDF dictionary representing list attributes
513 Constructs a PDLayoutAttributeObject wrapping a given COSDictionary. @param dictionary PDF dictionary to be wrapped
514 Returns the current font provider, initializing with a default one if none is set. @return FontProvider instance
515 Generates shaded triangles from coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the patch
516 Constructs a CoonsPatch with given control points and corner colors. @param points array of control points defining the patch @param color 2D array representing corner colors
517 Constructs a new terminal field within a PDF form. @param acroForm the AcroForm containing this field
518 Converts a COSString to a GregorianCalendar. @param text COSString containing date information @return Calendar instance or null if input is null
519 Constructs a new PDNonTerminalField instance. @param acroForm the AcroForm containing this field
520 Initializes a new PDStructureElementNameTreeNode.
521 Default constructor initializes an empty JavaScript name tree node.
522 Constructs a new PDEmbeddedFilesNameTreeNode with an empty COSDictionary.
523 Constructs a new PDDestinationNameTreeNode with an empty COSDictionary.
524 Constructs a new outline node with an empty dictionary.
525 Constructs a PDTableAttributeObject wrapping a given COSDictionary. @param dictionary PDF dictionary representing table attributes
526 Begins a text block in the PDF content stream. @throws IOException if an I/O error occurs or if nested calls are attempted
527 Sets the line join style in a PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
528 Sets the line width for drawing operations. @param lineWidth the desired line width in user space units @throws IOException if an I/O error occurs while writing to the stream
529 Clips the current path using even-odd rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
530 Clips the current path to the current clipping area. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
531 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs while writing
532 Closes path, fills and strokes it using even-odd rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
533 Closes, fills, and strokes the current path. Throws exception if called within a text block. @throws IOException if an I/O error occurs
534 Fills and strokes the current path using even-odd rule. Throws exception if called within a text block. @throws IOException if an I/O error occurs
535 Fills and strokes the current path. Throws exception if called within text mode. @throws IOException if an I/O error occurs
536 Fills the current path using even-odd rule. Throws exception if called in text mode. @throws IOException if an I/O error occurs
537 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
538 Closes the current path and strokes it. Throws exception if called within a text block. @throws IOException if an I/O error occurs
539 Strokes the current path. Throws exception if called within text mode. @throws IOException if an I/O error occurs
540 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or called within text mode
541 Moves the graphics cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs @throws IllegalStateException if called within a text block
542 Draws a cubic Bézier curve with the final control point replicated. @param x1 first control point's X coordinate @param y1 first control point's Y coordinate @param x3 end point's X coordinate (also used as second control point) @param y3 end point's Y coordinate @throws IOException if an I/O error occurs
543 Draws a cubic Bézier curve with the second control point same as the end point of the previous curve. @param x2,y2 coordinates of the second control point @param x3,y3 coordinates of the end point @throws IOException if an I/O error occurs
544 Draws a cubic Bezier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
545 Adds a rectangle to the PDF content stream. @param x x-coordinate of the lower-left corner @param y y-coordinate of the lower-left corner @param width width of the rectangle @param height height of the rectangle @throws IOException if an I/O error occurs
546 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if I/O error occurs
547 Sets non-stroking color using CMYK values. @param c cyan component (0-1) @param m magenta component (0-1) @param y yellow component (0-1) @param k black component (0-1) @throws IOException if an I/O error occurs
548 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
549 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any component is outside [0, 1] @throws IOException if an I/O error occurs
550 Sets the line dash pattern. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
551 Ends a marked content sequence in the PDF document. @throws IOException if an I/O error occurs while writing to the stream
552 Computes user password for PDF encryption. @param ownerPassword document owner's password @param owner owner's identifier @param encRevision encryption revision level @param length desired key length in bytes @return computed user password as byte array or empty array if unsupported revision @throws IOException if an I/O error occurs
553 Initializes a new TensorPatch with control points and colors. @param tcp array of control points (20 elements) @param color 2D array representing corner colors
554 Sets the named destination. @param dest the destination string or null to clear @throws IOException if an error occurs during initialization
555 Initializes a named destination with a given COSString. @param dest the COSString representing the destination
556 Sets the file name for the specification. @param fileName the name of the file to be specified
557 Initializes a PDSimpleFileSpecification with an empty file name.
558 Retrieves the button's value, handling both COSName and export values. @return The string representation of the button's value
559 Retrieves string from array at specified index. @param index position of the element in the array @return String representation of the COSBase object or null if not found
560 Saves FDF document to specified output stream. @param output OutputStream to write FDF data to @throws IOException if I/O error occurs during saving
561 Sets the text rise in the PDF content stream. @param rise the amount to raise or lower the text @throws IOException if an I/O error occurs
562 Sets the text rendering mode. @param rm RenderingMode to be applied @throws IOException if an I/O error occurs
563 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
564 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if an I/O error occurs
565 Sets character spacing in the PDF content stream. @param spacing the character spacing value to apply @throws IOException if an I/O error occurs while writing to the stream
566 Sets the miter limit for line joins. @param miterLimit the miter limit value to set @throws IOException if an I/O error occurs
567 Sets the stroking color for grayscale. @param g gray level (0.0 to 1.0) @throws IOException if an I/O error occurs
568 Sets CMYK stroking color. @param c cyan component [0..1] @param m magenta component [0..1] @param y yellow component [0..1] @param k black component [0..1] @throws IOException if I/O error occurs
569 Sets the stroking color using RGB values. @param r red component (0 to 1) @param g green component (0 to 1) @param b blue component (0 to 1) @throws IOException if I/O error occurs or parameters are out of range
570 Initializes COSDocument with memory-only stream cache and no encryption.
571 Saves the current graphics stack and resets it with a cloned state. @return The original graphics stack before reset
572 Saves the current graphics state by cloning and pushing it onto the stack.
573 Constructs a new PDTextField instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any
574 Constructs a new PDChoice instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any
575 Constructs a new PDRadioButton instance. @param acroForm the AcroForm containing this button @param field the COSDictionary representing the button @param parent the parent PDNonTerminalField, if any
576 Constructs a new PDPushButton instance. @param acroForm the AcroForm containing this button @param field the COSDictionary representing the button @param parent the parent PDNonTerminalField, if any
577 Constructs a new PDCheckBox instance. @param acroForm the AcroForm containing this checkbox @param field the COSDictionary representing the checkbox @param parent the parent PDNonTerminalField, if any
578 Clips the current graphics state to a transformed rectangle. @param rectangle PDRectangle to be used for clipping
579 Calculates the transformed bounding box of an appearance stream. @param appearanceStream the appearance stream to transform @return Rectangle2D representing the transformed bounds
580 Initializes graphics state with page boundaries. @param page PDRectangle representing the page dimensions
581 Retrieves the left boundary of the destination. @return integer value representing the left coordinate
582 Restores the previous graphics state in a PDF document. Throws an exception if called within text mode. Pops color space stacks and writes a restore operator to the output stream. @throws IOException if an I/O error occurs
583 Saves the current graphics state to a stack. Throws an exception if called within text mode. Writes a save operator to the output stream.
584 Moves the text cursor to a new position with specified offsets. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
585 Moves to the next line in text mode. @throws IOException if an I/O error occurs
586 Sets the text leading in the PDF content stream. @param leading the spacing between lines of text @throws IOException if an I/O error occurs
587 Ends text mode and writes the END_TEXT operator. @throws IOException if an I/O error occurs
588 Writes an affine transformation matrix to the output stream. @param transform the AffineTransform object to write @throws IOException if an I/O error occurs
589 Retrieves the soft mask image associated with this PDF image. @return PDImageXObject representing the soft mask or null if none exists
590 Retrieves the mask associated with the image. @return PDImageXObject representing the mask or null if none exists
591 Creates a thumbnail image from a COSStream. @param cosStream the COSStream containing image data @return PDImageXObject representing the thumbnail
592 Creates an output stream with specified filter. @param filter optional filter to apply during writing @return OutputStream for writing filtered data @throws IOException if the stream or document is closed
593 Checks if the bounding box fitting type is set. @return true if bounding box fitting is enabled; false otherwise
594 Checks if the destination fits the bounding box. @return true if the destination type is bounded, false otherwise
595 Checks if the destination fits the bounding box. @return true if the destination is bounded, false otherwise
596 Retrieves the top coordinate of the destination. @return the y-coordinate value at index 3 of the internal array
597 Retrieves the left position of the destination. @return integer value representing the left coordinate or -1 if not found
598 Retrieves the top position of the bounding box. @return integer value representing the top coordinate
599 Retrieves the top coordinate of the rectangle. @return the top coordinate value
600 Retrieves the right coordinate of the rectangle. @return the right coordinate value
601 Retrieves the bottom coordinate of the rectangle. @return the y-coordinate of the bottom edge
602 Retrieves the left coordinate of the rectangle. @return left coordinate as an integer
603 Creates an output stream for writing data to a PDF stream without filters. @return OutputStream for writing raw data @throws IOException if the stream or document is closed
604 Prepares a string for SASL use with unassigned characters allowed. @param str input string to prepare @return normalized and validated string allowing unassigned characters
605 Encrypts and writes data from an input stream to an output stream. @param data the InputStream containing plain bytes @param output the OutputStream to write encrypted data to @throws IOException if I/O error occurs during reading or writing
606 Encrypts data using RC4 algorithm. @param finalKey encryption key (1-32 bytes) @param input array of bytes to encrypt @param output OutputStream for encrypted data @throws IOException if I/O error occurs
607 Computes the PDF revision number based on version and permissions. @param version current PDF version @return computed revision number for security settings
608 Retrieves or initializes the current access permissions for the document. @return AccessPermission object with full permissions
609 Constructs a new PDDocument from a COSDocument. @param doc the underlying COSDocument representing the PDF
610 Calculates the fixed offset for a cross-reference table/stream. @param objectOffset original object offset @return fixed offset or 0 if not found @throws IOException if an I/O error occurs
611 Reads and parses a long value from the PDF source. @return parsed long value @throws IOException if parsing fails or I/O error occurs
612 Reads and parses an integer from the PDF source. @return parsed integer value @throws IOException if reading fails or parsing error occurs
613 Reads a string of specified length from the PDF source. @param length maximum number of characters to read @return parsed string or empty if no valid characters found @throws IOException if reading fails
614 Reads and verifies an expected string from the PDF source. @param expectedString the string to be read @param skipSpaces flag to skip spaces before reading @throws IOException if the expected string does not match or on IO error
615 Reads a string from the PDF source. @return the read string or an empty string if no valid characters are found @throws IOException if reading from the source fails
616 Prepares a string for SASL use by normalizing and validating characters. @param str input string to prepare @return normalized and validated string
617 Initializes a PDTransparencyGroup with a given stream. @param stream the PDStream containing transparency data
618 Sets whether the COS object needs to be updated. @param flag true if update is needed, false otherwise
619 Initializes a PDColor with components and color space. @param array COSArray containing color component values @param colorSpace the PDColorSpace for the color
620 Parses a cross-reference table in a PDF. @param startByteOffset starting byte position of the xref section @return true if parsing is successful, false otherwise
621 Parses cross-reference entries using the provided resolver. @param resolver object to handle parsed xref entries @throws IOException if an I/O error occurs during parsing
622 Searches for object stream offsets in a PDF. @return Map of offsets to COSObjectKey @throws IOException if an I/O error occurs
623 Searches for and records COS objects in a PDF. Uses EOF marker to limit search range. @throws IOException if an I/O error occurs
624 Retrieves or creates a COSObjectKey for given object number and generation. Uses caching to improve performance for large PDFs. @param num object number @param gen generation number @return cached or newly created COSObjectKey
625 Creates a PDMarkedContent instance based on the tag. @param tag COSName representing the content tag, can be null @param properties COSDictionary containing additional properties @return PDArtifactMarkedContent if tag is ARTIFACT, otherwise PDMarkedContent
626 Writes CID to Unicode mappings to an output stream in CMap format. @param out destination for writing the CMap data @throws IOException if an I/O error occurs
627 Updates the document's state to reflect changes. Calls update(boolean) with true indicating an update has occurred.
628 Checks if the dictionary contains a key. @param name PDF name string @return true if the key is present, false otherwise
629 Retrieves item by string key. @param key unique identifier for the item @return COSBase object or null if not found
630 Initializes PDF text extraction with marked content operators.
631 Initializes the PDFMarkedContentExtractor with specified encoding. Adds various operators for handling marked content sequences and objects. @param encoding character encoding for processing PDF content
632 Retrieves a PDF filter by name. @param filterName the name of the filter to retrieve @return the Filter instance associated with the given name @throws IOException if the specified filter is invalid or not found
633 Parses a PDF name from the source. @return COSName object representing the parsed name @throws IOException if an I/O error occurs during parsing
634 Merges a diacritic into the text position. @param diacritic TextPosition object representing the diacritic
635 Checks if the current TextPosition contains another TextPosition. @param tp2 the other TextPosition to check @return true if there is significant X and Y overlap, false otherwise
636 Writes paragraph separator by ending and starting a new paragraph. @throws IOException if an I/O error occurs during writing
637 Checks if the current TextPosition completely contains another. @param tp2 TextPosition to check against @return true if current TextPosition fully encloses tp2, otherwise false
638 Writes a COSName to the PDF output stream. @param output OutputStream to write the name to @param cosName COSName object to be written @throws IOException if an I/O error occurs
639 Writes a COSName operand to the PDF output stream. @param name the COSName to be written @throws IOException if an I/O error occurs
640 Writes a byte array as a string to an OutputStream. @param bytes the byte array to write @param forceHex if true, forces writing in hexadecimal format @param output the OutputStream to write to @throws IOException if an I/O error occurs
641 Retrieves data to be signed from the PDF document. @return InputStream containing data to sign or null if not prepared for signing @throws IOException if an I/O error occurs
642 Applies a transformation matrix to the content stream. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
643 Sets the text matrix for current text state. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
644 Initializes a new content stream for PDF appearance with optional compression. @param appearance the PDAppearanceStream to manage @param compress whether to enable compression on the output stream @throws IOException if an I/O error occurs
645 Constructs a new PDListBox instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any
646 Default constructor for PDStandardAttributeObject.
647 Constructs a new outline node with an empty dictionary.
648 Initializes a new variable text field within a PDF form. @param acroForm the AcroForm containing this field
649 Constructs a PDExportFormatAttributeObject wrapping a given COSDictionary. @param dictionary PDF dictionary to be wrapped
650 Retrieves the appearance stream. @throws IllegalStateException if the entry is not a stream @return PDAppearanceStream object
651 Adds a TrueType or OpenType font to the system. @param ttfFile file representing the font
652 Writes byte data to a PDF appearance stream. @param data the byte array to write @param appearanceStream the target appearance stream @throws IOException if I/O operations fail
653 Constructs a new instance of PDShadingType6. @param shadingDictionary COSDictionary containing mesh-based shading properties
654 Constructs a new PDComboBox instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any
655 Initializes PDF parsing with encryption details. @param source input stream of the PDF document @param password decryption password for the PDF @param keyStore input stream of the keystore file @param keyAlias alias for the encryption key in the keystore
656 Creates an output stream for writing data to a PDF stream without filters. @return OutputStream for writing raw data @throws IOException if the stream or document is closed
657 Constructs Type 7 shading from dictionary. @param shadingDictionary COSDictionary with shading properties
658 Initializes user attribute object with default owner.
659 Default constructor for PDAttributeObject.
660 Encrypts data using RC4 algorithm. @param finalKey encryption key for RC4 cipher @param input InputStream containing plain bytes @param output OutputStream to write encrypted data @throws IOException if I/O error occurs during processing
661 Reads and validates an object number from the PDF source. @return parsed object number @throws IOException if parsing fails, object number is invalid, or I/O error occurs
662 Reads and validates the generation number from a PDF. @return parsed generation number @throws IOException if reading fails or number is invalid
663 Computes encryption key for PDF based on revision. @param password user or owner password bytes @param o owner entry bytes @param u user entry bytes @param oe owner encryption key @param ue user encryption key @param permissions document access permissions @param id document identifier @param encRevision PDF encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @param isOwnerPassword flag indicating if it's the owner password @return encrypted key as byte array @throws IOException if required entries are missing or encryption fails
664 Validates user password for PDF encryption based on revision. @param password user password bytes @param user stored user entry bytes @param owner owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if password matches, false otherwise @throws IOException if hash computation fails or unknown revision
665 Finds a font by format and PostScript name, handling various naming conventions. @param format the font format to match @param postScriptName the original PostScript name of the font @return FontBoxFont instance or null if not found
666 Converts a COSString to a Calendar instance. @param text COSString containing date information @return Calendar instance or null if input is null
667 Sets the origin document state for this object. @param originDocumentState the new origin document state @param dereferencing indicates if dereferencing is required
668 Sets the underlying base object to null. Updates document state if baseObject is not null.
669 Updates the state of a COSUpdate object if its origin document state differs. @param updateState The state to be updated.
670 Removes an item by key from the dictionary. @param key the COSName key of the item to remove
671 Clears all key-value pairs and marks the dictionary as updated.
672 Removes a COSBase object from the array. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
673 Removes and returns the element at the specified index. @param i index of the element to remove @return the removed COSBase object or null if index is out of bounds
674 Clears all COSBase objects in the array and updates the document state.
675 Retrieves COS object offsets from a PDF. Triggers search if not already performed. @return Map of COSObjectKey to their offsets in the PDF @throws IOException if an I/O error occurs during search
676 Processes a TextPosition, handling duplicates and diacritics. @param text TextPosition object to process
677 Processes a TextPosition object, handling Unicode setting and suppression of duplicate overlapping text. @param text TextPosition to be processed
678 Creates a raw COSStream from an input stream. @param document PDDocument to add the stream to @param rawInput InputStream containing data for the stream @return COSStream with transferred data @throws IOException if I/O operations fail
679 Initializes a PDStream with data from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filters optional COSBase filters for stream data @throws IOException if I/O operations fail
680 Constructs a new PDStream instance by creating a COSStream in the given document. @param document the PDF document to add the stream to
681 Initializes a new PDStream associated with a given PDDocument. @param document PDDocument to which the stream belongs
682 Creates a new PDObjectStream within the given PDDocument. @param document PDDocument to contain the stream @return PDObjectStream instance initialized with a new COSStream
683 Initializes a new PDFXRefStream with a given COSDocument. @param cosDocument the document to which the cross-reference stream belongs
684 Applies padding to a rectangle. @param box original PDRectangle @param padding amount of padding to add @return new PDRectangle with applied padding
685 Adjusts a rectangle's dimensions by applying difference values. @param rectangle the original PDRectangle to adjust @param differences array of four floats representing adjustments to x, y, width, height @return new PDRectangle with adjusted dimensions or original if differences are invalid
686 Adjusts a rectangle's position and size based on given differences. @param rectangle original PDRectangle to modify @param differences array of 4 floats representing adjustments [left, bottom, right, top] @return new PDRectangle with adjusted dimensions or original if input is invalid
687 Returns a new PDRectangle with added padding. @param rectangle original PDRectangle to pad @param padding amount of padding to add around the rectangle @return new PDRectangle with increased padding
688 Calculates the difference rectangle between annotation bounds and bounding box. @return PDRectangle representing the difference or a default rectangle if annotRect is null
689 Creates a PDRectangle from bounding box coordinates. @return PDRectangle object representing the border's dimensions
690 Encodes an input stream using specified parameters. @param input source data stream to be encoded @param encoded destination stream for encoded output @param parameters configuration options for encoding process @param index not used in this method, likely a placeholder for future use
691 Constructs a PDRectangle with specified dimensions at origin. @param width rectangle width @param height rectangle height
692 Parses a hexadecimal string from the PDF source. @return COSString object representing the parsed hex data @throws IOException if parsing fails due to invalid characters or missing closing bracket
693 Sets an integer value at a specified index. @param index position in the array @param intVal new integer value to set
694 Initializes PDFTextStripperByArea with default settings. Disables text separation by beads.
695 Default constructor initializes with null encoding. Uses default settings for handling marked content sequences.
696 Initializes PDF graphics rendering engine for a given page. @param page PDPage instance to render graphics on
697 Writes a byte array as a string to an OutputStream. @param bytes the byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
698 Writes a COSString to an OutputStream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
699 Sets a marked content point in the PDF with a given tag. @param tag COSName representing the mark tag @throws IOException if an I/O error occurs
700 Begins a marked content sequence in the PDF. @param tag COSName identifier for the marked content @param mcid unique mark identifier, must not be negative @throws IOException if an I/O error occurs
701 Begins marked content with a specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
702 Constructs a PDRectangle with default dimensions. Initializes rectangle at origin (0,0) with zero width and height.
703 Parses a PDF COS dictionary value. Handles numbers and generation checks. @return parsed COSBase object or null on error @throws IOException if parsing fails due to I/O errors
704 Saves FDF document to a file. @param fileName destination file for saving the FDF document @throws IOException if I/O error occurs during saving
705 Initializes content stream for PDF appearance. @param appearance the PDAppearanceStream to manage @throws IOException if I/O operations fail
706 Removes an element at the specified index. @param index position of the element to remove @throws UnsupportedOperationException if list is filtered @return removed element or null if not found
707 Clears all entries from both the map and actuals collections.
708 Removes an entry by key from the dictionary. Converts key to PDF name and removes from both dictionary and backing map. @param key String representation of the key to remove @return Value associated with the removed key, or null if not found
709 Initializes PDF parsing without encryption details. @param source input stream of the PDF document @throws IOException if an I/O error occurs during initialization
710 Initializes a content stream for an appearance stream. @param doc the PDDocument containing the appearance @param appearance the PDAppearanceStream to write to @throws IOException if initialization fails
711 Removes an element from the list. @param o element to be removed @return true if the element was successfully removed, false otherwise @throws UnsupportedOperationException if removing from a filtered list
712 Constructs a PDFParser for decrypting PDFs. @param source input source of the PDF document @param decryptionPassword password for decrypting the PDF @param keyStore Java KeyStore containing certificates and keys @param alias alias for the key in the KeyStore @throws IOException if an I/O error occurs
713 Initializes a new content stream for a PDF form XObject. @param form the PDFormXObject to write to @throws IOException if an I/O error occurs
714 Sets line width on demand, avoiding default value. @param lineWidth desired line width @throws IOException if an I/O error occurs
715 Draws a paperclip shape on the PDF content stream. @param contentStream the appearance content stream for rendering
716 Draws a circle on the PDF appearance content stream. @param cs the content stream to draw on @param x the center x-coordinate of the circle @param y the center y-coordinate of the circle @param r the radius of the circle @throws IOException if an I/O error occurs while drawing
717 Draws a circle on the PDF appearance content stream. @param cs content stream to draw on @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle @throws IOException if an I/O error occurs
718 Draws a diamond shape on the PDF appearance content stream. @param cs the content stream for rendering @param x the center x-coordinate of the diamond @param y the center y-coordinate of the diamond @param r the radius of the diamond @throws IOException if an I/O error occurs
719 Draws a shape with specified line width and optional stroke/fill. @param lineWidth thickness of the shape's outline @param hasStroke whether to apply a stroke @param hasFill whether to fill the shape @throws IOException if an I/O error occurs during drawing
720 Draws an arrow on a PDF content stream. @param cs PDF appearance content stream for rendering @param x starting x-coordinate of the arrow @param y starting y-coordinate of the arrow @param len length of the arrow @throws IOException if an I/O error occurs while drawing
721 Validates and corrects PDF cross-reference offsets. Uses brute force if initial validation fails. @throws IOException if an I/O error occurs during processing
722 Initializes a new PDPrintFieldAttributeObject. Sets the owner to OWNER_PRINT_FIELD by default.
723 Writes a COSString to an OutputStream with a trailing space. @param output the OutputStream to write to @param cosString the COSString to write @throws IOException if an I/O error occurs
724 Encrypts or decrypts PDF object data. @param objectNumber unique identifier of the PDF object @param genNumber generation number of the PDF object @param data input stream containing data to process @param output output stream for processed data @param decrypt true if decryption is required, false for encryption @throws IOException on I/O errors during processing
725 Collects and processes COSBase objects from a COSArray. @param array the COSArray to process @return true if any descendant demands parent update, false otherwise
726 Sets the origin document state without dereferencing. @param originDocumentState new state for the origin document
727 Renders text in the current PDF content stream. @param text string to be rendered @throws IOException if an I/O error occurs during rendering
728 Initializes a new PageDrawer with specified parameters. @param parameters configuration settings for rendering @throws IOException if an I/O error occurs during initialization
729 Sets the high value in the color space array. @param high the high value to set at index 2
730 Constructs a PDListAttributeObject with list owner.
731 Initializes layout attributes with default owner.
732 Constructs a PDImageXObject from an encoded stream. @param document PDF document to add the image to @param encodedStream input stream containing encoded image data @param cosFilter COSBase object representing filter @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @throws IOException if I/O operations fail
733 Initializes a PDStream with data from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filters COSArray of filters for stream data @throws IOException if I/O operations fail
734 Initializes a PDStream with data from an InputStream and a specific filter. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filter COSName specifying the filter for stream data @throws IOException if I/O operations fail
735 Constructs a PDStream from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @throws IOException if I/O operations fail
736 Initializes a PDXObject with the given document and subtype. @param document PDDocument to which the object belongs @param subtype COSName representing the subtype of the XObject
737 Creates a new embedded file within a PDF document. @param document the PDF document to which the embedded file belongs
738 Initializes a new PDMetadata instance for the given PDF document. @param document PDDocument to which the metadata belongs
739 Retrieves the bounding box rectangle of the border. @return PDRectangle representing the border's dimensions
740 Constructs an immutable rectangle with specified dimensions. @param width rectangle width @param height rectangle height
741 Parses a COS string from the PDF source. Handles different types of strings including hex and literal. @return COSString object representing the parsed data @throws IOException if parsing fails due to invalid characters or syntax
742 Sets the page number for the destination. @param pageNumber target page number to set
743 Initializes table attribute object with default owner.
744 Constructs a PDImageXObject from a PDDocument. Initializes with a new PDStream and no resources. @param document the PDDocument containing image data
745 Validates user password for PDF encryption. @param password user password string @param user stored user entry bytes @param owner owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if password matches, false otherwise @throws IOException if hash computation fails or unknown revision
746 Saves FDF document to specified file path. @param fileName destination file path for saving the FDF document @throws IOException if I/O error occurs during saving
747 Writes the content of a PDF page to an output stream, handling text extraction and layout. This method processes each article on the page, sorts text positions if required, and then iterates through the sorted or unsorted list of TextPositions. It uses various strategies to determine word boundaries, including space character width, average character width, and position overlap checks. The extracted text is organized into lines and paragraphs, which are then written out using the provided writeLine and writeParagraphStart methods. The method also handles special cases such as superscript/subscript text and RTL (right-to-left) text direction. @throws IOException If an I/O error occurs during text extraction or writing.
748 Parses input text into an instruction sequence. @param text the text to be parsed @return the resulting InstructionSequence object
749 Validates PDF owner password based on encryption revision. @param ownerPassword document owner's password bytes @param user stored user entry bytes @param owner owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if password matches, false otherwise @throws IOException for unknown encryption revision
750 Finds a FontBoxFont by PostScript name, checking various font formats. @param postScriptName the original PostScript name of the font @return FontBoxFont instance or null if not found
751 Initializes a PDEmbeddedFile with data from an InputStream. @param doc PDDocument to associate the embedded file with @param input InputStream containing file data @param filter COSName specifying the filter for stream data @throws IOException if I/O operations fail
752 Constructs a PDEmbeddedFile from an InputStream. @param doc PDDocument to associate the embedded file with @param str InputStream containing the embedded file data @throws IOException if I/O operations fail
753 Displays text at the current position in the PDF. @param text string to be displayed @throws IOException if an I/O error occurs during display
754 Constructs a PDFormXObject. @param document PDDocument to which the form XObject belongs
755 Creates a PageDrawer with specified parameters and annotation filter. @param parameters configuration settings for rendering @return configured PageDrawer instance @throws IOException if an I/O error occurs during initialization
756 Writes text with positioning to PDF content stream. @param textWithPositioningArray array of Float and String objects representing text and positions @throws IOException if an I/O error occurs during writing
757 Writes a COSBase object as a token to the PDF output stream. @param base the COSBase object to write @throws IOException if an I/O error occurs
758 Initializes PDMetadata with a PDF document and input stream. @param doc PDDocument to associate the metadata with @param str InputStream containing metadata XML data @throws IOException if I/O operations fail
759 Prepares a PDImageXObject from byte array. @param document PDF document to add the image to @param byteArray input image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @return PDImageXObject instance ready for PDF inclusion @throws IOException if I/O operations fail
760 Initializes FDF parsing with specified input source. @param source input stream of the FDF document @throws IOException if an I/O error occurs during initialization
761 Constructs a PDFParser for decrypting PDFs using a password. @param source input source of the PDF document @param decryptionPassword password for decrypting the PDF @throws IOException if an I/O error occurs
762 Draws annotation style on PDF content stream. @param style type of annotation style to draw @param cs PDF appearance content stream for rendering @param x starting x-coordinate @param y starting y-coordinate @param width size factor for shape dimensions @param hasStroke whether to apply a stroke @param hasBackground whether to fill the background @param ending direction flag for arrow styles @throws IOException if an I/O error occurs during drawing
763 Writes text from defined regions in a PDF page. Iterates over each region, extracts and writes corresponding text. @throws IOException If an I/O error occurs during processing
764 Validates PDF owner password. @param password document owner's password as string @param user stored user entry bytes @param owner owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if password matches, false otherwise @throws IOException for unknown encryption revision
765 Constructs a PDExportFormatAttributeObject with specified owner. @param owner the owner of the export format attributes
766 Initializes the FileSystemFontProvider with a given FontCache. Scans for font files, loads cached info if available, otherwise builds and saves cache. @param cache FontCache to manage font information
767 Decrypts a COSString using specified PDF object details. @param string the encrypted COSString to decrypt @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @return decrypted COSBase object or original if decryption fails
768 Encrypts a PDF string. @param string the COSString to encrypt @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @return encrypted COSString @throws IOException on I/O errors during encryption
769 Updates the document state and handles child updates. @param child object to be updated
770 Collects and processes COSBase objects for PDF updates. @param base the COSBase object to process @return true if processed, false otherwise
771 Retrieves the underlying COSBase object. Handles dereferencing and update state management. @return COSBase object or null if not available
772 Sets the document's trailer dictionary. @param newTrailer the new trailer dictionary to set
773 Encrypts a PDF COSStream. @param stream the COSStream to encrypt @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @throws IOException on I/O errors during encryption
774 Decrypts a PDF stream. @param stream the COSStream to decrypt @param objNum object number @param genNum generation number @throws IOException if decryption fails
775 Initializes a new PDTransparencyGroup with the given PDDocument. @param document The PDDocument to associate with this transparency group.
776 Retrieves the key associated with a given value in the dictionary. @param value the value to look up @return COSName key or null if not found
777 Adds a COSBase object at the specified index. Wraps in COSObject if it's a dictionary or array and not direct. @param i index where to add the object @param object COSBase object to be added
778 Checks if the dictionary contains a mapping for the specified value. Handles both direct and indirect (COSObject) references. @param value value whose presence in this map is to be tested @return true if this map maps one or more keys to the specified value
779 Constructs a PDAppearanceStream. @param document PDDocument to which the appearance stream belongs
780 Updates document state using an array of child objects. @param children COSArray containing child objects to be updated
781 Sets an item in the dictionary with a specified key and value. @param key unique identifier for the item @param value data to store in the dictionary
782 Sets an element at the specified index. @param index position in the array @param object COSBase object to set
783 Adds a COSBase object to the array. Handles direct and indirect objects, updating document state accordingly. @param object the COSBase object to add
784 Creates a PDImageXObject from a BufferedImage encoded as JPEG. @param document PDF document to add the image to @param image source image to encode @param quality compression quality (0-100) @param dpi dots per inch for metadata @return PDImageXObject containing the encoded JPEG image @throws IOException if I/O operations fail
785 Constructs a PDFParser for parsing PDFs without decryption. @param source input source of the PDF document @throws IOException if an I/O error occurs
786 Collects and processes COSObjects for PDF updates. @param object the COSObject to process @return false, always (does not affect collection status)
787 Retrieves the set of COSBase objects. Initializes by collecting objects from origin if not already done. @return Set of COSBase objects managed by this instance
788 Prepares a stream object for writing. @param key unique identifier for the object @param object the COSBase object to prepare
789 Checks if the pool contains a specified COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
790 Retrieves the COSObjectKey for a given COSBase object. @param object the COSBase object to find the key for @return COSObjectKey associated with the object or null if not found
791 Constructs a NormalXReference instance. @param byteOffset byte offset of the referenced object @param key unique identifier for the COSObject @param object the underlying COSBase object
792 Checks if a COSBase object has a self-reference. @param parent the parent COSBase object @param value the COSBase value to check @return true if self-reference exists, otherwise false
793 Accepts a visitor to process the underlying COSBase object. @param visitor ICOSVisitor instance for processing @throws IOException if an I/O error occurs during processing
794 Closes the document and all associated streams. Ensures resources are released and logs any exceptions.
795 Retrieves the linearized dictionary from the PDF document. @return COSDictionary representing the linearization info or null if not found
796 Retrieves a value from the dictionary by key. Handles dereferencing and null conversion. @param key the key for the desired object @return the COSBase object or null if not found
797 Retrieves a COSBase object by index. Handles dereferencing and null conversion. @param index position of the object in the array @return COSBase object or null if not available
798 Retrieves the length as a COSNumber from the given base object. Handles direct and referenced objects, logging warnings for null lengths. @param lengthBaseObj the base object containing the length information @return COSNumber representing the length or null if not found @throws IOException if the length object is of an incorrect type
799 Finds the index of a COSBase object in the array. @param object the COSBase object to search for @return index of the object or -1 if not found
800 Collects COSDictionary objects for updates. @param dictionary the COSDictionary to process @return true if child demands parent update, false otherwise
801 Removes a COSBase object from the array, handling indirect references. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
802 Retrieves or generates a unique key for a given PDF object. Handles COSObject references and updates keys if necessary. @param obj the PDF object to process @return the unique COSObjectKey associated with the object
803 Retrieves string value by key from the dictionary. @param key the key for the desired string @return String value or null if not found
804 Initializes a new PDChoice field within a PDF form. @param acroForm the AcroForm containing this field
805 Sets the transformation matrix for the form XObject. @param transform AffineTransform object defining the transformation
806 Sets the default style string for text fields. @param defaultStyleString the CSS-like style string or null to remove it
807 Creates a PDImageXObject from a JPEG byte array. @param document PDF document to add the image to @param byteArray JPEG image data as byte array @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs during processing
808 Converts transformation matrix to a COSArray. @return COSArray representing the matrix elements
809 Sets an element at the specified index. @param index position in the array @param object COSObjectable object to set
810 Sets the rich text value for a PDF variable text field. @param richTextValue the rich text content to set; null removes the item
811 Sets the coordinate system origin. @param coordSystemOrigin float array representing the new origin coordinates
812 Initializes a new PDThread with a COSDictionary. Sets the type to "Thread".
813 Constructs a new PDF button. @param acroForm the AcroForm containing this field
814 Sets the value of the non-terminal field. @param object new value for the field
815 Sets the default value of the field. @param value default data to be stored in the field
816 Initializes PDTristimulus with an array of float values. @param array containing X, Y, and Z tristimulus values
817 Creates a PDDestination from a COSBase object. @param base the COSBase representation of the destination @return a PDDestination object or null if base is null @throws IOException if the base cannot be converted to a valid destination
818 Converts a COSDictionary to a COSDictionaryMap with basic type mapping. @param map the input COSDictionary @return COSDictionaryMap containing converted key-value pairs @throws IOException if an unknown object type is encountered
819 Adds or updates a COSBase object in the pool. @param key unique identifier for the object @param object COSBase object to store @return updated COSObjectKey or null if not added
820 Constructs a new PDSignatureField. @param acroForm the AcroForm containing this field
821 Retrieves the string value of the first option. @return String representation of the option or null if not available
822 Converts color components to a COSArray. @return COSArray representing the color, including pattern name if applicable
823 Initializes a PDDeviceN object with default settings. Sets up the COSArray with DeviceN identifier and null placeholders.
824 Initializes a PDGamma object with default RGB values set to zero.
825 Initializes a new text field in a PDF form. @param acroForm the AcroForm containing this field
826 Retrieves the alternate color space for the current ICC profile. @return PDColorSpace instance representing the alternate color space @throws IOException if an error occurs during retrieval or creation
827 Initializes a new PDIndexed color space with RGB base. Constructs an indexed color space using DeviceRGB as the base color space.
828 Creates a default range array for LAB color space. @return COSArray with min and max values for L, a, and b components
829 Initializes a PDPattern with given resources. @param resources PDF document resources
830 Initializes a new PDSeparation object with default color separation settings. Sets up the internal COSArray with standard separation components.
831 Sets an integer value at a specified index in the array. @param index position in the array @param value integer to set
832 Retrieves the string representation of a value by key. Supports COSName and COSString types. @param key the key for the desired object @return String representation or null if not found
833 Initializes a PDTristimulus with zero tristimulus values. Constructs a COSArray and sets X, Y, Z to 0.0.
834 Retrieves the default appearance string of the FDF option. @return String representing the default appearance settings or null if not available
835 Retrieves the string values associated with a specified choice field. @param name the key for the desired object in the dictionary @return List of string representations of the choice field values
836 Decrypts all elements in a COSArray. @param array the COSArray to decrypt @param objNum object number for decryption context @param genNum generation number for decryption context
837 Sets widget field flags. @param f bit flag values for the widget
838 Creates a PDImageXObject from a BufferedImage encoded as JPEG. @param document PDF document to add the image to @param image source image to encode @param quality compression quality (0-100) @return PDImageXObject containing the encoded JPEG image @throws IOException if I/O operations fail
839 Adds the first intermediate curl to the border. @param angleCur current angle @param r radius of the arc @param alpha additional angle offset @param cx center x-coordinate @param cy center y-coordinate
840 Generates intermediate curl template for a given angle and radius. @param angleCur current angle in degrees @param r radius of the arc segments @return array of Point2D.Double representing the curl template @throws IOException if an I/O error occurs during processing
841 Sets the option value. @param opt the option string to be set
842 Sets color at specified index. @param index position in the array @param colour PDGamma object representing the color
843 Sets the font size. @param size the desired font size in points
844 Sets DeviceN color space attributes. @param attributes PDDeviceNAttributes object to set
845 Sets the alternate color space. @param cs PDColorSpace object to set as alternate
846 Sets the red component of the color. @param r red color value as float
847 Sets the green component of the color. @param g the green value to be set
848 Sets the blue component of the color. @param b blue value as float
849 Sets the default appearance string for the option. @param da the default appearance string to be applied
850 Sets the y-coordinate of the upper-right corner. @param value y-coordinate to be set
851 Sets the x-coordinate of the upper-right corner. @param value the x-coordinate value
852 Sets the lower-left Y coordinate of the rectangle. @param value the Y coordinate to set
853 Sets the transition direction. @param direction desired transition direction
854 Sets the transition duration. @param duration time in seconds for the transition effect
855 Retrieves an object from the dictionary by string key. Converts string to COSName and fetches associated value. @param key the PDF name as a string @return the COSBase object or null if not found
856 Sets the scale factor for a fly transition. @param scale the scaling factor to apply during the transition
857 Sets whether the fly area is opaque. @param opaque true to make the fly area opaque, false otherwise
858 Sets a PDF name at the specified index. @param index position in the array @param name PDF name string to set
859 Adds all elements from the specified COSArray to this array. @param objectList COSArray containing objects to be added
860 Sets a string at the specified index. @param index position in the array @param string text to be set or null
861 Sets the minimum value of the range. @param min the new minimum value for the range
862 Sets the maximum value of the range. @param max the maximum floating-point value to set
863 Sets the X coordinate of the lower-left corner. @param value the X coordinate value to be set
864 Converts COSDictionary to string representation. Handles IOException by logging and returning an error message. @return String representation of the dictionary or error message
865 Retrieves a value from the dictionary by primary or secondary key. @param firstKey the primary key for the desired object @param secondKey the secondary key if primary is not found @return the COSBase object or null if both keys are invalid
866 Constructs a Matrix from a COSArray. Initializes matrix elements using values from the array. @param array COSArray containing transformation parameters
867 Checks if the pool contains a specified COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
868 Retrieves encryption permissions from the PDF document. @return byte array containing permissions or null if not found
869 Retrieves the page number of the annotation. @return page number or null if not set
870 Retrieves the COSBase value of the field. @return COSBase object representing the field's value or null if not set @throws IOException if the field value is of an unknown type
871 Retrieves the field flags of the form field. @return Integer representing field flags, or null if not set
872 Retrieves the set field flags from the FDF field. @return Integer value of the set field flags or null if not found
873 Retrieves clear field flags from the FDF field. @return Integer representing the clear field flags or null if not set
874 Retrieves widget field flags. @return Integer value of field flags or null if not found
875 Retrieves the user encryption key from the PDF document. @return byte array of length 32 representing the user encryption key or null if not found @throws IOException if an I/O error occurs while reading the key
876 Retrieves the widget field flags. @return Integer value of the set widget field flags or null if not found
877 Retrieves the default width of CID font. Uses cached value if available, otherwise fetches from dictionary. @return default width as float
878 Retrieves the color space associated with the device. @return PDColorSpace instance or null if not found, throws IOException on creation failure
879 Retrieves the color space for the transparency group. @param resources PDF resources @return PDColorSpace instance or null if not defined @throws IOException if an error occurs during creation
880 Initializes a PDOptionalContentGroup from a COSDictionary. Validates that the dictionary represents an OCG type. @param dict the COSDictionary to initialize from
881 Initializes a PDOptionalContentMembershipDictionary with a given COSDictionary. Validates that the dictionary's type is OCMD, throwing an exception if not. @param dict the COSDictionary to initialize with
882 Retrieves the overprint mode from the graphics state dictionary. @return the overprint mode as an Integer, or null if not set
883 Retrieves the soft mask from the graphics state. @return PDSoftMask object or null if not found
884 Retrieves clear widget field flags. @return integer value of the clear widget field flags or null if not found
885 Updates the highest object number in the document based on imported page. @param importedPage the page to be imported
886 Retrieves the owner encryption key from the PDF document. @return byte array containing the owner encryption key, or null if not set @throws IOException if an I/O error occurs while accessing the dictionary
887 Checks if metadata encryption is enabled. @return boolean indicating if metadata should be encrypted, defaulting to true
888 Retrieves the zoom level of the PDF destination. @return zoom level as a float, or -1 if not set
889 Retrieves the page number of the destination. @return page number or -1 if not set
890 Retrieves the target PDF page. @return PDPage object or null if not found
891 Retrieves the name of the colorant. @return The string representation of the colorant name
892 Retrieves a COSName value from the dictionary by key. @param key the key for the desired COSName object @return the COSName object or null if not found or not a COSName
893 Retrieves a nested COSDictionary by key. @param key the key for the desired dictionary @return COSDictionary object or null if not found
894 Retrieves a COSStream by key. @param key the dictionary key for the stream @return COSStream object or null if not found or not a stream
895 Retrieves a COSArray by key from the dictionary. @param key the key for the desired array @return COSArray object or null if not found or not an array
896 Retrieves a COSName value from the dictionary by key. @param key the key for the desired COSName object @param defaultValue default COSName to return if not found or not a COSName @return the COSName object or defaultValue if not applicable
897 Retrieves a long value from the dictionary by key. @param key the key for the desired object @param defaultValue default value to return if not found or not a COSNumber @return the long value or default if not applicable
898 Retrieves a float value from the dictionary by key. @param key the key for the desired float value @param defaultValue default float value if key not found or not a COSNumber @return the float value associated with the key, or defaultValue if not applicable
899 Retrieves content streams of the PDF page. @return Iterator over PDStream instances representing content streams
900 Checks if the PDF page contains content. @return true if the page has content, false otherwise
901 Retrieves class names from the PDF structure. @return Revisions object containing class names and their revision numbers.
902 Retrieves the 'K' entry from the dictionary. @return COSBase object associated with key 'K' or null if not found
903 Retrieves the value of the property. @return COSBase object representing the property's value or null if not found
904 Retrieves a float value from the dictionary by key. @param key the key for the desired object @return the float value or null if not found
905 Retrieves a date value from the dictionary by key. @param key the key for the desired date object @return Calendar instance or null if not found
906 Returns an iterator over COSBase objects. Utilizes the set of managed COSBase objects for iteration. @return Iterator<COSBase> instance for traversing COSBase objects
907 Expands the array to a specified size, filling with given COSBase object. @param size desired array size @param object COSBase object to fill the array
908 Retrieves the named destination from the dictionary. @return PDNamedDestination object or null if not found
909 Retrieves the contents of the digital signature. @return byte array containing the signature content or empty if not found
910 Retrieves the XFA resource from the form's dictionary. @return PDXFAResource object or null if not found
911 Retrieves an inheritable attribute from the field or its ancestors. @param key COSName of the attribute to fetch @return COSBase object representing the attribute value, or null if not found
912 Initializes a new FDFOptionElement with default empty strings. Sets up the internal COSArray with two empty COSStrings.
913 Retrieves the value of the form field. @return COSBase object representing the field's value or null if not found
914 Retrieves the default value of the field. @return COSBase object representing the default value or null if not set
915 Initializes a new PDFontSetting with default font settings. Sets up the fontSetting array with initial null and size values.
916 Closes the visual signature and PDF source. Ensures resources are released properly.
917 Writes a PDF object to the output stream. @param key unique identifier for the COSObject @param obj underlying COSBase object to write @throws IOException if an I/O error occurs
918 Retrieves the COSObjectKey for a given COSBase object from the pool. @param object the COSBase object to find the key for @return COSObjectKey associated with the object or null if not found
919 Retrieves the field value as a string. @return Field value as string or empty if not found
920 Initializes a PDRange with default values [0, 1]. Sets up the internal COSArray and starting index.
921 Sets the array with float values. @param value array of floats to be set
922 Prepares and returns the PDF cross-reference stream. @return COSStream representing the cross-reference stream @throws IOException if I/O error occurs
923 Retrieves the transfer function from the dictionary. @return COSBase object representing the transfer function or null if invalid
924 Retrieves the transfer function for color space. @return COSBase object representing the TR2 or null if invalid
925 Retrieves the backdrop color array for the soft mask. Initializes from dictionary if not already set. @return COSArray representing the backdrop color or null if none defined
926 Determines the open mode for the PDF action. @return OpenMode indicating how to open the linked content
927 Retrieves the 'T' item from the action dictionary. @return COSBase object representing the 'T' item or null if not found
928 Determines the window mode for opening a file. @return OpenMode indicating new or same window, or user preference if unspecified
929 Determines the open mode for the PDF action. @return OpenMode indicating new or same window preference, defaulting to user preference if not specified
930 Adds a COSBase object to the array. Converts COSObjectable to COSBase before adding. @param object the COSObjectable object to add
931 Creates object streams for PDF compression. @return List of COSWriterObjectStream objects
932 Sets widget field flags in the FDF field. @param ff integer representing field flags
933 Sets the transformation matrix for color space. @param matrix 3x3 transformation matrix to be applied
934 Sets the gamma value for color transformation. @param gamma PDGamma object containing gamma values or null to reset
935 Retrieves a BlendMode instance from a COSBase object. @param cosBlendMode the COSBase object representing the blend mode @return the corresponding BlendMode or NORMAL if not found
936 Sets the gamma value for CALGRAY color space. @param value the gamma correction factor to apply
937 Converts page labels to a COSDictionary. @return COSDictionary representing page labels
938 Initializes a new complex file specification. Sets up the underlying COSDictionary with type 'FILESPEC'.
939 Initializes a new PDComplexFileSpecification. @param dict existing COSDictionary or null to create a new one
940 Sets the range values for the PDF function. @param rangeValues array of COSBase representing the range
941 Sets the domain values for the PDF function. @param domainValues array representing the domain range
942 Sets the encoding values for the function. @param encodeValues array of COSBase objects representing encoding values
943 Sets the decode values for the function. @param decodeValues array of COSBase representing decode values
944 Removes an attribute from the element's dictionary. Updates the structure accordingly based on array size and content. @param attributeObject the attribute to remove
945 Removes a class name from the PDF structure. @param className the name of the class to remove
946 Adds a child node to the current structure node. Handles cases where no children exist, one child exists, or multiple children exist. @param object the new child node to add
947 Inserts a new child node before a reference node. @param newKid the new child node to insert @param refKid the reference node before which to insert
948 Removes a child node from the current structure. @param object the child node to remove @return true if the node was successfully removed, false otherwise
949 Sets the K value in the dictionary. @param k data to store with key COSName.K
950 Sets the line dash pattern for guidelines. @param dashArray array defining the dash pattern
951 Clears all COSBase objects and updates the parent dictionary. @param none @return void
952 Initializes a new PDPageTree with an empty page structure. Sets up the root dictionary with TYPE, KIDS, and COUNT attributes.
953 Sets the transformation matrix for this pattern. @param transform affine transformation to apply
954 Sets the visibility policy in the dictionary. @param visibilityPolicy policy to define content visibility
955 Initializes a new PDOptionalContentMembershipDictionary. Sets the dictionary type to OCMD.
956 Initializes a new transparency group with default settings.
957 Updates parent entries in a COSArray. @param kArray array of COSBase items @param newParent new parent dictionary @param newStructureType optional structure type to set
958 Sets rich text value for the field. @param rv rich text string to be set
959 Sets the encryption method in the cryptographic filter dictionary. @param cfm COSName representing the encryption method
960 Sets the document information metadata. @param info PDDocumentInformation object containing metadata
961 Initializes a new PDDocumentCatalog for the given PDF document. @param doc the PDDocument to associate with this catalog
962 Sets the base color space. @param base PDColorSpace object to be set as the base color space
963 Sets the crop box for the PDF page. @param cropBox PDRectangle defining the crop area or null to remove it
964 Parses the next token from the PDF content stream. @return parsed COSBase object or null if end of stream is reached @throws IOException if an I/O error occurs during parsing
965 Sets the bounding box for the tiling pattern. @param bbox PDRectangle representing the new bounding box or null to remove it
966 Sets the character set for the font. @param charSet the character encoding to use
967 Sets the font stretch attribute. @param fontStretch string representing the font stretch value
968 Sets the interior color of the annotation. @param color Color object representing the desired interior color
969 Sets coordinates for text markup annotation. @param coords array of float values representing annotation points
970 Sets the document ID in the FDF dictionary. @param id COSArray representing the document ID
971 Sets differences stream in FDF document. @param diff COSStream containing differences data
972 Sets the value of the field. @param value the value to set (String, List<String>, or COSObjectable) @throws IOException if an error occurs during setting the value
973 Sets the value of the form field. @param value the new value to be set
974 Sets the field flags for this form field. @param ff integer representing the field flags
975 Sets the field flags for a form field. @param ff integer representing field flags
976 Sets clear field flags for the form field. @param ff integer representing field flags
977 Initializes a new PDFont instance. Sets up the font dictionary with type and initializes other attributes.
978 Sets JavaScript to execute after form processing. @param after script to run post-processing
979 Sets JavaScript code to execute before form submission. @param before JavaScript string to be executed
980 Sets rich text content for the form field. @param rv COSStream containing rich text data
981 Sets the interior color of the polyline annotation. @param color Color object representing the desired interior color
982 Sets the vertices of the polyline annotation. @param vertices array of float coordinates defining the polyline points
983 Sets the interior color of the polygon annotation. @param color Color object representing the desired interior color
984 Sets the vertices of the polygon annotation. @param vertices array of vertex coordinates
985 Sets the font family for the PDFontDescriptor. @param fontFamily the name of the font family to set
986 Sets the encryption filter. @param filter name of the filter to apply
987 Sets the font name for the PDF descriptor. @param fontName name of the font to be set
988 Sets the owner encryption key. @param o byte array representing the owner key @throws IOException if an I/O error occurs
989 Sets the user key for encryption. @param u byte array representing the user key @throws IOException if an I/O error occurs while setting the item
990 Sets the owner encryption key for the PDF document. @param oe byte array representing the owner encryption key
991 Sets the user encryption key for PDF security. @param ue byte array representing the user encryption key @throws IOException if an I/O error occurs during setting
992 Sets the encryption recipients. @param recipients array of recipient byte arrays @throws IOException if an I/O error occurs
993 Initializes a new PDFontDescriptor with a font descriptor dictionary. Sets the "Type" entry to "FontDescriptor".
994 Sets the stream filter name for PDF encryption. @param streamFilterName the filter name to be used for streams
995 Retrieves colorant names from the DeviceN color space. @return List of colorant names as strings
996 Sets the font bounding box for the PDFontDescriptor. @param rect PDRectangle representing the bounding box dimensions
997 Sets the name of the string filter. @param stringFilterName the COSName representing the string filter
998 Removes V4.5 encryption filters from the PDF document.
999 Initializes a new FDF annotation with a type of "Annot".
1000 Sets the annotation's color. @param c Color object to set, or null for no color
1001 Sets rich content of the annotation. @param rc rich content string to be set
1002 Sets the interior color of the circle annotation. @param color Color object representing the desired interior color
1003 Sets the callout line for the annotation. @param callout array of floats defining the callout coordinates
1004 Sets the coordinates of the line annotation. @param line array containing start and end coordinates
1005 Retrieves the alternate color space. Initializes from COSBase object if not already set. @return PDColorSpace instance or throws IOException
1006 Writes a PDF object reference to the output stream. @param obj the PDF object to reference @throws IOException if an I/O error occurs
1007 Sets the interior color of the line annotation. @param color Color object representing the desired interior color
1008 Sets document permissions. @param perms byte array representing permissions
1009 Sets the background color for the shading. @param newBackground COSArray representing the background colors
1010 Sets clear widget field flags. @param ff field flag values to set
1011 Sets the color space for this shading. @param colorSpace PDColorSpace object to set or null to remove it
1012 Converts the array to a float array. @return float[] representing the values of COSBase objects
1013 Converts array elements to a list of Floats. @return List<Float> with COSNumber values or null for non-COSNumber elements
1014 Converts array of COSBase objects to a list of Integer. @return List<Integer> with integer values or null for non-COSNumber objects
1015 Retrieves the minimum value of the range. @return the minimum value as a float
1016 Retrieves the maximum value of the range. @return maximum value as a float
1017 Retrieves a PDGamma object by index. @param index position of the color in the array @return PDGamma object or null if not applicable
1018 Retrieves display values for options in a choice field. @return List of strings representing display values or empty if none found
1019 Retrieves options for the choice field. @return List of strings representing available options
1020 Initializes a new PDSeedValueCertificate with a COSDictionary. Sets the type to SV_CERT and marks it as direct.
1021 Sets the timestamp for the digital signature. @param timestamp PDSeedValueTimeStamp object containing timestamp data
1022 Sets the MDP (Modifications Document Permissions) seed value. @param mdp PDSeedValueMDP object containing permissions settings
1023 Sets the bounding box for the shading. @param newBBox the new bounding box rectangle
1024 Sets the filter attribute for digital signature. @param filter unique identifier for the filter
1025 Initializes a new PDSeedValue with a specific type and sets it to use direct objects.
1026 Sets the dash style for the border using a COSArray. @param dashArray array defining dash pattern
1027 Initializes a new appearance dictionary with a normal state. Sets up a required 'N' (Normal) entry in the dictionary.
1028 Sets quad points defining text annotation area. @param quadPoints float array representing the annotation's boundary
1029 Wraps page content in save/restore graphics state commands. @param page PDPage to modify @throws IOException if I/O operations fail
1030 Sets the encryption dictionary in the document's trailer. @param encDictionary dictionary containing encryption settings
1031 Initializes a new PDAcroForm for the given PDF document. @param doc the PDF document to associate with this form
1032 Sets the colorant name in the color separation array. @param name the colorant name to set
1033 Sets the text color of the outline item. @param textColor PDColor object representing the new text color
1034 Sets the contents of the digital signature. @param bytes byte array containing the signature content
1035 Sets the byte range for a digital signature. @param range array of 4 integers defining the byte range
1036 Sets the sub-filter type of the digital signature. @param subfilter the sub-filter identifier to be set
1037 Sets the filter type for the digital signature. @param filter COSName representing the filter type
1038 Sets the signature type. @param type COSName representing the signature type
1039 Initializes a new digital signature with type set to 'Sig'.
1040 Sets the alternate color space for the PDF document. @param colorSpace PDColorSpace object to set as the alternate color space
1041 Sets the X tristimulus value. @param x the new X value
1042 Sets the Y tristimulus value. @param y the Y value to be set
1043 Sets the Z tristimulus value. @param z the Z component of the color in tristimulus space
1044 Sets an item in the dictionary with a specified key and object. @param key unique identifier for the item @param value data to store in the dictionary (COSObjectable)
1045 Sets a boolean value in the dictionary with a specified key. @param key unique identifier for the item @param value boolean data to store in the dictionary
1046 Sets a boolean value in the dictionary. @param key unique identifier for the item @param value boolean value to store
1047 Sets an item in the dictionary using a string key. @param key PDF name as a string @param value data to store in the dictionary
1048 Sets a PDF dictionary entry with a given key and string value. @param key unique identifier for the dictionary entry @param value string to be converted to COSName and stored
1049 Sets a string in the dictionary with a specified key. @param key unique identifier for the item @param value string to store in the dictionary
1050 Sets an integer value in the dictionary. @param key unique identifier for the item @param value integer value to store
1051 Sets a long value in the dictionary. @param key unique identifier for the item @param value long numeric value to store
1052 Sets a floating-point value in the dictionary. @param key unique identifier for the item @param value the float value to be stored
1053 Creates a COSStream from a given dictionary and stream parameters. @param dictionary the dictionary containing stream data @param startPosition the start position of the stream in the document @param streamLength the length of the stream @return the created COSStream object @throws IOException if an I/O error occurs during stream creation
1054 Sets the document ID in the PDF trailer. @param id COSArray representing the document's unique identifier
1055 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1056 Sets the vertices of the polyline annotation. @param points array of float values representing vertex coordinates
1057 Sets the relationship type for the target directory. @param relationship either COSName.P or COSName.C @throws IllegalArgumentException if relationship is neither P nor C
1058 Sets the 'B' parameter of the PDF action. @param b value to assign to the 'B' parameter
1059 Sets the 'D' (destination) parameter of the PDF action. @param d COSBase object representing the destination
1060 Sets form fields for submission. @param array COSArray containing field names
1061 Sets the sound stream for the action. @param sound COSStream representing the audio content
1062 Sets the parent markup annotation. @param annot the parent annotation to associate with this popup
1063 Sets the 'H' flag to control element visibility. @param h boolean value indicating visibility status
1064 Sets the 'T' item in the action dictionary. @param t value to be stored under key 'T'
1065 Initializes a new PDF annotation with default settings. Sets up the underlying COSDictionary and marks it as an annotation type.
1066 Sets the TR2 transfer function. @param transfer2 COSBase object representing the transfer function
1067 Sets a float item in the dictionary. @param key unique identifier for the item @param value float value to store; null removes the item
1068 Sets the blend mode for graphics rendering. @param bm desired blending mode to apply
1069 Initializes a new PDExtendedGraphicsState with default settings. Sets the dictionary type to 'ExtGState'.
1070 Sets decode values for shading. @param decodeValues array of decode values to apply
1071 Sets coordinates for shading. @param newCoords array of coordinate values
1072 Sets the domain for the shading. @param newDomain array representing the domain values
1073 Sets the extend values for the shading. @param newExtend array containing extend values
1074 Sets the domain for the shading. @param newDomain array representing the domain values
1075 Sets the transformation matrix for the shading. @param transform AffineTransform object representing the matrix
1076 Sets the shading functions. @param newFunctions array of COSArray containing new functions
1077 Sets the transfer function in the graphics state. @param transfer COSBase object representing the transfer function
1078 Constructs a PDAnnotation from a COSDictionary. Initializes the annotation's dictionary and ensures it has a valid TYPE entry. @param dict the COSDictionary representing the annotation
1079 Sets the fields to be reset in the PDF form. @param array COSArray containing field names to reset
1080 Sets the line coordinates. @param l array of floats representing line points
1081 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1082 Sets the list of ink paths for the annotation. @param inkList 2D float array representing ink coordinates
1083 Sets the annotation's bounding rectangle. @param rectangle PDRectangle object defining the new boundary
1084 Sets rectangle margin differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1085 Sets the callout line coordinates. @param callout float array representing callout coordinates
1086 Sets the quadrilateral points defining the annotation's area. @param quadPoints array of float values representing the quad points
1087 Sets the rich contents of the annotation. @param rc the rich content string to be set
1088 Sets the border of the annotation. @param borderArray array defining the border appearance
1089 Sets the vertices of the polygon annotation. @param points array of float values representing vertex coordinates
1090 Sets the interior color of the annotation. @param ic PDColor object representing the new interior color
1091 Sets an array of distance measurements in the PDF document. @param distances array of PDNumberFormatDictionary objects representing distances
1092 Sets the interior color of the polygon annotation. @param ic PDColor object representing the new interior color
1093 Sets the areas in the dictionary. @param areas array of PDNumberFormatDictionary objects representing measurement areas
1094 Sets the interior color of the line annotation. @param ic PDColor object representing the new interior color
1095 Sets the interior color of the polyline annotation. @param ic PDColor object representing the new interior color
1096 Sets the background color of an annotation. @param c PDColor object representing the new background color
1097 Clones a COSBase object based on its type. @param src source COSBase to clone @param dstParent parent object for the cloned element @param currentPageDict current page dictionary context @return cloned COSBase object or original if not applicable
1098 Sets the angles for rectilinear measurements. @param angles array of PDNumberFormatDictionary objects representing angles
1099 Sets the text color for the outline item. @param textColor the new text color to apply
1100 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1101 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
1102 Sets the color of the annotation. @param c PDColor object representing the new color
1103 Builds font widths for CID font. @param cidFont COSDictionary representing the CID font @throws IOException if processing fails
1104 Sets the line dash pattern. @param dashPattern line dash pattern to apply
1105 Sets the font for the document. @param font PDFont object to be used
1106 Sets the X-axis changes using an array of number format dictionaries. @param changeXs array of PDNumberFormatDictionary objects representing X-axis changes
1107 Creates a PDImageXObject from an input stream. @param document PDF document to add the image to @param stream input stream containing JPEG image data @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs during processing
1108 Retrieves or creates the text color for this outline item. @return PDColor object representing the text color
1109 Expands the array to a specified size, filling with null. @param size desired array size
1110 Retrieves the b component range for LAB color space. @return PDRange object representing the b component range
1111 Sets the guideline line color. @param color PDColor object representing the new line color
1112 Sets the Y-axis changes using an array of number format dictionaries. @param changeYs array of PDNumberFormatDictionary objects representing Y-axis changes
1113 Sets line slopes in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
1114 Initializes a PDPattern with given resources and color space. @param resources PDF document resources @param colorSpace underlying color space for the pattern
1115 Retrieves the color component range for a given index. @param n index of the color component @return PDRange object representing the range or default if unavailable
1116 Initializes a PDICCBased color space with a given document. @param doc PDDocument to associate with the ICC-based color space
1117 Retrieves color or four colors based on the given name. @param name key for the COSArray in the dictionary @return PDGamma if size is 3, PDFourColours if size is 4, otherwise null
1118 Retrieves the A component range for LAB color space. @return PDRange object representing the A component range
1119 Sets the border color of an annotation. @param c PDColor object representing the new border color
1120 Adds an output intent to the document's catalog. @param outputIntent the PDOutputIntent object to add
1121 Sets the target PDF page. @param page PDPage object to navigate to
1122 Retrieves the signing date of the digital signature. @return Calendar instance representing the sign date or null if not found
1123 Writes an Operator to the PDF output stream. @param op the Operator to write @throws IOException if I/O error occurs
1124 Sets the horizontal offset for the caption of a line annotation. @param offset the horizontal offset value
1125 Sets the vertical offset for the caption of a line annotation. @param offset the vertical offset value
1126 Sets the operating system information for a digital signature. @param os the name of the operating system or null to remove it
1127 Retrieves the white point for the color space. @return PDTristimulus object representing the white point, defaulting to (1, 1, 1) if not set
1128 Retrieves the black point for the color space. @return PDTristimulus object representing the black point, defaulting to (0, 0, 0) if not set
1129 Adds a subject to the certificate. @param subject byte array representing the subject to add
1130 Adds key usage extension to the certificate. Validates and stores the key usage string in the dictionary. @param keyUsageExtension string representing key usage (e.g., "01X")
1131 Adds an issuer to the certificate. @param issuer byte array representing the issuer
1132 Adds an OID to the certificate's OID list. @param oid byte array representing the OID to add
1133 Sets the range for a specific component in the color space. @param range PDRange object defining the min and max values @param n index of the component to set the range for
1134 Retrieves the creation date of the annotation. @return Calendar instance representing the creation date or null if not found
1135 Parses the initial structure of a PDF document. @throws IOException if root object is missing or parsing fails
1136 Retrieves the creation date of the annotation. @return Calendar instance representing the creation date or null if not found @throws IOException if an I/O error occurs while accessing the PDF
1137 Retrieves the modification date of the PDF document. @return Calendar instance representing the modification date or null if not set
1138 Sets the vertical offset of the caption for a line annotation. @param offset vertical offset value
1139 Sets the horizontal offset for the caption of a line annotation. @param offset the new horizontal offset value
1140 Sets the cryptographic filter dictionary. @param cryptFilterName name of the crypt filter @param cryptFilterDictionary dictionary containing crypt filter settings
1141 Retrieves or initializes the guideline color. Uses the 'C' key in the COSDictionary to fetch or set RGB values. @return PDColor object representing the guideline color
1142 Sets the value of the property and notifies if changed. @param value new value for the property
1143 Retrieves or creates the gamma values for color transformation. @return PDGamma object representing the gamma correction
1144 Retrieves or initializes colorants from PDF resources. @param resources PDFBox resources object @return Map of PDSeparation objects representing colorants @throws IOException if an error occurs during resource handling
1145 Adds a user property to the document's properties array. @param userProperty the PDUserProperty object to add
1146 Retrieves or creates additional actions for a PDF page. @return PDPageAdditionalActions object representing the page's actions
1147 Initializes a PDDocumentNameDictionary for the given document catalog. @param cat the document catalog to manage named elements
1148 Retrieves or creates additional actions dictionary. @return PDDocumentCatalogAdditionalActions object for managing document actions
1149 Retrieves or creates the list of threads in the document. @return List of PDThread objects representing document threads
1150 Retrieves or creates the document information dictionary. Initializes with a new COSDictionary if none exists. @return PDDocumentInformation object representing document metadata
1151 Retrieves a date value from the dictionary by key. @param key the key for the desired date object @return Calendar instance or null if not found
1152 Retrieves a date value from the dictionary by key with a default. @param key the key for the desired date object @param defaultValue default Calendar to return if key not found @return Calendar instance or provided default if not found
1153 Retrieves the creation date of the PDF document. @return Calendar instance representing the creation date, or null if not set
1154 Retrieves child nodes (kids) from a given COSDictionary node. @param node parent dictionary containing kids array @return list of COSDictionary representing child nodes or empty if none found
1155 Sets the upper limit for a node in the PDF tree. @param upper the new upper limit value or null to remove it
1156 Sets the name of the signature. @param name the name to assign to the signature
1157 Sets the starting style of a line annotation. @param style the style to apply (null sets default)
1158 Sets the mapping name of the field. @param mappingName unique identifier for the field's mapping
1159 Sets the alternate field name in the PDF dictionary. @param alternateFieldName alternative name for the field
1160 Sets the partial name of the PDF field. @param name the partial name to set @throws IllegalArgumentException if the name contains a period character
1161 Sets the default value for the choice field. @param value default option to be selected
1162 Sets the default appearance string for form fields. @param daValue appearance string to be applied
1163 Sets the title of the outline item. @param title text to be displayed in the PDF's outline
1164 Sets the contact information in the digital signature. @param contactInfo contact details to be stored
1165 Sets the reason for the digital signature. @param reason description of the signing purpose
1166 Sets the location of the digital signature. @param location the location to be set in the signature
1167 Sets the URL in the timestamp dictionary. @param url the URL to store
1168 Sets the URL in the certificate. @param url string representing the URL to store
1169 Sets the date property in the PDF signature dictionary. @param date string representation of the date to set
1170 Sets the alternate caption for an annotation. @param caption text to display as alternative caption
1171 Sets the field's value in the PDF document. @param value new value for the field
1172 Sets the rollover caption for an annotation. @param caption text to display on rollover
1173 Sets the state model of the annotation. @param stateModel string representing the state model to be set
1174 Sets the state of the annotation. @param state new state value to be set
1175 Sets the subject of the annotation. @param subj the subject string to be assigned
1176 Sets the title popup text for the annotation. @param t the title text to display in the popup
1177 Sets the default style string for the annotation. @param defaultStyleString CSS-like string defining default styles
1178 Sets the default appearance string for the annotation. @param daValue the default appearance string to apply
1179 Sets the name of the annotation. @param nm unique identifier for the annotation
1180 Sets the modified date of the annotation. @param m new modification date as a string
1181 Sets the contents of the annotation. @param value text content to be assigned
1182 Sets the execution parameter. @param param parameter string to be set
1183 Sets the operation type. @param op operation string to be set
1184 Sets the directory path in launch parameters. @param dir directory path to be set
1185 Sets the filename for the launch parameters. @param file name of the file to be launched
1186 Sets the normal caption for the annotation. @param caption string to be displayed as the normal caption
1187 Sets the value of the text field. @param value new text to set in the field @throws IOException if an error occurs during setting the value
1188 Sets the default value of the text field. @param value default string to be set
1189 Sets the default appearance for text fields. @param daValue string representing the default appearance
1190 Sets font descriptor flags. @param flags integer representing font attributes
1191 Sets clear widget field flags. @param ff flag value to be set
1192 Sets widget field flags. @param ff integer value representing field flags
1193 Sets widget field flags. @param f integer value representing field flags
1194 Sets clear field flags. @param ff integer value representing field flags
1195 Sets field flags for form field. @param ff integer value representing field flags
1196 Sets flags for the form field. @param ff bit flag values representing field properties
1197 Sets the rotation angle of the annotation. @param rotation degrees to rotate the annotation clockwise
1198 Sets the justification of the free text annotation. @param justification alignment type ("centered", "right", or default left)
1199 Sets the page number for the annotation. @param page zero-based page index
1200 Sets document permissions. @param permissions bitwise flags defining access rights
1201 Sets the encryption revision level. @param revision revision number to apply
1202 Sets the encryption key length. @param length key length in bits
1203 Sets the encryption version. @param version encryption version number to be set
1204 Sets the encryption key length. @param length key length in bits
1205 Sets the next key for the parent tree. @param parentTreeNextkey integer value representing the next key
1206 Sets the revision number of the PDF structure element. @param revisionNumber non-negative integer representing the revision
1207 Sets the Marker Context Identifier (MCID) for the marked content. @param mcid unique identifier for the marker context
1208 Sets the number of bits per sample. @param bps bits per sample value to set
1209 Sets the starting page number for the label range. @param start positive integer indicating the starting page number
1210 Initializes a PDPageTree with the given root dictionary and document. Handles cases where the root is a Page dict instead of a page tree. @param root COSDictionary representing the root of the page tree @param document PDDocument to which this page tree belongs
1211 Sets the rotation of the PDF page. @param rotation degrees to rotate the page (0, 90, 180, or 270)
1212 Sets the structure parents attribute for the PDF page. @param structParents integer value representing structure parent relationships
1213 Sets an integer in a nested dictionary. @param embeddedDictionary key for the nested dictionary @param key unique identifier for the item @param value integer value to store
1214 Sets an integer value in the dictionary using a string key. @param key unique identifier for the item as a string @param value integer value to store
1215 Sets the scale ratio in the PDF measurement dictionary. @param scaleRatio the scale ratio to be set
1216 Sets the annotation's name. @param name name of the annotation to be set
1217 Sets character widths for embedded TrueType font in PDF. @param font COSDictionary representing the font @param glyphList GlyphList for Unicode conversion @throws IOException if an I/O error occurs
1218 Sets the filename associated with the target directory. @param filename new filename to assign
1219 Sets the file path or URL to launch. @param p file path or URL as a string
1220 Sets the file name in the PDF specification. @param file path to the file
1221 Sets the Unicode name of the file. @param file Unicode string representing the file name
1222 Sets the page label prefix. @param prefix string to use as prefix; if null, removes the prefix
1223 Sets the producer of the PDF document. @param producer string representing the producer information
1224 Sets the document's creator metadata. @param creator name of the document creator
1225 Sets the keywords of the PDF document. @param keywords comma-separated list of keywords
1226 Sets the subject of the PDF document. @param subject new subject to be assigned
1227 Sets the author of the PDF document. @param author name of the document author
1228 Sets the PDF document's title. @param title new title for the document
1229 Sets the document's language. @param language ISO 639-1 language code
1230 Sets a string in an embedded dictionary. @param embedded key for the nested dictionary @param key unique identifier for the item within the dictionary @param value string to store in the dictionary
1231 Sets a string in the dictionary using a given key. @param key unique identifier for the item @param value string to store in the dictionary
1232 Sets a date in the dictionary with a specified key. @param key unique identifier for the item @param date Calendar instance to store in the dictionary
1233 Sets the file description. @param description text describing the file
1234 Sets the motion style of the transition. @param motion PDTransitionMotion enum representing the motion style
1235 Sets the transition dimension. @param dimension specifies the dimension of the transition effect
1236 Initializes a new PDTransition with a specified style. @param style the transition effect style
1237 Sets the viewport's name. @param name new name for the viewport
1238 Initializes a new PDNumberFormatDictionary with default settings. Sets up the internal COSDictionary and specifies its type.
1239 Sets the subtype of the measurement dictionary. @param subtype string representing the subtype to be set
1240 Initializes a new measurement dictionary. Sets up the associated COSDictionary and defines its type.
1241 Sets the element identifier. @param id unique identifier for the element
1242 Sets the title of the PDF structure element. @param title string representing the title to be set
1243 Sets the language attribute of the PDF element. @param language ISO 639-1 language code to be set
1244 Sets the operating system specific launch parameters. @param o OS-specific parameters as a string
1245 Sets the destination string for the launch action. @param d destination string to be set
1246 Sets the file specification for the launch action. @param f file path or URL to be launched
1247 Sets JavaScript action string. @param sAction JavaScript code to be executed
1248 Initializes optional content properties with default settings. Sets up COSDictionary and adds OCGs array. Optionally names the group "Top".
1249 Sets the name of the optional content group. @param name new name for the OCG
1250 Sets the name of the named page reference. @param name new name for the page reference
1251 Sets the partial name of the form field. @param partial partial field name to be set
1252 Sets the target URL for the FDF document. @param target URL to be set as the document's target
1253 Sets the status of the FDF document. @param status new status string to be set
1254 Sets the state model of the annotation. @param stateModel string representing the state model to set
1255 Sets the state of the annotation. @param state new state value to assign
1256 Sets the style of the line annotation's caption. @param captionStyle string representing the caption style
1257 Sets the default style of the annotation. @param style string representing the annotation's style
1258 Sets default appearance of free text annotation. @param appearance string defining visual style
1259 Sets the symbol for the caret annotation. @param symbol string representing the annotation type
1260 Sets the annotation's subject. @param subject string representing the annotation's subject
1261 Sets the title of the annotation. @param title string to be set as the annotation's title
1262 Sets the content of the annotation. @param contents text to be displayed in the annotation
1263 Sets the name of the annotation. @param name unique identifier for the annotation
1264 Sets the modification date of the annotation. @param date ISO 8601 formatted date string
1265 Sets the actual text for the PDF element. @param actualText the string to be displayed in place of the default text
1266 Sets the expanded form of the element. @param expandedForm string representing the expanded form
1267 Sets the alternate description attribute. @param alternateDescription alternative text description
1268 Sets the URI for this action. @param uri the new URI to be set
1269 Initializes a PDF document outline from an existing dictionary. @param dic PDF dictionary representing the outline structure
1270 Default constructor for FDFAnnotationTextMarkup. Initializes a new annotation with default settings.
1271 Initializes a new text annotation. Sets the subtype to "Text".
1272 Initializes a new stamp annotation with subtype.
1273 Constructs a new square annotation. Initializes the annotation with subtype "Square".
1274 Initializes a new sound annotation. Sets the subtype to "Sound".
1275 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
1276 Initializes a new polygon annotation. Sets the subtype to "PolyGo".
1277 Initializes a new hyperlink annotation with subtype "Link".
1278 Initializes a new line annotation with subtype "Annot".
1279 Initializes a new ink annotation. Sets the subtype to "INK".
1280 Initializes a new free text annotation. Sets the subtype to "FreeText".
1281 Constructs a new circular annotation with default settings. Initializes the annotation's subtype as "Circle".
1282 Initializes a new FDF caret annotation. Sets the subtype to "Caret".
1283 Removes a removable child node from the current structure. @param objectable the child node to remove @return true if the node was successfully removed, false otherwise
1284 Inserts a COSObjectable before a reference object. @param newKid the new child node to insert @param refKid the reference node before which to insert
1285 Adds a child node to the structure. @param objectable the new child node to add, must not be null
1286 Creates a PDFileSpecification from a COSBase object. @param base the COSBase object representing the file specification @return PDFileSpecification instance or null if base is null @throws IOException if the base object type is unknown
1287 Retrieves the document catalog of the PDF. Initializes if not already created. @return PDDocumentCatalog representing the PDF's structure
1288 Constructs a new PDDocument with an in-memory stream cache. Initializes PDF document structure using memory-only caching.
1289 Retrieves font width from PDF operators. Parses tokens to identify and process width operators. @return float value representing font width @throws IOException if parsing fails or unexpected end of stream
1290 Retrieves the bounding box of a glyph. @return PDRectangle representing the glyph's bounding box or null if not found @throws IOException if an I/O error occurs during parsing
1291 Parses the entire PDF content stream. @return List of parsed COSBase objects from the stream @throws IOException if an I/O error occurs during parsing
1292 Clones and merges PDF objects between source and target. @param base original COSObjectable object to clone from @param target destination COSObjectable object for cloning @throws IOException if an error occurs during cloning
1293 Constructs an empty FDF file attachment annotation. Initializes the annotation type to "Annot".
1294 Builds vertical metrics for CID font embedding. @param cidFont CID font dictionary to update @throws IOException if an error occurs during processing
1295 Initializes a new instance of the PDSimpleFont class.
1296 Draws a basic ellipse within specified bounds. @param left x-coordinate of the bounding rectangle's left edge @param bottom y-coordinate of the bounding rectangle's bottom edge @param right x-coordinate of the bounding rectangle's right edge @param top y-coordinate of the bounding rectangle's top edge
1297 Adds a curved corner to a path. @param anglePrev previous angle in degrees @param angleCur current angle in degrees @param radius curvature radius @param cx center x-coordinate @param cy center y-coordinate @param alpha current alpha value @param alphaPrev previous alpha value @param addMoveTo whether to add a move-to command before drawing @throws IOException if an I/O error occurs
1298 Creates a PDImageXObject from a BufferedImage encoded as JPEG with default quality. @param document PDF document to add the image to @param image source image to encode @return PDImageXObject containing the encoded JPEG image @throws IOException if I/O operations fail
1299 Retrieves or creates the border array for the annotation. Ensures the border has at least three elements, defaulting missing values to 0. @return COSArray representing the annotation's border
1300 Constructs a new PDListBox instance. @param acroForm the AcroForm containing this list box field
1301 Initializes a new combo box field within a PDF form. @param acroForm the AcroForm containing this field
1302 Constructs a new PDF checkbox. @param acroForm the AcroForm containing this field
1303 Sets equal rectangle differences for all sides. @param difference uniform margin difference for all sides
1304 Sets uniform rectangle differences for all sides. @param difference margin difference for all sides
1305 Sets uniform rectangle margin differences for the annotation. @param difference margin difference for all sides
1306 Constructs a PDAnnotationWidget from a COSDictionary. Initializes the annotation's dictionary and sets its subtype to Widget. @param field the COSDictionary representing the annotation
1307 Constructs an unknown annotation from a COSDictionary. @param dic the COSDictionary representing the annotation
1308 Constructs a PDAnnotationPopup from a COSDictionary. @param field the COSDictionary representing the annotation
1309 Constructs a PDAnnotationMarkup from a COSDictionary. Initializes the annotation's dictionary and ensures it has a valid TYPE entry. @param dict the COSDictionary representing the markup annotation
1310 Constructs a PDAnnotationLink from a COSDictionary. Initializes the link annotation with the provided dictionary. @param field the COSDictionary representing the annotation
1311 Initializes a new interactive annotation widget. Sets its subtype in the PDF COS object.
1312 Initializes a new popup annotation. Sets default subtype in the underlying COSDictionary.
1313 Constructs a new PDF markup annotation with default settings.
1314 Initializes a new link annotation with subtype "Link".
1315 Sets the non-stroking alpha constant for graphics. @param alpha float value representing opacity; null removes the setting
1316 Sets the stroking alpha constant. @param alpha float value for transparency; null removes the setting
1317 Sets the smoothness tolerance for rendering. @param smoothness float value representing smoothness; null removes it
1318 Sets the flatness tolerance for rendering curves. @param flatness the desired flatness value; null removes the setting
1319 Sets the miter limit for line joins. @param miterLimit maximum ratio of miter length to line width
1320 Sets the line width for graphics. @param width float value representing the line width; null removes the setting
1321 Parses a COSStream from the given dictionary. @param dic dictionary containing stream data @return parsed COSStream object @throws IOException if parsing fails or required length is missing
1322 Sets the CYX coordinate value in the PDF measurement dictionary. @param cyx the Y-coordinate value to be stored
1323 Sets the border width. @param w width value to set
1324 Sets or removes the top index of the list box. @param topIndex integer representing the top visible item index, null to remove
1325 Sets field flags in the PDF form. @param flags integer representing field attributes
1326 Sets the Q value in the form's dictionary. @param q integer value representing the quadding mode
1327 Sets the count of open child nodes. @param openCount number of open children
1328 Sets whether timestamping is required. @param flag true if timestamping is required, false otherwise
1329 Sets the P value for signature configuration. @param p integer value representing the P parameter (0-3)
1330 Sets the rotation angle of the annotation. @param rotation degrees to rotate the annotation (0-359)
1331 Sets the quadding mode of the text annotation. @param q quadding mode (0 - left, 1 - center, 2 - right)
1332 Sets the structure parent of the annotation. @param structParent integer representing the structure parent ID
1333 Sets annotation flags. @param flags integer representing annotation properties
1334 Sets or removes the annotation index. @param index index of the annotation; if negative, removes the annotation
1335 Sets the page number for the target directory. @param pageNumber the page number to set or remove
1336 Sets action flags for form submission. @param flags integer representing action configuration
1337 Sets the maximum length of text input. @param maxLen maximum number of characters allowed
1338 Sets action flags in the PDF form reset action. @param flags integer value representing the action flags to be set
1339 Sets the line join style. @param style integer representing the line join style
1340 Sets the line cap style in the graphics state. @param style integer representing the line cap style
1341 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate integer value representing bits per coordinate
1342 Sets the number of bits per color component. @param bitsPerComponent the number of bits for each color component
1343 Sets the number of vertices per row in the triangular shading model. @param verticesPerRow integer representing the count of vertices per row
1344 Sets the number of bits per flag in the shading dictionary. @param bitsPerFlag integer value representing bits per flag setting
1345 Sets the shading type in the PDF shading dictionary. @param shadingType integer representing the shading type
1346 Sets the tiling type for the pattern. @param tilingType integer representing the tiling type
1347 Sets the paint type for the tiling pattern. @param paintType integer representing the paint type
1348 Sets the type of the pattern. @param patternType integer representing the pattern type
1349 Sets the paint type for the pattern. @param paintType integer representing the paint type
1350 Sets the overprint mode in the graphics state. @param overprintMode the new overprint mode value; null removes the entry
1351 Sets the Q attribute of the text field. @param q integer value representing the quadding mode (left, center, right)
1352 Sets a long value in the dictionary using a string key. @param key unique identifier for the item @param value long numeric value to store
1353 Writes the PDF trailer to the output stream. Handles sorting XRef entries and updating trailer dictionary. @param doc COSDocument to write trailer for @throws IOException if an I/O error occurs
1354 Sets constant opacity for the annotation. @param ca opacity value (0.0 to 1.0)
1355 Sets the offset length of the leader line. @param leaderLineOffsetLength the offset length value to be set
1356 Sets the extension length of the leader line. @param leaderLineExtensionLength the length to set for the leader line extension
1357 Sets the length of the leader line in the annotation. @param leaderLineLength the length of the leader line to be set
1358 Sets the sound volume. @param volume level from -1.0 (minimum) to 1.0 (maximum)
1359 Sets the vertical step size for tiling pattern. @param yStep the vertical distance between pattern tiles
1360 Sets the horizontal step size of the tiling pattern. @param xStep the horizontal distance between pattern repetitions
1361 Sets the missing width attribute. @param missingWidth the width value to be set for missing characters
1362 Sets the maximum width of the font. @param maxWidth the maximum width value to be stored
1363 Sets the average width of the font. @param averageWidth the average width value to be stored
1364 Sets the horizontal stem height of the font. @param stemH the new horizontal stem height value
1365 Sets the vertical stem width of the font. @param stemV vertical stem width value
1366 Sets the x-height of the font. @param xHeight the x-height value to be set
1367 Sets the cap height of the font. @param capHeight the cap height value to be set
1368 Sets the leading (line spacing) of the font. @param leading the line spacing value to be set
1369 Sets the font descent value. @param descent the descent metric of the font
1370 Sets the ascent value of the font. @param ascent the ascent metric of the font
1371 Sets the italic angle of the font. @param angle the italic angle value to be set
1372 Sets the font weight. @param fontWeight numeric value representing the font weight
1373 Sets the leader offset of the line annotation. @param leaderOffset distance from the endpoint to the start of the leader line
1374 Sets the leader extend value of the line annotation. @param leaderExtend the extend value for the leader line
1375 Sets the leader line length of the annotation. @param leaderLength the length of the leader line
1376 Sets the opacity of the annotation. @param opacity value between 0 (transparent) and 1 (opaque)
1377 Sets the guideline width in the PDF style. @param width the new width value to be applied
1378 Sets the user unit for the PDF page. @param userUnit the scaling factor (must be positive)
1379 Sets a floating-point value in the dictionary using a string key. @param key unique identifier for the item @param value the float value to be stored
1380 Sets the minimum revision required for the digital signature. @param revision long value representing the minimum revision level
1381 Sets the revision number of the digital signature. @param revision long value representing the revision number
1382 Sets the minimum required capability for digital signatures. @param minimumRequiredCapability the capability level as a float value
1383 Initializes a new PDF document outline. Sets the type of the outline to "Outlines".
1384 Sets the URL type in the PDF dictionary. @param urlType string representing the URL type
1385 Sets the name of the digital signature property. @param name string representing the signature's name
1386 Sets the file specification for the action. @param fs PDFileSpecification object representing the file to be imported
1387 Sets the destination for navigation. @param d PDDestination object representing the target location
1388 Sets the target directory for the action. @param targetDirectory PDTargetDirectory object representing the target location
1389 Sets the file specification for the embedded action. @param fs PDFileSpecification object representing the file to be opened
1390 Sets the destination for the GoToE action. @param d PDDestination object representing the target location
1391 Sets font settings in the graphics state. @param fs PDFontSetting object containing font properties
1392 Sets the shading function. @param newFunction PDFunction to apply in shading
1393 Sets the resources for the tiling pattern. @param resources PDResources object containing pattern resources
1394 Sets the shading resource for the pattern. @param shadingResources PDShading object representing the shading resource
1395 Sets the extended graphics state for shading. @param extendedGraphicsState the new graphics state to apply
1396 Sets the black point for the color space. @param blackpoint PDTristimulus object representing the black point
1397 Sets the white point for the color space. @param whitepoint PDTristimulus object containing X, Y, Z values
1398 Sets the file specification for the launch action. @param fs PDFileSpecification object representing the file to be launched
1399 Sets the CIDSet stream in the font descriptor. @param stream PDStream containing CIDSet data
1400 Sets the TrueType font file stream. @param ttfStream stream containing the TrueType font data
1401 Sets the Type 1 font file in the descriptor. @param type1Stream PDF stream containing the font data
1402 Sets the template reference in the FDF document. @param tRef the named page reference to be set
1403 Sets page information in the FDF document. @param info FDFPageInfo object containing page details
1404 Sets the file specification for the named page reference. @param fs PDFileSpecification object representing the file specification
1405 Sets the fractional space to allocate for an icon. @param space PDRange representing the space allocation
1406 Sets additional actions for the field. @param aa PDAdditionalActions object containing actions to be set
1407 Sets an action for the field. @param a PDAction object representing the action to be set
1408 Sets icon fit settings for the field. @param fit FDFIconFit object representing icon fit configuration
1409 Sets the appearance stream reference for the field. @param ref FDFNamedPageReference object representing the appearance stream
1410 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary object representing visual appearances
1411 Sets the catalog for the FDF document. @param cat FDFCatalog to be set as the root of the document
1412 Sets the font file 3 stream. @param stream PDStream containing font data
1413 Sets Windows-specific launch parameters. @param win PDWindowsLaunchParams object containing Windows launch settings
1414 Sets the file specification for the remote navigation action. @param fs PDFileSpecification object representing the target file
1415 Sets the file specification for the form submission. @param fs PDFileSpecification object representing the file to be submitted
1416 Sets the file specification for this attachment. @param file PDFileSpecification representing the attached file
1417 Sets the associated page for this annotation. @param page PDPage object representing the target page
1418 Sets optional content group for the annotation. @param oc PDPropertyList representing the optional content group
1419 Sets the appearance of the annotation. @param appearance PDAppearanceDictionary object representing the annotation's visual appearance
1420 Sets or removes a named destination. @param dest PDNamedDestination object to set, null to remove
1421 Sets the target directory in the PDF document. @param targetDirectory PDTargetDirectory object to be set
1422 Sets the action to be performed when the page is closed. @param c PDAction representing the action on close
1423 Sets the 'O' action in the page's additional actions. @param o PDAction object representing the 'Open' action
1424 Sets the "C" action associated with form field. @param c PDAction object representing the action
1425 Sets the action associated with form validation. @param v PDAction to be set as validation action
1426 Sets an F action in the form field's actions dictionary. @param f PDAction representing the action to be set
1427 Sets the K action in the form field's additional actions. @param k PDAction object representing the K action
1428 Sets the document-wide action. @param dp PDAction object representing the action to be set
1429 Sets an action to be triggered on page transition. @param wp PDAction object representing the page transition action
1430 Sets an action to be triggered on document save. @param ds the action to perform on document save
1431 Sets the action to be performed on document opening. @param ws PDAction object representing the action
1432 Sets the WC action in the PDF document's catalog. @param wc PDAction object representing the WC action
1433 Sets the page initialization action. @param pi PDAction object representing the page initialization action
1434 Sets the action to be performed when an annotation is validated. @param pv PDAction representing the validation action
1435 Sets the page closing action for the annotation. @param pc PDAction object representing the page closing action
1436 Sets the page opening action for the annotation. @param po PDAction object representing the page opening action
1437 Sets the border click action. @param bl action to execute on border click
1438 Sets the action for form field focus. @param fo PDAction object representing the focus action
1439 Sets the action for the 'U' (URI) annotation. @param u PDAction object representing the URI action
1440 Sets the "D" action for this annotation. @param d PDAction object representing the action
1441 Sets the X action associated with this annotation. @param x PDAction to define behavior for 'X' event
1442 Sets the exit action for the annotation. @param e PDAction defining the exit behavior
1443 Sets the F (File) action. @param action PDF action to be associated with the file
1444 Sets the file specification for the action. @param fs PDFileSpecification object representing the file
1445 Sets JavaScript associated with the FDF document. @param js FDFJavaScript object containing script data
1446 Sets the border effect dictionary for the annotation. @param be PDBorderEffectDictionary to define the border effect
1447 Sets the file specification in the FDF dictionary. @param fs PDFileSpecification object representing the file details
1448 Sets the FDF dictionary in the catalog. @param fdf FDFDictionary to be stored in the catalog
1449 Sets URI dictionary in the document catalog. @param uri PDURIDictionary object containing URI information
1450 Sets the document's mark info. @param markInfo object containing marking information
1451 Sets document's name dictionary. @param names PDDocumentNameDictionary containing named destinations and actions
1452 Sets additional actions for the document catalog. @param actions object containing additional actions to be set
1453 Sets the open action for the document. @param action the destination or action to perform on opening
1454 Sets metadata for the PDF document. @param meta PDMetadata object containing document metadata
1455 Sets the document's outline. @param outlines PDDocumentOutline object containing the document structure
1456 Sets viewer preferences for the PDF document. @param prefs PDViewerPreferences object containing viewer settings
1457 Sets the AcroForm in the document catalog. @param acroForm the AcroForm to set
1458 Sets an item in the dictionary using a string key. @param key unique identifier for the item as a string @param value data to store in the dictionary (COSObjectable)
1459 Decrypts a PDF object. @param obj the COSBase object to decrypt @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @return decrypted COSBase object or original if not applicable @throws IOException if decryption fails
1460 Sets the end color using PDGamma object. @param colour PDGamma object representing the end color
1461 Sets the start color using PDGamma object. @param colour PDGamma object representing the color
1462 Sets the structure tree root of the PDF document. @param treeRoot PDStructureTreeRoot object representing the structure tree
1463 Sets color after the first color in the collection. @param colour PDGamma object representing the new color
1464 Creates a retranslated rectangle with the same dimensions. @return A new PDRectangle instance with width and height set from current instance
1465 Sets the lower limit for a name tree node. @param lower the lower boundary string
1466 Sets the upper limit for a name tree node. @param upper the upper limit string to set
1467 Sets the ending style for polyline annotation endpoints. @param style the style to apply; defaults to LE_NONE if null
1468 Sets the starting point style of the polyline annotation. @param style the style to apply; default is LE_NONE if null
1469 Sets the ending style of the line annotation's endpoint. @param style the new ending style or null for default
1470 Sets the ending style for the start point of the line annotation. @param style the style to apply; defaults to LE_NONE if null
1471 Sets the endpoint style for a polyline annotation. @param style the ending style to apply
1472 Sets the ending style for the start point of a polyline annotation. @param style the style to set; null sets no style
1473 Sets the ending style of the line annotation. @param style the style to apply; null sets no ending style
1474 Sets color before content. @param colour PDGamma object representing the color
1475 Sets page labels for the document. @param labels PDPageLabels object containing page label configurations
1476 Sets destinations in the name dictionary. @param dests destination tree node to be set
1477 Sets the embedded files node in the document's name dictionary. @param ef PDEmbeddedFilesNameTreeNode representing embedded files
1478 Sets the fringe dimensions of the annotation. @param fringe PDRectangle representing the fringe dimensions
1479 Sets the fringe rectangle of the annotation. @param fringe PDRectangle defining the fringe area
1480 Sets the fringe dimensions of the circle annotation. @param fringe PDRectangle representing the fringe size
1481 Sets the fringe dimensions of the caret annotation. @param fringe PDRectangle representing the fringe dimensions
1482 Sets border effect properties of the annotation. @param be PDBorderEffectDictionary object containing border effect settings
1483 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object defining the border style
1484 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the position and size of the annotation
1485 Sets the parent tree node in the structure dictionary. @param parentTree PDNumberTreeNode representing the parent tree
1486 Sets the page associated with the structure element. @param page PDPage object to be set
1487 Sets the parent node of the structure element. @param structureNode parent node to be assigned
1488 Sets the associated PDF page. @param page PDPage object to be set
1489 Sets the referenced object in the COSDictionary. @param xobject PDXObject to be referenced
1490 Sets an annotation as the referenced object. @param annotation PDAnnotation to be referenced
1491 Sets the associated PDF page for the marked content reference. @param page PDPage object representing the page
1492 Adds or updates a resource in the PDF document. @param kind type of resource (e.g., font, color space) @param name unique identifier for the resource @param object data to store as the resource
1493 Sets the transition effect and duration for the page. @param transition PDTransition object defining the transition effect @param duration float representing the transition duration in seconds
1494 Sets the transition effect for the page. @param transition PDTransition object defining the transition effect
1495 Sets additional actions for the page. @param actions PDPageAdditionalActions object containing action definitions
1496 Sets metadata for the PDF page. @param meta PDMetadata object containing metadata information
1497 Sets the content stream of the PDF page. @param contents PDStream containing page content
1498 Sets the artwork box for the PDF page. @param artBox the new artwork bounding box or null to remove it
1499 Sets or removes the trim box of the PDF page. @param trimBox rectangle defining the page's printable area, or null to remove it
1500 Sets or removes the bleed box for the PDF page. @param bleedBox rectangle defining the bleed area; null to remove it
1501 Sets the media box for the page. @param mediaBox the new media box rectangle or null to remove it
1502 Sets the resources for this PDF page. @param resources PDResources object containing page resources
1503 Constructs a new PDF page with specified dimensions. @param mediaBox defines the size and position of the page
1504 Sets the JavaScript name tree node in the document. @param js PDJavascriptNameTreeNode object representing JavaScript elements
1505 Sets the digital signature in the FDF catalog. @param sig PDSignature object representing the signature to be set
1506 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the rectangle difference
1507 Sets the action associated with this link annotation. @param action PDAction object representing the link's behavior
1508 Sets the border style of the link annotation. @param bs border style dictionary to apply
1509 Sets or removes the page label style. @param style desired style for page labels or null to remove it
1510 Sets the trapped status of the PDF document. @param value valid values: "True", "False", "Unknown" @throws IllegalArgumentException if value is not one of the allowed options
1511 Sets the PDF document's version. @param version string representing the document version
1512 Sets the page layout of the PDF document. @param layout desired page layout configuration
1513 Sets the page mode of the PDF document. @param mode desired PageMode to be set
1514 Sets a PDF dictionary entry with a given key and string value. @param key unique identifier for the dictionary entry @param value string to be stored in the dictionary
1515 Sets an array of numbers as a named attribute. @param name the attribute key @param values float array to be stored
1516 Sets an array of PDF names as a dictionary item. @param name the key for the dictionary entry @param values array of strings to be converted to COSName and stored
1517 Sets an array of strings as a dictionary item. @param name key for the dictionary entry @param values string array to be set
1518 Sets whether to display the document title in the viewer. @param value true to display, false otherwise
1519 Sets whether to center the PDF window. @param value true to center, false otherwise
1520 Sets whether to fit the PDF window to the page. @param value true to fit window, false otherwise
1521 Sets the visibility of the window UI in the PDF viewer. @param value true to hide the UI, false to show it
1522 Initializes a new PDTypedDictionaryWrapper with a specified type. @param type the type name for the PDF dictionary
1523 Sets whether to hide the menubar in the PDF viewer. @param value true to hide, false to show
1524 Sets the needAppearances flag in the form dictionary. @param value boolean indicating if appearances should be generated
1525 Sets the trusted mode flag in the PDF properties. @param trustedMode boolean indicating if the document is in trusted mode
1526 Sets whether to suppress warnings for non-embedded fonts. @param noEmbedFontWarning flag to disable font warning
1527 Sets the pre-release status of the digital signature. @param preRelease boolean indicating if it's a pre-release version
1528 Sets the open state of the annotation. @param open boolean indicating if the annotation is open
1529 Sets whether the line annotation has a caption. @param cap true if the line has a caption, false otherwise
1530 Sets whether sound should be mixed with other sounds. @param mix true to mix, false otherwise
1531 Sets whether the sound should repeat. @param repeat true to enable repetition, false otherwise
1532 Sets whether the sound action is synchronous. @param synchronous if true, sound plays before proceeding; false otherwise
1533 Sets the window behavior for opening linked content. @param value OpenMode specifying how to open the link
1534 Sets the window behavior for opening external content. @param value OpenMode specifying how to open content (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1535 Sets the window behavior for opening linked content. @param value specifies how to open the content (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1536 Sets the text knockout flag. @param tk boolean value indicating text knockout state
1537 Sets the toolbar visibility preference. @param value true to hide toolbar, false to show it
1538 Sets the owner of the attribute. @param owner string representing the owner's name
1539 Initializes a new PDMarkedContentReference with an empty dictionary and sets its type.
1540 Initializes a PDF object reference with an empty dictionary and sets its type.
1541 Sets the subtype of the external data dictionary. @param subtype string representing the subtype to be set
1542 Initializes a new external data dictionary. Sets the type attribute to "ExData".
1543 Sets the border style of the annotation. @param s string representing the style type
1544 Sets the highlighting mode of the annotation. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T' @throws IllegalArgumentException for invalid modes
1545 Sets the name of the annotation. @param name string representing the annotation's name
1546 Sets the name of the rubber stamp annotation. @param name new name for the annotation
1547 Sets the intent of the markup annotation. @param it purpose or type of the annotation (e.g., Comment, Highlight)
1548 Sets the reply type of the annotation. @param rt string representing the reply type
1549 Sets the highlight mode of the link annotation. @param mode highlight mode to be applied
1550 Sets the caption positioning for the line annotation. @param captionPositioning string indicating the position of the caption
1551 Sets the line ending style of the annotation. @param style string representing the line ending style
1552 Sets the attachment name. @param name new name for the file attachment
1553 Sets the appearance state of the annotation. @param as new appearance state value
1554 Sets the subtype of the annotation. @param subType string representing the annotation subtype
1555 Sets the subtype of the PDF action. @param s subtype string to be set
1556 Sets the type of the PDF action. @param type string representing the action type
1557 Initializes a new PDF pattern with a type identifier. Sets up the pattern dictionary for subsequent property assignments.
1558 Sets the scaling type for icon fitting. @param scale scaling type as string
1559 Sets scaling option for icon. @param option scaling configuration for icon display
1560 Sets the encoding of the FDF document. @param encoding string representing the desired encoding
1561 Sets the document version in the FDF catalog. @param version string representing the document version
1562 Sets the icon of the text annotation. @param icon name of the icon to be set
1563 Sets the line ending style of the annotation. @param style string representing the line ending style
1564 Sets the annotation's intent. @param intent purpose of the annotation
1565 Sets the sub-filter for encryption. @param subfilter string representing the sub-filter type
1566 Sets the guideline style in the PDF. @param style string representing the guideline style
1567 Initializes a PDF structure node with a specified type. @param type the node type as a string
1568 Sets the structure type of the PDF element. @param structureType type identifier for the structure element
1569 Sets the alpha source flag in the graphics state. @param alpha boolean value indicating the alpha source status
1570 Sets automatic stroke adjustment. @param sa whether to enable automatic stroke adjustment
1571 Sets non-stroking overprint control. @param op boolean value to enable or disable overprint
1572 Sets stroking overprint control. @param op boolean value to enable or disable overprint
1573 Sets an action associated with this outline item. @param action the action to be set (PDAction)
1574 Sets the destination for this outline item. @param dest the destination to navigate to when the item is activated
1575 Sets the next sibling in the outline hierarchy. @param outlineNode the next sibling PDOutlineNode
1576 Sets the previous sibling of this outline item. @param outlineNode the new previous sibling node
1577 Sets property build information in the signature dictionary. @param propBuild PDPropBuild object containing property details
1578 Sets the seed value certificate. @param certificate PDSeedValueCertificate object to be stored
1579 Sets application-specific data in the PDF property build. @param app PDPropBuildDataDict containing application data
1580 Sets publication security properties in the PDF. @param pubSec object containing publication security data
1581 Sets the digital signature filter in the properties dictionary. @param filter PDPropBuildDataDict containing filter information
1582 Sets the down appearance for an annotation. @param ap PDAppearanceStream representing the visual state when pressed
1583 Sets the down appearance for an annotation. @param entry appearance entry to be set
1584 Sets the rollover appearance of the annotation. @param ap appearance stream to use for rollover state
1585 Sets the rollover appearance for an annotation. @param entry appearance entry to be set
1586 Sets the normal appearance of the annotation. @param ap PDAppearanceStream object representing the normal state appearance
1587 Sets the normal appearance of the annotation. @param entry PDAppearanceEntry object representing the normal state appearance
1588 Sets the parent field of this annotation. @param field parent PDTerminalField object @throws IllegalArgumentException if the field shares a dictionary with its only widget
1589 Sets the border style of the annotation. @param bs BorderStyleDictionary defining the new style
1590 Sets additional actions for the annotation. @param actions PDAnnotationAdditionalActions object containing actions
1591 Sets an action for the annotation widget. @param action PDAction to be associated with the widget
1592 Sets the appearance characteristics of the annotation. @param appearanceCharacteristics dictionary defining visual properties
1593 Sets rectangle difference for annotation. @param rd PDRectangle representing the difference
1594 Sets the border effect dictionary of the annotation. @param be border effect dictionary to apply
1595 Sets the border effect dictionary for the polygon annotation. @param be PDBorderEffectDictionary object representing the border effect
1596 Sets the border style of the annotation. @param bs PDBorderStyleDictionary representing the new border style
1597 Sets external data dictionary for the annotation. @param externalData dictionary containing additional metadata
1598 Sets the annotation this one is in reply to. @param irt parent annotation
1599 Sets the associated popup annotation. @param popup PDAnnotationPopup object to associate with this annotation
1600 Sets the previous URI action. @param pa PDActionURI object representing the action
1601 Sets the destination for this link annotation. @param dest PDDestination object representing the target location
1602 Sets the structure element associated with this outline item. @param structureElement PDF structure element to be associated
1603 Sets the lower limit for a node. @param lower the new lower limit value or null to clear it
1604 Sets the last child node in the outline. @param outlineNode the last child PDOutlineNode to be set
1605 Sets anti-aliasing property. @param antiAlias flag to enable or disable anti-aliasing
1606 Sets the rename flag in the FDF template. @param value boolean indicating whether renaming is enabled
1607 Sets whether to scale icon to fit annotation. @param value true to enable scaling; false otherwise
1608 Sets whether to display a caption for the line annotation. @param cap true to enable caption, false otherwise
1609 Sets metadata encryption status. @param encryptMetaData flag indicating whether to encrypt metadata
1610 Sets the volatility status of the file. @param fileIsVolatile true if the file is volatile, false otherwise
1611 Sets the FD flag in the number format dictionary. @param fd boolean value to indicate whether fixed decimal is used
1612 Sets the popup's visibility state. @param open true to show, false to hide the popup
1613 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
1614 Sets the suspect flag in the PDF marking info. @param suspect boolean indicating if the element is marked as suspect
1615 Sets the user properties flag in the PDF marking info. @param userProps boolean indicating if user properties are enabled
1616 Sets the marked status of the PDF element. @param value true if marked, false otherwise
1617 Sets the rectangle defining the bead's position. @param rect PDRectangle object representing the new position
1618 Sets the associated PDF page for this bead. @param page PDPage object to be set as the associated page
1619 Sets the previous bead in the thread. @param previous the preceding bead in the sequence
1620 Sets the next bead in the thread. @param next the subsequent PDThreadBead object
1621 Assigns a PDF thread to this bead. @param thread the PDThread object representing the thread
1622 Sets document information associated with the thread. @param info PDDocumentInformation object containing metadata
1623 Sets the measurement dictionary for the viewport. @param measure PDMeasureDictionary containing measurement details
1624 Sets the bounding box for the viewport. @param rectangle PDRectangle representing the new bounding box
1625 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions
1626 Sets the seed value for the signature field. @param sv PDSeedValue object representing the seed value
1627 Sets the default signature value. @param value PDSignature object representing the default signature
1628 Sets the digital signature value. @param value PDSignature object to set @throws IOException if an I/O error occurs
1629 Sets the XFA resource for the form. @param xfa XFA resource to be associated with the form
1630 Sets default resources for the form. @param dr PDResources object containing default resources
1631 Sets the first child of this outline node. @param outlineNode the first child node to be added
1632 Determines if a given dictionary represents the PDF catalog. @param dictionary the COSDictionary to check @return true if the dictionary is a catalog, false otherwise
1633 Retrieves the rollover icon for the annotation. @return PDFormXObject representing the rollover icon or null if not found
1634 Retrieves the stroking alpha constant from the graphics state. @return float value representing the stroking alpha constant or null if not found
1635 Retrieves the smoothness tolerance value. @return float value representing smoothness or null if not found
1636 Retrieves the flatness tolerance value. @return float value representing flatness or null if not found
1637 Retrieves the miter limit value. @return float value of miter limit or null if not found
1638 Retrieves the line width from the graphics state. @return float value representing the line width or null if not found
1639 Creates a PDPropertyList instance based on the given COSDictionary. @param dict the COSDictionary to associate with the property list @return a specialized PDPropertyList subclass or generic PDPropertyList
1640 Retrieves the color space for the transparency group. @return PDColorSpace instance or null if not defined @throws IOException if an error occurs during creation
1641 Extracts text from specified regions on a given PDF page. @param page the PDF page to extract text from @throws IOException if an I/O error occurs during processing
1642 Retrieves the scale factor for fly transitions. @return scale factor as a float, default is 1 if not set
1643 Retrieves the duration of the transition. @return duration in seconds, default is 1 second if not specified
1644 Retrieves the border width of a PDF annotation. @return float value representing the border width, defaulting to 1 if not specified
1645 Retrieves constant opacity of the annotation. @return opacity value as float, defaulting to 1 if not set
1646 Retrieves the leader line offset length of the annotation. @return the leader line offset length as a float, or 0 if not set
1647 Retrieves the leader line extension length of the annotation. @return the length of the leader line extension, defaulting to 0 if not set
1648 Retrieves the descent value of the font. @return the descent value as a float, defaulting to 0 if not found
1649 Retrieves the leading value of the font. @return the leading value as a float, defaulting to 0 if not found
1650 Retrieves the cap height of the font. @return the cap height value, ensuring it's non-negative
1651 Retrieves the X height of the font. @return non-negative float value representing X height
1652 Retrieves the vertical stem width of the font. @return the stem width as a float, defaulting to 0 if not specified
1653 Retrieves horizontal stem height. @return horizontal stem height as float, defaulting to 0 if not found
1654 Retrieves the non-stroking alpha constant. @return float value of non-stroking alpha or null if not found
1655 Retrieves the average width of characters in the font. @return the average width as a float, or 0 if not specified
1656 Retrieves the missing width of the font. @return the missing width value or 0 if not specified
1657 Retrieves the gamma value from the color space dictionary. @return the gamma correction factor, defaults to 1.0 if not specified
1658 Retrieves the x-step value of the tiling pattern. @return the x-step as a float, defaulting to 0 if not found
1659 Retrieves the vertical step of the tiling pattern. @return the Y-axis step value, defaulting to 0 if not specified
1660 Retrieves the sound volume. @return volume level between -1 and 1, defaulting to 1 if out of range
1661 Retrieves the leader line length of the annotation. @return the length of the leader line or 0 if not specified
1662 Retrieves the maximum width of the font. @return the maximum width as a float, or 0 if not specified
1663 Retrieves the font ascent value. @return the ascent value or 0 if not found
1664 Writes a PDF object to the output stream. @param obj the COSBase object to write @throws IOException if an I/O error occurs
1665 Creates a PDAttributeObject based on the owner type in the dictionary. @param dictionary PDF dictionary containing attribute data @return Specific PDAttributeObject or default if no match found
1666 Retrieves the font type as a string. @return The font type or null if not found
1667 Retrieves the base font name from the font dictionary. @return Base font name as a string or null if not found
1668 Retrieves the scale type for icon fitting. @return Scale type as string, defaulting to proportional if not specified
1669 Retrieves the scale option for icon fitting. @return Scale option as a string, defaulting to "Always" if not specified
1670 Retrieves the encoding of the FDF document. @return Encoding string, defaulting to "PDFDocEncoding" if not specified
1671 Retrieves the version of the FDF document. @return Version string or null if not found
1672 Retrieves the line ending style of the annotation. @return String representing the line ending style or null if not found
1673 Retrieves the intent of the annotation. @return Intent as a string or null if not found
1674 Creates an FDFAnnotation from a COSDictionary. @param fdfDic the underlying PDF dictionary representing the annotation @return FDFAnnotation object or null if unsupported type
1675 Retrieves the sub-filter name from the encryption settings. @return String representation of the sub-filter or null if not found
1676 Retrieves the filter name from the encryption settings. @return The string representation of the filter or null if not found
1677 Retrieves the subtype of the marked content artifact. @return Subtype as a string or null if not found
1678 Retrieves the type of the marked content artifact. @return Type as a string or null if not found
1679 Retrieves the language of the marked content. @return Language as a string or null if not specified
1680 Retrieves the name of the user property. @return Name as string or null if not found
1681 Retrieves the string value associated with a given key. If not found, returns a default value. @param key the key for the desired string value @param defaultValue the value to return if the key is not found @return the string value or the default value if not found
1682 Checks if the given offset points to a valid XRef stream. @param startXRefOffset the starting offset of the xref in the PDF @return true if a valid XRef stream is found, false otherwise
1683 Retrieves the page mode of the PDF document. @return PageMode object representing the current page mode, defaulting to USE_NONE if invalid or not set
1684 Retrieves the page layout of the PDF document. @return PageLayout enum representing the current page layout configuration
1685 Retrieves the PDF version as a string. @return Version of the PDF document or null if not found
1686 Retrieves the trapped status of the PDF document. @return Trapped status as a string or null if not found
1687 Retrieves string value by key using COSName. @param key PDF name string @return String representation or null if not found
1688 Retrieves export values for choice field options. @return List of strings representing export values
1689 Retrieves the type of the PDF object. @return Type as a string or null if not found
1690 Retrieves the owner of the attribute. @return Owner as a string or null if not found
1691 Retrieves the structure type of the PDF element. @return String representation of the structure type or null if not found
1692 Creates a PDStructureNode from a COSDictionary. @param node the dictionary representing the structure node @return PDStructureTreeRoot if type is "StructTreeRoot", PDStructureElement otherwise @throws IllegalArgumentException if type is neither "StructTreeRoot" nor "StructElem"
1693 Retrieves the type of the structure node. @return String representing the node's type or null if not found
1694 Retrieves the page numbering style. @return String representation of the numbering style or null if not found
1695 Retrieves the italic angle of the font. @return the italic angle as a float, defaulting to 0 if not specified
1696 Retrieves the font weight. @return font weight as a float, defaulting to 0 if not found
1697 Retrieves the opacity of the annotation. @return opacity value as a float (default is 1.0 if not set)
1698 Retrieves the quadrilateral points defining the link annotation's appearance. @return float[] containing quad points or null if not found
1699 Retrieves the horizontal offset of the annotation's caption. @return float value representing the horizontal offset, default is 0.0 if not found
1700 Retrieves the ending style of the line annotation. @return String representing the ending style or default if not found
1701 Retrieves the starting style of the line annotation. @return string representing the starting style or default if not set
1702 Retrieves line coordinates from annotation. @return float array of coordinates or null if not found
1703 Retrieves the ink data as a 2D array of floats. @return 2D float array representing ink paths, or an empty array if none found
1704 Retrieves the callout coordinates for the annotation. @return float[] representing the callout points or null if not set
1705 Retrieves rectangle differences for the annotation. @return float array representing RD values or empty if not found
1706 Retrieves rectangle margin differences for the annotation. @return float array of margin differences or empty array if not found
1707 Retrieves the array of form fields associated with the action. @return COSArray containing field configurations or null if not found
1708 Retrieves the fields associated with the reset action. @return COSArray containing field names or null if not found
1709 Retrieves font settings from the dictionary. @return PDFontSetting object or null if not found
1710 Retrieves or computes the decode values for shading. @return COSArray containing decode values or null if not found
1711 Retrieves the coordinates array for the shading. @return COSArray containing the coordinates or null if not found
1712 Retrieves the domain array for the shading. Initializes from COS object if not already set. @return COSArray representing the domain or null if not found
1713 Retrieves the Extend array for the shading. @return COSArray representing the Extend values or null if not set
1714 Retrieves the domain array for the shading. @return COSArray representing the domain or null if not found
1715 Retrieves a list of FDFPage objects. @return List of FDFPage objects or null if no pages are found
1716 Retrieves child fields of the current field. @return List of FDFField objects or null if no children exist
1717 Retrieves options for the field. @return List of option strings or FDFOptionElement objects, or null if no options are present
1718 Retrieves templates from the FDF page. @return List of FDFTemplate objects or null if no templates are found
1719 Retrieves all FDF fields from the template. @return List of FDFField objects or null if none exist
1720 Retrieves the vertices of the polygon annotation. @return float[] representing the vertices or null if not found
1721 Retrieves font widths from the PDF dictionary. @return List of Float values representing character widths or an empty list if not found
1722 Retrieves the transformation matrix for color conversion. @return float[] representing the transformation matrix values
1723 Retrieves the list of component names from the color space. @return List of component names or an empty list if none found
1724 Retrieves or creates the background array for shading. @return COSArray representing the background colors or null if not set
1725 Retrieves the polygon's path as a 2D array of floats. @return 2D float array representing polygon vertices or null if not found
1726 Retrieves the ending style of the polyline's start point. @return String representing the start point ending style or default if not found
1727 Retrieves the ending style of the polyline annotation. @return String representing the endpoint style or default if not set
1728 Retrieves an array of angle measurement dictionaries. @return PDNumberFormatDictionary[] containing angle measurements or null if not found
1729 Retrieves line slope format dictionaries. @return array of PDNumberFormatDictionary objects or null if not found
1730 Retrieves the coordinate system origin from the PDF dictionary. @return float[] representing the origin coordinates or null if not found
1731 Retrieves the visibility policy of the optional content group. @return COSName representing the visibility policy or ANY_ON if not set
1732 Retrieves a long value from the dictionary by key. @param key the key for the desired object @return the long value or -1 if not found or not a COSNumber
1733 Retrieves a long value from the dictionary by key. @param key the key for the desired object @return the long value or -1 if not found or not a COSNumber
1734 Retrieves area measurement dictionaries from the PDF document. @return array of PDNumberFormatDictionary objects or null if none found
1735 Retrieves a long value from the dictionary by key. @param key the key for the desired object @param defaultValue default value to return if not found or not a COSNumber @return the long value or default if not applicable
1736 Sets the startxref byte position and resolves trailers. @param startxrefBytePosValue byte position of the startxref entry
1737 Retrieves a float value from the dictionary by key. @param key the key for the desired float value @return the float value associated with the key, or -1 if not applicable
1738 Retrieves a float value from the dictionary by key. @param key the key for the desired float value @return the float value associated with the key, or -1 if not applicable
1739 Retrieves a float value from the dictionary by key. @param key the key for the desired float value @param defaultValue default float value if key not found or not a COSNumber @return the float value associated with the key, or defaultValue if not applicable
1740 Retrieves the user unit for the PDF page. @return the user unit value, defaulting to 1.0 if not set or invalid
1741 Retrieves the guideline width from the PDF dictionary. @return guideline width as a float, defaulting to 1 if not specified
1742 Retrieves the subtype of the font. @return The subtype as a string or null if not found
1743 Retrieves distance measurement dictionaries from the PDF document. @return array of PDNumberFormatDictionary objects or null if not found
1744 Retrieves and converts X-axis change measurements from the PDF dictionary. @return array of PDNumberFormatDictionary objects or null if not found
1745 Retrieves vertex coordinates of the polyline. @return Array of floats representing vertex coordinates or null if not found
1746 Retrieves rectangle differences for the annotation. @return float array of rectangle differences or empty array if none
1747 Retrieves the quad points defining the text markup area. @return float[] of quad points or null if not found
1748 Retrieves sub-filter names from the digital signature. @return List of sub-filter string names or empty list if not found
1749 Retrieves the digest methods associated with the digital signature. @return List of string representations of digest method names or empty list if none found
1750 Retrieves the list of reasons for digital signatures. @return List of reason strings or an empty list if none found
1751 Retrieves number format dictionaries for Y-axis changes. @return array of PDNumberFormatDictionary objects or null if not found
1752 Retrieves legal attestation fields from the PDF signature. @return List of string representations of legal attestation COSName objects or empty list if not found
1753 Retrieves key usage extensions from the certificate. @return List of key usage strings or null if not found
1754 Retrieves issuer information from the certificate. @return List of byte arrays representing issuer data or null if not found
1755 Retrieves the OID (Object Identifier) list from the certificate. @return List of byte arrays representing OIDs, or null if not found
1756 Retrieves the ByteRange of the digital signature. @return an array of integers representing the ByteRange or an empty array if not found
1757 Retrieves the calculation order of form fields. @return List of PDField objects in calculation order
1758 Retrieves indices of selected options in a choice field. @return List of Integer representing selected option indices or empty list if none selected
1759 Retrieves the subject byte arrays from the certificate. @return List of byte arrays representing the subject or null if not found
1760 Retrieves the font name from the PDFontDescriptor. @return Font name as a string or null if not found
1761 Retrieves the font stretch attribute. @return String representation of font stretch or null if not found
1762 Retrieves the base font name from the font dictionary. @return Base font name as a string or null if not found
1763 Retrieves the operating system information from the digital signature properties. @return OS name as a String or null if not found
1764 Retrieves the date from the digital signature properties. @return Date string or null if not found
1765 Retrieves the alternate caption of the annotation. @return Alternate caption as a string or null if not found
1766 Retrieves the rollover caption for the annotation. @return Rollover caption string or null if not found
1767 Retrieves the normal caption of the annotation. @return Normal caption as a String or null if not found
1768 Retrieves the state model of the annotation. @return State model as a string or null if not found
1769 Retrieves the state of the text annotation. @return State string or null if not found
1770 Retrieves the subject of the annotation. @return Subject string or null if not found
1771 Retrieves the title popup text of the annotation. @return The title popup string or null if not found
1772 Retrieves default style string of the annotation. @return Default style string or null if not found
1773 Retrieves default appearance string of the annotation. @return Default appearance settings as a string or null if not found
1774 Retrieves the name of the annotation. @return String representing the annotation's name or null if not found
1775 Retrieves the modification date of the annotation. @return Date string or null if not found
1776 Retrieves the contents of the annotation. @return The string content of the annotation or null if not found.
1777 Retrieves the execute parameter from launch parameters. @return String value of the execute parameter or null if not found
1778 Retrieves the directory path from launch parameters. @return Directory path as a string or null if not found
1779 Retrieves the filename from launch parameters. @return Filename as a string or null if not found
1780 Removes a user property from the document. @param userProperty the user property to remove
1781 Retrieves the name of the optional content group. @return Name of the OCG or null if not found
1782 Retrieves subject distinguished names from the certificate. @return List of maps containing key-value pairs for each DN or null if not found
1783 Retrieves names of all optional content groups. @return array of group names or empty array if none found
1784 Retrieves the destination or file path associated with the launch action. @return String representing the destination or null if not found
1785 Retrieves the operating system-specific launch parameters. @return OS-specific parameters as a string or null if not found
1786 Retrieves the preferred application to launch. @return String representing the application or null if not specified
1787 Retrieves the URI from the PDF action. @return The URI as a String or null if not found.
1788 Retrieves the filename associated with the target directory. @return Filename as a string or null if not found
1789 Retrieves the annotation name from the dictionary. @return Annotation name as a string or null if not found
1790 Retrieves the file specification for the launch action. @return File path or URL as a string, or null if not set
1791 Retrieves the URL associated with the certificate. @return URL string or null if not found
1792 Retrieves the URL associated with the timestamp. @return URL string or null if not found in the dictionary
1793 Retrieves the name of the signature. @return String representing the name or null if not found
1794 Retrieves a number or name from the dictionary. @param name key to fetch the value by @param defaultValue default value if not found @return float value if COSNumber, string name if COSName, otherwise default value
1795 Retrieves a number or an array of numbers from the dictionary. @param name key for the attribute in the COSDictionary @param defaultValue default value to return if not found @return float or array of floats, or null if unspecified and no default provided
1796 Retrieves color gamma values by name. @param name attribute key for color gamma @return PDGamma object or null if not found
1797 Creates a unique key for PDF resources. @param kind type of resource dictionary @param prefix base string for the key @return COSName object representing the unique key
1798 Retrieves a name or array of names from the dictionary. @param name key for the attribute to retrieve @param defaultValue default value if attribute is not found @return String or String[] based on the type of the retrieved object
1799 Retrieves appearance sub-dictionary streams. @return Map of COSName to PDAppearanceStream objects @throws IllegalStateException if entry is not a sub-dictionary
1800 Retrieves a destination by name from the PDF document. @param name the named destination key @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1801 Retrieves the destination associated with this action. @return a PDDestination object or null if not found @throws IOException if the destination cannot be created
1802 Retrieves the destination associated with the action. @return the PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1803 Retrieves the destination associated with this link annotation. @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1804 Retrieves the destination associated with this outline item. @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1805 Creates a PDXObject from a COSBase and resources. @param base the underlying COSBase object @param resources PDResources for managing resources @return PDXObject instance or throws IOException if invalid type
1806 Removes a subject from the certificate's subject list. @param subject byte array representing the subject to remove
1807 Retrieves an array of strings from the COSDictionary by key. @param name the PDF attribute name as a string @return array of strings or null if not found
1808 Retrieves attribute value by name with default handling. @param attrName the attribute name as a string @param defaultValue the default COSBase value to return if attribute is absent @return the retrieved COSBase object or default value if not found
1809 Retrieves the location associated with the digital signature. @return Location string or null if not found
1810 Retrieves the reason for the digital signature. @return Reason string or null if not found
1811 Retrieves contact information from the digital signature. @return Contact info string or null if not found
1812 Retrieves the title of the outline item. @return Title string or null if not found
1813 Retrieves the partial name of the field. @return Partial name as a string or null if not found
1814 Retrieves the alternate field name. @return Alternate field name as a string or null if not found
1815 Checks if an attribute is specified by key. @param name the attribute key as a string @return true if the attribute exists, false otherwise
1816 Retrieves the mapping name of the field. @return Mapping name as a string or null if not found
1817 Retrieves the scale ratio from the PDF dictionary. @return Scale ratio as a string or null if not found
1818 Retrieves and converts the role map from the COSDictionary. @return Map containing role mappings or an empty map if none found
1819 Retrieves values for the choice field. @return List of selected option strings
1820 Retrieves default values of the choice field. @return List of string representations of default values
1821 Retrieves an object from a PDF structure using a path. @param objPath path to the object in string format @return COSBase object or null if not found
1822 Retrieves attribute value by name. @param attrName name of the attribute @return COSBase object or null if not found
1823 Retrieves default style string from the PDF object. @return Default style string or null if not found
1824 Retrieves all form fields from the FDF document. @return List of FDFField objects or null if no fields are present
1825 Removes a specified key usage extension from the certificate. @param keyUsageExtension the key usage extension to remove
1826 Removes an OID from the certificate's OID list. @param oid byte array representing the OID to remove
1827 Retrieves the Unicode name of the file. @return Unicode string representing the file name or null if not found
1828 Retrieves the prefix used in page labels. @return Prefix string or null if not found
1829 Retrieves the producer of the PDF document. @return Producer string or null if not found
1830 Retrieves the creator of the PDF document. @return Creator string or null if not found
1831 Retrieves keywords from the PDF document metadata. @return String containing keywords or null if not found
1832 Retrieves the subject of the PDF document. @return Subject string or null if not found
1833 Retrieves the author of the PDF document. @return Author name as a string or null if not found
1834 Retrieves the title of the PDF document. @return Title as a string or null if not set
1835 Retrieves the language of the PDF document. @return Language code as string or null if not specified
1836 Retrieves string value by key or returns default if not found. @param key the key for the desired string @param defaultValue value to return if key is not present @return String value associated with the key or default value
1837 Retrieves string value by key from the dictionary. @param key the key for the desired string @return String value or null if not found
1838 Retrieves duplex printing preference. @return Duplex setting as string or null if not found
1839 Retrieves the name of the viewport. @return Name as a string or null if not found
1840 Returns the field type of the PDF form field. @return String representing the field type or null if not found
1841 Retrieves the subfilter type of the digital signature. @return Subfilter as a string or null if not found
1842 Retrieves the filter name used in the signature. @return String representing the filter or null if not found
1843 Retrieves the URL type from the certificate. @return URL type as a string or null if not found
1844 Retrieves the base font name from the font dictionary. @return The base font name as a string or null if not found
1845 Retrieves the base font name. @return Base font name as a string or null if not found
1846 Retrieves the base font name. @return Base font name as a string or null if not found
1847 Checks if the DeviceN color space has NChannel subtype. @return true if NChannel, false otherwise
1848 Retrieves the type of the PDF action. @return Type of the action as a string or null if not found
1849 Retrieves the file name from the PDF specification. @return File name as a string or null if not found
1850 Retrieves the subtype of the PDF action. @return Subtype as a string or null if not found
1851 Retrieves the subtype of the annotation. @return subtype as a string or null if not found
1852 Retrieves the caption positioning of the line annotation. @return String representing the caption position or null if not found
1853 Retrieves the intent of the annotation. @return String representing the annotation's purpose or null if not found
1854 Retrieves the subtype of the external data dictionary. @return Subtype as a String or null if not found
1855 Retrieves the name of the digital signature property. @return String representation of the name or null if not found
1856 Retrieves the filter name from the digital signature. @return Filter name as a string or null if not found
1857 Creates a PDAction instance based on the given COSDictionary. @param action COSDictionary containing action details @return PDAction object or null if unsupported type
1858 Retrieves DOS file specification. @return DOS specification as a string or null if not found
1859 Retrieves the MAC (Media Access Control) address from file specification. @return MAC address as a string or null if not found
1860 Retrieves the Unix file specification. @return Unix file path as a string or null if not found
1861 Retrieves default appearance string of the annotation. @return Appearance settings as a string or null if not found
1862 Retrieves the default style of the annotation. @return String representing the default style or null if not found
1863 Retrieves the caption style of the line annotation. @return String representing the caption style or null if not found
1864 Retrieves the state of the annotation. @return current state as a string or null if not set
1865 Retrieves the state model of the annotation. @return State model as a string or null if not found
1866 Retrieves the status of the FDF document. @return Status string or null if not found
1867 Retrieves the rotation angle of the annotation. @return Rotation angle as a string or null if not set
1868 Retrieves the target URL from the FDF document. @return Target URL as a string or null if not found
1869 Retrieves the name of the named page reference. @return The name as a string or null if not found
1870 Retrieves the font family name from the PDF descriptor. @return Font family name as a string or null if not found
1871 Retrieves the character set of the font. @return String representing the character set or null if not found
1872 Retrieves the lower limit from the node's limits array. @return String representation of the lower limit or null if not found
1873 Retrieves the upper limit from the LIMITS array. @return String representation of the upper limit or null if not found
1874 Retrieves the partial name of the form field. @return Partial field name as a string or null if not found
1875 Removes an issuer from the certificate's issuer list. @param issuer byte array representing the issuer to remove
1876 Retrieves the annotation symbol. @return Symbol string or null if not found
1877 Retrieves the title of the annotation. @return Title string or null if not found
1878 Retrieves the file description. @return Description of the file as a string or null if not found
1879 Retrieves the element identifier. @return Identifier string or null if not found
1880 Retrieves the title of the PDF structure element. @return Title as a string or null if not found
1881 Retrieves language attribute of the PDF element. @return Language string or null if not specified
1882 Retrieves alternate description of the element. @return Alternate description as a string or null if not found
1883 Retrieves the expanded form of the element. @return Expanded form as string or null if not found
1884 Retrieves the subject of the annotation. @return Subject string or null if not found
1885 Retrieves the actual text associated with the element. @return String representing the actual text or null if not found
1886 Retrieves the actual text of the marked content. @return Actual text as a String or null if not found
1887 Retrieves alternate description of marked content. @return Alternate description as a string or null if not available
1888 Retrieves the expanded form of marked content. @return Expanded form as a string or null if not available
1889 Retrieves the date of the annotation. @return Date string or null if not found
1890 Retrieves the name of the annotation. @return Name as string or null if not found
1891 Retrieves the contents of the annotation. @return The string content of the annotation or null if not found
1892 Retrieves the formatted value of the property. @return Formatted string value or null if not found
1893 Retrieves the ID array from the FDF document. @return COSArray containing the ID or null if not found
1894 Retrieves the vertical offset of the line annotation caption. @return float value representing the vertical offset or 0 if not set
1895 Retrieves the interior color of the annotation. @return Color object representing the interior color or null if not set
1896 Retrieves the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not found
1897 Retrieves the ID tree node. @return PDNameTreeNode representing the ID tree or null if not found
1898 Retrieves the associated PDF page. @return PDPage object or null if not found
1899 Retrieves the associated PDPage. @return PDPage object or null if not found
1900 Retrieves the page associated with the marked content reference. @return PDPage object or null if not found
1901 Retrieves resource names of a specified type. @param kind the type of resource dictionary @return iterable set of resource names or empty set if not found
1902 Retrieves a resource object by type and name. @param kind the category of the resource (e.g., font, color) @param name the specific resource identifier @return COSBase object or null if not found
1903 Retrieves an indirect COSObject resource. @param kind type of resource dictionary @param name unique identifier for the resource @return COSObject if found, otherwise null
1904 Retrieves the transition effect for the page. @return PDTransition object or null if no transition is defined
1905 Retrieves the JavaScript dictionary from the document. @return PDJavascriptNameTreeNode object or null if not found
1906 Retrieves the embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not found
1907 Retrieves the destination names dictionary from the PDF document. @return PDDestinationNameTreeNode object or null if not found
1908 Retrieves optional content properties from the PDF document. @return PDOptionalContentProperties object or null if not found
1909 Retrieves the structure tree root of the PDF document. @return PDStructureTreeRoot object or null if not found
1910 Retrieves URI dictionary from the document's catalog. @return PDURIDictionary object or null if not found
1911 Retrieves the mark info dictionary from the PDF document's catalog. @return PDMarkInfo object or null if not found
1912 Retrieves and maps class attributes from the COSDictionary. @return Map containing class names and their corresponding PDAttributeObject or List of PDAttributeObjects
1913 Retrieves the document's destination dictionary. @return PDDocumentNameDestinationDictionary object or null if not found
1914 Retrieves the encryption filter dictionary by name. @param cryptFilterName the name of the encryption filter @return PDCryptFilterDictionary object or null if not found
1915 Retrieves border effect settings of the annotation. @return PDBorderEffectDictionary object or null if not found
1916 Retrieves the target directory from the current dictionary. @return PDTargetDirectory object or null if not found
1917 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not found
1918 Retrieves the target directory for this action. @return PDTargetDirectory object or null if not found
1919 Retrieves the resources associated with the tiling pattern. @return PDResources object or null if no resources are found
1920 Retrieves the extended graphics state for this shading pattern. @return PDExtendedGraphicsState object or null if not found
1921 Retrieves the render state for a given destination. @param destination target rendering destination (PRINT, VIEW) @return RenderState object or null if not found
1922 Retrieves the DeviceN process from the attributes. @return PDDeviceNProcess object or null if not found
1923 Retrieves character procedures dictionary. @return COSDictionary containing character procedures or null if not found
1924 Retrieves font resources. @return PDResources object or null if not found
1925 Retrieves the PDPanose object from font descriptor. @return PDPanose instance or null if not available
1926 Retrieves CID system information from the font dictionary. @return PDCIDSystemInfo object or null if not found
1927 Retrieves the template reference from the FDF document. @return FDFNamedPageReference object or null if not found
1928 Retrieves additional actions for the field. @return PDAdditionalActions object or null if not found
1929 Retrieves icon fit settings for the field. @return FDFIconFit object or null if not found
1930 Retrieves the appearance stream reference for a form field. @return FDFNamedPageReference object or null if not found
1931 Retrieves the appearance dictionary for the field. @return PDAppearanceDictionary object or null if not found
1932 Retrieves JavaScript associated with the FDF document. @return FDFJavaScript object or null if not found
1933 Retrieves digital signature from the FDF catalog. @return PDSignature object or null if not found
1934 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
1935 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not found
1936 Retrieves the viewer preferences of the PDF document. @return PDViewerPreferences object or null if not found
1937 Retrieves or creates the AcroForm associated with the document. Applies fixes if provided and caches the result for efficiency. @param acroFormFixup optional fixup to apply to the AcroForm @return PDAcroForm object or null if not found
1938 Parses a COS dictionary from the PDF source. @param isDirect indicates if the dictionary is direct @return parsed COSDictionary object @throws IOException if parsing fails
1939 Retrieves the blend mode from the graphics state dictionary. @return the BlendMode instance or NORMAL if not found
1940 Retrieves the end color (fourth color). @return PDGamma object representing the end color or null if not applicable
1941 Retrieves the start color. @return PDGamma object representing the start color or null if not applicable
1942 Retrieves the second color from the collection. @return PDGamma object representing the second color or null if not applicable
1943 Retrieves the first color in the collection. @return PDGamma object representing the first color or null if not applicable
1944 Reads and processes a vertex from the input stream. @param input ImageInputStream to read data from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis range for interpolation @param rangeY Y-axis range for interpolation @param colRangeTab array of PDRange for each color component @param matrix transformation matrix @param xform additional affine transform @return Vertex object with position and interpolated color components @throws IOException if reading fails or parameters are invalid
1945 Reads and processes a patch from the input stream. @param input stream containing patch data @param isFree flag indicating if edge points are implicit @param implicitEdge array of implicit edge points @param implicitCornerColor array of implicit corner colors @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis range for interpolation @param rangeY Y-axis range for interpolation @param colRange color component ranges @param matrix transformation matrix @param xform additional affine transform @param controlPoints number of control points in the patch @return Patch object or null if EOF occurs
1946 Evaluates a Function Type 4 PDF function. @param input float array of input values @return float array of evaluated output values @throws IOException if an I/O error occurs during evaluation
1947 Returns a string representation of the PDRange. @return formatted string with min and max values
1948 Constructs a PDLineDashPattern from a COSArray and phase. @param array COSArray containing dash lengths @param phase starting point of the dash pattern
1949 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
1950 Creates a Matrix from a COSBase object. Initializes matrix elements using values from the array if valid. @param base COSBase object containing transformation parameters @return Matrix instance or default identity matrix if input is invalid
1951 Retrieves a nested dictionary by primary or secondary key. @param firstKey the primary key for the desired dictionary @param secondKey the secondary key if primary is not found @return COSDictionary object or null if keys are invalid or not a dictionary
1952 Retrieves a boolean value from the dictionary by primary or secondary key. @param firstKey the primary key for the desired object @param secondKey the secondary key if primary is not found @param defaultValue default boolean value if keys are invalid @return boolean value associated with the keys or default value
1953 Retrieves an integer value from the dictionary by primary or secondary key. @param firstKey the primary key for the desired object @param secondKey the secondary key if primary is not found @param defaultValue default integer value to return if no valid number is found @return the integer value or defaultValue if both keys are invalid
1954 Performs initial parsing of the FDF document. Retrieves and validates the root dictionary from the trailer. @throws IOException if root object is missing or other I/O errors occur
1955 Retrieves the encryption dictionary from the document's trailer. @return COSDictionary containing encryption settings or null if not encrypted
1956 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
1957 Retrieves the appearance state of the annotation. @return COSName object representing the appearance state or null if not found
1958 Retrieves the relationship type of the target directory. @return COSName representing the relationship or null if not found
1959 Retrieves the subtype of the soft mask. @return COSName representing the subtype or null if not found
1960 Converts a character code to its Unicode representation. Uses ToUnicode CMap if available; otherwise returns null. @param code character code to convert @return Unicode string or null if conversion fails
1961 Retrieves the string filter name for encryption. @return COSName representing the string filter or IDENTITY if not set
1962 Retrieves the stream filter name for encryption. @return COSName of the stream filter or IDENTITY if not set
1963 Retrieves the appearance dictionary of the annotation. @return PDAppearanceDictionary object or null if not found
1964 Retrieves the cryptographic filter method. @return COSName representing the encryption method or null if not found
1965 Retrieves the coordinates of the text markup annotation. @return float[] containing quad points or null if not found
1966 Retrieves the color space from the shading dictionary. @return PDColorSpace instance or throws IOException if creation fails
1967 Retrieves the list of filter names used for image compression. @return List of filter names or empty if no filters are defined
1968 Determines if a given COSDictionary represents a page tree node. @param node the dictionary to check @return true if the node is a page tree node, false otherwise
1969 Retrieves the page associated with this annotation. @return PDPage object or null if not found
1970 Retrieves page information from the FDF document. @return FDFPageInfo object containing page info or null if not found
1971 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
1972 Retrieves the document ID from the PDF trailer. @return COSArray containing document ID or null if not found
1973 Retrieves the alternate icon of the annotation. @return PDFormXObject representing the alternate icon or null if not found
1974 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
1975 Retrieves the normal icon for the annotation. @return PDFormXObject representing the normal icon or null if not found
1976 Retrieves the sound stream associated with the action. @return COSStream object representing the sound or null if not found
1977 Retrieves CID set stream from font descriptor dictionary. @return PDStream object or null if not found
1978 Retrieves all output intents from the PDF document. @return List of PDOutputIntent objects representing output intents
1979 Retrieves the ending style of the start point line. @return String representation of the ending style or default if not found
1980 Retrieves font file 2 stream. @return PDStream object for font file 2 or null if not found
1981 Retrieves the ending style of the line annotation. @return the ending style as a string or default if not set
1982 Retrieves the interior color of the line annotation. @return Color object representing the interior color or null if not set
1983 Retrieves the font file stream from the font dictionary. @return PDStream object containing font data or null if not found
1984 Retrieves the differences stream from the FDF document. @return COSStream object representing differences or null if not found
1985 Retrieves metadata from the PDF page. @return PDMetadata object or null if no metadata is present
1986 Retrieves metadata from the PDF document. @return PDMetadata object or null if not present
1987 Retrieves the associated page of this bead. @return PDPage object or null if not found
1988 Retrieves the font file stream for subtype 'FontFile3'. @return PDStream object containing the font data or null if not found
1989 Retrieves thread beads from the page. @return List of PDThreadBead objects representing thread beads on the page
1990 Retrieves viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if none found
1991 Retrieves child nodes of the current node. @return List of PDNameTreeNode objects representing children or null if none exist
1992 Retrieves the bounds array for the function. @return COSArray representing the bounds or null if not found
1993 Retrieves the array of child functions. @return COSArray containing function objects or null if not found
1994 Retrieves or creates decode values for the function. Uses cached value if available, otherwise fetches from PDF object. @return COSArray containing decode values
1995 Retrieves or creates the Size array for the function. @return COSArray representing the size of the function domain
1996 Retrieves the domain values of the PDF function. @return COSArray containing domain values or null if not set
1997 Retrieves the range values of the function. @return COSArray containing range values or null if not found
1998 Retrieves the lower limit from the node's limits array. @return the lower limit as an Integer, or null if not found
1999 Retrieves the upper limit from the node's limits array. @return the upper limit as an Integer, or null if not found
2000 Retrieves owner user properties from the document. @return List of PDUserProperty objects representing owner properties
2001 Checks if the specified edge is attached. @param edge name of the edge to check @return true if the edge is attached, false otherwise
2002 Retrieves the color of the annotation. @return Color object representing the annotation's color or null if not set
2003 Retrieves the interior color of the annotation. @return Color object representing the interior color or null if not set
2004 Retrieves callout coordinates for the annotation. @return float array of coordinates or null if not available
2005 Retrieves the ink list from an annotation. @return List of float arrays representing ink data or null if not found
2006 Retrieves numbers from the node as a map. @return unmodifiable map of integer keys to COSObjectable values or null if not found @throws IOException if conversion fails
2007 Retrieves line coordinates from the annotation. @return float[] representing line coordinates or null if not found
2008 Retrieves child nodes of the current node. @return List of PDNumberTreeNode objects representing child nodes or null if none exist
2009 Retrieves a map of names and their corresponding values. @return unmodifiable map with string keys and T values or null if no names array exists
2010 Retrieves the encoding array for the function. @return COSArray representing the encoding or null if not found
2011 Retrieves the horizontal offset of the caption for the line annotation. @return float value representing the horizontal offset or 0 if not set
2012 Retrieves the previous bead in the thread. @return PDThreadBead object representing the previous bead or null if not found
2013 Retrieves the structure element associated with this outline item. @return PDStructureElement object or null if not found
2014 Retrieves default resources for the form. @return PDResources object or null if not found
2015 Checks if the outline node has child items. @return true if there are child items, false otherwise
2016 Retrieves the vertical offset of the caption for the line annotation. @return float value representing the vertical offset, defaults to 0 if not set
2017 Retrieves property build information from the signature dictionary. @return PDPropBuild object or null if not found
2018 Retrieves timestamp information from the seed value. @return PDSeedValueTimeStamp object or null if not found
2019 Retrieves the seed value certificate from the PDF document. @return PDSeedValueCertificate object or null if not found
2020 Retrieves the MDP seed value. @return PDSeedValueMDP object or null if not found
2021 Retrieves application-specific properties from the PDF. @return PDPropBuildDataDict object containing app properties or null if not found
2022 Retrieves publication security properties from the PDF document. @return PDPropBuildDataDict object containing publication security details or null if not found
2023 Retrieves the filter properties from the digital signature. @return PDPropBuildDataDict object containing filter details or null if not found
2024 Retrieves the border effect dictionary of the polygon annotation. @return PDBorderEffectDictionary object or null if not found
2025 Retrieves the normal appearance of an annotation. @return PDAppearanceEntry object or null if not found
2026 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
2027 Retrieves additional actions associated with the annotation. @return PDAnnotationAdditionalActions object or null if not found
2028 Retrieves appearance characteristics of the annotation. @return PDAppearanceCharacteristicsDictionary object or null if not found
2029 Retrieves the interior color of the annotation. @return Color object representing the interior color or null if not set
2030 Writes a PDF content object to the output stream. Handles various COS types and manages compression using the pool. @param output target OutputStream for writing @param object COSBase object to write @param topLevel indicates if the object is at the top level @throws IOException if an I/O error occurs
2031 Retrieves the signature value. @return PDSignature object or null if not found
2032 Retrieves the next bead in the thread. @return PDThreadBead object representing the next bead or null if not found
2033 Retrieves the thread associated with the bead. @return PDThread object or null if not found
2034 Retrieves the previous URI action. @return PDActionURI object or null if not found
2035 Retrieves polygon vertices as a float array. @return Array of vertex coordinates or null if not found
2036 Retrieves the interior color of the polygon annotation. @return Color object representing the interior color or null if not set
2037 Retrieves vertex coordinates of the polyline. @return float[] containing vertex points or null if not found
2038 Retrieves external data dictionary of the annotation. @return PDExternalDataDictionary object or null if not found
2039 Retrieves additional actions for the form field. @return PDFormFieldAdditionalActions object or null if none exist
2040 Retrieves the first bead associated with the thread. @return PDThreadBead object or null if not found
2041 Retrieves the measurement dictionary from the viewport. @return PDMeasureDictionary object or null if not found
2042 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
2043 Retrieves the ending style of the polyline's start point. @return name of the line ending style or default if not found
2044 Retrieves the ending style of the polyline annotation's endpoint. @return String representing the endpoint style or LE_NONE if not found
2045 Retrieves the seed value from the signature field. @return PDSeedValue object or null if not found
2046 Retrieves the default signature value. @return PDSignature object representing the default signature or null if not set
2047 Retrieves document information associated with the thread. @return PDDocumentInformation object or null if not found
2048 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
2049 Retrieves the bounding box of the tiling pattern. @return PDRectangle object representing the bounding box or null if not found
2050 Retrieves the bounding box of the shading. @return PDRectangle object representing the bounding box or null if not defined
2051 Retrieves the fringe dimensions of the annotation. @return PDRectangle object representing fringe or null if not set
2052 Retrieves the bounding box of the form XObject. @return PDRectangle object representing the bounding box or null if not set
2053 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not set
2054 Retrieves the font bounding box. @return PDRectangle representing the font's bounding box or null if not found
2055 Retrieves the font bounding box. @return PDRectangle object representing the font's bounding box or null if not found
2056 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe or null if not found
2057 Resolves the bounding box for a form field's appearance. @param fieldWidget widget representing the form field @param appearanceStream stream defining the visual appearance @return PDRectangle instance, using appearance's bbox or field widget's rectangle if bbox is null
2058 Constructs a new FDFDocument with default settings. Initializes a COSDocument and sets up basic properties like version and trailer.
2059 Retrieves the annotation's bounding rectangle. @return PDRectangle object or null if invalid data
2060 Sets the bounding box for the layout attribute. @param bbox PDRectangle object defining the new bounding box
2061 Sets a color attribute by name. @param name the attribute name as a string @param value PDGamma object representing the color
2062 Sets four color values for a specified attribute. @param name attribute key as a string @param value PDFourColours object containing color data
2063 Constructs a new PDF page with default Letter size.
2064 Retrieves or creates the FDF dictionary from the catalog. @return FDFDictionary object representing the catalog's FDF data
2065 Adds or retrieves a resource in the PDF document. @param kind type of resource (e.g., font, color space) @param prefix base string for the key @param object data to store as the resource @return COSName key representing the resource
2066 Adds or updates a font resource in the PDF document. @param name unique identifier for the font resource @param font PDFont object representing the font to be added
2067 Adds or updates a color space resource in the PDF document. @param name unique identifier for the color space @param colorSpace color space data to store as the resource
2068 Adds or updates an extended graphics state resource. @param name unique identifier for the graphics state @param extGState the extended graphics state to store
2069 Adds or updates a shading resource in the PDF document. @param name unique identifier for the shading resource @param shading PDShading object to store as the resource
2070 Adds or updates a pattern resource in the PDF document. @param name unique identifier for the pattern resource @param pattern PDAbstractPattern object to store as the resource
2071 Adds or updates a property list resource. @param name unique identifier for the resource @param properties property list data to store as the resource
2072 Adds or updates an XObject resource. @param name unique identifier for the XObject @param xobject the XObject to store as a resource
2073 Retrieves the bounding box of the marked content. @return PDRectangle representing the bounding box or null if not found
2074 Retrieves the bounding box for the layout attribute. @return PDRectangle object or null if not found
2075 Retrieves the rectangle bounds of the annotation. @return PDRectangle object representing the annotation's bounds or null if not found
2076 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not present
2077 Sets the fractional display style for numerical values. @param fractionalDisplay display style ("D", "F", "R", "T", or null) @throws IllegalArgumentException if value is invalid
2078 Retrieves the rectangle difference for the annotation. @return PDRectangle object or null if not found
2079 Retrieves COSObjects of specified types from the document. @param type1 first dictionary type to match @param type2 second optional dictionary type to match @return list of matching COSObjects
2080 Retrieves the bounding box of the viewport. @return PDRectangle object representing the bounding box or null if not found
2081 Initializes a PDInlineImage with given parameters, data, and resources. Decodes image data using specified filters if applicable. @param parameters COSDictionary containing image settings @param data raw image byte array @param resources PDF resources for the image @throws IOException if decoding fails or invalid filter is used
2082 Determines the file suffix based on image filters. @return Suffix like "jpg", "tiff", or "png"
2083 Converts character code to Unicode using a custom glyph list. @param code character code to convert @param customGlyphList optional custom glyph list for conversion @return Unicode string or null if conversion fails
2084 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
2085 Parses an FDF document and returns it as an FDFDocument object. Handles I/O errors and ensures resources are closed properly. @return FDFDocument parsed from the input source @throws IOException if parsing fails or I/O error occurs
2086 Retrieves or creates the AcroForm with default fixes applied. @return PDAcroForm object or null if not found
2087 Retrieves a PDColorSpace by name. @param name the unique identifier for the color space @param wasDefault indicates if the color space is default @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
2088 Checks if a color space resource exists by name. @param name the specific color space identifier @return true if the color space is present, false otherwise
2089 Retrieves an extended graphics state by name. @param name the unique identifier for the graphics state @return PDExtendedGraphicsState object or null if not found
2090 Checks if a resource is an image XObject. @param name the resource identifier @return true if the resource is an image, false otherwise
2091 Retrieves color space resource names. @return iterable set of color space names or empty set if not found
2092 Retrieves names of XObjects in the PDF document. @return iterable set of XObject names or empty set if none found
2093 Retrieves property names from the PDF resources. @return iterable set of property names or empty set if not found
2094 Retrieves an integer value from the dictionary by primary or secondary key. @param firstKey the primary key for the desired object @param secondKey the secondary key if primary is not found @return the integer value or -1 if both keys are invalid
2095 Retrieves an integer value from the dictionary by key. @param key primary key for the desired object @param defaultValue default integer value to return if no valid number is found @return the integer value or defaultValue if key is invalid
2096 Retrieves the rectangle associated with the bead. @return PDRectangle object or null if not found
2097 Sets the line dash pattern for drawing operations. @param array COSArray containing dash lengths @param phase starting point of the dash pattern
2098 Retrieves the line dash pattern from the graphics state. @return PDLineDashPattern object or null if not found
2099 Creates a stencil image from PDImage with specified paint. @param pdImage the source PDF image @param paint the paint style for the mask @return BufferedImage representing the stencil image @throws IOException if an error occurs during processing
2100 Sets the embedded file's Unicode dictionary entry. @param file PDEmbeddedFile to be set as unicode version
2101 Sets an embedded file in the PDF specification. @param file PDEmbeddedFile to be set or null to remove it
2102 Retrieves the transformation matrix of the form XObject. @return Matrix instance representing the transformation or identity matrix if not set
2103 Retrieves the transformation matrix of the pattern. @return Matrix instance representing the pattern's transformation
2104 Retrieves the transformation matrix for the shading. @return Matrix instance representing the transformation or identity if not found
2105 Retrieves inheritable attribute from a PDF page node. @param node the current COSDictionary node @param key the attribute key to retrieve @return COSBase value or null if not found
2106 Retrieves a boolean value from the dictionary by key. @param key the primary key for the desired object @param defaultValue default boolean value if key is invalid @return boolean value associated with the key or default value
2107 Retrieves the rectangle difference for the annotation. @return PDRectangle object representing the difference or null if not set
2108 Initializes a new PDTransition with the default style.
2109 Sets the B component range for LAB color space. @param range PDRange object defining min and max values for B component
2110 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary dictionary containing crypt filter settings
2111 Sets the default cryptographic filter dictionary for encryption. @param defaultFilterDictionary dictionary containing default crypt settings
2112 Decrypts a PDF dictionary. @param dictionary the COSDictionary to decrypt @param objNum object number @param genNum generation number @throws IOException if decryption fails
2113 Sets the units of measurement. @param units string representing the units to be used
2114 Sets a date in the dictionary using a string key. @param key unique identifier for the item @param date Calendar instance to store in the dictionary
2115 Sets a date in an embedded dictionary. @param embedded name of the embedded dictionary @param key unique identifier for the date entry @param date Calendar instance to store
2116 Retrieves an optional content group by name. @param name the name of the OCG to find @return PDOptionalContentGroup object or null if not found
2117 Adds key usage flags to the certificate. Constructs a key usage string from boolean flags and adds it. @param digitalSignature, nonRepudiation, etc. - boolean flags for key usages
2118 Initializes a new rectilinear measurement dictionary. Sets the subtype to define its type specifically.
2119 Retrieves the parent outline node. @return PDOutlineNode or PDDocumentOutline object representing the parent, or null if none exists
2120 Retrieves the document outline. @return PDDocumentOutline object or null if not found
2121 Initializes a new PDF action with default type. Constructs a COSDictionary and sets the action type.
2122 Initializes a new PDF shading pattern. Sets the pattern type to shading.
2123 Initializes a PDF structure tree root node.
2124 Retrieves all optional content groups from the PDF document. @return Collection of PDOptionalContentGroup objects representing OCGs
2125 Initializes a PDF structure element with type and parent. @param structureType the type identifier for the structure element @param parent the parent node of the structure element
2126 Sets the 'Base' URI string in the dictionary. @param base the base URI to be stored in the COSDictionary
2127 Sets a string attribute in the dictionary. @param name key for the attribute @param value string to set
2128 Sets custom metadata value in PDF document. @param fieldName unique identifier for the metadata field @param fieldValue value to be stored in the metadata field
2129 Sets the signing date of the digital signature. @param cal Calendar instance representing the signing date
2130 Retrieves shading resource names. @return iterable set of shading resource names or empty set if none found
2131 Sets the creation date of the annotation. @param creationDate Calendar instance representing the creation date
2132 Sets the formatted value of the user property. @param formattedValue new formatted string value to set
2133 Sets the application version in the digital signature properties. @param applicationVersion version string of the application
2134 Parses a PDF document with specified leniency. @param lenient true to enable lenient parsing @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing
2135 Sets the modified date of the annotation. @param c Calendar instance representing the new modification date
2136 Sets the creation date of the annotation. @param date Calendar instance representing the creation date
2137 Sets the modification date of the PDF document. @param date Calendar instance representing the new modification date
2138 Sets the creation date of the PDF document. @param date Calendar instance representing the creation date
2139 Sets the name of the user property and notifies if changed. @param name new name for the user property
2140 Initializes page labels for a PDF document. @param document the PDDocument to manage labels for
2141 Sets the name of the named action. @param name the name to be associated with the action
2142 Sets the right coordinate of the rectangle. @param x right coordinate value
2143 Sets the top coordinate of the rectangle. @param y top coordinate value
2144 Initializes a destination to fit page width. Sets up internal array and specifies type.
2145 Sets the top position of the destination. @param y vertical coordinate or -1 to clear
2146 Sets the bounding box fitting for the page. @param fitBoundingBox flag to enable or disable bounding box fitting
2147 Initializes a new PDPageXYZDestination with default settings. Expands the internal array to size 5 and sets the type at index 1.
2148 Sets the left coordinate for the PDF page destination. @param x left coordinate value or -1 to clear
2149 Sets the top coordinate of the destination. @param y vertical position; -1 to clear the setting
2150 Sets the bottom coordinate of the rectangle. @param y bottom coordinate value
2151 Sets the zoom level for the PDF destination. @param zoom the zoom factor to apply; -1 indicates default zoom
2152 Retrieves decode parameters from the PDF stream. @return list of decoded parameters or null if not found
2153 Retrieves file decode parameters from the PDF stream. @return list of decoded parameters or null if not found
2154 Retrieves the FDF catalog from the document. Initializes a new catalog if none exists. @return FDFCatalog object representing the document's catalog
2155 Sets the A component range for LAB color. @param range PDRange object defining min and max values for A component
2156 Retrieves or creates the fractional space allocation for an icon. @return PDRange object representing the space allocation
2157 Sets the style of the border effect. @param s string representing the style (e.g., solid, dashed)
2158 Sets the left coordinate of the rectangle. @param x left coordinate value or -1 to clear
2159 Sets whether the destination fits the bounding box. @param fitBoundingBox flag to enable or disable bounding box fitting
2160 Sets the rendering intent in the PDF graphics state. @param ri rendering intent value as a string
2161 Sets and updates a PDF dictionary entry. @param name key for the dictionary entry @param value string value to set in the dictionary
2162 Appends a bead to the current thread. @param append PDThreadBead object to be appended
2163 Initializes a PDThreadBead with default settings. Sets up a new COSDictionary and configures it as a bead type. Links the bead to itself for next and previous references.
2164 Sets the first bead in the thread. @param bead the PDThreadBead object to set as the first bead
2165 Inserts a new sibling after the current outline item. @param newSibling the new PDOutlineItem to insert
2166 Inserts a sibling before the current outline item. @param newSibling the new sibling to insert
2167 Initializes a PDF page destination to fit a rectangle. Expands the internal array and sets the type.
2168 Retrieves or creates the appearance dictionary for an annotation. Initializes a new dictionary if none exists. @return PDAppearanceDictionary object representing the annotation's appearance
2169 Constructs a new PDTilingPattern with default settings. Initializes resources and sets essential PDF properties.
2170 Initializes a new PDPageFitDestination with default settings. Sets up the destination to fit the page view based on bounding box.
2171 Sets whether the page view fits the bounding box. @param fitBoundingBox flag to enable or disable fitting to bounding box
2172 Initializes a destination to fit page height. Sets up the destination's array and type.
2173 Sets the left position of the destination. @param x coordinate value for the left position
2174 Retrieves pattern names from resources. @return iterable set of pattern names or empty set if none found
2175 Retrieves font names from PDF resources. @return iterable set of font resource names or empty set if none found
2176 Retrieves string value by key or returns default if not found. @param key the key for the desired string @param defaultValue value to return if key is not present @return String value associated with the key or default value
2177 Retrieves units from number format settings. @return String representing units or null if not found
2178 Retrieves the version of the digital signature. @return Version string or null if not found in the dictionary
2179 Retrieves the 'Base' string from the URI dictionary. @return Base URL string or null if not found
2180 Retrieves string value by attribute name. @param name the attribute key @return String value or null if not found
2181 Retrieves custom metadata value by field name. @param fieldName the key for the desired metadata field @return String value of the metadata or null if not found
2182 Retrieves string value of a specified property from PDF document metadata. @param propertyKey key for the desired property @return String value or null if not found
2183 Retrieves the action associated with this outline item. @return PDAction object or null if no action is defined
2184 Retrieves the action associated with this annotation. @return PDAction object or null if no action is defined
2185 Retrieves and creates a PDAction from the annotation's dictionary. @return PDAction object or null if not found
2186 Retrieves and creates an action for the "C" key. @return PDAction object or null if not found
2187 Retrieves the 'O' action associated with the PDF page. @return PDAction object or null if not found
2188 Retrieves and creates an action for the 'C' key. @return PDAction object or null if not found
2189 Retrieves the V action associated with the form field. @return PDAction object or null if not found
2190 Retrieves a string value from an embedded dictionary. @param embedded the key for the embedded dictionary @param key the key for the desired string within the embedded dictionary @param defaultValue value to return if key is not present @return String value associated with the key or default value
2191 Retrieves the F action associated with form fields. @return PDAction object or null if not found
2192 Retrieves operation type from parameters. @return operation type as string or default "open"
2193 Retrieves the file name using various specifications. @return File name as a string or null if not found
2194 Retrieves the normal appearance stream of an annotation. @return PDAppearanceStream object or null if not found
2195 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base font encoding @param differences array of encoding differences @throws IllegalArgumentException if base encoding is invalid
2196 Extracts and converts digital signature contents from a PDF file. @param pdfFile byte array of the PDF document @return byte array of converted signature content @throws IOException if an I/O error occurs
2197 Retrieves the contents of a digital signature from a PDF file. @param pdfFile input stream of the PDF document @return byte array containing the signature content @throws IOException if an I/O error occurs
2198 Retrieves the background color of the annotation. @return PDColor object representing the background color
2199 Retrieves the border color of the annotation. @return PDColor object representing the border color or null if not found
2200 Retrieves the color of the annotation. @return PDColor object representing the annotation's color or null if not found
2201 Constructs the fully qualified name of the field. @return Fully qualified name as a string
2202 Checks if a specific optional content group exists. @param groupName name of the group to check @return true if the group exists; false otherwise
2203 Retrieves default appearance string. @return Appearance string or empty if not set
2204 Retrieves the action associated with key 'K'. @return PDAction object or null if not found
2205 Retrieves and creates a PDAction for the DP entry in the PDF document catalog. @return PDAction object or null if not found
2206 Retrieves the action associated with the "WillPrint" event. @return PDAction object or null if no action is defined
2207 Checks if the character set matches between CID system info and font info. @param cidSystemInfo CID system information object @param info font information object @return true if character sets match, false otherwise
2208 Retrieves or creates the dash style for the border. @return PDLineDashPattern object representing the dash pattern
2209 Retrieves annotations from the FDF document. @return List of FDFAnnotation objects or null if no annotations found @throws IOException if an I/O error occurs during processing
2210 Retrieves the configured security handler. @return SecurityHandler instance or throws exception if not set @throws IOException if no security handler is available for the current filter
2211 Initializes PDF encryption with a given dictionary. @param dictionary containing encryption settings
2212 Creates an object from a COSBase node. Handles different types of COSBase, including dictionaries and integers. @param kid the COSBase node to process @return created object or null if unsupported type
2213 Retrieves the parent structure node. @return PDStructureNode object or null if no parent exists
2214 Checks if the attribute object has only an owner. @return true if size is 1 and owner exists, false otherwise
2215 Checks if the given offset points to a valid cross-reference table or stream. @param startXRefOffset starting offset of the xref in the PDF @return the valid offset or -1 if not found @throws IOException if an I/O error occurs
2216 Checks if the DeviceN color space has NChannel subtype. @return true if NChannel, false otherwise
2217 Retrieves the open action of a PDF document. @return PDDestinationOrAction object or null if not found @throws IOException if an error occurs during retrieval
2218 Retrieves the document save action. @return PDAction object for document save or null if not found
2219 Retrieves the web capture action from PDF document's catalog. @return PDAction object or null if not found
2220 Retrieves the action associated with the WC entry in the document's actions dictionary. @return PDAction object or null if not found
2221 Retrieves and creates a PDAction for the 'Print' action. @return PDAction object or null if not found
2222 Retrieves and creates a PDAction for the "PV" entry. @return PDAction object or null if not found
2223 Retrieves the page closing action associated with the annotation. @return PDAction object representing the page closing action or null if not found
2224 Retrieves the action associated with a page opening event. @return PDAction object or null if not defined
2225 Retrieves the on value for the checkbox. @return The COSName of the on state or an empty string if not found
2226 Retrieves the action associated with the "BL" key. @return PDAction object or null if not found
2227 Retrieves the "U" action associated with the annotation. @return PDAction object for the "U" action or null if not found
2228 Retrieves and creates an action for key 'D'. @return PDAction object or null if not found
2229 Retrieves and creates an action associated with the 'X' key. @return PDAction object or null if not found
2230 Retrieves the "E" action associated with PDF annotations. @return PDAction object or null if not found
2231 Retrieves the F action from the PDF document. @return PDAction object representing the F action or null if not found
2232 Retrieves JavaScript actions from the document. @return Map of named PDActionJavaScript objects or null if not found
2233 Retrieves an action associated with the field. @return PDAction object or null if not found
2234 Retrieves and creates a PDAction for the "FO" action. @return PDAction object or null if not found
2235 Retrieves the transparency group associated with the soft mask. Initializes resources and creates a PDXObject if necessary. @return PDTransparencyGroup instance or null if not found
2236 Finds the page destination for a given named destination. @param namedDest The named destination to find @return PDPageDestination object or null if not found @throws IOException if an error occurs during retrieval
2237 Initializes a new instance for rendering patterns in PDF documents. @param pattern the PDTilingPattern to be rendered @throws IOException if an I/O error occurs during initialization
2238 Constructs a new polyline annotation with default settings.
2239 Creates a new polygon annotation with default settings.
2240 Initializes a new line annotation with default properties. Sets the subtype to "Line" and initializes line coordinates to (0,0,0,0).
2241 Writes prepared COS objects to a PDF stream. @param stream the target COSStream for writing @return the updated COSStream with written objects @throws IOException if an I/O error occurs
2242 Writes a COSDictionary to the output stream. @param output target OutputStream for writing @param cosDictionary COSDictionary object to write @throws IOException if an I/O error occurs
2243 Initializes an ink annotation with default settings. Sets the subtype to "INK".
2244 Initializes a new file attachment annotation. Sets the subtype to "FileAttachment" in the COS object.
2245 Default constructor for FDFAnnotationUnderline. Initializes a new underline annotation with default settings.
2246 Initializes a new strikeout annotation with default settings.
2247 Default constructor for FDFAnnotationSquiggly. Initializes a new squiggly annotation with default settings.
2248 Constructs a new highlight annotation. Initializes the subtype to "Highlight".
2249 Removes a child node from the current structure. @param structureElement the child node to remove @return true if the node was successfully removed, false otherwise
2250 Initializes a new rubber stamp annotation. Sets the subtype to "RubberStamp" in the COS object.
2251 Constructs a new square or circle annotation with specified subtype. @param subType Subtype of the annotation ("Square" or "Circle")
2252 Initializes a new text annotation with default settings.
2253 Retrieves all annotation widgets associated with the field. @return List of PDAnnotationWidget objects representing the field's widgets
2254 Retrieves the associated popup annotation. @return PDAnnotationPopup object or null if none exists
2255 Constructs a PDAnnotationTextMarkup from a COSDictionary. Initializes the annotation's dictionary and ensures it has a valid TYPE entry. @param field the COSDictionary representing the markup annotation
2256 Constructs a PDAnnotationText from a COSDictionary. Initializes the text annotation's dictionary. @param field the COSDictionary representing the text annotation
2257 Constructs a PDAnnotationSquareCircle from a COSDictionary. @param dict the COSDictionary representing the square/circle annotation
2258 Constructs a PDAnnotationSound from a COSDictionary. Initializes the sound annotation with the provided dictionary. @param field the COSDictionary representing the sound annotation
2259 Inserts a PDStructureElement before a reference object. @param newKid the new child node to insert @param refKid the reference node before which to insert
2260 Constructs a PDAnnotationRubberStamp from a COSDictionary. Initializes the rubber stamp annotation with the provided dictionary. @param field the COSDictionary representing the annotation
2261 Constructs a PDAnnotationPolygon from a COSDictionary. Initializes the polygon annotation with the provided dictionary. @param dict the COSDictionary representing the polygon annotation
2262 Constructs a PDAnnotationLine from a COSDictionary. @param field the COSDictionary representing the line annotation
2263 Constructs a PDAnnotationInk from a COSDictionary. Initializes the annotation's dictionary and ensures it has a valid TYPE entry. @param dict the COSDictionary representing the ink annotation
2264 Constructs a PDAnnotationFreeText from a COSDictionary. @param field the COSDictionary representing the free text annotation
2265 Constructs a PDAnnotationFileAttachment from a COSDictionary. Initializes the annotation's dictionary and ensures it has a valid TYPE entry. @param field the COSDictionary representing the file attachment annotation
2266 Constructs a PDAnnotationCaret from a COSDictionary. Initializes the caret annotation with the provided dictionary. @param field the COSDictionary representing the annotation
2267 Initializes a new text markup annotation. @param subType the subtype of the annotation (e.g., "Highlight", "Underline")
2268 Constructs a PDAnnotationPolyline from a COSDictionary. Initializes the polyline annotation with the provided dictionary. @param dict the COSDictionary representing the polyline annotation
2269 Retrieves the print scaling preference. @return the print scaling setting as a string, defaulting to "AppDefault"
2270 Adds a child structure element to the current node. @param structureElement the child element to add, must not be null
2271 Retrieves file specification from action dictionary. @return PDFileSpecification instance or null if not found @throws IOException if the base object type is unknown
2272 Creates a PDImageXObject from a BufferedImage. @param document PDF document to add the image to @param image input BufferedImage containing image data @return PDImageXObject object ready for inclusion in PDF @throws IOException if I/O operations fail
2273 Constructs a PDPageTree with the given root dictionary. @param root COSDictionary representing the root of the page tree
2274 Retrieves the pages of the PDF document. @return PDPageTree representing the document's pages
2275 Validates the page tree in a PDF document. @param root the root dictionary of the PDF @throws IOException if the page tree is invalid or missing
2276 Retrieves or creates the Encode array for the function. Initializes with default values if not present. @return COSArray representing the encode values
2277 Initializes a Function Type 2 from a COSBase object. @param function the base PDF object representing the function
2278 Retrieves and processes attribute objects associated with the structure element. @return Revisions object containing PDAttributeObject instances
2279 Retrieves the value associated with a given name. @param name key to search for in the node's names or child nodes @return value of type T if found, otherwise null
2280 Searches for PDF trailer and populates provided COSDictionary. @param trailer dictionary to populate with trailer data @return true if trailer is found and populated, false otherwise
2281 Searches for and sets trailer items in a PDF document. @param trailer COSDictionary representing the PDF trailer @return true if root object is found, false otherwise
2282 Retrieves names of external graphics state resources. @return iterable set of COSName objects representing external graphics states
2283 Sets an attribute in the PDF document. @param attrName name of the attribute to set @param attrValue value to assign to the attribute
2284 Retrieves or creates a line dash pattern for guidelines. @return PDLineDashPattern object representing the dash pattern
2285 Retrieves file specification from action dictionary. @return PDFileSpecification instance or null if not found @throws IOException if an I/O error occurs
2286 Retrieves the file specification for the remote navigation action. @return PDFileSpecification instance or null if not found @throws IOException if an error occurs while creating the file specification
2287 Retrieves the file specification for the launch action. @return PDFileSpecification instance or null if not found @throws IOException if there's an issue with creating the file specification
2288 Retrieves the file specification from the action dictionary. @return PDFileSpecification instance or null if not found @throws IOException if an error occurs during retrieval
2289 Retrieves the file specification associated with this action. @return PDFileSpecification object representing the linked file, or null if not found @throws IOException if an error occurs during file specification creation
2290 Retrieves the file specification for the named page. @return PDFileSpecification instance or null if not found @throws IOException if an error occurs during retrieval
2291 Retrieves and returns a list of embedded FDF files. @return List of PDFileSpecification objects representing embedded FDFs @throws IOException if file specification creation fails
2292 Retrieves file specification for the attachment. @return PDFileSpecification instance or null if not found @throws IOException if the COS object type is unknown
2293 Retrieves the file specification associated with the FDF document. @return PDFileSpecification instance or null if not found @throws IOException if the base object type is unknown
2294 Retrieves the PDF version. Checks both document header and catalog for version information. Returns the maximum version found or the header version if catalog is not applicable. @return float representing the PDF version
2295 Sets the conversion factor in the COSDictionary. @param conversionFactor the conversion factor to be stored
2296 Sets the intensity of the border effect. @param i float value representing the intensity level
2297 Sets a number attribute in the PDF dictionary. @param name key for the attribute @param value float value to be set
2298 Retrieves file specification from the PDF stream. @return PDFileSpecification object or null if not found @throws IOException if an error occurs during retrieval
2299 Retrieves the print clipping option. @return the print clipping setting as a string, defaulting to CropBox if not specified
2300 Retrieves the view clip setting. @return string representation of the view clip or CropBox if not set
2301 Retrieves the next action or sequence of actions. @return List of PDAction objects representing subsequent actions
2302 Sets Mac resource fork data for the embedded file. @param macResFork resource fork data as a string
2303 Retrieves the minimum revision level. @return the minimum revision as a long value or -1 if not found
2304 Retrieves the revision number of the digital signature. @return the revision number as a long value
2305 Retrieves the signed content of a PDF file. @param pdfFile byte array representing the PDF file @return byte array containing the signed content @throws IOException if an I/O error occurs while processing
2306 Creates a view of the stream with applied filters. @return RandomAccessRead object for the stream @throws IOException if an error occurs during stream processing
2307 Retrieves the signed content of a PDF file. @param pdfFile input stream of the PDF document @return byte array containing the signed content @throws IOException if an I/O error occurs while processing
2308 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2309 Initializes a new ShadingContext for PDF rendering. @param shading PDShading object to be rendered @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if initialization fails or resources cannot be managed
2310 Initializes the color space with RGB data. @param rgb COSArray containing RGB color values
2311 Retrieves the standard encryption filter dictionary. @return PDCryptFilterDictionary object for standard encryption or null if not found
2312 Sets the Mac creator attribute for the embedded file. @param macCreator string representing the Mac creator
2313 Parses a directory object from the PDF source. Handles various types including dictionaries, strings, arrays, names, and numbers. @return parsed COSBase object or null if unexpected input is encountered @throws IOException if parsing fails due to I/O errors
2314 Enables or disables an optional content group. @param group the PDOptionalContentGroup to modify @param enable true to enable, false to disable @return true if the group was successfully toggled, false otherwise
2315 Retrieves the base state of optional content. @return BaseState object representing the current state, defaults to ON if not set
2316 Initializes an optional content group with a specified name. @param name the name of the OCG
2317 Retrieves the CYX value from the PDF dictionary. @return the CYX float value, or -1 if not found
2318 Sets the Mac OS subtype for the embedded file. @param macSubtype subtype identifier for Mac OS compatibility
2319 Retrieves the V value from the dictionary. @return the V value as a float, or -1 if not applicable
2320 Retrieves the leader line extension of the annotation. @return the leader line extension value as a float
2321 Retrieves the leader length of the line annotation. @return the leader length as a float value
2322 Retrieves the conversion factor from the COSDictionary. @return float value representing the conversion factor, or -1 if not applicable
2323 Retrieves a number from the COSDictionary by key. @param name the key for the desired number value @return the float value associated with the key, or -1 if not applicable
2324 Sets the label prefix string in the number format dictionary. @param labelPrefixString prefix for labels in measurement features
2325 Retrieves the leader offset of the line annotation. @return the leader offset as a float value
2326 Sets an integer attribute in the dictionary. @param name key for the attribute @param value integer value to set
2327 Sets the thousands separator for numerical values. @param thousandsSeparator character used as thousands separator
2328 Retrieves the default encryption filter dictionary. @return PDCryptFilterDictionary object for the default crypt filter
2329 Retrieves the number of output parameters. @return int representing the count of output parameters
2330 Retrieves the output range for a specified parameter. @param n index of the output parameter @return PDRange object representing the range or null if not found
2331 Clips input values to specified ranges. @param inputValues array of input values to clip @return array of clipped values or original inputs if no range defined
2332 Retrieves the number of input parameters. Uses domain values to determine count. @return int representing the number of input parameters
2333 Retrieves the domain range for a specific input parameter. @param n index of the input parameter @return PDRange object representing the domain or null if not set
2334 Calculates the sample index for given coordinate vector. @param vector array of coordinates @return calculated sample index
2335 Retrieves value by index from the node or its children. @param index key for the value to retrieve @return COSObjectable value or null if not found @throws IOException if an I/O error occurs during retrieval
2336 Constructs an FDFField from XML. @param fieldXML XML element representing the field @throws IOException if an error occurs during processing
2337 Retrieves and initializes the encoding range for a parameter. @param n index of the parameter @return PDRange object representing the encoding range
2338 Checks if the top edge of the marked content is attached. @return true if the top edge is attached, false otherwise
2339 Checks if the bottom edge of the marked content is attached. @return true if the bottom edge is attached, false otherwise
2340 Checks if the left edge of the content is attached. @return true if the left edge is attached, false otherwise
2341 Checks if the right edge of the content is attached. @return true if the right edge is attached, false otherwise
2342 Constructs a new PDCIDFont from a COSDictionary. @param fontDictionary CID font dictionary @param parent PDType0Font parent font
2343 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object representing the decode range or null if not available
2344 Sets the decimal separator for numerical formatting. @param decimalSeparator character to use as decimal separator
2345 Initializes a new DictionaryEncoding instance. @param fontEncoding the COSDictionary containing encoding information @param isNonSymbolic true if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
2346 Retrieves character procedure for a given code. @param code character code @return PDType3CharProc object or null if not found
2347 Retrieves the rollover appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
2348 Retrieves the down appearance of an annotation. @return PDAppearanceEntry object or null if not found, defaults to normal appearance
2349 Retrieves the first child outline item. @return PDOutlineItem representing the first child or null if none exists
2350 Retrieves the last child outline item. @return PDOutlineItem representing the last child or null if not found
2351 Retrieves the digital signature associated with the field. @return PDSignature object or null if not found
2352 Initializes DictionaryEncoding with a font encoding dictionary. @param fontEncoding the COSDictionary containing encoding information
2353 Sets an integer value for a given attribute name. @param name attribute key as a string @param value integer value to set
2354 Adds an optional content group to the PDF document. @param ocg the group to add
2355 Retrieves a float value from the COSDictionary by key. @param name the key for the desired float value @param defaultValue default float value if key not found or not a COSNumber @return the float value associated with the key, or defaultValue if not applicable
2356 Retrieves the icon associated with the annotation. @return the icon name as a string or default to "Note"
2357 Retrieves the guideline style as a string. @return the guideline style or "Solid" if not specified
2358 Retrieves string value by key from COSDictionary. @param key PDF name string @param defaultValue default value if key not found @return string value or default value
2359 Retrieves the name associated with the PDF action. @return The name as a string or null if not found
2360 Retrieves the rendering intent from the graphics state dictionary. @return RenderingIntent object or null if not found
2361 Retrieves an embedded date from a nested dictionary. @param embedded the key for the embedded dictionary @param key the key for the desired date object @param defaultValue default Calendar to return if not found @return Calendar instance or provided default if not found
2362 Retrieves the optional content properties of the form XObject. @return PDPropertyList object representing optional content or null if not present
2363 Retrieves a date value from the dictionary by key with a default. @param key the key for the desired date object @param defaultValue default Calendar to return if key not found @return Calendar instance or provided default if not found
2364 Retrieves string value by attribute name. @param name attribute key as a string @return String representation or null if not found
2365 Sets the denominator value in the PDF number format. @param denominator integer value representing the denominator setting
2366 Retrieves the print area preference. @return the print area as a string or "CropBox" if not specified
2367 Sets the label position to a specified value. @param labelPositionToValue the label position ("S" for suffix, "P" for prefix) @throws IllegalArgumentException if the value is invalid
2368 Retrieves the optional content properties of the annotation. @return PDPropertyList object representing optional content or null if not present
2369 Retrieves optional content groups (OCGs) from the dictionary. @return List of PDPropertyList objects representing OCGs
2370 Retrieves properties by name. @param name unique identifier for the properties @return PDPropertyList object or null if not found
2371 Retrieves default position vector for a character by CID. @param cid Character Identifier for the character @return Vector representing default position
2372 Retrieves the attachment name. @return The name of the attachment or a default value if not found.
2373 Retrieves the highlight mode of the annotation. @return the highlight mode as a string or default value if not found
2374 Retrieves the intensity of the border effect. @return the intensity value as a float, defaulting to 0 if not set
2375 Computes the font height for a given PDFont. Adjusts bbox and uses cap height or ascent/descent if necessary. @param font PDFont object to compute height for @return computed font height in text space @throws IOException if an I/O error occurs
2376 Retrieves the view area setting from preferences. @return the view area as a string or CropBox if not found
2377 Retrieves the reading direction preference. @return the reading direction as a string ("L2R" or "R2L"), default is "L2R"
2378 Retrieves the non-full screen page mode preference. @return the page mode or "UseNone" if not specified
2379 Retrieves the motion style of the transition. Uses getNameAsString to fetch the motion type from COS object. @return motion style as a string or default if not found
2380 Retrieves the dimension of the transition. @return the dimension as a string or default value if not found
2381 Retrieves the transition style as a string. @return the transition style or "R" if not specified
2382 Retrieves the line ending style of the annotation. @return String representing the line ending style or default if not specified
2383 Sets the label suffix string in the number format dictionary. @param labelSuffixString suffix to append to labels
2384 Retrieves the type of external data. @return type as string or "ExData" if not found
2385 Retrieves the border style of an annotation. @return The string value representing the border style, defaulting to "Solid".
2386 Retrieves the highlighting mode of the annotation. @return the highlighting mode as a string, default is "I"
2387 Retrieves the name of the text annotation. @return the name as a string or "Note" if not found
2388 Retrieves the name of the rubber stamp annotation. @return the name as a string or "Draft" if not specified
2389 Retrieves the reply type of the annotation. @return the reply type as a string or default if not found
2390 Retrieves the optional content properties of the image. @return PDPropertyList object representing optional content or null if not present
2391 Repairs the Length1 value by finding the 'exec' keyword. @param bytes byte array containing font data @param length1 initial Length1 value @return corrected Length1 value or original if valid
2392 Retrieves thousands separator from number format settings. @return String representing thousands separator or default comma if not found
2393 Parses a COSArray from the PDF source. Handles nested objects and indirect references. @return parsed COSArray object @throws IOException if reading fails
2394 Checks the checkbox by setting its value to the on state. @throws IOException if an I/O error occurs during the operation
2395 Checks if the checkbox is in the 'on' state. @return true if checked, false otherwise
2396 Retrieves all on-values for the button. @return Set of on-value strings
2397 Adds fonts from annotation widgets to AcroForm resources. @param acroFormResources the AcroForm's resources @param annotation the annotation widget
2398 Retrieves the appearance stream of an annotation. @param annotation PDF annotation object @return PDAppearanceStream object representing normal appearance or null if not found
2399 Initializes the parser with a PDF cross-reference stream. @param stream COSStream containing Xref data @throws IOException if an error occurs during initialization or stream processing
2400 Parses a PDF document with lenient mode enabled. @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing
2401 Repairs Length2 if it's out of bounds. @param bytes font data as byte array @param length1 first length parameter @param length2 second length parameter to validate and repair @return corrected Length2 or total remaining bytes if invalid
2402 Generates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object describing the font @param cidSystemInfo PDCIDSystemInfo object for character set matching @return PriorityQueue<FontMatch> with sorted font matches
2403 Retrieves a string value from an embedded dictionary. @param embedded the key for the embedded dictionary @param key the key for the desired string within the embedded dictionary @return String value associated with the key or null if not present
2404 Retrieves label position to value mapping. @return String representing the mapping or default if not found
2405 Finds the index of a given PDPage in the page tree. @param page PDPage object to search for @return index of the page or -1 if not found
2406 Retrieves label suffix string from number format settings. @return String representing label suffix or space if not found
2407 Retrieves a COSDictionary representing the page at the specified position. @param pageNum 1-based index of the page to retrieve @param node current node in the page tree @param encountered number of pages already processed @return COSDictionary for the requested page or throws exception if not found
2408 Retrieves the encode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
2409 Retrieves label prefix string from COSDictionary. @return Prefix string or space if not found
2410 Retrieves the decimal separator from the number format settings. @return String representing the decimal separator, defaults to "."
2411 Loads and parses an FDF document from the given input stream. @param input InputStream containing the FDF data @return FDFDocument parsed from the input stream @throws IOException if an I/O error occurs during loading or parsing
2412 Loads an FDF document from a file. @param file the FDF file to load @return FDFDocument parsed from the file @throws IOException if an I/O error occurs during loading
2413 Encodes image data for PDF inclusion using PNG predictors. @return PDImageXObject with encoded image or null if unsupported format @throws IOException if I/O operations fail
2414 Initializes a new highlight annotation.
2415 Updates the PDF document's version. @param newVersion the new version number to be set
2416 Creates a new PDF document with metadata and settings from the source document. @return A new PDDocument configured similarly to the source document.
2417 Retrieves the pages of the PDF document. @return PDPageTree representing the document's pages
2418 Creates a new squiggly line annotation.
2419 Enables or disables an optional content group by name. @param groupName the name of the OCG to modify @param enable true to enable, false to disable @return true if the group was successfully toggled, false otherwise
2420 Initializes a new URI action with default subtype.
2421 Initializes a new PDF action thread. Sets the subtype to "Thread".
2422 Initializes a new PDF form submission action. Sets the subtype to 'SubmitForm' for form data submission.
2423 Appends a new child to the outline. @param newChild the PDOutlineItem to be added as a child
2424 Prepends a new child to the outline. @param newChild the PDOutlineItem to add as the first child
2425 Initializes a new sound action with default settings. Sets the subtype to indicate it as a sound action.
2426 Checks if an optional content group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
2427 Initializes a new strikeout annotation.
2428 Constructs a new underline annotation.
2429 Constructs a PDAnnotationCircle from a COSDictionary. @param field the COSDictionary representing the circle annotation
2430 Renders a rectangle with a cloudy effect. @param left x-coordinate of the rectangle's left edge @param bottom y-coordinate of the rectangle's bottom edge @param right x-coordinate of the rectangle's right edge @param top y-coordinate of the rectangle's top edge @param isEllipse determines if the shape should be treated as an ellipse @throws IOException if an I/O error occurs during rendering
2431 Creates a cloudy polygon from given path data. @param path array of points defining the polygon vertices @throws IOException if an I/O error occurs during rendering
2432 Constructs a PDAnnotationUnderline from a COSDictionary. Initializes the underline annotation with the provided dictionary. @param dict the COSDictionary representing the underline annotation
2433 Constructs a PDAnnotationStrikeout from a COSDictionary. Initializes the strikeout annotation with the provided dictionary. @param dict the COSDictionary representing the strikeout annotation
2434 Constructs a PDAnnotationSquiggly from a COSDictionary. Initializes the annotation's dictionary and ensures it has a valid TYPE entry. @param dict the COSDictionary representing the squiggly annotation
2435 Constructs a PDAnnotationHighlight from a COSDictionary. Initializes the highlight annotation with the provided dictionary. @param dict the COSDictionary representing the highlight annotation
2436 Initializes the PDLab color space with LAB data. @param lab COSArray containing LAB color values
2437 Constructs a PDCalRGB instance from a COSArray. @param rgb array representing RGB color values
2438 Constructs a PDCalGray instance from a COSArray. @param array PDF array representing CALGRAY color space
2439 Initializes a LAB color space.
2440 Constructs a PDCalRGB instance with default settings.
2441 Constructs a new PDCalGray instance.
2442 Constructs a PDAnnotationSquare from a COSDictionary. @param field the COSDictionary representing the square annotation
2443 Initializes a new PDF reset form action. Sets the subtype to 'Reset' to specify the action type.
2444 Constructs a new remote navigation action. Initializes the action with the default subtype for remote links.
2445 Initializes a new named PDF action with default type. Sets the subtype to SUB_TYPE.
2446 Creates a new action movie with default settings. Initializes subtype to 'Movie'.
2447 Adds or retrieves a pattern resource. @param pattern PDAbstractPattern object to add @return COSName key representing the pattern resource
2448 Adds a shading resource to the PDF document. @param shading PDShading object representing the shading pattern @return COSName key for the added shading resource
2449 Adds an extended graphics state to the PDF resources. @param extGState the extended graphics state to add @return COSName key representing the added resource
2450 Adds or retrieves a colorspace resource. @param colorSpace the colorspace to manage @return COSName key for the colorspace resource
2451 Adds a font resource to the PDF document. @param font PDFont object to be added @return COSName key representing the font resource
2452 Sets the border line properties for a PDF annotation. @param lineWidth desired line width @param bs border style dictionary @param border COSArray containing border properties @throws IOException if an I/O error occurs
2453 Sets the destination page for this outline item. @param page the PDF page to navigate to when the item is activated
2454 Reads and sets the encoding for the font. Handles predefined CMaps and validates CID mappings. @throws IOException if required CMap is missing or invalid
2455 Adds a property list to the PDF document. @param properties PDPropertyList object to be added @return COSName key representing the added resource
2456 Adds an image resource to the PDF document. @param image PDImageXObject to be added @return COSName key representing the image resource
2457 Adds or retrieves an XObject resource. @param xobject the XObject to store as a resource @param prefix base string for the key @return COSName key representing the resource
2458 Constructs a new PDActionLaunch with default settings. Initializes action type and sets subtype to "Launch".
2459 Initializes a new JavaScript action. Sets the subtype to "JavaScript".
2460 Initializes a new import data action. Sets the subtype for PDF interactive actions.
2461 Initializes a new PDF action to hide elements. Sets the subtype specific to hiding actions.
2462 Initializes a new PDF navigation action. Sets the subtype to "GoTo" for page destination actions.
2463 Initializes an embedded goto action with default subtype.
2464 Initializes page labels from a PDF document and dictionary. @param document the PDDocument containing the pages @param dict the COSDictionary with label data @throws IOException if an error occurs during initialization
2465 Retrieves or creates the normal appearance for a PDF annotation. @return PDAppearanceEntry object representing the normal appearance
2466 Retrieves or creates the rollover appearance entry for an annotation. @return PDAppearanceEntry object representing the rollover appearance
2467 Retrieves an embedded date from a nested dictionary. @param embedded key for the embedded dictionary @param key key for the desired date object @return Calendar instance or null if not found
2468 Retrieves or creates the down appearance entry for an annotation. Initializes a new COSStream if the current entry is a sub-dictionary. @return PDAppearanceEntry object representing the down appearance
2469 Sets the button value by index. @param index the new value index @throws IOException if an I/O error occurs
2470 Adds a form XObject to resources. @param form PDFormXObject to be added @return COSName key representing the added form
2471 Retrieves fractional display setting. @return String representing fractional display or default value
2472 Retrieves the starting page number. @return the start page number or default value of 1
2473 Retrieves the count of pages in the PDF document. @return integer representing the number of pages or 0 if not specified
2474 Checks if a specific flag is set in the integer value associated with a given key. @param field primary key for the desired object @param bitFlag the flag to check within the integer value @return true if the flag is set, false otherwise
2475 Retrieves an integer value from the dictionary by key. @param key primary key for the desired object @param defaultValue default integer value to return if no valid number is found @return the integer value or defaultValue if key is invalid
2476 Retrieves an integer value from the dictionary by key. @param key primary key for the desired object @return the integer value or -1 if key is invalid
2477 Retrieves an integer value from the dictionary by key. @param key primary key for the desired object @return the integer value or -1 if key is invalid
2478 Retrieves an integer value from a nested dictionary. @param embeddedDictionary key to the nested dictionary @param key primary key for the desired object in the nested dictionary @param defaultValue default integer value if not found @return the integer value or defaultValue if keys are invalid
2479 Retrieves the order of the function. @return the order value or 1 if not specified
2480 Determines if the PDF window should be centered. @return true if window centering is enabled, false otherwise
2481 Determines if the PDF should fit the window. @return true if the PDF is set to fit the window, false otherwise
2482 Determines if the menubar should be hidden. @return true if menubar is hidden, false otherwise
2483 Determines if the toolbar should be hidden. @return true if toolbar is set to hidden, false otherwise
2484 Checks if the fly area is opaque. @return true if fly area is opaque, false otherwise
2485 Determines if field appearances should be generated. @return true if needAppearances is set to true, otherwise false
2486 Retrieves trusted mode status from the digital signature properties. @return true if trusted mode is enabled, false otherwise
2487 Determines if document title should be displayed. @return true if document title is enabled, false otherwise
2488 Retrieves the non-EFont no warn flag. @return boolean value indicating whether to suppress warnings for non-EFonts
2489 Retrieves the revision number of the PDF structure element. @return the revision number or 0 if not specified
2490 Retrieves the encryption version of the PDF document. @return integer representing the encryption version or 0 if not set
2491 Retrieves the annotation index. @return annotation index or -1 if not found
2492 Retrieves action flags. @return integer representing action flags or default value if not set
2493 Retrieves action flags. @return integer value of action flags or default (0) if not set
2494 Retrieves the number of bits per coordinate for shading. @return the bits per coordinate value
2495 Retrieves the number of bits per color component. @return the number of bits per color component or -1 if not set
2496 Retrieves the number of vertices per row in the shading model. @return integer value representing vertices per row or -1 if not specified
2497 Retrieves bits per flag setting. @return integer value of bits per flag or -1 if not found
2498 Creates a PDShading object based on the provided COSDictionary. @param shadingDictionary dictionary containing shading properties @return PDShading instance corresponding to the shading type @throws IOException if an error occurs or unknown shading type is found
2499 Retrieves the length of the encryption key. Uses default value of 40 if not specified in the dictionary. @return encryption key length
2500 Retrieves the tiling type of the pattern. @return integer representing the tiling type or 0 if not specified
2501 Creates a PDAbstractPattern based on the dictionary. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for managing resources @return PDAbstractPattern instance or throws IOException if unknown type
2502 Retrieves font descriptor flags. @return integer representing font attributes or 0 if not set
2503 Retrieves the justification of the annotation. @return justification value as a string
2504 Retrieves the permissions setting of the PDF document. @return integer representing document permissions or 0 if not set
2505 Retrieves the PDF encryption revision. @return encryption revision number or default version if not specified
2506 Retrieves the encryption key length. @return encryption key length or default value of 40 if not specified
2507 Retrieves the paint type of the tiling pattern. @return an integer representing the paint type or 0 if not specified
2508 Retrieves annotation flags. @return integer value representing annotation properties
2509 Determines if the digital signature is in pre-release mode. @return true if pre-release mode is enabled, false otherwise
2510 Checks if the line annotation has a caption. @return true if the annotation has a caption, false otherwise
2511 Converts a PDImage to BufferedImage in RGB format. @param pdImage source PDF image @param region clipping rectangle for the image @param subsampling factor for subsampling @param colorKey color key mask array @return BufferedImage representation of the input image @throws IOException if an error occurs during processing
2512 Converts a PDImage to a raw WritableRaster. @param pdImage the image to convert @return a WritableRaster representing the image data @throws IOException if image is empty or invalid dimensions
2513 Retrieves the stencil image with specified paint. @param paint the paint style for the mask @return BufferedImage representing the stencil image @throws IOException if an error occurs during processing or image is not a stencil
2514 Calculates and returns the anchor rectangle for a tiling pattern. @param pattern the tiling pattern to process @return Rectangle2D representing the scaled anchor rectangle @throws IOException if pattern bounding box is missing
2515 Generates a BufferedImage for a tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to be rendered @param colorSpace PDColorSpace used for coloring @param color PDColor for pattern fill @param xform AffineTransform defining the transformation @param anchorRect Rectangle2D defining the anchor area @return BufferedImage representing the tiling pattern @throws IOException if an I/O error occurs
2516 Parses XML for stamp annotation appearance and converts it to a COSDictionary. @param appearanceXML XML element defining the appearance @return COSDictionary with parsed data or empty if unsupported elements are found
2517 Determines if the text annotation is open. @return true if the annotation is open, false otherwise
2518 Retrieves the resources of the PDF page. @return PDResources object containing page resources or null if not found
2519 Retrieves the rotation angle of the PDF page. @return Rotation angle in degrees, multiples of 90 (0, 90, 180, 270)
2520 Determines if sound should be mixed with other sounds. @return true if sound is set to mix, false otherwise
2521 Determines if the sound should repeat. @return true if the sound repeats, false otherwise
2522 Checks if the sound action is synchronous. @return true if the action should be performed synchronously, false otherwise
2523 Retrieves the 'H' flag status. @return boolean value of the 'H' flag or true if not found
2524 Retrieves the text knockout flag from the graphics state. @return true if text knockout is enabled, false otherwise
2525 Retrieves the alpha source flag from the dictionary. @return boolean value of the alpha source flag or false if not set
2526 Retrieves automatic stroke adjustment setting. @return true if automatic stroke adjustment is enabled, false otherwise
2527 Retrieves the stroking overprint control setting. @return true if stroking overprint is enabled, false otherwise
2528 Retrieves the media box of the page. @return PDRectangle representing the page's dimensions or default US Letter if not found
2529 Retrieves anti-aliasing setting from shading dictionary. @return true if anti-aliasing is enabled, false otherwise
2530 Checks if the transparency group is isolated. @return true if isolated, false otherwise
2531 Determines if renaming is enabled for the template. @return true if renaming is allowed, false otherwise
2532 Determines if icons should scale to fit within annotations. @return true if scaling is enabled, false otherwise
2533 Retrieves whether the line annotation has a caption. @return true if the line has a caption, false otherwise
2534 Checks if metadata encryption is enabled. @return boolean indicating whether metadata is encrypted by default
2535 Checks if the user property is hidden. @return true if the property is hidden, false otherwise
2536 Checks if the file specification is volatile. @return true if the file spec is volatile, false otherwise
2537 Retrieves or creates a COSName instance for the given PDF name. @param key PDF name string @param defaultValue default boolean value if key is invalid @return boolean value associated with the key or default value
2538 Determines if knockout mode is enabled. @return true if knockout mode is active, false otherwise
2539 Retrieves the quadding mode of the annotation. @return integer representing the quadding mode (0 = left, 1 = center, 2 = right)
2540 Determines if the window UI should be hidden. @return true if the window UI is hidden, false otherwise
2541 Checks if timestamping is required. @return true if timestamping is required, false otherwise
2542 Sets a flag in the dictionary by modifying its integer value. @param field key for the flag to modify @param bitFlag specific bit representing the flag @param value true to set the flag, false to clear it
2543 Initializes a PDFObjectStreamParser with a given COSStream and document. Validates mandatory entries /N and /First, throws IOException if invalid. @param stream the COSStream containing object data @param document the parent COSDocument @throws IOException if required entries are missing or invalid
2544 Initializes a PDCIDFontType0 from a font dictionary and parent font. Handles CFF font parsing and fallback mechanisms. @param fontDictionary the COSDictionary representing the font @param parent the PDType0Font parent @throws IOException if an error occurs during font initialization
2545 Initializes a Type 2 CID font. @param fontDictionary PDF dictionary for the font @param parent parent PDType0Font object @param trueTypeFont associated TrueTypeFont or null if not embedded @throws IOException if an error occurs during font initialization
2546 Reads a CMap from a COSBase object. @param base COSName or COSStream containing the CMap @return parsed CMap object @throws IOException if an I/O error occurs
2547 Retrieves the rotation angle of the annotation. @return integer representing the rotation angle in degrees
2548 Writes the body of a PDF document. Handles writing root, info, and encryption objects. @param doc the COSDocument to write @throws IOException if an I/O error occurs
2549 Retrieves string value by key from COSDictionary. @param name PDF name string @param defaultValue default value if key not found @return string value or default value
2550 Retrieves the border style. @return style string or default solid style if not found
2551 Traverses up the hierarchy to find the root of the structure tree. @return PDStructureTreeRoot object or null if not found
2552 Retrieves child elements of the structure node. @return List of child objects or empty list if none found
2553 Retrieves the PDF document's encryption settings. @return PDEncryption object or null if not encrypted
2554 Prepares decryption for the PDF document. Handles encryption setup using provided key store or password. @throws IOException if decryption preparation fails
2555 Initializes Type1ShadingContext with specified parameters. @param shading PDShadingType1 object defining the shading @param colorModel ColorModel for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix representing additional transformations @throws IOException if an I/O error occurs during initialization
2556 Retrieves the page number associated with the target directory. @return page number or -1 if not specified
2557 Retrieves the embedded file using Unicode key. @return PDEmbeddedFile object or null if not found
2558 Retrieves the embedded file for UNIX systems. @return PDEmbeddedFile object or null if not found
2559 Retrieves the embedded file for macOS. @return PDEmbeddedFile object or null if not found
2560 Retrieves the embedded file from the PDF specification. @return PDEmbeddedFile object or null if not found
2561 Retrieves the open count of child outline items. @return integer representing the number of open child items
2562 Retrieves a PDColorSpace by name. @param name the unique identifier for the color space @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
2563 Removes cached page resources. Checks if resourceCache is null and returns early if so. Removes resources specific to the page from the cache.
2564 Retrieves COSObjects by specified dictionary type. @param type dictionary type to match @return list of matching COSObjects
2565 Retrieves the top index of items displayed in the list box. @return the top index or 0 if not set
2566 Retrieves the quality factor from the form dictionary. @return integer value representing the quality setting or 0 if not specified
2567 Retrieves the embedded file for DOS. @return PDEmbeddedFile object or null if not found
2568 Initializes a RadialShadingContext for rendering radial gradients. @param shading PDShadingType3 object defining the shading @param colorModel ColorModel for rendering colors @param xform AffineTransform for device space to user space conversion @param matrix Matrix for additional transformations @param deviceBounds Rectangle representing the device bounds @throws IOException if an error occurs during initialization
2569 Initializes a new TriangleBasedShadingContext for PDF rendering. @param shading PDShading object to be rendered @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if initialization fails or resources cannot be managed
2570 Initializes axial shading context with specified parameters. @param shading PDShadingType2 object defining the shading @param colorModel ColorModel for rendering colors @param xform AffineTransform for device space to user space conversion @param matrix transformation matrix for shading @param deviceBounds bounds of the device area @throws IOException if an I/O error occurs during initialization
2571 Sets the V (valid) flag required for digital signatures. @param flag true to require the V flag, false otherwise
2572 Sets whether digest method is required. @param flag true to require digest method, false otherwise
2573 Sets whether the subject field is required. @param flag true if subject is required, false otherwise
2574 Sets whether a subfilter is required for the digital signature. @param flag true if subfilter is required, false otherwise
2575 Sets whether the issuer field is required. @param flag true if issuer is required, false otherwise
2576 Creates a cloudy rectangle annotation. @param rd rectangle dimensions to apply differences @throws IOException if an I/O error occurs during rendering
2577 Renders a cloudy ellipse within specified bounds. @param leftOrig x-coordinate of the bounding rectangle's left edge @param bottomOrig y-coordinate of the bounding rectangle's bottom edge @param rightOrig x-coordinate of the bounding rectangle's right edge @param topOrig y-coordinate of the bounding rectangle's top edge @throws IOException if an I/O error occurs during rendering
2578 Sets whether a filter is required for the digital signature. @param flag true if filter is required, false otherwise
2579 Sets the lock status of annotation contents. @param lockedContents true to lock contents, false to unlock
2580 Toggles the 'no view' flag of the annotation. @param toggleNoView true to hide the annotation, false to show it
2581 Sets the locked state of the annotation. @param locked true to lock the annotation, false to unlock it
2582 Sets the annotation to read-only mode. @param readOnly true to make the annotation read-only, false otherwise
2583 Sets the annotation's visibility. @param noView true to hide the annotation, false to show it
2584 Sets or clears the 'no rotate' flag of an annotation. @param noRotate true to prevent rotation, false to allow it
2585 Sets the no-zoom flag for this annotation. @param noZoom true to disable zooming, false otherwise
2586 Sets the printed flag of the annotation. @param printed true to mark as printed, false otherwise
2587 Sets the visibility of the annotation. @param hidden true to hide, false to show the annotation
2588 Sets the visibility of the annotation. @param invisible true to make the annotation invisible, false otherwise
2589 Sets the locked contents flag of the annotation. @param lockedContents true to lock contents, false otherwise
2590 Prepares a PDF document for encryption using public key cryptography. @param doc PDDocument to be encrypted @throws IOException if an I/O error occurs during encryption setup
2591 Sets whether a reason is required for the digital signature. @param flag true if a reason is required, false otherwise
2592 Sets whether legal attestation is required. @param flag true if legal attestation is required, false otherwise
2593 Creates a PDAnnotation instance based on the provided COSBase. @param base the COSBase representing the annotation dictionary @return a specific PDAnnotation subclass or PDAnnotationUnknown if unsupported @throws IOException if an error occurs during creation
2594 Draws a form XObject on the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs or drawForm is called within text mode
2595 Draws an image at specified position. @param image PDImageXObject to draw @param matrix transformation matrix for positioning @throws IOException if an I/O error occurs
2596 Draws an image on the PDF content stream. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
2597 Constructs a JavaScript action with the given script. @param js JavaScript code to be executed in the PDF document
2598 Sets a marked content point with properties in the PDF. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs
2599 Begins marked content with a tag and properties. @param tag COSName representing the mark tag @param propertyList PDPropertyList containing properties @throws IOException if an I/O error occurs
2600 Applies a shading pattern to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs or if called within a text block
2601 Sets graphics state parameters in the PDF. @param state PDExtendedGraphicsState object to apply @throws IOException if an I/O error occurs
2602 Checks if an optional content group by name is enabled. @param groupName the name of the optional content group @return true if the group is enabled, false otherwise
2603 Checks if an optional content group is enabled in the PDF document. @param group the PDOptionalContentGroup to check @return true if the group is enabled or no OC properties exist, false otherwise
2604 Retrieves page labels from the PDF document. @return PDPageLabels object or null if not found @throws IOException if an error occurs during retrieval
2605 Fixes destinations in the destination document. @param destinationDocument PDF document to fix destinations in
2606 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
2607 Sets whether adding revision information is required. @param flag true to require revision info, false otherwise
2608 Initializes a new PDFPrintable instance. @param document the PDDocument to print @param scaling the Scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for printing quality @param center flag to center pages during printing @param renderer PDFRenderer used for page rendering
2609 Initializes a new PDFRenderer instance. @param document PDDocument to be rendered
2610 Creates a new PDF document if necessary for splitting. Checks if the current page requires a split or no destination document is set.
2611 Writes the PDF header to the output stream. Adjusts version if compression is enabled. @param doc COSDocument to write header for @throws IOException if I/O error occurs
2612 Draws an inline image at specified position and size. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
2613 Sets the optional content properties for the document. Updates PDF version to 1.5 if required by optional content groups. @param ocProperties the optional content properties to set
2614 Increments the revision number of the PDF structure element.
2615 Sets whether any signatures exist in the form. @param signaturesExist true if signatures are present, false otherwise
2616 Sets the form to be append-only. @param appendOnly true to enable append-only mode, false otherwise
2617 Enables or disables sorting of choice options. @param sort true to enable sorting, false otherwise
2618 Enables or disables multi-selection for the choice field. @param multiSelect true to allow multiple selections, false otherwise
2619 Sets whether spell-checking is disabled for the choice field. @param doNotSpellCheck true to disable spell-checking, false to enable it
2620 Sets whether changes should be committed upon selection change. @param commitOnSelChange true to enable automatic commit, false otherwise
2621 Sets whether the choice field is a combo box. @param combo true if it's a combo box, false otherwise
2622 Sets the editable state of the combo box. @param edit true to make the combo box editable, false otherwise
2623 Sets the read-only status of the field. @param readonly true to make the field read-only, false otherwise
2624 Sets whether the field is required. @param required true if the field must be filled out, false otherwise
2625 Sets the 'no export' flag for the field. @param noExport true to prevent exporting the field value, false otherwise
2626 Constructs a new push button within an AcroForm. @param acroForm the AcroForm containing this field
2627 Initializes a new radio button field. @param acroForm the AcroForm containing this field
2628 Sets whether radio buttons operate in unison. @param radiosInUnison true if all options are selectable; false otherwise
2629 Sets whether the text field allows multiline input. @param multiline true to enable multiline, false otherwise
2630 Enables or disables password protection for the text field. @param password true to enable password protection, false to disable it
2631 Enables or disables file selection capability. @param fileSelect true to enable file selection, false otherwise
2632 Sets whether spell-checking is disabled for the text field. @param doNotSpellCheck true to disable spell-checking, false to enable it
2633 Sets whether the text field should not scroll. @param doNotScroll true to prevent scrolling, false otherwise
2634 Sets or clears the comb flag. @param comb true to enable comb input, false otherwise
2635 Sets the rich text flag for the text field. @param richText true to enable rich text, false otherwise
2636 Creates a PDImageXObject from TIFF data. @param document PDF document to add the image to @param reader source of TIFF data @param number page number to extract (0-based) @return PDImageXObject or null if extraction fails
2637 Sets the bold flag of the outline item. @param bold true to make text bold, false otherwise
2638 Sets whether the subject DN is required. @param flag true to require, false otherwise
2639 Toggles the 'no view' flag of the annotation. @param toggleNoView true to hide the annotation, false to show it
2640 Sets the locked state of the annotation. @param locked true to lock the annotation, false to unlock it
2641 Retrieves the total number of pages in the PDF document. @return integer representing the number of pages
2642 Sets whether the annotation should be visible. @param noView true to hide the annotation, false to show it
2643 Sets whether the annotation should not be rotated. @param noRotate true to prevent rotation, false otherwise
2644 Sets whether OID is required in the certificate. @param flag true to mark OID as required, false otherwise
2645 Sets the 'no zoom' flag for the annotation. @param noZoom true to disable zooming on the annotation, false otherwise
2646 Sets the visibility of the annotation. @param hidden true to hide, false to show the annotation
2647 Sets the visibility of the annotation. @param invisible true to make the annotation invisible, false otherwise
2648 Retrieves and initializes a PDF page by index. @param index 0-based index of the page to retrieve @return PDPage object representing the specified page
2649 Sets the italic style of the outline item. @param italic true to apply italic style, false otherwise
2650 Sets whether key usage is required in the certificate. @param flag true to require key usage, false otherwise
2651 Sets whether URL is required in the certificate. @param flag true if URL is mandatory, false otherwise
2652 Adds a new child outline item as the first child. @param newChild the PDOutlineItem to add
2653 Adds a child outline item to the end. @param newChild PDOutlineItem to add as a last child
2654 Parses a cross-reference object stream in a PDF. @param objByteOffset byte offset of the object @param isStandalone indicates if the xref is standalone @return previous xref table's byte offset or -1 if not found @throws IOException if I/O error occurs during parsing
2655 Sets whether the annotation should be printed. @param printed true to make the annotation printable, false otherwise
2656 Sets the annotation to read-only. @param readOnly true to make the annotation read-only, false otherwise
2657 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
2658 Retrieves the line join style. @return integer representing the line join style or -1 if not found
2659 Retrieves the structure parents index of the page. @return the integer value representing the structure parents or -1 if not set
2660 Wraps an OutputStream with a PredictorOutputStream for PDF image data decoding. @param out underlying output stream for data writing @param decodeParams dictionary containing decoding parameters @return wrapped OutputStream or original if predictor is 1
2661 Retrieves the denominator value from the number format settings. @return integer representing the denominator or -1 if not found
2662 Retrieves an integer value from a nested dictionary. @param embeddedDictionary key to the nested dictionary @param key primary key for the desired object in the nested dictionary @return the integer value or -1 if not found
2663 Retrieves non-stroking overprint control setting. @return true if non-stroking overprint is enabled, false otherwise
2664 Checks if annotation should not be visible. @return true if no view flag is set, false otherwise
2665 Checks if the node has any open child outline items. @return true if there are open children, false otherwise
2666 Creates a PDField instance based on the provided COSDictionary. @param form the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any @return PDField object or null if the field type is unknown
2667 Checks if FD (Fixed Decimal) format is enabled. @return true if FD format is enabled, false otherwise
2668 Retrieves the open state of the popup annotation. @return true if the popup is open, false otherwise
2669 Initializes TilingPaint with specified parameters. @param drawer PageDrawer for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for coloring @param color PDColor for pattern fill @param xform AffineTransform defining transformation @throws IOException if an I/O error occurs
2670 Checks if the annotation should not be rotated. @return true if no rotate flag is set, false otherwise
2671 Retrieves the line cap style from the graphics state. @return integer representing the line cap style or default value if not set
2672 Retrieves the marked content identifier (MCID). @return MCID as an integer, or -1 if properties are null
2673 Retrieves the next key in the parent tree. @return integer value of the next key or -1 if not found
2674 Retrieves the Marker Context Identifier (MCID) of the marked content. @return MCID as an integer, or -1 if not found
2675 Retrieves bits per sample for the function. @return number of bits per sample or -1 if not found
2676 Adds a class name to the PDF structure element. @param className the class name to add
2677 Updates attribute revision in the PDF structure. @param attributeObject the changed attribute object
2678 Writes a PDF document with optional signing. @param doc PDDocument to write @param signInterface interface for document signing @throws IOException if I/O error occurs during writing
2679 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
2680 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
2681 Determines if mouse position tracking is enabled. @return true if mouse position should be tracked, false otherwise
2682 Checks if annotation disables zooming. @return true if no zoom flag is set, false otherwise
2683 Checks if the PDF element is marked as suspect. @return true if the element is suspect, false otherwise
2684 Checks if user properties are enabled. @return true if UserProperties is set to true, false otherwise
2685 Checks if the PDF element is marked. @return true if marked, false otherwise
2686 Retrieves the rotated media box of a PDF page. @param page PDPage object representing the PDF page @return PDRectangle with dimensions adjusted for rotation or original if not rotated
2687 Validates button value against allowed options. @param value user-provided button value to check @throws IllegalArgumentException if value is invalid
2688 Checks if the annotation's "NoView" toggle flag is set. @return true if NoView is enabled, false otherwise
2689 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
2690 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
2691 Retrieves an opaque image from the PDF document. @param region clipping rectangle for the image @param subsampling factor for subsampling @return BufferedImage representation of the image within the specified region @throws IOException if an error occurs during processing
2692 Converts PDImage to BufferedImage in RGB format using default settings. @param pdImage source PDF image @param colorKey color key mask array @return BufferedImage representation of the input image @throws IOException if an error occurs during processing
2693 Pushes and sets the current resources based on content stream or page. @param contentStream PDF content stream to check for resources @return previous resources before setting new ones
2694 Calculates affine transform for centering an overlay on a PDF page. @param page the target PDF page @param overlayMediaBox dimensions of the overlay content @return AffineTransform object for positioning overlay
2695 Retrieves the structure parent index of the annotation. @return integer value representing the structure parent or -1 if not set
2696 Retrieves an XObject by name from PDF resources. @param name unique identifier for the XObject @return PDXObject instance or null if not found @throws IOException if an error occurs during retrieval
2697 Initializes a GouraudShadingContext for PDF rendering. @param shading PDShading object defining the shading pattern @param colorModel ColorModel for color calculations @param xform AffineTransform for coordinate transformations @param matrix Matrix for additional transformations @throws IOException if initialization fails
2698 Creates an input stream for PDF data processing. @return COSInputStream with default decoding options @throws IOException if stream creation fails
2699 Parses a COSBase object from a PDF object stream. @param objstmObjNr the number of the object stream @param key the COSObjectKey to retrieve @return the parsed COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
2700 Retrieves the contents of the page as an InputStream. @return InputStream containing the page's contents or an empty stream if none available @throws IOException if an error occurs during stream processing
2701 Checks if annotation should not be rotated. @return true if no rotate flag is set, false otherwise
2702 Initializes a Type 2 CID font without an embedded TrueType font. @param fontDictionary PDF dictionary for the font @param parent parent PDType0Font object @throws IOException if an error occurs during font initialization
2703 Retrieves the CID font associated with this embedder. @return PDCIDFontType2 object representing the embedded CID font @throws IOException if an error occurs during font retrieval
2704 Adds a PDF object to the pool, handling compression and encryption. @param key unique identifier for the object @param base COSBase object to store @return updated COSBase object or null if not added
2705 Checks if the annotation is marked as printed. @return true if the annotation is printed, false otherwise
2706 Protects the PDF document with a given protection policy. @param policy the protection policy to apply @throws IOException if no security handler is found for the policy
2707 Retrieves the glyph name for a given character code. @param code character code @return glyph name as a string or ".notdef" if not found
2708 Converts character code to glyph ID. @param code character code to convert @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
2709 Retrieves the Mac subtype of the embedded file. @return String value representing the Mac subtype or null if not present
2710 Retrieves the role map from the structure tree root. @return Map containing role mappings or an empty map if not found
2711 Checks if filter is required for digital signature. @return true if filter is required, false otherwise
2712 Checks if sorting is enabled for the choice field. @return true if sorting is enabled, false otherwise
2713 Checks if the choice field supports multi-selection. @return true if multi-select is enabled, false otherwise
2714 Processes operators from a PDF content stream. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs while processing
2715 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
2716 Adds a page to the PDF document's page tree. @param page PDPage object to be added
2717 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
2718 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
2719 Determines if this button is a radio button. @return true if the button is a radio button, false otherwise
2720 Determines if this button is a push button. @return true if it's a push button, false otherwise
2721 Checks if subfilter is required. @return true if subfilter flag is set, false otherwise
2722 Checks if digest method is required for digital signature. @return true if digest method is mandatory, false otherwise
2723 Checks if V (validity) flag is set in the seed value. @return true if V flag is set, false otherwise
2724 Checks if reason is required for digital signature. @return true if reason is mandatory, false otherwise
2725 Checks if legal attestation is required. @return true if legal attestation flag is set, false otherwise
2726 Checks if adding revocation info is required. @return true if revocation info is needed, false otherwise
2727 Checks if subject is required in the certificate. @return true if subject is required, false otherwise
2728 Checks if issuer information is required. @return true if issuer is mandatory, false otherwise
2729 Checks if OID (Object Identifier) is required. @return true if OID is required, false otherwise
2730 Checks if subject distinguished name (DN) is required. @return true if subject DN flag is set, false otherwise
2731 Checks if key usage is required. @return true if key usage flag is set, false otherwise
2732 Checks if URL field is required. @return true if URL is required, false otherwise
2733 Checks if the font is italic. @return true if the font is italic, false otherwise
2734 Checks if the text of this outline item is bold. @return true if the 'bold' flag is set, false otherwise
2735 Checks if signatures exist in the form. @return true if signatures are present, false otherwise
2736 Checks if the form is in append-only mode. @return true if append-only flag is set, false otherwise
2737 Checks if spell checking is disabled for this choice field. @return true if spell checking is disabled, false otherwise
2738 Removes a page node from the PDF page tree. @param node the COSDictionary representing the page to remove
2739 Retrieves the Mac creator attribute of the embedded file. @return String representing the Mac creator or null if not present
2740 Retrieves the owner key for PDF encryption. @return byte array representing the owner key or null if not found
2741 Retrieves the user key for PDF encryption. @return byte array representing the user key or null if not found @throws IOException if an error occurs while reading the dictionary
2742 Calculates the displacement vector for a character based on its code. @param code character code @return Vector representing horizontal displacement in PDF units @throws IOException if an I/O error occurs
2743 Retrieves the Mac resource fork data from embedded file parameters. @return String representation of the Mac resource fork or null if not present
2744 Calculates the total width of a string in PDF units. @param text input string to measure @return total width of the string @throws IOException if an I/O error occurs during processing
2745 Retrieves a PDAbstractPattern by name. @param name unique identifier for the pattern @return PDAbstractPattern instance or null if not found @throws IOException if an error occurs during resource creation
2746 Retrieves a CID font mapping based on base font and font descriptor. @param baseFont the base font name @param fontDescriptor PDFontDescriptor describing the font @param cidSystemInfo PDCIDSystemInfo for character set matching @return CIDFontMapping instance or null if not found
2747 Sets the visibility of a user property. @param hidden true to hide, false to show
2748 Retrieves a PDShading object by name. @param name unique identifier for the shading resource @return PDShading instance or null if not found @throws IOException if an error occurs during retrieval
2749 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
2750 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
2751 Retrieves an integer value from the COSDictionary by key. @param name primary key for the desired object @param defaultValue default integer value to return if no valid number is found @return the integer value or defaultValue if key is invalid
2752 Retrieves the maximum length constraint of the text field. @return the maximum number of characters allowed or -1 if not set
2753 Loads an FDF document from a file by name. @param filename path to the FDF file @return FDFDocument parsed from the file @throws IOException if an I/O error occurs during loading
2754 Retrieves the P value from the digital signature configuration. @return the P value as an integer or -1 if not found
2755 Checks if zooming is disabled for the annotation. @return true if zooming is disabled, false otherwise
2756 Retrieves the PDShading object associated with this pattern. @return PDShading instance or null if not found @throws IOException if an error occurs during creation
2757 Prepares PDF document for decryption using public key. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial for accessing keys @throws IOException on errors during decryption setup
2758 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
2759 Checks if the field is required. @return true if the required flag is set, false otherwise
2760 Clips a rectangle to the page's media box boundaries. @param box the rectangle to clip @return clipped PDRectangle within media box limits
2761 Checks if changes should be committed upon selection. @return true if commit on selection change is enabled, false otherwise
2762 Checks if the annotation should toggle visibility. @return true if the toggle no view flag is set, false otherwise
2763 Adds an attribute to the PDF structure element. @param attributeObject the attribute to add
2764 Checks if the choice field is a combo box. @return true if it's a combo box, false otherwise
2765 Determines if the combo box is editable. @return true if editable, false otherwise
2766 Checks if the field is read-only. @return true if the field is read-only, false otherwise
2767 Checks if the field should not be exported. @return true if the no-export flag is set, false otherwise
2768 Checks if the annotation should not be displayed. @return true if no view flag is set, false otherwise
2769 Checks if the text field supports multiline input. @return true if multiline is enabled, false otherwise
2770 Checks if the text field is password protected. @return true if password protection is enabled, false otherwise
2771 Checks if the text field allows file selection. @return true if file select is enabled, false otherwise
2772 Determines if spell-checking is disabled for this text field. @return true if spell-checking is disabled, false otherwise
2773 Checks if the text field should not scroll. @return true if scrolling is disabled, false otherwise
2774 Checks if the text field is in combination mode. @return true if combination mode is enabled, false otherwise
2775 Checks if the text field supports rich text. @return true if rich text is enabled, false otherwise
2776 Checks if radio buttons operate in unison. @return true if radios are synchronized, false otherwise
2777 Sets or clears the italic style flag. @param flag true to enable italic style, false otherwise
2778 Sets the stroking color for PDF content. @param color PDColor object representing the new color @throws IOException if an I/O error occurs
2779 Draws an image at a specified position using its natural size. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs
2780 Prepares a PDF document for encryption by setting up the encryption dictionary. @param document PDDocument to be encrypted @throws IOException if an I/O error occurs during preparation
2781 Retrieves the page number for navigation. @return page number or -1 if not found
2782 Retrieves a PDF page by index. @param pageIndex 0-based index of the page @return PDPage object representing the specified page
2783 Sets visual signature from input stream. @param is InputStream containing the signature image @throws IOException if an I/O error occurs during initialization
2784 Sets visual signature from a PDF file. @param file PDF file containing the signature @throws IOException if an I/O error occurs during initialization
2785 Loads a PDF document from a random access source. @param randomAccessRead source of the PDF data @param password optional password for encrypted documents @param keyStore keystore for decryption (can be null) @param alias alias for the keystore entry (can be null) @return parsed PDDocument object @throws IOException if an I/O error occurs
2786 Loads a PDF document from a random access source. @param randomAccessRead source of the PDF data @param password optional password for encrypted documents @return parsed PDDocument object @throws IOException if an I/O error occurs
2787 Loads a PDF document from a random access source. @param randomAccessRead source of the PDF data @return parsed PDDocument object @throws IOException if an I/O error occurs
2788 Loads a PDF document from a byte array. @param input byte array containing the PDF data @param password optional password for encrypted PDFs @param keyStore keystore for decryption (nullable) @param alias alias for keystore entry (nullable) @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing
2789 Adds a new page to the PDF document. @param page PDPage object representing the page to be added
2790 Initializes a new instance of PageExtractor. @param sourceDocument the original PDF document to process
2791 Initializes a new PDFPageable instance. @param document the PDF document to be printed @param orientation page orientation setting @param showPageBorder flag to display page borders @param dpi rendering quality in dots per inch @param center flag to center content on pages
2792 Parses the cross-reference and trailer sections of a PDF. @param document the COSDocument to populate with parsed data @param startXRefOffset starting offset for xref parsing @return the parsed trailer dictionary @throws IOException if an I/O error occurs during parsing
2793 Parses a PDF object dynamically based on its key. @param objKey unique identifier for the COS object @param requireExistingNotCompressedObj flag to check if object must exist and not be compressed @return parsed COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
2794 Updates the open count of parent outline nodes recursively. @param delta amount to adjust the open count by
2795 Sets button value, updating appearance if necessary. @param value new value for the button @throws IOException if an I/O error occurs
2796 Sets or clears the fixed pitch flag. @param flag true to set as fixed pitch, false otherwise
2797 Sets or clears the serif flag in font descriptor. @param flag true to enable serif, false to disable
2798 Sets or clears the symbolic flag in font descriptor. @param flag true to mark as symbolic, false otherwise
2799 Sets or clears the script flag bit. @param flag true to enable script, false to disable
2800 Sets or clears the non-symbolic font flag. @param flag true to mark as non-symbolic, false otherwise
2801 Sets or clears the all-capitals flag for the font. @param flag true to enable all-caps, false otherwise
2802 Enables or disables small caps in font. @param flag true to enable, false to disable small caps
2803 Sets or clears the force bold flag. @param flag true to force bold, false otherwise
2804 Creates a PDImageXObject from image data in a byte array. @param document PDF document to add the image to @param byteArray source of image data @param number page number to extract (0-based) @return PDImageXObject or null if extraction fails
2805 Creates a PDImageXObject from a TIFF file. @param document PDF document to add the image to @param file source TIFF file @param number page number to extract (0-based) @return PDImageXObject or null if extraction fails
2806 Constructs a new FDFAnnotation object from the provided XML element. This method initializes an FDFAnnotation by extracting various attributes from the given XML element, such as page number, color, date, and flags. It also handles optional attributes like opacity, subject, intent, contents, rich contents, and border style. If any required attribute is missing or malformed, it throws an IOException. The method performs several key tasks: 1. Retrieves the page number from the element and sets it using setPage(). 2. Extracts the color attribute, validates its format, and sets the annotation's color if valid. 3. Sets the date of the annotation. 4. Parses the flags attribute to enable various properties like invisibility, hidden status, etc. 5. Retrieves and sets the name of the annotation. 6. Extracts and validates the rectangle dimensions, then sets them as a PDRectangle. 7. Sets the title of the annotation. 8. Converts creation date from string to Calendar object and sets it. 9. Handles opacity attribute by parsing its value to float. 10. Sets the subject of the annotation. 11. Retrieves intent or IT (non-standard) attribute and sets the intent if valid. 12. Evaluates XPath expressions to extract contents and rich contents, setting them accordingly. 13. Configures border style by parsing width, style, dashes, and intensity attributes. @param element The XML element containing annotation data. @throws IOException If any required attribute is missing or malformed.
2807 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
2808 Retrieves the crop box of the page. @return PDRectangle representing the page's crop dimensions or media box if not set
2809 Inserts generated appearance for a comb field. @param contents PDF content stream for rendering @param appearanceStream appearance stream to modify @param font font used in the text field @param fontSize size of the font @throws IOException if an I/O error occurs during processing
2810 Adds PDF structure to the compression pool. Handles objects, arrays, and dictionaries recursively. @param current the current COSBase object to process @throws IOException if an I/O error occurs
2811 Retrieves the standard structure type of a PDF element. @return Standardized structure type as a String
2812 Creates a descendant CID font from a PDF dictionary. @param dictionary PDF dictionary containing font details @param parent parent PDType0Font object @return PDCIDFont instance based on the font subtype @throws IOException if invalid font type or other errors occur
2813 Collects patches from PDF shading data. @param xform additional affine transform @param matrix transformation matrix @param controlPoints number of control points in the patch @return List of Patch objects @throws IOException if stream reading fails
2814 Creates an input stream for PDF data processing. @return COSInputStream with default decoding options @throws IOException if stream creation fails
2815 Converts stream content to a text string. @return Text representation of the stream or an empty string on error
2816 Creates and renders a cloudy ellipse within the specified rectangle. @param rd bounding rectangle for the ellipse @throws IOException if an I/O error occurs during rendering
2817 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found or invalid
2818 Retrieves the annotation this one is in reply to. @return PDAnnotation object representing the parent annotation or null if none @throws IOException if an error occurs during retrieval
2819 Notifies changes to the associated structure element.
2820 Saves the PDF document incrementally to an output stream. @param output destination stream for the updated PDF @throws IOException if I/O error occurs during saving
2821 Writes a PDF document without signing. @param doc PDDocument to write @throws IOException if I/O error occurs during writing
2822 Sets default value for the button. @param value user-provided default value to be validated and set
2823 Retrieves the referenced PDF object. @return COSObjectable instance or null if not found
2824 Retrieves annotations from the page based on a filter. @param annotationFilter criteria to select annotations @return List of filtered PDAnnotation objects @throws IOException if an error occurs during retrieval
2825 Imports optional content properties from source document to target document. Handles cloning and merging of OC properties. @param srcDoc source PDF document containing OC properties @throws IOException if an error occurs during processing
2826 Constructs a PDFPrintable instance with specified options. @param document the PDDocument to print @param scaling the Scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for printing quality @param center flag to center pages during printing
2827 Fetches and sets the UCS-2 CMap for a Type 0 font. Handles composite fonts with predefined CMaps or descendant CIDFonts using specific character collections.
2828 Appends a marked content element as a child. @param markedContent the marked content to append @throws IllegalArgumentException if MCID is negative or invalid
2829 Removes a page from the PDF document by its index. @param index 0-based index of the page to remove
2830 Decodes LZW-encoded data with optional prediction. @param encoded InputStream containing the LZW-encoded data @param decoded OutputStream to write the decompressed data @param parameters COSDictionary with decoding settings @param index specific decode params index @return DecodeResult object with parameters @throws IOException if an I/O error occurs during decoding
2831 Decodes JPEG2000 image data from input stream to output stream. @param encoded input stream containing JPEG2000 data @param decoded output stream for the decoded image data @param parameters decoding parameters @param index image index (unused) @param options decoding options @return DecodeResult object with decoded parameters @throws IOException if decoding fails
2832 Retrieves an opaque image from the PDF document without clipping or subsampling. @return BufferedImage representation of the entire image @throws IOException if an error occurs during processing
2833 Initializes TilingPaint with default color settings. @param drawer PageDrawer for rendering @param pattern PDTilingPattern to render @param xform AffineTransform defining transformation @throws IOException if an I/O error occurs
2834 Processes a PDF content stream, managing graphics state and resources. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs while processing
2835 Processes annotation appearance by rendering its content. @param annotation the PDF annotation to process @param appearance the appearance stream of the annotation @throws IOException if an I/O error occurs during processing
2836 Checks if the font is set to all capital letters. @return true if all caps flag is set, false otherwise
2837 Checks if the font style is italic. @return true if the italic flag bit is set, false otherwise
2838 Checks if the font is non-symbolic. @return true if the font is non-symbolic, false otherwise
2839 Checks if the font supports script. @return true if script support is enabled, false otherwise
2840 Checks if the font is symbolic. @return true if the font has the SYMBOLIC flag set, false otherwise
2841 Checks if the font has a serif style. @return true if the font is serif, false otherwise
2842 Retrieves a PDAbstractPattern by color. @param color the color to find the pattern for @return PDAbstractPattern instance @throws IOException if the pattern is not found
2843 Inserts a new page after an existing page in the PDF document. @param newPage the page to be inserted @param prevPage the page after which the new page will be inserted @throws IllegalArgumentException if prevPage is not found in the hierarchy
2844 Inserts a new page before an existing page in the PDF document. @param newPage the page to be inserted @param nextPage the page after which the new page will be inserted @throws IllegalArgumentException if nextPage is not found in the parent's kids array
2845 Processes a tiling pattern by setting up resources, transforming the matrix, and rendering its content. @param tilingPattern the tiling pattern to process @param color the color for non-colored patterns @param colorSpace the color space to use @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs during processing
2846 Checks if the font has small cap support. @return true if small caps are enabled, false otherwise
2847 Creates a PDField instance from a COSDictionary. @param form the AcroForm containing this field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any @return PDField object or null if the field type is unknown
2848 Removes a specified PDF page from the document. @param page the PDPage object to be removed
2849 Processes Type 3 character stream. @param charProc Type 3 character procedure @param textRenderingMatrix matrix for text rendering @throws IOException if an I/O error occurs
2850 Processes a transparency group in the PDF document. @param group PDTransparencyGroup to be processed @throws IOException if an I/O error occurs
2851 Determines if the text field should be in combination mode. @return true if the field is a PDTextField with specific constraints, false otherwise
2852 Prepares document for decryption using provided encryption details and material. @param encryption PDF encryption object @param documentIDArray array of document IDs @param decryptionMaterial decryption material compatible with the document @throws IOException if decryption preparation fails or material is incompatible
2853 Checks if the font is fixed pitch. @return true if the font has fixed pitch, false otherwise
2854 Retrieves the width of a space character in PDF units. Uses various methods to determine the width, falling back to defaults if necessary. @return width of the space character
2855 Checks if the font should be forcibly bolded. @return true if force bold flag is set, false otherwise
2856 Initializes a stamp annotation from an XML element. Parses appearance data and sets it in the annotation. @param element XML element defining the stamp annotation @throws IOException if parsing or setting fails
2857 Constructs a FDFAnnotationSquare from an XML element. @param element XML element containing annotation data @throws IOException if parsing fails or invalid data is provided
2858 Initializes a free text annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or malformed
2859 Initializes an FDFAnnotationInk from an XML element. @param element XML element containing ink annotation data @throws IOException if required elements are missing or parsing fails
2860 Initializes a line annotation from an XML element. @param element XML element containing line annotation data @throws IOException if required attributes are missing or invalid
2861 Initializes a hyperlink annotation from an XML element. @param element XML element representing the annotation @throws IOException if I/O error occurs during initialization
2862 Constructs a polygon annotation from an XML element. @param element XML element containing polygon data @throws IOException if vertex initialization fails
2863 Initializes a polyline annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or malformed
2864 Retrieves all annotations from the page. @return List of PDAnnotation objects @throws IOException if an error occurs during retrieval
2865 Imports a PDF page as a form XObject. @param sourceDoc source PDF document @param page page to import @return PDFormXObject representing the imported page @throws IOException if an error occurs during processing
2866 Constructs a PDFPrintable instance with specified options and centers pages. @param document the PDDocument to print @param scaling the Scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for printing quality
2867 Constructs a sound annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or malformed
2868 Begins a marked content sequence. @param tag the content tag @param properties optional content properties
2869 Renders a form XObject on the current page. @param form PDFormXObject to render @throws IOException if an I/O error occurs
2870 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
2871 Finds the destination page for this outline item. @param doc PDF document to search within @return PDPage object representing the destination or null if not found @throws IOException if an error occurs during retrieval
2872 Calculates the page size and initializes signature properties. @param document PDDocument object containing the PDF @param page 1-based index of the target page @throws IllegalArgumentException if page is less than 1
2873 Imports a page from another PDF document. @param page PDPage object to import @return Imported PDPage object @throws IOException if an error occurs during import
2874 Creates a PDF template with the specified page. @param page PDPage object to be added to the template @throws IOException if an I/O error occurs during template creation
2875 Creates a new PDFPageable instance with default settings. @param document the PDF document to be printed
2876 Initializes a new PDFPageable instance with default settings. @param document the PDF document to be printed @param orientation page orientation setting
2877 Constructs a new PDFPageable instance. @param document the PDF document to be printed @param orientation page orientation setting @param showPageBorder flag to display page borders
2878 Constructs a new PDFPageable instance with default centering. @param document the PDF document to be printed @param orientation page orientation setting @param showPageBorder flag to display page borders @param dpi rendering quality in dots per inch
2879 Loads a PDF document from a byte array. @param input byte array containing the PDF data @param password optional password for encrypted PDFs @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing
2880 Loads a PDF document from a file. @param file the PDF file to load @param password optional password for encrypted PDFs @return PDDocument representing the loaded PDF @throws IOException if an I/O error occurs
2881 Loads a PDF document from a specified file. @param file the PDF file to load @param password optional password for encrypted PDFs @param keyStore optional key store for decryption @param alias optional alias for decryption @return PDDocument representing the loaded PDF @throws IOException if an I/O error occurs
2882 Constructs an FDFAnnotationFileAttachment from an XML element. @param element The XML element containing annotation data. @throws IOException If any required attribute is missing or malformed.
2883 Sets the stroking color for PDF content. @param color PDColor object representing the new color @throws IOException if an I/O error occurs
2884 Retrieves the PDF document's trailer dictionary. Handles parsing, decryption, and rebuilding if necessary. @return COSDictionary containing the trailer @throws IOException if an I/O error occurs during processing
2885 Constructs a text markup annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
2886 Constructs an FDFAnnotationText from an XML element. @param element XML containing annotation data @throws IOException if required attributes are missing or malformed
2887 Sets visual signature properties. @param visSignatureProperties object containing signature details @throws IOException if an I/O error occurs during initialization
2888 Initializes a circular annotation from an XML element. @param element XML element containing annotation data @throws IOException if fringe initialization fails
2889 Removes a specified PDF page from the document. @param page the PDPage object to be removed
2890 Creates a PDImageXObject from a TIFF file. @param document PDF document to add the image to @param file source TIFF file @return PDImageXObject or null if extraction fails
2891 Retrieves string representation of a COSBase object. @param base the COSBase object to process @return string value or empty string if unsupported type
2892 Finds a child field by name in the AcroForm structure. @param name array of field names to search for @param nameIndex current index in the name array @return PDField object or null if not found
2893 Retrieves all fields from the form. @return List of PDField objects representing form fields
2894 Retrieves a Paint object for rendering PDF colors. @param color PDColor instance representing the color to render @return Paint object suitable for rendering @throws IOException if an I/O error occurs during pattern retrieval
2895 Determines a fallback font name based on PDFontDescriptor. @param fontDescriptor descriptor for the font @return fallback font name as a string
2896 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic, or null if descriptor is unavailable
2897 Splits paragraph text into lines based on font and width constraints. @param font PDF font used for text rendering @param fontSize size of the font @param width maximum line width in PDF units @return List of Line objects representing formatted text lines @throws IOException if an I/O error occurs during processing
2898 Retrieves and returns the value of the form field. Handles different COSBase types and throws an exception for unknown types. @return Value of the field or null if not set @throws IOException if an error occurs during retrieval
2899 Renders a glyph at the specified position using legacy calculations. @param textRenderingMatrix matrix for rendering the text @param font PDFont object representing the font @param code character code to render @param displacement vector for character positioning @throws IOException if an I/O error occurs
2900 Saves the PDF document to an output stream. @param output target OutputStream for saving the document @param compressParameters parameters for compression settings @throws IOException if an I/O error occurs during save process
2901 Notifies changes if the attribute value has changed. @param oldBase original attribute base @param newBase new attribute base
2902 Initializes the current page for rendering. @param page the PDF page to process @throws IllegalArgumentException if page is null
2903 Retrieves the bleed box of the page. @return PDRectangle representing the page's bleed dimensions or crop box if not set
2904 Retrieves the trim box of the PDF page. @return PDRectangle representing the trim dimensions or crop box if not set
2905 Retrieves the art box of the page. @return PDRectangle representing the page's art dimensions or crop box if not set
2906 Returns the rotated crop box of a PDF page. @param page PDPage object representing the PDF page @return PDRectangle with adjusted dimensions based on rotation
2907 Writes a PDF document from a COSDocument. @param doc the underlying COSDocument representing the PDF @throws IOException if I/O error occurs during writing
2908 Retrieves rich text value of the field. @return Rich text as String or null if not found
2909 Retrieves the "Before" JavaScript action from the FDF dictionary. @return The JavaScript string or null if not found
2910 Retrieves the "After" JavaScript action from the FDF dictionary. @return The JavaScript code as a string, or null if not found
2911 Initializes a caret annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or malformed
2912 Loads ICC profile or falls back to alternate color space if necessary. Handles exceptions and ensures correct color space initialization.
2913 Initializes the COSWriterCompressionPool with a document and parameters. @param document PDDocument to compress @param parameters optional compression parameters @throws IOException if an I/O error occurs
2914 Sets the value of a single-valued choice field. @param value new value to set @throws IOException if an error occurs
2915 Initializes a Type5ShadingContext for PDF rendering. @param shading PDShadingType5 object defining the shading pattern @param cm ColorModel for color calculations @param xform AffineTransform for coordinate transformations @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the pixel area @throws IOException if initialization fails
2916 Initializes Type4ShadingContext for PDF rendering. @param shading PDShadingType4 object defining the shading pattern @param cm ColorModel for color calculations @param xform AffineTransform for coordinate transformations @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device area @throws IOException if initialization fails
2917 Initializes a new PatchMeshesShadingContext for PDF rendering. @param shading PDMeshBasedShadingType object to be rendered @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining device bounds @param controlPoints number of control points in the patch @throws IOException if initialization fails or resources cannot be managed
2918 Retrieves or initializes interpolated sample values. @return 2D array of integer samples for interpolation
2919 Converts PDF stream to byte array. @return byte array containing PDF data @throws IOException if reading fails
2920 Creates a LayoutPage from a given PDF page. @param page PDPage object to be processed @return LayoutPage with combined content and resources @throws IOException if an I/O error occurs
2921 Retrieves string representation from COSBase. Handles COSString and COSStream, returning empty string for other types. @param base the COSBase object to process @return String value or empty if not applicable
2922 Retrieves rich content of the annotation. @return String representation of rich content or null if not applicable
2923 Retrieves the JavaScript action string. @return JavaScript code as a String or null if not found
2924 Handles and displays a transparency group from a PDF. @param form PDTransparencyGroup to be processed @throws IOException if an I/O error occurs during processing
2925 Retrieves child fields of the non-terminal field. @return List of PDField objects representing child fields
2926 Renders a Type 3 glyph using the provided matrix and font. @param textRenderingMatrix matrix for text rendering @param font PDType3Font object containing character procedures @param code character code to be rendered @param displacement vector for additional positioning @throws IOException if an I/O error occurs during processing
2927 Constructs a PDFontDescriptor from FontMetrics. @param metrics FontMetrics object containing font details @return Configured PDFontDescriptor instance
2928 Builds a PDFontDescriptor for a Type 1 font. @param type1 the Type 1 font to process @return PDFontDescriptor configured with font metrics and properties
2929 Retrieves labels for all pages in the document. @return array of page labels corresponding to page indices
2930 Generates a map of page labels to their indices. @return Map with page labels as keys and indices as values
2931 Removes a page from the PDF document by its number. @param pageNumber 1-based index of the page to remove
2932 Renders a form XObject on the current page. @param form PDF form to render @throws IOException if an I/O error occurs during rendering
2933 Creates a PDFontDescriptor for a TrueType font. @param ttf TrueTypeFont object to process @return PDFontDescriptor with configured properties @throws IOException if required font tables are missing
2934 Retrieves the normal appearance of a PDF annotation as a content stream. @param compress whether to enable compression on the output stream @return PDAppearanceContentStream object for drawing the normal appearance @throws IOException if an I/O error occurs
2935 Creates a PDImageXObject from image data in a byte array. @param document PDF document to add the image to @param byteArray source of image data @return PDImageXObject or null if extraction fails
2936 Processes a tiling pattern using its default matrix. @param tilingPattern the tiling pattern to process @param color the color for non-colored patterns @param colorSpace the color space to use @throws IOException if an I/O error occurs during processing
2937 Constructs a PDPageContentStream for PDF page manipulation. @param document PDF document to add content to @param sourcePage existing PDF page as source @throws IOException if an I/O error occurs
2938 Renders a PDF annotation by processing its appearance. @param annotation the PDF annotation to render @throws IOException if an I/O error occurs during rendering
2939 Processes a transparency group with a soft mask. @param group PDTransparencyGroup to be processed @throws IOException if an I/O error occurs
2940 Initializes PDF form field appearance. @param widget the annotation widget to configure @param appearanceCharacteristics visual characteristics dictionary @param appearanceStream stream for appearance content @throws IOException if I/O operations fail
2941 Formats and displays text content with specified alignment and optional line wrapping. @throws IOException if an I/O error occurs during processing
2942 Initializes a strikeout annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
2943 Constructs an underline annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
2944 Processes a PDF page for rendering. @param page the PDF page to process @throws IOException if an I/O error occurs while processing
2945 Processes a child content stream for a given PDF page. @param contentStream the PDF content stream to process @param page the PDF page associated with the content stream @throws IOException if an I/O error occurs while processing
2946 Initializes a new instance of PDVisibleSignDesigner with a specified PDF document, signature image, and page. @param document PDDocument object containing the PDF @param image BufferedImage to use for the signature @param page 1-based index of the target page
2947 Initializes signature designer with PDF document and image stream. @param document PDDocument object containing the PDF @param imageStream InputStream for the signature image @param page 1-based index of the target page @throws IOException if an I/O error occurs while reading the stream
2948 Constructs a PDFPrintable instance with specified options. @param document the PDDocument to print @param scaling the Scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown
2949 Writes font settings to the appearance content stream. @param contents PDF appearance content stream for customization @param zeroFontSize default font size if current is zero @throws IOException if an I/O error occurs during writing
2950 Loads a PDF document from a byte array without encryption. @param input byte array containing the PDF data @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing
2951 Retrieves byte array from XFA resource. Handles both COSArray and COSStream cases. @return byte array of XFA data or empty if not found @throws IOException if I/O error occurs
2952 Initializes a new Type7ShadingContext for PDF rendering. @param shading PDShadingType7 object to be rendered @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining device bounds @throws IOException if initialization fails or resources cannot be managed
2953 Constructs a Type6ShadingContext for PDF rendering. @param shading PDShadingType6 object to be rendered @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining device bounds @throws IOException if initialization fails or resources cannot be managed
2954 Appends a form as a new layer to the target page. @param targetPage the page to add the form to @param form the form object to append @param transform transformation applied to the form @param layerName name of the new optional content group @return PDOptionalContentGroup representing the created layer @throws IOException if an I/O error occurs
2955 Initializes a PDICCBased object from an ICC profile array. @param iccArray COSArray containing ICC profile data @throws IOException if there's an error processing the stream
2956 Performs recursive interpolation based on given coordinates and step index. @param coord array of coordinates for interpolation @param step current step index in the interpolation process @return interpolated float values as an array
2957 Retrieves rich text value from PDF variable text field. @return Rich text content as a string or empty if not set.
2958 Writes field and its children to XML. @param output Writer to write XML data @throws IOException if writing fails
2959 Retrieves rich content of the annotation. @return string representation of rich content or empty if not found
2960 Checks if XFA is dynamic in the form. @return true if XFA exists and no fields are present, false otherwise
2961 Retrieves a FontBoxFont by base name or fallback. @param baseFont the base font name @param fontDescriptor descriptor for the font @return FontMapping instance with found font or last resort font
2962 Retrieves a TrueType font by base name or fallback. @param baseFont original PostScript name of the font @param fontDescriptor descriptor for the font @return FontMapping with TrueTypeFont instance and fallback status
2963 Determines if the font is symbolic. Uses symbolic flag or encoding checks for standard fonts. @return Boolean indicating if the font is symbolic, or null if unsure
2964 Reads and sets the font encoding. Handles different encoding types and assigns glyph list. @throws IOException if an I/O error occurs
2965 Calculates the appropriate font size for text within a PDF form field. @param font the PDF font to be used @param contentRect the rectangle bounds of the content area @return the calculated font size @throws IOException if an I/O error occurs during processing
2966 Constructs a squiggly annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
2967 Initializes a Function Type 4 from a PDF stream. @param functionStream the COSBase object representing the PDF stream @throws IOException if there's an error reading the stream
2968 Constructs a highlight annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
2969 Loads and parses a PDF file without encryption. @param file PDF file to load @return PDDocument object or throws IOException on failure
2970 Saves the PDF document to a specified file. @param file target File for saving the document @param compressParameters parameters for compression settings @throws IOException if an I/O error occurs during save process
2971 Retrieves the page format for a specified PDF page. @param pageIndex 0-based index of the page @return PageFormat object with adjusted size and orientation
2972 Loads a PDF document from a specified file. @param file the PDF file to be loaded @param password password for encrypted PDFs (optional) @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
2973 Processes annotations from a PDF page. @param imported PDPage object to process annotations for @throws IOException if an error occurs during processing
2974 Saves the PDF document to an output stream with default compression. @param output target OutputStream for saving the document @throws IOException if an I/O error occurs during save process
2975 Retrieves the normal appearance of a PDF annotation as a content stream. @return PDAppearanceContentStream object for drawing the normal appearance @throws IOException if an I/O error occurs
2976 Opens the current outline node. If the node is not already open, it toggles its state and updates parent nodes.
2977 Closes the current outline node. If the node is open, it toggles its state and updates parent nodes.
2978 Retrieves and processes the first page of a PDF document as a layout page. @param doc PDDocument object containing the PDF pages @return LayoutPage representation of the first PDF page @throws IOException if an I/O error occurs during processing
2979 Renders a glyph from the specified font at the given position. @param textRenderingMatrix transformation matrix for rendering @param font the font containing the glyph @param code character code of the glyph to render @param displacement vector for additional positioning @throws IOException if an I/O error occurs during rendering
2980 Clones the structure tree from source to destination document. @param destinationDocument PDF document to receive the cloned structure @throws IOException if an I/O error occurs during cloning
2981 Updates structure parent entries for a PDF page. Adjusts structParents and annotations' structParent values by an offset. @param page the PDPage to update @param structParentOffset the offset to adjust struct parents @throws IOException if an error occurs during processing
2982 Writes the body of a PDF document in compressed form. @param document COSDocument to be written @throws IOException if an I/O error occurs
2983 Imports a page from the specified document as a form XObject. @param sourceDoc PDF document containing the page to import @param pageNumber 1-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an error occurs during processing
2984 Exports form data to an FDF document. @return FDFDocument containing exported form fields @throws IOException if an I/O error occurs
2985 Embeds a Type 1 font into a PDF document. @param doc the PDDocument to embed the font into @param dict the COSDictionary for the font descriptor @param pfbStream stream containing the PFB font data @param encoding character encoding for the font @throws IOException if an I/O error occurs
2986 Initializes TrueType font embedding in a PDF document. @param document PDDocument to embed the font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param embedSubset true if subsetting is enabled @throws IOException if embedding is not permitted or fails
2987 Initiates recursive interpolation. @return interpolated float values as an array
2988 Extracts and converts the matte array from a soft mask image. @param softMask PDImageXObject representing the soft mask @return float[] containing RGB values of the matte or null if invalid @throws IOException if an error occurs during extraction or conversion
2989 Processes a PDF page by setting rotation, size, and translation. @param page the PDF page to process @throws IOException if an I/O error occurs while processing
2990 Retrieves and parses the XFA document from the resource. @return parsed XML Document object @throws IOException if parsing fails or I/O error occurs
2991 Constructs a PDType1Font from a document and input stream. @param doc PDF document containing the font @param pfbIn InputStream for the PFB font file @param encoding character encoding for the font @throws IOException if there's an issue reading the font data
2992 Initializes a PDVisibleSignDesigner with a PDF source, image, and page. Sets the signature image and calculates the page size. @param documentSource source of the PDF data @param image the BufferedImage for the signature @param page 1-based index of the target page @throws IOException if an I/O error occurs
2993 Creates a PDFunction instance based on the provided COSBase object. @param function COSBase object representing the PDF function @return PDFunction object corresponding to the function type @throws IOException if there's an error in reading or processing the function
2994 Determines if the font is symbolic. Caches result for future calls. @return Boolean indicating if the font is symbolic, defaulting to true if unsure
2995 Checks if the given PDF form has dynamic XFA. @param acroForm the PDF form to check @return true if XFA is dynamic, false otherwise
2996 Constructs an FDFDictionary from XML. @param fdfXML root XML element of the FDF document
2997 Converts a BufferedImage to a PDImageXObject for PDF inclusion. Handles grayscale images separately. Uses predictor encoding if enabled. @param document target PDF document @param image source BufferedImage @return PDImageXObject instance ready for PDF inclusion @throws IOException if I/O operations fail
2998 Processes a PDF page for splitting. Handles resource import, annotation processing, and cleanup. @param page PDPage object to be processed @throws IOException if an error occurs during processing
2999 Embeds a TrueType font into a PDF document. @param document PDDocument to embed the font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @throws IOException if embedding fails
3000 Constructs a PDCIDFontType2Embedder for embedding CID fonts. @param document PDF document to embed into @param dict Font dictionary @param ttf TrueType font @param embedSubset Whether to subset the font @param parent Parent Type 0 font @param vertical Vertical text flag @throws IOException if an I/O error occurs
3001 Initializes a PDFont with the provided dictionary. @param fontDictionary the COSDictionary containing font information
3002 Creates a PDICCBased object from ICC profile array. @param iccArray COSArray containing ICC profile data @param resources PDResources for resource management @return PDICCBased color space instance @throws IOException if there's an error processing the stream
3003 Constructs a PDFPrintable instance with specified options. @param document the PDDocument to print @param scaling the Scaling option for rendering
3004 Renders a PDF page with annotations on a given graphics context. @param g Graphics2D object for rendering @param pageSize PDRectangle representing the page size @throws IOException if an error occurs during rendering
3005 Builds a PDF with integrated visual signatures based on provided properties. @param properties configuration for visible signature design @return InputStream containing the generated signed PDF document @throws IOException if I/O error occurs during PDF creation
3006 Saves the PDF document to a specified file with default compression. @param file target File for saving the document @throws IOException if an I/O error occurs during save process
3007 Saves PDF document to specified file with given compression settings. @param fileName target file path for saving the document @param compressParameters parameters for compression settings @throws IOException if an I/O error occurs during save process
3008 Generates the appearance stream for a given annotation widget. This method is responsible for creating the visual representation of a form field, including text, borders, and any special formatting like list boxes or comb fields. It resolves the bounding box for the widget, calculates padding based on border width, and sets up graphics states for clipping paths. The method handles different types of fields such as text fields and list boxes, ensuring that text is properly aligned and formatted within the content rectangle. Additionally, it checks for subsetted fonts and logs warnings if any issues are detected. @param widget The annotation widget for which to generate the appearance. @param appearanceStream The appearance stream where the generated content will be written. @param output The output stream to write the appearance content. @throws IOException If an error occurs during the generation of the appearance stream.
3009 Imports FDF field data into the PDF form field. @param fdfField FDF field containing import data @throws IOException if an error occurs during import
3010 Writes FDF document data to XML. @param output Writer to write XML data @throws IOException if writing fails
3011 Initializes a new PDVisibleSignDesigner with a PDF source, image stream, and target page. @param documentSource source of the PDF data @param imageStream InputStream containing the signature image @param page 1-based index of the target page @throws IOException if an I/O error occurs
3012 Draws an image on the PDF content stream. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs
3013 Initializes the iterator with fields from a PDF form. @param form PDAcroForm containing the interactive form fields
3014 Loads and parses a PDF file. @param file PDF file to load @return PDDocument object or throws IOException on failure
3015 Constructs an FDF catalog from XML. @param element root XML element of the FDF document
3016 Initializes a PDTrueTypeFont instance. @param document PDDocument to embed the font into @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @param closeTTF flag indicating whether to close the TTF after embedding @throws IOException if initialization fails
3017 Initializes a PDType0Font for embedding TrueType fonts in PDFs. @param document PDF document to embed into @param ttf TrueType font @param embedSubset Whether to subset the font @param closeTTF Whether to register or close the TrueType font @param vertical Vertical text flag @throws IOException if an I/O error occurs
3018 Initializes a PDType0Font from a font dictionary. Validates and processes descendant fonts and encodings. @param fontDictionary PDF dictionary containing font details @throws IOException if required data is missing or invalid
3019 Constructs a new PDSimpleFont instance from a COSDictionary. @param fontDictionary dictionary containing font properties
3020 Constructs a PDType1Font from a document and input stream using default encoding. @param doc PDF document containing the font @param pfbIn InputStream for the PFB font file @throws IOException if there's an issue reading the font data
3021 Initializes a PDVisibleSignDesigner with a PDF file and image stream. @param filename path to the PDF file @param imageStream InputStream containing the signature image @param page 1-based index of the target page in the PDF @throws IOException if there's an error reading the image or processing the PDF
3022 Initializes a new instance for designing a visible digital signature. @param filename path to the PDF file @param image BufferedImage representing the signature @param page 1-based index of the target page @throws IOException if there's an error loading or processing the PDF
3023 Renders a PDF page as an image. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @param imageType desired image type (e.g., ARGB) @param destination output destination for the rendered image @return BufferedImage representing the rendered PDF page @throws IOException if an error occurs during rendering
3024 Processes pages within a specified range for splitting. @throws IOException if an error occurs during processing
3025 Renders a PDF page to a graphics context with specified scaling and destination. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX scale factor along X-axis @param scaleY scale factor along Y-axis @param destination RenderDestination for output @throws IOException if an error occurs during rendering
3026 Constructs a PDFPrintable instance with default scaling. @param document the PDDocument to print
3027 Returns an iterator over the interactive form fields. @return Iterator of PDField objects
3028 Saves the PDF document to a specified file. @param fileName path where the document should be saved @throws IOException if an I/O error occurs during the save process
3029 Builds a visible signature for a PDF document. Initializes template creation, sets the signature stream, and integrates it into the PDF. @throws IOException if I/O error occurs during PDF processing
3030 Creates a PDImageXObject from a file based on its content. @param file source image file @param doc target PDF document @return PDImageXObject representing the image @throws IOException if file reading or processing fails
3031 Creates a PDImageXObject from a file based on its extension. @param file source image file @param doc target PDF document @return PDImageXObject instance for the image @throws IOException if I/O operations fail
3032 Retrieves the tint transformation function. Initializes if not already created. @return PDFunction object for tint transformation @throws IOException if there's an error in reading or processing the function
3033 Initializes a PDDeviceN instance for managing DeviceN color spaces. @param deviceN COSArray representing the DeviceN color space @param resources PDResources containing resource information @throws IOException if there's an error in initializing components
3034 Constructs a PDSeparation object from a COSArray and PDResources. Initializes color space and tint transform, validating parameter counts. @param separation COSArray representing the separation data @param resources PDResources for resource management @throws IOException if there's an error in initialization or validation
3035 Processes a PDF page, handling text extraction and formatting. @param page the PDPage object representing the current page @throws IOException if an I/O error occurs during processing
3036 Retrieves the array of PDFunction objects. @return PDFunction[] containing shading functions @throws IOException if there's an error creating functions
3037 Retrieves the shading function. @return PDFunction object or null if not found @throws IOException if there's an error in reading the function
3038 Evaluates input through a stitching function. @param input array of input values @return output values after function evaluation @throws IOException on error in function processing
3039 Writes FDF document data to XML. @param output Writer to write XML data @throws IOException if writing fails
3040 Retrieves a BufferedImage of the image object within a specified region and subsampling. Handles JPX values, soft masks, explicit masks, and caching for efficiency. @param region clipping rectangle for the image @param subsampling factor for subsampling @return BufferedImage representation of the image @throws IOException if an error occurs during processing
3041 Initializes a PDIndexed color space. @param indexedArray PDF array representing the indexed color space @param resources PDF resources @throws IOException if an error occurs during initialization
3042 Evaluates input values using linear interpolation. @param input array of input values @return array of interpolated output values
3043 Retrieves the transfer function for the soft mask. @return PDFunction object representing the transfer function or null if not set @throws IOException if there's an error in creating the PDFunction
3044 Retrieves the default Helvetica font. @return PDType1Font object for Helvetica
3045 Loads a Type 0 font into the PDF document. @param doc PDF document to load the font into @param ttf TrueType font to be embedded @param embedSubset Whether to subset the font @return PDType0Font object for further manipulation @throws IOException if an I/O error occurs
3046 Initializes a PDTrueTypeFont from a font dictionary. @param fontDictionary the COSDictionary representing the TrueType font @throws IOException if an error occurs during initialization
3047 Initializes a Type 1C font from a PDF dictionary. @param fontDictionary the COS dictionary containing font data @throws IOException if an error occurs during font initialization
3048 Initializes a PDType1Font from a COSDictionary. Handles embedded and fallback fonts, repairing length data if necessary. @param fontDictionary the font dictionary to initialize from @throws IOException if an I/O error occurs during font processing
3049 Initializes a new PDType3Font instance. @param fontDictionary dictionary containing font properties @param resourceCache cache for font resources @throws IOException if an I/O error occurs during initialization
3050 Loads a Type 0 font from a PDF document. @param doc PDF document to load into @param randomAccessRead source of TrueType font data @param embedSubset Whether to subset the font @param vertical Vertical text flag @return PDType0Font object or throws IOException on failure
3051 Loads a vertical Type 0 font for embedding in a PDF. @param doc PDF document to embed into @param ttf TrueType font @param embedSubset Whether to subset the font @return PDType0Font object configured for vertical text @throws IOException if an I/O error occurs
3052 Loads a TrueType font into a PDF document. @param doc PDDocument to embed the font into @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @return PDTrueTypeFont instance representing the loaded font @throws IOException if loading fails
3053 Loads a TrueType font from a PDF document. @param doc PDDocument to load the font into @param randomAccessRead source of the font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if loading fails
3054 Constructs an FDFDocument from a given XML document. @param doc XML document representing the FDF data @throws IOException if the root element is not 'xfdf'
3055 Creates a PDImageXObject from an image file path. @param imagePath path to the source image file @param doc target PDF document @return PDImageXObject instance for the image @throws IOException if I/O operations fail
3056 Renders a PDF page to a graphics context with specified scaling. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX scale factor along X-axis @param scaleY scale factor along Y-axis @throws IOException if an error occurs during rendering
3057 Renders a PDF page as an image with specified options. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @param imageType desired image type (e.g., ARGB) @return BufferedImage representing the rendered PDF page @throws IOException if an error occurs during rendering
3058 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects representing signature fields
3059 Refreshes appearances of all form fields. Iterates through the field tree, constructing appearances for terminal fields.
3060 Writes FDF document data to XML. @param output Writer to write XML data @throws IOException if writing fails
3061 Splits a PDF document into multiple smaller documents. @param document the original PDF document to split @return a list of PDDocument objects representing the split parts @throws IOException if an error occurs during splitting
3062 Constructs a PDIndexed color space with default resources. @param indexedArray PDF array representing the indexed color space @throws IOException if an error occurs during initialization
3063 Evaluates shading functions with given input. @param input array of input values for the function @return float[] containing evaluated results, clamped between 0 and 1 @throws IOException if there's an error evaluating functions
3064 Retrieves the full image without subsampling. @return BufferedImage representation of the image @throws IOException if an error occurs during processing
3065 Processes all pages in a PDF document, handling bookmarks and text extraction. @param pages PDPageTree containing the pages to process @throws IOException if an I/O error occurs during processing
3066 Creates a PDColorSpace from a COSBase object. @param colorSpace base object representing the color space @param resources PDF document resources @param wasDefault flag indicating if default color space is used @return PDColorSpace instance or throws IOException if creation fails
3067 Retrieves a form field by its fully qualified name. @param fullyQualifiedName the complete name of the field @return PDField object or null if not found
3068 Enables or disables caching of form fields. @param cache true to enable caching, false to disable
3069 Returns an iterator over form fields. @return Iterator of PDField objects in the PDF form
3070 Renders a PDF page as an image with specified scaling and default RGB type. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @return BufferedImage representing the rendered PDF page @throws IOException if an error occurs during rendering
3071 Renders a PDF page as an image with specified DPI. @param pageIndex index of the PDF page to render @param dpi desired dots per inch for rendering @return BufferedImage representing the rendered PDF page @throws IOException if an error occurs during rendering
3072 Renders a PDF page as an image with specified DPI. @param pageIndex index of the PDF page to render @param dpi desired dots per inch for rendering @param imageType desired image type (e.g., ARGB) @return BufferedImage representing the rendered PDF page at specified DPI @throws IOException if an error occurs during rendering
3073 Renders a PDF page to a graphics context with uniform scaling. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scale uniform scale factor for both X and Y axes @throws IOException if an error occurs during rendering
3074 Extracts a range of pages from the source PDF. @return A new PDDocument containing the extracted pages @throws IOException if an error occurs during extraction
3075 Saves FDF document data in XFDF format to a Writer. @param output Writer to write XFDF data @throws IOException if writing or closing fails
3076 Renders text from a byte array using current font and text state. @param string byte array containing text data @throws IOException if an I/O error occurs during rendering
3077 Loads a TrueType font from a PDF document using a file. @param doc PDDocument to load the font into @param file source file of the font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if loading fails
3078 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary the dictionary containing font data @throws IOException if an error occurs during initialization
3079 Loads a TrueType font from an input stream. @param doc PDDocument to load the font into @param input source of the font data as InputStream @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if loading fails
3080 Loads a Type 0 font from a PDF document. @param doc PDF document to load into @param file source of TrueType font data @return PDType0Font object or throws IOException on failure
3081 Loads an XFDF document from an input stream. @param input stream containing XFDF data @return FDFDocument object @throws IOException if parsing fails
3082 Loads a Type 0 font from an input stream. @param doc PDF document to load into @param input source of TrueType font data as InputStream @param embedSubset Whether to subset the font @return PDType0Font object or throws IOException on failure
3083 Loads a vertical Type 0 font from a PDF document. @param doc PDF document to load into @param file source of TrueType font data @return PDType0Font object or throws IOException on failure
3084 Loads a vertical Type 0 font from an input stream. @param doc PDF document to load into @param input source of TrueType font data @return PDType0Font object or throws IOException on failure
3085 Loads a vertical Type 0 font from an input stream. @param doc PDF document to load into @param input source of TrueType font data @param embedSubset Whether to subset the font @return PDType0Font object or throws IOException on failure
3086 Constructs a new PDType3Font instance. @param fontDictionary dictionary containing font properties @throws IOException if an I/O error occurs during initialization
3087 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @param options configuration options for the signature @throws IOException if an I/O error occurs during processing
3088 Writes extracted text from a PDF document to an output stream. @param doc PDF document to process @param outputStream destination for the extracted text @throws IOException if an I/O error occurs during processing
3089 Retrieves all signature dictionaries from the PDF document. @return List of PDSignature objects representing signature dictionaries
3090 Imports form data from an FDF document into the PDF form fields. @param fdf FDFDocument containing import data @throws IOException if an error occurs during import
3091 Evaluates shading function with a single input value. @param inputValue single input value for the function @return float[] containing evaluated result, clamped between 0 and 1 @throws IOException if there's an error evaluating functions
3092 Renders a transparency group on the given graphics context. Checks for hidden content and applies transformations before drawing. @param form PDTransparencyGroup to render @param graphics Graphics2D context for rendering @throws IOException on error during processing
3093 Retrieves and applies soft mask to the non-stroking paint. @return Paint object with applied soft mask or original if no mask is applicable @throws IOException on error during processing
3094 Evaluates shading function and converts to RGB. @param values input values for the function @return RGB color value as an integer @throws IOException if there's an error in evaluation or conversion
3095 Renders a PDF page as an image with default scaling. @param pageIndex index of the PDF page to render @return BufferedImage representing the rendered PDF page @throws IOException if an error occurs during rendering
3096 Loads a Type 0 font from an input stream with embedding. @param doc PDF document to load into @param input source of TrueType font data as InputStream @return PDType0Font object or throws IOException on failure
3097 Creates a PDFont object from a given COS dictionary. @param dictionary the PDF dictionary containing font information @param resourceCache cache for resources @return PDFont object created based on the font type and subtype @throws IOException if an I/O error occurs or unsupported font type is encountered
3098 Loads an XFDF document from a file. @param filename path to the XFDF file @return FDFDocument object @throws IOException if parsing fails
3099 Renders text from a byte array. @param string byte array containing text data @throws IOException if an I/O error occurs during rendering
3100 Loads an XFDF document from a file. @param file input file containing XFDF data @return FDFDocument object @throws IOException if parsing fails
3101 Renders a PDF page to a graphics context with default scaling. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @throws IOException if an error occurs during rendering
3102 Renders text strings from a PDF array. @param array COSArray containing text and spacing data @throws IOException if an I/O error occurs during rendering
3103 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @param options configuration options for the signature @throws IOException if an I/O error occurs during processing
3104 Retrieves the last signature dictionary from the PDF document. @return PDSignature object or null if no signatures exist
3105 Prepares document for external signing. @param output stream to save the PDF @return ExternalSigningSupport object @throws IOException if I/O error occurs during preparation
3106 Extracts text from a PDF document. @param doc PDF document to process @return extracted text as a string @throws IOException if an I/O error occurs during processing
3107 Adds a digital signature to the PDF document using default options. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @throws IOException if an I/O error occurs during processing
3108 Saves FDF document data in XFDF format to a file. @param fileName file where XFDF data will be saved @throws IOException if writing or closing fails
3109 Draws a glyph on the PDF page. @param path the shape representing the glyph @param font the font used for rendering @param code the character code of the glyph @param displacement vector for positioning @param at transformation matrix @throws IOException on error during processing
3110 Adds a digital signature to the PDF document using default options. @param sigObject PDSignature object representing the signature @throws IOException if an I/O error occurs during processing
3111 Creates a PDFont object from a COS dictionary. @param dictionary the PDF dictionary containing font information @return PDFont object created based on the font type and subtype @throws IOException if an I/O error occurs or unsupported font type is encountered
3112 Retrieves a PDFont object by name. @param name unique identifier for the font resource @return PDFont object or null if not found @throws IOException if an I/O error occurs or unsupported font type is encountered
3113 Fills and strokes the current path on the PDF page. @param windingRule rule for shape filling (e.g., EVEN_ODD, NON_ZERO) @throws IOException if an error occurs during processing
3114 Saves FDF document data in XFDF format to a specified file. @param fileName path where XFDF data will be saved @throws IOException if writing or closing fails
3115 Flattens all interactive form fields in the PDF document. Skips flattening if XFA is dynamic.
3116 Copies necessary resources to the specified appearance stream. Ensures the font is added if not already present. @param appearanceStream target stream for resource copying @throws IOException if an I/O error occurs
3117 Appends the pages and other resources from a source PDF document to this destination PDF document. This method performs several key operations: 1. Merges metadata and other catalog-level information. 2. Clones and adds all pages from the source document to the end of the destination document. 3. Updates structural parent numbers if merging logical structure trees is required. 4. Handles annotations, resources, and other page-related objects. Before starting the merge process, it checks whether both source and destination documents are open, ensuring that they are not closed during the operation. It also ensures that the source document does not contain dynamic XFA forms or interactive form fields (AcroForms), as these are not supported in this method. The merging of logical structure trees is optional and depends on whether both documents have a structure tree root. If so, it clones the entire structure tree from the source document into the destination document, updating parent tree numbers to avoid conflicts. After all pages are added and resources are cloned, this method updates page references in the logical structure tree if necessary, ensuring that the tagging information remains consistent. @param destPDDocument The destination PDF document where the source content will be appended. @param srcPDDocument The source PDF document from which pages and other resources will be copied. @throws IOException If an error occurs during the merging process or if either document is closed.
3118 Converts PNG image data to a PDF-compatible format. @param doc PDF document to add the image @param imageData byte array containing PNG data @return PDImageXObject or null if conversion fails
3119 Retrieves the PDFont object from the font settings. @return PDFont object or null if not found @throws IOException if an I/O error occurs during font creation
3120 Sets the appearance content for a widget by updating its appearance stream. Copies resources, replaces existing content, and inserts new field contents. @param widget The annotation widget to update. @param appearanceStream The appearance stream to modify. @throws IOException If an I/O error occurs during processing.
3121 Creates a PDImageXObject from byte array. @param document PDF document to add the image to @param byteArray source of image data @param name image name for error messages @param customFactory optional custom factory for specific formats @return PDImageXObject instance or throws IllegalArgumentException if unsupported @throws IOException if I/O operations fail
3122 Copies graphics state properties into the provided PDGraphicsState. @param gs target PDGraphicsState to copy properties into @throws IOException if an I/O error occurs during font creation or processing
3123 Processes appearance string operators for font and color settings. @param content PDF content as a byte array @throws IOException if an I/O error occurs during parsing
3124 Creates a PDImageXObject from a byte array. @param document PDF document to add the image to @param byteArray source of image data @param name image name for error messages @return PDImageXObject instance or throws IllegalArgumentException if unsupported @throws IOException if I/O operations fail
3125 Initializes PDDefaultAppearanceString with appearance and resource settings. @param defaultAppearance PDF appearance string @param defaultResources resources for the appearance @throws IOException if an I/O error occurs during initialization
3126 Retrieves default appearance string for the form. @return PDDefaultAppearanceString object representing default text appearance @throws IOException if an I/O error occurs during retrieval
3127 Sets the appearance value for a form field. Handles multiline text and updates widget appearances. @param apValue original appearance value @throws IOException if I/O operations fail
3128 Initializes the AppearanceGeneratorHelper for a variable text field. Validates resources and retrieves default appearance settings. @param field PDVariableText object representing the form field @throws IOException if an I/O error occurs during initialization
