1 @param value The textMatrix to set.
2 @param value The textLineMatrix to set.
3 Sets the non-stroking color. @param color The new non-stroking color.
4 Sets the stroking color. @param color The new stroking color.
5 Called when an exception is thrown by an operator. @param operator The unknown operator. @param operands The list of operands. @param exception the excpetion which occured when processing the operator @throws IOException if there is an error processing the operator exception
6 @return Returns the textMatrix.
7 Convenience method to create a scaled instance. Produces the following matrix: x 0 0 0 y 0 0 0 1 @param x The xscale operator. @param y The yscale operator. @return A new matrix with just the x/y scaling
8 Convenience method to create a translating instance. Produces the following matrix: 1 0 0 0 1 0 x y 1 @param x The x translating operator. @param y The y translating operator. @return A new matrix with just the x/y translating.
9 Convenience method to create a rotated instance. @param theta The angle of rotation measured in radians @param tx The x translation. @param ty The y translation. @return A new matrix with the rotation and the x/y translating.
10 @return Returns the textLineMatrix.
11 Transforms a point using the CTM. @param x the x-coordinate of the point to be transformed @param y the y-coordinate of the point to be transformed @return the transformed point
12 Transforms a width using the CTM. @param width the width to be transformed @return the transformed width
13 Return the direction/orientation of the string in this object based on its text matrix. Only angles of 0, 90, 180, or 270 are supported. To get other angles, use this code: <pre> TextPosition text = ... Matrix m = text.getTextMatrix().clone(); m.concatenate(text.getFont().getFontMatrix()); int angle = (int) Math.round(Math.toDegrees(Math.atan2(m.getShearY(), m.getScaleY()))); </pre> @return The direction of the text (0, 90, 180, or 270).
14 @param value The textMatrix to set.
15 @param value The textLineMatrix to set.
16 Sets the non-stroking color. @param color The new non-stroking color.
17 Sets the stroking color. @param color The new stroking color.
18 Called when an exception is thrown by an operator. @param operator The unknown operator. @param operands The list of operands. @param exception the excpetion which occured when processing the operator @throws IOException if there is an error processing the operator exception
19 @return Returns the textMatrix.
20 Convenience method to create a scaled instance. Produces the following matrix: x 0 0 0 y 0 0 0 1 @param x The xscale operator. @param y The yscale operator. @return A new matrix with just the x/y scaling
21 Convenience method to create a translating instance. Produces the following matrix: 1 0 0 0 1 0 x y 1 @param x The x translating operator. @param y The y translating operator. @return A new matrix with just the x/y translating.
22 Convenience method to create a rotated instance. @param theta The angle of rotation measured in radians @param tx The x translation. @param ty The y translation. @return A new matrix with the rotation and the x/y translating.
23 @return Returns the textLineMatrix.
24 Transforms a point using the CTM. @param x the x-coordinate of the point to be transformed @param y the y-coordinate of the point to be transformed @return the transformed point
25 Transforms a width using the CTM. @param width the width to be transformed @return the transformed width
26 Return the direction/orientation of the string in this object based on its text matrix. Only angles of 0, 90, 180, or 270 are supported. To get other angles, use this code: <pre> TextPosition text = ... Matrix m = text.getTextMatrix().clone(); m.concatenate(text.getFont().getFontMatrix()); int angle = (int) Math.round(Math.toDegrees(Math.atan2(m.getShearY(), m.getScaleY()))); </pre> @return The direction of the text (0, 90, 180, or 270).
27 This is used to create/cache operators in the system. @param operator The operator for the system. @return The operator that matches the operator keyword.
28 Returns the non-stroking color. @return The non-stroking color.
29 Returns the non-stroking color space. @return The non-stroking color space.
30 Returns the stroking color. @return The stroking color.
31 Returns the stroking color space. @return The stroking color space.
32 Creates a new marked content object. @param tag the tag @param properties the properties
33 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
34 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
35 This will return the paint type. @return The type of object that this is.
36 This will return the type. @return the type of object that this is
37 Returns the default value, if any. @return A non-null string.
38 Unchecks the check box. @throws IOException if the appearance couldn't be generated.
39 This is used to create/cache operators in the system. @param operator The operator for the system. @return The operator that matches the operator keyword.
40 Returns the non-stroking color. @return The non-stroking color.
41 Returns the non-stroking color space. @return The non-stroking color space.
42 Constructor. @param aValue The boolean value.
43 Returns the stroking color. @return The stroking color.
44 Private constructor. This will limit the number of COSName objects that are created. @param aName The name of the COSName object.
45 Returns the stroking color space. @return The stroking color space.
46 Constructor.
47 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string. @param forceHex forces the hexadecimal presentation of the string if set to true
48 Creates a new marked content object. @param tag the tag @param properties the properties
49 Constructor.
50 Constructor. @param object The object that this encapsulates.
51 Constructor. @param object The object that this encapsulates. @param parser The parser to be used to load the object on demand
52 Constructor. @param key The object number of the encapsulated object. @param parser The parser to be used to load the object on demand
53 This will get the lower left x coordinate. @return The lower left x.
54 This will get the lower left y coordinate. @return The lower left y.
55 This will get the upper right x coordinate. @return The upper right x .
56 This will get the upper right y coordinate. @return The upper right y.
57 This will get the size of the font. @return The size of the font.
58 Returns the r value of the tristimulus. @return the R value.
59 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
60 Returns the g value of the tristimulus. @return the g value
61 Returns the b value of the tristimulus. @return the B value
62 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
63 Returns the x value of the tristimulus. @return the X value
64 This will return the paint type. @return The type of object that this is.
65 Returns the y value of the tristimulus. @return the Y value
66 This will return the type. @return the type of object that this is
67 Returns the z value of the tristimulus. @return the Z value
68 Returns the default value, if any. @return A non-null string.
69 Unchecks the check box. @throws IOException if the appearance couldn't be generated.
70 Get the value of the array as an integer, return the default if it does not exist. @param index The value of the array. @param defaultValue The value to return if the value is null. @return The value at the index or the defaultValue.
71 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
72 This will return the index of the entry or -1 if it is not found. @param object The object to search for. @return The index of the object or -1.
73 Create the COSArrayList specifying the List and the backing COSArray. <p>User of this constructor need to ensure that the entries in the List and the backing COSArray are matching i.e. the COSObject of the List entry is included in the COSArray. <p>If the number of entries in the List and the COSArray differ it is assumed that the List has been filtered. In that case the COSArrayList shall only be used for reading purposes and no longer for updating. @param actualList The list of standard java objects @param cosArray The COS array object to sync to.
74 Constructor. @param aValue The boolean value.
75 Performs exponential interpolation {@inheritDoc}
76 Private constructor. This will limit the number of COSName objects that are created. @param aName The name of the COSName object.
77 {@inheritDoc}
78 Constructor.
79 This will get the list of filters that are associated with this stream. The list is empty if there are none. @return A list of all encoding filters to apply to this stream.
80 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string. @param forceHex forces the hexadecimal presentation of the string if set to true
81 This will get the boolean value. @param value Parameter telling which boolean value to get. @return The single boolean instance that matches the parameter.
82 Write the given {@link COSBoolean} to the given stream. @param output The stream, that shall be written to. @param cosBoolean The content, that shall be written.
83 Constructor.
84 Copy Constructor. This will make a shallow copy of this dictionary. @param dict The dictionary to copy.
85 Constructor. @param object The object that this encapsulates.
86 {@inheritDoc}
87 Constructor. @param object The object that this encapsulates. @param parser The parser to be used to load the object on demand
88 This is a convenience method that will get the dictionary object that is expected to be a COSObject. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSObject.
89 Constructor. @param key The object number of the encapsulated object. @param parser The parser to be used to load the object on demand
90 This will get the lower left x coordinate. @return The lower left x.
91 This is a special case of getItem that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
92 This will get the lower left y coordinate. @return The lower left y.
93 Returns the number of recipients contained in the Recipients field of the dictionary. @return the number of recipients contained in the Recipients field.
94 This will get the upper right x coordinate. @return The upper right x .
95 returns the COSString contained in the Recipients field at position i. @param i the position in the Recipients field array. @return a COSString object containing information about the recipient number i.
96 This will get the upper right y coordinate. @return The upper right y.
97 @return the direction in which the specified transition effect shall move. It can be either a {@link COSInteger} or {@link COSName#NONE}. Default to {@link COSInteger#ZERO} @see PDTransitionDirection
98 This will get the size of the font. @return The size of the font.
99 This will get the keys of all metadata information fields for the document. @return all metadata key strings. @since Apache PDFBox 1.3.0
100 Returns the r value of the tristimulus. @return the R value.
101 Gets the attribute names. @return the attribute names
102 Returns the g value of the tristimulus. @return the g value
103 Copy all Trailer Information to this file. @param trailerDict dictionary to be added as trailer info
104 Returns the b value of the tristimulus. @return the B value
105 Returns the x value of the tristimulus. @return the X value
106 Tell if the dictionary is an info dictionary. @param dictionary the dictionary to be checked @return true if the given dictionary is an info dictionary
107 Returns the y value of the tristimulus. @return the Y value
108 Returns true if widths are present in the font descriptor. @return true if widths are present in the font descriptor
109 Returns the z value of the tristimulus. @return the Z value
110 Returns true if the missing widths entry is present in the font descriptor. @return true if the missing widths entry is present in the font descriptor
111 This will tell if the AcroForm has XFA content. @return true if the AcroForm is an XFA form
112 Get the value of the array as an integer, return the default if it does not exist. @param index The value of the array. @param defaultValue The value to return if the value is null. @return The value at the index or the defaultValue.
113 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
114 This will get an encoding by name. May return null. @param name The name of the encoding to get. @return The encoding that matches the name.
115 This will return the index of the entry or -1 if it is not found. @param object The object to search for. @return The index of the object or -1.
116 Create the COSArrayList specifying the List and the backing COSArray. <p>User of this constructor need to ensure that the entries in the List and the backing COSArray are matching i.e. the COSObject of the List entry is included in the COSArray. <p>If the number of entries in the List and the COSArray differ it is assumed that the List has been filtered. In that case the COSArrayList shall only be used for reading purposes and no longer for updating. @param actualList The list of standard java objects @param cosArray The COS array object to sync to.
117 This will get the selected index. <p> A RadioButton might have multiple same value options which are not selected jointly if they are not set in unison {@link #isRadiosInUnison()}.</p> <p> The method will return the first selected index or -1 if no option is selected.</p> @return the first selected index or -1.
118 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache @param parser Parser to be used to parse the document on demand
119 Performs exponential interpolation {@inheritDoc}
120 {@inheritDoc}
121 This will get the list of filters that are associated with this stream. The list is empty if there are none. @return A list of all encoding filters to apply to this stream.
122 Constructor. @param aFloat The primitive float object that this object wraps. @throws IOException If aFloat is not a float.
123 This will get the boolean value. @param value Parameter telling which boolean value to get. @return The single boolean instance that matches the parameter.
124 {@inheritDoc}
125 Write the given {@link COSBoolean} to the given stream. @param output The stream, that shall be written to. @param cosBoolean The content, that shall be written.
126 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
127 Copy Constructor. This will make a shallow copy of this dictionary. @param dict The dictionary to copy.
128 Uses the managed {@link #updateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on the managed {@link #updateInfo}. @see COSUpdateInfo @see COSIncrement
129 {@inheritDoc}
130 Get the update state for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @return the update state.
131 This is a convenience method that will get the dictionary object that is expected to be a COSObject. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSObject.
132 Returns a COSInteger instance with the given value. @param val integer value @return COSInteger instance
133 This is a special case of getItem that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
134 Returns the number of recipients contained in the Recipients field of the dictionary. @return the number of recipients contained in the Recipients field.
135 {@inheritDoc}
136 returns the COSString contained in the Recipients field at position i. @param i the position in the Recipients field array. @return a COSString object containing information about the recipient number i.
137 Write the given {@link COSInteger} to the given stream. @param output The stream, that shall be written to. @param cosInteger The content, that shall be written.
138 @return the direction in which the specified transition effect shall move. It can be either a {@link COSInteger} or {@link COSName#NONE}. Default to {@link COSInteger#ZERO} @see PDTransitionDirection
139 This will get the keys of all metadata information fields for the document. @return all metadata key strings. @since Apache PDFBox 1.3.0
140 Constructor. @param num The object number. @param gen The object generation number. @param index The index within a compressed object stream
141 Add an new entry to the XRef stream. @param entry new entry to be added
142 Gets the attribute names. @return the attribute names
143 Populate XRef HashMap of current XRef object. Will add an Xreftable entry that maps ObjectKeys to byte offsets in the file. @param objKey The objkey, with id and gen numbers @param offset The byte offset in this file
144 Copy all Trailer Information to this file. @param trailerDict dictionary to be added as trailer info
145 Tell if the dictionary is an info dictionary. @param dictionary the dictionary to be checked @return true if the given dictionary is an info dictionary
146 check the xref entries and write out the ranges. The format of the returned array is exactly the same as the pdf specification. See section 7.5.4 of ISO32000-1:2008, example 1 (page 40) for reference. <p> example: 0 1 2 5 6 7 8 10 <p> will create a array with follow ranges <p> 0 3 5 4 10 1 <p> this mean that the element 0 is followed by two other related numbers that represent a cluster of the size 3. 5 is follow by three other related numbers and create a cluster of size 4. etc. @param xRefEntriesList list with the xRef entries that was written @return a integer array with the ranges
147 Returns true if widths are present in the font descriptor. @return true if widths are present in the font descriptor
148 Returns true if the missing widths entry is present in the font descriptor. @return true if the missing widths entry is present in the font descriptor
149 Write the given {@link COSObjectKey} to the given stream. @param output The stream, that shall be written to. @param indirectReference The content, that shall be written.
150 This will tell if the AcroForm has XFA content. @return true if the AcroForm is an XFA form
151 Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. @param xReferenceEntry the object to be compared. @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
152 Returns a new InputStream which reads the encoded PDF stream data. Experts only! @return InputStream containing raw, encoded PDF stream data. @throws IOException If the stream could not be read.
153 This will get an encoding by name. May return null. @param name The name of the encoding to get. @return The encoding that matches the name.
154 Returns a new OutputStream for writing encoded PDF data. Experts only! @return OutputStream for raw PDF stream data. @throws IOException If the output stream could not be created.
155 This will get the selected index. <p> A RadioButton might have multiple same value options which are not selected jointly if they are not set in unison {@link #isRadiosInUnison()}.</p> <p> The method will return the first selected index or -1 if no option is selected.</p> @return the first selected index or -1.
156 This will get the list of filters that are associated with this stream. @return A (possibly empty) list of all encoding filters to apply to this stream, never null.
157 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache @param parser Parser to be used to parse the document on demand
158 Returns the list of filters.
159 Creates a new <i>text string</i> from a Java String. @param text The string value of the object. @param forceHex forces the hexadecimal presentation of the string if set to true
160 Decodes a hex String into a byte array. @param s A String with ASCII hex. @return decoded byte array.
161 Constructor. @param aFloat The primitive float object that this object wraps. @throws IOException If aFloat is not a float.
162 Returns the content of this string as a PDF <i>text string</i>. @return the PDF string representation of the COSString
163 {@inheritDoc}
164 Returns {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @return {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @see #originDocumentState @see COSDocumentState#isAcceptingUpdates()
165 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
166 Uses the managed {@link #updateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on the managed {@link #updateInfo}. @see COSUpdateInfo @see COSIncrement
167 Get the update state for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @return the update state.
168 Returns a COSInteger instance with the given value. @param val integer value @return COSInteger instance
169 {@inheritDoc}
170 Write the given {@link COSInteger} to the given stream. @param output The stream, that shall be written to. @param cosInteger The content, that shall be written.
171 Constructor. @param num The object number. @param gen The object generation number. @param index The index within a compressed object stream
172 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param len The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
173 Add an new entry to the XRef stream. @param entry new entry to be added
174 This will write a single byte. @param b The byte to write. @throws IOException If there is an error writing to the stream.
175 Populate XRef HashMap of current XRef object. Will add an Xreftable entry that maps ObjectKeys to byte offsets in the file. @param objKey The objkey, with id and gen numbers @param offset The byte offset in this file
176 This will flush the data to the stream. @throws IOException If there is an error writing the data to the stream.
177 check the xref entries and write out the ranges. The format of the returned array is exactly the same as the pdf specification. See section 7.5.4 of ISO32000-1:2008, example 1 (page 40) for reference. <p> example: 0 1 2 5 6 7 8 10 <p> will create a array with follow ranges <p> 0 3 5 4 10 1 <p> this mean that the element 0 is followed by two other related numbers that represent a cluster of the size 3. 5 is follow by three other related numbers and create a cluster of size 4. etc. @param xRefEntriesList list with the xRef entries that was written @return a integer array with the ranges
178 Write the given {@link COSObjectKey} to the given stream. @param output The stream, that shall be written to. @param indirectReference The content, that shall be written.
179 Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. @param xReferenceEntry the object to be compared. @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
180 Returns a new InputStream which reads the encoded PDF stream data. Experts only! @return InputStream containing raw, encoded PDF stream data. @throws IOException If the stream could not be read.
181 Returns a new OutputStream for writing encoded PDF data. Experts only! @return OutputStream for raw PDF stream data. @throws IOException If the output stream could not be created.
182 This will get the list of filters that are associated with this stream. @return A (possibly empty) list of all encoding filters to apply to this stream, never null.
183 Returns the list of filters.
184 Creates a new <i>text string</i> from a Java String. @param text The string value of the object. @param forceHex forces the hexadecimal presentation of the string if set to true
185 Decodes a hex String into a byte array. @param s A String with ASCII hex. @return decoded byte array.
186 Returns the content of this string as a PDF <i>text string</i>. @return the PDF string representation of the COSString
187 Returns {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @return {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @see #originDocumentState @see COSDocumentState#isAcceptingUpdates()
188 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param x x-coordinate of the top-left corner of the region to be decoded @param y y-coordinate of the top-left corner of the region to be decoded @param width Width of the region to be decoded @param height Height of the region to be decoded
189 Finds a suitable image reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
190 Finds a suitable image raster reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
191 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
192 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param length The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
193 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param len The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
194 This will write a single byte. @param b The byte to write. @throws IOException If there is an error writing to the stream.
195 {@inheritDoc}
196 This will flush the data to the stream. @throws IOException If there is an error writing the data to the stream.
197 Decodes a single line of data in-place. @param predictor Predictor value for the current line @param colors Number of color components, from decode parameters. @param bitsPerComponent Number of bits per components, from decode parameters. @param columns Number samples in a row, from decode parameters. @param actline Current (active) line to decode. Data will be decoded in-place, i.e. - the contents of this buffer will be modified. @param lastline The previous decoded line. When decoding the first line, this parameter should be an empty byte array of the same length as <code>actline</code>.
198 Creates a new instance. @param targetDoc the PDF document to modify
199 This will set the BBox (bounding box) for this form. @param bbox The new BBox for this form.
200 Add a source file to the list of files to merge. @param source Full path and file name of source document. @throws FileNotFoundException If the file doesn't exist
201 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
202 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
203 Returns the stream. @return The stream for this object.
204 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
205 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param x x-coordinate of the top-left corner of the region to be decoded @param y y-coordinate of the top-left corner of the region to be decoded @param width Width of the region to be decoded @param height Height of the region to be decoded
206 Returns the stream. {@inheritDoc}
207 Finds a suitable image reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
208 Returns the metadata stream for this object, or null if there is no metadata stream. @return the metadata stream, or null if there is none
209 Sets the metadata stream that is associated with this color space. @param metadata the new metadata stream
210 Finds a suitable image raster reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
211 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
212 Check if the widget already exists in the annotation list. @param annotations the list of PDAnnotation fields. @param widget the annotation widget. @return true if the widget already existed in the annotation list, false if not.
213 {@inheritDoc}
214 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param length The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
215 Check if the field already exists in the field list. @param fieldIterator iterator on all fields. @param signatureField the signature field. @return true if the field already existed in the field list, false if not.
216 {@inheritDoc}
217 Constructor. @param pdContentstream The content stream to parse. @throws IOException If there is an error initializing the stream.
218 Constructor. @param bytes the bytes to parse.
219 This will tell if the next byte is a digit or not. @return true if the next byte in the stream is a digit. @throws IOException If there is an error reading from the stream.
220 Decodes a single line of data in-place. @param predictor Predictor value for the current line @param colors Number of color components, from decode parameters. @param bitsPerComponent Number of bits per components, from decode parameters. @param columns Number samples in a row, from decode parameters. @param actline Current (active) line to decode. Data will be decoded in-place, i.e. - the contents of this buffer will be modified. @param lastline The previous decoded line. When decoding the first line, this parameter should be an empty byte array of the same length as <code>actline</code>.
221 This method is used to read a token by the {@linkplain #readInt()} and the {@linkplain #readLong()} method. Valid delimiters are any non digit values. @return the token to parse as integer or long by the calling method. @throws IOException throws by the {@link #source} methods.
222 Creates a new instance. @param targetDoc the PDF document to modify
223 This will set the BBox (bounding box) for this form. @param bbox The new BBox for this form.
224 Add a source file to the list of files to merge. @param source Full path and file name of source document. @throws FileNotFoundException If the file doesn't exist
225 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
226 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
227 Returns the stream. @return The stream for this object.
228 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
229 Returns the stream. {@inheritDoc}
230 Returns the metadata stream for this object, or null if there is no metadata stream. @return the metadata stream, or null if there is none
231 This will tell if the next byte is a space or not. @return true if the next byte in the stream is a space character. @throws IOException If there is an error reading from the stream.
232 Sets the metadata stream that is associated with this color space. @param metadata the new metadata stream
233 Skip one line break, such as CR, LF or CRLF. @param linebreak the first character to be checked. @return true if a line break was found and removed. @throws IOException if something went wrong
234 Check if the widget already exists in the annotation list. @param annotations the list of PDAnnotation fields. @param widget the annotation widget. @return true if the widget already existed in the annotation list, false if not.
235 This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this format: /Title ( (5) /Creator which was patched in 1 place. However it missed the case where the number of opening and closing parenthesis isn't balanced The second bug was in this format /Title (c:\) /Producer @param bracesParameter the number of braces currently open. @return the corrected value of the brace counter @throws IOException
236 {@inheritDoc}
237 This will tell if the next byte to be read is an end of line byte. @param c The character to check against end of line @return true if the next byte is 0x0A or 0x0D.
238 Check if the field already exists in the field list. @param fieldIterator iterator on all fields. @param signatureField the signature field. @return true if the field already existed in the field list, false if not.
239 This will tell if the next byte is whitespace or not. @return true if the next byte in the stream is a whitespace character. @throws IOException If there is an error reading from the stream.
240 This will parse the startxref section from the stream. The startxref value is ignored. @return the startxref value or -1 on parsing error @throws IOException If an IO error occurs.
241 Constructor. @param pdContentstream The content stream to parse. @throws IOException If there is an error initializing the stream.
242 Constructor. @param bytes the bytes to parse.
243 Brute force search for the last EOF marker. @throws IOException if something went wrong
244 Brute force search for all xref entries (tables). @throws IOException if something went wrong
245 This will tell if the next byte is a digit or not. @return true if the next byte in the stream is a digit. @throws IOException If there is an error reading from the stream.
246 Brute force search for all /XRef entries (streams). @throws IOException if something went wrong
247 Returns the resulting cross reference table. @return
248 This method is used to read a token by the {@linkplain #readInt()} and the {@linkplain #readLong()} method. Valid delimiters are any non digit values. @return the token to parse as integer or long by the calling method. @throws IOException throws by the {@link #source} methods.
249 Looks for and parses startxref. We first look for last '%%EOF' marker (within last {@link #DEFAULT_TRAIL_BYTECOUNT} bytes (or range set via {@link #setEOFLookupRange(int)}) and go back to find <code>startxref</code>. @return the offset of StartXref @throws IOException If something went wrong.
250 This method will read through the current stream object until we find the keyword "endstream" meaning we're at the end of this object. Some pdf files, however, forget to write some endstream tags and just close off objects with an "endobj" tag so we have to handle this case as well. This method is optimized using buffered IO and reduced number of byte compare operations. @param out stream we write out to. @throws IOException if something went wrong
251 Search for/parse the object with the given object number. The stream is closed after parsing the object with the given number. @param objectNumber the number of the object to b e parsed @return the parsed object or null if the object with the given number can't be found @throws IOException if there is an error while parsing the stream
252 Read all object numbers from the compressed object stream. The stream is closed after reading the object numbers. @return a map off all object numbers and the corresponding offset within the object stream. @throws IOException if there is an error while parsing the stream
253 Parse all compressed objects. The stream is closed after parsing. @return a map containing all parsed objects using the object number as key @throws IOException if there is an error while parsing the stream
254 Checks if the next char is a space or a return. @return true if the next char is a space or a return @throws IOException if something went wrong
255 This will parse the trailer from the stream and add it to the state. @return false on parsing error @throws IOException If an IO error occurs.
256 Signals that a new XRef object (table or stream) starts. @param startBytePos the offset to start at @param type the type of the Xref object
257 Reset all data so that it can be used to rebuild the trailer.
258 This will tell if the next byte is a space or not. @return true if the next byte in the stream is a space character. @throws IOException If there is an error reading from the stream.
259 Sets the given {@link COSObjectKey} as a free reference in a PDF's crossreference stream ({@link PDFXRefStream}). @param key The key, that shall be set as the free reference of the document. @param nextFreeObject The object number of the next free object.
260 Skip one line break, such as CR, LF or CRLF. @param linebreak the first character to be checked. @return true if a line break was found and removed. @throws IOException if something went wrong
261 Prepares a object stream entry reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param objectStreamIndex The index of the {@link COSObject} in the containing object stream. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry. @param parentKey The {@link COSObjectKey} of the object stream, that is containing the object.
262 This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this format: /Title ( (5) /Creator which was patched in 1 place. However it missed the case where the number of opening and closing parenthesis isn't balanced The second bug was in this format /Title (c:\) /Producer @param bracesParameter the number of braces currently open. @return the corrected value of the brace counter @throws IOException
263 Returns the value for the first column of the crossreference stream entry. (The numeric representation of this entry's (The numeric representation of this entry's {@link XReferenceType}.) @return The value for the first column of the crossreference stream entry.
264 This will tell if the next byte to be read is an end of line byte. @param c The character to check against end of line @return true if the next byte is 0x0A or 0x0D.
265 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
266 This will tell if the next byte is whitespace or not. @return true if the next byte in the stream is a whitespace character. @throws IOException If there is an error reading from the stream.
267 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
268 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set next free {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
269 Returns the value for the second column of the crossreference stream entry. (This is byte offset of the {@link COSObject} in the PDF file - for entries of this type.) @return The value for the second column of the crossreference stream entry.
270 This will parse the startxref section from the stream. The startxref value is ignored. @return the startxref value or -1 on parsing error @throws IOException If an IO error occurs.
271 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
272 Brute force search for the last EOF marker. @throws IOException if something went wrong
273 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
274 Returns the value for the second column of the crossreference stream entry. (This is object number from the {@link COSObjectKey} of the object stream, that is containing the object represented by this entry - for entries of this type..) @return The value for the second column of the crossreference stream entry.
275 Brute force search for all xref entries (tables). @throws IOException if something went wrong
276 Returns the value for the third column of the crossreference stream entry. (This is index of the {@link COSObject} in the containing object stream - for entries of this type.) @return The value for the third column of the crossreference stream entry.
277 Brute force search for all /XRef entries (streams). @throws IOException if something went wrong
278 This will write some byte to the stream. @param b The source byte array. @param off The offset into the array to start writing. @param len The number of bytes to write. @throws IOException If the underlying stream throws an exception.
279 Returns the resulting cross reference table. @return
280 This will write a single byte to the stream. @param b The byte to write to the stream. @throws IOException If there is an error writing to the underlying stream.
281 Looks for and parses startxref. We first look for last '%%EOF' marker (within last {@link #DEFAULT_TRAIL_BYTECOUNT} bytes (or range set via {@link #setEOFLookupRange(int)}) and go back to find <code>startxref</code>. @return the offset of StartXref @throws IOException If something went wrong.
282 This will write an EOL to the stream. @throws IOException If there is an error writing to the stream
283 This method will read through the current stream object until we find the keyword "endstream" meaning we're at the end of this object. Some pdf files, however, forget to write some endstream tags and just close off objects with an "endobj" tag so we have to handle this case as well. This method is optimized using buffered IO and reduced number of byte compare operations. @param out stream we write out to. @throws IOException if something went wrong
284 COSWriter constructor. @param outputStream The output stream to write the PDF. @param compressParameters The configuration for the document's compression.
285 COSWriter constructor for incremental updates. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data @throws IOException if something went wrong
286 Search for/parse the object with the given object number. The stream is closed after parsing the object with the given number. @param objectNumber the number of the object to b e parsed @return the parsed object or null if the object with the given number can't be found @throws IOException if there is an error while parsing the stream
287 Returns true, if the resulting document shall be compressed. @return True, if the resulting document shall be compressed.
288 Read all object numbers from the compressed object stream. The stream is closed after reading the object numbers. @return a map off all object numbers and the corresponding offset within the object stream. @throws IOException if there is an error while parsing the stream
289 add an entry in the x ref table for later dump. @param entry The new entry to add.
290 Parse all compressed objects. The stream is closed after parsing. @return a map containing all parsed objects using the object number as key @throws IOException if there is an error while parsing the stream
291 Checks if the next char is a space or a return. @return true if the next char is a space or a return @throws IOException if something went wrong
292 This will parse the trailer from the stream and add it to the state. @return false on parsing error @throws IOException If an IO error occurs.
293 Signals that a new XRef object (table or stream) starts. @param startBytePos the offset to start at @param type the type of the Xref object
294 This will write the fdf document. @param doc The document to write. @throws IOException If an error occurs while generating the data.
295 Reset all data so that it can be used to rebuild the trailer.
296 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool. @param key The {@link COSObjectKey} a {@link COSBase} is registered for in this compression pool. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool, if such an object is contained.
297 Sets the given {@link COSObjectKey} as a free reference in a PDF's crossreference stream ({@link PDFXRefStream}). @param key The key, that shall be set as the free reference of the document. @param nextFreeObject The object number of the next free object.
298 Returns the highest object number, that is registered in this compression pool. @return The highest object number, that is registered in this compression pool.
299 Prepares a object stream entry reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param objectStreamIndex The index of the {@link COSObject} in the containing object stream. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry. @param parentKey The {@link COSObjectKey} of the object stream, that is containing the object.
300 Write the given {@link COSArray} to the given stream. @param output The stream, that shall be written to. @param cosArray The content, that shall be written.
301 Returns the value for the first column of the crossreference stream entry. (The numeric representation of this entry's (The numeric representation of this entry's {@link XReferenceType}.) @return The value for the first column of the crossreference stream entry.
302 Default constructor.
303 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
304 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
305 Default constructor.
306 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set next free {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
307 Create a new appearance stream. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
308 Returns the value for the second column of the crossreference stream entry. (This is byte offset of the {@link COSObject} in the PDF file - for entries of this type.) @return The value for the second column of the crossreference stream entry.
309 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the appearance is part of. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
310 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
311 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
312 Returns the value for the second column of the crossreference stream entry. (This is object number from the {@link COSObjectKey} of the object stream, that is containing the object represented by this entry - for entries of this type..) @return The value for the second column of the crossreference stream entry.
313 Returns the value for the third column of the crossreference stream entry. (This is index of the {@link COSObject} in the containing object stream - for entries of this type.) @return The value for the third column of the crossreference stream entry.
314 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
315 This will write some byte to the stream. @param b The source byte array. @param off The offset into the array to start writing. @param len The number of bytes to write. @throws IOException If the underlying stream throws an exception.
316 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
317 This will write a single byte to the stream. @param b The byte to write to the stream. @throws IOException If there is an error writing to the underlying stream.
318 This will write an EOL to the stream. @throws IOException If there is an error writing to the stream
319 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
320 COSWriter constructor. @param outputStream The output stream to write the PDF. @param compressParameters The configuration for the document's compression.
321 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
322 COSWriter constructor for incremental updates. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data @throws IOException if something went wrong
323 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
324 Returns true, if the resulting document shall be compressed. @return True, if the resulting document shall be compressed.
325 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
326 add an entry in the x ref table for later dump. @param entry The new entry to add.
327 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
328 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
329 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
330 Retrieve the glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. The encoded glyph IDs are also written to the specified output stream. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param out The output stream to write the glyph IDs to. @param font The font whose cmap table will be used to map characters to glyph IDs. @param word The word which is being converted from characters to glyph IDs. @return The glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified word.
331 This will write the fdf document. @param doc The document to write. @throws IOException If an error occurs while generating the data.
332 Set the stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setStrokingColor(PDColor)
333 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool. @param key The {@link COSObjectKey} a {@link COSBase} is registered for in this compression pool. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool, if such an object is contained.
334 Returns the highest object number, that is registered in this compression pool. @return The highest object number, that is registered in this compression pool.
335 Set the non stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the non stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setNonStrokingColor(PDColor)
336 Write the given {@link COSArray} to the given stream. @param output The stream, that shall be written to. @param cosArray The content, that shall be written.
337 Default constructor.
338 Constructor. @param dic The COS dictionary.
339 Default constructor.
340 Constructor. @param dic The COS dictionary.
341 Constructor. @param dic The COS dictionary.
342 Create a new appearance stream. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
343 Constructor. @param dic The COS dictionary.
344 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the appearance is part of. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
345 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf @param permission he access permissions of the pdf
346 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source The source that will be closed when this document gets closed, can be null.
347 Constructor. This will <b>not</b> set up the /Type and /Subtype entries. @param str The stream parameter.
348 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
349 Constructor. @param str The stream parameter.
350 {@inheritDoc}
351 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
352 Constructor. @param function The function stream.
353 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
354 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
355 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
356 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
357 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
358 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state.
359 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
360 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
361 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
362 Creates a new attribute object with a given dictionary. @param dictionary the dictionary
363 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
364 Creates a user property with a given dictionary. @param dictionary the dictionary @param userAttributeObject the user attribute object
365 creates a new transition for an existing dictionary @param dictionary the dictionary to be used for the new transition
366 Retrieve the glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. The encoded glyph IDs are also written to the specified output stream. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param out The output stream to write the glyph IDs to. @param font The font whose cmap table will be used to map characters to glyph IDs. @param word The word which is being converted from characters to glyph IDs. @return The glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified word.
367 Set the stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setStrokingColor(PDColor)
368 Create a child node object. @param dic The dictionary for the child node object to refer to. @return The new child node object.
369 Set the non stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the non stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setNonStrokingColor(PDColor)
370 Constructor. @param dic The COS dictionary.
371 {@inheritDoc}
372 Constructor. @param dic The COS dictionary.
373 Constructor for an existing structure element. @param dic The existing dictionary.
374 Constructor. @param dic The COS dictionary.
375 Constructor for an existing structure element. @param dic The existing dictionary.
376 Constructor. @param dic The COS dictionary.
377 Notifies the user attribute object if the user property is changed. @param oldEntry old entry @param newEntry new entry
378 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf @param permission he access permissions of the pdf
379 Returns the object at the specified position. @param index the position @return the object @throws IndexOutOfBoundsException if the index is out of range
380 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source The source that will be closed when this document gets closed, can be null.
381 Returns the size. @return the size
382 Returns the revision number at the specified position. @param index the position @return the revision number @throws IndexOutOfBoundsException if the index is out of range
383 Constructor. This will <b>not</b> set up the /Type and /Subtype entries. @param str The stream parameter.
384 Adds an object with a specified revision number. @param object the object @param revisionNumber the revision number
385 Constructor. @param str The stream parameter.
386 Sets the revision number of a specified object. @param object the object @param revisionNumber the revision number
387 {@inheritDoc}
388 Adds a text position to the contents. @param text the text position
389 Constructor. @param function The function stream.
390 Adds a marked content to the contents. @param markedContent the marked content
391 Adds an XObject to the contents. @param xobject the XObject
392 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
393 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state.
394 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
395 Set if the user can print. <p> This method will have no effect if the object is in read only mode. @param allowPrinting A boolean determining if the user can print.
396 Creates a new attribute object with a given dictionary. @param dictionary the dictionary
397 Set if the user can modify the document. <p> This method will have no effect if the object is in read only mode. @param allowModifications A boolean determining if the user can modify the document.
398 Creates a user property with a given dictionary. @param dictionary the dictionary @param userAttributeObject the user attribute object
399 Set if the user can extract content from the document. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
400 creates a new transition for an existing dictionary @param dictionary the dictionary to be used for the new transition
401 Set if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even the parameter here is false. <p> This method will have no effect if the object is in read only mode. @param allowAnnotationModification A boolean determining the new setting.
402 Set if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. Therefore, if you want to prevent a user from filling in interactive form fields, you need to call {@link #setCanModifyAnnotations(boolean) setCanModifyAnnotations(false)} as well. <p> This method will have no effect if the object is in read only mode. @param allowFillingInForm A boolean determining if the user can fill in interactive forms.
403 Set if the user can extract content from the document for accessibility purposes. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
404 Set if the user can insert/rotate/delete pages. <p> This method will have no effect if the object is in read only mode. @param allowAssembly A boolean determining if the user can assemble the document.
405 Create a child node object. @param dic The dictionary for the child node object to refer to. @return The new child node object.
406 Set if the user can print the document in a faithful format or in a degraded format (if print is enabled). The PDF version must be 1.5 or higher. <p> This method will have no effect if the object is in read only mode. @param canPrintFaithful A boolean determining if the user can print the document in a faithful format.
407 This will tell if the user can print. @return true If supplied with the user password they are allowed to print.
408 {@inheritDoc}
409 This will tell if the user can modify contents of the document. @return true If supplied with the user password they are allowed to modify the document
410 Constructor for an existing structure element. @param dic The existing dictionary.
411 This will tell if the user can extract text and images from the PDF document. @return true If supplied with the user password they are allowed to extract content from the PDF document
412 This will tell if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even if this method here returns false. @return true If supplied with the user password they are allowed to modify annotations.
413 Constructor for an existing structure element. @param dic The existing dictionary.
414 This will tell if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. @return true If supplied with the user password they are allowed to fill in form fields.
415 Notifies the user attribute object if the user property is changed. @param oldEntry old entry @param newEntry new entry
416 This will tell if the user can extract text and images from the PDF document for accessibility purposes. @return true If supplied with the user password they are allowed to extract content from the PDF document
417 Returns the object at the specified position. @param index the position @return the object @throws IndexOutOfBoundsException if the index is out of range
418 This will tell if the user can insert/rotate/delete pages. @return true If supplied with the user password they are allowed to assemble the document.
419 Returns the size. @return the size
420 This will tell if the user can print the document in a faithful format or in a degraded format (if print is enabled). @return true If supplied with the user password they are allowed to print the document in a faithful format.
421 Returns the revision number at the specified position. @param index the position @return the revision number @throws IndexOutOfBoundsException if the index is out of range
422 Calculate the key to be used for RC4 and AES-128. @param objectNumber The data object number. @param genNumber The data generation number. @return the calculated key.
423 Adds an object with a specified revision number. @param object the object @param revisionNumber the revision number
424 Sets the revision number of a specified object. @param object the object @param revisionNumber the revision number
425 Constructor.
426 Adds a text position to the contents. @param text the text position
427 Adds a marked content to the contents. @param markedContent the marked content
428 This will reset the key to be used. @param key The RC4 key used during encryption.
429 Adds an XObject to the contents. @param xobject the XObject
430 This will encrypt and write the next byte. @param aByte The byte to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
431 Return true if the given {@code codepoint} is a prohibited character as defined by <a href="https://tools.ietf.org/html/rfc4013#section-2.3">RFC 4013, Section 2.3</a>.
432 Constructor used for encryption. @param protectionPolicy The protection policy.
433 Set if the user can print. <p> This method will have no effect if the object is in read only mode. @param allowPrinting A boolean determining if the user can print.
434 Set if the user can modify the document. <p> This method will have no effect if the object is in read only mode. @param allowModifications A boolean determining if the user can modify the document.
435 Computes the version number of the {@link SecurityHandler} based on the encryption key length. See PDF Spec 1.6 p 93 and <a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/adobe_supplement_iso32000.pdf">PDF 1.7 Supplement ExtensionLevel: 3</a> and <a href="http://intranet.pdfa.org/wp-content/uploads/2016/08/ISO_DIS_32000-2-DIS4.pdf">PDF Spec 2.0</a>. @return The computed version number.
436 Set if the user can extract content from the document. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
437 Set if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even the parameter here is false. <p> This method will have no effect if the object is in read only mode. @param allowAnnotationModification A boolean determining the new setting.
438 Returns a new security handler for the given protection policy, or null none is available. @param policy the protection policy for which to create a security handler @return a new SecurityHandler instance, or null if none is available
439 Set if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. Therefore, if you want to prevent a user from filling in interactive form fields, you need to call {@link #setCanModifyAnnotations(boolean) setCanModifyAnnotations(false)} as well. <p> This method will have no effect if the object is in read only mode. @param allowFillingInForm A boolean determining if the user can fill in interactive forms.
440 Returns a new security handler for the given Filter name, or null none is available. @param name the Filter name from the PDF encryption dictionary @return a new SecurityHandler instance, or null if none is available
441 Set if the user can extract content from the document for accessibility purposes. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
442 Set if the user can insert/rotate/delete pages. <p> This method will have no effect if the object is in read only mode. @param allowAssembly A boolean determining if the user can assemble the document.
443 Set if the user can print the document in a faithful format or in a degraded format (if print is enabled). The PDF version must be 1.5 or higher. <p> This method will have no effect if the object is in read only mode. @param canPrintFaithful A boolean determining if the user can print the document in a faithful format.
444 This will tell if the user can print. @return true If supplied with the user password they are allowed to print.
445 This will tell if the user can modify contents of the document. @return true If supplied with the user password they are allowed to modify the document
446 This will tell if the user can extract text and images from the PDF document. @return true If supplied with the user password they are allowed to extract content from the PDF document
447 This will tell if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even if this method here returns false. @return true If supplied with the user password they are allowed to modify annotations.
448 This will tell if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. @return true If supplied with the user password they are allowed to fill in form fields.
449 This will tell if the user can extract text and images from the PDF document for accessibility purposes. @return true If supplied with the user password they are allowed to extract content from the PDF document
450 Constructor. @param a An existing FDF Annotation.
451 This will tell if the user can insert/rotate/delete pages. @return true If supplied with the user password they are allowed to assemble the document.
452 Constructor. @param a An existing FDF Annotation.
453 This will tell if the user can print the document in a faithful format or in a degraded format (if print is enabled). @return true If supplied with the user password they are allowed to print the document in a faithful format.
454 Constructor. @param a An existing FDF Annotation.
455 Calculate the key to be used for RC4 and AES-128. @param objectNumber The data object number. @param genNumber The data generation number. @return the calculated key.
456 Constructor. @param a An existing FDF Annotation.
457 Constructor. @param a An existing FDF Annotation.
458 Constructor. @param a An existing FDF Annotation.
459 Constructor.
460 Constructor. @param a An existing FDF Annotation.
461 This will reset the key to be used. @param key The RC4 key used during encryption.
462 Constructor. @param a An existing FDF Annotation.
463 Constructor. @param a An existing FDF Annotation.
464 This will encrypt and write the next byte. @param aByte The byte to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
465 Constructor. @param a An existing FDF Annotation.
466 Return true if the given {@code codepoint} is a prohibited character as defined by <a href="https://tools.ietf.org/html/rfc4013#section-2.3">RFC 4013, Section 2.3</a>.
467 Constructor. @param a An existing FDF Annotation.
468 Constructor used for encryption. @param protectionPolicy The protection policy.
469 Constructor. @param a An existing FDF Annotation.
470 Constructor. @param a An existing FDF Annotation.
471 Constructor. @param a An existing FDF Annotation.
472 Computes the version number of the {@link SecurityHandler} based on the encryption key length. See PDF Spec 1.6 p 93 and <a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/adobe_supplement_iso32000.pdf">PDF 1.7 Supplement ExtensionLevel: 3</a> and <a href="http://intranet.pdfa.org/wp-content/uploads/2016/08/ISO_DIS_32000-2-DIS4.pdf">PDF Spec 2.0</a>. @return The computed version number.
473 Returns a new security handler for the given protection policy, or null none is available. @param policy the protection policy for which to create a security handler @return a new SecurityHandler instance, or null if none is available
474 Returns a new security handler for the given Filter name, or null none is available. @param name the Filter name from the PDF encryption dictionary @return a new SecurityHandler instance, or null if none is available
475 Ten bytes for the PANOSE classification number for the font. @see <a href="http://www.monotype.com/services/pan1">http://www.monotype.com/services/pan1</a> @return the PANOSE classification number
476 Constructor. @param a An existing FDF Annotation.
477 Constructor. @param a An existing FDF Annotation.
478 Constructor. @param a An existing FDF Annotation.
479 Constructor. @param a An existing FDF Annotation.
480 Constructor. @param a An existing FDF Annotation.
481 Constructor. @param a An existing FDF Annotation.
482 Constructor. @param a An existing FDF Annotation.
483 Loads the metrics for the base font specified by name. Metric file must exist in the pdfbox jar under /org/apache/pdfbox/resources/afm/ @param fontName one of the standard 14 font names for which to load the metrics. @throws IOException if no metrics exist for that font.
484 Constructor. @param a An existing FDF Annotation.
485 Adds a standard font name to the map of known aliases, to simplify the logic of finding font metrics by name. We want a single lookup in the map to find the font both by a base name or an alias. @see #getAFM @param baseName the font name of the Standard 14 font
486 Constructor. @param a An existing FDF Annotation.
487 Constructor. @param a An existing FDF Annotation.
488 Constructor. @param a An existing FDF Annotation.
489 Transforms the given vector by this matrix. @param vector 2D vector @return the transformed vector.
490 Constructor. @param a An existing FDF Annotation.
491 Returns a new vector scaled by both x and y. @param sxy x and y scale @return a new vector scaled by both x and y
492 Constructor. @param a An existing FDF Annotation.
493 Constructor. @param a An existing FDF Annotation.
494 Returns the CID for the given character code. If not found then CID 0 is returned. @param code character code @return CID
495 Returns true if this font is one of the "Standard 14" fonts and receives special handling. @return true if this font is one of the "Standard 14" fonts
496 Ten bytes for the PANOSE classification number for the font. @see <a href="http://www.monotype.com/services/pan1">http://www.monotype.com/services/pan1</a> @return the PANOSE classification number
497 Returns the font's glyph list.
498 Loads the metrics for the base font specified by name. Metric file must exist in the pdfbox jar under /org/apache/pdfbox/resources/afm/ @param fontName one of the standard 14 font names for which to load the metrics. @throws IOException if no metrics exist for that font.
499 Adds a standard font name to the map of known aliases, to simplify the logic of finding font metrics by name. We want a single lookup in the map to find the font both by a base name or an alias. @see #getAFM @param baseName the font name of the Standard 14 font
500 Returns the GID for the given character code. @param code character code @return GID (glyph index) @throws IOException if the data could not be read
501 Transforms the given vector by this matrix. @param vector 2D vector @return the transformed vector.
502 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
503 Returns a new vector scaled by both x and y. @param sxy x and y scale @return a new vector scaled by both x and y
504 Returns the CID for the given character code. If not found then CID 0 is returned. @param code character code @return CID
505 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
506 Constructor. @param codeToName the given code to name mapping
507 Returns true if this font is one of the "Standard 14" fonts and receives special handling. @return true if this font is one of the "Standard 14" fonts
508 Creates a new GlyphList from a glyph list file. @param numberOfEntries number of expected values used to preallocate the correct amount of memory @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
509 Creates a new GlyphList from multiple glyph list files. @param glyphList an existing glyph list to be copied @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
510 Constructor.
511 Returns the font's glyph list.
512 Creates an encoding from the given FontBox encoding. @param encoding FontBox encoding @return the encoding created from the given FontBox encoding
513 Creates a blend composite @param blendMode Desired blend mode @param constantAlpha Constant alpha, must be in the inclusive range [0.0...1.0] or it will be clipped. @return a blend composite. @throws IllegalArgumentException if blendMode is null.
514 Creates a PDColor containing the given color component values and pattern name. @param components array of color component values @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern/components are defined
515 Returns the GID for the given character code. @param code character code @return GID (glyph index) @throws IOException if the data could not be read
516 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
517 Creates a new soft mask paint. @param paint underlying paint. @param mask soft mask @param bboxDevice bbox of the soft mask in the underlying Graphics2D device space @param backdropColor the color to be used outside the transparency group’s bounding box; if null, black will be used. @param transferFunction the transfer function, may be null.
518 Lazy load the ICC profile, because it's slow. @throws IOException if the ICC profile could not be initialized
519 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
520 Constructor. @param codeToName the given code to name mapping
521 Creates a new GlyphList from a glyph list file. @param numberOfEntries number of expected values used to preallocate the correct amount of memory @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
522 Returns the transparency group attributes dictionary. @return the transparency group attributes dictionary, never null.
523 Creates a new GlyphList from multiple glyph list files. @param glyphList an existing glyph list to be copied @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
524 Constructor.
525 Creates an encoding from the given FontBox encoding. @param encoding FontBox encoding @return the encoding created from the given FontBox encoding
526 We look which row encoding is the "best" one, ie. has the lowest sum. We don't implement anything fancier to choose the right row encoding. This is just the recommend algorithm in the spec. The get the perfect encoding you would need to do a brute force check how all the different encoded rows compress in the zip stream together. You have would have to check 5*image-height permutations... @return the "best" row encoding of the row encodings
527 Creates a blend composite @param blendMode Desired blend mode @param constantAlpha Constant alpha, must be in the inclusive range [0.0...1.0] or it will be clipped. @return a blend composite. @throws IllegalArgumentException if blendMode is null.
528 @param image The image to apply the mask to as alpha channel. @param mask A mask image in 8 bit Gray. Even for a stencil mask image due to {@link #getOpaqueImage()} and {@link SampledImageReader}'s {@code from1Bit()} special handling of DeviceGray. @param interpolateMask interpolation flag of the mask image. @param isSoft {@code true} if a soft mask. If not stencil mask, then alpha will be inverted by this method. @param matte an optional RGB matte if a soft mask. @return an ARGB image (can be the altered original image)
529 Convert this image to a COS object. @return The cos object that matches this image object.
530 Creates a PDColor containing the given color component values and pattern name. @param components array of color component values @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern/components are defined
531 Creates a new soft mask paint. @param paint underlying paint. @param mask soft mask @param bboxDevice bbox of the soft mask in the underlying Graphics2D device space @param backdropColor the color to be used outside the transparency group’s bounding box; if null, black will be used. @param transferFunction the transfer function, may be null.
532 Lazy load the ICC profile, because it's slow. @throws IOException if the ICC profile could not be initialized
533 Parse the PNG structure into the PNGConverterState. If we can't handle something, this method will return null. @param imageData the byte array with the PNG data @return null or the converter state with all relevant chunks
534 Creates a new shading pattern from the given COS dictionary. @param resourceDictionary The COSDictionary for this pattern resource.
535 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern. @param resourceCache The resource cache, may be null
536 Returns the transparency group attributes dictionary. @return the transparency group attributes dictionary, never null.
537 Constructor. @param shadingType2 the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
538 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
539 We look which row encoding is the "best" one, ie. has the lowest sum. We don't implement anything fancier to choose the right row encoding. This is just the recommend algorithm in the spec. The get the perfect encoding you would need to do a brute force check how all the different encoded rows compress in the zip stream together. You have would have to check 5*image-height permutations... @return the "best" row encoding of the row encodings
540 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
541 @param image The image to apply the mask to as alpha channel. @param mask A mask image in 8 bit Gray. Even for a stencil mask image due to {@link #getOpaqueImage()} and {@link SampledImageReader}'s {@code from1Bit()} special handling of DeviceGray. @param interpolateMask interpolation flag of the mask image. @param isSoft {@code true} if a soft mask. If not stencil mask, then alpha will be inverted by this method. @param matte an optional RGB matte if a soft mask. @return an ARGB image (can be the altered original image)
542 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
543 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
544 Convert this image to a COS object. @return The cos object that matches this image object.
545 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
546 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
547 Constructor of CubicBezierCurve @param ctrlPnts 4 control points [p0, p1, p2, p3] @param l dividing level, if l = 0, one cubic Bezier curve is divided into 2^0 = 1 segments, if l = n, one cubic Bezier curve is divided into 2^n segments
548 Constructor of class Line. @param p0 one end of a line @param p1 the other end of the line @param c0 color of point p0 @param c1 color of point p1
549 Parse the PNG structure into the PNGConverterState. If we can't handle something, this method will return null. @param imageData the byte array with the PNG data @return null or the converter state with all relevant chunks
550 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
551 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
552 Creates a new shading pattern from the given COS dictionary. @param resourceDictionary The COSDictionary for this pattern resource.
553 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern. @param resourceCache The resource cache, may be null
554 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
555 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
556 Whether the for control points are on a line. @param ctl an edge's control points, the size of ctl is 4 @return true when 4 control points are on a line, otherwise false
557 Constructor. @param shadingType2 the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
558 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
559 Whether a point is contained in this ShadedTriangle. @param p the target point @return false if p is outside of this triangle, otherwise true
560 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
561 Calculate the color of a point. @param p the target point @return an array denotes the point's color
562 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
563 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
564 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
565 Modify the current clipping path by intersecting it with the given path. @param path path to intersect with the clipping path
566 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
567 Modify the current clipping path by intersecting it with the given path. @param area area to intersect with the clipping path
568 Transfer clip to the destination device. Override this if you want to avoid to do slow intersecting operations but want the destination device to do this (e.g. SVG). You can get the individual clippings via {@link PDGraphicsState#getCurrentClippingPaths()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5258">PDFBOX-5258</a> for sample code. @param graphics graphics device
569 Constructor of CubicBezierCurve @param ctrlPnts 4 control points [p0, p1, p2, p3] @param l dividing level, if l = 0, one cubic Bezier curve is divided into 2^0 = 1 segments, if l = n, one cubic Bezier curve is divided into 2^n segments
570 Creates a new soft mask. @param dictionary SMask @param resourceCache Resource cache, may be null. @return the newly created instance of PDSoftMask
571 Creates a new soft mask. @param dictionary The soft mask dictionary.
572 Constructor of class Line. @param p0 one end of a line @param p1 the other end of the line @param c0 color of point p0 @param c1 color of point p1
573 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
574 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
575 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
576 Constructor. @param a The action dictionary.
577 Constructor. @param a The action dictionary.
578 Constructor @param a the action dictionary
579 Constructor. @param a The action dictionary.
580 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
581 Constructor #2. @param a The action dictionary.
582 Constructor. @param a The action dictionary.
583 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
584 Constructor. @param a The action dictionary.
585 Whether the for control points are on a line. @param ctl an edge's control points, the size of ctl is 4 @return true when 4 control points are on a line, otherwise false
586 Constructor. @param a The action dictionary.
587 Constructor. @param a The action dictionary.
588 Constructor. @param a The action dictionary.
589 Whether a point is contained in this ShadedTriangle. @param p the target point @return false if p is outside of this triangle, otherwise true
590 Constructor. @param a The action dictionary.
591 Constructor @param a the action dictionary
592 Calculate the color of a point. @param p the target point @return an array denotes the point's color
593 Constructor. @param a The action dictionary.
594 Constructor. @param a The action dictionary.
595 Modify the current clipping path by intersecting it with the given path. @param path path to intersect with the clipping path
596 Modify the current clipping path by intersecting it with the given path. @param area area to intersect with the clipping path
597 Transfer clip to the destination device. Override this if you want to avoid to do slow intersecting operations but want the destination device to do this (e.g. SVG). You can get the individual clippings via {@link PDGraphicsState#getCurrentClippingPaths()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5258">PDFBOX-5258</a> for sample code. @param graphics graphics device
598 Return two related lists as a single list with key value pairs. @param key the key elements @param value the value elements @return a sorted list of KeyValue elements.
599 Creates a new soft mask. @param dictionary SMask @param resourceCache Resource cache, may be null. @return the newly created instance of PDSoftMask
600 Return the field tree representing all form fields @return the field tree representing all form fields
601 Creates a new soft mask. @param dictionary The soft mask dictionary.
602 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
603 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
604 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
605 Constructor. @param a The action dictionary.
606 Constructor. @param a The action dictionary.
607 Constructor @param a the action dictionary
608 Constructor. @param a The action dictionary.
609 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @return The DOM document. @throws IOException It there is an error creating the dom.
610 Constructor #2. @param a The action dictionary.
611 Constructor. @param dictionary the corresponding dictionary
612 Constructor. @param a The action dictionary.
613 Constructor. @param a The action dictionary.
614 Computes backdrop removal. The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008 standard. It returns the final color <code>C</code> for each pixel in the group:<br> <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br> where<br> <code>Cn</code> is the group color including backdrop (read from <code>groupImage</code>),<br> <code>C0</code> is the backdrop color,<br> <code>alpha0</code> is the backdrop alpha,<br> <code>alphagn</code> is the group alpha excluding backdrop (read the alpha channel from <code>groupAlphaImage</code>)<br> <p> The alpha of the result is equal to <code>alphagn</code>, i.e., the alpha channel of <code>groupAlphaImage</code>. <p> The <code>backdrop</code> image may be much larger than <code>groupImage</code> if, for example, the current page is used as the backdrop. Only a specific rectangular region of <code>backdrop</code> is used in the backdrop removal: upper-left corner is at <code>(offsetX, offsetY)</code>; width and height are equal to those of <code>groupImage</code>. @param backdrop group backdrop @param offsetX backdrop left X coordinate @param offsetY backdrop upper Y coordinate
615 Constructor. @param a The action dictionary.
616 Constructor. @param a The action dictionary.
617 Constructor. @param a The action dictionary.
618 Constructor. @param a The action dictionary.
619 Draws the pattern stream to the requested context. @param g The graphics context to draw onto. @param pattern The tiling pattern to be used. @param colorSpace color space for this tiling. @param color color for this tiling. @param patternMatrix the pattern matrix @throws IOException If there is an IO error while drawing the page.
620 Constructor @param a the action dictionary
621 This will get the X scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The X scaling factor.
622 Constructor. @param a The action dictionary.
623 Constructor. @param a The action dictionary.
624 Not called in TexturePaint subclasses, which is why we wrap TexturePaint.
625 This will get the Y scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The Y scaling factor.
626 Return two related lists as a single list with key value pairs. @param key the key elements @param value the value elements @return a sorted list of KeyValue elements.
627 Return the field tree representing all form fields @return the field tree representing all form fields
628 Return the X starting coordinate of the text, adjusted by the given rotation amount. The rotation adjusts where the 0,0 location is relative to the text. @param rotation Rotation to apply (0, 90, 180, or 270). 0 will perform no adjustments. @return X coordinate
629 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
630 This will get the y position of the character with 0,0 in lower left. This will be adjusted by the given rotation. @param rotation Rotation to apply to text to adjust the 0,0 location (0,90,180,270) @return The y coordinate of the text
631 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
632 Get the length or width of the text, based on a given rotation. @param rotation Rotation that was used to determine coordinates (0,90,180,270) @return Width of text in display units
633 Write the string in TextPosition to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
634 Same as {@link #getUnicode()} except that returned text is ensured to be visually ordered (i.e. same order you would see them displayed on screen when looking from left to right). This is important for Arabic/Hebrew where several unicode characters can be composed in one glyph with logical order (the order in which it would be normally typed from right to left). @return The string on the screen in visual order.
635 @return True if the current character is a diacritic char.
636 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @return The DOM document. @throws IOException It there is an error creating the dom.
637 Show the string data for this text position. @return A human readable form of this object.
638 Constructor. @param dictionary the corresponding dictionary
639 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). Default implementation is to do nothing. Subclasses may provide additional information. @param isLTR true if primary direction of text is left to right. @throws IOException If there is any error writing to the stream.
640 End an article. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
641 Computes backdrop removal. The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008 standard. It returns the final color <code>C</code> for each pixel in the group:<br> <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br> where<br> <code>Cn</code> is the group color including backdrop (read from <code>groupImage</code>),<br> <code>C0</code> is the backdrop color,<br> <code>alpha0</code> is the backdrop alpha,<br> <code>alphagn</code> is the group alpha excluding backdrop (read the alpha channel from <code>groupAlphaImage</code>)<br> <p> The alpha of the result is equal to <code>alphagn</code>, i.e., the alpha channel of <code>groupAlphaImage</code>. <p> The <code>backdrop</code> image may be much larger than <code>groupImage</code> if, for example, the current page is used as the backdrop. Only a specific rectangular region of <code>backdrop</code> is used in the backdrop removal: upper-left corner is at <code>(offsetX, offsetY)</code>; width and height are equal to those of <code>groupImage</code>. @param backdrop group backdrop @param offsetX backdrop left X coordinate @param offsetY backdrop upper Y coordinate
642 Write the line separator value to the output stream. @throws IOException If there is a problem writing out the line separator to the document.
643 Write the word separator value to the output stream. @throws IOException If there is a problem writing out the word separator to the document.
644 Draws the pattern stream to the requested context. @param g The graphics context to draw onto. @param pattern The tiling pattern to be used. @param colorSpace color space for this tiling. @param color color for this tiling. @param patternMatrix the pattern matrix @throws IOException If there is an IO error while drawing the page.
645 Write a Java string to the output stream. The default implementation will ignore the <code>textPositions</code> and just calls {@link #writeString(String)}. @param text The text to write to the stream. @param textPositions The TextPositions belonging to the text. @throws IOException If there is an error when writing the text.
646 This will get the X scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The X scaling factor.
647 Write something (if defined) at the start of a paragraph. @throws IOException if something went wrong
648 Write something (if defined) at the start of a page. @throws IOException if something went wrong
649 Not called in TexturePaint subclasses, which is why we wrap TexturePaint.
650 Write something (if defined) at the end of a page. @throws IOException if something went wrong
651 This will get the Y scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The Y scaling factor.
652 returns the list item Pattern object that matches the text at the specified PositionWrapper or null if the text does not match such a pattern. The list of Patterns tested against is given by the {@link #getListItemPatterns()} method. To add to the list, simply override that method (if sub-classing) or explicitly supply your own list using {@link #setListItemPatterns(List)}. @param pw position @return the matching pattern
653 Normalize certain Unicode characters. For example, convert the single "fi" ligature to "f" and "i". Also normalises Arabic and Hebrew presentation forms. @param word Word to normalize @return Normalized word
654 Inserts the diacritic TextPosition to the str of this TextPosition and updates the widths array to include the extra character width. @param i current character @param diacritic The diacritic TextPosition
655 Return the X starting coordinate of the text, adjusted by the given rotation amount. The rotation adjusts where the 0,0 location is relative to the text. @param rotation Rotation to apply (0, 90, 180, or 270). 0 will perform no adjustments. @return X coordinate
656 This will get the y position of the character with 0,0 in lower left. This will be adjusted by the given rotation. @param rotation Rotation to apply to text to adjust the 0,0 location (0,90,180,270) @return The y coordinate of the text
657 Get the length or width of the text, based on a given rotation. @param rotation Rotation that was used to determine coordinates (0,90,180,270) @return Width of text in display units
658 Write the string in TextPosition to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
659 Returns a hex string of the given byte. @param b the byte to be converted @return the hex string representing the given byte
660 Same as {@link #getUnicode()} except that returned text is ensured to be visually ordered (i.e. same order you would see them displayed on screen when looking from left to right). This is important for Arabic/Hebrew where several unicode characters can be composed in one glyph with logical order (the order in which it would be normally typed from right to left). @return The string on the screen in visual order.
661 Returns a hex string of the given byte array. @param bytes the bytes to be converted @return the hex string representing the given bytes
662 @return True if the current character is a diacritic char.
663 Show the string data for this text position. @return A human readable form of this object.
664 Returns the bytes corresponding to the ASCII hex encoding of the given byte. @param b the byte to be converted @return the ASCII hex encoding of the given byte
665 Returns the bytes corresponding to the ASCII hex encoding of the given bytes. @param bytes the bytey to be converted @return the ASCII hex encoding of the given bytes
666 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). Default implementation is to do nothing. Subclasses may provide additional information. @param isLTR true if primary direction of text is left to right. @throws IOException If there is any error writing to the stream.
667 End an article. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
668 Writes the given byte as hex value to the given output stream. @param b the byte to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
669 Sorts the array using iterative (bottom-up) merge sort. @param <T> the class of the objects in the list @param arr the array of objects to be sorted. @param cmp the comparator to determine the order of the list.
670 Clones this object. @return cloned matrix as an object.
671 Write the line separator value to the output stream. @throws IOException If there is a problem writing out the line separator to the document.
672 Concatenates (premultiplies) the given matrix to this matrix. @param matrix The matrix to concatenate.
673 Write the word separator value to the output stream. @throws IOException If there is a problem writing out the word separator to the document.
674 Translates this matrix by the given amount. @param tx x-translation @param ty y-translation
675 Write a Java string to the output stream. The default implementation will ignore the <code>textPositions</code> and just calls {@link #writeString(String)}. @param text The text to write to the stream. @param textPositions The TextPositions belonging to the text. @throws IOException If there is an error when writing the text.
676 Scales this matrix by the given factors. @param sx x-scale @param sy y-scale
677 Write something (if defined) at the start of a paragraph. @throws IOException if something went wrong
678 This method multiplies this Matrix with the specified other Matrix, storing the product in a new instance. It is allowed to have (other == this). @param other the second operand Matrix in the multiplication; required @return the product of the two matrices.
679 Write something (if defined) at the start of a page. @throws IOException if something went wrong
680 Write something (if defined) at the end of a page. @throws IOException if something went wrong
681 Fast variant to format a floating point value to a ASCII-string. The format will fail if the value is greater than {@link Long#MAX_VALUE}, smaller or equal to {@link Long#MIN_VALUE}, is {@link Float#NaN}, infinite or the number of requested fraction digits is greater than {@link #MAX_FRACTION_DIGITS}. When the number contains more fractional digits than {@code maxFractionDigits} the value will be rounded. Rounding is done to the nearest possible value, with the tie breaking rule of rounding away from zero. @param value The float value to format @param maxFractionDigits The maximum number of fraction digits used @param asciiBuffer The output buffer to write the formatted value to @return The number of bytes used in the buffer or {@code -1} if formatting failed
682 returns the list item Pattern object that matches the text at the specified PositionWrapper or null if the text does not match such a pattern. The list of Patterns tested against is given by the {@link #getListItemPatterns()} method. To add to the list, simply override that method (if sub-classing) or explicitly supply your own list using {@link #setListItemPatterns(List)}. @param pw position @return the matching pattern
683 Store the given value at the specified path. @param value @param parts
684 Sets the default value to use in {@link ByteTrie#find(byte[])} when no path matches. @param defaultValue
685 Normalize certain Unicode characters. For example, convert the single "fi" ligature to "f" and "i". Also normalises Arabic and Hebrew presentation forms. @param word Word to normalize @return Normalized word
686 Return the most specific value stored for this byte sequence. If not found, returns <code>null</code> or a default values as specified by calling {@link ByteTrie#setDefaultValue}. @param bytes @return
687 Inserts the diacritic TextPosition to the str of this TextPosition and updates the widths array to include the extra character width. @param i current character @param diacritic The diacritic TextPosition
688 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
689 Returns a hex string of the given byte. @param b the byte to be converted @return the hex string representing the given byte
690 Returns a hex string of the given byte array. @param bytes the bytes to be converted @return the hex string representing the given bytes
691 Returns the bytes corresponding to the ASCII hex encoding of the given byte. @param b the byte to be converted @return the ASCII hex encoding of the given byte
692 Returns the bytes corresponding to the ASCII hex encoding of the given bytes. @param bytes the bytey to be converted @return the ASCII hex encoding of the given bytes
693 Writes the given byte as hex value to the given output stream. @param b the byte to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
694 Sorts the array using iterative (bottom-up) merge sort. @param <T> the class of the objects in the list @param arr the array of objects to be sorted. @param cmp the comparator to determine the order of the list.
695 Clones this object. @return cloned matrix as an object.
696 Concatenates (premultiplies) the given matrix to this matrix. @param matrix The matrix to concatenate.
697 Translates this matrix by the given amount. @param tx x-translation @param ty y-translation
698 Scales this matrix by the given factors. @param sx x-scale @param sy y-scale
699 This method multiplies this Matrix with the specified other Matrix, storing the product in a new instance. It is allowed to have (other == this). @param other the second operand Matrix in the multiplication; required @return the product of the two matrices.
700 Fast variant to format a floating point value to a ASCII-string. The format will fail if the value is greater than {@link Long#MAX_VALUE}, smaller or equal to {@link Long#MIN_VALUE}, is {@link Float#NaN}, infinite or the number of requested fraction digits is greater than {@link #MAX_FRACTION_DIGITS}. When the number contains more fractional digits than {@code maxFractionDigits} the value will be rounded. Rounding is done to the nearest possible value, with the tie breaking rule of rounding away from zero. @param value The float value to format @param maxFractionDigits The maximum number of fraction digits used @param asciiBuffer The output buffer to write the formatted value to @return The number of bytes used in the buffer or {@code -1} if formatting failed
701 Store the given value at the specified path. @param value @param parts
702 Sets the default value to use in {@link ByteTrie#find(byte[])} when no path matches. @param defaultValue
703 Return the most specific value stored for this byte sequence. If not found, returns <code>null</code> or a default values as specified by calling {@link ByteTrie#setDefaultValue}. @param bytes @return
704 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
705 Constructor.
706 This will get a COSName object with that name. @param aName The name of the object. @return A COSName with the specified name.
707 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string.
708 Constructor.
709 Use the given list to initialize the COSArray. @param cosObjectables the initial list of COSObjectables
710 Creates a new stream with an empty dictionary. Data is stored in the given scratch file. @param streamCache Stream cache for writing stream data.
711 {@inheritDoc}
712 Return a default DecodeResult. @return a default instance of DecodeResult
713 Default Constructor.
714 Constructor for embedding.
715 This will take a map&lt;java.lang.String,org.apache.pdfbox.pdmodel.COSObjectable&gt; and convert it into a COSDictionary. @param someMap A map containing COSObjectables @return A proper COSDictionary
716 Default constructor
717 Constructor.
718 Constructor. @param valueClass The PD Model type of object that is the value.
719 Creates a new empty page label range object.
720 Default Constructor.
721 Constructor for subclasses.
722 Default Constructor.
723 creates a new empty crypt filter dictionary.
724 creates a new empty encryption dictionary.
725 Default constructor.
726 Default constructor.
727 Default constructor.
728 Default constructor.
729 Default constructor.
730 Constructor.
731 Default constructor.
732 Default constructor.
733 This will get a COSName object with that name. @param aName The name of the object. @return A COSName with the specified name.
734 Default constructor.
735 Default constructor.
736 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string.
737 Creates a new DeviceN colour space attributes dictionary.
738 Creates a new DeviceN Process Dictionary.
739 Constructor.
740 Default constructor.
741 Use the given list to initialize the COSArray. @param cosObjectables the initial list of COSObjectables
742 Default constructor.
743 Creates a new stream with an empty dictionary. Data is stored in the given scratch file. @param streamCache Stream cache for writing stream data.
744 Default constructor.
745 {@inheritDoc}
746 Default constructor.
747 Return a default DecodeResult. @return a default instance of DecodeResult
748 Default constructor.
749 Default Constructor.
750 Default constructor.
751 Constructor for embedding.
752 Default constructor, creates target directory.
753 Constructor.
754 This will take a map&lt;java.lang.String,org.apache.pdfbox.pdmodel.COSObjectable&gt; and convert it into a COSDictionary. @param someMap A map containing COSObjectables @return A proper COSDictionary
755 Default constructor.
756 Default constructor
757 Constructor.
758 Constructor.
759 Constructor.
760 Constructor. @param valueClass The PD Model type of object that is the value.
761 Default constructor.
762 Creates a new empty page label range object.
763 Default constructor.
764 Default Constructor.
765 Default constructor.
766 Constructor for subclasses.
767 Default constructor.
768 Default Constructor.
769 Constructor. @param acroForm The form that this field is part of.
770 creates a new empty crypt filter dictionary.
771 Constructor.
772 creates a new empty encryption dictionary.
773 Constructor.
774 Default constructor.
775 Default constructor.
776 Constructor. @param object The object that this encapsulates. @param objectKey The COSObjectKey of the encapsulated object
777 This will get the width of this rectangle as calculated by upperRightX - lowerLeftX. @return The width of this rectangle.
778 Default constructor.
779 Default constructor.
780 Method to determine if the x/y point is inside this rectangle. @param x The x-coordinate to test. @param y The y-coordinate to test. @return True if the point is inside this rectangle.
781 Default constructor.
782 This will get the height of this rectangle as calculated by upperRightY - lowerLeftY. @return The height of this rectangle.
783 Default constructor.
784 Default constructor.
785 Returns a path which represents this rectangle having been transformed by the given matrix. Note that the resulting path need not be rectangular. @param matrix the matrix to be used for the transformation @return the transformed rectangle
786 Default constructor.
787 Returns a general path equivalent to this rectangle. This method avoids the problems caused by Rectangle2D not working well with -ve rectangles. @return a general path equivalent to this rectangle
788 Default constructor.
789 This will return a string representation of this rectangle. @return This object as a string.
790 Creates a new DeviceN colour space attributes dictionary.
791 Creates a new DeviceN Process Dictionary.
792 Default constructor.
793 Default constructor.
794 Default constructor.
795 Default constructor.
796 Get the value of the array as an integer. @param index The index into the list. @return The value at that index or -1 if does not exist.
797 Default constructor.
798 Get the value of the array as a string. @param index The index into the array. @return The name converted to a string or null if it does not exist.
799 Default constructor.
800 Default constructor, creates target directory.
801 {@inheritDoc}
802 Constructor.
803 Constructor. Uses main memory to buffer PDF streams. @param parser Parser to be used to parse the document on demand
804 Default constructor.
805 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache
806 Constructor.
807 Constructor.
808 Default constructor.
809 Default constructor.
810 Write the given {@link COSFloat} to the given stream. @param output The stream, that shall be written to. @param cosFloat The content, that shall be written.
811 Default constructor.
812 Uses this {@link COSUpdateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on this {@link COSUpdateInfo}. @see COSIncrement
813 Default constructor.
814 Convenience method, so that we get false for types that can't be updated. @param base @return
815 Constructor. @param acroForm The form that this field is part of.
816 Constructor.
817 This factory method will get the appropriate number object. @param number The string representation of the number. @return A number object, either float or int. @throws IOException If the string is not a number.
818 Constructor.
819 Appends a marked-content sequence kid. @param mcid the marked-content id (MCID). @throws IllegalArgumentException if the mcid is negative.
820 Constructor. @param object The object that this encapsulates. @param objectKey The COSObjectKey of the encapsulated object
821 @return the value for this direction
822 This will get the width of this rectangle as calculated by upperRightX - lowerLeftX. @return The width of this rectangle.
823 Constructor. @param num The object number. @param gen The object generation number.
824 Method to determine if the x/y point is inside this rectangle. @param x The x-coordinate to test. @param y The y-coordinate to test. @return True if the point is inside this rectangle.
825 This will get the suffix for this image type, e.g. jpg/png. @return The image suffix or null if not available.
826 This will get the height of this rectangle as calculated by upperRightY - lowerLeftY. @return The height of this rectangle.
827 Returns a new OutputStream for writing stream data, using and the given filters. @param filters COSArray or COSName of filters to be used. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
828 Returns a path which represents this rectangle having been transformed by the given matrix. Note that the resulting path need not be rectangular. @param matrix the matrix to be used for the transformation @return the transformed rectangle
829 Creates a new <i>text string</i> from a Java String. @param text The string value of the object.
830 Returns a general path equivalent to this rectangle. This method avoids the problems caused by Rectangle2D not working well with -ve rectangles. @return a general path equivalent to this rectangle
831 This will return a string representation of this rectangle. @return This object as a string.
832 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
833 This will get the file name. @return The file name.
834 Get the value of the array as an integer. @param index The index into the list. @return The value at that index or -1 if does not exist.
835 Return either one of a list which can have two-element arrays entries. <p> Some entries in a dictionary can either be an array of elements or an array of two-element arrays. This method will either return the elements in the array or in case of two-element arrays, the element designated by the pair index </p> <p> An {@link IllegalArgumentException} will be thrown if the items contain two-element arrays and the index is not 0 or 1. </p> @param items the array of elements or two-element arrays @param pairIdx the index into the two-element array @return a List of single elements
836 This will get the (optional) export values. <p>The export values are defined in the field dictionaries /Opt key.</p> <p>The option values are used to define the export values for the field to <ul> <li>hold values in non-Latin writing systems as name objects, which represent the field value, are limited to PDFDocEncoding </li> <li>allow radio buttons having the same export value to be handled independently </li> </ul> @return List containing all possible export values. If there is no /Opt entry an empty list will be returned. @see #getOnValues()
837 Get the value of the array as a string. @param index The index into the array. @return The name converted to a string or null if it does not exist.
838 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
839 {@inheritDoc}
840 Sets the {@link #updated} state of the managed {@link #updateInfo} to the given state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @param updated The state to set for {@link #updated}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
841 Constructor. Uses main memory to buffer PDF streams. @param parser Parser to be used to parse the document on demand
842 This will close the stream. @throws IOException If there is an error closing the wrapped stream.
843 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache
844 Write the given {@link COSFloat} to the given stream. @param output The stream, that shall be written to. @param cosFloat The content, that shall be written.
845 Uses this {@link COSUpdateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on this {@link COSUpdateInfo}. @see COSIncrement
846 Convenience method, so that we get false for types that can't be updated. @param base @return
847 This factory method will get the appropriate number object. @param number The string representation of the number. @return A number object, either float or int. @throws IOException If the string is not a number.
848 Appends a marked-content sequence kid. @param mcid the marked-content id (MCID). @throws IllegalArgumentException if the mcid is negative.
849 @return the value for this direction
850 Constructor. @param num The object number. @param gen The object generation number.
851 Close all input documents which were used for the overlay and opened by this class. @throws IOException if something went wrong
852 This will get the suffix for this image type, e.g. jpg/png. @return The image suffix or null if not available.
853 Creates a Form XObject for reading. @param stream The XObject stream
854 Creates an Image XObject with the given stream as its contents and current color spaces. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param stream the XObject stream to read @param resources the current resources
855 Returns a new OutputStream for writing stream data, using and the given filters. @param filters COSArray or COSName of filters to be used. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
856 Creates a new <i>text string</i> from a Java String. @param text The string value of the object.
857 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
858 Parse the header of a pdf. @return true if a PDF header was found @throws IOException if something went wrong
859 Parse the header of a fdf. @return true if a FDF header was found @throws IOException if something went wrong
860 This will get the file name. @return The file name.
861 Skip the upcoming CRLF or LF which are supposed to follow a stream. Trailing spaces are removed as well. @throws IOException if something went wrong
862 Return either one of a list which can have two-element arrays entries. <p> Some entries in a dictionary can either be an array of elements or an array of two-element arrays. This method will either return the elements in the array or in case of two-element arrays, the element designated by the pair index </p> <p> An {@link IllegalArgumentException} will be thrown if the items contain two-element arrays and the index is not 0 or 1. </p> @param items the array of elements or two-element arrays @param pairIdx the index into the two-element array @return a List of single elements
863 Skip one line break, such as CR, LF or CRLF. @return true if a line break was found and removed. @throws IOException if something went wrong
864 This will get the (optional) export values. <p>The export values are defined in the field dictionaries /Opt key.</p> <p>The option values are used to define the export values for the field to <ul> <li>hold values in non-Latin writing systems as name objects, which represent the field value, are limited to PDFDocEncoding </li> <li>allow radio buttons having the same export value to be handled independently </li> </ul> @return List containing all possible export values. If there is no /Opt entry an empty list will be returned. @see #getOnValues()
865 This will read bytes until the first end of line marker occurs. NOTE: The EOL marker may consists of 1 (CR or LF) or 2 (CR and CL) bytes which is an important detail if one wants to unread the line. @return The characters between the current position and the end of the line. @throws IOException If there is an error reading from the stream.
866 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
867 This will skip all spaces and comments that are present. @throws IOException If there is an error reading from the stream.
868 Sets the {@link #updated} state of the managed {@link #updateInfo} to the given state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @param updated The state to set for {@link #updated}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
869 This will close the stream. @throws IOException If there is an error closing the wrapped stream.
870 Search for the offset of the given xref table/stream among those found by a brute force search. @param xrefOffset the given offset to be searched for @return the offset of the xref entry @throws IOException if something went wrong
871 COSWriter constructor. @param outputStream The output stream to write the PDF.
872 Constructor for incremental updates with a list of objects to write. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data. @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if something went wrong
873 Writes an integer number to the content stream. @param integer the integer to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
874 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream followed by a newline @throws IOException If the underlying stream has a problem being written to.
875 Close all input documents which were used for the overlay and opened by this class. @throws IOException if something went wrong
876 Retrieve the encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. The glyph IDs used are also added to the specified glyph ID set. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param glyphIds The set of glyph IDs which is to be populated with the glyph IDs found in the text. @param font The font whose cmap table will be used to map characters to glyph IDs. @param text The text which is being converted from characters to glyph IDs. @return The encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. @throws IOException If there is an error during encoding. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified text.
877 Creates a Form XObject for reading. @param stream The XObject stream
878 Creates an Image XObject with the given stream as its contents and current color spaces. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param stream the XObject stream to read @param resources the current resources
879 Parse the header of a pdf. @return true if a PDF header was found @throws IOException if something went wrong
880 Parse the header of a fdf. @return true if a FDF header was found @throws IOException if something went wrong
881 Create the resulting document. Maybe overwritten if the parser uses another class as document. @return the resulting document @throws IOException if the method is called before parsing the document
882 Skip the upcoming CRLF or LF which are supposed to follow a stream. Trailing spaces are removed as well. @throws IOException if something went wrong
883 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf
884 Skip one line break, such as CR, LF or CRLF. @return true if a line break was found and removed. @throws IOException if something went wrong
885 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object. @throws IllegalStateException if the value of the metadata entry is different from a stream or null
886 This will read bytes until the first end of line marker occurs. NOTE: The EOL marker may consists of 1 (CR or LF) or 2 (CR and CL) bytes which is an important detail if one wants to unread the line. @return The characters between the current position and the end of the line. @throws IOException If there is an error reading from the stream.
887 Returns the metadata associated with this XObject, or null if there is none. @return the metadata associated with this object.
888 This will skip all spaces and comments that are present. @throws IOException If there is an error reading from the stream.
889 A reference to an object stream, of which the current object stream is considered an extension. @return The object that this stream is an extension.
890 Constructor. @param function The function.
891 Search for the offset of the given xref table/stream among those found by a brute force search. @param xrefOffset the given offset to be searched for @return the offset of the xref entry @throws IOException if something went wrong
892 Constructor. @param functionStream The function .
893 Creates a PostScript XObject. @param stream The XObject stream
894 Creates a Form XObject for reading. @param stream The XObject stream
895 COSWriter constructor. @param outputStream The output stream to write the PDF.
896 Creates a Form XObject for reading. @param stream The XObject stream @param cache the cache to be used for the resources
897 Creates a default attribute object with a given dictionary. @param dictionary the dictionary
898 Constructor for incremental updates with a list of objects to write. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data. @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if something went wrong
899 Constructor @param dictionary the dictionary
900 Writes an integer number to the content stream. @param integer the integer to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
901 Creates a new standard attribute object with a given dictionary. @param dictionary the dictionary
902 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream followed by a newline @throws IOException If the underlying stream has a problem being written to.
903 Retrieve the encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. The glyph IDs used are also added to the specified glyph ID set. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param glyphIds The set of glyph IDs which is to be populated with the glyph IDs found in the text. @param font The font whose cmap table will be used to map characters to glyph IDs. @param text The text which is being converted from characters to glyph IDs. @return The encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. @throws IOException If there is an error during encoding. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified text.
904 {@inheritDoc}
905 This will tell if the access permission corresponds to owner access permission (no restriction). @return true if the access permission does not restrict the use of the document
906 Indicates if any revision 3 access permission is set or not. @return true if any revision 3 access permission is set
907 Constructor.
908 Create the resulting document. Maybe overwritten if the parser uses another class as document. @return the resulting document @throws IOException if the method is called before parsing the document
909 Constructor.
910 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf
911 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
912 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object. @throws IllegalStateException if the value of the metadata entry is different from a stream or null
913 Returns the metadata associated with this XObject, or null if there is none. @return the metadata associated with this object.
914 This will encrypt and write the data. @param data The data to encrypt. @param offset The offset into the array to start reading data from. @param len The number of bytes to attempt to read. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
915 A reference to an object stream, of which the current object stream is considered an extension. @return The object that this stream is an extension.
916 Constructor. @param function The function.
917 Constructor. @param functionStream The function .
918 Constructor used for encryption. @param publicKeyProtectionPolicy The protection policy.
919 Constructor used for encryption. @param standardProtectionPolicy The protection policy.
920 Creates a PostScript XObject. @param stream The XObject stream
921 Creates a Form XObject for reading. @param stream The XObject stream
922 Encrypt or decrypt data with AES with key length other than 256 bits. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
923 Creates a Form XObject for reading. @param stream The XObject stream @param cache the cache to be used for the resources
924 Creates a default attribute object with a given dictionary. @param dictionary the dictionary
925 Encrypt or decrypt data with AES256. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
926 Constructor @param dictionary the dictionary
927 Creates a new standard attribute object with a given dictionary. @param dictionary the dictionary
928 {@inheritDoc}
929 This will compute the user password hash. @param password The plain text password. @param owner The owner password hash. @param permissions The document permissions. @param id The document id. @param encRevision The revision of the encryption. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return The user password. @throws IOException if the password could not be computed
930 This will tell if the access permission corresponds to owner access permission (no restriction). @return true if the access permission does not restrict the use of the document
931 Compute the owner entry in the encryption dictionary. @param ownerPassword The plaintext owner password. @param userPassword The plaintext user password. @param encRevision The revision number of the encryption algorithm. @param length The length of the encryption key. @return The o entry of the encryption dictionary. @throws IOException if the owner password could not be computed
932 Indicates if any revision 3 access permission is set or not. @return true if any revision 3 access permission is set
933 Constructor. @param a An existing FDF Annotation.
934 Constructor. @param a An existing FDF Annotation.
935 Constructor.
936 Constructor. @param a An existing FDF Annotation.
937 Constructor.
938 Constructor. @param a An existing FDF Annotation.
939 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
940 {@inheritDoc} <p> The method returns null if there is there was an error opening the font.
941 This will encrypt and write the data. @param data The data to encrypt. @param offset The offset into the array to start reading data from. @param len The number of bytes to attempt to read. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
942 Constructor used for encryption. @param publicKeyProtectionPolicy The protection policy.
943 Constructor used for encryption. @param standardProtectionPolicy The protection policy.
944 Encrypt or decrypt data with AES with key length other than 256 bits. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
945 Loads the font metadata cache from disk.
946 Saves the font metadata cache to disk.
947 Encrypt or decrypt data with AES256. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
948 Returns the metrics for font specified by fontName. Loads the font metrics if not already loaded. @param fontName name of font; either a base name or alias @return the font metrics or null if the name is not one of the known names @throws IllegalArgumentException if no metrics exist for that font.
949 Sets the font service provider.
950 This will compute the user password hash. @param password The plain text password. @param owner The owner password hash. @param permissions The document permissions. @param id The document id. @param encRevision The revision of the encryption. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return The user password. @throws IOException if the password could not be computed
951 Compute the owner entry in the encryption dictionary. @param ownerPassword The plaintext owner password. @param userPassword The plaintext user password. @param encRevision The revision number of the encryption algorithm. @param length The length of the encryption key. @return The o entry of the encryption dictionary. @throws IOException if the owner password could not be computed
952 Constructor. @param a An existing FDF Annotation.
953 Constructor. @param a An existing FDF Annotation.
954 Constructor. @param a An existing FDF Annotation.
955 Constructor. @param a An existing FDF Annotation.
956 Inverts the font's code -&gt; GID mapping. Any duplicate (GID -&gt; code) mappings will be lost. @return the GID for the given code @throws IOException if the data could not be read
957 {@inheritDoc} <p> The method returns null if there is there was an error opening the font.
958 Loads the font metadata cache from disk.
959 Saves the font metadata cache to disk.
960 Returns the metrics for font specified by fontName. Loads the font metrics if not already loaded. @param fontName name of font; either a base name or alias @return the font metrics or null if the name is not one of the known names @throws IllegalArgumentException if no metrics exist for that font.
961 Sets the font service provider.
962 Loads a glyph list from disk.
963 Inverts the font's code -&gt; GID mapping. Any duplicate (GID -&gt; code) mappings will be lost. @return the GID for the given code @throws IOException if the data could not be read
964 Check if the chunk is sane, i.e. CRC matches and offsets and lengths in the byte array
965 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
966 Constructor. @param p an array of the 3 vertices of a triangle @param c an array of color corresponding the vertex array p
967 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
968 Loads a glyph list from disk.
969 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
970 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
971 End buffering the text clipping path, if any.
972 Sets the clipping path using caching for performance. We track lastClip manually because {@link Graphics2D#getClip()} returns a new object instead of the same one passed to {@link Graphics2D#setClip(java.awt.Shape) setClip()}. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more.
973 Creates a new soft mask. @param dictionary SMask @return the newly created instance of PDSoftMask
974 Check if the chunk is sane, i.e. CRC matches and offsets and lengths in the byte array
975 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
976 Constructor. @param p an array of the 3 vertices of a triangle @param c an array of color corresponding the vertex array p
977 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
978 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
979 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
980 Generate a unique name for the signature. @return the signature's unique name
981 End buffering the text clipping path, if any.
982 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
983 Sets the clipping path using caching for performance. We track lastClip manually because {@link Graphics2D#getClip()} returns a new object instead of the same one passed to {@link Graphics2D#setClip(java.awt.Shape) setClip()}. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more.
984 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
985 Creates a new soft mask. @param dictionary SMask @return the newly created instance of PDSoftMask
986 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
987 This will get the text direction adjusted x position of the character. This is adjusted based on text direction so that the first character in that direction is in the upper left at 0,0. This method ignores the page rotation but takes the text rotation (see {@link #getDir() getDir()}) and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The x coordinate of the text.
988 Constructor. @param pageRotation rotation of the page that the text is located in @param pageWidth width of the page that the text is located in @param pageHeight height of the page that the text is located in @param textMatrix text rendering matrix for start of text (in display units) @param endX x coordinate of the end position @param endY y coordinate of the end position @param maxHeight Maximum height of text (in display units) @param individualWidth The width of the given character/string. (in text units) @param spaceWidth The width of the space character. (in display units) @param unicode The string of Unicode characters to be displayed. @param charCodes An array of the internal PDF character codes for the glyphs in this text. @param font The current font for this text position. @param fontSize The new font size. @param fontSizeInPt The font size in pt units (see {@link #getFontSizeInPt()} for details).
989 This will get the y position of the text, adjusted so that 0,0 is upper left and it is adjusted based on the text direction. This method ignores the page rotation but takes the text rotation and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The adjusted y coordinate of the character.
990 This will get the width of the string when page rotation adjusted coordinates are used. @return The width of the text in display units.
991 This will get the width of the string when text direction adjusted coordinates are used. @return The width of the text in display units.
992 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). This assumes that the primary direction of text is left to right. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
993 Write a list of string containing a whole line of a document. @param line a list with the words of the given line @throws IOException if something went wrong
994 Write something (if defined) at the end of a paragraph. @throws IOException if something went wrong
995 Used within {@link #normalize(List)} to create a single {@link WordWithTextPositions} entry.
996 Converts a Calendar to a string formatted as: D:yyyyMMddHHmmss#hh'mm' where # is Z, +, or -. @param cal The date to convert to a string. May be null. The DST_OFFSET is included when computing the output time zone. @return The date as a String to be used in a PDF document, or null if the cal value is null
997 Converts the date to ISO 8601 string format: yyyy-mm-ddThh:MM:ss#hh:mm (where '#" is '+' or '-'). @param cal The date to convert. Must not be null. The DST_OFFSET is included in the output value. @return The date represented as an ISO 8601 string.
998 This will take this string and create a hex representation of the bytes that make the string. @return A hex string representing the bytes in this string.
999 Write externally created signature of PDF data obtained via {@link #getDataToSign()} method. @param cmsSignature CMS signature byte array @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if source data stream is closed
1000 Generate a unique name for the signature. @return the signature's unique name
1001 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1002 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1003 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
1004 Writes the given byte array as hex value to the given output stream. @param bytes the byte array to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
1005 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1006 Sorts this list according to the order induced by the specified {@link Comparator}. @param <T> the class of the objects in the list @param list the list to be sorted. @param cmp the comparator to determine the order of the list.
1007 This will get the text direction adjusted x position of the character. This is adjusted based on text direction so that the first character in that direction is in the upper left at 0,0. This method ignores the page rotation but takes the text rotation (see {@link #getDir() getDir()}) and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The x coordinate of the text.
1008 Constructor. @param pageRotation rotation of the page that the text is located in @param pageWidth width of the page that the text is located in @param pageHeight height of the page that the text is located in @param textMatrix text rendering matrix for start of text (in display units) @param endX x coordinate of the end position @param endY y coordinate of the end position @param maxHeight Maximum height of text (in display units) @param individualWidth The width of the given character/string. (in text units) @param spaceWidth The width of the space character. (in display units) @param unicode The string of Unicode characters to be displayed. @param charCodes An array of the internal PDF character codes for the glyphs in this text. @param font The current font for this text position. @param fontSize The new font size. @param fontSizeInPt The font size in pt units (see {@link #getFontSizeInPt()} for details).
1009 This will get the y position of the text, adjusted so that 0,0 is upper left and it is adjusted based on the text direction. This method ignores the page rotation but takes the text rotation and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The adjusted y coordinate of the character.
1010 This will get the width of the string when page rotation adjusted coordinates are used. @return The width of the text in display units.
1011 This will get the width of the string when text direction adjusted coordinates are used. @return The width of the text in display units.
1012 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). This assumes that the primary direction of text is left to right. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
1013 Rotates this matrix by the given factors. @param theta The angle of rotation measured in radians
1014 Applies a text position adjustment from the TJ operator. May be overridden in subclasses. @param tx x-translation @param ty y-translation
1015 Write a list of string containing a whole line of a document. @param line a list with the words of the given line @throws IOException if something went wrong
1016 Translates this matrix by the given vector. @param vector 2D vector
1017 Write something (if defined) at the end of a paragraph. @throws IOException if something went wrong
1018 Produces a copy of the first matrix, with the second matrix concatenated. @param a The matrix to copy. @param b The matrix to concatenate. @return a copy of the first matrix with the second matrix concatenated
1019 Used within {@link #normalize(List)} to create a single {@link WordWithTextPositions} entry.
1020 Writes a real number to the content stream. @param real the real number to be added to the content stream @throws IOException If the underlying stream has a problem being written to. @throws IllegalArgumentException if the parameter is not a finite number
1021 Converts a Calendar to a string formatted as: D:yyyyMMddHHmmss#hh'mm' where # is Z, +, or -. @param cal The date to convert to a string. May be null. The DST_OFFSET is included when computing the output time zone. @return The date as a String to be used in a PDF document, or null if the cal value is null
1022 Examines the a file's first bytes and estimates the file's type. <p> Requires a {@link BufferedInputStream} in order to mark and reset the stream to the position at which it was provided to this method once completed. <p> Requires the stream to contain at least eight bytes. @param inputStream a buffered input stream of the file to examine. @return the file type. @throws IOException if an IO error occurred or the input stream ended unexpectedly.
1023 Converts the date to ISO 8601 string format: yyyy-mm-ddThh:MM:ss#hh:mm (where '#" is '+' or '-'). @param cal The date to convert. Must not be null. The DST_OFFSET is included in the output value. @return The date represented as an ISO 8601 string.
1024 This is used to handle an operation. @param operation The operation to perform. @param arguments The list of arguments. @throws IOException If there is an error processing the operation.
1025 This will take this string and create a hex representation of the bytes that make the string. @return A hex string representing the bytes in this string.
1026 Write externally created signature of PDF data obtained via {@link #getDataToSign()} method. @param cmsSignature CMS signature byte array @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if source data stream is closed
1027 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1028 Writes the given byte array as hex value to the given output stream. @param bytes the byte array to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
1029 Sorts this list according to the order induced by the specified {@link Comparator}. @param <T> the class of the objects in the list @param list the list to be sorted. @param cmp the comparator to determine the order of the list.
1030 Constructor. Will apply encoding-specific conversions to the output text. @param encoding The encoding that the output will be written in.
1031 Instantiate a new PDFTextStripper object.
1032 Creates a marked-content sequence. @param tag the tag @param properties the properties @return the marked-content sequence
1033 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
1034 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
1035 Rotates this matrix by the given factors. @param theta The angle of rotation measured in radians
1036 Applies a text position adjustment from the TJ operator. May be overridden in subclasses. @param tx x-translation @param ty y-translation
1037 Returns a filter instance given its name as a string. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
1038 Translates this matrix by the given vector. @param vector 2D vector
1039 This will parse a PDF name from the stream. @return The parsed PDF name. @throws IOException If there is an error reading from the stream.
1040 Produces a copy of the first matrix, with the second matrix concatenated. @param a The matrix to copy. @param b The matrix to concatenate. @return a copy of the first matrix with the second matrix concatenated
1041 Writes a real number to the content stream. @param real the real number to be added to the content stream @throws IOException If the underlying stream has a problem being written to. @throws IllegalArgumentException if the parameter is not a finite number
1042 Examines the a file's first bytes and estimates the file's type. <p> Requires a {@link BufferedInputStream} in order to mark and reset the stream to the position at which it was provided to this method once completed. <p> Requires the stream to contain at least eight bytes. @param inputStream a buffered input stream of the file to examine. @return the file type. @throws IOException if an IO error occurred or the input stream ended unexpectedly.
1043 Creates a PDColor containing the given color value. @param array a COS array containing the color value @param colorSpace color space in which the color value is defined
1044 This is used to handle an operation. @param operation The operation to perform. @param arguments The list of arguments. @throws IOException If there is an error processing the operation.
1045 This will create a COS string from a string of hex characters. @param hex A hex string. @return A cos string with the hex characters converted to their actual bytes. @throws IOException If there is an error with the hex string.
1046 This will take a list of integer objects and return a COSArray of COSInteger objects. @param integer A list of integers @return An array of COSInteger objects
1047 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
1048 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
1049 Default constructor.
1050 This constructor is to be used if the array doesn't exist, but is to be created and added to the parent dictionary as soon as the first element is added to the array. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
1051 Constructor. @param x the x coordinate of the rectangle @param y the y coordinate of the rectangle @param width The width of the rectangle. @param height The height of the rectangle.
1052 Constructor. Will apply encoding-specific conversions to the output text. @param encoding The encoding that the output will be written in.
1053 Instantiate a new PDFTextStripper object.
1054 Constructor. @param box the bounding box to be used for the rectangle
1055 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
1056 Creates a marked-content sequence. @param tag the tag @param properties the properties @return the marked-content sequence
1057 Sets the list of alternateColorSpace color spaces. @param list the list of color space objects
1058 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
1059 Creates a new COSStream using the current configuration for scratch files. @return the new COSStream
1060 Creates a new stream with an empty dictionary. <p> Try to avoid using this constructor because it creates a new scratch file in memory. Instead, use {@link COSDocument#createCOSStream() document.getDocument().createCOSStream()} which will use the existing scratch file (in memory or in temp file) of the document. </p>
1061 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
1062 Creates a new stream with an empty dictionary. Data is read from the given random accessview. Written data is stored in the given scratch file. @param streamCache Stream cache for writing stream data. @param randomAccessReadView source for the data to be read @throws IOException if the length of the random access view isn't available
1063 Returns a filter instance given its name as a string. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
1064 Returns an unmodifiable view of this dictionary. @return an unmodifiable view of this dictionary
1065 This will parse a PDF name from the stream. @return The parsed PDF name. @throws IOException If there is an error reading from the stream.
1066 Returns the result of the last filter, for use by repair mechanisms. @return the result of the last filter
1067 This will get the resources for this Form XObject. This will return null if no resources are available. @return The resources for this Form XObject.
1068 Default constructor.
1069 Creates a new user property. @param userAttributeObject the user attribute object
1070 Creates a PDColor containing the given color value. @param array a COS array containing the color value @param colorSpace color space in which the color value is defined
1071 Constructor.
1072 Constructor.
1073 Constructor.
1074 This will create a COS string from a string of hex characters. @param hex A hex string. @return A cos string with the hex characters converted to their actual bytes. @throws IOException If there is an error with the hex string.
1075 Constructor.
1076 This will take a list of integer objects and return a COSArray of COSInteger objects. @param integer A list of integers @return An array of COSInteger objects
1077 Constructor. @param acroForm The form that this field is part of.
1078 Constructor. @param acroForm The form that this field is part of.
1079 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
1080 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
1081 Default constructor.
1082 This constructor is to be used if the array doesn't exist, but is to be created and added to the parent dictionary as soon as the first element is added to the array. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
1083 Transforms the given rectangle using the CTM and then intersects it with the current clipping area.
1084 Constructor. @param x the x coordinate of the rectangle @param y the y coordinate of the rectangle @param width The width of the rectangle. @param height The height of the rectangle.
1085 Calculate the transformed appearance box. Apply the Matrix (or an identity transform) to the BBox of the appearance stream @param appearanceStream @return the transformed rectangle
1086 Constructor. @param box the bounding box to be used for the rectangle
1087 Constructor with a given page size to initialize the clipping path. @param page the size of the page
1088 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
1089 Constructor. Uses main memory to buffer PDF streams.
1090 Sets the list of alternateColorSpace color spaces. @param list the list of color space objects
1091 Creates a new COSStream using the current configuration for scratch files. @return the new COSStream
1092 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException if the source data could not be read
1093 Creates a new stream with an empty dictionary. <p> Try to avoid using this constructor because it creates a new scratch file in memory. Instead, use {@link COSDocument#createCOSStream() document.getDocument().createCOSStream()} which will use the existing scratch file (in memory or in temp file) of the document. </p>
1094 Creates a new stream with an empty dictionary. Data is read from the given random accessview. Written data is stored in the given scratch file. @param streamCache Stream cache for writing stream data. @param randomAccessReadView source for the data to be read @throws IOException if the length of the random access view isn't available
1095 Returns an unmodifiable view of this dictionary. @return an unmodifiable view of this dictionary
1096 Returns the object key for the given combination of object and generation number. The object key from the cross reference table/stream will be reused if available. Otherwise a newly created object will be returned. @param num the given object number @param gen the given generation number @return the COS object key
1097 Returns the result of the last filter, for use by repair mechanisms. @return the result of the last filter
1098 Brute force search for every object in the pdf. @throws IOException if something went wrong
1099 This will get the resources for this Form XObject. This will return null if no resources are available. @return The resources for this Form XObject.
1100 Search for all offsets of object streams within the given pdf @return a map of all offsets for object streams @throws IOException if something went wrong
1101 Default constructor.
1102 Creates a new user property. @param userAttributeObject the user attribute object
1103 Parses through the unfiltered stream and populates the xrefTable HashMap. @param resolver resolver to read the xref/trailer information @throws IOException If there is an error while parsing the stream.
1104 Constructor.
1105 Constructor.
1106 Constructor.
1107 Check if the given object can be found at the given offset. Returns the provided object key if everything is ok. If the generation number differs it will be fixed and a new object key is returned. @param objectKey the key of object we are looking for @param offset the offset where to look @param xrefOffset a map with with all known xref entries @return returns the found/fixed object key @throws IOException if something went wrong
1108 Constructor.
1109 Constructor. @param acroForm The form that this field is part of.
1110 This will parse the xref table from the stream and add it to the state The XrefTable contents are ignored. @param startByteOffset the offset to start at @return false on parsing error @throws IOException If an IO error occurs.
1111 Constructor. @param acroForm The form that this field is part of.
1112 Returns a new OutputStream for writing stream data, using the current filters. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
1113 This will get a stream that can be written to, with the given filter. @param filter the filter to be used. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
1114 Constructor.
1115 This will set the file name. @param fileName The name of the file.
1116 Transforms the given rectangle using the CTM and then intersects it with the current clipping area.
1117 Get the value of the array as a string. @param index The index into the array. @return The string or null if it does not exist.
1118 Calculate the transformed appearance box. Apply the Matrix (or an identity transform) to the BBox of the appearance stream @param appearanceStream @return the transformed rectangle
1119 Returns the selected value. <p>Off is the default value which will also be returned if the value hasn't been set at all. @return A non-null string.
1120 Constructor with a given page size to initialize the clipping path. @param page the size of the page
1121 Set the update state of the dictionary for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @param flag the update state.
1122 Constructor. Uses main memory to buffer PDF streams.
1123 Calls {@link #update(boolean)} with {@code true} as the new update state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
1124 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException if the source data could not be read
1125 Returns the object key for the given combination of object and generation number. The object key from the cross reference table/stream will be reused if available. Otherwise a newly created object will be returned. @param num the given object number @param gen the given generation number @return the COS object key
1126 Brute force search for every object in the pdf. @throws IOException if something went wrong
1127 Search for all offsets of object streams within the given pdf @return a map of all offsets for object streams @throws IOException if something went wrong
1128 Parses through the unfiltered stream and populates the xrefTable HashMap. @param resolver resolver to read the xref/trailer information @throws IOException If there is an error while parsing the stream.
1129 Check if the given object can be found at the given offset. Returns the provided object key if everything is ok. If the generation number differs it will be fixed and a new object key is returned. @param objectKey the key of object we are looking for @param offset the offset where to look @param xrefOffset a map with with all known xref entries @return returns the found/fixed object key @throws IOException if something went wrong
1130 This will parse the xref table from the stream and add it to the state The XrefTable contents are ignored. @param startByteOffset the offset to start at @return false on parsing error @throws IOException If an IO error occurs.
1131 Creates a Transparency Group for reading. @param stream The XObject stream
1132 Returns a new OutputStream for writing stream data, using the current filters. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
1133 Creates a thumbnail Image XObject from the given COSBase and name. @param cosStream the COS stream @return an XObject
1134 Returns the Mask Image XObject associated with this image, or null if there is none. @return Mask Image XObject
1135 This will get a stream that can be written to, with the given filter. @param filter the filter to be used. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
1136 Constructor.
1137 Returns the Soft Mask Image XObject associated with this image, or null if there is none. @return the SMask Image XObject, or null.
1138 This will set the file name. @param fileName The name of the file.
1139 This will read the next string from the stream. @return The string that was read from the stream, never null. @throws IOException If there is an error reading from the stream.
1140 Get the value of the array as a string. @param index The index into the array. @return The string or null if it does not exist.
1141 Reads given pattern from {@link #source}. Skipping whitespace at start and end if wanted. @param expectedString pattern to be skipped @param skipSpaces if set to true spaces before and after the string will be skipped @throws IOException if pattern could not be read
1142 Returns the selected value. <p>Off is the default value which will also be returned if the value hasn't been set at all. @return A non-null string.
1143 Set the update state of the dictionary for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @param flag the update state.
1144 This will read the next string from the stream up to a certain length. @param length The length to stop reading at. @return The string that was read from the stream of length 0 to length. @throws IOException If there is an error reading from the stream.
1145 Calls {@link #update(boolean)} with {@code true} as the new update state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
1146 This will read an integer from the stream. @return The integer that was read from the stream. @throws IOException If there is an error reading from the stream.
1147 This will read an long from the stream. @return The long that was read from the stream. @throws IOException If there is an error reading from the stream.
1148 Try to find a fixed offset for the given xref table/stream. @param objectOffset the given offset where to look at @return the fixed offset @throws IOException if something went wrong
1149 This will save the document to an output stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
1150 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1151 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1152 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1153 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1154 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1155 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1156 Creates a Transparency Group for reading. @param stream The XObject stream
1157 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1158 Creates a thumbnail Image XObject from the given COSBase and name. @param cosStream the COS stream @return an XObject
1159 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1160 Returns the Mask Image XObject associated with this image, or null if there is none. @return Mask Image XObject
1161 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1162 Returns the Soft Mask Image XObject associated with this image, or null if there is none. @return the SMask Image XObject, or null.
1163 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1164 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1165 This will read the next string from the stream. @return The string that was read from the stream, never null. @throws IOException If there is an error reading from the stream.
1166 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1167 Reads given pattern from {@link #source}. Skipping whitespace at start and end if wanted. @param expectedString pattern to be skipped @param skipSpaces if set to true spaces before and after the string will be skipped @throws IOException if pattern could not be read
1168 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1169 This will read the next string from the stream up to a certain length. @param length The length to stop reading at. @return The string that was read from the stream of length 0 to length. @throws IOException If there is an error reading from the stream.
1170 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1171 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1172 This will read an integer from the stream. @return The integer that was read from the stream. @throws IOException If there is an error reading from the stream.
1173 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1174 This will read an long from the stream. @return The long that was read from the stream. @throws IOException If there is an error reading from the stream.
1175 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1176 Try to find a fixed offset for the given xref table/stream. @param objectOffset the given offset where to look at @return the fixed offset @throws IOException if something went wrong
1177 This will save the document to an output stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
1178 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1179 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1180 End a marked content sequence. @throws IOException If the content stream could not be written
1181 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1182 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1183 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1184 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps.
1185 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1186 Creates a Form XObject for reading. @param stream The XObject stream
1187 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1188 Creates a Transparency Group for reading. @param stream The XObject stream @param cache the cache to be used for the resources
1189 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1190 Creates a new Layout attribute object with a given dictionary. @param dictionary the dictionary
1191 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1192 Creates a new List attribute object with a given dictionary. @param dictionary the dictionary
1193 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1194 Creates a new PrintField attribute object with a given dictionary. @param dictionary the dictionary
1195 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1196 Creates a new Table attribute object with a given dictionary. @param dictionary the dictionary
1197 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1198 Returns the access permissions granted when the document was decrypted. If the document was not decrypted this method returns the access permission for a document owner (ie can do everything). The returned object is in read only mode so that permissions cannot be changed. Methods providing access to content should rely on this object to verify if the current user is allowed to proceed. @return the access permissions for the current user on the document.
1199 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1200 Computes the revision version of the StandardSecurityHandler to use regarding the version number and the permissions bits set. See PDF Spec 1.6 p98 @param version The version number. @return The computed revision number.
1201 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1202 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1203 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
1204 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1205 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1206 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
1207 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1208 Return the {@code SASLPrep}-canonicalised version of the given {@code str} for use as a query string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a query string is.
1209 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1210 Return the {@code SASLPrep}-canonicalised version of the given @code str} for use as a stored string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a stored string is.
1211 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1212 End a marked content sequence. @throws IOException If the content stream could not be written
1213 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1214 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps.
1215 Creates a Form XObject for reading. @param stream The XObject stream
1216 Creates a Transparency Group for reading. @param stream The XObject stream @param cache the cache to be used for the resources
1217 Creates a new Layout attribute object with a given dictionary. @param dictionary the dictionary
1218 Creates a new List attribute object with a given dictionary. @param dictionary the dictionary
1219 Creates a new PrintField attribute object with a given dictionary. @param dictionary the dictionary
1220 Creates a new Table attribute object with a given dictionary. @param dictionary the dictionary
1221 Returns the access permissions granted when the document was decrypted. If the document was not decrypted this method returns the access permission for a document owner (ie can do everything). The returned object is in read only mode so that permissions cannot be changed. Methods providing access to content should rely on this object to verify if the current user is allowed to proceed. @return the access permissions for the current user on the document.
1222 Get the user password based on the owner password. @param ownerPassword The plaintext owner password. @param owner The o entry of the encryption dictionary. @param encRevision The encryption revision number. @param length The key length. @return The u entry of the encryption dictionary. @throws IOException If there is an error accessing data while generating the user password.
1223 Computes the revision version of the StandardSecurityHandler to use regarding the version number and the permissions bits set. See PDF Spec 1.6 p98 @param version The version number. @return The computed revision number.
1224 Adds a TTC or OTC to the file cache. To reduce memory, the parsed font is not cached.
1225 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
1226 Adds a Type 1 font to the file cache. To reduce memory, the parsed font is not cached.
1227 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
1228 Returns the font service provider. Defaults to using FileSystemFontProvider.
1229 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
1230 Return the {@code SASLPrep}-canonicalised version of the given {@code str} for use as a query string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a query string is.
1231 Return the {@code SASLPrep}-canonicalised version of the given @code str} for use as a stored string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a stored string is.
1232 Writes the CMap as ASCII to the given output stream. @param out ASCII output stream @throws IOException if the stream could not be written
1233 Check if the converter state is sane. @param state the parsed converter state @return true if the state seems plausible
1234 Constructor of a patch for type 6 shading. @param points 12 control points @param color 4 corner colors
1235 An assistant method to accomplish type 6 and type 7 shading. @param patchCC all the crossing point coordinates and color of a grid @return a ShadedTriangle list which can compose the grid patch
1236 Get the user password based on the owner password. @param ownerPassword The plaintext owner password. @param owner The o entry of the encryption dictionary. @param encRevision The encryption revision number. @param length The key length. @return The u entry of the encryption dictionary. @throws IOException If there is an error accessing data while generating the user password.
1237 Adds a TTC or OTC to the file cache. To reduce memory, the parsed font is not cached.
1238 Constructor of a patch for type 7 shading. @param tcp 16 control points @param color 4 corner colors
1239 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
1240 Adds a Type 1 font to the file cache. To reduce memory, the parsed font is not cached.
1241 Returns the font service provider. Defaults to using FileSystemFontProvider.
1242 Writes the CMap as ASCII to the given output stream. @param out ASCII output stream @throws IOException if the stream could not be written
1243 Check if the converter state is sane. @param state the parsed converter state @return true if the state seems plausible
1244 Constructor of a patch for type 6 shading. @param points 12 control points @param color 4 corner colors
1245 Return the stream of PDF data to be signed. Clients should use this method only to create signatures externally. {@link #write(PDDocument)} method should have been called prior. The created signature should be set using {@link #writeExternalSignature(byte[])}. <p> When {@link SignatureInterface} instance is used, COSWriter obtains and writes the signature itself. </p> @return data stream to be signed @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if input data is closed
1246 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1247 An assistant method to accomplish type 6 and type 7 shading. @param patchCC all the crossing point coordinates and color of a grid @return a ShadedTriangle list which can compose the grid patch
1248 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1249 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1250 Constructor of a patch for type 7 shading. @param tcp 16 control points @param color 4 corner colors
1251 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1252 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1253 Merge a single character TextPosition into the current object. This is to be used only for cases where we have a diacritic that overlaps an existing TextPosition. In a graphical display, we could overlay them, but for text extraction we need to merge them. Use the contains() method to test if two objects overlap. @param diacritic TextPosition to merge into the current TextPosition.
1254 tests the relationship between the last text position, the current text position and the last text position that followed a line separator to decide if the gap represents a paragraph separation. This should <i>only</i> be called for consecutive text positions that first pass the line separation test. <p> This base implementation tests to see if the lastLineStartPosition is null OR if the current vertical position has dropped below the last text vertical position by at least 2.5 times the current text height OR if the current horizontal position is indented by at least 2 times the current width of a space character. </p> <p> This also attempts to identify text that is indented under a hanging indent. </p> <p> This method sets the isParagraphStart and isHangingIndent flags on the current position object. </p> @param position the current text position. This may have its isParagraphStart or isHangingIndent flags set upon return. @param lastPosition the previous text position (should not be null). @param lastLineStartPosition the last text position that followed a line separator, or null. @param maxHeightForLine max height for text positions since lasLineStartPosition.
1255 Determine if this TextPosition logically contains another (i.e. they overlap and should be rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained in the bounding box of this text.
1256 Determine if this TextPosition perfectly contains another (i.e. the other TextPosition overlaps 100% with this one and fits entirely inside its bounding box when they are rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained completely inside the bounding box of this text.
1257 writes the paragraph separator string to the output. @throws IOException if something went wrong
1258 Used within {@link #normalize(List)} to handle a {@link TextPosition}. @return The StringBuilder that must be used when calling this method.
1259 Return the stream of PDF data to be signed. Clients should use this method only to create signatures externally. {@link #write(PDDocument)} method should have been called prior. The created signature should be set using {@link #writeExternalSignature(byte[])}. <p> When {@link SignatureInterface} instance is used, COSWriter obtains and writes the signature itself. </p> @return data stream to be signed @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if input data is closed
1260 Returns the Calendar for a given string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
1261 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1262 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1263 Write the given {@link COSName} to the given stream. @param output The stream, that shall be written to. @param cosName The content, that shall be written.
1264 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1265 Writes a COSName to the content stream. @param name the name to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
1266 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1267 This will output the given text/byte string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1268 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1269 Pushes the current graphics state to the stack.
1270 Merge a single character TextPosition into the current object. This is to be used only for cases where we have a diacritic that overlaps an existing TextPosition. In a graphical display, we could overlay them, but for text extraction we need to merge them. Use the contains() method to test if two objects overlap. @param diacritic TextPosition to merge into the current TextPosition.
1271 Saves the entire graphics stack. @return the saved graphics state stack.
1272 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1273 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1274 tests the relationship between the last text position, the current text position and the last text position that followed a line separator to decide if the gap represents a paragraph separation. This should <i>only</i> be called for consecutive text positions that first pass the line separation test. <p> This base implementation tests to see if the lastLineStartPosition is null OR if the current vertical position has dropped below the last text vertical position by at least 2.5 times the current text height OR if the current horizontal position is indented by at least 2 times the current width of a space character. </p> <p> This also attempts to identify text that is indented under a hanging indent. </p> <p> This method sets the isParagraphStart and isHangingIndent flags on the current position object. </p> @param position the current text position. This may have its isParagraphStart or isHangingIndent flags set upon return. @param lastPosition the previous text position (should not be null). @param lastLineStartPosition the last text position that followed a line separator, or null. @param maxHeightForLine max height for text positions since lasLineStartPosition.
1275 Determine if this TextPosition logically contains another (i.e. they overlap and should be rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained in the bounding box of this text.
1276 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1277 Determine if this TextPosition perfectly contains another (i.e. the other TextPosition overlaps 100% with this one and fits entirely inside its bounding box when they are rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained completely inside the bounding box of this text.
1278 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1279 writes the paragraph separator string to the output. @throws IOException if something went wrong
1280 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1281 Used within {@link #normalize(List)} to handle a {@link TextPosition}. @return The StringBuilder that must be used when calling this method.
1282 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1283 Returns the Calendar for a given string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
1284 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1285 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1286 Write the given {@link COSName} to the given stream. @param output The stream, that shall be written to. @param cosName The content, that shall be written.
1287 Writes a COSName to the content stream. @param name the name to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
1288 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1289 This will output the given text/byte string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1290 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1291 Pushes the current graphics state to the stack.
1292 Saves the entire graphics stack. @return the saved graphics state stack.
1293 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1294 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1295 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1296 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1297 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1298 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1299 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1300 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1301 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1302 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1303 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1304 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1305 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1306 Writes an AffineTransform to the content stream as an array. @param transform AffineTransfrom to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
1307 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1308 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1309 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1310 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1311 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1312 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1313 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1314 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1315 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1316 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1317 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1318 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1319 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1320 Constructor. @param page the page the content stream belongs to
1321 Instantiate a new PDFMarkedContentExtractor object.
1322 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1323 Constructor. @throws IOException If there is an error loading properties.
1324 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1325 Writes an AffineTransform to the content stream as an array. @param transform AffineTransfrom to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
1326 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1327 This will parse a PDF HEX string with fail fast semantic meaning that we stop if a not allowed character is found. This is necessary in order to detect malformed input and be able to skip to next object start. We assume starting '&lt;' was already read. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
1328 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1329 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1330 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
1331 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1332 Constructor. Initializes to 0,0,0,0
1333 Constructor. @param width The width of the rectangle. @param height The height of the rectangle.
1334 Apply padding to a box. @param box box @return the padded box.
1335 Create a fresh XRef stream like for a fresh file or an incremental update. @param cosDocument the COSDocmernt to be used to create a new COSStream
1336 This will create a new PDObjectStream object. @param document The document that the stream will be part of. @return A new stream object.
1337 Creates a new empty PDStream object. @param document The document that the stream will be part of.
1338 Creates a new empty PDStream object. @param document The document that the stream will be part of.
1339 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied, if any. This method closes the InputStream.
1340 Constructor. @param page the page the content stream belongs to
1341 Creates a COS stream from raw (encoded) data.
1342 Instantiate a new PDFMarkedContentExtractor object.
1343 Encodes data. @param input the byte stream to encode @param encoded the stream where encoded data will be written @param parameters the parameters used for encoding @param index the index to the filter being encoded @throws IOException if the stream cannot be encoded
1344 Constructor. @throws IOException If there is an error loading properties.
1345 Default constructor.
1346 Default constructor
1347 Default constructor.
1348 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroform.
1349 This will parse a PDF HEX string with fail fast semantic meaning that we stop if a not allowed character is found. This is necessary in order to detect malformed input and be able to skip to next object start. We assume starting '&lt;' was already read. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
1350 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @throws IOException if the source data could not be read
1351 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
1352 Constructor. Initializes to 0,0,0,0
1353 Constructor. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException If something went wrong.
1354 Constructor. @param width The width of the rectangle. @param height The height of the rectangle.
1355 This will parse a PDF dictionary value. @return The parsed Dictionary object. @throws IOException If there is an error parsing the dictionary object.
1356 Apply padding to a box. @param box box @return the padded box.
1357 Returns all found objects of a brute force search. @return map containing all found objects of a brute force search @throws IOException if something went wrong
1358 Create a fresh XRef stream like for a fresh file or an incremental update. @param cosDocument the COSDocmernt to be used to create a new COSStream
1359 This will create a new PDObjectStream object. @param document The document that the stream will be part of. @return A new stream object.
1360 Creates a new empty PDStream object. @param document The document that the stream will be part of.
1361 This will get a stream that can be written to. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
1362 Creates a new empty PDStream object. @param document The document that the stream will be part of.
1363 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied, if any. This method closes the InputStream.
1364 Writes the stream to the actual stream in the COSStream. @throws IOException If there is an error writing to the stream
1365 Creates a COS stream from raw (encoded) data.
1366 Create a new appearance stream. @param appearance The appearance stream to write to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @throws IOException If there is an error writing to the content stream.
1367 Encodes data. @param input the byte stream to encode @param encoded the stream where encoded data will be written @param parameters the parameters used for encoding @param index the index to the filter being encoded @throws IOException if the stream cannot be encoded
1368 Default constructor.
1369 This will remove all of the objects in the collection.
1370 Default constructor
1371 This will remove all of the objects in the collection. @param objectsList The list of objects to remove from the collection.
1372 Default constructor.
1373 This will retain all of the objects in the collection. @param objectsList The list of objects to retain from the collection.
1374 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroform.
1375 This will set an object at a specific index. @param index zero based index into array. @param intVal The object to set.
1376 This will remove an element from the array. @param i The index of the object to remove. @return The object that was removed.
1377 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @throws IOException if the source data could not be read
1378 This will remove an element from the array. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
1379 This will clear all items in the map.
1380 Constructor. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException If something went wrong.
1381 This will remove an item for the dictionary. This will do nothing of the object does not exist. @param key The key to the item to remove from the dictionary.
1382 Check whether the given {@link COSUpdateState}´s {@link COSDocumentState} differs from the {@link COSIncrement}´s known {@link #incrementOrigin}.<br> Should that be the case, the {@link COSUpdateState} originates from another {@link COSDocument} and must be added to the {@link COSIncrement}, hence call {@link COSUpdateState#update()}. @param updateState The {@link COSUpdateState} that shall be updated, if it's originating from another {@link COSDocument}. @see #incrementOrigin
1383 This will parse a PDF dictionary value. @return The parsed Dictionary object. @throws IOException If there is an error parsing the dictionary object.
1384 Sets the referenced object to COSNull and removes the initially assigned parser.
1385 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> <p> Additionally to {@link #setOriginDocumentState(COSDocumentState)}, this shall also deny changing {@link #updated}, should the flag {@code dereferencing} indicate, that this is caused by dereferencing a {@link COSObject}. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @param dereferencing {@code true}, if this update of the {@link COSDocumentState} is caused by dereferencing a {@link COSObject}. @see #originDocumentState @see #updated
1386 Returns all found objects of a brute force search. @return map containing all found objects of a brute force search @throws IOException if something went wrong
1387 This will get a stream that can be written to. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
1388 This will read a integer from the Stream and throw an {@link IllegalArgumentException} if the integer value has more than the maximum object revision (i.e. : bigger than {@link #GENERATION_NUMBER_THRESHOLD}) @return the generation number being read. @throws IOException if an I/O error occurs
1389 This will read a long from the Stream and throw an {@link IOException} if the long value is negative or has more than 10 digits (i.e. : bigger than {@link #OBJECT_NUMBER_THRESHOLD}) @return the object number being read. @throws IOException if an I/O error occurs
1390 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
1391 Writes the stream to the actual stream in the COSStream. @throws IOException If there is an error writing to the stream
1392 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1393 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1394 Create a new appearance stream. @param appearance The appearance stream to write to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @throws IOException If there is an error writing to the content stream.
1395 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1396 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1397 This will remove all of the objects in the collection.
1398 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1399 This will remove all of the objects in the collection. @param objectsList The list of objects to remove from the collection.
1400 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1401 This will retain all of the objects in the collection. @param objectsList The list of objects to retain from the collection.
1402 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1403 This will set an object at a specific index. @param index zero based index into array. @param intVal The object to set.
1404 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1405 This will remove an element from the array. @param i The index of the object to remove. @return The object that was removed.
1406 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1407 This will remove an element from the array. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
1408 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1409 This will clear all items in the map.
1410 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1411 This will remove an item for the dictionary. This will do nothing of the object does not exist. @param key The key to the item to remove from the dictionary.
1412 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1413 Check whether the given {@link COSUpdateState}´s {@link COSDocumentState} differs from the {@link COSIncrement}´s known {@link #incrementOrigin}.<br> Should that be the case, the {@link COSUpdateState} originates from another {@link COSDocument} and must be added to the {@link COSIncrement}, hence call {@link COSUpdateState#update()}. @param updateState The {@link COSUpdateState} that shall be updated, if it's originating from another {@link COSDocument}. @see #incrementOrigin
1414 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1415 Sets the referenced object to COSNull and removes the initially assigned parser.
1416 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> <p> Additionally to {@link #setOriginDocumentState(COSDocumentState)}, this shall also deny changing {@link #updated}, should the flag {@code dereferencing} indicate, that this is caused by dereferencing a {@link COSObject}. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @param dereferencing {@code true}, if this update of the {@link COSDocumentState} is caused by dereferencing a {@link COSObject}. @see #originDocumentState @see #updated
1417 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1418 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1419 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1420 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1421 This will read a integer from the Stream and throw an {@link IllegalArgumentException} if the integer value has more than the maximum object revision (i.e. : bigger than {@link #GENERATION_NUMBER_THRESHOLD}) @return the generation number being read. @throws IOException if an I/O error occurs
1422 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1423 This will read a long from the Stream and throw an {@link IOException} if the long value is negative or has more than 10 digits (i.e. : bigger than {@link #OBJECT_NUMBER_THRESHOLD}) @return the object number being read. @throws IOException if an I/O error occurs
1424 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1425 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
1426 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1427 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1428 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1429 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1430 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1431 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1432 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1433 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1434 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1435 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1436 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1437 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1438 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1439 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1440 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1441 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1442 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1443 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1444 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1445 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1446 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1447 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1448 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1449 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1450 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1451 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1452 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1453 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1454 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1455 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1456 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1457 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1458 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1459 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1460 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1461 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1462 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1463 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1464 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1465 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1466 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1467 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1468 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1469 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1470 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1471 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1472 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1473 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1474 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1475 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1476 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1477 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1478 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1479 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1480 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1481 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1482 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1483 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1484 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1485 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1486 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1487 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1488 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1489 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1490 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1491 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1492 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1493 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1494 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1495 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1496 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1497 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1498 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1499 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1500 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1501 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1502 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1503 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1504 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1505 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1506 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1507 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1508 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1509 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1510 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1511 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1512 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1513 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1514 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1515 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1516 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1517 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1518 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1519 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1520 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1521 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1522 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1523 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1524 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1525 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1526 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1527 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1528 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1529 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1530 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1531 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1532 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1533 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1534 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1535 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1536 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1537 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1538 End a marked content sequence. @throws IOException If the content stream could not be written
1539 End a marked content sequence. @throws IOException If the content stream could not be written
1540 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1541 End a marked content sequence. @throws IOException If the content stream could not be written
1542 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1543 End a marked content sequence. @throws IOException If the content stream could not be written
1544 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1545 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1546 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1547 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1548 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1549 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1550 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1551 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1552 Returns the entry as an appearance stream. @return the entry as an appearance stream @throws IllegalStateException if this entry is not an appearance stream
1553 Creates a new ExportFormat attribute object with a given dictionary. @param dictionary the dictionary
1554 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1555 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
1556 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1557 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1558 Compute the encryption key. @param password The password to compute the encrypted key. @param o The O entry of the encryption dictionary. @param u The U entry of the encryption dictionary. @param oe The OE entry of the encryption dictionary. @param ue The UE entry of the encryption dictionary. @param permissions The permissions for the document. @param id The document id. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @param isOwnerPassword whether the password given is the owner password (for revision 6) @return The encrypted key bytes. @throws IOException If there is an error with encryption.
1559 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1560 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1561 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1562 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1563 End a marked content sequence. @throws IOException If the content stream could not be written
1564 End a marked content sequence. @throws IOException If the content stream could not be written
1565 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata. @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
1566 End a marked content sequence. @throws IOException If the content stream could not be written
1567 End a marked content sequence. @throws IOException If the content stream could not be written
1568 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
1569 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1570 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
1571 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1572 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1573 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
1574 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1575 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
1576 Returns the entry as an appearance stream. @return the entry as an appearance stream @throws IllegalStateException if this entry is not an appearance stream
1577 Creates a new ExportFormat attribute object with a given dictionary. @param dictionary the dictionary
1578 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
1579 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1580 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1581 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
1582 Compute the encryption key. @param password The password to compute the encrypted key. @param o The O entry of the encryption dictionary. @param u The U entry of the encryption dictionary. @param oe The OE entry of the encryption dictionary. @param ue The UE entry of the encryption dictionary. @param permissions The permissions for the document. @param id The document id. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @param isOwnerPassword whether the password given is the owner password (for revision 6) @return The encrypted key bytes. @throws IOException If there is an error with encryption.
1583 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
1584 Remove all space characters if contained within the adjacent letters
1585 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata. @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
1586 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
1587 handles the line separator for a new line given the specified current and previous TextPositions. @param current the current text position @param lastPosition the previous text position @param lastLineStartPosition the last text position that followed a line separator. @param maxHeightForLine max height for positions since lastLineStartPosition @return start position of the last line @throws IOException if something went wrong
1588 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
1589 Normalize the given list of TextPositions. @param line list of TextPositions @return a list of strings, one string for every word
1590 Returns the Calendar for a given COS string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
1591 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
1592 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1593 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
1594 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1595 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1596 This will output the given byte getString as a PDF object. @param string COSString to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1597 This will output the given text/byte getString as a PDF object. @param bytes byte array representation of a string to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1598 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1599 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1600 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1601 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
1602 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1603 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1604 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1605 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1606 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1607 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1608 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
1609 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1610 Remove all space characters if contained within the adjacent letters
1611 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1612 handles the line separator for a new line given the specified current and previous TextPositions. @param current the current text position @param lastPosition the previous text position @param lastLineStartPosition the last text position that followed a line separator. @param maxHeightForLine max height for positions since lastLineStartPosition @return start position of the last line @throws IOException if something went wrong
1613 Normalize the given list of TextPositions. @param line list of TextPositions @return a list of strings, one string for every word
1614 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1615 Returns the Calendar for a given COS string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
1616 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1617 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1618 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1619 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1620 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1621 This will output the given byte getString as a PDF object. @param string COSString to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1622 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1623 This will output the given text/byte getString as a PDF object. @param bytes byte array representation of a string to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1624 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1625 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1626 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1627 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1628 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1629 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1630 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1631 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1632 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1633 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1634 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1635 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1636 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1637 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1638 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1639 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1640 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1641 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1642 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1643 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1644 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1645 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1646 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1647 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1648 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1649 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1650 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1651 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1652 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1653 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1654 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1655 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1656 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1657 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1658 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1659 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1660 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1661 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1662 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1663 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1664 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1665 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1666 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1667 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1668 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1669 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1670 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1671 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1672 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1673 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1674 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1675 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1676 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1677 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1678 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1679 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1680 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1681 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1682 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1683 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1684 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1685 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1686 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1687 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1688 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1689 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1690 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1691 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1692 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1693 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1694 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1695 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1696 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1697 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1698 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1699 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1700 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1701 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1702 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1703 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1704 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1705 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1706 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1707 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1708 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1709 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1710 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1711 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1712 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1713 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1714 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1715 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1716 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1717 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1718 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1719 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1720 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1721 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1722 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1723 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1724 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1725 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1726 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1727 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1728 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1729 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1730 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1731 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1732 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1733 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1734 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1735 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1736 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1737 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1738 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1739 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1740 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1741 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1742 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1743 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1744 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1745 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1746 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1747 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1748 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1749 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1750 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1751 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1752 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1753 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1754 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1755 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1756 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1757 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1758 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1759 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1760 Constructor. @param parameters Parameters for page drawing. @throws IOException If there is an error loading properties from the file.
1761 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1762 This will parse a PDF string. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
1763 Constructor for immutable rectangle. @param width The width of the rectangle. @param height The height of the rectangle.
1764 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1765 This will create a new PDMetadata object with the /Type and /Subtype entries for a document level metadata object. @param document The document that the stream will be part of.
1766 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1767 {@inheritDoc}
1768 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1769 Creates a new XObject of the given subtype for writing. @param document The document in which to create the XObject. @param subtype The subtype of the new XObject.
1770 Creates an Image XObject in the given document. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document
1771 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1772 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1773 Constructor. Reads all data from the input stream and embeds it into the document. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @throws IOException If there is an error creating the stream in the document.
1774 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1775 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1776 Constructor. Reads all data from the input stream and embeds it into the document with the given filter applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filter Filter to apply to the stream. @throws IOException If there is an error creating the stream in the document.
1777 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1778 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filters Filters to apply to the stream. @throws IOException If there is an error creating the stream in the document.
1779 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1780 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1781 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1782 Creates an Image XObject in the given document using the given filtered stream. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document @param encodedStream an encoded stream of image data @param cosFilter the filter or a COSArray of filters @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @throws IOException if there is an error creating the XObject.
1783 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1784 Default constructor.
1785 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1786 Default constructor.
1787 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1788 Default constructor.
1789 Default constructor.
1790 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1791 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1792 Default constructor. @param source input representing the pdf. @throws IOException if something went wrong
1793 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1794 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1795 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @throws IOException If something went wrong.
1796 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1797 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1798 Check the XRef table by dereferencing all objects and fixing the offset if necessary. @throws IOException if something went wrong.
1799 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1800 Create a new appearance stream. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the content stream.
1801 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1802 Create a new form XObject content stream. @param form The form XObject stream to write to. @throws IOException If there is an error writing to the form contents.
1803 Constructor. @param parameters Parameters for page drawing. @throws IOException If there is an error loading properties from the file.
1804 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the page is part of. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the page contents.
1805 This will parse a PDF string. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
1806 Sets the highest value that is allowed. This cannot be higher than 255. @param high the highest value for the lookup table
1807 Constructor for immutable rectangle. @param width The width of the rectangle. @param height The height of the rectangle.
1808 {@inheritDoc}
1809 This will create a new PDMetadata object with the /Type and /Subtype entries for a document level metadata object. @param document The document that the stream will be part of.
1810 {@inheritDoc}
1811 {@inheritDoc}
1812 {@inheritDoc}
1813 Creates a new XObject of the given subtype for writing. @param document The document in which to create the XObject. @param subtype The subtype of the new XObject.
1814 {@inheritDoc}
1815 Creates an Image XObject in the given document. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document
1816 Collect all updates made to the given {@link COSArray} and it's contained structures. @param array The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSArray}´s elements changed. A {@link COSArray} shall always be treated as a direct structure, that would require it´s parent to be updated instead.
1817 Constructor. Reads all data from the input stream and embeds it into the document. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @throws IOException If there is an error creating the stream in the document.
1818 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @see #originDocumentState @see #updated
1819 This shall {@link #setOriginDocumentState(COSDocumentState, boolean)} for the dereferenced child, initializing its {@link #originDocumentState}. <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo} and will never change the child´s {@link #updated} state. </p> @param child The child, that has been dereferenced. @see #setOriginDocumentState(COSDocumentState, boolean)
1820 Constructor. Reads all data from the input stream and embeds it into the document with the given filter applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filter Filter to apply to the stream. @throws IOException If there is an error creating the stream in the document.
1821 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filters Filters to apply to the stream. @throws IOException If there is an error creating the stream in the document.
1822 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
1823 Draw a shape. <p> Dependent on the lineWidth and whether or not there is a background to be generated there are different commands to be used for draw a shape. @param lineWidth the line width of the path. @param hasStroke shall there be a stroking color. @param hasFill shall there be a fill color. @throws IOException If there is an error writing to the content stream.
1824 Creates an Image XObject in the given document using the given filtered stream. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document @param encodedStream an encoded stream of image data @param cosFilter the filter or a COSArray of filters @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @throws IOException if there is an error creating the XObject.
1825 Default constructor.
1826 Default constructor.
1827 Default constructor.
1828 Encrypt or decrypt a set of data. @param objectNumber The data object number. @param genNumber The data generation number. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
1829 Default constructor.
1830 Default constructor. @param source input representing the pdf. @throws IOException if something went wrong
1831 Check for owner password. @param ownerPassword The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
1832 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @throws IOException If something went wrong.
1833 Check the XRef table by dereferencing all objects and fixing the offset if necessary. @throws IOException if something went wrong.
1834 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
1835 Create a new appearance stream. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the content stream.
1836 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
1837 Create a new form XObject content stream. @param form The form XObject stream to write to. @throws IOException If there is an error writing to the form contents.
1838 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the page is part of. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the page contents.
1839 Sets the highest value that is allowed. This cannot be higher than 255. @param high the highest value for the lookup table
1840 {@inheritDoc}
1841 {@inheritDoc}
1842 This will print the text of the processed page to "output". It will estimate, based on the coordinates of the text, where newlines and word spacings should be placed. The text will be sorted only if that feature was enabled. @throws IOException If there is an error writing the text.
1843 {@inheritDoc}
1844 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1845 {@inheritDoc}
1846 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1847 Collect all updates made to the given {@link COSArray} and it's contained structures. @param array The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSArray}´s elements changed. A {@link COSArray} shall always be treated as a direct structure, that would require it´s parent to be updated instead.
1848 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1849 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @see #originDocumentState @see #updated
1850 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1851 This shall {@link #setOriginDocumentState(COSDocumentState, boolean)} for the dereferenced child, initializing its {@link #originDocumentState}. <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo} and will never change the child´s {@link #updated} state. </p> @param child The child, that has been dereferenced. @see #setOriginDocumentState(COSDocumentState, boolean)
1852 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1853 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1854 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
1855 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1856 Draw a shape. <p> Dependent on the lineWidth and whether or not there is a background to be generated there are different commands to be used for draw a shape. @param lineWidth the line width of the path. @param hasStroke shall there be a stroking color. @param hasFill shall there be a fill color. @throws IOException If there is an error writing to the content stream.
1857 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1858 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1859 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1860 Encrypt or decrypt a set of data. @param objectNumber The data object number. @param genNumber The data generation number. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
1861 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1862 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1863 Check for owner password. @param ownerPassword The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
1864 Write the given {@link COSString} to the given stream. @param output The stream, that shall be written to. @param cosString The content, that shall be written.
1865 Outputs a string using the correct encoding and subsetting as required. @param text The Unicode text to show. @throws IOException If an io exception occurs.
1866 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
1867 Sets the line width. The command is only emitted if the lineWidth is different to 1. @param lineWidth the line width of the path. @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setLineWidth(float)
1868 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1869 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
1870 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1871 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1872 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1873 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1874 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1875 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1876 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1877 Returns a new PageDrawer instance, using the given parameters. May be overridden. @param parameters parameters to be used when creating the PageDrawer instance @return a new PageDrawer instance @throws IOException id the PageDrawer instance could not be created
1878 This will print the text of the processed page to "output". It will estimate, based on the coordinates of the text, where newlines and word spacings should be placed. The text will be sorted only if that feature was enabled. @throws IOException If there is an error writing the text.
1879 Creates a Form Image XObject for writing, in the given document. @param document The current document
1880 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1881 Constructor. Reads all data from the input stream and embeds it into the document, this will close the InputStream. The /Type and /Subtype entries for a document level metadata object will be created. @param doc The document that will hold the stream. @param str The stream parameter. @throws IOException If there is an error creating the stream in the document.
1882 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1883 {@inheritDoc}
1884 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1885 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1886 {@inheritDoc}
1887 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1888 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1889 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1890 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1891 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1892 Create a PDImageXObject using the Flate filter. @param document The document. @param byteArray array with data. @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @return the newly created PDImageXObject with the data compressed. @throws IOException
1893 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1894 Default constructor. @param owner the owner of the attributes
1895 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1896 Constructs parser for given file using memory buffer. @param source the source of the pdf to be parsed @throws IOException If something went wrong.
1897 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1898 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @throws IOException If something went wrong.
1899 Collect all updates made to the given {@link COSBase} and it's contained structures.<br> This shall forward all {@link COSUpdateInfo} objects to the proper specialized collection methods. @param base The {@link COSBase} updates shall be collected for. @return Returns {@code true}, if the {@link COSBase} represents a direct child structure, that would require it´s parent to be updated instead. @see #collect(COSDictionary) @see #collect(COSArray) @see #collect(COSObject)
1900 // MIT added, maybe this should not be supported as trailer is a persistence construct. This will set the document trailer. @param newTrailer the document trailer dictionary
1901 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given child, initializing it´s {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param child The child that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1902 Write the given {@link COSString} to the given stream. @param output The stream, that shall be written to. @param cosString The content, that shall be written.
1903 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1904 Outputs a string using the correct encoding and subsetting as required. @param text The Unicode text to show. @throws IOException If an io exception occurs.
1905 This will get the object that this object encapsulates. @return The encapsulated object.
1906 Sets the line width. The command is only emitted if the lineWidth is different to 1. @param lineWidth the line width of the path. @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setLineWidth(float)
1907 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1908 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1909 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1910 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1911 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1912 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1913 This will decrypt a stream. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
1914 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1915 This will encrypt a stream, but not the dictionary as the dictionary is encrypted by visitFromString() in COSWriter and we don't want to encrypt it twice. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
1916 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1917 Returns a new PageDrawer instance, using the given parameters. May be overridden. @param parameters parameters to be used when creating the PageDrawer instance @return a new PageDrawer instance @throws IOException id the PageDrawer instance could not be created
1918 This will decrypt a string. @param string the string to decrypt. @param objNum The object number. @param genNum The object generation number. @return the decrypted COSString
1919 Creates a Form Image XObject for writing, in the given document. @param document The current document
1920 This will encrypt a string. @param string the string to encrypt. @param objNum The object number. @param genNum The object generation number. @return the encrypted COSString @throws IOException If an error occurs writing the new string.
1921 Constructor. Reads all data from the input stream and embeds it into the document, this will close the InputStream. The /Type and /Subtype entries for a document level metadata object will be created. @param doc The document that will hold the stream. @param str The stream parameter. @throws IOException If there is an error creating the stream in the document.
1922 {@inheritDoc}
1923 Check for owner password. @param password The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
1924 {@inheritDoc}
1925 Constructor.
1926 This will print the processed page text to the output stream. @throws IOException If there is an error writing the text.
1927 Writes a single operand token. @param base The operand to write to the stream. @throws IOException If there is an error writing to the stream.
1928 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
1929 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
1930 Creates a Transparency Group for writing, in the given document. @param document The current document
1931 Create a PDImageXObject using the Flate filter. @param document The document. @param byteArray array with data. @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @return the newly created PDImageXObject with the data compressed. @throws IOException
1932 Creates a Form Image XObject for writing, in the given document. @param document The current document
1933 Default constructor. @param owner the owner of the attributes
1934 Constructs parser for given file using memory buffer. @param source the source of the pdf to be parsed @throws IOException If something went wrong.
1935 Creates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @param dpi the desired dpi (resolution) value of the JPEG to be stored in metadata. This value has no influence on image content or size. @return a new Image XObject @throws IOException if the JPEG data cannot be written
1936 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @throws IOException If something went wrong.
1937 Collect all updates made to the given {@link COSBase} and it's contained structures.<br> This shall forward all {@link COSUpdateInfo} objects to the proper specialized collection methods. @param base The {@link COSBase} updates shall be collected for. @return Returns {@code true}, if the {@link COSBase} represents a direct child structure, that would require it´s parent to be updated instead. @see #collect(COSDictionary) @see #collect(COSArray) @see #collect(COSObject)
1938 // MIT added, maybe this should not be supported as trailer is a persistence construct. This will set the document trailer. @param newTrailer the document trailer dictionary
1939 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given child, initializing it´s {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param child The child that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1940 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source source representing the pdf. @throws IOException If something went wrong.
1941 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1942 Collect all updates made to the given {@link COSDictionary} and it's contained structures. @param dictionary The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSDictionary} represents a direct child structure, that would require it´s parent to be updated instead.
1943 This will get the object that this object encapsulates. @return The encapsulated object.
1944 Returns all indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s.<br> Calling this method will cause the increment to be initialized. @return All indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s. @see #objects
1945 This will add an object to the array. @param object The object to add to the array.
1946 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param object The object to add at that index.
1947 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
1948 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1949 This will add an object to the array. @param objectsList The object to add to the array.
1950 This will decrypt a stream. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
1951 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param objectList The object to add at that index.
1952 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1953 This will encrypt a stream, but not the dictionary as the dictionary is encrypted by visitFromString() in COSWriter and we don't want to encrypt it twice. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
1954 This will get an object from the array. This will dereference the object. If the object is COSNull then null will be returned. @param index The index into the array to get the object. @return The object at the requested index.
1955 This will decrypt a string. @param string the string to decrypt. @param objNum The object number. @param genNum The object generation number. @return the decrypted COSString
1956 This will remove an element from the array. This method will also remove a reference to the object. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
1957 This will encrypt a string. @param string the string to encrypt. @param objNum The object number. @param genNum The object generation number. @return the encrypted COSString @throws IOException If an error occurs writing the new string.
1958 This will return the index of the entry or -1 if it is not found. This method will also find references to indirect objects. @param object The object to search for. @return The index of the object or -1.
1959 @see java.util.Map#containsValue(java.lang.Object) @param value The value to find in the map. @return true if the map contains this value.
1960 Search in the map for the value that matches the parameter and return the first key that maps to that value. @param value The value to search for in the map. @return The key for the value in the map or null if it does not exist.
1961 Check for owner password. @param password The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
1962 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
1963 Constructor.
1964 This will print the processed page text to the output stream. @throws IOException If there is an error writing the text.
1965 Writes a single operand token. @param base The operand to write to the stream. @throws IOException If there is an error writing to the stream.
1966 Collects all indirect objects numbers within this dictionary and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
1967 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
1968 Get the dictionary containing the linearization information if the pdf is linearized. @return the dictionary containing the linearization information
1969 This will close all storage and delete the tmp files. @throws IOException If there is an error close resources.
1970 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
1971 Creates a Transparency Group for writing, in the given document. @param document The current document
1972 Collect all updates made to the given {@link COSObject} and it's contained structures. @param object The {@link COSObject} updates shall be collected for. @return Always returns {@code false}. {@link COSObject}s by definition are indirect and shall never cause a parent structure to be updated.
1973 Creates a Form Image XObject for writing, in the given document. @param document The current document
1974 visitor pattern double dispatch method. @param visitor The object to notify when visiting this object. @throws IOException If an error occurs while visiting this object.
1975 Creates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @param dpi the desired dpi (resolution) value of the JPEG to be stored in metadata. This value has no influence on image content or size. @return a new Image XObject @throws IOException if the JPEG data cannot be written
1976 Check whether an element (of an array or a dictionary) points to its parent. @param parent COSArray or COSDictionary @param value an element
1977 Returns length value referred to or defined in given object.
1978 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source source representing the pdf. @throws IOException If something went wrong.
1979 Prepares a normal reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param byteOffset The byte offset of the {@link COSObject} in the PDF file. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry.
1980 Collect all updates made to the given {@link COSDictionary} and it's contained structures. @param dictionary The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSDictionary} represents a direct child structure, that would require it´s parent to be updated instead.
1981 Returns all indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s.<br> Calling this method will cause the increment to be initialized. @return All indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s. @see #objects
1982 This will add an object to the array. @param object The object to add to the array.
1983 This will get the object key for the object. @param obj The object to get the key for. @return The object key for the object.
1984 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param object The object to add at that index.
1985 Returns the {@link COSObjectKey} for a given registered {@link COSBase}. Returns null if such an object is not registered. @param object The {@link COSBase} a {@link COSObjectKey} shall be determined for. @return key The {@link COSObjectKey}, that matches the registered {@link COSBase}, or null if such an object is not registered.
1986 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
1987 Returns true, if the given {@link COSBase} is a registered object of this pool. @param object The {@link COSBase} that shall be checked. @return True, if such a {@link COSBase} is registered in this pool.
1988 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1989 This will add an object to the array. @param objectsList The object to add to the array.
1990 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param objectList The object to add at that index.
1991 Prepares the given {@link COSObject} to be written to this object stream, using the given {@link COSObjectKey} as it's ID for indirect references. @param key The {@link COSObjectKey}, that shall be used for indirect references to the {@link COSObject}. @param object The {@link COSObject}, that shall be written to this object stream.
1992 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1993 This will get an object from the array. This will dereference the object. If the object is COSNull then null will be returned. @param index The index into the array to get the object. @return The object at the requested index.
1994 This will remove an element from the array. This method will also remove a reference to the object. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
1995 This will return the index of the entry or -1 if it is not found. This method will also find references to indirect objects. @param object The object to search for. @return The index of the object or -1.
1996 @see java.util.Map#containsValue(java.lang.Object) @param value The value to find in the map. @return true if the map contains this value.
1997 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
1998 Search in the map for the value that matches the parameter and return the first key that maps to that value. @param value The value to search for in the map. @return The key for the value in the map or null if it does not exist.
1999 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
2000 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
2001 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
2002 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
2003 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
2004 Collects all indirect objects numbers within this dictionary and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
2005 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
2006 Get the dictionary containing the linearization information if the pdf is linearized. @return the dictionary containing the linearization information
2007 This will close all storage and delete the tmp files. @throws IOException If there is an error close resources.
2008 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
2009 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
2010 Collect all updates made to the given {@link COSObject} and it's contained structures. @param object The {@link COSObject} updates shall be collected for. @return Always returns {@code false}. {@link COSObject}s by definition are indirect and shall never cause a parent structure to be updated.
2011 visitor pattern double dispatch method. @param visitor The object to notify when visiting this object. @throws IOException If an error occurs while visiting this object.
2012 Creates a new JPEG PDImageXObject from a BufferedImage and a given quality. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. The image will be created with a dpi value of 72 to be stored in metadata. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @return a new Image XObject @throws IOException if the JPEG data cannot be written
2013 Return an iterator for the determined {@link #objects} contained in this {@link COSIncrement}. @return An iterator for the determined {@link #objects} contained in this {@link COSIncrement}.
2014 This will add an object to the array. @param object The object to add to the array.
2015 Check whether an element (of an array or a dictionary) points to its parent. @param parent COSArray or COSDictionary @param value an element
2016 This will add the object until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array. @param object The object to fill the array with.
2017 Clear the current contents of the COSArray and set it with the float[]. @param value The new value of the float array.
2018 Returns length value referred to or defined in given object.
2019 Prepares a normal reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param byteOffset The byte offset of the {@link COSObject} in the PDF file. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry.
2020 Returns the stream of the XRef. @return the XRef stream @throws IOException if something went wrong
2021 This will get the object key for the object. @param obj The object to get the key for. @return The object key for the object.
2022 This is a really special constructor. Sometimes the PDF spec says that a dictionary entry can either be a single item or an array of those items. But in the PDModel interface we really just want to always return a java.util.List. In the case were we get the list and never modify it we don't want to convert to COSArray and put one element, unless we append to the list. So here we are going to create this object with a single item instead of a list, but allow more items to be added and then converted to an array. @param actualObject The PDModel object. @param item The COS Model object. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
2023 Returns the {@link COSObjectKey} for a given registered {@link COSBase}. Returns null if such an object is not registered. @param object The {@link COSBase} a {@link COSObjectKey} shall be determined for. @return key The {@link COSObjectKey}, that matches the registered {@link COSBase}, or null if such an object is not registered.
2024 This will convert a list of COSObjectables to an array list of COSBase objects. @param cosObjectableList A list of COSObjectable. @return A list of COSBase. @throws IllegalArgumentException if an object type is not supported for conversion to a COSBase object.
2025 Returns true, if the given {@link COSBase} is a registered object of this pool. @param object The {@link COSBase} that shall be checked. @return True, if such a {@link COSBase} is registered in this pool.
2026 Constructor with an initial range of 0..1.
2027 Prepares the given {@link COSObject} to be written to this object stream, using the given {@link COSObjectKey} as it's ID for indirect references. @param key The {@link COSObjectKey}, that shall be used for indirect references to the {@link COSObject}. @param object The {@link COSObject}, that shall be written to this object stream.
2028 Default constructor.
2029 Creates a blank font setting, font will be null, size will be 1.
2030 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
2031 Returns the color component values as a COS array @return the color component values as a COS array
2032 Creates a new DeviceN color space.
2033 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
2034 Creates a new gamma. Defaults all values to 0, 0, 0.
2035 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
2036 Returns a list of alternate color spaces for non-conforming readers. WARNING: Do not use the information in a conforming reader. @return A list of alternateColorSpace color spaces. @throws IOException If there is an error getting the alternateColorSpace color spaces.
2037 Creates a new Indexed color space. Default DeviceRGB, hival 255.
2038 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
2039 creates a range array with default values (-100..100 -100..100). @return the new range array.
2040 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
2041 Creates a new pattern color space. @param resources The current resources.
2042 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
2043 Creates a new Separation color space.
2044 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
2045 Constructor. Defaults all values to 0, 0, 0.
2046 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
2047 Constructor from COS object. @param array the array containing the XYZ values
2048 Sets the optional Matrix entry for the form XObject. @param transform the transformation matrix
2049 Creates a new JPEG PDImageXObject from a BufferedImage and a given quality. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. The image will be created with a dpi value of 72 to be stored in metadata. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @return a new Image XObject @throws IOException if the JPEG data cannot be written
2050 Creates a new JPEG Image XObject from a byte array containing JPEG data. @param document the document where the image will be created @param byteArray bytes of JPEG image @return a new Image XObject @throws IOException if the input stream cannot be read
2051 Return an iterator for the determined {@link #objects} contained in this {@link COSIncrement}. @return An iterator for the determined {@link #objects} contained in this {@link COSIncrement}.
2052 Returns a COS array which represent the geometric relevant components of the matrix. The last column of the matrix is ignored, only the first two columns are returned. This is analog to the Matrix(COSArray) constructor. @return a COSArray representing the geometric relevant components of the matrix
2053 This will add an object to the array. @param object The object to add to the array.
2054 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
2055 This will add the object until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array. @param object The object to fill the array with.
2056 Set the value in the array as an integer. @param index The index into the array. @param value The value to set.
2057 Clear the current contents of the COSArray and set it with the float[]. @param value The new value of the float array.
2058 Set the value in the array as a name. @param index The index into the array. @param name The name to set in the array.
2059 Set the value in the array as a string. @param index The index into the array. @param string The string to set in the array.
2060 Returns the stream of the XRef. @return the XRef stream @throws IOException if something went wrong
2061 This will set the minimum value for the range. @param min The new minimum for the range.
2062 This will set the maximum value for the range. @param max The new maximum for the range.
2063 This will set the lower left x coordinate. @param value The lower left x.
2064 This is a really special constructor. Sometimes the PDF spec says that a dictionary entry can either be a single item or an array of those items. But in the PDModel interface we really just want to always return a java.util.List. In the case were we get the list and never modify it we don't want to convert to COSArray and put one element, unless we append to the list. So here we are going to create this object with a single item instead of a list, but allow more items to be added and then converted to an array. @param actualObject The PDModel object. @param item The COS Model object. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
2065 This will set the lower left y coordinate. @param value The lower left y.
2066 This will convert a list of COSObjectables to an array list of COSBase objects. @param cosObjectableList A list of COSObjectable. @return A list of COSBase. @throws IllegalArgumentException if an object type is not supported for conversion to a COSBase object.
2067 This will set the upper right x coordinate. @param value The upper right x .
2068 Constructor with an initial range of 0..1.
2069 This will set the upper right y coordinate. @param value The upper right y.
2070 Sets the colour by edge index. @param index the edge index @param colour the colour
2071 Default constructor.
2072 This will decrypt an array. @param array The array to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error accessing the data.
2073 This will set the string for an available option. @param opt One of the available options.
2074 This will set the default appearance string. @param da The default appearance string.
2075 This will set the size of the font. @param size The new size of the font.
2076 Sets the list of colorants @param names the list of colorants
2077 Creates a blank font setting, font will be null, size will be 1.
2078 Sets the color space attributes. If null is passed in then all attribute will be removed. @param attributes the color space attributes, or null
2079 This will set the alternate color space. @param cs The alternate color space.
2080 Returns the color component values as a COS array @return the color component values as a COS array
2081 Sets the r value of the tristimulus. @param r the r value for the tristimulus
2082 Sets the g value of the tristimulus. @param g the g value for the tristimulus
2083 Creates a new DeviceN color space.
2084 Creates a new gamma. Defaults all values to 0, 0, 0.
2085 Sets the b value of the tristimulus. @param b he b value for the tristimulus
2086 Sets the base color space. @param base the base color space
2087 Returns a list of alternate color spaces for non-conforming readers. WARNING: Do not use the information in a conforming reader. @return A list of alternateColorSpace color spaces. @throws IOException If there is an error getting the alternateColorSpace color spaces.
2088 Sets the colorant name. @param name the name of the colorant
2089 Creates a new Indexed color space. Default DeviceRGB, hival 255.
2090 Sets the alternate color space. @param colorSpace The alternate color space.
2091 creates a range array with default values (-100..100 -100..100). @return the new range array.
2092 Sets the x value of the tristimulus. @param x the x value for the tristimulus
2093 Creates a new pattern color space. @param resources The current resources.
2094 Sets the y value of the tristimulus. @param y the y value for the tristimulus
2095 Creates a new Separation color space.
2096 Sets the z value of the tristimulus. @param z the z value for the tristimulus
2097 Constructor. Defaults all values to 0, 0, 0.
2098 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
2099 Constructor from COS object. @param array the array containing the XYZ values
2100 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
2101 Sets the optional Matrix entry for the form XObject. @param transform the transformation matrix
2102 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
2103 Creates a new JPEG Image XObject from a byte array containing JPEG data. @param document the document where the image will be created @param byteArray bytes of JPEG image @return a new Image XObject @throws IOException if the input stream cannot be read
2104 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
2105 Returns a COS array which represent the geometric relevant components of the matrix. The last column of the matrix is ignored, only the first two columns are returned. This is analog to the Matrix(COSArray) constructor. @return a COSArray representing the geometric relevant components of the matrix
2106 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
2107 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
2108 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
2109 Set the value in the array as an integer. @param index The index into the array. @param value The value to set.
2110 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
2111 Set the value in the array as a name. @param index The index into the array. @param name The name to set in the array.
2112 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
2113 Set the value in the array as a string. @param index The index into the array. @param string The string to set in the array.
2114 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
2115 This will set the minimum value for the range. @param min The new minimum for the range.
2116 This will set the maximum value for the range. @param max The new maximum for the range.
2117 Creates a new COSStream using the current configuration for scratch files. Not for public use. Only COSParser should call this method. @param dictionary the corresponding dictionary @param startPosition the start position within the source @param streamLength the stream length @return the new COSStream @throws IOException if the random access view can't be read
2118 This will set the lower left x coordinate. @param value The lower left x.
2119 This will set the encryption dictionary, this should only be called when encrypting the document. @param encDictionary The encryption dictionary.
2120 This will set the lower left y coordinate. @param value The lower left y.
2121 This will set the document ID. This should be an array of two strings. This method cannot be used to remove the document id by passing null or an empty array; it will be recreated. Only the first existing string is used when writing, the second one is always recreated. If you don't want this, you'll have to modify the {@code COSWriter} class, look for {@link COSName#ID}. @param id The document id.
2122 This will set the upper right x coordinate. @param value The upper right x .
2123 This will set the upper right y coordinate. @param value The upper right y.
2124 Sets the colour by edge index. @param index the edge index @param colour the colour
2125 This will decrypt an array. @param array The array to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error accessing the data.
2126 This will set the string for an available option. @param opt One of the available options.
2127 This will add all of the dictionaries keys/values to this dictionary, but only if they are not in an exclusion list and if they don't already exist. If a key already exists in this dictionary then nothing is changed. @param src The source dictionary to get the keys/values from. @param dst The destination dictionary to merge the keys/values into. @param exclude Names of keys that shall be skipped.
2128 This will set the default appearance string. @param da The default appearance string.
2129 This will set the size of the font. @param size The new size of the font.
2130 Sets the list of colorants @param names the list of colorants
2131 Sets the color space attributes. If null is passed in then all attribute will be removed. @param attributes the color space attributes, or null
2132 This will set the alternate color space. @param cs The alternate color space.
2133 Sets the r value of the tristimulus. @param r the r value for the tristimulus
2134 Sets the g value of the tristimulus. @param g the g value for the tristimulus
2135 Sets the b value of the tristimulus. @param b he b value for the tristimulus
2136 Sets the base color space. @param base the base color space
2137 Sets the colorant name. @param name the name of the colorant
2138 This will parse the next token in the stream. @return The next token in the stream or null if there are no more tokens in the stream. @throws IOException If an io error occurs while parsing the stream.
2139 Sets the alternate color space. @param colorSpace The alternate color space.
2140 Creates an empty PDF document. You need to add at least one page for the document to be valid. @param streamCacheCreateFunction a function to create an instance of a stream cache for buffering PDF streams
2141 Sets the x value of the tristimulus. @param x the x value for the tristimulus
2142 This will set the document information for this document. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata) PDDocumentCatalog#setMetadata(PDMetadata)}. @param info The updated document information.
2143 Sets the y value of the tristimulus. @param y the y value for the tristimulus
2144 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of.
2145 Sets the z value of the tristimulus. @param z the z value for the tristimulus
2146 Sets the list of threads for this pdf document. @param threads The list of threads, or null to clear it.
2147 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
2148 Replace the list of OutputIntents of the document. @param outputIntents the list of OutputIntents, if the list is empty all OutputIntents are removed.
2149 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
2150 This will set the CropBox for this page. @param cropBox The new CropBox for this page.
2151 This will set the contents of this page. @param contents Array of new contents of the page.
2152 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
2153 This will set the list of thread beads. @param beads A list of PDThreadBead objects or null.
2154 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
2155 This will set the list of annotations. Although this is optional, you should take care that any newly created annotations link back to this page by calling {@link PDAnnotation#setPage(org.apache.pdfbox.pdmodel.PDPage)}. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param annotations The new list of annotations.
2156 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
2157 Set the viewports. @param viewports A list of viewports, or null if the entry is to be deleted.
2158 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
2159 Constructor for embedding.
2160 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
2161 {@inheritDoc}
2162 {@inheritDoc}
2163 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
2164 {@inheritDoc}
2165 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
2166 {@inheritDoc}
2167 Creates a new COSStream using the current configuration for scratch files. Not for public use. Only COSParser should call this method. @param dictionary the corresponding dictionary @param startPosition the start position within the source @param streamLength the stream length @return the new COSStream @throws IOException if the random access view can't be read
2168 This will set the encryption dictionary, this should only be called when encrypting the document. @param encDictionary The encryption dictionary.
2169 {@inheritDoc}
2170 This will set the document ID. This should be an array of two strings. This method cannot be used to remove the document id by passing null or an empty array; it will be recreated. Only the first existing string is used when writing, the second one is always recreated. If you don't want this, you'll have to modify the {@code COSWriter} class, look for {@link COSName#ID}. @param id The document id.
2171 {@inheritDoc}
2172 Default Constructor.
2173 Constructor. Creates empty COSDictionary if dict is null. @param dict The dictionary that fulfils this file specification.
2174 This will set the range values. @param rangeValues The new range values.
2175 This will set the domain values. @param domainValues The new domain values.
2176 This will set the encode values. @param encodeValues The new encode values.
2177 This will set the decode values. @param decodeValues The new decode values.
2178 This will add all of the dictionaries keys/values to this dictionary, but only if they are not in an exclusion list and if they don't already exist. If a key already exists in this dictionary then nothing is changed. @param src The source dictionary to get the keys/values from. @param dst The destination dictionary to merge the keys/values into. @param exclude Names of keys that shall be skipped.
2179 Sets the K entry. @param k the K value
2180 Sets the ClassMap. @param classMap null, or a map whose elements are either {@link PDAttributeObject} or lists of it.
2181 Sets the user properties. @param userProperties the user properties
2182 Set the line dash pattern associated with this box style. @param dashArray The patter for this box style.
2183 This will set the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @param cfm name of the crypt filter method.
2184 Sets the filter entry of the encryption dictionary. @param filter The filter name.
2185 This will set the O entry in the standard encryption dictionary. @param o A 32 byte array or null if there is no owner key. @throws IOException If there is an error setting the data.
2186 This will set the U entry in the standard encryption dictionary. @param u A 32 byte array. @throws IOException If there is an error setting the data.
2187 This will set the OE entry in the standard encryption dictionary. @param oe A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error setting the data.
2188 This will set the UE entry in the standard encryption dictionary. @param ue A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error setting the data.
2189 This will parse the next token in the stream. @return The next token in the stream or null if there are no more tokens in the stream. @throws IOException If an io error occurs while parsing the stream.
2190 This will set the Recipients field of the dictionary. This field contains an array of string. @param recipients the array of bytes arrays to put in the Recipients field. @throws IOException If there is an error setting the data.
2191 Creates an empty PDF document. You need to add at least one page for the document to be valid. @param streamCacheCreateFunction a function to create an instance of a stream cache for buffering PDF streams
2192 Sets the name of the filter which is used for de/encrypting streams. @param streamFilterName the name of the filter
2193 This will set the document information for this document. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata) PDDocumentCatalog#setMetadata(PDMetadata)}. @param info The updated document information.
2194 Sets the name of the filter which is used for de/encrypting strings. @param stringFilterName the name of the filter
2195 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of.
2196 Set the Perms entry in the encryption dictionary. @param perms A 16 byte array. @throws IOException If there is an error setting the data.
2197 Sets the list of threads for this pdf document. @param threads The list of threads, or null to clear it.
2198 remove CF, StmF, and StrF entries. This is to be called if V is not 4 or 5.
2199 Replace the list of OutputIntents of the document. @param outputIntents the list of OutputIntents, if the list is empty all OutputIntents are removed.
2200 Default constructor.
2201 This will set the CropBox for this page. @param cropBox The new CropBox for this page.
2202 Set the annotation color. @param c The annotation color.
2203 This will set the contents of this page. @param contents Array of new contents of the page.
2204 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
2205 This will set the list of thread beads. @param beads A list of PDThreadBead objects or null.
2206 This will set interior color of the drawn area. @param color The interior color of the circle.
2207 This will set the list of annotations. Although this is optional, you should take care that any newly created annotations link back to this page by calling {@link PDAnnotation#setPage(org.apache.pdfbox.pdmodel.PDPage)}. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param annotations The new list of annotations.
2208 This will set the coordinates of the callout line. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
2209 Set the viewports. @param viewports A list of viewports, or null if the entry is to be deleted.
2210 Set the paths making up the freehand "scribble". The ink annotation is made up of one ore more disjoint paths. Each array entry is an array representing a stroked path, being a series of alternating horizontal and vertical coordinates in default user space. @param inklist the List of arrays representing the paths.
2211 Constructor for embedding.
2212 This will set start and end coordinates of the line (or leader line if LL entry is set). @param line array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
2213 {@inheritDoc}
2214 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
2215 {@inheritDoc}
2216 This will set the coordinates of the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
2217 {@inheritDoc}
2218 This will set interior color of the drawn area. @param color The interior color of the drawn area.
2219 This will set the coordinates of the the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
2220 {@inheritDoc}
2221 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
2222 This will set interior color of the drawn area. @param color The interior color of the circle.
2223 {@inheritDoc}
2224 Set the coordinates of individual words or group of words. The quadliterals shall encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral shall be given in the order x1 y1 x2 y2 x3 y3 x4 y4. @param coords an array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
2225 {@inheritDoc}
2226 This will set the FDF id. @param id The new id for the FDF.
2227 Default Constructor.
2228 This will set the list of fields. This should be a list of FDFField objects. @param fields The list of fields.
2229 Constructor. Creates empty COSDictionary if dict is null. @param dict The dictionary that fulfils this file specification.
2230 This will set the list of pages. This should be a list of FDFPage objects. @param pages The list of pages.
2231 This will set the range values. @param rangeValues The new range values.
2232 This will set the list of annotations. This should be a list of FDFAnnotation objects. @param annots The list of annotations.
2233 This will set the domain values. @param domainValues The new domain values.
2234 This will set the differences stream. @param diff The new differences stream.
2235 This will set the encode values. @param encodeValues The new encode values.
2236 This will set the list of embedded FDFs. This should be a list of PDFileSpecification objects. @param embedded The list of embedded FDFs.
2237 This will set the decode values. @param decodeValues The new decode values.
2238 This will set the list of kids. @param kids A list of FDFField objects.
2239 Sets the K entry. @param k the K value
2240 You should pass a String, or a List&lt;String&gt; to set the value. @param value The value that should populate when imported. @throws IOException If there is an error setting the value.
2241 Sets the ClassMap. @param classMap null, or a map whose elements are either {@link PDAttributeObject} or lists of it.
2242 Sets the COS value of this field. @param value COS value.
2243 Sets the user properties. @param userProperties the user properties
2244 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
2245 Set the line dash pattern associated with this box style. @param dashArray The patter for this box style.
2246 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
2247 This will set the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @param cfm name of the crypt filter method.
2248 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
2249 Sets the filter entry of the encryption dictionary. @param filter The filter name.
2250 This will set the widget field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
2251 This will set the O entry in the standard encryption dictionary. @param o A 32 byte array or null if there is no owner key. @throws IOException If there is an error setting the data.
2252 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
2253 This will set the U entry in the standard encryption dictionary. @param u A 32 byte array. @throws IOException If there is an error setting the data.
2254 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear widget field flags".
2255 This will set the rich text value. @param rv The rich text value for the stream.
2256 This will set the OE entry in the standard encryption dictionary. @param oe A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error setting the data.
2257 This will set the rich text value. @param rv The rich text value for the stream.
2258 This will set the UE entry in the standard encryption dictionary. @param ue A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error setting the data.
2259 This will set the javascript code the will get execute before the import. @param before A reference to some javascript code.
2260 This will set the Recipients field of the dictionary. This field contains an array of string. @param recipients the array of bytes arrays to put in the Recipients field. @throws IOException If there is an error setting the data.
2261 This will set the javascript code the will get execute after the import. @param after A reference to some javascript code.
2262 Sets the name of the filter which is used for de/encrypting streams. @param streamFilterName the name of the filter
2263 Sets the dictionary's "Doc" entry. @param map Map of named "JavaScript" dictionaries.
2264 Sets the name of the filter which is used for de/encrypting strings. @param stringFilterName the name of the filter
2265 A list of FDFTemplate objects. @param templates A list of templates for this Page.
2266 Set the Perms entry in the encryption dictionary. @param perms A 16 byte array. @throws IOException If there is an error setting the data.
2267 This will set a list of fields for this template. @param fields The list of fields to set for this template.
2268 remove CF, StmF, and StrF entries. This is to be called if V is not 4 or 5.
2269 Default constructor.
2270 Builds widths with a custom CIDToGIDMap (for embedding font subset).
2271 Set the annotation color. @param c The annotation color.
2272 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
2273 This will set interior color of the drawn area. @param color The interior color of the circle.
2274 Constructor for embedding.
2275 Package-private constructor, for embedding.
2276 This will set the coordinates of the callout line. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
2277 This will set the font name. @param fontName The new name for the font.
2278 Set the paths making up the freehand "scribble". The ink annotation is made up of one ore more disjoint paths. Each array entry is an array representing a stroked path, being a series of alternating horizontal and vertical coordinates in default user space. @param inklist the List of arrays representing the paths.
2279 This will set start and end coordinates of the line (or leader line if LL entry is set). @param line array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
2280 This will set the font family. @param fontFamily The font family.
2281 This will set the font stretch. @param fontStretch The new stretch for the font.
2282 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
2283 Set the fonts bounding box. @param rect The new bounding box.
2284 This will set the coordinates of the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
2285 This will set the character set for the font. @param charSet The new character set for the font.
2286 This will set interior color of the drawn area. @param color The interior color of the drawn area.
2287 Set the gamma value. @param value The new gamma value.
2288 This will set the coordinates of the the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
2289 Sets the gamma value. @param gamma the new gamma value
2290 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
2291 Sets the linear interpretation matrix. Passing in null will clear the matrix. @param matrix the new linear interpretation matrix, or null
2292 This will set interior color of the drawn area. @param color The interior color of the circle.
2293 Set the coordinates of individual words or group of words. The quadliterals shall encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral shall be given in the order x1 y1 x2 y2 x3 y3 x4 y4. @param coords an array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
2294 Sets the colorant map. @param colorants the map of colorants
2295 This will set the FDF id. @param id The new id for the FDF.
2296 Creates a group object with /Transparency subtype entry.
2297 This will set the list of fields. This should be a list of FDFField objects. @param fields The list of fields.
2298 Sets which filters are applied to this stream. @param filters the filters to apply to this stream.
2299 This will set the list of pages. This should be a list of FDFPage objects. @param pages The list of pages.
2300 This will set the list of annotations. This should be a list of FDFAnnotation objects. @param annots The list of annotations.
2301 This will set the differences stream. @param diff The new differences stream.
2302 This will set the list of embedded FDFs. This should be a list of PDFileSpecification objects. @param embedded The list of embedded FDFs.
2303 Creates a new optional content membership dictionary (OCMD).
2304 This will set the list of kids. @param kids A list of FDFField objects.
2305 Sets the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @param visibilityPolicy the visibility policy name
2306 Sets the optional Matrix entry for the Pattern. @param transform the transformation matrix
2307 You should pass a String, or a List&lt;String&gt; to set the value. @param value The value that should populate when imported. @throws IOException If there is an error setting the value.
2308 This will set the BBox (bounding box) for this Pattern. @param bbox The new BBox for this Pattern.
2309 Sets the COS value of this field. @param value COS value.
2310 This will set the background. @param newBackground the new background
2311 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
2312 This will set the BBox (bounding box) for this Shading. @param newBBox the new BBox
2313 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
2314 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
2315 This will set the color space for the shading. @param colorSpace the color space
2316 This will set the widget field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
2317 This will set the functions COSArray for the color conversion. @param newFunctions the new COSArray containing all functions
2318 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
2319 Sets the optional Matrix entry for the function based shading. @param transform the transformation matrix
2320 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear widget field flags".
2321 Sets the optional Domain entry for the function based shading. @param newDomain the domain array
2322 This will set the rich text value. @param rv The rich text value for the stream.
2323 Sets the optional Extend entry for this shading. @param newExtend the extend array
2324 This will set the rich text value. @param rv The rich text value for the stream.
2325 Sets the optional Domain entry for this shading. @param newDomain the domain array
2326 This will set the javascript code the will get execute before the import. @param before A reference to some javascript code.
2327 Sets the Coords entry for this shading. @param newCoords the coordinates array
2328 This will set the javascript code the will get execute after the import. @param after A reference to some javascript code.
2329 This will set the decode values. @param decodeValues the new decode values
2330 Sets the dictionary's "Doc" entry. @param map Map of named "JavaScript" dictionaries.
2331 Default constructor, creates blank graphics state.
2332 A list of FDFTemplate objects. @param templates A list of templates for this Page.
2333 Set the blending mode. @param bm blend mode
2334 This will set a list of fields for this template. @param fields The list of fields to set for this template.
2335 This will set a float object. @param key The key to the data that we are setting. @param value The value that we are setting.
2336 This will set the transfer function of the /TR dictionary. @param transfer The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
2337 Builds widths with a custom CIDToGIDMap (for embedding font subset).
2338 This will set the transfer function of the /TR2 dictionary. @param transfer2 The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
2339 This will set the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @param next The Next action or sequence of actions.
2340 Constructor for embedding.
2341 @param t annotation or annotations
2342 Package-private constructor, for embedding.
2343 @param h hide flag
2344 This will set the font name. @param fontName The new name for the font.
2345 This will set the font family. @param fontFamily The font family.
2346 @param array the array of fields
2347 This will set the font stretch. @param fontStretch The new stretch for the font.
2348 Sets the sound object. @param sound the sound object defining the sound that shall be played.
2349 Set the fonts bounding box. @param rect The new bounding box.
2350 @param array the array of fields
2351 This will set the character set for the font. @param charSet The new character set for the font.
2352 Set the gamma value. @param value The new gamma value.
2353 @param d The destination.
2354 Sets the gamma value. @param gamma the new gamma value
2355 @param b The destination.
2356 Sets the linear interpretation matrix. Passing in null will clear the matrix. @param matrix the new linear interpretation matrix, or null
2357 Set the relationship between the current document and the target (which may be an intermediate target). @param relationship Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). throws IllegalArgumentException if the parameter is not P or C.
2358 Sets the colorant map. @param colorants the map of colorants
2359 Constructor.
2360 Creates a group object with /Transparency subtype entry.
2361 This will set the rectangle for this annotation. @param rectangle The new rectangle values.
2362 This will set the border array. @param borderArray the border array to set.
2363 Sets which filters are applied to this stream. @param filters the filters to apply to this stream.
2364 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
2365 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
2366 Creates a new optional content membership dictionary (OCMD).
2367 This will set the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
2368 Sets the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @param visibilityPolicy the visibility policy name
2369 Sets the paths that make this annotation. @param inkList An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates. If the parameter is null the entry will be removed.
2370 Sets the optional Matrix entry for the Pattern. @param transform the transformation matrix
2371 This will set start and end coordinates of the line (or leader line if LL entry is set). @param l array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
2372 This will set the BBox (bounding box) for this Pattern. @param bbox The new BBox for this Pattern.
2373 This will set the set of quadpoints which encompass the areas of this annotation which will activate. @param quadPoints an array representing the set of area covered.
2374 This will set the background. @param newBackground the new background
2375 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
2376 This will set the BBox (bounding box) for this Shading. @param newBBox the new BBox
2377 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
2378 This will set the color space for the shading. @param colorSpace the color space
2379 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
2380 This will set the functions COSArray for the color conversion. @param newFunctions the new COSArray containing all functions
2381 This will set the markup annotation which this popup relates to. @param annot the markup annotation.
2382 Sets the optional Matrix entry for the function based shading. @param transform the transformation matrix
2383 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
2384 Sets the optional Domain entry for the function based shading. @param newDomain the domain array
2385 Sets the optional Extend entry for this shading. @param newExtend the extend array
2386 This will set the set of quadpoints which encompass the areas of this annotation. @param quadPoints an array representing the set of area covered
2387 Constructor for embedding.
2388 Sets the optional Domain entry for this shading. @param newDomain the domain array
2389 This will set the dash style used for drawing the border. @param dashArray the dash style to use
2390 Sets the Coords entry for this shading. @param newCoords the coordinates array
2391 This will set the decode values. @param decodeValues the new decode values
2392 Default constructor.
2393 (Optional) The signature handler that shall be used to sign the signature field. @param filter is the filter that shall be used by the signature handler
2394 Default constructor, creates blank graphics state.
2395 Set the blending mode. @param bm blend mode
2396 (Optional) An array of names indicating encodings to use when signing. The first name in the array that matches an encoding supported by the signature handler shall be the encoding that is actually used for signing. @param subfilter is the name that shall be used for encoding
2397 This will set a float object. @param key The key to the data that we are setting. @param value The value that we are setting.
2398 <p>(Optional, PDF 1.7) An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific.</p> <p>This property is only applicable if the digital credential signing contains RSA public/privat keys</p> @param digestMethod is a list of possible names of the digests, that should be used for signing.
2399 (Optional) An array of text strings that specifying possible reasons for signing a document. If specified, the reasons supplied in this entry replace those used by conforming products. @param reasons is a list of possible text string that specifying possible reasons
2400 This will set the transfer function of the /TR dictionary. @param transfer The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
2401 This will set the transfer function of the /TR2 dictionary. @param transfer2 The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
2402 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @param mdp dictionary
2403 This will set the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @param next The Next action or sequence of actions.
2404 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @param timestamp dictionary
2405 @param t annotation or annotations
2406 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @param legalAttestation is a list of possible text string that specifying possible legal attestations.
2407 @param h hide flag
2408 Default constructor.
2409 (Optional) A list of byte arrays containing DER-encoded X.509v3 certificates that are acceptable for signing. if <b>Subject</b> is not null and {@link #isSubjectRequired()} is true then the subject constraint is enforced on the subjects in this array subjects. @param subjects list of byte arrays containing DER-encoded X.509v3 certificates that are acceptable for signing.
2410 @param array the array of fields
2411 (Optional; PDF 1.7) A list of maps, where each map contains key value pairs, that specify the Subject Distinguished Name (DN) that must be present within the certificate for it to be acceptable for signing. The certificate must at a minimum contain all the attributes specified in one of the maps entered. @param subjectDN list of maps that contains subject distinguished names
2412 Sets the sound object. @param sound the sound object defining the sound that shall be played.
2413 (Optional; PDF 1.7) A List of ASCII strings, where each string specifies an acceptable key-usage extension that must be present in the signing certificate. Multiple strings specify a range of acceptable key-usage extensions; where each string 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @param keyUsageExtensions list of ASCII strings that consists only of {0, 1, X}
2414 @param array the array of fields
2415 (Optional) A list of array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuers A list of byte array containing DER-encoded X.509v3 certificates
2416 @param d The destination.
2417 (Optional) A list of byte arrays that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate. This field is only applicable if the value of Issuer is not empty. @param oidByteStrings list of byte arrays that contain OIDs
2418 @param b The destination.
2419 Default constructor.
2420 Set the relationship between the current document and the target (which may be an intermediate target). @param relationship Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). throws IllegalArgumentException if the parameter is not P or C.
2421 Set the dictionary type. @param type is the dictionary type.
2422 Constructor.
2423 Set the filter. @param filter the filter to be used
2424 This will set the rectangle for this annotation. @param rectangle The new rectangle values.
2425 Set a subfilter that specify the signature that should be used. @param subfilter the subfilter that shall be used.
2426 This will set the border array. @param borderArray the border array to set.
2427 Sets the byte range. @param range the byte range to be used
2428 Sets the contents. @param bytes contents to be used
2429 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
2430 Constructor. @param doc The document that this form is part of.
2431 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
2432 Set the documents root fields. @param fields The fields that are part of the documents root fields.
2433 This will set the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
2434 Set the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @param fields The field list.
2435 Sets the paths that make this annotation. @param inkList An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates. If the parameter is null the entry will be removed.
2436 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2437 This will set start and end coordinates of the line (or leader line if LL entry is set). @param l array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
2438 This will set the export values. @see #getExportValues() @param values List containing all possible export values. Supplying null or an empty list will remove the Opt entry.
2439 This will set the set of quadpoints which encompass the areas of this annotation which will activate. @param quadPoints an array representing the set of area covered.
2440 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2441 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
2442 Sets the child fields. @param children The list of child fields.
2443 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
2444 Sets the value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param object the new value
2445 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
2446 Sets the default of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param value the default value
2447 This will set the markup annotation which this popup relates to. @param annot the markup annotation.
2448 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroForm for this field.
2449 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
2450 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2451 This will set the set of quadpoints which encompass the areas of this annotation. @param quadPoints an array representing the set of area covered
2452 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
2453 Constructor for embedding.
2454 Set the fields rich text value. <p> Setting the rich text value will not generate the appearance for the field. <br> You can set {@link PDAcroForm#setNeedAppearances(Boolean)} to signal a conforming reader to generate the appearance stream. </p> Providing null as the value will remove the default style string. @param richTextValue a rich text string
2455 This will set the dash style used for drawing the border. @param dashArray the dash style to use
2456 This will set the origin of the coordinate system. @param coordSystemOrigin the origin
2457 Default constructor.
2458 Default constructor.
2459 (Optional) The signature handler that shall be used to sign the signature field. @param filter is the filter that shall be used by the signature handler
2460 Sets the direction in which the specified transition effect shall move. Only for {@link PDTransitionStyle#Wipe}, {@link PDTransitionStyle#Glitter}, {@link PDTransitionStyle#Fly}, {@link PDTransitionStyle#Cover}, {@link PDTransitionStyle#Uncover} and {@link PDTransitionStyle#Push}. @param direction the direction in which the specified transition effect shall move
2461 (Optional) An array of names indicating encodings to use when signing. The first name in the array that matches an encoding supported by the signature handler shall be the encoding that is actually used for signing. @param subfilter is the name that shall be used for encoding
2462 @param duration The duration of the transition effect, in seconds.
2463 <p>(Optional, PDF 1.7) An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific.</p> <p>This property is only applicable if the digital credential signing contains RSA public/privat keys</p> @param digestMethod is a list of possible names of the digests, that should be used for signing.
2464 @param scale The starting or ending scale at which the changes shall be drawn. Only for {@link PDTransitionStyle#Fly}.
2465 (Optional) An array of text strings that specifying possible reasons for signing a document. If specified, the reasons supplied in this entry replace those used by conforming products. @param reasons is a list of possible text string that specifying possible reasons
2466 @param opaque If true, the area that shall be flown in is rectangular and opaque. Only for {@link PDTransitionStyle#Fly}.
2467 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @param mdp dictionary
2468 {@inheritDoc}
2469 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @param timestamp dictionary
2470 Process the font color operator. This is assumed to be an RGB color. @param operands the color components @throws IOException in case of the color components not matching
2471 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @param legalAttestation is a list of possible text string that specifying possible legal attestations.
2472 Default constructor.
2473 (Optional) A list of byte arrays containing DER-encoded X.509v3 certificates that are acceptable for signing. if <b>Subject</b> is not null and {@link #isSubjectRequired()} is true then the subject constraint is enforced on the subjects in this array subjects. @param subjects list of byte arrays containing DER-encoded X.509v3 certificates that are acceptable for signing.
2474 {@inheritDoc}
2475 This will add all objects to this array. @param objectList The list of objects to add.
2476 (Optional; PDF 1.7) A list of maps, where each map contains key value pairs, that specify the Subject Distinguished Name (DN) that must be present within the certificate for it to be acceptable for signing. The certificate must at a minimum contain all the attributes specified in one of the maps entered. @param subjectDN list of maps that contains subject distinguished names
2477 This will take an COSArray of numbers and convert it to a float[]. @return This COSArray as an array of float numbers.
2478 (Optional; PDF 1.7) A List of ASCII strings, where each string specifies an acceptable key-usage extension that must be present in the signing certificate. Multiple strings specify a range of acceptable key-usage extensions; where each string 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @param keyUsageExtensions list of ASCII strings that consists only of {0, 1, X}
2479 (Optional) A list of array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuers A list of byte array containing DER-encoded X.509v3 certificates
2480 This will return a list of float values if the COSArray consists of COSNumbers only. @return the list of float values of the COSArray of COSNumbers
2481 (Optional) A list of byte arrays that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate. This field is only applicable if the value of Issuer is not empty. @param oidByteStrings list of byte arrays that contain OIDs
2482 This will return a list of int values if the COSArray consists of COSNumbers only. @return the list of int values of the COSArray of COSNumbers
2483 Default constructor.
2484 Set the dictionary type. @param type is the dictionary type.
2485 Update the P reference to the new parent dictionary. @param kArray the kids array @param newParent the new parent @param newStructureType the new structure type in /S or null so it doesn't get replaced
2486 Set the filter. @param filter the filter to be used
2487 Set a subfilter that specify the signature that should be used. @param subfilter the subfilter that shall be used.
2488 Sets the byte range. @param range the byte range to be used
2489 Sets the contents. @param bytes contents to be used
2490 This will get the minimum value of the range. @return The min value.
2491 Constructor. @param doc The document that this form is part of.
2492 This will get the maximum value of the range. @return The max value.
2493 Set the documents root fields. @param fields The fields that are part of the documents root fields.
2494 Gets the colour by edge index. @param index edge index @return the colour
2495 Set the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @param fields The field list.
2496 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2497 This will set the export values. @see #getExportValues() @param values List containing all possible export values. Supplying null or an empty list will remove the Opt entry.
2498 This will get the string of one of the available options. A required element. @return An available option.
2499 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2500 This will get the string of default appearance string. A required element. @return A default appearance string.
2501 Sets the child fields. @param children The list of child fields.
2502 Determines the blend mode from the BM entry in the COS ExtGState. @param cosBlendMode name or array @return blending mode
2503 Sets the value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param object the new value
2504 Returns the list of colorants. @return the list of colorants
2505 Sets the default of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param value the default value
2506 This will get the alternate color space for this separation. @return The alternate color space. @throws IOException If there is an error getting the alternate color space.
2507 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroForm for this field.
2508 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2509 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
2510 Returns the colorant name. @return the name of the colorant
2511 Set the fields rich text value. <p> Setting the rich text value will not generate the appearance for the field. <br> You can set {@link PDAcroForm#setNeedAppearances(Boolean)} to signal a conforming reader to generate the appearance stream. </p> Providing null as the value will remove the default style string. @param richTextValue a rich text string
2512 Creates a matrix from a 6-element (a b c d e f) COS array. @param array source array, elements must be or extend COSNumber
2513 This will set the origin of the coordinate system. @param coordSystemOrigin the origin
2514 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
2515 Default constructor.
2516 Sets the direction in which the specified transition effect shall move. Only for {@link PDTransitionStyle#Wipe}, {@link PDTransitionStyle#Glitter}, {@link PDTransitionStyle#Fly}, {@link PDTransitionStyle#Cover}, {@link PDTransitionStyle#Uncover} and {@link PDTransitionStyle#Push}. @param direction the direction in which the specified transition effect shall move
2517 This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
2518 @param duration The duration of the transition effect, in seconds.
2519 @param scale The starting or ending scale at which the changes shall be drawn. Only for {@link PDTransitionStyle#Fly}.
2520 This is a convenience method that will get the dictionary object that is expected to be a name. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COS name.
2521 @param opaque If true, the area that shall be flown in is rectangular and opaque. Only for {@link PDTransitionStyle#Fly}.
2522 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSDictionary.
2523 {@inheritDoc}
2524 This is a convenience method that will get the dictionary object that is expected to be a COSStream. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSStream.
2525 Process the font color operator. This is assumed to be an RGB color. @param operands the color components @throws IOException in case of the color components not matching
2526 This is a convenience method that will get the dictionary object that is expected to be a COSArray. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSArray.
2527 {@inheritDoc}
2528 This is a convenience method that will get the dictionary object that is expected to be a name. Default is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The COS name.
2529 This will add all objects to this array. @param objectList The list of objects to add.
2530 This will take an COSArray of numbers and convert it to a float[]. @return This COSArray as an array of float numbers.
2531 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
2532 This will return a list of float values if the COSArray consists of COSNumbers only. @return the list of float values of the COSArray of COSNumbers
2533 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
2534 This will return a list of int values if the COSArray consists of COSNumbers only. @return the list of int values of the COSArray of COSNumbers
2535 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
2536 Update the P reference to the new parent dictionary. @param kArray the kids array @param newParent the new parent @param newStructureType the new structure type in /S or null so it doesn't get replaced
2537 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
2538 This is a convenience method that will get the dictionary object that is expected to be an float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
2539 This will get the minimum value of the range. @return The min value.
2540 Some applications may not wrap their page content in a save/restore (q/Q) pair which can lead to problems with coordinate system transformations when content is appended. This method lets you add a q/Q pair around the existing page's content. @param page the page @throws IOException if an I/O error occurs
2541 This will get the maximum value of the range. @return The max value.
2542 Gets the colour by edge index. @param index edge index @return the colour
2543 Returns the content streams which make up this page. @return content stream iterator
2544 Returns true if this page has one or more content streams. @return true if the page has a non empty content stream, otherwise false
2545 This will get the string of one of the available options. A required element. @return An available option.
2546 This will get the string of default appearance string. A required element. @return A default appearance string.
2547 This will take a COS dictionary and convert it into COSDictionaryMap. All cos objects will be converted to their primitive form. @param map The COS mappings. @return A standard java map. @throws IOException If there is an error during the conversion.
2548 Removes an attribute object. @param attributeObject the attribute object
2549 Determines the blend mode from the BM entry in the COS ExtGState. @param cosBlendMode name or array @return blending mode
2550 Returns the class names together with their revision numbers (C). @return the class names as a list, never null.
2551 Returns the list of colorants. @return the list of colorants
2552 Removes a class name. @param className the class name
2553 This will get the alternate color space for this separation. @return The alternate color space. @throws IOException If there is an error getting the alternate color space.
2554 Appends a COS base kid. @param object the COS base
2555 Inserts an COS base kid before a reference kid. @param newKid the COS base @param refKid the reference kid
2556 Removes a COS base kid. @param object the COS base @return <code>true</code> if the kid was removed, <code>false</code> otherwise
2557 Returns the colorant name. @return the name of the colorant
2558 Returns the K entry. This can be a dictionary representing a structure element, or an array of them. To get it as a list of PDStructureElement objects, use {@link #getKids()} instead. @return the K entry.
2559 Creates a matrix from a 6-element (a b c d e f) COS array. @param array source array, elements must be or extend COSNumber
2560 Returns the property value. @return the property value
2561 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
2562 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set (the default is true)
2563 This will get the OE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error accessing the data.
2564 This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
2565 This is a convenience method that will get the dictionary object that is expected to be a name. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COS name.
2566 This will get the UE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error accessing the data.
2567 Get the Perms entry in the encryption dictionary. @return A 16 byte array or null if there is no Perms entry. @throws IOException If there is an error accessing the data.
2568 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSDictionary.
2569 This will get the page number or null if it does not exist. @return The page number.
2570 This is a convenience method that will get the dictionary object that is expected to be a COSStream. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSStream.
2571 Returns the COS value of this field. @return The COS value of the field, maybe <code>null</code>. @throws IOException If there is an error getting the value.
2572 This is a convenience method that will get the dictionary object that is expected to be a COSArray. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSArray.
2573 This will get the 'Ff' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
2574 This will get the 'SetFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
2575 This is a convenience method that will get the dictionary object that is expected to be a name. Default is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The COS name.
2576 This will get the 'ClrFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
2577 This will get the 'F' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
2578 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
2579 This will get the 'SetF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
2580 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
2581 This will get the 'ClrF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
2582 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
2583 This will get the default width. The default value for the default width is 1000. @return The default width for the glyphs in this font.
2584 Returns the process color space @return the process color space @throws IOException if the color space cannot be read
2585 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
2586 Returns the group color space or null if it isn't defined. @param resources useful for its cache. Can be null. @return the group color space. @throws IOException if the colorspace could not be created
2587 This is a convenience method that will get the dictionary object that is expected to be an float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
2588 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
2589 Some applications may not wrap their page content in a save/restore (q/Q) pair which can lead to problems with coordinate system transformations when content is appended. This method lets you add a q/Q pair around the existing page's content. @param page the page @throws IOException if an I/O error occurs
2590 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
2591 This will get the overprint control mode. @return The overprint control mode or null if one has not been set.
2592 Returns the content streams which make up this page. @return content stream iterator
2593 Returns the soft mask stored in the COS dictionary @return the soft mask or null if there isn't any.
2594 Returns true if this page has one or more content streams. @return true if the page has a non empty content stream, otherwise false
2595 This will get a float item from the dictionary. @param key The key to the item. @return The value for that item.
2596 This will take a COS dictionary and convert it into COSDictionaryMap. All cos objects will be converted to their primitive form. @param map The COS mappings. @return A standard java map. @throws IOException If there is an error during the conversion.
2597 This will get the transfer function of the /TR dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
2598 Removes an attribute object. @param attributeObject the attribute object
2599 This will get the transfer function of the /TR2 dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
2600 Returns the class names together with their revision numbers (C). @return the class names as a list, never null.
2601 Returns the backdrop color. @return the backdrop color
2602 Removes a class name. @param className the class name
2603 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
2604 Appends a COS base kid. @param object the COS base
2605 The annotation or annotations to be hidden or shown @return The T entry of the specific thread action dictionary.
2606 Inserts an COS base kid before a reference kid. @param newKid the COS base @param refKid the reference kid
2607 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
2608 Removes a COS base kid. @param object the COS base @return <code>true</code> if the kid was removed, <code>false</code> otherwise
2609 Returns the K entry. This can be a dictionary representing a structure element, or an array of them. To get it as a list of PDStructureElement objects, use {@link #getKids()} instead. @return the K entry.
2610 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
2611 Returns the property value. @return the property value
2612 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set (the default is true)
2613 This will get the OE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error accessing the data.
2614 If the value in the /P entry is a string, this will get a named destination in the current document that provides the page number of the file attachment annotation. @return a named destination or null if the /P entry value is missing or not a string.
2615 This will get the UE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error accessing the data.
2616 Constructor. @param dict The annotations dictionary.
2617 Get the Perms entry in the encryption dictionary. @return A 16 byte array or null if there is no Perms entry. @throws IOException If there is an error accessing the data.
2618 Returns the /Contents string as a byte array, i.e. the embedded signature between the byterange gap. @return a byte array containing the signature, or an empty array if there isn't any.
2619 This will get the page number or null if it does not exist. @return The page number.
2620 Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms. @return The xfa resource or null if it does not exist.
2621 This will get the option values "Opt". <p> For a choice field the options array can either be an array of text strings or an array of a two-element arrays.<br> The method always only returns either the text strings or, in case of two-element arrays, an array of the first element of the two-element arrays </p> <p> Use {@link #getOptionsExportValues()} and {@link #getOptionsDisplayValues()} to get the entries of two-element arrays. </p> @return List containing the export values.
2622 Returns the COS value of this field. @return The COS value of the field, maybe <code>null</code>. @throws IOException If there is an error getting the value.
2623 This will get the display values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the display value is the second entry in the two-element array. </p> @return List containing all the display values.
2624 This will get the 'Ff' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
2625 This will get the 'SetFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
2626 Returns the selected values, or an empty List, for the given key.
2627 This will get the 'ClrFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
2628 This will get the 'F' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
2629 Returns the given attribute, inheriting from parent nodes if necessary. @param key the key to look up @return COS value for the given key
2630 This will get the 'SetF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
2631 Returns the COSBase value of the "V" entry. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the COSBase value of the "V" entry
2632 This will get the 'ClrF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
2633 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
2634 This will get the default width. The default value for the default width is 1000. @return The default width for the glyphs in this font.
2635 Returns the default value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the new default value
2636 {@inheritDoc}
2637 Returns the process color space @return the process color space @throws IOException if the color space cannot be read
2638 Collects all indirect objects numbers within this COSArray and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
2639 Returns the group color space or null if it isn't defined. @param resources useful for its cache. Can be null. @return the group color space. @throws IOException if the colorspace could not be created
2640 Determine the highest object number from the imported page to avoid mixed up numbers when saving the new pdf. @param importedPage the imported page.
2641 Closes the visual signature COSDocument, if any. Do not call this before you're saved your signed PDF document, or saving will fail because COSStream objects held both by the COSDocument and by the signed document would no longer be available. @throws IOException if the document could not be closed
2642 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
2643 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
2644 This will get the overprint control mode. @return The overprint control mode or null if one has not been set.
2645 Returns the soft mask stored in the COS dictionary @return the soft mask or null if there isn't any.
2646 This will get a float item from the dictionary. @param key The key to the item. @return The value for that item.
2647 This will get the transfer function of the /TR dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
2648 This will write a COS object for a predefined key. @param key The key of the object to write. @param obj The object to write. @throws IOException if the output cannot be written
2649 This will get the transfer function of the /TR2 dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
2650 visitFromObjRef method comment. @param obj The object that is being visited. @throws IOException If there is an exception while visiting this object.
2651 Returns the backdrop color. @return the backdrop color
2652 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
2653 Returns the {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool. @param object The {@link COSBase} a {@link COSObjectKey} is registered for in this compression pool. @return The {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool, if such an object is contained.
2654 The annotation or annotations to be hidden or shown @return The T entry of the specific thread action dictionary.
2655 Update the key and object maps. @param key The key, that shall be added. @param object The object, that shall be added. @return The actual key, the object has been added for.
2656 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
2657 Returns true, if the given {@link COSBase} is a registered object of this compression pool. @param object The object, that shall be checked. @return True, if the given {@link COSBase} is a registered object of this compression pool.
2658 Creates {@link COSWriterObjectStream}s for all currently registered objects of this pool, that have been marked as fit for being compressed in this manner. Such object streams may be added to a PDF document and shall be declared in a document's {@link PDFXRefStream} accordingly. The objects contained in such a stream must not be added to the document separately. @return The created {@link COSWriterObjectStream}s for all currently registered compressible objects.
2659 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
2660 Process lines for output. Process lines for an individual paragraph and generate the commands for the content stream to show the text. @param lines the lines to process. @throws IOException if there is an error writing to the stream.
2661 Creates a new JPEG PDImageXObject from a BufferedImage. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @return a new Image XObject @throws IOException if the JPEG data cannot be written
2662 If the value in the /P entry is a string, this will get a named destination in the current document that provides the page number of the file attachment annotation. @return a named destination or null if the /P entry value is missing or not a string.
2663 Creates a new ICC color space with an empty stream. @param doc the document to store the ICC data
2664 Constructor. @param dict The annotations dictionary.
2665 Returns the /Contents string as a byte array, i.e. the embedded signature between the byterange gap. @return a byte array containing the signature, or an empty array if there isn't any.
2666 Creates a new uncolored tiling pattern color space. @param resources The current resources. @param colorSpace The underlying color space.
2667 Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms. @return The xfa resource or null if it does not exist.
2668 Set optional content groups as a list. @param ocgs list of optional content groups to set.
2669 This will get the option values "Opt". <p> For a choice field the options array can either be an array of text strings or an array of a two-element arrays.<br> The method always only returns either the text strings or, in case of two-element arrays, an array of the first element of the two-element arrays </p> <p> Use {@link #getOptionsExportValues()} and {@link #getOptionsDisplayValues()} to get the entries of two-element arrays. </p> @return List containing the export values.
2670 This will set the changes along the x-axis. @param changeXs changes along the x-axis
2671 This will get the display values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the display value is the second entry in the two-element array. </p> @return List containing all the display values.
2672 This will set the changes along the y-axis. @param changeYs changes along the y-axis
2673 Returns the selected values, or an empty List, for the given key.
2674 This will set the distances. @param distances distances
2675 This will set the areas. @param areas areas
2676 Returns the given attribute, inheriting from parent nodes if necessary. @param key the key to look up @return COS value for the given key
2677 This will set the angles. @param angles angles
2678 Returns the COSBase value of the "V" entry. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the COSBase value of the "V" entry
2679 This will set the sloaps of a line. @param lineSloaps the sloaps of a line
2680 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
2681 This will add null values until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array.
2682 Returns the default value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the new default value
2683 {@inheritDoc}
2684 Creates a clone of the source. @param src source dictionary or array. @param dstParent for the /P entry; parameter needed because arrays don't keep a parent. @param currentPageDict used to remember whether we have a page parent somewhere or not. Starts with null. @return a clone, or null if source is null or if there is no clone because it belongs to a different page or to no page.
2685 Collects all indirect objects numbers within this COSArray and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
2686 This will set the list of decode parameters. @param decodeParams The list of decode parameters.
2687 Determine the highest object number from the imported page to avoid mixed up numbers when saving the new pdf. @param importedPage the imported page.
2688 This will set the list of decode params. @param decodeParams The list of decode params.
2689 Closes the visual signature COSDocument, if any. Do not call this before you're saved your signed PDF document, or saving will fail because COSStream objects held both by the COSDocument and by the signed document would no longer be available. @throws IOException if the document could not be closed
2690 Sets the kids (K). @param kids the kids
2691 This will set the options for the choice field. The objects in the list should either be <code>String</code> or {@link FDFOptionElement}. @param options The options to set.
2692 Returns the range for a certain component number. This will never return null. If it is not present then the range 0..1 will be returned. @param n the component number to get the range for @return the range for this component
2693 Build widths with Identity CIDToGIDMap (for embedding full font).
2694 This will set the dash pattern for the graphics state. @param dashPattern The dash pattern
2695 Set the color space instance for this box style. This must be a PDDeviceRGB! @param color The new colorspace value.
2696 This will set the color used in drawing various elements. As of PDF 1.6 these are : Background of icon when closed Title bar of popup window Border of a link annotation Colour is in DeviceRGB colourspace @param c colour in the DeviceRGB colourspace
2697 This will write a COS object for a predefined key. @param key The key of the object to write. @param obj The object to write. @throws IOException if the output cannot be written
2698 This will set interior color of the line endings defined in the LE entry. color is in DeviceRGB color space. @param ic color in the DeviceRGB color space.
2699 visitFromObjRef method comment. @param obj The object that is being visited. @throws IOException If there is an exception while visiting this object.
2700 This will set interior color. @param ic color.
2701 This will set interior color of the line endings defined in the LE entry. @param ic color.
2702 Returns the {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool. @param object The {@link COSBase} a {@link COSObjectKey} is registered for in this compression pool. @return The {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool, if such an object is contained.
2703 This will set interior color of the drawn area color is in DeviceRGB colorspace. @param ic color in the DeviceRGB color space.
2704 This will set the border color. @param c the border color
2705 Update the key and object maps. @param key The key, that shall be added. @param object The object, that shall be added. @return The actual key, the object has been added for.
2706 This will set the background color. @param c the background color
2707 Returns true, if the given {@link COSBase} is a registered object of this compression pool. @param object The object, that shall be checked. @return True, if the given {@link COSBase} is a registered object of this compression pool.
2708 Creates {@link COSWriterObjectStream}s for all currently registered objects of this pool, that have been marked as fit for being compressed in this manner. Such object streams may be added to a PDF document and shall be declared in a document's {@link PDFXRefStream} accordingly. The objects contained in such a stream must not be added to the document separately. @return The created {@link COSWriterObjectStream}s for all currently registered compressible objects.
2709 Process lines for output. Process lines for an individual paragraph and generate the commands for the content stream to show the text. @param lines the lines to process. @throws IOException if there is an error writing to the stream.
2710 Creates a new JPEG PDImageXObject from a BufferedImage. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @return a new Image XObject @throws IOException if the JPEG data cannot be written
2711 Creates a new JPEG Image XObject from an input stream containing JPEG data. The input stream data will be preserved and embedded in the PDF file without modification. @param document the document where the image will be created @param stream a stream of JPEG data @return a new Image XObject @throws IOException if the input stream cannot be read
2712 Creates a new ICC color space with an empty stream. @param doc the document to store the ICC data
2713 This will set the font for this font setting. @param font The new font.
2714 Creates a new uncolored tiling pattern color space. @param resources The current resources. @param colorSpace The underlying color space.
2715 This will set the tint transform function. @param tint The tint transform function.
2716 Sets the tint transform function. @param tint the tint transform function
2717 Set optional content groups as a list. @param ocgs list of optional content groups to set.
2718 This will create a translated rectangle based off of this rectangle, such that the new rectangle retains the same dimensions(height/width), but the lower left x,y values are zero. <br> 100, 100, 400, 400 (llx, lly, urx, ury ) <br> will be translated to 0,0,300,300 @return A new rectangle that has been translated back to the origin.
2719 This will set the changes along the x-axis. @param changeXs changes along the x-axis
2720 Sets the colour for the before edge. @param colour the colour for the before edge
2721 This will set the changes along the y-axis. @param changeYs changes along the y-axis
2722 Sets the colour for the after edge. @param colour the colour for the after edge
2723 This will set the distances. @param distances distances
2724 Sets the colour for the start edge. @param colour the colour for the start edge
2725 This will set the areas. @param areas areas
2726 Sets the colour for the end edge. @param colour the colour for the end edge
2727 This will set the angles. @param angles angles
2728 This will set the sloaps of a line. @param lineSloaps the sloaps of a line
2729 This will dispatch to the correct method. @param obj The object to decrypt. @param objNum The object number. @param genNum The object generation Number. @return the encrypted/decrypted COS object @throws IOException If there is an error getting the stream data.
2730 This will add null values until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array.
2731 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
2732 Sets the AcroForm for this catalog. @param acroForm The new AcroForm.
2733 Creates a clone of the source. @param src source dictionary or array. @param dstParent for the /P entry; parameter needed because arrays don't keep a parent. @param currentPageDict used to remember whether we have a page parent somewhere or not. Starts with null. @return a clone, or null if source is null or if there is no clone because it belongs to a different page or to no page.
2734 Sets the viewer preferences. @param prefs The new viewer preferences.
2735 This will set the list of decode parameters. @param decodeParams The list of decode parameters.
2736 Sets the document outlines. @param outlines The new document outlines.
2737 This will set the list of decode params. @param decodeParams The list of decode params.
2738 Sets the metadata for this object. This can be null. @param meta The meta data for this object.
2739 Sets the kids (K). @param kids the kids
2740 Sets the Document Open Action for this object. @param action The action you want to perform.
2741 This will set the options for the choice field. The objects in the list should either be <code>String</code> or {@link FDFOptionElement}. @param options The options to set.
2742 Sets the additional actions for the document. @param actions The actions that are associated with this document.
2743 Returns the range for a certain component number. This will never return null. If it is not present then the range 0..1 will be returned. @param n the component number to get the range for @return the range for this component
2744 Sets the names dictionary for the document. @param names The names dictionary that is associated with this document.
2745 Build widths with Identity CIDToGIDMap (for embedding full font).
2746 Set information about the doc's usage of tagged features. @param markInfo The new MarkInfo data.
2747 This will set the dash pattern for the graphics state. @param dashPattern The dash pattern
2748 Sets the document level URI. @param uri The new document level URI.
2749 Set the color space instance for this box style. This must be a PDDeviceRGB! @param color The new colorspace value.
2750 Sets the document's structure tree root. @param treeRoot The new structure tree.
2751 This will set the color used in drawing various elements. As of PDF 1.6 these are : Background of icon when closed Title bar of popup window Border of a link annotation Colour is in DeviceRGB colourspace @param c colour in the DeviceRGB colourspace
2752 Sets the page label descriptor for the document. @param labels the new page label descriptor to set.
2753 This will set interior color of the line endings defined in the LE entry. color is in DeviceRGB color space. @param ic color in the DeviceRGB color space.
2754 Set the named destinations that are associated with this document. @param dests The destination names.
2755 This will set interior color. @param ic color.
2756 Set the named embedded files that are associated with this document. @param ef The new embedded files
2757 This will set interior color of the line endings defined in the LE entry. @param ic color.
2758 Set the named javascript entries that are associated with this document. @param js The new Javascript entries.
2759 This will set interior color of the drawn area color is in DeviceRGB colorspace. @param ic color in the DeviceRGB color space.
2760 Creates a new instance of PDPage for embedding. @param mediaBox The MediaBox of the page.
2761 This will set the border color. @param c the border color
2762 This will set the resources for this page. @param resources The new resources for this page.
2763 This will set the background color. @param c the background color
2764 This will set the mediaBox for this page. @param mediaBox The new mediaBox for this page.
2765 This will set the BleedBox for this page. @param bleedBox The new BleedBox for this page.
2766 This will set the TrimBox for this page. @param trimBox The new TrimBox for this page.
2767 This will set the ArtBox for this page. @param artBox The new ArtBox for this page.
2768 This will set the contents of this page. @param contents The new contents of the page.
2769 Set the metadata for this object. This can be null. @param meta The meta data for this object.
2770 Creates a new JPEG Image XObject from an input stream containing JPEG data. The input stream data will be preserved and embedded in the PDF file without modification. @param document the document where the image will be created @param stream a stream of JPEG data @return a new Image XObject @throws IOException if the input stream cannot be read
2771 Set the page actions. @param actions The actions for the page.
2772 This will set the font for this font setting. @param font The new font.
2773 @param transition The new transition to set on this page.
2774 This will set the tint transform function. @param tint The tint transform function.
2775 Sets the tint transform function. @param tint the tint transform function
2776 Convenient method to set a transition and the display duration @param transition The new transition to set on this page. @param duration The maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page.
2777 This will create a translated rectangle based off of this rectangle, such that the new rectangle retains the same dimensions(height/width), but the lower left x,y values are zero. <br> 100, 100, 400, 400 (llx, lly, urx, ury ) <br> will be translated to 0,0,300,300 @return A new rectangle that has been translated back to the origin.
2778 Sets the page. @param page the page
2779 Sets the colour for the before edge. @param colour the colour for the before edge
2780 Sets the referenced annotation. @param annotation the referenced annotation
2781 Sets the colour for the after edge. @param colour the colour for the after edge
2782 Sets the referenced XObject. @param xobject the referenced XObject
2783 Sets the page on which the object shall be rendered. This is optional and overrides the /PG entry in the structure element containing the object reference; shall be used if the structure element contained no such entry. @param page
2784 Sets the colour for the start edge. @param colour the colour for the start edge
2785 Sets the parent in the structure hierarchy (P). @param structureNode the parent in the structure hierarchy
2786 Sets the colour for the end edge. @param colour the colour for the end edge
2787 Sets the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @param page the page on which some or all of the content items designated by the K entry shall be rendered.
2788 Sets the attributes together with their revision numbers (A). @param attributes the attributes
2789 This will dispatch to the correct method. @param obj The object to decrypt. @param objNum The object number. @param genNum The object generation Number. @return the encrypted/decrypted COS object @throws IOException If there is an error getting the stream data.
2790 Sets the ID tree. @param idTree the ID tree
2791 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
2792 Sets the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. <p> To create an empty parent tree, call {@code new PDNumberTreeNode(PDParentTreeValue.class)}. @param parentTree the parent tree
2793 Sets the AcroForm for this catalog. @param acroForm The new AcroForm.
2794 Set the rectangle associated with this annotation. @param rectangle The annotation rectangle.
2795 Sets the viewer preferences. @param prefs The new viewer preferences.
2796 This will set the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @param bs the border style dictionary to set.
2797 Sets the document outlines. @param outlines The new document outlines.
2798 This will set the border effect dictionary, describing the effect applied to the border described by the BS entry. @param be the border effect dictionary to set.
2799 Sets the metadata for this object. This can be null. @param meta The meta data for this object.
2800 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. @param fringe the fringe
2801 Sets the Document Open Action for this object. @param action The action you want to perform.
2802 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
2803 Sets the additional actions for the document. @param actions The actions that are associated with this document.
2804 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
2805 Sets the names dictionary for the document. @param names The names dictionary that is associated with this document.
2806 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
2807 This will set the FDF document. @param fdf The new FDF dictionary.
2808 Set information about the doc's usage of tagged features. @param markInfo The new MarkInfo data.
2809 This will set the signature that is associated with this catalog. @param sig The new signature.
2810 Sets the document level URI. @param uri The new document level URI.
2811 This will set the file specification. @param fs The file specification.
2812 Sets the document's structure tree root. @param treeRoot The new structure tree.
2813 This will set the JavaScript entry. @param js The javascript entries.
2814 Sets the page label descriptor for the document. @param labels the new page label descriptor to set.
2815 This will set the FDF catalog for this FDF document. @param cat The FDF catalog.
2816 Set the named destinations that are associated with this document. @param dests The destination names.
2817 This will set the appearance dictionary. @param ap The appearance dictionary.
2818 Set the named embedded files that are associated with this document. @param ef The new embedded files
2819 This will set the named page references. @param ref The named page references.
2820 Set the named javascript entries that are associated with this document. @param js The new Javascript entries.
2821 This will set the icon fit 'IF' entry. @param fit The icon fit object.
2822 Creates a new instance of PDPage for embedding. @param mediaBox The MediaBox of the page.
2823 This will set the action that is associated with this field. @param a The new action.
2824 This will set the resources for this page. @param resources The new resources for this page.
2825 This will set the additional actions that are associated with this field. @param aa The additional actions.
2826 This will set the mediaBox for this page. @param mediaBox The new mediaBox for this page.
2827 This will set frational space to allocate. @param space The space to allocate.
2828 This will set the BleedBox for this page. @param bleedBox The new BleedBox for this page.
2829 This will set the file specification for this named page reference. @param fs The file specification to set.
2830 This will set the TrimBox for this page. @param trimBox The new TrimBox for this page.
2831 This will set the page info. @param info The new page info dictionary.
2832 This will set the ArtBox for this page. @param artBox The new ArtBox for this page.
2833 This will set the template reference. @param tRef The template reference.
2834 This will set the contents of this page. @param contents The new contents of the page.
2835 Set the metadata for this object. This can be null. @param meta The meta data for this object.
2836 Set the page actions. @param actions The actions for the page.
2837 Set the type 1 font program. @param type1Stream The type 1 stream.
2838 @param transition The new transition to set on this page.
2839 Set the true type font program. @param ttfStream The true type stream.
2840 Set a stream containing a font program that is not true type or type 1. @param stream The font program stream.
2841 Convenient method to set a transition and the display duration @param transition The new transition to set on this page. @param duration The maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page.
2842 Set a stream containing a CIDSet. @param stream The font program stream.
2843 Sets the page. @param page the page
2844 Sets the referenced annotation. @param annotation the referenced annotation
2845 This will set the whitepoint tristimulus. As this is a required field, null should not be passed into this function. @param whitepoint the whitepoint tristimulus. @throws IllegalArgumentException if null is passed as argument.
2846 Sets the referenced XObject. @param xobject the referenced XObject
2847 This will set the BlackPoint tristimulus. @param blackpoint the BlackPoint tristimulus
2848 Sets the page on which the object shall be rendered. This is optional and overrides the /PG entry in the structure element containing the object reference; shall be used if the structure element contained no such entry. @param page
2849 Sets the parent in the structure hierarchy (P). @param structureNode the parent in the structure hierarchy
2850 Sets the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @param page the page on which some or all of the content items designated by the K entry shall be rendered.
2851 This will set the external graphics state for this pattern. @param extendedGraphicsState The new extended graphics state for this pattern.
2852 Sets the attributes together with their revision numbers (A). @param attributes the attributes
2853 This will set the shading resources for this pattern. @param shadingResources The new shading resources for this pattern.
2854 Sets the ID tree. @param idTree the ID tree
2855 This will set the resources for this pattern. @param resources The new resources for this pattern.
2856 Sets the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. <p> To create an empty parent tree, call {@code new PDNumberTreeNode(PDParentTreeValue.class)}. @param parentTree the parent tree
2857 This will set the function for the color conversion. @param newFunction the new function
2858 Set the rectangle associated with this annotation. @param rectangle The annotation rectangle.
2859 This will set the font setting for this graphics state. @param fs The new font setting.
2860 This will set the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @param bs the border style dictionary to set.
2861 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
2862 This will set the border effect dictionary, describing the effect applied to the border described by the BS entry. @param be the border effect dictionary to set.
2863 This will set the file in which the destination is located. @param fs The file specification.
2864 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. @param fringe the fringe
2865 Sets the target directory. @param targetDirectory the target directory
2866 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
2867 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
2868 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
2869 This will set the file in which the destination is located. @param fs The file specification.
2870 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
2871 This will set the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @param fs The file specification.
2872 This will set the FDF document. @param fdf The new FDF dictionary.
2873 This will set a dictionary containing Windows-specific launch parameters. @param win The action to be performed.
2874 This will set the signature that is associated with this catalog. @param sig The new signature.
2875 This will set the file in which the destination is located. @param fs The file specification.
2876 This will set the file specification. @param fs The file specification.
2877 This will set the file in which the destination is located. @param fs The file specification.
2878 This will set the JavaScript entry. @param js The javascript entries.
2879 This will set the file in which the destination is located. @param fs The file specification.
2880 This will set the FDF catalog for this FDF document. @param cat The FDF catalog.
2881 Set the F action. @param action Get the F action.
2882 This will set the appearance dictionary. @param ap The appearance dictionary.
2883 This will set an action to be performed when the cursor enters the annotation's active area. @param e The action to be performed.
2884 This will set the named page references. @param ref The named page references.
2885 This will set an action to be performed when the cursor exits the annotation's active area. @param x The action to be performed.
2886 This will set the icon fit 'IF' entry. @param fit The icon fit object.
2887 This will set an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @param d The action to be performed.
2888 This will set the action that is associated with this field. @param a The new action.
2889 This will set an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @param u The action to be performed.
2890 This will set the additional actions that are associated with this field. @param aa The additional actions.
2891 This will set an action to be performed when the annotation receives the input focus. @param fo The action to be performed.
2892 This will set frational space to allocate. @param space The space to allocate.
2893 This will set an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @param bl The action to be performed.
2894 This will set the file specification for this named page reference. @param fs The file specification to set.
2895 This will set an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @param po The action to be performed.
2896 This will set the page info. @param info The new page info dictionary.
2897 This will set the template reference. @param tRef The template reference.
2898 This will set an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @param pc The action to be performed.
2899 This will set an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @param pv The action to be performed.
2900 This will set an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @param pi The action to be performed.
2901 Set the type 1 font program. @param type1Stream The type 1 stream.
2902 This will set a JavaScript action to be performed before closing a document. The name WC stands for "will close". @param wc The action to be performed.
2903 Set the true type font program. @param ttfStream The true type stream.
2904 This will set a JavaScript action to be performed before saving a document. The name WS stands for "will save". @param ws The action to be performed.
2905 Set a stream containing a font program that is not true type or type 1. @param stream The font program stream.
2906 This will set a JavaScript action to be performed after saving a document. The name DS stands for "did save". @param ds The action to be performed.
2907 Set a stream containing a CIDSet. @param stream The font program stream.
2908 This will set a JavaScript action to be performed before printing a document. The name WP stands for "will print". @param wp The action to be performed.
2909 This will set the whitepoint tristimulus. As this is a required field, null should not be passed into this function. @param whitepoint the whitepoint tristimulus. @throws IllegalArgumentException if null is passed as argument.
2910 This will set a JavaScript action to be performed after printing a document. The name DP stands for "did print". @param dp The action to be performed.
2911 This will set the BlackPoint tristimulus. @param blackpoint the BlackPoint tristimulus
2912 This will set a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @param k The action to be performed.
2913 This will set a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @param f The action to be performed.
2914 This will set a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @param v The action to be performed.
2915 This will set the external graphics state for this pattern. @param extendedGraphicsState The new extended graphics state for this pattern.
2916 This will set a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @param c The action to be performed.
2917 This will set the shading resources for this pattern. @param shadingResources The new shading resources for this pattern.
2918 This will set an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @param o The action to be performed.
2919 This will set the resources for this pattern. @param resources The new resources for this pattern.
2920 This will set an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @param c The action to be performed.
2921 This will set the function for the color conversion. @param newFunction the new function
2922 Sets the target directory. @param targetDirectory the target directory or null if the current document is the target file containing the destination.
2923 This will set the font setting for this graphics state. @param fs The new font setting.
2924 This will set a named destination in the current document that provides the page number of the file attachment annotation. @param dest a named destination or null if the entry is to be removed.
2925 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
2926 This will set the appearance associated with this annotation. @param appearance The appearance dictionary for this annotation.
2927 This will set the file in which the destination is located. @param fs The file specification.
2928 Sets the optional content group or optional content membership dictionary for the annotation. @param oc The optional content group or optional content membership dictionary.
2929 Sets the target directory. @param targetDirectory the target directory
2930 This will set the corresponding page for this annotation. This is optional but recommended. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param page is the corresponding page
2931 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
2932 Set the attached file. @param file The file that is attached.
2933 This will set the file in which the destination is located. @param fs The file specification.
2934 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.6 and higher. @param be The border effect dictionary to set.
2935 This will set the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @param fs The file specification.
2936 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
2937 This will set a dictionary containing Windows-specific launch parameters. @param win The action to be performed.
2938 Set the annotation action. Either this or the destination entry should be set, but not both. @param action The annotation action.
2939 This will set the file in which the destination is located. @param fs The file specification.
2940 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
2941 This will set the file in which the destination is located. @param fs The file specification.
2942 The new destination value. Either this or the action entry should be set, but not both. @param dest The updated destination.
2943 This will set the file in which the destination is located. @param fs The file specification.
2944 This will set the previous URI action, in case it needs to be retrieved at later date. @param pa The previous URI.
2945 Set the F action. @param action Get the F action.
2946 This will set the popup annotation used for entering/editing the text for this annotation. @param popup the popup annotation.
2947 This will set an action to be performed when the cursor enters the annotation's active area. @param e The action to be performed.
2948 This will set the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @param irt the annotation this one is "In Reply To".
2949 This will set an action to be performed when the cursor exits the annotation's active area. @param x The action to be performed.
2950 This will set the external data dictionary. @param externalData the external data dictionary
2951 This will set an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @param d The action to be performed.
2952 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
2953 This will set an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @param u The action to be performed.
2954 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
2955 This will set an action to be performed when the annotation receives the input focus. @param fo The action to be performed.
2956 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
2957 This will set an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @param bl The action to be performed.
2958 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
2959 This will set an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @param po The action to be performed.
2960 Sets the appearance characteristics dictionary. @param appearanceCharacteristics the appearance characteristics dictionary
2961 This will set an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @param pc The action to be performed.
2962 Set the annotation action. As of PDF 1.6 this is only used for Widget Annotations @param action The annotation action.
2963 This will set an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @param pv The action to be performed.
2964 Set the actions of the field. @param actions The field actions.
2965 This will set an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @param pi The action to be performed.
2966 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
2967 This will set a JavaScript action to be performed before closing a document. The name WC stands for "will close". @param wc The action to be performed.
2968 This will set a JavaScript action to be performed before saving a document. The name WS stands for "will save". @param ws The action to be performed.
2969 Set the parent field of a widget annotation. This is only required if this widget annotation is one of multiple children in a field, and not to be set otherwise. You will usually not need this, because in most cases, fields have only one widget and share a common dictionary. A usage can be found in the CreateMultiWidgetsForm example. @param field the parent field. @throws IllegalArgumentException if setParent() was called for a field that shares a dictionary with its only widget.
2970 This will set a JavaScript action to be performed after saving a document. The name DS stands for "did save". @param ds The action to be performed.
2971 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
2972 This will set a JavaScript action to be performed before printing a document. The name WP stands for "will print". @param wp The action to be performed.
2973 This will set the normal appearance when there is only one appearance to be shown. @param ap The appearance stream to show.
2974 This will set a JavaScript action to be performed after printing a document. The name DP stands for "did print". @param dp The action to be performed.
2975 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
2976 This will set a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @param k The action to be performed.
2977 This will set the rollover appearance when there is rollover appearance to be shown. @param ap The appearance stream to show.
2978 This will set a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @param f The action to be performed.
2979 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
2980 This will set a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @param v The action to be performed.
2981 This will set the down appearance when there is down appearance to be shown. @param ap The appearance stream to show.
2982 This will set a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @param c The action to be performed.
2983 Set the build data dictionary for the signature handler. This entry is optional but is highly recommended for the signatures. @param filter is the PDPropBuildFilter
2984 This will set an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @param o The action to be performed.
2985 Set the build data dictionary for the PubSec Software module. @param pubSec is the PDPropBuildPubSec
2986 This will set an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @param c The action to be performed.
2987 Set the build data dictionary for the viewing application software module. @param app is the PDPropBuildApp
2988 Sets the target directory. @param targetDirectory the target directory or null if the current document is the target file containing the destination.
2989 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @param certificate dictionary
2990 This will set a named destination in the current document that provides the page number of the file attachment annotation. @param dest a named destination or null if the entry is to be removed.
2991 PDF signature build dictionary. Provides information about the signature handler. @param propBuild the prop build
2992 This will set the appearance associated with this annotation. @param appearance The appearance dictionary for this annotation.
2993 This will set the default resources for the acroform. @param dr The new default resources.
2994 Sets the optional content group or optional content membership dictionary for the annotation. @param oc The optional content group or optional content membership dictionary.
2995 Set the XFA resource, this is only used for PDF 1.5+ forms. @param xfa The xfa resource.
2996 This will set the corresponding page for this annotation. This is optional but recommended. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param page is the corresponding page
2997 Sets the value of this field to be the given signature. @param value is the PDSignatureField @throws IOException if the new value could not be applied
2998 Set the attached file. @param file The file that is attached.
2999 Sets the default value of this field to be the given signature. @param value is the PDSignatureField
3000 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.6 and higher. @param be The border effect dictionary to set.
3001 <p>(Optional; PDF 1.) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @param sv is the seed value dictionary as PDSeedValue
3002 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
3003 Set the actions of the field. @param actions The field actions.
3004 Set the annotation action. Either this or the destination entry should be set, but not both. @param action The annotation action.
3005 Sets the field's widget annotations. @param children The list of widget annotations.
3006 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
3007 This will set the rectangle specifying the location of the viewport. @param rectangle the rectangle specifying the location.
3008 The new destination value. Either this or the action entry should be set, but not both. @param dest The updated destination.
3009 This will set the measure dictionary. @param measure the measure dictionary
3010 This will set the previous URI action, in case it needs to be retrieved at later date. @param pa The previous URI.
3011 Set the thread info, can be null. @param info The info dictionary about this thread.
3012 This will set the popup annotation used for entering/editing the text for this annotation. @param popup the popup annotation.
3013 Set the thread that this bead is part of. This is only required for the first bead in a thread. Note: This property is set for you by the PDThread.setFirstBead() method. @param thread The thread that this bead is part of.
3014 This will set the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @param irt the annotation this one is "In Reply To".
3015 Set the next bead in the thread. @param next The next bead.
3016 This will set the external data dictionary. @param externalData the external data dictionary
3017 Set the previous bead in the thread. @param previous The previous bead.
3018 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
3019 Set the page that this bead is part of. This is a required property and must be set when creating a new bead. The PDPage object also has a list of beads in the natural reading order. It is recommended that you add this object to that list as well. @param page The page that this bead is on.
3020 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
3021 Set the rectangle on the page that this bead covers. @param rect The portion of the page that this bead covers.
3022 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
3023 Set if this is a tagged PDF. @param value The new marked value.
3024 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
3025 Set if the structure elements contain user properties. @param userProps The new value for this property.
3026 Sets the appearance characteristics dictionary. @param appearanceCharacteristics the appearance characteristics dictionary
3027 Set the value of the suspects property. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @param suspect The new "Suspects" value.
3028 Set the annotation action. As of PDF 1.6 this is only used for Widget Annotations @param action The annotation action.
3029 This will specify whether to track the mouse position when the URI is resolved. @param value The flag value.
3030 Set the actions of the field. @param actions The field actions.
3031 This will set the initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed.
3032 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
3033 This will set the value indication if the denominator of the fractional value is reduced/truncated . The denominator may not be reduced/truncated if true @param fd fd
3034 Set the parent field of a widget annotation. This is only required if this widget annotation is one of multiple children in a field, and not to be set otherwise. You will usually not need this, because in most cases, fields have only one widget and share a common dictionary. A usage can be found in the CreateMultiWidgetsForm example. @param field the parent field. @throws IllegalArgumentException if setParent() was called for a field that shares a dictionary with its only widget.
3035 Tell if the underlying file is volatile and should not be cached by the reader application. Default: false @param fileIsVolatile The new value for the volatility of the file.
3036 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
3037 Set the EncryptMetaData dictionary info. @param encryptMetaData true if EncryptMetaData shall be set.
3038 This will set the normal appearance when there is only one appearance to be shown. @param ap The appearance stream to show.
3039 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
3040 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
3041 This will set the rollover appearance when there is rollover appearance to be shown. @param ap The appearance stream to show.
3042 This will tell the icon to scale. @param value The flag value.
3043 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
3044 This will set if the fields can be renamed. @param value The flag value.
3045 This will set the down appearance when there is down appearance to be shown. @param ap The appearance stream to show.
3046 Set the build data dictionary for the signature handler. This entry is optional but is highly recommended for the signatures. @param filter is the PDPropBuildFilter
3047 Set the build data dictionary for the PubSec Software module. @param pubSec is the PDPropBuildPubSec
3048 This will set the AntiAlias value. @param antiAlias the new AntiAlias value
3049 Set the build data dictionary for the viewing application software module. @param app is the PDPropBuildApp
3050 This will set the overprint control(OP). @param op The overprint control.
3051 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @param certificate dictionary
3052 This will set the overprint control(OP). @param op The overprint control.
3053 PDF signature build dictionary. Provides information about the signature handler. @param propBuild the prop build
3054 This will set the automatic stroke adjustment flag. @param sa The new automatic stroke adjustment flag.
3055 This will set the default resources for the acroform. @param dr The new default resources.
3056 This will set the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @param alpha The alpha source flag.
3057 Set the XFA resource, this is only used for PDF 1.5+ forms. @param xfa The xfa resource.
3058 This will set the text knockout flag. @param tk The text knockout flag.
3059 Sets the value of this field to be the given signature. @param value is the PDSignatureField @throws IOException if the new value could not be applied
3060 This will specify whether to open the destination document in a new window. @param value The flag value.
3061 Sets the default value of this field to be the given signature. @param value is the PDSignatureField
3062 This will specify whether to open the destination document in a new window. @param value The flag value.
3063 <p>(Optional; PDF 1.) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @param sv is the seed value dictionary as PDSeedValue
3064 Set the actions of the field. @param actions The field actions.
3065 This will specify whether to open the destination document in a new window. @param value The flag value.
3066 Sets the field's widget annotations. @param children The list of widget annotations.
3067 A flag specifying whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @param synchronous Whether to play the sound synchronously (true) or asynchronously (false).
3068 This will set the rectangle specifying the location of the viewport. @param rectangle the rectangle specifying the location.
3069 A flag specifying whether to repeat the sound indefinitely. @param repeat Whether to repeat the sound indefinitely.
3070 This will set the measure dictionary. @param measure the measure dictionary
3071 The flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). Default value: false. @param mix whether to mix this sound with any other sound already playing. (false).
3072 Set the thread info, can be null. @param info The info dictionary about this thread.
3073 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
3074 Set the thread that this bead is part of. This is only required for the first bead in a thread. Note: This property is set for you by the PDThread.setFirstBead() method. @param thread The thread that this bead is part of.
3075 This will set initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed
3076 Set the next bead in the thread. @param next The next bead.
3077 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @param preRelease is true if the signature was created with a unrelease software, otherwise false.
3078 Set the previous bead in the thread. @param previous The previous bead.
3079 If true, the reader should not display a warning about fonts not being embedded. @param noEmbedFontWarning true if there is a Legal dictionary in the catalog and the NonEmbeddedFonts attribute has a non-zero value Documentation says: (Optional; PDF 1.5) If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/Acrobat_Signature_BuildDict.pdf#page=6">Digital Signature Build Dictionary Specification</a> @see #getNonEFontNoWarn() @see COSName#NON_EFONT_NO_WARN
3080 Set the page that this bead is part of. This is a required property and must be set when creating a new bead. The PDPage object also has a list of beads in the natural reading order. It is recommended that you add this object to that list as well. @param page The page that this bead is on.
3081 If true, the application was in trusted mode when signing took place. @param trustedMode true if the application is in trusted mode.
3082 Set the rectangle on the page that this bead covers. @param rect The portion of the page that this bead covers.
3083 Set the NeedAppearances value. If this is false, PDFBox will create appearances for all field widget. @param value the value for NeedAppearances
3084 Set if this is a tagged PDF. @param value The new marked value.
3085 Set the toolbar preference. @param value Set the toolbar preference.
3086 Set if the structure elements contain user properties. @param userProps The new value for this property.
3087 Set the menubar preference. @param value Set the menubar preference.
3088 Set the value of the suspects property. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @param suspect The new "Suspects" value.
3089 Set the window UI preference. @param value Set the window UI preference.
3090 This will specify whether to track the mouse position when the URI is resolved. @param value The flag value.
3091 Set the fit window preference. @param value Set the fit window preference.
3092 This will set the initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed.
3093 Set the center window preference. @param value Set the center window preference.
3094 This will set the value indication if the denominator of the fractional value is reduced/truncated . The denominator may not be reduced/truncated if true @param fd fd
3095 Set the display doc title preference. @param value Set the display doc title preference.
3096 Tell if the underlying file is volatile and should not be cached by the reader application. Default: false @param fileIsVolatile The new value for the volatility of the file.
3097 Set the EncryptMetaData dictionary info. @param encryptMetaData true if EncryptMetaData shall be set.
3098 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
3099 Sets the page mode. @param mode The new page mode.
3100 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
3101 Sets the page layout. @param layout The new page layout.
3102 This will tell the icon to scale. @param value The flag value.
3103 Sets the PDF specification version this document conforms to. @param version the PDF version (e.g. "1.4")
3104 This will set if the fields can be renamed. @param value The flag value.
3105 This will set the trapped of the document. This will be 'True', 'False', or 'Unknown'. @param value The new trapped value for the document. @throws IllegalArgumentException if the parameter is invalid.
3106 Sets the numbering style for this page range. @param style one of the STYLE_* constants or {@code null} if no page numbering is desired.
3107 This will set the AntiAlias value. @param antiAlias the new AntiAlias value
3108 Creates a new instance with a given type. @param type the type (Type)
3109 This will set the overprint control(OP). @param op The overprint control.
3110 Sets the owner of the attributes. @param owner the owner of the attributes
3111 This will set the overprint control(OP). @param op The overprint control.
3112 Default constructor
3113 This will set the automatic stroke adjustment flag. @param sa The new automatic stroke adjustment flag.
3114 Default Constructor.
3115 This will set the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @param alpha The alpha source flag.
3116 Sets the structure type (S). @param structureType the structure type
3117 This will set the text knockout flag. @param tk The text knockout flag.
3118 Sets the class names together with their revision numbers (C). @param classNames the class names
3119 This will specify whether to open the destination document in a new window. @param value The flag value.
3120 Constructor. @param type the type
3121 This will specify whether to open the destination document in a new window. @param value The flag value.
3122 Set the style for the box. @param style The style for the box line. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
3123 Set the subfilter entry of the encryption dictionary. @param subfilter The value of the subfilter field.
3124 This will specify whether to open the destination document in a new window. @param value The flag value.
3125 The intent of the annotation. @param intent The annotation's intent.
3126 A flag specifying whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @param synchronous Whether to play the sound synchronously (true) or asynchronously (false).
3127 This will set the line ending style. @param style The new style.
3128 A flag specifying whether to repeat the sound indefinitely. @param repeat Whether to repeat the sound indefinitely.
3129 This will set the icon (and hence appearance, AP taking precedence) For this annotation. See the PDAnnotationText.NAME_XXX constants for valid values. @param icon The name of the annotation
3130 The flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). Default value: false. @param mix whether to mix this sound with any other sound already playing. (false).
3131 This will set the version of the FDF document. @param version The new version for the FDF document.
3132 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
3133 This will set the encoding. @param encoding The new encoding.
3134 This will set initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed
3135 This will set the scale option for the icon. Set the SCALE_OPTION_XXX constants. @param option The scale option.
3136 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @param preRelease is true if the signature was created with a unrelease software, otherwise false.
3137 This will set the scale type. See the SCALE_TYPE_XXX constants. @param scale The scale type.
3138 If true, the reader should not display a warning about fonts not being embedded. @param noEmbedFontWarning true if there is a Legal dictionary in the catalog and the NonEmbeddedFonts attribute has a non-zero value Documentation says: (Optional; PDF 1.5) If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/Acrobat_Signature_BuildDict.pdf#page=6">Digital Signature Build Dictionary Specification</a> @see #getNonEFontNoWarn() @see COSName#NON_EFONT_NO_WARN
3139 Creates a new Pattern dictionary.
3140 If true, the application was in trusted mode when signing took place. @param trustedMode true if the application is in trusted mode.
3141 This will set the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @param type The new Type for the PDF object.
3142 Set the NeedAppearances value. If this is false, PDFBox will create appearances for all field widget. @param value the value for NeedAppearances
3143 This will set the type of action that the actions dictionary describes. @param s The new type of action.
3144 Set the toolbar preference. @param value Set the toolbar preference.
3145 This will set the sub type (and hence appearance, AP taking precedence) For this annotation. See the SUB_TYPE_XXX constants for valid values. @param subType The subtype of the annotation
3146 Set the menubar preference. @param value Set the menubar preference.
3147 This will set the annotations appearance state name. @param as The name of the appearance stream.
3148 Set the name used to draw the attachment icon. See the ATTACHMENT_NAME_XXX constants. @param name The name of the visual icon to draw.
3149 Set the window UI preference. @param value Set the window UI preference.
3150 This will set the line ending style. @param style The new style.
3151 Set the fit window preference. @param value Set the fit window preference.
3152 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionPositioning caption positioning
3153 Set the center window preference. @param value Set the center window preference.
3154 Set the display doc title preference. @param value Set the display doc title preference.
3155 Set the highlight mode. See the HIGHLIGHT_MODE_XXX constants. @param mode The new highlight mode.
3156 This will set the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @param rt the reply type.
3157 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
3158 This will set the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @param it the intent
3159 Sets the page mode. @param mode The new page mode.
3160 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the rubber stamp.
3161 Sets the page layout. @param layout The new page layout.
3162 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the annotation
3163 Sets the PDF specification version this document conforms to. @param version the PDF version (e.g. "1.4")
3164 This will set the trapped of the document. This will be 'True', 'False', or 'Unknown'. @param value The new trapped value for the document. @throws IllegalArgumentException if the parameter is invalid.
3165 Sets the highlighting mode. <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @param highlightingMode the highlighting mode the defined values
3166 This will set the border style, see the STYLE_* constants for valid values. @param s the border style to use
3167 Sets the numbering style for this page range. @param style one of the STYLE_* constants or {@code null} if no page numbering is desired.
3168 Constructor.
3169 Creates a new instance with a given type. @param type the type (Type)
3170 This will set the subtype of the external data dictionary. @param subtype the subtype of the external data dictionary
3171 Sets the owner of the attributes. @param owner the owner of the attributes
3172 The name of the software module that was used to create the signature. @param name is the name of the software module
3173 Default constructor
3174 (Optional; PDF 1.7) A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific uses for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> Third parties can extend the use of this attribute with their own attribute values, which must conform to the guidelines specified in <a href="http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=681">PDF Spec 1.7 Appendix E (PDF Name Registry)</a> if urlType is not set the default is Browser for URL @param urlType String of the urlType
3175 Default Constructor.
3176 Constructor.
3177 Sets the structure type (S). @param structureType the structure type
3178 This will set the subtype of the measure dictionary. @param subtype the subtype of the measure dictionary
3179 Sets the class names together with their revision numbers (C). @param classNames the class names
3180 Constructor.
3181 Constructor. @param type the type
3182 This will set the name of the viewport. @param name the name of the viewport
3183 Set the style for the box. @param style The style for the box line. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
3184 creates a new transition with the given style. @param style the style to be used to create the new transition
3185 Set the subfilter entry of the encryption dictionary. @param subfilter The value of the subfilter field.
3186 Sets the dimension in which the specified transition effect shall occur. Only for {@link PDTransitionStyle#Split} and {@link PDTransitionStyle#Blinds}. @param dimension the dimension in which the specified transition effect shall occur
3187 The intent of the annotation. @param intent The annotation's intent.
3188 Sets the direction of motion for the specified transition effect. Only for {@link PDTransitionStyle#Split}, {@link PDTransitionStyle#Blinds} and {@link PDTransitionStyle#Fly}. @param motion the direction of motion for the specified transition effect
3189 This will set the line ending style. @param style The new style.
3190 This will set the icon (and hence appearance, AP taking precedence) For this annotation. See the PDAnnotationText.NAME_XXX constants for valid values. @param icon The name of the annotation
3191 Set the non full screen page mode preference. @param value Set the non full screen page mode preference.
3192 This will set the version of the FDF document. @param version The new version for the FDF document.
3193 Set the reading direction preference. @param value Set the reading direction preference.
3194 This will set the encoding. @param encoding The new encoding.
3195 Set the ViewArea preference. See BOUNDARY enumeration. @param value Set the ViewArea preference.
3196 This will set the scale option for the icon. Set the SCALE_OPTION_XXX constants. @param option The scale option.
3197 Set the ViewClip preference. See BOUNDARY enumeration. @param value Set the ViewClip preference.
3198 This will set the scale type. See the SCALE_TYPE_XXX constants. @param scale The scale type.
3199 Set the PrintArea preference. See BOUNDARY enumeration. @param value Set the PrintArea preference.
3200 Creates a new Pattern dictionary.
3201 Set the PrintClip preference. See BOUNDARY enumeration. @param value Set the PrintClip preference.
3202 This will set the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @param type The new Type for the PDF object.
3203 Set the Duplex preference. See DUPLEX enumeration. @param value Set the Duplex preference.
3204 This will set the type of action that the actions dictionary describes. @param s The new type of action.
3205 Set the PrintScaling preference. See PRINT_SCALING enumeration. @param value Set the PrintScaling preference.
3206 This will set the sub type (and hence appearance, AP taking precedence) For this annotation. See the SUB_TYPE_XXX constants for valid values. @param subType The subtype of the annotation
3207 This will set the annotations appearance state name. @param as The name of the appearance stream.
3208 Set the date object. @param key The key to the date. @param date The date to set.
3209 Set the name used to draw the attachment icon. See the ATTACHMENT_NAME_XXX constants. @param name The name of the visual icon to draw.
3210 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
3211 This will set the line ending style. @param style The new style.
3212 Sets the Language for the document. @param language The new document language.
3213 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionPositioning caption positioning
3214 This will set the title of the document. @param title The new title for the document.
3215 Set the highlight mode. See the HIGHLIGHT_MODE_XXX constants. @param mode The new highlight mode.
3216 This will set the author of the document. @param author The new author for the document.
3217 This will set the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @param rt the reply type.
3218 This will set the subject of the document. @param subject The new subject for the document.
3219 This will set the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @param it the intent
3220 This will set the keywords of the document. @param keywords The new keywords for the document.
3221 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the rubber stamp.
3222 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the annotation
3223 This will set the creator of the document. @param creator The new creator for the document.
3224 This will set the producer of the document. @param producer The new producer for the document.
3225 Sets the highlighting mode. <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @param highlightingMode the highlighting mode the defined values
3226 Sets the page label prefix for this page range. @param prefix the page label prefix for this page range, or {@code null} to unset the prefix.
3227 This will set the border style, see the STYLE_* constants for valid values. @param s the border style to use
3228 This will set the unicode file name. If you call this, then do not forget to also call {@link #setFile(java.lang.String) setFile(String)} or the attachment will not be visible on some viewers. @param file The name of the file.
3229 Constructor.
3230 This will set the file name. You should also call {@link #setFileUnicode(java.lang.String) setFileUnicode(String)} for cross-platform and cross-language compatibility. @param file The name of the file.
3231 This will set the subtype of the external data dictionary. @param subtype the subtype of the external data dictionary
3232 Set the file description. @param description The file description
3233 The name of the software module that was used to create the signature. @param name is the name of the software module
3234 Sets the element identifier (ID). @param id the element identifier
3235 (Optional; PDF 1.7) A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific uses for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> Third parties can extend the use of this attribute with their own attribute values, which must conform to the guidelines specified in <a href="http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=681">PDF Spec 1.7 Appendix E (PDF Name Registry)</a> if urlType is not set the default is Browser for URL @param urlType String of the urlType
3236 Sets the title (T). @param title the title
3237 Constructor.
3238 Sets the language (Lang). @param language the language
3239 This will set the subtype of the measure dictionary. @param subtype the subtype of the measure dictionary
3240 Sets the alternate description (Alt). @param alternateDescription the alternate description
3241 Constructor.
3242 Sets the expanded form (E). @param expandedForm the expanded form
3243 This will set the name of the viewport. @param name the name of the viewport
3244 Sets the actual text (ActualText). @param actualText the actual text
3245 creates a new transition with the given style. @param style the style to be used to create the new transition
3246 The annotation modification date. @param date The date to store in the FDF annotation.
3247 Sets the dimension in which the specified transition effect shall occur. Only for {@link PDTransitionStyle#Split} and {@link PDTransitionStyle#Blinds}. @param dimension the dimension in which the specified transition effect shall occur
3248 Set a unique name for an annotation. @param name The unique annotation name.
3249 Sets the direction of motion for the specified transition effect. Only for {@link PDTransitionStyle#Split}, {@link PDTransitionStyle#Blinds} and {@link PDTransitionStyle#Fly}. @param motion the direction of motion for the specified transition effect
3250 Set the contents, or a description, for an annotation. @param contents The annotation contents, or a description.
3251 Set the non full screen page mode preference. @param value Set the non full screen page mode preference.
3252 Set a unique title for an annotation. @param title The annotation title.
3253 Set the reading direction preference. @param value Set the reading direction preference.
3254 A short description of the annotation. @param subject The annotation subject.
3255 Set the ViewArea preference. See BOUNDARY enumeration. @param value Set the ViewArea preference.
3256 This will set the symbol that shall be associated with the caret. @param symbol the symbol
3257 Set the ViewClip preference. See BOUNDARY enumeration. @param value Set the ViewClip preference.
3258 Set the default appearance string. @param appearance The new default appearance string.
3259 Set the PrintArea preference. See BOUNDARY enumeration. @param value Set the PrintArea preference.
3260 Set the default style string. @param style The new default style string.
3261 Set the PrintClip preference. See BOUNDARY enumeration. @param value Set the PrintClip preference.
3262 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionStyle caption positioning
3263 Set the Duplex preference. See DUPLEX enumeration. @param value Set the Duplex preference.
3264 This will set the annotation state. @param state the annotation state
3265 Set the PrintScaling preference. See PRINT_SCALING enumeration. @param value Set the PrintScaling preference.
3266 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
3267 Set the date object. @param key The key to the date. @param date The date to set.
3268 This will set the status string. @param status The new status string.
3269 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
3270 This will set the target frame in the browser to open this document. @param target The new target frame.
3271 This will set the partial field name. @param partial The partial field name.
3272 Sets the Language for the document. @param language The new document language.
3273 This will set the name of the referenced page. @param name The referenced page name.
3274 This will set the title of the document. @param title The new title for the document.
3275 This will set the author of the document. @param author The new author for the document.
3276 This will set the subject of the document. @param subject The new subject for the document.
3277 This will set the keywords of the document. @param keywords The new keywords for the document.
3278 This will set the creator of the document. @param creator The new creator for the document.
3279 This will set the producer of the document. @param producer The new producer for the document.
3280 Sets the name of the optional content group. @param name the name
3281 Sets the page label prefix for this page range. @param prefix the page label prefix for this page range, or {@code null} to unset the prefix.
3282 Creates a new optional content properties dictionary.
3283 This will set the unicode file name. If you call this, then do not forget to also call {@link #setFile(java.lang.String) setFile(String)} or the attachment will not be visible on some viewers. @param file The name of the file.
3284 @param sAction The JavaScript.
3285 This will set the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @param f The file name to be launched.
3286 This will set the file name. You should also call {@link #setFileUnicode(java.lang.String) setFileUnicode(String)} for cross-platform and cross-language compatibility. @param file The name of the file.
3287 Set the file description. @param description The file description
3288 This will set the string specifying the default directory in standard DOS syntax. @param d The default directory.
3289 Sets the element identifier (ID). @param id the element identifier
3290 This will set the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @param o The operation to perform.
3291 Sets the title (T). @param title the title
3292 This will set a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @param p The parameter string.
3293 Sets the language (Lang). @param language the language
3294 This will set the uniform resource identifier to resolve, encoded in 7-bit ASCII. @param uri The uniform resource identifier.
3295 Sets the alternate description (Alt). @param alternateDescription the alternate description
3296 Sets the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @param filename a filename or null if the entry is to be deleted.
3297 Sets the expanded form (E). @param expandedForm the expanded form
3298 This will get the value of the /NM entry in the annotation dictionary. @param name the /NM value of an annotation dictionary or null if the entry is to be removed.
3299 Set the file to launch. @param file The executable/document to launch.
3300 Sets the actual text (ActualText). @param actualText the actual text
3301 Set the dir to launch from. @param dir The dir of the executable/document to launch.
3302 The annotation modification date. @param date The date to store in the FDF annotation.
3303 Set the operation to perform.. @param op The operation to perform on the file.
3304 Set a unique name for an annotation. @param name The unique annotation name.
3305 Set the parameter to pass the executable. @param param The parameter for the executable.
3306 Set the contents, or a description, for an annotation. @param contents The annotation contents, or a description.
3307 Set the "contents" of the field. @param value the value of the contents.
3308 Set a unique title for an annotation. @param title The annotation title.
3309 This will set the date and time the annotation was modified. @param m the date and time the annotation was created. Date values used in a PDF shall conform to a standard date format, which closely follows that of the international standard ASN.1 (Abstract Syntax Notation One), defined in ISO/IEC 8824. A date shall be a text string of the form (D:YYYYMMDDHHmmSSOHH'mm). Alternatively, use {@link #setModifiedDate(java.util.Calendar)}
3310 A short description of the annotation. @param subject The annotation subject.
3311 This will set the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @param nm The identifying name for the annotation.
3312 This will set the symbol that shall be associated with the caret. @param symbol the symbol
3313 Set the default appearance. @param daValue a string describing the default appearance.
3314 Set the default appearance string. @param appearance The new default appearance string.
3315 Set the default style string. @param style The new default style string.
3316 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
3317 Set the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @param t The title of the popup.
3318 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionStyle caption positioning
3319 This will set the short description of the subject of the annotation. @param subj short description of the subject.
3320 This will set the annotation state. @param state the annotation state
3321 This will set the annotation state. @param state the annotation state
3322 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
3323 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
3324 This will set the status string. @param status The new status string.
3325 This will set the normal caption. @param caption the normal caption
3326 This will set the target frame in the browser to open this document. @param target The new target frame.
3327 This will set the rollover caption. @param caption the rollover caption
3328 This will set the partial field name. @param partial The partial field name.
3329 This will set the alternate caption. @param caption the alternate caption
3330 This will set the name of the referenced page. @param name The referenced page name.
3331 The build date of the software module. This string is normally produced by the compiler. @param date is the build date of the software module
3332 (Optional) A URL, the use for which is defined by the URLType entry. @param url String of the URL
3333 Sets the URL. @param url the URL to be set as URL
3334 Sets the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @param name the name to be used
3335 Sets the name of the optional content group. @param name the name
3336 Sets the CPU host name or physical location of the signing. @param location the location to be used
3337 Creates a new optional content properties dictionary.
3338 Sets the reason for the signing, such as (I agree...). @param reason the reason to be used
3339 @param sAction The JavaScript.
3340 Sets the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @param contactInfo the contact info to be used
3341 This will set the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @param f The file name to be launched.
3342 Set the default appearance. @param daValue a string describing the default appearance
3343 This will set the string specifying the default directory in standard DOS syntax. @param d The default directory.
3344 Sets the default value of this field. @param value The name of the selected item.
3345 This will set the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @param o The operation to perform.
3346 This will set the partial name of the field. @param name The new name for the field. @throws IllegalArgumentException If the name contains a period character.
3347 This will set a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @param p The parameter string.
3348 This will set the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). The text appears as a tool tip in Adobe Reader. Because of the usage for error or status messages, it should be different for each field. @param alternateFieldName the alternate name of the field.
3349 This will set the uniform resource identifier to resolve, encoded in 7-bit ASCII. @param uri The uniform resource identifier.
3350 This will set the mapping name of the field. @param mappingName the mapping name of the field
3351 Sets the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @param filename a filename or null if the entry is to be deleted.
3352 Sets the plain text value of this field. @param value Plain text @throws IOException if the value could not be set
3353 This will get the value of the /NM entry in the annotation dictionary. @param name the /NM value of an annotation dictionary or null if the entry is to be removed.
3354 Set the plain text value of this field, and try to update the visual appearance. @param value Plain text @throws IOException if the value could not be set
3355 Set the file to launch. @param file The executable/document to launch.
3356 Set the dir to launch from. @param dir The dir of the executable/document to launch.
3357 Sets the default value of this field. @param value Plain text
3358 Set the operation to perform.. @param op The operation to perform on the file.
3359 Set the default appearance. This will set the local default appearance for the variable text field only, not affecting a default appearance in the parent hierarchy. Providing null as the value will remove the local default appearance. <p> This method can also be used to change the font of a field, by replacing the font name from this string with another font name found in the AcroForm default resources <u>before</u> calling {@link #setValue(java.lang.String) setValue(String)}, see also <a href="https://stackoverflow.com/questions/47995062/pdfbox-api-how-to-handle-cyrillic-values">this stackoverflow answer</a>. For example, "/Helv 10 Tf 0 g" can be replaced with "/F1 10 Tf 0 g". Performance may go down (see <a href="https://issues.apache.org/jira/browse/PDFBOX-4508">PDFBOX-4508)</a> if this is done for many fields and with a very large font (e.g. ArialUni); to avoid this, save and reload the file after changing all fields. @param daValue a string describing the default appearance
3360 Set the parameter to pass the executable. @param param The parameter for the executable.
3361 This will set the scale ration. @param scaleRatio the scale ratio.
3362 Set the "contents" of the field. @param value the value of the contents.
3363 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
3364 This will set the date and time the annotation was modified. @param m the date and time the annotation was created. Date values used in a PDF shall conform to a standard date format, which closely follows that of the international standard ASN.1 (Abstract Syntax Notation One), defined in ISO/IEC 8824. A date shall be a text string of the form (D:YYYYMMDDHHmmSSOHH'mm). Alternatively, use {@link #setModifiedDate(java.util.Calendar)}
3365 This will set the key for this page in the structural parent tree. @param structParents The new key for this page.
3366 This will set the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @param nm The identifying name for the annotation.
3367 Set the default appearance. @param daValue a string describing the default appearance.
3368 This will set the rotation for this page. @param rotation The new rotation for this page in degrees.
3369 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
3370 Sets the start value for page numbering in this page range. @param start a positive integer representing the start value. @throws IllegalArgumentException if {@code start} is not a positive integer
3371 Set the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @param t The title of the popup.
3372 Set the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @param bps The number of bits for each output value.
3373 This will set the short description of the subject of the annotation. @param subj short description of the subject.
3374 Sets the marked content identifier. @param mcid the marked content identifier
3375 This will set the annotation state. @param state the annotation state
3376 Sets the revision number (R). @param revisionNumber the revision number
3377 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
3378 Sets the next key in the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @param parentTreeNextkey The next key in the parent tree.
3379 This will set the normal caption. @param caption the normal caption
3380 This will set the number of bits to use for the crypt filter algorithm. @param length The new key length.
3381 This will set the rollover caption. @param caption the rollover caption
3382 This will set the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param version The new encryption version.
3383 This will set the alternate caption. @param caption the alternate caption
3384 This will set the number of bits to use for the encryption algorithm. @param length The new key length.
3385 The build date of the software module. This string is normally produced by the compiler. @param date is the build date of the software module
3386 This will set the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param revision The new encryption version.
3387 (Optional) A URL, the use for which is defined by the URLType entry. @param url String of the URL
3388 This will set the permissions bit mask. @param permissions The new permissions bit mask
3389 Sets the URL. @param url the URL to be set as URL
3390 This will set the page. @param page The page number.
3391 Sets the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @param name the name to be used
3392 This will set the form of quadding (justification) of the annotation text. @param justification The quadding of the text.
3393 Sets the CPU host name or physical location of the signing. @param location the location to be used
3394 This will set the clockwise rotation in degrees. @param rotation The number of degrees of clockwise rotation.
3395 Sets the reason for the signing, such as (I agree...). @param reason the reason to be used
3396 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
3397 Sets the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @param contactInfo the contact info to be used
3398 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
3399 Set the default appearance. @param daValue a string describing the default appearance
3400 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
3401 Sets the default value of this field. @param value The name of the selected item.
3402 This will set the field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
3403 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
3404 This will set the partial name of the field. @param name The new name for the field. @throws IllegalArgumentException If the name contains a period character.
3405 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
3406 This will set the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). The text appears as a tool tip in Adobe Reader. Because of the usage for error or status messages, it should be different for each field. @param alternateFieldName the alternate name of the field.
3407 This will set the mapping name of the field. @param mappingName the mapping name of the field
3408 Sets the plain text value of this field. @param value Plain text @throws IOException if the value could not be set
3409 This will set the font flags. @param flags The new font flags.
3410 Set the plain text value of this field, and try to update the visual appearance. @param value Plain text @throws IOException if the value could not be set
3411 Sets the default value of this field. @param value Plain text
3412 Sets the glyph widths in the font dictionary.
3413 Set the default appearance. This will set the local default appearance for the variable text field only, not affecting a default appearance in the parent hierarchy. Providing null as the value will remove the local default appearance. <p> This method can also be used to change the font of a field, by replacing the font name from this string with another font name found in the AcroForm default resources <u>before</u> calling {@link #setValue(java.lang.String) setValue(String)}, see also <a href="https://stackoverflow.com/questions/47995062/pdfbox-api-how-to-handle-cyrillic-values">this stackoverflow answer</a>. For example, "/Helv 10 Tf 0 g" can be replaced with "/F1 10 Tf 0 g". Performance may go down (see <a href="https://issues.apache.org/jira/browse/PDFBOX-4508">PDFBOX-4508)</a> if this is done for many fields and with a very large font (e.g. ArialUni); to avoid this, save and reload the file after changing all fields. @param daValue a string describing the default appearance
3414 This will set the scale ration. @param scaleRatio the scale ratio.
3415 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
3416 This will set the key for this page in the structural parent tree. @param structParents The new key for this page.
3417 This will set the rotation for this page. @param rotation The new rotation for this page in degrees.
3418 Sets the start value for page numbering in this page range. @param start a positive integer representing the start value. @throws IllegalArgumentException if {@code start} is not a positive integer
3419 Set the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @param bps The number of bits for each output value.
3420 Sets the marked content identifier. @param mcid the marked content identifier
3421 Sets the revision number (R). @param revisionNumber the revision number
3422 Sets the next key in the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @param parentTreeNextkey The next key in the parent tree.
3423 This will set the number of bits to use for the crypt filter algorithm. @param length The new key length.
3424 This will set the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param version The new encryption version.
3425 This will set the paint type. @param paintType The new paint type.
3426 This will set the number of bits to use for the encryption algorithm. @param length The new key length.
3427 This will set the pattern type. @param patternType The new pattern type.
3428 This will set the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param revision The new encryption version.
3429 This will set the permissions bit mask. @param permissions The new permissions bit mask
3430 This will set the paint type. @param paintType The new paint type.
3431 This will set the page. @param page The page number.
3432 This will set the tiling type. @param tilingType The new tiling type.
3433 This will set the form of quadding (justification) of the annotation text. @param justification The quadding of the text.
3434 This will set the shading type. @param shadingType the new shading type
3435 Set the number of bits per flag. @param bitsPerFlag the number of bits per flag
3436 This will set the clockwise rotation in degrees. @param rotation The number of degrees of clockwise rotation.
3437 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
3438 Set the number of vertices per row. @param verticesPerRow the number of vertices per row
3439 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
3440 Set the number of bits per component. @param bitsPerComponent the number of bits per component
3441 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
3442 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
3443 This will set the field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
3444 This will set the line cap style for the graphics state. @param style The new line cap style to set.
3445 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
3446 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
3447 This will set the line join style. @param style The new line join style.
3448 This will set the overprint mode(OPM). @param overprintMode The overprint mode
3449 @param flags the flags
3450 @param flags the flags
3451 Set the page number (zero-based) in the current document containing the file attachment annotation. @param pageNumber the zero based page number. If this is &lt; 0 then the entry is removed.
3452 This will set the font flags. @param flags The new font flags.
3453 This will set the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @param index the zero based index. If this is &lt; 0 then the entry is removed.
3454 Sets the glyph widths in the font dictionary.
3455 This will set the flags for this field. @param flags The new flags.
3456 This will set the key for this annotation in the structural parent tree. @param structParent The new key for this annotation.
3457 This will set the quadding/justification of the text. Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @param q The new text justification.
3458 This will set the rotation. @param rotation the rotation as a multiple of 90
3459 Set the P value. @param p the value to be set as P
3460 Sets if a timestamp is reuqired or not. @param flag true if a timestamp is required
3461 This will set the document-wide default value for the quadding/justification of variable text fields. See the QUADDING constants of {@link PDVariableText}. @param q The justification of the variable text fields.
3462 This will set the flags for this field. @param flags The new flags.
3463 This will set top index "TI" value. @param topIndex the value for the top index, null will remove the value.
3464 Sets the maximum number of characters of the text field. @param maxLen the maximum number of characters
3465 This will set the quadding/justification of the text. See QUADDING constants. @param q The new text justification.
3466 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
3467 The software module revision number, corresponding to the Date attribute. @param revision is the software module revision number
3468 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @param revision is the software module revision number
3469 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
3470 This will set the paint type. @param paintType The new paint type.
3471 This will set the pattern type. @param patternType The new pattern type.
3472 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch. This is supported by PDF 1.6 and higher. @param userUnit throws IllegalArgumentException if the parameter is not positive.
3473 This will set the paint type. @param paintType The new paint type.
3474 Set the guideline width. @param width The width in default user space units.
3475 This will set the tiling type. @param tilingType The new tiling type.
3476 Set the annotation opacity. @param opacity The new opacity value.
3477 This will set the shading type. @param shadingType the new shading type
3478 This will set the length of the leader line. @param leaderLength length of the leader line
3479 This will set the length of the leader line extensions. @param leaderExtend length of the leader line extensions
3480 Set the number of bits per flag. @param bitsPerFlag the number of bits per flag
3481 This will set the length of the leader line offset. @param leaderOffset length of the leader line offset
3482 Set the number of vertices per row. @param verticesPerRow the number of vertices per row
3483 Set the number of bits per component. @param bitsPerComponent the number of bits per component
3484 Set the weight of the font. @param fontWeight The new weight of the font.
3485 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
3486 This will set the italic angle for the font. @param angle The new italic angle for the font.
3487 This will set the line cap style for the graphics state. @param style The new line cap style to set.
3488 This will set the ascent for the font. @param ascent The new ascent for the font.
3489 This will set the line join style. @param style The new line join style.
3490 This will set the descent for the font. @param descent The new descent for the font.
3491 This will set the overprint mode(OPM). @param overprintMode The overprint mode
3492 This will set the leading for the font. @param leading The new leading for the font.
3493 @param flags the flags
3494 This will set the cap height for the font. @param capHeight The new cap height for the font.
3495 @param flags the flags
3496 This will set the x height for the font. @param xHeight The new x height for the font.
3497 Set the page number (zero-based) in the current document containing the file attachment annotation. @param pageNumber the zero based page number. If this is &lt; 0 then the entry is removed.
3498 This will set the stem V for the font. @param stemV The new stem v for the font.
3499 This will set the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @param index the zero based index. If this is &lt; 0 then the entry is removed.
3500 This will set the stem H for the font. @param stemH The new stem h for the font.
3501 This will set the flags for this field. @param flags The new flags.
3502 This will set the average width for the font. @param averageWidth The new average width for the font.
3503 This will set the key for this annotation in the structural parent tree. @param structParent The new key for this annotation.
3504 This will set the max width for the font. @param maxWidth The new max width for the font.
3505 This will set the quadding/justification of the text. Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @param q The new text justification.
3506 This will set the missing width for the font. @param missingWidth The new missing width for the font.
3507 This will set the rotation. @param rotation the rotation as a multiple of 90
3508 This will set the XStep value. @param xStep The new XStep value.
3509 Set the P value. @param p the value to be set as P
3510 This will set the YStep value. @param yStep The new YStep value.
3511 Sets if a timestamp is reuqired or not. @param flag true if a timestamp is required
3512 Gets the volume at which to play the sound, in the range −1.0 to 1.0. @param volume The volume at which to play the sound, in the range −1.0 to 1.0. @throws IllegalArgumentException if the volume parameter is outside of the range −1.0 to 1.0.
3513 This will set the document-wide default value for the quadding/justification of variable text fields. See the QUADDING constants of {@link PDVariableText}. @param q The justification of the variable text fields.
3514 This will set the length of the leader line. @param leaderLineLength length of the leader line
3515 This will set the flags for this field. @param flags The new flags.
3516 This will set the length of the leader line extensions. @param leaderLineExtensionLength length of the leader line extensions
3517 This will set top index "TI" value. @param topIndex the value for the top index, null will remove the value.
3518 This will set the length of the leader line offset. @param leaderLineOffsetLength length of the leader line offset
3519 Sets the maximum number of characters of the text field. @param maxLen the maximum number of characters
3520 This will set the constant opacity value used when rendering the annotation (excluing any popup). @param ca the constant opacity value.
3521 This will set the border width in points, 0 = no border. There is a bug in Adobe Reader DC, float values are ignored for text field widgets. As a workaround, floats that are integers (e.g. 2.0) are written as integer in the PDF. <p> In Adobe Acrobat DC, the values are shown as "0 = Invisible, 1 = Thin, 2 = Medium, 3 = Thick" for widget and link annotations. @param w float the width in points
3522 This will set the quadding/justification of the text. See QUADDING constants. @param q The new text justification.
3523 (Optional) The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @param minimumRequiredCapability is the minimum required capability of the signature field seed value dictionary parser
3524 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
3525 This will set the CYX factor. @param cyx CYX factor
3526 The software module revision number, corresponding to the Date attribute. @param revision is the software module revision number
3527 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @param revision is the software module revision number
3528 This will read a COSStream from the input stream using length attribute within dictionary. If length attribute is a indirect reference it is first resolved to get the stream length. This means we copy stream data without testing for 'endstream' or 'endobj' and thus it is no problem if these keywords occur within stream. We require 'endstream' to be found after stream data is read. @param dic dictionary that goes with this stream. @return parsed pdf stream. @throws IOException if an error occurred reading the stream, like problems with reading length attribute, stream does not end with 'endstream' after data read, stream too short etc.
3529 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
3530 Merges two objects of the same type by deep-cloning its members. <br> Base and target must be instances of the same class. @param base the base object to be cloned @param target the merge target @throws IOException if an I/O error occurs
3531 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch. This is supported by PDF 1.6 and higher. @param userUnit throws IllegalArgumentException if the parameter is not positive.
3532 Set the guideline width. @param width The width in default user space units.
3533 This will parse a PDF dictionary. @param isDirect indicates whether the dictionary to be read is a direct object @return The parsed dictionary, never null. @throws IOException If there is an error reading the stream.
3534 Set the annotation opacity. @param opacity The new opacity value.
3535 This will parse all the tokens in the stream. This will close the stream when it is finished parsing. @return All of the tokens in the stream. @throws IOException If there is an error while parsing the stream.
3536 This will set the length of the leader line. @param leaderLength length of the leader line
3537 This will set the length of the leader line extensions. @param leaderExtend length of the leader line extensions
3538 Calculate the bounding box of this glyph. This will work only if the first operator in the stream is d1. @return the bounding box of this glyph, or null if the first operator is not d1. @throws IOException If an io error occurs while parsing the stream.
3539 This will set the length of the leader line offset. @param leaderOffset length of the leader line offset
3540 Get the width from a type3 charproc stream. @return the glyph width. @throws IOException if the stream could not be read, or did not have d0 or d1 as first operator, or if their first argument was not a number.
3541 Creates an empty PDF document. You need to add at least one page for the document to be valid.
3542 Set the weight of the font. @param fontWeight The new weight of the font.
3543 This will set the italic angle for the font. @param angle The new italic angle for the font.
3544 This will set the ascent for the font. @param ascent The new ascent for the font.
3545 A file specification can either be a COSString or a COSDictionary. This will create the file specification either way. @param base The cos object that describes the fs. @return The file specification for the COSBase object. @throws IOException If there is an error creating the file spec.
3546 This will set the descent for the font. @param descent The new descent for the font.
3547 Default constructor.
3548 This will set the leading for the font. @param leading The new leading for the font.
3549 Default constructor.
3550 This will set the cap height for the font. @param capHeight The new cap height for the font.
3551 Default constructor.
3552 This will set the x height for the font. @param xHeight The new x height for the font.
3553 Default constructor.
3554 This will set the stem V for the font. @param stemV The new stem v for the font.
3555 Default constructor.
3556 Default constructor.
3557 This will set the stem H for the font. @param stemH The new stem h for the font.
3558 Default constructor.
3559 This will set the average width for the font. @param averageWidth The new average width for the font.
3560 Default constructor.
3561 This will set the max width for the font. @param maxWidth The new max width for the font.
3562 Default constructor.
3563 This will set the missing width for the font. @param missingWidth The new missing width for the font.
3564 Default constructor.
3565 This will set the XStep value. @param xStep The new XStep value.
3566 Default constructor.
3567 Default constructor.
3568 This will set the YStep value. @param yStep The new YStep value.
3569 Default constructor.
3570 Gets the volume at which to play the sound, in the range −1.0 to 1.0. @param volume The volume at which to play the sound, in the range −1.0 to 1.0. @throws IllegalArgumentException if the volume parameter is outside of the range −1.0 to 1.0.
3571 Default constructor.
3572 This will set the length of the leader line. @param leaderLineLength length of the leader line
3573 This will set the length of the leader line extensions. @param leaderLineExtensionLength length of the leader line extensions
3574 This will set the length of the leader line offset. @param leaderLineOffsetLength length of the leader line offset
3575 This will set the constant opacity value used when rendering the annotation (excluing any popup). @param ca the constant opacity value.
3576 This will set the border width in points, 0 = no border. There is a bug in Adobe Reader DC, float values are ignored for text field widgets. As a workaround, floats that are integers (e.g. 2.0) are written as integer in the PDF. <p> In Adobe Acrobat DC, the values are shown as "0 = Invisible, 1 = Thin, 2 = Medium, 3 = Thick" for widget and link annotations. @param w float the width in points
3577 Builds vertical metrics with a custom CIDToGIDMap (for embedding font subset).
3578 (Optional) The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @param minimumRequiredCapability is the minimum required capability of the signature field seed value dictionary parser
3579 This will set the CYX factor. @param cyx CYX factor
3580 Build vertical metrics with Identity CIDToGIDMap (for embedding full font).
3581 Constructor for embedding.
3582 This will read a COSStream from the input stream using length attribute within dictionary. If length attribute is a indirect reference it is first resolved to get the stream length. This means we copy stream data without testing for 'endstream' or 'endobj' and thus it is no problem if these keywords occur within stream. We require 'endstream' to be found after stream data is read. @param dic dictionary that goes with this stream. @return parsed pdf stream. @throws IOException if an error occurred reading the stream, like problems with reading length attribute, stream does not end with 'endstream' after data read, stream too short etc.
3583 This will set the decode values. @param decodeValues the new decode values
3584 This will set the decode values. @param decodeValues the new decode values
3585 Merges two objects of the same type by deep-cloning its members. <br> Base and target must be instances of the same class. @param base the base object to be cloned @param target the merge target @throws IOException if an I/O error occurs
3586 This will set the line width. @param width The line width for the object.
3587 This will parse a PDF dictionary. @param isDirect indicates whether the dictionary to be read is a direct object @return The parsed dictionary, never null. @throws IOException If there is an error reading the stream.
3588 This will set the miter limit for the graphics state. @param miterLimit The new miter limit value
3589 This will set the flatness tolerance. @param flatness The new flatness tolerance
3590 This will parse all the tokens in the stream. This will close the stream when it is finished parsing. @return All of the tokens in the stream. @throws IOException If there is an error while parsing the stream.
3591 This will set the smoothness tolerance. @param smoothness The new smoothness tolerance
3592 This will set the stroking alpha constant. @param alpha The new stroking alpha constant.
3593 Calculate the bounding box of this glyph. This will work only if the first operator in the stream is d1. @return the bounding box of this glyph, or null if the first operator is not d1. @throws IOException If an io error occurs while parsing the stream.
3594 This will set the non stroking alpha constant. @param alpha The new non stroking alpha constant.
3595 Get the width from a type3 charproc stream. @return the glyph width. @throws IOException if the stream could not be read, or did not have d0 or d1 as first operator, or if their first argument was not a number.
3596 Constructor.
3597 Creates an empty PDF document. You need to add at least one page for the document to be valid.
3598 Constructor.
3599 Constructor.
3600 Constructor.
3601 This will set the difference between the annotations "outer" rectangle defined by /Rect and boundaries of the underlying. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
3602 A file specification can either be a COSString or a COSDictionary. This will create the file specification either way. @param base The cos object that describes the fs. @return The file specification for the COSBase object. @throws IOException If there is an error creating the file spec.
3603 Default constructor.
3604 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
3605 Default constructor.
3606 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p> This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
3607 Default constructor.
3608 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
3609 Default constructor.
3610 Default constructor.
3611 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
3612 Default constructor.
3613 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
3614 Default constructor.
3615 Default constructor.
3616 Default constructor.
3617 Default constructor.
3618 Default constructor.
3619 Default constructor.
3620 Constructor. @param array An array of numbers as specified in the PDF Reference for a rectangle type.
3621 Default constructor.
3622 Default constructor.
3623 Creates a new line dash pattern from a dash array and phase. @param array the dash array @param phase the phase
3624 {@inheritDoc}
3625 Builds vertical metrics with a custom CIDToGIDMap (for embedding font subset).
3626 {@inheritDoc}
3627 Build vertical metrics with Identity CIDToGIDMap (for embedding full font).
3628 Constructor for embedding.
3629 Sets the range for this color space. @param range the new range for the a component @param n the component to set the range for
3630 This will set the decode values. @param decodeValues the new decode values
3631 This will set the decode values. @param decodeValues the new decode values
3632 This will set the line width. @param width The line width for the object.
3633 This will set the miter limit for the graphics state. @param miterLimit The new miter limit value
3634 This will set the flatness tolerance. @param flatness The new flatness tolerance
3635 Read a single patch from a data stream, a patch contains information of its coordinates and color parameters. @param input the image source data stream @param isFree whether this is a free patch @param implicitEdge implicit edge when a patch is not free, otherwise it's not used @param implicitCornerColor implicit colors when a patch is not free, otherwise it's not used @param maxSrcCoord the maximum coordinate value calculated from source data @param maxSrcColor the maximum color value calculated from source data @param rangeX range for coordinate x @param rangeY range for coordinate y @param colRange range for color @param matrix the pattern matrix concatenated with that of the parent content stream @param xform transformation for user to device space @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return a single patch @throws IOException when something went wrong
3636 This will set the smoothness tolerance. @param smoothness The new smoothness tolerance
3637 This will set the stroking alpha constant. @param alpha The new stroking alpha constant.
3638 This will set the non stroking alpha constant. @param alpha The new non stroking alpha constant.
3639 Constructor.
3640 Read a vertex from the bit input stream performs interpolations. @param input bit input stream @param maxSrcCoord max value for source coordinate (2^bits-1) @param maxSrcColor max value for source color (2^bits-1) @param rangeX dest range for X @param rangeY dest range for Y @param colRangeTab dest range array for colors @param matrix the pattern matrix concatenated with that of the parent content stream @param xform the affine transformation @return a new vertex with the flag and the interpolated values @throws IOException if something went wrong
3641 Constructor.
3642 Constructor.
3643 Gets the colour for the before edge. @return the colour for the before edge
3644 Constructor.
3645 Gets the colour for the after edge. @return the colour for the after edge
3646 This will set the difference between the annotations "outer" rectangle defined by /Rect and boundaries of the underlying. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
3647 Gets the colour for the start edge. @return the colour for the start edge
3648 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
3649 Gets the colour for the end edge. @return the colour for the end edge
3650 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p> This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
3651 Returns the blending mode stored in the COS dictionary @return the blending mode
3652 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
3653 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
3654 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
3655 Constructor. @param array An array of numbers as specified in the PDF Reference for a rectangle type.
3656 Creates a new line dash pattern from a dash array and phase. @param array the dash array @param phase the phase
3657 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
3658 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
3659 Get the destination to be displayed when the annotation is activated. Either this or the action entry should be set, but not both. @return The destination for this annotation. @throws IOException If there is an error creating the destination.
3660 {@inheritDoc}
3661 Convenience method to be used when creating a matrix from unverified data. If the parameter is a COSArray with at least six numbers, a Matrix object is created from the first six numbers and returned. If not, then the identity Matrix is returned. @param base a COS object, preferably a COSArray with six numbers. @return a Matrix object.
3662 {@inheritDoc}
3663 Nice method, gives you every object you want Arrays works properly too. Try "P/Annots/[k]/Rect" where k means the index of the Annots array. @param objPath the relative path to the object. @return the object
3664 Sets the range for this color space. @param range the new range for the a component @param n the component to set the range for
3665 Returns the destination corresponding to the parameter. @param name The destination name. @return The destination for that name, or null if there isn't any. @throws IOException if something goes wrong when creating the destination object.
3666 Gets the attribute value for a given name. @param attrName the given attribute name @return the attribute value for a given name
3667 Gets the attribute value for a given name. @param attrName the given attribute name @param defaultValue the default value @return the attribute value for a given name
3668 Read a single patch from a data stream, a patch contains information of its coordinates and color parameters. @param input the image source data stream @param isFree whether this is a free patch @param implicitEdge implicit edge when a patch is not free, otherwise it's not used @param implicitCornerColor implicit colors when a patch is not free, otherwise it's not used @param maxSrcCoord the maximum coordinate value calculated from source data @param maxSrcColor the maximum color value calculated from source data @param rangeX range for coordinate x @param rangeY range for coordinate y @param colRange range for color @param matrix the pattern matrix concatenated with that of the parent content stream @param xform transformation for user to device space @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return a single patch @throws IOException when something went wrong
3669 Is the attribute with the given name specified in this attribute object? @param name the attribute name @return <code>true</code> if the attribute is specified, <code>false</code> otherwise
3670 Gets an array of strings. @param name the attribute name @return the array of strings
3671 Sets an array of strings. @param name the attribute name @param values the array of strings
3672 Read a vertex from the bit input stream performs interpolations. @param input bit input stream @param maxSrcCoord max value for source coordinate (2^bits-1) @param maxSrcColor max value for source color (2^bits-1) @param rangeX dest range for X @param rangeY dest range for Y @param colRangeTab dest range array for colors @param matrix the pattern matrix concatenated with that of the parent content stream @param xform the affine transformation @return a new vertex with the flag and the interpolated values @throws IOException if something went wrong
3673 Gets the colour for the before edge. @return the colour for the before edge
3674 Gets a name value or array of name values. @param name the attribute name @param defaultValue the default value @return a String or array of Strings
3675 Gets the colour for the after edge. @return the colour for the after edge
3676 Sets an array of name values. @param name the attribute name @param values the array of name values
3677 Gets the colour for the start edge. @return the colour for the start edge
3678 Gets the colour for the end edge. @return the colour for the end edge
3679 Gets a number or a name value. @param name the attribute name @param defaultValue the default name @return a Float or a String
3680 Returns the blending mode stored in the COS dictionary @return the blending mode
3681 Gets a number or an array of numbers. @param name the attribute name @param defaultValue the default value @return a Float or an array of floats
3682 Sets an array of float numbers. @param name the attribute name @param values the float numbers
3683 Gets a colour. @param name the attribute name @return the colour
3684 Gets a single colour or four colours. @param name the attribute name @return the single ({@link PDGamma}) or a ({@link PDFourColours})
3685 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The COSDictionary.
3686 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
3687 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
3688 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
3689 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
3690 Get the destination to be displayed when the annotation is activated. Either this or the action entry should be set, but not both. @return The destination for this annotation. @throws IOException If there is an error creating the destination.
3691 Convenience method to be used when creating a matrix from unverified data. If the parameter is a COSArray with at least six numbers, a Matrix object is created from the first six numbers and returned. If not, then the identity Matrix is returned. @param base a COS object, preferably a COSArray with six numbers. @return a Matrix object.
3692 Returns A list of filters applied to this stream. @return A (possibly empty) list of filters applied to this stream, never null.
3693 Nice method, gives you every object you want Arrays works properly too. Try "P/Annots/[k]/Rect" where k means the index of the Annots array. @param objPath the relative path to the object. @return the object
3694 This will get the color space or null if none exists. @return the color space for the shading @throws IOException if there is an error getting the color space
3695 Returns the destination corresponding to the parameter. @param name The destination name. @return The destination for that name, or null if there isn't any. @throws IOException if something goes wrong when creating the destination object.
3696 Gets the attribute value for a given name. @param attrName the given attribute name @return the attribute value for a given name
3697 Gets the attribute value for a given name. @param attrName the given attribute name @param defaultValue the default value @return the attribute value for a given name
3698 Is the attribute with the given name specified in this attribute object? @param name the attribute name @return <code>true</code> if the attribute is specified, <code>false</code> otherwise
3699 Gets an array of strings. @param name the attribute name @return the array of strings
3700 Sets an array of strings. @param name the attribute name @param values the array of strings
3701 Gets a name value or array of name values. @param name the attribute name @param defaultValue the default value @return a String or array of Strings
3702 Tell if the dictionary is a PDF or FDF catalog. @param dictionary the dictionary to be tested @return true if the given dictionary is a root dictionary
3703 Sets an array of name values. @param name the attribute name @param values the array of name values
3704 Gets a number or a name value. @param name the attribute name @param defaultValue the default name @return a Float or a String
3705 Constructor for reading. @param root A page tree root. @param document The document which contains "root".
3706 Gets a number or an array of numbers. @param name the attribute name @param defaultValue the default value @return a Float or an array of floats
3707 Returns true if the node is a page tree node (i.e. and intermediate).
3708 Sets an array of float numbers. @param name the attribute name @param values the float numbers
3709 This will return the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @return the name of the crypt filter method.
3710 Gets a colour. @param name the attribute name @return the colour
3711 Returns the name of the filter which is used for de/encrypting streams. Default value is "Identity". @return the name of the filter
3712 Gets a single colour or four colours. @param name the attribute name @return the single ({@link PDGamma}) or a ({@link PDFourColours})
3713 Returns the name of the filter which is used for de/encrypting strings. Default value is "Identity". @return the name of the filter
3714 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The COSDictionary.
3715 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @return Unicode character(s)
3716 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
3717 Creates a new XObject instance of the appropriate type for the COS stream. @param base The stream which is wrapped by this XObject. @param resources the resources of this XObject @return A new XObject instance. @throws java.io.IOException if there is an error creating the XObject.
3718 Returns the subtype of the soft mask (Alpha, Luminosity) - S entry @return the subtype of the soft mask
3719 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
3720 Get the relationship between the current document and the target (which may be an intermediate target). @return the relationship as a name. Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). Invalid values or null are also returned.
3721 Returns the annotations appearance state, which selects the applicable appearance stream from an appearance subdictionary. @return the annotations appearance state
3722 Returns A list of filters applied to this stream. @return A (possibly empty) list of filters applied to this stream, never null.
3723 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param embedded The embedded dictionary to set the item in. @param key The key to the object, @param value The string value for the name.
3724 This is a convenience method that will convert the value to a COSInteger object. @param embeddedDictionary The embedded dictionary. @param key The key to the object, @param value The int value for the name.
3725 This will get the color space or null if none exists. @return the color space for the shading @throws IOException if there is an error getting the color space
3726 This will tell if this is an encrypted document. @return true If this document is encrypted.
3727 This will get the encryption dictionary if the document is encrypted or null if the document is not encrypted. @return The encryption dictionary.
3728 Update the Pg and Obj references to the new (merged) page. @param parentTreeEntry @param objMapping mapping between old and new references
3729 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws IOException If something went wrong.
3730 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws InvalidPasswordException If the password is incorrect. @throws IOException If something went wrong.
3731 Tell if the dictionary is a PDF or FDF catalog. @param dictionary the dictionary to be tested @return true if the given dictionary is a root dictionary
3732 This will get the document info dictionary. If it doesn't exist, an empty document info dictionary is created in the document trailer. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#getMetadata()}. @return The documents /Info dictionary, never null.
3733 Constructor for reading. @param root A page tree root. @param document The document which contains "root".
3734 This will get the document CATALOG. This is guaranteed to not return null. @return The documents /Root dictionary
3735 Get the documents AcroForm. This will return null if no AcroForm is part of the document. Dependent on setting <code>acroFormFixup</code> some fixing/changes will be done to the AcroForm. If you need to ensure that there are no fixes applied call <code>getAcroForm</code> with <code>null</code>. Using <code>getAcroForm(PDDocumentFixup acroFormFixup)</code> might change the original content and subsequent calls with <code>getAcroForm(null)</code> will return the changed content. @param acroFormFixup the fix up action or null @return The document's AcroForm.
3736 Returns true if the node is a page tree node (i.e. and intermediate).
3737 Get the viewer preferences associated with this document or null if they do not exist. @return The document's viewer preferences.
3738 This will return the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @return the name of the crypt filter method.
3739 @return The Additional Actions for this Document
3740 Returns the name of the filter which is used for de/encrypting streams. Default value is "Identity". @return the name of the filter
3741 @return The names dictionary for this document or null if none exist.
3742 @return The named destinations dictionary for this document or null if none exists.
3743 Returns the name of the filter which is used for de/encrypting strings. Default value is "Identity". @return the name of the filter
3744 Get info about doc's usage of tagged features. This will return null if there is no information. @return The new mark info.
3745 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @return Unicode character(s)
3746 Returns the document-level URI. @return the document level URI if present, otherwise null
3747 Get the document's structure tree root, or null if none exists. @return the structure tree root if present, otherwise null
3748 Creates a new XObject instance of the appropriate type for the COS stream. @param base The stream which is wrapped by this XObject. @param resources the resources of this XObject @return A new XObject instance. @throws java.io.IOException if there is an error creating the XObject.
3749 Get the optional content properties dictionary associated with this document. @return the optional properties dictionary or null if it is not present
3750 Returns the subtype of the soft mask (Alpha, Luminosity) - S entry @return the subtype of the soft mask
3751 Constructor. @param cat The document catalog that this dictionary is part of.
3752 Get the relationship between the current document and the target (which may be an intermediate target). @return the relationship as a name. Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). Invalid values or null are also returned.
3753 Get the destination named tree node. The values in this name tree will be PDPageDestination objects. @return The destination name tree node.
3754 Returns the annotations appearance state, which selects the applicable appearance stream from an appearance subdictionary. @return the annotations appearance state
3755 Get the embedded files named tree node. The values in this name tree will be PDComplexFileSpecification objects. @return The embedded files name tree node.
3756 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param embedded The embedded dictionary to set the item in. @param key The key to the object, @param value The string value for the name.
3757 Get the document level JavaScript name tree. When the document is opened, all the JavaScript actions in it shall be executed, defining JavaScript functions for use by other scripts in the document. @return The document level JavaScript name tree.
3758 This is a convenience method that will convert the value to a COSInteger object. @param embeddedDictionary The embedded dictionary. @param key The key to the object, @param value The int value for the name.
3759 This will tell if this is an encrypted document. @return true If this document is encrypted.
3760 Get the page actions. @return The Actions for this Page
3761 This will get the encryption dictionary if the document is encrypted or null if the document is not encrypted. @return The encryption dictionary.
3762 @return The page transition associated with this page or null if no transition is defined
3763 Returns the resource with the given name and kind as an indirect object, or null.
3764 Update the Pg and Obj references to the new (merged) page. @param parentTreeEntry @param objMapping mapping between old and new references
3765 Returns the resource with the given name and kind, or null.
3766 Returns the resource names of the given kind.
3767 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws IOException If something went wrong.
3768 Returns a unique key for a new resource.
3769 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws InvalidPasswordException If the password is incorrect. @throws IOException If something went wrong.
3770 Sets the value of a given named resource.
3771 This will get the document info dictionary. If it doesn't exist, an empty document info dictionary is created in the document trailer. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#getMetadata()}. @return The documents /Info dictionary, never null.
3772 This will get the document CATALOG. This is guaranteed to not return null. @return The documents /Root dictionary
3773 Gets the page. @return the page
3774 Get the page on which the object shall be rendered. @return the referenced page or null.
3775 Get the documents AcroForm. This will return null if no AcroForm is part of the document. Dependent on setting <code>acroFormFixup</code> some fixing/changes will be done to the AcroForm. If you need to ensure that there are no fixes applied call <code>getAcroForm</code> with <code>null</code>. Using <code>getAcroForm(PDDocumentFixup acroFormFixup)</code> might change the original content and subsequent calls with <code>getAcroForm(null)</code> will return the changed content. @param acroFormFixup the fix up action or null @return The document's AcroForm.
3776 Returns the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @return the page on which some or all of the content items designated by the K entry shall be rendered
3777 Get the viewer preferences associated with this document or null if they do not exist. @return The document's viewer preferences.
3778 Returns the ID tree. @return the ID tree
3779 @return The Additional Actions for this Document
3780 Returns the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. @return the parent tree.
3781 @return The names dictionary for this document or null if none exist.
3782 @return The named destinations dictionary for this document or null if none exists.
3783 Sets the ClassMap. @return the ClassMap, never null. The elements are either {@link PDAttributeObject} or lists of it.
3784 Get info about doc's usage of tagged features. This will return null if there is no information. @return The new mark info.
3785 Returns the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @return the crypt filter with the given name if available
3786 Returns the document-level URI. @return the document level URI if present, otherwise null
3787 Sets the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @param cryptFilterDictionary the crypt filter to set
3788 Get the document's structure tree root, or null if none exists. @return the structure tree root if present, otherwise null
3789 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @return the border style dictionary.
3790 Get the optional content properties dictionary associated with this document. @return the optional properties dictionary or null if it is not present
3791 This will retrieve the border style dictionary, describing the effect applied to the border described by the BS entry. @return the border effect dictionary.
3792 Constructor. @param cat The document catalog that this dictionary is part of.
3793 This will get the signature or null if there is none. @return The signature.
3794 Get the destination named tree node. The values in this name tree will be PDPageDestination objects. @return The destination name tree node.
3795 This will get the java script entry. @return The java script entry describing javascript commands.
3796 Get the embedded files named tree node. The values in this name tree will be PDComplexFileSpecification objects. @return The embedded files name tree node.
3797 This will get the appearance dictionary that specifies the appearance of a pushbutton field. @return The AP entry of this dictionary.
3798 Get the document level JavaScript name tree. When the document is opened, all the JavaScript actions in it shall be executed, defining JavaScript functions for use by other scripts in the document. @return The document level JavaScript name tree.
3799 This will get named page references. @return The named page references or <code>null</code>.
3800 This will get the icon fit that is associated with this field. @return The 'IF' entry.
3801 This will get a list of additional actions that will get executed based on events. @return The 'AA' entry in this FDF field dictionary or null.
3802 Get the page actions. @return The Actions for this Page
3803 This will get the FDF page info object. @return The Page info.
3804 @return The page transition associated with this page or null if no transition is defined
3805 This is the template reference. @return The template reference.
3806 Returns the resource with the given name and kind as an indirect object, or null.
3807 Returns the CIDSystemInfo, or null if it is missing (which isn't allowed but could happen). @return the CIDSystemInfo, or null
3808 Returns the resource with the given name and kind, or null.
3809 Returns the Panose entry of the Style dictionary, if any. @return A Panose wrapper object.
3810 Returns the optional resources of the type3 stream. @return the resources bound to be used when parsing the type3 stream
3811 Returns the resource names of the given kind.
3812 Returns the dictionary containing all streams to be used to render the glyphs. @return the dictionary containing all glyph streams.
3813 Returns a unique key for a new resource.
3814 Returns a map of colorants and their associated Separation color space. @param resources resources, can be null. @return map of colorants to color spaces, never null. @throws IOException If there is an error reading a color space
3815 Sets the value of a given named resource.
3816 Returns the DeviceN Process Dictionary, or null if it is missing. @return the DeviceN Process Dictionary, or null if it is missing.
3817 @param destination to be rendered @return state or null if undefined
3818 Gets the page. @return the page
3819 Get the page on which the object shall be rendered. @return the referenced page or null.
3820 Returns the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @return the page on which some or all of the content items designated by the K entry shall be rendered
3821 This will get the external graphics state for this pattern. @return The extended graphics state for this pattern.
3822 Returns the ID tree. @return the ID tree
3823 This will get the resources for this pattern. This will return null if no resources are available at this level. @return The resources for this pattern.
3824 Returns the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. @return the parent tree.
3825 Get the target directory. @return the target directory or null if there is none.
3826 Sets the ClassMap. @return the ClassMap, never null. The elements are either {@link PDAttributeObject} or lists of it.
3827 This will get a dictionary containing Windows-specific launch parameters. @return The Win entry of of the specific launch action dictionary.
3828 Get the target directory. If this entry is absent, the current document is the target file containing the destination. @return the target directory or null if the current document is the target file containing the destination.
3829 Returns the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @return the crypt filter with the given name if available
3830 This will get the appearance dictionary associated with this annotation. This may return null. @return This annotations appearance.
3831 Sets the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @param cryptFilterDictionary the crypt filter to set
3832 This will retrieve the corresponding page of this annotation. See also <a href="https://stackoverflow.com/a/36894982/535646">this answer</a> about what to do if the page isn't available. @return The corresponding page or null if not available.
3833 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @return the border style dictionary.
3834 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
3835 This will retrieve the border style dictionary, describing the effect applied to the border described by the BS entry. @return the border effect dictionary.
3836 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
3837 This will get the signature or null if there is none. @return The signature.
3838 This will set the previous URI action, in case it's needed. @return The previous URI.
3839 This will get the java script entry. @return The java script entry describing javascript commands.
3840 This will return the external data dictionary. @return the external data dictionary
3841 This will get the appearance dictionary that specifies the appearance of a pushbutton field. @return The AP entry of this dictionary.
3842 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
3843 This will get named page references. @return The named page references or <code>null</code>.
3844 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
3845 This will get the icon fit that is associated with this field. @return The 'IF' entry.
3846 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
3847 This will get a list of additional actions that will get executed based on events. @return The 'AA' entry in this FDF field dictionary or null.
3848 Returns the appearance characteristics dictionary. @return the appearance characteristics dictionary
3849 This will get the FDF page info object. @return The Page info.
3850 Get the additional actions for this field. This will return null if there are no additional actions for this field. As of PDF 1.6 this is only used for Widget Annotations. @return The actions of the field.
3851 This is the template reference. @return The template reference.
3852 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
3853 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
3854 Returns the CIDSystemInfo, or null if it is missing (which isn't allowed but could happen). @return the CIDSystemInfo, or null
3855 A build data dictionary for the signature handler that was used to create the parent signature. @return the Filter as PDPropBuildFilter object
3856 Returns the Panose entry of the Style dictionary, if any. @return A Panose wrapper object.
3857 A build data dictionary for the PubSec software module that was used to create the parent signature. @return the PubSec as PDPropBuildPubSec object
3858 Returns the optional resources of the type3 stream. @return the resources bound to be used when parsing the type3 stream
3859 A build data dictionary for the viewing application software module that was used to create the parent signature. @return the App as PDPropBuildApp object
3860 Returns the dictionary containing all streams to be used to render the glyphs. @return the dictionary containing all glyph streams.
3861 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @return the mdp dictionary as PDSeedValueMDP
3862 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @return dictionary
3863 Returns a map of colorants and their associated Separation color space. @param resources resources, can be null. @return map of colorants to color spaces, never null. @throws IOException If there is an error reading a color space
3864 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @return the timestamp dictionary as PDSeedValueTimeStamp
3865 Returns the DeviceN Process Dictionary, or null if it is missing. @return the DeviceN Process Dictionary, or null if it is missing.
3866 PDF signature build dictionary. Provides information about the signature handler. @return the pdf signature build dictionary.
3867 @param destination to be rendered @return state or null if undefined
3868 This will get the default resources for the AcroForm. @return The default resources or null if there is none.
3869 Get the additional actions for this field. This will return null if there are no additional actions for this field. @return The actions of the field.
3870 Returns the signature contained in this field. @return A signature dictionary.
3871 This will get the external graphics state for this pattern. @return The extended graphics state for this pattern.
3872 Returns the default value, if any. @return A signature dictionary.
3873 This will get the resources for this pattern. This will return null if no resources are available at this level. @return The resources for this pattern.
3874 Get the target directory. @return the target directory or null if there is none.
3875 <p>(Optional; PDF 1.5) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @return the seed value dictionary as PDSeedValue
3876 This will get a dictionary containing Windows-specific launch parameters. @return The Win entry of of the specific launch action dictionary.
3877 This will retrieve the measure dictionary. @return the measure dictionary
3878 Get the target directory. If this entry is absent, the current document is the target file containing the destination. @return the target directory or null if the current document is the target file containing the destination.
3879 Get info about the thread, or null if there is nothing. @return The thread information.
3880 This will get the appearance dictionary associated with this annotation. This may return null. @return This annotations appearance.
3881 Get the first bead in the thread, or null if it has not been set yet. This is a required field for this object. @return The first bead in the thread.
3882 This will get the thread that this bead is part of. This is only required for the first bead in a thread, so other beads 'may' return null. @return The thread that this bead is part of.
3883 This will retrieve the corresponding page of this annotation. See also <a href="https://stackoverflow.com/a/36894982/535646">this answer</a> about what to do if the page isn't available. @return The corresponding page or null if not available.
3884 This will get the next bead. If this bead is the last bead in the list then this will return the first bead. @return The next bead in the list or the first bead if this is the last bead.
3885 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
3886 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
3887 This will get the previous bead. If this bead is the first bead in the list then this will return the last bead. @return The previous bead in the list or the last bead if this is the first bead.
3888 Get the page that this bead is part of. @return The page that this bead is part of.
3889 This will set the previous URI action, in case it's needed. @return The previous URI.
3890 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
3891 This will return the external data dictionary. @return the external data dictionary
3892 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
3893 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
3894 This will get the incremental updates since the PDF was last opened. @return The differences entry of the FDF dictionary.
3895 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
3896 A stream containing a Type 1 font program. @return A stream containing a Type 1 font program.
3897 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
3898 A stream containing a true type font program. @return A stream containing a true type font program.
3899 Returns the appearance characteristics dictionary. @return the appearance characteristics dictionary
3900 Get the additional actions for this field. This will return null if there are no additional actions for this field. As of PDF 1.6 this is only used for Widget Annotations. @return The actions of the field.
3901 A stream containing a font program that is not true type or type 1. @return A stream containing a font program.
3902 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
3903 Get the CIDSet stream. @return A stream containing a CIDSet.
3904 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
3905 A build data dictionary for the signature handler that was used to create the parent signature. @return the Filter as PDPropBuildFilter object
3906 Gets the sound object. @return The sound object defining the sound that shall be played.
3907 A build data dictionary for the PubSec software module that was used to create the parent signature. @return the PubSec as PDPropBuildPubSec object
3908 This will retrieve the normal icon. @return the normal icon.
3909 A build data dictionary for the viewing application software module that was used to create the parent signature. @return the App as PDPropBuildApp object
3910 This will retrieve the rollover icon. @return the rollover icon
3911 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @return the mdp dictionary as PDSeedValueMDP
3912 This will retrieve the alternate icon. @return the alternate icon.
3913 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @return dictionary
3914 Returns the entry as an appearance subdictionary. @return the entry as an appearance subdictionary @throws IllegalStateException if this entry is not an appearance subdictionary
3915 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @return the timestamp dictionary as PDSeedValueTimeStamp
3916 This will get the document ID. @return The document id.
3917 PDF signature build dictionary. Provides information about the signature handler. @return the pdf signature build dictionary.
3918 This will get the default resources for the AcroForm. @return The default resources or null if there is none.
3919 Get the additional actions for this field. This will return null if there are no additional actions for this field. @return The actions of the field.
3920 Returns the signature contained in this field. @return A signature dictionary.
3921 Returns the default value, if any. @return A signature dictionary.
3922 This will write the trailer to the PDF document. @param doc The document to create the trailer for. @throws IOException If there is an IOError while writing the document.
3923 <p>(Optional; PDF 1.5) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @return the seed value dictionary as PDSeedValue
3924 This will retrieve the measure dictionary. @return the measure dictionary
3925 Returns the document's article threads. @return a list of all threads of the document
3926 Get info about the thread, or null if there is nothing. @return The thread information.
3927 Get the list of OutputIntents defined in the document. @return The list of PDOutputIntent, never null.
3928 Get the first bead in the thread, or null if it has not been set yet. This is a required field for this object. @return The first bead in the thread.
3929 Add an OutputIntent to the list. If there is not OutputIntent, the list is created and the first element added. @param outputIntent the OutputIntent to add.
3930 This will get the thread that this bead is part of. This is only required for the first bead in a thread, so other beads 'may' return null. @return The thread that this bead is part of.
3931 This will get a list of PDThreadBead objects, which are article threads in the document. This will return an empty list if there are no thread beads. @return A list of article threads on this page, never null. The returned list is backed by the beads COSArray, so any adding or deleting in this list will change the document too.
3932 This will get the next bead. If this bead is the last bead in the list then this will return the first bead. @return The next bead in the list or the first bead if this is the last bead.
3933 Get the viewports. @return a list of viewports or null if there is no /VP entry.
3934 This will get the previous bead. If this bead is the first bead in the list then this will return the last bead. @return The previous bead in the list or the last bead if this is the first bead.
3935 Helper to get kids from malformed PDFs. @param node page tree node @return list of kids
3936 Get the page that this bead is part of. @return The page that this bead is part of.
3937 Return the children of this node. This list will contain PDNameTreeNode objects. @return The list of children or null if there are no children.
3938 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
3939 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
3940 This will return a map of names on this level. The key will be a string, and the value will depend on where this class is being used. @return ordered map of COS objects or <code>null</code> if the dictionary contains no 'Names' entry on this level. @throws IOException If there is an error while creating the sub types. @see #getKids()
3941 This will get the incremental updates since the PDF was last opened. @return The differences entry of the FDF dictionary.
3942 Get the highest value for a key in the name map. @return The highest value for a key in the map.
3943 A stream containing a Type 1 font program. @return A stream containing a Type 1 font program.
3944 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
3945 A stream containing a true type font program. @return A stream containing a true type font program.
3946 Get the lowest value for a key in the name map. @return The lowest value for a key in the map.
3947 A stream containing a font program that is not true type or type 1. @return A stream containing a font program.
3948 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
3949 Get the CIDSet stream. @return A stream containing a CIDSet.
3950 Return the children of this node. This list will contain PDNumberTreeNode objects. @return The list of children or null if there are no children.
3951 This will return a map of numbers on this level. The key will be a java.lang.Integer, the value will depend on where this class is being used. @return A map of COS objects. @throws IOException If there is a problem creating the values.
3952 Gets the sound object. @return The sound object defining the sound that shall be played.
3953 This will retrieve the normal icon. @return the normal icon.
3954 Get the highest value for a key in the number map. @return The highest value for a key in the map or null if missing.
3955 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
3956 This will retrieve the rollover icon. @return the rollover icon
3957 This will retrieve the alternate icon. @return the alternate icon.
3958 Get the lowest value for a key in the number map. @return The lowest value for a key in the map or null if missing.
3959 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
3960 Returns the entry as an appearance subdictionary. @return the entry as an appearance subdictionary @throws IllegalStateException if this entry is not an appearance subdictionary
3961 This will get the document ID. @return The document id.
3962 Returns all ranges for the output values as COSArray . Required for type 0 and type 4 functions @return the ranges array.
3963 Returns all domains for the input values as COSArray. Required for all function types. @return the domains array.
3964 The "Size" entry, which is the number of samples in each input dimension of the sample table. @return A List of java.lang.Integer objects.
3965 Returns all decode values as COSArray. @return the decode array.
3966 Returns all functions values as COSArray. @return the functions array.
3967 This will write the trailer to the PDF document. @param doc The document to create the trailer for. @throws IOException If there is an IOError while writing the document.
3968 Returns all bounds values as COSArray. @return the bounds array.
3969 Returns the document's article threads. @return a list of all threads of the document
3970 Returns all encode values as COSArray. @return the encode array.
3971 Returns the user properties. @return the user properties
3972 Get the list of OutputIntents defined in the document. @return The list of PDOutputIntent, never null.
3973 Adds a user property. @param userProperty the user property
3974 Add an OutputIntent to the list. If there is not OutputIntent, the list is created and the first element added. @param outputIntent the OutputIntent to add.
3975 Removes a user property. @param userProperty the user property
3976 This will get a list of PDThreadBead objects, which are article threads in the document. This will return an empty list if there are no thread beads. @return A list of article threads on this page, never null. The returned list is backed by the beads COSArray, so any adding or deleting in this list will change the document too.
3977 Get the RGB color to be used for the guidelines. This is guaranteed to not return null. The default color is [0,0,0]. @return The guideline color.
3978 Get the viewports. @return a list of viewports or null if there is no /VP entry.
3979 Is the artifact attached to the given edge? @param edge the edge @return <code>true</code> if the artifact is attached to the given edge, <code>false</code> otherwise
3980 Helper to get kids from malformed PDFs. @param node page tree node @return list of kids
3981 Get the annotation color. @return The annotation color, or null if there is none.
3982 Return the children of this node. This list will contain PDNameTreeNode objects. @return The list of children or null if there are no children.
3983 This will retrieve the interior color of the drawn area. @return object representing the color.
3984 This will return a map of names on this level. The key will be a string, and the value will depend on where this class is being used. @return ordered map of COS objects or <code>null</code> if the dictionary contains no 'Names' entry on this level. @throws IOException If there is an error while creating the sub types. @see #getKids()
3985 This will get the coordinates of the callout line. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
3986 Get the highest value for a key in the name map. @return The highest value for a key in the map.
3987 Get the paths making up the freehand "scribble". @see #setInkList(List) @return the List of arrays representing the paths.
3988 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
3989 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
3990 Get the lowest value for a key in the name map. @return The lowest value for a key in the map.
3991 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
3992 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
3993 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
3994 Return the children of this node. This list will contain PDNumberTreeNode objects. @return The list of children or null if there are no children.
3995 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
3996 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
3997 This will return a map of numbers on this level. The key will be a java.lang.Integer, the value will depend on where this class is being used. @return A map of COS objects. @throws IOException If there is a problem creating the values.
3998 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
3999 Get the highest value for a key in the number map. @return The highest value for a key in the map or null if missing.
4000 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
4001 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
4002 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
4003 Get the lowest value for a key in the number map. @return The lowest value for a key in the map or null if missing.
4004 This will set the vertical offset of the caption. @param offset vertical offset of the caption
4005 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
4006 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
4007 Returns all ranges for the output values as COSArray . Required for type 0 and type 4 functions @return the ranges array.
4008 This will get the coordinates of the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
4009 Returns all domains for the input values as COSArray. Required for all function types. @return the domains array.
4010 This will get interior color of the drawn area. @return object representing the color.
4011 The "Size" entry, which is the number of samples in each input dimension of the sample table. @return A List of java.lang.Integer objects.
4012 This will get the coordinates of the the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
4013 Returns all decode values as COSArray. @return the decode array.
4014 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
4015 Returns all functions values as COSArray. @return the functions array.
4016 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
4017 Returns all bounds values as COSArray. @return the bounds array.
4018 Returns all encode values as COSArray. @return the encode array.
4019 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
4020 Returns the user properties. @return the user properties
4021 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
4022 Adds a user property. @param userProperty the user property
4023 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
4024 Removes a user property. @param userProperty the user property
4025 This will retrieve the interior color of the drawn area. @return object representing the color.
4026 Get the RGB color to be used for the guidelines. This is guaranteed to not return null. The default color is [0,0,0]. @return The guideline color.
4027 Get the coordinates of individual words or group of words. @see #setCoords(float[]) @return the array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
4028 Is the artifact attached to the given edge? @param edge the edge @return <code>true</code> if the artifact is attached to the given edge, <code>false</code> otherwise
4029 This is the FDF id. @return The FDF ID.
4030 Get the annotation color. @return The annotation color, or null if there is none.
4031 This will get the list of FDF Fields. This will return a list of FDFField objects. @return A list of FDF fields.
4032 This will retrieve the interior color of the drawn area. @return object representing the color.
4033 This will get the list of FDF Pages. This will return a list of FDFPage objects. @return A list of FDF pages.
4034 This will get the coordinates of the callout line. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
4035 This will get the list of kids. This will return a list of FDFField objects. This will return null if the underlying list is null. @return The list of kids.
4036 Get the paths making up the freehand "scribble". @see #setInkList(List) @return the List of arrays representing the paths.
4037 This will return a list of options for a choice field. The values in the list will be 1 of 2 types:<ul> <li><code>String</code> </li> <li>{@link FDFOptionElement}</li> </ul> @return A list of all options.
4038 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
4039 This will get a list of FDFTemplage objects that describe the named pages that serve as templates. @return A list of templates.
4040 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
4041 This will get a list of fields that are part of this template. @return A list of fields.
4042 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
4043 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
4044 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
4045 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
4046 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
4047 The widths of the characters. This will be null for the standard 14 fonts. @return The widths of the characters.
4048 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
4049 This will set the vertical offset of the caption. @param offset vertical offset of the caption
4050 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
4051 This will return the whitepoint tristimulus. As this is a required field this will never return null. A default of 1,1,1 will be returned if the pdf does not have any values yet. @return the whitepoint tristimulus
4052 This will get the coordinates of the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
4053 This will return the BlackPoint tristimulus. This is an optional field but has defaults so this will never return null. A default of 0,0,0 will be returned if the pdf does not have any values yet. @return the blackpoint tristimulus
4054 This will get interior color of the drawn area. @return object representing the color.
4055 Returns the gamma value. If none is present then the default of 1,1,1 will be returned. @return the gamma value
4056 This will get the coordinates of the the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
4057 Returns the linear interpretation matrix, which is an array of nine numbers. If the underlying dictionary contains null then the identity matrix will be returned. @return the linear interpretation matrix
4058 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
4059 Returns the names of the color components. @return the names of the color components
4060 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
4061 This will get the valid range for the "a" component. If none is found then the default will be returned, which is -100..100. @return the "a" range.
4062 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
4063 This will get the valid range for the "b" component. If none is found then the default will be returned, which is -100..100. @return the "b" range.
4064 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
4065 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
4066 This will retrieve the interior color of the drawn area. @return object representing the color.
4067 Get the coordinates of individual words or group of words. @see #setCoords(float[]) @return the array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
4068 This will return the background. @return the background
4069 This is the FDF id. @return The FDF ID.
4070 This will get the optional Domain values of a function based shading. @return the domain values
4071 This will get the list of FDF Fields. This will return a list of FDFField objects. @return A list of FDF fields.
4072 This will get the optional Extend values for this shading. @return the extend values
4073 This will get the list of FDF Pages. This will return a list of FDFPage objects. @return A list of FDF pages.
4074 This will get the optional Domain values for this shading. @return the domain values
4075 This will get the list of kids. This will return a list of FDFField objects. This will return null if the underlying list is null. @return The list of kids.
4076 This will get the Coords values for this shading. @return the coordinate values
4077 This will return a list of options for a choice field. The values in the list will be 1 of 2 types:<ul> <li><code>String</code> </li> <li>{@link FDFOptionElement}</li> </ul> @return A list of all options.
4078 Returns all decode values as COSArray. @return the decode array
4079 This will get a list of FDFTemplage objects that describe the named pages that serve as templates. @return A list of templates.
4080 This will get the font setting of the graphics state. @return The font setting.
4081 This will get a list of fields that are part of this template. @return A list of fields.
4082 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
4083 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
4084 This will retrieve the border array. If none is available then it will create and return a default array, which is [0 0 1]. The array consists of at least three numbers defining the horizontal corner radius, vertical corner radius, and border width. The array may have a fourth element, an optional dash array defining a pattern of dashes and gaps that shall be used in drawing the border. If the array has less than three elements, the original array will be copied and missing elements with value 0 will be added. @return the border array, never null.
4085 The widths of the characters. This will be null for the standard 14 fonts. @return The widths of the characters.
4086 This will get the margin between the annotations "outer" rectangle defined by /Rect and the boundaries of the underlying caret. @return the differences. If the entry hasn't been set am empty array is returned.
4087 This will get the margin between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
4088 This will get the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
4089 This will return the whitepoint tristimulus. As this is a required field this will never return null. A default of 1,1,1 will be returned if the pdf does not have any values yet. @return the whitepoint tristimulus
4090 Get one or more disjoint paths that make this annotation. @return An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates.
4091 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
4092 This will return the BlackPoint tristimulus. This is an optional field but has defaults so this will never return null. A default of 0,0,0 will be returned if the pdf does not have any values yet. @return the blackpoint tristimulus
4093 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
4094 Returns the gamma value. If none is present then the default of 1,1,1 will be returned. @return the gamma value
4095 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
4096 Returns the linear interpretation matrix, which is an array of nine numbers. If the underlying dictionary contains null then the identity matrix will be returned. @return the linear interpretation matrix
4097 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
4098 Returns the names of the color components. @return the names of the color components
4099 This will get the valid range for the "a" component. If none is found then the default will be returned, which is -100..100. @return the "a" range.
4100 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
4101 This will get the valid range for the "b" component. If none is found then the default will be returned, which is -100..100. @return the "b" range.
4102 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
4103 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
4104 This will set the vertical offset of the caption. @param offset vertical offset of the caption
4105 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
4106 This will return the background. @return the background
4107 This will retrieve the set of quadpoints which encompass the areas of this annotation which will activate. @return An array of floats representing the quad points.
4108 This will get the optional Domain values of a function based shading. @return the domain values
4109 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
4110 This will get the optional Extend values for this shading. @return the extend values
4111 PDF 2.0: This will retrieve the arrays that shall represent the alternating horizontal and vertical coordinates for path building. @return An array of float arrays, each supplying the operands for a path building operator (m, l or c). The first array should have 2 elements, the others should have 2 or 6 elements.
4112 This will get the optional Domain values for this shading. @return the domain values
4113 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
4114 This will get the Coords values for this shading. @return the coordinate values
4115 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
4116 Returns all decode values as COSArray. @return the decode array
4117 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
4118 This will get the font setting of the graphics state. @return The font setting.
4119 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
4120 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
4121 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
4122 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
4123 This will get the differences between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
4124 This will retrieve the border array. If none is available then it will create and return a default array, which is [0 0 1]. The array consists of at least three numbers defining the horizontal corner radius, vertical corner radius, and border width. The array may have a fourth element, an optional dash array defining a pattern of dashes and gaps that shall be used in drawing the border. If the array has less than three elements, the original array will be copied and missing elements with value 0 will be added. @return the border array, never null.
4125 This will retrieve the set of quadpoints which encompass the areas of this annotation. @return An array of floats representing the quad points.
4126 This will get the margin between the annotations "outer" rectangle defined by /Rect and the boundaries of the underlying caret. @return the differences. If the entry hasn't been set am empty array is returned.
4127 Indicates the operating system. The string format isn't specified yet. Value will be stored as first item of the array, as specified in PDF Signature Build Dictionary Specification for PDF v1.7. @param os is a string with the system id or name.
4128 This will get the margin between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
4129 If <b>SubFilter</b> is not null and the {@link #isSubFilterRequired()} indicates this entry is a required constraint, then the first matching encodings shall be used when signing; otherwise, signing shall not take place. If {@link #isSubFilterRequired()} indicates that this is an optional constraint, then the first matching encoding shall be used if it is available. If it is not available, a different encoding may be used instead. @return the subfilter that shall be used by the signature handler
4130 This will get the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
4131 An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific. @return the digest method that shall be used by the signature handler
4132 If the Reasons array is provided and {@link #isReasonRequired()} indicates that Reasons is a required constraint, one of the reasons in the array shall be used for the signature dictionary; otherwise signing shall not take place. If the {@link #isReasonRequired()} indicates Reasons is an optional constraint, one of the reasons in the array may be chose or a custom reason can be provided. @return the reasons that should be used by the signature handler
4133 Get one or more disjoint paths that make this annotation. @return An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates.
4134 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @return the reasons that should be used by the signature handler
4135 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
4136 Returns list of byte arrays that contains DER-encoded X.509v3 certificates @return list of byte arrays containing DER-encoded X.509v3 certificates
4137 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
4138 (Optional) byte array containing DER-encoded X.509v3 certificate that is acceptable for signing. works like {@link #setSubject(List)} but one byte array @param subject byte array containing DER-encoded X.509v3 certificate
4139 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
4140 removes a subject from the list @param subject byte array containing DER-encoded X.509v3 certificate
4141 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
4142 Returns list of key usages of certificate strings where each string is 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @return list of key usages of certificate strings
4143 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
4144 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
4145 (Optional; PDF 1.7) specifies an acceptable key-usage extension that must be presennt in the signing certificate for works like {@link #setKeyUsage(List)} but takes only one string @param keyUsageExtension String that consist only of {0, 1, X}
4146 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
4147 Removes a key usage extension @param keyUsageExtension ASCII string that consists of {0, 1, X}
4148 This will set the vertical offset of the caption. @param offset vertical offset of the caption
4149 Returns list of array of bytes of DER-encoded X.509v3 certificates @return list of array of bytes of DER-encoded X.509v3 certificates
4150 array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuer A byte array containing DER-encoded X.509v3 certificate
4151 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
4152 Removes an issuer from the issuers list @param issuer A byte array containing DER-encoded X.509v3 certificate
4153 This will retrieve the set of quadpoints which encompass the areas of this annotation which will activate. @return An array of floats representing the quad points.
4154 Returns A list of array of bytes that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate @return list of array of bytes that contain Object Identifiers of the certificate policies
4155 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
4156 works like {@link #setOID(List)} but for one object @param oid Object Identifier of a certificate policy to be added
4157 PDF 2.0: This will retrieve the arrays that shall represent the alternating horizontal and vertical coordinates for path building. @return An array of float arrays, each supplying the operands for a path building operator (m, l or c). The first array should have 2 elements, the others should have 2 or 6 elements.
4158 removes an OID from the list @param oid Object Identifier of the certificate policy to be removed
4159 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
4160 Read out the byterange from the file. @return an integer array with the byterange, or an empty array if there is none.
4161 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
4162 Return the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @return field list. Note these objects may not be identical to PDField objects retrieved from other methods (depending on cache setting). The best strategy is to call {@link #getCOSObject()} to check for identity. The list is not backed by the /CO COSArray in the document.
4163 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
4164 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
4165 This will get the indices of the selected options - the 'I' key. <p> This is only needed if a choice field allows multiple selections and two different items have the same export value or more than one values is selected. </p> <p>The indices are zero-based</p> @return List containing the indices of all selected options.
4166 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
4167 This will return the changes along the x-axis. @return changes along the x-axis
4168 This will get the differences between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
4169 This will return the changes along the y-axis. @return changes along the y-axis
4170 This will retrieve the set of quadpoints which encompass the areas of this annotation. @return An array of floats representing the quad points.
4171 This will return the distances. @return distances
4172 This will return the areas. @return areas
4173 Indicates the operating system. The string format isn't specified yet. Value will be stored as first item of the array, as specified in PDF Signature Build Dictionary Specification for PDF v1.7. @param os is a string with the system id or name.
4174 This will return the angles. @return angles
4175 This will return the sloaps of a line. @return the sloaps of a line
4176 If <b>SubFilter</b> is not null and the {@link #isSubFilterRequired()} indicates this entry is a required constraint, then the first matching encodings shall be used when signing; otherwise, signing shall not take place. If {@link #isSubFilterRequired()} indicates that this is an optional constraint, then the first matching encoding shall be used if it is available. If it is not available, a different encoding may be used instead. @return the subfilter that shall be used by the signature handler
4177 This will return the origin of the coordinate system. @return the origin
4178 An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific. @return the digest method that shall be used by the signature handler
4179 Get the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @return the visibility policy, never null.
4180 If the Reasons array is provided and {@link #isReasonRequired()} indicates that Reasons is a required constraint, one of the reasons in the array shall be used for the signature dictionary; otherwise signing shall not take place. If the {@link #isReasonRequired()} indicates Reasons is an optional constraint, one of the reasons in the array may be chose or a custom reason can be provided. @return the reasons that should be used by the signature handler
4181 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @return the reasons that should be used by the signature handler
4182 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
4183 Returns list of byte arrays that contains DER-encoded X.509v3 certificates @return list of byte arrays containing DER-encoded X.509v3 certificates
4184 (Optional) byte array containing DER-encoded X.509v3 certificate that is acceptable for signing. works like {@link #setSubject(List)} but one byte array @param subject byte array containing DER-encoded X.509v3 certificate
4185 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
4186 removes a subject from the list @param subject byte array containing DER-encoded X.509v3 certificate
4187 Check if the cross reference stream can be found at the current offset. @param startXRefOffset the expected start offset of the XRef stream @return the revised offset @throws IOException if something went wrong
4188 Returns list of key usages of certificate strings where each string is 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @return list of key usages of certificate strings
4189 (Optional; PDF 1.7) specifies an acceptable key-usage extension that must be presennt in the signing certificate for works like {@link #setKeyUsage(List)} but takes only one string @param keyUsageExtension String that consist only of {0, 1, X}
4190 Returns the page display mode. @return the PageMode of the document, if not present PageMode.USE_NONE is returned
4191 Removes a key usage extension @param keyUsageExtension ASCII string that consists of {0, 1, X}
4192 Returns the page layout. @return the PageLayout of the document, if not present PageLayout.SINGLE_PAGE is returned
4193 Returns list of array of bytes of DER-encoded X.509v3 certificates @return list of array of bytes of DER-encoded X.509v3 certificates
4194 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. "1.4")
4195 array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuer A byte array containing DER-encoded X.509v3 certificate
4196 This will get the trapped value for the document. This will return null if one is not found. @return The trapped value for the document.
4197 Removes an issuer from the issuers list @param issuer A byte array containing DER-encoded X.509v3 certificate
4198 Returns the numbering style for this page range. @return one of the STYLE_* constants
4199 Returns A list of array of bytes that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate @return list of array of bytes that contain Object Identifiers of the certificate policies
4200 Gets the type. @return the type
4201 works like {@link #setOID(List)} but for one object @param oid Object Identifier of a certificate policy to be added
4202 Creates an attribute object. @param dictionary the dictionary @return the attribute object
4203 removes an OID from the list @param oid Object Identifier of the certificate policy to be removed
4204 Returns the owner of the attributes. @return the owner of the attributes
4205 Read out the byterange from the file. @return an integer array with the byterange, or an empty array if there is none.
4206 Returns the structure type (S). @return the structure type
4207 Return the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @return field list. Note these objects may not be identical to PDField objects retrieved from other methods (depending on cache setting). The best strategy is to call {@link #getCOSObject()} to check for identity. The list is not backed by the /CO COSArray in the document.
4208 Creates a node in the structure tree. Can be either a structure tree root, or a structure element. @param node the node dictionary @return the structure node
4209 This will get the indices of the selected options - the 'I' key. <p> This is only needed if a choice field allows multiple selections and two different items have the same export value or more than one values is selected. </p> <p>The indices are zero-based</p> @return List containing the indices of all selected options.
4210 Returns the type. @return the type
4211 This will return the changes along the x-axis. @return changes along the x-axis
4212 This will return the changes along the y-axis. @return changes along the y-axis
4213 Returns the property name. @return the property name
4214 This will return the distances. @return distances
4215 Gets the language (Lang). @return the language
4216 This will return the areas. @return areas
4217 Gets the type (Type). @return the type
4218 This will return the angles. @return angles
4219 Gets the subtype (Subtype). @return the subtype
4220 This will return the sloaps of a line. @return the sloaps of a line
4221 Get the name of the filter. @return The filter name contained in this encryption dictionary.
4222 This will return the origin of the coordinate system. @return the origin
4223 Get the name of the subfilter. @return The subfilter name contained in this encryption dictionary.
4224 Get the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @return the visibility policy, never null.
4225 Create the correct FDFAnnotation. @param fdfDic The FDF dictionary. @return A newly created FDFAnnotation
4226 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
4227 Get the intent of the annotation. @return The intent of the annotation.
4228 This will retrieve the line ending style. @return The ending style for the start point.
4229 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
4230 This will get the version that was specified in the catalog dictionary. @return The FDF version.
4231 The encoding to be used for a FDF field. The default is PDFDocEncoding and this method will never return null. @return The encoding value.
4232 Check if the cross reference stream can be found at the current offset. @param startXRefOffset the expected start offset of the XRef stream @return the revised offset @throws IOException if something went wrong
4233 Returns the page display mode. @return the PageMode of the document, if not present PageMode.USE_NONE is returned
4234 This will get the scale option. See the SCALE_OPTION_XXX constants. This is guaranteed to never return null. Default: Always @return The scale option.
4235 This will get the scale type. See the SCALE_TYPE_XXX constants. This is guaranteed to never return null. Default: Proportional @return The scale type.
4236 Returns the page layout. @return the PageLayout of the document, if not present PageLayout.SINGLE_PAGE is returned
4237 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. "1.4")
4238 The PostScript name of the font. @return The postscript name of the font.
4239 This will get the trapped value for the document. This will return null if one is not found. @return The trapped value for the document.
4240 Returns the numbering style for this page range. @return one of the STYLE_* constants
4241 Gets the type. @return the type
4242 This will always return "Font" for fonts. @return The type of object that this is.
4243 This will get the subtype of font. @return the subtype
4244 Creates an attribute object. @param dictionary the dictionary @return the attribute object
4245 Get the font name. @return The name of the font.
4246 Returns the owner of the attributes. @return the owner of the attributes
4247 A string representing the preferred font stretch. According to the PDF Spec: The font stretch value; it must be one of the following (ordered from narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded. @return The stretch of the font.
4248 Returns the structure type (S). @return the structure type
4249 Creates a node in the structure tree. Can be either a structure tree root, or a structure element. @param node the node dictionary @return the structure node
4250 Returns the PostScript name of the font. @return the PostScript name of the font
4251 Returns the type. @return the type
4252 Returns the PostScript name of the font. @return the PostScript name of the font
4253 Returns the PostScript name of the font. @return the PostScript name of the font
4254 Returns the PostScript name of the font. @return the PostScript name of the font
4255 Returns the property name. @return the property name
4256 Gets the language (Lang). @return the language
4257 Returns true if this is an NChannel (PDF 1.6) color space. @return true if this is an NChannel color space.
4258 Gets the type (Type). @return the type
4259 This will get the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @return The Type of PDF object.
4260 Gets the subtype (Subtype). @return the subtype
4261 This will get the type of action that the actions dictionary describes. @return The S entry of actions dictionary.
4262 Get the name of the filter. @return The filter name contained in this encryption dictionary.
4263 This will create the correct type of action based on the type specified in the dictionary. @param action An action dictionary. @return An action of the correct type.
4264 Get the name of the subfilter. @return The subfilter name contained in this encryption dictionary.
4265 This will retrieve the subtype of the annotation. @return The subtype of this annotation, see the SUB_TYPE_XXX constants.
4266 Create the correct FDFAnnotation. @param fdfDic The FDF dictionary. @return A newly created FDFAnnotation
4267 This will retrieve the caption positioning. @return the caption positioning
4268 Get the intent of the annotation. @return The intent of the annotation.
4269 This will retrieve the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @return the intent
4270 This will retrieve the line ending style. @return The ending style for the start point.
4271 returns the subtype of the external data dictionary. @return the subtype of the external data dictionary
4272 This will get the version that was specified in the catalog dictionary. @return The FDF version.
4273 The name of the software module that was used to create the signature. @return the name of the software module
4274 If <b>Filter</b> is not null and the {@link #isFilterRequired()} indicates this entry is a required constraint, then the signature handler specified by this entry shall be used when signing; otherwise, signing shall not take place. If {@link #isFilterRequired()} indicates that this is an optional constraint, this handler may be used if it is available. If it is not available, a different handler may be used instead. @return the filter that shall be used by the signature handler
4275 The encoding to be used for a FDF field. The default is PDFDocEncoding and this method will never return null. @return The encoding value.
4276 A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific use for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> @return string of URL type
4277 This will get the scale option. See the SCALE_OPTION_XXX constants. This is guaranteed to never return null. Default: Always @return The scale option.
4278 Returns the filter. @return the filter
4279 This will get the scale type. See the SCALE_TYPE_XXX constants. This is guaranteed to never return null. Default: Proportional @return The scale type.
4280 Returns the subfilter. @return the subfilter
4281 The PostScript name of the font. @return The postscript name of the font.
4282 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
4283 This will retrieve the name of the viewport. @return the name of the viewport
4284 Get the Duplex preference. See DUPLEX enumeration. @return the Duplex preference.
4285 This will always return "Font" for fonts. @return The type of object that this is.
4286 This will get the subtype of font. @return the subtype
4287 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
4288 Get the font name. @return The name of the font.
4289 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
4290 A string representing the preferred font stretch. According to the PDF Spec: The font stretch value; it must be one of the following (ordered from narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded. @return The stretch of the font.
4291 Returns the language for the document, or null. @return the language of the document if present, otherwise null
4292 This will get the title of the document. This will return null if no title exists. @return The title of the document.
4293 This will get the author of the document. This will return null if no author exists. @return The author of the document.
4294 Returns the PostScript name of the font. @return the PostScript name of the font
4295 This will get the subject of the document. This will return null if no subject exists. @return The subject of the document.
4296 Returns the PostScript name of the font. @return the PostScript name of the font
4297 This will get the keywords of the document. This will return null if no keywords exists. @return The keywords of the document.
4298 Returns the PostScript name of the font. @return the PostScript name of the font
4299 This will get the creator of the document. This will return null if no creator exists. @return The creator of the document.
4300 Returns the PostScript name of the font. @return the PostScript name of the font
4301 This will get the producer of the document. This will return null if no producer exists. @return The producer of the document.
4302 Returns the page label prefix for this page range. @return the page label prefix for this page range, or {@code null} if no prefix has been defined.
4303 Returns true if this is an NChannel (PDF 1.6) color space. @return true if this is an NChannel color space.
4304 This will get the unicode file name. @return The file name.
4305 This will get the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @return The Type of PDF object.
4306 This will get the file name. @return The file name.
4307 This will get the type of action that the actions dictionary describes. @return The S entry of actions dictionary.
4308 This will get the name representing a Dos file. @return The file name.
4309 This will get the name representing a Mac file. @return The file name.
4310 This will create the correct type of action based on the type specified in the dictionary. @param action An action dictionary. @return An action of the correct type.
4311 This will get the name representing a Unix file. @return The file name.
4312 This will retrieve the subtype of the annotation. @return The subtype of this annotation, see the SUB_TYPE_XXX constants.
4313 This will get the description. @return The file description.
4314 This will retrieve the caption positioning. @return the caption positioning
4315 Returns the element identifier (ID). @return the element identifier
4316 This will retrieve the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @return the intent
4317 Returns the title (T). @return the title
4318 returns the subtype of the external data dictionary. @return the subtype of the external data dictionary
4319 Returns the language (Lang). @return the language
4320 The name of the software module that was used to create the signature. @return the name of the software module
4321 Returns the alternate description (Alt). @return the alternate description
4322 If <b>Filter</b> is not null and the {@link #isFilterRequired()} indicates this entry is a required constraint, then the signature handler specified by this entry shall be used when signing; otherwise, signing shall not take place. If {@link #isFilterRequired()} indicates that this is an optional constraint, this handler may be used if it is available. If it is not available, a different handler may be used instead. @return the filter that shall be used by the signature handler
4323 Returns the expanded form (E). @return the expanded form
4324 A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific use for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> @return string of URL type
4325 Returns the actual text (ActualText). @return the actual text
4326 Returns the string for the property value. @return the string for the property value
4327 Returns the filter. @return the filter
4328 Gets the actual text (ActualText). @return the actual text
4329 Returns the subfilter. @return the subfilter
4330 Gets the alternate description (Alt). @return the alternate description
4331 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
4332 Gets the expanded form (E). @return the expanded form
4333 This will retrieve the name of the viewport. @return the name of the viewport
4334 Modification date. @return The date as a string.
4335 Get the Duplex preference. See DUPLEX enumeration. @return the Duplex preference.
4336 Get the annotation name. @return The unique name of the annotation.
4337 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
4338 Get the text, or a description, of the annotation. @return The text, or a description, of the annotation.
4339 Get the annotation title. @return The title of the annotation.
4340 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
4341 Get the description of the annotation. @return The subject of the annotation.
4342 Returns the language for the document, or null. @return the language of the document if present, otherwise null
4343 This will retrieve the symbol that shall be associated with the caret. @return the symbol
4344 This will get the title of the document. This will return null if no title exists. @return The title of the document.
4345 This will get the clockwise rotation in degrees. @return The number of degrees of clockwise rotation.
4346 This will get the author of the document. This will return null if no author exists. @return The author of the document.
4347 Get the default appearance string. @return The default appearance of the annotation.
4348 This will get the subject of the document. This will return null if no subject exists. @return The subject of the document.
4349 Get the default style string. @return The default style of the annotation.
4350 This will get the keywords of the document. This will return null if no keywords exists. @return The keywords of the document.
4351 This will retrieve the caption positioning. @return the caption positioning
4352 This will get the creator of the document. This will return null if no creator exists. @return The creator of the document.
4353 This will retrieve the annotation state. @return the annotation state
4354 This will get the producer of the document. This will return null if no producer exists. @return The producer of the document.
4355 This will retrieve the annotation state model. @return the annotation state model
4356 Returns the page label prefix for this page range. @return the page label prefix for this page range, or {@code null} if no prefix has been defined.
4357 This will get the status string to be displayed as the result of an action. @return The status.
4358 This will get the unicode file name. @return The file name.
4359 This will get the target frame in the browser to open this document. @return The target frame.
4360 This will get the file name. @return The file name.
4361 This will get the "T" entry in the field dictionary. A partial field name. Where the fully qualified field name is a concatenation of the parent's fully qualified field name and "." as a separator. For example<br> Address.State<br> Address.City<br> @return The partial field name.
4362 This will get the name representing a Dos file. @return The file name.
4363 This will get the name of the referenced page. A required parameter. @return The name of the referenced page.
4364 This will get the name representing a Mac file. @return The file name.
4365 A string representing the preferred font family. @return The font family.
4366 This will get the name representing a Unix file. @return The file name.
4367 This will get the character set for the font. @return The character set value.
4368 This will get the description. @return The file description.
4369 Returns the element identifier (ID). @return the element identifier
4370 Returns the title (T). @return the title
4371 Returns the language (Lang). @return the language
4372 Returns the alternate description (Alt). @return the alternate description
4373 Returns the name of the optional content group. @return the name
4374 Returns the expanded form (E). @return the expanded form
4375 Lists all optional content group names. @return an array of all names
4376 Returns the actual text (ActualText). @return the actual text
4377 This will get the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @return The F entry of the specific Windows launch parameter dictionary.
4378 Returns the string for the property value. @return the string for the property value
4379 This will get the string specifying the default directory in standard DOS syntax. @return The D entry of the specific Windows launch parameter dictionary.
4380 This will get the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @return The O entry of the specific Windows launch parameter dictionary.
4381 Gets the actual text (ActualText). @return the actual text
4382 Gets the alternate description (Alt). @return the alternate description
4383 This will get a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @return The P entry of the specific Windows launch parameter dictionary.
4384 This will get the uniform resource identifier to resolve. It should be encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too. @return The URI entry of the specific URI action dictionary or null if there isn't any.
4385 Gets the expanded form (E). @return the expanded form
4386 Get the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @return a filename or null if there is none.
4387 Modification date. @return The date as a string.
4388 If the value in the /A entry is a string, this will get the value of the /NM entry in the annotation dictionary. @return the /NM value of an annotation dictionary or null if the /A entry value is missing or not a string.
4389 Get the annotation name. @return The unique name of the annotation.
4390 The file to launch. @return The executable/document to launch.
4391 Get the text, or a description, of the annotation. @return The text, or a description, of the annotation.
4392 The dir to launch from. @return The dir of the executable/document to launch.
4393 Get the annotation title. @return The title of the annotation.
4394 Get the description of the annotation. @return The subject of the annotation.
4395 A parameter to pass the executable. @return The parameter to pass the executable.
4396 This will retrieve the symbol that shall be associated with the caret. @return the symbol
4397 Get the "contents" of the field. @return the value of the contents.
4398 This will get the clockwise rotation in degrees. @return The number of degrees of clockwise rotation.
4399 This will retrieve the date and time the annotation was modified. @return the modified date/time (often in date format, but can be an arbitrary string).
4400 Get the default appearance string. @return The default appearance of the annotation.
4401 This will get the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @return The identifying name for the Annotation.
4402 Get the default style string. @return The default style of the annotation.
4403 Get the default appearance. @return a string describing the default appearance.
4404 This will retrieve the caption positioning. @return the caption positioning
4405 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
4406 This will retrieve the annotation state. @return the annotation state
4407 Retrieve the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @return The title of the popup.
4408 This will retrieve the annotation state model. @return the annotation state model
4409 This will retrieve the short description of the subject of the annotation. @return the subject.
4410 This will get the status string to be displayed as the result of an action. @return The status.
4411 This will retrieve the annotation state. @return the annotation state
4412 This will get the target frame in the browser to open this document. @return The target frame.
4413 This will retrieve the annotation state model. @return the annotation state model
4414 This will get the "T" entry in the field dictionary. A partial field name. Where the fully qualified field name is a concatenation of the parent's fully qualified field name and "." as a separator. For example<br> Address.State<br> Address.City<br> @return The partial field name.
4415 This will retrieve the normal caption. @return the normal caption.
4416 This will get the name of the referenced page. A required parameter. @return The name of the referenced page.
4417 This will retrieve the rollover caption. @return the rollover caption.
4418 A string representing the preferred font family. @return The font family.
4419 This will retrieve the alternate caption. @return the alternate caption.
4420 This will get the character set for the font. @return The character set value.
4421 The build date of the software module. This string is normally produced by the compiler that is used to compile the software, for example using the Date and Time preprocessor flags. As such, this not likely to be in PDF Date format. @return the build date of the software module
4422 Indicates the operating system. The string format isn't specified yet. In its PDF Signature Build Dictionary Specifications Adobe differently specifies the value type to store operating system string:<ul> <li>Specification for PDF v1.5 specifies type as string;</li> <li>Specification for PDF v1.7 specifies type as array and provided example for <code>/PropBuild</code> dictionary indicate it as array of names.</li> </ul> This method supports both types to retrieve the value. @return the operating system id or name.
4423 Returns list of maps that contains subject distinguished names like [(cn: John Doe, o: Doe), (cn: John Smith)] both keys are typically of the form 'cn', 'o', 'email', '2.5.4.43'; and values are text strings. @return list maps that contains subject distinguished names
4424 returns String of the URL @return string of the URL
4425 Returns the URL. @return the URL
4426 Returns the name of the optional content group. @return the name
4427 Returns the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @return the name
4428 Lists all optional content group names. @return an array of all names
4429 Returns the CPU host name or physical location of the signing. @return the location
4430 This will get the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @return The F entry of the specific Windows launch parameter dictionary.
4431 Returns the reason for the signing, such as (I agree...). @return the reason
4432 This will get the string specifying the default directory in standard DOS syntax. @return The D entry of the specific Windows launch parameter dictionary.
4433 Returns the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @return the contact info
4434 This will get the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @return The O entry of the specific Windows launch parameter dictionary.
4435 Returns the partial name of the field. @return the name of the field
4436 Gets the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). @return the alternate name of the field
4437 This will get a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @return The P entry of the specific Windows launch parameter dictionary.
4438 Gets the mapping name of the field. The mapping name shall be used when exporting interactive form field data from the document. @return the mapping name of the field
4439 This will get the uniform resource identifier to resolve. It should be encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too. @return The URI entry of the specific URI action dictionary or null if there isn't any.
4440 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
4441 Get the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @return a filename or null if there is none.
4442 This will return the scale ration. @return the scale ratio.
4443 If the value in the /A entry is a string, this will get the value of the /NM entry in the annotation dictionary. @return the /NM value of an annotation dictionary or null if the /A entry value is missing or not a string.
4444 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
4445 The file to launch. @return The executable/document to launch.
4446 The dir to launch from. @return The dir of the executable/document to launch.
4447 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
4448 A parameter to pass the executable. @return The parameter to pass the executable.
4449 This will get the creation date of the document. This will return null if no creation date exists. @return The creation date of the document.
4450 Get the "contents" of the field. @return the value of the contents.
4451 This will get the modification date of the document. This will return null if no modification date exists. @return The modification date of the document.
4452 This will retrieve the date and time the annotation was modified. @return the modified date/time (often in date format, but can be an arbitrary string).
4453 The annotation create date. @return The date of the creation of the annotation date @throws IOException If there is an error converting the string to a Calendar object.
4454 This will get the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @return The identifying name for the Annotation.
4455 This will retrieve the date and time the annotation was created. @return the creation date/time.
4456 Get the default appearance. @return a string describing the default appearance.
4457 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
4458 Returns the sign date. @return the sign date
4459 Retrieve the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @return The title of the popup.
4460 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
4461 This will retrieve the short description of the subject of the annotation. @return the subject.
4462 This will retrieve the annotation state. @return the annotation state
4463 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
4464 This will retrieve the annotation state model. @return the annotation state model
4465 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
4466 This will retrieve the normal caption. @return the normal caption.
4467 This will retrieve the rollover caption. @return the rollover caption.
4468 This will retrieve the alternate caption. @return the alternate caption.
4469 Decodes data, with optional DecodeOptions. Not all filters support all options, and so callers should check the options' <code>honored</code> flag to test if they were applied. @param encoded the input stream holding the encoded data @param filterList list of filters to be used for decoding @param parameters the parameters used for decoding @param options additional options for decoding @param results list of optional decoding results for each filter @return the decoded stream data @throws IOException if the stream cannot be decoded @throws IllegalArgumentException if filterList is empty
4470 The build date of the software module. This string is normally produced by the compiler that is used to compile the software, for example using the Date and Time preprocessor flags. As such, this not likely to be in PDF Date format. @return the build date of the software module
4471 Sets the byte position of the first XRef (has to be called after very last startxref was read). This is used to resolve chain of active XRef/trailer. In case startxref position is not found we output a warning and use all XRef/trailer objects combined in byte position order. Thus for incomplete PDF documents with missing startxref one could call this method with parameter value -1. @param startxrefBytePosValue starting position of the first XRef
4472 Indicates the operating system. The string format isn't specified yet. In its PDF Signature Build Dictionary Specifications Adobe differently specifies the value type to store operating system string:<ul> <li>Specification for PDF v1.5 specifies type as string;</li> <li>Specification for PDF v1.7 specifies type as array and provided example for <code>/PropBuild</code> dictionary indicate it as array of names.</li> </ul> This method supports both types to retrieve the value. @return the operating system id or name.
4473 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
4474 Returns list of maps that contains subject distinguished names like [(cn: John Doe, o: Doe), (cn: John Smith)] both keys are typically of the form 'cn', 'o', 'email', '2.5.4.43'; and values are text strings. @return list maps that contains subject distinguished names
4475 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
4476 returns String of the URL @return string of the URL
4477 Returns the URL. @return the URL
4478 This is a convenience method that will get the dictionary object that is expected to be a float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
4479 Returns the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @return the name
4480 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch, or 1 if it hasn't been set. This is supported by PDF 1.6 and higher. @return the user unit.
4481 Returns the CPU host name or physical location of the signing. @return the location
4482 Get the width of the of the guideline in default user space units. The default is 1. @return The width of the guideline.
4483 Returns the reason for the signing, such as (I agree...). @return the reason
4484 Get the opacity value. @return The opacity of the annotation.
4485 Returns the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @return the contact info
4486 The weight of the font. According to the PDF spec "possible values are 100, 200, 300, 400, 500, 600, 700, 800 or 900" Where a higher number is more weight and appears to be more bold. @return The font weight.
4487 Returns the partial name of the field. @return the name of the field
4488 This will get the italic angle for the font. @return The italic angle.
4489 Gets the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). @return the alternate name of the field
4490 This will get the ascent for the font. @return The ascent.
4491 Gets the mapping name of the field. The mapping name shall be used when exporting interactive form field data from the document. @return the mapping name of the field
4492 This will get the descent for the font. @return The descent.
4493 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
4494 This will get the leading for the font. @return The leading.
4495 This will return the scale ration. @return the scale ratio.
4496 This will get the CapHeight for the font. @return The cap height.
4497 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
4498 This will get the x height for the font. @return The x height.
4499 This will get the stemV for the font. @return The stem v value.
4500 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
4501 This will get the stemH for the font. @return The stem h value.
4502 This will get the creation date of the document. This will return null if no creation date exists. @return The creation date of the document.
4503 This will get the average width for the font. @return The average width value.
4504 This will get the modification date of the document. This will return null if no modification date exists. @return The modification date of the document.
4505 This will get the max width for the font. @return The max width value.
4506 The annotation create date. @return The date of the creation of the annotation date @throws IOException If there is an error converting the string to a Calendar object.
4507 This will get the missing width for the font from the /MissingWidth dictionary entry. @return The missing width value, or 0 if there is no such dictionary entry.
4508 This will retrieve the date and time the annotation was created. @return the creation date/time.
4509 This will get the gamma value. If none is present then the default of 1 will be returned. @return The gamma value.
4510 Returns the sign date. @return the sign date
4511 This will return the XStep value. @return The XStep value
4512 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
4513 This will return the YStep value. @return The YStep value
4514 Sets the volume. @return The volume at which to play the sound, in the range −1.0 to 1.0. Default value: 1.0.
4515 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
4516 This will retrieve the length of the leader line. @return the length of the leader line
4517 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
4518 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
4519 This will retrieve the length of the leader line offset. @return the length of the leader line offset
4520 This will retrieve the constant opacity value used when rendering the annotation (excluing any popup). @return the constant opacity value.
4521 Decodes data, with optional DecodeOptions. Not all filters support all options, and so callers should check the options' <code>honored</code> flag to test if they were applied. @param encoded the input stream holding the encoded data @param filterList list of filters to be used for decoding @param parameters the parameters used for decoding @param options additional options for decoding @param results list of optional decoding results for each filter @return the decoded stream data @throws IOException if the stream cannot be decoded @throws IllegalArgumentException if filterList is empty
4522 This will retrieve the border width in points, 0 = no border. @return The width of the border in points.
4523 Sets the byte position of the first XRef (has to be called after very last startxref was read). This is used to resolve chain of active XRef/trailer. In case startxref position is not found we output a warning and use all XRef/trailer objects combined in byte position order. Thus for incomplete PDF documents with missing startxref one could call this method with parameter value -1. @param startxrefBytePosValue starting position of the first XRef
4524 @return The duration in seconds of the transition effect or the default 1 if no duration is found.
4525 @return The starting or ending scale at which the changes shall be drawn or the default 1 if no scale is found. Only for {@link PDTransitionStyle#Fly}.
4526 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
4527 Writes a single operator token. @param op The operator to write to the stream. @throws IOException If there is an error writing to the stream.
4528 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
4529 This is a convenience method that will get the dictionary object that is expected to be a float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
4530 Process the page to extract the region text. @param page The page to extract the regions from. @throws IOException If there is an error while extracting text.
4531 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch, or 1 if it hasn't been set. This is supported by PDF 1.6 and higher. @return the user unit.
4532 Get the width of the of the guideline in default user space units. The default is 1. @return The width of the guideline.
4533 Returns the role map. @return the role map
4534 Get the opacity value. @return The opacity of the annotation.
4535 The weight of the font. According to the PDF spec "possible values are 100, 200, 300, 400, 500, 600, 700, 800 or 900" Where a higher number is more weight and appears to be more bold. @return The font weight.
4536 Appends an objectable kid. @param objectable the objectable
4537 This will get the italic angle for the font. @return The italic angle.
4538 Inserts an objectable kid before a reference kid. @param newKid the objectable @param refKid the reference kid
4539 This will get the ascent for the font. @return The ascent.
4540 Removes an objectable kid. @param objectable the objectable @return <code>true</code> if the kid was removed, <code>false</code> otherwise
4541 This will get the descent for the font. @return The descent.
4542 Sets the property value. @param value the property value
4543 This will get the leading for the font. @return The leading.
4544 This will get the CapHeight for the font. @return The cap height.
4545 This will get the x height for the font. @return The x height.
4546 This will get the stemV for the font. @return The stem v value.
4547 This will get the stemH for the font. @return The stem h value.
4548 Returns the group color space or null if it isn't defined. @return the group color space. @throws IOException if the colorspace could not be created
4549 This will get the average width for the font. @return The average width value.
4550 This will get the max width for the font. @return The max width value.
4551 Creates a property list from the given dictionary. @param dict COS dictionary @return a new instance of a PDPropertyList using the given dictionary
4552 This will get the missing width for the font from the /MissingWidth dictionary entry. @return The missing width value, or 0 if there is no such dictionary entry.
4553 This will get the line width. This will return null if there is no line width @return null or the LW value of the dictionary.
4554 This will get the gamma value. If none is present then the default of 1 will be returned. @return The gamma value.
4555 This will get the miter limit. @return null or the ML value in the dictionary.
4556 This will return the XStep value. @return The XStep value
4557 This will get the flatness tolerance. @return The flatness tolerance or null if one has not been set.
4558 This will return the YStep value. @return The YStep value
4559 This will get the smothness tolerance. @return The smothness tolerance or null if one has not been set.
4560 Sets the volume. @return The volume at which to play the sound, in the range −1.0 to 1.0. Default value: 1.0.
4561 This will get the stroking alpha constant. @return The stroking alpha constant or null if one has not been set.
4562 This will retrieve the length of the leader line. @return the length of the leader line
4563 This will get the non stroking alpha constant. @return The non stroking alpha constant or null if one has not been set.
4564 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
4565 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
4566 Constructor. @param dict The annotations dictionary.
4567 This will retrieve the length of the leader line offset. @return the length of the leader line offset
4568 Creates a popup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
4569 This will retrieve the constant opacity value used when rendering the annotation (excluing any popup). @return the constant opacity value.
4570 Creates an arbitrary annotation from a COSDictionary, expected to be a correct object definition for some sort of annotation. @param dic The dictionary which represents this Annotation.
4571 This will retrieve the border width in points, 0 = no border. @return The width of the border in points.
4572 Creates a PDWidget from a COSDictionary, expected to be a correct object definition for a field in PDF. @param field the PDF object to represent as a field.
4573 @return The duration in seconds of the transition effect or the default 1 if no duration is found.
4574 This will get the export values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the export value is the first entry in the two-element array. </p> @return List containing all export values.
4575 @return The starting or ending scale at which the changes shall be drawn or the default 1 if no scale is found. Only for {@link PDTransitionStyle#Fly}.
4576 Returns the selected values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
4577 Writes a single operator token. @param op The operator to write to the stream. @throws IOException If there is an error writing to the stream.
4578 Returns the default values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
4579 Process the page to extract the region text. @param page The page to extract the regions from. @throws IOException If there is an error while extracting text.
4580 This will write a COS object. @param obj The object to write. @throws IOException if the output cannot be written
4581 Returns the role map. @return the role map
4582 Appends an objectable kid. @param objectable the objectable
4583 This method prepares and writes COS data to the object stream by selecting appropriate specialized methods for the content. @param output The stream, that shall be written to. @param object The content, that shall be written. @param topLevel True, if the currently written object is a top level entry of this object stream. @throws IOException Shall be thrown, when an exception occurred for the write operation.
4584 Inserts an objectable kid before a reference kid. @param newKid the objectable @param refKid the reference kid
4585 Removes an objectable kid. @param objectable the objectable @return <code>true</code> if the kid was removed, <code>false</code> otherwise
4586 Sets the property value. @param value the property value
4587 Resolve the bounding box. @param fieldWidget the annotation widget. @param appearanceStream the annotations appearance stream. @return the resolved boundingBox.
4588 This will decrypt a dictionary. @param dictionary The dictionary to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error creating a new string.
4589 Sets the bounding box. @param bbox the bounding box
4590 Sets a colour. @param name the attribute name @param value the colour
4591 Returns the group color space or null if it isn't defined. @return the group color space. @throws IOException if the colorspace could not be created
4592 Sets four colours. @param name the attribute name @param value the four colours
4593 Creates a new PDPage instance for embedding, with a size of U.S. Letter (8.5 x 11 inches).
4594 Creates a property list from the given dictionary. @param dict COS dictionary @return a new instance of a PDPropertyList using the given dictionary
4595 This will get the line width. This will return null if there is no line width @return null or the LW value of the dictionary.
4596 This will get the miter limit. @return null or the ML value in the dictionary.
4597 This will get the flatness tolerance. @return The flatness tolerance or null if one has not been set.
4598 This will get the smothness tolerance. @return The smothness tolerance or null if one has not been set.
4599 This will get the stroking alpha constant. @return The stroking alpha constant or null if one has not been set.
4600 This will get the FDF dictionary. @return The FDF dictionary.
4601 This will get the non stroking alpha constant. @return The non stroking alpha constant or null if one has not been set.
4602 Constructor, creates a new FDF document.
4603 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
4604 This will get the FDF Catalog. This is guaranteed to not return null. @return The documents /Root dictionary
4605 Constructor. @param dict The annotations dictionary.
4606 This is guaranteed to never return null.<br> To quote the PDF Spec "An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon. A value of [0.0 0.0] positions the icon at the bottom-left corner of the annotation rectangle; a value of [0.5 0.5] centers it within the rectangle. This entry is used only if the icon is scaled proportionally. Default value: [0.5 0.5]." @return The fractional space to allocate.
4607 Creates a popup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
4608 Builds the CIDSet entry, required by PDF/A. This lists all CIDs in the font, including those that don't have a GID.
4609 Creates an arbitrary annotation from a COSDictionary, expected to be a correct object definition for some sort of annotation. @param dic The dictionary which represents this Annotation.
4610 Creates a new tiling pattern.
4611 Creates a PDWidget from a COSDictionary, expected to be a correct object definition for a field in PDF. @param field the PDF object to represent as a field.
4612 This will get the export values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the export value is the first entry in the two-element array. </p> @return List containing all export values.
4613 This will set the first bead in the thread. When this is set it will also set the thread property of the bead object. @param bead The first bead in the thread.
4614 Returns the selected values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
4615 Default constructor.
4616 Sets the role map. @param roleMap the role map
4617 Returns the default values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
4618 Sets a name value. @param name the attribute name @param value the name value
4619 This will set the rendering intent for the graphics state. @param ri The new rendering intent
4620 This will set the name of the action to be performed. @param name The name of the action to be performed.
4621 This will write a COS object. @param obj The object to write. @throws IOException if the output cannot be written
4622 This will set the border effect, see the STYLE_* constants for valid values. @param s the border effect to use
4623 Creates an empty page label dictionary for the given document. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)
4624 Constructor with required values. @param structureType The structure type. Constants are available in the {@link StandardStructureTypes} class. @param parent The parent structure node.
4625 Default Constructor.
4626 This method prepares and writes COS data to the object stream by selecting appropriate specialized methods for the content. @param output The stream, that shall be written to. @param object The content, that shall be written. @param topLevel True, if the currently written object is a top level entry of this object stream. @throws IOException Shall be thrown, when an exception occurred for the write operation.
4627 Creates a new shading pattern.
4628 Default constructor.
4629 Get the outline associated with this document or null if it does not exist. @return The document's outline.
4630 Constructor.
4631 Resolve the bounding box. @param fieldWidget the annotation widget. @param appearanceStream the annotations appearance stream. @return the resolved boundingBox.
4632 creates a new transition with default "replace" style {@link PDTransitionStyle#R}
4633 This will decrypt a dictionary. @param dictionary The dictionary to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error creating a new string.
4634 Set the value of a date entry in the dictionary. @param key The key to the date value. @param date The date value.
4635 Sets the bounding box. @param bbox the bounding box
4636 Set the date object. @param embedded The embedded dictionary. @param key The key to the date. @param date The date to set.
4637 Sets a colour. @param name the attribute name @param value the colour
4638 This will set the creation date of the document. @param date The new creation date for the document.
4639 Sets four colours. @param name the attribute name @param value the four colours
4640 This will set the modification date of the document. @param date The new modification date for the document.
4641 Creates a new PDPage instance for embedding, with a size of U.S. Letter (8.5 x 11 inches).
4642 Set the creation date. @param date The date the annotation was created.
4643 This will set the date and time the annotation was modified. @param c the date and time the annotation was created.
4644 This will set the date and time the annotation was created. @param creationDate the date and time the annotation was created.
4645 Set the sign date. @param cal the date to be used as sign date
4646 Set the custom metadata value. @param fieldName The name of the custom metadata field. @param fieldValue The value to the custom metadata field.
4647 Sets a string attribute value. @param name the attribute name @param value the string attribute value
4648 This will get the FDF dictionary. @return The FDF dictionary.
4649 This will set the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @param base The base URI to be used.
4650 Constructor, creates a new FDF document.
4651 A text string indicating the version of the application implementation, as described by the <code>Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). <p> NOTE: Version value is specific for build data dictionary when used as the <code>App</code> dictionary in a build properties dictionary. </p> @param applicationVersion the application implementation version
4652 This will get the FDF Catalog. This is guaranteed to not return null. @return The documents /Root dictionary
4653 This will set the label for the units. @param units the label for the units
4654 This is guaranteed to never return null.<br> To quote the PDF Spec "An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon. A value of [0.0 0.0] positions the icon at the bottom-left corner of the annotation rectangle; a value of [0.5 0.5] centers it within the rectangle. This entry is used only if the icon is scaled proportionally. Default value: [0.5 0.5]." @return The fractional space to allocate.
4655 This will set the value for the manner to display a fractional value. Allowed values are "D", "F", "R", "T" and null. @param fractionalDisplay the manner to display a fractional value
4656 Builds the CIDSet entry, required by PDF/A. This lists all CIDs in the font, including those that don't have a GID.
4657 This will set the text to be used between orders of thousands in display of numerical values. @param thousandsSeparator thousands separator
4658 Creates a new tiling pattern.
4659 This will set the text to be used as the decimal point in displaying numerical values. @param decimalSeparator decimal separator
4660 This will set the text to be concatenated to the left of the label specified by U. @param labelPrefixString label prefix
4661 This will set the first bead in the thread. When this is set it will also set the thread property of the bead object. @param bead The first bead in the thread.
4662 This will set the text to be concatenated after the label specified by U. @param labelSuffixString label suffix
4663 Default constructor.
4664 Sets the role map. @param roleMap the role map
4665 This will set the value indicating the ordering of the label specified by U to the calculated unit value. Possible values are "S", "P" and null. @param labelPositionToValue label position
4666 Sets a name value. @param name the attribute name @param value the name value
4667 This will create an FDF field from an XFDF XML document. @param fieldXML The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
4668 This will set the rendering intent for the graphics state. @param ri The new rendering intent
4669 This will set the name of the action to be performed. @param name The name of the action to be performed.
4670 Creates a new optional content group (OCG). @param name the name of the content group
4671 This will set the border effect, see the STYLE_* constants for valid values. @param s the border effect to use
4672 Sets an integer. @param name the attribute name @param value the integer
4673 Creates an empty page label dictionary for the given document. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)
4674 Sets an integer number. @param name the attribute name @param value the integer number
4675 Constructor with required values. @param structureType The structure type. Constants are available in the {@link StandardStructureTypes} class. @param parent The parent structure node.
4676 This will set the precision or denominator of a fractional amount. @param denominator the precision or denominator
4677 Default Constructor.
4678 Creates a new shading pattern.
4679 Default constructor.
4680 Creates a new CCITT group 4 (T6) compressed image XObject from a b/w BufferedImage. This compression technique usually results in smaller images than those produced by {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }. @param document the document to create the image as part of. @param image the image. @return a new image XObject. @throws IOException if there is an error creating the image. @throws IllegalArgumentException if the BufferedImage is not a b/w image.
4681 Get the outline associated with this document or null if it does not exist. @return The document's outline.
4682 Set the number of bits per component. @param bitsPerComponent the number of bits per component
4683 Constructor.
4684 Set the number of bits per component. @param bitsPerComponent the number of bits per component
4685 creates a new transition with default "replace" style {@link PDTransitionStyle#R}
4686 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
4687 Set the value of a date entry in the dictionary. @param key The key to the date value. @param date The date value.
4688 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
4689 Set the date object. @param embedded The embedded dictionary. @param key The key to the date. @param date The date to set.
4690 Sets a float number. @param name the attribute name @param value the float number
4691 This will set the creation date of the document. @param date The new creation date for the document.
4692 This will set the intensity of the applied effect. @param i the intensity of the effect values 0 to 2
4693 This will set the modification date of the document. @param date The new modification date for the document.
4694 This will set the conversion factor. @param conversionFactor the conversion factor
4695 Set the creation date. @param date The date the annotation was created.
4696 This will set the date and time the annotation was modified. @param c the date and time the annotation was created.
4697 This will set the date and time the annotation was created. @param creationDate the date and time the annotation was created.
4698 Set the sign date. @param cal the date to be used as sign date
4699 Set the custom metadata value. @param fieldName The name of the custom metadata field. @param fieldValue The value to the custom metadata field.
4700 This will parse a directory object from the stream. @return The parsed object. @throws IOException If there is an error during parsing.
4701 Sets a string attribute value. @param name the attribute name @param value the string attribute value
4702 This will get the file specification for this stream. This is only required for external files. @return The file specification. @throws IOException If there is an error creating the file spec.
4703 This will set the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @param base The base URI to be used.
4704 The source file or target file: the PDF document file that this FDF file was exported from or is intended to be imported into. @return The F entry of the FDF dictionary. @throws IOException If there is an error creating the file spec.
4705 A text string indicating the version of the application implementation, as described by the <code>Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). <p> NOTE: Version value is specific for build data dictionary when used as the <code>App</code> dictionary in a build properties dictionary. </p> @param applicationVersion the application implementation version
4706 This will set the label for the units. @param units the label for the units
4707 This will get the list of embedded FDF entries, or null if the entry is null. This will return a list of PDFileSpecification objects. @return A list of embedded FDF files. @throws IOException If there is an error creating the file spec.
4708 This will set the value for the manner to display a fractional value. Allowed values are "D", "F", "R", "T" and null. @param fractionalDisplay the manner to display a fractional value
4709 This will get the file specification of this reference. An optional parameter. @return The F entry for this dictionary. @throws IOException If there is an error creating the file spec.
4710 This will set the text to be used between orders of thousands in display of numerical values. @param thousandsSeparator thousands separator
4711 This will get the file in which the destination is located. @return The F entry of the specific embedded go-to action dictionary. @throws IOException If there is an error creating the file spec.
4712 This will set the text to be used as the decimal point in displaying numerical values. @param decimalSeparator decimal separator
4713 This will set the text to be concatenated to the left of the label specified by U. @param labelPrefixString label prefix
4714 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
4715 This will set the text to be concatenated after the label specified by U. @param labelSuffixString label suffix
4716 This will get the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @return The F entry of the specific launch action dictionary. @throws IOException If there is an error creating the file spec.
4717 This will set the value indicating the ordering of the label specified by U to the calculated unit value. Possible values are "S", "P" and null. @param labelPositionToValue label position
4718 This will get the file in which the destination is located. @return The F entry of the specific remote go-to action dictionary. @throws IOException If there is an error creating the file spec.
4719 This will create an FDF field from an XFDF XML document. @param fieldXML The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
4720 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
4721 This will get the file in which the destination is located. @return The F entry of the specific thread action dictionary. @throws IOException If there is an error creating the file spec.
4722 Creates a new optional content group (OCG). @param name the name of the content group
4723 Return the attached file. @return The attached file. @throws IOException If there is an error creating the file spec.
4724 Sets an integer. @param name the attribute name @param value the integer
4725 Default constructor.
4726 Sets an integer number. @param name the attribute name @param value the integer number
4727 Default constructor.
4728 This will set the precision or denominator of a fractional amount. @param denominator the precision or denominator
4729 Default constructor.
4730 Default constructor.
4731 Creates a new CCITT group 4 (T6) compressed image XObject from a b/w BufferedImage. This compression technique usually results in smaller images than those produced by {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }. @param document the document to create the image as part of. @param image the image. @return a new image XObject. @throws IOException if there is an error creating the image. @throws IllegalArgumentException if the BufferedImage is not a b/w image.
4732 Constructor.
4733 Set the number of bits per component. @param bitsPerComponent the number of bits per component
4734 Set the number of bits per component. @param bitsPerComponent the number of bits per component
4735 Constructor.
4736 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
4737 Constructor.
4738 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
4739 Constructor.
4740 Constructor.
4741 Sets a float number. @param name the attribute name @param value the float number
4742 Constructor.
4743 This will set the intensity of the applied effect. @param i the intensity of the effect values 0 to 2
4744 This will set the conversion factor. @param conversionFactor the conversion factor
4745 Creates a Circle or Square annotation of the specified sub type. @param subType the subtype the annotation represents.
4746 Constructor.
4747 Creates a TextMarkup annotation of the specified sub type. @param subType the subtype the annotation represents
4748 This will parse a directory object from the stream. @return The parsed object. @throws IOException If there is an error during parsing.
4749 Gets the artifact's bounding box (BBox). @return the artifact's bounding box
4750 This will get the file specification for this stream. This is only required for external files. @return The file specification. @throws IOException If there is an error creating the file spec.
4751 Gets the bounding box. @return the bounding box.
4752 The rectangle associated with this annotation. @return The annotation rectangle.
4753 The source file or target file: the PDF document file that this FDF file was exported from or is intended to be imported into. @return The F entry of the FDF dictionary. @throws IOException If there is an error creating the file spec.
4754 This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. @return the rectangle difference
4755 This will get the list of embedded FDF entries, or null if the entry is null. This will return a list of PDFileSpecification objects. @return A list of embedded FDF files. @throws IOException If there is an error creating the file spec.
4756 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4757 This will get the file specification of this reference. An optional parameter. @return The F entry for this dictionary. @throws IOException If there is an error creating the file spec.
4758 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4759 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4760 This will get the file in which the destination is located. @return The F entry of the specific embedded go-to action dictionary. @throws IOException If there is an error creating the file spec.
4761 This will get the fonts bounding box. @return The fonts bounding box.
4762 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
4763 This will get the fonts bounding box from its dictionary. @return The fonts bounding box.
4764 This will get the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @return The F entry of the specific launch action dictionary. @throws IOException If there is an error creating the file spec.
4765 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject's bounding box. These boundaries are used to clip the form XObject and to determine its size for caching. @return The BBox of the form.
4766 This will get the file in which the destination is located. @return The F entry of the specific remote go-to action dictionary. @throws IOException If there is an error creating the file spec.
4767 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the pattern's bounding box. @return The BBox of the pattern.
4768 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the shading's bounding box. @return the BBox of the form
4769 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
4770 The annotation rectangle, defining the location of the annotation on the page in default user space units. This is usually required and should not return null on valid PDF documents. But where this is a parent form field with children, such as radio button collections then the rectangle will be null. @return The Rect value of this annotation.
4771 This will get the file in which the destination is located. @return The F entry of the specific thread action dictionary. @throws IOException If there is an error creating the file spec.
4772 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4773 Return the attached file. @return The attached file. @throws IOException If there is an error creating the file spec.
4774 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4775 Default constructor.
4776 This will retrieve the rectangle specifying the location of the viewport. @return the location
4777 Default constructor.
4778 The rectangle on the page that this bead is part of. @return The part of the page that this bead covers.
4779 Default constructor.
4780 Default constructor.
4781 @param array dash array @param phase dash phase
4782 Get the line dash pattern for this box style. This is guaranteed to not return null. The default is [3],0. @return The line dash pattern.
4783 Constructor.
4784 This will get the dash pattern. @return null or the D value in the dictionary.
4785 This will retrieve the dash style used for drawing the border. @return the dash style of the border
4786 Constructor.
4787 Constructor.
4788 Constructor.
4789 Returns an ARGB image filled with the given paint and using the given image as a mask. @param paint the paint to fill the visible portions of the image with @return a masked image filled with the given paint @throws IOException if the image cannot be read @throws IllegalStateException if the image is not a stencil.
4790 Constructor.
4791 Constructor.
4792 Creates a Circle or Square annotation of the specified sub type. @param subType the subtype the annotation represents.
4793 Constructor.
4794 Creates a TextMarkup annotation of the specified sub type. @param subType the subtype the annotation represents
4795 Gets the artifact's bounding box (BBox). @return the artifact's bounding box
4796 Gets the bounding box. @return the bounding box.
4797 The rectangle associated with this annotation. @return The annotation rectangle.
4798 This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. @return the rectangle difference
4799 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4800 This will get the optional matrix of an XObjectForm. It maps the form space to user space. @return the form matrix if available, or the identity matrix.
4801 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4802 Returns the pattern matrix, or the identity matrix is none is available. @return the pattern matrix
4803 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4804 This will get the optional Matrix of a function based shading. @return the matrix
4805 This will get the fonts bounding box. @return The fonts bounding box.
4806 Sets an attribute. @param attrName the attribute name @param attrValue the attribute value
4807 This will get the fonts bounding box from its dictionary. @return The fonts bounding box.
4808 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject's bounding box. These boundaries are used to clip the form XObject and to determine its size for caching. @return The BBox of the form.
4809 Returns the given attribute, inheriting from parent tree nodes if necessary. @param node page object @param key the key to look up @return COS value for the given key
4810 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the pattern's bounding box. @return The BBox of the pattern.
4811 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the shading's bounding box. @return the BBox of the form
4812 The annotation rectangle, defining the location of the annotation on the page in default user space units. This is usually required and should not return null on valid PDF documents. But where this is a parent form field with children, such as radio button collections then the rectangle will be null. @return The Rect value of this annotation.
4813 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
4814 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4815 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
4816 This will retrieve the rectangle specifying the location of the viewport. @return the location
4817 The rectangle on the page that this bead is part of. @return The part of the page that this bead covers.
4818 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the defaultvalue will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
4819 @param array dash array @param phase dash phase
4820 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value -1 will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The integer value.
4821 Get the line dash pattern for this box style. This is guaranteed to not return null. The default is [3],0. @return The line dash pattern.
4822 This will get the dash pattern. @return null or the D value in the dictionary.
4823 This will retrieve the dash style used for drawing the border. @return the dash style of the border
4824 Creates an inline image from the given parameters and data. @param parameters the image parameters @param data the image data @param resources the current resources @throws IOException if the stream cannot be decoded
4825 Returns an ARGB image filled with the given paint and using the given image as a mask. @param paint the paint to fill the visible portions of the image with @return a masked image filled with the given paint @throws IOException if the image cannot be read @throws IllegalStateException if the image is not a stencil.
4826 Returns the suffix for this image type, e.g. jpg/png. @return The image suffix.
4827 This will get all dictionaries objects by type. @param type1 The first possible type of the object, mandatory. @param type2 The second possible type of the object, usually an abbreviation, optional. @return This will return all objects with the specified type(s).
4828 Brute force search for all trailer marker. @param trailer dictionary to be used as trailer dictionary @throws IOException if something went wrong
4829 Search for the different parts of the trailer dictionary. @param trailer dictionary to be used as trailer dictionary @return true if the root was found, false if not. @throws IOException if something went wrong
4830 Returns all pages in the document, as a page tree. @return PDPageTree providing all pages of the document
4831 Constructor for reading. @param root A page tree root.
4832 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @param customGlyphList a custom glyph list to use instead of the Adobe Glyph List @return Unicode character(s)
4833 This will get the optional matrix of an XObjectForm. It maps the form space to user space. @return the form matrix if available, or the identity matrix.
4834 Returns the pattern matrix, or the identity matrix is none is available. @return the pattern matrix
4835 This will get the optional Matrix of a function based shading. @return the matrix
4836 Returns the G entry of the soft mask object @return form containing the transparency group @throws IOException if the group could not be read
4837 Sets an attribute. @param attrName the attribute name @param attrValue the attribute value
4838 Set the mac subtype. @param macSubtype The mac subtype.
4839 Set the mac Creator. @param macCreator The mac Creator.
4840 Returns the given attribute, inheriting from parent tree nodes if necessary. @param node page object @param key the key to look up @return COS value for the given key
4841 Set the mac ResFork. @param macResFork The mac ResFork.
4842 This will tell if this document is encrypted or not. @return true If this document is encrypted.
4843 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
4844 This will parse the stream and populate the FDFDocument object. @return the parsed FDFDocument @throws IOException If there is an error reading from the stream or corrupt data is found.
4845 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the defaultvalue will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
4846 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. @param lenient activate leniency if set to true @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
4847 Get the documents AcroForm. This will return null if no AcroForm is part of the document. @return The document's AcroForm.
4848 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value -1 will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The integer value.
4849 Find the page destination from a named destination. @param namedDest the named destination. @return a PDPageDestination object or null if not found. @throws IOException if there is an error creating the PDPageDestination object.
4850 Creates an inline image from the given parameters and data. @param parameters the image parameters @param data the image data @param resources the current resources @throws IOException if the stream cannot be decoded
4851 Returns the color space resource with the given name, or null if none exists. This method is for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}. @param name Name of the color space resource. @param wasDefault if current color space was used by a default color space. This parameter is to @return a new color space. @throws IOException if something went wrong.
4852 Returns true if the given color space name exists in these resources. @param name Name of the color space resource. @return true if the given color space name exists in these resources, otherwise false
4853 Returns the extended graphics state resource with the given name, or null if none exists. @param name Name of the graphics state resource. @return the extended graphics state with the given name or null
4854 Returns the suffix for this image type, e.g. jpg/png. @return The image suffix.
4855 Tells whether the XObject resource with the given name is an image. @param name Name of the XObject resource. @return true if it is an image XObject, false if not.
4856 This will get all dictionaries objects by type. @param type1 The first possible type of the object, mandatory. @param type2 The second possible type of the object, usually an abbreviation, optional. @return This will return all objects with the specified type(s).
4857 Returns the names of the color space resources, if any. @return an iterable containing all names of available colorspaces
4858 Returns the names of the XObject resources, if any. @return an iterable containing all names of available xobjects
4859 Brute force search for all trailer marker. @param trailer dictionary to be used as trailer dictionary @throws IOException if something went wrong
4860 Returns the names of the font resources, if any. @return an iterable containing all names of available fonts
4861 Returns the names of the property list resources, if any. @return an iterable containing all names of available property lists
4862 Search for the different parts of the trailer dictionary. @param trailer dictionary to be used as trailer dictionary @return true if the root was found, false if not. @throws IOException if something went wrong
4863 Returns the names of the shading resources, if any. @return an iterable containing all names of available shadings
4864 Returns all pages in the document, as a page tree. @return PDPageTree providing all pages of the document
4865 Returns the names of the pattern resources, if any. @return an iterable containing all names of available patterns
4866 Constructor for reading. @param root A page tree root.
4867 Returns the names of the extended graphics state resources, if any. @return an iterable containing all names of available extended graphics states
4868 Adds the given resource if it does not already exist.
4869 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @param customGlyphList a custom glyph list to use instead of the Adobe Glyph List @return Unicode character(s)
4870 Sets the font resource with the given name. @param name the name of the resource @param font the font to be added
4871 Sets the color space resource with the given name. @param name the name of the resource @param colorSpace the color space to be added
4872 Returns the G entry of the soft mask object @return form containing the transparency group @throws IOException if the group could not be read
4873 Sets the extended graphics state resource with the given name. @param name the name of the resource @param extGState the extended graphics state to be added
4874 Set the mac subtype. @param macSubtype The mac subtype.
4875 Sets the shading resource with the given name. @param name the name of the resource @param shading the shading to be added
4876 Set the mac Creator. @param macCreator The mac Creator.
4877 Sets the pattern resource with the given name. @param name the name of the resource @param pattern the pattern to be added
4878 Set the mac ResFork. @param macResFork The mac ResFork.
4879 Sets the property list resource with the given name. @param name the name of the resource @param properties the property list to be added
4880 This will tell if this document is encrypted or not. @return true If this document is encrypted.
4881 Sets the XObject resource with the given name. @param name the name of the resource @param xobject the XObject to be added
4882 This will parse the stream and populate the FDFDocument object. @return the parsed FDFDocument @throws IOException If there is an error reading from the stream or corrupt data is found.
4883 Set the embedded file for this spec. You should also call {@link #setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFileUnicode(PDEmbeddedFile)} for cross-platform and cross-language compatibility. @param file The file to be embedded.
4884 Set the embedded Unicode file for this spec. If you call this, then do not forget to also call {@link #setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFile(PDEmbeddedFile)} or the attachment will not be visible on some viewers. @param file The Unicode file to be embedded.
4885 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. @param lenient activate leniency if set to true @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
4886 Returns the standard crypt filter. @return the standard crypt filter if available.
4887 Get the documents AcroForm. This will return null if no AcroForm is part of the document. @return The document's AcroForm.
4888 Returns the default crypt filter (for public-key security handler). @return the default crypt filter if available.
4889 Sets the standard crypt filter. @param cryptFilterDictionary the standard crypt filter to set
4890 Find the page destination from a named destination. @param namedDest the named destination. @return a PDPageDestination object or null if not found. @throws IOException if there is an error creating the PDPageDestination object.
4891 Sets the default crypt filter (for public-key security handler). @param defaultFilterDictionary the standard crypt filter to set
4892 Returns the color space resource with the given name, or null if none exists. This method is for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}. @param name Name of the color space resource. @param wasDefault if current color space was used by a default color space. This parameter is to @return a new color space. @throws IOException if something went wrong.
4893 Returns true if the given color space name exists in these resources. @param name Name of the color space resource. @return true if the given color space name exists in these resources, otherwise false
4894 Returns the stream of the glyph for the given character code @param code character code @return the stream to be used to render the glyph
4895 Returns the extended graphics state resource with the given name, or null if none exists. @param name Name of the graphics state resource. @return the extended graphics state with the given name or null
4896 Tells whether the XObject resource with the given name is an image. @param name Name of the XObject resource. @return true if it is an image XObject, false if not.
4897 Returns the base state for optional content groups. @return the base state
4898 Returns the names of the color space resources, if any. @return an iterable containing all names of available colorspaces
4899 Sets the base state for optional content groups. @param state the base state
4900 Returns the names of the XObject resources, if any. @return an iterable containing all names of available xobjects
4901 Returns the names of the font resources, if any. @return an iterable containing all names of available fonts
4902 Enables or disables an optional content group. @param group the group object @param enable true to enable, false to disable @return true if the group already had an on or off setting, false otherwise
4903 Returns the names of the property list resources, if any. @return an iterable containing all names of available property lists
4904 Create a new tiling pattern content stream. @param pattern The tiling pattern stream to write to. @throws IOException If there is an error writing to the form contents.
4905 Returns the names of the shading resources, if any. @return an iterable containing all names of available shadings
4906 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
4907 Returns the names of the pattern resources, if any. @return an iterable containing all names of available patterns
4908 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
4909 Returns the names of the extended graphics state resources, if any. @return an iterable containing all names of available extended graphics states
4910 Adds the given resource if it does not already exist.
4911 Sets the font resource with the given name. @param name the name of the resource @param font the font to be added
4912 Get the signature dictionary. @return the signature dictionary
4913 Sets the color space resource with the given name. @param name the name of the resource @param colorSpace the color space to be added
4914 Sets the extended graphics state resource with the given name. @param name the name of the resource @param extGState the extended graphics state to be added
4915 Append a bead after this bead. This will correctly set the next/previous beads in the linked list. @param append The bead to insert.
4916 Returns the appearance stream for this annotation, if any. The annotation state is taken into account, if present. @return the appearance stream
4917 Sets the shading resource with the given name. @param name the name of the resource @param shading the shading to be added
4918 Sets the pattern resource with the given name. @param name the name of the resource @param pattern the pattern to be added
4919 Sets the property list resource with the given name. @param name the name of the resource @param properties the property list to be added
4920 Get the value which sets the check box to the On state. <p>The On value should be 'Yes' but other values are possible so we need to look for that. On the other hand the Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the value setting the check box to the On state. If an empty string is returned there is no appearance definition.
4921 Sets the XObject resource with the given name. @param name the name of the resource @param xobject the XObject to be added
4922 Check if all entries of the pages dictionary are present. Those which can't be dereferenced are removed. @param root the root dictionary of the pdf @throws java.io.IOException if the page tree root is null
4923 Set the embedded file for this spec. You should also call {@link #setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFileUnicode(PDEmbeddedFile)} for cross-platform and cross-language compatibility. @param file The file to be embedded.
4924 Set the embedded Unicode file for this spec. If you call this, then do not forget to also call {@link #setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFile(PDEmbeddedFile)} or the attachment will not be visible on some viewers. @param file The Unicode file to be embedded.
4925 Returns the standard crypt filter. @return the standard crypt filter if available.
4926 Returns the default crypt filter (for public-key security handler). @return the default crypt filter if available.
4927 The name to retrieve. @param name The name in the tree. @return The value of the name in the tree. @throws IOException If there is a problem creating the destinations.
4928 Sets the standard crypt filter. @param cryptFilterDictionary the standard crypt filter to set
4929 Sets the default crypt filter (for public-key security handler). @param defaultFilterDictionary the standard crypt filter to set
4930 Returns the stream of the glyph for the given character code @param code character code @return the stream to be used to render the glyph
4931 Returns the value corresponding to an index in the number tree. @param index The index in the number tree. @return The value corresponding to the index. @throws IOException If there is a problem creating the values.
4932 Set the children of this number tree. @param kids The children of this number tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNumbers(Map)} with a map and pass a single element list here.
4933 Returns the base state for optional content groups. @return the base state
4934 Set the numbers for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param numbers The map of numbers to objects, or <code>null</code> for nothing.
4935 Sets the base state for optional content groups. @param state the base state
4936 This will get the number of output parameters that have a range specified. A range for output parameters is optional so this may return zero for a function that does have output parameters, this will simply return the number that have the range specified. @return The number of output parameters that have a range specified.
4937 Enables or disables an optional content group. @param group the group object @param enable true to enable, false to disable @return true if the group already had an on or off setting, false otherwise
4938 This will get the range for a certain output parameters. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The output parameter number to get the range for. @return The range for this component.
4939 Create a new tiling pattern content stream. @param pattern The tiling pattern stream to write to. @throws IOException If there is an error writing to the form contents.
4940 Clip the given input values to the ranges. @param inputValues the input values @return the clipped values
4941 This will get the number of input parameters that have a domain specified. @return The number of input parameters that have a domain specified.
4942 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
4943 This will get the range for a certain input parameter. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The parameter number to get the domain for. @return The domain range for this component.
4944 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
4945 calculate array index (structure described in p.171 PDF spec 1.7) in multiple dimensions. @param vector with coordinates @return index in flat array
4946 Returns all encode values as COSArray. @return the encode array.
4947 Get the decode for the input parameter. @param paramNum The function parameter number. @return The decode parameter range or null if none is set.
4948 Get the signature dictionary. @return the signature dictionary
4949 Get the encode for the input parameter. @param n The function parameter number. @return The encode parameter range or null if none is set.
4950 Is the artifact attached to the top edge? @return <code>true</code> if the artifact is attached to the top edge, <code>false</code> otherwise
4951 Append a bead after this bead. This will correctly set the next/previous beads in the linked list. @param append The bead to insert.
4952 Is the artifact attached to the bottom edge? @return <code>true</code> if the artifact is attached to the bottom edge, <code>false</code> otherwise
4953 Returns the appearance stream for this annotation, if any. The annotation state is taken into account, if present. @return the appearance stream
4954 Is the artifact attached to the left edge? @return <code>true</code> if the artifact is attached to the left edge, <code>false</code> otherwise
4955 Is the artifact attached to the right edge? @return <code>true</code> if the artifact is attached to the right edge, <code>false</code> otherwise
4956 Get the value which sets the check box to the On state. <p>The On value should be 'Yes' but other values are possible so we need to look for that. On the other hand the Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the value setting the check box to the On state. If an empty string is returned there is no appearance definition.
4957 Constructor. @param fontDictionary The font dictionary according to the PDF specification.
4958 Check if all entries of the pages dictionary are present. Those which can't be dereferenced are removed. @param root the root dictionary of the pdf @throws java.io.IOException if the page tree root is null
4959 Creates a new DictionaryEncoding for embedding. @param baseEncoding the base encoding of this encoding @param differences the differences of this encoding with regard to the base encoding
4960 Creates a new DictionaryEncoding for a Type 3 font from a PDF. @param fontEncoding The Type 3 encoding dictionary.
4961 Creates a new DictionaryEncoding from a PDF. @param fontEncoding The encoding dictionary. @param isNonSymbolic True if the font is non-symbolic. False for Type 3 fonts. @param builtIn The font's built-in encoding. Null for Type 3 fonts.
4962 The name to retrieve. @param name The name in the tree. @return The value of the name in the tree. @throws IOException If there is a problem creating the destinations.
4963 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
4964 Returns the value corresponding to an index in the number tree. @param index The index in the number tree. @return The value corresponding to the index. @throws IOException If there is a problem creating the values.
4965 Set the children of this number tree. @param kids The children of this number tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNumbers(Map)} with a map and pass a single element list here.
4966 This will set the a range for the "a" component. @param range the new range for the "a" component, or null if defaults (-100..100) are to be set.
4967 Set the numbers for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param numbers The map of numbers to objects, or <code>null</code> for nothing.
4968 This will set the "b" range for this color space. @param range the new range for the "b" component, or null if defaults (-100..100) are to be set.
4969 This will get the number of output parameters that have a range specified. A range for output parameters is optional so this may return zero for a function that does have output parameters, this will simply return the number that have the range specified. @return The number of output parameters that have a range specified.
4970 Returns the first optional content group of the given name. @param name the group name @return the optional content group or null, if there is no such group
4971 This will get the range for a certain output parameters. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The output parameter number to get the range for. @return The range for this component.
4972 Adds an optional content group (OCG). @param ocg the optional content group
4973 Clip the given input values to the ranges. @param inputValues the input values @return the clipped values
4974 Returns the collection of all optional content groups. @return the optional content groups
4975 This will get the number of input parameters that have a domain specified. @return The number of input parameters that have a domain specified.
4976 This will get the range for a certain input parameter. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The parameter number to get the domain for. @return The domain range for this component.
4977 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws java.io.IOException if there is an error getting the color space or doing background color conversion.
4978 calculate array index (structure described in p.171 PDF spec 1.7) in multiple dimensions. @param vector with coordinates @return index in flat array
4979 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
4980 Returns all encode values as COSArray. @return the encode array.
4981 This will retrieve the color used in drawing various elements. As of PDF 1.6 these are : <ul> <li>Background of icon when closed</li> <li>Title bar of popup window</li> <li>Border of a link annotation</li> </ul> @return Color object representing the colour
4982 Get the decode for the input parameter. @param paramNum The function parameter number. @return The decode parameter range or null if none is set.
4983 This will retrieve the border color. @return the border color.
4984 Get the encode for the input parameter. @param n The function parameter number. @return The encode parameter range or null if none is set.
4985 This will retrieve the background color. @return the background color.
4986 Is the artifact attached to the top edge? @return <code>true</code> if the artifact is attached to the top edge, <code>false</code> otherwise
4987 works like {@link #addKeyUsage(String)} but enters each character separately @param digitalSignature char that is one of {0, 1, X} @param nonRepudiation char that is one of {0, 1, X} @param keyEncipherment char that is one of {0, 1, X} @param dataEncipherment char that is one of {0, 1, X} @param keyAgreement char that is one of {0, 1, X} @param keyCertSign char that is one of {0, 1, X} @param cRLSign char that is one of {0, 1, X} @param encipherOnly char that is one of {0, 1, X} @param decipherOnly char that is one of {0, 1, X}
4988 Is the artifact attached to the bottom edge? @return <code>true</code> if the artifact is attached to the bottom edge, <code>false</code> otherwise
4989 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
4990 Is the artifact attached to the left edge? @return <code>true</code> if the artifact is attached to the left edge, <code>false</code> otherwise
4991 Is the artifact attached to the right edge? @return <code>true</code> if the artifact is attached to the right edge, <code>false</code> otherwise
4992 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as byte array @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
4993 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
4994 Constructor. @param fontDictionary The font dictionary according to the PDF specification.
4995 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as byte array @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
4996 Creates a new DictionaryEncoding for embedding. @param baseEncoding the base encoding of this encoding @param differences the differences of this encoding with regard to the base encoding
4997 Gets a name value. @param name the attribute name @return the name value
4998 Creates a new DictionaryEncoding for a Type 3 font from a PDF. @param fontEncoding The Type 3 encoding dictionary.
4999 This will get the rendering intent. @return null or the RI value in the dictionary.
5000 This will get the name of the action to be performed. @return The name of the action to be performed.
5001 Creates a new DictionaryEncoding from a PDF. @param fontEncoding The encoding dictionary. @param isNonSymbolic True if the font is non-symbolic. False for Type 3 fonts. @param builtIn The font's built-in encoding. Null for Type 3 fonts.
5002 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
5003 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
5004 Get the style for the guideline. The default is "S" for solid. @return The guideline style. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
5005 This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.
5006 This is the name used to draw the type of attachment. See the ATTACHMENT_NAME_XXX constants. @return The name that describes the visual cue for the attachment.
5007 This will retrieve the line ending style. @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if missing, never null.
5008 Set the highlight mode for when the mouse is depressed. See the HIGHLIGHT_MODE_XXX constants. @return The string representation of the highlight mode.
5009 This will retrieve the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @return the relationship.
5010 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is DRAFT. @return The name of this rubber stamp, see the NAME_XXX constants.
5011 This will set the a range for the "a" component. @param range the new range for the "a" component, or null if defaults (-100..100) are to be set.
5012 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the NAME_XXX constants.
5013 Returns the highlighting mode. Default value: <code>I</code> <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @return the highlighting mode
5014 This will set the "b" range for this color space. @param range the new range for the "b" component, or null if defaults (-100..100) are to be set.
5015 This will retrieve the border style, see the STYLE_* constants for valid values. @return the style of the border
5016 Returns the first optional content group of the given name. @param name the group name @return the optional content group or null, if there is no such group
5017 returns the type of the external data dictionary. It must be "ExData", if present @return the type of the external data dictionary
5018 Adds an optional content group (OCG). @param ocg the optional content group
5019 Returns the collection of all optional content groups. @return the optional content groups
5020 @return the style for this transition @see PDTransitionStyle#valueOf(String)
5021 @return The dimension in which the specified transition effect shall occur or the default {@link PDTransitionDimension#H} if no dimension is found. @see PDTransitionDimension
5022 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws java.io.IOException if there is an error getting the color space or doing background color conversion.
5023 @return The direction of motion for the specified transition effect or the default {@link PDTransitionMotion#I} if no motion is found. @see PDTransitionMotion
5024 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
5025 Get the non full screen page mode preference. @return the non full screen page mode preference.
5026 This will retrieve the color used in drawing various elements. As of PDF 1.6 these are : <ul> <li>Background of icon when closed</li> <li>Title bar of popup window</li> <li>Border of a link annotation</li> </ul> @return Color object representing the colour
5027 Get the reading direction preference. @return the reading direction preference.
5028 This will retrieve the border color. @return the border color.
5029 Get the ViewArea preference. See BOUNDARY enumeration. @return the ViewArea preference.
5030 This will retrieve the background color. @return the background color.
5031 Get the ViewClip preference. See BOUNDARY enumeration. @return the ViewClip preference.
5032 works like {@link #addKeyUsage(String)} but enters each character separately @param digitalSignature char that is one of {0, 1, X} @param nonRepudiation char that is one of {0, 1, X} @param keyEncipherment char that is one of {0, 1, X} @param dataEncipherment char that is one of {0, 1, X} @param keyAgreement char that is one of {0, 1, X} @param keyCertSign char that is one of {0, 1, X} @param cRLSign char that is one of {0, 1, X} @param encipherOnly char that is one of {0, 1, X} @param decipherOnly char that is one of {0, 1, X}
5033 Get the PrintArea preference. See BOUNDARY enumeration. @return the PrintArea preference.
5034 Get the PrintClip preference. See BOUNDARY enumeration. @return the PrintClip preference.
5035 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
5036 Get the PrintScaling preference. See PRINT_SCALING enumeration. @return the PrintScaling preference.
5037 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as byte array @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
5038 Check if the cross reference table/stream can be found at the current offset. @param startXRefOffset @return the revised offset @throws IOException
5039 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
5040 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. 1.4f)
5041 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as byte array @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
5042 Returns the attributes together with their revision numbers (A). @return the attributes as a list, never null.
5043 Detects whether there are no properties in the attribute object. @return <code>true</code> if the attribute object is empty, <code>false</code> otherwise
5044 Gets a name value. @param name the attribute name @return the name value
5045 This will get the rendering intent. @return null or the RI value in the dictionary.
5046 Returns the parent in the structure hierarchy (P). @return the parent in the structure hierarchy
5047 This will get the name of the action to be performed. @return The name of the action to be performed.
5048 Creates an object for a kid of this structure node. The type of object depends on the type of the kid. It can be <ul> <li>a {@link PDStructureElement},</li> <li>a {@link PDObjectReference},</li> <li>a {@link PDMarkedContentReference},</li> <li>an {@link Integer}</li> </ul> @param kid the kid @return the object
5049 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
5050 Sets the property name. @param name the property name
5051 Get the style for the guideline. The default is "S" for solid. @return The guideline style. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
5052 creates a new encryption dictionary from the low level dictionary provided. @param dictionary a COS encryption dictionary
5053 This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.
5054 Returns the security handler specified in the dictionary's Filter entry. @return a security handler instance @throws IOException if there is no security handler available which matches the Filter
5055 This is the name used to draw the type of attachment. See the ATTACHMENT_NAME_XXX constants. @return The name that describes the visual cue for the attachment.
5056 This will get the list of FDF Annotations. This will return a list of FDFAnnotation objects or null if the entry is not set. @return A list of FDF annotations. @throws IOException If there is an error creating the annotation list.
5057 This will retrieve the line ending style. @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if missing, never null.
5058 Set the highlight mode for when the mouse is depressed. See the HIGHLIGHT_MODE_XXX constants. @return The string representation of the highlight mode.
5059 Returns true if the character set described by CIDSystemInfo is present in the given font. Only applies to Adobe-GB1, Adobe-CNS1, Adobe-Japan1, Adobe-Korea1, as per the PDF spec.
5060 This will retrieve the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @return the relationship.
5061 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is DRAFT. @return The name of this rubber stamp, see the NAME_XXX constants.
5062 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the NAME_XXX constants.
5063 Returns the highlighting mode. Default value: <code>I</code> <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @return the highlighting mode
5064 This will retrieve the border style, see the STYLE_* constants for valid values. @return the style of the border
5065 returns the type of the external data dictionary. It must be "ExData", if present @return the type of the external data dictionary
5066 @return the style for this transition @see PDTransitionStyle#valueOf(String)
5067 @return The dimension in which the specified transition effect shall occur or the default {@link PDTransitionDimension#H} if no dimension is found. @see PDTransitionDimension
5068 Returns true if this color space has the NChannel subtype. @return true if subtype is NChannel
5069 @return The direction of motion for the specified transition effect or the default {@link PDTransitionMotion#I} if no motion is found. @see PDTransitionMotion
5070 Get the Document Open Action for this object. @return The action to perform when the document is opened. @throws IOException If there is an error creating the destination or action.
5071 Get the non full screen page mode preference. @return the non full screen page mode preference.
5072 Get the reading direction preference. @return the reading direction preference.
5073 This will get the action that is associated with this field. @return The 'A' entry in the FDF field dictionary.
5074 Get the ViewArea preference. See BOUNDARY enumeration. @return the ViewArea preference.
5075 Returns the dictionary's "Doc" entry, that is, a map of key value pairs to be added to the document's JavaScript name tree. @return Map of named "JavaScript" dictionaries.
5076 Get the ViewClip preference. See BOUNDARY enumeration. @return the ViewClip preference.
5077 This will get the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @return The Next action or sequence of actions.
5078 Get the PrintArea preference. See BOUNDARY enumeration. @return the PrintArea preference.
5079 Get the F action. @return The F action.
5080 Get the PrintClip preference. See BOUNDARY enumeration. @return the PrintClip preference.
5081 This will get an action to be performed when the cursor enters the annotation's active area. @return The E entry of annotation's additional actions dictionary.
5082 Get the PrintScaling preference. See PRINT_SCALING enumeration. @return the PrintScaling preference.
5083 This will get an action to be performed when the cursor exits the annotation's active area. @return The X entry of annotation's additional actions dictionary.
5084 This will get an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @return The d entry of annotation's additional actions dictionary.
5085 Check if the cross reference table/stream can be found at the current offset. @param startXRefOffset @return the revised offset @throws IOException
5086 This will get an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @return The U entry of annotation's additional actions dictionary.
5087 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. 1.4f)
5088 This will get an action to be performed when the annotation receives the input focus. @return The Fo entry of annotation's additional actions dictionary.
5089 Returns the attributes together with their revision numbers (A). @return the attributes as a list, never null.
5090 This will get an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @return The Bl entry of annotation's additional actions dictionary.
5091 Detects whether there are no properties in the attribute object. @return <code>true</code> if the attribute object is empty, <code>false</code> otherwise
5092 This will get an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @return The PO entry of annotation's additional actions dictionary.
5093 This will get an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @return The PC entry of annotation's additional actions dictionary.
5094 Returns the parent in the structure hierarchy (P). @return the parent in the structure hierarchy
5095 This will get an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @return The PV entry of annotation's additional actions dictionary.
5096 Creates an object for a kid of this structure node. The type of object depends on the type of the kid. It can be <ul> <li>a {@link PDStructureElement},</li> <li>a {@link PDObjectReference},</li> <li>a {@link PDMarkedContentReference},</li> <li>an {@link Integer}</li> </ul> @param kid the kid @return the object
5097 This will get an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @return The PI entry of annotation's additional actions dictionary.
5098 Sets the property name. @param name the property name
5099 This will get a JavaScript action to be performed before closing a document. The name WC stands for "will close". @return The WC entry of document catalog's additional actions dictionary.
5100 creates a new encryption dictionary from the low level dictionary provided. @param dictionary a COS encryption dictionary
5101 This will get a JavaScript action to be performed before saving a document. The name WS stands for "will save". @return The WS entry of document catalog's additional actions dictionary.
5102 Returns the security handler specified in the dictionary's Filter entry. @return a security handler instance @throws IOException if there is no security handler available which matches the Filter
5103 This will get a JavaScript action to be performed after saving a document. The name DS stands for "did save". @return The DS entry of document catalog's additional actions dictionary.
5104 This will get the list of FDF Annotations. This will return a list of FDFAnnotation objects or null if the entry is not set. @return A list of FDF annotations. @throws IOException If there is an error creating the annotation list.
5105 This will get a JavaScript action to be performed before printing a document. The name WP stands for "will print". @return The WP entry of document catalog's additional actions dictionary.
5106 This will get a JavaScript action to be performed after printing a document. The name DP stands for "did print". @return The DP entry of document catalog's additional actions dictionary.
5107 This will get a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @return The K entry of form field's additional actions dictionary.
5108 Returns true if the character set described by CIDSystemInfo is present in the given font. Only applies to Adobe-GB1, Adobe-CNS1, Adobe-Japan1, Adobe-Korea1, as per the PDF spec.
5109 This will get a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @return The F entry of form field's additional actions dictionary.
5110 This will get a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @return The V entry of form field's additional actions dictionary.
5111 This will get a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @return The C entry of form field's additional actions dictionary.
5112 This will get an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @return The O entry of page object's additional actions dictionary.
5113 This will get an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @return The C entry of page object's additional actions dictionary.
5114 Get the action to be performed when this annotation is to be activated. Either this or the destination entry should be set, but not both. @return The action to be performed when this annotation is activated.
5115 Get the action to be performed when this annotation is to be activated. @return The action to be performed when this annotation is activated.
5116 Returns true if this color space has the NChannel subtype. @return true if subtype is NChannel
5117 Return the properties String value. <p> Allows to retrieve the low level date for validation purposes. </p> @param propertyKey the dictionaries key @return the properties value
5118 Get the Document Open Action for this object. @return The action to perform when the document is opened. @throws IOException If there is an error creating the destination or action.
5119 This will get the value of a custom metadata information field for the document. This will return null if one is not found. @param fieldName Name of custom metadata field from pdf document. @return String Value of metadata field
5120 Gets a string attribute value. @param name the attribute name @return the string attribute value
5121 This will get the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @return The URI entry of the specific URI dictionary.
5122 This will get the action that is associated with this field. @return The 'A' entry in the FDF field dictionary.
5123 A text string indicating the version of the application implementation, as described by the <code>/Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). @return the application implementation version
5124 Returns the dictionary's "Doc" entry, that is, a map of key value pairs to be added to the document's JavaScript name tree. @return Map of named "JavaScript" dictionaries.
5125 This will return the label for the units. @return the label for the units
5126 This will get the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @return The Next action or sequence of actions.
5127 Get the F action. @return The F action.
5128 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
5129 This will get an action to be performed when the cursor enters the annotation's active area. @return The E entry of annotation's additional actions dictionary.
5130 This will get an action to be performed when the cursor exits the annotation's active area. @return The X entry of annotation's additional actions dictionary.
5131 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
5132 This will get an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @return The d entry of annotation's additional actions dictionary.
5133 Get the operation to perform on the file. This method will not return null, OPERATION_OPEN is the default. @return The operation to perform for the file. @see PDWindowsLaunchParams#OPERATION_OPEN @see PDWindowsLaunchParams#OPERATION_PRINT
5134 Get the default appearance. @return the DA element of the dictionary object
5135 This will get an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @return The U entry of annotation's additional actions dictionary.
5136 This will get an action to be performed when the annotation receives the input focus. @return The Fo entry of annotation's additional actions dictionary.
5137 This will get an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @return The Bl entry of annotation's additional actions dictionary.
5138 <p>Preferred method for getting the filename. It will determinate the recommended file name.</p> <p>First of all we try to get the unicode filename if it exist. If it doesn't exist we take a look at the DOS, MAC UNIX filenames. If no one exist the required F entry will be returned.</p> @return The preferred file name.
5139 This will get an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @return The PO entry of annotation's additional actions dictionary.
5140 Sets the string for the property value. @param formattedValue the string for the property value
5141 This will get an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @return The PC entry of annotation's additional actions dictionary.
5142 This will get an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @return The PV entry of annotation's additional actions dictionary.
5143 This will get an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @return The PI entry of annotation's additional actions dictionary.
5144 This will get a JavaScript action to be performed before closing a document. The name WC stands for "will close". @return The WC entry of document catalog's additional actions dictionary.
5145 This will get a JavaScript action to be performed before saving a document. The name WS stands for "will save". @return The WS entry of document catalog's additional actions dictionary.
5146 This will get a JavaScript action to be performed after saving a document. The name DS stands for "did save". @return The DS entry of document catalog's additional actions dictionary.
5147 This will get a JavaScript action to be performed before printing a document. The name WP stands for "will print". @return The WP entry of document catalog's additional actions dictionary.
5148 This will get a JavaScript action to be performed after printing a document. The name DP stands for "did print". @return The DP entry of document catalog's additional actions dictionary.
5149 Indicates whether a particular optional content group is found in the PDF file. @param groupName the group name @return true if the group exists, false otherwise
5150 This will get a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @return The K entry of form field's additional actions dictionary.
5151 Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields. @return the name of the field
5152 This will get a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @return The F entry of form field's additional actions dictionary.
5153 This will get a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @return The V entry of form field's additional actions dictionary.
5154 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
5155 This will get a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @return The C entry of form field's additional actions dictionary.
5156 This will get an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @return The O entry of page object's additional actions dictionary.
5157 This is a convenience method that will get the dictionary object that is expected to be a date. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a string.
5158 This will get an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @return The C entry of page object's additional actions dictionary.
5159 The software module revision number, corresponding to the Date attribute. @return the revision of the software module
5160 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @return the revision of the software module
5161 Get the action to be performed when this annotation is to be activated. Either this or the destination entry should be set, but not both. @return The action to be performed when this annotation is activated.
5162 Get the action to be performed when this annotation is to be activated. @return The action to be performed when this annotation is activated.
5163 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @param options decode options for the encoded stream @return Decoded stream. @throws IOException If the stream could not be read.
5164 Return the properties String value. <p> Allows to retrieve the low level date for validation purposes. </p> @param propertyKey the dictionaries key @return the properties value
5165 Returns a new RandomAccessRead which reads the decoded stream data. @return RandomAccessRead containing decoded stream data. @throws IOException If the stream could not be read.
5166 This will get the value of a custom metadata information field for the document. This will return null if one is not found. @param fieldName Name of custom metadata field from pdf document. @return String Value of metadata field
5167 This will get a stream with some filters applied but not others. This is useful when doing images, ie filters = [flate,dct], we want to remove flate but leave dct @param stopFilters A list of filters to stop decoding at. @return A stream with decoded data. @throws IOException If there is an error processing the stream.
5168 Gets a string attribute value. @param name the attribute name @return the string attribute value
5169 This will get the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @return The URI entry of the specific URI dictionary.
5170 Gets a number value. @param name the attribute name @return the number value
5171 A text string indicating the version of the application implementation, as described by the <code>/Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). @return the application implementation version
5172 This will return the conversion factor. @return the conversion factor
5173 This will return the label for the units. @return the label for the units
5174 Constructor. @param function The function.
5175 This will retrieve the length of the leader line. @return the length of the leader line
5176 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
5177 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
5178 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
5179 This will retrieve the length of the leader line offset. @return the length of the leader line offset
5180 Get the operation to perform on the file. This method will not return null, OPERATION_OPEN is the default. @return The operation to perform for the file. @see PDWindowsLaunchParams#OPERATION_OPEN @see PDWindowsLaunchParams#OPERATION_PRINT
5181 The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @return the minimum required capability of the signature field seed value dictionary parser
5182 Get the default appearance. @return the DA element of the dictionary object
5183 This will return the CYX factor. @return CYX factor
5184 Gets a number value. @param name the attribute name @param defaultValue the default value @return the number value
5185 <p>Preferred method for getting the filename. It will determinate the recommended file name.</p> <p>First of all we try to get the unicode filename if it exist. If it doesn't exist we take a look at the DOS, MAC UNIX filenames. If no one exist the required F entry will be returned.</p> @return The preferred file name.
5186 This will retrieve the intensity of the applied effect. @return the intensity value 0 to 2
5187 Sets the string for the property value. @param formattedValue the string for the property value
5188 Compute the font height. Override this if you want to use own calculations. @param font the font. @return the font height. @throws IOException if there is an error while getting the font bounding box.
5189 Writes a series of tokens followed by a new line. @param tokens The tokens to write to the stream. @throws IOException If there is an error writing to the stream.
5190 This will write out the list of tokens to the stream. @param tokens The tokens to write to the stream. @throws IOException If there is an error writing to the stream.
5191 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
5192 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
5193 Indicates whether a particular optional content group is found in the PDF file. @param groupName the group name @return true if the group exists, false otherwise
5194 Appends a structure element kid and sets the parent property (/P) to this. @param structureElement the structure element
5195 Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields. @return the name of the field
5196 Inserts a structure element kid before a reference kid. @param newKid the structure element @param refKid the reference kid
5197 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
5198 Removes a structure element kid and if successful also removes the parent property (/P). @param structureElement the structure element @return <code>true</code> if the kid was removed, <code>false</code> otherwise.
5199 Returns the default position vector (v). @param cid CID
5200 This is a convenience method that will get the dictionary object that is expected to be a date. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a string.
5201 The software module revision number, corresponding to the Date attribute. @return the revision of the software module
5202 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @return the revision of the software module
5203 Returns the property list resource with the given name, or null if none exists. @param name Name of the property list resource. @return the property list with the given name or null
5204 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @param options decode options for the encoded stream @return Decoded stream. @throws IOException If the stream could not be read.
5205 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
5206 Returns a new RandomAccessRead which reads the decoded stream data. @return RandomAccessRead containing decoded stream data. @throws IOException If the stream could not be read.
5207 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
5208 Get a list of optional content groups. @return List of optional content groups, never null.
5209 This will get a stream with some filters applied but not others. This is useful when doing images, ie filters = [flate,dct], we want to remove flate but leave dct @param stopFilters A list of filters to stop decoding at. @return A stream with decoded data. @throws IOException If there is an error processing the stream.
5210 This will get the optional content group or optional content membership dictionary for the annotation. @return The optional content group or optional content membership dictionary or null if there is none.
5211 Gets a number value. @param name the attribute name @return the number value
5212 This will return the conversion factor. @return the conversion factor
5213 Creates a Caret annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5214 Constructor. @param function The function.
5215 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5216 This will retrieve the length of the leader line. @return the length of the leader line
5217 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
5218 Creates a FreeText annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5219 This will retrieve the length of the leader line offset. @return the length of the leader line offset
5220 Constructor. @param dict The annotations dictionary.
5221 The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @return the minimum required capability of the signature field seed value dictionary parser
5222 Creates a Line annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5223 This will return the CYX factor. @return CYX factor
5224 Constructor. @param dict The annotations dictionary.
5225 Gets a number value. @param name the attribute name @param defaultValue the default value @return the number value
5226 Constructor. @param dict The annotations dictionary.
5227 This will retrieve the intensity of the applied effect. @return the intensity value 0 to 2
5228 Creates a Rubber Stamp annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5229 Compute the font height. Override this if you want to use own calculations. @param font the font. @return the font height. @throws IOException if there is an error while getting the font bounding box.
5230 Creates a sound annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5231 Constructor. @param dict The annotations dictionary.
5232 Writes a series of tokens followed by a new line. @param tokens The tokens to write to the stream. @throws IOException If there is an error writing to the stream.
5233 Creates a Text annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5234 This will write out the list of tokens to the stream. @param tokens The tokens to write to the stream. @throws IOException If there is an error writing to the stream.
5235 Creates a TextMarkup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5236 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
5237 This will retrieve the popup annotation used for entering/editing the text for this annotation. @return the popup annotation.
5238 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
5239 Returns the widget annotations associated with this field. @return The list of widget annotations. Be aware that this list is <i>not</i> backed by the actual widget collection of the field, so adding or deleting has no effect on the PDF document until you call {@link #setWidgets(java.util.List) setWidgets()} with the modified list.
5240 Appends a structure element kid and sets the parent property (/P) to this. @param structureElement the structure element
5241 Inserts a structure element kid before a reference kid. @param newKid the structure element @param refKid the reference kid
5242 Removes a structure element kid and if successful also removes the parent property (/P). @param structureElement the structure element @return <code>true</code> if the kid was removed, <code>false</code> otherwise.
5243 Returns the default position vector (v). @param cid CID
5244 Writes all prepared {@link COSObject}s to the given {@link COSStream}. @param stream The stream for the compressed objects. @return The given {@link COSStream} of this object stream. @throws IOException Shall be thrown, if writing the object stream failed.
5245 Write the given {@link COSDictionary} to the given stream. @param output The stream, that shall be written to. @param cosDictionary The content, that shall be written.
5246 Returns the property list resource with the given name, or null if none exists. @param name Name of the property list resource. @return the property list with the given name or null
5247 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
5248 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
5249 Get a list of optional content groups. @return List of optional content groups, never null.
5250 This will get the optional content group or optional content membership dictionary for the annotation. @return The optional content group or optional content membership dictionary or null if there is none.
5251 Creates a Caret annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5252 Tries to compress the image using a predictor. @return the image or null if it is not possible to encoded the image (e.g. not supported raster format etc.)
5253 Default constructor.
5254 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5255 Default constructor.
5256 Default Constructor
5257 Creates a FreeText annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5258 Default constructor.
5259 Constructor #1.
5260 Constructor. @param dict The annotations dictionary.
5261 Default constructor.
5262 Creates a Line annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5263 Default constructor.
5264 Constructor. @param dict The annotations dictionary.
5265 Default constructor.
5266 Default constructor.
5267 Constructor. @param dict The annotations dictionary.
5268 Default constructor.
5269 Creates a Rubber Stamp annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5270 Default constructor.
5271 Default Constructor
5272 Creates a sound annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5273 Default constructor.
5274 Constructor. @param dict The annotations dictionary.
5275 Default constructor.
5276 Creates a Text annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5277 This will create an Appearance dictionary from an appearance XML element. @param appearanceXML The XML element that contains the appearance data.
5278 Creates a TextMarkup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5279 This will retrieve the popup annotation used for entering/editing the text for this annotation. @return the popup annotation.
5280 This will parse a PDF array object. @return The parsed PDF array. @throws IOException If there is an error parsing the stream.
5281 Returns the widget annotations associated with this field. @return The list of widget annotations. Be aware that this list is <i>not</i> backed by the actual widget collection of the field, so adding or deleting has no effect on the PDF document until you call {@link #setWidgets(java.util.List) setWidgets()} with the modified list.
5282 Constructor.
5283 Constructor.
5284 Constructor.
5285 Constructor.
5286 Writes all prepared {@link COSObject}s to the given {@link COSStream}. @param stream The stream for the compressed objects. @return The given {@link COSStream} of this object stream. @throws IOException Shall be thrown, if writing the object stream failed.
5287 Write the given {@link COSDictionary} to the given stream. @param output The stream, that shall be written to. @param cosDictionary The content, that shall be written.
5288 Tries to compress the image using a predictor. @return the image or null if it is not possible to encoded the image (e.g. not supported raster format etc.)
5289 Default constructor.
5290 Default constructor.
5291 Default Constructor
5292 Returns the pattern image in parent stream coordinates.
5293 Default constructor.
5294 Constructor #1.
5295 Returns the anchor rectangle, which includes the XStep/YStep and scaling.
5296 Default constructor.
5297 Default constructor.
5298 Default constructor.
5299 Default constructor.
5300 Default constructor.
5301 Default constructor.
5302 {@inheritDoc} The returned images are not cached.
5303 Default Constructor
5304 Extract the raw unconverted raster of the given image @param pdImage The image to get the raw raster data from @return the raw raster of this image @throws IOException
5305 Default constructor.
5306 Default constructor.
5307 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @param colorKey an optional color key mask @return content of this image as an (A)RGB buffered image @throws IOException if the image cannot be read
5308 This will create an Appearance dictionary from an appearance XML element. @param appearanceXML The XML element that contains the appearance data.
5309 This will parse a PDF array object. @return The parsed PDF array. @throws IOException If there is an error parsing the stream.
5310 Constructor.
5311 A dictionary containing any resources required by the page.
5312 Constructor.
5313 Constructor.
5314 A rectangle, expressed in default user space units, defining the boundaries of the physical medium on which the page is intended to be displayed or printed. @return the media box of the page
5315 Constructor.
5316 Returns the rotation angle in degrees by which the page should be rotated clockwise when displayed or printed. Valid values in a PDF must be a multiple of 90. @return The rotation angle in degrees in normalized form (0, 90, 180 or 270) or 0 if invalid or not set at this level.
5317 This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The value converted to a boolean.
5318 Get if the file is volatile. Default: false @return True if the file is volatile attribute is set.
5319 Shall the property be hidden? @return <code>true</code> if the property shall be hidden, <code>false</code> otherwise
5320 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set to false (the default is true)
5321 This will retrieve if the contents are shown as a caption or not. @return boolean if the content is shown as a caption.
5322 This will tell if the icon should scale to fit the annotation bounds. Default: false @return A flag telling if the icon should scale.
5323 A flag telling if the fields imported from the template may be renamed if there are conflicts. @return A flag telling if the fields can be renamed.
5324 Returns true if this group is isolated. Isolated groups begin with the fully transparent image, non-isolated begin with the current backdrop. @return true if this group is isolated
5325 Returns true if this group is a knockout. A knockout group blends with original backdrop, a non-knockout group blends with the current backdrop. @return true if this group is a knockout
5326 This will return the AntiAlias value. @return the AntiAlias value
5327 This will get the overprint control. @return The overprint control or null if one has not been set.
5328 This will get the automatic stroke adjustment flag. @return The automatic stroke adjustment flag or null if one has not been set.
5329 This will get the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @return The alpha source flag.
5330 This will get the text knockout flag. @return The text knockout flag.
5331 A flag indicating whether to hide the annotation or show it @return true if annotation is hidden
5332 Gets the synchronous flag. It specifyes whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @return Whether to play the sound synchronously (true) or asynchronously (false, also the default).
5333 Gets whether to repeat the sound indefinitely. @return Whether to repeat the sound indefinitely (default: false).
5334 Gets the flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). @return whether to mix this sound with any other sound already playing (default: false).
5335 Returns the pattern image in parent stream coordinates.
5336 This will retrieve whether the text specified by the /Contents or /RC entries shall be shown as a caption in the appearance of the line. @return boolean if the contents shall be shown as a caption (default: false).
5337 Returns the anchor rectangle, which includes the XStep/YStep and scaling.
5338 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed
5339 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @return true if the software module or signature handler was a pre release.
5340 If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @return true if NonEFontNoWarn is set to true @see #setNonEFontNoWarn(boolean)
5341 If true, the application was in trusted mode when signing took place. @return true if the application was in trusted mode while signing. default: false
5342 True if the viewing application should construct the appearances of all field widgets. The default value is false. @return the value of NeedAppearances, false if the value isn't set
5343 {@inheritDoc} The returned images are not cached.
5344 @return true if the area that shall be flown in is rectangular and opaque. Default is false. Only for {@link PDTransitionStyle#Fly}.
5345 Get the toolbar preference. @return the toolbar preference.
5346 Extract the raw unconverted raster of the given image @param pdImage The image to get the raw raster data from @return the raw raster of this image @throws IOException
5347 Get the menubar preference. @return the menubar preference.
5348 Get the window UI preference. @return the window UI preference.
5349 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @param colorKey an optional color key mask @return content of this image as an (A)RGB buffered image @throws IOException if the image cannot be read
5350 Get the fit window preference. @return the fit window preference.
5351 Get the center window preference. @return the center window preference.
5352 Get the display doc title preference. @return the display doc title preference.
5353 A dictionary containing any resources required by the page.
5354 A rectangle, expressed in default user space units, defining the boundaries of the physical medium on which the page is intended to be displayed or printed. @return the media box of the page
5355 Returns the rotation angle in degrees by which the page should be rotated clockwise when displayed or printed. Valid values in a PDF must be a multiple of 90. @return The rotation angle in degrees in normalized form (0, 90, 180 or 270) or 0 if invalid or not set at this level.
5356 This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The value converted to a boolean.
5357 Sets the given boolean value at bitPos in the flags. @param field The COSName of the field to set the value into. @param bitFlag the bit position to set the value in. @param value the value the bit position should have.
5358 Get if the file is volatile. Default: false @return True if the file is volatile attribute is set.
5359 Shall the property be hidden? @return <code>true</code> if the property shall be hidden, <code>false</code> otherwise
5360 Get an integer from an embedded dictionary. Useful for 1-1 mappings. @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @param defaultValue The value if there is no embedded dictionary or it does not contain the key. @return The value of the embedded integer.
5361 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set to false (the default is true)
5362 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value.
5363 This will retrieve if the contents are shown as a caption or not. @return boolean if the content is shown as a caption.
5364 This will tell if the icon should scale to fit the annotation bounds. Default: false @return A flag telling if the icon should scale.
5365 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value..
5366 A flag telling if the fields imported from the template may be renamed if there are conflicts. @return A flag telling if the fields can be renamed.
5367 Returns true if this group is isolated. Isolated groups begin with the fully transparent image, non-isolated begin with the current backdrop. @return true if this group is isolated
5368 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
5369 Returns true if this group is a knockout. A knockout group blends with original backdrop, a non-knockout group blends with the current backdrop. @return true if this group is a knockout
5370 This will return the AntiAlias value. @return the AntiAlias value
5371 Gets the boolean value from the flags at the given bit position. @param field The COSName of the field to get the flag from. @param bitFlag the bitPosition to get the value from. @return true if the number at bitPos is '1'
5372 This will get the overprint control. @return The overprint control or null if one has not been set.
5373 This will get the automatic stroke adjustment flag. @return The automatic stroke adjustment flag or null if one has not been set.
5374 This will get the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @return The alpha source flag.
5375 This will get the text knockout flag. @return The text knockout flag.
5376 Returns the given COS page using a depth-first search. @param pageNum 1-based page number @param node page tree node to search @param encountered number of pages encountered so far @return COS dictionary of the Page object @throws IllegalStateException if the requested page number isn't found @throws IndexOutOfBoundsException if the requested page number is higher than the page count
5377 A flag indicating whether to hide the annotation or show it @return true if annotation is hidden
5378 Returns the number of leaf nodes (page objects) that are descendants of this root within the page tree. @return the number of leaf nodes, 0 if not present
5379 Gets the synchronous flag. It specifyes whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @return Whether to play the sound synchronously (true) or asynchronously (false, also the default).
5380 Returns the start value for page numbering in this page range. @return a positive integer the start value for numbering.
5381 Gets whether to repeat the sound indefinitely. @return Whether to repeat the sound indefinitely (default: false).
5382 Get the order of interpolation between samples. Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively. Default is 1. See p.170 in PDF spec 1.7. @return order of interpolation.
5383 Gets the flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). @return whether to mix this sound with any other sound already playing (default: false).
5384 This will retrieve whether the text specified by the /Contents or /RC entries shall be shown as a caption in the appearance of the line. @return boolean if the contents shall be shown as a caption (default: false).
5385 Returns the revision number (R). @return the revision number
5386 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed
5387 This will return the Length entry of the crypt filter dictionary.<br><br> The length in <b>bits</b> for the crypt filter algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
5388 This will return the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. @return The encryption version to use.
5389 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @return true if the software module or signature handler was a pre release.
5390 This will return the Length entry of the encryption dictionary.<br><br> The length in <b>bits</b> for the encryption algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
5391 If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @return true if NonEFontNoWarn is set to true @see #setNonEFontNoWarn(boolean)
5392 This will return the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. @return The encryption revision to use.
5393 If true, the application was in trusted mode when signing took place. @return true if the application was in trusted mode while signing. default: false
5394 This will get the permissions bit mask. @return The permissions bit mask.
5395 True if the viewing application should construct the appearances of all field widgets. The default value is false. @return the value of NeedAppearances, false if the value isn't set
5396 This will get the form of quadding (justification) of the annotation text. @return The quadding of the text.
5397 @return true if the area that shall be flown in is rectangular and opaque. Default is false. Only for {@link PDTransitionStyle#Fly}.
5398 Get the toolbar preference. @return the toolbar preference.
5399 Get the menubar preference. @return the menubar preference.
5400 This will get the font flags. @return The font flags.
5401 Get the window UI preference. @return the window UI preference.
5402 Get the fit window preference. @return the fit window preference.
5403 Get the center window preference. @return the center window preference.
5404 Create the correct PD Model pattern based on the COS base pattern. @param dictionary the COS pattern dictionary @param resourceCache the resource cache, may be null, useful for tiling patterns. @return the newly created pattern object @throws IOException If we are unable to create the PDPattern object.
5405 Get the display doc title preference. @return the display doc title preference.
5406 This will return the paint type. @return The paint type
5407 This will return the tiling type. @return The tiling type
5408 Create the correct PD Model shading based on the COS base shading. @param shadingDictionary the COS shading dictionary @return the newly created shading resources object @throws IOException if we are unable to create the PDShading object
5409 The bits per flag of this shading. This will return -1 if one has not been set. @return The number of bits per flag.
5410 The vertices per row of this shading. This will return -1 if one has not been set. @return the number of vertices per row
5411 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
5412 Sets the given boolean value at bitPos in the flags. @param field The COSName of the field to set the value into. @param bitFlag the bit position to set the value in. @param value the value the bit position should have.
5413 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
5414 A set of flags specifying various characteristics of the action @return the flags
5415 Get an integer from an embedded dictionary. Useful for 1-1 mappings. @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @param defaultValue The value if there is no embedded dictionary or it does not contain the key. @return The value of the embedded integer.
5416 A set of flags specifying various characteristics of the action @return the flags
5417 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value.
5418 If the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation. @return the zero based page number or -1 if the /P entry value is missing or not a number.
5419 If the value in the /A entry is an integer, this will get the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @return the zero based page number or -1 if the /P entry value is missing or not a number.
5420 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value..
5421 This will get the flags for this field. @return flags The set of flags.
5422 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
5423 This will get the 'quadding' or justification of the text to be displayed. <br> 0 - Left (default)<br> 1 - Centered<br> 2 - Right<br> Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @return The justification of the text strings.
5424 This will retrieve the rotation of the annotation widget. It must be a multiple of 90. Default is 0 @return the rotation
5425 Gets the boolean value from the flags at the given bit position. @param field The COSName of the field to get the flag from. @param bitFlag the bitPosition to get the value from. @return true if the number at bitPos is '1'
5426 Indicates if a timestamp is required. @return true if a timestamp is required
5427 This will get the document-wide default value for the quadding/justification of variable text fields. <p> 0 - Left(default)<br> 1 - Centered<br> 2 - Right<br> See the QUADDING constants of {@link PDVariableText}. @return The justification of the variable text fields.
5428 Returns the given COS page using a depth-first search. @param pageNum 1-based page number @param node page tree node to search @param encountered number of pages encountered so far @return COS dictionary of the Page object @throws IllegalStateException if the requested page number isn't found @throws IndexOutOfBoundsException if the requested page number is higher than the page count
5429 Returns the number of leaf nodes (page objects) that are descendants of this root within the page tree. @return the number of leaf nodes, 0 if not present
5430 Returns the start value for page numbering in this page range. @return a positive integer the start value for numbering.
5431 Get the order of interpolation between samples. Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively. Default is 1. See p.170 in PDF spec 1.7. @return order of interpolation.
5432 This will get the top index "TI" value. @return the top index, default value 0.
5433 Returns the revision number (R). @return the revision number
5434 This will return the Length entry of the crypt filter dictionary.<br><br> The length in <b>bits</b> for the crypt filter algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
5435 This will return the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. @return The encryption version to use.
5436 This will get all dictionaries objects by type. @param type The type of the object. @return This will return all objects with the specified type.
5437 This will return the Length entry of the encryption dictionary.<br><br> The length in <b>bits</b> for the encryption algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
5438 This will return the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. @return The encryption revision to use.
5439 Returns the page tree. @return the page tree
5440 This will get the permissions bit mask. @return The permissions bit mask.
5441 This will get the form of quadding (justification) of the annotation text. @return The quadding of the text.
5442 Update the Pg and Obj references to the new (merged) page.
5443 This will get the font flags. @return The font flags.
5444 This will load a document from a file. @param file The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
5445 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. To read the stream {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used @return The document that was loaded. @throws IOException If there is an error reading from the stream.
5446 Create the correct PD Model pattern based on the COS base pattern. @param dictionary the COS pattern dictionary @param resourceCache the resource cache, may be null, useful for tiling patterns. @return the newly created pattern object @throws IOException If we are unable to create the PDPattern object.
5447 This will return the paint type. @return The paint type
5448 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. Lenient mode is active by default. @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
5449 Remove all page resources from the cache to avoid relying on the implementation of the Cache. Does make sense after processing a page.
5450 This will return the tiling type. @return The tiling type
5451 Create the correct PD Model shading based on the COS base shading. @param shadingDictionary the COS shading dictionary @return the newly created shading resources object @throws IOException if we are unable to create the PDShading object
5452 Returns the color space resource with the given name, or null if none exists. @param name Name of the color space resource. @return a new color space. @throws IOException if something went wrong.
5453 The bits per flag of this shading. This will return -1 if one has not been set. @return The number of bits per flag.
5454 The vertices per row of this shading. This will return -1 if one has not been set. @return the number of vertices per row
5455 Adds the given font to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param font the font to add @return the name of the resource in the resources dictionary
5456 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
5457 Adds the given color space to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param colorSpace the color space to add @return the name of the resource in the resources dictionary
5458 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
5459 A set of flags specifying various characteristics of the action @return the flags
5460 Adds the given extended graphics state to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param extGState the extended graphics state to add @return the name of the resource in the resources dictionary
5461 A set of flags specifying various characteristics of the action @return the flags
5462 If the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation. @return the zero based page number or -1 if the /P entry value is missing or not a number.
5463 Adds the given shading to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param shading the shading to add @return the name of the resource in the resources dictionary
5464 If the value in the /A entry is an integer, this will get the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @return the zero based page number or -1 if the /P entry value is missing or not a number.
5465 Adds the given pattern to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param pattern the pattern to add @return the name of the resource in the resources dictionary
5466 This will get the flags for this field. @return flags The set of flags.
5467 Adds the given property list to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param properties the property list to add @return the name of the resource in the resources dictionary
5468 This will get the 'quadding' or justification of the text to be displayed. <br> 0 - Left (default)<br> 1 - Centered<br> 2 - Right<br> Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @return The justification of the text strings.
5469 Adds the given image to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param image the image to add @return the name of the resource in the resources dictionary
5470 This will retrieve the rotation of the annotation widget. It must be a multiple of 90. Default is 0 @return the rotation
5471 Adds the given form to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param form the form to add @return the name of the resource in the resources dictionary
5472 Indicates if a timestamp is required. @return true if a timestamp is required
5473 Adds the given XObject to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param xobject the XObject to add @param prefix the prefix to be used when creating the resource name @return the name of the resource in the resources dictionary
5474 This will get the document-wide default value for the quadding/justification of variable text fields. <p> 0 - Left(default)<br> 1 - Centered<br> 2 - Right<br> See the QUADDING constants of {@link PDVariableText}. @return The justification of the variable text fields.
5475 Get the embedded file. @return The embedded file for this file spec.
5476 Get the embedded dos file. @return The embedded dos file for this file spec.
5477 Get the embedded Mac file. @return The embedded Mac file for this file spec.
5478 Get the embedded Unix file. @return The embedded file for this file spec.
5479 Get the embedded unicode file. @return The embedded unicode file for this file spec.
5480 This will get the top index "TI" value. @return the top index, default value 0.
5481 This will get all dictionaries objects by type. @param type The type of the object. @return This will return all objects with the specified type.
5482 Returns the page tree. @return the page tree
5483 Indicates whether an optional content group is enabled. @param group the group object @return true if the group is enabled
5484 Enables or disables all optional content groups with the given name. @param groupName the group name @param enable true to enable, false to disable @return true if at least one group with this name already had an on or off setting, false otherwise
5485 Update the Pg and Obj references to the new (merged) page.
5486 Set the selected option given its index, and try to update the visual appearance. NOTE: this method is only usable if there are export values and used for radio buttons with FLAG_RADIOS_IN_UNISON not set. @param index index of option to be selected @throws IOException if the value could not be set @throws IllegalArgumentException if the index provided is not a valid index.
5487 This will load a document from a file. @param file The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
5488 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. To read the stream {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used @return The document that was loaded. @throws IOException If there is an error reading from the stream.
5489 Search acroform fields for signature field with specific signature dictionary. @param fieldIterator iterator on all fields. @param sigObject signature object (the /V part). @return a signature field if found, or null if none was found.
5490 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. Lenient mode is active by default. @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
5491 Remove all page resources from the cache to avoid relying on the implementation of the Cache. Does make sense after processing a page.
5492 Returns the appearance stream to process for the given annotation. May be used to render a specific appearance such as "hover". @param annotation The current annotation. @return The stream to process.
5493 Add font resources from the widget to the AcroForm to make sure embedded fonts are being used and not added by ensureFontResources potentially using a fallback font. @param acroFormResources AcroForm default resources, should not be null. @param annotation annotation, should not be null.
5494 Returns the color space resource with the given name, or null if none exists. @param name Name of the color space resource. @return a new color space. @throws IOException if something went wrong.
5495 Get the values to set individual buttons within a group to the on state. <p>The On value could be an arbitrary string as long as it is within the limitations of a PDF name object. The Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the potential values setting the check box to the On state. If an empty Set is returned there is no appearance definition.
5496 Adds the given font to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param font the font to add @return the name of the resource in the resources dictionary
5497 This will tell if this radio button is currently checked or not. This is equivalent to calling {@link #getValue()}. @return true If this field is checked.
5498 Adds the given color space to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param colorSpace the color space to add @return the name of the resource in the resources dictionary
5499 Checks the check box. @throws IOException if the appearance couldn't be generated.
5500 Adds the given extended graphics state to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param extGState the extended graphics state to add @return the name of the resource in the resources dictionary
5501 Returns the index of the given page, or -1 if it does not exist. @param page The page to search for. @return the zero-based index of the given page, or -1 if the page is not found.
5502 Adds the given shading to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param shading the shading to add @return the name of the resource in the resources dictionary
5503 Adds the given pattern to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param pattern the pattern to add @return the name of the resource in the resources dictionary
5504 Adds the given property list to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param properties the property list to add @return the name of the resource in the resources dictionary
5505 Adds the given image to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param image the image to add @return the name of the resource in the resources dictionary
5506 Sets the parent to the given node. @param parentNode the node to be set as parent
5507 Adds the given form to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param form the form to add @return the name of the resource in the resources dictionary
5508 Set the children of this named tree. @param kids The children of this named tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNames(Map)} with a map and pass a single element list here.
5509 Set the names for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param names map of names to objects, or <code>null</code> for nothing.
5510 Adds the given XObject to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param xobject the XObject to add @param prefix the prefix to be used when creating the resource name @return the name of the resource in the resources dictionary
5511 Get the embedded file. @return The embedded file for this file spec.
5512 Creates an page label dictionary for a document using the information in the given COS dictionary. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @param dict an existing page label dictionary @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels) @throws IOException If something goes wrong during the number tree conversion.
5513 Get the embedded dos file. @return The embedded dos file for this file spec.
5514 Get the encode for the input parameter. @param paramNum The function parameter number. @return The encode parameter range or null if none is set.
5515 Get the embedded Mac file. @return The embedded Mac file for this file spec.
5516 Get the embedded Unix file. @return The embedded file for this file spec.
5517 Create a new CalGray color space.
5518 Get the embedded unicode file. @return The embedded unicode file for this file spec.
5519 Creates a new CalRGB color space.
5520 Creates a new Lab color space.
5521 Creates a new CalGray color space using the given COS array. @param array the COS array which represents this color space
5522 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
5523 Creates a new Lab color space from a PDF array. @param lab the color space array
5524 Indicates whether an optional content group is enabled. @param group the group object @return true if the group is enabled
5525 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
5526 Enables or disables all optional content groups with the given name. @param groupName the group name @param enable true to enable, false to disable @return true if at least one group with this name already had an on or off setting, false otherwise
5527 Set the selected option given its index, and try to update the visual appearance. NOTE: this method is only usable if there are export values and used for radio buttons with FLAG_RADIOS_IN_UNISON not set. @param index index of option to be selected @throws IOException if the value could not be set @throws IllegalArgumentException if the index provided is not a valid index.
5528 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
5529 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if there is an error getting the color space or doing background color conversion.
5530 Search acroform fields for signature field with specific signature dictionary. @param fieldIterator iterator on all fields. @param sigObject signature object (the /V part). @return a signature field if found, or null if none was found.
5531 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
5532 Returns the appearance stream to process for the given annotation. May be used to render a specific appearance such as "hover". @param annotation The current annotation. @return The stream to process.
5533 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
5534 Add font resources from the widget to the AcroForm to make sure embedded fonts are being used and not added by ensureFontResources potentially using a fallback font. @param acroFormResources AcroForm default resources, should not be null. @param annotation annotation, should not be null.
5535 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
5536 Get the values to set individual buttons within a group to the on state. <p>The On value could be an arbitrary string as long as it is within the limitations of a PDF name object. The Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the potential values setting the check box to the On state. If an empty Set is returned there is no appearance definition.
5537 Gets a name value. @param name the attribute name @param defaultValue the default value @return the name value
5538 This will tell if this radio button is currently checked or not. This is equivalent to calling {@link #getValue()}. @return true If this field is checked.
5539 This will retrieve the border effect, see the STYLE_* constants for valid values. @return the effect of the border or {@link #STYLE_SOLID} if none is found.
5540 Checks the check box. @throws IOException if the appearance couldn't be generated.
5541 Convenience method for annotations: sets the line with and dash style. @param lineWidth The line width. @param bs The border style, may be null. @param border The border array, must have at least three entries. This is only used if the border style is null. @throws IOException If there is an error writing to the content stream.
5542 Returns the index of the given page, or -1 if it does not exist. @param page The page to search for. @return the zero-based index of the given page, or -1 if the page is not found.
5543 Create a new document to write the split contents to. @return the newly created PDDocument. @throws IOException If there is an problem creating the new document.
5544 Sets the PDF specification version for this document. @param newVersion the new PDF version (e.g. 1.4f)
5545 Sets the parent to the given node. @param parentNode the node to be set as parent
5546 Returns the structure tree root. @return the structure tree root
5547 Set the children of this named tree. @param kids The children of this named tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNames(Map)} with a map and pass a single element list here.
5548 Returns a list of objects for the kids (K). @return a list of objects for the kids, never null.
5549 Set the names for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param names map of names to objects, or <code>null</code> for nothing.
5550 This will get the encryption dictionary for this document. This will still return the parameters if the document was decrypted. As the encryption architecture in PDF documents is pluggable this returns an abstract class, but the only supported subclass at this time is a PDStandardEncryption object. @return The encryption dictionary(most likely a PDStandardEncryption object)
5551 Creates an page label dictionary for a document using the information in the given COS dictionary. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @param dict an existing page label dictionary @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels) @throws IOException If something goes wrong during the number tree conversion.
5552 Prepare for decryption. @throws InvalidPasswordException If the password is incorrect. @throws IOException if something went wrong
5553 Get the encode for the input parameter. @param paramNum The function parameter number. @return The encode parameter range or null if none is set.
5554 Create a new CalGray color space.
5555 Creates a new CalRGB color space.
5556 Creates a new Lab color space.
5557 Creates a new CalGray color space using the given COS array. @param array the COS array which represents this color space
5558 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
5559 Reads the font's Encoding entry, which should be a CMap name/stream.
5560 Creates a new Lab color space from a PDF array. @param lab the color space array
5561 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
5562 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
5563 Some Type 1 fonts have an invalid Length1, which causes the binary segment of the font to be truncated, see PDFBOX-2350, PDFBOX-3677. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @return repaired Length1 value
5564 Some Type 1 fonts have an invalid Length2, see PDFBOX-3475. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @param length2 Length2 from the Type 1 stream @return repaired Length2 value
5565 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if there is an error getting the color space or doing background color conversion.
5566 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
5567 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
5568 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
5569 This will return the value for the manner to display a fractional value. @return the manner to display a fractional value
5570 This will return the text to be used between orders of thousands in display of numerical values. @return thousands separator
5571 Gets a name value. @param name the attribute name @param defaultValue the default value @return the name value
5572 This will return the text to be used as the decimal point in displaying numerical values. @return decimal separator
5573 This will retrieve the border effect, see the STYLE_* constants for valid values. @return the effect of the border or {@link #STYLE_SOLID} if none is found.
5574 This will return the text to be concatenated to the left of the label specified by U. @return label prefix
5575 This will return the text to be concatenated after the label specified by U. @return label suffix
5576 Convenience method for annotations: sets the line with and dash style. @param lineWidth The line width. @param bs The border style, may be null. @param border The border array, must have at least three entries. This is only used if the border style is null. @throws IOException If there is an error writing to the content stream.
5577 This will return a value indicating the ordering of the label specified by U to the calculated unit value. @return label position
5578 Create a new document to write the split contents to. @return the newly created PDDocument. @throws IOException If there is an problem creating the new document.
5579 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
5580 Sets the PDF specification version for this document. @param newVersion the new PDF version (e.g. 1.4f)
5581 Returns a list of matching fonts, scored by suitability. Positive scores indicate matches for certain attributes, while negative scores indicate mismatches. Zero scores are neutral. @param fontDescriptor FontDescriptor, always present. @param cidSystemInfo Font's CIDSystemInfo, may be null.
5582 Returns the structure tree root. @return the structure tree root
5583 Returns a list of objects for the kids (K). @return a list of objects for the kids, never null.
5584 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @return The name converted to a string.
5585 This will get the encryption dictionary for this document. This will still return the parameters if the document was decrypted. As the encryption architecture in PDF documents is pluggable this returns an abstract class, but the only supported subclass at this time is a PDStandardEncryption object. @return The encryption dictionary(most likely a PDStandardEncryption object)
5586 Prepare for decryption. @throws InvalidPasswordException If the password is incorrect. @throws IOException if something went wrong
5587 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @return Decoded stream. @throws IOException If the stream could not be read.
5588 Constructor. @param stream The stream to parse. @param document The document for the current parsing. @throws IOException If there is an error initializing the stream.
5589 Constructor. @param stream The stream to parse. @throws IOException If there is an error initializing the stream.
5590 Reads the font's Encoding entry, which should be a CMap name/stream.
5591 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
5592 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @param trueTypeFont The true type font used to create the parent font @throws IOException if the font could not be read
5593 Some Type 1 fonts have an invalid Length1, which causes the binary segment of the font to be truncated, see PDFBOX-2350, PDFBOX-3677. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @return repaired Length1 value
5594 Reads a CMap given a COS Stream or Name. May return null if a predefined CMap does not exist. @param base COSName or COSStream @return the CMap if present @throws IOException if the CMap could not be read
5595 Some Type 1 fonts have an invalid Length2, see PDFBOX-3475. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @param length2 Length2 from the Type 1 stream @return repaired Length2 value
5596 This will return the value for the manner to display a fractional value. @return the manner to display a fractional value
5597 This will return the text to be used between orders of thousands in display of numerical values. @return thousands separator
5598 This will return the text to be used as the decimal point in displaying numerical values. @return decimal separator
5599 This will return the text to be concatenated to the left of the label specified by U. @return label prefix
5600 This will return the text to be concatenated after the label specified by U. @return label suffix
5601 This will return a value indicating the ordering of the label specified by U to the calculated unit value. @return label position
5602 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
5603 Returns a list of matching fonts, scored by suitability. Positive scores indicate matches for certain attributes, while negative scores indicate mismatches. Zero scores are neutral. @param fontDescriptor FontDescriptor, always present. @param cidSystemInfo Font's CIDSystemInfo, may be null.
5604 Creates a circle annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5605 Creates a square annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5606 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @return The name converted to a string.
5607 Constructor. @param dict The annotations dictionary.
5608 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @return Decoded stream. @throws IOException If the stream could not be read.
5609 Constructor. @param dict The annotations dictionary.
5610 Constructor. @param dict The annotations dictionary.
5611 Constructor. @param dict The annotations dictionary.
5612 Constructor. @param stream The stream to parse. @param document The document for the current parsing. @throws IOException If there is an error initializing the stream.
5613 This will write the body of the document. @param doc The document to write the body for. @throws IOException If there is an error writing the data.
5614 Constructor. @param stream The stream to parse. @throws IOException If there is an error initializing the stream.
5615 Constructor. @param js Some javascript code.
5616 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
5617 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @param trueTypeFont The true type font used to create the parent font @throws IOException if the font could not be read
5618 Reads a CMap given a COS Stream or Name. May return null if a predefined CMap does not exist. @param base COSName or COSStream @return the CMap if present @throws IOException if the CMap could not be read
5619 Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param colorSpace color space for this tiling @param color color for this tiling @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
5620 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @return the image without any masks applied @throws IOException if the image cannot be read
5621 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param colorKey an optional color key mask @return content of this image as an RGB buffered image @throws IOException if the image cannot be read
5622 Creates a circle annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5623 Pushes the given stream's resources, returning the previous resources.
5624 Creates a square annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
5625 Constructor. @param dict The annotations dictionary.
5626 Constructor. @param dict The annotations dictionary.
5627 Constructor. @param dict The annotations dictionary.
5628 Constructor. @param dict The annotations dictionary.
5629 This will write the body of the document. @param doc The document to write the body for. @throws IOException If there is an error writing the data.
5630 Calculate the transform to be used when positioning the overlay. The default implementation centers on the destination. Override this method to do your own, e.g. move to a corner, or rotate. @param page The page that will get the overlay. @param overlayMediaBox The overlay media box. @return The affine transform to be used.
5631 Clips the given box to the bounds of the media box.
5632 Constructor. @param js Some javascript code.
5633 This will find the MediaBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The MediaBox at this level in the hierarchy.
5634 Tells if this is a tagged PDF. @return true If this is a tagged PDF.
5635 Tells if structure elements use user properties. @return A boolean telling if the structure elements use user properties.
5636 Tells if this PDF contain 'suspect' tags. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @return true if the suspect flag has been set.
5637 This will specify whether to track the mouse position when the URI is resolved. Default value: false. This entry applies only to actions triggered by the user's clicking an annotation; it is ignored for actions associated with outline items or with a document's OpenAction entry. @return A flag specifying whether to track the mouse position when the URI is resolved.
5638 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed.
5639 This will return the value indication if the denominator of the fractional value is reduced/truncated . @return fd
5640 Specifies whether the property shall be hidden. @param hidden <code>true</code> if the property shall be hidden, <code>false</code> otherwise
5641 This will get the overprint control for non stroking operations. If this value is null then the regular overprint control value will be returned. @return The overprint control or null if one has not been set.
5642 Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param colorSpace color space for this tiling @param color color for this tiling @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
5643 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
5644 Set the invisible flag. @param invisible The new invisible flag.
5645 Set the hidden flag. @param hidden The new hidden flag.
5646 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @return the image without any masks applied @throws IOException if the image cannot be read
5647 Set the printed flag. @param printed The new printed flag.
5648 Set the noZoom flag. @param noZoom The new noZoom flag.
5649 Set the noRotate flag. @param noRotate The new noRotate flag.
5650 Set the noView flag. @param noView The new noView flag.
5651 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param colorKey an optional color key mask @return content of this image as an RGB buffered image @throws IOException if the image cannot be read
5652 Set the readOnly flag. @param readOnly The new readOnly flag.
5653 Set the locked flag. @param locked The new locked flag.
5654 Pushes the given stream's resources, returning the previous resources.
5655 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
5656 Set the LockedContents flag. @param lockedContents The new LockedContents flag.
5657 Set the invisible flag. @param invisible The new invisible flag.
5658 Set the hidden flag. @param hidden The new hidden flag.
5659 Set the printed flag. @param printed The new printed flag.
5660 Set the noZoom flag. @param noZoom The new noZoom flag.
5661 Calculate the transform to be used when positioning the overlay. The default implementation centers on the destination. Override this method to do your own, e.g. move to a corner, or rotate. @param page The page that will get the overlay. @param overlayMediaBox The overlay media box. @return The affine transform to be used.
5662 Set the noRotate flag. @param noRotate The new noRotate flag.
5663 Clips the given box to the bounds of the media box.
5664 Set the noView flag. @param noView The new noView flag.
5665 Set the readOnly flag. @param readOnly The new readOnly flag.
5666 This will find the MediaBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The MediaBox at this level in the hierarchy.
5667 Set the locked flag. @param locked The new locked flag.
5668 Tells if this is a tagged PDF. @return true If this is a tagged PDF.
5669 Tells if structure elements use user properties. @return A boolean telling if the structure elements use user properties.
5670 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
5671 Tells if this PDF contain 'suspect' tags. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @return true if the suspect flag has been set.
5672 Set the LockedContents flag. If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size. @param lockedContents The new LockedContents flag value. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=393">PDF 32000-1:2008 12.5.3, Table 165</a> @see #isLockedContents() @see #FLAG_LOCKED_CONTENTS @since PDF 1.7
5673 This will specify whether to track the mouse position when the URI is resolved. Default value: false. This entry applies only to actions triggered by the user's clicking an annotation; it is ignored for actions associated with outline items or with a document's OpenAction entry. @return A flag specifying whether to track the mouse position when the URI is resolved.
5674 set true if the filter shall be required. @param flag if true, the specified Filter shall be used when signing.
5675 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed.
5676 set true if the subfilter shall be required. @param flag if true, the first supported SubFilter in the array shall be used when signing.
5677 This will return the value indication if the denominator of the fractional value is reduced/truncated . @return fd
5678 set true if the DigestMethod shall be required. @param flag if true, one digest from the array shall be used.
5679 set true if the V entry shall be required. @param flag if true, the V entry shall be used.
5680 Specifies whether the property shall be hidden. @param hidden <code>true</code> if the property shall be hidden, <code>false</code> otherwise
5681 set true if the Reason shall be required. @param flag if true, the Reason entry shall be used.
5682 set true if the LegalAttestation shall be required. @param flag if true, the LegalAttestation entry shall be used.
5683 This will get the overprint control for non stroking operations. If this value is null then the regular overprint control value will be returned. @return The overprint control or null if one has not been set.
5684 set true if the AddRevInfo shall be required. @param flag if true, the AddRevInfo shall be used.
5685 set true if subject shall be required as a constraint on signature. @param flag if true, the specified Subject shall be enforced as a constraint.
5686 set true if Issuer shall be required as a constraint on signature. @param flag if true, the specified Issuer shall be enforced as a constraint.
5687 set true if OID shall be required as a constraint on signature. @param flag if true, the specified OID shall be enforced as a constraint.
5688 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
5689 set true if subject DN shall be required as a constraint on signature. @param flag if true, the specified Subject DN shall be enforced as a constraint.
5690 Set the invisible flag. @param invisible The new invisible flag.
5691 set true if KeyUsage shall be required as a constraint on signature. @param flag if true, the specified KeyUsage shall be enforced as a constraint.
5692 Set the hidden flag. @param hidden The new hidden flag.
5693 set true if URL shall be required as a constraint on signature. @param flag if true, the specified URL shall be enforced as a constraint.
5694 Set the printed flag. @param printed The new printed flag.
5695 Set the SignaturesExist bit. @param signaturesExist The value for SignaturesExist.
5696 Set the noZoom flag. @param noZoom The new noZoom flag.
5697 Set the AppendOnly bit. @param appendOnly The value for AppendOnly.
5698 Set the noRotate flag. @param noRotate The new noRotate flag.
5699 Set the Sort bit. @see #isSort() @param sort The value for Sort.
5700 Set the noView flag. @param noView The new noView flag.
5701 Set the MultiSelect bit. @param multiSelect The value for MultiSelect.
5702 Set the readOnly flag. @param readOnly The new readOnly flag.
5703 Set the DoNotSpellCheck bit. @param doNotSpellCheck The value for DoNotSpellCheck.
5704 Set the locked flag. @param locked The new locked flag.
5705 Set the CommitOnSelChange bit. @param commitOnSelChange The value for CommitOnSelChange.
5706 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
5707 Set the Combo bit. @param combo The value for Combo.
5708 Set the LockedContents flag. @param lockedContents The new LockedContents flag.
5709 Set the Edit bit. @param edit The value for Edit.
5710 Set the invisible flag. @param invisible The new invisible flag.
5711 sets the field to be read-only. @param readonly The new flag for readonly.
5712 Set the hidden flag. @param hidden The new hidden flag.
5713 sets the flag whether the field is to be required to have a value at the time it is exported by a submit-form action. @param required The new flag for required.
5714 Set the printed flag. @param printed The new printed flag.
5715 sets the field to be not exported. @param noExport The new flag for noExport.
5716 Set the noZoom flag. @param noZoom The new noZoom flag.
5717 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
5718 Set the noRotate flag. @param noRotate The new noRotate flag.
5719 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
5720 Set the noView flag. @param noView The new noView flag.
5721 From the PDF Spec <br> If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons). @param radiosInUnison The new flag for radiosInUnison.
5722 Set the readOnly flag. @param readOnly The new readOnly flag.
5723 Set the multiline bit. @param multiline The value for the multiline.
5724 Set the locked flag. @param locked The new locked flag.
5725 Set the password bit. @param password The value for the password.
5726 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
5727 Set the file select bit. @param fileSelect The value for the fileSelect.
5728 Set the LockedContents flag. If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size. @param lockedContents The new LockedContents flag value. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=393">PDF 32000-1:2008 12.5.3, Table 165</a> @see #isLockedContents() @see #FLAG_LOCKED_CONTENTS @since PDF 1.7
5729 Set the doNotSpellCheck bit. @param doNotSpellCheck The value for the doNotSpellCheck.
5730 set true if the filter shall be required. @param flag if true, the specified Filter shall be used when signing.
5731 set true if the subfilter shall be required. @param flag if true, the first supported SubFilter in the array shall be used when signing.
5732 Set the doNotScroll bit. @param doNotScroll The value for the doNotScroll.
5733 set true if the DigestMethod shall be required. @param flag if true, one digest from the array shall be used.
5734 Set the comb bit. @param comb The value for the comb.
5735 set true if the V entry shall be required. @param flag if true, the V entry shall be used.
5736 Set the richText bit. @param richText The value for the richText.
5737 set true if the Reason shall be required. @param flag if true, the Reason entry shall be used.
5738 set true if the LegalAttestation shall be required. @param flag if true, the LegalAttestation entry shall be used.
5739 Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1 @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @return The value of the embedded integer.
5740 set true if the AddRevInfo shall be required. @param flag if true, the AddRevInfo shall be used.
5741 This will return the precision or denominator of a fractional amount. @return the precision or denominator
5742 set true if subject shall be required as a constraint on signature. @param flag if true, the specified Subject shall be enforced as a constraint.
5743 set true if Issuer shall be required as a constraint on signature. @param flag if true, the specified Issuer shall be enforced as a constraint.
5744 set true if OID shall be required as a constraint on signature. @param flag if true, the specified OID shall be enforced as a constraint.
5745 set true if subject DN shall be required as a constraint on signature. @param flag if true, the specified Subject DN shall be enforced as a constraint.
5746 set true if KeyUsage shall be required as a constraint on signature. @param flag if true, the specified KeyUsage shall be enforced as a constraint.
5747 set true if URL shall be required as a constraint on signature. @param flag if true, the specified URL shall be enforced as a constraint.
5748 Wraps and <code>OutputStream</code> in a predictor decoding stream as necessary. If no predictor is specified by the parameters, the original stream is returned as is. @param out The stream to which decoded data should be written @param decodeParams Decode parameters for the stream @return An <code>OutputStream</code> is returned, which will write decoded data into the given stream. If no predictor is specified, the original stream is returned.
5749 Set the SignaturesExist bit. @param signaturesExist The value for SignaturesExist.
5750 This will get the key of this Page in the structural parent tree. @return the integer key of the page's entry in the structural parent tree or -1 if there isn't any.
5751 Removes the given COS page.
5752 Set the AppendOnly bit. @param appendOnly The value for AppendOnly.
5753 Adds the given page to this page tree. @param page The page to add.
5754 Set the Sort bit. @see #isSort() @param sort The value for Sort.
5755 Set the MultiSelect bit. @param multiSelect The value for MultiSelect.
5756 Get the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @return Number of bits for each output value.
5757 Set the DoNotSpellCheck bit. @param doNotSpellCheck The value for DoNotSpellCheck.
5758 Gets the marked content identifier. @return the marked content identifier
5759 Set the CommitOnSelChange bit. @param commitOnSelChange The value for CommitOnSelChange.
5760 Returns The next key for the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @return The next key for the parent tree
5761 Set the Combo bit. @param combo The value for Combo.
5762 Set the Edit bit. @param edit The value for Edit.
5763 Gets the marked-content identifier. @return the marked-content identifier, or -1 if it doesn't exist.
5764 sets the field to be read-only. @param readonly The new flag for readonly.
5765 sets the flag whether the field is to be required to have a value at the time it is exported by a submit-form action. @param required The new flag for required.
5766 sets the field to be not exported. @param noExport The new flag for noExport.
5767 Creates a new CCITT Fax compressed image XObject from a TIFF file. @param document the document to create the image as part of. @param reader the random access TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject, or null if no such page @throws IOException if there is an error reading the TIFF data.
5768 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
5769 This will get the line cap style. @return null or the LC value of the dictionary.
5770 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
5771 This will get the line join style. @return null or the LJ value in the dictionary.
5772 From the PDF Spec <br> If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons). @param radiosInUnison The new flag for radiosInUnison.
5773 This will get the key of this annotation in the structural parent tree. @return the integer key of the annotation's entry in the structural parent tree or -1 if there isn't any.
5774 Set the multiline bit. @param multiline The value for the multiline.
5775 Return the P value. @return the P value
5776 Set the password bit. @param password The value for the password.
5777 Returns the maximum number of characters of the text field. @return the maximum number of characters, returns -1 if the value isn't present
5778 Set the file select bit. @param fileSelect The value for the fileSelect.
5779 Gets an integer. @param name the attribute name @param defaultValue the default value @return the integer
5780 Set the doNotSpellCheck bit. @param doNotSpellCheck The value for the doNotSpellCheck.
5781 Get the invisible flag. @return The invisible flag.
5782 Set the doNotScroll bit. @param doNotScroll The value for the doNotScroll.
5783 Get the hidden flag. @return The hidden flag.
5784 Set the comb bit. @param comb The value for the comb.
5785 Get the printed flag. @return The printed flag.
5786 Set the richText bit. @param richText The value for the richText.
5787 Get the noZoom flag. @return The noZoom flag.
5788 Get the noRotate flag. @return The noRotate flag.
5789 Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1 @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @return The value of the embedded integer.
5790 Get the noView flag. @return The noView flag.
5791 This will return the precision or denominator of a fractional amount. @return the precision or denominator
5792 Get the readOnly flag. @return The readOnly flag.
5793 Get the locked flag. @return The locked flag.
5794 Get the toggleNoView flag. @return The toggleNoView flag.
5795 Get the LockedContents flag. @return The LockedContents flag.
5796 Get the invisible flag. @return The invisible flag.
5797 Get the hidden flag. @return The hidden flag.
5798 Wraps and <code>OutputStream</code> in a predictor decoding stream as necessary. If no predictor is specified by the parameters, the original stream is returned as is. @param out The stream to which decoded data should be written @param decodeParams Decode parameters for the stream @return An <code>OutputStream</code> is returned, which will write decoded data into the given stream. If no predictor is specified, the original stream is returned.
5799 Get the printed flag. @return The printed flag.
5800 This will get the key of this Page in the structural parent tree. @return the integer key of the page's entry in the structural parent tree or -1 if there isn't any.
5801 Get the noZoom flag. @return The noZoom flag.
5802 Removes the given COS page.
5803 Get the noRotate flag. @return The noRotate flag.
5804 Adds the given page to this page tree. @param page The page to add.
5805 Get the noView flag. @return The noView flag.
5806 Get the readOnly flag. @return The readOnly flag.
5807 Get the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @return Number of bits for each output value.
5808 Get the locked flag. @return The locked flag.
5809 Gets the marked content identifier. @return the marked content identifier
5810 Get the toggleNoView flag. @return The toggleNoView flag.
5811 Returns The next key for the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @return The next key for the parent tree
5812 Get the LockedContents flag. @return The LockedContents flag. @see #setLockedContents(boolean)
5813 Gets the marked-content identifier. @return the marked-content identifier, or -1 if it doesn't exist.
5814 @return true if the Filter is required
5815 @return true if the SubFilter is required
5816 @return true if the DigestMethod is required
5817 Creates a new CCITT Fax compressed image XObject from a TIFF file. @param document the document to create the image as part of. @param reader the random access TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject, or null if no such page @throws IOException if there is an error reading the TIFF data.
5818 @return true if the V entry is required
5819 This will get the line cap style. @return null or the LC value of the dictionary.
5820 @return true if the Reason is required
5821 This will get the line join style. @return null or the LJ value in the dictionary.
5822 @return true if the LegalAttestation is required
5823 This will get the key of this annotation in the structural parent tree. @return the integer key of the annotation's entry in the structural parent tree or -1 if there isn't any.
5824 @return true if the AddRevInfo is required
5825 @return true if the Subject is required
5826 Return the P value. @return the P value
5827 @return true if the Issuer is required
5828 Returns the maximum number of characters of the text field. @return the maximum number of characters, returns -1 if the value isn't present
5829 @return true if the OID is required
5830 Gets an integer. @param name the attribute name @param defaultValue the default value @return the integer
5831 @return true if the Subject DN is required
5832 Get the invisible flag. @return The invisible flag.
5833 @return true if the KeyUsage is required
5834 Get the hidden flag. @return The hidden flag.
5835 @return true if the URL is required
5836 Get the printed flag. @return The printed flag.
5837 Determines if SignaturesExist is set. @return true if the document contains at least one signature.
5838 Get the noZoom flag. @return The noZoom flag.
5839 Determines if AppendOnly is set. @return true if the document contains signatures that may be invalidated if the file is saved.
5840 Get the noRotate flag. @return The noRotate flag.
5841 Determines if push button bit is set. @return true if type of button field is a push button.
5842 Get the noView flag. @return The noView flag.
5843 Determines if radio button bit is set. @return true if type of button field is a radio button.
5844 Get the readOnly flag. @return The readOnly flag.
5845 Determines if Sort is set. <p> If set, the field’s option items shall be sorted alphabetically. The sorting has to be done when writing the PDF. PDF Readers are supposed to display the options in the order in which they occur in the Opt array. </p> @return true if the options are sorted.
5846 Get the locked flag. @return The locked flag.
5847 Determines if MultiSelect is set. @return true if multi select is allowed.
5848 Get the toggleNoView flag. @return The toggleNoView flag.
5849 Determines if DoNotSpellCheck is set. @return true if spell checker is disabled.
5850 Get the LockedContents flag. @return The LockedContents flag.
5851 Determines if CommitOnSelChange is set. @return true if value shall be committed as soon as a selection is made.
5852 Get the invisible flag. @return The invisible flag.
5853 Get the hidden flag. @return The hidden flag.
5854 Determines if Combo is set. @return true if value the choice is a combo box..
5855 Get the printed flag. @return The printed flag.
5856 Determines if Edit is set. @return true if the combo box shall include an editable text box as well as a drop-down list.
5857 Get the noZoom flag. @return The noZoom flag.
5858 @return true if the field is readonly
5859 Get the noRotate flag. @return The noRotate flag.
5860 @return true if the field is required to have a value at the time it is exported by a submit-form action.
5861 Get the noView flag. @return The noView flag.
5862 @return true if the field is not to be exported.
5863 Get the readOnly flag. @return The readOnly flag.
5864 @return true If the flag is set for radios in unison.
5865 Get the locked flag. @return The locked flag.
5866 @return true if the field is multiline
5867 Get the toggleNoView flag. @return The toggleNoView flag.
5868 @return true if the field is a password field.
5869 Get the LockedContents flag. @return The LockedContents flag. @see #setLockedContents(boolean)
5870 @return true if the field is a file select field.
5871 @return true if the Filter is required
5872 @return true if the field is not suppose to spell check.
5873 @return true if the SubFilter is required
5874 @return true if the field is not suppose to scroll.
5875 @return true if the DigestMethod is required
5876 @return true if the field is not suppose to comb the text display.
5877 @return true if the V entry is required
5878 @return true if the field is a rich text field.
5879 @return true if the Reason is required
5880 Returns the page at the given index. @param index zero-based index @return the page at the given index @throws IllegalStateException if the requested index isn't found or doesn't point to a valid page dictionary @throws IndexOutOfBoundsException if the requested index is higher than the page count
5881 @return true if the LegalAttestation is required
5882 This will return the total page count of the PDF document. @return The total number of pages in the PDF document.
5883 @return true if the AddRevInfo is required
5884 @return true if the Subject is required
5885 Adds an attribute object. @param attributeObject the attribute object
5886 @return true if the Issuer is required
5887 Updates the revision number for the given attribute object. @param attributeObject the attribute object
5888 @return true if the OID is required
5889 Adds a class name. @param className the class name
5890 @return true if the Subject DN is required
5891 Increments th revision number.
5892 @return true if the KeyUsage is required
5893 @return true if the URL is required
5894 Determines if SignaturesExist is set. @return true if the document contains at least one signature.
5895 Determines if AppendOnly is set. @return true if the document contains signatures that may be invalidated if the file is saved.
5896 Determines if push button bit is set. @return true if type of button field is a push button.
5897 Determines if radio button bit is set. @return true if type of button field is a radio button.
5898 Determines if Sort is set. <p> If set, the field’s option items shall be sorted alphabetically. The sorting has to be done when writing the PDF. PDF Readers are supposed to display the options in the order in which they occur in the Opt array. </p> @return true if the options are sorted.
5899 Prepares everything to decrypt the document. @param encryption encryption dictionary, can be retrieved via {@link PDDocument#getEncryption()} @param documentIDArray document id which is returned via {@link org.apache.pdfbox.cos.COSDocument#getDocumentID()} (not used by this handler) @param decryptionMaterial Information used to decrypt the document. @throws IOException If there is an error accessing data. If verbose mode is enabled, the exception message will provide more details why the match wasn't successful.
5900 Determines if MultiSelect is set. @return true if multi select is allowed.
5901 This will get the O entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner key. @throws IOException If there is an error accessing the data.
5902 Determines if DoNotSpellCheck is set. @return true if spell checker is disabled.
5903 This will get the U entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user key. @throws IOException If there is an error accessing the data.
5904 Determines if CommitOnSelChange is set. @return true if value shall be committed as soon as a selection is made.
5905 Determines if Combo is set. @return true if value the choice is a combo box..
5906 Returns the displacement vector (w0, w1) in text space, for the given character. For horizontal text only the x component is used, for vertical text only the y component. @param code character code @return displacement vector @throws IOException if the data could not be read
5907 Determines if Edit is set. @return true if the combo box shall include an editable text box as well as a drop-down list.
5908 Returns the width of the given Unicode string. @param text The text to get the width of. @return The width of the string in 1/1000 units of text space. @throws IOException If there is an error getting the width information. @throws IllegalArgumentException if a character isn't supported by the font.
5909 @return true if the field is readonly
5910 @return true if the field is required to have a value at the time it is exported by a submit-form action.
5911 @return true if the field is not to be exported.
5912 @return true If the flag is set for radios in unison.
5913 Returns the pattern resource with the given name, or null if none exists. @param name Name of the pattern resource. @return the pattern with the given name or null @throws IOException if something went wrong.
5914 @return true if the field is multiline
5915 @return true if the field is a password field.
5916 Processes the operators of the given content stream. @param contentStream to content stream to parse. @throws IOException if there is an error reading or parsing the content stream.
5917 @return true if the field is a file select field.
5918 Returns the shading resource with the given name, or null if none exists. @param name Name of the shading resource. @return the shading state with the given name or null @throws IOException if something went wrong.
5919 @return true if the field is not suppose to spell check.
5920 @return true if the field is not suppose to scroll.
5921 This will get the shading resources for this pattern. @return The shading resources for this pattern. @throws IOException if something went wrong
5922 @return true if the field is not suppose to comb the text display.
5923 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
5924 @return true if the field is a rich text field.
5925 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
5926 Returns the page at the given index. @param index zero-based index @return the page at the given index @throws IllegalStateException if the requested index isn't found or doesn't point to a valid page dictionary @throws IndexOutOfBoundsException if the requested index is higher than the page count
5927 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
5928 This will return the total page count of the PDF document. @return The total number of pages in the PDF document.
5929 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
5930 Adds an attribute object. @param attributeObject the attribute object
5931 Updates the revision number for the given attribute object. @param attributeObject the attribute object
5932 Adds a class name. @param className the class name
5933 Creates a COSField subclass from the given field. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created @return the corresponding PDField instance
5934 Increments th revision number.
5935 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left). @param renderer the document renderer. Useful if {@link PDFRenderer} has been subclassed.
5936 Creates a new PDFRenderer. @param document the document to render
5937 This will load a document from a file. @param filename The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
5938 Prepares everything to decrypt the document. @param encryption encryption dictionary, can be retrieved via {@link PDDocument#getEncryption()} @param documentIDArray document id which is returned via {@link org.apache.pdfbox.cos.COSDocument#getDocumentID()} (not used by this handler) @param decryptionMaterial Information used to decrypt the document. @throws IOException If there is an error accessing data. If verbose mode is enabled, the exception message will provide more details why the match wasn't successful.
5939 This will get the O entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner key. @throws IOException If there is an error accessing the data.
5940 Parses a PDF. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
5941 This will get the U entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user key. @throws IOException If there is an error accessing the data.
5942 Returns the displacement vector (w0, w1) in text space, for the given character. For horizontal text only the x component is used, for vertical text only the y component. @param code character code @return displacement vector @throws IOException if the data could not be read
5943 Returns the width of the given Unicode string. @param text The text to get the width of. @return The width of the string in 1/1000 units of text space. @throws IOException If there is an error getting the width information. @throws IllegalArgumentException if a character isn't supported by the font.
5944 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
5945 Returns the pattern resource with the given name, or null if none exists. @param name Name of the pattern resource. @return the pattern with the given name or null @throws IOException if something went wrong.
5946 Processes the operators of the given content stream. @param contentStream to content stream to parse. @throws IOException if there is an error reading or parsing the content stream.
5947 Returns the shading resource with the given name, or null if none exists. @param name Name of the shading resource. @return the shading state with the given name or null @throws IOException if something went wrong.
5948 This will get the shading resources for this pattern. @return The shading resources for this pattern. @throws IOException if something went wrong
5949 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
5950 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
5951 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
5952 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
5953 RG Set the stroking colour space to DeviceRGB and set the colour to use for stroking operations. @param operator The operator that is being executed. @param arguments List @throws IOException If the color space cannot be read.
5954 Returns the XObject resource with the given name, or null if none exists. @param name Name of the XObject resource. @return the XObject with the given name or null @throws IOException if something went wrong.
5955 Creates a COSField subclass from the given field. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created @return the corresponding PDField instance
5956 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
5957 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
5958 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5959 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left). @param renderer the document renderer. Useful if {@link PDFRenderer} has been subclassed.
5960 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
5961 Creates a new PDFRenderer. @param document the document to render
5962 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
5963 This will load a document from a file. @param filename The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
5964 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
5965 Parses a PDF. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
5966 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
5967 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5968 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
5969 Indicates whether <em>at least one</em> optional content group with this name is enabled. There may be disabled optional content groups with this name even if this function returns true. @param groupName the group name @return true if at least one group is enabled
5970 Indicates whether an optional content group is enabled. @param group the group @return true if the group is enabled
5971 Checks value. @param value Name of radio button to select @throws IllegalArgumentException if the value is not a valid option.
5972 RG Set the stroking colour space to DeviceRGB and set the colour to use for stroking operations. @param operator The operator that is being executed. @param arguments List @throws IOException If the color space cannot be read.
5973 Returns the XObject resource with the given name, or null if none exists. @param name Name of the XObject resource. @return the XObject with the given name or null @throws IOException if something went wrong.
5974 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
5975 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
5976 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5977 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
5978 Replace the page destinations, if the source and destination pages are in the target document. This must be called after all pages (and its annotations) are processed. @param destinationDocument
5979 Returns the page labels descriptor of the document. @return the page labels descriptor of the document. @throws IOException If there is a problem retrieving the page labels.
5980 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
5981 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
5982 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
5983 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5984 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
5985 Helper method for creating new documents at the appropriate pages. @throws IOException If there is an error creating the new document.
5986 This will write the header to the PDF document. @param doc The document to get the data from. @throws IOException If there is an error writing to the stream.
5987 Sets the optional content properties dictionary. The document version is incremented to 1.5 if lower. @param ocProperties the optional properties dictionary
5988 Indicates whether <em>at least one</em> optional content group with this name is enabled. There may be disabled optional content groups with this name even if this function returns true. @param groupName the group name @return true if at least one group is enabled
5989 Returns the role map. @return the role map
5990 Indicates whether an optional content group is enabled. @param group the group @return true if the group is enabled
5991 Checks value. @param value Name of radio button to select @throws IllegalArgumentException if the value is not a valid option.
5992 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @param signInterface class to be used for signing; {@code null} if external signing would be performed or there will be no signing at all @throws IOException If an error occurs while generating the data. @throws IllegalStateException If the document has an encryption dictionary but no protection policy.
5993 Adds the given {@link COSBase} to this pool, using the given {@link COSObjectKey} as it's referencable ID. This method shall determine an appropriate key, for yet unregistered objects, to register them. Depending on the type of object, it shall either be appended as-is or shall be appended to a compressed {@link COSWriterObjectStream}. @param key The {@link COSObjectKey} that shall be used as the {@link COSBase}s ID, if possible. @param base The {@link COSBase}, that shall be registered in this pool.
5994 Protects the document with a protection policy. The document content will be really encrypted when it will be saved. This method only marks the document for encryption. It also calls {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was set to true previously and logs a warning. <p> Do not use the document after saving, because the structures are encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy @param policy The protection policy. @throws IOException if there isn't any suitable security handler.
5995 Prepare the document for encryption. @param doc The document that will be encrypted. @throws IOException If there is an error while encrypting.
5996 Returns the name of the glyph with the given character code. This is done by looking up the code in the parent font's ToUnicode map and generating a glyph name from that.
5997 Returns the GID for the given character code. @param code character code @return GID @throws IOException if the mapping could not be read
5998 Replace the page destinations, if the source and destination pages are in the target document. This must be called after all pages (and its annotations) are processed. @param destinationDocument
5999 Get the mac subtype. @return The mac subtype.
6000 Returns the page labels descriptor of the document. @return the page labels descriptor of the document. @throws IOException If there is a problem retrieving the page labels.
6001 Get the mac Creator. @return The mac Creator.
6002 Get the mac ResFork. @return The mac ResFork.
6003 Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null. This method can also map CJK fonts via their CIDSystemInfo (ROS). @param fontDescriptor FontDescriptor @param cidSystemInfo the CID system info, e.g. "Adobe-Japan1", if any.
6004 Returns a new InputStream which reads the decoded stream data. @return InputStream containing decoded stream data. @throws IOException If the stream could not be read.
6005 Brute force search for all objects streams of a pdf. @param xrefTable the cross reference table of the document @throws IOException if something went wrong
6006 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
6007 Parse the object with the given key from the object stream with the given number. @param objstmObjNr the number of the offset stream @param key the key of the object to be parsed @return the parsed object @throws IOException if something went wrong when parsing the object
6008 Helper method for creating new documents at the appropriate pages. @throws IOException If there is an error creating the new document.
6009 Parses an xref object stream starting with indirect object id. @return value of PREV item in dictionary or <code>-1</code> if no such item exists
6010 This will write the header to the PDF document. @param doc The document to get the data from. @throws IOException If there is an error writing to the stream.
6011 Returns the content stream(s) of this page as a single input stream. @return An InputStream, never null. Multiple content streams are concatenated and separated with a newline. An empty stream is returned if the page doesn't have any content stream. @throws IOException If the stream could not be read
6012 Sets the optional content properties dictionary. The document version is incremented to 1.5 if lower. @param ocProperties the optional properties dictionary
6013 Returns the role map. @return the role map
6014 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
6015 Returns the descendant CIDFont.
6016 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @param signInterface class to be used for signing; {@code null} if external signing would be performed or there will be no signing at all @throws IOException If an error occurs while generating the data. @throws IllegalStateException If the document has an encryption dictionary but no protection policy.
6017 Adds the given {@link COSBase} to this pool, using the given {@link COSObjectKey} as it's referencable ID. This method shall determine an appropriate key, for yet unregistered objects, to register them. Depending on the type of object, it shall either be appended as-is or shall be appended to a compressed {@link COSWriterObjectStream}. @param key The {@link COSObjectKey} that shall be used as the {@link COSBase}s ID, if possible. @param base The {@link COSBase}, that shall be registered in this pool.
6018 Protects the document with a protection policy. The document content will be really encrypted when it will be saved. This method only marks the document for encryption. It also calls {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was set to true previously and logs a warning. <p> Do not use the document after saving, because the structures are encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy @param policy The protection policy. @throws IOException if there isn't any suitable security handler.
6019 Prepare the document for encryption. @param doc The document that will be encrypted. @throws IOException If there is an error while encrypting.
6020 Returns the name of the glyph with the given character code. This is done by looking up the code in the parent font's ToUnicode map and generating a glyph name from that.
6021 Returns the GID for the given character code. @param code character code @return GID @throws IOException if the mapping could not be read
6022 Get the mac subtype. @return The mac subtype.
6023 Get the mac Creator. @return The mac Creator.
6024 Create the correct annotation from the base COS object. @param base The COS object that is the annotation. @return The correctly typed annotation object, never null. @throws IOException If the annotation type is unknown.
6025 Get the mac ResFork. @return The mac ResFork.
6026 Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null. This method can also map CJK fonts via their CIDSystemInfo (ROS). @param fontDescriptor FontDescriptor @param cidSystemInfo the CID system info, e.g. "Adobe-Japan1", if any.
6027 Returns a new InputStream which reads the decoded stream data. @return InputStream containing decoded stream data. @throws IOException If the stream could not be read.
6028 Creates a new colored tiling Paint, i.e. one that has its own colors. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
6029 Brute force search for all objects streams of a pdf. @param xrefTable the cross reference table of the document @throws IOException if something went wrong
6030 Parse the object with the given key from the object stream with the given number. @param objstmObjNr the number of the offset stream @param key the key of the object to be parsed @return the parsed object @throws IOException if something went wrong when parsing the object
6031 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @return the image without any masks applied @throws IOException if the image cannot be read
6032 Parses an xref object stream starting with indirect object id. @return value of PREV item in dictionary or <code>-1</code> if no such item exists
6033 Returns the content stream(s) of this page as a single input stream. @return An InputStream, never null. Multiple content streams are concatenated and separated with a newline. An empty stream is returned if the page doesn't have any content stream. @throws IOException If the stream could not be read
6034 Create a new PDPage content stream. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @param resetContext Tell if the graphic context should be reset. This is only relevant when the appendContent parameter is set to {@link AppendMode#APPEND}. You should use this when appending to an existing stream, because the existing stream may have changed graphic properties (e.g. scaling, rotation). @throws IOException If there is an error writing to the page contents.
6035 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
6036 Returns the descendant CIDFont.
6037 A rectangle, expressed in default user space units, defining the visible region of default user space. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle. @return the cropbox of the page
6038 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6039 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6040 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6041 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6042 Create the correct annotation from the base COS object. @param base The COS object that is the annotation. @return The correctly typed annotation object, never null. @throws IOException If the annotation type is unknown.
6043 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6044 Creates a new colored tiling Paint, i.e. one that has its own colors. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
6045 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting data from the element.
6046 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @return the image without any masks applied @throws IOException if the image cannot be read
6047 {@inheritDoc}
6048 Create a new PDPage content stream. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @param resetContext Tell if the graphic context should be reset. This is only relevant when the appendContent parameter is set to {@link AppendMode#APPEND}. You should use this when appending to an existing stream, because the existing stream may have changed graphic properties (e.g. scaling, rotation). @throws IOException If there is an error writing to the page contents.
6049 A rectangle, expressed in default user space units, defining the visible region of default user space. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle. @return the cropbox of the page
6050 {@inheritDoc}
6051 Removes the page with the given index from the page tree. @param index zero-based page index
6052 Removes the given page from the page tree. @param page The page to remove.
6053 This will add a page to the document. This is a convenience method, that will add the page to the root of the hierarchy and set the parent of the page to the root. @param page The page to add to the document.
6054 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6055 Insert a page before another page within a page tree. @param newPage the page to be inserted. @param nextPage the page that is to be after the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
6056 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6057 Insert a page after another page within a page tree. @param newPage the page to be inserted. @param prevPage the page that is to be before the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
6058 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6059 Appends a marked-content sequence kid. @param markedContent the marked-content sequence with the MCID. @throws IllegalArgumentException if the mcid is negative or doesn't exist.
6060 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6061 Fetches the corresponding UCS2 CMap if the font's CMap is predefined.
6062 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
6063 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6064 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
6065 This will set the display values - the 'Opt' key. <p> The Opt array specifies the list of options in the choice field either as an array of text strings representing the display value or as an array of a two-element array where the first element is the export value and the second the display value. </p> <p> To set both the export and the display value use {@link #setOptions(List, List)} </p> @param displayValues List containing all possible options.
6066 This will set the display and export values - the 'Opt' key. <p> This will set both, the export value and the display value of the choice field. If either one of the parameters is null or an empty list is supplied the options will be removed. </p> <p> An {@link IllegalArgumentException} will be thrown if the number of items in the list differ. </p> @see #setOptions(List) @param exportValues List containing all possible export values. @param displayValues List containing all possible display values.
6067 This will set the indices of the selected options - the 'I' key. <p> This method is preferred over {@link #setValue(List)} for choice fields which <ul> <li>do support multiple selections</li> <li>have export values with the same value</li> </ul> <p> Setting the index will set the value too. @param values List containing the indices of all selected options.
6068 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting data from the element.
6069 Determine if the appearance shall provide a comb output. <p> May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs. </p> @return the comb state
6070 {@inheritDoc}
6071 Returns the page at the given 0-based index. <p> This method is too slow to get all the pages from a large PDF document (1000 pages or more). For such documents, use the iterator of {@link PDDocument#getPages()} instead. @param pageIndex the 0-based page index @return the page at the given index.
6072 Creates a new instance of PageExtractor @param sourceDocument The document to split.
6073 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero, and optionally be centered. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI @param center true if the content is to be centered on the page (otherwise top-left).
6074 {@inheritDoc}
6075 Removes the page with the given index from the page tree. @param index zero-based page index
6076 Notifies the attribute object change listeners about a change in this attribute object.
6077 Removes the given page from the page tree. @param page The page to remove.
6078 This will add a page to the document. This is a convenience method, that will add the page to the root of the hierarchy and set the parent of the page to the root. @param page The page to add to the document.
6079 Insert a page before another page within a page tree. @param newPage the page to be inserted. @param nextPage the page that is to be after the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
6080 Insert a page after another page within a page tree. @param newPage the page to be inserted. @param prevPage the page that is to be before the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
6081 Appends a marked-content sequence kid. @param markedContent the marked-content sequence with the MCID. @throws IllegalArgumentException if the mcid is negative or doesn't exist.
6082 Prepares everything to decrypt the document. Only if decryption of single objects is needed this should be called. @param encryption encryption dictionary @param documentIDArray document id @param decryptionMaterial Information used to decrypt the document. @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error accessing data.
6083 Fetches the corresponding UCS2 CMap if the font's CMap is predefined.
6084 Determines the width of the space character. This is very important for text extraction. @return the width of the space character
6085 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
6086 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
6087 Generate the appearance for comb fields. @param contents the content stream to write to @param appearanceStream the appearance stream used @param font the font to be used @param fontSize the font size to be used @throws IOException
6088 This will set the display values - the 'Opt' key. <p> The Opt array specifies the list of options in the choice field either as an array of text strings representing the display value or as an array of a two-element array where the first element is the export value and the second the display value. </p> <p> To set both the export and the display value use {@link #setOptions(List, List)} </p> @param displayValues List containing all possible options.
6089 This will set the display and export values - the 'Opt' key. <p> This will set both, the export value and the display value of the choice field. If either one of the parameters is null or an empty list is supplied the options will be removed. </p> <p> An {@link IllegalArgumentException} will be thrown if the number of items in the list differ. </p> @see #setOptions(List) @param exportValues List containing all possible export values. @param displayValues List containing all possible display values.
6090 This will set the indices of the selected options - the 'I' key. <p> This method is preferred over {@link #setValue(List)} for choice fields which <ul> <li>do support multiple selections</li> <li>have export values with the same value</li> </ul> <p> Setting the index will set the value too. @param values List containing the indices of all selected options.
6091 A convenience method that checks the flag bit. @return The flag value.
6092 A convenience method that checks the flag bit. @return The flag value.
6093 A convenience method that checks the flag bit. @return The flag value.
6094 Determine if the appearance shall provide a comb output. <p> May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs. </p> @return the comb state
6095 A convenience method that checks the flag bit. @return The flag value.
6096 Returns the page at the given 0-based index. <p> This method is too slow to get all the pages from a large PDF document (1000 pages or more). For such documents, use the iterator of {@link PDDocument#getPages()} instead. @param pageIndex the 0-based page index @return the page at the given index.
6097 A convenience method that checks the flag bit. @return The flag value.
6098 Creates a new instance of PageExtractor @param sourceDocument The document to split.
6099 A convenience method that checks the flag bit. @return The flag value.
6100 A convenience method that checks the flag bit. @return The flag value.
6101 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero, and optionally be centered. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI @param center true if the content is to be centered on the page (otherwise top-left).
6102 A convenience method that checks the flag bit. @return The flag value.
6103 A convenience method that checks the flag bit. @return The flag value.
6104 Notifies the attribute object change listeners about a change in this attribute object.
6105 A convenience method that sets the flag bit. @param flag The flag value.
6106 A convenience method that sets the flag bit. @param flag The flag value.
6107 A convenience method that sets the flag bit. @param flag The flag value.
6108 A convenience method that sets the flag bit. @param flag The flag value.
6109 A convenience method that sets the flag bit. @param flag The flag value.
6110 A convenience method that sets the flag bit. @param flag The flag value.
6111 A convenience method that sets the flag bit. @param flag The flag value.
6112 A convenience method that sets the flag bit. @param flag The flag value.
6113 A convenience method that sets the flag bit. @param flag The flag value.
6114 Prepares everything to decrypt the document. Only if decryption of single objects is needed this should be called. @param encryption encryption dictionary @param documentIDArray document id @param decryptionMaterial Information used to decrypt the document. @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error accessing data.
6115 Returns the pattern for the given color. @param color color containing a pattern name @return pattern for the given color @throws java.io.IOException if the pattern name was not found.
6116 Processes a transparency group stream. @param group transparency group to be processed @throws IOException if the transparency group cannot be processed
6117 Processes a Type 3 character stream. @param charProc Type 3 character procedure @param textRenderingMatrix the Text Rendering Matrix @throws IOException if there is an error reading or parsing the character content stream.
6118 Determines the width of the space character. This is very important for text extraction. @return the width of the space character
6119 Process the given annotation with the specified appearance stream. @param annotation The annotation containing the appearance stream to process. @param appearance The appearance stream to process. @throws IOException If there is an error reading or parsing the appearance content stream.
6120 Process the given tiling pattern. Allows the pattern matrix to be overridden for custom rendering. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @param patternMatrix the pattern matrix, may be overridden for custom rendering. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
6121 Generate the appearance for comb fields. @param contents the content stream to write to @param appearanceStream the appearance stream used @param font the font to be used @param fontSize the font size to be used @throws IOException
6122 Process a content stream. @param contentStream the content stream @throws IOException if there is an exception while processing the stream
6123 A convenience method that checks the flag bit. @return The flag value.
6124 A convenience method that checks the flag bit. @return The flag value.
6125 A convenience method that checks the flag bit. @return The flag value.
6126 A convenience method that checks the flag bit. @return The flag value.
6127 Creates a COSField subclass from the given COS field. This is for reading fields from PDFs. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created, or null if root. @return a new PDField instance
6128 A convenience method that checks the flag bit. @return The flag value.
6129 A convenience method that checks the flag bit. @return The flag value.
6130 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left).
6131 A convenience method that checks the flag bit. @return The flag value.
6132 A convenience method that checks the flag bit. @return The flag value.
6133 A convenience method that checks the flag bit. @return The flag value.
6134 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
6135 A convenience method that sets the flag bit. @param flag The flag value.
6136 A convenience method that sets the flag bit. @param flag The flag value.
6137 A convenience method that sets the flag bit. @param flag The flag value.
6138 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
6139 A convenience method that sets the flag bit. @param flag The flag value.
6140 Parses a PDF. Unrestricted main memory will be used for buffering PDF new streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
6141 A convenience method that sets the flag bit. @param flag The flag value.
6142 A convenience method that sets the flag bit. @param flag The flag value.
6143 A convenience method that sets the flag bit. @param flag The flag value.
6144 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
6145 A convenience method that sets the flag bit. @param flag The flag value.
6146 A convenience method that sets the flag bit. @param flag The flag value.
6147 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
6148 Returns the pattern for the given color. @param color color containing a pattern name @return pattern for the given color @throws java.io.IOException if the pattern name was not found.
6149 Processes a transparency group stream. @param group transparency group to be processed @throws IOException if the transparency group cannot be processed
6150 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException In case of a reading or parsing error.
6151 Processes a Type 3 character stream. @param charProc Type 3 character procedure @param textRenderingMatrix the Text Rendering Matrix @throws IOException if there is an error reading or parsing the character content stream.
6152 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
6153 Process the given annotation with the specified appearance stream. @param annotation The annotation containing the appearance stream to process. @param appearance The appearance stream to process. @throws IOException If there is an error reading or parsing the appearance content stream.
6154 Reads the visual signature from the given file. @param file the file containing the visual signature @throws IOException when something went wrong during parsing
6155 Reads the visual signature from the given input stream. @param is the input stream containing the visual signature @throws IOException when something went wrong during parsing
6156 Process the given tiling pattern. Allows the pattern matrix to be overridden for custom rendering. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @param patternMatrix the pattern matrix, may be overridden for custom rendering. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
6157 Process a content stream. @param contentStream the content stream @throws IOException if there is an exception while processing the stream
6158 Creates a COSField subclass from the given COS field. This is for reading fields from PDFs. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created, or null if root. @return a new PDField instance
6159 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
6160 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left).
6161 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
6162 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
6163 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
6164 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
6165 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6166 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
6167 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6168 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
6169 Parses a PDF. Unrestricted main memory will be used for buffering PDF new streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
6170 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
6171 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
6172 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
6173 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
6174 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
6175 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6176 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6177 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException In case of a reading or parsing error.
6178 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6179 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6180 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
6181 Reads the visual signature from the given file. @param file the file containing the visual signature @throws IOException when something went wrong during parsing
6182 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6183 Reads the visual signature from the given input stream. @param is the input stream containing the visual signature @throws IOException when something went wrong during parsing
6184 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6185 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6186 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6187 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6188 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6189 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6190 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
6191 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6192 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
6193 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
6194 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6195 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
6196 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6197 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6198 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6199 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
6200 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6201 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
6202 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
6203 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6204 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
6205 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6206 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6207 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6208 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6209 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6210 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6211 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6212 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6213 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6214 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6215 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6216 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6217 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6218 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6219 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6220 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6221 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6222 Prepare document for encryption. @param document The document to encrypt. @throws IOException If there is an error accessing data.
6223 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6224 Sets the default value. @param value Name of option to select @throws IllegalArgumentException if the value is not a valid option.
6225 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6226 Set the selected option given its name, and try to update the visual appearance. @param value Name of option to select @throws IOException if the value could not be set @throws IllegalArgumentException if the value is not a valid option.
6227 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
6228 Imports OCProperties from source document to target document so hidden layers can still be hidden after import. @param srcDoc The source PDF document that contains the /OCProperties to be copied. @throws IOException If an I/O error occurs.
6229 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6230 Rebuild a font subset.
6231 Returns the standard structure type, the actual structure type is mapped to in the role map. @return the standard structure type
6232 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @throws IOException If an error occurs while generating the data.
6233 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6234 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. <p> Other usages of this method are for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Another problem with page-based modifications can occur if the page tree isn't flat: there won't be an closed update path from the catalog to the page. To fix this, add code like this: <pre>{@code COSDictionary parent = page.getCOSObject().getCOSDictionary(COSName.PARENT); while (parent != null) { parent.setNeedToBeUpdated(true); parent = parent.getCOSDictionary(COSName.PARENT); } }</pre> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
6235 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6236 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. <p> This method is for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. To know which objects are getting changed, you need to have some understanding of the PDF specification, and look at the saved file with an editor to verify that you are updating the correct objects. You should also inspect the page and document structures of the file with PDFDebugger. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
6237 Attempts to find yet unregistered streams and dictionaries in the given structure. @param current The object to be added for compressing. @throws IOException Shall be thrown, if compressing the object failed.
6238 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6239 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6240 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6241 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6242 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
6243 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6244 Returns the contents of the stream as a PDF "text string". @return the PDF string representation of the stream content
6245 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6246 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6247 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
6248 Prepare document for encryption. @param document The document to encrypt. @throws IOException If there is an error accessing data.
6249 This will get a stream that can be read from. @return An input stream that can be read from. @throws IOException If an IO error occurs during reading.
6250 Sets the default value. @param value Name of option to select @throws IllegalArgumentException if the value is not a valid option.
6251 Set the selected option given its name, and try to update the visual appearance. @param value Name of option to select @throws IOException if the value could not be set @throws IllegalArgumentException if the value is not a valid option.
6252 Create a patch list from a data stream, the returned list contains all the patches contained in the data stream. @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return the obtained patch list @throws IOException when something went wrong
6253 Imports OCProperties from source document to target document so hidden layers can still be hidden after import. @param srcDoc The source PDF document that contains the /OCProperties to be copied. @throws IOException If an I/O error occurs.
6254 Rebuild a font subset.
6255 Returns the standard structure type, the actual structure type is mapped to in the role map. @return the standard structure type
6256 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @throws IOException If an error occurs while generating the data.
6257 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. <p> Other usages of this method are for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Another problem with page-based modifications can occur if the page tree isn't flat: there won't be an closed update path from the catalog to the page. To fix this, add code like this: <pre>{@code COSDictionary parent = page.getCOSObject().getCOSDictionary(COSName.PARENT); while (parent != null) { parent.setNeedToBeUpdated(true); parent = parent.getCOSDictionary(COSName.PARENT); } }</pre> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
6258 Rebuild the trailer dictionary if startxref can't be found. @param xrefTable the cross reference table of the pdf @return the rebuild trailer dictionary @throws IOException if something went wrong
6259 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. <p> This method is for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. To know which objects are getting changed, you need to have some understanding of the PDF specification, and look at the saved file with an editor to verify that you are updating the correct objects. You should also inspect the page and document structures of the file with PDFDebugger. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
6260 Parse the object for the given object key. @param objKey key of object to be parsed @param requireExistingNotCompressedObj if <code>true</code> the object to be parsed must be defined in xref (comment: null objects may be missing from xref) and it must not be a compressed object within object stream (this is used to circumvent being stuck in a loop in a malicious PDF) @return the parsed object (which is also added to document object) @throws IOException If an IO error occurs.
6261 Attempts to find yet unregistered streams and dictionaries in the given structure. @param current The object to be added for compressing. @throws IOException Shall be thrown, if compressing the object failed.
6262 Parses cross reference tables. @param document the corresponding COS document of the pdf. @param startXRefOffset start offset of the first table @return the trailer dictionary @throws IOException if something went wrong
6263 Creates a new PDCIDFont instance with the appropriate subclass. @param dictionary descendant font dictionary @return a PDCIDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
6264 Returns the contents of the stream as a PDF "text string". @return the PDF string representation of the stream content
6265 This will return a list of the annotations for this page. @param annotationFilter the annotation filter provided allowing to filter out specific annotations @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
6266 Gets a higher-level object for the referenced object. Currently this method may return a {@link PDAnnotation}, a {@link PDXObject} or <code>null</code>. @return a higher-level object for the referenced object
6267 This will retrieve the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @return the other annotation or null if there is none. @throws IOException if there is an error creating the other annotation.
6268 This will retrieve the markup annotation which this popup relates to. @return The parent markup annotation.
6269 This will get a stream that can be read from. @return An input stream that can be read from. @throws IOException If an IO error occurs during reading.
6270 Create a patch list from a data stream, the returned list contains all the patches contained in the data stream. @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return the obtained patch list @throws IOException when something went wrong
6271 Create a new PDPage content stream. This constructor overwrites all existing content streams of this page. @param document The document the page is part of. @param sourcePage The page to write the contents to. @throws IOException If there is an error writing to the page contents.
6272 Create a new PDPage content stream. If the appendContent parameter is set to {@link AppendMode#APPEND}, you may want to use {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)} instead, with the fifth parameter set to true. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @throws IOException If there is an error writing to the page contents.
6273 Initializes the stream engine for the given page.
6274 Rebuild the trailer dictionary if startxref can't be found. @param xrefTable the cross reference table of the pdf @return the rebuild trailer dictionary @throws IOException if something went wrong
6275 A rectangle, expressed in default user space units, defining the region to which the contents of the page should be clipped when output in a production environment. The default is the CropBox. @return The BleedBox attribute.
6276 Parse the object for the given object key. @param objKey key of object to be parsed @param requireExistingNotCompressedObj if <code>true</code> the object to be parsed must be defined in xref (comment: null objects may be missing from xref) and it must not be a compressed object within object stream (this is used to circumvent being stuck in a loop in a malicious PDF) @return the parsed object (which is also added to document object) @throws IOException If an IO error occurs.
6277 A rectangle, expressed in default user space units, defining the intended dimensions of the finished page after trimming. The default is the CropBox. @return The TrimBox attribute.
6278 A rectangle, expressed in default user space units, defining the extent of the page's meaningful content (including potential white space) as intended by the page's creator The default is the CropBox. @return The ArtBox attribute.
6279 This will find the CropBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The CropBox at this level in the hierarchy.
6280 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6281 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6282 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6283 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6284 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6285 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6286 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6287 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6288 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6289 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6290 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6291 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6292 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6293 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6294 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6295 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6296 Parses cross reference tables. @param document the corresponding COS document of the pdf. @param startXRefOffset start offset of the first table @return the trailer dictionary @throws IOException if something went wrong
6297 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6298 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6299 Creates a new PDCIDFont instance with the appropriate subclass. @param dictionary descendant font dictionary @return a PDCIDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
6300 This will return a list of the annotations for this page. @param annotationFilter the annotation filter provided allowing to filter out specific annotations @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
6301 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param pageNumber 0 based index to page number.
6302 Gets a higher-level object for the referenced object. Currently this method may return a {@link PDAnnotation}, a {@link PDXObject} or <code>null</code>. @return a higher-level object for the referenced object
6303 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param page The page to remove from the document.
6304 This will retrieve the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @return the other annotation or null if there is none. @throws IOException if there is an error creating the other annotation.
6305 This will import and copy the contents from another location. Currently the content stream is stored in a scratch file. The scratch file is associated with the document. If you are adding a page to this document from another document and want to copy the contents to this document's scratch file then use this method otherwise just use the {@link #addPage addPage()} method. <p> Unlike {@link #addPage addPage()}, this method creates a new PDPage object. If your page has annotations, and if these link to pages not in the target document, then the target document might become huge. What you need to do is to delete page references of such annotations. See <a href="http://stackoverflow.com/a/35477351/535646">here</a> for how to do this. <p> Inherited (global) resources are ignored because these can contain resources not needed for this page which could bloat your document, see <a href="https://issues.apache.org/jira/browse/PDFBOX-28">PDFBOX-28</a> and related issues. If you need them, call <code>importedPage.setResources(page.getResources());</code> <p> This method should only be used to import a page from a loaded document, not from a generated document because these can contain unfinished parts, e.g. font subsetting information. @param page The page to import. @return The page that was imported. @throws IOException If there is an error copying the page.
6306 This will retrieve the markup annotation which this popup relates to. @return The parent markup annotation.
6307 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
6308 Creates a new CCITT Fax compressed image XObject from the first image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage)} or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
6309 Set the selected value of this field, and try to update the visual appearance. @param value The name of the selected item. @throws IOException if the value could not be set
6310 Update the 'I' key based on values set.
6311 Create a new PDPage content stream. This constructor overwrites all existing content streams of this page. @param document The document the page is part of. @param sourcePage The page to write the contents to. @throws IOException If there is an error writing to the page contents.
6312 Creates a new PDFPageable. @param document the document to print
6313 Creates a new PDFPageable with the given page orientation. @param document the document to print @param orientation page orientation policy
6314 Create a new PDPage content stream. If the appendContent parameter is set to {@link AppendMode#APPEND}, you may want to use {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)} instead, with the fifth parameter set to true. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @throws IOException If there is an error writing to the page contents.
6315 Creates a new PDFPageable with the given page orientation and with optional page borders shown. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed
6316 Initializes the stream engine for the given page.
6317 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI
6318 Returns a mapping with computed page labels as keys and corresponding 0-based page indices as values. The returned map will contain at most as much entries as the document has pages. <p> <strong>NOTE:</strong> If the document contains duplicate page labels, the returned map will contain <em>less</em> entries than the document has pages. The page index returned in this case is the <em>highest</em> index among all pages sharing the same label. </p> @return a mapping from labels to 0-based page indices.
6319 A rectangle, expressed in default user space units, defining the region to which the contents of the page should be clipped when output in a production environment. The default is the CropBox. @return The BleedBox attribute.
6320 Returns a mapping with 0-based page indices as keys and corresponding page labels as values as an array. The array will have exactly as much entries as the document has pages. @return an array mapping from 0-based page indices to labels.
6321 A rectangle, expressed in default user space units, defining the intended dimensions of the finished page after trimming. The default is the CropBox. @return The TrimBox attribute.
6322 Notifies the attribute object change listeners if the attribute is changed. @param oldBase old value @param newBase new value
6323 A rectangle, expressed in default user space units, defining the extent of the page's meaningful content (including potential white space) as intended by the page's creator The default is the CropBox. @return The ArtBox attribute.
6324 This will find the CropBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The CropBox at this level in the hierarchy.
6325 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6326 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6327 Called when a glyph is to be processed. The heuristic calculations here were originally written by Ben Litchfield for PDFStreamEngine.
6328 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6329 Break the paragraph into individual lines. @param font the font used for rendering the text. @param fontSize the fontSize used for rendering the text. @param width the width of the box holding the content. @return the individual lines. @throws IOException
6330 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
6331 Returns the value of the symbolic flag, allowing for the fact that the result may be indeterminate. @return the value of the isSymbolic flag form the font descriptor
6332 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6333 Attempts to find a good fallback based on the font descriptor.
6334 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6335 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6336 Returns a PDFontDescriptor for the given PFB. @throws IOException if the font bounding box isn't available
6337 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6338 Returns a PDFontDescriptor for the given AFM. Used only for Standard 14 fonts. @param metrics AFM
6339 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6340 Creates a new font descriptor dictionary for the given TTF.
6341 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6342 Returns an AWT paint for the given PDColor. @param color The color to get a paint for. This can be an actual color or a pattern. @return an AWT paint for the given PDColor @throws IOException if the AWT paint could not be created
6343 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6344 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6345 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6346 Shows a transparency group from the content stream. @param form transparency group (form) XObject @throws IOException if the transparency group cannot be processed
6347 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6348 Processes a soft mask transparency group stream. @param group transparency group used for the soft mask @throws IOException if the transparency group cannot be processed
6349 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6350 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6351 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
6352 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6353 Shows the given annotation. @param annotation An annotation on the current page. @throws IOException If an error occurred reading the annotation
6354 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6355 Process the given tiling pattern. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
6356 Shows a form from the content stream. @param form form XObject @throws IOException if the form cannot be processed
6357 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param pageNumber 0 based index to page number.
6358 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param page The page to remove from the document.
6359 This will return all of the documents root fields. A field might have children that are fields (non-terminal field) or does not have children which are fields (terminal fields). The fields within an AcroForm are organized in a tree structure. The documents root fields might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields mark branches which contents can be retrieved using {@link PDNonTerminalField#getChildren()}. @return A list of the documents root fields, never null. If there are no fields then this method returns an empty list.
6360 This will import and copy the contents from another location. Currently the content stream is stored in a scratch file. The scratch file is associated with the document. If you are adding a page to this document from another document and want to copy the contents to this document's scratch file then use this method otherwise just use the {@link #addPage addPage()} method. <p> Unlike {@link #addPage addPage()}, this method creates a new PDPage object. If your page has annotations, and if these link to pages not in the target document, then the target document might become huge. What you need to do is to delete page references of such annotations. See <a href="http://stackoverflow.com/a/35477351/535646">here</a> for how to do this. <p> Inherited (global) resources are ignored because these can contain resources not needed for this page which could bloat your document, see <a href="https://issues.apache.org/jira/browse/PDFBOX-28">PDFBOX-28</a> and related issues. If you need them, call <code>importedPage.setResources(page.getResources());</code> <p> This method should only be used to import a page from a loaded document, not from a generated document because these can contain unfinished parts, e.g. font subsetting information. @param page The page to import. @return The page that was imported. @throws IOException If there is an error copying the page.
6361 This will find one of the child elements. The name array are the components of the name to search down the tree of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end point based on the name array. @param name An array that picks the path to the field. @param nameIndex The index into the array. @return The field at the endpoint or null if none is found.
6362 Returns this field's children. These may be either terminal or non-terminal fields. @return the list of child fields. Be aware that this list is <i>not</i> backed by the children of the field, so adding or deleting has no effect on the PDF document until you call {@link #setChildren(java.util.List) setChildren()} with the modified list.
6363 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
6364 Creates a new CCITT Fax compressed image XObject from the first image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage)} or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
6365 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.
6366 Set the selected value of this field, and try to update the visual appearance. @param value The name of the selected item. @throws IOException if the value could not be set
6367 Update the 'I' key based on values set.
6368 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
6369 Creates a new PDFPageable. @param document the document to print
6370 Creates a new PDFPageable with the given page orientation. @param document the document to print @param orientation page orientation policy
6371 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
6372 Creates a new PDFPageable with the given page orientation and with optional page borders shown. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed
6373 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
6374 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI
6375 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
6376 Returns a mapping with computed page labels as keys and corresponding 0-based page indices as values. The returned map will contain at most as much entries as the document has pages. <p> <strong>NOTE:</strong> If the document contains duplicate page labels, the returned map will contain <em>less</em> entries than the document has pages. The page index returned in this case is the <em>highest</em> index among all pages sharing the same label. </p> @return a mapping from labels to 0-based page indices.
6377 Returns a mapping with 0-based page indices as keys and corresponding page labels as values as an array. The array will have exactly as much entries as the document has pages. @return an array mapping from 0-based page indices to labels.
6378 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException in case of a file reading or parsing error
6379 Notifies the attribute object change listeners if the attribute is changed. @param oldBase old value @param newBase new value
6380 Reads the visual signature from the given visual signature properties @param visSignatureProperties the <code>PDVisibleSigProperties</code> object containing the visual signature @throws IOException when something went wrong during parsing
6381 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6382 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6383 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6384 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6385 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6386 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6387 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6388 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6389 Called when a glyph is to be processed. The heuristic calculations here were originally written by Ben Litchfield for PDFStreamEngine.
6390 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6391 Break the paragraph into individual lines. @param font the font used for rendering the text. @param fontSize the fontSize used for rendering the text. @param width the width of the box holding the content. @return the individual lines. @throws IOException
6392 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6393 Returns the value of the symbolic flag, allowing for the fact that the result may be indeterminate. @return the value of the isSymbolic flag form the font descriptor
6394 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param page the page in the source PDF document to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
6395 Attempts to find a good fallback based on the font descriptor.
6396 This will write the pdf document. @throws IOException If an error occurs while generating the data. @param doc The document to write.
6397 Returns a PDFontDescriptor for the given PFB. @throws IOException if the font bounding box isn't available
6398 Returns a PDFontDescriptor for the given AFM. Used only for Standard 14 fonts. @param metrics AFM
6399 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
6400 Creates a new font descriptor dictionary for the given TTF.
6401 <p> Constructs an object that can be used to compress the contents of a given {@link PDDocument}. It provides the means to: </p> <ul> <li>Compress the COSStructure of the document, by streaming {@link COSBase}s to compressed {@link COSWriterObjectStream}s</li> </ul> @param document The document, that shall be compressed. @param parameters The configuration of the compression operations, that shall be applied. @throws IOException Shall be thrown if a compression operation failed.
6402 Returns an AWT paint for the given PDColor. @param color The color to get a paint for. This can be an actual color or a pattern. @return an AWT paint for the given PDColor @throws IOException if the AWT paint could not be created
6403 Shows a transparency group from the content stream. @param form transparency group (form) XObject @throws IOException if the transparency group cannot be processed
6404 Get a text or text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
6405 Processes a soft mask transparency group stream. @param group transparency group used for the soft mask @throws IOException if the transparency group cannot be processed
6406 This will get the value for the field. The return type will either be: <ul> <li>String: for Checkboxes, Radio Button, Textfields</li> <li>List&lt;String&gt;: for a Choice Field</li> </ul> @return The value of the field. @throws IOException If there is an error getting the value.
6407 This will set the rich text that is associated with this field. @return The rich text XHTML stream.
6408 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
6409 This will get the javascript that is executed before the import. @return Some javascript code.
6410 Shows the given annotation. @param annotation An annotation on the current page. @throws IOException If an error occurred reading the annotation
6411 This will get the javascript that is executed after the import. @return Some javascript code.
6412 @return The Javascript Code.
6413 Process the given tiling pattern. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
6414 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
6415 Shows a form from the content stream. @param form form XObject @throws IOException if the form cannot be processed
6416 Get a text as text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
6417 This will return all of the documents root fields. A field might have children that are fields (non-terminal field) or does not have children which are fields (terminal fields). The fields within an AcroForm are organized in a tree structure. The documents root fields might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields mark branches which contents can be retrieved using {@link PDNonTerminalField#getChildren()}. @return A list of the documents root fields, never null. If there are no fields then this method returns an empty list.
6418 Create a LayoutPage object from given PDPage object. @return @throws IOException
6419 This will find one of the child elements. The name array are the components of the name to search down the tree of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end point based on the name array. @param name An array that picks the path to the field. @param nameIndex The index into the array. @return The field at the endpoint or null if none is found.
6420 This will copy the stream into a byte array. @return The byte array of the filteredStream. @throws IOException if an I/O error occurs.
6421 Returns this field's children. These may be either terminal or non-terminal fields. @return the list of child fields. Be aware that this list is <i>not</i> backed by the children of the field, so adding or deleting has no effect on the PDF document until you call {@link #setChildren(java.util.List) setChildren()} with the modified list.
6422 Get all sample values of this function. @return an array with all samples.
6423 Load the ICC profile, or init alternateColorSpace color space.
6424 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.
6425 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
6426 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
6427 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @throws IOException if something went wrong
6428 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
6429 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
6430 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
6431 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
6432 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException in case of a file reading or parsing error
6433 Reads the visual signature from the given visual signature properties @param visSignatureProperties the <code>PDVisibleSigProperties</code> object containing the visual signature @throws IOException when something went wrong during parsing
6434 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6435 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6436 Read the trailer information and provide a COSDictionary containing the trailer information. @return a COSDictionary containing the trailer information @throws IOException if something went wrong
6437 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6438 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6439 {@inheritDoc}
6440 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6441 {@inheritDoc}
6442 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6443 This will return a list of the annotations for this page. @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
6444 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6445 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6446 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6447 Places the given form over the existing content of the indicated page (like an overlay). The form is enveloped in a marked content section to indicate that it's part of an optional content group (OCG), here used as a layer. This optional group is returned and can be enabled and disabled through methods on {@link PDOptionalContentProperties}. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before calling this method to make sure that the graphics state is reset. @param targetPage the target page @param form the form to place @param transform the transformation matrix that controls the placement of your form. You'll need this if your page has a crop box different than the media box, or if these have negative coordinates, or if you want to scale or adjust your form. @param layerName the name for the layer/OCG to produce @return the optional content group that was generated for the form usage @throws IOException if an I/O error occurs
6448 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
6449 This will initialize and process the contents of the stream. @param page the page to process @throws IOException if there is an error accessing the stream
6450 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param page the page in the source PDF document to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
6451 This will write the pdf document. @throws IOException If an error occurs while generating the data. @param doc The document to write.
6452 Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}. @param contentStream the child content stream @param page the page to be used for processing @throws IOException if there is an exception while processing the stream
6453 {@inheritDoc} Returns the actual physical size of the pages in the PDF file. May not fit the local printer.
6454 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
6455 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6456 <p> Constructs an object that can be used to compress the contents of a given {@link PDDocument}. It provides the means to: </p> <ul> <li>Compress the COSStructure of the document, by streaming {@link COSBase}s to compressed {@link COSWriterObjectStream}s</li> </ul> @param document The document, that shall be compressed. @param parameters The configuration of the compression operations, that shall be applied. @throws IOException Shall be thrown if a compression operation failed.
6457 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6458 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6459 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6460 Sets the entry "V" to the given values. Requires {@link #isMultiSelect()} to be true. @param values the list of values @throws IOException if the appearance couldn't be generated.
6461 Get a text or text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
6462 Format the text block. @throws IOException if there is an error writing to the stream.
6463 This will get the value for the field. The return type will either be: <ul> <li>String: for Checkboxes, Radio Button, Textfields</li> <li>List&lt;String&gt;: for a Choice Field</li> </ul> @return The value of the field. @throws IOException If there is an error getting the value.
6464 This will set the rich text that is associated with this field. @return The rich text XHTML stream.
6465 My "not so great" method for calculating the fontsize. It does not work superb, but it handles ok. @return the calculated font-size @throws IOException If there is an error getting the font information.
6466 This will get the javascript that is executed before the import. @return Some javascript code.
6467 Reads the Encoding from the Font dictionary or the embedded or substituted font file. Must be called at the end of any subclass constructors. @throws IOException if the font file could not be read
6468 This will get the javascript that is executed after the import. @return Some javascript code.
6469 Internal implementation of isSymbolic, allowing for the fact that the result may be indeterminate. @return true if isSymbolic
6470 @return The Javascript Code.
6471 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
6472 Finds a TrueType font with the given PostScript name, or a suitable substitute, or null. @param fontDescriptor FontDescriptor
6473 Get a text as text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
6474 Finds a font with the given PostScript name, or a suitable substitute, or null. This allows any font to be substituted with a PFB, TTF or OTF. @param fontDescriptor the FontDescriptor of the font to find
6475 This will load a PFB to be embedded into a document. @param doc The PDF document that will hold the embedded font. @param dict The Font dictionary to write to. @param pfbStream The pfb input. @throws IOException If there is an error loading the data.
6476 Create a LayoutPage object from given PDPage object. @return @throws IOException
6477 Constructor for Standard 14.
6478 This will copy the stream into a byte array. @return The byte array of the filteredStream. @throws IOException if an I/O error occurs.
6479 Get all sample values of this function. @return an array with all samples.
6480 Load the ICC profile, or init alternateColorSpace color space.
6481 Creates a new TrueType font for embedding.
6482 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
6483 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @throws IOException if something went wrong
6484 This will export all FDF form data. @return An FDF document used to export the document. @throws IOException If there is an error when exporting the document.
6485 This will tell if the AcroForm is a dynamic XFA form. @return true if the AcroForm is a dynamic XFA form
6486 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
6487 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
6488 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed
6489 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
6490 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File, String)} instead
6491 Read the trailer information and provide a COSDictionary containing the trailer information. @return a COSDictionary containing the trailer information @throws IOException if something went wrong
6492 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
6493 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6494 {@inheritDoc}
6495 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6496 {@inheritDoc}
6497 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6498 This will return a list of the annotations for this page. @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
6499 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6500 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6501 Places the given form over the existing content of the indicated page (like an overlay). The form is enveloped in a marked content section to indicate that it's part of an optional content group (OCG), here used as a layer. This optional group is returned and can be enabled and disabled through methods on {@link PDOptionalContentProperties}. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before calling this method to make sure that the graphics state is reset. @param targetPage the target page @param form the form to place @param transform the transformation matrix that controls the placement of your form. You'll need this if your page has a crop box different than the media box, or if these have negative coordinates, or if you want to scale or adjust your form. @param layerName the name for the layer/OCG to produce @return the optional content group that was generated for the form usage @throws IOException if an I/O error occurs
6502 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6503 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6504 This will initialize and process the contents of the stream. @param page the page to process @throws IOException if there is an error accessing the stream
6505 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6506 Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}. @param contentStream the child content stream @param page the page to be used for processing @throws IOException if there is an exception while processing the stream
6507 Initialize the content of the appearance stream. Get settings like border style, border width and colors to be used to draw a rectangle and background color around the widget @param widget the field widget @param appearanceCharacteristics the appearance characteristics dictionary from the widget or null @param appearanceStream the appearance stream to be used @throws IOException in case we can't write to the appearance stream
6508 {@inheritDoc} Returns the actual physical size of the pages in the PDF file. May not fit the local printer.
6509 Write font name, font size and color from the /DA string to the given content stream. @param contents The content stream. @param zeroFontSize The calculated font size to use if the /DA string has a size 0 (autosize). Otherwise the size from the /DA string is used.
6510 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6511 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6512 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param pageNumber the 0-based page number of the page to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
6513 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6514 This will save the document to an output stream. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @throws IOException if the output could not be written
6515 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
6516 Sets the entry "V" to the given values. Requires {@link #isMultiSelect()} to be true. @param values the list of values @throws IOException if the appearance couldn't be generated.
6517 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
6518 Format the text block. @throws IOException if there is an error writing to the stream.
6519 This will write the compressed body of the document. @param document The document to write the body for. @throws IOException If there is an error writing the data.
6520 My "not so great" method for calculating the fontsize. It does not work superb, but it handles ok. @return the calculated font-size @throws IOException If there is an error getting the font information.
6521 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
6522 Reads the Encoding from the Font dictionary or the embedded or substituted font file. Must be called at the end of any subclass constructors. @throws IOException if the font file could not be read
6523 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
6524 Internal implementation of isSymbolic, allowing for the fact that the result may be indeterminate. @return true if isSymbolic
6525 Get the fields rich text value. @return the rich text value string
6526 Finds a TrueType font with the given PostScript name, or a suitable substitute, or null. @param fontDescriptor FontDescriptor
6527 Create a LayoutPage object from the first page of the given document. @param doc @return @throws IOException
6528 Finds a font with the given PostScript name, or a suitable substitute, or null. This allows any font to be substituted with a PFB, TTF or OTF. @param fontDescriptor the FontDescriptor of the font to find
6529 Constructor. @param functionStream The function stream. @throws IOException if an I/O error occurs while reading the function
6530 This will load a PFB to be embedded into a document. @param doc The PDF document that will hold the embedded font. @param dict The Font dictionary to write to. @param pfbStream The pfb input. @throws IOException If there is an error loading the data.
6531 Constructor for Standard 14.
6532 Do a linear interpolation if the two coordinates can be known, or call itself recursively twice. @param coord coord partially set coordinate (not set from step upwards); gets fully filled in the last call ("leaf"), where it is used to get the correct sample @param step between 0 (first call) and dimension - 1 @return interpolated result sample
6533 Creates a new ICC color space using the PDF array. @param iccArray the ICC stream object. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
6534 Creates a new TrueType font for embedding.
6535 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
6536 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
6537 This will export all FDF form data. @return An FDF document used to export the document. @throws IOException If there is an error when exporting the document.
6538 This will tell if the AcroForm is a dynamic XFA form. @return true if the AcroForm is a dynamic XFA form
6539 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
6540 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed
6541 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
6542 Get the XFA content as byte array. The XFA is either a stream containing the entire XFA resource or an array specifying individual packets that together make up the XFA resource. A packet is a pair of a string and stream. The string contains the name of the XML element and the stream contains the complete text of this XML element. Each packet represents a complete XML element, with the exception of the first and last packet, which specify begin and end tags for the xdp:xdp element. [IS0 32000-1:2008: 12.7.8] @return the XFA content @throws IOException if the XFA content could not be created
6543 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File, String)} instead
6544 Update the StructParents and StructParent values in a PDPage. @param page the new page @param structParentOffset the offset which should be applied
6545 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
6546 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6547 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6548 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6549 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6550 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6551 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6552 Clone the structure tree from the source to the current destination document. This must be called after all pages are processed. @param destinationDocument @throws IOException
6553 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6554 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
6555 Initialize the content of the appearance stream. Get settings like border style, border width and colors to be used to draw a rectangle and background color around the widget @param widget the field widget @param appearanceCharacteristics the appearance characteristics dictionary from the widget or null @param appearanceStream the appearance stream to be used @throws IOException in case we can't write to the appearance stream
6556 Write font name, font size and color from the /DA string to the given content stream. @param contents The content stream. @param zeroFontSize The calculated font size to use if the /DA string has a size 0 (autosize). Otherwise the size from the /DA string is used.
6557 Clone all annotations because of changes possibly made, and because the structure tree is cloned. @param imported @throws IOException
6558 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param pageNumber the 0-based page number of the page to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
6559 This will save the document to an output stream. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @throws IOException if the output could not be written
6560 Build a map of page => set of widgets to be flattened @param fields a list of fields to be flattened @param pages the page tree @return @throws IOException
6561 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
6562 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
6563 This will create an FDF dictionary from an XFDF XML document. @param fdfXML The XML document that contains the XFDF data.
6564 This will write the compressed body of the document. @param document The document to write the body for. @throws IOException If there is an error writing the data.
6565 This will import a fdf field from a fdf document. @param fdfField The fdf field to import. @throws IOException If there is an error importing the data for this field.
6566 Returns true if the font is a symbolic (that is, it does not use the Adobe Standard Roman character set). @return true if the font is a symbolic
6567 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
6568 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
6569 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @param encoding encoding to be used for the font @throws IOException if the font could not be read
6570 Get the fields rich text value. @return the rich text value string
6571 Constructor for Standard 14.
6572 Constructor. @param fontDictionary Font dictionary.
6573 Create a LayoutPage object from the first page of the given document. @param doc @return @throws IOException
6574 Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2. @param document parent document @param dict font dictionary @param ttf True Type Font @param parent parent Type 0 font @throws IOException if the TTF could not be read
6575 Constructor. @param functionStream The function stream. @throws IOException if an I/O error occurs while reading the function
6576 Creates a new TrueType font embedder for the given TTF as a PDTrueTypeFont. @param document The parent document @param dict Font dictionary @param ttf TrueType font @param encoding The PostScript encoding vector to be used for embedding. @throws IOException if the TTF could not be read
6577 Do a linear interpolation if the two coordinates can be known, or call itself recursively twice. @param coord coord partially set coordinate (not set from step upwards); gets fully filled in the last call ("leaf"), where it is used to get the correct sample @param step between 0 (first call) and dimension - 1 @return interpolated result sample
6578 Test for dynamic XFA content. @param acroForm the AcroForm @return true if there is a dynamic XFA form.
6579 Creates a new ICC color space using the PDF array. @param iccArray the ICC stream object. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
6580 Creates a new PDFPrintable with the given page scaling. @param document the document to print @param scaling page scaling policy
6581 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File)} instead
6582 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
6583 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
6584 Generate and insert text content and clipping around it.
6585 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @throws IOException if the output could not be written
6586 Save the document to a file using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
6587 Get the XFA content as byte array. The XFA is either a stream containing the entire XFA resource or an array specifying individual packets that together make up the XFA resource. A packet is a pair of a string and stream. The string contains the name of the XML element and the stream contains the complete text of this XML element. Each packet represents a complete XML element, with the exception of the first and last packet, which specify begin and end tags for the xdp:xdp element. [IS0 32000-1:2008: 12.7.8] @return the XFA content @throws IOException if the XFA content could not be created
6588 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
6589 Update the StructParents and StructParent values in a PDPage. @param page the new page @param structParentOffset the offset which should be applied
6590 Create the correct PD Model function based on the COS base function. @param function The COS function dictionary. @return The PDModel Function object, never null. @throws IOException If we are unable to create the PDFunction object.
6591 Calculate the interpolation. @return interpolated result sample
6592 Creates a new ICC color space using the PDF array, optionally using a resource cache. @param iccArray the ICC stream object. @param resources resources to use as cache, or null for no caching. @return an ICC color space. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
6593 Creates a new lossless encoded image XObject from a BufferedImage. <p> <u>New for advanced users from 2.0.12 on:</u><br> If you created your image with a non standard ICC colorspace, it will be preserved. (If you load images in java using ImageIO then no need to read this segment) However a new colorspace will be created for each image. So if you create a PDF with several such images, consider replacing the colorspace with a common object to save space. This is done with {@link PDImageXObject#getColorSpace()} and {@link PDImageXObject#setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) PDImageXObject.setColorSpace()} @param document the document where the image will be created @param image the BufferedImage to embed @return a new image XObject @throws IOException if something goes wrong
6594 Extract the matte color from a softmask. @param softMask @return the matte color. @throws IOException if the color conversion fails.
6595 Clone the structure tree from the source to the current destination document. This must be called after all pages are processed. @param destinationDocument @throws IOException
6596 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6597 Get the XFA content as W3C document. @see #getBytes() @return the XFA content @throws IOException if something went wrong when reading the XFA content.
6598 Clone all annotations because of changes possibly made, and because the structure tree is cloned. @param imported @throws IOException
6599 Draws the page to the requested context. @param g The graphics context to draw onto. @param pageSize The size of the page to draw. @throws IOException If there is an IO error while drawing the page.
6600 Interface to start processing a new page. @param page The page that is about to get processed. @throws IOException If there is an error creating the new document.
6601 Build a map of page => set of widgets to be flattened @param fields a list of fields to be flattened @param pages the page tree @return @throws IOException
6602 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
6603 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
6604 This will process the contents of a page. @param page The page to process. @throws IOException If there is an error processing the page.
6605 This will create an FDF dictionary from an XFDF XML document. @param fdfXML The XML document that contains the XFDF data.
6606 This will create an FDF catalog from an XFDF XML document. @param element The XML document that contains the XFDF data.
6607 This will import a fdf field from a fdf document. @param fdfField The fdf field to import. @throws IOException If there is an error importing the data for this field.
6608 Returns true if the font is a symbolic (that is, it does not use the Adobe Standard Roman character set). @return true if the font is a symbolic
6609 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @param encoding encoding to be used for the font @throws IOException if the font could not be read
6610 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @throws IOException if the font could not be read
6611 Constructor for Standard 14.
6612 Creates a Type 1 standard 14 font for embedding. @param baseFont One of the standard 14 PostScript names, e.g. {@link FontName#HELVETICA_BOLD}.
6613 Constructor. @param fontDictionary Font dictionary.
6614 Constructor. @param fontDictionary Font dictionary.
6615 Constructor for reading a Type0 font from a PDF file. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the descendant font is missing.
6616 Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2. @param document parent document @param dict font dictionary @param ttf True Type Font @param parent parent Type 0 font @throws IOException if the TTF could not be read
6617 Private. Creates a new PDType0Font font for embedding. @param document @param ttf @param embedSubset @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf parameter was created in the load() method, false when the ttf parameter was passed to the load() method. @param vertical whether to enable vertical substitutions. @throws IOException
6618 Creates a new TrueType font embedder for the given TTF as a PDTrueTypeFont. @param document The parent document @param dict Font dictionary @param ttf TrueType font @param encoding The PostScript encoding vector to be used for embedding. @throws IOException if the TTF could not be read
6619 Test for dynamic XFA content. @param acroForm the AcroForm @return true if there is a dynamic XFA form.
6620 Creates a new TrueType font for embedding.
6621 Returns an iterator which walks all fields in the tree, in order.
6622 Creates a new PDFPrintable with the given page scaling. @param document the document to print @param scaling page scaling policy
6623 Creates a new PDFPrintable. @param document the document to print
6624 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @throws IOException if the output could not be written
6625 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File)} instead
6626 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
6627 {@inheritDoc}
6628 Creates a new DeviceN color space from the given COS array. @param deviceN an array containing the color space information @param resources resources, can be null. @throws IOException if the colorspace could not be created
6629 This will get the tint transform function. @return The tint transform function. @throws IOException if there is an error creating the function.
6630 Creates a new Separation color space from a PDF color space array. @param separation an array containing all separation information. @param resources resources, can be null. @throws IOException if the color space or the function could not be created.
6631 This will return the function used to convert the color values. @return the function @throws java.io.IOException if we were not able to create the function.
6632 Provide the function(s) of the shading dictionary as array. @return an array containing the function(s). @throws IOException if we were unable to create a function.
6633 Returns the transfer function. @return the transfer function @throws IOException If we are unable to create the PDFunction object.
6634 Generate and insert text content and clipping around it.
6635 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @throws IOException if the output could not be written
6636 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @param resources the resources, can be null. Allows to use its cache for the colorspace. @throws IOException if the colorspace could not be created
6637 Save the document to a file using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
6638 {@inheritDoc}
6639 Build the base image object from the IDATs and profile information
6640 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
6641 Create the correct PD Model function based on the COS base function. @param function The COS function dictionary. @return The PDModel Function object, never null. @throws IOException If we are unable to create the PDFunction object.
6642 Create a PDImageXObject from an image file. The file format is determined by the file name suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
6643 Calculate the interpolation. @return interpolated result sample
6644 Create a PDImageXObject from an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
6645 Creates a new ICC color space using the PDF array, optionally using a resource cache. @param iccArray the ICC stream object. @param resources resources to use as cache, or null for no caching. @return an ICC color space. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
6646 {@inheritDoc}
6647 Creates a new lossless encoded image XObject from a BufferedImage. <p> <u>New for advanced users from 2.0.12 on:</u><br> If you created your image with a non standard ICC colorspace, it will be preserved. (If you load images in java using ImageIO then no need to read this segment) However a new colorspace will be created for each image. So if you create a PDF with several such images, consider replacing the colorspace with a common object to save space. This is done with {@link PDImageXObject#getColorSpace()} and {@link PDImageXObject#setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) PDImageXObject.setColorSpace()} @param document the document where the image will be created @param image the BufferedImage to embed @return a new image XObject @throws IOException if something goes wrong
6648 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6649 Extract the matte color from a softmask. @param softMask @return the matte color. @throws IOException if the color conversion fails.
6650 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6651 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6652 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6653 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6654 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @param destination controlling visibility of optional content groups @return the rendered page image @throws IOException if the PDF cannot be read
6655 Renders a given page to an AWT Graphics2D instance. <p> Known problems: <ul> <li>rendering of PDF files with transparencies is not supported on Ubuntu, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4581">PDFBOX-4581</a> and <a href="https://bugs.openjdk.java.net/browse/JDK-6689349">JDK-6689349</a>. Rendering will not abort, but the pages will be rendered incorrectly.</li> <li>Clipping the Graphics2D will not work properly, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4583">PDFBOX-4583</a>.</li> </ul> If you encounter these problems, then you should render into an image by using the {@link #renderImage(int) renderImage} methods. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @param destination controlling visibility of optional content groups @throws IOException if the PDF cannot be read
6656 Interface method to handle the start of the page processing. @throws IOException If an IO error occurs.
6657 Get the XFA content as W3C document. @see #getBytes() @return the XFA content @throws IOException if something went wrong when reading the XFA content.
6658 This will process all of the pages and the text that is in them. @param pages The pages object in the document. @throws IOException If there is an error parsing the text.
6659 Draws the page to the requested context. @param g The graphics context to draw onto. @param pageSize The size of the page to draw. @throws IOException If there is an IO error while drawing the page.
6660 This will create an FDF document from an XFDF XML document. @param doc The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
6661 Interface to start processing a new page. @param page The page that is about to get processed. @throws IOException If there is an error creating the new document.
6662 Provide standard 14 Helvetica font as default if there isn't any font available. @return the default font
6663 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
6664 This will process the contents of a page. @param page The page to process. @throws IOException If there is an error processing the page.
6665 Returns the mapped font for the specified Standard 14 font. The mapped font is cached. @param baseName name of the standard 14 font @return the mapped font
6666 This will create an FDF catalog from an XFDF XML document. @param element The XML document that contains the XFDF data.
6667 Creates a new TrueType font from a Font dictionary. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
6668 Constructor. @param fontDictionary the corresponding dictionary @throws IOException it something went wrong
6669 Creates a Type 1 font from a Font dictionary in a PDF. @param fontDictionary font dictionary. @throws IOException if there was an error initializing the font. @throws IllegalArgumentException if /FontFile3 was used.
6670 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @throws IOException if the font could not be read
6671 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param resourceCache Resource cache, can be null. @throws IOException if the font could not be created
6672 Creates a Type 1 standard 14 font for embedding. @param baseFont One of the standard 14 PostScript names, e.g. {@link FontName#HELVETICA_BOLD}.
6673 Constructor. @param fontDictionary Font dictionary.
6674 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param randomAccessRead source of a TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @param vertical whether to enable vertical substitutions. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6675 Constructor for reading a Type0 font from a PDF file. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the descendant font is missing.
6676 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6677 Private. Creates a new PDType0Font font for embedding. @param document @param ttf @param embedSubset @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf parameter was created in the load() method, false when the ttf parameter was passed to the load() method. @param vertical whether to enable vertical substitutions. @throws IOException
6678 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6679 Creates a new TrueType font for embedding.
6680 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead. </p> @param doc The PDF document that will hold the embedded font. @param ttf A true type font @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
6681 Returns an iterator which walks all fields in the tree, in order.
6682 Creates a new PDFPrintable. @param document the document to print
6683 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead. </p> @param doc The PDF document that will hold the embedded font. @param randomAccessRead the source of the TTF. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
6684 Retrieve all signature fields from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
6685 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @throws IOException if the output could not be written
6686 Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields. @throws IOException if the appearance streams could not be refreshed
6687 Returns an iterator which walks all fields in the field tree, in order. @return an iterator which walks all fields in the field tree
6688 This will tell this form to cache the fields into a Map structure for fast access via the getField method. The default is false. You would want this to be false if you were changing the COSDictionary behind the scenes, otherwise setting this to true is acceptable. @param cache A boolean telling if we should cache the fields.
6689 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
6690 This will get a field by name, possibly using the cache if setCache is true. @param fullyQualifiedName The name of the field to get. @return The field with that name of null if one was not found.
6691 {@inheritDoc}
6692 This will add overlays to a document. @param specificPageOverlayMap Optional map of overlay files of which the first page will be used for specific pages of the input document. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong. @throws IllegalArgumentException if the input document is missing.
6693 Creates a new DeviceN color space from the given COS array. @param deviceN an array containing the color space information @param resources resources, can be null. @throws IOException if the colorspace could not be created
6694 This will add overlays documents to a document. If you created the overlay documents with subsetted fonts, you need to save them first so that the subsetting gets done. @param specificPageOverlayDocumentMap Optional map of overlay documents for specific pages. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong
6695 This will get the tint transform function. @return The tint transform function. @throws IOException if there is an error creating the function.
6696 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
6697 Creates a new Separation color space from a PDF color space array. @param separation an array containing all separation information. @param resources resources, can be null. @throws IOException if the color space or the function could not be created.
6698 This will return the function used to convert the color values. @return the function @throws java.io.IOException if we were not able to create the function.
6699 Convert the input values using the functions of the shading dictionary. @param input the input values @return the output values @throws IOException thrown if something went wrong
6700 Provide the function(s) of the shading dictionary as array. @return an array containing the function(s). @throws IOException if we were unable to create a function.
6701 Returns the transfer function. @return the transfer function @throws IOException If we are unable to create the PDFunction object.
6702 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @param resources the resources, can be null. Allows to use its cache for the colorspace. @throws IOException if the colorspace could not be created
6703 Creates a color space given a name or array. Abbreviated device color names are not supported here, please replace them first. This method is for PDFBox internal use only, others should use {@link #create(COSBase, PDResources)}. @param colorSpace the color space COS object @param resources the current resources. @param wasDefault if current color space was used by a default color space. @return a new color space. @throws MissingResourceException if the color space is missing in the resources dictionary @throws IOException if the color space is unknown or cannot be created.
6704 {@inheritDoc}
6705 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @throws IOException if the colorspace could not be created
6706 Build the base image object from the IDATs and profile information
6707 Create a PDImageXObject from an image file, see {@link #createFromFileByExtension(File, PDDocument)} for more details. @param imagePath the image file path. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject, or if the image type is not supported.
6708 {@inheritDoc} The returned images are cached via a SoftReference.
6709 Create a PDImageXObject from an image file. The file format is determined by the file name suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
6710 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
6711 Create a PDImageXObject from an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
6712 {@inheritDoc}
6713 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @throws IOException if the PDF cannot be read
6714 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6715 This will take a document and split into several other documents. @param document The document to split. @return A list of all the split documents. These should all be saved before closing any documents, including the source document. Any further operations should be made after reloading them, to avoid problems due to resource sharing. For the same reason, they should not be saved with encryption. @throws IOException If there is an IOError
6716 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6717 This will take a PDDocument and write the text of that document to the print writer. @param doc The document to get the data from. @param outputStream The location to put the text. @throws IOException If the doc is in an invalid state.
6718 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6719 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
6720 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
6721 Process text from the PDF Stream. You should override this method if you want to perform an action when encoded text is being processed. @param string the encoded text @throws IOException if there is an error processing the string
6722 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @param destination controlling visibility of optional content groups @return the rendered page image @throws IOException if the PDF cannot be read
6723 Returns the path for the character with the given name for the specified Standard 14 font. The mapped font is cached. The path may differ in different environments as it depends on the mapped font. @param baseName name of the standard 14 font @param glyphName name of glyph @return the mapped font @throws IOException if the data could not be read
6724 Creates an MMType1Font from a Font dictionary in a PDF. @param fontDictionary font dictionary @throws IOException if the font could not be read
6725 Renders a given page to an AWT Graphics2D instance. <p> Known problems: <ul> <li>rendering of PDF files with transparencies is not supported on Ubuntu, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4581">PDFBOX-4581</a> and <a href="https://bugs.openjdk.java.net/browse/JDK-6689349">JDK-6689349</a>. Rendering will not abort, but the pages will be rendered incorrectly.</li> <li>Clipping the Graphics2D will not work properly, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4583">PDFBOX-4583</a>.</li> </ul> If you encounter these problems, then you should render into an image by using the {@link #renderImage(int) renderImage} methods. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @param destination controlling visibility of optional content groups @throws IOException if the PDF cannot be read
6726 Interface method to handle the start of the page processing. @throws IOException If an IO error occurs.
6727 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
6728 This will process all of the pages and the text that is in them. @param pages The pages object in the document. @throws IOException If there is an error parsing the text.
6729 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
6730 This will create an FDF document from an XFDF XML document. @param doc The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
6731 Provide standard 14 Helvetica font as default if there isn't any font available. @return the default font
6732 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6733 Returns the mapped font for the specified Standard 14 font. The mapped font is cached. @param baseName name of the standard 14 font @return the mapped font
6734 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
6735 Creates a new TrueType font from a Font dictionary. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
6736 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6737 Constructor. @param fontDictionary the corresponding dictionary @throws IOException it something went wrong
6738 Creates a Type 1 font from a Font dictionary in a PDF. @param fontDictionary font dictionary. @throws IOException if there was an error initializing the font. @throws IllegalArgumentException if /FontFile3 was used.
6739 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6740 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param resourceCache Resource cache, can be null. @throws IOException if the font could not be created
6741 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead.</p> @param doc The PDF document that will hold the embedded font. @param file A TTF file. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
6742 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param randomAccessRead source of a TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @param vertical whether to enable vertical substitutions. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6743 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead.</p> @param doc The PDF document that will hold the embedded font. @param input A TTF file stream @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
6744 Retrieve all signature dictionaries from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
6745 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6746 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6747 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead. </p> @param doc The PDF document that will hold the embedded font. @param ttf A true type font @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
6748 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead. </p> @param doc The PDF document that will hold the embedded font. @param randomAccessRead the source of the TTF. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
6749 Retrieve all signature fields from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
6750 This will add a signature to the document. If the 0-based page number in the options parameter is smaller than 0 or larger than max, the nearest valid page number will be used (i.e. 0 or max) and no exception will be thrown. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
6751 Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields. @throws IOException if the appearance streams could not be refreshed
6752 Returns an iterator which walks all fields in the field tree, in order. @return an iterator which walks all fields in the field tree
6753 This will tell this form to cache the fields into a Map structure for fast access via the getField method. The default is false. You would want this to be false if you were changing the COSDictionary behind the scenes, otherwise setting this to true is acceptable. @param cache A boolean telling if we should cache the fields.
6754 This method will import an entire FDF document into the PDF document that this acroform is part of. @param fdf The FDF document to import. @throws IOException If there is an error doing the import.
6755 This will get a field by name, possibly using the cache if setCache is true. @param fullyQualifiedName The name of the field to get. @return The field with that name of null if one was not found.
6756 This will save the document to an output stream and close the stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
6757 This will add overlays to a document. @param specificPageOverlayMap Optional map of overlay files of which the first page will be used for specific pages of the input document. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong. @throws IllegalArgumentException if the input document is missing.
6758 Convert the input value using the functions of the shading dictionary. @param inputValue the input value @return the output values @throws IOException thrown if something went wrong
6759 This will add overlays documents to a document. If you created the overlay documents with subsetted fonts, you need to save them first so that the subsetting gets done. @param specificPageOverlayDocumentMap Optional map of overlay documents for specific pages. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong
6760 Convert color to RGB color value, using function if required, then convert from the shading color space to an RGB value, which is encoded into an integer.
6761 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
6762 Convert the input values using the functions of the shading dictionary. @param input the input values @return the output values @throws IOException thrown if something went wrong
6763 Returns the non-stroking AWT Paint. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more. @return The non-stroking AWT Paint. @throws IOException if the non-stroking AWT Paint could not be created
6764 For advanced users, to extract the transparency group into a separate graphics device. @param form the transparency group to be extracted @param graphics the target graphics device @throws IOException if the transparency group could not be extracted
6765 Creates a color space given a name or array. Abbreviated device color names are not supported here, please replace them first. This method is for PDFBox internal use only, others should use {@link #create(COSBase, PDResources)}. @param colorSpace the color space COS object @param resources the current resources. @param wasDefault if current color space was used by a default color space. @return a new color space. @throws MissingResourceException if the color space is missing in the resources dictionary @throws IOException if the color space is unknown or cannot be created.
6766 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @throws IOException if the colorspace could not be created
6767 Returns the given page as an RGB image at the given scale. A scale of 1 will render at 72 DPI. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @return the rendered page image @throws IOException if the PDF cannot be read
6768 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @return the rendered page image @throws IOException if the PDF cannot be read
6769 Create a PDImageXObject from an image file, see {@link #createFromFileByExtension(File, PDDocument)} for more details. @param imagePath the image file path. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject, or if the image type is not supported.
6770 {@inheritDoc} The returned images are cached via a SoftReference.
6771 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
6772 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
6773 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scale the scaling factor, where 1 = 72 DPI @throws IOException if the PDF cannot be read
6774 This will take a document and extract the desired pages into a new document. Both startPage and endPage are included in the extracted document. If the endPage is greater than the number of pages in the source document, it will go to the end of the document. If startPage is less than 1, it'll start with page 1. If startPage is greater than endPage or greater than the number of pages in the source document, a blank document will be returned. @return The extracted document @throws IOException If there is an IOError
6775 This will return the text of a document. See writeText. <br> NOTE: The document must not be encrypted when coming into this method. <p>IMPORTANT: By default, text extraction is done in the same sequence as the text in the PDF page content stream. PDF is a graphic format, not a text format, and unlike HTML, it has no requirements that text one on page be rendered in a certain order. The order is the one that was determined by the software that created the PDF. To get text sorted from left to right and top to botton, use {@link #setSortByPosition(boolean)}. @param doc The document to get the text from. @return The text of the PDF document. @throws IOException if the doc state is invalid or it is encrypted.
6776 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @throws IOException if the PDF cannot be read
6777 This will load a document from a file. @param filename The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
6778 This will take a document and split into several other documents. @param document The document to split. @return A list of all the split documents. These should all be saved before closing any documents, including the source document. Any further operations should be made after reloading them, to avoid problems due to resource sharing. For the same reason, they should not be saved with encryption. @throws IOException If there is an IOError
6779 This will load a document from a file. @param file The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
6780 Called when a string of text is to be shown. @param string the encoded text @throws IOException if there was an error showing the text
6781 This will take a PDDocument and write the text of that document to the print writer. @param doc The document to get the data from. @param outputStream The location to put the text. @throws IOException If the doc is in an invalid state.
6782 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
6783 Called when a string of text with spacing adjustments is to be shown. @param array array of encoded text strings and adjustments @throws IOException if there was an error showing the text
6784 Process text from the PDF Stream. You should override this method if you want to perform an action when encoded text is being processed. @param string the encoded text @throws IOException if there is an error processing the string
6785 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @param resourceCache resource cache, only useful for type 3 fonts, can be null @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
6786 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6787 Returns the path for the character with the given name for the specified Standard 14 font. The mapped font is cached. The path may differ in different environments as it depends on the mapped font. @param baseName name of the standard 14 font @param glyphName name of glyph @return the mapped font @throws IOException if the data could not be read
6788 This will return the last signature from the field tree. Note that this may not be the last in time when empty signature fields are created first but signed after other fields. @return the last signature as <code>PDSignatureField</code>.
6789 Creates an MMType1Font from a Font dictionary in a PDF. @param fontDictionary font dictionary @throws IOException if the font could not be read
6790 Save PDF incrementally without closing for external signature creation scenario. The general sequence is: <pre> PDDocument pdDocument = ...; OutputStream outputStream = ...; SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults PDSignature pdSignature = ...; // add signature parameters to be used when creating signature dictionary pdDocument.addSignature(pdSignature, signatureOptions); // prepare PDF for signing and obtain helper class to be used ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream); // get data to be signed InputStream dataToBeSigned = externalSigningSupport.getContent(); // invoke signature service byte[] signature = sign(dataToBeSigned); // set resulted CMS signature externalSigningSupport.setSignature(signature); // last step is to close the document pdDocument.close(); </pre> <p> Note that after calling this method, only {@code close()} method may invoked for {@code PDDocument} instance and only AFTER {@link ExternalSigningSupport} instance is used. </p> <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write the final PDF. It will be closed when the document is closed. It <i><b>must never</b></i> point to the source file or that one will be harmed! @return instance to be used for external signing and setting CMS signature @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream or signature options were not set.
6791 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
6792 This will flatten the specified form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> @param fields a list of fields to be flattened @param refreshAppearances if set to true the appearances for the form field widgets will be updated @throws IOException if something went wrong flattening the fields
6793 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
6794 Add parameters of signature to be created externally. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
6795 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6796 Add a signature to be created using the instance of given interface. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
6797 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
6798 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
6799 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6800 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6801 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead.</p> @param doc The PDF document that will hold the embedded font. @param file A TTF file. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
6802 Renders a glyph. @param path the GeneralPath for the glyph @param font the font @param code character code @param displacement the glyph's displacement (advance) @param at the transformation @throws IOException if something went wrong
6803 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead.</p> @param doc The PDF document that will hold the embedded font. @param input A TTF file stream @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
6804 Retrieve all signature dictionaries from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
6805 This will add a signature to the document. If the 0-based page number in the options parameter is smaller than 0 or larger than max, the nearest valid page number will be used (i.e. 0 or max) and no exception will be thrown. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
6806 Build a indexed image
6807 Returns the given page as an RGB image at 72 DPI @param pageIndex the zero-based index of the page to be converted. @return the rendered page image @throws IOException if the PDF cannot be read
6808 This method will import an entire FDF document into the PDF document that this acroform is part of. @param fdf The FDF document to import. @throws IOException If there is an error doing the import.
6809 Renders a given page to an AWT Graphics2D instance at 72 DPI. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @throws IOException if the PDF cannot be read
6810 This will save the document to an output stream and close the stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
6811 Convert the input value using the functions of the shading dictionary. @param inputValue the input value @return the output values @throws IOException thrown if something went wrong
6812 Convert color to RGB color value, using function if required, then convert from the shading color space to an RGB value, which is encoded into an integer.
6813 Returns the font resource with the given name, or null if none exists. @param name Name of the font resource. @return the font with the given name or null @throws IOException if something went wrong.
6814 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
6815 Returns the non-stroking AWT Paint. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more. @return The non-stroking AWT Paint. @throws IOException if the non-stroking AWT Paint could not be created
6816 This will flatten all form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> <p> The appearances for the form fields widgets will <strong>not</strong> be generated </p> @throws IOException if something went wrong flattening the fields
6817 Add parameters of signature to be created externally using default signature options. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
6818 For advanced users, to extract the transparency group into a separate graphics device. @param form the transparency group to be extracted @param graphics the target graphics device @throws IOException if the transparency group could not be extracted
6819 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
6820 Get the points from the triangles, calculate their color and add point-color mappings.
6821 Returns the given page as an RGB image at the given scale. A scale of 1 will render at 72 DPI. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @return the rendered page image @throws IOException if the PDF cannot be read
6822 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @return the rendered page image @throws IOException if the PDF cannot be read
6823 Fills and then strokes the path. @param windingRule The winding rule this path will use. @throws IOException If there is an IO error while filling the path.
6824 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
6825 Convert the image using the state. @param doc the document to put the image in @param state the parser state containing the PNG chunks. @return null or the converted image
6826 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scale the scaling factor, where 1 = 72 DPI @throws IOException if the PDF cannot be read
6827 This will take a document and extract the desired pages into a new document. Both startPage and endPage are included in the extracted document. If the endPage is greater than the number of pages in the source document, it will go to the end of the document. If startPage is less than 1, it'll start with page 1. If startPage is greater than endPage or greater than the number of pages in the source document, a blank document will be returned. @return The extracted document @throws IOException If there is an IOError
6828 This will return the text of a document. See writeText. <br> NOTE: The document must not be encrypted when coming into this method. <p>IMPORTANT: By default, text extraction is done in the same sequence as the text in the PDF page content stream. PDF is a graphic format, not a text format, and unlike HTML, it has no requirements that text one on page be rendered in a certain order. The order is the one that was determined by the software that created the PDF. To get text sorted from left to right and top to botton, use {@link #setSortByPosition(boolean)}. @param doc The document to get the text from. @return The text of the PDF document. @throws IOException if the doc state is invalid or it is encrypted.
6829 Process the set font and font size operator. @param operands the font name and size @throws IOException in case there are missing operators or the font is not within the resources
6830 This will load a document from a file. @param filename The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
6831 This will load a document from a file. @param file The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
6832 Copies any needed resources from the document’s DR dictionary into the stream’s Resources dictionary. Resources with the same name shall be left intact.
6833 Called when a string of text is to be shown. @param string the encoded text @throws IOException if there was an error showing the text
6834 This will get the font for this font setting. @return The font for this setting of null if one was not found. @throws IOException If there is an error getting the font.
6835 Called when a string of text with spacing adjustments is to be shown. @param array array of encoded text strings and adjustments @throws IOException if there was an error showing the text
6836 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @param resourceCache resource cache, only useful for type 3 fonts, can be null @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
6837 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
6838 This will return the last signature from the field tree. Note that this may not be the last in time when empty signature fields are created first but signed after other fields. @return the last signature as <code>PDSignatureField</code>.
6839 Save PDF incrementally without closing for external signature creation scenario. The general sequence is: <pre> PDDocument pdDocument = ...; OutputStream outputStream = ...; SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults PDSignature pdSignature = ...; // add signature parameters to be used when creating signature dictionary pdDocument.addSignature(pdSignature, signatureOptions); // prepare PDF for signing and obtain helper class to be used ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream); // get data to be signed InputStream dataToBeSigned = externalSigningSupport.getContent(); // invoke signature service byte[] signature = sign(dataToBeSigned); // set resulted CMS signature externalSigningSupport.setSignature(signature); // last step is to close the document pdDocument.close(); </pre> <p> Note that after calling this method, only {@code close()} method may invoked for {@code PDDocument} instance and only AFTER {@link ExternalSigningSupport} instance is used. </p> <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write the final PDF. It will be closed when the document is closed. It <i><b>must never</b></i> point to the source file or that one will be harmed! @return instance to be used for external signing and setting CMS signature @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream or signature options were not set.
6840 This will flatten the specified form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> @param fields a list of fields to be flattened @param refreshAppearances if set to true the appearances for the form field widgets will be updated @throws IOException if something went wrong flattening the fields
6841 append all pages from source to destination. @param destination the document to receive the pages @param source the document originating the new pages @throws IOException If there is an error accessing data from either document.
6842 Add parameters of signature to be created externally. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
6843 Add a signature to be created using the instance of given interface. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
6844 Try to convert a PNG into a PDImageXObject. If for any reason the PNG can not be converted, null is returned. <p> This usually means the PNG structure is damaged (CRC error, etc.) or it uses some features which can not be mapped to PDF. @param doc the document to put the image in @param imageData the byte data of the PNG @return null or the PDImageXObject built from the png
6845 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
6846 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
6847 Constructs and sets new contents for given appearance stream.
6848 Renders a glyph. @param path the GeneralPath for the glyph @param font the font @param code character code @param displacement the glyph's displacement (advance) @param at the transformation @throws IOException if something went wrong
6849 This will implement the gs operator. @param gs The state to copy this dictionaries values into. @throws IOException If there is an error copying font information.
6850 Merge the list of source documents, saving the result in the destination file. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
6851 Create a PDImageXObject from an image byte array. This overloaded version allows providing a custom factory to handle specific image formats, such as BMP and GIF, or to act as a fallback strategy when the default converters (e.g., for PNG or TIFF) fail. @param document the document that shall use this PDImageXObject. @param byteArray bytes from an image file. @param name name of image file for exception messages, can be null. @param customFactory optional factory used to handle BMP, GIF, or fallback cases (e.g., for PNG or TIFF). If {@code null}, this method delegates to {@link #createFromByteArray(PDDocument, byte[], String)}. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
6852 Processes the operators of the given content stream. @param content the content to parse. @throws IOException if there is an error reading or parsing the content stream.
6853 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @param compressParameters defines if compressed object streams are enabled @throws IOException If there is an error saving the document.
6854 Build a indexed image
6855 Create a PDImageXObject from bytes of an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromByteArray}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param byteArray bytes from an image file. @param document the document that shall use this PDImageXObject. @param name name of image file for exception messages, can be null. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
6856 Returns the given page as an RGB image at 72 DPI @param pageIndex the zero-based index of the page to be converted. @return the rendered page image @throws IOException if the PDF cannot be read
6857 Renders a given page to an AWT Graphics2D instance at 72 DPI. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @throws IOException if the PDF cannot be read
6858 Constructor for reading an existing DA string. @param defaultResources DR entry @param defaultAppearance DA entry @throws IOException If the DA could not be parsed
6859 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
6860 Returns the font resource with the given name, or null if none exists. @param name Name of the font resource. @return the font with the given name or null @throws IOException if something went wrong.
6861 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
6862 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
6863 This will flatten all form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> <p> The appearances for the form fields widgets will <strong>not</strong> be generated </p> @throws IOException if something went wrong flattening the fields
6864 Add parameters of signature to be created externally using default signature options. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
6865 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
6866 Get the points from the triangles, calculate their color and add point-color mappings.
6867 Fills and then strokes the path. @param windingRule The winding rule this path will use. @throws IOException If there is an IO error while filling the path.
6868 Convert the image using the state. @param doc the document to put the image in @param state the parser state containing the PNG chunks. @return null or the converted image
6869 Process the set font and font size operator. @param operands the font name and size @throws IOException in case there are missing operators or the font is not within the resources
6870 This is the public method for setting the appearance stream. @param apValue the String value which the appearance should represent @throws IOException If there is an error creating the stream.
6871 Copies any needed resources from the document’s DR dictionary into the stream’s Resources dictionary. Resources with the same name shall be left intact.
6872 Constructs a COSAppearance from the given field. @param field the field which you wish to control the appearance of @throws IOException
6873 This will get the font for this font setting. @return The font for this setting of null if one was not found. @throws IOException If there is an error getting the font.
6874 append all pages from source to destination. @param destination the document to receive the pages @param source the document originating the new pages @throws IOException If there is an error accessing data from either document.
6875 Try to convert a PNG into a PDImageXObject. If for any reason the PNG can not be converted, null is returned. <p> This usually means the PNG structure is damaged (CRC error, etc.) or it uses some features which can not be mapped to PDF. @param doc the document to put the image in @param imageData the byte data of the PNG @return null or the PDImageXObject built from the png
6876 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
6877 Constructs and sets new contents for given appearance stream.
6878 This will implement the gs operator. @param gs The state to copy this dictionaries values into. @throws IOException If there is an error copying font information.
6879 Merge the list of source documents, saving the result in the destination file. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
6880 Create a PDImageXObject from an image byte array. This overloaded version allows providing a custom factory to handle specific image formats, such as BMP and GIF, or to act as a fallback strategy when the default converters (e.g., for PNG or TIFF) fail. @param document the document that shall use this PDImageXObject. @param byteArray bytes from an image file. @param name name of image file for exception messages, can be null. @param customFactory optional factory used to handle BMP, GIF, or fallback cases (e.g., for PNG or TIFF). If {@code null}, this method delegates to {@link #createFromByteArray(PDDocument, byte[], String)}. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
6881 Processes the operators of the given content stream. @param content the content to parse. @throws IOException if there is an error reading or parsing the content stream.
6882 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @param compressParameters defines if compressed object streams are enabled @throws IOException If there is an error saving the document.
6883 Create a PDImageXObject from bytes of an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromByteArray}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param byteArray bytes from an image file. @param document the document that shall use this PDImageXObject. @param name name of image file for exception messages, can be null. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
6884 Constructor for reading an existing DA string. @param defaultResources DR entry @param defaultAppearance DA entry @throws IOException If the DA could not be parsed
6885 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
6886 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
6887 This is the public method for setting the appearance stream. @param apValue the String value which the appearance should represent @throws IOException If there is an error creating the stream.
6888 Constructs a COSAppearance from the given field. @param field the field which you wish to control the appearance of @throws IOException
