1 Sets the current text matrix. @param value the new transformation matrix for text rendering
2 Sets the text line matrix in the current graphics state. @param value new transformation matrix for text lines
3 Sets the non-stroking color in the current graphics state. @param color PDColor object representing the new non-stroking color
4 Sets the current stroking color in the PDF graphics context. @param color PDColor object representing the new stroking color
5 Handles exceptions during PDF operator processing. Logs errors or warnings based on exception type; rethrows others. @param operator the PDF operator being processed @param operands list of operands for the operator @param exception the IOException that occurred @throws IOException if an unrecoverable error occurs
6 Retrieves the current text matrix. @return The transformation matrix used for rendering text
7 Creates a scaling transformation matrix. @param x scale factor for the x-axis @param y scale factor for the y-axis @return Matrix representing the scaling transformation
8 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation
9 Creates a rotation transformation matrix. @param theta angle of rotation in radians @param tx horizontal translation after rotation @param ty vertical translation after rotation @return Matrix representing the rotation and translation
10 Retrieves the current text line matrix. @return Matrix representing the text line transformation
11 Transforms a point using the current transformation matrix. @param x original X coordinate @param y original Y coordinate @return transformed Point2D.Float
12 Transforms the given width based on the current transformation matrix. @param width original width to be transformed @return adjusted width considering scaling and shearing factors
13 Determines the text direction based on transformation matrix. @return Direction in degrees (0, 90, 180, 270)
14 Sets the text transformation matrix for rendering. @param value new transformation matrix for text
15 Sets the text line matrix in the current graphics state. @param value new transformation matrix for text lines
16 Sets the non-stroking color in the current graphics state. @param color PDColor to be set for non-stroking operations
17 Sets the current stroking color in the PDF graphics context. @param color PDColor object representing the stroke color
18 Handles exceptions during operator execution. Logs errors or warnings based on exception type. @param operator PDF operator being executed @param operands list of operands for the operator @param exception IOException thrown during operation @throws IOException if unhandled exception occurs
19 Retrieves the current text matrix from the graphics state. @return The current transformation matrix for text rendering
20 Creates a scaling transformation matrix. @param x scale factor for the X-axis @param y scale factor for the Y-axis @return Matrix representing the scaling transformation
21 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation transformation
22 Creates a rotation transformation matrix. @param theta angle of rotation in radians @param tx translation along X-axis @param ty translation along Y-axis @return Matrix representing the rotation and translation
23 Retrieves the current text line matrix. @return Matrix representing the text line transformation
24 Transforms a point using the current graphics transformation matrix. @param x original X coordinate @param y original Y coordinate @return transformed Point2D.Float object
25 Transforms the given width using the current transformation matrix. @param width original width to be transformed @return transformed width considering scaling and shearing factors
26 Determines the text rendering direction based on transformation matrix. @return Direction in degrees (0, 90, 180, 270)
27 Retrieves or creates an Operator instance for a given PDF operator string. Caches non-inline image operators to ensure thread-safe access. @param operator the PDF operator string @return Operator instance corresponding to the input string
28 Retrieves the current non-stroking color. @return PDColor object representing the non-stroking color
29 Returns the current non-stroking color space. @return PDColorSpace object representing the non-stroking color space
30 Retrieves the current stroking color from the graphics state. @return PDColor object representing the stroke color
31 Retrieves the current stroking color space. @return PDColorSpace object representing the stroke color space
32 Constructs a PDMarkedContent instance. @param tag the tag name for the marked content @param properties dictionary of properties for the content
33 Retrieves a RenderState by its COSName. @param state COSName representing the rendering state @return RenderState object or null if not found
34 Retrieves or defaults a BaseState from a COSName. @param state COSName representing the state, can be null @return Corresponding BaseState or ON if state is null
35 Retrieves the type name of the pattern. @return The string "Pattern"
36 Returns the type of shading. @return A string representing the shading type
37 Retrieves the default value of the button. @return The string representation of the default value or an empty string if not set.
38 Unchecks the checkbox by setting its value to 'Off'. @throws IOException if an I/O error occurs during the operation
39 Retrieves or creates an Operator instance for a given PDF operator string. @param operator the PDF operator string to retrieve or create @return Operator object associated with the provided operator string
40 Retrieves the current non-stroking color from the graphics state. @return PDColor object representing the non-stroking color
41 Retrieves the non-stroking color space from the current graphics state. @return PDColorSpace object representing the non-stroking color space
42 Constructs a new COSBoolean object. @param aValue standard boolean value to encapsulate
43 Retrieves the current stroking color from the graphics state. @return PDColor object representing the stroke color
44 Protected constructor initializes a COSName with a given name. @param aName the string representation of the PDF name
45 Retrieves the current stroking color space from the graphics context. @return PDColorSpace object representing the color space used for stroking operations
46 Private constructor to restrict instantiation.
47 Constructs a COSString from byte array. @param bytes input byte array @param forceHex if true, forces hexadecimal representation
48 Initializes a new instance of PDMarkedContent with the specified tag and properties. @param tag COSName object representing the tag for the marked content @param properties COSDictionary containing properties of the marked content
49 Initializes an empty COSDictionary. Creates and associates a COSUpdateState with this dictionary.
50 Initializes a new COSObject with a given COSBase. @param object the underlying COSBase object to wrap
51 Constructs a COSObject wrapping a given COSBase. @param object the underlying COSBase object @param parser the ICOSParser instance for parsing operations
52 Constructs a COSObject with a given key and parser. @param key the object key @param parser the PDF parser used for initialization
53 Retrieves the x-coordinate of the lower-left corner. @return x-coordinate as a float
54 Retrieves the y-coordinate of the lower-left corner of the rectangle. @return y-coordinate value as a float
55 Retrieves the x-coordinate of the upper-right corner. @return x-coordinate as a float
56 Retrieves the Y-coordinate of the upper-right corner. @return Y-coordinate as a float
57 Retrieves the font size from the PDFontSetting. @return Font size as a float value
58 Retrieves the red component value. @return float representing the red color component
59 Maps a COSName to its corresponding RenderState. @param state COSName instance representing the rendering state @return RenderState object or null if input is null
60 Retrieves the green component value. @return green color component as a float
61 Retrieves the blue component value. @return blue color component as float
62 Converts COSName to corresponding BaseState. @param state COSName representing the state @return BaseState object, defaults to ON if null
63 Retrieves the X tristimulus value. @return float representing the X value
64 Returns the type of the pattern. @return "Pattern" as the type identifier
65 Retrieves the Y tristimulus value. @return Y value as a float
66 Retrieves the type of shading. @return The string representation of the shading type
67 Retrieves the Z tristimulus value. @return Z component as a float
68 Retrieves the default value of the button. @return The string representation of the default value or an empty string if not set
69 Unchecks the checkbox by setting its value to "Off". @throws IOException if an I/O error occurs while setting the value
70 Retrieves an integer value at the specified index. @param index position of the element in the array @param defaultValue default value to return if element is not a COSNumber @return integer value or default if out of bounds or not a COSNumber
71 Retrieves the name at a specified index, returning a default value if not found. @param index the position of the element to retrieve @param defaultValue the value to return if no COSName is found at the index @return the name as a String or the default value if out of bounds or not a COSName
72 Finds the index of a specified COSBase object in the array. @param object the COSBase object to search for @return index of the object or -1 if not found
73 Initializes a COSArrayList with an actual list and its associated COSArray. @param actualList The list of COS objects managed by this instance. @param cosArray The COSArray object associated with the actual list.
74 Constructs a COSBoolean object with a specified boolean value. @param aValue the boolean value to be represented
75 Evaluates the Function Type 2 with given input. @param input array of float values for interpolation @return interpolated result as an array of floats
76 Constructs a COSName with the given string. @param aName the name to be assigned to this COSName
77 Returns string representation of COSArrayList. @return formatted string containing underlying COSArray elements
78 Private constructor to enforce singleton pattern.
79 Retrieves the list of file filters from the PDF stream. @return List of filter names as strings or empty list if no filters are set
80 Constructs a COSString from byte array. @param bytes byte array representing the string data @param forceHex true to enforce hexadecimal representation
81 Converts standard Boolean to COSBoolean. @param value standard boolean value @return corresponding COSBoolean (TRUE or FALSE)
82 Writes COSBoolean to PDF stream. @param output target output stream for PDF data @param cosBoolean boolean value to write
83 Initializes an empty COSDictionary with default update state.
84 Constructs a new COSDictionary by copying entries from another. @param dict source dictionary to copy entries from
85 Constructs a COSObject wrapping a COSBase. @param object the underlying COSBase to manage
86 Returns the number of key-value pairs in the COSDictionaryMap. @return integer count of items in the underlying map
87 Constructs a COSObject wrapping a given COSBase. @param object the COSBase to wrap @param parser the ICOSParser for handling parsing tasks
88 Retrieves a COSObject by its key. @param key the key associated with the COSObject to retrieve @return the COSObject if found, otherwise null
89 Constructs a COSObject with a given key and parser. @param key unique identifier for the COS object @param parser used to parse PDF content
90 Retrieves the x-coordinate of the lower-left corner. @return float value representing the x-coordinate
91 Retrieves an item from the dictionary by one of two keys. @param firstKey primary key to search for the item @param secondKey secondary key if the first key is not found @return COSBase object associated with either key, or null if neither is found
92 Retrieves the Y-coordinate of the lower-left corner. @return Y-coordinate as a float
93 Retrieves the number of recipients in the encryption settings. @return Number of recipient entries
94 Retrieves the x-coordinate of the upper-right corner. @return x-coordinate as a float
95 Retrieves the recipient string at a specified index. @param i index of the recipient in the recipients list @return COSString representing the recipient or null if not found
96 Retrieves the y-coordinate of the upper-right corner. @return y-coordinate as a float
97 Retrieves the transition direction. @return COSBase object representing direction or zero if not set
98 Retrieves the font size from PDFontSetting. @return font size as a float
99 Retrieves all metadata keys from the PDF document. @return Sorted set of metadata keys as strings
100 Retrieves the red component value. @return Red component as a float
101 Retrieves a list of attribute names from the COSDictionary. Excludes the key 'O' and returns the string representation of each key. @return List of attribute names as strings
102 Retrieves the green component value. @return green component as a float
103 Adds trailer information to the cross-reference stream. @param trailerDict dictionary containing trailer entries
104 Retrieves the blue component value. @return blue color component as a float
105 Retrieves the X tristimulus value. @return X value as a float
106 Determines if a dictionary represents an Info object. @param dictionary the COSDictionary to check @return true if the dictionary contains Info keys, false otherwise
107 Retrieves the Y tristimulus value. @return float representing the Y value
108 Checks if font descriptor contains width information. @return true if WIDTHS or MISSING_WIDTH keys are present, false otherwise
109 Retrieves the Z tristimulus value. @return float representing the Z component of the color
110 Checks if the font descriptor contains missing width information. @return true if missing width is defined, false otherwise
111 Checks if the form contains XFA content. @return true if XFA is present, false otherwise
112 Retrieves an integer value at a specified index. @param index the position of the object in the array @param defaultValue the default integer to return if no valid COSNumber is found @return integer value or default if not applicable
113 Retrieves the name of a COSName object at the specified index. @param index position in the array @param defaultValue default value if not found or not a COSName @return String representation of the COSName or default value
114 Retrieves the appropriate Encoding instance based on the given COSName. @param name the encoding name as a COSName @return Encoding instance or null if not found
115 Finds the index of a COSBase object in the array. @param object the COSBase object to search for @return index of the object or -1 if not found
116 Initializes a COSArrayList with an actual list and a COSArray. @param actualList List of elements to manage @param cosArray Underlying COSArray for data storage
117 Returns the index of the selected radio button. @return Index of the selected option, or -1 if none is selected
118 Initializes a new COSDocument instance. @param streamCacheCreateFunction factory for creating stream caches @param parser the ICOSParser to use for document parsing
119 Evaluates the Function Type 2 with given input. @param input array of input values for interpolation @return interpolated output values as a float array @throws IOException if there's an error processing the function
120 Returns a string representation of the COSArrayList. @return A formatted string including the underlying COSArray's elements
121 Retrieves the list of file filters from the PDF stream. @return List of filter names or empty list if no filters are set
122 Constructs a COSFloat from a string representation. @param aFloat string containing the float value @throws IOException if parsing fails or input is invalid
123 Converts standard Boolean to COSBoolean. @param value standard Boolean object @return COSBoolean.TRUE or COSBoolean.FALSE based on input value
124 Returns string representation of COSFloat. Uses formatted float value for display. @return formatted string in "COSFloat{value}" format
125 Writes a COSBoolean to the PDF output stream. @param output the OutputStream to write to @param cosBoolean the COSBoolean object to write @throws IOException if an I/O error occurs
126 Writes the formatted float value to a PDF stream. @param output OutputStream to write the PDF data @throws IOException if an I/O error occurs during writing
127 Constructs a COSDictionary by copying another dictionary. @param dict the source dictionary to copy from
128 Converts the current state to a COSIncrement. @return A new COSIncrement instance initialized with updateInfo
129 Returns the number of key-value pairs in the COSDictionaryMap. @return integer count of items in the map
130 Determines if the COS object needs to be updated. @return true if update is needed, false otherwise
131 Retrieves a COSObject by its key. @param key COSName key to identify the object @return COSObject if found, otherwise null
132 Retrieves or creates a COSInteger instance for the given value. @param val numeric value of the integer @return COSInteger object representing the value
133 Retrieves an item by primary or secondary key. @param firstKey primary key to identify the item @param secondKey secondary key if first is not found @return COSBase object associated with either key or null if both are missing
134 Retrieves the number of recipients in the encryption settings. @return Number of recipient entries
135 Checks if this COSInteger is equal to another object. @param o the object to compare @return true if equal, false otherwise
136 Retrieves the recipient string at a specified index. @param i index of the recipient in the recipients array @return COSString representing the recipient or null if not found
137 Writes a COSInteger to the output stream. @param output the OutputStream to write to @param cosInteger the COSInteger object to write @throws IOException if an I/O error occurs during writing
138 Retrieves the direction of the transition. @return COSBase object representing the direction or zero if not specified
139 Retrieves all metadata keys from the PDF document. @return Set of metadata keys as strings
140 Constructs a COSObjectKey with validation. @param num object number (must be non-negative) @param gen generation value (must be non-negative) @param index stream index
141 Adds a cross-reference entry to the stream. @param entry XReferenceEntry to add
142 Retrieves a list of attribute names from the PDF COSDictionary. Excludes the "O" key if present. @return List of attribute names as strings
143 Sets the cross-reference entry for a given object key. @param objKey unique identifier for the PDF object @param offset file position of the object
144 Adds trailer information to the PDF cross-reference stream. @param trailerDict dictionary containing trailer entries
145 Determines if a dictionary represents an Info object. @param dictionary the COSDictionary to check @return true if dictionary contains Info keys, false otherwise
146 Generates cross-reference ranges from a list of XReferenceEntry objects. @param xRefEntriesList List of XReferenceEntry objects @return Array of Long representing the start and count of each range
147 Checks if font descriptor contains width information. @return true if WIDTHS or MISSING_WIDTH key exists, false otherwise
148 Checks if the font descriptor contains missing width information. @return true if missing width is defined, false otherwise
149 Writes an object reference to the output stream. @param output target OutputStream for writing @param indirectReference COSObjectKey representing the reference
150 Checks if the PDF form contains XFA (XML Forms Architecture). @return true if XFA is present, false otherwise
151 Compares this XReferenceEntry to another based on referenced key. @param xReferenceEntry the entry to compare with @return negative if less, zero if equal, positive if greater
152 Creates a raw input stream for reading the COSStream. @throws IOException if the stream is closed or not properly initialized
153 Retrieves an Encoding instance by its COSName. @param name the encoding name as a COSName @return Encoding instance or null if not found
154 Creates a raw output stream for writing data to the COSStream. Ensures only one open writer at a time and handles caching. @return OutputStream for writing data @throws IOException if an I/O error occurs
155 Returns the index of the selected radio button. @return Index of the selected option, or -1 if none is selected
156 Retrieves the list of filters applied to the PDF stream. @return List of COSName objects representing the filters or an empty list if none
157 Constructs a COSDocument with specified stream cache and parser. @param streamCacheCreateFunction factory function for creating stream cache @param parser ICOSParser instance for parsing PDF content
158 Retrieves the list of filters applied to the stream. @return List of Filter objects or an empty list if no filters are present @throws IOException if a filter is invalid or of unsupported type
159 Constructs a COSString from the given text. @param text input string to be converted @param forceHex if true, forces hexadecimal representation
160 Decodes a hexadecimal string to a byte array. @param s hexadecimal string @return decoded byte array or empty if invalid characters are found
161 Constructs a COSFloat from a string representation. @param aFloat string to parse as float @throws IOException if parsing fails
162 Converts byte array to string based on encoding. @return decoded string using UTF-16BE, UTF-16LE, or PDFDocEncoding
163 Returns string representation of COSFloat. Uses formatString() to format float value. @return formatted string in the form "COSFloat{value}"
164 Checks if the document is accepting updates. @return true if document can be updated, false otherwise
165 Writes formatted float value to PDF stream. @param output OutputStream to write the float value to @throws IOException if an I/O error occurs while writing
166 Converts update state to a COSIncrement. @return COSIncrement object representing the update
167 Determines if the COS object needs to be updated. @return true if the update state indicates changes, false otherwise
168 Retrieves or creates a COSInteger instance for the given value. @param val the integer value to be represented @return COSInteger object with the specified value
169 Checks equality with another object. @param o the object to compare @return true if both objects are COSIntegers with equal integer values
170 Writes a COS integer to the PDF output stream. @param output target output stream for writing @param cosInteger COSInteger object to write @throws IOException if an I/O error occurs during writing
171 Constructs a COSObjectKey with validation. @param num object number (must be non-negative) @param gen generation number (must be non-negative) @param index stream index
172 Reads bytes from the ASCII85 encoded input stream into a byte array. @param data buffer to store read bytes @param offset starting position in the buffer @param len number of bytes to read @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
173 Adds a cross-reference entry to the stream. @param entry XReferenceEntry to be added
174 Writes a single byte to the ASCII85 encoded output stream. @param b the byte to be written @throws IOException if an I/O error occurs
175 Sets the cross-reference entry for a given object key and offset. @param objKey unique identifier for the PDF object @param offset byte offset of the object in the PDF file
176 Flushes the encoded data and writes the terminator. Handles incomplete groups by padding with zeros, transforms them, and writes to output stream.
177 Generates cross-reference ranges for PDF entries. @param xRefEntriesList List of XReferenceEntry objects @return Array of Long containing start and count pairs for each range
178 Writes an object reference to the output stream. @param output the OutputStream to write to @param indirectReference the COSObjectKey representing the object reference @throws IOException if an I/O error occurs
179 Compares this XReferenceEntry with another based on their referenced keys. @param xReferenceEntry the entry to compare with @return negative if less, zero if equal, positive if greater
180 Creates a raw input stream from the COSStream. @throws IOException if the stream is closed or not properly initialized @return InputStream for reading the stream's data
181 Creates a raw output stream for writing data. @return OutputStream for writing to the COSStream @throws IOException if an I/O error occurs
182 Retrieves the list of filters applied to the PDF stream. @return A List of COSName representing filters or an empty list if none set
183 Retrieves and initializes the list of filters for the stream. @return List of Filter objects @throws IOException if an invalid filter is encountered
184 Constructs a COSString from a given text. @param text the input string to be encoded @param forceHex if true, forces hexadecimal representation
185 Decodes a hexadecimal string to a byte array. @param s hexadecimal string to decode @return decoded byte array or empty if invalid characters are encountered
186 Converts byte array to string using appropriate encoding. Checks for BOM to determine UTF-16BE or UTF-16LE; defaults to PDFDocEncoding. @return decoded string representation of the byte array
187 Checks if the document is accepting updates. @return true if updates are accepted, false otherwise
188 Initializes decode options with specified source region coordinates. @param x top-left corner X coordinate @param y top-left corner Y coordinate @param width width of the source region @param height height of the source region
189 Finds an appropriate ImageReader for the given format. @param formatName name of the image format @param errorCause reason for failure to find a reader @return ImageReader instance if found, otherwise throws MissingImageReaderException
190 Finds an ImageReader capable of reading raster images for a given format. @param formatName the name of the image format @param errorCause additional context for the error message @return ImageReader if found, throws MissingImageReaderException otherwise
191 Reads the next byte of decompressed data. @return the next byte or -1 if end of stream is reached @throws IOException if an I/O error occurs during reading
192 Reads data from the decoded stream into a byte array. @param data buffer to store read bytes @param offset starting position in the buffer @param length number of bytes to read @return actual number of bytes read, or -1 if end of stream is reached @throws IOException if an I/O error occurs
193 Reads bytes from an ASCII85 encoded stream into a buffer. @param data the buffer to read into @param offset the starting position in the buffer @param len the maximum number of bytes to read @return the actual number of bytes read, or -1 if end of stream @throws IOException if an I/O error occurs
194 Writes a single byte to the ASCII85 encoded stream. @param b byte to be written
195 Encodes raw data using LZW compression. @param rawData input stream containing the original data @param encoded output stream for the compressed data @param parameters additional encoding parameters (not used) @throws IOException if an I/O error occurs during processing
196 Flushes the ASCII85 encoded data to the output stream. Handles any remaining bytes, writes them as ASCII85, and appends necessary characters for termination.
197 Decodes a row of image data using the specified predictor algorithm. @param predictor type of prediction algorithm to apply @param colors number of color components per pixel @param bitsPerComponent number of bits per color component @param columns number of columns in the image @param actline active line buffer for decoding @param lastline previous line buffer (used by some predictors)
198 Initializes a LayerUtility with a target PDF document. @param targetDoc the PDDocument to manipulate and manage layers
199 Sets the bounding box for the form XObject. @param bbox PDRectangle representing the bounding box coordinates
200 Adds a source PDF by path. @param source file path of the PDF to be added @throws FileNotFoundException if the specified file does not exist
201 Closes the PDF document and releases resources. Ensures all IO streams are closed and logs exceptions.
202 Closes the FDF document and associated streams. @throws IOException if an I/O error occurs during closing
203 Returns the underlying COS object. @return COSDictionary or COSStream representing the PDF function
204 Initializes a PDXObject with a given PDStream and subtype. @param stream PDStream representing the PDF data @param subtype COSName specifying the object's subtype
205 Initializes DecodeOptions with a specified source region. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width width of the source region @param height height of the source region
206 Retrieves the underlying COSStream object. @return COSStream representing the PDF stream
207 Finds an appropriate ImageReader for the specified format. @param formatName name of the image format @param errorCause reason for failure to find a reader @return ImageReader instance if found, otherwise throws exception @throws MissingImageReaderException if no suitable reader is available
208 Retrieves metadata stream from the ICC profile. @return COSStream containing metadata or null if not present
209 Sets the metadata for the ICC profile. @param metadata COSStream containing the metadata to be set
210 Finds a suitable raster image reader for the specified format. @param formatName name of the image format @param errorCause description of the error if no reader is found @return ImageReader that can read rasters or throws MissingImageReaderException
211 Reads the next byte of decompressed data. @return the next byte or -1 if end of stream is reached @throws IOException if an I/O error occurs
212 Checks if the given widget is a signature annotation. @param annotations list of PDF annotations @param widget annotation widget to check @return true if widget is found in annotations, false otherwise
213 Checks if two PDAnnotation objects are equal. @param o the object to compare with @return true if equal, false otherwise
214 Reads decompressed data into a byte array. @param data buffer to store read bytes @param offset starting position in the buffer @param length number of bytes to read @return actual number of bytes read, or -1 if end of stream is reached @throws IOException if an I/O error occurs
215 Checks if a signature field exists in the document. @param fieldIterator iterator over PDF fields @param signatureField the signature field to check for @return true if the signature field is found, false otherwise
216 Encodes raw data using LZW compression. @param rawData input stream of raw data to compress @param encoded output stream for compressed data @param parameters dictionary containing encoding parameters @throws IOException if an I/O error occurs during processing
217 Initializes the PDFStreamParser with a content stream. @param pdContentstream the PDF content stream to be parsed @throws IOException if an I/O error occurs during initialization
218 Initializes the parser with a byte array containing PDF data. @param bytes the PDF content as a byte array
219 Checks if the next character in the source is a digit. @return true if the next character is a digit, false otherwise
220 Decodes a row of image data using the specified predictor algorithm. @param predictor type of prediction algorithm to apply @param colors number of color components @param bitsPerComponent bits per color component @param columns number of columns in the image @param actline active line buffer for decoding @param lastline previous line buffer, used for certain predictors
221 Reads a string of digits from the PDF source. @return StringBuilder containing the read number @throws IOException if an I/O error occurs or number exceeds MAX_LENGTH_LONG
222 Initializes a LayerUtility instance. @param targetDoc PDDocument where layers will be manipulated
223 Sets the bounding box for the form XObject. @param bbox PDRectangle representing the new bounding box or null to remove it
224 Adds a source PDF by file path. @param source path to the PDF file @throws FileNotFoundException if the specified file does not exist
225 Closes the PDF document and releases resources. Ensures all IO resources are closed and logs exceptions.
226 Closes the FDF document and associated streams. Handles exceptions during closure, logging errors.
227 Returns the underlying COS object. @return COSDictionary or COSStream representing the PDF function
228 Initializes a PDXObject with given stream and subtype. @param stream PDStream containing the object's data @param subtype COSName representing the object's subtype
229 Returns the underlying COSStream object. @return COSStream representing the PDF stream
230 Retrieves metadata from the ICC profile stream. @return COSStream containing metadata or null if not found
231 Checks if the next character in the source is a space. @return true if the next character is a space, false otherwise @throws IOException if an I/O error occurs while reading from the source
232 Sets the metadata for the ICC profile. @param metadata COSStream containing metadata to be set
233 Skips a line break in the PDF source. @param linebreak character representing the potential line break @return true if a valid line break is skipped, false otherwise
234 Checks if the given widget is a signature annotation. @param annotations list of PDF annotations @param widget annotation widget to check @return true if widget is a signature annotation, false otherwise
235 Checks if the current position is at the end of a string in a PDF. @param bracesParameter count of open braces @return updated brace count or 0 if end of string detected @throws IOException if reading from source fails
236 Checks if this annotation is equal to another. @param o the object to compare with @return true if equals, false otherwise
237 Checks if the character is an end-of-line (EOL). @param c character to check @return true if c is LF or CR, false otherwise
238 Checks if a specific signature field exists in the document. @param fieldIterator iterator over all fields in the PDF document @param signatureField the signature field to check for @return true if the signature field is found, false otherwise
239 Checks if the next character in the source is whitespace. @return true if the next character is whitespace, false otherwise @throws IOException if an I/O error occurs while reading from the source
240 Parses the startxref section to find the byte offset. @return the byte offset of the startxref or -1 if not found @throws IOException if an I/O error occurs
241 Initializes the parser with a content stream from a PDF. @param pdContentstream PDContentStream object containing the content to parse @throws IOException if an I/O error occurs while initializing the parser
242 Initializes the parser with a byte array. @param bytes PDF content as a byte array
243 Searches for the last EOF marker in a PDF document. @return position of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs
244 Searches for all cross-reference table offsets in the PDF. @return List of Long containing offsets or empty list if none found
245 Checks if the next character in the source is a digit. @return true if the next character is a digit, false otherwise @throws IOException if an I/O error occurs while reading from the source
246 Searches for XRef streams in the PDF. @return List of offsets for found XRef streams @throws IOException if an I/O error occurs
247 Retrieves the cross-reference table from the resolver. @return Map of COSObjectKey to object number or null if trailer is unresolved
248 Reads a string of digits from the PDF source. @return StringBuilder containing the read number or empty if no digits found @throws IOException if reading fails or number exceeds maximum length
249 Finds the startxref offset in a PDF file. @return the offset of the startxref marker @throws IOException if an I/O error occurs or markers are missing
250 Reads PDF content until "endstream" is encountered. @param out stream to filter and write content @return length of filtered content @throws IOException if an I/O error occurs
251 Parses a PDF object by its number. @param objectNumber unique identifier of the PDF object @return COSBase representation of the parsed object or null if not found @throws IOException if an I/O error occurs during parsing
252 Reads and maps object numbers to their offsets in a PDF stream. @return A map of object numbers to their respective offsets @throws IOException if an I/O error occurs during reading
253 Parses and retrieves all objects from the PDF stream. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs during parsing
254 Checks if the next character in the source is a space or newline. @return true if the next character is a space or newline, false otherwise
255 Parses the PDF trailer. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
256 Initializes a new cross-reference object and maps it to a starting byte position. @param startBytePos the byte position where the cross-reference starts @param type the type of cross-reference (TABLE or STREAM)
257 Resets all cross-reference objects and clears current trailer references.
258 Checks if the current character in the source is a space. @return true if the current character is a space, false otherwise
259 Initializes a new free object reference. @param key unique identifier for the COS object @param nextFreeObject ID of the next free object in the chain
260 Skips a line break character in the PDF source. Handles CR, LF, and CRLF sequences. @param linebreak character to check @return true if line break is skipped, false otherwise
261 Constructs an ObjectStreamXReference for a PDF object. @param objectStreamIndex index of the object stream @param key referenced object key @param object associated COSBase object @param parentKey parent object's key
262 Checks for end of string in PDF parsing. @param bracesParameter current brace count @return updated brace count or 0 if end found
263 Retrieves the numeric value of the XReference entry's type. @return long representing the numeric value of the reference type
264 Checks if the character is an end-of-line (EOL). @param c character to check @return true if the character is a line feed or carriage return, false otherwise
265 Generates a string representation of the FreeXReference. @return formatted string with key, nextFreeObject, and reference type
266 Checks if the next character in the source is whitespace. @return true if the next character is whitespace, false otherwise
267 Generates a string representation of the ObjectStreamEntry. @return formatted string with key, type, object stream index, and parent key
268 Retrieves the generation number from the referenced object. @return the generation component of the key
269 Retrieves the byte offset of the referenced PDF object. @return byte offset value
270 Parses the startxref entry in a PDF file. @return byte offset of the first object reference, or -1 if not found @throws IOException if an I/O error occurs during parsing
271 Returns the generation number of the referenced object. @return generation number as a long
272 Searches for the last EOF marker in the PDF. @return position of the last EOF marker or Long.MAX_VALUE if not found
273 Generates a string representation of the reference. @return formatted string with key, type, and byte offset details
274 Retrieves the object number of the parent key. @return The object number as a long value.
275 Searches for all cross-reference (xref) tables in the PDF. @return List of offsets where xref tables are located @throws IOException if an I/O error occurs during reading
276 Returns the index of the object stream. @return Index of the object stream within the PDF document
277 Searches for XRef streams in the PDF. @return List of offsets where XRef streams are found @throws IOException if an I/O error occurs
278 Writes a sequence of bytes to the output stream. @param b byte array containing data to write @param off offset from which to start writing bytes @param len number of bytes to write
279 Retrieves the cross-reference table. @return Map of COSObjectKey to object number or null if trailer is unresolved
280 Writes a single byte to the output stream. @param b byte to be written @throws IOException if an I/O error occurs
281 Retrieves the offset of the startxref entry in a PDF file. @return Offset of the startxref marker @throws IOException if an I/O error occurs or markers are missing
282 Writes an end-of-line character if not already at the start of a new line. @throws IOException if an I/O error occurs
283 Reads PDF content until "endstream" keyword is found. @param out stream to filter content @return length of filtered content
284 Initializes a new COSWriter instance. @param outputStream the OutputStream to write PDF data to @param compressParameters parameters for PDF compression
285 Initializes a COSWriter for incremental PDF updates. @param outputStream target output stream for writing @param inputData input data for reference @throws IOException if an I/O error occurs
286 Parses a PDF object by number. @param objectNumber the PDF object number to parse @return COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
287 Determines if compression is enabled. @return true if compression parameters are set and compression is enabled, false otherwise
288 Reads and maps PDF object numbers to their offsets. @return Map of object numbers to offsets @throws IOException if an I/O error occurs during reading
289 Adds an XReference entry to the list. @param entry XReferenceEntry object to be added
290 Parses all objects in the PDF stream. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs during parsing
291 Checks if the next character in the source is a space or newline. @return true if the next character is space or newline, false otherwise @throws IOException if an I/O error occurs while reading from the source
292 Parses the trailer section of a PDF. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
293 Initializes a new cross-reference object for the given position and type. @param startBytePos starting byte position of the cross-reference @param type type of cross-reference (e.g., table-based)
294 Writes an FDF document to the output stream. @param doc FDFDocument to be written @throws IOException if an I/O error occurs during writing
295 Resets all cross-reference objects and clears current references.
296 Retrieves a PDF object from the pool by its unique key. @param key unique identifier for the PDF object @return COSBase object or null if not found
297 Initializes a free object reference. @param key unique identifier for the PDF object @param nextFreeObject pointer to the next free object
298 Retrieves the highest cross-reference object number from the pool. @return the highest XRef object number managed by the pool
299 Constructs an ObjectStreamXReference. @param objectStreamIndex index of the object stream @param key referenced object key @param object associated COSBase object @param parentKey key of the parent object
300 Writes a COSArray to the output stream. @param output the stream to write to @param cosArray the array of COSBase objects to serialize @throws IOException if an I/O error occurs
301 Returns the numeric value of the reference type. @return long representing the reference's numeric value
302 Constructs a new DefaultResourceCache with stable cache enabled.
303 Generates a string representation of the free reference. @return formatted string containing key, nextFreeObject, and type numeric value
304 Generates a string representation of the ObjectStreamEntry. @return formatted string containing key, type, object stream index, and parent key
305 Creates a resource cache with stable caching enabled by default.
306 Retrieves the generation number from the referenced object's key. @return The generation component of the PDF object key
307 Initializes a new content stream for the given PDF appearance. @param appearance The appearance stream to write to @param outputStream The output stream where content is written
308 Retrieves the second column value by getting the byte offset. @return long value representing the byte offset of the referenced object
309 Initializes a new content stream for an appearance. @param doc The PDF document containing the appearance @param appearance The appearance stream to write to @param outputStream The output stream where content is written
310 Returns the generation number of the referenced object. @return The generation component of the PDF object key
311 Returns a string representation of the reference. @return formatted string with key, type, and byte offset
312 Returns the object number from the parent object's key. @return The object number of the parent object
313 Returns the index of the object stream. @return Index of the object stream
314 Writes text to output stream using ASCII encoding. @param text string to be written
315 Writes a byte array to the output stream without starting on a new line. @param b byte array containing data to write @param off offset within the byte array to start writing from @param len number of bytes to write
316 Adds a comment to the PDF content stream. @param comment text to add as a comment (must not contain newlines) @throws IOException if an I/O error occurs or comment contains newline characters
317 Writes a single byte to the output stream. Ensures data is written on the current line and updates position. @param b byte to be written
318 Writes an end-of-line sequence if not already at the start of a new line. Ensures proper formatting by maintaining line integrity.
319 Adds a comment to the PDF content stream. @param comment text to add as a comment (must not contain newlines) @throws IOException if an I/O error occurs or comment contains newline characters
320 Initializes a new instance of COSWriter with specified output stream and compression parameters. @param outputStream the OutputStream to write PDF data to @param compressParameters parameters for PDF compression settings
321 Adds a comment to the PDF content stream. @param comment text to add as a comment (must not contain newlines) @throws IOException if an I/O error occurs or comment contains newlines
322 Initializes a new COSWriter for incremental PDF updates. @param outputStream target output stream for writing the updated PDF @param inputData input data for reading existing PDF content @throws IOException if an I/O error occurs during initialization
323 Adds a comment to the PDF content stream. @param comment text to add as a comment @throws IOException if an I/O error occurs @throws IllegalArgumentException if comment contains newline characters
324 Checks if compression is enabled. @return true if compression is enabled based on parameters, false otherwise
325 Closes the content stream. Ends text mode and closes the underlying output stream. @throws IOException if an I/O error occurs
326 Adds a cross-reference entry to the list. @param entry XReferenceEntry object to be added
327 Closes the content stream. Ends text mode and closes the underlying output stream. @throws IOException if an I/O error occurs
328 Closes the content stream. Ends text mode and closes the underlying output stream. Logs a warning if text mode was not explicitly ended. @throws IOException if an I/O error occurs
329 Closes the content stream for pattern operations. Ends text mode and closes the underlying output stream. @throws IOException if an I/O error occurs
330 Applies GSUB rules to transform and encode glyphs. @param gsubWorker worker for applying GSUB transformations @param out output stream for encoded glyphs @param font the font used for encoding @param word input text to be processed @return list of transformed glyph IDs
331 Writes FDF document content to output stream. @param doc FDFDocument to write @throws IOException if I/O error occurs during writing
332 Sets the stroking color based on a PDColor object. @param color PDColor object representing the color @return true if color is successfully set, false otherwise @throws IOException if an I/O error occurs during writing
333 Retrieves a PDF object from the pool by its key. @param key unique identifier for the PDF object @return COSBase object associated with the key, or null if not found
334 Retrieves the highest cross-reference object number from the pool. @return The highest XRef object number managed by the COSWriterCompressionPool
335 Sets non-stroking color on demand. @param color PDColor object to be used for setting the color @return true if color was successfully set, false otherwise @throws IOException if an I/O error occurs while writing to the content stream
336 Writes a COS array to the output stream. @param output the OutputStream to write to @param cosArray the COSArray to serialize @throws IOException if an I/O error occurs
337 Constructs a DefaultResourceCache with stable caching enabled.
338 Initializes a PDDestinationNameTreeNode with a given dictionary. @param dic the COSDictionary representing the node's data
339 Constructs a resource cache with stable caching enabled.
340 Initializes a PDEmbeddedFilesNameTreeNode with a given dictionary. @param dic the COSDictionary representing the node's data
341 Constructs a PDJavascriptNameTreeNode from a COSDictionary. @param dic the COSDictionary representing the node's data
342 Initializes a new content stream for PDF appearance. @param appearance the PDAppearanceStream to which this content stream belongs @param outputStream where the content stream will be written
343 Constructs a PDStructureElementNameTreeNode from a COSDictionary. @param dic the COSDictionary representing the node's data
344 Initializes a new content stream for an appearance stream. @param doc the PDDocument to which this content stream belongs @param appearance the PDAppearanceStream for which the content stream is created @param outputStream where the content stream will be written
345 Constructs a new PDDocument instance. @param doc the COSDocument representing the PDF structure @param source the RandomAccessRead source of the PDF content @param permission the AccessPermission for the document
346 Constructs a new FDFDocument from a COSDocument and source. @param doc the underlying COSDocument @param source the RandomAccessRead source of the FDF data
347 Initializes a new PDMetadata object with the given COSStream. @param str underlying COSStream to manage PDF metadata
348 Writes a string to the output stream using ASCII encoding. @param text the string to be written @throws IOException if an I/O error occurs
349 Initializes a new PDObjectStream with the given COSStream. @param str underlying COSStream to manage
350 Constructs a new PDEmbeddedFile object. @param str underlying COSStream to manage
351 Adds a comment to the PDF content stream. @param comment text to be added as a comment (must not contain newlines) @throws IOException if an I/O error occurs or comment contains newline characters
352 Initializes a PDFunction with a given COSBase. @param function the underlying COSBase object (either COSStream or COSDictionary)
353 Adds a comment to the PDF content stream. @param comment text to be added as a comment (must not contain newlines) @throws IOException if an I/O error occurs or comment contains invalid characters
354 Adds a comment to the PDF content stream. @param comment text to be added as a comment (must not contain newlines) @throws IOException if an I/O error occurs or comment contains invalid characters
355 Initializes a PDXObject with a given COSStream and subtype. @param stream underlying COSStream for the object @param subtype type of the PDF object (e.g., Image, Form)
356 Adds a comment to the PDF content stream. @param comment text to be added as a comment (must not contain newlines) @throws IOException if an I/O error occurs or comment contains newline characters
357 Closes the content stream. Ensures proper closure by warning if text mode is active and closes the output stream.
358 Constructs an extended graphics state from a COSDictionary. @param dictionary PDF dictionary containing graphics state properties
359 Closes the content stream. Ensures proper closure by warning if text mode is active and closes the output stream.
360 Wraps a COSDictionary with type information. @param dictionary the COSDictionary to encapsulate
361 Closes the content stream. Ensures proper closure by warning if text mode is active and closes the output stream.
362 Initializes a new PDAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to represent as an attribute object
363 Closes the content stream. Ensures proper closure by warning if text mode is active and closes the output stream.
364 Constructs a new PDUserProperty instance. @param dictionary the COSDictionary representing the property @param userAttributeObject the associated user attribute object
365 Constructs a PDTransition object from a given COSDictionary. @param dictionary the COSDictionary representing the transition properties
366 Applies GSUB rules to a word, encoding glyphs and writing to output stream. @param gsubWorker worker for applying GSUB transformations @param out output stream to write encoded glyphs @param font PDType0Font used for glyph encoding @param word input text to process @return list of transformed glyph IDs after GSUB application
367 Sets stroking color on demand. @param color PDColor object to be used for stroking @return true if color is successfully set, false otherwise @throws IOException if an I/O error occurs
368 Creates a child node from a COS dictionary. @param dic the COSDictionary representing the child node @return a new PDNumberTreeNode instance initialized with the dictionary and value type
369 Sets non-stroking color on demand. @param color PDColor object to be used for setting the color @return true if color is set successfully, false otherwise @throws IOException if an I/O error occurs
370 Constructs a new PDDestinationNameTreeNode from a COSDictionary. @param dic COSDictionary representing the node's data
371 Returns a string representation of the FunctionType2. @return String in the format "FunctionType2{C0: <c0> C1: <c1> N: <N>}"
372 Constructs a new PDEmbeddedFilesNameTreeNode from a COSDictionary. @param dic COSDictionary containing node data
373 Initializes a PDStructureElement with a given COSDictionary. @param dic the COSDictionary representing the structure element
374 Constructs a new PDJavascriptNameTreeNode from a COSDictionary. @param dic dictionary representing the node's data
375 Constructs a PDStructureTreeRoot from a COSDictionary. @param dic the COSDictionary representing the structure tree root
376 Constructs a PDStructureElementNameTreeNode from a COSDictionary. @param dic COSDictionary representing the node's data
377 Notifies of a potential change in user property. @param oldEntry original entry value @param newEntry updated entry value
378 Constructs a PDDocument instance from a COSDocument and source. @param doc the underlying COSDocument @param source the random access source of the PDF data @param permission the access permissions for the document
379 Retrieves an object by its index. @param index position of the object in the list @return object at the specified index or null if out of bounds
380 Constructs a new FDFDocument instance. @param doc associated COSDocument object @param source RandomAccessRead source for the FDF data
381 Returns the number of objects managed. @return Count of objects in the collection
382 Retrieves a specific revision number by index. @param index position of the revision number in the list @return Integer representing the revision number at the given index
383 Constructs a PDMetadata object wrapping a COSStream. @param str COSStream containing XMP metadata
384 Adds an object with its associated revision number. @param object the object to be added @param revisionNumber the revision number for the object
385 Initializes a PDObjectStream with a given COSStream. @param str COSStream to be managed by this PDObjectStream
386 Sets the revision number for a specific object. @param object the object to update @param revisionNumber the new revision number
387 Constructs a PDEmbeddedFile object wrapping a COSStream. @param str COSStream to be managed by this PDEmbeddedFile
388 Adds a TextPosition to the list of content elements. @param text TextPosition object representing text content
389 Initializes PDFunction with a given COSBase object. @param function COSStream or COSDictionary representing the function
390 Adds a new marked content to the list. @param markedContent PDMarkedContent object to be added
391 Adds an XObject to the content elements. @param xobject PDXObject to be added
392 Initializes a PDXObject with given COSStream and subtype. @param stream the underlying COSStream for this object @param subtype the subtype name of the XObject
393 Constructs a PDExtendedGraphicsState from a COSDictionary. @param dictionary PDF dictionary containing graphics state properties
394 Initializes a new PDTypedDictionaryWrapper with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
395 Sets printing permission for PDF. @param allowPrinting true to enable printing, false to disable
396 Initializes a new PDAttributeObject with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
397 Sets modification permission for PDF documents. @param allowModifications true to allow modifications, false otherwise
398 Constructs a PDUserProperty with a given COSDictionary and user attribute object. @param dictionary the underlying COSDictionary to wrap @param userAttributeObject the user attribute object associated with this property
399 Sets permission to extract content from a PDF. @param allowExtraction true to allow extraction, false to disallow
400 Constructs a new PDTransition from a COSDictionary. @param dictionary the underlying COSDictionary representing the transition properties
401 Sets permission to modify annotations in PDFs. @param allowAnnotationModification true to enable modification, false to disable
402 Sets permission to fill in forms within a PDF. @param allowFillingInForm true to enable form filling, false to disable
403 Sets permission to extract content for accessibility. @param allowExtraction true to allow extraction, false otherwise
404 Enables or disables document assembly permission. @param allowAssembly true to allow document assembly, false otherwise
405 Creates and returns a child node. @param dic COSDictionary representing the child node @return PDNumberTreeNode instance initialized with the given dictionary
406 Sets the permission for faithful printing of a PDF. @param canPrintFaithful true to allow faithful printing, false otherwise
407 Checks if printing permission is enabled. @return true if print permission is granted, false otherwise
408 Returns a string representation of the FunctionType2. @return String formatted with C0, C1, and N values for readability
409 Checks if modification permission is enabled. @return true if modification is allowed, false otherwise
410 Initializes a PDStructureElement with a given COS dictionary. @param dic the COS dictionary representing the structure element
411 Checks if content extraction permission is granted. @return true if content extraction is allowed, false otherwise
412 Checks if annotation modification permission is enabled. @return true if annotations can be modified, false otherwise
413 Constructs a PDStructureTreeRoot from a COSDictionary. @param dic the COS dictionary representing the structure tree root
414 Checks if form filling permission is granted. @return true if form filling is allowed, false otherwise
415 Notifies of a change in user property if detected. @param oldEntry original property value @param newEntry updated property value
416 Checks if extract for accessibility permission is granted. @return true if allowed, false otherwise
417 Retrieves an object by its index. @param index position of the object in the list @return managed object at specified index or throws IndexOutOfBoundsException if invalid
418 Checks if document assembly permission is granted. @return true if assembly is allowed, false otherwise
419 Returns the number of objects managed by this Revisions instance. @return Count of managed objects
420 Checks if the document allows faithful printing. @return true if faithful print permission is granted, false otherwise
421 Retrieves the revision number at the specified index. @param index position of the revision number in the list @return integer representing the revision number at the given index
422 Calculates the final encryption key for a PDF object. @param objectNumber PDF object number @param genNumber PDF generation number @return Final encryption key as byte array
423 Adds an object with its associated revision number. @param object the object to be added @param revisionNumber the revision number for the object
424 Sets the revision number for a given object. @param object the object to update @param revisionNumber the new revision number
425 Default constructor initializes the SecurityHandler.
426 Adds a TextPosition to the content list. @param text TextPosition object to be added
427 Adds marked content to the document. @param markedContent PDMarkedContent object to be added
428 Sets the encryption key for RC4 cipher. @param key byte array representing the encryption key (1-32 bytes) @throws IllegalArgumentException if key length is outside valid range
429 Adds an XObject to the list of content elements. @param xobject graphical object to be added
430 Writes a single encrypted byte to the output stream. @param aByte plaintext byte to encrypt and write @param output OutputStream to write the encrypted byte to @throws IOException if an I/O error occurs during writing
431 Determines if a Unicode code point is prohibited for SASL use. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
432 Initializes the SecurityHandler with a specified protection policy. @param protectionPolicy the security policy to be applied
433 Sets print permission for PDF. @param allowPrinting true to allow printing, false to restrict
434 Enables or disables modification permission for the PDF. @param allowModifications true to allow modifications, false otherwise
435 Computes the version number based on key length and encryption preferences. @return version number corresponding to security settings
436 Sets permission to extract content from a PDF. @param allowExtraction true to allow extraction, false to deny
437 Sets the permission to modify annotations. @param allowAnnotationModification true to allow modification, false otherwise
438 Creates a security handler for a given protection policy. @param policy the ProtectionPolicy to apply @return SecurityHandler instance or null if no handler found
439 Sets permission to fill in forms within a PDF. @param allowFillingInForm true to enable form filling, false to disable
440 Creates a security handler for a given filter name. @param name the name of the security handler to create @return SecurityHandler instance or null if not found
441 Sets permission to extract content for accessibility. @param allowExtraction true to allow extraction, false to disallow
442 Sets permission to assemble the document. @param allowAssembly true to allow assembling, false to disallow
443 Sets the permission for faithful printing. @param canPrintFaithful true to allow faithful printing, false otherwise
444 Checks if printing permission is granted. @return true if print permission is enabled, false otherwise
445 Checks if modification permission is enabled. @return true if modification is allowed, false otherwise
446 Checks if content extraction permission is granted. @return true if extraction is allowed, false otherwise
447 Checks if annotation modification permission is granted. @return true if annotations can be modified, false otherwise
448 Checks if form filling permission is granted. @return true if form filling is allowed, false otherwise
449 Checks if extraction for accessibility is permitted. @return true if extraction for accessibility is allowed, false otherwise
450 Constructs an FDFAnnotationCaret from a COSDictionary. @param a COSDictionary representing the caret annotation
451 Checks if assembling document permission is granted. @return true if assemble document permission is enabled, false otherwise
452 Constructs an FDFAnnotationCircle from a COSDictionary. @param a COSDictionary representing the circle annotation
453 Checks if the document allows faithful printing. @return true if faithful print permission is enabled, false otherwise
454 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a COSDictionary representing the file attachment annotation
455 Calculates the final encryption key for a PDF object. @param objectNumber PDF object number @param genNumber generation number of the PDF object @return derived encryption key as byte array
456 Constructs an FDFAnnotationFreeText from a COSDictionary. @param a COSDictionary representing the annotation
457 Constructs an FDFAnnotationInk from a COSDictionary. @param a COSDictionary representing the ink annotation
458 Constructs an FDFAnnotationLine from a COSDictionary. @param a COSDictionary representing the line annotation
459 Default constructor for SecurityHandler.
460 Constructs an FDFAnnotationLink from a COSDictionary. @param a COSDictionary representing the annotation link
461 Sets the encryption key for RC4. @param key byte array representing the encryption key (1-32 bytes)
462 Constructs an FDFAnnotationPolygon from a COSDictionary. @param a COSDictionary representing the polygon annotation
463 Constructs an FDFAnnotationPolyline from a COSDictionary. @param a COSDictionary representing the polyline annotation
464 Writes an encrypted byte to the output stream. @param aByte the plaintext byte to encrypt and write @param output the OutputStream to write the encrypted byte to @throws IOException if an I/O error occurs during writing
465 Constructs an FDFAnnotationSound from a COSDictionary. @param a COSDictionary representing the sound annotation
466 Determines if a Unicode code point is prohibited in SASL. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
467 Constructs a square annotation from a COSDictionary. @param a COSDictionary representing the annotation
468 Initializes a new SecurityHandler with the specified protection policy. @param protectionPolicy the security policy to apply for encryption
469 Constructs an FDFAnnotationStamp from a COSDictionary. @param a COSDictionary representing the annotation
470 Constructs an FDFAnnotationText from a COSDictionary. @param a COSDictionary representing the text annotation
471 Constructs an FDF text markup annotation from a COSDictionary. @param a COSDictionary representing the annotation data
472 Computes the PDF encryption version based on key length and policy. @return version number for encryption settings
473 Creates a SecurityHandler for a given ProtectionPolicy. @param policy the protection policy to apply @return a configured SecurityHandler or null if no handler is found
474 Creates a SecurityHandler instance for a given filter name. @param name the name of the security handler to create @return SecurityHandler instance or null if not found
475 Extracts and returns PANOSE classification data. @return PDPanoseClassification object containing font classification details
476 Constructs an FDFAnnotationCaret from a COSDictionary. @param a COSDictionary representing the annotation data
477 Constructs an FDFAnnotationCircle from a COSDictionary. @param a COSDictionary representing the circle annotation data
478 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a COSDictionary representing the file attachment annotation data
479 Constructs an FDFAnnotationFreeText from a COSDictionary. @param a COSDictionary representing the free text annotation data
480 Constructs an FDFAnnotationInk from a COSDictionary. @param a COSDictionary representing the ink annotation data
481 Constructs an FDFAnnotationLine from a COSDictionary. @param a COSDictionary representing the annotation data
482 Constructs an FDFAnnotationLink from a COSDictionary. @param a COSDictionary representing the annotation data
483 Loads font metrics from an AFM file. @param fontName the name of the font to load metrics for @throws IOException if the resource is not found or parsing fails
484 Constructs an FDFAnnotationPolygon from a COSDictionary. @param a COSDictionary representing the polygon annotation data
485 Maps a font name to its base name in the aliases collection. @param baseName the base FontName object to map
486 Constructs an FDFAnnotationPolyline from a COSDictionary. @param a COSDictionary representing the polyline annotation data
487 Constructs an FDFAnnotationSound from a COSDictionary. @param a COSDictionary representing sound annotation data
488 Constructs an FDFAnnotationSquare from a COSDictionary. @param a COSDictionary representing the annotation data
489 Applies the transformation matrix to a given vector. @param vector input vector to be transformed @return new Vector representing transformed coordinates
490 Constructs an FDFAnnotationStamp from a COSDictionary. @param a COSDictionary representing the stamp annotation data
491 Scales the vector by a given factor. @param sxy scaling factor for both x and y coordinates @return new Vector with scaled coordinates
492 Constructs an FDF text annotation from a COSDictionary. @param a COSDictionary representing the annotation data
493 Constructs an FDFAnnotationTextMarkup from a COSDictionary. @param a COSDictionary representing the annotation data
494 Converts a character code to its corresponding CID. @param code character code to be converted @return CID (Character Identifier) for the given code
495 Determines if the font is one of the Standard 14 fonts. @return true if the font is a Standard 14 font, false otherwise
496 Extracts and returns the PANOSE font classification. @return PDPanoseClassification object containing font classification data
497 Retrieves the default Adobe Glyph List. @return GlyphList object representing Adobe Glyph List
498 Loads metrics for a given font. @param fontName the font name to load metrics for @throws IOException if resource is not found or parsing fails
499 Maps a base font name to its FontName object. @param baseName the base font name to be mapped
500 Converts font code to glyph ID. @param code font code to convert @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
501 Transforms a vector using the matrix. @param vector input vector to be transformed @return new Vector after applying transformation
502 Retrieves the font name for a given glyph. @param name glyph name to find in font @return font name or ".notdef" if not found @throws IOException on I/O error
503 Scales vector by a factor. @param sxy scaling factor @return new scaled Vector object
504 Converts a character code to its corresponding CID. @param code character code to convert @return CID (Character Identifier) associated with the code
505 Retrieves the name of a glyph in the font. @param name original glyph name @return glyph name or ".notdef" if not found @throws IOException if an I/O error occurs
506 Initializes the encoding with mappings from provided map. @param codeToName map of font encoding codes to names
507 Checks if the font is one of the standard 14 fonts. @return true if it's a standard 14 font, false otherwise
508 Initializes a GlyphList with data from an input stream. @param input InputStream containing glyph data @param numberOfEntries Expected number of entries for efficient map initialization @throws IOException if an I/O error occurs while loading the list
509 Constructs a GlyphList by copying another and loading additional data. @param glyphList existing GlyphList to copy mappings from @param input InputStream containing additional glyph data @throws IOException if an I/O error occurs during loading
510 Initializes Mac OS Roman encoding with predefined mappings.
511 Retrieves the Adobe Glyph List. @return The default Adobe Glyph List instance.
512 Creates a Type1Encoding from an existing FontBox Encoding. @param encoding the source font encoding @return a new Type1Encoding instance with mappings from the input
513 Retrieves a blending context instance. @param blendMode the blending mode to apply @param constantAlpha the alpha value for blending operations (clamped between 0 and 1) @return Composite object for blending images
514 Constructs a PDColor instance with specified components, pattern name, and color space. @param components array of color components @param patternName name of the pattern associated with the color @param colorSpace color space for the color
515 Converts font code to glyph ID. @param code font code to convert @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
516 Retrieves the font-specific name for a given glyph. @param name the glyph name to look up @return the font-specific name or ".notdef" if not found @throws IOException if an I/O error occurs
517 Initializes a SoftMask with specified parameters for PDF rendering. @param paint the paint object defining the mask's appearance @param mask the BufferedImage used as the mask @param bboxDevice the device space bounding box of the mask @param backdropColor the background color for blending operations @param transferFunction the function to apply during rendering
518 Initializes CMYK color space with ICC profile. Ensures thread-safe initialization and loads default profile. @throws IOException if ICC profile cannot be loaded
519 Retrieves the name of a glyph in the font. @param name the original glyph name @return the glyph name found in the font or ".notdef" if not found @throws IOException if an I/O error occurs
520 Initializes built-in encoding with mappings from code to font name. @param codeToName map of font encoding codes to names
521 Initializes a GlyphList with data from an input stream. @param input InputStream containing glyph data @param numberOfEntries Expected number of entries for efficient map sizing @throws IOException if reading fails or data is invalid
522 Retrieves transparency group attributes. @return PDTransparencyGroupAttributes object or null if not set
523 Constructs a GlyphList by copying from an existing instance and loading additional data. @param glyphList existing GlyphList to copy mappings from @param input InputStream containing additional glyph data @throws IOException if reading fails or data is invalid
524 Initializes the MacOSRomanEncoding with specific character mappings.
525 Creates a Type1Encoding instance from a FontBox Encoding. @param encoding FontBox Encoding object @return Type1Encoding object with mapped codes and names
526 Selects the best row for writing based on compression estimates. @return byte array of the row with the highest estimated compression sum
527 Returns a blending composite instance. @param blendMode the blending mode to apply @param constantAlpha the constant alpha value for transparency (clamped between 0 and 1) @return Composite object configured with specified blend mode and alpha
528 Applies a mask to an image. @param image the original BufferedImage to apply the mask to @param mask the BufferedImage representing the mask @param interpolateMask whether to use interpolation for scaling the mask @param isSoft true if the mask is soft, false otherwise @param matte color values for matte effect (null if none) @return BufferedImage with applied mask
529 Retrieves the COS dictionary containing image parameters. @return COSDictionary with image attributes
530 Constructs a PDColor instance. @param components color components array @param patternName name of the pattern, if applicable @param colorSpace color space for the color
531 Initializes a SoftMask with specified parameters for rendering. @param paint the paint object used for masking @param mask the BufferedImage representing the mask @param bboxDevice the device space bounding box @param backdropColor the background color in PDF format @param transferFunction the transfer function for color transformation
532 Initializes CMYK color space with ICC profile. Ensures thread-safe initialization and handles potential JVM bugs. @throws IOException if default CMYK profile cannot be loaded
533 Parses PNG chunks from image data. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
534 Initializes a new PDShadingPattern with a given COSDictionary. @param resourceDictionary the COSDictionary representing the shading pattern properties
535 Constructs a PDTilingPattern with a COSDictionary and a resource cache. @param dictionary the COSDictionary representing pattern properties @param resourceCache the ResourceCache for managing resources
536 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not present
537 Constructs an AxialShadingPaint object. @param shadingType2 the axial shading type to be applied @param matrix the transformation matrix for the shading
538 Constructs a RadialShadingPaint object with specified radial shading and transformation. @param shading the PDShadingType3 object defining the radial gradient @param matrix the transformation matrix for applying the shading
539 Selects the best row for writing based on compression estimates. @return byte array of the row with highest estimated compression sum
540 Constructs a Type1ShadingPaint object. @param shading PDShadingType1 object to be applied @param matrix transformation matrix for the shading
541 Applies a mask to an image. @param image original image to apply mask on @param mask the mask image @param interpolateMask true for smooth scaling of mask, false otherwise @param isSoft true if using soft mask, false otherwise @param matte color values for matte operation @return masked BufferedImage
542 Constructs a Type4ShadingPaint with specified shading and transformation. @param shading the type 4 shading object to be applied @param matrix the transformation matrix for the shading
543 Constructs a Type5ShadingPaint object. @param shading the PDShadingType5 object to be applied @param matrix the transformation matrix for the shading
544 Retrieves the COS dictionary containing image parameters. @return COSDictionary with image attributes
545 Constructs a Type6ShadingPaint object. @param shading PDShadingType6 object representing the shading @param matrix transformation matrix for the shading
546 Constructs a Type7ShadingPaint object. @param shading PDShadingType7 object representing the shading pattern @param matrix transformation matrix for the shading
547 Initializes a cubic Bezier curve with control points and detail level. @param ctrlPnts array of 4 control points defining the curve @param l level of detail (number of segments)
548 Initializes a Line with two points and their colors. @param p0 starting Point object @param p1 ending Point object @param c0 color array for the starting point @param c1 color array for the ending point
549 Parses PNG chunks from image data. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
550 Constructs a new PDShadingType1 instance from a COSDictionary. @param shadingDictionary the COSDictionary containing Type 1 shading properties
551 Constructs a new PDShadingType2 instance from a COSDictionary. @param shadingDictionary the dictionary containing Type 2 shading properties
552 Creates a new PDShadingPattern instance. @param resourceDictionary COSDictionary representing the shading pattern
553 Initializes a new instance of PDTilingPattern with a given COSDictionary and resource cache. @param dictionary the COSDictionary representing the pattern @param resourceCache the ResourceCache for managing resources
554 Retrieves the number of color components. @return int representing the number of color components @throws IOException if an I/O error occurs while determining the count
555 Retrieves the number of color components for shading. @return int representing the number of color components @throws IOException if an I/O error occurs while determining the count
556 Determines if an edge forms a line. @param ctl array of control points @return true if edge is a line, false otherwise
557 Constructs an AxialShadingPaint object with specified shading and transformation matrix. @param shadingType2 the axial shading type defining the gradient @param matrix the transformation matrix for applying the shading
558 Constructs a RadialShadingPaint object with specified radial shading and transformation matrix. @param shading the PDShadingType3 object defining the radial gradient @param matrix the transformation matrix for applying the shading
559 Checks if a point is inside the shaded triangle. @param p Point to check @return true if point is within or on the edge of the triangle, false otherwise
560 Constructs a Type1ShadingPaint instance. @param shading PDShadingType1 object defining the gradient or pattern @param matrix transformation matrix for applying the shading
561 Calculates interpolated color at a given point. @param p point within the triangle @return float array representing the interpolated color
562 Constructs a Type4ShadingPaint object with specified shading and transformation matrix. @param shading the type 4 shading object defining the gradient or pattern @param matrix the transformation matrix for applying the shading
563 Constructs a Type5ShadingPaint object. @param shading PDShadingType5 defining the gradient or pattern @param matrix transformation matrix for applying the shading
564 Constructs a Type6ShadingPaint object. @param shading PDShadingType6 object defining the gradient or pattern @param matrix transformation matrix for applying the shading
565 Intersects the current clipping path with a new path. @param path the GeneralPath object to intersect with
566 Constructs a Type7ShadingPaint object with specified shading and transformation matrix. @param shading the PDShadingType7 object defining the gradient or pattern @param matrix the transformation matrix for applying the shading
567 Intersects the current clipping path with a given Area. @param area the Area object to intersect with
568 Transfers the current clipping path to a Graphics2D object. Handles cases where the clipping path is empty by setting it to an empty rectangle.
569 Initializes a cubic Bezier curve with given control points and detail level. @param ctrlPnts array of control points defining the curve @param l level of detail for point generation
570 Creates a PDSoftMask from a given dictionary. @param dictionary PDF dictionary or COSName containing soft mask properties @param resourceCache cache for managing resources @return PDSoftMask object or null if invalid input
571 Initializes a new PDSoftMask with the given dictionary. @param dictionary PDF dictionary containing soft mask properties
572 Initializes a Line segment with two points and their colors. @param p0 starting Point object @param p1 ending Point object @param c0 color array for the starting point @param c1 color array for the ending point
573 Initializes PlainText with given text value, splitting into paragraphs. @param textValue raw text input to be processed
574 Constructs a PDShadingType1 object from a COSDictionary. @param shadingDictionary the COSDictionary representing Type 1 shading properties
575 Constructs a PDShadingType2 object from a COSDictionary. @param shadingDictionary the COSDictionary representing Type 2 shading properties
576 Constructs a new PDActionEmbeddedGoTo from a COSDictionary. @param a COSDictionary representing the action details
577 Constructs a new PDActionGoTo instance. @param a COSDictionary representing the action details
578 Constructs a PDActionHide instance with the specified COSDictionary. @param a COSDictionary representing the action details
579 Initializes a new instance of PDActionImportData. @param a COSDictionary representing the action details
580 Retrieves the number of color components for the shading type. @return Number of color components in the shading type @throws IOException if an I/O error occurs while reading data
581 Initializes a new JavaScript action. @param a COSDictionary containing JavaScript action details
582 Initializes a new instance of PDActionLaunch. @param a COSDictionary containing launch action details
583 Retrieves the number of color components. @return Number of color components in the shading type @throws IOException if an I/O error occurs while reading data
584 Initializes a new PDActionMovie instance. @param a COSDictionary containing movie action details
585 Determines if an edge is a line based on control points. @param ctl array of control points defining the edge @return true if the edge is a line, false otherwise
586 Constructs a new PDActionNamed from a COSDictionary. @param a COSDictionary representing the named action details
587 Initializes a new instance of PDActionRemoteGoTo with the given COSDictionary. @param a COSDictionary representing the remote action details
588 Constructs a new PDActionResetForm instance. @param a COSDictionary containing reset action details
589 Determines if a point is inside the triangle. @param p point to check @return true if point is inside or on the boundary, false otherwise
590 Initializes a new PDActionSound instance. @param a COSDictionary containing sound action details
591 Initializes a new instance of PDActionSubmitForm. @param a COSDictionary representing the action details
592 Calculates interpolated color at a given point. @param p the point within the triangle @return float array representing the interpolated color
593 Constructs a new PDActionThread instance. @param a COSDictionary containing thread action details
594 Constructs a PDActionURI from a COSDictionary. @param a COSDictionary containing URI action details
595 Intersects the current clipping path with a new GeneralPath. @param path the GeneralPath to intersect with the clipping path
596 Intersects the current clipping path with an Area object. @param area the area to intersect with the clipping path
597 Transfers the current clipping path from GraphicsState to the provided Graphics2D. @param graphics target graphics context for clipping
598 Converts two lists of keys and values into a list of KeyValue pairs. @param key list of keys @param value list of corresponding values @return List of KeyValue objects
599 Creates a PDSoftMask from a given COSBase and resource cache. @param dictionary PDF base object containing soft mask properties @param resourceCache cache for managing resources @return PDSoftMask object or null if creation fails
600 Returns a field tree for managing form fields. @return PDFieldTree instance associated with this PDAcroForm
601 Initializes a soft mask from a given dictionary. @param dictionary PDF dictionary containing soft mask properties
602 Initializes PlainText with given text, splitting into paragraphs. @param textValue the input text to be processed
603 Constructs a new non-terminal PDF form field. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any
604 Constructs a new terminal field in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any
605 Constructs a new PDActionEmbeddedGoTo from a COSDictionary. @param a The COSDictionary representing the action details
606 Constructs a new PDActionGoTo with the given COSDictionary. @param a The COSDictionary representing the action details
607 Constructs a new PDActionHide instance. @param a COSDictionary containing action details
608 Constructs a new PDActionImportData instance. @param a COSDictionary containing the action details
609 Parses XML input stream into a Document without namespace awareness. @param is input stream containing XML data @return parsed Document object @throws IOException if parsing fails
610 Constructs a new PDActionJavaScript instance. @param a COSDictionary containing JavaScript action details
611 Constructs a PDRectlinearMeasureDictionary from a COSDictionary. @param dictionary the COSDictionary to be used
612 Initializes a new PDActionLaunch with the given COSDictionary. @param a The COSDictionary representing the launch action details
613 Constructs a new PDActionMovie from a COSDictionary. @param a The dictionary containing movie action details
614 Removes backdrop from a group image by adjusting pixel colors. @param backdrop the background image to remove @param offsetX horizontal offset for backdrop alignment @param offsetY vertical offset for backdrop alignment
615 Constructs a PDActionNamed from a COSDictionary. @param a The COSDictionary representing the named action details
616 Constructs a new remote navigation action. @param a COSDictionary containing action details
617 Constructs a new PDActionResetForm. @param a The COSDictionary representing the reset action details
618 Constructs a PDActionSound with specified COSDictionary. @param a COSDictionary containing sound action details
619 Draws a tiling pattern on the specified graphics context. @param g graphics context to draw on @param pattern tiling pattern to render @param colorSpace color space for rendering @param color color used for rendering @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs during drawing
620 Constructs a new PDActionSubmitForm instance. @param a COSDictionary representing the action details
621 Retrieves the horizontal scaling factor of the text. @return The absolute X scaling factor from the transformation matrix
622 Initializes a new PDActionThread with the given COSDictionary. @param a The COSDictionary representing the thread action details
623 Constructs a new PDActionURI with the given COSDictionary. @param a The COSDictionary representing the URI action details
624 Creates a PaintContext for tiling patterns. @param cm ColorModel for the graphics context @param deviceBounds Device space bounding box of the shape to be painted @param userBounds User space bounding box of the shape to be painted @param xform AffineTransform from user space to device space @param hints RenderingHints that control the rendering process @return PaintContext for tiling pattern rendering
625 Retrieves the vertical scaling factor of the text. @return float representing the vertical scaling factor
626 Converts two lists of keys and values into a list of KeyValue pairs. @param key list of keys @param value list of corresponding values @return List of KeyValue objects
627 Retrieves the field tree associated with this form. @return PDFieldTree instance representing the form's fields
628 Calculates the X rotation based on text rotation. @param rotation angle of text rotation in degrees @return adjusted X coordinate for rendering
629 Constructs a PDNonTerminalField. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent field in the hierarchy
630 Calculates the lower-left Y coordinate of text after rotation. @param rotation angle in degrees (0, 90, 180, 270) @return adjusted Y coordinate based on rotation
631 Constructs a PDTerminalField instance. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent field in the hierarchy
632 Calculates the width of a rotated text element. @param rotation angle of rotation in degrees @return width of the text after applying rotation
633 Writes the Unicode representation of text to the output. @param text TextPosition object containing the text to be written
634 Retrieves the Unicode representation of text in visually ordered form. @return String with text reversed if right-to-left, otherwise original
635 Checks if the text element is a diacritic. @return true if the text is a diacritic, false otherwise
636 Parses XML from an input stream without namespace awareness. @param is input stream containing XML data @return parsed Document object @throws IOException if parsing fails
637 Returns the Unicode representation of the text. @return String containing the Unicode value of the text element
638 Initializes a new PDRectlinearMeasureDictionary from a COSDictionary. @param dictionary the underlying COSDictionary representing measurement data
639 Starts processing of an article in the PDF. @param isLTR true if text direction is left-to-right, false otherwise
640 Writes the end marker of an article to the output. @throws IOException if an I/O error occurs during writing
641 Removes backdrop from a group image using an offset. @param backdrop source backdrop image @param offsetX horizontal offset for backdrop alignment @param offsetY vertical offset for backdrop alignment
642 Writes the current line separator to the output. @throws IOException if an I/O error occurs during writing
643 Writes the word separator character to the output. @throws IOException if an I/O error occurs during writing
644 Draws a tiling pattern on the given graphics context. @param g graphics context to draw on @param pattern tiling pattern to render @param colorSpace color space for rendering @param color color for the pattern @param patternMatrix matrix defining the pattern's transformation @throws IOException if an I/O error occurs
645 Writes formatted text to output. @param text the string to be written @param textPositions list of text positions (unused in this method) @throws IOException if an I/O error occurs
646 Retrieves the horizontal scaling factor of the text. @return The absolute X scaling factor from the transformation matrix
647 Writes the start of a paragraph. Ends current paragraph if already in one, then writes new paragraph start.
648 Writes the start position of the current page to the output. @throws IOException if an I/O error occurs during writing
649 Creates a paint context for tiling patterns. @param cm the color model of the output device @param deviceBounds the bounds of the device space @param userBounds the bounds of the user space @param xform the transformation from user space to device space @param hints rendering hints @return a PaintContext object for tiling pattern rendering
650 Writes the end position of the current page to the output. @throws IOException if an I/O error occurs during writing
651 Retrieves the vertical scaling factor of the text. @return Vertical scaling factor from the transformation matrix
652 Matches text position against list item patterns. @param pw PositionWrapper containing text position information @return Pattern object if matched, null otherwise
653 Normalizes a word by handling Unicode normalization and direction. @param word the input string to normalize @return normalized and directionally handled string
654 Inserts a diacritic into the text position. @param i index where diacritic should be inserted @param diacritic TextPosition object representing the diacritic
655 Calculates the X rotation based on text orientation. @param rotation text rotation angle in degrees @return adjusted X position considering rotation
656 Calculates the Y-coordinate of the lower-left corner based on rotation. @param rotation angle in degrees (0, 90, 180, 270) @return Y-coordinate after applying rotation transformation
657 Calculates the rotated width of a text element. @param rotation angle in degrees @return absolute width considering rotation
658 Writes characters from a TextPosition to the output. @param text TextPosition object containing the text to write
659 Converts a byte to its hexadecimal string representation. @param b input byte @return two-character hexadecimal string
660 Returns the Unicode string in visual order, reversing if RTL. @return Visually ordered Unicode string
661 Converts byte array to hexadecimal string. @param bytes input byte array @return hexadecimal representation of the byte array
662 Determines if the text element is a diacritic. @return true if the text is a diacritic, false otherwise
663 Returns the Unicode representation of the text. @return Unicode string of the text element
664 Converts a single byte to its hexadecimal byte representation. @param b input byte @return array of two bytes representing the high and low nibbles in hex form
665 Converts a byte array to its ASCII hexadecimal representation. @param bytes input byte array @return byte array containing ASCII characters of the hexadecimal representation
666 Starts a new article in the PDF text extraction process. @param isLTR indicates if text direction is left-to-right @throws IOException if an I/O error occurs during writing
667 Writes the end marker for an article to the output. @throws IOException if an I/O error occurs during writing
668 Writes a byte as a two-character hexadecimal representation to an output stream. @param b the byte to convert and write @param output the OutputStream to write to @throws IOException if writing to the output stream fails
669 Sorts an array using iterative merge sort. @param arr the array to be sorted @param cmp comparator defining the order of elements
670 Creates and returns a deep copy of this matrix. @return a new Matrix instance with copied transformation parameters
671 Writes the configured line separator to the output. @throws IOException if an I/O error occurs during writing
672 Concatenates another transformation matrix. @param matrix Matrix to concatenate with the current matrix
673 Writes the current word separator to the output. @throws IOException if an I/O error occurs during writing
674 Applies translation to the matrix. @param tx translation along X-axis @param ty translation along Y-axis
675 Writes text to output with associated positions. @param text the string to be written @param textPositions list of TextPosition objects @throws IOException if an I/O error occurs
676 Applies scaling transformation to the matrix. @param sx scale factor along x-axis @param sy scale factor along y-axis
677 Writes paragraph start and manages paragraph state. @throws IOException if an I/O error occurs during writing
678 Multiplies this matrix with another matrix. @param other the matrix to multiply with @return a new Matrix resulting from the multiplication
679 Writes the start position of the current page to the output. @throws IOException if an I/O error occurs during writing
680 Writes the end marker of a PDF page to the output. @throws IOException if an I/O error occurs during writing
681 Formats a float value into ASCII byte representation. @param value the float to format @param maxFractionDigits maximum number of fraction digits @param asciiBuffer buffer to store ASCII bytes @return new offset after formatting or -1 if invalid input
682 Matches text position against list item patterns. @param pw PositionWrapper containing the current text position @return Compiled regex Pattern if matched, null otherwise
683 Adds a byte path with an associated value. @param value the value to associate with the path @param parts variable number of byte arrays representing the path
684 Sets the default value for the trie. @param defaultValue the default value to be associated with the root node
685 Normalizes a word by handling special Unicode ranges and font-specific adjustments. @param word the input string to normalize @return normalized string with correct text direction and formatting
686 Searches for a value based on a byte sequence. @param bytes input byte array to search @return associated value or default if not found
687 Inserts a diacritic character at a specified position. @param i index where to insert the diacritic @param diacritic TextPosition object representing the diacritic
688 Processes a PDF operator with its operands. @param operator the PDF operator to process @param operands list of operands for the operator @throws IOException if an error occurs during processing
689 Converts a byte to its hexadecimal string representation. @param b input byte @return two-character hexadecimal string
690 Converts a byte array to a hexadecimal string. @param bytes input byte array @return String representation of the byte array in hexadecimal format
691 Converts a byte to its hexadecimal byte representation. @param b input byte @return array of two bytes representing the high and low nibbles in hex
692 Converts byte array to ASCII representation in hexadecimal. @param bytes input byte array @return ASCII byte array representing the hexadecimal values of input bytes
693 Writes a byte as two hexadecimal characters to an OutputStream. @param b the byte to convert and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
694 Sorts an array iteratively using the merge sort algorithm. @param arr array of elements to be sorted @param cmp comparator defining element order
695 Creates a deep copy of the current Matrix instance. @return A new Matrix object with identical transformation parameters
696 Concatenates another transformation matrix to this one. @param matrix Matrix object to concatenate with
697 Applies translation to the matrix. @param tx horizontal translation value @param ty vertical translation value
698 Scales the matrix by given factors. @param sx scaling factor for x-axis @param sy scaling factor for y-axis
699 Multiplies this matrix with another matrix. @param other the second matrix to multiply @return a new Matrix object representing the product of the two matrices
700 Formats a float value into ASCII byte representation. @param value the float number to format @param maxFractionDigits maximum fraction digits to include @param asciiBuffer buffer to store ASCII bytes @return new offset after formatting or -1 if invalid input
701 Adds a byte sequence path with an associated value. @param value the value to be stored at the end of the path @param parts variable number of byte arrays representing the path
702 Sets the default value for the ByteTrie. @param defaultValue the value to be used as default
703 Searches for a value based on a byte sequence. @param bytes input byte array to search @return associated value or default if not found
704 Processes a PDF operator with its operands. @param operator the PDF operator to process @param operands list of operands for the operator @throws IOException if an I/O error occurs during processing
705 Initializes the LegacyPDFStreamEngine with various text processing operators.
706 Retrieves or creates a COSName instance for the given PDF name. Uses a thread-safe cache with weak references to manage instances efficiently. @param aName the string representation of the PDF name @return the corresponding COSName object
707 Constructs a COSString from byte array. @param bytes input byte array
708 Constructs an empty COSArray. Initializes with an empty list and sets direct flag to true.
709 Constructs a COSArray from a list of COSObjectable objects. @param cosObjectables list of COSObjectable objects to manage
710 Initializes a new COSStream with a specified cache. @param streamCache the cache for managing random access streams
711 Wraps a COSDictionary in an unmodifiable view. @param dict the original COSDictionary to wrap
712 Creates a default DecodeResult with empty parameters. @return DecodeResult object initialized with a new, empty COSDictionary
713 Initializes a new instance of PDDocumentInformation. Creates an empty COSDictionary to store document metadata.
714 Constructs a new PDResources instance. Initializes an empty COSDictionary for storing resources and sets up caches.
715 Converts a standard map to a COSDictionary. @param someMap input map with String keys and COSObjectable values @return COSDictionary containing converted key-value pairs
716 Constructs a new PDDictionaryWrapper with an empty COSDictionary.
717 Initializes an empty COSDictionary. Creates and associates a COSUpdateState with this dictionary.
718 Initializes a PDNumberTreeNode with a specific value class. @param valueClass the type of numeric values to be managed by this node
719 Constructs a new PDPageLabelRange with default settings.
720 Constructs a new PDMarkInfo instance. Initializes an empty COSDictionary to store marking information.
721 Initializes a new empty property list. Creates and associates a COSUpdateState with the dictionary.
722 Initializes a new PDBoxStyle with an empty COSDictionary.
723 Initializes a new cryptographic filter dictionary. Creates an empty COSDictionary to store encryption settings.
724 Initializes a new PDF encryption instance. Creates an empty COSDictionary to store encryption settings.
725 Initializes a new FDFCatalog. Sets up an empty COSDictionary for the catalog.
726 Initializes a new FDFDictionary. Creates an underlying COSDictionary to store FDF data.
727 Initializes a new FDFField with an empty COSDictionary.
728 Initializes a new FDFIconFit object. Creates an empty COSDictionary to store icon fitting properties.
729 Initializes a new FDFJavaScript object. Creates an empty COSDictionary for storing JavaScript data.
730 Initializes the LegacyPDFStreamEngine with various text operators. Sets up operators for text handling, transformations, and rendering.
731 Initializes an empty named page reference. Creates and associates a COSUpdateState with this dictionary.
732 Constructs a new FDFPage instance. Initializes an empty COSDictionary to store page data.
733 Retrieves or creates a COSName for the given string. @param aName the PDF name string @return COSName instance associated with the input string
734 Constructs a new FDFPageInfo instance. Initializes an empty COSDictionary for page information.
735 Initializes a new FDFTemplate with an empty COSDictionary.
736 Constructs a COSString from byte array. @param bytes byte array representing the string data
737 Initializes PDDeviceNAttributes with an empty COSDictionary.
738 Constructs a new PDDeviceNProcess instance. Initializes an empty COSDictionary for storing color space attributes.
739 Constructs an empty COSArray with direct embedding.
740 Initializes a new PDShading instance. Creates an empty COSDictionary to store shading properties.
741 Constructs a COSArray from a list of COSObjectable objects. @param cosObjectables list of COSObjectable objects to convert into COSBase objects
742 Initializes a new instance of PDAdditionalActions. Creates an empty COSDictionary to store action data.
743 Initializes a new COSStream with a specified cache. @param streamCache the cache for managing stream data
744 Initializes a new instance of PDAnnotationAdditionalActions. Creates an empty COSDictionary to store annotation actions.
745 Wraps a COSDictionary in an unmodifiable view. @param dict the original COSDictionary to wrap
746 Initializes additional actions for a PDF document catalog. Creates an empty COSDictionary to store action entries.
747 Creates a default DecodeResult with empty settings. @return DecodeResult instance initialized with default parameters
748 Initializes a new instance of PDFormFieldAdditionalActions. Creates an empty COSDictionary to store field actions.
749 Constructs a new PDDocumentInformation instance. Initializes an empty COSDictionary to store document metadata.
750 Initializes additional actions for a PDF page. Creates an empty COSDictionary to store actions.
751 Initializes a new instance of PDResources. Constructs an empty COSDictionary and sets up caches for resource management.
752 Constructs a new PDTargetDirectory. Initializes an empty COSDictionary for storing target directory properties.
753 Initializes an empty URI dictionary.
754 Converts a standard map to a COSDictionary. @param someMap input map with String keys and COSObjectable values @return COSDictionary containing converted key-value pairs
755 Initializes launch parameters for Windows actions. Constructs and associates a COSDictionary to manage parameters.
756 Constructs a new PDDictionaryWrapper with an empty COSDictionary.
757 Initializes a new PDBorderEffectDictionary. Creates an empty COSDictionary to store border effect properties.
758 Constructs a new PDNameTreeNode with an empty COSDictionary.
759 Constructs a new border style dictionary. Initializes an empty COSDictionary for storing border properties.
760 Initializes a PDNumberTreeNode with a specific value class. @param valueClass the type of COSObjectable values to be managed
761 Initializes a new instance of PDPropBuild with an empty COSDictionary.
762 Creates a new PDPageLabelRange with default settings.
763 Constructs a new PDPropBuildDataDict with an empty COSDictionary. Initializes the dictionary for storing digital signature properties directly.
764 Constructs a new PDMarkInfo instance. Initializes an empty COSDictionary with default update state.
765 Initializes a new PDSeedValueMDP instance with an empty direct COSDictionary.
766 Initializes a new PDPropertyList with an empty COSDictionary.
767 Initializes a new instance of PDSeedValueTimeStamp with an empty, direct COSDictionary.
768 Constructs a new PDBoxStyle instance. Initializes an empty COSDictionary to store styling attributes.
769 Constructs a new PDF field with default settings. @param acroForm the AcroForm containing the field
770 Initializes a new cryptographic filter dictionary. @return PDCryptFilterDictionary instance with an empty COSDictionary
771 Constructs a new PDViewportDictionary. Initializes an empty viewport dictionary and its update state.
772 Initializes a new instance of PDEncryption. Creates an empty COSDictionary to store encryption settings.
773 Initializes viewer preferences. Creates an empty COSDictionary to store preferences.
774 Initializes a new FDFCatalog with an empty COSDictionary.
775 Constructs a new FDFDictionary instance. Initializes an empty COSDictionary to manage FDF data.
776 Constructs a COSObject with a given COSBase and key. @param object the underlying COSBase object @param objectKey the unique key for this COSObject
777 Calculates the width of the rectangle. @return width as a float
778 Constructs a new FDFField instance. Initializes an internal COSDictionary to manage field properties.
779 Initializes a new FDFIconFit object. Sets up a COSDictionary to manage icon fitting properties.
780 Checks if the rectangle contains a specified point. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
781 Constructs a new FDFJavaScript object with an initialized COSDictionary.
782 Calculates the height of the rectangle. @return Height value as a float
783 Initializes a new named page reference. Creates an empty COSDictionary to store page metadata.
784 Constructs a new FDFPage instance. Initializes an empty COSDictionary to hold page data.
785 Transforms the rectangle using a given matrix. @param matrix transformation matrix to apply @return GeneralPath object representing transformed rectangle
786 Constructs a new FDFPageInfo instance with an initialized COSDictionary.
787 Converts rectangle to a GeneralPath for graphical representation. @return GeneralPath object representing the rectangle's boundary
788 Constructs a new FDFTemplate with an empty COSDictionary.
789 Returns a string representation of the rectangle. @return formatted string with coordinates in the format [x1,y1,x2,y2]
790 Constructs a new PDDeviceNAttributes instance. Initializes an empty COSDictionary with default update state.
791 Constructs a new PDDeviceNProcess instance. Initializes an empty COSDictionary to store color space attributes.
792 Initializes a new PDShading instance. Creates an empty COSDictionary to store shading properties.
793 Initializes a new instance of PDAdditionalActions. Creates an empty COSDictionary to store action data.
794 Initializes a new instance of PDAnnotationAdditionalActions. Creates an empty COSDictionary to store action definitions.
795 Initializes a new instance of PDDocumentCatalogAdditionalActions. Creates an empty COSDictionary to store document catalog actions.
796 Retrieves an integer value at the specified index. @param index position of the element in the array @return integer value or -1 if out of bounds or not a COSNumber
797 Constructs a new instance of PDFormFieldAdditionalActions. Initializes an empty COSDictionary to store form field actions.
798 Retrieves the name at a specified index. @param index the position of the element to retrieve @return the name as a String or null if not found
799 Constructs a new instance of PDPageAdditionalActions. Initializes an empty COSDictionary to store page actions.
800 Initializes a new PDTargetDirectory with an empty COSDictionary.
801 Checks if the COSDictionaryMap is empty. @return true if no key-value pairs are present, false otherwise
802 Constructs a new PDURIDictionary. Initializes an empty COSDictionary for URI actions in PDFs.
803 Initializes a new COSDocument instance using memory-only stream cache. @param parser the ICOSParser to use for document parsing
804 Initializes launch parameters with a new COSDictionary.
805 Initializes a new COSDocument instance. @param streamCacheCreateFunction factory for creating stream caches
806 Constructs a new border effect dictionary. Initializes an empty COSDictionary with default settings.
807 Constructs a new border style dictionary. Initializes an empty COSDictionary with default update state.
808 Constructs a new PDPropBuild with an empty COSDictionary. Initializes the dictionary for storing digital signature properties directly.
809 Constructs a new instance of PDPropBuildDataDict with an empty COSDictionary. Initializes the dictionary to use direct objects as per the specification.
810 Writes a COSFloat object to the PDF stream. @param output OutputStream for writing PDF data @param cosFloat COSFloat object to write @throws IOException if an I/O error occurs during writing
811 Constructs a PDSeedValueMDP instance with an empty COSDictionary. Initializes the dictionary to be direct for efficient storage.
812 Converts the current state to a COSIncrement. @return A new COSIncrement instance initialized with updateInfo
813 Initializes a new instance of PDSeedValueTimeStamp with an empty COSDictionary.
814 Checks if a COS object requires updating. @param base the COSBase object to check @return true if the object needs to be updated, false otherwise
815 Constructs a PDField with an AcroForm. Initializes with an empty dictionary and no parent field. @param acroForm the form containing the field
816 Constructs a new PDViewportDictionary. Initializes an empty COSDictionary to store viewport settings.
817 Parses and returns a COSNumber from a string. @param number string representation of the numeric value @return COSNumber instance (COSFloat or COSInteger) @throws IOException if parsing fails or input is invalid
818 Initializes viewer preferences. Constructs a new instance with an empty dictionary for storing settings.
819 Appends a child element identifier to the structure. @param mcid unique child element identifier
820 Constructs a COSObject with an existing COSBase and key. @param object the underlying COSBase object @param objectKey unique identifier for the COS object
821 Retrieves the COSBase representation of the transition direction's degrees. @return COSInteger object representing the angle in degrees
822 Calculates the width of the rectangle. @return width as a float value
823 Constructs a COSObjectKey with validation. @param num object number (must be non-negative) @param gen generation value (must be non-negative)
824 Checks if the rectangle contains a point. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
825 Determines the image file suffix based on applied filters. @return File suffix as a String or null if no matching filter is found
826 Calculates the height of the rectangle. @return height as a float
827 Creates an output stream for writing data to the COSStream. @param filters list of filters to apply during data processing @return OutputStream for writing data @throws IOException if I/O error occurs or multiple writers are opened
828 Transforms the rectangle using a given matrix. @param matrix transformation matrix to apply @return GeneralPath representing transformed rectangle
829 Constructs a COSString from the given text without forcing hexadecimal. @param text input string to be converted
830 Converts the rectangle to a GeneralPath object. @return GeneralPath representing the rectangle's boundary
831 Returns a string representation of the rectangle. @return String formatted as "[x1,y1,x2,y2]" representing the rectangle's corners
832 Retrieves a string from the array at the specified index. @param index position of the element to retrieve @param defaultValue value to return if element is not a COSString or index is out of bounds @return decoded string or default value
833 Retrieves the file name as a string. @return decoded file name using specified encoding
834 Retrieves an integer value at a specified index. @param index the position of the object in the array @return integer value or -1 if not applicable
835 Extracts pairable items from a COSBase object. @param items COSBase object containing key-value pairs @param pairIdx index to specify which item in a two-element array to extract (0 or 1) @return List of strings representing the extracted items
836 Retrieves export values of the button. @return List of string representations of export values
837 Retrieves the name of a COSName object at the specified index. @param index position in the array @return String representation of the COSName or null if not found
838 Retrieves the default appearance string for text fields. @return decoded default appearance string or null if not found
839 Checks if the COSDictionaryMap is empty. @return true if no key-value pairs are present, false otherwise
840 Updates the document's state. @param updated indicates whether the document has been updated
841 Constructs a COSDocument using memory-only stream cache. @param parser ICOSParser instance for parsing PDF content
842 Closes the ASCII85OutputStream. Flushes remaining data and releases resources.
843 Constructs a COSDocument with specified stream cache and default parser. @param streamCacheCreateFunction factory function for creating stream cache
844 Writes a COSFloat to the PDF stream. @param output OutputStream to write the float value to @param cosFloat COSFloat object to be written @throws IOException if an I/O error occurs while writing
845 Converts the current update state to a COSIncrement. @return COSIncrement object representing the update
846 Checks if a PDF object needs to be updated. @param base the PDF object to check @return true if the object needs updating, false otherwise
847 Parses and returns a COSNumber from a string. @param number string representation of the number @return COSNumber instance (COSFloat or COSInteger) @throws IOException if parsing fails
848 Appends a child element ID to the current structure. @param mcid unique marker content identifier
849 Returns the COSBase representation of the transition angle. @return COSInteger object representing the degrees value
850 Constructs a COSObjectKey with default stream index. @param num object number (must be non-negative) @param gen generation number (must be non-negative)
851 Closes all overlays and documents. Ensures resources are released properly.
852 Determines the file suffix based on image filters. @return File suffix as a String or null if no matching filter found
853 Constructs a PDFormXObject with a given PDStream. @param stream PDStream representing the PDF data
854 Constructs a PDImageXObject with the given stream and resources. @param stream PDStream containing image data @param resources PDResources for managing image resources
855 Creates an OutputStream for writing data to the COSStream. @param filters list of filters to apply during data writing @return OutputStream for writing data @throws IOException if an I/O error occurs or stream is already open
856 Constructs a COSString from a given text. @param text the input string to be encoded
857 Retrieves string at specified index, falling back to default value if not a COSString. @param index position of the object in the array @param defaultValue string to return if object is not a COSString @return decoded string or default value
858 Parses the PDF header to validate document version. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during parsing
859 Parses the FDF header to extract and validate the document version. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during parsing
860 Retrieves the file name from the COSBase object. @return decoded string representation of the file name
861 Skips leading whitespace characters in the PDF source. @throws IOException if an I/O error occurs
862 Retrieves pairable items from a COSBase object. @param items COSBase object containing key-value pairs @param pairIdx index to specify which item in the pair to retrieve (0 or 1) @return List of strings representing the retrieved items
863 Skips a line break in the PDF source. Handles CR, LF, or CRLF sequences. @return true if a valid line break is skipped, false otherwise
864 Retrieves export values of the button. @return List of string representations of export values or empty list if none
865 Reads a line from the PDF source. @return the read line as a String @throws IOException if an I/O error occurs or EOF is reached unexpectedly
866 Retrieves the default appearance string for the text field. @return decoded default appearance string or null if not found
867 Skips over whitespace and comments in the PDF source. @throws IOException if an I/O error occurs while reading the source
868 Sets the updated state of the document. @param updated boolean indicating whether the document is updated
869 Closes the ASCII85OutputStream. Flushes any remaining data and releases resources.
870 Searches for the nearest XRef offset to a given xrefOffset. @param xrefOffset The reference point for searching XRef offsets. @return The nearest XRef offset or -1 if not found. @throws IOException if an I/O error occurs during search.
871 Initializes a new COSWriter instance with default compression. @param outputStream the OutputStream to write PDF data to
872 Initializes a COSWriter with specific objects to write. @param outputStream target output stream for writing @param inputData input data for reference @param objectsToWrite set of COSDictionary objects to write @throws IOException if an I/O error occurs
873 Writes an integer operand to the output stream. @param integer the integer value to write @throws IOException if an I/O error occurs
874 Writes a PDF operator followed by a newline. @param text the operator string to write @throws IOException if writing fails
875 Closes all overlays and documents. Ensures resources are released properly.
876 Encodes text for GSUB transformation. @param gsubWorker worker for applying GSUB transformations @param glyphIds set to collect transformed glyph IDs @param font the font used for encoding @param text input text to be encoded @return byte array of encoded text
877 Constructs a PDFormXObject from a given stream. @param stream PDStream containing form object data
878 Constructs a PDImageXObject from a given stream and resources. @param stream PDStream containing the image data @param resources PDResources associated with the image
879 Parses the PDF header to determine the document version. @return True if parsing is successful, false otherwise. @throws IOException If an I/O error occurs during parsing.
880 Parses the FDF header. @return True if parsing is successful, false otherwise. @throws IOException If an I/O error occurs during parsing.
881 Creates a PDDocument instance from parsed PDF data. @return newly created PDDocument object @throws IOException if an error occurs during document creation
882 Skips leading whitespace characters in the PDF source. Handles spaces and line breaks according to PDF specifications.
883 Constructs a new PDDocument instance with default permissions. @param doc the COSDocument representing the PDF structure @param source the RandomAccessRead source of the PDF content
884 Skips a line break character in the PDF source. Handles CR, LF, and CRLF sequences. @return true if line break is skipped, false otherwise
885 Retrieves metadata from the PDF stream. @return PDMetadata object or null if no metadata is present
886 Reads a line from the PDF source. @return String representing the line read, or throws IOException at EOF
887 Retrieves metadata associated with the image. @return PDMetadata object or null if no metadata is available
888 Skips whitespace and comments in the PDF source. @throws IOException if an I/O error occurs
889 Retrieves the extended object stream. @return PDObjectStream representing the extended stream or null if none exists
890 Constructs a PDFunctionType0 instance. @param function the underlying COSBase object (either COSStream or COSDictionary)
891 Searches for the nearest XRef table or stream offset to a given xrefOffset. @param xrefOffset Target offset for searching XRef tables and streams @return Nearest XRef table or stream offset, or -1 if not found @throws IOException if an I/O error occurs during reading
892 Constructs a PDFunctionType3 instance. @param functionStream COSBase object representing the Type 3 function stream
893 Constructs a PDPostScriptXObject from a COSStream. @param stream the underlying COSStream containing PostScript data
894 Constructs a PDFormXObject from a given COSStream. @param stream underlying COSStream for the form object
895 Initializes a new instance of COSWriter with specified output stream and default compression. @param outputStream the OutputStream to write PDF data to
896 Initializes a PDFormXObject with a given COSStream and resource cache. @param stream underlying COSStream for the form object @param cache resource cache for managing resources efficiently
897 Initializes a new PDDefaultAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to represent as an attribute object
898 Initializes a new COSWriter with specific objects to write. @param outputStream target output stream for writing PDF content @param inputData input data for reading existing PDF content @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs during initialization
899 Constructs a new PDUserAttributeObject with a specified COSDictionary. @param dictionary the COSDictionary to manage user attributes
900 Writes an integer operand to the output stream. @param integer the integer value to be written @throws IOException if an I/O error occurs
901 Constructs a new PDStandardAttributeObject wrapping a given COSDictionary. @param dictionary the COSDictionary to manage standard attributes
902 Writes a PDF operator followed by a newline. @param text the operator string to be written @throws IOException if an I/O error occurs
903 Encodes text for GSUB application. @param gsubWorker worker for applying GSUB transformations @param glyphIds set to collect transformed glyph IDs @param font PDType0Font used for encoding @param text input text to encode @return byte array of encoded glyphs
904 Generates a string representation of the Revisions object. @return A formatted string containing objects and their associated revision numbers
905 Determines if the user has full owner permissions for a PDF document. @return true if all owner permissions are granted, false otherwise
906 Checks if any revision 3 permissions are set. @return true if any of the permissions are granted, false otherwise
907 Default constructor initializes the PublicKeySecurityHandler.
908 Creates and returns a PDDocument instance. @return newly created PDDocument object @throws IOException if an error occurs during document creation
909 Default constructor initializes the SecurityHandler.
910 Constructs a PDDocument instance from a COSDocument and source. @param doc the underlying COSDocument @param source the random access source of the PDF data
911 Writes an array of encrypted bytes to the output stream. @param data plaintext byte array to encrypt and write @param output OutputStream to write the encrypted bytes to @throws IOException if an I/O error occurs during writing
912 Retrieves metadata from the PDF stream. @return PDMetadata object or null if no metadata is present
913 Retrieves metadata associated with the image. @return PDMetadata object or null if no metadata is available
914 Writes a portion of encrypted byte array to an output stream. @param data byte array containing the data to encrypt and write @param offset starting index in the data array @param len number of bytes to write @param output OutputStream to write the encrypted bytes to @throws IOException if an I/O error occurs during writing
915 Retrieves the extended object stream. @return PDObjectStream representing the extended stream or null if not present
916 Constructs a PDFunctionType0 instance. @param function COSStream or COSDictionary representing the function
917 Constructs a PDFunctionType3 instance. @param functionStream COSBase object representing the Type 3 function stream or dictionary.
918 Initializes the PublicKeySecurityHandler with a specified protection policy. @param publicKeyProtectionPolicy the security policy to be applied using public key cryptography
919 Initializes the StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy the security policy to be applied
920 Constructs a PDPostScriptXObject from a COSStream. @param stream the underlying PostScript content stream
921 Creates a new PDFormXObject from a given COSStream. @param stream the underlying COSStream for this form object
922 Encrypts or decrypts data using AES algorithm. @param finalKey encryption key bytes @param data input stream of data to process @param output output stream for processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security exceptions
923 Constructs a PDFormXObject with given COSStream and resource cache. @param stream the underlying COSStream for this form object @param cache the resource cache for efficient resource management
924 Initializes a new PDDefaultAttributeObject with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
925 Encrypts or decrypts data using AES-256. @param data input stream of the data to be processed @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException if an I/O error occurs during processing
926 Constructs a new PDUserAttributeObject with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
927 Constructs a new PDStandardAttributeObject with the specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
928 Generates a string representation of the managed objects and their revisions. @return formatted string with objects and corresponding revision numbers
929 Computes user password for PDF encryption. @param password user-provided password @param owner owner entry bytes @param permissions document access permissions @param id document ID @param encRevision encryption revision @param keyLengthInBytes desired output key length @param encryptMetadata flag to encrypt metadata @return computed user password as byte array @throws IOException if an I/O error occurs
930 Checks if the user has all owner permissions for a PDF document. @return true if all owner permissions are granted, false otherwise
931 Computes the owner password for PDF encryption. @param ownerPassword owner's password bytes @param userPassword user's password bytes @param encRevision encryption revision level @param length desired key length @return encrypted owner password bytes @throws IOException if encryption fails
932 Checks if any revision 3 permission is set. @return true if any of form filling, extraction for accessibility, document assembly, or faithful printing permissions are granted
933 Constructs an FDF highlight annotation from a COSDictionary. @param a COSDictionary representing the annotation data
934 Constructs an FDF squiggly line annotation from a COSDictionary. @param a COSDictionary representing the annotation data
935 Default constructor for PublicKeySecurityHandler.
936 Initializes an FDF strikeout annotation from a COSDictionary. @param a COSDictionary containing annotation data
937 Default constructor for StandardSecurityHandler.
938 Constructs an underline annotation from a COSDictionary. @param a COSDictionary representing the annotation data
939 Encrypts and writes an array of bytes to the output stream. @param data the plaintext byte array to encrypt and write @param output the OutputStream to write the encrypted bytes to @throws IOException if an I/O error occurs during writing
940 Retrieves or loads a FontBoxFont based on format and file. @return FontBoxFont object or null if loading fails
941 Writes encrypted bytes from a byte array to an output stream. @param data the byte array containing plaintext data @param offset starting index in the data array @param len number of bytes to encrypt and write @param output OutputStream to write the encrypted bytes to @throws IOException if an I/O error occurs during writing
942 Initializes a new PublicKeySecurityHandler with the specified protection policy. @param publicKeyProtectionPolicy the security policy to apply for encryption using public keys
943 Constructs a StandardSecurityHandler with specified protection policy. @param standardProtectionPolicy the security policy to apply for encryption
944 Encrypts or decrypts data using AES algorithm. @param finalKey encryption key bytes @param data input stream for reading data @param output output stream for writing encrypted/decrypted data @param decrypt true if decryption, false if encryption @throws IOException on I/O errors
945 Loads font information from the disk cache for a given list of font files. This method first creates a set of absolute paths for the provided font files to track pending entries. It then attempts to retrieve the disk cache file and checks if it exists. If the cache file exists, it reads through each line, parsing font details such as PostScript name, format, CID system info, and other attributes. For each font entry, it verifies if the corresponding file still exists and matches the cached metadata (last modified time and hash). If a match is found, the font information is added to the results list; otherwise, it logs a debug message indicating the discrepancy. If any font files are not found in the cache or do not match their cached entries, the method logs an informational message stating that the font cache will be rebuilt. In this case, it returns null, indicating that the cache needs to be refreshed. @param files A list of File objects representing the font files to load from the cache. @return A List of FSFontInfo objects containing the loaded font information, or null if the cache needs to be rebuilt due to discrepancies or missing entries.
946 Saves font information to disk cache. Writes each font's details using BufferedWriter. Handles IOException and SecurityException gracefully.
947 Encrypts or decrypts data using AES-256. @param data input stream containing the data to process @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors
948 Retrieves font metrics for a given font name. @param fontName the name of the font to retrieve metrics for @return FontMetrics object or null if not found
949 Sets the font provider and updates font mappings. @param fontProvider new FontProvider instance
950 Computes user password for PDF encryption. @param password user-provided password @param owner owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output length in bytes @param encryptMetadata flag to encrypt metadata @return byte array of computed user password @throws IOException if an I/O error occurs
951 Computes the owner password for a PDF document. @param ownerPassword user-provided owner password @param userPassword user-provided user password @param encRevision PDF encryption revision @param length desired key length in bytes @return encrypted owner password byte array @throws IOException if encryption fails or invalid parameters are provided
952 Constructs an FDFAnnotationHighlight from a COSDictionary. @param a COSDictionary representing the annotation data
953 Constructs an FDFAnnotationSquiggly from a COSDictionary. @param a COSDictionary representing the annotation data
954 Constructs an FDFAnnotationStrikeOut from a COSDictionary. @param a COSDictionary representing the annotation data
955 Constructs an underline annotation from a COSDictionary. @param a COSDictionary representing the annotation data
956 Builds a mapping from glyph ID to font code. @return Map of glyph IDs to corresponding font codes @throws IOException if an I/O error occurs during mapping
957 Retrieves or loads a font based on its format and file. @return FontBoxFont object or null if loading fails
958 Loads font information from the disk cache. This method reads font data from a previously created disk cache file and constructs {@link FSFontInfo} objects for each valid entry. It checks if the cached font files still exist and whether their contents have changed by comparing timestamps and, optionally, hashes. If any discrepancies are found or new fonts are detected that are not in the cache, it logs a message and returns null, indicating that the cache needs to be rebuilt. @param files A list of font files whose information should be loaded from the cache. @return A list of {@link FSFontInfo} objects representing the cached font data if all entries are valid; otherwise, null if any discrepancies or new fonts are detected.
959 Saves font information to disk cache. Writes each font's info using BufferedWriter. Handles IOException and SecurityException.
960 Retrieves AFM metrics for a given font name. @param fontName the name of the font to retrieve metrics for @return FontMetrics object or null if not found
961 Sets the font provider and updates font info map. @param fontProvider new FontProvider instance
962 Loads a glyph list from a specified resource file. @param filename name of the glyph list file @param numberOfEntries expected number of entries for efficient initialization @return GlyphList object containing loaded data @throws RuntimeException if an I/O error occurs during loading
963 Retrieves a mapping from glyph IDs to font codes. @return Map of glyph IDs to their corresponding font codes @throws IOException if an I/O error occurs during processing
964 Validates PNG chunk integrity. @param chunk the PNG chunk to validate @return true if chunk is valid, false otherwise
965 Constructs a PDTilingPattern with a COSDictionary. @param dictionary the COSDictionary representing pattern properties
966 Initializes a ShadedTriangle with vertices and colors. @param p array of Point2D representing triangle vertices @param c 2D array of color values for each vertex
967 Constructs a new PDShadingType3 instance from a COSDictionary. @param shadingDictionary the dictionary containing Type 3 shading properties
968 Loads a glyph list from a resource file. @param filename name of the glyph list file @param numberOfEntries expected number of entries @return GlyphList object initialized with data from the file @throws RuntimeException if an I/O error occurs or file is not found
969 Constructs a new PDShadingType4 instance. @param shadingDictionary COSDictionary containing triangle-based shading properties
970 Constructs a new PDShadingType5 instance. @param shadingDictionary COSDictionary containing triangular shading properties
971 Ends text clipping by applying buffered clips and resetting state.
972 Updates the graphics clipping path. @param graphics the Graphics2D object to update
973 Creates a PDSoftMask from a given dictionary. @param dictionary PDF dictionary or COSName containing soft mask properties @return PDSoftMask object or null if invalid input
974 Validates a PNG chunk's integrity. @param chunk the PNG chunk to validate @return true if valid, false otherwise
975 Constructs a new PDTilingPattern instance. @param dictionary COSDictionary representing the pattern
976 Initializes a ShadedTriangle with vertices and colors. @param p array of three Point2D vertices @param c 2D array of color values for each vertex
977 Constructs a PDShadingType3 object from a COSDictionary. @param shadingDictionary the COSDictionary representing Type 3 shading properties
978 Constructs a PDShadingType4 from a COSDictionary. @param shadingDictionary the COSDictionary representing the shading properties
979 Constructs a PDShadingType5 instance from a COSDictionary. @param shadingDictionary the COSDictionary representing the shading properties
980 Generates a unique partial name for a signature field. Ensures no conflicts with existing field names. @return Unique partial name for the signature field
981 Ends text clipping by applying buffered clips and resetting state.
982 Constructs a new PDButton instance. @param acroForm the AcroForm containing the button @param field the COSDictionary representing button attributes @param parent the parent PDNonTerminalField if any
983 Sets the clipping path for rendering. Updates the graphics context with current clipping paths from state.
984 Constructs a new signature field in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any
985 Creates a PDSoftMask from a given COSBase. @param dictionary PDF base object containing soft mask properties @return PDSoftMask object or null if creation fails
986 Constructs a new variable text field in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any
987 Returns adjusted X direction based on text rotation. @return Adjusted X coordinate for rendering
988 Initializes a TextPosition with specified properties. @param pageRotation rotation of the PDF page in degrees @param pageWidth width of the PDF page @param pageHeight height of the PDF page @param textMatrix transformation matrix for text positioning @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of each character in the text @param spaceWidth width of a space character @param unicode Unicode string representation of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize size of the font @param fontSizeInPt font size in points
989 Adjusts Y coordinate based on text direction. @return Adjusted Y coordinate for rendering
990 Retrieves the width of the text element. @return width of the text considering its rotation
991 Calculates adjusted width of text based on direction. @return Adjusted width considering text direction
992 Starts processing of an article in the PDF with default left-to-right text direction. @throws IOException if an I/O error occurs during processing
993 Writes a line of text to output. @param line list of words with text positions @throws IOException if an I/O error occurs
994 Writes the end of a paragraph. Ensures proper paragraph handling by starting a new one if not already in one, then writes the paragraph end marker and updates the paragraph state.
995 Creates a WordWithTextPositions object with normalized word. @param word the original word to process @param wordPositions list of TextPosition objects for the word @return WordWithTextPositions instance with normalized word and positions
996 Converts Calendar to PDF date string. @param cal GregorianCalendar instance @return formatted date string for PDF or null if calendar is null
997 Converts Calendar to ISO8601 format string. @param cal Calendar instance to convert @return ISO8601 formatted date-time string with timezone
998 Converts internal byte array to a hexadecimal string. @return hexadecimal representation of the byte data
999 Writes an external signature to the PDF. @param cmsSignature CMS signature bytes @throws IOException if I/O error occurs or signature size is insufficient
1000 Generates a unique partial name for a signature field. @return Unique partial name for the signature field
1001 Writes the COSName to a PDF output stream. @param output OutputStream to write the name to @throws IOException if writing fails
1002 Constructs a PDButton instance. @param acroForm the form containing the button @param field the COSDictionary representing the button @param parent the parent field in the hierarchy
1003 Constructs a PDSignatureField instance. @param acroForm the form containing the signature field @param field the COSDictionary representing the signature field @param parent the parent field in the hierarchy
1004 Writes an array of bytes as hexadecimal to an output stream. @param bytes the byte array to convert and write @param output the OutputStream to write to @throws IOException if writing to the output stream fails
1005 Constructs a PDVariableText instance. @param acroForm the form containing the text field @param field the COSDictionary representing the text field @param parent the parent field in the hierarchy
1006 Sorts a list using iterative merge sort. @param list the list to be sorted @param cmp comparator defining the order of elements
1007 Calculates adjusted X direction based on text orientation. @return Adjusted X position considering text direction
1008 Initializes a TextPosition object with specified parameters for text rendering. @param pageRotation rotation angle of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text positioning @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of individual characters @param spaceWidth width of a space character @param unicode Unicode representation of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize font size in user space units @param fontSizeInPt font size in points
1009 Adjusts Y-coordinate based on text direction. @return Adjusted Y-coordinate for rendering
1010 Returns the width of the text element considering its rotation. @return rotated width of the text element
1011 Calculates adjusted width of text considering its direction. @return Adjusted width based on current direction
1012 Starts a new article in PDF text extraction with left-to-right text direction. @throws IOException if an I/O error occurs during writing
1013 Rotates the matrix by a specified angle around the origin. @param theta angle of rotation in radians
1014 Applies translation to the current text matrix. @param tx translation along X-axis @param ty translation along Y-axis
1015 Writes a line of text to the output. @param line list of WordWithTextPositions objects representing words in the line @throws IOException if an I/O error occurs during writing
1016 Applies translation to the matrix using coordinates from a Vector. @param vector The Vector containing translation values
1017 Writes the end of a paragraph. Ensures proper paragraph handling and updates state. @throws IOException if an I/O error occurs during writing
1018 Concatenates two matrices. @param a first matrix @param b second matrix @return new Matrix resulting from concatenation
1019 Creates a WordWithTextPositions object. @param word the original word string @param wordPositions list of TextPosition objects @return WordWithTextPositions with normalized word and positions
1020 Writes a floating-point operand to the output stream. @param real the float value to write @throws IOException if an I/O error occurs
1021 Converts Calendar to formatted date string. @param cal Calendar instance to convert @return Formatted date string or null if input is null
1022 Detects file type from input stream using magic numbers. @param inputStream stream containing file data @return FileType enum representing detected file type @throws IOException if stream does not support mark/reset or ends prematurely
1023 Converts Calendar to ISO 8601 formatted string. @param cal Calendar instance to convert @return ISO 8601 formatted date-time string with timezone
1024 Processes a PDF operator with its operands. @param operation the PDF operator string @param arguments list of operands for the operator @throws IOException if an error occurs during processing
1025 Converts the internal byte array to a hexadecimal string. @return Hexadecimal representation of the byte array
1026 Writes an external signature to the PDF. @param cmsSignature CMS signature byte array @throws IOException if writing fails or PDF is not prepared for signing
1027 Writes the PDF representation of the COSName to an OutputStream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
1028 Writes each byte in the array as two hexadecimal characters to an OutputStream. @param bytes the array of bytes to convert and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
1029 Sorts a list using the iterative merge sort algorithm. @param list list of elements to be sorted @param cmp comparator defining element order
1030 Initializes PDFMarkedContentExtractor with specified encoding. Registers operators for handling marked content sequences and drawing objects.
1031 Initializes the PDFTextStripper with text extraction operators.
1032 Creates a PDMarkedContent instance based on the tag. @param tag the tag name for the marked content @param properties dictionary of properties for the content @return PDArtifactMarkedContent if tag is ARTIFACT, otherwise PDMarkedContent
1033 Retrieves an item from the dictionary by its string key. @param key the key associated with the item to retrieve @return the COSBase object associated with the key, or null if not found
1034 Checks if the dictionary contains a key. @param name the string representation of the PDF name @return true if the key exists, false otherwise
1035 Rotates the matrix around the origin. @param theta angle of rotation in radians
1036 Applies translation to the current text matrix. @param tx horizontal translation value @param ty vertical translation value
1037 Retrieves a PDF filter by its name. @param filterName the name of the filter to retrieve @return the Filter instance or throws an exception if not found @throws IOException if the specified filter is invalid
1038 Applies translation to the matrix using a vector. @param vector the translation vector
1039 Parses a PDF name from the source. Reads characters until end-of-name delimiter is found, handling hex escapes. @return COSName object representing the parsed name @throws IOException if an I/O error occurs during parsing
1040 Concatenates two matrices. @param a first matrix @param b second matrix @return new Matrix object representing the concatenated result
1041 Writes a float operand to the output stream. @param real the float number to write @throws IOException if an I/O error occurs
1042 Detects the file type from a BufferedInputStream. @param inputStream input stream to analyze @return FileType object representing the detected file type @throws IOException if stream does not support mark/reset or ends prematurely
1043 Constructs a PDColor from a COSArray and a color space. @param array COSArray containing color components and possibly a pattern name @param colorSpace PDColorSpace for the color
1044 Processes a PDF operator by name with its operands. @param operation the PDF operator string @param arguments list of operands for the operator @throws IOException if an I/O error occurs during processing
1045 Parses a hexadecimal string into a COSString. @param hex input hexadecimal string @return COSString object representing the parsed bytes @throws IOException if the hex string is invalid
1046 Creates a COSArray from a list of integers. @param integer list of Integer objects to be converted @return COSArray containing COSInteger elements
1047 Creates a COSArray from a list of strings. @param strings list of string names to be converted to COSNames @return COSArray containing COSName objects
1048 Creates a COSArray from a list of strings. @param strings list of string values to be converted @return COSArray containing COSString objects
1049 Constructs a new empty COSArrayList. Initializes with an empty COSArray and ArrayList.
1050 Constructs a COSArrayList linked to a COSDictionary. @param dictionary owning COSDictionary @param dictionaryKey key in the dictionary for this list
1051 Constructs a PDRectangle with specified coordinates and dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
1052 Initializes the PDFMarkedContentExtractor with specified encoding. Registers operators for handling marked content sequences and drawing objects.
1053 Initializes PDFTextStripper with text extraction operators.
1054 Constructs a PDRectangle from a BoundingBox. @param box the bounding box defining rectangle coordinates
1055 Sets the list of filters for the PDF stream. @param filters list of COSName objects representing filter types
1056 Creates a new PDMarkedContent instance based on the tag. @param tag COSName object representing the tag for the marked content @param properties COSDictionary containing properties of the marked content @return PDArtifactMarkedContent if tag is ARTIFACT, otherwise PDMarkedContent
1057 Sets alternate color spaces for the PDF stream. @param list of PDColorSpace objects representing alternate color spaces
1058 Retrieves an item by its key from the dictionary. @param key string key to identify the item @return COSBase object associated with the key or null if not found
1059 Creates a new COSStream for managing PDF content. @return The newly created COSStream object
1060 Constructs a new COSStream with no specific cache.
1061 Checks if the dictionary contains a key. @param name the PDF name string @return true if the key exists, false otherwise
1062 Initializes a COSStream with a cache and a read view. @param streamCache the cache for managing random access streams @param randomAccessReadView the view for reading data @throws IOException if an I/O error occurs during initialization
1063 Retrieves a PDF filter by its name. @param filterName the name of the filter to retrieve @return the Filter instance or throws an exception if not found @throws IOException if the filter is invalid or not found
1064 Returns an unmodifiable view of this dictionary. @return UnmodifiableCOSDictionary instance wrapping the current dictionary
1065 Parses a PDF name from the input source. @return COSName instance representing the parsed PDF name @throws IOException if an I/O error occurs during parsing
1066 Retrieves the current decode result. @return Latest DecodeResult or default if none available
1067 Retrieves resources associated with the form XObject. @return PDResources object or null if no resources are found
1068 Default constructor initializes a PDAttributeObject.
1069 Constructs a new PDUserProperty with a given attribute object. @param userAttributeObject the user attribute object to manage
1070 Initializes a PDColor from a COSArray and color space. @param array COSArray containing color components or pattern info @param colorSpace associated color space for the color
1071 Default constructor initializes a new destination node.
1072 Initializes a new instance of PDEmbeddedFilesNameTreeNode.
1073 Constructs a new PDJavascriptNameTreeNode. Initializes an empty COSDictionary and associates it with a COSUpdateState.
1074 Parses a hexadecimal string into a COSString. @param hex the hexadecimal string to parse @return COSString object representing the parsed bytes @throws IOException if the input is not a valid hexadecimal string
1075 Initializes a new PDStructureElementNameTreeNode. Calls the superclass constructor to set up the node.
1076 Converts a list of integers to a COSArray. @param integer list of integers to convert @return COSArray containing COSInteger elements
1077 Constructs a new non-terminal form field. @param acroForm the AcroForm containing the field
1078 Constructs a new PDF terminal field. @param acroForm the AcroForm containing the field
1079 Creates a COSArray from a list of strings. @param strings list of string names to convert @return COSArray containing COSName objects
1080 Creates a COSArray from a list of strings. @param strings list of string values to be converted @return COSArray containing COSString objects
1081 Initializes a new COSArrayList with empty underlying structures.
1082 Initializes a COSArrayList associated with a COSDictionary. @param dictionary parent COSDictionary object @param dictionaryKey key in the dictionary for this list
1083 Clips the current graphics state to a transformed rectangle. @param rectangle PDRectangle to apply as clipping area
1084 Constructs a PDRectangle with specified dimensions. @param x lower-left corner x-coordinate @param y lower-left corner y-coordinate @param width rectangle width @param height rectangle height
1085 Calculates the transformed bounding box of an appearance stream. @param appearanceStream the appearance stream to process @return transformed bounding box as a Rectangle2D object
1086 Constructs a PDRectangle from a BoundingBox. @param box the bounding box defining rectangle coordinates
1087 Initializes graphics state with a clipping path based on the given page. @param page PDF rectangle defining the initial clipping area
1088 Sets the list of filters for the PDF stream. @param filters list of COSName representing filter types
1089 Constructs a new COSDocument using an in-memory stream cache.
1090 Sets alternate color spaces for the PDF document. @param list of PDColorSpace objects representing alternative color spaces
1091 Creates a new COSStream for PDF content. @return initialized COSStream object
1092 Initializes the COSParser with a PDF source and security settings. @param source PDF file to be parsed @param password decryption password for the PDF @param keyStore input stream for the keystore (if encrypted) @param keyAlias alias for the key in the keystore @param streamCacheCreateFunction factory for creating stream caches @throws IOException if an I/O error occurs during initialization
1093 Constructs a new COSStream without an initial cache. Initializes with null as the stream cache.
1094 Constructs a COSStream with a cache and a read view. @param streamCache the cache for managing stream data @param randomAccessReadView the read view for accessing stream content @throws IOException if an I/O error occurs
1095 Returns an unmodifiable view of this dictionary. @return UnmodifiableCOSDictionary instance wrapping the current dictionary
1096 Retrieves or creates a COSObjectKey for a given PDF object number and generation. Utilizes a cache to improve performance for large PDFs. @param num object number (must be non-negative) @param gen generation value (must be non-negative) @return COSObjectKey representing the PDF object
1097 Retrieves the last decode result or creates a default one if none exist. @return DecodeResult instance representing the current decoding state
1098 Searches for and records PDF objects by parsing the document. @throws IOException if an I/O error occurs during parsing
1099 Retrieves resources associated with the form XObject. @return PDResources object or null if no resources are found
1100 Searches for object stream offsets in a PDF. @return Map of offsets to COSObjectKey or empty map if none found @throws IOException if an I/O error occurs during parsing
1101 Protected constructor for PDAttributeObject. Initializes a new instance with default settings.
1102 Constructs a new PDUserProperty with a given user attribute object. @param userAttributeObject the user attribute object to be managed
1103 Parses cross-reference stream and sets entries in the provided resolver. @param resolver XrefTrailerResolver to store parsed object references @throws IOException if an I/O error occurs during parsing
1104 Constructs a new PDDestinationNameTreeNode with an empty COSDictionary.
1105 Constructs a new PDEmbeddedFilesNameTreeNode with an empty COSDictionary.
1106 Constructs a new PDJavascriptNameTreeNode with an empty COSDictionary.
1107 Finds and validates a COSObjectKey in the PDF. @param objectKey initial key to search for @param offset starting position in the PDF @param xrefOffset map of existing keys to their offsets @return validated COSObjectKey or null if not found @throws IOException if an I/O error occurs during reading
1108 Constructs a new PDStructureElementNameTreeNode.
1109 Constructs a non-terminal PDF form field. @param acroForm the form containing the field
1110 Parses a PDF xref table from the given byte offset. @param startByteOffset starting position of the xref table @return true if parsing is successful, false otherwise
1111 Constructs a PDTerminalField with an AcroForm. Initializes the field with no parent and an empty dictionary. @param acroForm the form containing the field
1112 Creates an output stream for writing data to the COSStream. @return OutputStream for writing data @throws IOException if I/O error occurs or multiple writers are opened
1113 Creates an output stream with specified filter. @param filter the filter to apply during data processing @return OutputStream for writing data @throws IOException if I/O error occurs or multiple writers are opened
1114 Initializes a new empty file specification. Sets the default file name to an empty string.
1115 Sets the file name. @param fileName name of the file to be specified
1116 Clips the current graphics context to a specified rectangle. @param rectangle the rectangular area to clip to
1117 Retrieves a string from the array at the specified index. @param index position of the element to retrieve @return decoded string or null if element is not a COSString or index is out of bounds
1118 Calculates the transformed bounding box of an appearance stream. @param appearanceStream the appearance stream to transform @return transformed bounding box as Rectangle2D
1119 Retrieves the value of the button. @return The string representation of the button's value or "Off" if none is set
1120 Initializes graphics state with a clipping path based on page dimensions. @param page PDRectangle representing the page boundaries
1121 Sets the update state of the COS object. @param flag indicates whether the object needs to be updated
1122 Constructs a COSDocument with default memory-only stream cache.
1123 Updates the document's state. Calls update(true) to indicate the document has been updated.
1124 Initializes a PDF parser with specified security settings and stream cache. @param source RandomAccessRead object representing the PDF file @param password decryption password for protected documents @param keyStore InputStream containing keystore data @param keyAlias alias for the key in the keystore @param streamCacheCreateFunction factory function for creating stream cache @throws IOException if an I/O error occurs during initialization
1125 Retrieves or creates a COSObjectKey for a given object number and generation. Utilizes caching to improve performance with large PDFs. @param num object number (must be non-negative) @param gen generation number (must be non-negative) @return COSObjectKey representing the PDF object
1126 Searches for and indexes PDF objects by parsing the document. @throws IOException if an I/O error occurs during parsing
1127 Searches for object stream offsets in a PDF. @return Map of offsets to COSObjectKey or empty if none found
1128 Parses cross-reference entries and updates the provided resolver. @param resolver XrefTrailerResolver to update with parsed data @throws IOException if an I/O error occurs during parsing
1129 Finds and validates an object key in a PDF file. @param objectKey initial object key to search for @param offset starting position in the PDF @param xrefOffset map of object keys to their offsets @return validated COSObjectKey or null if not found @throws IOException if an I/O error occurs
1130 Parses a cross-reference table in a PDF. @param startByteOffset starting byte position of the xref table @return true if parsing is successful, false otherwise
1131 Initializes a PDTransparencyGroup with a given PDStream. @param stream PDStream representing the PDF data
1132 Creates an OutputStream for writing data to the COSStream with no filters. @return OutputStream for writing data @throws IOException if an I/O error occurs or stream is already open
1133 Creates a thumbnail image from a COSStream. @param cosStream COSStream containing image data @return PDImageXObject representing the thumbnail
1134 Retrieves the mask associated with the image. @return PDImageXObject representing the mask or null if none exists
1135 Creates an OutputStream for writing data to the PDF stream. @param filter filter to apply during data writing @return OutputStream for writing data @throws IOException if an I/O error occurs or stream is already open
1136 Initializes an empty PDSimpleFileSpecification with no content.
1137 Retrieves the soft mask associated with the image. @return PDImageXObject representing the soft mask or null if none exists
1138 Sets the file name for the PDF specification. @param fileName the name of the file to be set
1139 Reads a string from the PDF source. @return the parsed string @throws IOException if an I/O error occurs while reading the source
1140 Retrieves string at specified index. @param index position of the object in the array @return decoded string or null if not a COSString
1141 Reads and verifies an expected string from the PDF source. @param expectedString the characters to read and verify @param skipSpaces if true, skips spaces before reading @throws IOException if the expected string does not match or I/O error occurs
1142 Retrieves the current value of the button. @return String representation of the button's value or "Off" if not set
1143 Sets the update status of the COS object. @param flag indicates whether the object needs to be updated
1144 Reads a string of specified length from the PDF source. @param length maximum number of characters to read @return parsed string or empty if no valid data found @throws IOException if an I/O error occurs while reading
1145 Marks the document as updated.
1146 Reads and parses an integer from the PDF source. @return parsed integer value @throws IOException if an I/O error occurs or parsing fails
1147 Reads a long integer from the PDF source. @return The parsed long value @throws IOException if an I/O error occurs or parsing fails
1148 Calculates the fixed offset for an XRef table/stream. @param objectOffset The initial offset of the XRef table/stream. @return The fixed offset or 0 if not found. @throws IOException if an I/O error occurs during calculation
1149 Saves the FDF document to the specified output stream. @param output OutputStream where the FDF data will be written @throws IOException if an I/O error occurs during writing
1150 Begins a text block for content stream operations. Throws IllegalStateException if already in text mode.
1151 Ends text mode in the PDF content stream. Must be called after beginText(). @throws IOException if writing fails
1152 Moves to the next line in text mode. @throws IOException if writing fails @throws IllegalStateException if not in text mode
1153 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto their respective stacks. Writes 'q' operator to PDF stream.
1154 Restores the previous graphics state. Throws an exception if called within a text object. Pops font and color space stacks. Writes the restore operator to the stream.
1155 Applies the current stroke settings to draw the path. Throws an exception if called within a text block. @throws IOException if writing fails
1156 Initializes a new PDTransparencyGroup from a given stream. @param stream PDStream containing transparency group data
1157 Closes the current path and strokes it. Throws exception if called in text mode. @throws IOException if writing fails
1158 Creates a thumbnail image from a COSStream. @param cosStream stream containing the thumbnail data @return PDImageXObject representing the thumbnail
1159 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if writing fails
1160 Retrieves the mask associated with the image. @return PDImageXObject representing the mask or null if none exists
1161 Applies even-odd rule to fill the path. @throws IOException if writing fails or in text mode
1162 Retrieves the soft mask associated with the image. @return PDImageXObject representing the soft mask or null if not present
1163 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1164 Fills and strokes the current path using even-odd rule. Throws exception if called within a text block. @throws IOException if writing fails
1165 Reads a string from the PDF source. Skips leading spaces and reads characters until an end-of-name delimiter is found. @return the read string @throws IOException if an I/O error occurs
1166 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1167 Reads and verifies an expected string from the PDF source. @param expectedString the string to expect in the PDF @param skipSpaces flag to skip spaces before and after reading @throws IOException if the expected string is not found or an I/O error occurs
1168 Closes the current path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if writing fails
1169 Reads a string of specified length from the PDF source. @param length maximum number of characters to read @return read string or empty if no valid characters found @throws IOException if an I/O error occurs
1170 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if writing fails
1171 Clips the current path to the current clipping area. @throws IOException if an I/O error occurs during writing
1172 Reads and parses an integer from the PDF source. @return parsed integer value @throws IOException if parsing fails or I/O error occurs
1173 Applies even-odd clipping to the current path. Throws IllegalStateException if called within a text block. @throws IOException if writing fails
1174 Reads and parses a long integer from the PDF source. @return parsed long value @throws IOException if parsing fails or an I/O error occurs
1175 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if the line join style is invalid
1176 Calculates the fixed offset for an XRef table or stream. @param objectOffset Target offset for searching XRef tables and streams @return Fixed offset if found, otherwise 0 @throws IOException if I/O error occurs during processing
1177 Saves FDF document to specified output stream. @param output OutputStream to write FDF data to @throws IOException if I/O error occurs during writing
1178 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is not a valid value
1179 Begins text mode for writing text content. Throws exception if already in text mode.
1180 Ends marked content in PDF. @throws IOException if writing fails
1181 Ends text mode and writes the end text operator. @throws IOException if an I/O error occurs
1182 Sets the text rendering mode. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs during setting
1183 Inserts a newline in the text content. Must be called after beginText(). @throws IOException if an I/O error occurs
1184 Constructs a new PDDocument instance. @param doc the COSDocument representing the PDF structure
1185 Saves the current graphics state. Throws exception if in text mode. @throws IOException if an I/O error occurs
1186 Initializes a new PDAppearanceStream from a given COSStream. @param stream underlying COSStream for the appearance stream
1187 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
1188 Initializes a PDTransparencyGroup with a given COSStream and resource cache. @param stream underlying COSStream for the form object @param cache resource cache for managing resources efficiently
1189 Strokes the current path in the PDF. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1190 Constructs a new layout attribute object wrapping a given COSDictionary. @param dictionary the COSDictionary to manage layout attributes
1191 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1192 Constructs a new PDListAttributeObject wrapping a given COSDictionary. @param dictionary the COSDictionary to manage list attributes
1193 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
1194 Constructs a new PDPrintFieldAttributeObject wrapping a given COSDictionary. @param dictionary the COSDictionary to manage print field attributes
1195 Fills the current path using the even-odd rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1196 Constructs a new PDTableAttributeObject wrapping a given COSDictionary. @param dictionary the COSDictionary to manage table attributes
1197 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1198 Retrieves current access permissions for the PDF document. Initializes with full owner permissions if not already set. @return AccessPermission object representing document access rights
1199 Fills and strokes even-odd shaped paths. Throws exception if called in text mode.
1200 Computes the appropriate PDF revision number based on document version and permissions. @param version current document version @return computed revision number for encryption standards
1201 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1202 Closes path, fills and strokes it using even-odd rule. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1203 Encrypts data using RC4 algorithm. @param finalKey encryption key for RC4 cipher @param input plaintext byte array to encrypt @param output OutputStream to write encrypted bytes to @throws IOException if I/O error occurs during encryption or writing
1204 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1205 Clips the current path to the non-zero winding rule. @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs
1206 Encrypts and writes data from an input stream to an output stream. @param data InputStream containing the data to encrypt @param output OutputStream to write the encrypted data to @throws IOException if an I/O error occurs during reading or writing
1207 Clips the current path using the even-odd rule. @throws IOException if an I/O error occurs
1208 Prepares a string for SASL use with unassigned code points allowed. @param str input string to prepare @return the prepared string if valid
1209 Sets the line join style in a PDF content stream. @param lineJoinStyle the join style to be set (0, 1, or 2) @throws IOException if an I/O error occurs during writing
1210 Prepares a stored string for SASL use with unassigned code points disallowed. @param str the input string to prepare @return the prepared string if valid, otherwise throws an exception
1211 Sets the line cap style for drawing lines. @param lineCapStyle integer representing the cap style (0, 1, or 2) @throws IOException if an I/O error occurs
1212 Ends a marked content sequence in the PDF. @throws IOException if an I/O error occurs
1213 Sets the rendering mode for text. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs
1214 Constructs a PDDocument instance from a COSDocument. @param doc the underlying COSDocument
1215 Constructs a new PDAppearanceStream from a given COSStream. @param stream the underlying COSStream for this appearance stream
1216 Initializes a new PDTransparencyGroup with given COSStream and resource cache. @param stream the underlying COSStream for this transparency group @param cache the resource cache for efficient resource management
1217 Constructs a new PDLayoutAttributeObject with the specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
1218 Constructs a new PDListAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
1219 Constructs a new PDPrintFieldAttributeObject with the specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
1220 Constructs a new PDTableAttributeObject with the specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
1221 Retrieves current access permissions for the PDF document. Initializes with owner permissions if not already set. @return AccessPermission object representing current document permissions
1222 Computes user password for PDF encryption. @param ownerPassword bytes of the owner password @param owner bytes of the owner identifier @param encRevision encryption revision level @param length desired key length @return computed user password bytes or empty array if not applicable
1223 Computes the appropriate PDF revision number based on version and permissions. @param version current PDF version @return computed revision number for security settings
1224 Adds a TrueType collection font to the provider. @param ttcFile the TrueType collection file
1225 Adds a TrueType font to the font info list. @param fontHeaders parsed font headers @param file font file @param hash unique font hash
1226 Adds a Type1 font from the specified PFB file. @param pfbFile the PFB font file to add
1227 Encrypts data using RC4 algorithm. @param finalKey encryption key (1-32 bytes) @param input plaintext byte array to encrypt @param output OutputStream for encrypted data @throws IOException if I/O error occurs during encryption or writing
1228 Retrieves the current font provider, initializing with a default if none exists. @return FontProvider instance
1229 Encrypts and writes data from an input stream to an output stream. @param data InputStream containing plaintext data @param output OutputStream for encrypted data @throws IOException if an I/O error occurs during reading or writing
1230 Prepares a string for SASL with unassigned code points allowed. @param str input string to prepare @return the prepared string or throws IllegalArgumentException if invalid
1231 Prepares a stored string for SASL by normalizing and validating characters. @param str the input string to prepare @return the prepared string or throws IllegalArgumentException if invalid
1232 Writes CID to Unicode mappings to an output stream. @param out OutputStream for writing the CMap data @throws IOException if an I/O error occurs
1233 Validates the PNGConverterState by checking all required chunks. @param state the PNGConverterState to validate @return true if all chunks are valid, false otherwise
1234 Initializes a CoonsPatch with given control points and colors. @param points array of 12 Point2D objects representing control points @param color 2D array representing corner colors
1235 Generates shaded triangles from a grid of color-coordinate pairs. @param patchCC 2D array of CoordinateColorPair objects representing the patch colors and coordinates @return List of ShadedTriangle objects forming the shaded pattern
1236 Computes user password for PDF encryption. @param ownerPassword owner's password bytes @param owner user's password bytes @param encRevision PDF encryption revision @param length desired key length in bytes @return encrypted user password bytes or empty array if unsupported revision
1237 Adds TrueType collection fonts to the font provider. @param ttcFile TrueType collection file
1238 Initializes a new TensorPatch with specified control points and colors. @param tcp array of 16 control points defining the patch @param color 2D array representing corner colors
1239 Adds a TrueType font to the list. @param fontHeaders parsed font headers @param file font file @param hash font hash
1240 Adds a Type1 font from the given PFB file. @param pfbFile PFB font file to add
1241 Returns the current font provider. Initializes with DefaultFontProvider if not already set. @return FontProvider instance
1242 Writes CID-to-Unicode mappings to an output stream. @param out the OutputStream to write to @throws IOException if an I/O error occurs
1243 Validates the state of a PNG conversion process. @param state the current state to validate @return true if valid, false otherwise
1244 Constructs a Coons patch with specified control points and corner colors. @param points array of control points defining the patch shape @param color 2D array representing corner colors for shading
1245 Retrieves the data to be signed for a PDF document. @return InputStream containing the data segments to sign @throws IOException if an I/O error occurs
1246 Constructs a new PDCheckBox instance. @param acroForm the AcroForm containing the checkbox @param field the COSDictionary representing checkbox attributes @param parent the parent PDNonTerminalField if any
1247 Generates shaded triangles from a grid of color-coordinate pairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the shading pattern
1248 Constructs a new PDPushButton instance. @param acroForm the AcroForm containing the button @param field the COSDictionary representing button attributes @param parent the parent PDNonTerminalField if any
1249 Constructs a new PDRadioButton instance. @param acroForm the AcroForm containing the button @param field the COSDictionary representing button attributes @param parent the parent PDNonTerminalField if any
1250 Initializes a tensor patch with given control points and corner colors. @param tcp array of 16 control points defining the patch shape @param color 2D array representing corner colors for shading
1251 Constructs a new choice field in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any
1252 Constructs a new text field in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any
1253 Merges a diacritic with the current text position. @param diacritic TextPosition object representing the diacritic to be merged
1254 Determines if a paragraph separation occurs based on text positions. @param position current PositionWrapper containing text information @param lastPosition previous PositionWrapper for comparison @param lastLineStartPosition start of the last line position @param maxHeightForLine maximum height for a single line
1255 Checks if the current TextPosition contains another TextPosition. @param tp2 The other TextPosition to check for containment. @return True if tp2 is contained within the current TextPosition, false otherwise.
1256 Checks if the current TextPosition completely contains another. @param tp2 the other TextPosition to check @return true if this TextPosition fully encloses tp2, false otherwise
1257 Writes a paragraph separator by ending and starting a new paragraph. @throws IOException if an I/O error occurs during writing
1258 Normalizes and appends text from a PDF line item to a StringBuilder. @param normalized list to store processed words @param lineBuilder accumulates the current line of text @param wordPositions collects TextPosition objects for the current word @param item the LineItem to process @return updated StringBuilder with appended text or reset if it's a word separator
1259 Returns data to be signed for PDF signing process. @throws IOException if an I/O error occurs
1260 Converts a date string to a Calendar instance. @param text input date string to convert @return Calendar object or null if conversion fails
1261 Constructs a PDCheckBox instance. @param acroForm the form containing the checkbox @param field the COSDictionary representing the checkbox @param parent the parent field in the hierarchy
1262 Constructs a PDPushButton instance. @param acroForm the form containing the button @param field the COSDictionary representing the button @param parent the parent field in the hierarchy
1263 Writes a COSName to the PDF output stream followed by a space. @param output OutputStream to write to @param cosName COSName object to write @throws IOException if writing fails
1264 Constructs a PDRadioButton instance. @param acroForm the form containing the radio button @param field the COSDictionary representing the radio button @param parent the parent field in the hierarchy
1265 Writes a PDF operand using the provided COSName. @param name the COSName to write as an operand @throws IOException if writing fails
1266 Constructs a PDChoice instance. @param acroForm the form containing the choice field @param field the COSDictionary representing the choice field @param parent the parent field in the hierarchy
1267 Writes a byte array to an OutputStream as either ASCII or hexadecimal. @param bytes the byte array to write @param forceHex if true, forces writing in hexadecimal format @param output the OutputStream to write to @throws IOException if writing fails
1268 Constructs a PDTextField instance. @param acroForm the form containing the text field @param field the COSDictionary representing the text field @param parent the parent field in the hierarchy
1269 Saves the current graphics state by cloning and pushing it onto the stack.
1270 Merges a diacritic with the current text position. @param diacritic TextPosition object representing the diacritic
1271 Saves the current graphics stack and resets it with a cloned state. @return the original graphics stack before reset
1272 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs while writing to the stream
1273 Moves the text cursor to a new position with an offset. @param tx horizontal offset @param ty vertical offset @throws IOException if I/O error occurs or not in text mode
1274 Determines if the current text position marks a paragraph separation. @param position current text position wrapper @param lastPosition previous text position wrapper @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a line
1275 Determines if the current TextPosition contains another. @param tp2 Another TextPosition to check for containment @return True if this TextPosition overlaps with tp2 by at least 15% in X-axis, otherwise false
1276 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1277 Checks if the current TextPosition completely contains another. @param tp2 the other TextPosition to check @return true if this TextPosition fully encompasses tp2, false otherwise
1278 Sets the stroking color using CMYK values. @param c cyan component (0-1) @param m magenta component (0-1) @param y yellow component (0-1) @param k black component (0-1) @throws IOException if an I/O error occurs
1279 Writes a paragraph separator by ending and starting a new paragraph. @throws IOException if an I/O error occurs during writing
1280 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if I/O error occurs during writing
1281 Normalizes and adds words to the line builder. @param normalized list of processed WordWithTextPositions objects @param lineBuilder accumulator for current line text @param wordPositions positions of characters in the current word @param item current LineItem being processed @return updated StringBuilder with appended text if not a separator
1282 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1283 Converts a date string to a Calendar instance. @param text input date string to convert @return Calendar object or null if conversion fails
1284 Sets the non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1285 Sets the non-stroking color to grayscale. @param g the grayscale value (must be between 0 and 1) @throws IOException if an I/O error occurs during writing
1286 Writes a COSName to the output stream with a trailing space. @param output the OutputStream to write to @param cosName the COSName object to serialize @throws IOException if an I/O error occurs
1287 Writes a COSName operand to the PDF stream. @param name the COSName to write @throws IOException if an I/O error occurs
1288 Adds a rectangle to the PDF content stream. @param x lower-left corner x-coordinate @param y lower-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
1289 Writes a byte array as a PDF string. @param bytes the array of bytes to write @param forceHex flag to force hexadecimal encoding @param output the OutputStream to write to @throws IOException if an I/O error occurs
1290 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if writing fails or not in text mode
1291 Saves the current graphics state by pushing a clone onto the stack.
1292 Saves the current graphics stack by cloning the top state and resetting the stack. @return The original graphics stack before saving
1293 Draws a cubic Bezier curve with replicated initial point. @param x2 second control point's x-coordinate @param y2 second control point's y-coordinate @param x3 end point's x-coordinate @param y3 end point's y-coordinate @throws IOException if I/O error occurs during operation
1294 Sets the text leading in the PDF document. @param leading the distance between lines of text @throws IOException if an I/O error occurs
1295 Moves the text cursor to a new position. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
1296 Draws a cubic Bézier curve with replicated final point. @param x1 control point 1 x-coordinate @param y1 control point 1 y-coordinate @param x3 end point x-coordinate @param y3 end point y-coordinate @throws IOException if writing fails or in text mode
1297 Moves the graphics cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs
1298 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1299 Draws a line to the specified coordinates. @param x target x-coordinate @param y target y-coordinate @throws IOException if an I/O error occurs
1300 Sets the line width for drawing operations. @param lineWidth the desired line width @throws IOException if writing fails
1301 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
1302 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if writing fails
1303 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
1304 Sets the line miter limit for PDF content. @param miterLimit the new miter limit value @throws IOException if an I/O error occurs during writing
1305 Sets the non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs
1306 Writes an affine transformation matrix to the output stream. @param transform the AffineTransform object to write @throws IOException if an I/O error occurs
1307 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs during writing
1308 Sets the non-stroking color using CMYK values. @param c cyan component (0 to 1) @param m magenta component (0 to 1) @param y yellow component (0 to 1) @param k black component (0 to 1) @throws IOException if an I/O error occurs
1309 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if writing fails
1310 Sets the non-stroking color for gray. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
1311 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1312 Sets the text rise for subsequent text. @param rise the amount to raise or lower text @throws IOException if an I/O error occurs
1313 Adds a rectangle to the content stream. @param x x-coordinate of the lower-left corner @param y y-coordinate of the lower-left corner @param width width of the rectangle @param height height of the rectangle @throws IOException if an I/O error occurs or if called within a text block
1314 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
1315 Draws a cubic Bézier curve with the second control point replicated. @param x2, y2 coordinates of the first control point @param x3, y3 coordinates of the end point and second control point @throws IOException if an I/O error occurs or text mode is active
1316 Draws a cubic Bezier curve with replicated final point. @param x1 control point X coordinate @param y1 control point Y coordinate @param x3 end point X coordinate (also used as second control point) @param y3 end point Y coordinate @throws IOException if an I/O error occurs or called within a text block
1317 Moves the current point to specified coordinates. @param x the X coordinate of the new position @param y the Y coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
1318 Draws a line to the specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs
1319 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
1320 Initializes the PDFGraphicsStreamEngine with a page and registers operators for handling graphics. @param page PDPage to render graphics on
1321 Default constructor initializes PDFMarkedContentExtractor with no encoding. Registers default operators for handling marked content sequences and drawing objects.
1322 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
1323 Constructs a PDFTextStripperByArea instance. Disables text separation by beads.
1324 Sets the miter limit for line joins. @param miterLimit the miter limit value (must be > 0) @throws IOException if an I/O error occurs
1325 Writes an affine transformation matrix to the output stream. @param transform the AffineTransform object to write @throws IOException if an I/O error occurs
1326 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
1327 Parses a COS hexadecimal string from the source. @return COSString object representing the parsed bytes @throws IOException if parsing fails or reaches end of stream
1328 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs
1329 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1330 Sets file filters for the PDF stream. @param filters list of filter names to be applied
1331 Sets the text rise in the PDF content stream. @param rise the amount to adjust the text position vertically @throws IOException if an I/O error occurs
1332 Constructs a default PDRectangle at origin with zero dimensions.
1333 Constructs a PDRectangle with specified dimensions at origin. @param width rectangle width @param height rectangle height
1334 Applies padding to a rectangle. @param box original PDRectangle @param padding amount of padding to add @return new PDRectangle with applied padding
1335 Initializes a new PDFXRefStream with a COSDocument. @param cosDocument the document to manage cross-reference streams for
1336 Creates a new PDObjectStream for the given PDF document. @param document PDDocument to which the stream belongs @return PDObjectStream object initialized with a new COSStream
1337 Initializes a new PDStream with the given PDDocument. @param document the PDDocument to create a COSStream from
1338 Initializes a new PDStream with a given document. @param document The COSDocument to associate with this stream
1339 Initializes a PDStream with data from an InputStream. @param doc PDDocument containing the PDF content @param input InputStream providing the data to be stored in the stream @param filters COSBase representing filters for data processing @throws IOException if I/O error occurs during stream creation or data transfer
1340 Initializes a PDFGraphicsStreamEngine for a given page. @param page PDPage to render graphics on
1341 Creates a COSStream from input data. @param document PDDocument to associate with the stream @param rawInput InputStream containing the raw data @return COSStream representing the PDF content @throws IOException if an I/O error occurs
1342 Initializes the PDFMarkedContentExtractor with default settings. Uses null encoding and sets up default operators for handling marked content.
1343 Encodes input stream to output stream. @param input source data stream @param encoded destination data stream @param parameters encoding parameters @param index data stream index
1344 Initializes PDFTextStripperByArea with bead separation disabled. @throws IOException if an I/O error occurs during initialization
1345 Constructs a new PDDefaultAttributeObject.
1346 Constructs a new PDUserAttributeObject with user properties owner.
1347 Default constructor initializes a PDAttributeObject.
1348 Constructs a new PDF variable text field. @param acroForm the AcroForm containing the field
1349 Parses a hexadecimal string from the PDF source. @return COSString object representing the parsed bytes @throws IOException if parsing fails or input is invalid
1350 Initializes a COSParser with a PDF source and security settings. @param source PDF file to be parsed @param password decryption password for the PDF @param keyStore input stream for the keystore (if encrypted) @param keyAlias alias for the key in the keystore @throws IOException if an I/O error occurs during initialization
1351 Sets file filters for the PDF stream. @param filters list of filter names to apply
1352 Constructs a default PDRectangle with zero dimensions.
1353 Initializes a PDFParser with specified PDF source and security settings. @param source PDF file to be parsed @param decryptionPassword password for decrypting the PDF @param keyStore input stream for the keystore (if encrypted) @param alias alias for the key in the keystore @param streamCacheCreateFunction factory for creating stream caches @throws IOException if an I/O error occurs during initialization
1354 Constructs a PDRectangle with specified dimensions at origin. @param width rectangle width @param height rectangle height
1355 Parses a COS dictionary value from the PDF source. @return COSBase object or null if invalid @throws IOException if an I/O error occurs
1356 Applies padding to a rectangle. @param box original PDRectangle @param padding amount of padding to add @return new PDRectangle with applied padding
1357 Retrieves COS object offsets using brute force search. @return Map of COSObjectKey to their offsets @throws IOException if an I/O error occurs during parsing
1358 Initializes a new PDFXRefStream with a COSDocument. @param cosDocument document containing cross-reference information
1359 Creates a new PDObjectStream within the given document. @param document PDDocument where the stream will be created @return PDObjectStream object initialized with a new COSStream
1360 Initializes a PDStream with a new COSStream. @param document PDDocument to associate the stream with
1361 Creates an output stream for writing data to the PDF stream. @return OutputStream for writing data @throws IOException if I/O error occurs or multiple writers are opened
1362 Initializes a new PDStream with a COSStream from the given document. @param document the PDF document to associate the stream with
1363 Initializes a PDStream from an InputStream. @param doc PDDocument containing the PDF content @param input InputStream of data to be written to the stream @param filters COSBase object specifying filters for encoding @throws IOException if I/O error occurs during stream creation or transfer
1364 Writes binary data to an appearance stream's COS object. @param data byte array containing the data to write @param appearanceStream PDAppearanceStream where data is written @throws IOException if I/O error occurs during writing
1365 Creates a COSStream from an InputStream. @param document PDDocument to which the stream belongs @param rawInput source input stream containing data @return COSStream object created from the input stream @throws IOException if I/O operations fail
1366 Initializes a new content stream for the given PDF appearance. @param appearance The appearance stream to write to @param compress Whether to compress the output stream @throws IOException if I/O error occurs or multiple writers are opened
1367 Encodes an input stream using specified parameters. @param input the data to be encoded @param encoded the output stream for encoded data @param parameters dictionary containing encoding settings @param index unused parameter
1368 Creates a new PDDefaultAttributeObject with default settings.
1369 Clears all COSBase objects from the array. Marks the document as updated after clearing.
1370 Initializes a user attribute object. Sets the owner to OWNER_USER_PROPERTIES by default.
1371 Removes all specified COSBase objects from the array. @param objectsList collection of COSBase objects to remove
1372 Protected constructor for PDStandardAttributeObject. Initializes a new instance with default settings.
1373 Retains only the elements in this COSArray that are contained in the specified collection. @param objectsList collection of COSBase objects to retain
1374 Constructs a PDVariableText with an AcroForm. Initializes the variable text field within the given form. @param acroForm the form containing the variable text field
1375 Sets an integer value at a specified index. @param index position in the array @param intVal integer value to set
1376 Removes and returns the element at the specified index. @param i index of the element to remove @return removed COSBase object or null if index is out of bounds
1377 Initializes a PDF parser with specified security settings. @param source RandomAccessRead object representing the PDF file @param password decryption password for protected documents @param keyStore InputStream containing keystore data @param keyAlias alias for the key in the keystore @throws IOException if an I/O error occurs during initialization
1378 Removes a COSBase object from the array. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
1379 Clears all key-value pairs from the dictionary and marks it as updated.
1380 Initializes a PDF parser with specified security settings and stream cache. @param source RandomAccessRead object representing the PDF file @param decryptionPassword password for decrypting protected documents @param keyStore InputStream containing keystore data @param alias alias for the key in the keystore @param streamCacheCreateFunction factory function for creating stream cache @throws IOException if an I/O error occurs during initialization
1381 Removes an item from the dictionary by key. @param key the COSName key of the item to remove
1382 Updates document state if origins differ. @param updateState current update state to check and update
1383 Parses a COS dictionary value from the PDF source. Handles object numbers and generations, returning the referenced COSBase object. @return parsed COSBase object or null if invalid @throws IOException if an I/O error occurs during parsing
1384 Sets the base object to null and updates document state.
1385 Sets the origin document state. @param originDocumentState new document state to set @param dereferencing flag indicating if dereferencing is needed
1386 Retrieves COS object offsets using brute force search. @return Map of COSObjectKey to their byte offsets in the PDF @throws IOException if an I/O error occurs during parsing
1387 Creates an OutputStream for writing data to the PDF stream without filters. @return OutputStream for writing data @throws IOException if an I/O error occurs or stream is already open
1388 Reads and validates the generation number from a PDF source. @return parsed generation number @throws IOException if the number exceeds 5 digits or is negative
1389 Reads and validates an object number from the PDF source. @return The parsed object number @throws IOException if the object number exceeds 10 digits or is negative
1390 Saves the FDF document to a specified file. @param fileName File where the FDF data will be written @throws IOException if an I/O error occurs during writing
1391 Writes byte data to an appearance stream. @param data byte array containing the data to write @param appearanceStream PDAppearanceStream object to write to @throws IOException if writing fails or I/O error occurs
1392 Begins a text block for content stream operations. Throws IllegalStateException if already in text mode.
1393 Begins a text block for content stream operations. Throws IllegalStateException if already in text mode.
1394 Initializes content stream for PDF appearance with optional compression. @param appearance the PDAppearanceStream to associate with @param compress whether to enable compression @throws IOException if I/O error occurs during initialization
1395 Begins a text block for content stream operations. Throws IllegalStateException if already in text mode.
1396 Begins a text block for content stream operations. Throws IllegalStateException if already in text mode.
1397 Clears all COSBase objects and marks the document as updated.
1398 Ends text mode in the PDF content stream. Must be called after beginText(). @throws IOException if writing fails
1399 Removes all specified COSBase objects from the array. @param objectsList collection of COSBase objects to remove
1400 Ends text mode and writes the END_TEXT operator. Must be called after beginText(). @throws IOException if writing fails or not in text mode
1401 Retains only the elements in this array that are contained in the specified collection. @param objectsList collection of COSBase objects to retain
1402 Ends text mode in the PDF content stream. Must be called after beginText(). @throws IOException if writing fails
1403 Sets an integer value at a specified index. @param index position in the array @param intVal integer value to set
1404 Ends text mode in the PDF content stream. Must be called after beginText(). @throws IOException if writing fails
1405 Removes and returns the element at the specified index. @param i index of the element to remove @return removed COSBase object or null if index is out of bounds
1406 Moves to the next line in text mode. @throws IOException if writing fails @throws IllegalStateException if not in text mode
1407 Removes a COSBase object from the array. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
1408 Moves to the next line in text mode. @throws IOException if writing fails @throws IllegalStateException if not in text mode
1409 Clears all key-value pairs from the dictionary. Marks the document as updated after clearing.
1410 Moves to the next line in text mode. @throws IOException if writing fails @throws IllegalStateException if not in text mode
1411 Removes an item by key from the dictionary. @param key COSName representing the key to remove
1412 Moves to the next line in text mode. @throws IOException if writing fails @throws IllegalStateException if not in text mode
1413 Updates the document state if origins differ. @param updateState current update state to be checked and updated
1414 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto their respective stacks. Writes 'q' operator to PDF stream.
1415 Sets the base object to null and marks the document as updated. If the base object is not null, it updates its state before setting it to null.
1416 Sets the origin document state for updates. @param originDocumentState the new document state to set @param dereferencing flag indicating if dereferencing should occur
1417 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto their respective stacks. Writes 'q' operator to PDF stream.
1418 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto their respective stacks. Writes 'q' operator to PDF stream.
1419 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto their respective stacks. Writes 'q' operator to PDF stream.
1420 Restores the previous graphics state. Throws IllegalStateException if called within a text object. Pops font and color space stacks. Writes the restore operator to the stream.
1421 Reads and validates a PDF generation number. @return parsed generation number @throws IOException if number is invalid or I/O error occurs
1422 Restores the previous graphics state. Throws an exception if called within a text object. Pops font and color space stacks. Writes the restore operator to the stream.
1423 Reads and validates an object number from the PDF source. @return parsed object number @throws IOException if parsing fails, value is out of range, or I/O error occurs
1424 Restores the previous graphics state. Throws an exception if called within a text object. Pops font and color space stacks. Writes the restore operator to the stream.
1425 Saves FDF document to specified file. @param fileName File object representing the output location @throws IOException if I/O error occurs during writing
1426 Restores the previous graphics state. Throws an exception if called within a text object. Pops font and color space stacks. Writes the restore operator to the stream.
1427 Begins text mode for writing text content. Throws exception if already in text mode.
1428 Begins text mode for writing text content. Throws exception if already in text mode.
1429 Applies the current stroke settings to draw the path. Throws an exception if called within a text block. @throws IOException if writing fails
1430 Begins text mode for writing text content. Throws exception if already in text mode.
1431 Applies the current stroke settings to draw the path. Throws an exception if called within a text block. @throws IOException if writing fails
1432 Begins text mode for writing text content. Throws exception if already in text mode.
1433 Applies the current stroke settings to draw the path. Throws an exception if called within a text block. @throws IOException if writing fails
1434 Ends text mode and writes the end text operator. Must be called after beginText(). @throws IOException if an I/O error occurs
1435 Applies the current stroke settings to draw the path. Throws an exception if called within a text block. @throws IOException if writing fails
1436 Ends text mode and writes the end text operator. Must be called after beginText(). @throws IOException if an I/O error occurs
1437 Closes the current path and strokes it. Throws exception if called in text mode. @throws IOException if writing fails
1438 Ends text mode and writes the end text operator. @throws IOException if an I/O error occurs or text mode is not started
1439 Closes the current path and strokes it. Throws exception if called in text mode. @throws IOException if writing fails
1440 Ends text mode and writes the end text operator. @throws IOException if an I/O error occurs or text mode was not started
1441 Closes the current path and strokes it. Throws exception if called in text mode. @throws IOException if writing fails
1442 Inserts a newline in the text content. Must be called after beginText(). @throws IOException if an I/O error occurs
1443 Closes the current path and strokes it. Throws exception if called in text mode. @throws IOException if writing fails
1444 Inserts a newline in the text content. Must be called after beginText(). @throws IOException if an I/O error occurs or not in text mode
1445 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if writing fails
1446 Inserts a newline in the text content. Must be called after beginText(). @throws IOException if an I/O error occurs or not in text mode
1447 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if writing fails
1448 Inserts a newline in the text content. Must be called after beginText(). @throws IOException if an I/O error occurs
1449 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if writing fails
1450 Saves the current graphics state. Throws exception if in text mode. @throws IOException if an I/O error occurs
1451 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if writing fails
1452 Saves the current graphics state. Throws exception if in text mode. @throws IOException if an I/O error occurs
1453 Applies even-odd rule to fill the current path. Throws exception if called within a text block. @throws IOException if writing fails or in text mode
1454 Saves the current graphics state. Throws exception if in text mode. @throws IOException if an I/O error occurs
1455 Saves the current graphics state. Throws exception if in text mode. @throws IOException if an I/O error occurs
1456 Applies even-odd rule to fill the path. Throws exception if called in text mode. @throws IOException if writing fails or in text mode
1457 Applies even-odd rule to fill the path. Throws exception if called in text mode. @throws IOException if writing fails or in text mode
1458 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
1459 Applies even-odd rule to fill the path. Throws exception if called in text mode. @throws IOException if writing fails or in text mode
1460 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
1461 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1462 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
1463 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1464 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
1465 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1466 Strokes the current path in the PDF. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1467 Fills and strokes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if writing fails
1468 Strokes the current path in the PDF. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1469 Fills and strokes the current path using even-odd rule. Throws exception if called within a text block. @throws IOException if writing fails
1470 Strokes the current path on a PDF page. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1471 Fills and strokes the current path using even-odd rule. Throws exception if called within a text block. @throws IOException if writing fails
1472 Strokes the current path in the PDF. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1473 Fills and strokes the current path using even-odd rule. Throws exception if called within a text block. @throws IOException if writing fails
1474 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1475 Fills and strokes the current path using even-odd rule. Throws exception if called within a text block. @throws IOException if writing fails
1476 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1477 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1478 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1479 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1480 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1481 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1482 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
1483 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if writing fails
1484 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
1485 Closes the current path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if writing fails
1486 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
1487 Closes the current path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if writing fails
1488 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
1489 Closes the current path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if writing fails
1490 Fills the current path using the even-odd rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1491 Closes the current path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if writing fails
1492 Fills the current path using the even-odd rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1493 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if writing fails
1494 Fills the current path using the even-odd rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1495 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if writing fails
1496 Fills the current path using the even-odd rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1497 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if writing fails
1498 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1499 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if writing fails
1500 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1501 Clips the current path to the clipping area. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
1502 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1503 Clips the current path to the clipping area. @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs during writing
1504 Fills and strokes the current path in pattern content stream. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
1505 Clips the current path to the clipping area. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
1506 Fills and strokes even-odd shaped paths. Throws exception if called in text mode.
1507 Fills and strokes even-odd shaped paths. Throws exception if called in text mode.
1508 Clips the current path to the clipping area. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
1509 Fills and strokes even-odd shaped paths. Throws exception if called in text mode.
1510 Applies even-odd clipping to the current path. Throws IllegalStateException if called within a text block. @throws IOException if writing fails
1511 Fills and strokes even-odd shaped paths. Throws exception if called in text mode.
1512 Applies even-odd clipping to the current path. Throws IllegalStateException if called within a text block. @throws IOException if writing fails
1513 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1514 Applies even-odd clipping to the current path. Throws IllegalStateException if called within a text block. @throws IOException if writing fails
1515 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1516 Applies even-odd clipping to the current path. Throws IllegalStateException if called within a text block. @throws IOException if writing fails
1517 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1518 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if the line join style is invalid
1519 Closes, fills, and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1520 Closes path, fills and strokes it using even-odd rule. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1521 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if the line join style is invalid
1522 Closes path, fills and strokes it using even-odd rule. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1523 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if the line join style is invalid
1524 Closes path, fills and strokes it using even-odd rule. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1525 Closes path, fills and strokes it using even-odd rule. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1526 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if the line join style is invalid
1527 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1528 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is not a valid value
1529 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1530 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1531 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is not a valid value
1532 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1533 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is not a valid value
1534 Clips the current path using the non-zero winding rule. @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs
1535 Clips the current path using non-zero winding rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
1536 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is not a valid value
1537 Clips the current path using non-zero winding rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
1538 Ends marked content in PDF. @throws IOException if writing fails
1539 Ends marked content in PDF. @throws IOException if writing fails
1540 Clips the current path using the non-zero winding rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
1541 Ends marked content in PDF. @throws IOException if writing fails
1542 Clips the current path using the even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during operation
1543 Ends marked content in PDF. @throws IOException if writing fails
1544 Sets the text rendering mode. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs during setting
1545 Clips the current path using the even-odd rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1546 Sets the text rendering mode. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs during setting
1547 Clips the current path using the even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
1548 Sets the text rendering mode. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs during setting
1549 Clips the current path using the even-odd rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
1550 Sets the text rendering mode. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs during setting
1551 Sets the line join style in a PDF content stream. @param lineJoinStyle the join style to be set (0, 1, or 2) @throws IOException if an I/O error occurs during writing
1552 Retrieves the appearance stream for this entry. @return PDAppearanceStream object representing the appearance stream @throws IllegalStateException if the entry is not an appearance stream
1553 Constructs a new PDExportFormatAttributeObject. @param dictionary COSDictionary containing layout attributes
1554 Sets the line join style in a PDF form content stream. @param lineJoinStyle the join style to be set (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if lineJoinStyle is outside valid range
1555 Encrypts data using RC4 algorithm. @param finalKey encryption key for RC4 cipher @param input stream containing data to encrypt @param output stream to write encrypted data @throws IOException if I/O error occurs during processing
1556 Sets the line join style in a PDF content stream. @param lineJoinStyle the join style to be set (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if lineJoinStyle is invalid
1557 Sets the line join style in a PDF content stream. @param lineJoinStyle the join style to be set (0, 1, or 2) @throws IOException if an I/O error occurs during writing
1558 Computes encrypted key for PDF document based on encryption revision. @param password user or owner password bytes @param o encryption parameters array (owner) @param u encryption parameters array (user) @param oe encrypted owner key @param ue encrypted user key @param permissions document access permissions @param id document ID @param encRevision PDF encryption revision @param keyLengthInBytes desired output key length in bytes @param encryptMetadata flag to encrypt metadata @param isOwnerPassword true if computing owner password key @return encrypted key as byte array @throws IOException if cryptographic operations fail
1559 Sets the line cap style for drawing lines. @param lineCapStyle integer representing the cap style (0, 1, or 2) @throws IOException if an I/O error occurs @throws IllegalArgumentException if lineCapStyle is not within valid range
1560 Sets the line cap style for drawing lines. @param lineCapStyle integer representing the cap style (0, 1, or 2) @throws IOException if an I/O error occurs
1561 Sets the line cap style for drawing lines. @param lineCapStyle integer representing the cap style (0, 1, or 2) @throws IOException if an I/O error occurs
1562 Sets the line cap style for drawing lines. @param lineCapStyle integer representing the cap style (0, 1, or 2) @throws IOException if an I/O error occurs
1563 Ends a marked content sequence in the PDF. @throws IOException if an I/O error occurs
1564 Ends a marked content sequence in the PDF. @throws IOException if an I/O error occurs while writing to the stream
1565 Validates user password for PDF encryption. @param password user-provided password bytes @param user combined user and validation salt bytes @param owner owner entry bytes (not used in REVISION_5/6) @param permissions document access permissions @param id document ID (not used in REVISION_5/6) @param encRevision PDF encryption revision @param keyLengthInBytes desired output key length for revisions 2-4 @param encryptMetadata flag to encrypt metadata @return true if password matches, false otherwise @throws IOException if an I/O error occurs or unknown encryption revision is used
1566 Ends a marked content sequence in the PDF. @throws IOException if an I/O error occurs
1567 Ends a marked content sequence in the PDF. @throws IOException if an I/O error occurs
1568 Adds a TrueType or OpenType font to the font info list. @param ttfFile font file to be added
1569 Sets the rendering mode for text. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs
1570 Finds a font by format and PostScript name, with fallbacks. @param format the font format (e.g., TTF, OTF) @param postScriptName the PostScript name of the font @return FontBoxFont instance or null if not found
1571 Sets the rendering mode for text. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs
1572 Sets the rendering mode for text. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs
1573 Constructs a new PDShadingType6 instance from a COSDictionary. @param shadingDictionary dictionary containing Type 6 shading properties
1574 Sets the rendering mode for text in pattern content streams. @param rm the new RenderingMode to apply @throws IOException if an I/O error occurs while writing to the stream
1575 Constructs a new PDShadingType7 instance. @param shadingDictionary COSDictionary containing Type 7 shading properties
1576 Retrieves the appearance stream for this entry. @return PDAppearanceStream object if the entry is a stream @throws IllegalStateException if the entry is not an appearance stream
1577 Constructs a new PDExportFormatAttributeObject with the specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
1578 Encrypts data using RC4 algorithm. @param finalKey byte array representing the encryption key (1-32 bytes) @param input InputStream containing plaintext data @param output OutputStream for encrypted data @throws IOException if an I/O error occurs during processing
1579 Constructs a new combo box in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any
1580 Constructs a new list box field in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any
1581 Processes a TextPosition, handling duplicates and diacritics. @param text TextPosition object to process
1582 Computes encrypted key for PDF encryption based on revision. @param password user or owner password @param o owner entry bytes @param u user entry bytes @param oe owner encryption key bytes @param ue user encryption key bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output length of the key @param encryptMetadata flag to encrypt metadata @param isOwnerPassword true if owner password, false if user password @return byte array of encrypted key @throws IOException if cryptographic operations fail
1583 Processes a given TextPosition object by extracting and formatting its Unicode content. This method is part of the PDFTextStripper class, responsible for managing the extraction of text from PDF documents. The primary responsibilities of this method include: 1. Handling the suppression of duplicate characters based on the 'suppressDuplicateOverlappingText' setting. 2. Determining the appropriate article division index for the character based on its position relative to bead rectangles. 3. Combining diacritics with their associated characters if they are consecutive in the text stream. The method first checks if the character should be displayed based on the suppression settings and the presence of overlapping characters. It then determines which article division the character belongs to, either by finding a matching bead rectangle or using fallback indices. If diacritic handling is enabled and applicable, it merges diacritics with their associated characters before adding them to the text list. @param text The TextPosition object representing a single character extracted from a PDF document.
1584 Removes spaces contained within other text positions. @param textList list of TextPosition objects to process
1585 Validates user password for PDF encryption based on revision. @param password user-provided password bytes @param user encrypted user key and validation salt bytes @param owner encrypted owner key bytes (not used in REVISION_5,6) @param permissions document access permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired output length for encryption key @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if an I/O error occurs or unknown revision
1586 Adds a TrueType or OpenType font to the system. @param ttfFile the font file to add
1587 Handles line separation and paragraph start detection. @param current current PositionWrapper containing text information @param lastPosition previous PositionWrapper for comparison @param lastLineStartPosition start of the last line position @param maxHeightForLine maximum height for a single line @return updated PositionWrapper representing the last line start position @throws IOException if an I/O error occurs during writing
1588 Finds a font based on format and PostScript name. Handles null names, initializes provider, checks substitutes, and adjusts names for matches. @param format the font format to match @param postScriptName the PostScript name of the font @return FontBoxFont object if found; otherwise, null
1589 Normalizes and processes a list of LineItems into words with text positions. @param line List of LineItem objects to process @return List of WordWithTextPositions containing normalized words and their TextPosition data
1590 Converts a COSString to a Calendar instance. @param text input COSString containing date information @return Calendar object or null if conversion fails
1591 Constructs a PDShadingType6 instance from a COSDictionary. @param shadingDictionary the COSDictionary representing Type 6 shading properties
1592 Begins marked content in PDF. @param tag COSName representing the content tag @throws IOException if writing fails
1593 Constructs a PDShadingType7 from a COSDictionary. @param shadingDictionary the COSDictionary representing the Type 7 shading properties
1594 Begins a marked content sequence in the PDF. @param tag COSName representing the content category @param mcid unique marker identifier, must be non-negative @throws IOException if writing fails
1595 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if writing fails
1596 Writes a COSString to an OutputStream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if writing fails
1597 Writes a byte array to an OutputStream as ASCII. @param bytes the byte array to write @param output the OutputStream to write to @throws IOException if writing fails
1598 Constructs a PDComboBox instance. @param acroForm the form containing the combo box field @param field the COSDictionary representing the combo box field @param parent the parent field in the hierarchy
1599 Constructs a PDListBox instance. @param acroForm the form containing the list box @param field the COSDictionary representing the list box @param parent the parent field in the hierarchy
1600 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs while writing to the stream
1601 Processes a text position, handling duplicates and diacritics. @param text TextPosition object to process
1602 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs while writing to the stream
1603 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs while writing to the stream
1604 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs while writing to the stream
1605 Moves the text cursor to a new position with an offset. @param tx horizontal offset @param ty vertical offset @throws IOException if I/O error occurs or not in text mode
1606 Moves the text cursor to a new position with an offset. @param tx horizontal offset @param ty vertical offset @throws IOException if I/O error occurs or not in text mode
1607 Moves the text cursor to a new position with an offset. @param tx horizontal offset @param ty vertical offset @throws IOException if I/O error occurs or not in text mode
1608 Processes a TextPosition object extracted from a PDF document. This method is responsible for handling the extraction and formatting of text, including managing diacritics, suppressing duplicate characters, and determining which article division (bead) the text belongs to. @param text The TextPosition object to be processed.
1609 Moves the text cursor to a new position with an offset. @param tx horizontal offset @param ty vertical offset @throws IOException if I/O error occurs or not in text mode
1610 Removes spaces contained within other text positions. @param textList list of TextPosition objects to process
1611 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if parameters are outside 0..1 range @throws IOException if an I/O error occurs
1612 Handles line separation and paragraph start checks. @param current current text position wrapper @param lastPosition previous text position wrapper @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a line @return updated last line start position @throws IOException if an I/O error occurs during writing
1613 Normalizes and processes a line of text into words. @param line list of LineItem objects representing the line @return List of WordWithTextPositions containing normalized words and positions
1614 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1615 Converts a COSString date to a Calendar instance. @param text input COSString containing the date @return Calendar object or null if conversion fails
1616 Begins a marked content section in the PDF stream. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
1617 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1618 Begins a marked content sequence in the PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content @throws IOException if an I/O error occurs
1619 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1620 Sets a marked content point in the PDF stream. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs
1621 Writes a COSString to an OutputStream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
1622 Sets the stroking color using CMYK values. @param c cyan component (0-1) @param m magenta component (0-1) @param y yellow component (0-1) @param k black component (0-1) @throws IOException if an I/O error occurs
1623 Writes a byte array as a PDF string to an OutputStream. @param bytes the array of bytes to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
1624 Sets the stroking color using CMYK values. @param c cyan component (0-1) @param m magenta component (0-1) @param y yellow component (0-1) @param k black component (0-1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if an I/O error occurs
1625 Sets the text leading in the PDF document. @param leading the distance between lines of text @throws IOException if an I/O error occurs
1626 Sets the stroking color using CMYK values. @param c cyan component (0-1) @param m magenta component (0-1) @param y yellow component (0-1) @param k black component (0-1) @throws IOException if an I/O error occurs
1627 Sets the text leading in the PDF document. @param leading the distance between lines of text @throws IOException if an I/O error occurs
1628 Sets the text leading in the PDF document. @param leading the distance between lines of text @throws IOException if an I/O error occurs
1629 Sets the stroking color using CMYK values. @param c cyan component (0-1) @param m magenta component (0-1) @param y yellow component (0-1) @param k black component (0-1) @throws IOException if an I/O error occurs
1630 Sets the text leading in the PDF document. @param leading the distance between lines of text @throws IOException if an I/O error occurs
1631 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if I/O error occurs during writing
1632 Moves the text cursor to a new position. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
1633 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if I/O error occurs during writing
1634 Moves text cursor to a new position. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
1635 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if I/O error occurs during writing
1636 Moves the text cursor to a new position. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
1637 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if I/O error occurs during writing
1638 Moves the text cursor to a new position within a pattern. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
1639 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1640 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1641 Sets the non-stroking color for PDF graphics using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs while writing to the content stream
1642 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range [0, 1] @throws IOException if an I/O error occurs
1643 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range [0, 1] @throws IOException if an I/O error occurs
1644 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range 0..1 @throws IOException if an I/O error occurs
1645 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range 0..1 @throws IOException if an I/O error occurs
1646 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs Validates input and writes color operands followed by the RGB operator.
1647 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1648 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range 0..1 @throws IOException if an I/O error occurs
1649 Sets the non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1650 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
1651 Sets the non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs
1652 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range 0..1 @throws IOException if an I/O error occurs
1653 Sets the non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1654 Sets the non-stroking color to grayscale. @param g the grayscale value (must be between 0 and 1) @throws IllegalArgumentException if the parameter is outside the valid range @throws IOException if an I/O error occurs during writing
1655 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
1656 Sets the non-stroking color to grayscale. @param g the grayscale value (must be between 0 and 1) @throws IOException if an I/O error occurs during writing
1657 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if parameter is outside 0..1 range @throws IOException if an I/O error occurs
1658 Sets the non-stroking color to grayscale. @param g the grayscale value (must be between 0 and 1) @throws IOException if an I/O error occurs during writing
1659 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs or parameter is out of range
1660 Sets the non-stroking color to grayscale. @param g the grayscale value (must be between 0 and 1) @throws IOException if an I/O error occurs during writing or invalid parameter
1661 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
1662 Adds a rectangle to the PDF content stream. @param x lower-left corner x-coordinate @param y lower-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
1663 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
1664 Adds a rectangle to the PDF content stream. @param x lower-left corner x-coordinate @param y lower-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
1665 Sets the non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs or parameters are invalid
1666 Adds a rectangle to the PDF content stream. @param x lower-left corner x-coordinate @param y lower-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
1667 Sets the non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if parameters are outside 0..1 range @throws IOException if an I/O error occurs
1668 Adds a rectangle to the PDF content stream. @param x lower-left corner x-coordinate @param y lower-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
1669 Sets the non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs or parameters are out of range
1670 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if writing fails or not in text mode
1671 Sets the non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs or parameters are outside 0..1 range
1672 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if writing fails or not in text mode
1673 Sets the non-stroking color using CMYK values. @param c cyan component (0 to 1) @param m magenta component (0 to 1) @param y yellow component (0 to 1) @param k black component (0 to 1) @throws IOException if an I/O error occurs
1674 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if writing fails or not in text mode
1675 Sets the non-stroking color using CMYK values. @param c cyan component (0 to 1) @param m magenta component (0 to 1) @param y yellow component (0 to 1) @param k black component (0 to 1) @throws IOException if an I/O error occurs
1676 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if writing fails or not in text mode
1677 Sets the non-stroking color using CMYK values. @param c cyan component (0 to 1) @param m magenta component (0 to 1) @param y yellow component (0 to 1) @param k black component (0 to 1) @throws IOException if an I/O error occurs
1678 Draws a cubic Bezier curve with replicated initial point. @param x2 second control point's x-coordinate @param y2 second control point's y-coordinate @param x3 end point's x-coordinate @param y3 end point's y-coordinate @throws IOException if I/O error occurs during operation
1679 Sets the non-stroking color using CMYK values. @param c cyan component (0 to 1) @param m magenta component (0 to 1) @param y yellow component (0 to 1) @param k black component (0 to 1) @throws IllegalArgumentException if any parameter is outside the range 0..1 @throws IOException if an I/O error occurs
1680 Draws a cubic Bezier curve with replicated initial point. @param x2 second control point's x-coordinate @param y2 second control point's y-coordinate @param x3 end point's x-coordinate @param y3 end point's y-coordinate @throws IOException if I/O error occurs during operation
1681 Sets the non-stroking color for gray. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
1682 Draws a cubic Bezier curve with replicated initial point. @param x2 second control point's x-coordinate @param y2 second control point's y-coordinate @param x3 end point's x-coordinate @param y3 end point's y-coordinate @throws IOException if I/O error occurs during operation @throws IllegalStateException if called within a text block
1683 Sets the non-stroking color for gray. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
1684 Sets the non-stroking color for gray. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if an I/O error occurs during writing
1685 Draws a cubic Bezier curve with replicated initial point. @param x2 second control point's x-coordinate @param y2 second control point's y-coordinate @param x3 end point's x-coordinate @param y3 end point's y-coordinate @throws IOException if I/O error occurs during operation @throws IllegalStateException if called within a text block
1686 Sets the non-stroking color for gray. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if an I/O error occurs
1687 Draws a cubic Bézier curve with replicated final point. @param x1 control point 1 x-coordinate @param y1 control point 1 y-coordinate @param x3 end point x-coordinate @param y3 end point y-coordinate @throws IOException if writing fails or in text mode
1688 Adds a rectangle to the content stream. @param x x-coordinate of the lower-left corner @param y y-coordinate of the lower-left corner @param width width of the rectangle @param height height of the rectangle @throws IOException if an I/O error occurs or if called within a text block
1689 Draws a cubic Bézier curve with replicated final point. @param x1 control point 1 x-coordinate @param y1 control point 1 y-coordinate @param x3 end point x-coordinate @throws IOException if writing fails or in text mode
1690 Adds a rectangle to the content stream. @param x x-coordinate of the lower-left corner @param y y-coordinate of the lower-left corner @param width width of the rectangle @param height height of the rectangle @throws IOException if an I/O error occurs or if called within a text block
1691 Draws a cubic Bézier curve with replicated final point. @param x1 control point 1 x-coordinate @param y1 control point 1 y-coordinate @param x3 end point x-coordinate @param y3 end point y-coordinate @throws IOException if writing fails or in text mode
1692 Adds a rectangle to the content stream. @param x x-coordinate of the lower-left corner @param y y-coordinate of the lower-left corner @param width width of the rectangle @param height height of the rectangle @throws IOException if an I/O error occurs or if called within a text block
1693 Draws a cubic Bézier curve with replicated final point. @param x1 control point 1 x-coordinate @param y1 control point 1 y-coordinate @param x3 end point x-coordinate @param y3 end point y-coordinate @throws IOException if writing fails or in text mode
1694 Moves the graphics cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs or if called within a text block
1695 Adds a rectangle to the content stream. @param x x-coordinate of the lower-left corner @param y y-coordinate of the lower-left corner @param width width of the rectangle @param height height of the rectangle @throws IOException if an I/O error occurs or if called within a text block
1696 Moves the graphics cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs or if called within a text block
1697 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs or called within text mode
1698 Moves the graphics cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs or if called within a text block
1699 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs or called within a text block
1700 Moves the graphics cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs or if called within a text block
1701 Draws a line to the specified coordinates. @param x target x-coordinate @param y target y-coordinate @throws IOException if an I/O error occurs or if called within a text block
1702 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs or called within text mode
1703 Draws a line to the specified coordinates. @param x target x-coordinate @param y target y-coordinate @throws IOException if an I/O error occurs or if called within a text block
1704 Draws a cubic Bézier curve in the PDF content stream. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs or if called within a text block
1705 Draws a line to the specified coordinates. @param x target x-coordinate @param y target y-coordinate @throws IOException if an I/O error occurs or method is called within text mode
1706 Draws a line to the specified coordinates. @param x target x-coordinate @param y target y-coordinate @throws IOException if an I/O error occurs or called within a text block
1707 Draws a cubic Bézier curve with the second control point replicated. @param x2, y2 coordinates of the first control point @param x3, y3 coordinates of the end point and second control point @throws IOException if an I/O error occurs or text mode is active
1708 Sets the line width for drawing operations in PDF. @param lineWidth the desired line width @throws IOException if writing fails
1709 Sets the line width for drawing operations. @param lineWidth the desired line width @throws IOException if writing fails
1710 Draws a cubic Bézier curve with the second control point replicated. @param x2, y2 coordinates of the first control point @param x3, y3 coordinates of the end point and second control point @throws IOException if an I/O error occurs or text mode is active
1711 Sets the line width for drawing operations. @param lineWidth the desired line width @throws IOException if writing fails
1712 Draws a cubic Bézier curve with the second control point replicated. @param x2, y2 coordinates of the first control point @param x3, y3 coordinates of the end point and second control point @throws IOException if an I/O error occurs or text mode is active
1713 Sets the line width for drawing operations in the PDF content stream. @param lineWidth the desired line width @throws IOException if writing fails
1714 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if writing fails
1715 Draws a cubic Bézier curve with the second control point replicated. @param x2, y2 coordinates of the first control point @param x3, y3 coordinates of the end point and second control point @throws IOException if an I/O error occurs or text mode is active
1716 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if writing fails
1717 Draws a cubic Bezier curve with replicated final point. @param x1 control point X coordinate @param y1 control point Y coordinate @param x3 end point X coordinate (also used as second control point) @param y3 end point Y coordinate @throws IOException if an I/O error occurs or called within a text block
1718 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if writing fails
1719 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if writing fails
1720 Draws a cubic Bezier curve with replicated final point. @param x1 control point X coordinate @param y1 control point Y coordinate @param x3 end point X coordinate (also used as second control point) @param y3 end point Y coordinate @throws IOException if an I/O error occurs or called within a text block
1721 Sets the line miter limit for PDF content. @param miterLimit the new miter limit value @throws IOException if an I/O error occurs during writing
1722 Draws a cubic Bezier curve with replicated final point. @param x1 control point X coordinate @param y1 control point Y coordinate @param x3 end point X coordinate (also used as second control point) @param y3 end point Y coordinate @throws IOException if an I/O error occurs or called within a text block
1723 Sets the line miter limit for PDF content. @param miterLimit the new miter limit value (must be greater than 0) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if miterLimit is less than or equal to 0
1724 Sets the line miter limit for PDF content. @param miterLimit the new miter limit value (must be > 0) @throws IOException if an I/O error occurs during writing
1725 Draws a cubic Bezier curve with replicated final point. @param x1 control point X coordinate @param y1 control point Y coordinate @param x3 end point X coordinate (also used as second control point) @param y3 end point Y coordinate @throws IOException if an I/O error occurs or called within a text block
1726 Sets the line miter limit for pattern rendering. @param miterLimit the new miter limit value (must be > 0) @throws IOException if an I/O error occurs during writing
1727 Moves the current point to specified coordinates. @param x the X coordinate of the new position @param y the Y coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
1728 Sets the text matrix for rendering text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
1729 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
1730 Moves the current point to specified coordinates. @param x the X coordinate of the new position @param y the Y coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
1731 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs during writing
1732 Moves the current point to specified coordinates. @param x the X coordinate of the new position @param y the Y coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
1733 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs during writing
1734 Moves the current point to specified coordinates. @param x the X coordinate of the new position @param y the Y coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
1735 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs during writing
1736 Draws a line to the specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs or called within text mode
1737 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs during writing
1738 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if writing fails
1739 Draws a line to the specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs or called within a text block
1740 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if writing fails
1741 Draws a line to the specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs or called within text mode
1742 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if writing fails
1743 Draws a line to the specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs or if called within a text block
1744 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if writing fails
1745 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1746 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
1747 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1748 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
1749 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1750 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
1751 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1752 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
1753 Sets the text rise for subsequent text. @param rise amount to raise or lower text @throws IOException if an I/O error occurs
1754 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
1755 Sets the text rise for subsequent text. @param rise the amount to raise or lower text @throws IOException if an I/O error occurs
1756 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
1757 Sets the text rise for subsequent text. @param rise the amount to raise or lower text @throws IOException if an I/O error occurs
1758 Sets the text rise for subsequent text. @param rise the amount to raise or lower text @throws IOException if an I/O error occurs
1759 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
1760 Initializes a PageDrawer with specified parameters. @param parameters configuration for page drawing operations
1761 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
1762 Parses a COS string from the PDF source. @return COSString object representing the parsed string @throws IOException if parsing fails or reaches end of stream
1763 Constructs an immutable rectangle with specified dimensions. @param width rectangle width @param height rectangle height
1764 Sets the line miter limit. @param miterLimit the miter limit value (must be > 0) @throws IllegalArgumentException if miterLimit <= 0 @throws IOException if an I/O error occurs
1765 Initializes a new PDMetadata object for the given PDF document. Sets up the metadata with type "Metadata" and subtype "XML". @param document the PDDocument to associate with this metadata
1766 Sets the miter limit for line joins. @param miterLimit the miter limit value (must be > 0) @throws IOException if an I/O error occurs @throws IllegalArgumentException if miter limit is <= 0
1767 Constructor for PDEmbeddedFile. @param document the PDDocument to associate with this embedded file
1768 Sets the miter limit for line joins. @param miterLimit the miter limit value (must be > 0) @throws IOException if an I/O error occurs or invalid miter limit is provided
1769 Initializes a PDXObject with a PDF document and subtype. @param document the PDDocument to associate with this object @param subtype the COSName representing the subtype of the XObject
1770 Constructs a PDImageXObject with an empty stream from the given PDDocument. @param document containing the image data
1771 Sets the miter limit for line joins. @param miterLimit the miter limit value (must be > 0) @throws IOException if an I/O error occurs or invalid miter limit is set
1772 Sets the text matrix for subsequent text operations. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1773 Initializes a PDStream with data from an InputStream. @param doc PDDocument containing the PDF content @param input InputStream providing the data to be stored in the stream @throws IOException if I/O error occurs during stream creation or data transfer
1774 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
1775 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
1776 Initializes a PDStream with data and a single filter. @param doc PDDocument containing the PDF content @param input InputStream providing the data to be stored in the stream @param filter COSName representing the filter for data processing @throws IOException if I/O error occurs during stream creation or data transfer
1777 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
1778 Initializes a PDStream with data from an InputStream and specified filters. @param doc PDDocument containing the PDF content @param input InputStream providing the data to be stored in the stream @param filters COSArray representing filters for data processing @throws IOException if I/O error occurs during stream creation or data transfer
1779 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
1780 Sets character spacing in the PDF content stream. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
1781 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs
1782 Creates a PDImageXObject from an encoded image stream. @param document PDF document to associate with the image @param encodedStream input stream containing the encoded image data @param cosFilter filter applied to the image stream @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @throws IOException if an I/O error occurs
1783 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs
1784 Initializes a PDLayoutAttributeObject with owner set to OWNER_LAYOUT.
1785 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs
1786 Initializes a new list attribute object with OWNER_LIST as the owner.
1787 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs
1788 Initializes a print field attribute object. Sets the owner to OWNER_PRINT_FIELD.
1789 Initializes a new table attribute object. Sets the owner to OWNER_TABLE by default.
1790 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1791 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1792 Initializes a COSParser with a PDF source. @param source PDF file to be parsed @throws IOException if an I/O error occurs during initialization
1793 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1794 Sets horizontal scaling for text. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1795 Initializes a PDFParser with specified PDF source and security settings. @param source PDF file to be parsed @param decryptionPassword password for decrypting the PDF @param keyStore input stream for the keystore (if encrypted) @param alias alias for the key in the keystore @throws IOException if an I/O error occurs during initialization
1796 Sets the text rise in the PDF content stream. @param rise the amount to adjust the text position vertically @throws IOException if an I/O error occurs
1797 Sets the text rise in the PDF content stream. @param rise the amount to adjust the text position vertically @throws IOException if an I/O error occurs
1798 Validates and corrects PDF cross-reference offsets. If validation fails, replaces with results from brute force search. @throws IOException if an I/O error occurs during processing
1799 Sets the text rise in the PDF content stream. @param rise the amount to adjust the text position vertically @throws IOException if an I/O error occurs
1800 Initializes content stream for PDF appearance. @param appearance The appearance stream to write to @throws IOException if I/O error occurs or multiple writers are opened
1801 Sets the text rise in the PDF content stream. @param rise the amount to adjust the text position vertically @throws IOException if an I/O error occurs
1802 Initializes content stream for a PDF form XObject. @param form the form XObject to write to @throws IOException if I/O error occurs
1803 Initializes a new PageDrawer with specified parameters. @param parameters configuration for page drawing @throws IOException if an I/O error occurs during initialization
1804 Initializes a new content stream for an appearance. @param doc The PDF document containing the appearance @param appearance The appearance stream to write to @throws IOException if I/O error occurs or multiple writers are opened
1805 Parses a COS string from the PDF source. Handles different escape sequences and nested parentheses. @return COSString object representing the parsed string @throws IOException if parsing fails or input is invalid
1806 Sets the highest color value. @param high the highest color intensity value to store
1807 Constructs an immutable rectangle with specified dimensions. @param width rectangle width @param height rectangle height
1808 Removes the first occurrence of a specified element. @param o element to be removed @return true if the element was present and removed, false otherwise
1809 Initializes a PDMetadata object for a PDF document. @param document the PDDocument to associate with the metadata
1810 Constructs a new embedded file in the given PDF document. @param document The PDF document to associate with this embedded file
1811 Removes an element by index. @param index position of the element to remove @return removed COSBase object or null if index is out of bounds @throws UnsupportedOperationException if list is filtered
1812 Clears all key-value pairs from both the map and actuals collections.
1813 Initializes a PDXObject with a new PDStream and sets its type and subtype. @param document The PDF document to associate the object with @param subtype The subtype of the XObject
1814 Removes a key-value pair from the dictionary. @param key the string representation of the PDF name to remove @return the value associated with the removed key, or null if not found
1815 Constructs a PDImageXObject from a given PDF document. @param document PDDocument containing the image data
1816 Recursively collects COSBase objects from a COSArray. @param array the COSArray to process @return true if any descendant requires parent update, false otherwise
1817 Initializes a PDStream from an InputStream without filters. @param doc PDDocument containing the PDF content @param input InputStream of data to be written to the stream @throws IOException if I/O error occurs during stream creation or transfer
1818 Sets the origin document state without dereferencing. @param originDocumentState new document state to set
1819 Dereferences a child object and updates its state. @param child the child object to dereference
1820 Initializes a PDStream with a specific filter. @param doc PDDocument containing the PDF content @param input InputStream of data to be written to the stream @param filter COSName specifying the encoding filter @throws IOException if I/O error occurs during stream creation or transfer
1821 Initializes a PDStream from an InputStream with specified filters. @param doc PDDocument containing the PDF content @param input InputStream of data to be written to the stream @param filters COSArray object specifying filters for encoding @throws IOException if I/O error occurs during stream creation or transfer
1822 Saves FDF document to specified file path. @param fileName path where the FDF data will be written @throws IOException if an I/O error occurs during writing
1823 Draws a shape with specified line width and optional stroke/fill. @param lineWidth the width of the shape's outline @param hasStroke whether to apply stroke @param hasFill whether to fill the shape @throws IOException if writing fails
1824 Constructs a PDImageXObject from an encoded InputStream. @param document PDDocument to which the image belongs @param encodedStream source input stream containing encoded image data @param cosFilter COSBase object representing the filter applied to the image @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace PDColorSpace for the image @throws IOException if I/O operations fail
1825 Initializes a new PDLayoutAttributeObject with layout owner.
1826 Constructs a PDListAttributeObject for list attributes. Initializes the owner to OWNER_LIST.
1827 Initializes a print field attribute object. Sets the owner to OWNER_PRINT_FIELD by default.
1828 Encrypts or decrypts PDF object data. @param objectNumber PDF object number @param genNumber PDF generation number @param data input stream of the data to be processed @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException if an I/O error occurs during processing
1829 Initializes a new PDTableAttributeObject with table owner.
1830 Initializes a PDF parser without security settings. @param source RandomAccessRead object representing the PDF file @throws IOException if an I/O error occurs during initialization
1831 Validates owner password for PDF encryption based on revision. @param ownerPassword bytes of the owner password @param user stored user entry bytes @param owner owner entry bytes @param permissions document access permissions @param id document ID @param encRevision encryption revision level @param keyLengthInBytes desired output key length @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if cryptographic operations fail or unknown revision
1832 Initializes a PDF parser with specified security settings. @param source RandomAccessRead object representing the PDF file @param decryptionPassword password for decrypting protected documents @param keyStore InputStream containing keystore data @param alias alias for the key in the keystore @throws IOException if an I/O error occurs during initialization
1833 Validates and corrects cross-reference offsets. Uses brute force if validation fails. @throws IOException if I/O error occurs during parsing
1834 Validates user password for PDF encryption. @param password user-provided password string @param user combined user and validation salt bytes @param owner owner entry bytes (not used in REVISION_5/6) @param permissions document access permissions @param id document ID (not used in REVISION_5/6) @param encRevision PDF encryption revision @param keyLengthInBytes desired output key length for revisions 2-4 @param encryptMetadata flag to encrypt metadata @return true if password matches, false otherwise @throws IOException if an I/O error occurs or unknown encryption revision is used
1835 Initializes content stream for PDF appearance. @param appearance the PDAppearanceStream to which this content stream belongs @throws IOException if an I/O error occurs
1836 Finds a FontBoxFont by PostScript name, checking TTF, OTF, and PFB formats. @param postScriptName the PostScript name of the font @return FontBoxFont instance or null if not found
1837 Initializes a content stream for a PDF form XObject. @param form the PDFormXObject to which this content stream belongs @throws IOException if an I/O error occurs or stream is already open
1838 Initializes a content stream for an annotation appearance. @param doc the PDDocument to which this content stream belongs @param appearance the PDAppearanceStream for which the content stream is created @throws IOException if an I/O error occurs or stream is already open
1839 Sets the high value in the color table. @param high the high value to store at index 2
1840 Removes a COSBase object from the list. @param o the object to remove @return true if the object was removed, false otherwise @throws UnsupportedOperationException if the list is filtered
1841 Removes and returns the element at the specified index. Throws exception if list is filtered. @param index index of the element to remove @return removed COSBase object or null if index is out of bounds
1842 This code snippet appears to be a part of a PDF text extraction process. It's written in Java and seems to be a method that processes individual text positions extracted from a PDF document. Here is a brief overview of what it does: 1. It calculates the average character width and space between words based on the current text position and previous ones. 2. It checks if the current text position is part of the same line as the last one by comparing their y-coordinates. 3. If they are not on the same line, it writes the current line to a paragraph and starts a new line. 4. It also checks if there's enough space between the last character and the current one to consider them as separate words. If so, it adds a word separator. 5. It keeps track of the maximum height for the current line, which is used to determine when a new line should start. 6. Finally, it writes the last line to the paragraph when there's no more text to process. This method seems to be responsible for organizing the extracted text into paragraphs and lines, taking into account factors like character width, word spacing, and line height.
1843 Clears all key-value pairs from the dictionary and marks the document as updated.
1844 Begins marked content in PDF. @param tag COSName representing the content tag @throws IOException if writing fails
1845 Removes an entry by key from both the internal map and COSDictionary. @param key String representing the key to remove @return Value associated with the removed key or null if not found
1846 Begins marked content in PDF. @param tag COSName representing the content tag @throws IOException if writing fails
1847 Recursively collects COSBase objects for document updates. @param array collection of COSBase objects to process @return true if any descendant requires parent update, false otherwise
1848 Begins marked content in PDF. @param tag COSName representing the content tag @throws IOException if writing fails
1849 Sets the origin document state without dereferencing. @param originDocumentState the new document state to set
1850 Begins marked content with a specified tag. @param tag COSName representing the content tag @throws IOException if writing fails
1851 Dereferences a child object and updates its state. @param child the child COSBase object to dereference
1852 Begins a marked content sequence in the PDF. @param tag COSName representing the content category @param mcid unique marker identifier, must be non-negative @throws IOException if writing fails or mcid is negative
1853 Begins a marked content sequence in the PDF. @param tag COSName representing the content category @param mcid unique marker identifier, must be non-negative @throws IOException if writing fails or mcid is negative
1854 Saves FDF document to specified file path. @param fileName path where the FDF file will be saved @throws IOException if I/O error occurs during writing
1855 Begins a marked content sequence with a specified tag and marker ID. @param tag COSName representing the content category @param mcid unique marker identifier, must be non-negative @throws IllegalArgumentException if mcid is negative @throws IOException if writing fails
1856 Draws a shape with specified line width and options for stroke and fill. @param lineWidth the width of the line @param hasStroke whether to apply a stroke @param hasFill whether to fill the shape @throws IOException if an I/O error occurs
1857 Begins a marked content sequence in the PDF. @param tag COSName representing the content category @param mcid unique marker identifier, must be non-negative @throws IllegalArgumentException if mcid is negative @throws IOException if writing fails
1858 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if writing fails
1859 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if writing fails
1860 Encrypts or decrypts PDF object data. @param objectNumber PDF object number @param genNumber generation number of the PDF object @param data input stream for the object data @param output output stream for encrypted/decrypted data @param decrypt true if decryption, false if encryption @throws IOException on I/O errors
1861 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if writing fails
1862 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if writing fails
1863 Validates PDF owner password based on encryption revision. @param ownerPassword owner's password bytes @param user stored user entry bytes @param owner stored owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output length in bytes @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if an I/O error occurs or unknown encryption revision
1864 Writes a COSString to the output stream and appends a space. @param output the OutputStream to write to @param cosString the COSString to write @throws IOException if writing fails
1865 Displays text on the current page. @param text string to be displayed @throws IOException if an I/O error occurs
1866 Validates user password for PDF encryption based on revision. @param password user-provided password string @param user encrypted user key and validation salt bytes @param owner encrypted owner key bytes (not used in REVISION_5,6) @param permissions document access permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired output length for encryption key @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if an I/O error occurs or unknown revision
1867 Sets line width for drawing operations in PDF. Only writes command if lineWidth is not the default (1.0). @param lineWidth the desired line width @throws IOException if writing fails
1868 Sets the text matrix for rendering text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1869 Finds and returns a FontBoxFont by PostScript name. Checks for Type1, TrueType, and OpenType fonts in sequence. @param postScriptName the PostScript name of the font @return FontBoxFont object if found; otherwise, null
1870 Sets the text matrix for rendering text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1871 Sets the text matrix for rendering text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1872 Sets the text matrix for rendering text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1873 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
1874 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
1875 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
1876 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
1877 Creates a PageDrawer with specified parameters and annotation filter. @param parameters configuration for page drawing operations @return configured PageDrawer instance
1878 This code appears to be a method for processing text in a PDF document. It takes an `ArrayList` of `TextPosition` objects as input, which represent the positions and properties of individual characters in the document. The method processes each `TextPosition` object one by one, determining whether it should be added to the current line or if a new line should be started. It also handles cases where text is on a new page or article. Here's a breakdown of some key parts of the code: 1. **Initialization**: The method initializes various variables to keep track of the current state, such as `lastPosition`, `expectedStartOfNextWordX`, and `maxHeightForLine`. 2. **Processing each TextPosition**: For each `TextPosition` object, it calculates the expected start position of the next word based on the average character width and spacing. It then checks whether the current text should be added to the current line or if a new line should be started. 3. **Handling line breaks**: If the current text does not overlap with the last rendered baseline text, a new line is started. The method also handles cases where there is at least one space between the last character and the current one by resetting the maximum line height. 4. **Adding text to lines**: The method adds each `TextPosition` object to the current line as a `LineItem`. It also handles cases where a word separator should be added between words. 5. **Finalizing processing**: After processing all `TextPosition` objects, the method writes out the final line and paragraph, and ends the article and page. Overall, this code appears to be responsible for organizing text into lines and paragraphs based on their positions in the PDF document.
1879 Creates a form XObject. @param document PDF document to associate with this object
1880 Begins a marked content section in the PDF stream. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
1881 Initializes metadata for a PDF document. @param doc PDDocument containing the PDF content @param str InputStream providing the metadata XML data @throws IOException if I/O error occurs during initialization
1882 Begins a marked content section in the PDF stream. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
1883 Constructs a new PDEmbeddedFile. @param doc PDF document containing the embedded file @param str InputStream for the embedded file data @throws IOException if I/O error occurs during construction
1884 Begins a marked content section in the PDF stream. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
1885 Begins a marked content section in the PDF stream. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
1886 Constructs a PDEmbeddedFile object. @param doc PDDocument containing the PDF content @param input InputStream providing the data to be stored in the stream @param filter COSName representing the filter for data processing @throws IOException if I/O error occurs during file creation or data transfer
1887 Begins a marked content sequence in the PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content @throws IllegalArgumentException if mcid is negative @throws IOException if an I/O error occurs
1888 Begins a marked content sequence in the PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content, must be non-negative @throws IOException if an I/O error occurs or mcid is negative
1889 Begins a marked content sequence in the PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content, must not be negative @throws IOException if an I/O error occurs or mcid is negative
1890 Begins a marked content sequence in the PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content @throws IOException if an I/O error occurs or mcid is negative
1891 Sets a marked content point in the PDF stream. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs
1892 Prepares an image as a PDImageXObject for PDF inclusion. @param document PDF document to associate with the image @param byteArray input byte array containing image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @return PDImageXObject instance ready for PDF embedding @throws IOException if an I/O error occurs during processing
1893 Sets a marked content point in the PDF stream. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs
1894 Initializes a PDExportFormatAttributeObject with a specified owner. @param owner the owner of the attribute object
1895 Sets a marked content point in the PDF stream. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs
1896 Constructs an FDFParser with the specified input source. @param source FDF file to be parsed @throws IOException if an I/O error occurs during initialization
1897 Sets a marked content point in the PDF stream. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs
1898 Creates a new PDFParser instance. @param source PDF file to be parsed @param decryptionPassword password for decrypting the PDF @throws IOException if an I/O error occurs during initialization
1899 Collects and processes a COSBase object. @param base the COSBase object to process @return true if any descendant requires parent update, false otherwise
1900 Sets the document's trailer dictionary. @param newTrailer the new trailer dictionary to set
1901 Updates the document state and propagates changes to child objects. @param child the child object to update
1902 Writes a COSString to the output stream followed by a space. @param output the OutputStream to write to @param cosString the COSString to write @throws IOException if an I/O error occurs
1903 Updates the document state and propagates changes to child objects. @param children iterable collection of COSBase child objects
1904 Displays text on the PDF page. @param text the string to display @throws IOException if an I/O error occurs
1905 Retrieves the underlying COSBase object. Handles dereferencing and updates its state if necessary. @return the COSBase object or null if an error occurs
1906 Sets line width if different from default (1). @param lineWidth desired width of the line @throws IOException if an I/O error occurs
1907 Sets the text matrix for subsequent text operations. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1908 Sets the text matrix for subsequent text operations. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1909 Sets the text matrix for subsequent text operations. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1910 Sets the text matrix for subsequent text operations. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1911 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or if in text mode
1912 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
1913 Decrypts a PDF stream. @param stream the COSStream to decrypt @param objNum PDF object number @param genNum PDF generation number @throws IOException if an I/O error occurs
1914 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
1915 Encrypts a PDF stream. @param stream the COSStream to be encrypted @param objNum PDF object number @param genNum PDF generation number @throws IOException if an I/O error occurs during encryption
1916 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs or if in text mode
1917 Creates and configures a PageDrawer for rendering PDF pages. @param parameters configuration for page drawing @return configured PageDrawer instance @throws IOException if an I/O error occurs during setup
1918 Decrypts a COSString using specified PDF object and generation numbers. @param string the COSString to decrypt @param objNum PDF object number @param genNum PDF generation number @return decrypted COSBase or original if decryption fails
1919 Creates a new PDFormXObject. @param document The PDF document to associate with this form XObject
1920 Encrypts a given COSString. @param string the COSString to be encrypted @param objNum PDF object number @param genNum PDF generation number @return encrypted COSString @throws IOException if an I/O error occurs during encryption
1921 Initializes a PDMetadata object with XML content. @param doc PDF document to associate metadata with @param str InputStream containing XML metadata @throws IOException if I/O error occurs during initialization
1922 Constructs a PDEmbeddedFile instance. @param doc PDF document containing the embedded file @param str InputStream of the file data @throws IOException if I/O error occurs during initialization
1923 Validates owner password for PDF encryption. @param password owner's password as a String @param user stored user entry bytes @param owner owner entry bytes @param permissions document access permissions @param id document ID @param encRevision encryption revision level @param keyLengthInBytes desired output key length @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if cryptographic operations fail or unknown revision
1924 Initializes a PDEmbeddedFile with specified document, input stream, and filter. @param doc PDF document containing the embedded file @param input InputStream for the file data @param filter COSName specifying the encoding filter @throws IOException if I/O error occurs during initialization
1925 Initializes the FileSystemFontProvider with a given cache. Scans local system for font files, loads cached font info if available, otherwise builds and saves the on-disk font cache. @param cache FontCache object to manage font information
1926 Writes text from specified regions of a PDF page. Iterates over defined regions, processes characters, and outputs text.
1927 Writes a PDF token by serializing its COSBase object. @param base COSBase object representing the token to write @throws IOException if writing fails
1928 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Strings and Floats representing text and positions @throws IOException if an I/O error occurs
1929 Displays and writes text on the current page. @param text string to be displayed and written @throws IOException if an I/O error occurs
1930 Initializes a new transparency group associated with a PDF document. @param document The PDF document to which this transparency group belongs.
1931 Prepares a PDImageXObject from byte array with specified parameters. @param document PDDocument to which the image belongs @param byteArray input image data as byte array @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace PDColorSpace for the image @return PDImageXObject instance ready for PDF inclusion @throws IOException if I/O operations fail
1932 Initializes a new appearance stream associated with a PDF document. @param document The PDF document to which this appearance stream belongs.
1933 Constructs a PDExportFormatAttributeObject with an owner. @param owner the owner of the export format attribute
1934 Initializes a new instance of FDFParser. @param source RandomAccessRead object representing the FDF file @throws IOException if an I/O error occurs during initialization
1935 Creates a JPEG image from a BufferedImage for inclusion in a PDF. @param document PDF document to associate with the image @param image input BufferedImage to encode @param quality compression quality (0.0f to 1.0f) @param dpi DPI for the encoded image metadata @return PDImageXObject in JPEG format @throws IOException if an I/O error occurs
1936 Creates a PDF parser with specified source and decryption password. @param source RandomAccessRead object representing the PDF file @param decryptionPassword password for decrypting protected documents @throws IOException if an I/O error occurs during initialization
1937 Checks and collects a COSBase object for document updates. @param base the COSBase object to process @return true if any descendant requires parent update, false otherwise
1938 Sets the document's trailer dictionary. @param newTrailer the new trailer dictionary to set
1939 Updates the document state and propagates changes to a child. @param child the child object to update
1940 Creates a new PDFParser instance without decryption. @param source PDF file to be parsed @throws IOException if an I/O error occurs during initialization
1941 Updates the document state and propagates it to child objects. @param children iterable collection of COSBase objects representing child elements
1942 Collects and processes a COSDictionary object. @param dictionary the COSDictionary to process @return true if any descendant requires parent update, false otherwise
1943 Returns the COSBase object. Handles dereferencing and updates state if not already done. @return The underlying COSBase object or null if an error occurs
1944 Returns the set of COSBase objects managed by this instance. Initializes collection if not already done. @return Set of COSBase objects
1945 Adds a COSBase object to the array. @param object the COSBase object to add
1946 Adds a COSBase object at the specified index. Handles wrapping in COSObject if necessary. @param i index where to add the object @param object the COSBase object to add
1947 Sets a COSBase object at the specified index. @param index position in the array @param object the COSBase object to set
1948 Sets an item in the dictionary with a given key and value. @param key the COSName key for the item @param value the COSBase value to store, or null to remove the item
1949 Adds all elements from the provided list to the COSArray. @param objectsList collection of COSBase objects to add
1950 Decrypts a PDF stream. @param stream the COSStream to decrypt @param objNum PDF object number @param genNum generation number of the PDF object @throws IOException on I/O errors
1951 Adds all elements from the specified collection at a given position. @param i index at which to insert the first element from the specified collection @param objectList collection of COSBase objects to add
1952 Updates document state from COSArray. @param children array of COSBase child objects
1953 Encrypts a PDF stream using specified object number and generation number. @param stream the COSStream to be encrypted @param objNum PDF object number @param genNum generation number of the PDF object @throws IOException if an I/O error occurs during encryption
1954 Retrieves the COSBase object at the specified index. Handles dereferencing and updates its state if necessary. @param index position of the object in the array @return the COSBase object or null if not found
1955 Decrypts a COSString if not using identity filter. @param string the COSString to decrypt @param objNum PDF object number @param genNum generation number of the PDF object @return decrypted COSBase or original if decryption fails
1956 Removes a COSBase object from the array. Handles direct removal and nested COSObject references. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
1957 Encrypts a given COSString. @param string the COSString to be encrypted @param objNum PDF object number @param genNum generation number of the PDF object @return encrypted COSBase object @throws IOException on I/O errors
1958 Finds the index of a COSBase object in the array. @param object the COSBase object to search for @return index of the object or -1 if not found
1959 Checks if the dictionary contains a given value. @param value the value to search for @return true if the value is found, false otherwise
1960 Retrieves the key associated with a given value. @param value the value to search for @return COSName key or null if not found
1961 Validates PDF owner password. @param password owner's password string @param user stored user entry bytes @param owner stored owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output length in bytes @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if an I/O error occurs or unknown encryption revision
1962 Retrieves the value associated with a given key. Handles COSObjects by dereferencing and COSNulls by returning null. @param key the key to look up in the dictionary @return the corresponding COSBase object or null if not found
1963 Initializes FileSystemFontProvider with a given cache. Scans local system for fonts, loads or builds cache as needed. @param cache FontCache instance to manage cached font information
1964 Processes and writes text from defined regions in a PDF. Iterates over each region, sets character list and output, then calls superclass method.
1965 Writes a COSBase object as a token to the PDF output stream. @param base the COSBase object to write @throws IOException if an I/O error occurs
1966 Collects all indirect object keys from the dictionary and its nested structures. @param indirectObjects collection to store collected COSObjectKeys
1967 Writes text with positioning information to the PDF content stream. @param textWithPositioningArray array containing String and Float objects for text and positions @throws IOException if an I/O error occurs
1968 Retrieves the linearized dictionary from the PDF document. @return COSDictionary containing linearization information, or null if not found
1969 Closes the PDF document and releases resources. Ensures all open streams are closed and logs any exceptions.
1970 Displays and writes text to the PDF page. @param text the string to display @throws IOException if an I/O error occurs
1971 Initializes a new transparency group associated with a PDF document. @param document The PDF document to be used for this transparency group
1972 Collects and processes a COSObject for inclusion in PDF updates. @param object the COSObject to be collected @return true if any descendant requires parent update, false otherwise
1973 Constructs a new PDAppearanceStream. @param document The PDF document associated with this appearance stream
1974 Accepts a visitor to process the underlying COSBase object or NULL. @param visitor ICOSVisitor instance for processing @throws IOException if an I/O error occurs during processing
1975 Creates a JPEG image from a BufferedImage. @param document PDDocument to which the image belongs @param image source BufferedImage @param quality compression quality (0.0f - 1.0f) @param dpi dots per inch for metadata @return PDImageXObject representing the JPEG image @throws IOException if I/O operations fail
1976 Checks if the given COSBase value is a self-reference to the parent. @param parent the parent COSBase object @param value the COSBase object to check for self-reference @return true if there is a self-reference, false otherwise
1977 Retrieves the length as a COSNumber from the given base object. Handles direct and referenced objects, throws exceptions for invalid types. @param lengthBaseObj the base object containing the length information @return COSNumber representing the length or null if not found @throws IOException if the length cannot be determined or is of an incorrect type
1978 Creates a PDF parser for the specified source without decryption. @param source RandomAccessRead object representing the PDF file @throws IOException if an I/O error occurs during initialization
1979 Constructs a NormalXReference. @param byteOffset offset of the referenced object in the PDF @param key unique identifier for the referenced object @param object the COSBase object being referenced
1980 Collects and processes COSDictionary objects for document updates. @param dictionary the COSDictionary to process @return true if any descendant requires parent update, false otherwise
1981 Retrieves the set of collected COSBase objects. Initializes collection if not already done. @return Set of COSBase objects for document updates
1982 Adds a COSBase object to the array. @param object the COSBase object to add
1983 Retrieves or creates a unique key for a PDF object. Handles COSObject dereferencing and updates keys if necessary. @param obj the PDF object to process @return the unique COSObjectKey for the given object
1984 Adds a COSBase object at the specified index. Handles nested COSDictionary or COSArray by wrapping them in COSObject. @param i index where the object should be added @param object COSBase object to add
1985 Retrieves the COSObjectKey for a given COSBase object. Handles both direct and indirect object references. @param object the COSBase object to find the key for @return the associated COSObjectKey or null if not found
1986 Sets the COSBase object at a specified index. @param index position in the array @param object the COSBase object to set
1987 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if the object is present in the pool, false otherwise
1988 Sets an item in the dictionary by key. @param key COSName representing the key @param value COSBase object to set or null to remove
1989 Adds all elements from the provided list to the COSArray. @param objectsList collection of COSBase objects to add
1990 Adds a collection of COSBase objects at a specified index. @param i insertion index @param objectList collection of COSBase objects to add
1991 Prepares a PDF stream object for writing. @param key unique identifier for the object @param object the COSBase object to prepare
1992 Updates document state using an array of child objects. @param children COSArray containing child elements to be updated
1993 Retrieves the COSBase object at the specified index. Handles dereferencing and replaces COSObject with its actual value. Returns null for COSNull objects. @param index position of the object in the array @return the underlying COSBase object or null if not found
1994 Removes a COSBase object from the array. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
1995 Finds the index of a COSBase object in the array. @param object the COSBase object to search for @return index of the object or -1 if not found
1996 Checks if the dictionary contains a specific value. @param value the value to search for @return true if the value is found, false otherwise
1997 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Strings and Floats representing text and positions @throws IOException if an I/O error occurs
1998 Retrieves the key associated with a given value. @param value the value to search for @return COSName key if found, otherwise null
1999 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Strings and Floats representing text and positions @throws IOException if an I/O error occurs
2000 Retrieves the value associated with a given key from the dictionary. Handles dereferencing and converts COSNull to null. @param key the key whose associated value is to be returned @return the value associated with the specified key, or null if not found
2001 Writes text with specified positions to the PDF content stream. @param textWithPositioningArray array of Strings and Floats representing text and positions @throws IOException if an I/O error occurs
2002 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Strings and Floats representing text and positions @throws IOException if an I/O error occurs
2003 Displays and writes text on the current page. @param text string to be displayed and written @throws IOException if an I/O error occurs
2004 Collects all indirect object keys from the dictionary. @param indirectObjects collection to store the keys
2005 Displays and writes text on the current page. @param text string to be displayed and written @throws IOException if an I/O error occurs
2006 Retrieves the linearized dictionary from the PDF document. @return COSDictionary containing linearization information, or null if not found
2007 Closes the PDF document and releases resources. Ensures all COSStreams are closed and logs any exceptions.
2008 Displays and writes text on the current page. @param text string to be displayed and written @throws IOException if an I/O error occurs
2009 Displays and writes text on the current page with a space. @param text string to be displayed and written @throws IOException if an I/O error occurs
2010 Collects and processes a COSObject for document updates. @param object the COSObject to be processed @return true if any descendant requires parent update, false otherwise
2011 Accepts a visitor to process the underlying COSBase object. If the object is null, processes a COSNull instance instead. @param visitor ICOSVisitor instance for processing
2012 Creates a JPEG image from a BufferedImage for inclusion in a PDF. @param document PDF document to associate with the image @param image input BufferedImage to encode @param quality compression quality (0.0f to 1.0f) @return PDImageXObject in JPEG format @throws IOException if an I/O error occurs
2013 Returns an iterator over managed COSBase objects. Utilizes getObjects() to fetch the collection. @return Iterator for COSBase objects
2014 Adds a COSObjectable to the array. @param object the COSObjectable to add
2015 Checks if the given COSBase value is a self-reference to the parent. @param parent parent COSBase object @param value COSBase object to check @return true if value is a self-reference, false otherwise
2016 Ensures the array grows to a specified size, filling with a given COSBase object. @param size desired size of the array @param object COSBase object to fill additional slots
2017 Sets the array with float values. @param value array of floats to be set
2018 Retrieves the length value from a PDF base object. Handles direct and referenced COSNumber objects. @param lengthBaseObj the base object containing the length information @return COSNumber representing the length or null if not found @throws IOException if an error occurs during retrieval
2019 Constructs a NormalXReference entry. @param byteOffset the byte offset of the referenced object @param key the COSObjectKey representing the reference @param object the COSBase object being referenced
2020 Constructs and returns the PDF cross-reference stream. @return Constructed COSStream object for the xref table @throws IOException if I/O error occurs during stream creation or data writing
2021 Retrieves or creates a unique key for a PDF object. Handles direct and indirect objects, updating keys as necessary. @param obj the COSBase object to process @return the COSObjectKey associated with the object
2022 Initializes a COSArrayList with an initial object and associated PDFBox structures. @param actualObject the actual object to manage @param item the COSBase item representing the object in the PDF structure @param dictionary the parent COSDictionary containing this array @param dictionaryKey the key under which this array is stored in the dictionary
2023 Retrieves the COSObjectKey for a given COSBase object. @param object the COSBase object to find the key for @return the COSObjectKey associated with the object, or null if not found
2024 Converts a list of objects to a COSArray. @param cosObjectableList list of objects to convert @return COSArray containing converted COSBase objects
2025 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
2026 Initializes a PDRange with default values. Sets the range to [0, 1] and starting index to 0.
2027 Prepares a stream object for writing. @param key unique identifier for the object @param object the COSBase object to prepare
2028 Initializes a new FDFOptionElement with default empty strings.
2029 Initializes a new instance of PDFontSetting with default settings. Sets up the fontSetting array with null and default size (1.0).
2030 Writes text with positioning information to the PDF content stream. @param textWithPositioningArray array containing String and Float objects for text and positions @throws IOException if an I/O error occurs
2031 Converts color components to a COSArray. @return COSArray representing the color components and pattern name if applicable
2032 Initializes a PDDeviceN object with a base array. Sets up the initial structure for DeviceN color space in PDF.
2033 Writes text with positioning information to the PDF content stream. @param textWithPositioningArray array containing String and Float objects for text and positions @throws IOException if an I/O error occurs
2034 Initializes a PDGamma object with default RGB values set to zero.
2035 Writes text with positioning information to the PDF content stream. @param textWithPositioningArray array containing String and Float objects for text and positions @throws IOException if an I/O error occurs
2036 Retrieves the alternate color space. @return PDColorSpace object representing the alternate color space @throws IOException if an error occurs during retrieval or creation
2037 Initializes a new PDIndexed color space. Sets up the COSArray with necessary elements for indexed color representation.
2038 Writes text with positioning information to the PDF content stream. @param textWithPositioningArray array containing String and Float objects for text and positions @throws IOException if an I/O error occurs
2039 Returns the default range array for LAB color components. @return COSArray with default min and max values for L, a, b components
2040 Displays and writes text to the PDF page. @param text the string to display @throws IOException if an I/O error occurs
2041 Initializes a PDPattern with given resources. @param resources PDResources object containing color and pattern definitions
2042 Displays and writes text to the PDF page, followed by a space. @param text the string to display @throws IOException if an I/O error occurs
2043 Initializes a PDSeparation object with default settings. Sets up the base COSArray structure for color separation.
2044 Displays and writes text to the PDF page. @param text the string to display @throws IOException if an I/O error occurs
2045 Initializes a PDTristimulus with zero tristimulus values. Sets up the internal COSArray with three COSFloat zeros representing X, Y, Z.
2046 Displays and writes text to the PDF page. @param text the string to display @throws IOException if an I/O error occurs
2047 Initializes a PDTristimulus with tristimulus values. @param array float array containing X, Y, Z values (max 3)
2048 Sets the transformation matrix for the form XObject. @param transform the AffineTransform object defining the transformation
2049 Creates a JPEG image from a BufferedImage with default DPI. @param document PDDocument to which the image belongs @param image source BufferedImage @param quality compression quality (0.0f - 1.0f) @return PDImageXObject representing the JPEG image @throws IOException if I/O operations fail
2050 Creates a PDImageXObject from a JPEG byte array. @param document PDF document to add the image @param byteArray JPEG image data @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
2051 Returns an iterator over collected COSBase objects. Utilizes the getObjects() method to fetch the set of objects. @return Iterator for COSBase objects
2052 Converts the matrix to a COSArray representation. @return COSArray containing matrix elements in PDF transformation order
2053 Adds a COSObjectable to the array. @param object the COSObjectable to add
2054 Sets a COSObjectable at the specified index. @param index position in the array @param object the COSObjectable to set
2055 Ensures the COSArray has at least the specified size, filling with a given object if needed. @param size desired minimum size of the array @param object COSBase object to add if array needs expansion
2056 Sets an integer value at the specified index. @param index position in the array @param value numeric value to set
2057 Sets the array with float values. @param value array of float values to be added
2058 Sets a PDF name at a specified index. @param index position in the array @param name string representation of the PDF name
2059 Sets a string at the specified index in the array. @param index position in the array @param string input string to be set
2060 Constructs and returns the PDF cross-reference stream. @throws IOException if an I/O error occurs during stream creation or data writing
2061 Sets the minimum value of the range. @param min the new minimum value for the range
2062 Sets the maximum value of the range. @param max the maximum floating-point value
2063 Sets the x-coordinate of the lower-left corner. @param value the x-coordinate to be set
2064 Initializes a COSArrayList with an initial object and its associated COSBase. @param actualObject the actual object to manage @param item the COSBase item representing the object in PDF structure @param dictionary the parent COSDictionary @param dictionaryKey the key for the item in the dictionary
2065 Sets the lower-left Y coordinate of the rectangle. @param value the Y coordinate value to set
2066 Converts a list of objects to a COSArray. @param cosObjectableList list of objects to convert @return COSArray containing converted COSBase objects
2067 Sets the X coordinate of the upper-right corner. @param value the X coordinate to be set
2068 Initializes a PDRange with default values [0, 1].
2069 Sets the Y-coordinate of the upper right corner. @param value the Y-coordinate to be set
2070 Sets a color at the specified index. @param index position in the color array @param colour PDGamma object representing the color
2071 Initializes a new FDFOptionElement with default empty strings.
2072 Decrypts all elements in a COSArray. @param array the COSArray to decrypt @param objNum object number for decryption context @param genNum generation number for decryption context @throws IOException if an I/O error occurs during decryption
2073 Sets the option value. @param opt the option string to be set
2074 Sets the default appearance string for the option. @param da the default appearance string to be set
2075 Sets the font size. @param size the desired font size in points
2076 Sets colorant names for DeviceN color space. @param names list of colorant names
2077 Initializes a new PDFontSetting with default settings. Sets up the font array with null and a default size of 1.
2078 Sets DeviceN attributes. @param attributes PDDeviceNAttributes object to set or null to remove
2079 Sets the alternate color space for DeviceN. @param cs PDColorSpace object representing the alternate color space
2080 Converts color components to a COSArray. @return COSArray containing color components and pattern name if applicable
2081 Sets the red component of the color. @param r red component value as float
2082 Sets the green component of the color. @param g green value as float
2083 Initializes a PDDeviceN object with base DeviceN color space settings. Sets up an array with DeviceN identifier and null placeholders for colorants.
2084 Initializes a new PDGamma instance with zero RGB values.
2085 Sets the blue component of the color. @param b blue value as float
2086 Sets the base color space. @param base PDColorSpace object representing the new base color space
2087 Retrieves the alternate color space for a PDF object. @return PDColorSpace representing the alternate color space @throws IOException if there is an issue accessing or creating the color space
2088 Sets the colorant name in the PDF document. @param name the colorant name to be set
2089 Initializes a new PDIndexed object with default RGB color space settings.
2090 Sets the alternate color space for PDF rendering. @param colorSpace the new alternate color space to set
2091 Creates a default LAB color range array. @return COSArray with min and max values for L, a, b components
2092 Sets the X tristimulus value. @param x the X component of the color
2093 Initializes a new PDPattern with specified resources. @param resources PDResources object containing pattern resources
2094 Sets the Y tristimulus value. @param y the Y value to be set
2095 Initializes a new PDSeparation object with default color separation settings. Constructs a COSArray and sets up initial color separation parameters.
2096 Sets the Z tristimulus value. @param z the Z value to set
2097 Initializes a PDTristimulus with zero tristimulus values. Sets X, Y, and Z to 0.0.
2098 Sets an item in the dictionary with a given key and value. @param key the COSName key for the item @param value the COSObjectable value to store, or null to remove the item
2099 Initializes a PDTristimulus with tristimulus values from an array. @param array float array containing X, Y, and Z values
2100 Sets a boolean value in the dictionary. @param key the key for the boolean value @param value the boolean value to store
2101 Sets the transformation matrix for the form XObject. @param transform the AffineTransform object defining the matrix
2102 Sets a boolean value in the dictionary. @param key the COSName key for the item @param value the boolean value to store
2103 Creates a PDImageXObject from a JPEG byte array. @param document PDF document to add the image @param byteArray JPEG image data as a byte array @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
2104 Sets an item in the dictionary using a string key. @param key the string key for the item @param value the COSBase value to store, or null to remove the item
2105 Converts the matrix to a COSArray for PDF representation. @return COSArray containing matrix elements in PDF format
2106 Sets a PDF name in the dictionary. @param key the COSName key for the item @param value the string representation of the PDF name
2107 Sets a COSBase object at the specified index using a COSObjectable. @param index position in the array @param object the COSObjectable to convert and set
2108 Sets a string item in the dictionary. @param key the COSName key for the item @param value the string value to store, or null to remove the item
2109 Sets an integer value at a specified index in the array. @param index position in the array @param value integer to be stored
2110 Sets an integer value in the dictionary. @param key the COSName key for the item @param value the integer value to store
2111 Sets the PDF name at a specified index. @param index position in the array @param name the PDF name string to set
2112 Sets a long value in the dictionary. @param key the COSName key for the item @param value the long value to store
2113 Sets a string at the specified index in the array. @param index position in the array @param string the string to set; if null, sets null at the index
2114 Sets a float value in the dictionary. @param key the COSName key for the item @param value the float value to store
2115 Sets the minimum value of the range. @param min the minimum value to be set
2116 Sets the maximum value of the range. @param max the maximum value to be set
2117 Creates a COSStream from a given dictionary and stream parameters. @param dictionary the source dictionary containing stream data @param startPosition the start position of the stream in the document @param streamLength the length of the stream @return the created COSStream object @throws IOException if an I/O error occurs during stream creation
2118 Sets the x-coordinate of the lower-left corner. @param value the x-coordinate to be set
2119 Sets the encryption dictionary for the PDF document. @param encDictionary the COSDictionary containing encryption settings
2120 Sets the lower-left Y coordinate of the rectangle. @param value the Y coordinate to be set
2121 Sets the document ID in the trailer dictionary. @param id COSArray containing the document ID
2122 Sets the x-coordinate of the upper-right corner. @param value the x-coordinate to be set
2123 Sets the Y-coordinate of the upper right corner. @param value the Y-coordinate to be set
2124 Sets a color at a specified index. @param index position in the array @param colour PDGamma object representing the color
2125 Decrypts all elements in the given COSArray. @param array COSArray to be decrypted @param objNum object number for decryption context @param genNum generation number for decryption context
2126 Sets the option value. @param opt the option string to be set
2127 Merges items from source dictionary to destination dictionary. @param src source PDF dictionary @param dst destination PDF dictionary @param cloner utility for cloning PDF objects @param exclude set of keys to exclude from merging @throws IOException if an I/O error occurs during cloning
2128 Sets the default appearance string for the FDF option. @param da the default appearance string
2129 Sets the font size for the PDF document. @param size the desired font size
2130 Sets colorant names for DeviceN color space. @param names list of colorant names
2131 Sets DeviceN attributes. @param attributes PDDeviceNAttributes object to set
2132 Sets the alternate color space. @param cs PDColorSpace object representing the alternate color space
2133 Sets the red component value. @param r red color component as float
2134 Sets the green component of the color. @param g green value to be set
2135 Sets the blue component of the color. @param b blue value to be set
2136 Sets the base color space. @param base PDColorSpace object representing the new color space
2137 Sets the colorant name in the PDF document. @param name the colorant name to set
2138 The code you've provided is from the Apache PDFBox library, specifically from the `COSParser` class. The method `parseNextToken()` is responsible for reading and parsing the next token from a PDF file. Here's what happens in this method: 1. It first checks if there are any remaining tokens to parse. If not, it returns null. 2. It then reads the next character (c) from the source. 3. Depending on the value of c, different actions are taken: - If c is a digit or '.', it parses a number. - If c is 'B', it checks for an image operator. - If c is 'I', it handles inline image data. - If c is ']', it returns null (this seems to be a workaround for corrupted PDF files). - Otherwise, it assumes the token is an operator. 4. The method continues reading and parsing tokens until it reaches the end of the file or encounters an error. This method is crucial for parsing PDF files because it's responsible for extracting all the individual elements from the file (numbers, operators, strings, etc.) which are then used to build the document structure in memory.
2139 Sets the alternate color space for the separation. @param colorSpace PDColorSpace object representing the new color space
2140 Initializes a new PDF document with basic structure. @param streamCacheCreateFunction function to create stream cache
2141 Sets the X tristimulus value. @param x the X value to be set
2142 Sets the document information metadata. @param info PDDocumentInformation object containing metadata details
2143 Sets the Y tristimulus value. @param y the Y value to be set
2144 Initializes a new PDDocumentCatalog for the given PDF document. @param doc the PDF document to associate with this catalog
2145 Sets the Z tristimulus value. @param z the Z value to be set
2146 Sets the list of threads in the document catalog. @param threads list of PDThread objects representing threads
2147 Sets an item in the dictionary by key. @param key COSName representing the key @param value COSObjectable object to set or null to remove
2148 Sets the list of output intents. @param outputIntents List of PDOutputIntent objects representing print settings
2149 Sets a boolean value in the dictionary by key. @param key the PDF name string for the key @param value the boolean value to set
2150 Sets the crop box for the PDF page. @param cropBox PDRectangle defining the new crop area or null to remove it
2151 Sets the content streams of the PDF page. @param contents list of PDStream objects representing content streams
2152 Sets a boolean value in the dictionary. @param key COSName representing the key @param value boolean value to set
2153 Sets thread beads on the PDF page. @param beads list of PDThreadBead objects representing annotation beads
2154 Sets an item in the dictionary by key. @param key PDF name string representing the key @param value COSBase object to set or null to remove
2155 Sets annotations on the PDF page. @param annotations list of PDAnnotation objects to add
2156 Sets a PDF name in the dictionary. @param key COSName representing the key @param value string to be converted to a PDF name
2157 Sets the viewports for this PDF page. @param viewports list of PDViewportDictionary objects representing viewports
2158 Sets a string value in the dictionary. @param key COSName representing the key @param value String to be stored or null to remove
2159 Constructs an empty PDPageTree. Initializes with a root dictionary and sets up default page tree structure.
2160 Sets an integer value in the dictionary by key. @param key COSName representing the key @param value integer value to be stored
2161 Adds an element to the list and updates parent dictionary if needed. @param o element to add @return true if the element was added successfully
2162 Clears all COSBase objects from the list and dictionary. @see clear() for dictionary item removal
2163 Sets a long value in the dictionary by key. @param key COSName representing the key @param value long value to be stored
2164 Sets an element at the specified index. @param index position in the list @param element new element to set @return previous element at the index
2165 Sets a float value in the dictionary. @param key the key to store the float under @param value the float value to store
2166 Adds an element at the specified index. Throws UnsupportedOperationException if list is filtered. Updates parent dictionary and COSArray accordingly. @param index position where to add the element @param element the element to be added
2167 Creates a COSStream from a dictionary and stream data. @param dictionary source of stream items @param startPosition position in the PDF file @param streamLength length of the stream data @return newly created COSStream object @throws IOException if an I/O error occurs
2168 Sets the encryption dictionary in the document's trailer. @param encDictionary COSDictionary representing encryption settings
2169 Puts a key-value pair in the dictionary. @param key the key associated with the value @param value the COSBase value to store @return the previous value associated with the key, or null if none
2170 Sets the document ID in the PDF trailer. @param id COSArray containing the document ID
2171 Converts page labels to a COS object. @return COSDictionary representing the page labels
2172 Initializes a new complex file specification. Sets up the underlying dictionary with the correct type.
2173 Constructs a PDComplexFileSpecification from a given dictionary. @param dict the COSDictionary containing file specification data
2174 Sets the range values for the PDF function. @param rangeValues COSArray containing the range limits
2175 Sets the domain values for the PDF function. @param domainValues COSArray representing the domain range
2176 Sets the encoding values for the function. @param encodeValues array of COSBase representing the encoding values
2177 Sets the decode values for the function. @param decodeValues array of COSArray containing decode values
2178 Merges entries from source dictionary to destination dictionary. @param src source COSDictionary containing items to merge @param dst destination COSDictionary to merge into @param cloner utility for cloning PDF components @param exclude set of keys to exclude from merging @throws IOException if an I/O error occurs during cloning
2179 Sets the 'K' attribute in the COS dictionary. @param k the value to set for the 'K' attribute
2180 Sets the class map for the structure tree root. @param classMap a map of class names to attribute objects or lists thereof
2181 Sets user properties for the document. @param userProperties list of PDUserProperty objects to set
2182 Sets the line dash pattern for guidelines. @param dashArray COSArray representing the dash pattern or null to clear it
2183 Sets the cryptographic filter method. @param cfm the COSName representing the encryption method
2184 Sets the encryption filter for the PDF document. @param filter the name of the filter to apply
2185 Sets the owner encryption key. @param o byte array representing the owner key @throws IOException if an I/O error occurs
2186 Sets the user encryption key. @param u byte array representing the user key
2187 Sets the owner encryption key for PDF security. @param oe byte array representing the owner encryption key
2188 Sets the user encryption key for PDF document. @param ue byte array representing the user encryption key @throws IOException if an I/O error occurs during processing
2189 The code snippet you provided is from the Apache PDFBox library, specifically from the `PDFStreamParser` class. This method, named `parseNextToken`, reads and parses the next token from a PDF stream. Here's a brief explanation of what this method does: 1. It first skips any whitespace characters in the stream. 2. Then it checks the next non-whitespace character to determine the type of token: - If it's a letter 'B', it reads the next string and checks if it matches the "BI" operator, which starts an inline image. If it does, it parses the image parameters and reads the image data. - If it's a letter 'I', it checks if the next two characters are "ID", which denotes the start of inline image data. It then reads the image data until it encounters the "EI" operator. - If it's a digit or a minus sign, it reads the entire number and returns it as a `COSNumber`. - If it's an opening bracket '[', it skips it and returns `null`. This is a special case where a PDF might have unmatched brackets. - For any other character, it assumes that it's an operator and reads the rest of the string until a whitespace or end-of-stream is encountered. It then returns the operator as a `COSOperator`. 3. If none of the above conditions are met, it simply returns `null`. This method is crucial for parsing PDF streams and extracting information from them.
2190 Sets the encryption recipients. @param recipients byte arrays representing recipient information @throws IOException if an I/O error occurs
2191 Constructs a new PDDocument with an initial structure. @param streamCacheCreateFunction function for creating stream caches
2192 Sets the stream filter name for encryption. @param streamFilterName COSName representing the filter name
2193 Sets the document information. @param info PDDocumentInformation object containing metadata
2194 Sets the name of the string filter. @param stringFilterName the COSName representing the string filter
2195 Constructs a PDDocumentCatalog for the given PDF document. Initializes the catalog dictionary and sets it in the document trailer. @param doc the PDF document to associate with this catalog
2196 Sets permissions for PDF encryption. @param perms byte array representing permissions @throws IOException if an I/O error occurs
2197 Sets the list of threads in the document catalog. @param threads List of PDThread objects representing threads
2198 Removes V4.5 encryption filters. Clears CF, STM_F, and STR_F entries in the dictionary.
2199 Sets the list of output intents for the document. @param outputIntents List of PDOutputIntent objects representing output intents
2200 Initializes a new FDFAnnotation with an empty COSDictionary. Sets the annotation type to "Annot".
2201 Sets the crop box of the PDF page. @param cropBox PDRectangle defining the crop area or null to remove it
2202 Sets the annotation's color. @param c Color object to set; null for no color
2203 Sets the content streams of the PDF page. @param contents list of PDStream objects representing the content streams
2204 Sets rich content text for the annotation. @param rc rich content string to be set
2205 Sets thread beads on the page. @param beads list of PDThreadBead objects representing thread beads
2206 Sets the interior color of the circle annotation. @param color the desired interior color or null for default
2207 Sets annotations on the PDF page. @param annotations list of PDAnnotation objects to add
2208 Sets the callout coordinates for the annotation. @param callout array of float values representing the callout points
2209 Sets the viewports for the PDF page. @param viewports list of PDViewportDictionary objects to set
2210 Sets the ink list for an annotation. @param inklist List of float arrays representing ink points
2211 Initializes a new PDPageTree with an empty page structure. Sets up the root dictionary and initializes necessary attributes.
2212 Sets the coordinates of the line annotation. @param line array containing start and end coordinates [x1, y1, x2, y2]
2213 Adds an element to the list and updates parent dictionary. @param o element to add @return true if added successfully
2214 Sets the interior color of the line annotation. @param color the desired color for the interior, or null to remove it
2215 Clears all COSBase objects and updates the parent dictionary.
2216 Sets the vertex coordinates of the polygon. @param vertices array of float values representing the vertices
2217 Sets an element at the specified index. @param index position in the list @param element new element to set @return previous element at the specified index @throws UnsupportedOperationException if the list is filtered
2218 Sets the interior color of the polygon annotation. @param color the Color object representing the interior color
2219 Sets the vertex coordinates of the polyline. @param vertices array of float values representing vertex coordinates
2220 Adds an element at the specified index. Handles conversion to COSString for String elements. Throws UnsupportedOperationException if adding in a filtered list. @param index position where the element should be added @param element the element to add
2221 Sets the interior color of the polyline annotation. @param color the Color object representing the interior color
2222 Sets the interior color of the annotation. @param color the Color to set, or null for no fill
2223 Puts a key-value pair into the dictionary. @param key String key to be converted to COSName @param value COSObjectable value to store in PDF format @return previous value associated with the key or null if none
2224 Sets the coordinates for the text markup annotation. @param coords array of float values representing the coordinates
2225 Converts page labels to a COS object. @return COSDictionary representing the page labels
2226 Sets the document ID in the FDF dictionary. @param id COSArray representing the document ID
2227 Initializes a new PDF complex file specification. Sets up an empty dictionary and specifies the type as 'Filespec'.
2228 Sets form fields in the FDF document. @param fields list of FDFField objects representing form fields
2229 Constructs a PDComplexFileSpecification from a given dictionary. @param dict existing COSDictionary or null for a new one
2230 Sets the list of FDF pages. @param pages list of FDFPage objects to be set
2231 Sets the range values for the PDF function. @param rangeValues COSArray containing the range values
2232 Sets annotations in the FDF document. @param annots list of FDFAnnotation objects to set
2233 Sets the domain values for the PDF function. @param domainValues COSArray containing domain limits
2234 Sets the differences stream in the FDF document. @param diff COSStream containing difference data
2235 Sets encoding values for the function. @param encodeValues COSArray containing encoding values
2236 Sets the list of embedded FDF files. @param embedded list of PDFileSpecification objects representing embedded FDFs
2237 Sets the decode values for the function. @param decodeValues COSArray containing decode parameters
2238 Sets the child fields of the current FDFField. @param kids list of child FDFField objects
2239 Sets the K value in the COS dictionary. @param k COSBase object representing the K value to set or null to remove
2240 Sets the field's value. @param value the value to set (String, List<String>, or COSObjectable) @throws IOException if an error occurs during setting the value
2241 Sets the class map for the structure tree. @param classMap mapping of class names to attributes or lists of PDAttributeObjects
2242 Sets the value of the form field. @param value the COSBase value to set
2243 Sets user properties for the document. @param userProperties list of PDUserProperty objects to set
2244 Sets the field flags for a form field. @param ff integer representation of field flags
2245 Sets the line dash pattern for guidelines. @param dashArray COSArray representing the dash pattern or null to clear it
2246 Sets the field flags for this form field. @param ff integer representing field flags
2247 Sets the cryptographic filter method. @param cfm COSName representing the encryption method
2248 Sets clear field flags for the form field. @param ff integer representing the clear field flags
2249 Sets the encryption filter. @param filter name of the filter to apply
2250 Sets widget field flags. @param f integer representing field flags
2251 Sets the owner encryption key. @param o byte array of the owner key @throws IOException if an error occurs during setting
2252 Sets widget field flags. @param ff field flag values as an integer
2253 Sets the user encryption key. @param u byte array representing the user key @throws IOException if an I/O error occurs
2254 Sets the clear widget field flags. @param ff integer representing field flags
2255 Sets rich text value of the field. @param rv COSString containing rich text content
2256 Sets the owner encryption key for the PDF document. @param oe byte array representing the owner encryption key
2257 Sets the rich text stream for the field. @param rv COSStream containing rich text data
2258 Sets the user encryption key for PDF document. @param ue byte array representing the user encryption key
2259 Sets JavaScript code to execute before form submission. @param before JavaScript code string
2260 Sets the encryption recipients for a PDF document. @param recipients byte arrays representing recipient data @throws IOException if an I/O error occurs
2261 Sets JavaScript code to execute after form submission. @param after JavaScript code as a string
2262 Sets the stream filter name for encryption. @param streamFilterName COSName representing the stream filter
2263 Sets JavaScript actions for document-level events. @param map mapping of event names to PDActionJavaScript objects
2264 Sets the string filter name in the encryption dictionary. @param stringFilterName COSName representing the string filter
2265 Sets the list of templates for the FDF page. @param templates list of FDFTemplate objects to be set
2266 Sets document permissions from byte array. @param perms byte array representing permissions
2267 Sets form fields in the FDF template. @param fields list of FDFField objects to be added
2268 Removes V4.5 encryption filters. Clears CF, STM_F, and STR_F entries in the dictionary.
2269 Initializes a new FDF annotation with default properties.
2270 Builds the font widths array for CID to GID mapping. @param cidToGid mapping of CIDs to GIDs @throws IOException if an I/O error occurs
2271 Sets the annotation's color. @param c Color object to set or null for no color
2272 Sets rich content of the annotation. @param rc rich content string to be set
2273 Sets the interior color of the circle annotation. @param color Color object representing the desired interior color
2274 Initializes a PDFont object with default settings. Sets up the font dictionary and initializes other attributes to null or empty.
2275 Initializes a new PDFontDescriptor with a font description dictionary.
2276 Sets the callout line points for the annotation. @param callout array of float values representing the callout points
2277 Sets the font name for the PDF descriptor. @param fontName the font name to set
2278 Sets the ink list for the annotation. @param inklist List of float arrays representing ink coordinates
2279 Sets the coordinates of the line annotation. @param line array of float values representing line points
2280 Sets the font family for the PDFontDescriptor. @param fontFamily the name of the font family to set
2281 Sets the font stretch attribute. @param fontStretch the font stretch value as a string
2282 Sets the interior color of the line annotation. @param color Color object representing the new interior color or null for no color
2283 Sets the font bounding box for the font descriptor. @param rect PDRectangle representing the font bounding box
2284 Sets the vertices of the polygon annotation. @param vertices array of float values representing vertex coordinates
2285 Sets the character set for the font. @param charSet the character encoding to be used
2286 Sets the interior color of the polygon. @param color Color object representing the interior color
2287 Sets the gamma correction value. @param value the gamma value to apply
2288 Sets the vertex coordinates of the polyline annotation. @param vertices array of float values representing vertex coordinates
2289 Sets the gamma values for color transformation. @param gamma PDGamma object containing gamma settings or null to reset
2290 Sets the interior color of the polyline annotation. @param color Color object representing the new interior color or null to reset
2291 Sets the transformation matrix for color space. @param matrix the transformation matrix to apply
2292 Sets the interior color of the annotation. @param color Color object to set or null for no color
2293 Sets coordinates for text markup annotation. @param coords array of float values representing coordinates
2294 Sets the colorants for the DeviceN color space. @param colorants map of colorant names to PDColorSpace objects
2295 Sets the document ID in the FDF dictionary. @param id COSArray representing the document ID
2296 Initializes a transparency group with default settings. Sets up the underlying COSDictionary for managing transparency attributes.
2297 Sets form fields in the FDF document. @param fields list of FDFField objects to be added
2298 Sets image filters. @param filters list of filter names
2299 Sets the list of FDFPage objects in the document. @param pages List of FDFPage objects representing the pages to set
2300 Sets annotations in the FDF document. @param annots list of FDFAnnotation objects to set
2301 Sets the differences stream in the FDF document. @param diff COSStream representing the differences data
2302 Sets embedded FDF files. @param embedded list of PDFileSpecification objects
2303 Initializes a new optional content membership dictionary. Sets the dictionary type to "OCMD".
2304 Sets child fields for this FDFField. @param kids list of child FDFFields
2305 Sets the visibility policy for optional content. @param visibilityPolicy COSName representing the visibility policy
2306 Sets the transformation matrix for the pattern. @param transform the AffineTransform object defining the matrix
2307 Sets the value of the field. @param value the value to set (String, List<String>, or COSObjectable) @throws IOException if an error occurs during setting the value
2308 Sets the bounding box for the tiling pattern. @param bbox PDRectangle object representing the bounding box, or null to remove it
2309 Sets the value of the form field. @param value COSBase object representing the new field value
2310 Sets the background color for shading. @param newBackground COSArray representing the background color
2311 Sets the field flags for the form field. @param ff integer representing the field flags
2312 Sets the bounding box for the shading. @param newBBox PDRectangle representing the new bounding box
2313 Sets the field flags for the form field. @param ff integer representing field flags
2314 Sets clear field flags for the form field. @param ff integer representing the clear field flags
2315 Sets the color space for shading. @param colorSpace PDColorSpace object to set, or null to remove
2316 Sets widget field flags. @param f integer representing field flags
2317 Sets the shading functions. @param newFunctions array of COSArray representing the functions
2318 Sets widget field flags. @param ff integer representing field flags
2319 Sets the transformation matrix for the shading. @param transform the AffineTransform object representing the matrix
2320 Sets the clear widget field flags. @param ff integer representing field flags
2321 Sets the domain for the shading. @param newDomain COSArray representing the domain values
2322 Sets rich text value for the field. @param rv COSString representing the rich text value to be set
2323 Sets the extend values for the shading. @param newExtend COSArray containing extend values
2324 Sets rich text content for the field. @param rv COSStream containing rich text data
2325 Sets the domain array for the shading. @param newDomain COSArray representing the domain values
2326 Sets the "Before" JavaScript action. @param before JavaScript code to execute before form submission
2327 Sets the coordinates for the shading. @param newCoords array of coordinates to be set
2328 Sets JavaScript action to be executed after form processing. @param after script to execute post-processing
2329 Sets decode values for shading. @param decodeValues array of decode values to be set
2330 Sets JavaScript actions for document-level scripts. @param map key-value pairs of script names and PDActionJavaScript objects
2331 Initializes a new extended graphics state. Sets the dictionary type to 'ExtGState' and clears the cache.
2332 Sets the list of templates for this FDF page. @param templates list of FDFTemplate objects representing page templates
2333 Sets the blend mode for graphics rendering. @param bm the BlendMode to apply
2334 Sets the list of form fields in the FDF template. @param fields List of FDFField objects representing form fields
2335 Sets a float item in the dictionary. @param key the COSName key for the item @param value the Float value to store, or null to remove the item
2336 Sets the transfer function in the graphics state. @param transfer COSBase object representing the transfer function
2337 Builds the font widths array for CID to GID mapping. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
2338 Sets the TR2 (transfer function 2) in the graphics state. @param transfer2 COSBase value representing the transfer function
2339 Sets the list of subsequent actions. @param next list of PDAction objects to execute next
2340 Constructs a new PDFont object. Initializes the COSDictionary and sets the font type to "Font".
2341 Sets the 'T' item in the action dictionary. @param t the COSBase value to store for the 'T' item
2342 Constructs a PDFontDescriptor with default settings. Initializes the font descriptor dictionary and sets its type to "FontDescriptor".
2343 Sets the 'H' flag to control element visibility. @param h boolean value indicating whether elements should be hidden
2344 Sets the font name for the PDF descriptor. @param fontName the name of the font to set
2345 Sets the font family for the PDF font descriptor. @param fontFamily the name of the font family to set
2346 Sets the fields to be reset in the PDF form. @param array COSArray containing field names to reset
2347 Sets the font stretch attribute. @param fontStretch the font stretch value as a string
2348 Sets the sound content for this action. @param sound COSStream representing the audio data
2349 Sets the font bounding box. @param rect PDRectangle defining the bounding box dimensions
2350 Sets form fields for submission. @param array COSArray containing field names to be submitted
2351 Sets the character set for the font. @param charSet the character set to be used
2352 Sets gamma correction value. @param value the gamma value to be applied
2353 Sets the destination associated with the action. @param d the COSBase object representing the destination
2354 Sets the gamma values for the color space. @param gamma PDGamma object containing gamma values or null to remove
2355 Sets the 'B' parameter of the action. @param b the COSBase value to set as the 'B' parameter
2356 Sets the transformation matrix for color conversion. @param matrix the new transformation matrix to set
2357 Sets the relationship type for the target directory. @param relationship the relationship type (must be 'P' or 'C') @throws IllegalArgumentException if the relationship is not valid
2358 Sets the colorants for the DeviceN color space. @param colorants map of colorant names to PDColorSpace objects
2359 Initializes a new PDF annotation with default settings. Sets up an empty COSDictionary and marks it as an annotation.
2360 Initializes a new transparency group attributes object. Sets up the underlying COSDictionary with default settings.
2361 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the new bounds
2362 Sets the border of the annotation. @param borderArray COSArray representing the border properties
2363 Sets the list of image filters. @param filters list of filter names to apply
2364 Sets rectangle margin differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2365 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2366 Initializes a new PDOptionalContentMembershipDictionary with type set to OCMD.
2367 Sets the callout line coordinates for the annotation. @param callout array of float values representing the callout line points
2368 Sets the visibility policy for optional content. @param visibilityPolicy COSName representing the visibility policy
2369 Sets the ink list for the annotation. @param inkList 2D array of float coordinates representing paths
2370 Sets the transformation matrix for the pattern. @param transform AffineTransform object defining the matrix
2371 Sets the line coordinates. @param l array of float values representing line points
2372 Sets the bounding box for the tiling pattern. @param bbox PDRectangle representing the bounding box or null to remove it
2373 Sets the quadrilateral points defining the annotation's appearance. @param quadPoints array of float values representing the quad points
2374 Sets the background color array. @param newBackground COSArray representing the background colors
2375 Sets rich contents of the annotation. @param rc the rich content string to be set
2376 Sets the bounding box for the shading. @param newBBox PDRectangle representing the new bounding box or null to remove it
2377 Sets the vertices of the polygon annotation. @param points array of float values representing the vertices
2378 Sets the color space for shading. @param colorSpace PDColorSpace object representing the new color space
2379 Sets the vertices of the polyline. @param points array of float values representing vertex coordinates
2380 Sets the shading functions for the PDF. @param newFunctions array of COSBase objects representing functions
2381 Sets the parent markup annotation. @param annot the parent PDAnnotationMarkup object
2382 Sets the transformation matrix for the shading. @param transform AffineTransform object defining the matrix values
2383 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2384 Sets the domain values for the shading. @param newDomain COSArray containing the domain values
2385 Sets the extend values for the shading. @param newExtend COSArray containing the extend values
2386 Sets the quad points defining the text annotation area. @param quadPoints array of float values representing the quad points
2387 Initializes a new appearance dictionary with required normal state.
2388 Sets the domain for the shading. @param newDomain COSArray representing the new domain values
2389 Sets the dash pattern for the border style. @param dashArray COSArray representing the dash pattern
2390 Sets the coordinates for the shading. @param newCoords array of COSBase objects representing the coordinates
2391 Sets decode values for shading. @param decodeValues COSArray containing decode values
2392 Initializes a new PDSeedValue with an empty dictionary. Sets the dictionary type to 'SV' and marks it as direct.
2393 Sets the filter for digital signature. @param filter the COSName representing the filter type
2394 Initializes a new extended graphics state with default settings. Sets the dictionary type to EXT_G_STATE and initializes cache to null.
2395 Sets the blending mode for graphics. @param bm BlendMode object to apply
2396 Sets the subfilter for digital signature. @param subfilter list of subfilter names to be set
2397 Sets or removes a float item in the dictionary. @param key COSName representing the key @param value Float value to set or null to remove
2398 Sets the digest method for digital signatures. @param digestMethod list of allowed digest names @throws IllegalArgumentException if any digest name is not allowed
2399 Sets the list of signature reasons. @param reasons list of string reasons for signing
2400 Sets the transfer function for color transformations. @param transfer COSBase object representing the transfer function
2401 Sets the TR2 transfer function. @param transfer2 COSBase object representing the transfer function
2402 Sets the MDP (Manifest Document Permissions) for digital signature. @param mdp PDSeedValueMDP object representing permissions
2403 Sets the sequence of subsequent actions. @param next list of PDAction objects representing the next actions
2404 Sets the timestamp for the seed value. @param timestamp PDSeedValueTimeStamp object to set
2405 Sets the 'T' item in the action dictionary. @param t COSBase object representing the new value for 'T'
2406 Sets the legal attestation for digital signatures. @param legalAttestation list of string values representing legal attestations
2407 Sets the visibility flag 'H' in the PDF action. @param h boolean value indicating whether to hide elements
2408 Initializes a new PDSeedValueCertificate with a COSDictionary. Sets the type to SV_CERT and marks it as direct.
2409 Sets the subject attribute in the certificate. @param subjects list of byte arrays representing the subjects
2410 Sets the fields to be reset in the PDF form. @param array COSArray containing field names to reset
2411 Sets the Subject DN (Distinguished Name) attributes in the certificate. @param subjectDN list of maps containing attribute key-value pairs for the Subject DN
2412 Sets the sound stream for the action. @param sound COSStream representing the audio content
2413 Sets key usage extensions in the certificate. @param keyUsageExtensions list of key usage strings to be set
2414 Sets the form fields to be submitted. @param array COSArray containing field names to submit
2415 Sets the issuer list in the certificate. @param issuers list of issuer byte arrays
2416 Sets the destination for the action. @param d COSBase object representing the destination
2417 Sets the OID (Object Identifier) in the certificate. @param oidByteStrings list of byte arrays representing OIDs
2418 Sets the 'B' item in the PDF action. @param b COSBase object to set or null to remove
2419 Constructs a new PDSignature instance. Initializes an empty COSDictionary and sets the signature type to "Sig".
2420 Sets the relationship type for the target directory. @param relationship COSName representing the relationship (must be 'P' or 'C')
2421 Sets the type of the digital signature. @param type COSName representing the signature type
2422 Constructs a new PDAnnotation with an empty COSDictionary. Initializes the annotation type to "Annot".
2423 Sets the filter for the digital signature. @param filter the COSName representing the filter type
2424 Sets the annotation's rectangle dimensions. @param rectangle PDRectangle object defining new dimensions
2425 Sets the sub-filter type of the digital signature. @param subfilter COSName representing the sub-filter type
2426 Sets the border of the annotation. @param borderArray COSArray representing the border properties
2427 Sets the byte range for digital signature. @param range array of 4 integers defining the byte range
2428 Sets the contents of the digital signature. @param bytes raw byte array of the signature content
2429 Sets rectangle margin differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2430 Constructs a PDAcroForm for a given PDF document. Initializes form fields as an empty array in the document's dictionary. @param doc the PDF document to associate with this form
2431 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2432 Sets form fields in the PDF document. @param fields list of PDField objects representing form fields
2433 Sets the callout line points for the annotation. @param callout array of float values representing the callout points
2434 Sets the calculation order of form fields. @param fields list of PDField objects representing the form fields
2435 Sets the ink data for the annotation. @param inkList 2D float array representing ink paths
2436 Constructs a new PDF button. @param acroForm the AcroForm containing the button
2437 Sets the line coordinates. @param l array of float values representing line points
2438 Sets export values for the button. @param values list of export values to be set
2439 Sets the quadrilateral points defining the link's appearance. @param quadPoints array of 8 float values representing four corner points
2440 Initializes a new PDChoice field. @param acroForm the AcroForm containing the choice field
2441 Sets rich content text for the annotation. @param rc the rich content string to be set
2442 Sets child fields for the non-terminal field. @param children list of PDField objects representing child fields
2443 Sets the vertices of the polygon annotation. @param points array of float values representing vertex coordinates
2444 Sets the value of this non-terminal field. @param object the new COSBase value for the field
2445 Sets the vertices of the polyline. @param points array of float values representing vertex coordinates
2446 Sets the default value of the field. @param value the default COSBase value to be set
2447 Sets the parent markup annotation. @param annot PDAnnotationMarkup object representing the parent annotation
2448 Constructs a new PDSignatureField. @param acroForm the AcroForm containing the signature field
2449 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2450 Constructs a new PDF text field. @param acroForm the AcroForm containing the field
2451 Sets the quad points defining the text markup area. @param quadPoints array of float values representing the quad points
2452 Sets the default style string for the text field. @param defaultStyleString the new default style string, or null to remove it
2453 Initializes a new appearance dictionary for PDF annotations. Sets up the required 'N' (normal) appearance entry with an empty dictionary.
2454 Sets the rich text value for the PDF variable text field. @param richTextValue the rich text content to set, or null to remove it
2455 Sets the dash style of the border. @param dashArray COSArray representing the dash pattern
2456 Sets the coordinate system origin. @param coordSystemOrigin array of float values representing the new origin
2457 Initializes a new PDSeedValue with default settings. Sets up the internal dictionary and marks it as direct.
2458 Initializes a new PDThread with a COSDictionary. Sets the type to "Thread".
2459 Sets the digital signature filter. @param filter COSName representing the filter to be used
2460 Sets the transition direction. @param direction PDTransitionDirection object representing the direction
2461 Sets the sub-filter names for digital signature. @param subfilter list of sub-filter names to set
2462 Sets the transition duration. @param duration the duration in seconds
2463 Sets the digest method for digital signatures. @param digestMethod list of allowed digest names
2464 Sets the fly transition scale. @param scale the scaling factor for the fly transition
2465 Sets the digital signature reasons. @param reasons list of reasons for signing
2466 Sets whether the fly area is opaque. @param opaque true to make the fly area opaque, false otherwise
2467 Sets the MDP (Manual Document Preparation) settings for digital signatures. @param mdp PDSeedValueMDP object containing MDP configuration
2468 Adds all elements from a collection to the COSArrayList. @param c collection of elements to add @return true if this list changed as a result of the call @throws UnsupportedOperationException if adding is not permitted due to filtering
2469 Sets the timestamp for the seed value. @param timestamp PDSeedValueTimeStamp object to set or null to remove
2470 Processes font color setting from operands. @param operands list of COSBase objects representing color components @throws IOException if operand count is invalid
2471 Sets the legal attestation for the digital signature. @param legalAttestation list of strings representing legal attestations
2472 Initializes a new digital signature certificate. Sets the type to SV_CERT and marks the dictionary as direct.
2473 Sets the subject attribute of the certificate. @param subjects list of byte arrays representing the subject information
2474 Inserts all elements from a collection into the list at a specified position. Throws UnsupportedOperationException if the list is filtered. Updates parent dictionary if applicable. @param index position to insert elements @param c collection of COS objects to add @return true if the list was modified
2475 Adds all elements from another COSArray to this array. @param objectList the COSArray containing objects to add
2476 Sets the subject distinguished name (DN) for the certificate. @param subjectDN list of maps containing key-value pairs for each DN component
2477 Converts the COSArray to a float array. @return Array of floats representing the values in the COSArray
2478 Sets the key usage extensions in the certificate. @param keyUsageExtensions list of key usage extension strings
2479 Sets the issuer list in the certificate. @param issuers list of issuer byte arrays
2480 Converts COSArray to a list of Float values. @return List of Float values or null for non-COSNumber elements
2481 Sets the OID attribute in the certificate. @param oidByteStrings list of byte arrays representing OIDs
2482 Converts COSArray to a list of Integer objects. @return List of Integers, with null for non-COSNumber elements
2483 Constructs a new PDSignature instance. Initializes an empty COSDictionary and sets the type to 'Sig'.
2484 Sets the signature type in the PDF. @param type COSName representing the signature type
2485 Updates parent and structure type for entries in the given COSArray. @param kArray array of COSBase objects to update @param newParent new parent dictionary to set @param newStructureType new structure type to set, or null if not applicable
2486 Sets the filter for the digital signature. @param filter COSName representing the filter type
2487 Sets the sub-filter type of the digital signature. @param subfilter COSName representing the sub-filter type
2488 Sets the byte range for the digital signature. @param range array of four integers defining the byte range
2489 Sets the signature contents. @param bytes byte array of the signature content
2490 Retrieves the minimum value of the range. @return the minimum value as a float
2491 Initializes a new PDAcroForm instance for the given PDF document. @param doc the PDF document to manage forms for
2492 Retrieves the maximum value of the range. @return the maximum value as a float
2493 Sets the list of form fields in the PDF document. @param fields List of PDField objects representing form fields to be set
2494 Retrieves a PDGamma object by index. @param index position in the array @return PDGamma object or null if not found
2495 Sets the calculation order of form fields. @param fields list of PDField objects representing the order
2496 Constructs a PDButton instance. @param acroForm the form containing the button
2497 Sets the export values for the button. @param values list of string values to be exported
2498 Retrieves the string value of the option. @return decoded string representation of the COSString object
2499 Initializes a PDChoice field within an AcroForm. @param acroForm the form containing the choice field
2500 Retrieves the default appearance string of the FDF option. @return the default appearance string or null if not found
2501 Sets child fields for the non-terminal field. @param children list of child PDField objects
2502 Retrieves a BlendMode instance from a COSBase object. @param cosBlendMode COSBase object representing the blend mode @return Corresponding BlendMode or NORMAL if not found
2503 Sets the value of the non-terminal field. @param object COSBase object representing the new value
2504 Retrieves colorant names from the DeviceN color space. @return List of colorant names as strings
2505 Sets the default value of the field. @param value COSBase object representing the default value
2506 Retrieves the alternate color space. @return PDColorSpace object representing the alternate color space @throws IOException if an error occurs during retrieval or creation
2507 Constructs a PDSignatureField within a PDF form. Initializes the field type to signature and configures its widget properties. @param acroForm the form containing the signature field
2508 Constructs a PDTextField with an AcroForm. Initializes the text field within the given form. @param acroForm the form containing the text field
2509 Sets the default style string for the text field. @param defaultStyleString the default style string to apply or null to remove it
2510 Retrieves the colorant name from the array. @return The string representation of the colorant name or null if not found
2511 Sets the rich text value for the PDF variable text field. @param richTextValue the rich text content to set or null to remove
2512 Constructs a Matrix from a COSArray of numbers. @param array COSArray containing matrix elements in row-major order
2513 Sets the coordinate system origin in the PDF document. @param coordSystemOrigin array of float values representing the origin coordinates
2514 Retrieves or creates a COSName instance for the given PDF name and fetches its associated value. @param key the string representation of the PDF name @return the corresponding COSBase object or null if not found
2515 Initializes a new PDThread with a default COSDictionary. Sets the 'Type' entry to 'Thread'.
2516 Sets the transition direction. @param direction PDTransitionDirection object representing the direction
2517 Retrieves value by primary or secondary key. @param firstKey primary key to look up in the dictionary @param secondKey secondary key if primary lookup fails @return COSBase object or null if both keys are not found
2518 Sets the transition duration. @param duration duration of the transition in seconds
2519 Sets the scale factor for fly transition. @param scale the scaling factor to apply during transition
2520 Retrieves a COSName value by key. @param key the key to look up in the dictionary @return COSName object if found, otherwise null
2521 Sets whether the fly area is opaque. @param opaque boolean indicating opacity status
2522 Retrieves a COSDictionary by key. @param key the key to look up in the dictionary @return COSDictionary object or null if not found
2523 Adds all elements from the provided collection. @param c collection of COSBase objects to add @return true if this list changed as a result of the call @throws UnsupportedOperationException if adding to a filtered List
2524 Retrieves a COSStream object by key. @param key the key to look up in the dictionary @return COSStream object or null if not found or not a COSStream
2525 Processes and sets the font color for form fields based on operands. @param operands list of COSBase objects representing color components
2526 Retrieves a COSArray by key. @param key the key to look up in the dictionary @return COSArray object or null if not found or not an instance of COSArray
2527 Adds a collection of elements at a specified index. @param index insertion index @param c collection of COSBase objects to add @return true if the list was modified @throws UnsupportedOperationException if adding to a filtered list
2528 Retrieves a COSName value by key, returning default if not found. @param key the key to look up in the dictionary @param defaultValue the default COSName to return if key is not found or not a COSName @return the corresponding COSName object or the default value
2529 Adds all elements from the given COSArray to this array. @param objectList COSArray containing objects to add
2530 Converts the array to a float array. @return Array of floats representing the values in the COSArray
2531 Retrieves the string value associated with a given key. Handles COSName and COSString types, returning null for other types. @param key the key to look up in the dictionary @return the corresponding string value or null if not found
2532 Converts array to list of Floats. @return List of Float values or null for non-COSNumber elements
2533 Retrieves string value by key from the dictionary. @param key the key to look up in the dictionary @return decoded string or null if not found
2534 Converts COSArray to a list of Integer values. @return List of Integer objects, null for non-COSNumber elements
2535 Retrieves date value by key. @param key the key to look up in the dictionary @return Calendar object or null if not found or conversion fails
2536 Updates parent entry and structure type for each dictionary in the array. @param kArray COSArray containing entries to update @param newParent new parent dictionary reference @param newStructureType new structure type or null if not applicable
2537 Retrieves a long value associated with the given key. @param key the key to look up in the dictionary @param defaultValue the default value to return if the key is not found or not a COSNumber @return the long value or the default value if not applicable
2538 Retrieves a float value associated with a given key. @param key the key to look up in the dictionary @param defaultValue default value to return if key not found or not a COSNumber @return float value or default if not applicable
2539 Retrieves the minimum value of the range. @return the minimum value as a float
2540 Wraps page content in a save/restore graphics state pair. @param page PDPage to modify @throws IOException if I/O error occurs
2541 Retrieves the maximum value of the range. @return the maximum value as a float
2542 Retrieves a PDGamma color by index. @param index position of the color in the array @return PDGamma object or null if not found
2543 Retrieves content streams of the PDF page. @return Iterator over PDStream objects representing the page's content
2544 Checks if the page has any content streams. @return true if the page contains content, false otherwise
2545 Retrieves the option value as a string. @return the string representation of the FDF option
2546 Retrieves the default appearance string of the FDF option. @return the default appearance string or null if not found
2547 Converts a COSDictionary to a COSDictionaryMap with basic types. @param map the COSDictionary to convert @return COSDictionaryMap containing converted key-value pairs @throws IOException if an unknown object type is encountered
2548 Removes an attribute from the PDF structure element. @param attributeObject the attribute to remove
2549 Retrieves a BlendMode instance from a COSBase object. @param cosBlendMode the COSBase object representing the blend mode @return the corresponding BlendMode or NORMAL if not found
2550 Retrieves class names associated with the element. @return Revisions object containing class names and their revision numbers
2551 Retrieves colorant names from the DeviceN color space. @return List of colorant names as strings
2552 Removes a class name from the PDF structure element. @param className the class name to remove
2553 Retrieves the alternate color space. Initializes from COSBase object if not already set. @return PDColorSpace representing the alternate color space @throws IOException if there is an issue during retrieval or creation
2554 Appends a child node to the current structure node. @param object the child node to append
2555 Inserts a new child node before a specified reference node. @param newKid the new child node to insert @param refKid the reference node before which to insert
2556 Removes a child object from the current node. @param object the child object to remove @return true if the object was successfully removed, false otherwise
2557 Retrieves the colorant name from the array. @return The string representation of the colorant name or null if not found
2558 Retrieves the value associated with key "K". @return the corresponding COSBase object or null if not found
2559 Constructs a Matrix from a COSArray. @param array COSArray containing matrix elements
2560 Retrieves the value of the property. @return COSBase object representing the value, or null if not found
2561 Retrieves or creates a dictionary object by key. @param key the PDF name string @return COSBase object associated with the input key, or null if not found
2562 Checks if metadata encryption is enabled. @return boolean indicating whether metadata is encrypted; default is true
2563 Retrieves the owner encryption key for a PDF document. @return A byte array containing the owner encryption key, or null if not set. @throws IOException if an error occurs while accessing the dictionary.
2564 Retrieves value by first key, or second key if first is null. @param firstKey primary key to look up @param secondKey fallback key if first key is not found @return COSBase object or null if neither key exists
2565 Retrieves a COSName value by key. @param key the key to look up in the dictionary @return COSName object if found, otherwise null
2566 Retrieves the user encryption key. @return A copy of the user encryption key as a byte array, or null if not set. @throws IOException if an error occurs while accessing the dictionary.
2567 Retrieves the permissions associated with a PDF document. @return byte array containing permissions or null if not set @throws IOException if an I/O error occurs during retrieval
2568 Retrieves a COSDictionary object by key. @param key the key whose associated value is to be returned @return COSDictionary object or null if not found or not a COSDictionary
2569 Retrieves the page number of the annotation. @return page number or null if not set
2570 Retrieves a stream object by key. @param key the key for the desired stream @return COSStream object or null if not found
2571 Retrieves the COSBase value of the field. @return COSBase object representing the field's value or null if not found @throws IOException if the value is of an unknown type
2572 Retrieves a COSArray by key. @param key the key for the COSArray @return COSArray object or null if not found or not an instance of COSArray
2573 Retrieves the field flags for the form field. @return Integer representing field flags or null if not set
2574 Retrieves the set field flags for the form field. @return Integer value of the set field flags or null if not found
2575 Retrieves a COSName value by key. @param key the key to look up in the dictionary @param defaultValue returned if the key is not found or not a COSName @return the COSName associated with the key, or default value if not applicable
2576 Retrieves clear field flags. @return Integer value of clear field flags or null if not set
2577 Retrieves widget field flags. @return Integer representing field flags or null if not found
2578 Retrieves the string value associated with a given key. Handles COSName and COSString types. @param key the key whose associated value is to be returned @return the string representation of the value, or null if not found
2579 Retrieves the set widget field flags. @return Integer value of the set flags or null if not found
2580 Retrieves string value for a given key. @param key the key to look up in the dictionary @return decoded string if found, otherwise null
2581 Retrieves the clear widget field flags. @return Integer value of the clear widget field flags or null if not found
2582 Retrieves and converts a date value by key. @param key the key for the date value @return Calendar object or null if not found or conversion fails
2583 Retrieves the default width of CID font. Uses DW entry from dictionary if available, otherwise sets to 1000. @return default width value as float
2584 Retrieves the color space associated with the device. @return PDColorSpace object or null if not found @throws IOException if an error occurs while creating the color space
2585 Retrieves a long value associated with a given key. @param key the key whose associated value is to be returned @param defaultValue the default value to return if the key is not found or is not a COSNumber @return the long value associated with the specified key, or the default value if not applicable
2586 Retrieves the color space for the transparency group. @param resources PDF resources containing color space definitions @return PDColorSpace object representing the color space, or null if not set @throws IOException if an error occurs during retrieval
2587 Retrieves a float value associated with a key. @param key the key to look up in the dictionary @param defaultValue the default value to return if the key is not found or not a number @return the float value associated with the key, or the default value if not applicable
2588 Constructs a PDOptionalContentGroup from a COSDictionary. @param dict the COSDictionary representing the optional content group @throws IllegalArgumentException if the dictionary does not represent an OCG
2589 Wraps a page's content in save/restore graphics state operators. @param page the PDF page to modify @throws IOException if an I/O error occurs
2590 Initializes an optional content membership dictionary. @param dict the COSDictionary to associate with this property list @throws IllegalArgumentException if the dictionary is not of type OCMD
2591 Retrieves the overprint mode. @return Integer representing the overprint mode or null if not set
2592 Retrieves content streams of the page. @return Iterator over PDStream objects representing content streams
2593 Retrieves the soft mask associated with this graphics state. @return PDSoftMask object or null if not found
2594 Checks if the page has any content streams. @return true if the page contains content, false otherwise
2595 Retrieves a float value from the dictionary by key. @param key the COSName key to look up in the dictionary @return the float value or null if not found or not a COSNumber
2596 Converts a COSDictionary to a COSDictionaryMap with basic type objects. @param map the COSDictionary to convert @return COSDictionaryMap with String keys and Object values, or null if input is null
2597 Retrieves the transfer function object. @return COSBase object or null if not a valid COSArray of size 4
2598 Removes an attribute from the structure element. @param attributeObject the attribute to remove
2599 Retrieves the TR2 transfer function. @return COSBase object or null if invalid array size
2600 Retrieves class names associated with the PDF element. @return Revisions object containing class names and their revision numbers
2601 Retrieves the backdrop color array for the soft mask. @return COSArray representing the backdrop color or null if not set
2602 Removes a class name from the PDF structure. @param className the class name to remove
2603 Determines the window mode for opening the destination. @return OpenMode indicating whether to open in a new window or not
2604 Appends a child node to the current structure node. @param object the child node to append
2605 Retrieves the 'T' item from the action dictionary. @return COSBase object representing the 'T' item or null if not found
2606 Inserts a new child node before a reference child in the PDF structure. @param newKid the new child node to insert @param refKid the reference child node before which to insert the new node
2607 Determines the open mode for the launch action. @return OpenMode indicating how to open the file (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
2608 Removes a child node from the current structure node. @param object the COSBase object representing the child node to remove @return true if the child was successfully removed, false otherwise
2609 Retrieves the value associated with the key "K". @return the value associated with key "K", or null if not found
2610 Determines the window mode for opening a link. @return OpenMode indicating how to open the linked content
2611 Retrieves the value of the property. @return COSBase object representing the property's value, or null if not found
2612 Determines if metadata encryption is enabled. @return true if metadata should be encrypted, false otherwise
2613 Retrieves the owner encryption key. @return byte array of the owner's encryption key, or null if not set @throws IOException if an error occurs while accessing the dictionary
2614 Retrieves the named destination associated with this target. @return PDNamedDestination object or null if not found
2615 Retrieves the user encryption key. @return A copy of the user encryption key as a byte array, or null if not set. @throws IOException if an error occurs while accessing the dictionary
2616 Constructs a PDAnnotation instance from a COSDictionary. Initializes the annotation's dictionary and sets the TYPE to ANNOT if not already set. @param dict the underlying COSDictionary for the annotation
2617 Retrieves the permissions associated with the PDF document. @return byte array containing permission settings or null if not found
2618 Retrieves the contents of the signature. @return byte array containing signature data or empty array if not found
2619 Retrieves the page number of the annotation. @return page number or null if not specified
2620 Retrieves XFA resource from the form's dictionary. @return PDXFAResource object or null if not found
2621 Retrieves a list of options for the choice field. @return List of option strings available in the choice field
2622 Retrieves the COSBase value of the field. @return COSBase object representing the field's value, or null if not found @throws IOException if an unknown type is encountered
2623 Retrieves display values of options for a choice field. @return List of strings representing the display values
2624 Retrieves the field flags for the form field. @return Integer representing the field flags, or null if not set
2625 Retrieves the set field flags. @return Integer representing field flags or null if not found
2626 Retrieves the value associated with a given COSName. Handles both single and array values, converting them to strings. @param name the COSName key to look up in the dictionary @return List of string values or empty list if not found
2627 Retrieves clear field flags for the form field. @return Integer representing clear field flags, or null if not set
2628 Retrieves widget field flags. @return the integer value of field flags or null if not found
2629 Retrieves an inheritable attribute from the field or its ancestors. @param key the COSName of the attribute to fetch @return the COSBase value of the attribute, or null if not found
2630 Retrieves the set widget field flags. @return Integer representing the field flags or null if not found
2631 Retrieves the value of the non-terminal field. @return COSBase object representing the field's value or null if not found
2632 Retrieves clear widget field flags. @return Integer value of the clear widget field flags or null if not found
2633 Retrieves the field value as a string. @return field value as String or empty if not found
2634 Retrieves the default width of a CID font. @return The default width value, or 1000 if not specified in the dictionary
2635 Retrieves the default value of the field. @return the default value as a COSBase object or null if not found
2636 Returns string representation of the COSDictionary. @return string representation or error message if an exception occurs
2637 Retrieves the color space associated with the device. @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs during color space creation
2638 Collects all indirect object keys from the array and its nested structures. @param indirectObjects collection to store collected COSObjectKeys
2639 Retrieves the color space for this transparency group. @param resources PDF document resources for reference @return PDColorSpace object representing the color space, or null if not defined @throws IOException if an error occurs during retrieval
2640 Updates the highest object number in the document based on an imported page. @param importedPage the PDF page being imported
2641 Closes resources associated with visual signatures. Ensures both visualSignature and pdfSource are closed properly.
2642 Constructs a PDOptionalContentGroup from a COSDictionary. @param dict the COSDictionary representing the optional content group @throws IllegalArgumentException if the dictionary does not represent an OCG
2643 Constructs a PDOptionalContentMembershipDictionary from a COSDictionary. Validates that the dictionary represents an OCMD (Optional Content Membership Dictionary). @param dict the COSDictionary to initialize with
2644 Retrieves the overprint mode from the graphics state. @return Integer representing the overprint mode or null if not set
2645 Retrieves the soft mask associated with this graphics state. @return PDSoftMask object or null if not found
2646 Retrieves a float value from the dictionary for a given key. @param key the key to look up in the dictionary @return the float value associated with the key, or null if not found
2647 Retrieves the transfer function from the dictionary. @return COSBase object representing the transfer function or null if invalid
2648 Writes a COS object to the PDF output. @param key unique identifier for the object @param obj COSBase object to write @throws IOException if an I/O error occurs
2649 Retrieves the Transfer2 function from the graphics state. @return COSBase object representing Transfer2 or null if invalid
2650 Writes a PDF object reference to the output stream. @param obj the PDF object to write @throws IOException if an I/O error occurs
2651 Retrieves the backdrop color array for the soft mask. Initializes from dictionary if not already set. @return COSArray representing the backdrop color or null if not found
2652 Determines the window mode for opening the destination. @return OpenMode indicating whether to open in a new window or use user preference
2653 Retrieves the key for a given PDF object from the pool. @param object the COSBase object to find the key for @return the associated COSObjectKey or null if not found
2654 Retrieves the 'T' item from the action dictionary. @return COSBase representing the 'T' item (can be Dictionary, String, or Array)
2655 Adds a COSBase object to the pool. @param key unique identifier for the object @param object the COSBase object to add @return the actual COSObjectKey used or null if not added
2656 Determines the open mode for the launch action. @return OpenMode indicating how to open the file (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
2657 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if the object is present in the pool, false otherwise
2658 Creates PDF object streams for efficient storage. @return List of COSWriterObjectStream objects
2659 Determines the window mode for opening a link. @return OpenMode indicating how to open the link (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
2660 Processes and formats lines of text with specified alignment. @param lines list of Line objects to be processed @param isFirstParagraph flag indicating if the current paragraph is the first one @throws IOException if an I/O error occurs during processing
2661 Creates a JPEG image from a BufferedImage for inclusion in a PDF with default quality. @param document PDF document to associate with the image @param image input BufferedImage to encode @return PDImageXObject in JPEG format @throws IOException if an I/O error occurs
2662 Retrieves the named destination associated with the target directory. @return PDNamedDestination object or null if not found
2663 Initializes a PDICCBased object with a given PDDocument. @param doc the PDDocument to associate with this ICCBased color space
2664 Initializes a PDAnnotation from a COSDictionary. Ensures the dictionary has the correct type set. @param dict the COSDictionary representing the annotation
2665 Retrieves the contents of the signature. @return byte array containing the signature content, or empty if not found
2666 Initializes a PDPattern with specified resources and color space. @param resources PDF resources associated with the pattern @param colorSpace underlying color space for the pattern
2667 Retrieves the XFA resource from the PDF form. @return PDXFAResource object or null if not found
2668 Sets the list of optional content groups (OCGs). @param ocgs List of PDPropertyList objects representing OCGs
2669 Retrieves options for the choice field. @return List of option strings available in the choice field
2670 Sets the X-axis changes using an array of PDNumberFormatDictionary. @param changeXs array of PDNumberFormatDictionary objects representing X-axis changes
2671 Retrieves display values for choice options. @return List of strings representing the display values of options
2672 Sets the Y-axis changes using an array of number format dictionaries. @param changeYs array of PDNumberFormatDictionary objects representing Y-axis changes
2673 Retrieves the value associated with a given key from the dictionary. Handles both single and multi-value entries. @param name the key whose associated value is to be retrieved @return List of string values or empty list if not found
2674 Sets the distances in the dictionary. @param distances array of PDNumberFormatDictionary objects representing distances
2675 Sets the areas in the measurement dictionary. @param areas array of PDNumberFormatDictionary representing areas
2676 Retrieves an inheritable attribute from the field or its ancestors. @param key the COSName of the attribute to retrieve @return COSBase value of the attribute, or null if not found
2677 Sets the angles in the measurement dictionary. @param angles an array of PDNumberFormatDictionary objects representing angles
2678 Retrieves the value of the field. @return the COSBase object representing the field's value, or null if not found
2679 Sets line slopes in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
2680 Retrieves the value of the field as a string. @return the string representation of the field's value, or an empty string if not set
2681 Ensures the array grows to a specified size. @param size desired size of the array
2682 Retrieves the default value of the field. @return COSBase object representing the default value, or null if not set
2683 Returns string representation of the COSDictionary. @return dictionary as a string or error message if an exception occurs
2684 Clones a COSBase object based on its type. @param src source COSBase object to clone @param dstParent parent of the destination object @param currentPageDict current page dictionary for context @return cloned COSBase object or original if not clonable
2685 Collects all indirect object keys from the array. @param indirectObjects collection to store the keys
2686 Sets the decode parameters for the PDF stream. @param decodeParams list of decode parameters to set
2687 Updates the highest object number in the document based on imported page. @param importedPage the PDF page being imported
2688 Sets file decode parameters. @param decodeParams list of decode parameters to set
2689 Closes the visual signature and PDF source. Ensures resources are released properly.
2690 Sets the child nodes of this structure node. @param kids list of child nodes to be set
2691 Sets field options from a list of objects. @param options list of option values for the field
2692 Retrieves the range for a specific color component. @param n index of the color component @return PDRange object representing the range or default if not available
2693 Builds font widths for CID font. @param cidFont COSDictionary to store font widths @throws IOException if an I/O error occurs
2694 Sets the line dash pattern. @param dashPattern the PDLineDashPattern to apply
2695 Sets the guide line color. @param color PDColor object representing the new color
2696 Sets the color of the annotation. @param c PDColor object representing the color to set
2697 Writes a PDF object to the output stream. @param key unique identifier for the object @param obj COSBase object to be written @throws IOException if an I/O error occurs
2698 Sets the interior color of the line annotation. @param ic PDColor object representing the interior color
2699 Writes a PDF object reference to the output stream. @param obj the COSBase object to write
2700 Sets the interior color of the polygon annotation. @param ic PDColor object representing the new interior color
2701 Sets the interior color of the polyline. @param ic PDColor object representing the interior color
2702 Retrieves the COSObjectKey for a given COSBase object from the pool. @param object the COSBase object to find the key for @return the COSObjectKey associated with the object, or null if not found
2703 Sets the interior color of the annotation. @param ic PDColor object representing the new interior color
2704 Sets the border color of the annotation. @param c PDColor object representing the new border color
2705 Adds a COSBase object to the pool with a given or generated key. @param key unique identifier for the COSBase object @param object the COSBase object to add @return the actual key used to store the object, or null if not added
2706 Sets the background color of an annotation. @param c PDColor object representing the background color to set
2707 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
2708 Creates object streams for PDF compression. @return List of COSWriterObjectStream objects
2709 Processes and formats a list of lines for text alignment and display. @param lines List of Line objects to process @param isFirstParagraph Flag indicating if the first line is part of a new paragraph @throws IOException if an I/O error occurs during processing
2710 Creates a JPEG image from a BufferedImage with default quality. @param document PDDocument to which the image belongs @param image source BufferedImage @return PDImageXObject representing the JPEG image @throws IOException if I/O operations fail
2711 Creates a PDImageXObject from an input stream. @param document PDF document to add the image @param stream input stream containing JPEG data @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
2712 Initializes a PDICCBased object with a document and sets up the ICC profile structure. @param doc PDDocument to associate with this ICC color space
2713 Sets the font for text rendering. @param font PDFont object to be used for text
2714 Initializes a PDPattern with specified resources and color space. @param resources PDF resources associated with the pattern @param colorSpace underlying color space for the pattern
2715 Sets the tint transform function. @param tint PDFunction representing the tint transformation
2716 Sets the tint transformation function. @param tint PDFunction representing the tint transform
2717 Sets the list of optional content groups (OCGs) in the dictionary. @param ocgs List of PDPropertyList representing OCGs
2718 Creates a retranslated rectangle with original width and height. @return A new PDRectangle instance with dimensions set to current width and height
2719 Sets the X-axis changes using an array of PDNumberFormatDictionary objects. @param changeXs array of PDNumberFormatDictionary objects representing X-axis changes
2720 Sets the first color in the collection. @param colour PDGamma object representing the color
2721 Sets the Y-axis changes using an array of PDNumberFormatDictionary objects. @param changeYs array of PDNumberFormatDictionary representing Y-axis changes
2722 Sets the second color in the collection. @param colour PDGamma object representing the new color
2723 Sets the distances in the dictionary. @param distances array of PDNumberFormatDictionary objects representing distances
2724 Sets the start color of the PDF. @param colour PDGamma object representing the start color
2725 Sets the areas in the measurement dictionary. @param areas array of PDNumberFormatDictionary objects representing the areas
2726 Sets the end color using PDGamma. @param colour PDGamma object representing the end color
2727 Sets the angles in the measurement dictionary. @param angles array of PDNumberFormatDictionary objects representing angles
2728 Sets the line slopes in the PDF document. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
2729 Decrypts a PDF object using specified object and generation numbers. @param obj the PDF object to decrypt @param objNum PDF object number @param genNum PDF generation number @return decrypted COSBase or original if not applicable @throws IOException if an I/O error occurs during decryption
2730 Ensures the COSArray has at least the specified size. @param size desired minimum size of the array
2731 Sets an item in the dictionary by key and value. @param key string representation of the PDF name key @param value the COSObjectable value to store or null to remove
2732 Sets the AcroForm for the document. @param acroForm the PDAcroForm to set, or null to remove it
2733 Clones a COSBase object based on its type. @param src source COSBase object to clone @param dstParent parent for the cloned object @param currentPageDict current page dictionary @return cloned COSBase object or original if not array/dictionary
2734 Sets viewer preferences for the PDF document. @param prefs PDViewerPreferences object containing viewer settings
2735 Sets decode parameters for the PDF stream. @param decodeParams list of decode parameters to set
2736 Sets the document outline. @param outlines PDDocumentOutline object to be set
2737 Sets file decode parameters. @param decodeParams list of decode parameters to set
2738 Sets the metadata of the PDF document. @param meta PDMetadata object containing metadata information
2739 Sets child nodes (kids) of the structure node. @param kids list of child nodes to set
2740 Sets the open action for the document. @param action the PDDestinationOrAction to execute on opening
2741 Sets the options for a form field. @param options list of option values to set
2742 Sets additional actions for the document catalog. @param actions the additional actions to be set
2743 Retrieves the color component range. @param n index of the color component @return PDRange object representing the range for the specified component
2744 Sets the document's name dictionary. @param names PDDocumentNameDictionary containing named destinations and other names
2745 Builds and sets font widths for CID font. @param cidFont COSDictionary representing the CID font @throws IOException if an I/O error occurs
2746 Sets the mark information in the document catalog. @param markInfo the PDMarkInfo object to store
2747 Sets the line dash pattern. @param dashPattern PDLineDashPattern object to apply
2748 Sets the URI dictionary in the document catalog. @param uri PDURIDictionary object containing URI information
2749 Sets the guideline line color. @param color PDColor object representing the new color or null to reset
2750 Sets the structure tree root of the document. @param treeRoot PDStructureTreeRoot object representing the structure tree
2751 Sets the color of the annotation. @param c PDColor object representing the new color
2752 Sets page labels for the document. @param labels PDPageLabels object containing page label configurations
2753 Sets the interior color of the line annotation. @param ic PDColor object representing the new interior color
2754 Sets destination tree node in the name dictionary. @param dests PDDestinationNameTreeNode to set
2755 Sets the interior color of the polygon annotation. @param ic PDColor object representing the new interior color
2756 Sets the embedded files node in the document. @param ef PDEmbeddedFilesNameTreeNode representing embedded files
2757 Sets the interior color of the polyline annotation. @param ic PDColor object representing the new interior color
2758 Sets the JavaScript dictionary in the PDF document. @param js PDJavascriptNameTreeNode representing JavaScript elements to be set
2759 Sets the interior color of the annotation. @param ic PDColor object representing the new interior color
2760 Initializes a new PDF page with specified media box. @param mediaBox the dimensions of the page
2761 Sets the border color of an annotation. @param c PDColor object representing the new border color
2762 Sets the resources for this PDF page. @param resources PDResources object containing page resources or null to remove
2763 Sets the background color of an annotation. @param c PDColor object representing the new background color
2764 Sets the media box dimensions for the PDF page. @param mediaBox the new media box rectangle or null to remove it
2765 Sets the bleed box for the page. @param bleedBox the new bleed box rectangle or null to remove it
2766 Sets the trim box for the PDF page. @param trimBox PDRectangle representing the trim box or null to remove it
2767 Sets the art box for the PDF page. @param artBox the new art box rectangle or null to remove it
2768 Sets the content stream of the PDF page. @param contents PDStream containing the page's content
2769 Sets metadata for the PDF page. @param meta PDMetadata object containing metadata to be set
2770 Creates a PDImageXObject from an input stream. @param document PDF document to add the image @param stream input stream containing JPEG data @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
2771 Sets additional actions for the page. @param actions PDPageAdditionalActions object containing actions to be set
2772 Sets the font for the document. @param font PDFont object to apply
2773 Sets the transition effect for the page. @param transition PDTransition object representing the transition effect
2774 Sets the tint transformation function. @param tint PDFunction representing the tint transform
2775 Sets the tint transformation function. @param tint PDFunction representing the tint transform
2776 Sets the transition effect and its duration for the page. @param transition PDTransition object representing the transition effect @param duration float value in seconds for the transition duration
2777 Creates a new PDRectangle with the same dimensions. @return A new PDRectangle instance with identical width and height
2778 Sets the associated page for the marked content reference. @param page PDPage object representing the page to be set
2779 Sets the first color in the collection. @param colour PDGamma object representing the color
2780 Sets the referenced annotation in the PDF object. @param annotation the PDAnnotation to be associated with this reference
2781 Sets the second color in the collection. @param colour PDGamma object representing the new color
2782 Sets the referenced XObject. @param xobject the PDXObject to reference
2783 Sets the associated page. @param page PDPage to be set as the referenced page
2784 Sets the start color using PDGamma. @param colour PDGamma object representing the start color
2785 Sets the parent node of the structure element. @param structureNode the parent PDStructureNode to set
2786 Sets the end color of the four colors. @param colour PDGamma object representing the end color
2787 Sets the page associated with this structure element. @param page PDPage object to be set
2788 Sets attributes for the structure element. @param attributes list of attribute objects with revisions
2789 Decrypts a PDF object based on its type. @param obj the PDF object to decrypt @param objNum PDF object number @param genNum generation number of the PDF object @return decrypted COSBase or original if not applicable @throws IOException on I/O errors
2790 Sets the ID tree node. @param idTree the new ID tree node to set
2791 Sets an item in the dictionary using a string key. @param key string representation of the key @param value object to set or null to remove
2792 Sets the parent tree node. @param parentTree PDNumberTreeNode representing the parent structure
2793 Sets the AcroForm for the document. @param acroForm PDAcroForm object to set or null to remove
2794 Sets the bounding rectangle of the annotation. @param rectangle PDRectangle defining the new bounds
2795 Sets viewer preferences for the PDF document. @param prefs PDViewerPreferences object containing viewer settings
2796 Sets the border style of the annotation. @param bs PDBorderStyleDictionary representing the new border style
2797 Sets the document outline. @param outlines PDDocumentOutline object representing the document's outline structure
2798 Sets the border effect of the annotation. @param be PDBorderEffectDictionary representing the new border effect
2799 Sets the document's metadata. @param meta PDMetadata object containing metadata details
2800 Sets the fringe dimensions of the caret annotation. @param fringe PDRectangle representing the new fringe dimensions
2801 Sets the open action for the document. @param action PDDestinationOrAction to define the action on opening
2802 Sets the fringe dimensions of the circle annotation. @param fringe PDRectangle representing the fringe size
2803 Sets additional actions for the document catalog. @param actions PDDocumentCatalogAdditionalActions object containing actions
2804 Sets the fringe rectangle of the annotation. @param fringe PDRectangle representing the fringe area
2805 Sets the document's name dictionary. @param names PDDocumentNameDictionary object containing names
2806 Sets the fringe dimensions of the annotation. @param fringe PDRectangle representing the fringe dimensions
2807 Sets the FDF dictionary in the catalog. @param fdf the FDFDictionary to set
2808 Sets the Mark Info dictionary in the document catalog. @param markInfo PDMarkInfo object to be set or null to remove
2809 Sets the digital signature in the FDF catalog. @param sig PDSignature object representing the signature to be set
2810 Sets the URI dictionary in the document catalog. @param uri PDURIDictionary object to be set
2811 Sets the file specification for the FDF document. @param fs PDFileSpecification object representing the file
2812 Sets the structure tree root of the document. @param treeRoot PDStructureTreeRoot object representing the document's structure tree
2813 Sets JavaScript associated with the FDF document. @param js FDFJavaScript object containing script details
2814 Sets page labels for the PDF document. @param labels PDPageLabels object containing page label settings
2815 Sets the FDF catalog in the document's trailer. @param cat the FDFCatalog to set
2816 Sets destinations in the document's name dictionary. @param dests PDDestinationNameTreeNode representing the destinations
2817 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary object representing the appearance settings
2818 Sets the embedded files node in the document. @param ef PDEmbeddedFilesNameTreeNode representing the embedded files
2819 Sets the appearance stream reference for the field. @param ref FDFNamedPageReference object representing the appearance stream
2820 Sets the JavaScript dictionary in the PDF document. @param js PDJavascriptNameTreeNode object representing the JavaScript elements
2821 Sets the icon fit properties for the field. @param fit FDFIconFit object defining the icon fit settings
2822 Constructs a new PDPage with specified dimensions. @param mediaBox the size and orientation of the page
2823 Sets an action associated with the form field. @param a PDAction object representing the action to be set
2824 Sets the resources for this PDF page. @param resources PDResources object containing the resources to set
2825 Sets additional actions for the form field. @param aa PDAdditionalActions object representing the actions to be set
2826 Sets the media box of the PDF page. @param mediaBox PDRectangle representing the new media box or null to remove it
2827 Sets the fractional space to allocate for the icon. @param space PDRange representing the space allocation
2828 Sets or removes the bleed box of the PDF page. @param bleedBox PDRectangle representing the bleed box or null to remove it
2829 Sets the file specification for the named page reference. @param fs PDFileSpecification object representing the file spec
2830 Sets the trim box for the PDF page. @param trimBox PDRectangle representing the trim box or null to remove it
2831 Sets page information. @param info FDFPageInfo object containing page details
2832 Sets the art box for the PDF page. @param artBox PDRectangle representing the art box or null to remove it
2833 Sets the template reference in the FDF document. @param tRef the FDFNamedPageReference to set
2834 Sets the content stream of the PDF page. @param contents PDStream representing the new content stream
2835 Sets metadata for the PDF page. @param meta PDMetadata object containing metadata to be set
2836 Sets additional actions for the page. @param actions PDPageAdditionalActions object containing page actions
2837 Sets the font file stream. @param type1Stream the PDStream containing the font data
2838 Sets the transition effect for the page. @param transition PDTransition object defining the transition effect
2839 Sets the font file stream for embedding TrueType fonts. @param ttfStream PDStream containing the TrueType font data
2840 Sets the font file stream for embedding in PDF. @param stream PDStream containing the font data
2841 Sets the transition and duration for the page. @param transition PDTransition object defining the transition effect @param duration float value specifying the transition duration in seconds
2842 Sets the CID set stream in the font descriptor. @param stream PDStream containing the CID set data
2843 Sets the associated page for marked content. @param page PDPage object representing the page
2844 Sets the referenced annotation in the PDF object. @param annotation PDAnnotation to be associated with the reference
2845 Sets the white point for the color space. @param whitepoint PDTristimulus object representing the white point coordinates
2846 Sets the referenced XObject. @param xobject PDXObject to be referenced
2847 Sets the black point for the color space. @param blackpoint PDTristimulus object representing the black point values
2848 Sets the associated page for this PDF object reference. @param page PDPage object to associate with this reference
2849 Sets the parent node of this structure element. @param structureNode the new parent node to set
2850 Sets the associated PDF page. @param page PDPage object to associate with this element
2851 Sets the extended graphics state for shading. @param extendedGraphicsState the PDExtendedGraphicsState to apply
2852 Sets the attributes for this structure element. @param attributes Revisions instance containing PDAttributeObjects
2853 Sets the shading resource for this pattern. @param shadingResources the PDShading object to apply
2854 Sets the ID tree node for the structure. @param idTree PDNameTreeNode containing structure elements by ID
2855 Sets the resources for the tiling pattern. @param resources the PDResources object to assign
2856 Sets the parent tree node for the structure. @param parentTree PDNumberTreeNode representing the parent tree
2857 Sets a new function for shading. @param newFunction PDFunction to be applied
2858 Sets the bounding rectangle of the annotation. @param rectangle PDRectangle defining the new bounds
2859 Sets font settings in the graphics state. @param fs PDFontSetting object containing font configuration
2860 Sets the border style of the annotation. @param bs PDBorderStyleDictionary representing the new border style
2861 Sets the destination for navigation within a PDF. @param d PDDestination object representing the target location
2862 Sets the border effect dictionary of the annotation. @param be PDBorderEffectDictionary representing the border effect
2863 Sets the file specification for the action. @param fs PDFileSpecification object representing the file to be specified
2864 Sets the fringe rectangle of the annotation. @param fringe PDRectangle representing the fringe dimensions
2865 Sets the target directory for the action. @param targetDirectory PDTargetDirectory object representing the target directory
2866 Sets the fringe dimensions of the circle annotation. @param fringe PDRectangle object defining the fringe size
2867 Sets the destination for this navigation action. @param d PDDestination object representing the target location
2868 Sets the rectangular area defining the annotation's fringe. @param fringe PDRectangle object representing the fringe dimensions
2869 Sets the file specification for the PDF action. @param fs PDFileSpecification object representing the file to be imported
2870 Sets the fringe dimensions of the annotation. @param fringe PDRectangle representing the new fringe dimensions
2871 Sets the file specification for the launch action. @param fs PDFileSpecification object representing the file to be launched
2872 Sets the FDF dictionary in the catalog. @param fdf FDFDictionary to be set
2873 Sets Windows-specific launch parameters. @param win PDWindowsLaunchParams object containing Windows-specific settings
2874 Sets the digital signature in the FDF catalog. @param sig PDSignature object representing the signature to be set
2875 Sets the file specification for the remote action. @param fs PDFileSpecification object representing the target file
2876 Sets the file specification in the FDF document. @param fs PDFileSpecification object to be set
2877 Sets the file specification for the form submission. @param fs PDFileSpecification object defining the file details
2878 Sets JavaScript associated with the FDF document. @param js FDFJavaScript object containing script details
2879 Sets the file specification for the action. @param fs PDFileSpecification object representing the file
2880 Sets the catalog for the FDF document. @param cat FDFCatalog object to be set as the root of the document
2881 Sets the "F" action in the dictionary. @param action PDAction to be associated with the key "F"
2882 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary object to be set
2883 Sets the "E" (Execute) action. @param e PDAction to define the execute behavior
2884 Sets the appearance stream reference for the field. @param ref FDFNamedPageReference object representing the appearance reference
2885 Sets the X action for this annotation. @param x the action to be performed on 'x' event
2886 Sets the icon fit settings. @param fit FDFIconFit object defining icon scaling and positioning
2887 Sets the "D" action for this annotation. @param d the action to be performed when the annotation is activated
2888 Sets an action associated with the field. @param a PDAction object representing the action to be set
2889 Sets the 'U' action for the annotation. @param u PDAction object representing the 'U' action
2890 Sets additional actions for the form field. @param aa PDAdditionalActions object containing actions to be set
2891 Sets the "FO" action for this annotation. @param fo the PDAction to be associated with the "FO" key
2892 Sets the fractional space to allocate for the icon. @param space PDRange defining the space allocation
2893 Sets the "BL" action for the annotation. @param bl the action to be associated with the "BL" key
2894 Sets the file specification for this named page reference. @param fs PDFileSpecification object representing the file specification
2895 Sets the action for opening a URI or file. @param po PDAction to be set for opening operation
2896 Sets page-specific information. @param info FDFPageInfo object containing page details
2897 Sets the template reference. @param tRef FDFNamedPageReference to be set
2898 Sets the page close action for the annotation. @param pc the action to be performed on page closure
2899 Sets the page view action. @param pv the PDAction representing the page view behavior
2900 Sets the print action for the annotation. @param pi the print action to be associated with the annotation
2901 Sets the Type 1 font file. @param type1Stream PDStream containing the font file data
2902 Sets the WC (Window Close) action. @param wc PDAction representing the window close action
2903 Sets the font file 2 stream. @param ttfStream PDStream containing TrueType font data
2904 Sets the action to be performed on document-wide settings changes. @param ws PDAction representing the action to trigger on settings change
2905 Sets the font file 3 stream. @param stream PDStream containing the font data
2906 Sets the document save action. @param ds the action to perform on document save
2907 Sets the CIDSet stream in the font descriptor. @param stream PDStream containing CIDSet data
2908 Sets the action triggered on window opening. @param wp PDAction to be executed when the window opens
2909 Sets the white point for the color space. @param whitepoint PDTristimulus object representing the white point coordinates
2910 Sets the document processing action. @param dp PDAction to be set as the document processing action
2911 Sets the black point for the color space. @param blackpoint PDTristimulus object representing the black point coordinates
2912 Sets the action associated with the 'K' key. @param k the PDAction to be set
2913 Sets the F (File) action for this form field. @param f the PDAction representing the file action to be set
2914 Sets the action associated with the 'V' key. @param v the PDAction to be set
2915 Sets the extended graphics state for shading. @param extendedGraphicsState PDExtendedGraphicsState object to apply
2916 Sets the 'C' action for this form field. @param c the PDAction to be set
2917 Sets the shading pattern resource. @param shadingResources PDShading object representing the shading pattern
2918 Sets the action associated with opening the page. @param o the PDAction to be executed on opening the page
2919 Sets resources for the tiling pattern. @param resources PDResources object containing pattern resources
2920 Sets the action associated with key 'C'. @param c the PDAction to set or null to remove it
2921 Sets a new shading function. @param newFunction PDFunction object representing the shading function
2922 Sets the target directory in the dictionary. @param targetDirectory PDTargetDirectory object to be set
2923 Sets font settings in the graphics state. @param fs PDFontSetting object containing font configuration
2924 Sets or removes a named destination. @param dest the PDNamedDestination to set, or null to remove
2925 Sets the destination for this action. @param d PDDestination object representing the target location
2926 Sets the appearance dictionary of the annotation. @param appearance the new appearance dictionary to use
2927 Sets the file specification for the action. @param fs PDFileSpecification object representing the target file
2928 Sets optional content property of the annotation. @param oc PDPropertyList representing the optional content settings
2929 Sets the target directory for the action. @param targetDirectory PDTargetDirectory object representing the target directory
2930 Sets the page associated with this annotation. @param page PDPage object to be set
2931 Sets the destination for the GoTo action. @param d PDDestination representing the target location in the PDF
2932 Sets the file specification for the attachment. @param file PDFileSpecification object representing the file details
2933 Sets the file specification for the PDF action. @param fs PDFileSpecification object representing the file to be imported
2934 Sets the border effect dictionary of the annotation. @param be the PDBorderEffectDictionary object representing the border effect
2935 Sets the file specification for the launch action. @param fs PDFileSpecification object representing the file to be launched
2936 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the rectangle difference
2937 Sets Windows-specific launch parameters. @param win PDWindowsLaunchParams object containing Windows launch settings
2938 Sets the action associated with the link annotation. @param action PDAction object representing the action to be performed
2939 Sets the file specification for the remote navigation action. @param fs PDFileSpecification object representing the target file
2940 Sets the border style of the link annotation. @param bs PDBorderStyleDictionary representing the new border style
2941 Sets the file specification for the form submission. @param fs PDFileSpecification object representing the file to submit
2942 Sets the destination for this link annotation. @param dest PDDestination object representing the target location
2943 Sets the file specification for the PDF action. @param fs PDFileSpecification object representing the file
2944 Sets the previous URI action for this link annotation. @param pa PDActionURI object representing the action to be performed
2945 Sets the "F" (file) action. @param action PDAction representing the file action to set
2946 Sets the popup annotation associated with this markup. @param popup PDAnnotationPopup object to be set or null to remove it
2947 Sets the "E" action for this annotation. @param e PDAction object representing the action to be executed
2948 Sets the annotation this one is in reply to. @param irt the parent annotation
2949 Sets the X action for the annotation. @param x PDAction object representing the X action
2950 Sets external data dictionary for the annotation. @param externalData PDExternalDataDictionary containing additional info
2951 Sets the default action for the annotation. @param d PDAction object representing the default action
2952 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object representing the border style
2953 Sets the action associated with the 'U' key. @param u PDAction object representing the action to be set
2954 Sets the border effect dictionary. @param be the border effect dictionary to apply
2955 Sets the "fo" action for the annotation. @param fo PDAction object representing the "fo" action
2956 Sets the border effect dictionary of the annotation. @param be the PDBorderEffectDictionary to apply, or null to remove it
2957 Sets the "BL" (Before Load) action for this annotation. @param bl PDAction object representing the action to be executed before loading
2958 Sets the rectangle difference for the annotation. @param rd PDRectangle object representing the rectangle difference
2959 Sets the action for opening a URI. @param po PDAction object representing the open URI action
2960 Sets appearance characteristics of the annotation. @param appearanceCharacteristics dictionary defining visual properties
2961 Sets the page close action for the annotation. @param pc PDAction representing the page close action to be set
2962 Sets the action associated with the annotation. @param action PDAction to be assigned to the annotation
2963 Sets the print view action. @param pv PDAction representing the print view behavior
2964 Sets additional actions for the annotation. @param actions PDAnnotationAdditionalActions object containing actions
2965 Sets the page initialization action. @param pi PDAction representing the page initialization action
2966 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object representing the border style
2967 Sets the WC (Window Close) action. @param wc PDAction representing the window close action
2968 Sets the "WS" (Will Save) action. @param ws PDAction object representing the action to be performed on document save
2969 Sets the parent terminal field of this annotation. @param field the PDTerminalField to set as parent @throws IllegalArgumentException if the field shares a dictionary with its only widget
2970 Sets the document save action. @param ds PDAction representing the save action to be set
2971 Sets the normal appearance of an annotation. @param entry PDAppearanceEntry representing the normal state appearance
2972 Sets the page opening action. @param wp PDAction representing the page opening action
2973 Sets the normal appearance of an annotation. @param ap the appearance stream for normal state
2974 Sets the Document Processing (DP) action. @param dp PDAction object representing the DP action to be set
2975 Sets the rollover appearance for the annotation. @param entry the PDAppearanceEntry representing the rollover state
2976 Sets the K action in the form field's additional actions. @param k PDAction object representing the action to be set
2977 Sets the rollover appearance stream. @param ap the PDAppearanceStream to be used for rollover state
2978 Sets the F action. @param f PDAction object to be set
2979 Sets the down appearance of the annotation. @param entry PDAppearanceEntry representing the down state appearance
2980 Sets an action for the 'V' key. @param v PDAction object to be associated with the 'V' key
2981 Sets the down appearance of the annotation. @param ap PDAppearanceStream representing the appearance when pressed
2982 Sets the action associated with key 'C'. @param c PDAction object to be set or null to remove
2983 Sets the filter property in the PDF dictionary. @param filter PDPropBuildDataDict object representing the filter
2984 Sets the open action for the PDF page. @param o PDAction representing the open action to be set
2985 Sets publication security properties in the PDF document. @param pubSec PDPropBuildDataDict containing publication security settings
2986 Sets an action associated with page closing. @param c PDAction object representing the action
2987 Sets application-specific data in the properties dictionary. @param app PDPropBuildDataDict containing application data
2988 Sets the target directory in the dictionary. @param targetDirectory PDTargetDirectory object to be set
2989 Sets the seed value certificate. @param certificate PDSeedValueCertificate object to be stored
2990 Sets or removes a named destination. @param dest PDNamedDestination object to set or null to remove
2991 Sets the property build information in the signature dictionary. @param propBuild PDPropBuild object containing property build details
2992 Sets the appearance of the annotation. @param appearance PDAppearanceDictionary object defining the visual appearance
2993 Sets default resources for form fields. @param dr PDResources object containing resources to be used as defaults
2994 Sets optional content property for this annotation. @param oc PDPropertyList representing the optional content group
2995 Sets the XFA form resource. @param xfa the PDXFAResource to be set
2996 Sets the page associated with this annotation. @param page PDPage object to be set as the annotation's target page
2997 Sets the digital signature value. @param value PDSignature object representing the signature @throws IOException if an I/O error occurs
2998 Sets the file specification for the attachment. @param file PDFileSpecification object representing the file details
2999 Sets the default signature value. @param value PDSignature object representing the default value
3000 Sets the border effect dictionary for the annotation. @param be PDBorderEffectDictionary object representing the border effect
3001 Sets the seed value for the signature field. @param sv PDSeedValue object to set as the seed value
3002 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the rectangle difference
3003 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions to be set
3004 Sets the action associated with this link annotation. @param action PDAction to be set for the link
3005 Sets the list of annotation widgets associated with this field. @param children list of PDAnnotationWidget objects to set as children
3006 Sets the border style of the annotation. @param bs PDBorderStyleDictionary defining the border style
3007 Sets the bounding box for the viewport. @param rectangle PDRectangle representing the new bounding box
3008 Sets the destination for this link annotation. @param dest PDDestination object representing the target location
3009 Sets the measurement dictionary for the viewport. @param measure PDMeasureDictionary containing measurement details
3010 Sets the previous URI action. @param pa PDActionURI object representing the URI action
3011 Sets document information for the thread. @param info PDDocumentInformation object to associate with the thread
3012 Sets the popup annotation associated with this markup. @param popup PDAnnotationPopup object to associate or null to remove
3013 Assigns a thread to the bead. @param thread the PDThread object to associate with this bead
3014 Sets the annotation in reply to another. @param irt PDAnnotation representing the parent annotation
3015 Sets the next bead in the thread. @param next the subsequent PDThreadBead object
3016 Sets external data dictionary. @param externalData PDExternalDataDictionary object to associate with the annotation
3017 Sets the previous bead in the thread. @param previous the preceding bead in the sequence
3018 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object representing the border style
3019 Sets the associated PDF page for this bead. @param page the PDPage to associate with this bead
3020 Sets the border effect dictionary. @param be PDBorderEffectDictionary object representing the border effect
3021 Sets the rectangle defining the bead's position. @param rect PDRectangle representing the new position
3022 Sets the border effect dictionary. @param be PDBorderEffectDictionary object representing the border effect
3023 Sets the marked status of the PDF element. @param value true if marked, false otherwise
3024 Sets rectangle difference for annotation. @param rd PDRectangle object representing the rectangle difference
3025 Sets the user properties flag in the PDF marking info. @param userProps true if user properties are enabled, false otherwise
3026 Sets appearance characteristics of the annotation. @param appearanceCharacteristics dictionary containing visual attributes
3027 Sets the suspect flag in the PDF marking info. @param suspect boolean indicating if the element is a suspect
3028 Sets an action for the annotation. @param action PDAction object representing the action to be performed
3029 Sets whether mouse position tracking is enabled. @param value true to enable, false to disable
3030 Sets additional actions for the annotation. @param actions PDAnnotationAdditionalActions object containing actions
3031 Sets the visibility of the popup annotation. @param open true to show, false to hide the popup
3032 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object representing the border style
3033 Sets the Fixed Decimal flag. @param fd true to enable fixed decimal, false otherwise
3034 Sets the parent field of this annotation. @param field PDTerminalField representing the parent field @throws IllegalArgumentException if the field shares a dictionary with its only widget
3035 Sets the volatile status of the file. @param fileIsVolatile true if the file is volatile, false otherwise
3036 Sets the normal appearance of the annotation. @param entry PDAppearanceEntry object representing the normal appearance
3037 Sets whether metadata should be encrypted. @param encryptMetaData flag indicating if metadata encryption is enabled
3038 Sets the normal appearance of the annotation. @param ap PDAppearanceStream representing the normal appearance
3039 Sets the rollover appearance of an annotation. @param entry PDAppearanceEntry representing the rollover appearance
3040 Sets the caption visibility of the line annotation. @param cap true to show caption, false to hide it
3041 Sets the rollover appearance of the annotation. @param ap PDAppearanceStream object representing the rollover appearance
3042 Sets whether the icon scales to fit within the annotation. @param value true if scaling is enabled, false otherwise
3043 Sets the down appearance of an annotation. @param entry PDAppearanceEntry representing the appearance state
3044 Sets the rename flag in the FDF template. @param value boolean indicating whether renaming is enabled
3045 Sets the down appearance of the annotation. @param ap PDAppearanceStream representing the down state appearance
3046 Sets the digital signature filter property. @param filter PDPropBuildDataDict object representing the filter
3047 Sets publication security properties. @param pubSec PDPropBuildDataDict containing security settings
3048 Sets the anti-aliasing property in the shading dictionary. @param antiAlias boolean value indicating whether to enable anti-aliasing
3049 Sets application-specific data in the digital signature properties. @param app PDPropBuildDataDict object containing application data
3050 Sets the stroking overprint control. @param op true to enable overprint, false otherwise
3051 Sets the seed value certificate. @param certificate PDSeedValueCertificate object to be set
3052 Sets non-stroking overprint control. @param op true to enable overprint, false otherwise
3053 Sets the property build information in the signature dictionary. @param propBuild PDPropBuild object containing property build details
3054 Sets automatic stroke adjustment. @param sa flag to enable or disable automatic stroke adjustment
3055 Sets default resources for form fields. @param dr PDResources object containing default resources
3056 Sets the alpha source flag in the graphics state. @param alpha true to enable alpha source flag, false otherwise
3057 Sets the XFA resource for the form. @param xfa PDXFAResource object representing the XFA data
3058 Sets the text knockout flag. @param tk true if text should be knocked out, false otherwise
3059 Sets the digital signature value. @param value PDSignature object representing the signature @throws IOException if an I/O error occurs
3060 Sets the window behavior for opening linked content. @param value the desired open mode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
3061 Sets the default signature value. @param value PDSignature object representing the default signature
3062 Sets the window behavior for launching a PDF action. @param value OpenMode specifying how to open the file (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
3063 Sets the seed value for the signature field. @param sv PDSeedValue object to set or null to remove
3064 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions
3065 Sets the window behavior for opening the linked content. @param value OpenMode indicating how to open the link (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
3066 Sets the list of widgets associated with this field. @param children List of PDAnnotationWidget objects to set as children
3067 Sets whether the sound action is synchronous. @param synchronous true if the sound should play synchronously, false otherwise
3068 Sets the bounding box for the viewport. @param rectangle PDRectangle object defining the new bounding box
3069 Sets whether the sound should repeat. @param repeat true to enable repetition, false otherwise
3070 Sets the measurement dictionary for the viewport. @param measure PDMeasureDictionary object containing measurement details
3071 Sets whether sound actions should be mixed. @param mix true to mix sounds, false otherwise
3072 Sets document information associated with the thread. @param info PDDocumentInformation object to be set
3073 Sets whether the line annotation has a caption. @param cap true if the line has a caption, false otherwise
3074 Assigns a thread to this bead. @param thread PDThread object representing the thread
3075 Sets whether the text annotation is open. @param open true if the annotation should be open, false otherwise
3076 Sets the next bead in the thread sequence. @param next the subsequent PDThreadBead object
3077 Sets the pre-release status of the digital signature. @param preRelease boolean indicating if it's a pre-release version
3078 Sets the previous bead in the thread. @param previous the preceding PDThreadBead object
3079 Sets whether to suppress warnings about non-embedded fonts. @param noEmbedFontWarning flag indicating if warnings should be suppressed
3080 Sets the associated page for this bead. @param page PDPage object to associate with the bead
3081 Sets the trusted mode flag in the digital signature properties. @param trustedMode boolean indicating if the document is in trusted mode
3082 Sets the rectangle defining the bead's position. @param rect PDRectangle object representing the new bounds
3083 Sets the need for appearances flag in the form. @param value true if appearance streams are required, false otherwise
3084 Sets the marked status of the PDF element. @param value true if the element is marked, false otherwise
3085 Sets toolbar visibility preference. @param value true to hide the toolbar, false to show it
3086 Sets the user properties flag in the PDF document's marking info. @param userProps true to enable user properties, false otherwise
3087 Sets whether the menu bar is hidden in the PDF viewer. @param value true to hide the menu bar, false to show it
3088 Sets the suspect flag in the PDF marking dictionary. @param suspect the boolean value to indicate if an element is suspected
3089 Sets whether to hide the window UI. @param value true to hide, false to show
3090 Sets whether mouse position tracking is enabled. @param value true to enable, false to disable
3091 Sets whether the viewer window should fit the page. @param value true to enable window fitting, false otherwise
3092 Sets the visibility state of the popup annotation. @param open true to show, false to hide the popup
3093 Sets whether the PDF window should be centered. @param value true to center the window, false otherwise
3094 Sets the fixed decimal flag. @param fd boolean value indicating if decimals are fixed
3095 Sets whether to display the document title. @param value true to display, false otherwise
3096 Sets the volatile status of the file. @param fileIsVolatile true if the file is volatile, false otherwise
3097 Sets whether metadata should be encrypted. @param encryptMetaData true to encrypt metadata, false otherwise
3098 Sets a string value in the dictionary using a PDF name. @param key the string representation of the PDF name key @param value the string value to be set
3099 Sets the page display mode for the PDF document. @param mode the desired PageMode to apply
3100 Sets whether the line annotation has a caption. @param cap true if the line should have a caption, false otherwise
3101 Sets the PDF document's page layout. @param layout the desired page layout configuration
3102 Sets whether the icon should scale to fit within its annotation. @param value true to enable scaling, false otherwise
3103 Sets the version of the PDF document. @param version the version string to be set
3104 Sets the rename flag in the FDF template. @param value boolean indicating whether renaming is enabled
3105 Sets the trapped state of the PDF document. @param value the trapped state ("True", "False", or "Unknown") @throws IllegalArgumentException if the value is not one of the valid options
3106 Sets the page label style. @param style the desired style for page labels or null to remove it
3107 Sets the anti-aliasing property. @param antiAlias boolean value to enable or disable anti-aliasing
3108 Initializes a new PDTypedDictionaryWrapper with a specified type. @param type the type name for the PDF object
3109 Sets the stroking overprint control. @param op true to enable overprint, false otherwise
3110 Sets the owner of the attribute. @param owner the name of the owner to be set
3111 Sets non-stroking overprint control. @param op boolean value for overprint setting
3112 Initializes a new instance of PDMarkedContentReference. Creates an empty COSDictionary and sets its type to "Marked Content".
3113 Sets automatic stroke adjustment. @param sa true to enable, false otherwise
3114 Initializes a new PDF object reference. Constructs an empty COSDictionary and sets its type to "ObjRef".
3115 Sets the alpha source flag in the graphics state. @param alpha boolean value indicating whether to use alpha for blending
3116 Sets the structure type of the PDF element. @param structureType the type of the structure to be set
3117 Sets the text knockout flag in the graphics state. @param tk true to enable text knockout, false otherwise
3118 Sets class names and their revisions for a PDF structure element. @param classNames Revisions object containing class names and revision numbers
3119 Sets the window behavior for opening linked content. @param value OpenMode specifying how to open the link
3120 Initializes a PDStructureNode with a specified type. @param type the type of structure node
3121 Sets the window behavior for launching an external file. @param value OpenMode specifying how to open the file (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
3122 Sets the guideline style. @param style the style to be applied to the guideline
3123 Sets the encryption sub-filter for the document. @param subfilter the name of the sub-filter to be used
3124 Sets the window behavior for opening linked content. @param value OpenMode specifying how to open the link (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
3125 Sets the annotation's intent. @param intent the purpose of the annotation
3126 Sets whether the sound action is synchronous. @param synchronous true if sound should play synchronously, false otherwise
3127 Sets the line ending style for the annotation. @param style the line ending style as a string
3128 Sets whether the sound should repeat. @param repeat true if sound should repeat, false otherwise
3129 Sets the icon for the annotation. @param icon the icon to be used for the annotation
3130 Sets whether the sound should be mixed with other sounds. @param mix true to mix, false otherwise
3131 Sets the version of the FDF document. @param version the version string to be set
3132 Sets whether the line annotation has a caption. @param cap boolean indicating if caption is present
3133 Sets the encoding for the FDF document. @param encoding the string representation of the encoding to be used
3134 Sets the open state of the annotation. @param open true if the annotation is open, false otherwise
3135 Sets the scale option for icon fitting. @param option the scaling option to apply
3136 Sets the pre-release status of the digital signature. @param preRelease boolean indicating if the signature is in pre-release mode
3137 Sets the scaling type for icon fitting. @param scale the scaling option (e.g., "Fit", "FitB")
3138 Sets whether to suppress warnings for non-embedded fonts. @param noEmbedFontWarning flag indicating if warnings should be suppressed
3139 Initializes a new instance of PDAbstractPattern with an empty COSDictionary. Sets the "Type" entry in the dictionary to "Pattern".
3140 Sets the trusted mode flag in the digital signature properties. @param trustedMode boolean indicating if the document is in trusted mode
3141 Sets the type of the PDF action. @param type the type string to be set
3142 Sets the need appearances flag in the form dictionary. @param value boolean indicating whether appearance streams are needed
3143 Sets the subtype of the PDF action. @param s the subtype string to be set
3144 Sets toolbar visibility preference. @param value true to hide toolbar, false to show
3145 Sets the subtype of the annotation. @param subType the subtype string to be set
3146 Sets whether the menu bar is hidden. @param value true to hide the menu bar, false otherwise
3147 Sets the appearance state of the annotation. @param as the new appearance state value
3148 Sets the attachment name. @param name the new attachment name
3149 Sets whether to hide window UI elements. @param value true to hide UI, false to show it
3150 Sets the line ending style for annotation callouts. @param style the line ending style as a string
3151 Sets whether the PDF viewer window should fit the page. @param value true to enable fitting the window to the page, false otherwise
3152 Sets the caption positioning for the line annotation. @param captionPositioning the positioning string for the caption
3153 Sets whether the PDF viewer window should be centered. @param value true to center the window, false otherwise
3154 Sets whether to display the document title in the viewer. @param value true to display, false otherwise
3155 Sets the highlight mode for the link annotation. @param mode the highlight mode to be applied (e.g., "Invert", "Outline")
3156 Sets the reply type of the annotation. @param rt the string representing the reply type
3157 Sets a PDF name in the dictionary using a string key and value. @param key string representing the key @param value string to be set as the value
3158 Sets the intent of the annotation. @param it the intent string to be set
3159 Sets the page mode of the PDF document. @param mode PageMode enum representing the desired page mode
3160 Sets the name of the rubber stamp annotation. @param name the name to be assigned to the annotation
3161 Sets the page layout of the PDF document. @param layout desired page layout configuration
3162 Sets the name of the annotation. @param name the new name for the annotation
3163 Sets the document version. @param version string representing the version to be set
3164 Sets the trapped attribute of the PDF document. @param value valid values are "True", "False", or "Unknown"
3165 Sets the highlighting mode of the annotation. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T' @throws IllegalArgumentException if invalid mode is provided
3166 Sets the border style. @param s the style of the border as a string
3167 Sets the page numbering style. @param style desired numbering style or null to remove it
3168 Initializes an external data dictionary. Sets up a COSDictionary with type "ExData".
3169 Initializes a new PDTypedDictionaryWrapper with a specified type. @param type the type name for the PDF dictionary
3170 Sets the subtype of the external data dictionary. @param subtype the subtype value to be set
3171 Sets the owner of the attribute. @param owner string representing the owner's name
3172 Sets the name property in the digital signature dictionary. @param name the name to be set
3173 Initializes a new instance of PDMarkedContentReference with an empty dictionary.
3174 Sets the URL type in the certificate. @param urlType the type of the URL to be set
3175 Initializes a new PDObjectReference with an empty COSDictionary. Sets the dictionary's type to "ObjRef".
3176 Initializes a new PDMeasureDictionary with an empty COSDictionary and sets its type.
3177 Sets the structure type of the PDF element. @param structureType string representing the structure type
3178 Sets the subtype of the measurement. @param subtype the string representing the subtype to be set
3179 Sets class names and their revision numbers for the PDF structure element. @param classNames Revisions object containing class names and associated revisions
3180 Initializes a new PDNumberFormatDictionary with an empty COSDictionary. Sets the type of the dictionary to "NumberFormat".
3181 Constructor initializes a PDF structure node. @param type node type identifier
3182 Sets the name of the viewport. @param name the new name for the viewport
3183 Sets the guideline style. @param style string representing the guideline style
3184 Initializes a new PDTransition with the specified style. @param style transition effect style
3185 Sets the subfilter for encryption. @param subfilter string representing the subfilter type
3186 Sets the transition dimension. @param dimension PDTransitionDimension value to define the transition area
3187 Sets the annotation's intent. @param intent purpose of the annotation (e.g., "Widget", "Screen")
3188 Sets the motion style of the transition. @param motion the PDTransitionMotion enum value representing the motion style
3189 Sets the line ending style of the annotation. @param style the line ending style to be applied
3190 Sets the icon for the annotation. @param icon string representing the icon name
3191 Sets the non-full screen page mode preference. @param value the desired page mode (use enum values)
3192 Sets the version of the FDF document. @param version string representing the document version
3193 Sets the reading direction preference. @param value the desired reading direction (e.g., LEFT_TO_RIGHT, RIGHT_TO_LEFT)
3194 Sets the document's encoding. @param encoding string representing the encoding type
3195 Sets the view area preference for PDF viewing. @param value the boundary type to define the view area
3196 Sets the scaling option for the icon. @param option scaling configuration as a string
3197 Sets the view clipping preference. @param value the boundary type for clipping the view
3198 Sets the scaling type for the icon. @param scale type of scaling to apply
3199 Sets the print area boundary preference. @param value the boundary type for printing
3200 Initializes a new PDAbstractPattern with an empty dictionary and sets its type to "Pattern".
3201 Sets the print clip boundary preference. @param value the boundary setting for printing
3202 Sets the action type in the PDF dictionary. @param type string representing the action type
3203 Sets duplex printing preference. @param value duplex option (SIMPLEX, DUPLEX_FLIP_SHORT_EDGE, DUPLEX_FLIP_LONG_EDGE)
3204 Sets the subtype of the action. @param s subtype string to be set
3205 Sets the print scaling preference. @param value the desired print scaling option
3206 Sets the subtype of the annotation. @param subType the subtype to be set
3207 Sets the appearance state of the annotation. @param as string representing the new appearance state
3208 Sets a date item in the dictionary. @param key the COSName key for the item @param date GregorianCalendar instance representing the date
3209 Sets the attachment name. @param name the new attachment name
3210 Sets a string item in the dictionary using a given key. @param key the string representation of the PDF name @param value the string value to store, or null to remove the item
3211 Sets the line ending style for the annotation. @param style string representing the line ending style
3212 Sets the document's language. @param language ISO 639-1 language code
3213 Sets the caption positioning for the line annotation. @param captionPositioning string indicating the caption position
3214 Sets the title of the PDF document. @param title the new title to set
3215 Sets the highlight mode of the link annotation. @param mode string representing the highlight mode
3216 Sets the document's author. @param author the name of the document's author
3217 Sets the reply type of the annotation. @param rt string representing the reply type
3218 Sets the subject of the PDF document. @param subject the subject to be set
3219 Sets the intent of the annotation. @param it the intent string to be set
3220 Sets the keywords of the PDF document. @param keywords comma-separated list of keywords
3221 Sets the name of the rubber stamp annotation. @param name string representing the annotation's name
3222 Sets the name of the annotation. @param name string representing the annotation's name
3223 Sets the creator of the PDF document. @param creator the name of the application that created the document
3224 Sets the producer of the PDF document. @param producer name of the producer application
3225 Sets the highlighting mode of the annotation. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T' @throws IllegalArgumentException if invalid mode is provided
3226 Sets the page label prefix. @param prefix the prefix string to apply, or null to remove the prefix
3227 Sets the border style of the annotation. @param s style string to be set
3228 Sets the Unicode filename. @param file Unicode string representing the filename
3229 Initializes a new external data dictionary. Sets the type attribute to "ExData".
3230 Sets the file name in the PDF specification. @param file the name of the file to be set
3231 Sets the subtype of the external data dictionary. @param subtype string representing the subtype to be set
3232 Sets the file description. @param description the new description for the file
3233 Sets the name property in the PDF dictionary. @param name string value to be set as the name
3234 Sets the element identifier for the PDF structure. @param id unique identifier string for the element
3235 Sets the URL type in the certificate. @param urlType string representing the URL type
3236 Sets the title of the PDF structure element. @param title the new title to set
3237 Initializes a new PDMeasureDictionary with an empty COSDictionary and sets its type.
3238 Sets the language attribute of the PDF element. @param language ISO 639-1 language code or null to remove the attribute
3239 Sets the subtype of the measurement dictionary. @param subtype string representing the subtype to be set
3240 Sets the alternative description for the PDF element. @param alternateDescription the alternative text to describe the element
3241 Initializes a new PDNumberFormatDictionary with default settings. Sets the dictionary type to "NumberFormat".
3242 Sets the expanded form of the element. @param expandedForm the string representing the expanded form
3243 Sets the name of the viewport. @param name new name for the viewport
3244 Sets the actual text of the element. @param actualText the actual text to be set
3245 Initializes a PDTransition with a specified style. @param style the transition style to apply
3246 Sets the modification date of the annotation. @param date the new modification date as a string
3247 Sets the transition dimension. @param dimension PDTransitionDimension to define the transition area
3248 Sets the annotation's name. @param name unique identifier for the annotation
3249 Sets the motion type of the transition. @param motion PDTransitionMotion representing the motion effect
3250 Sets the content of the annotation. @param contents text to be displayed in the annotation
3251 Sets the non-full screen page mode. @param value desired page mode for non-full screen view
3252 Sets the title of the annotation. @param title the title to set for the annotation
3253 Sets the reading direction preference. @param value desired reading direction (e.g., LEFT_TO_RIGHT)
3254 Sets the annotation's subject. @param subject the subject of the annotation
3255 Sets the view area preference. @param value boundary type to define the view area
3256 Sets the annotation symbol. @param symbol the desired symbol type ("paragraph" or other)
3257 Sets the view clipping boundary. @param value BOUNDARY enum representing the clip setting
3258 Sets the default appearance string of the annotation. @param appearance the appearance string to be set
3259 Sets the print area preference. @param value BOUNDARY representing the print area setting
3260 Sets the default style of the annotation. @param style the default style to apply
3261 Sets the print clipping boundary. @param value BOUNDARY enum defining the clipping area
3262 Sets the style of the line annotation's caption. @param captionStyle the style to apply to the caption
3263 Sets duplex printing preference. @param value DUPLEX enum indicating duplex mode
3264 Sets the state of the annotation. @param state the new state value to set
3265 Sets the print scaling preference. @param value the desired print scaling option
3266 Sets the state model of the annotation. @param stateModel the state model to be set
3267 Sets a date value in the dictionary. @param key COSName representing the key @param date Calendar instance to store as a date string
3268 Sets the status of the FDF document. @param status the new status string to set
3269 Sets a string value in the dictionary using a given key. @param key PDF name string representing the key @param value String to be stored or null to remove
3270 Sets the target URL for the FDF document. @param target the URL to be set as the target
3271 Sets the partial name of the form field. @param partial the partial field name to set
3272 Sets the language of the PDF document. @param language ISO 639-1 language code (e.g., "en" for English)
3273 Sets the name of the page reference. @param name the new name to assign to the page reference
3274 Sets the title of the PDF document. @param title new title for the document
3275 Sets the PDF document's author. @param author string representing the document's author
3276 Sets the subject of the PDF document. @param subject new subject string to be set
3277 Sets the keywords metadata for the PDF document. @param keywords comma-separated list of keywords
3278 Sets the creator of the PDF document. @param creator Name of the application that created the document
3279 Sets the producer of the PDF document. @param producer name of the producer application
3280 Sets the name of the optional content group. @param name the new name for the OCG
3281 Sets or removes the page label prefix. @param prefix The prefix string to set, or null to remove it
3282 Initializes a new PDOptionalContentProperties object. Sets up the dictionary with OCGs array and default D entry.
3283 Sets the Unicode name of the embedded file. @param file Unicode string representing the file name
3284 Sets the JavaScript action string. @param sAction JavaScript code to be executed
3285 Sets the file specification for the launch action. @param f file path or URL to be launched
3286 Sets the file name in the PDF specification. @param file the name of the file to be set
3287 Sets the file description. @param description The new description of the file
3288 Sets the destination string for the launch action. @param d the destination string to be set
3289 Sets the element identifier. @param id unique identifier string
3290 Sets the operating system specific launch command. @param o the OS-specific command string
3291 Sets the title of the PDF structure element. @param title The new title to be set
3292 Sets the file path for the launch action. @param p the file path to be launched
3293 Sets the language attribute of the PDF element. @param language ISO 639-1 language code to be set
3294 Sets the URI for the action. @param uri the URI string to be set
3295 Sets the alternate description of the element. @param alternateDescription alternative text for accessibility
3296 Sets the filename associated with the target directory. @param filename the name of the file to be set
3297 Sets the expanded form of the element. @param expandedForm text representing the expanded form
3298 Sets the annotation name in the target directory. @param name the annotation name to be set
3299 Sets the filename for the launch parameters. @param file the name of the file to be launched
3300 Sets the actual text of the element. @param actualText the text to be displayed in place of the element
3301 Sets the directory path. @param dir directory path as a string
3302 Sets the modification date of the annotation. @param date ISO 8601 formatted date string
3303 Sets the operation type for file execution. @param op the operation string to be set
3304 Sets the name of the annotation. @param name unique identifier for the annotation
3305 Sets the execute parameter. @param param the execution parameter to set
3306 Sets the content of the annotation. @param contents text to be displayed in the annotation
3307 Sets the contents of the annotation. @param value the string to be set as the annotation's content
3308 Sets the title of the annotation. @param title String representing the annotation's title
3309 Sets the modified date of the annotation. @param m the new modification date as a string
3310 Sets the subject of the annotation. @param subject the subject string to be assigned
3311 Sets the name of the annotation. @param nm the name to assign to the annotation
3312 Sets the annotation symbol. @param symbol string representing the symbol type
3313 Sets the default appearance string for the annotation. @param daValue the appearance string to be set
3314 Sets the default appearance string of the annotation. @param appearance appearance string to be set
3315 Sets the default style of the annotation. @param style String representing the style to be applied
3316 Sets the default style string for the annotation. @param defaultStyleString the CSS-like style string to apply
3317 Sets the title popup text. @param t the popup text to set
3318 Sets the style of the line annotation's caption. @param captionStyle style string to be applied to the caption
3319 Sets the subject of the annotation. @param subj the subject string to assign
3320 Sets the state of the annotation. @param state new state value to be set
3321 Sets the state of the text annotation. @param state the new state to set
3322 Sets the state model of the annotation. @param stateModel String representing the state model to be set
3323 Sets the state model of the annotation. @param stateModel the state model to set
3324 Sets the status of the FDF document. @param status String representing the new status
3325 Sets the normal caption text for the annotation. @param caption the caption text to be displayed
3326 Sets the target string in the FDF dictionary. @param target the target value to be set or null to remove
3327 Sets the rollover caption for interactive PDF annotations. @param caption the text to display on rollover
3328 Sets the partial field name. @param partial partial field name to be set
3329 Sets the alternate caption for the annotation. @param caption the alternate text description
3330 Sets the name of the page reference. @param name the new name to assign to the page
3331 Sets the date property in the digital signature. @param date the date string to set
3332 Sets the URL attribute in the certificate's COSDictionary. @param url the URL to be stored or null to remove it
3333 Sets the URL in the PDF timestamp dictionary. @param url the URL to be stored or null to remove it
3334 Sets the name of the signature. @param name the signature's name to be set
3335 Sets the name of the optional content group. @param name the new name to assign to the group
3336 Sets the location of the digital signature. @param location the location where the signature was created
3337 Initializes a new PDOptionalContentProperties object with default settings. Sets up the initial dictionary and optional content group structure.
3338 Sets the reason for the digital signature. @param reason the reason string to be stored in the signature dictionary
3339 Sets JavaScript action string. @param sAction JavaScript code to be executed
3340 Sets the contact information in the digital signature. @param contactInfo the contact details to store
3341 Sets the file specification for the launch action. @param f file path or URL to be launched
3342 Sets the default appearance string for form fields. @param daValue the default appearance value as a string
3343 Sets the destination string for the launch action. @param d destination string specifying the file or URL to open
3344 Sets the default value for the choice field. @param value the default option to be selected
3345 Sets the operating system-specific command or file path. @param o OS-specific command or file path
3346 Sets the partial name of the PDF field. @param name the partial name to set @throws IllegalArgumentException if the name contains a period character
3347 Sets the file path or URL for the launch action. @param p file path or URL as a string
3348 Sets the alternate field name. @param alternateFieldName the alternate name of the field
3349 Sets the URI for this action. @param uri the new URI as a string
3350 Sets the mapping name for the field. @param mappingName the new mapping name to assign
3351 Sets the filename associated with the target directory. @param filename String representing the file name to be set
3352 Sets the field's value in the PDF document. @param value the new value for the field @throws IOException if an I/O error occurs while setting the value
3353 Sets the annotation name in the PDF dictionary. @param name the name to be assigned to the annotation
3354 Sets the value of the text field. @param value the new value to set for the field @throws IOException if an error occurs during setting the value
3355 Sets the filename for the launch parameters. @param file name of the file to be launched
3356 Sets the directory path. @param dir directory string to be set
3357 Sets the default value of the text field. @param value the default string to be set
3358 Sets the operation type. @param op Operation string to be set
3359 Sets the default appearance for text fields. @param daValue the default appearance string value
3360 Sets the execute parameter. @param param parameter to be executed
3361 Sets the scale ratio in the measurement dictionary. @param scaleRatio the scale ratio value to store
3362 Sets the contents of the annotation. @param value String content to be set or null to remove
3363 Sets an integer value in the dictionary using a string key. @param key the string representation of the PDF name @param value the integer value to store
3364 Sets the modified date of the annotation. @param m ISO 8601 formatted date string
3365 Sets the structure parent index. @param structParents index of the structure parent
3366 Sets the name of the annotation. @param nm Name to be assigned to the annotation
3367 Sets the default appearance string for the annotation. @param daValue The appearance settings as a string
3368 Sets the rotation angle of the PDF page. @param rotation degrees to rotate clockwise (0, 90, 180, or 270)
3369 Sets the default style string of the annotation. @param defaultStyleString CSS-like string defining the style
3370 Sets the starting page number for a label range. @param start positive integer representing the starting page number @throws IllegalArgumentException if start is not a positive integer
3371 Sets the title popup text. @param t The title text to be set or null to remove
3372 Sets bits per sample for the function. @param bps number of bits per sample to set
3373 Sets the subject of the annotation. @param subj the subject string to be assigned
3374 Sets the Marker Context Identifier (MCID) for the marked content reference. @param mcid the MCID value to be set
3375 Sets the state of the annotation. @param state new state value for the annotation
3376 Sets the revision number of the structure element. @param revisionNumber non-negative integer representing the revision
3377 Sets the state model of the annotation. @param stateModel string representing the state model to be set
3378 Sets the next key for the parent tree. @param parentTreeNextKey the integer value for the next key
3379 Sets the normal state caption for the annotation. @param caption text to display in the normal state
3380 Sets the encryption key length. @param length the key length in bits
3381 Sets the rollover caption for the annotation. @param caption String representing the rollover caption
3382 Sets the encryption version. @param version the encryption version number
3383 Sets the alternate caption for an annotation. @param caption the alternate text to display
3384 Sets the encryption length. @param length the encryption key length in bits
3385 Sets the date of the digital signature. @param date String representing the date to be set
3386 Sets the encryption revision level. @param revision the revision level to set
3387 Sets the URL attribute in the certificate. @param url String representing the URL to be stored or null to remove
3388 Sets the encryption permissions for the PDF document. @param permissions integer representing the permissions to be set
3389 Sets the URL for timestamping in the digital signature. @param url the URL to be used for timestamping
3390 Sets the page number for the annotation. @param page the page index where the annotation appears
3391 Sets the name of the signature. @param name String representing the signature's name
3392 Sets the justification of the free text annotation. @param justification "left", "centered", or "right"
3393 Sets the location information of the signature. @param location String representing the location of signing
3394 Sets the rotation angle of the annotation. @param rotation degrees to rotate clockwise (0, 90, 180, or 270)
3395 Sets the reason for the digital signature. @param reason description of the signature purpose
3396 Sets field flags for the form field. @param ff integer representing field flags
3397 Sets the contact information in the digital signature. @param contactInfo String containing contact details
3398 Sets field flags. @param ff field flag value to apply
3399 Sets the default appearance string for form fields. @param daValue String representing the default appearance settings
3400 Sets clear field flags. @param ff integer value representing field flags
3401 Sets the default value for the choice field. @param value default option to be selected
3402 Sets widget field flags. @param f integer representing field flags
3403 Sets widget field flags. @param ff integer value representing field flags
3404 Sets the partial name of the PDF field. @param name partial name to be set (must not contain a period) @throws IllegalArgumentException if name contains a period character
3405 Sets clear widget field flags. @param ff flag value to set
3406 Sets the alternate field name. @param alternateFieldName alternative name for the field
3407 Sets the mapping name for the field. @param mappingName the new mapping name to assign
3408 Sets the value of the non-terminal field. @param value String value to be set @throws IOException if an I/O error occurs
3409 Sets font flags. @param flags integer representing font attributes
3410 Sets the field's value in the PDF. @param value String to be set as the field's value @throws IOException if an I/O error occurs
3411 Sets the default value of the text field. @param value default string to be assigned
3412 Sets character widths for the font in a PDF document. @param font COSDictionary representing the font @param glyphList GlyphList object for Unicode conversion @throws IOException if an I/O error occurs
3413 Sets the default appearance for the text field. @param daValue default appearance string value
3414 Sets the scale ratio in the measurement dictionary. @param scaleRatio string representing the scale ratio to be set
3415 Sets an integer value in the dictionary by key string. @param key PDF name string representing the key @param value integer value to be stored
3416 Sets the structure parent index of the page. @param structParents index of the structure parent
3417 Sets the rotation angle of the PDF page. @param rotation degrees to rotate clockwise (0, 90, 180, or 270)
3418 Sets the starting page number for this label range. @param start positive integer representing the starting page number
3419 Sets the number of bits per sample. @param bps bits per sample value to be set
3420 Sets the Marker Context Identifier (MCID) for marked content. @param mcid unique identifier for the marker context
3421 Sets the revision number for the PDF structure element. @param revisionNumber non-negative integer representing the revision number
3422 Sets the next key for the parent tree. @param parentTreeNextKey integer value representing the next key
3423 Sets the encryption length in bits. @param length the encryption key length (in bits)
3424 Sets the encryption version of the PDF document. @param version integer representing the encryption version
3425 Sets the paint type of the pattern. @param paintType integer representing the paint type
3426 Sets the encryption key length. @param length the key length in bits (e.g., 40, 128)
3427 Sets the type of the pattern. @param patternType integer representing the pattern type
3428 Sets the encryption revision level. @param revision encryption revision number
3429 Sets encryption permissions. @param permissions bitwise OR of permission flags
3430 Sets the paint type for the tiling pattern. @param paintType the integer value representing the paint type
3431 Sets the annotation's associated page number. @param page page index in the document
3432 Sets the tiling type of the pattern. @param tilingType the integer value representing the tiling type
3433 Sets the justification of the free text annotation. @param justification alignment type ("left", "centered", or "right")
3434 Sets the shading type in the dictionary. @param shadingType the integer value representing the shading type
3435 Sets the number of bits per flag. @param bitsPerFlag the integer value representing bits per flag
3436 Sets the rotation of the annotation. @param rotation degrees to rotate the annotation (0, 90, 180, or 270)
3437 Sets the field flags for the form field. @param ff integer representing the field flags
3438 Sets the number of vertices per row in the shading pattern. @param verticesPerRow the count of vertices per row
3439 Sets field flags in FDF. @param ff integer value representing field flags
3440 Sets the number of bits per color component. @param bitsPerComponent the number of bits to set
3441 Sets clear field flags. @param ff integer value representing the field flags
3442 Sets the number of bits per coordinate. @param bitsPerCoordinate the number of bits used for each coordinate
3443 Sets widget field flags. @param f integer representing field flags
3444 Sets the line cap style. @param style the line cap style to apply
3445 Sets widget field flags. @param ff integer value representing field flags
3446 Sets clear widget field flags. @param ff integer value representing the field flags to be cleared
3447 Sets the line join style. @param style the line join style (0: miter, 1: round, 2: bevel)
3448 Sets the overprint mode for graphics rendering. @param overprintMode the overprint mode to set or null to remove it
3449 Sets action flags. @param flags bit flag values for the action
3450 Sets action flags. @param flags bitwise flag configuration
3451 Sets the page number for the target directory. @param pageNumber the page number to set; if negative, removes the page reference
3452 Sets the font descriptor flags. @param flags integer value representing font attributes
3453 Sets the annotation index. @param index the annotation index to set; if negative, removes the annotation entry
3454 Sets character widths in the PDF font dictionary. @param font COSDictionary representing the font @param glyphList GlyphList for mapping glyph names to Unicode @throws IOException if an I/O error occurs
3455 Sets annotation flags. @param flags integer representing annotation properties
3456 Sets the structure parent of the annotation. @param structParent integer value representing the structure parent
3457 Sets the quadding mode of the text. @param q integer representing the quadding mode (0=left, 1=centered, 2=right)
3458 Sets the rotation angle of the annotation. @param rotation degrees to rotate the annotation (0-360)
3459 Sets the P value for digital signature configuration. @param p the P value (must be between 0 and 3)
3460 Sets whether timestamp is required. @param flag true if timestamp is required, false otherwise
3461 Sets the quadding mode for text fields. @param q the quadding mode (0: left, 1: center, 2: right)
3462 Sets field flags in the PDF dictionary. @param flags integer value representing field attributes
3463 Sets the top index of the list box. @param topIndex the top index to set or null to remove it
3464 Sets the maximum length of text input. @param maxLen the maximum number of characters allowed
3465 Sets the Q attribute of the text field. @param q the value to set (0, 127 for left alignment; 1 for centered; 2 for right alignment)
3466 Sets a long value in the dictionary using a string key. @param key the PDF name as a string @param value the long value to store
3467 Sets the revision number of the digital signature. @param revision the revision value to store in the dictionary
3468 Sets the minimum revision required for digital signature. @param revision the minimum revision level
3469 Sets a float value in the dictionary using a string key. @param key the string representation of the PDF name @param value the float value to store
3470 Sets the paint type for the pattern. @param paintType integer representing the paint type
3471 Sets the type of the pattern. @param patternType integer representing the pattern type
3472 Sets the user space unit for the PDF page. @param userUnit the size of a user space unit in points; must be positive
3473 Sets the paint type for the tiling pattern. @param paintType integer representing the paint type
3474 Sets the guideline width in the PDF. @param width the new width value to be set
3475 Sets the tiling type of the pattern. @param tilingType integer representing the tiling type
3476 Sets the opacity of the annotation. @param opacity the opacity level (0.0 to 1.0)
3477 Sets the shading type in the shading dictionary. @param shadingType integer representing the shading type
3478 Sets the leader line length of the annotation. @param leaderLength the length of the leader line
3479 Sets the leader line extend length. @param leaderExtend the length of the leader line extension
3480 Sets the number of bits per flag in the shading dictionary. @param bitsPerFlag integer value representing bits per flag setting
3481 Sets the leader line offset of the annotation. @param leaderOffset the offset value to be set
3482 Sets the number of vertices per row in the triangular shading model. @param verticesPerRow number of vertices per row to be set
3483 Sets the number of bits per color component. @param bitsPerComponent number of bits for each color component
3484 Sets the font weight. @param fontWeight the numeric value representing the font weight
3485 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate integer value representing bits per coordinate
3486 Sets the italic angle of the font. @param angle the italic angle value to set
3487 Sets the line cap style. @param style integer representing the line cap style
3488 Sets the font ascent value. @param ascent the ascent value to set
3489 Sets the line join style in the graphics state. @param style integer representing the line join style
3490 Sets the font's descent value. @param descent the descent metric of the font
3491 Sets the overprint mode in the graphics state. @param overprintMode integer value representing the overprint mode; null removes the entry
3492 Sets the leading (line spacing) for the font. @param leading the line spacing value to set
3493 Sets action flags for form reset. @param flags integer value representing action flags
3494 Sets the cap height of the font. @param capHeight the cap height value to set
3495 Sets action flags for form submission. @param flags integer representing action flags
3496 Sets the x-height of the font. @param xHeight the x-height value to set
3497 Sets the page number for the target directory. @param pageNumber new page number to set; if negative, removes the page reference
3498 Sets the vertical stem width of the font. @param stemV vertical stem width value
3499 Sets the annotation index in the PDF dictionary. @param index integer value for the annotation index
3500 Sets the horizontal stem height. @param stemH the desired horizontal stem height value
3501 Sets annotation flags. @param flags integer representing annotation properties
3502 Sets the average width of the font. @param averageWidth the average width value to store
3503 Sets the structure parent index of the annotation. @param structParent integer index of the structure parent
3504 Sets the maximum width of the font. @param maxWidth the maximum width value to set
3505 Sets the quadding mode of the free text annotation. @param q quadding mode (0 = left, 1 = center, 2 = right)
3506 Sets the missing width value in the font descriptor. @param missingWidth the width to be set for missing characters
3507 Sets the rotation of the annotation. @param rotation degrees to rotate the annotation
3508 Sets the horizontal step of the tiling pattern. @param xStep the horizontal distance between pattern tiles
3509 Sets the P value for digital signature configuration. @param p integer value representing the P parameter (must be 0-3)
3510 Sets the vertical step of the tiling pattern. @param yStep the vertical distance between pattern tiles
3511 Sets whether timestamp is required. @param flag true if timestamp is required, false otherwise
3512 Sets the sound volume. @param volume the volume level (-1.0 to 1.0)
3513 Sets the quadding mode for text fields. @param q integer representing the quadding mode (0-left, 1-center, 2-right)
3514 Sets the length of the leader line. @param leaderLineLength the length of the leader line to set
3515 Sets field flags in the PDF form. @param flags integer representing field attributes and behaviors
3516 Sets the leader line extension length. @param leaderLineExtensionLength the length of the leader line extension
3517 Sets the top index for displayed items in the list box. @param topIndex index of the top item to display, or null to remove the setting
3518 Sets the offset length of the leader line. @param leaderLineOffsetLength the new offset length for the leader line
3519 Sets the maximum length of text input. @param maxLen maximum number of characters allowed
3520 Sets constant opacity for the annotation. @param ca float value representing opacity (0.0 to 1.0)
3521 Sets the border width. @param w the width value to set
3522 Sets the Q attribute for text justification. @param q integer value representing justification (0=left, 1=center, 2=right)
3523 Sets the minimum required capability level. @param minimumRequiredCapability the capability level as a float
3524 Sets a long value in the dictionary by key. @param key string representation of the key @param value long value to be stored
3525 Sets the CYX value in the COSDictionary. @param cyx the float value for CYX attribute
3526 Sets the revision number of the digital signature. @param revision long value representing the revision number
3527 Sets the minimum revision required for digital signature. @param revision long value representing the revision number
3528 Parses a COSStream from the given dictionary. Handles stream length validation and content reading. @param dic dictionary containing stream data @return parsed COSStream object @throws IOException if parsing fails
3529 Sets a float value in the dictionary using a string key. @param key the key to store the float under @param value the float value to store
3530 Clones and merges PDF objects. @param base the original COSObjectable to clone from @param target the target COSObjectable to merge into @throws IOException if an I/O error occurs during cloning
3531 Sets the user unit of the PDF page. @param userUnit the scaling factor for coordinates (must be positive)
3532 Sets the guideline width. @param width the width of the guideline in PDF units
3533 Parses a COS dictionary from the PDF source. @param isDirect indicates if the dictionary is direct @return parsed COSDictionary object @throws IOException if an I/O error occurs during parsing
3534 Sets the opacity of the annotation. @param opacity float value representing the opacity (0.0 to 1.0)
3535 Parses the entire PDF content stream. @return List of parsed objects from the stream @throws IOException if an I/O error occurs during parsing
3536 Sets the leader line length of the annotation. @param leaderLength the length of the leader line
3537 Sets the leader extend length of the line annotation. @param leaderExtend the length of the leader extend
3538 Retrieves the bounding box of a glyph in a Type 3 font. @return PDRectangle representing the glyph's bounding box or null if not found @throws IOException if an I/O error occurs while parsing the stream
3539 Sets the leader offset of the line annotation. @param leaderOffset the distance from the start point to the leader line
3540 Retrieves the width from a PDF character procedure. @return float value representing the width @throws IOException if unexpected end of stream or invalid parsing occurs
3541 Creates a new PDF document with memory-only stream caching. Initializes the document structure using default settings.
3542 Sets the font weight. @param fontWeight numeric value representing the font weight
3543 Sets the italic angle of the font. @param angle the italic angle value to set
3544 Sets the ascent value of the font. @param ascent the ascent metric of the font
3545 Creates a PDFileSpecification from a COSBase object. @param base the COSBase object representing the file specification @return PDFileSpecification object or null if input is null @throws IOException if the COSBase type is unknown
3546 Sets the font's descent value. @param descent the descent metric of the font
3547 Constructs a new FDFAnnotationCaret with default settings. Initializes the annotation subtype to "Caret".
3548 Sets the leading (line spacing) of the font. @param leading the line spacing value to set
3549 Constructs a new circular annotation. Initializes the subtype to "Circle".
3550 Sets the cap height of the font. @param capHeight the cap height value to set
3551 Constructs an empty file attachment annotation. Initializes the subtype to "FileAttachment".
3552 Sets the x-height of the font. @param xHeight the x-height value to set
3553 Initializes a new free text annotation. Sets the subtype to "FreeText".
3554 Sets the vertical stem width of the font. @param stemV the vertical stem width value to set
3555 Constructs an FDFAnnotationInk object. Initializes the annotation subtype to "INK".
3556 Initializes a new line annotation in FDF. Sets the subtype to "L".
3557 Sets the horizontal stem height. @param stemH height of the horizontal stems in the font
3558 Initializes a new hyperlink annotation. Sets the subtype to "Link".
3559 Sets the average width of the font. @param averageWidth the average width value to set
3560 Initializes a new polygon annotation. Sets the subtype to "PolyLine".
3561 Sets the maximum width of the font. @param maxWidth the maximum width value to be set
3562 Constructs a new FDFAnnotationPolyline. Initializes the annotation type to "Polyline".
3563 Sets the missing width of the font. @param missingWidth the width to be set for missing glyphs
3564 Constructs an empty FDFAnnotationSound with default settings.
3565 Sets the X step of the tiling pattern. @param xStep horizontal spacing between pattern tiles
3566 Constructs a new FDFAnnotationSquare with default properties. Sets the annotation subtype to "Square".
3567 Initializes a new FDFAnnotationStamp with subtype "Stamp".
3568 Sets the vertical step size of the tiling pattern. @param yStep the vertical distance between pattern repetitions
3569 Initializes a new FDF text annotation. Sets the subtype to "Tx".
3570 Sets the sound volume. @param volume the volume level (must be between -1.0 and 1.0)
3571 Protected constructor for text markup annotations. Initializes a new FDFAnnotation with an empty COSDictionary and sets the annotation type to "Annot".
3572 Sets the length of the leader line. @param leaderLineLength the desired length for the leader line
3573 Sets the leader line extension length of the annotation. @param leaderLineExtensionLength the extension length to set
3574 Sets the offset length of the leader line. @param leaderLineOffsetLength the offset length value to set
3575 Sets the constant opacity for the annotation. @param ca the opacity value (0.0 to 1.0)
3576 Sets the border width. @param w width of the border
3577 Builds vertical metrics for CID font. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
3578 Sets the minimum required capability. @param minimumRequiredCapability the capability level to be set
3579 Sets the CYX value in the COSDictionary. @param cyx the float value to store for CYX
3580 Builds and sets vertical metrics for CID font embedding. @param cidFont the COSDictionary representing the CID font @throws IOException if an I/O error occurs
3581 Constructs a new PDSimpleFont instance. Initializes default settings for font representation.
3582 Parses a COSStream from a dictionary. @param dic dictionary containing stream data @return parsed COSStream object @throws IOException if parsing fails
3583 Sets decode values for shading. @param decodeValues array of decode values to be set
3584 Sets decode values for shading. @param decodeValues array of decode values to be set
3585 Clones and merges a PDF object into another. @param base the source PDF object to be cloned @param target the destination PDF object for merging @throws IOException if an I/O error occurs during cloning or merging
3586 Sets the line width for graphics. @param width the new line width value
3587 Parses a COS dictionary from the PDF source. @param isDirect indicates if the dictionary should be marked as direct @return parsed COSDictionary object @throws IOException if an I/O error occurs during parsing
3588 Sets the miter limit for line joins. @param miterLimit the new miter limit value
3589 Sets the flatness tolerance for rendering. @param flatness the new flatness value to apply
3590 Parses the entire PDF content stream. @return List of parsed tokens and objects from the stream @throws IOException if an I/O error occurs during parsing
3591 Sets the smoothness tolerance for rendering. @param smoothness the smoothness value to apply
3592 Sets the stroking alpha constant. @param alpha the alpha value to set for stroking operations
3593 Retrieves the glyph bounding box for a Type 3 font character. @return PDRectangle representing the glyph's bounding box or null if not found @throws IOException if an I/O error occurs while parsing the stream
3594 Sets the non-stroking alpha constant. @param alpha the transparency value for non-stroking operations
3595 Retrieves the width of a character from the PDF stream. @return width as float value @throws IOException if parsing fails or unexpected end of stream
3596 Creates a new link annotation. Initializes the COS object with subtype "Link".
3597 Constructs a new PDF document using memory-only stream caching.
3598 Constructs a new markup annotation. Initializes with default settings and sets up an empty dictionary.
3599 Constructs a new popup annotation. Initializes the annotation's subtype to "Popup".
3600 Initializes a new annotation widget with default settings. Sets the subtype to "Widget".
3601 Sets uniform rectangle margin differences for the annotation. @param difference margin difference for all sides
3602 Creates a PDFileSpecification from a COSBase object. @param base COSBase object representing the file specification @return PDFileSpecification instance or null if base is null @throws IOException if the base type is unknown
3603 Constructs a new FDFAnnotationCaret with default properties.
3604 Sets uniform rectangle differences for all sides of the annotation. @param difference margin difference for all sides
3605 Constructs a new FDFAnnotationCircle with default properties.
3606 Sets equal rectangle differences for all sides. @param difference uniform margin difference for all sides
3607 Initializes a new file attachment annotation. Sets the subtype to "FileAttachment".
3608 Constructs a new PDF checkbox. @param acroForm the AcroForm containing the checkbox
3609 Initializes a new free text annotation with default properties.
3610 Creates a new FDF ink annotation with default properties.
3611 Constructs a new PDComboBox. @param acroForm the AcroForm containing the combo box
3612 Initializes a new line annotation with default properties.
3613 Constructs a new PDListBox instance. @param acroForm the AcroForm containing the list box field
3614 Initializes a new FDF annotation link with default properties.
3615 Constructs a new polygon annotation with default properties.
3616 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
3617 Constructs an empty FDF sound annotation. Initializes the subtype to "Sound".
3618 Constructs a new square annotation with default properties.
3619 Initializes a new stamp annotation with default properties.
3620 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
3621 Constructs a new FDF text annotation. Initializes the annotation with default properties and sets its subtype.
3622 Protected constructor to initialize a new text markup annotation.
3623 Constructs a PDLineDashPattern from a COSArray and a phase. @param array COSArray containing dash lengths @param phase initial phase value for the dash pattern
3624 Returns string representation of the range. @return formatted string with min and max values
3625 Builds vertical metrics for CID font. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
3626 Evaluates a Function Type 4 based on input values. @param input array of input values @return array of evaluated output values @throws IOException if an error occurs during evaluation
3627 Builds vertical metrics for CID font embedding. @param cidFont dictionary to store vertical metrics @throws IOException if an I/O error occurs
3628 Constructs a new PDSimpleFont object. Initializes basic properties and sets up default configurations.
3629 Sets the color component range in the PDF stream. @param range PDRange object defining min and max values @param n index of the color component
3630 Sets decode values for shading. @param decodeValues COSArray containing decode values
3631 Sets decode values for shading. @param decodeValues COSArray containing decode values
3632 Sets the line width for graphics. @param width the new line width value
3633 Sets the miter limit for line joins. @param miterLimit the new miter limit value
3634 Sets the flatness tolerance for rendering. @param flatness value specifying the maximum deviation from a curve
3635 Reads and processes a patch from input stream. @param input image input stream to read patch data from @param isFree indicates if the patch is free-form or implicit @param implicitEdge array of points defining implicit edges @param implicitCornerColor array of colors at implicit corners @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX range for X coordinates @param rangeY range for Y coordinates @param colRange array of ranges for color components @param matrix transformation matrix @param xform additional affine transform @param controlPoints number of control points in the patch @return Patch object or null if EOF encountered
3636 Sets the smoothness tolerance for rendering. @param smoothness float value representing the smoothness level
3637 Sets the stroking alpha constant. @param alpha float value representing the alpha constant for stroking operations
3638 Sets the non-stroking alpha constant. @param alpha float value for transparency (0.0 to 1.0)
3639 Initializes a new link annotation with default settings.
3640 Reads and processes vertex data from an image stream. @param input ImageInputStream to read from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-coordinate range for interpolation @param rangeY Y-coordinate range for interpolation @param colRangeTab array of color component ranges for interpolation @param matrix transformation matrix for point coordinates @param xform additional affine transform for points @return Vertex object with transformed coordinates and interpolated colors @throws IOException if input stream issues occur or invalid parameters are provided
3641 Constructs a new markup annotation. Initializes default properties and sets annotation type to "Markup".
3642 Initializes a new popup annotation. Sets the subtype to "Popup" in the COS dictionary.
3643 Retrieves the first color (PDGamma) in the collection. @return PDGamma object representing the first color or null if not found
3644 Constructs a new PDAnnotationWidget. Initializes the annotation subtype to "Widget".
3645 Retrieves the second color in the collection. @return PDGamma object representing the second color or null if not found
3646 Sets equal rectangle margin differences for all sides. @param difference uniform margin difference for all sides
3647 Retrieves the start color from the collection. @return PDGamma object representing the start color or null if not found
3648 Sets equal rectangle differences for all sides. @param difference margin difference for all sides
3649 Retrieves the end color (PDGamma) from the collection. @return PDGamma object representing the end color or null if not found
3650 Sets equal rectangle differences for all sides. @param difference uniform margin difference for all sides
3651 Retrieves the blend mode from the graphics state dictionary. @return The current blend mode or NORMAL if not found
3652 Constructs a PDCheckBox instance. @param acroForm the form containing the checkbox
3653 Constructs a new PDComboBox. @param acroForm the form containing the combo box field
3654 Initializes a PDListBox within an AcroForm. @param acroForm the form containing the list box field
3655 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
3656 Constructs a PDLineDashPattern from a COSArray and phase. @param array COSArray containing dash lengths @param phase initial phase of the dash pattern
3657 Retrieves the destination associated with this action. @return PDDestination object representing the target location @throws IOException if an I/O error occurs during retrieval
3658 Retrieves the destination associated with this action. @return PDDestination object or null if not found @throws IOException if an error occurs while accessing the PDF
3659 Retrieves the destination associated with this link annotation. @return PDDestination object or null if no destination is set @throws IOException if an error occurs while accessing the PDF document
3660 Returns a string representation of the range. @return formatted string with min and max values
3661 Creates a Matrix from a COSBase object. @param base input COSBase object to convert @return Matrix instance or default identity matrix if conversion fails
3662 Evaluates a PDF Function Type 4. Clips input values to domain and executes function instructions. @param input float array of input values @return float array of evaluated output values @throws IOException if an I/O error occurs during evaluation
3663 Retrieves an object from a specified path within the PDF structure. @param objPath path to the desired object using dot notation @return COSBase object at the specified path or null if not found
3664 Sets the color component range in the PDF stream. @param range PDRange object defining the min and max values @param n index of the color component
3665 Retrieves a destination by name from the PDF document. @param name the name of the destination @return PDDestination object or null if not found @throws IOException if an I/O error occurs
3666 Retrieves the value of a specified attribute from the PDF document. @param attrName the name of the attribute to retrieve @return the COSBase object representing the attribute's value, or null if not found
3667 Retrieves an attribute value by name, returning a default if not found. @param attrName the name of the attribute to retrieve @param defaultValue the value to return if the attribute is absent @return the retrieved COSBase object or the default value
3668 Reads and processes a patch from an input stream. @param input source image input stream @param isFree indicates if the patch is free-form @param implicitEdge predefined edge points for non-free patches @param implicitCornerColor predefined corner colors for non-free patches @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis coordinate range @param rangeY Y-axis coordinate range @param colRange color component ranges @param matrix transformation matrix @param xform additional affine transform @param controlPoints number of control points for the patch @return Patch object or null if EOF encountered @throws IOException on I/O errors
3669 Checks if a specified attribute exists. @param name the attribute name to check @return true if the attribute is specified, false otherwise
3670 Retrieves an array of strings for a given key from the COSDictionary. @param name the key to fetch the array from @return array of string values or null if not found
3671 Sets an array of strings as a dictionary item. @param name the key for the dictionary entry @param values the array of string values to set
3672 Reads and processes vertex data from an image stream. @param input ImageInputStream to read from @param maxSrcCoord Maximum source coordinate value @param maxSrcColor Maximum source color value @param rangeX X-axis range for interpolation @param rangeY Y-axis range for interpolation @param colRangeTab Color component ranges @param matrix Transformation matrix @param xform Additional affine transformation @return Vertex object with position and color components @throws IOException if reading fails or invalid parameters are provided
3673 Retrieves the color before the current one. @return PDGamma object representing the color at index 0 or null if not found
3674 Retrieves a named attribute or its array of values from the PDF dictionary. @param name key for the attribute in the COSDictionary @param defaultValue default value to return if the attribute is not found @return String or String[] representing the attribute value(s), or default value if not present
3675 Retrieves the second color in the collection. @return PDGamma object representing the second color or null if not found
3676 Sets an array of PDF name values. @param name the key for the attribute @param values array of string values to be converted to COSName
3677 Retrieves the start color from the collection. @return PDGamma object representing the start color or null if not found
3678 Retrieves the end color from the collection. @return PDGamma object representing the end color or null if not found
3679 Retrieves a number or name attribute by key. @param name the key for the attribute @param defaultValue default value if attribute not found @return float value if number, string if name, otherwise default value
3680 Retrieves the blend mode from the graphics state dictionary. @return the current blend mode or NORMAL if not specified
3681 Retrieves a number or an array of numbers from the dictionary. @param name key for the attribute in the COSDictionary @param defaultValue default value to return if not found, unless unspecified @return float or float[] containing the values, or null if no valid data is found and default is unspecified
3682 Sets an array of numbers as a PDF attribute. @param name the attribute name @param values the array of float values to set
3683 Retrieves color gamma values by name. @param name the attribute name for the color gamma @return PDGamma object or null if not found
3684 Retrieves color or four colors by name. @param name the attribute name for the color @return PDGamma or PDFourColours object, or null if not applicable
3685 Retrieves a COSDictionary by primary or secondary key. @param firstKey primary key to look up in the dictionary @param secondKey secondary key if primary lookup fails @return COSDictionary object or null if not found
3686 Retrieves the destination associated with this action. @return PDDestination object representing the navigation target @throws IOException if an error occurs while accessing the COS object
3687 Retrieves a boolean value by primary or secondary key. @param firstKey primary key to look up in the dictionary @param secondKey secondary key if primary lookup fails @param defaultValue default boolean value if keys are not found @return boolean value from dictionary or default if not applicable
3688 Retrieves the destination associated with this action. @return PDDestination object representing the navigation target @throws IOException if an error occurs while accessing the PDF
3689 Retrieves integer value by keys with default. @param firstKey primary key to look up in the dictionary @param secondKey secondary key if primary lookup fails @param defaultValue value to return if no valid integer is found @return integer value or default if not found
3690 Retrieves the destination associated with this link annotation. @return PDDestination object or null if not found @throws IOException if an error occurs while reading the PDF
3691 Creates a Matrix from a COSBase object. @param base COSBase object to convert, must be a COSArray of at least 6 numbers @return Matrix object initialized with array values or default identity matrix if invalid
3692 Retrieves the list of filter names for the image. @return List of filter names or empty list if none found
3693 Retrieves an object from a specified path within the PDF structure. @param objPath path to the desired object using keys and indices @return COSBase object at the specified path, or null if not found
3694 Retrieves the color space for shading. @return PDColorSpace object representing the color space @throws IOException if an error occurs during retrieval or creation
3695 Retrieves a destination by name from the PDF document. @param name the destination name to look up @return PDDestination object or null if not found @throws IOException if an I/O error occurs while accessing the dictionary
3696 Retrieves attribute value by name. @param attrName the attribute name @return COSBase object associated with the attribute, or null if not found
3697 Retrieves attribute value by name, returning default if not found. @param attrName the attribute name to retrieve @param defaultValue the default value to return if attribute is absent @return COSBase object for the attribute or default value
3698 Checks if an attribute is specified by name. @param name the attribute key @return true if the attribute exists, false otherwise
3699 Retrieves an array of strings from the dictionary by key. @param name the PDF name string @return array of strings or null if not found
3700 Sets an array of strings as a PDF attribute. @param name the attribute key @param values array of string values to set
3701 Retrieves a named attribute as a string or array of strings. @param name the attribute key @param defaultValue default value if not found @return String or String[] based on attribute type, or default value
3702 Determines if a given dictionary represents the PDF catalog. @param dictionary the COSDictionary to check @return true if it's the catalog or an FDF document, false otherwise
3703 Sets an array of names as a dictionary item. @param name key for the dictionary entry @param values array of string names to set
3704 Retrieves a number or name attribute by key. @param name the attribute key @param defaultValue default value if attribute not found @return float value of COSNumber or string of COSName, otherwise defaultValue
3705 Initializes a PDPageTree with the given root dictionary and document. @param root the COSDictionary representing the page tree root @param document the PDDocument to which this page tree belongs @throws IllegalArgumentException if the root dictionary is null
3706 Retrieves a number or array of numbers from the COSDictionary. @param name key for the dictionary object @param defaultValue default value to return if not found @return float or float[] if found, otherwise null or default value
3707 Determines if a given dictionary represents a page tree node. @param node the COSDictionary to check @return true if it's a page tree node, false otherwise
3708 Sets an array of numbers in the PDF dictionary. @param name key for the attribute @param values float array to be set
3709 Retrieves the cryptographic filter method. @return COSName representing the encryption method or null if not found
3710 Retrieves color gamma values by name. @param name the key for the color attribute @return PDGamma object or null if not found
3711 Retrieves the stream filter name for encryption. @return COSName object representing the stream filter, default is IDENTITY if not set
3712 Retrieves color or four colors from dictionary. @param name key for the color attribute @return PDGamma or PDFourColours object, or null if not found
3713 Retrieves the string filter name for encryption. @return COSName representing the string filter, defaulting to IDENTITY if not specified
3714 Retrieves a COSDictionary by keys. @param firstKey primary key to look up @param secondKey fallback key if first key is not found @return COSDictionary object or null if neither key exists or retrieved object is not a dictionary
3715 Converts a character code to its Unicode representation. @param code the character code to convert @return Unicode string or null if conversion fails
3716 Retrieves boolean value by keys. @param firstKey primary key to look up @param secondKey fallback key if first key is not found @param defaultValue default boolean value if neither key exists @return boolean value associated with the keys or default value
3717 Creates a PDXObject from a COSBase and resources. @param base the underlying COSBase object @param resources PDResources for managing resources @return PDXObject instance based on subtype, or throws IOException if invalid subtype
3718 Retrieves the subtype of the soft mask. @return COSName representing the subtype or null if not found
3719 Retrieves an integer value by key(s). @param firstKey primary key to look up @param secondKey fallback key if first key is not found @param defaultValue default value if no valid key is found @return integer value or default if keys are invalid or missing
3720 Retrieves the relationship type of the target directory. @return COSName representing the relationship or null if not found
3721 Retrieves the appearance state of the annotation. @return COSName representing the current appearance state
3722 Retrieves the list of filter names for the image. @return List of filter names as strings
3723 Sets a string in an embedded dictionary. @param embedded key for the embedded dictionary @param key key for the item within the dictionary @param value string value to set, or null to remove the item
3724 Sets an integer in a nested dictionary. @param embeddedDictionary the key for the nested dictionary @param key the key for the integer value @param value the integer value to set
3725 Retrieves the color space associated with the shading. @return PDColorSpace object representing the color space @throws IOException if there is an issue during retrieval
3726 Checks if the PDF document is encrypted. @return true if the document has encryption settings, false otherwise
3727 Retrieves the encryption dictionary from the document's trailer. @return COSDictionary containing encryption settings or null if not encrypted
3728 Updates page references in a PDF document. @param cloner utility for cloning PDF objects @param parentTreeEntry dictionary containing page and object entries @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during processing
3729 Performs initial parsing of the FDF document. Retrieves and validates the root dictionary from the trailer. Throws IOException if root is missing.
3730 Initiates the parsing of a PDF document. Sets up the root dictionary and checks for necessary entries. Marks the document as decrypted upon completion.
3731 Determines if a given dictionary represents a PDF catalog. @param dictionary the COSDictionary to check @return true if the dictionary is a catalog, false otherwise
3732 Retrieves or creates the document information dictionary. @return PDDocumentInformation object representing document metadata
3733 Constructs a PDPageTree with the given root dictionary and document. @param root the COSDictionary representing the root of the page tree @param document the PDDocument containing this page tree @throws IllegalArgumentException if the root is null
3734 Retrieves the document catalog of the PDF document. Initializes if not already created. @return PDDocumentCatalog representing the document's catalog
3735 Retrieves or creates the AcroForm from the PDF document. @param acroFormFixup optional fixup to apply before retrieving the AcroForm @return PDAcroForm object representing the interactive form
3736 Determines if a given dictionary represents a page tree node. @param node the COSDictionary to check @return true if the node is a page tree node, false otherwise
3737 Retrieves and initializes the viewer preferences of the PDF document. @return PDViewerPreferences object or null if not found
3738 Retrieves the encryption method used by the crypt filter. @return COSName representing the encryption method or null if not found
3739 Retrieves or creates additional actions dictionary. @return PDDocumentCatalogAdditionalActions object for managing document actions
3740 Retrieves the stream filter name for encryption. @return COSName object representing the stream filter, default is IDENTITY if not set
3741 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not found
3742 Retrieves the document's name destination dictionary. @return PDDocumentNameDestinationDictionary object or null if not found
3743 Retrieves the string filter name for encryption. @return COSName representing the string filter, defaulting to IDENTITY if not set
3744 Retrieves the mark info dictionary of the PDF document. @return PDMarkInfo object or null if not found
3745 Converts a character code to its Unicode representation. @param code character code to convert @return Unicode string or null if conversion is not possible
3746 Retrieves the URI dictionary from the document catalog. @return PDURIDictionary object or null if not found
3747 Retrieves the structure tree root of the PDF document. @return PDStructureTreeRoot object or null if not found
3748 Creates a PDXObject instance based on the given COSBase and resources. @param base the underlying data stream for the object @param resources resource cache for managing cached resources @return a PDXObject or its subclass based on the subtype @throws IOException if an invalid subtype is encountered
3749 Retrieves optional content properties from the PDF document. @return PDOptionalContentProperties object or null if not found
3750 Retrieves the subtype of the soft mask. @return COSName representing the subtype, or null if not set
3751 Initializes the PDDocumentNameDictionary with the document catalog. @param cat PDF document catalog
3752 Retrieves the relationship type of the target directory. @return COSName representing the relationship or null if not found
3753 Retrieves the destination name tree node. @return PDDestinationNameTreeNode object or null if not found
3754 Retrieves the appearance state of the annotation. @return COSName representing the appearance state or null if not set
3755 Retrieves the embedded files node from the document's name dictionary. @return PDEmbeddedFilesNameTreeNode object or null if not found
3756 Sets a string in an embedded dictionary. @param embedded key for the embedded dictionary @param key key within the embedded dictionary @param value string to be set or null to remove
3757 Retrieves the JavaScript dictionary from the PDF document. @return PDJavascriptNameTreeNode representing JavaScript elements or null if not present
3758 Sets an integer in a nested dictionary. @param embeddedDictionary key for the embedded dictionary @param key key for the integer value @param value integer value to set
3759 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
3760 Retrieves or creates the additional actions for this page. @return PDPageAdditionalActions object representing the page's actions
3761 Retrieves the encryption dictionary from the document's trailer. @return COSDictionary containing encryption settings or null if not encrypted
3762 Retrieves the transition effect for the page. @return PDTransition object or null if no transition is defined
3763 Retrieves an indirect COSObject from the resources dictionary. @param kind type of resource (e.g., font, color space) @param name specific resource name @return COSObject if found and is indirect; otherwise, null
3764 Updates page references in the PDF structure tree. @param cloner utility for cloning PDF components @param parentTreeEntry dictionary representing the current node @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during processing
3765 Retrieves a resource from the PDF document. @param kind type of resource dictionary (e.g., Font, ColorSpace) @param name specific resource name @return COSBase object representing the resource or null if not found
3766 Retrieves resource names of a specified type. @param kind the type of resource to retrieve @return Iterable of COSName keys or empty set if not found
3767 Performs initial parsing of the FDF document. Retrieves the trailer and checks for a valid root object. @throws IOException if I/O error occurs or root is missing
3768 Creates a unique resource key. @param kind type of resource dictionary @param prefix base string for the key @return COSName with unique key based on prefix
3769 Performs initial parsing of the PDF document. Retrieves and validates the root object, ensuring it contains necessary keys. Adjusts for lenient parsing if type is missing in the root. Checks pages dictionary and marks document as decrypted.
3770 Adds or updates a resource in the PDF document. @param kind type of resource (e.g., font, image) @param name unique identifier for the resource @param object resource object to be added or updated
3771 Retrieves or creates the document information dictionary. @return PDDocumentInformation object containing metadata
3772 Retrieves the document catalog. Initializes if not already created. @return PDDocumentCatalog object for the PDF document
3773 Retrieves the associated page for the marked content. @return PDPage object representing the page, or null if not found
3774 Retrieves the associated PDPage. @return PDPage object or null if not found
3775 Retrieves the PDF document's interactive form with optional fixes. @param acroFormFixup fixup to apply if not already applied @return PDAcroForm object or null if none exists
3776 Retrieves and returns the associated PDPage object. @return PDPage instance or null if not found
3777 Retrieves the viewer preferences of the PDF document. @return PDViewerPreferences object or null if not found
3778 Retrieves the ID tree node for structure elements. @return PDNameTreeNode object representing the ID tree or null if not found
3779 Retrieves or creates the additional actions dictionary. @return PDDocumentCatalogAdditionalActions object for managing document actions
3780 Retrieves the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not found
3781 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not present
3782 Retrieves the document's named destinations. @return PDDocumentNameDestinationDictionary object or null if not found
3783 Retrieves and processes the class map from the PDF structure tree. @return Map containing class names and their corresponding attribute objects or lists of attribute objects.
3784 Retrieves the mark info dictionary from the document. @return PDMarkInfo object or null if not found
3785 Retrieves the cryptographic filter dictionary by name. @param cryptFilterName the name of the cryptographic filter @return PDCryptFilterDictionary object or null if not found
3786 Retrieves URI dictionary from the document catalog. @return PDURIDictionary object or null if not found
3787 Sets the cryptographic filter dictionary for a given filter name. @param cryptFilterName the name of the crypt filter @param cryptFilterDictionary the crypt filter settings to apply
3788 Retrieves the structure tree root of the PDF document. @return PDStructureTreeRoot object or null if not found
3789 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
3790 Retrieves optional content properties of the document. @return PDOptionalContentProperties object or null if not found
3791 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
3792 Initializes a PDDocumentNameDictionary for the given PDF document catalog. @param cat the document catalog to associate with this dictionary
3793 Retrieves the digital signature from the FDF catalog. @return PDSignature object or null if no signature is found
3794 Retrieves the destination name tree node. @return PDDestinationNameTreeNode object or null if not found
3795 Retrieves JavaScript associated with the FDF document. @return FDFJavaScript object or null if no JavaScript is found
3796 Retrieves the embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not found
3797 Retrieves the appearance dictionary of the form field. @return PDAppearanceDictionary object or null if not found
3798 Retrieves the JavaScript dictionary from the document. @return PDJavascriptNameTreeNode object or null if not found
3799 Retrieves the appearance stream reference for the field. @return FDFNamedPageReference object or null if not found
3800 Retrieves icon fit settings for the field. @return FDFIconFit object or null if not found
3801 Retrieves additional actions for the field. @return PDAdditionalActions object or null if not found
3802 Retrieves or creates the additional actions dictionary for the page. @return PDPageAdditionalActions object representing the page's actions
3803 Retrieves page info from the FDF document. @return FDFPageInfo object or null if not found
3804 Retrieves the transition effect for this page. @return PDTransition object or null if no transition is defined
3805 Retrieves the named page reference from the template. @return FDFNamedPageReference object or null if not found
3806 Retrieves an indirect COSObject for a specified resource. @param kind type of resource dictionary (e.g., Font, ColorSpace) @param name key identifying the specific resource @return COSObject if found and is indirect; otherwise null
3807 Retrieves CID system information from the font dictionary. @return PDCIDSystemInfo object or null if not found
3808 Retrieves a resource object by type and name. @param kind the type of resource (e.g., font, color space) @param name the specific resource name @return COSBase object or null if not found
3809 Retrieves the PDPanose object from the font descriptor. @return PDPanose object or null if not found
3810 Retrieves font resources. @return PDResources object or null if not found
3811 Retrieves resource names for a given type. @param kind the type of resource (e.g., Font, ColorSpace) @return iterable set of COSName keys or empty set if not found
3812 Retrieves character procedures dictionary. @return COSDictionary containing character procedures or null if not found
3813 Creates a unique key for a resource. @param kind the type of resource dictionary @param prefix the prefix for the key @return a unique COSName key
3814 Retrieves and initializes colorants from the DeviceN attributes. @param resources PDF resources containing color space definitions @return Map of separation names to PDSeparation objects @throws IOException if an error occurs during colorant creation
3815 Adds or updates a resource in the PDF document. @param kind type of resource (e.g., fonts, colors) @param name unique identifier for the resource @param object the COSObjectable resource to add/update
3816 Retrieves the DeviceN color process. @return PDDeviceNProcess object or null if not found
3817 Retrieves the render state for a specified destination. @param destination the target rendering destination (PRINT, VIEW, or EXPORT) @return RenderState object or null if not found
3818 Retrieves the associated PDF page. @return PDPage object or null if not found
3819 Retrieves the associated PDF page. @return PDPage object or null if not found
3820 Retrieves the associated PDF page. @return PDPage object or null if not found
3821 Retrieves the extended graphics state. @return PDExtendedGraphicsState object or null if not found
3822 Retrieves the ID tree node for structure elements. @return PDNameTreeNode representing the ID tree or null if not found
3823 Retrieves the resources associated with the tiling pattern. @return PDResources object or null if no resources are found
3824 Retrieves the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not found
3825 Retrieves the target directory for the action. @return PDTargetDirectory object or null if not found
3826 Retrieves and maps class attributes from the COSDictionary. @return Map of class names to their corresponding attribute objects or lists
3827 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not found
3828 Retrieves the target directory from the PDF document. @return PDTargetDirectory object or null if not found
3829 Retrieves the cryptographic filter dictionary by name. @param cryptFilterName the name of the cryptographic filter @return PDCryptFilterDictionary object or null if not found
3830 Retrieves the appearance dictionary of the annotation. @return PDAppearanceDictionary object or null if not found
3831 Sets the cryptographic filter dictionary. @param cryptFilterName name of the crypt filter @param cryptFilterDictionary crypt filter settings to apply
3832 Retrieves the associated PDF page. @return PDPage object or null if not found
3833 Retrieves the border style of the annotation. @return PDBorderStyleDictionary object or null if not found
3834 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
3835 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
3836 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
3837 Retrieves the digital signature from the FDF catalog. @return PDSignature object or null if no signature is found
3838 Retrieves the previous URI action. @return PDActionURI object or null if not found
3839 Retrieves JavaScript associated with the FDF document. @return FDFJavaScript object or null if no JavaScript is present
3840 Retrieves the external data dictionary of the annotation. @return PDExternalDataDictionary object or null if not found
3841 Retrieves the appearance dictionary of the field. @return PDAppearanceDictionary object or null if not found
3842 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
3843 Retrieves the appearance stream reference for the field. @return FDFNamedPageReference object or null if not found
3844 Retrieves the border effect dictionary of the polygon annotation. @return PDBorderEffectDictionary object or null if not found
3845 Retrieves the icon fit settings for the field. @return FDFIconFit object or null if not found
3846 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
3847 Retrieves additional actions for the field. @return PDAdditionalActions object or null if not found
3848 Retrieves appearance characteristics of the annotation. @return PDAppearanceCharacteristicsDictionary object or null if not found
3849 Retrieves the FDFPageInfo for this page. @return FDFPageInfo object containing page info or null if not found
3850 Retrieves additional actions for the annotation. @return PDAnnotationAdditionalActions object or null if not found
3851 Retrieves the named page reference from the template. @return FDFNamedPageReference object or null if not found
3852 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
3853 Retrieves the normal appearance of the annotation. @return PDAppearanceEntry object for normal state or null if not found
3854 Retrieves and initializes CID system info. @return PDCIDSystemInfo object or null if not found
3855 Retrieves the filter properties for digital signatures. @return PDPropBuildDataDict object containing filter details or null if not found
3856 Retrieves the PANOSE classification data for the font. @return PDPanose object containing font style information or null if not available
3857 Retrieves the publication security properties from the PDF. @return PDPropBuildDataDict object containing publication security settings or null if not found
3858 Retrieves font resources. @return PDResources object containing font resources or null if not found
3859 Retrieves application data properties. @return PDPropBuildDataDict object containing application data or null if not found
3860 Retrieves character procedures dictionary. @return COSDictionary containing character procedures or null if not found
3861 Retrieves MDP seed value configuration. @return PDSeedValueMDP object or null if not found
3862 Retrieves the seed value certificate. @return PDSeedValueCertificate object or null if not found
3863 Retrieves and initializes separation colorants from the PDF document. @param resources PDF document resources for reference @return Map of separation colorant names to PDSeparation objects @throws IOException if an error occurs during retrieval or initialization
3864 Retrieves the timestamp information for the digital signature. @return PDSeedValueTimeStamp object or null if not found
3865 Retrieves the DeviceN color process. @return PDDeviceNProcess object or null if not found
3866 Retrieves and initializes the property build from the digital signature. @return PDPropBuild object or null if not found
3867 Retrieves the render state for a given destination. @param destination target rendering destination (PRINT, VIEW, or EXPORT) @return RenderState object representing the current state, or null if not found
3868 Retrieves default resources from the PDF document. @return PDResources object or null if not found
3869 Retrieves additional actions for the form field. @return PDFormFieldAdditionalActions object or null if not found
3870 Retrieves the signature value as a PDSignature object. @return PDSignature object or null if not found
3871 Retrieves the extended graphics state for this shading pattern. @return PDExtendedGraphicsState object or null if not found
3872 Retrieves the default signature value. @return PDSignature object representing the default value or null if not set
3873 Retrieves the resources associated with the tiling pattern. @return PDResources object or null if no resources are found
3874 Retrieves the target directory for the action. @return PDTargetDirectory object or null if not found
3875 Retrieves the seed value for the signature field. @return PDSeedValue object or null if not found
3876 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not found
3877 Retrieves the measurement dictionary associated with the viewport. @return PDMeasureDictionary object or null if not found
3878 Retrieves the target directory from the current dictionary. @return PDTargetDirectory object or null if not found
3879 Retrieves document information associated with the thread. @return PDDocumentInformation object or null if not found
3880 Retrieves the appearance dictionary of the annotation. @return PDAppearanceDictionary object or null if not found
3881 Retrieves the first bead of the thread. @return PDThreadBead object or null if not found
3882 Retrieves the thread associated with this bead. @return PDThread object or null if not found
3883 Retrieves the associated PDF page of this annotation. @return PDPage object representing the annotation's page or null if not found
3884 Retrieves the next bead in the thread. @return PDThreadBead object representing the next bead or null if not found
3885 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
3886 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
3887 Retrieves the previous bead in the thread. @return PDThreadBead object representing the previous bead or null if not found
3888 Retrieves the page associated with this bead. @return PDPage object or null if not found
3889 Retrieves the URI action for the previous annotation. @return PDActionURI object or null if not found
3890 Retrieves the metadata of the PDF document. @return PDMetadata object or null if not present
3891 Retrieves the external data associated with the annotation. @return PDExternalDataDictionary object or null if not found
3892 Retrieves the metadata of the PDF page. @return PDMetadata object or null if no metadata is present
3893 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
3894 Retrieves the differences stream from the FDF document. @return COSStream object containing differences or null if not found
3895 Retrieves the border effect dictionary of the polygon annotation. @return PDBorderEffectDictionary object or null if not found
3896 Retrieves the font file stream. @return PDStream object containing the font file or null if not found
3897 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
3898 Retrieves the font file 2 stream. @return PDStream object for font file 2 or null if not found
3899 Retrieves appearance characteristics of the annotation. @return PDAppearanceCharacteristicsDictionary object or null if not found
3900 Retrieves the additional actions for this annotation. @return PDAnnotationAdditionalActions object or null if not found
3901 Retrieves the Font File 3 stream for this font. @return PDStream object containing the font file or null if not found
3902 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
3903 Retrieves the CID set stream from the font descriptor. @return PDStream object containing CID set data or null if not found
3904 Retrieves the normal appearance of the annotation. @return PDAppearanceEntry object or null if not found
3905 Retrieves the filter properties from the digital signature. @return PDPropBuildDataDict object containing filter details or null if not present
3906 Retrieves the sound stream associated with this action. @return COSStream object containing sound data or null if not found
3907 Retrieves publication security properties. @return PDPropBuildDataDict object or null if not found
3908 Retrieves the normal icon for an annotation. @return PDFormXObject representing the normal icon or null if not found
3909 Retrieves application-specific data from the digital signature properties. @return PDPropBuildDataDict object containing application data or null if not found
3910 Retrieves the rollover icon for the annotation. @return PDFormXObject representing the rollover icon or null if not found
3911 Retrieves the MDP seed value. @return PDSeedValueMDP object or null if not found
3912 Retrieves the alternate icon for the annotation. @return PDFormXObject representing the alternate icon or null if not found
3913 Retrieves the seed value certificate from the PDF document. @return PDSeedValueCertificate object or null if not found
3914 Retrieves appearance streams from a sub-dictionary. @return Map of COSName to PDAppearanceStream objects @throws IllegalStateException if the entry is not a sub-dictionary
3915 Retrieves timestamp information from the seed value. @return PDSeedValueTimeStamp object or null if not found
3916 Retrieves the document ID from the PDF trailer. @return COSArray containing the document ID or null if not found
3917 Retrieves the property build from the digital signature. @return PDPropBuild object or null if not found
3918 Retrieves default resources from the PDF form. @return PDResources object or null if not available
3919 Retrieves additional actions for the form field. @return PDFormFieldAdditionalActions object or null if none exist
3920 Retrieves the signature value from the PDF field. @return PDSignature object or null if not found
3921 Retrieves the default signature value. @return PDSignature object representing the default signature or null if not set
3922 Writes the PDF trailer to the output stream. @param doc COSDocument containing the trailer data @throws IOException if an I/O error occurs
3923 Retrieves the seed value dictionary for the signature field. @return PDSeedValue object or null if not found
3924 Retrieves the measurement dictionary for the viewport. @return PDMeasureDictionary object or null if not found
3925 Retrieves or creates the list of threads in the document. @return List of PDThread objects representing document threads
3926 Retrieves document information associated with the thread. @return PDDocumentInformation object or null if not found
3927 Retrieves all output intents from the PDF document. @return List of PDOutputIntent objects representing output intents
3928 Retrieves the first bead associated with this thread. @return PDThreadBead object or null if no bead is found
3929 Adds an output intent to the PDF document. @param outputIntent the PDOutputIntent object to add
3930 Retrieves the thread associated with this bead. @return PDThread object or null if not found
3931 Retrieves thread beads associated with the page. @return List of PDThreadBead objects representing thread beads or empty list if none found
3932 Retrieves the next bead in the thread. @return PDThreadBead object representing the next bead or null if not found
3933 Retrieves viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if not found
3934 Retrieves the previous bead in the thread. @return PDThreadBead object representing the previous bead or null if not found
3935 Retrieves child dictionaries from a given node. @param node the parent COSDictionary node @return List of COSDictionary representing children or empty list if none found
3936 Retrieves the PDF page associated with this bead. @return PDPage object or null if not found
3937 Retrieves child nodes of the current node. @return List of PDNameTreeNode objects representing child nodes
3938 Retrieves the metadata of the PDF document. @return PDMetadata object or null if not found
3939 Retrieves the metadata of the PDF page. @return PDMetadata object or null if no metadata is found
3940 Retrieves a map of names and their corresponding values. @return Unmodifiable map with string keys and generic type T values, or null if no names array exists @throws IOException if an error occurs during retrieval or conversion
3941 Retrieves the differences stream from the FDF document. @return COSStream object representing differences or null if not found
3942 Retrieves the upper limit from the limits array. @return decoded string of the upper limit or null if not found
3943 Retrieves the font file stream. @return PDStream object containing the font file or null if not found
3944 Sets the upper limit for a name tree node. @param upper the upper boundary string to set
3945 Retrieves font file 2 stream. @return PDStream object or null if not found
3946 Retrieves the lower limit of the name tree. @return The lower limit as a string or null if not found
3947 Retrieves font file 3 stream from the dictionary. @return PDStream object or null if not found
3948 Sets the lower limit for a name tree node. @param lower the string representing the lower limit
3949 Retrieves CID set stream from font descriptor. @return PDStream object containing CID set or null if not found
3950 Retrieves child nodes of the current node. @return List of PDNumberTreeNode objects representing child nodes or null if none exist.
3951 Retrieves numbers from the node's COSArray. @return Map of integer keys to COSObjectable values or null if not found @throws IOException if conversion fails
3952 Retrieves the sound stream associated with this action. @return COSStream object containing sound data or null if not found
3953 Retrieves the normal icon for the annotation. @return PDFormXObject representing the normal icon or null if not present
3954 Retrieves the upper limit value from the node's limits array. @return the upper limit as an Integer, or null if not found
3955 Sets the upper limit for a node. @param upper the upper limit value or null to clear it
3956 Retrieves the rollover icon for the annotation. @return PDFormXObject representing the rollover icon or null if not found
3957 Retrieves the alternate icon for the annotation. @return PDFormXObject representing the alternate icon or null if not found
3958 Retrieves the lower limit from the node's limits array. @return lower limit as an Integer, or null if not found
3959 Sets the lower limit for a node in the PDF tree. @param lower the integer value to set as the lower limit or null to remove it
3960 Retrieves appearance subdictionary streams. @return Map of COSName to PDAppearanceStream for sub-dictionary entries @throws IllegalStateException if entry is not a sub-dictionary
3961 Retrieves the document ID from the PDF trailer. @return COSArray containing the document ID or null if not found
3962 Retrieves the range values for the PDF function. @return COSArray containing range values or null if not found
3963 Retrieves the domain values for the function. @return COSArray containing domain values or null if not found
3964 Retrieves the size array of the PDF function. @return COSArray representing the size or null if not found
3965 Retrieves or constructs the decode array for the function. @return COSArray containing decode values, defaulting to range values if not set
3966 Retrieves the array of child functions. @return COSArray containing function objects or null if not found
3967 Writes the PDF trailer to the output stream. @param doc COSDocument instance being written @throws IOException if an I/O error occurs
3968 Retrieves the bounds array for the function. Initializes bounds from COS object if not already set. @return COSArray containing bounds or null if not found
3969 Retrieves or initializes the list of threads in the document. @return List of PDThread objects representing document threads
3970 Retrieves the Encode array for function evaluation. @return COSArray representing the encoding or null if not found
3971 Retrieves owner user properties. @return List of PDUserProperty objects
3972 Retrieves all output intents from the PDF document. @return List of PDOutputIntent objects representing the document's output intents
3973 Adds a user property to the document. @param userProperty the user property to add
3974 Adds an output intent to the document. @param outputIntent the PDOutputIntent object to add
3975 Removes a user property from the document. @param userProperty the PDUserProperty to remove
3976 Retrieves thread beads associated with the page. @return List of PDThreadBead objects representing thread beads
3977 Retrieves the guideline color. @return PDColor object representing the guideline color
3978 Retrieves viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if none found
3979 Checks if the specified edge is attached. @param edge name of the edge to check @return true if the edge is attached, false otherwise
3980 Retrieves child dictionaries (kids) from a given PDF node. @param node parent node containing the kids array @return list of COSDictionary objects representing child nodes
3981 Retrieves the color of the annotation. @return Color object or null if not specified
3982 Retrieves child nodes of the current node. @return List of PDNameTreeNode objects representing child nodes or null if none exist
3983 Retrieves the interior color of the circle annotation. @return Color object representing the interior color or null if not set
3984 Retrieves and converts name-value pairs from the PDF object model. @return Unmodifiable map of names to PD objects, or null if not found
3985 Retrieves callout line coordinates. @return Array of floats representing the callout line or null if not found
3986 Retrieves the upper limit from the LIMITS array. @return decoded upper limit string or null if not found
3987 Retrieves the ink list from the annotation. @return List of float arrays representing ink data or null if missing
3988 Sets the upper limit for a name tree node. @param upper the upper limit string to set
3989 Retrieves line coordinates from the annotation. @return Array of floats representing line coordinates or null if not found
3990 Retrieves the lower limit from the limits array. @return decoded string representing the lower limit or null if not found
3991 Sets the starting style of the line annotation. @param style the style to apply; null sets it to none
3992 Sets the lower limit for name ranges. @param lower the lower bound string to set
3993 Retrieves the starting point ending style of the line annotation. @return the style as a String or LE_NONE if not found
3994 Retrieves child nodes from the current node. @return List of PDNumberTreeNode instances representing child nodes
3995 Sets the ending style of the line annotation. @param style the ending style to set (e.g., "Circle", "Square")
3996 Retrieves the ending style of the line annotation. @return the ending style as a String or LE_NONE if not found
3997 Retrieves numbers from the COSArray and maps them to COSObjectable. @return Unmodifiable map of integer keys to COSObjectable values or null if array is missing @throws IOException if conversion fails
3998 Retrieves the interior color of the line annotation. @return Color object representing the interior color or null if not set
3999 Retrieves the upper limit from the node's limits array. @return upper limit as an Integer or null if not found
4000 Sets the horizontal offset of the caption for the line annotation. @param offset the horizontal offset value
4001 Sets the upper limit for a node in the PDNumberTreeNode. @param upper the upper limit value or null to remove it
4002 Retrieves the horizontal offset of the caption. @return float value representing the horizontal offset, default is 0.0 if not set
4003 Retrieves the lower limit from the node's limits array. @return Integer value of the lower limit or null if not available
4004 Sets the vertical offset for the caption of a line annotation. @param offset the vertical offset value
4005 Sets the lower limit for a node. @param lower the new lower limit value or null to remove it
4006 Retrieves vertical caption offset of the line annotation. @return Vertical offset as a float, defaulting to 0 if not set
4007 Retrieves the range values of the PDF function. @return COSArray containing the range values or null if not found
4008 Retrieves vertex coordinates of the polygon. @return Array of floats representing vertices or null if not found
4009 Retrieves the domain values of the PDF function. @return COSArray containing domain values or null if not set
4010 Retrieves the interior color of the polygon annotation. @return Color object representing the interior color or null if not defined
4011 Retrieves the Size array from the PDF function. @return COSArray representing the size or null if not found
4012 Retrieves vertex coordinates of the polyline annotation. @return Array of floats representing vertex coordinates or null if not found
4013 Retrieves or constructs the decode values for the function. Uses cached value if available, otherwise fetches from COSObject or defaults to range values. @return COSArray containing decode values
4014 Sets the ending style for the start point of a polyline annotation. @param style the style to apply, or null for no style
4015 Retrieves the array of child functions. @return COSArray containing function objects or null if not found
4016 Retrieves the starting point ending style of the polyline annotation. @return The ending style as a String or default if not found
4017 Retrieves the bounds array for the function. @return COSArray representing the bounds or null if not found
4018 Retrieves the encoding array for the function. @return COSArray representing the encoding or null if not found
4019 Sets the ending style of the polyline annotation's endpoint. @param style the ending style as a string (e.g., "None", "Circle")
4020 Retrieves owner user properties. @return List of PDUserProperty objects associated with the document
4021 Retrieves the endpoint ending style of the polyline annotation. @return the endpoint ending style as a String or default if not found
4022 Adds a user property to the document. @param userProperty the PDUserProperty to add
4023 Retrieves the interior color of the polyline annotation. @return Color object representing the interior color or null if not set
4024 Removes a user property from the document. @param userProperty the PDUserProperty to remove
4025 Retrieves the interior color of the annotation. @return Color object representing the interior color or null if not set
4026 Retrieves the guideline color. @return PDColor object representing the guideline color
4027 Retrieves the coordinates of the text markup annotation. @return Array of floats representing the quad points or null if not found
4028 Checks if the specified edge is attached. @param edge name of the edge to check @return true if the edge is attached, false otherwise
4029 Retrieves the ID array from the FDF document. @return COSArray containing the document's ID or null if not found
4030 Retrieves the color of the annotation. @return Color object or null if not found or invalid
4031 Retrieves all form fields from the FDF document. @return List of FDFField objects representing form fields
4032 Retrieves the interior color of the annotation. @return Color object representing the interior color or null if not set
4033 Retrieves a list of FDF pages. @return List of FDFPage objects or null if no pages are found
4034 Retrieves the callout points of the annotation. @return Array of floats representing callout coordinates or null if not found
4035 Retrieves child fields of the current field. @return List of FDFField objects or null if no children exist
4036 Retrieves the list of ink paths from the annotation. @return List of float arrays representing ink coordinates or null if not found
4037 Retrieves options for the field. @return List of option strings or FDFOptionElement objects
4038 Retrieves line coordinates from annotation. @return Array of floats representing line coordinates or null if not found
4039 Retrieves templates associated with the FDF page. @return List of FDFTemplate objects or null if no templates are found
4040 Sets the starting style of the line annotation. @param style the starting style string or null for default
4041 Retrieves the list of form fields from the FDF template. @return List of FDFField objects or null if no fields are present
4042 Retrieves the ending style of the line annotation's start point. @return String representing the ending style or default if not set
4043 Sets the ending style of the line annotation. @param style the ending style to apply (e.g., "Square", "Circle")
4044 Retrieves the ending style of the line annotation. @return String representing the ending style or default if not set
4045 Retrieves the interior color of the line annotation. @return Color object representing the interior color or null if not set
4046 Sets the horizontal offset of the line annotation's caption. @param offset the horizontal offset value
4047 Retrieves font character widths. @return List of Float values representing character widths or empty list if not found
4048 Retrieves the horizontal offset of the line annotation's caption. @return Horizontal offset as a float, defaulting to 0 if not set
4049 Sets the vertical offset of the caption for the line annotation. @param offset the vertical offset value to set
4050 Retrieves vertical offset of the annotation's caption. @return The vertical offset as a float, defaulting to 0 if not set
4051 Retrieves the white point for the color space. @return PDTristimulus object representing the white point, defaults to (1, 1, 1) if not set
4052 Retrieves vertex coordinates of the polygon annotation. @return Array of floats representing vertices or null if not found
4053 Retrieves the black point of the color space. @return PDTristimulus object representing the black point, defaulting to (0, 0, 0) if not set
4054 Retrieves the interior color of the polygon annotation. @return Color object representing the interior color or null if not set
4055 Retrieves or creates the gamma values for the color space. @return PDGamma object representing the gamma values
4056 Retrieves vertex coordinates of the polyline annotation. @return Array of floats representing vertices or null if not found
4057 Retrieves the transformation matrix for color conversion. @return float array representing the transformation matrix
4058 Sets the starting point ending style for a polyline annotation. @param style the ending style to set or null for no ending style
4059 Retrieves component names from the device's color space. @return List of component names or empty list if none found
4060 Retrieves the ending style of the polyline's start point. @return String representation of the ending style or default if not found
4061 Retrieves the A component range for LAB color. @return PDRange object representing the A component range
4062 Sets the ending style for the polyline annotation's endpoint. @param style the ending style as a string
4063 Retrieves the range for the B component of LAB color. Uses default range if none is found in dictionary. @return PDRange object representing B component range
4064 Retrieves the ending style of the polyline's endpoint. @return String representing the endpoint style or default if not found
4065 Retrieves the interior color of the polyline annotation. @return Color object representing the interior color or null if not set
4066 Retrieves the interior color of the annotation. @return Color object or null if not set
4067 Retrieves the coordinates of the text markup annotation. @return Array of floats representing the quad points or null if not found
4068 Retrieves or initializes the background color array. @return COSArray representing the background colors, or null if not set
4069 Retrieves the ID array from the FDF document. @return COSArray containing the document ID or null if not found
4070 Retrieves the domain of the shading. @return COSArray representing the domain or null if not found
4071 Retrieves all form fields from the FDF document. @return List of FDFField objects representing form fields
4072 Retrieves the extend array for shading. @return COSArray representing the extend values or null if not found
4073 Retrieves the list of FDF pages. @return List of FDFPage objects or null if no pages are found
4074 Retrieves the domain for the shading. @return COSArray representing the domain or null if not found
4075 Retrieves child fields of the current field. @return List of FDFField objects representing child fields or null if none exist
4076 Retrieves the coordinates array for the shading. @return COSArray containing the coordinates or null if not found
4077 Retrieves options for the field. @return List of option strings or FDFOptionElement objects, or null if no options are set
4078 Retrieves or initializes the decode array for color interpolation. @return COSArray containing decode values or null if not found
4079 Retrieves templates associated with the FDF page. @return List of FDFTemplate objects or null if no templates are found
4080 Retrieves font settings from the graphics state. @return PDFontSetting object or null if not found
4081 Retrieves all fields from the FDF template. @return List of FDFField objects or null if no fields are present
4082 Retrieves the fields associated with the reset action. @return COSArray containing field names or null if not found
4083 Retrieves form fields array. @return COSArray containing form field names or null if not found
4084 Retrieves the border array for the annotation. Ensures the border has at least three elements, defaulting missing values to zero. @return COSArray representing the annotation's border properties
4085 Retrieves font widths as a list of Floats. @return List of character widths or empty list if not found
4086 Retrieves rectangle margin differences for the annotation. @return Array of floats representing margin differences or empty array if none
4087 Retrieves rectangle differences for the annotation. @return Array of floats representing the rectangle differences or an empty array if none
4088 Retrieves the callout coordinates for the annotation. @return Array of floats representing the callout or null if not set
4089 Retrieves the white point of the color space. @return PDTristimulus object representing the white point, defaulting to [1, 1, 1] if not set
4090 Retrieves the ink list data for the annotation. @return 2D array of floats representing ink paths or empty if none found
4091 Retrieves the coordinates of the line annotation. @return Array of floats representing the line's start and end points, or null if not found
4092 Retrieves the black point of the color space. @return PDTristimulus object representing the black point, defaulting to [0, 0, 0] if not set
4093 Sets the starting style of the line annotation. @param style the starting style to be set
4094 Retrieves the gamma values for RGB color space. @return PDGamma object representing gamma values
4095 Retrieves the starting style of the line annotation. @return The starting style as a String or default value if not found
4096 Retrieves the transformation matrix for color space. @return Array of floats representing the transformation matrix
4097 Sets the ending style of the line annotation. @param style the ending style to apply or null for default
4098 Retrieves the list of component names from the device color space. @return List of component names as strings
4099 Retrieves the a component range for LAB color space. @return PDRange object representing the a component range
4100 Retrieves the line ending style at the end point. @return String representing the line ending style or default if not found
4101 Retrieves the b component range for LAB color space. @return PDRange object representing the b component range
4102 Sets the horizontal offset for the caption of a line annotation. @param offset the horizontal offset value
4103 Retrieves the horizontal offset of the caption. @return Caption's horizontal offset as a float, defaulting to 0 if not set
4104 Sets the vertical offset for the annotation's caption. @param offset the vertical offset value to apply
4105 Retrieves the vertical offset of the annotation caption. @return Vertical offset as a float, defaulting to 0 if not set
4106 Retrieves the background color array for shading. @return COSArray representing the background color or null if not set
4107 Retrieves quad points for the annotation. @return Array of float values representing the quad points or null if not found
4108 Retrieves the domain array for the shading. @return COSArray representing the domain or null if not found
4109 Retrieves vertices of the polygon annotation. @return Array of floats representing the polygon's vertices or null if not found
4110 Retrieves the extend array for the shading. @return COSArray representing the extend values or null if not found
4111 Retrieves the polygon's path as a 2D float array. @return 2D array of floats representing vertices or null if not found
4112 Retrieves the domain of the shading. @return COSArray representing the domain or null if not set
4113 Sets the starting style of the polyline annotation. @param style the style to apply at the start of the polyline
4114 Retrieves the coordinates for the shading. @return COSArray containing coordinate values or null if not found
4115 Retrieves the ending style of the polyline's start point. @return String representing the starting end style or default if not found
4116 Retrieves or creates the decode array for color interpolation. @return COSArray containing decode values or null if not applicable
4117 Sets the ending style for the polyline annotation. @param style the style to apply to the endpoint (null sets default)
4118 Retrieves and initializes font settings from the PDF dictionary. @return PDFontSetting object or null if no font array is found
4119 Retrieves the ending style of the polyline's endpoint. @return String representing the endpoint style or LE_NONE if not specified
4120 Retrieves the fields associated with the reset action. @return COSArray containing field names or null if not found
4121 Retrieves the vertex coordinates of the polyline. @return Array of floats representing the vertices or null if not found
4122 Retrieves the array of form fields to be submitted. @return COSArray containing field names or null if not found
4123 Retrieves rectangle differences for the annotation. @return Array of floats representing rectangle differences or empty array if not found
4124 Retrieves or creates the border array for the annotation. Ensures the border array has at least three elements, defaulting missing values to zero. @return COSArray representing the annotation's border properties
4125 Retrieves quad points defining the text markup area. @return Array of floats representing quad points or null if not found
4126 Retrieves rectangle margin differences for the annotation. @return Array of floats representing the margin differences or empty array if not found
4127 Sets the operating system information for digital signatures. @param os the name of the operating system or null to remove it
4128 Retrieves rectangle differences for the annotation. @return Array of floats representing the rectangle differences or empty array if not found
4129 Retrieves the sub-filters for the digital signature. @return List of sub-filter names or empty list if none found
4130 Retrieves the callout line coordinates. @return Array of floats representing the callout line or null if not found
4131 Retrieves the digest method(s) from the digital signature. @return List of digest method names or empty list if not found
4132 Retrieves a list of signature reasons. @return List of reason strings or empty list if not found
4133 Retrieves the ink list data for the annotation. @return 2D array of floats representing ink paths or empty if not found
4134 Retrieves legal attestation fields from the PDF document. @return List of legal attestation field names or empty list if not found
4135 Retrieves the coordinates of the line annotation. @return Array of floats representing the line's start and end points or null if not found
4136 Retrieves the subject information from the certificate. @return List of byte arrays representing the subject or null if not found
4137 Sets the starting style for the line annotation. @param style the style to apply (null sets default style)
4138 Adds a subject to the certificate's subject list. @param subject byte array representing the subject to add
4139 Retrieves the starting style of the line annotation. @return String representing the starting style or default if not set
4140 Removes a subject from the certificate's subject list. @param subject byte array representing the subject to remove
4141 Sets the ending style of the line annotation's endpoint. @param style the desired ending style or null for default
4142 Retrieves the key usage extensions from the certificate. @return List of key usage strings or null if not found
4143 Retrieves the ending style of the line annotation. @return String representing the ending style or default if not set
4144 Sets the horizontal offset for the caption of a line annotation. @param offset the horizontal offset value
4145 Adds a key usage extension to the certificate. @param keyUsageExtension string representing key usage (only '0', '1', 'X' allowed)
4146 Retrieves the horizontal offset of the caption. @return float value representing the horizontal offset, defaulting to 0 if not set
4147 Removes a specific key usage extension from the certificate. @param keyUsageExtension the key usage extension to remove
4148 Sets the vertical offset for the caption of a line annotation. @param offset the vertical offset value
4149 Retrieves issuer information from the certificate. @return List of byte arrays representing issuer data or null if not found
4150 Adds an issuer to the certificate. @param issuer byte array representing the issuer
4151 Retrieves the vertical offset of the caption. @return float value representing the vertical offset or 0 if not set
4152 Removes an issuer from the certificate's issuer list. @param issuer byte array representing the issuer to remove
4153 Retrieves quad points for the annotation. @return Array of floats representing quad points or null if not found
4154 Retrieves OID values from the certificate. @return List of byte arrays representing OIDs or null if not found
4155 Retrieves the vertices of the polygon annotation. @return Array of floats representing the vertices or null if not found
4156 Adds an OID to the certificate's OID list. @param oid byte array representing the OID to add
4157 Retrieves the path vertices of the polygon annotation. @return 2D array of floats representing the path or null if not found
4158 Removes an OID from the certificate's OID list. @param oid byte array representing the OID to remove
4159 Sets the starting style of a polyline annotation. @param style the style to apply; null defaults to no style
4160 Retrieves the Byte Range array from the signature dictionary. @return Array of integers representing the byte range or empty array if not found
4161 Retrieves the ending style of the polyline's start point. @return String representing the ending style or LE_NONE if not found
4162 Retrieves the calculation order of form fields. @return List of PDField objects in the specified calculation order
4163 Sets the ending style for the polyline annotation's endpoint. @param style the style to set (e.g., "Square", "Circle")
4164 Retrieves the ending style of the polyline. @return String representing the endpoint style or default if not set
4165 Retrieves indices of selected options in a choice field. @return List of Integer indices or empty list if none selected
4166 Retrieves the vertices of the polyline. @return Array of floats representing vertex coordinates or null if not found
4167 Retrieves the change X values as an array of PDNumberFormatDictionary. @return Array of PDNumberFormatDictionary objects or null if not found
4168 Retrieves rectangle differences for the annotation. @return Array of floats representing the rectangle differences or an empty array if not found
4169 Retrieves Y-axis change measurements. @return Array of PDNumberFormatDictionary or null if not found
4170 Retrieves quad points defining the annotation's text area. @return Array of floats representing the quad points or null if not found
4171 Retrieves distance measurement dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
4172 Retrieves area measurement dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
4173 Sets the operating system information in the digital signature properties. @param os the name of the operating system or null to remove the entry
4174 Retrieves angle measurement formats. @return Array of PDNumberFormatDictionary objects or null if not found
4175 Retrieves line slope number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
4176 Retrieves the SubFilter values from the digital signature. @return List of SubFilter names or empty list if not found
4177 Retrieves the coordinate system origin from the PDF document. @return float array representing the origin coordinates or null if not found
4178 Retrieves the digest method names from the digital signature. @return List of digest method names or empty list if not found
4179 Retrieves the visibility policy for optional content. @return COSName representing the visibility policy or default value if not found
4180 Retrieves a list of signature reasons. @return List of reason strings or empty list if none found
4181 Retrieves legal attestation names from the PDF document's dictionary. @return List of legal attestation names or empty list if not found
4182 Retrieves string value by key. Converts key to COSName and fetches its string value. @param key the key to look up in the dictionary @return the corresponding string value or null if not found
4183 Retrieves the subject information from the certificate. @return List of byte arrays representing the subject or null if not found
4184 Adds a subject to the certificate. @param subject byte array representing the subject data
4185 Retrieves the string value for a given key or returns a default value. @param key the key to look up in the dictionary @param defaultValue the value to return if the key is not found @return the corresponding string value or the default value if not found
4186 Removes a subject from the certificate's subject list. @param subject byte array representing the subject to remove
4187 Checks if the given offset points to a valid XRef stream. @param startXRefOffset potential start of XRef stream @return true if valid XRef stream, false otherwise
4188 Retrieves key usage extensions from the certificate. @return List of key usage strings or null if not found
4189 Adds a key usage extension to the certificate. @param keyUsageExtension string representing key usage (characters: 0, 1, X)
4190 Retrieves the page mode of the PDF document. @return PageMode enum representing the document's page mode, defaulting to USE_NONE if invalid or missing
4191 Removes a key usage extension from the certificate. @param keyUsageExtension the key usage extension to remove
4192 Retrieves the page layout of the PDF document. @return PageLayout enum representing the current page layout or PageLayout.SINGLE_PAGE if invalid
4193 Retrieves the issuer information from the certificate. @return List of byte arrays representing the issuer data or null if not found
4194 Retrieves the version of the PDF document. @return The version string or null if not found
4195 Adds an issuer to the certificate's issuer list. @param issuer byte array representing the issuer data
4196 Retrieves the trapped status of the PDF document. @return the trapped status as a string or null if not set
4197 Removes an issuer from the certificate's issuer list. @param issuer byte array representing the issuer to remove
4198 Retrieves the page label style. @return the style of the page label or null if not found
4199 Retrieves the OID (Object Identifier) from the certificate. @return List of byte arrays representing the OID or null if not found
4200 Retrieves the type of the PDF object. @return the type as a string or null if not found
4201 Adds an OID to the certificate's OID list. @param oid byte array representing the OID to add
4202 Creates a PDAttributeObject based on the owner type in the dictionary. @param dictionary COSDictionary containing attribute data @return Specific PDAttributeObject or default if owner type is unknown
4203 Removes an OID from the certificate's OID array. @param oid byte array representing the OID to remove
4204 Retrieves the owner of the attribute. @return string representation of the owner or null if not found
4205 Retrieves the byte range array from the signature dictionary. @return int[] containing byte range values or empty array if not found
4206 Retrieves the structure type of the PDF element. @return the structure type as a string or null if not found
4207 Retrieves the calculation order of form fields. @return List of PDField objects in the specified calculation order
4208 Creates a PDStructureNode based on the provided COSDictionary. @param node the COSDictionary representing the structure node @return PDStructureTreeRoot or PDStructureElement instance @throws IllegalArgumentException if dictionary type is invalid
4209 Retrieves indices of selected options in a choice field. @return List of Integer representing selected option indices, empty list if none selected
4210 Retrieves the type of the structure node. @return String representing the node's type or null if not found
4211 Retrieves the change X values as an array of PDNumberFormatDictionary. @return Array of PDNumberFormatDictionary or null if not found
4212 Retrieves an array of PDNumberFormatDictionary objects for the Y axis changes. @return Array of PDNumberFormatDictionary or null if not found
4213 Retrieves the name of the user property. @return the string value associated with key COSName.N or null if not found
4214 Retrieves distance measurement dictionaries. @return Array of PDNumberFormatDictionary or null if not found
4215 Retrieves the language of the marked content. @return Language string or null if not specified
4216 Retrieves area number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
4217 Retrieves the type of the marked content artifact. @return the string value of the TYPE property or null if not found
4218 Retrieves angle format dictionaries. @return Array of PDNumberFormatDictionary or null if not found
4219 Retrieves the subtype of the marked content artifact. @return the subtype as a string or null if not found
4220 Retrieves line slope format dictionaries. @return array of PDNumberFormatDictionary objects or null if not found
4221 Retrieves the filter name from the encryption settings. @return the name of the filter or null if not set
4222 Retrieves the coordinate system origin from the PDF document. @return Array of floats representing the origin coordinates or null if not found
4223 Retrieves the sub-filter name from the encryption dictionary. @return the sub-filter as a string or null if not found
4224 Retrieves the visibility policy for optional content. @return COSName representing the visibility policy or default if not found
4225 Creates an FDFAnnotation based on the given COSDictionary. @param fdfDic dictionary containing annotation data @return created FDFAnnotation or null if unsupported type
4226 Retrieves or creates a COSName for the given key and returns its string value. @param key the PDF name string @return the string representation of the COSName, or null if not found
4227 Retrieves the intent of the annotation. @return the intent as a string or null if not found
4228 Retrieves the line ending style of the annotation. @return the line ending style as a string or null if not found
4229 Retrieves the string value for a given key with a default fallback. @param key the COSName key to look up @param defaultValue the default value if the key is not found @return the string value or the default value if not found
4230 Retrieves the version of the FDF document. @return the version string or null if not found
4231 Retrieves the encoding of the FDF document. @return the encoding string, defaulting to "PDFDocEncoding" if not specified
4232 Checks if the given offset points to a valid XRef stream. @param startXRefOffset starting offset for XRef check @return true if valid XRef stream, false otherwise @throws IOException if an I/O error occurs
4233 Retrieves the page mode of the PDF document. @return the PageMode enum value or USE_NONE if not specified
4234 Retrieves the scale option for icon fitting. @return the scale option as a string, defaulting to SCALE_OPTION_ALWAYS if not set
4235 Retrieves the scale type for the icon. @return the scale type as a string, defaulting to proportional if not specified
4236 Retrieves the page layout of the PDF document. @return PageLayout enum representing the current page layout, default is SINGLE_PAGE if invalid or not set
4237 Retrieves the version of the PDF document. @return the version string or null if not found
4238 Retrieves the base font name from the font dictionary. @return the base font name as a string or null if not found
4239 Retrieves the trapped status of the document. @return the trapped status as a string, or null if not set
4240 Retrieves the page numbering style. @return the style as a string, or null if not found
4241 Retrieves the type name of the PDF object. @return the string representation of the type, or null if not found
4242 Retrieves the font type from the font dictionary. @return the font type as a string or null if not found
4243 Retrieves the subtype of the font. @return the subtype as a string or null if not found
4244 Creates a PDAttributeObject based on the owner type in the dictionary. @param dictionary the COSDictionary containing attribute data @return specialized PDAttributeObject or default if no match found
4245 Retrieves the font name from the font descriptor. @return the font name as a string or null if not found
4246 Retrieves the owner name associated with the PDF attribute. @return the owner's name as a string, or null if not found
4247 Retrieves the font stretch attribute. @return the font stretch as a string or null if not found
4248 Retrieves the structure type of the PDF element. @return the string value associated with the 'S' key, or null if not found
4249 Creates a PDStructureNode from a COSDictionary. @param node the COS dictionary representing the structure node @return PDStructureTreeRoot if type is "StructTreeRoot", otherwise PDStructureElement @throws IllegalArgumentException if type is neither "StructTreeRoot" nor "StructElem"
4250 Retrieves the base font name. @return the base font name as a string or null if not found
4251 Retrieves the type of the structure node. @return String representing the node's type, or null if not found
4252 Retrieves the base font name from the font dictionary. @return the base font name as a string or null if not found
4253 Retrieves the base font name. @return the base font name as a string or null if not found
4254 Retrieves the base font name. @return the base font name as a string or null if not found
4255 Retrieves the name of the user property. @return the string value associated with the 'N' key, or null if not found
4256 Retrieves the language of the marked content. @return Language as a string or null if not specified
4257 Checks if the DeviceN attributes represent an NChannel subtype. @return true if the subtype is "NChannel", false otherwise
4258 Retrieves the type of the PDF artifact. @return the string value associated with the TYPE key, or null if not found
4259 Retrieves the type of the PDF action. @return the action type as a string or null if not found
4260 Retrieves the subtype of the marked content artifact. @return the subtype as a string, or null if not found
4261 Retrieves the subtype of the PDF action. @return the subtype as a string or null if not found
4262 Retrieves the encryption filter name. @return the name of the filter used in encryption, or null if not set
4263 Creates a PDAction object based on the action type. @param action COSDictionary representing the action details @return PDAction object or null if unsupported type
4264 Retrieves the sub-filter type from the encryption settings. @return the sub-filter as a string, or null if not found
4265 Retrieves the subtype of the annotation. @return the subtype as a string, or null if not found
4266 Creates a FDFAnnotation instance based on the provided COSDictionary. @param fdfDic dictionary containing annotation data @return FDFAnnotation object or null if unsupported type
4267 Retrieves the caption positioning of the line annotation. @return the caption positioning as a string or null if not found
4268 Retrieves the intent of the annotation. @return the intent as a string or null if not found
4269 Returns the intent of the annotation. @return The intent as a string or null if not found.
4270 Retrieves the line ending style of the annotation. @return the line ending style as a string, or null if not found
4271 Retrieves the subtype of the external data dictionary. @return the subtype as a string, or null if not found
4272 Retrieves the version of the FDF document. @return the version as a string, or null if not found
4273 Retrieves the name associated with the digital signature. @return the name as a string or null if not found
4274 Retrieves the filter name associated with the digital signature. @return the filter name as a string, or null if not found
4275 Retrieves the encoding used in the FDF document. @return the encoding as a String, defaulting to "PDFDocEncoding" if not specified
4276 Retrieves the URL type from the certificate's COSDictionary. @return the URL type as a string, or null if not found
4277 Retrieves the scale option for icon fitting. @return the scale option as a string, defaulting to SCALE_OPTION_ALWAYS if not specified
4278 Retrieves the filter name used in the signature. @return the filter name as a string or null if not found
4279 Retrieves the scale type of the icon. @return the scale type as a string, defaulting to "Proportional" if not specified
4280 Retrieves the sub-filter type of the digital signature. @return the sub-filter as a string or null if not found
4281 Retrieves the base font name from the font dictionary. @return the base font name as a string, or null if not found
4282 Retrieves the field type of the non-terminal form field. @return the field type as a string, or null if not found
4283 Retrieves the name of the viewport. @return the string value associated with the NAME key in the COSDictionary, or null if not found
4284 Retrieves the duplex printing setting. @return string value of duplex setting or null if not found
4285 Retrieves the type of the font. @return the font type as a string, or null if not found
4286 Retrieves the subtype of the font. @return the subtype as a string or null if not found
4287 Retrieves string value by key from the dictionary. @param key the key to look up in the dictionary @return decoded string or null if not found
4288 Retrieves the font name from the font descriptor. @return the font name as a string, or null if not found
4289 Retrieves string value by key with a default fallback. @param key the key to look up in the dictionary @param defaultValue value to return if key is not found @return decoded string or default value if not found
4290 Retrieves the font stretch attribute. @return the font stretch as a string or null if not found
4291 Retrieves the language of the PDF document. @return Language string or null if not specified
4292 Retrieves the title of the PDF document. @return Title as a string or null if not set
4293 Retrieves the author of the PDF document. @return Author name as a string or null if not set
4294 Retrieves the base font name from the font dictionary. @return the base font name as a string, or null if not found
4295 Retrieves the subject of the PDF document. @return Subject string or null if not found
4296 Retrieves the base font name. @return the base font name as a string or null if not found
4297 Retrieves keywords from the PDF document. @return comma-separated list of keywords or null if not set
4298 Retrieves the base font name. @return the base font name as a string or null if not found
4299 Retrieves the creator of the PDF document. @return Creator's name as a string or null if not set
4300 Retrieves the base font name from the dictionary. @return the base font name as a string, or null if not found
4301 Retrieves the producer of the PDF document. @return Producer string or null if not found
4302 Retrieves the prefix for page labels. @return the prefix string or null if not found
4303 Checks if the DeviceN color space has NChannel subtype. @return true if the subtype is "NChannel", false otherwise
4304 Retrieves the Unicode file name. @return Unicode file name as a string or null if not found
4305 Retrieves the type of the PDF action. @return the string representation of the action type or null if not found
4306 Retrieves the file name from the PDF specification. @return file name as a string or null if not found
4307 Retrieves the subtype of the PDF action. @return the subtype as a string or null if not found
4308 Retrieves DOS file system name. @return DOS file system name as a string or null if not found
4309 Retrieves the Mac attribute of the file. @return the Mac attribute as a string or null if not found
4310 Creates a PDAction from a COSDictionary. @param action the COSDictionary representing the action details @return PDAction object or null if type is unsupported
4311 Retrieves Unix file specification. @return Unix file path as string or null if not found
4312 Retrieves the subtype of the annotation. @return subtype as a string, or null if not found
4313 Retrieves file description. @return Description of the file as a string or null if not found
4314 Retrieves the caption positioning of the line annotation. @return the caption positioning as a string, or null if not found
4315 Retrieves the element identifier. @return unique identifier string or null if not found
4316 Retrieves the intent of the annotation. @return the intent as a string or null if not found
4317 Retrieves the title of the PDF structure element. @return Title string or null if not found
4318 Retrieves the subtype of the external data dictionary. @return the subtype as a string, or null if not found
4319 Retrieves the language attribute of the PDF element. @return the language string or null if not set
4320 Retrieves the name associated with the digital signature. @return the string value of the name or null if not found
4321 Retrieves alternate description of the element. @return decoded alternate description string or null if not found
4322 Retrieves the filter name from the digital signature. @return the string representation of the filter or null if not found
4323 Retrieves the expanded form of the element. @return Expanded form string or null if not found
4324 Retrieves the URL type from the certificate's COSDictionary. @return the URL type as a string, or null if not found
4325 Retrieves the actual text associated with the element. @return decoded actual text string or null if not found
4326 Retrieves the formatted value of the user property. @return the formatted string value or null if not found
4327 Retrieves the filter name from the signature's COSDictionary. @return the filter name as a string, or null if not found
4328 Retrieves the actual text associated with marked content. @return Decoded string of actual text or null if not found
4329 Retrieves the subfilter type of the digital signature. @return the subfilter string or null if not found
4330 Retrieves alternate description of marked content. @return decoded alternate description string or null if not found
4331 Retrieves the field type of the non-terminal field. @return the string representation of the field type, or null if not found
4332 Retrieves the expanded form of marked content. @return Expanded form as a string or null if not available
4333 Retrieves the name of the viewport. @return the string value associated with the NAME key, or null if not found
4334 Retrieves the date of the annotation. @return Date string of the annotation or null if not found
4335 Retrieves the duplex printing setting. @return the duplex value as a string, or null if not set
4336 Retrieves the name of the annotation. @return the name as a string or null if not found
4337 Retrieves string value by key. @param key the key to look up in the dictionary @return decoded string if found, otherwise null
4338 Retrieves the content of the annotation. @return the content string or null if not found
4339 Retrieves the title of the annotation. @return Title as a string or null if not set
4340 Retrieves string value for a given key with a default fallback. @param key the key to look up in the dictionary @param defaultValue the default value to return if key is not found @return decoded string or default value if not found
4341 Retrieves the subject of the annotation. @return the subject string or null if not found
4342 Retrieves the language setting of the document. @return ISO 639-1 language code or null if not set
4343 Retrieves the annotation symbol. @return the symbol as a string or null if not found
4344 Retrieves the title of the PDF document. @return document title as a string or null if not set
4345 Retrieves the rotation angle of the annotation. @return rotation angle as a string or null if not found
4346 Retrieves the author of the PDF document. @return Author name as a string or null if not set
4347 Retrieves the default appearance string of the annotation. @return the default appearance string or null if not found
4348 Retrieves the subject of the PDF document. @return Subject string or null if not set
4349 Retrieves the default style of the annotation. @return default style as a string or null if not found
4350 Retrieves keywords from PDF document metadata. @return comma-separated list of keywords or null if not set
4351 Retrieves caption style of the line annotation. @return decoded caption style string or null if not found
4352 Retrieves the creator of the PDF document. @return Creator string or null if not found
4353 Retrieves the state of the annotation. @return current state as a string or null if not set
4354 Retrieves the producer of the PDF document. @return Producer string or null if not found
4355 Retrieves the state model of the annotation. @return state model as a string or null if not found
4356 Retrieves the prefix used for page labels. @return the prefix string or null if not set
4357 Retrieves the status of the FDF document. @return decoded string representing the status or null if not found
4358 Retrieves the Unicode file name. @return the Unicode file name as a string or null if not found
4359 Retrieves the target URL from the FDF document. @return the target URL as a string or null if not found
4360 Retrieves the file name from the PDF specification. @return The file name as a string, or null if not found
4361 Retrieves the partial name of the field. @return partial field name or null if not found
4362 Retrieves DOS file specification. @return DOS file specification string or null if not found
4363 Retrieves the name of the referenced page. @return the name of the page or null if not found
4364 Retrieves the MAC attribute of the file. @return MAC value as a string or null if not found
4365 Retrieves the font family name. @return font family as a string or null if not found
4366 Retrieves the Unix file name. @return the Unix filename as a string or null if not found
4367 Retrieves the character set of the font. @return character set string or null if not found
4368 Retrieves the file description. @return Description of the file as a string, or null if not found
4369 Retrieves the identifier of the PDF structure element. @return The unique identifier as a string, or null if not found.
4370 Retrieves the title of the PDF structure element. @return Title string or null if not set
4371 Retrieves the language attribute of the PDF element. @return language code as a string, or null if not set
4372 Retrieves alternate description of the element. @return decoded string if available, otherwise null
4373 Retrieves the name of the optional content group. @return the name as a string or null if not found
4374 Retrieves the expanded form of the element. @return decoded string representing the expanded form, or null if not found
4375 Retrieves names of optional content groups. @return Array of group names or empty array if none found
4376 Retrieves the actual text associated with the PDF element. @return the actual text as a string, or null if not set
4377 Retrieves the file specification for the launch action. @return file path or null if not found
4378 Retrieves formatted value of the property. @return decoded string representing the formatted value or null if not found
4379 Retrieves the file specification for launching. @return file specification as a string or null if not found
4380 Retrieves the O parameter value. @return the O parameter as a string or null if not found
4381 Retrieves the actual text of the marked content. @return The actual text as a string, or null if not available
4382 Retrieves alternate description of marked content. @return decoded alternate description string or null if not available
4383 Retrieves the file path to be launched. @return file path as a string or null if not found
4384 Retrieves the URI from the PDF action. @return The URI string or null if not found
4385 Retrieves the expanded form of the marked content. @return decoded string of the 'E' property or null if not found
4386 Retrieves the filename associated with the target directory. @return the filename as a string or null if not found
4387 Retrieves the date associated with the annotation. @return date as a string or null if not found
4388 Retrieves the annotation name from the dictionary. @return decoded string or null if not found
4389 Retrieves the name of the annotation. @return the name as a string or null if not found
4390 Retrieves the filename from the launch parameters. @return the filename as a string or null if not found
4391 Retrieves the content of the annotation. @return The content string of the annotation or null if not found.
4392 Retrieves the directory path. @return directory path as a string or null if not found
4393 Retrieves the title of the annotation. @return the title as a string or null if not set
4394 Retrieves the subject of the annotation. @return the subject string or null if not set
4395 Retrieves the execute parameter from the launch parameters. @return string value of the execute parameter or null if not found
4396 Retrieves the annotation symbol. @return the symbol of the caret annotation or null if not found
4397 Retrieves the contents of the annotation. @return the content string or null if not found
4398 Retrieves rotation angle of the annotation. @return rotation angle as string or null if not set
4399 Retrieves the last modified date of the annotation. @return Modified date as a string or null if not found
4400 Retrieves the default appearance of the annotation. @return default appearance string or null if not found
4401 Retrieves the name of the annotation. @return Name of the annotation as a string, or null if not found
4402 Retrieves the default style of the annotation. @return the default style as a string or null if not set
4403 Retrieves the default appearance string of the annotation. @return the default appearance string or null if not found
4404 Retrieves the caption style of the line annotation. @return the caption style as a string or null if not set
4405 Retrieves the default style string of the annotation. @return The default style string or null if not found.
4406 Retrieves the state of the annotation. @return current state as a string or null if not set
4407 Retrieves the title popup text of the annotation. @return the title popup text or null if not found
4408 Retrieves the state model of the annotation. @return the state model as a string or null if not found
4409 Retrieves the subject of the annotation. @return the subject as a string or null if not set
4410 Retrieves the status of the FDF document. @return decoded status string or null if not found
4411 Retrieves the state of the text annotation. @return the state as a string or null if not found
4412 Retrieves the target URL or destination. @return decoded target string if found, otherwise null
4413 Retrieves the state model of the annotation. @return string representation of the state model or null if not found
4414 Retrieves the partial field name. @return partial field name as a string or null if not found
4415 Retrieves the normal caption of the annotation. @return the normal caption as a string, or null if not found
4416 Retrieves the name of the referenced page. @return the name as a string or null if not found
4417 Retrieves the rollover caption of the annotation. @return Rollover caption as a string or null if not found
4418 Retrieves the font family name. @return font family as a string or null if not found
4419 Retrieves the alternate caption of the annotation. @return decoded alternate caption string or null if not found
4420 Retrieves the character set of the font. @return character set string or null if not found
4421 Retrieves the date of the digital signature. @return date as a string or null if not found
4422 Retrieves the operating system information from the digital signature. @return OS name as a String or null if not found
4423 Retrieves subject DN information from the certificate. @return List of maps containing subject DN attributes or null if not found
4424 Retrieves the URL associated with the certificate. @return URL as a string or null if not found
4425 Retrieves the URL from the dictionary. @return the URL as a string or null if not found
4426 Retrieves the name of the optional content group. @return the name as a string or null if not found
4427 Retrieves the name associated with the digital signature. @return the name as a string or null if not found
4428 Retrieves names of optional content groups. @return Array of group names or empty array if none found
4429 Retrieves the location associated with the digital signature. @return location string or null if not found
4430 Retrieves the file specification for the launch action. @return file path or URL as a string, or null if not set
4431 Retrieves the reason for the digital signature. @return The reason string or null if not found
4432 Retrieves the file specification or URL to be launched. @return decoded string representing the destination or null if not found
4433 Retrieves contact information from the signature. @return decoded contact info string or null if not found
4434 Retrieves the 'O' parameter from the action dictionary. @return decoded string value of 'O' or null if not found
4435 Retrieves the partial name of the field. @return partial name as a string or null if not found
4436 Retrieves the alternate field name. @return alternate field name as a string or null if not found
4437 Retrieves the file path or URL specified by the "P" key in the PDF action. @return the file path or URL as a string, or null if not found
4438 Retrieves the mapping name of the field. @return the mapping name as a string or null if not found
4439 Retrieves the URI from the PDF action. Handles UTF-16 (BE) and LE encodings. @return The URI as a string or null if not found
4440 Retrieves default style string from the COS object. @return decoded default style string or null if not found
4441 Retrieves the filename associated with the target directory. @return decoded filename string or null if not found
4442 Retrieves the scale ratio from the measurement dictionary. @return scale ratio as a string or null if not found
4443 Retrieves the annotation name from the PDF dictionary. @return the annotation name as a string or null if not found
4444 Fetches date value by key. @param key the key to look up in the dictionary @return Calendar object or null if not found or conversion fails
4445 Retrieves the filename from the launch parameters. @return the filename as a string or null if not found
4446 Retrieves the directory path from launch parameters. @return directory path as a string or null if not set
4447 Retrieves date value by key with a default. @param key the key to look up in the dictionary @param defaultValue the default Calendar value if not found @return Calendar object or default if not found or conversion fails
4448 Retrieves execute parameter from launch parameters. @return execution parameter as string or null if not found
4449 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date, or null if not found
4450 Retrieves the contents of the annotation. @return the content string or null if not found
4451 Retrieves the modification date of the PDF document. @return Calendar object representing the modification date or null if not found
4452 Retrieves the modified date of the annotation. @return Modified date as a string or null if not available
4453 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found
4454 Retrieves the name of the annotation. @return Name string of the annotation or null if not found
4455 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found
4456 Retrieves the default appearance string of the annotation. @return the default appearance string or null if not found
4457 Retrieves default style string of the annotation. @return decoded default style string or null if not found
4458 Retrieves the signing date of the digital signature. @return Calendar object representing the signing date or null if not found
4459 Retrieves the title popup text of the annotation. @return decoded title string or null if not found
4460 Retrieves a long value by key from the PDF dictionary. @param key the string representation of the key @return the long value or -1 if not found
4461 Retrieves the subject of the annotation. @return the subject string or null if not set
4462 Retrieves the state of the text annotation. @return the current state as a string or null if not set
4463 Retrieves a long value by key with a default. @param key the key to look up in the dictionary @return the long value or -1 if not found or not a COSNumber
4464 Retrieves the state model of the annotation. @return The state model as a string, or null if not found.
4465 Retrieves a long value by key from the PDF dictionary. @param key the string representation of the key @param defaultValue the default value to return if the key is not found @return the long value or the default value if not applicable
4466 Retrieves the normal caption of the annotation. @return The normal caption as a string, or null if not set.
4467 Retrieves the rollover caption for an annotation. @return String representing the rollover caption or null if not set
4468 Retrieves alternate caption of the annotation. @return decoded alternate caption string or null if not found
4469 Decodes an input stream using a list of filters. @param encoded InputStream containing encoded data @param filterList List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param options DecodeOptions for additional configuration @param results List to store DecodeResult objects (optional) @return RandomAccessRead object with decoded data @throws IOException if an I/O error occurs
4470 Retrieves the date of the digital signature. @return the date as a string or null if not found
4471 Sets the startxref byte position and resolves cross-reference trailers. @param startxrefBytePosValue byte position of the startxref entry
4472 Retrieves the operating system information from the digital signature properties. @return OS name as a String or null if not found
4473 Retrieves a float value by key from the dictionary. @param key the string representation of the PDF name @return float value or -1 if not applicable
4474 Retrieves the Subject DN (Distinguished Name) from the certificate. @return List of maps containing key-value pairs for each Subject DN entry, or null if not found
4475 Retrieves a float value associated with a given key. Uses -1 as default if not found.
4476 Retrieves the URL associated with the certificate. @return URL as a string or null if not present
4477 Retrieves the URL associated with the timestamp. @return the URL string if found, otherwise null
4478 Retrieves a float value by key. @param key the key to look up in the dictionary @param defaultValue default value if key not found or not a COSNumber @return float value or default if not applicable
4479 Retrieves the name of the digital signature. @return the name as a string, or null if not found
4480 Retrieves the user unit of the page. @return user unit value or default of 1.0 if not positive
4481 Retrieves the location information from the signature. @return Location string or null if not found
4482 Retrieves the guideline width. @return float value representing guideline width or default of 1 if not set
4483 Retrieves the reason for the digital signature. @return The reason string or null if not present
4484 Retrieves the opacity level of the annotation. @return float value representing opacity (0.0 to 1.0)
4485 Retrieves contact information from the signature. @return decoded contact info string or null if not found
4486 Retrieves the font weight. @return font weight as a float or 0 if not specified
4487 Retrieves the partial name of the field. @return partial name as a string or null if not found
4488 Retrieves the italic angle of the font. @return italic angle as a float value or 0 if not specified
4489 Retrieves the alternate field name. @return the alternate field name or null if not set
4490 Retrieves the ascent value of the font. @return float representing the ascent metric or 0 if not found
4491 Retrieves the mapping name of the field. @return the mapping name as a string or null if not found
4492 Retrieves the descent of the font. @return float value representing the descent or 0 if not found
4493 Retrieves the default style string of the text field. @return decoded default style string or null if not found
4494 Retrieves the leading (line spacing) of the font. @return line spacing value or 0 if not specified
4495 Retrieves the scale ratio from the PDF dictionary. @return scale ratio as a string, or null if not found
4496 Retrieves the cap height of the font. @return float value representing the cap height or absolute value if negative
4497 Retrieves or creates a COSName for the given string and fetches its date value. @param key the key for the date value @return Calendar object or null if not found or conversion fails
4498 Retrieves the x-height of the font. @return float value representing the x-height or absolute value if negative
4499 Retrieves the vertical stem width of the font. @return vertical stem width as a float, defaulting to 0 if not specified
4500 Retrieves a date value by key with a default fallback. @param key the key for the date value @param defaultValue Calendar to return if no date is found @return Calendar object or provided default if not found
4501 Retrieves the horizontal stem height of the font. @return float value representing the stem height or 0 if not set
4502 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not available
4503 Retrieves the average width of the font. @return average width as a float or 0 if not available
4504 Retrieves the modification date of the PDF document. @return Calendar object representing the modification date, or null if not found
4505 Retrieves the maximum width of the font. @return maximum width as a float, defaulting to 0 if not specified
4506 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found @throws IOException if an I/O error occurs while accessing the annotation data
4507 Retrieves the missing width from font descriptor. @return float value of missing width or 0 if not specified
4508 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found
4509 Retrieves the gamma correction value. @return gamma value as a float, defaulting to 1.0 if not specified
4510 Retrieves the signing date of the digital signature. @return Calendar object representing the signing date or null if not found
4511 Retrieves the x-step of the tiling pattern. @return float value representing the x-step or 0 if not found
4512 Retrieves or creates a COSName and fetches its associated long value. @param key the PDF name string @return the long value associated with the specified key, or -1 if not applicable
4513 Retrieves the vertical step of the tiling pattern. @return float value representing the y-step or default if not applicable
4514 Retrieves the sound volume. @return volume level between -1 and 1, defaulting to 1 if out of range
4515 Retrieves a long value associated with a given key. @param key the key whose associated value is to be returned @return the long value associated with the specified key, or -1 if not found or not a COSNumber
4516 Retrieves the leader line length of the annotation. @return length of the leader line or 0 if not specified
4517 Retrieves the leader line extension length of the annotation. @return float value representing the leader line extension length or 0 if not set
4518 Retrieves a long value associated with a given key. @param key the key whose associated value is to be returned @param defaultValue the default value to return if the key is not found or is not a COSNumber @return the long value associated with the specified key, or the default value if not applicable
4519 Retrieves the leader line offset length. @return float value representing the leader line offset length
4520 Retrieves the constant opacity of the annotation. @return float value representing opacity (0.0 to 1.0)
4521 Decodes an input stream using a list of filters. @param encoded InputStream containing encoded data @param filterList List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param options DecodeOptions for decoding settings @param results List to store DecodeResult objects @return RandomAccessRead with decoded data @throws IOException if an I/O error occurs during decoding
4522 Retrieves the border width. Returns 0 if the width is specified as a name (contradicts spec). @return float value of border width or default 1
4523 Sets the startxref position and resolves cross-reference trailers. @param startxrefBytePosValue byte position of the startxref entry
4524 Retrieves the duration of the transition. @return duration in seconds, default is 1 second if not specified
4525 Retrieves the scale factor for fly transitions. @return float value representing the scale factor or default of 1 if not set
4526 Retrieves a float value by key. @param key the key to look up in the dictionary @return the float value associated with the key, or -1 if not found
4527 Writes a PDF operator to the output stream. @param op the Operator object to write @throws IOException if an I/O error occurs during writing
4528 Retrieves a float value associated with a key. @param key the key to look up in the dictionary @return the float value associated with the key, or -1 if not applicable
4529 Retrieves a float value from the dictionary by key. @param key the key to look up in the dictionary @param defaultValue the default value to return if the key is not found or not a number @return the float value associated with the key, or the default value if not applicable
4530 Extracts text from specified regions on a PDF page. @param page the PDPage to extract text from @throws IOException if an I/O error occurs during processing
4531 Retrieves the user unit of the PDF page. @return the user unit value, defaulting to 1.0 if not set or invalid
4532 Retrieves the guideline width. @return the width of the guideline as a float, defaulting to 1 if not set
4533 Retrieves the role map from the PDF structure. @return Map containing role mappings or an empty map if not found
4534 Retrieves the opacity of the annotation. @return opacity value as a float (0.0 to 1.0)
4535 Retrieves the font weight. @return the font weight as a float, or 0 if not specified
4536 Appends a child node to the current structure node. @param objectable the child node to append, must not be null
4537 Retrieves the italic angle of the font. @return the italic angle as a float, defaulting to 0 if not specified
4538 Inserts a COSObjectable before a specified reference node. @param newKid the new child node to insert @param refKid the reference node before which to insert
4539 Retrieves the ascent value of the font. @return the ascent value or 0 if not found
4540 Removes a removable child object from the current node. @param objectable the COSObjectable to remove @return true if the object was successfully removed, false otherwise
4541 Retrieves the descent value of the font. @return the descent value as a float, or 0 if not found
4542 Updates the property value and notifies of changes. @param value new value for the property
4543 Retrieves the leading (line spacing) of the font. @return the leading value as a float, defaulting to 0 if not specified
4544 Retrieves the cap height of the font. @return absolute value of the cap height or default if not set
4545 Retrieves the x-height of the font. Handles negative values by returning their absolute value. @return the x-height as a float
4546 Retrieves the vertical stem width of the font. @return the vertical stem width as a float, or 0 if not specified
4547 Retrieves the horizontal stem height of the font. @return the horizontal stem height as a float, or 0 if not specified
4548 Retrieves the color space for the transparency group. @return PDColorSpace object representing the color space, or null if not set @throws IOException if an error occurs during retrieval
4549 Retrieves the average width of characters in the font. @return the average width as a float, or 0 if not specified
4550 Retrieves the maximum width of the font. @return the maximum width as a float, or 0 if not specified
4551 Creates a PDPropertyList based on the COSDictionary type. @param dict the COSDictionary to associate with the property list @return the appropriate PDPropertyList subclass instance
4552 Retrieves the missing width of the font. @return the missing width as a float value, or 0 if not specified
4553 Retrieves the line width from the graphics state. @return float value representing line width or null if not found
4554 Retrieves gamma correction value. @return gamma value from dictionary or default of 1.0 if not set
4555 Retrieves the miter limit value. @return the miter limit as a Float, or null if not found
4556 Retrieves the x-coordinate step of the tiling pattern. @return the x-step value, defaulting to 0 if not found
4557 Retrieves the flatness tolerance setting. @return float value representing the flatness tolerance or null if not set
4558 Retrieves the vertical step size of the tiling pattern. @return the y-step value as a float
4559 Retrieves the smoothness tolerance value. @return float value representing smoothness or null if not set
4560 Retrieves the sound volume. @return volume level between -1 and 1, defaulting to 1 if out of range
4561 Retrieves the stroking alpha constant. @return float value of the stroking alpha constant or null if not found
4562 Retrieves the leader line length of the annotation. @return the leader line length as a float, or 0 if not specified
4563 Retrieves the non-stroking alpha constant. @return the float value of the non-stroking alpha constant or null if not found
4564 Constructs a PDAnnotationLink instance from a COSDictionary. @param field the underlying COSDictionary for the annotation link
4565 Retrieves the leader line extension length of the annotation. @return the leader line extension length as a float, defaulting to 0 if not set
4566 Constructs a PDAnnotationMarkup instance from a COSDictionary. Initializes the markup annotation's dictionary. @param dict the underlying COSDictionary for the annotation
4567 Retrieves the leader line offset length of the annotation. @return the leader line offset length as a float, defaulting to 0 if not set
4568 Constructs a PDAnnotationPopup instance from a COSDictionary. @param field the underlying COSDictionary for the annotation
4569 Retrieves the constant opacity of the annotation. @return the opacity value as a float, defaulting to 1 if not set
4570 Constructs an unknown PDF annotation from a COSDictionary. @param dic the underlying COSDictionary for the annotation
4571 Retrieves the border width of a PDF annotation. @return float representing the border width, defaulting to 1 if not specified
4572 Constructs a PDAnnotationWidget instance from a COSDictionary. Sets the subtype to WIDGET in the annotation's dictionary. @param field the underlying COSDictionary for the annotation
4573 Retrieves the duration of the transition. @return duration in seconds, default is 1 second if not specified
4574 Retrieves export values of options for the choice field. @return List of export values corresponding to the choice field's options
4575 Retrieves the scale factor for fly transition. @return scale factor as a float, default is 1 if not specified
4576 Retrieves the current value(s) of the choice field. @return List of selected option values or empty list if none are set
4577 Writes a PDF operator and its associated objects to the output stream. @param op the Operator object to write @throws IOException if an I/O error occurs
4578 Retrieves the default value(s) for the choice field. @return List of default string values or empty list if none set
4579 Extracts text from specified regions on a given PDF page. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
4580 Writes a PDF object to output. @param obj COSBase object to write @throws IOException if an I/O error occurs
4581 Retrieves the role map from the PDF structure tree. @return Map containing role mappings or an empty map if not found
4582 Appends a COSObjectable child node to the current structure node. @param objectable the child node to append, must not be null
4583 Writes a PDF COSBase object to the output stream. Handles various COS types and manages compression. @param output target OutputStream for writing @param object COSBase object to write @param topLevel indicates if the object is at the top level @throws IOException if an I/O error occurs
4584 Inserts a COSObjectable before a reference object in the PDF structure. @param newKid the new child node to insert @param refKid the reference child node before which to insert the new node
4585 Removes a child node that is COSObjectable. @param objectable the COSObjectable object representing the child node to remove @return true if the child was successfully removed, false otherwise
4586 Sets the value of the user property. @param value new value for the property
4587 Determines the bounding box for a form field widget. @param fieldWidget the widget associated with the form field @param appearanceStream the appearance stream of the form field @return PDRectangle representing the bounding box, using retranslated rectangle if necessary
4588 Decrypts a PDF dictionary. @param dictionary the dictionary to decrypt @param objNum PDF object number @param genNum PDF generation number @throws IOException if an I/O error occurs during decryption
4589 Sets the bounding box for the layout attribute. @param bbox PDRectangle object defining the new bounding box
4590 Sets the color attribute for a given name. @param name the key for the color attribute @param value PDGamma object representing the color value or null to remove
4591 Retrieves the color space for this transparency group. @return PDColorSpace object representing the color space, or null if not defined @throws IOException if an error occurs during retrieval
4592 Sets four colors for a specified attribute. @param name the attribute key @param value the PDFourColours object to set
4593 Creates a new PDF page with standard letter size.
4594 Creates a PDPropertyList instance based on the dictionary type. @param dict the COSDictionary representing the property list @return a PDPropertyList subclass instance or default PDPropertyList if type is unknown
4595 Retrieves the line width from the graphics state. @return the line width as a float, or null if not set
4596 Retrieves the miter limit value. @return float value of the miter limit or null if not found
4597 Retrieves the flatness tolerance value. @return float value representing the flatness tolerance or null if not found
4598 Retrieves the smoothness tolerance value. @return float value representing smoothness or null if not found
4599 Retrieves the stroking alpha constant. @return float value representing the alpha constant, or null if not found
4600 Retrieves or creates the FDF dictionary for the catalog. @return FDFDictionary object associated with the catalog
4601 Retrieves the non-stroking alpha constant. @return the float value of the non-stroking alpha constant, or null if not found
4602 Initializes a new FDFDocument. Sets up an empty COSDocument and initializes the FDFCatalog.
4603 Constructs a PDAnnotationLink from a COSDictionary. @param field the COSDictionary representing the annotation
4604 Retrieves or creates the FDF catalog. @return FDFCatalog object representing the document's catalog
4605 Constructs a PDAnnotationMarkup from a COSDictionary. Initializes the markup annotation with the provided dictionary. @param dict the COSDictionary representing the annotation
4606 Retrieves the fractional space allocated for the icon. @return PDRange representing the space allocation, defaulting to 0.5 if not set
4607 Constructs a PDAnnotationPopup from a COSDictionary. @param field the COSDictionary representing the popup annotation
4608 Builds and sets the CID set for the font. @param cidToGid mapping of CID to GID @throws IOException if I/O error occurs during stream creation or data transfer
4609 Creates a new PDAnnotationUnknown from a COSDictionary. @param dic the COSDictionary representing the annotation
4610 Constructs a new PDTilingPattern with default settings. Initializes resources and sets necessary attributes for PDF compatibility.
4611 Constructs a PDAnnotationWidget from a COSDictionary. Initializes the annotation with the specified dictionary and sets its subtype. @param field the COSDictionary representing the annotation
4612 Retrieves export values for the choice field options. @return List of option export strings available in the choice field
4613 Sets the first bead in the thread. @param bead the PDThreadBead object to set as the first bead
4614 Retrieves the current value(s) of the choice field. @return List of selected option values or empty list if none are set
4615 Initializes a PDThreadBead with an empty dictionary. Sets the type to "Bead" and initializes next/previous beads to itself.
4616 Sets the role map for the structure tree. @param roleMap mapping of roles to PDF names
4617 Retrieves the default value(s) for the choice field. @return List of strings representing default values or empty list if none set
4618 Sets a string value in the PDF dictionary and notifies of changes. @param name the key for the attribute to set @param value the string value to assign to the key
4619 Sets the rendering intent. @param ri the rendering intent as a string
4620 Sets the name associated with the PDF action. @param name the name to be assigned to the action
4621 Writes a PDF object to the output stream. @param obj COSBase object to be written @throws IOException if an I/O error occurs
4622 Sets the border style. @param s the style string to be applied
4623 Initializes a new PDPageLabels object for a given document. @param document the PDF document to manage page labels for
4624 Constructs a PDF structure element. @param structureType the type of the structure element @param parent the parent PDStructureNode
4625 Initializes a new PDStructureTreeRoot instance.
4626 Writes a COSBase object to the output stream. Handles null, booleans, integers, floats, strings, names, arrays, and dictionaries. @param output OutputStream to write to @param object COSBase object to serialize @param topLevel indicates if this is a top-level object @throws IOException if an I/O error occurs
4627 Initializes a new shading pattern. Sets the "PatternType" to 2 (shading pattern).
4628 Constructs a new PDAction with an empty COSDictionary and sets its type.
4629 Retrieves the document's outline. @return PDDocumentOutline object or null if not found
4630 Initializes a new PDRectlinearMeasureDictionary with default settings.
4631 Determines the bounding box for a form field's appearance. @param fieldWidget widget representing the form field @param appearanceStream stream defining the visual appearance @return PDRectangle representing the bounding box, or retranslated rectangle if null
4632 Constructs a PDTransition with the default right-to-left slide style.
4633 Decrypts a PDF dictionary. @param dictionary the dictionary to decrypt @param objNum object number @param genNum generation number @throws IOException on I/O errors
4634 Sets a date item in the dictionary using a string key. @param key string representation of the PDF name @param date GregorianCalendar instance representing the date
4635 Sets the bounding box for the PDF element. @param bbox PDRectangle object defining the new bounding box
4636 Sets a date in an embedded dictionary. @param embedded key for the embedded dictionary @param key key for the date item @param date GregorianCalendar instance representing the date
4637 Sets a color attribute by name. @param name the attribute key @param value PDGamma object representing the color or null to remove
4638 Sets the creation date of the PDF document. @param date GregorianCalendar instance representing the creation date
4639 Sets four color values by name. @param name key for the color attribute @param value PDFourColours object containing color data
4640 Sets the modification date of the PDF document. @param date GregorianCalendar instance representing the new modification date
4641 Constructs a new PDPage with standard letter dimensions.
4642 Sets the creation date of the annotation. @param date GregorianCalendar instance representing the creation date
4643 Sets the modified date of the annotation. @param c GregorianCalendar instance representing the new modification date
4644 Sets the creation date of the annotation. @param creationDate GregorianCalendar instance representing the creation date
4645 Sets the signing date of the digital signature. @param cal GregorianCalendar instance representing the sign date
4646 Sets a custom metadata value in the PDF document. @param fieldName the name of the metadata field @param fieldValue the value to set for the metadata field
4647 Sets a string attribute in the PDF dictionary. @param name the key for the attribute @param value the string value to set
4648 Retrieves or creates the FDF dictionary for this catalog. @return FDFDictionary object representing the FDF data
4649 Sets the 'Base' string in the URI dictionary. @param base the base URL to be stored
4650 Constructs a new FDFDocument instance. Initializes internal structures for document management.
4651 Sets the application version in the PDF properties. @param applicationVersion version string to be stored
4652 Retrieves or creates the FDF catalog. @return FDFCatalog object representing the document's catalog
4653 Sets the units for numerical values in the PDF. @param units the string representation of the units (e.g., "in", "mm")
4654 Retrieves or creates the fractional space allocation for the icon. @return PDRange object representing the space allocation
4655 Sets the fractional display style for numerical values. @param fractionalDisplay the desired display style ("D", "F", "R", "T", or null)
4656 Builds and sets CIDSet for the font. @param cidToGid mapping of CIDs to GIDs @throws IOException if I/O error occurs during stream creation or transfer
4657 Sets the thousands separator for numerical values. @param thousandsSeparator character or string used as thousands separator
4658 Constructs a new PDTilingPattern with default settings. Initializes resources and sets necessary properties for PDF compliance.
4659 Sets the decimal separator for number formatting. @param decimalSeparator character to use as a decimal separator
4660 Sets the prefix string for labels in the number format. @param labelPrefixString the prefix to be used for labels
4661 Sets the first bead in the PDF thread. @param bead PDThreadBead object to set as the first bead
4662 Sets the label suffix string in the PDF number format. @param labelSuffixString the suffix to append to labels
4663 Initializes a new PDThreadBead with default settings. Sets up the bead dictionary and links it to itself as both next and previous.
4664 Sets the role map for the structure tree root. @param roleMap mapping of role names to PDF names
4665 Sets the label position to a specified value. @param labelPositionToValue the label position ("S", "P", or null) @throws IllegalArgumentException if the value is invalid
4666 Sets and updates a PDF name attribute. @param name key for the attribute @param value string value to set
4667 Constructs an FDFField from XML. @param fieldXML XML element representing the form field @throws IOException if an error occurs during value setting
4668 Sets the rendering intent in the graphics state. @param ri string representing the rendering intent
4669 Sets the name of the PDF action. @param name string to be assigned as the action's name
4670 Constructs an optional content group with a specified name. @param name the name of the OCG
4671 Sets the style of the border effect. @param s string representing the style to be set
4672 Sets an integer attribute in the PDF dictionary. @param name the key for the attribute @param value the integer value to set
4673 Initializes a new instance of PDPageLabels for the given document. @param document the PDF document to manage page labels for
4674 Sets an integer value for a given key in the PDF dictionary. @param name the key representing the attribute name @param value the integer value to set
4675 Initializes a PDF structure element with type and parent. @param structureType the type of the structure element @param parent the parent node in the PDF structure
4676 Sets the denominator for number formatting. @param denominator integer value representing the denominator
4677 Constructs a new PDStructureTreeRoot instance. Initializes the root of the logical structure tree with a predefined type.
4678 Constructs a new PDShadingPattern with shading type.
4679 Constructs a new PDAction with a default COSDictionary and sets its type.
4680 Creates a PDImageXObject from a BufferedImage. @param document PDF document to associate with the image @param image input BufferedImage containing 1-bit b/w data @return PDImageXObject object ready for inclusion in a PDF @throws IOException if an I/O error occurs during processing
4681 Retrieves the document's outline. @return PDDocumentOutline object or null if not present
4682 Sets the number of bits per color component. @param bitsPerComponent the number of bits to set
4683 Initializes a new PDRectlinearMeasureDictionary with default rectilinear subtype.
4684 Sets the number of bits per color component. @param bitsPerComponent the number of bits to set
4685 Creates a PDTransition with default 'R' (right-to-left) style.
4686 Sets the number of bits per coordinate. @param bitsPerCoordinate the number of bits used for each coordinate
4687 Sets a date value in the dictionary using a string key. @param key PDF name string representing the key @param date Calendar instance to store as a date string
4688 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits used for each coordinate
4689 Sets a date in an embedded dictionary. @param embedded key for the embedded COSDictionary @param key key within the dictionary to set the date @param date Calendar instance representing the date
4690 Sets a number attribute in the PDF dictionary. @param name the attribute key as a string @param value the float value to set
4691 Sets the creation date of the PDF document. @param date Calendar instance representing the creation date
4692 Sets the intensity of the border effect. @param i the intensity value to set
4693 Sets the modification date of the PDF document. @param date Calendar instance representing the new modification date
4694 Sets the conversion factor in the COSDictionary. @param conversionFactor the conversion factor to store
4695 Sets the creation date of the annotation. @param date Calendar instance representing the creation date
4696 Sets the modified date of the annotation. @param c Calendar instance representing the new modification date
4697 Sets the creation date of the annotation. @param creationDate Calendar instance representing the creation date
4698 Sets the signing date of the digital signature. @param cal Calendar instance representing the signing date
4699 Sets a custom metadata value in the PDF document. @param fieldName name of the metadata field @param fieldValue value to be set for the field
4700 Parses a directory object from the PDF source. Handles various types including dictionaries, arrays, strings, names, numbers, and booleans. @return COSBase instance representing the parsed object @throws IOException if an I/O error occurs during parsing
4701 Sets a string attribute in the PDF dictionary. @param name key for the attribute @param value string value to set or null to remove
4702 Retrieves the file specification associated with the PDF stream. @return PDFileSpecification object or null if not found @throws IOException if there is an issue creating the file specification
4703 Sets the 'Base' string in the URI dictionary. @param base The base URL or path to be set
4704 Retrieves the file specification associated with the FDF document. @return PDFileSpecification object or null if not found @throws IOException if the COSBase type is unknown
4705 Sets the application version in the digital signature properties. @param applicationVersion version string to be stored
4706 Sets the units of measurement in the number format. @param units String representing the units (e.g., "cm", "in")
4707 Retrieves a list of embedded FDF files. @return List of PDFileSpecification objects or null if none are found @throws IOException if an error occurs during file specification creation
4708 Sets the fractional display style. @param fractionalDisplay display style ("D", "F", "R", "T", or null)
4709 Retrieves the file specification for the named page reference. @return PDFileSpecification object or null if not found @throws IOException if an error occurs while creating the file specification
4710 Sets the thousands separator for numerical values. @param thousandsSeparator character or string used as a thousands separator
4711 Retrieves the file specification for the embedded action. @return PDFileSpecification object representing the file to open @throws IOException if an error occurs during retrieval
4712 Sets the decimal separator for numerical values. @param decimalSeparator character representing the decimal separator
4713 Sets the label prefix string in the number format dictionary. @param labelPrefixString the prefix string to be set
4714 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if the COSBase type is unknown
4715 Sets the label suffix string in the number format dictionary. @param labelSuffixString suffix to append to labels
4716 Retrieves the file specification of the launch action. @return PDFileSpecification object representing the file to be launched @throws IOException if there's an issue with creating the file specification
4717 Sets the label position to a specified value. @param labelPositionToValue "S" for suffix, "P" for prefix, or null @throws IllegalArgumentException if value is not "S", "P", or null
4718 Retrieves the file specification for the remote go-to action. @return PDFileSpecification object representing the target file or null if not found @throws IOException if an error occurs during retrieval
4719 Constructs an FDFField from an XML element. @param fieldXML XML element representing the field @throws IOException if an error occurs during parsing or setting values
4720 Retrieves the file specification for form submission. @return PDFileSpecification object or null if not found @throws IOException if an error occurs during retrieval
4721 Retrieves the file specification associated with the action. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs during retrieval
4722 Constructs a new optional content group with the specified name. @param name the name of the optional content group
4723 Retrieves the file specification of the attachment. @return PDFileSpecification object representing the file details @throws IOException if an error occurs while creating the file specification
4724 Sets an integer attribute in the PDF dictionary. @param name key for the attribute @param value integer value to set
4725 Creates a new FDFAnnotationHighlight with default settings. Initializes the annotation type to "Highlight".
4726 Sets an integer value in the PDF dictionary. @param name key for the attribute @param value integer value to set
4727 Creates a new squiggly line annotation. Initializes the annotation with default settings and sets its subtype.
4728 Sets the denominator for number format. @param denominator integer value representing the denominator
4729 Initializes a new strikeout annotation. Sets the subtype to "StrikeOut".
4730 Creates an empty underline annotation. Initializes the annotation type to "Annot".
4731 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to which the image belongs @param image source BufferedImage containing image data @return PDImageXObject ready for inclusion in PDF @throws IOException if I/O operations fail
4732 Initializes a new file attachment annotation. Sets the subtype to 'FileAttachment' in the COS dictionary.
4733 Sets the number of bits per color component. @param bitsPerComponent number of bits for each color component
4734 Sets the number of bits per color component for shading. @param bitsPerComponent number of bits for each color component
4735 Initializes a new ink annotation. Sets the subtype to "INK".
4736 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate integer value representing bits per coordinate
4737 Constructs a new PDAnnotationLine. Initializes the annotation with default settings and sets up an empty dictionary.
4738 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate integer value representing bits per coordinate
4739 Constructs a new polygon annotation with default settings.
4740 Constructs a new polyline annotation with default settings.
4741 Sets a float value for a given attribute name. @param name the attribute key as a string @param value the float value to set
4742 Initializes a new rubber stamp annotation. Sets the subtype to "RubberStamp" in the COS object.
4743 Sets the intensity of the border effect. @param i the intensity value to set
4744 Sets the conversion factor in the number format dictionary. @param conversionFactor the conversion factor to be set
4745 Constructs a square or circle annotation. @param subType subtype of the annotation ("Square" or "Circle")
4746 Initializes a new text annotation. Sets the subtype to 'Text' in the annotation's COS object.
4747 Initializes a new text markup annotation. @param subType the subtype of the annotation (e.g., Highlight)
4748 Parses a directory object from the PDF source. @return COSBase instance representing the parsed object @throws IOException if an I/O error occurs during parsing
4749 Retrieves the bounding box of the marked content. @return PDRectangle object representing the bounding box or null if not found
4750 Retrieves the file specification from the PDF stream. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
4751 Retrieves the bounding box for the layout attribute. @return PDRectangle object representing the bounding box or null if not found
4752 Retrieves the annotation's bounding rectangle. @return PDRectangle object or null if not found
4753 Retrieves the file specification from the FDF document. @return PDFileSpecification instance representing the file or null if not found @throws IOException if an error occurs during retrieval
4754 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe or null if not set
4755 Retrieves embedded FDF files. @return List of PDFileSpecification objects or null if none are found @throws IOException if an error occurs while creating file specifications
4756 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not set
4757 Retrieves the file specification associated with this named page reference. @return PDFileSpecification instance or null if not found @throws IOException if an error occurs during retrieval
4758 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not set
4759 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not set
4760 Retrieves the file specification for the embedded action. @return PDFileSpecification object representing the destination file @throws IOException if an error occurs while creating the file specification
4761 Retrieves the font bounding box. @return PDRectangle object representing the font bounding box or null if not found
4762 Retrieves the file specification from the PDF action. @return PDFileSpecification instance or null if not found @throws IOException if an error occurs during retrieval
4763 Retrieves the font bounding box. @return PDRectangle object representing the font's bounding box or null if not found
4764 Retrieves file specification for launch action. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
4765 Retrieves the bounding box of the form XObject. @return PDRectangle object representing the bounding box or null if not set
4766 Retrieves the file specification associated with this action. @return PDFileSpecification instance representing the target file or null if not found @throws IOException if an error occurs during file specification creation
4767 Retrieves the bounding box of the tiling pattern. @return PDRectangle object representing the bounding box or null if not found
4768 Retrieves the bounding box for the shading. @return PDRectangle object representing the bounding box or null if not set
4769 Retrieves the file specification associated with the form submission action. @return PDFileSpecification object or null if not found @throws IOException if an error occurs while creating the file specification
4770 Retrieves the annotation's bounding rectangle. @return PDRectangle object or null if invalid or missing
4771 Retrieves file specification from action dictionary. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
4772 Retrieves the rectangle difference for the annotation. @return PDRectangle object representing the rectangle difference or null if not set
4773 Retrieves the file specification of the attachment. @return PDFileSpecification instance or null if not found @throws IOException if an error occurs during retrieval
4774 Retrieves the rectangle differences for the annotation. @return PDRectangle object representing the difference or null if not set
4775 Creates a new highlight annotation. Sets the subtype to "Highlight".
4776 Retrieves the bounding box of the viewport. @return PDRectangle object representing the bounding box or null if not found
4777 Creates a new squiggly annotation. Initializes the subtype to 'Squiggly'.
4778 Retrieves the rectangle associated with the bead. @return PDRectangle object or null if not found
4779 Initializes a new strikeout annotation. Sets the subtype to "StrikeOut".
4780 Creates a new underline annotation. Initializes the subtype to "Underline".
4781 Sets the line dash pattern for rendering. @param array COSArray containing dash lengths @param phase initial phase value for the dash pattern
4782 Retrieves or creates the line dash pattern for guidelines. @return PDLineDashPattern object representing the dash pattern
4783 Constructs a new file attachment annotation. Initializes default properties and sets subtype to "FileAttachment".
4784 Retrieves the line dash pattern from the graphics state. @return PDLineDashPattern object or null if not found or invalid
4785 Retrieves or creates the line dash pattern for the border. @return PDLineDashPattern object representing the dash style
4786 Constructs a new ink annotation. Initializes default properties and sets subtype to "INK".
4787 Constructs a new line annotation. Initializes default properties and sets subtype to "Line".
4788 Creates a new polygon annotation. Initializes the annotation with subtype "PolyLine".
4789 Generates a stencil image from a PDF image. @param pdImage the PDImage to process @param paint the color paint for masking @return BufferedImage with applied mask or null if invalid @throws IOException if an I/O error occurs
4790 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
4791 Initializes a new rubber stamp annotation. Sets the subtype to "Widget".
4792 Constructs a new square or circle annotation. @param subType subtype of the annotation ("Square" or "Circle")
4793 Initializes a new text annotation. Sets the subtype to "Text".
4794 Initializes a new text markup annotation. @param subType specific subtype of the annotation (e.g., "Highlight")
4795 Retrieves the bounding box of the marked content. @return PDRectangle object representing the bounding box or null if not found
4796 Retrieves the bounding box of the PDF element. @return PDRectangle object representing the bounding box or null if not found
4797 Retrieves the annotation's bounding rectangle. @return PDRectangle object or null if not found
4798 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not set
4799 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not set
4800 Retrieves the transformation matrix of the form XObject. @return Matrix representing the transformation properties
4801 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe or null if not found
4802 Retrieves the transformation matrix for this pattern. @return Matrix instance representing the pattern's transformation
4803 Retrieves the fringe dimensions of the annotation. @return PDRectangle representing the fringe or null if not set
4804 Retrieves the transformation matrix for the shading. @return Matrix object representing the transformation or default identity if not set
4805 Retrieves the font bounding box. @return PDRectangle object representing the font bounding box or null if not found
4806 Sets an attribute in the PDF document. @param attrName the name of the attribute to set @param attrValue the value of the attribute to set
4807 Retrieves the font bounding box. @return PDRectangle object representing the font's bbox or null if not found
4808 Retrieves the bounding box of the form XObject. @return PDRectangle object representing the bounding box or null if not set
4809 Retrieves inheritable attribute from PDF page tree. @param node current node in the page tree @param key attribute key to find @return COSBase value of the attribute or null if not found
4810 Retrieves the bounding box of the tiling pattern. @return PDRectangle object representing the bounding box or null if not found
4811 Retrieves the bounding box of the shading. @return PDRectangle representing the bounding box or null if not set
4812 Retrieves the bounding rectangle of the annotation. @return PDRectangle object or null if invalid data
4813 Retrieves a boolean value by key. @param key primary key to look up in the dictionary @param defaultValue default boolean value if key is not found @return boolean value from dictionary or default if not applicable
4814 Retrieves the rectangle difference for the annotation. @return PDRectangle representing the rectangle difference or null if not set
4815 Retrieves the rectangle difference for the annotation. @return PDRectangle object representing the difference or null if not found
4816 Retrieves the bounding box of the viewport. @return PDRectangle object representing the bounding box or null if not found
4817 Retrieves the rectangle associated with the bead. @return PDRectangle object or null if not found
4818 Retrieves integer value by key with default. @param key primary key to look up in the dictionary @param defaultValue value to return if no valid integer is found @return integer value or default if not found
4819 Sets the line dash pattern for rendering. @param array COSArray containing dash lengths @param phase initial phase of the dash pattern
4820 Retrieves integer value by keys with default. @param firstKey primary key to look up in the dictionary @param secondKey secondary key if primary lookup fails @return integer value or -1 if not found
4821 Retrieves or creates the line dash pattern for guidelines. @return PDLineDashPattern object representing the dash pattern
4822 Retrieves the line dash pattern from the graphics state. @return PDLineDashPattern object or null if not found
4823 Retrieves or creates the dash style for the border. @return PDLineDashPattern object representing the dash pattern
4824 Initializes a PDInlineImage with given parameters, data, and resources. Decodes image data using specified filters. @param parameters PDF dictionary containing image settings @param data raw image data bytes @param resources PDF resources for image processing @throws IOException if decoding fails or invalid filter is used
4825 Generates a stencil image from a PDF image with a specified paint. @param pdImage the PDImage object to process @param paint the Paint object for coloring the mask @return BufferedImage representing the stencil image @throws IOException if an I/O error occurs
4826 Determines the file suffix based on image filters. @return Suffix like "jpg", "tiff", or "png"
4827 Retrieves COS objects by specified types from the document. @param type1 first type to match @param type2 second optional type to match @return List of matching COS objects
4828 Searches for a PDF trailer and populates the provided COSDictionary. @param trailer dictionary to populate with trailer information @return true if trailer is found, false otherwise @throws IOException if an I/O error occurs
4829 Searches for and sets document catalog and Info objects in the trailer. @param trailer COSDictionary representing the PDF trailer @return true if a valid catalog object is found, false otherwise
4830 Retrieves the page tree of the PDF document. @return PDPageTree object representing the pages in the document
4831 Constructs a PDPageTree with the specified root dictionary and no document association. @param root the COSDictionary representing the page tree root
4832 Converts a character code to its Unicode representation using a custom glyph list. @param code the character code to convert @param customGlyphList optional custom glyph list for conversion @return Unicode string or null if conversion fails
4833 Retrieves the transformation matrix of the form XObject. @return Matrix object representing the transformation or identity matrix if not set
4834 Retrieves the transformation matrix of the pattern. @return Matrix object representing the transformation matrix or default identity if not found
4835 Retrieves the transformation matrix for the shading. @return Matrix object representing the transformation or default identity matrix if not found
4836 Retrieves the transparency group associated with the soft mask. @return PDTransparencyGroup object or null if not found @throws IOException if an I/O error occurs during resource creation
4837 Sets an attribute value by name. @param attrName the attribute name @param attrValue the COSBase object to set or null to remove
4838 Sets the Mac subtype for the embedded file. @param macSubtype the Mac subtype to set
4839 Sets the Mac creator for the embedded file. @param macCreator Mac creator string to set
4840 Retrieves an inheritable attribute from a PDF page tree node. @param node the current node in the page tree @param key the attribute key to retrieve @return COSBase value of the attribute or null if not found
4841 Sets the Mac resource fork data. @param macResFork string containing Mac resource fork data
4842 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
4843 Retrieves boolean value by key. @param key primary key to look up @param defaultValue default boolean value if key is not found @return boolean value associated with the key or default value
4844 Parses an FDF document and returns the parsed data. @return FDFDocument object containing parsed data @throws IOException if parsing fails or I/O error occurs
4845 Retrieves an integer value by key. @param key primary key to look up @param defaultValue default value if key is not found @return integer value or default if key is invalid or missing
4846 Parses a PDF document and creates a PDDocument instance. @param lenient true for lenient parsing, false otherwise @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing or document creation
4847 Retrieves or creates the AcroForm with default fixup. @return PDAcroForm object representing the interactive form
4848 Retrieves an integer value by key(s). @param firstKey primary key to look up @param secondKey fallback key if first key is not found @return integer value or default (-1) if keys are invalid or missing
4849 Finds the page destination for a given named destination. @param namedDest the named destination to find @return PDPageDestination object or null if not found @throws IOException if an I/O error occurs
4850 Initializes a PDInlineImage with given parameters, data, and resources. @param parameters dictionary containing image attributes @param data raw image data bytes @param resources PDF resources for image processing @throws IOException if an error occurs during decoding or filter retrieval
4851 Retrieves a PDColorSpace by name. @param name the COSName of the color space @param wasDefault indicates if this is a default color space @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
4852 Checks if a color space resource exists by name. @param name specific color space name @return true if the color space exists, false otherwise
4853 Retrieves an extended graphics state by name. @param name the name of the graphics state @return PDExtendedGraphicsState object or null if not found
4854 Determines the file suffix based on image filters. @return Suffix like "jpg", "tiff", or "png"
4855 Checks if the specified XObject is an image. @param name the name of the XObject resource @return true if the XObject is an image, false otherwise
4856 Retrieves COS objects by specified types. @param type1 primary type to match @param type2 secondary optional type to match @return list of COSObjects matching the given types
4857 Retrieves color space resource names. @return Iterable of COSName keys representing color spaces or empty set if none found
4858 Retrieves XObject names. @return Iterable of COSName keys or empty set if not found
4859 Searches for and validates PDF trailers. @param trailer COSDictionary to populate with found items @return true if valid trailer is found, false otherwise
4860 Retrieves font names from the PDF resources. @return Iterable of COSName keys representing font names or empty set if none found
4861 Retrieves property names from PDF resources. @return Iterable of COSName keys representing properties or empty set if none found
4862 Searches for and sets trailer items in the given COSDictionary. @param trailer the COSDictionary to update with trailer items @return true if a root object is found, false otherwise @throws IOException if an I/O error occurs during parsing
4863 Retrieves shading resource names. @return Iterable of COSName keys representing shading resources or empty set if none found
4864 Retrieves the page tree of the PDF document. @return PDPageTree object representing the document's pages
4865 Retrieves pattern names from PDF resources. @return Iterable of COSName keys representing pattern names
4866 Constructs a PDPageTree with the given root dictionary. @param root the COSDictionary representing the root of the page tree
4867 Retrieves names of external graphics states. @return Iterable of COSName keys representing external graphics state names
4868 Adds or retrieves a PDF resource. @param kind type of resource (e.g., font, image) @param prefix base string for the key @param object resource object to be added or updated @return unique COSName key for the resource
4869 Converts a character code to its Unicode representation using a custom glyph list. @param code character code to convert @param customGlyphList optional custom glyph list for conversion @return Unicode string or null if conversion is not possible
4870 Adds or updates a font resource. @param name unique identifier for the font @param font PDFont object to be added or updated
4871 Adds or updates a color space resource in the PDF document. @param name unique identifier for the color space @param colorSpace color space object to be added or updated
4872 Retrieves the transparency group associated with the soft mask. @return PDTransparencyGroup object or null if not found @throws IOException if an error occurs during retrieval
4873 Adds or updates an extended graphics state resource. @param name unique identifier for the graphics state @param extGState graphics state object to be added or updated
4874 Sets the Mac OS subtype for the embedded file. @param macSubtype the subtype string to be set or null to remove
4875 Adds or updates a shading resource. @param name unique identifier for the shading @param shading PDShading object to be added or updated
4876 Sets the Mac creator attribute of the embedded file. @param macCreator Mac creator string to be set or null to remove
4877 Adds or updates a pattern resource in the PDF document. @param name unique identifier for the pattern @param pattern PDAbstractPattern object to be added or updated
4878 Sets the Mac OS resource fork of the embedded file. @param macResFork string representing the Mac OS resource fork data
4879 Adds or updates a property list resource. @param name unique identifier for the resource @param properties property list object to be added or updated
4880 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
4881 Adds or updates an XObject resource. @param name unique identifier for the XObject @param xobject XObject to be added or updated
4882 Parses an FDF document and returns the parsed data. @return FDFDocument object containing parsed data @throws IOException if I/O error occurs or header is invalid
4883 Sets the embedded file for this specification. @param file the PDEmbeddedFile to set
4884 Sets the embedded file with Unicode details. @param file PDEmbeddedFile to be set as unicode
4885 Parses a PDF document and creates a PDDocument instance. @param lenient true to enable lenient parsing, false otherwise @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing or creation
4886 Retrieves the standard cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
4887 Retrieves the PDF document's interactive form with default fixes applied. @return PDAcroForm object or null if none exists
4888 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
4889 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary the crypt filter settings to apply
4890 Finds the page destination for a given named destination. @param namedDest PDNamedDestination object representing the named destination @return PDPageDestination object or null if not found @throws IOException if an I/O error occurs while accessing dictionaries
4891 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary the crypt filter settings to apply as default
4892 Retrieves a PDColorSpace by name. @param name the COSName of the color space @param wasDefault indicates if this is a default color space @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
4893 Checks if a color space resource exists. @param name the specific color space name @return true if the color space exists, false otherwise
4894 Retrieves character procedure for a given font code. @param code font code to look up @return PDType3CharProc object or null if not found
4895 Retrieves an extended graphics state by name. @param name the name of the graphics state @return PDExtendedGraphicsState object or null if not found
4896 Checks if a resource is an Image XObject. @param name the resource name to check @return true if the resource is an Image XObject, false otherwise
4897 Retrieves the base state of optional content properties. @return The BaseState representing the current state, defaulting to ON if not set
4898 Retrieves color space names. @return iterable set of COSName keys representing color spaces or empty set if none found
4899 Sets the base state for optional content properties. @param state the BaseState to be applied
4900 Retrieves XObject names. @return iterable set of COSName keys or empty set if not found
4901 Retrieves font names from PDF resources. @return iterable set of COSName keys representing font names or empty set if none found
4902 Enables or disables an optional content group. @param group PDOptionalContentGroup to modify @param enable true to enable, false to disable @return true if the group was found and modified, false otherwise
4903 Retrieves property names from PDF resources. @return iterable set of COSName keys or empty set if not found
4904 Initializes a content stream for a tiling pattern. @param pattern The tiling pattern to write to @throws IOException if I/O error occurs or multiple writers are opened
4905 Retrieves shading resource names. @return iterable set of COSName keys for shadings or empty set if none found
4906 Retrieves the rollover appearance of the annotation. @return PDAppearanceEntry object for rollover state or normal state if not found
4907 Retrieves pattern names from PDF resources. @return iterable set of COSName keys for patterns or empty set if none found
4908 Retrieves the down appearance of the annotation. @return PDAppearanceEntry object for down state or normal state if not found
4909 Retrieves external graphics state names. @return iterable set of COSName keys or empty set if not found
4910 Adds or retrieves a resource key for a given object. @param kind type of resource (e.g., fonts, colors) @param prefix prefix for the key @param object the COSObjectable resource to add/update @return unique COSName key for the resource
4911 Adds or updates a font resource in the PDF document. @param name unique identifier for the font @param font PDFont object to add/update
4912 Retrieves the digital signature from the field. @return PDSignature object representing the signature or null if not found
4913 Adds or updates a color space resource in the PDF document. @param name unique identifier for the color space @param colorSpace the PDColorSpace to add/update
4914 Adds or updates an extended graphics state resource. @param name unique identifier for the graphics state @param extGState the PDExtendedGraphicsState to add/update
4915 Appends a new bead to the thread. @param append PDThreadBead object to be added
4916 Retrieves the normal appearance stream of the annotation. @return PDAppearanceStream object or null if not found
4917 Adds or updates a shading resource in the PDF document. @param name unique identifier for the shading resource @param shading PDShading object to add/update
4918 Adds or updates a pattern resource in the PDF document. @param name unique identifier for the pattern @param pattern PDAbstractPattern object to add/update
4919 Adds or updates a property list resource. @param name unique identifier for the resource @param properties PDPropertyList object to add/update
4920 Retrieves the on value for the checkbox. @return The COSName representing the on state or an empty string if not found
4921 Adds or updates an XObject resource. @param name unique identifier for the XObject @param xobject the PDXObject to add/update
4922 Validates and checks the page tree structure in a PDF document. @param root the root dictionary of the PDF @throws IOException if the page tree is invalid or not found
4923 Sets the embedded file in the PDF specification. @param file PDEmbeddedFile object to be set
4924 Sets the embedded file with Unicode name. @param file PDEmbeddedFile object to set
4925 Retrieves the standard cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
4926 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
4927 Retrieves the value associated with a given name. @param name the key to search for in the tree @return the value of type T or null if not found @throws IOException if an error occurs during retrieval
4928 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary crypt filter settings to apply
4929 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary crypt filter settings to apply as default
4930 Retrieves character procedure for a given font code. @param code font code to look up @return PDType3CharProc instance or null if not found
4931 Retrieves the value at a specific index in the tree. @param index the index of the value to retrieve @return the COSObjectable value or null if not found @throws IOException if an I/O error occurs during retrieval
4932 Sets the child nodes (kids) for this tree node. Updates limits based on first and last kid's limits. @param kids list of child PDNumberTreeNode objects
4933 Retrieves the base state of optional content. @return BaseState object representing the current state
4934 Sets numeric values and limits for a node. @param numbers map of integer keys to COSObjectable values
4935 Sets the base state of optional content properties. @param state BaseState object representing the new base state
4936 Retrieves the number of output parameters for the PDF function. @return Number of output parameters or 0 if range values are not found
4937 Enables or disables an optional content group. @param group the PDOptionalContentGroup to enable/disable @param enable true to enable, false to disable @return true if the group was successfully toggled, false otherwise
4938 Retrieves the range for a specified output parameter. @param n index of the output parameter @return PDRange object representing the range or null if not found
4939 Initializes a content stream for a tiling pattern. @param pattern the PDTilingPattern to initialize the stream for @throws IOException if an I/O error occurs during initialization
4940 Clips each input value to its corresponding range. @param inputValues array of input values @return array of clipped values or original inputs if no ranges are defined
4941 Retrieves the number of input parameters. @return Number of input parameters for the function
4942 Retrieves the rollover appearance of the annotation. @return PDAppearanceEntry object for rollover state, or normal appearance if not found
4943 Retrieves the domain range for a specified input parameter. @param n index of the input parameter @return PDRange object representing the domain or null if not found
4944 Retrieves the down appearance of the annotation. @return PDAppearanceEntry object or normal appearance if not found
4945 Calculates the sample index for given coordinate vector. @param vector array of coordinates @return calculated sample index
4946 Retrieves the encode values for PDF function. Initializes with default values if not present. @return COSArray containing encode values
4947 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
4948 Retrieves the digital signature from the PDF field. @return PDSignature object or null if not found
4949 Retrieves the Encode range for a specified parameter. @param n index of the parameter @return PDRange object representing the encoding range
4950 Checks if the top edge of the content is attached. @return true if the top edge is attached, false otherwise
4951 Appends a new bead to the thread. @param append PDThreadBead object to be added
4952 Checks if the bottom edge of the content is attached. @return true if the bottom edge is attached, false otherwise
4953 Retrieves the normal appearance stream of the annotation. @return PDAppearanceStream object or null if not found
4954 Checks if the left edge of the artifact is attached. @return true if the left edge is attached, false otherwise
4955 Checks if the right edge of the content is attached. @return true if the right edge is attached, false otherwise
4956 Retrieves the 'on' value of the checkbox. @return The COSName as a string representing the 'on' state, or an empty string if not found
4957 Initializes a CID font with given dictionary and parent. @param fontDictionary CID font dictionary @param parent parent Type0Font object
4958 Checks and validates the page tree structure in a PDF document. @param root the root dictionary of the PDF document @throws IOException if the page tree is invalid or an I/O error occurs
4959 Initializes a DictionaryEncoding with specified base encoding and differences. @param baseEncoding the base encoding as a COSName @param differences array of character code differences @throws IllegalArgumentException if base encoding is invalid
4960 Initializes a new DictionaryEncoding instance. @param fontEncoding the COSDictionary containing encoding information
4961 Initializes a DictionaryEncoding object. @param fontEncoding the COSDictionary containing encoding information @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
4962 Retrieves the value associated with a given name. @param name key to search for in the node and its children @return value of type T or null if not found
4963 Constructs a color space from a COSArray. @param rgb RGB color values as COSArray
4964 Retrieves the value at a specified index. @param index position of the value to retrieve @return COSObjectable value or null if not found @throws IOException if an I/O error occurs during retrieval
4965 Sets the child nodes (kids) for this tree node. Updates limits based on first and last kid's limits. @param kids list of child PDNumberTreeNode objects
4966 Sets the range for the L component of LAB color. @param range PDRange object defining min and max values
4967 Sets numeric values and limits for the tree node. @param numbers map of integer keys to COSObjectable values
4968 Sets the 'b' component range for LAB color. @param range PDRange object defining min and max values for 'b'
4969 Retrieves the number of output parameters. @return Number of output parameters or 0 if none defined
4970 Retrieves an optional content group by name. @param name the name of the OCG to find @return PDOptionalContentGroup object or null if not found
4971 Retrieves the range for a specific output parameter. @param n Index of the output parameter @return PDRange object representing the range or null if not found
4972 Adds a new optional content group to the PDF document. @param ocg the PDOptionalContentGroup to add
4973 Clips input values to specified ranges. @param inputValues array of input values to clip @return array of clipped values within defined ranges
4974 Retrieves all optional content groups in the document. @return Collection of PDOptionalContentGroup objects
4975 Retrieves the number of input parameters for the PDF function. @return Number of input parameters
4976 Retrieves the domain range for a specific input parameter. @param n index of the input parameter @return PDRange object representing the domain or null if not set
4977 Initializes a ShadingContext for PDF rendering. @param shading PDShading object representing the shading @param cm ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an error occurs during initialization
4978 Calculates the sample index for interpolation. @param vector coordinate vector for indexing @return calculated sample index
4979 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
4980 Retrieves or constructs the Encode array for PDF function. @return COSArray representing the Encode values
4981 Retrieves the color of the annotation. @return PDColor object representing the annotation's color or null if not found
4982 Retrieves the decode range for a specific parameter. @param paramNum Index of the parameter @return PDRange object or null if not available
4983 Retrieves the border color of the annotation. @return PDColor object representing the border color
4984 Retrieves encoding range for a specific parameter. @param n index of the parameter @return PDRange object representing the encoding bounds
4985 Retrieves the background color of the annotation. @return PDColor object representing the background color or null if not set
4986 Checks if the top edge of the marked content is attached. @return true if the top edge is attached, false otherwise
4987 Adds key usage extensions to the certificate. @param digitalSignature, nonRepudiation, etc. flags indicating key usages ('0' or '1')
4988 Checks if the bottom edge of the content is attached. @return true if the bottom edge is attached, false otherwise
4989 Retrieves the contents of a digital signature from a PDF file. @param pdfFile InputStream representing the PDF file @return byte array containing the signature content @throws IOException if I/O error occurs
4990 Checks if the left edge of the content is attached. @return true if the left edge is attached, false otherwise
4991 Checks if the right edge of the content is attached. @return true if the right edge is attached, false otherwise
4992 Retrieves the signature contents from a PDF file. @param pdfFile array of bytes representing the PDF file @return byte array containing the signature content @throws IOException if I/O error occurs
4993 Extracts signed content from a PDF file. @param pdfFile InputStream of the PDF document @return byte array containing the signed content @throws IOException if an I/O error occurs
4994 Initializes a PDCIDFont with the given font dictionary and parent font. Reads widths and vertical displacements from the CID font dictionary.
4995 Extracts signed content from a PDF file. @param pdfFile byte array of the PDF document @return byte array of the signed content @throws IOException if an I/O error occurs
4996 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base font encoding as a COSName @param differences an array of character code differences
4997 Retrieves the string value associated with a given key. @param name the key to look up in the dictionary @return the corresponding string value or null if not found
4998 Initializes a new DictionaryEncoding with the given font encoding. @param fontEncoding COSDictionary representing the font encoding
4999 Retrieves the rendering intent from the graphics state dictionary. @return RenderingIntent object or null if not found
5000 Retrieves the name associated with this PDF action. @return the name as a string or null if not found
5001 Initializes a new DictionaryEncoding. @param fontEncoding the COSDictionary containing encoding information @param isNonSymbolic true if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
5002 Retrieves string value for a given key or returns default. @param key the key to look up in the dictionary @param defaultValue the value to return if the key is not found @return the corresponding string value or the default value if not found
5003 Initializes a color space with RGB values. @param rgb COSArray containing RGB color data
5004 Retrieves the guideline style as a string. @return the guideline style or "solid" if not specified
5005 Retrieves the icon name of the annotation. @return the icon name as a string or default note icon if not set
5006 Retrieves the attachment name. @return the attachment name as a string or a default value if not found
5007 Retrieves the line ending style of the annotation. @return the line ending style as a string, defaulting to LE_NONE if not specified
5008 Retrieves the highlight mode of the link annotation. @return the highlight mode as a string or default value if not found
5009 Retrieves the reply type of the annotation. @return the reply type as a string or default value if not found
5010 Retrieves the name of the rubber stamp annotation. @return the name as a string or "Draft" if not specified
5011 Sets the range for the L component in LAB color space. @param range PDRange object defining min and max values or null to reset defaults
5012 Retrieves the name of the annotation. @return the name as a string or a default value if not specified
5013 Retrieves the highlighting mode of the annotation. @return the highlighting mode as a string, default is "I"
5014 Sets the range for the B component of LAB color. @param range PDRange object defining min and max values or null to reset defaults
5015 Retrieves the border style of the annotation. @return the style as a string, defaulting to "S" (solid) if not specified
5016 Retrieves an optional content group by name. @param name the name of the OCG to find @return PDOptionalContentGroup if found, otherwise null
5017 Retrieves the type of the external data dictionary. @return the type as a string, defaulting to "ExData" if not specified
5018 Adds an optional content group to the PDF document. @param ocg the PDOptionalContentGroup to add
5019 Retrieves all optional content groups from the PDF document. @return Collection of PDOptionalContentGroup objects
5020 Retrieves the transition style. @return the transition style as a string or "R" if not specified
5021 Retrieves the dimension of the transition. @return the dimension as a string or default value if not found
5022 Initializes a ShadingContext for PDF rendering. @param shading PDShading object representing the shading @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @throws IOException if there is an issue with color space retrieval or background processing
5023 Retrieves the motion type of the transition. @return the motion type as a string or default value if not found
5024 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
5025 Retrieves the non-full screen page mode preference. @return the non-full screen page mode as a string or "UseNone" if not specified
5026 Retrieves the annotation's color using the default key. @return PDColor object or null if no valid color is found
5027 Retrieves the reading direction preference. @return the reading direction as a string ("L2R" or "R2L")
5028 Retrieves the border color of the annotation. @return PDColor object representing the border color or null if not set
5029 Retrieves the view area preference. @return the view area setting as a string, defaulting to CropBox if not specified
5030 Retrieves the background color of the annotation. @return PDColor object representing the background color or null if not found
5031 Retrieves the view clipping preference. @return the view clip setting or "CropBox" if not specified
5032 Adds key usage extensions to the certificate. @param digitalSignature, nonRepudiation, etc. flags for various key usages (0 or 1)
5033 Retrieves the print area setting. @return the print area as a string or "CropBox" if not specified
5034 Retrieves the print clipping setting. @return string value of the print clip or default boundary (CropBox)
5035 Retrieves the digital signature contents from a PDF file. @param pdfFile input stream of the PDF document @return byte array containing the signature data @throws IOException if an I/O error occurs
5036 Retrieves the print scaling preference. @return the print scaling as a string or default value if not set
5037 Extracts and converts the signature contents from a PDF file. @param pdfFile byte array of the PDF document @return byte array of converted signature contents @throws IOException if an I/O error occurs
5038 Checks and validates the XRef offset in a PDF document. @param startXRefOffset potential start of XRef table/stream @return validated XRef offset or -1 if not found @throws IOException if an I/O error occurs during validation
5039 Extracts signed content from a PDF file using byte range. @param pdfFile input stream of the PDF document @return byte array containing signed content @throws IOException if I/O error occurs during processing
5040 Retrieves the PDF document's version. Checks both the header and catalog for version information. @return The highest version number as a float
5041 Extracts signed content from a PDF file. @param pdfFile the byte array of the PDF document @return byte array containing the signed content @throws IOException if an I/O error occurs while processing
5042 Retrieves and organizes attribute objects for the structure element. @return Revisions object containing PDAttributeObject instances
5043 Checks if the attribute object is empty. @return true if only the owner exists, false otherwise
5044 Retrieves the string value of a specified PDF attribute. @param name the key of the attribute to retrieve @return the string representation of the attribute, or null if not found
5045 Retrieves the rendering intent from the graphics state. @return RenderingIntent object or null if not found
5046 Retrieves the parent structure node. @return PDStructureNode object or null if no parent exists
5047 Retrieves the name associated with the action. @return the string representation of the action's name, or null if not found
5048 Creates an object from a given COSBase node. Handles different types of COSBase, including dictionaries and integers. @param kid the COSBase node to process @return the created object or null if unsupported type
5049 Retrieves the string value for a given key with a default fallback. @param key the PDF name key to look up @param defaultValue the default value if the key is not found @return the string value or the default value if not found
5050 Sets and updates the user property name. @param name new name for the user property
5051 Retrieves the guideline style as a string. @return the guideline style or "Solid" if not found
5052 Initializes PDEncryption with a given COSDictionary. @param dictionary the PDF encryption settings dictionary
5053 Retrieves the icon name of the text annotation. @return the icon name as a string, or default to "Note" if not specified
5054 Retrieves the configured security handler. @return SecurityHandler instance or throws if not set @throws IOException if no security handler is available
5055 Retrieves the attachment name. Uses default if not found. @return attachment name or default value
5056 Retrieves annotations from the FDF document. @return List of FDFAnnotation objects or null if no annotations exist @throws IOException if an I/O error occurs
5057 Retrieves the line ending style of the annotation. @return the line ending style as a string or "None" if not specified
5058 Retrieves the highlight mode of the link annotation. @return the highlight mode as a string or default value if not found
5059 Checks if the character set matches between CID system info and font info. @param cidSystemInfo CID system information object @param info Font information object @return true if character sets match, false otherwise
5060 Retrieves the reply type of the annotation. @return the reply type as a string, defaulting to "Reply"
5061 Retrieves the name of the rubber stamp annotation. Uses default value "Draft" if not specified. @return the name as a string
5062 Retrieves the name of the annotation. @return the string value or default name if not found
5063 Retrieves the highlighting mode of the annotation. @return the highlighting mode as a string, defaulting to "I"
5064 Retrieves the border style. @return the style as a string, defaulting to "Solid"
5065 Retrieves the type of external data. @return the type as a string, defaulting to "ExData"
5066 Retrieves the transition style. @return the transition style as a string or "R" if not specified
5067 Retrieves the dimension setting for the transition. @return the dimension as a string or default value if not found
5068 Determines if the DeviceN color space represents an NChannel subtype. @return true if the subtype is "NChannel", false otherwise
5069 Retrieves the motion style of the transition. @return the motion style as a string or default if not found
5070 Retrieves the open action for the document. @return PDDestinationOrAction object or null if not found
5071 Retrieves the non-full screen page mode preference. @return the page mode as a string or default if not found
5072 Retrieves the reading direction preference. @return the reading direction as a string ("L2R" or "R2L")
5073 Retrieves the action associated with this field. @return PDAction object or null if no action is defined
5074 Retrieves the view area preference. @return the string value of the view area or CropBox if not found
5075 Retrieves JavaScript actions from the document. @return Map of named JavaScript actions or null if none found
5076 Retrieves the view clipping setting. @return the view clip as a string or default boundary if not set
5077 Retrieves the next action or sequence of actions. @return List of PDAction objects representing subsequent actions
5078 Retrieves the print area setting. @return the string value of the print area or "CropBox" if not specified
5079 Retrieves the F action from the PDF document. @return PDAction object or null if not found
5080 Retrieves the print clip setting. @return the string value of the print clip or default boundary if not set
5081 Retrieves the action associated with annotation's "E" key. @return PDAction object or null if not found
5082 Retrieves the print scaling preference. @return the print scaling setting as a string, defaulting to AppDefault if not set
5083 Retrieves the action associated with the 'X' key. @return PDAction object or null if no action is defined
5084 Retrieves the action associated with the 'D' key. @return PDAction object or null if not found
5085 Checks and validates XRef offset. @param startXRefOffset starting offset for validation @return validated offset or -1 if invalid @throws IOException if I/O error occurs during validation
5086 Retrieves the action associated with annotation opening. @return PDAction object or null if not found
5087 Retrieves the PDF document version. Checks both the header and catalog for version information. @return the highest version number found as a float
5088 Retrieves the "FO" action associated with the annotation. @return PDAction object for "FO" or null if not found
5089 Retrieves and processes attribute objects from the PDF structure element. @return Revisions object containing PDAttributeObject instances with their revision numbers.
5090 Retrieves the action associated with the button release event. @return PDAction object or null if no action is defined
5091 Checks if the attribute has no entries other than the owner. @return true if empty except for the owner, false otherwise
5092 Retrieves the action associated with the "PO" key. @return PDAction object or null if not found
5093 Retrieves the page close action associated with the annotation. @return PDAction object representing the page close action or null if not set
5094 Retrieves the parent structure node. @return PDStructureNode object or null if no parent exists
5095 Retrieves the print view action associated with the annotation. @return PDAction object for print view or null if not found
5096 Creates an object from a given COSBase node. Handles different types of nodes and returns the appropriate object. @param kid the COSBase node to process @return created object or null if unsupported type
5097 Retrieves the action associated with the annotation's PI entry. @return PDAction object or null if not found
5098 Sets the name of the user property. @param name new name for the property
5099 Retrieves the web capture action from the document's catalog. @return PDAction object representing the web capture action or null if not present
5100 Initializes PDEncryption with a given COSDictionary. @param dictionary the PDF encryption dictionary
5101 Retrieves the web capture action from the document catalog. @return PDAction object for web capture or null if not set
5102 Retrieves the security handler configured for the PDF document. @return the SecurityHandler instance if set, otherwise throws an exception @throws IOException if no security handler is available for the current filter
5103 Retrieves the document-specific action. @return PDAction object or null if not found
5104 Retrieves annotations from the FDF document. @return List of FDFAnnotation objects or null if none exist
5105 Retrieves the "WillPreClose" action from the PDF document's catalog. @return PDAction object representing the WillPreClose action or null if not found
5106 Retrieves the document processing action. @return PDAction object for document processing or null if not set
5107 Retrieves the action associated with key 'K'. @return PDAction object or null if not found
5108 Checks if font character set matches CID system info. @param cidSystemInfo CID system information to compare against @param info Font information containing character set details @return true if character sets match, false otherwise
5109 Retrieves the action associated with key 'F'. @return PDAction object or null if not found
5110 Retrieves the action associated with the 'V' key. @return PDAction object or null if not found
5111 Retrieves and creates an action for key 'C'. @return PDAction object or null if not found
5112 Retrieves and creates a PDAction object for the 'O' key. @return PDAction object or null if not found
5113 Retrieves and creates a PDAction for the 'C' key. @return PDAction object or null if not found
5114 Retrieves the action associated with this link annotation. @return PDAction object or null if no action is set
5115 Retrieves the action associated with the annotation. @return PDAction object or null if no action is set
5116 Determines if the DeviceN color space has NChannel subtype. @return true if the subtype is "NChannel", false otherwise
5117 Retrieves the string value of a specified property key. @param propertyKey the key to look up in the document metadata @return decoded string or null if not found
5118 Retrieves the open action of the PDF document. @return PDDestinationOrAction object or null if not found @throws IOException if an error occurs while reading the document
5119 Retrieves custom metadata value by field name. @param fieldName the key of the custom metadata field @return the value associated with the field or null if not found
5120 Retrieves string value by attribute name. @param name attribute key @return decoded string or null if not found
5121 Retrieves the 'Base' URI from the COSDictionary. @return decoded 'Base' string or null if not found
5122 Retrieves the action associated with the field. @return PDAction object or null if no action is set
5123 Retrieves the version of the digital signature. @return version information as a string or null if not found
5124 Retrieves JavaScript actions from the document. @return Map of named PDActionJavaScript objects or null if none found
5125 Retrieves units of measurement. @return string representing units or null if not found
5126 Retrieves the next action(s) associated with this PDF action. @return List of PDAction objects representing subsequent actions or null if none exist
5127 Retrieves the F action associated with the PDF document. @return PDAction object or null if not found
5128 Retrieves string value by key with a default fallback. @param key the key to look up in the dictionary @param defaultValue value to return if key is not found @return decoded string or default value if not found
5129 Retrieves the action associated with the 'E' key. @return PDAction object or null if not found
5130 Retrieves the action associated with the 'X' key. @return PDAction object or null if not found
5131 Retrieves an embedded string value from a COSDictionary. @param embedded key for the embedded dictionary @param key key to retrieve the string value @param defaultValue default value if key is not found @return decoded string or default value if not found
5132 Retrieves the "D" action associated with the annotation. @return PDAction object or null if not found
5133 Retrieves the operation type from parameters. @return operation type as string, default is "Open"
5134 Retrieves the default appearance string for form fields. @return decoded default appearance string or empty if not found
5135 Retrieves the 'U' action associated with the annotation. @return PDAction object for 'U' or null if not found
5136 Retrieves the "FO" action associated with PDF annotations. @return PDAction object or null if not found
5137 Retrieves the action associated with the "Bl" key. @return PDAction object or null if not found
5138 Retrieves the file name using various systems. @return File name as a string or null if not found in any system
5139 Retrieves the action associated with the "PO" key. @return PDAction object or null if not found
5140 Sets the formatted value of the user property. @param formattedValue new formatted value to set
5141 Retrieves the "Page Close" action associated with the annotation. @return PDAction object representing the page close action, or null if not found
5142 Retrieves the action associated with the "PV" key. @return PDAction object or null if not found
5143 Retrieves the PDAction for the "PI" action. @return PDAction object or null if not found
5144 Retrieves the "WC" action from the document catalog. @return PDAction object for "WC" or null if not found
5145 Retrieves the widget set action from the document's catalog. @return PDAction object or null if not found
5146 Retrieves the document save action. @return PDAction object representing the document save action or null if not found
5147 Retrieves the action associated with the "WP" event. @return PDAction object or null if not found
5148 Retrieves the document processing action. @return PDAction object or null if not found
5149 Checks if a specific optional content group exists. @param groupName name of the group to check @return true if group exists, false otherwise
5150 Retrieves the action associated with key 'K'. @return PDAction object or null if not found
5151 Constructs the fully qualified name of the field. @return complete field name including hierarchy or null if not found
5152 Retrieves the F action from form field actions. @return PDAction object or null if not found
5153 Retrieves the "V" action associated with form fields. @return PDAction object or null if not found
5154 Retrieves date value by key with a default. @param key the key to look up in the dictionary @param defaultValue the default Calendar value if not found @return Calendar object or default if not found or conversion fails
5155 Retrieves and creates an action associated with key 'C'. @return PDAction object or null if not found
5156 Retrieves the opening action associated with the PDF page. @return PDAction object for opening or null if not found
5157 Retrieves an embedded date from a specified dictionary key. @param embedded the name of the embedded dictionary @param key the key to look up in the dictionary @param defaultValue the default Calendar value if not found or conversion fails @return Calendar object or default if not found or conversion fails
5158 Retrieves and creates a PDAction for the 'C' key. @return PDAction object or null if not found or unsupported
5159 Retrieves the revision number of the digital signature. @return the revision number or -1 if not found
5160 Retrieves the minimum revision number. @return the minimum revision as a long value
5161 Retrieves and returns the action associated with this link annotation. @return PDAction object or null if no action is set
5162 Retrieves the action associated with the annotation. @return PDAction object or null if no action is defined
5163 Creates a COSInputStream with decoding applied. @param filters List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @param options DecodeOptions for additional configuration @return COSInputStream with decoded data @throws IOException if an I/O error occurs
5164 Retrieves string value of a property by key. @param propertyKey the key to look up in the document's metadata @return decoded string if found, otherwise null
5165 Creates a view of the COSStream's data. Applies filters if present; otherwise, returns raw stream data. @return RandomAccessRead object representing the stream data @throws IOException if an I/O error occurs
5166 Retrieves custom metadata value by field name. @param fieldName key of the metadata field @return decoded string value or null if not found
5167 Creates an input stream for reading the PDF stream with optional filter exclusion. @param stopFilters list of filter names to exclude from decoding @return InputStream for reading the decoded PDF data @throws IOException if an I/O error occurs during stream creation or decoding
5168 Retrieves string value by attribute name. @param name the attribute key to look up @return decoded string if found, otherwise null
5169 Retrieves the 'Base' URI from the dictionary. @return Base URI string or null if not found
5170 Retrieves a number attribute by name. @param name the attribute name as a string @return the numeric value of the attribute or -1 if not found
5171 Retrieves the version of the digital signature. @return version string or null if not found
5172 Retrieves the conversion factor from the number format dictionary. @return float value representing the conversion factor or -1 if not applicable
5173 Retrieves units of measurement. @return String representing units or null if not found
5174 Initializes a PDFunctionType2 object from a COSBase function. @param function the COSBase object representing the function
5175 Retrieves the leader line length of the annotation. @return Length of the leader line or -1 if not set
5176 Retrieves string value for a given key with a default fallback. @param key the key to look up in the dictionary @param defaultValue the default value to return if key is not found @return decoded string or default value if not found
5177 Retrieves the leader extend value of the line annotation. @return The leader extend value as a float, defaulting to -1 if not found.
5178 Retrieves a string value from an embedded dictionary. @param embedded the key for the embedded dictionary @param key the key to look up in the embedded dictionary @param defaultValue the default value to return if not found @return decoded string or default value if not found
5179 Retrieves the leader offset of the line annotation. @return Leader offset as a float value; default is -1 if not set
5180 Retrieves the operation type. @return operation type as a string, default is "Open"
5181 Retrieves the version number of the digital signature. @return Version number as a float, defaulting to -1 if not found
5182 Retrieves the default appearance string for form fields. @return the default appearance string or an empty string if not set
5183 Retrieves the CYX value from the COS dictionary. @return The float value associated with CYX, or -1 if not found.
5184 Retrieves a float value by key. @param name the key to look up in the dictionary @param defaultValue default value if key not found or not a COSNumber @return float value or default if not applicable
5185 Retrieves the file name from various sources in priority order. @return The file name as a string, or null if not found
5186 Retrieves the intensity of the border effect. @return intensity value as a float, defaulting to 0 if not set
5187 Sets the formatted value of the user property. @param formattedValue new formatted value to set
5188 Computes the font height for rendering. @param font PDFont object to measure @return float representing the computed font height
5189 Writes a sequence of tokens to the PDF output stream. @param tokens array of objects to write (COSBase or Operator) @throws IOException if an I/O error occurs or unknown type is encountered
5190 Writes a list of tokens to the PDF output stream. @param tokens list of objects to write (COSBase or Operator) @throws IOException if an I/O error occurs or unknown type is encountered
5191 Retrieves decode parameters from PDF stream. @return list of decode parameters or null if not found @throws IOException if an error occurs during retrieval
5192 Retrieves file decode parameters from PDF stream. @return list of decode parameters or null if not found @throws IOException if an error occurs during retrieval
5193 Checks if an optional content group exists by name. @param groupName name of the optional content group @return true if the group exists, false otherwise
5194 Appends a child element to the current structure node. @param structureElement the child PDStructureElement to add
5195 Constructs the fully qualified name of the field. @return fully qualified name including parent names, or null if not applicable
5196 Inserts a PDStructureElement before a specified reference node. @param newKid the new child element to insert @param refKid the reference node before which to insert
5197 Retrieves or creates a date value by key with a default fallback. @param key the key for the date value @param defaultValue Calendar to return if no date is found @return Calendar object or provided default if not found
5198 Removes a child element from the current node. @param structureElement the PDStructureElement to remove @return true if the child was successfully removed, false otherwise
5199 Retrieves default position vector for a CID. @param cid character identifier @return Vector with x as half the width and y from dw2 array
5200 Retrieves a date from an embedded dictionary. @param embedded the key for the embedded dictionary @param key the key for the date value within the embedded dictionary @param defaultValue Calendar to return if no date is found @return Calendar object or provided default if not found
5201 Retrieves the revision number of the digital signature. @return the revision number as a long value
5202 Retrieves the minimum revision level required. @return the minimum revision as a long value
5203 Retrieves properties by name from the PDF document. @param name specific resource name @return PDPropertyList object or null if not found
5204 Creates a COSInputStream for PDF data decoding. @param filters list of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @param options DecodeOptions for decoding settings @return COSInputStream with decoded data @throws IOException if an I/O error occurs during decoding
5205 Retrieves the optional content properties of the form XObject. @return PDPropertyList object representing optional content or null if not set
5206 Creates a view of the stream's data. @return RandomAccessRead for accessing decoded data @throws IOException if an I/O error occurs
5207 Retrieves the optional content properties of the image. @return PDPropertyList object representing optional content or null if not present
5208 Retrieves the optional content groups (OCGs) from the dictionary. @return List of PDPropertyList objects representing OCGs
5209 Creates an input stream for the PDF stream with optional filter skipping. @param stopFilters list of filters to skip during decoding @return InputStream for reading decoded data @throws IOException if I/O error occurs
5210 Retrieves the optional content properties of the annotation. @return PDPropertyList object or null if not found
5211 Retrieves a number value by attribute name. @param name the attribute name to look up @return the float value associated with the attribute, or -1 if not found
5212 Retrieves conversion factor from COSDictionary. @return float value representing the conversion factor, or -1 if not found
5213 Constructs a PDAnnotationCaret instance from a COSDictionary. Initializes the caret annotation's dictionary. @param field the underlying COSDictionary for the annotation
5214 Initializes a PDFunctionType2 object with given PDF function. @param function the COSBase object representing the PDF function
5215 Constructs a PDAnnotationFileAttachment from a COSDictionary. @param field the underlying COSDictionary for the annotation
5216 Retrieves the leader length of the line annotation. @return the leader length as a float value
5217 Retrieves the leader extend value of the line annotation. @return the leader extend value as a float
5218 Constructs a PDAnnotationFreeText instance from a COSDictionary. Initializes the free text annotation's dictionary. @param field the underlying COSDictionary for the annotation
5219 Retrieves the leader offset of the line annotation. @return the leader offset value as a float
5220 Constructs a PDAnnotationInk instance from a COSDictionary. Initializes the ink annotation's dictionary. @param dict the underlying COSDictionary for the annotation
5221 Retrieves the version number of the seed value. @return the version as a float, or -1 if not applicable
5222 Constructs a PDAnnotationLine instance from a COSDictionary. Initializes the line annotation's dictionary. @param field the underlying COSDictionary for the annotation
5223 Retrieves the CYX value from the COSDictionary. @return float value of CYX or -1 if not applicable
5224 Constructs a PDAnnotationPolygon instance from a COSDictionary. Initializes the polygon annotation's dictionary. @param dict the underlying COSDictionary for the annotation
5225 Retrieves a number attribute from the COSDictionary. @param name the key of the attribute to retrieve @param defaultValue the default value if the attribute is not found or invalid @return the float value of the attribute or default value
5226 Constructs a PDAnnotationPolyline instance from a COSDictionary. @param dict the underlying COSDictionary for the annotation
5227 Retrieves the intensity of the border effect. @return the intensity value as a float, defaulting to 0 if not set
5228 Constructs a PDAnnotationRubberStamp instance from a COSDictionary. Initializes the rubber stamp annotation's dictionary. @param field the underlying COSDictionary for the annotation
5229 Computes the font height for rendering purposes. @param font PDFont object representing the font @return computed font height as a float @throws IOException if an I/O error occurs while processing the font
5230 Constructs a PDAnnotationSound instance from a COSDictionary. Initializes the sound annotation's dictionary. @param field the underlying COSDictionary for the annotation
5231 Constructs a PDAnnotationSquareCircle instance from a COSDictionary. Initializes the square/circle annotation with the provided dictionary. @param dict the underlying COSDictionary for the annotation
5232 Writes a sequence of tokens to the PDF output stream. @param tokens variable number of objects to write @throws IOException if an I/O error occurs
5233 Constructs a PDAnnotationText instance from a COSDictionary. Initializes the text annotation's dictionary. @param field the underlying COSDictionary for the annotation
5234 Writes a list of tokens to the PDF output stream. @param tokens list of objects to be written @throws IOException if an I/O error occurs or type is unsupported
5235 Constructs a PDAnnotationTextMarkup instance from a COSDictionary. Initializes the text markup annotation's dictionary. @param field the underlying COSDictionary for the annotation
5236 Retrieves decode parameters for the stream. @return List of decoded parameter maps or null if none found
5237 Retrieves the associated popup annotation. @return PDAnnotationPopup object or null if none exists
5238 Retrieves file decode parameters. @return List of decoded parameter maps or null if none found
5239 Retrieves all annotation widgets associated with the field. @return List of PDAnnotationWidget objects
5240 Appends a child element to the current structure node. @param structureElement the child element to add, must not be null
5241 Inserts a PDStructureElement before a reference object. @param newKid the new child element to insert @param refKid the reference child element before which to insert
5242 Removes a child element from the current node. @param structureElement the PDStructureElement to remove @return true if removal was successful, false otherwise
5243 Retrieves default position vector for a CID. @param cid Character Identifier for the font @return Vector representing the default position
5244 Writes prepared COS objects to a PDF object stream. @param stream target COSStream for writing @return the updated COSStream with written objects @throws IOException if an I/O error occurs
5245 Writes a COSDictionary to the output stream. @param output target OutputStream for writing @param cosDictionary COSDictionary object to write @throws IOException if an I/O error occurs
5246 Retrieves properties by name from the PDF document. @param name key identifying the specific resource @return PDPropertyList object or null if not found
5247 Retrieves the optional content properties of the form XObject. @return PDPropertyList object representing optional content or null if not set
5248 Retrieves the optional content properties of the image. @return PDPropertyList object or null if not present
5249 Retrieves optional content groups (OCGs) from the dictionary. @return List of PDPropertyList objects representing OCGs or empty list if none found
5250 Retrieves the optional content properties of the annotation. @return PDPropertyList object representing optional content or null if not present
5251 Constructs a PDAnnotationCaret from a COSDictionary. Initializes the caret annotation with the provided dictionary. @param field the COSDictionary representing the annotation
5252 This is a code snippet from an image processing routine that compresses and encodes an image using PNG filters. The function appears to be handling different pixel types (byte, int, short) and encoding them into various PNG filters (none, sub, up, average, paeth). The main steps are: 1. It iterates over each row of the image. 2. For each row, it gets the data elements using `imageRaster.getDataElements()`. 3. Depending on whether the transferRow is byte[], int[] or short[], it initializes corresponding arrays. 4. It then processes each pixel in the row: - Copies the pixel values into xValues and bValues arrays - Applies different PNG filters to encode the pixel values (none, sub, up, average, paeth) 5. After processing all pixels in a row, it chooses the best encoded row using `chooseDataRowToWrite()`. 6. Writes and compresses this row using a zip stream. 7. Swaps prevRow and transferRow for use in the next iteration. At the end, it closes the zip stream, ends the deflater, and returns a prepared predictor PD image. This code is likely part of an image compression library or tool that uses PNG filters to optimize image storage.
5253 Initializes a new PDActionEmbeddedGoTo with default settings.
5254 Constructs a PDAnnotationFileAttachment from a COSDictionary. Initializes the file attachment annotation with the provided dictionary. @param field the COSDictionary representing the annotation
5255 Constructs a new action to navigate within a PDF. Sets the subtype specific to GoTo actions.
5256 Constructs a new PDActionHide.
5257 Constructs a PDAnnotationFreeText from a COSDictionary. Initializes the free text annotation with the provided dictionary. @param field the COSDictionary representing the annotation
5258 Constructs a new PDActionImportData with specified subtype.
5259 Initializes a new JavaScript action. Sets the subtype to "JavaScript".
5260 Constructs a PDAnnotationInk from a COSDictionary. Initializes the ink annotation with the provided dictionary. @param dict the COSDictionary representing the annotation
5261 Constructs a new PDActionLaunch with default settings. Initializes the action subtype to "Launch".
5262 Constructs a PDAnnotationLine from a COSDictionary. Initializes the line annotation with the provided dictionary. @param field the COSDictionary representing the annotation
5263 Initializes a new action movie. Sets the subtype to 'Movie' for PDF interactivity.
5264 Constructs a PDAnnotationPolygon from a COSDictionary. Initializes the polygon annotation with the provided dictionary. @param dict the COSDictionary representing the annotation
5265 Constructs a named action. Sets the subtype to "GoTo".
5266 Initializes a remote navigation action. Sets the subtype to 'GoToR' for remote linking.
5267 Constructs a PDAnnotationPolyline from a COSDictionary. Initializes the polyline annotation with the provided dictionary. @param dict the COSDictionary representing the annotation
5268 Constructs a PDF reset form action. Initializes the action with the specific subtype for resetting forms.
5269 Constructs a PDAnnotationRubberStamp from a COSDictionary. Initializes the rubber stamp annotation with the provided dictionary. @param field the COSDictionary representing the annotation
5270 Constructs a new PDActionSound with default settings. Initializes action subtype to "Sound".
5271 Initializes a new PDActionSubmitForm with default settings. Sets the subtype to SUB_TYPE indicating form submission action.
5272 Constructs a PDAnnotationSound from a COSDictionary. Initializes the sound annotation with the provided dictionary. @param field the COSDictionary representing the sound annotation
5273 Initializes a new PDActionThread with default subtype.
5274 Constructs a square or circle annotation from a COS dictionary. Initializes the annotation with specified properties. @param dict the COS dictionary representing the annotation
5275 Constructs a new PDActionURI with a specified subtype. Initializes the action's dictionary and sets its URI subtype.
5276 Constructs a PDAnnotationText from a COSDictionary. Initializes the text annotation with the provided dictionary. @param field the COSDictionary representing the annotation
5277 Parses XML for stamp annotation appearance and constructs a COSDictionary. @param appearanceXML XML element defining the appearance @return COSDictionary representing the parsed appearance @throws IOException if an I/O error occurs during parsing
5278 Constructs a PDAnnotationTextMarkup from a COSDictionary. Initializes the text markup annotation with the provided dictionary. @param field the COSDictionary representing the annotation
5279 Retrieves the popup annotation associated with this markup annotation. @return PDAnnotationPopup object or null if no popup is present
5280 Parses a COSArray from the PDF source. Handles nested objects and skips corrupt elements. @return COSArray containing parsed objects @throws IOException if an I/O error occurs during parsing
5281 Retrieves all annotation widgets associated with the field. @return List of PDAnnotationWidget objects
5282 Constructs a new highlight annotation.
5283 Creates a new squiggly line annotation.
5284 Initializes a new strikeout annotation.
5285 Creates a new underline annotation.
5286 Writes prepared COSBase objects to a PDF object stream. @param stream the COSStream to write objects to @return the updated COSStream with written objects @throws IOException if an I/O error occurs during writing
5287 Writes a COSDictionary to the output stream. @param output OutputStream to write to @param cosDictionary COSDictionary object to serialize @throws IOException if an I/O error occurs
5288 This code snippet is part of a method that compresses and processes image data. It iterates over each row of an image, applying different prediction filters (Sub, Up, Average, Paeth) to the pixel values before writing them to a compressed output stream. Here's a brief breakdown: 1. The `getDataElements` method is used to get the raw pixel data for each row of the image. 2. Depending on whether the pixel data is in bytes, integers or shorts, it assigns the appropriate variables (`transferRowByte`, `prevRowByte`, etc.) and sets the others to null. 3. It then iterates over each pixel in the row. For each pixel, it copies the pixel values into arrays (`xValues` for current row, `aValues` and `bValues` for previous rows). 4. The prediction filters are applied to these values. The results are stored in different arrays (`dataRawRowSub`, `dataRawRowUp`, etc.), which represent the image data after applying each type of filter. 5. After processing all pixels in a row, it chooses the best filtered data (based on some criteria not shown here) and writes this to the compressed output stream. 6. Finally, it swaps the current and previous rows for use in the next iteration. 7. This process is repeated for every row in the image. 8. After all rows have been processed, the zip stream and deflater are closed. 9. The method returns an object representing the final processed image data.
5289 Initializes a new PDActionEmbeddedGoTo with default settings.
5290 Initializes a new navigation action for PDF documents. Sets the subtype to indicate it's a GoTo action.
5291 Constructs a new PDActionHide with a default COSDictionary and sets its subtype to 'Hide'.
5292 Generates an image for a tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for coloring @param color PDColor used for rendering @param xform AffineTransform for scaling @param anchorRect Rectangle2D defining the anchor area @return BufferedImage representing the rendered tiling pattern @throws IOException if an I/O error occurs during image generation
5293 Constructs a new PDActionImportData with specified subtype.
5294 Constructs a new JavaScript action. Initializes the action with a default COSDictionary and sets its subtype to "JavaScript".
5295 Calculates the anchor rectangle for a tiling pattern. @param pattern the PDTilingPattern object @return Rectangle2D representing the scaled bounding box @throws IOException if /BBox is missing or other I/O error occurs
5296 Constructs a new PDActionLaunch with default settings. Initializes the action subtype to "Launch".
5297 Constructs a new PDActionMovie with a default COSDictionary.
5298 Constructs a named PDF action. Sets the subtype to 'Named' by default.
5299 Constructs a new remote go-to action. Sets the subtype to 'GoToR' and initializes properties.
5300 Constructs a new PDActionResetForm with a default COSDictionary and sets its subtype.
5301 Constructs a new PDActionSound with default settings. Initializes the action subtype to "Sound".
5302 Retrieves the stencil image with a specified color mask. @param paint the color paint for masking @return BufferedImage with applied mask or null if invalid @throws IOException if an I/O error occurs
5303 Initializes a new PDActionSubmitForm with default settings.
5304 Retrieves raw raster data from a PDF image. @param pdImage the PDImage to process @return WritableRaster containing the image data @throws IOException if an I/O error occurs or parameters are invalid
5305 Initializes a new PDActionThread with a specific subtype. Sets the subtype to "Thread" as required for thread-based actions in PDFs.
5306 Constructs a new PDActionURI with a default dictionary and sets its subtype.
5307 Converts a PDImage to a BufferedImage with optional clipping and subsampling. @param pdImage source PDF image @param region region to clip the image @param subsampling subsampling factor @param colorKey COSArray for color key mask @return BufferedImage representation of PDImage @throws IOException if I/O error occurs during processing
5308 Parses appearance XML for stamp annotations. @param appearanceXML XML element defining the annotation's appearance @return COSDictionary with parsed data or empty if not applicable @throws IOException if parsing fails
5309 Parses a COSArray from the PDF source. Handles nested objects and skips corrupt elements. @return COSArray containing parsed objects @throws IOException if an I/O error occurs
5310 Creates a new highlight annotation.
5311 Retrieves the resources of the PDF page. Initializes PDResources if not already done. @return PDResources object containing page resources
5312 Constructs a new squiggly line annotation.
5313 Initializes a new strikeout annotation.
5314 Retrieves the page's media box dimensions. @return PDRectangle representing the media box or default U.S. Letter if not found
5315 Constructs a new underline annotation. Initializes with the specific subtype for underlining text in PDFs.
5316 Retrieves the rotation angle of the PDF page. @return Rotation angle in degrees, multiples of 90
5317 Retrieves a boolean value by key from the dictionary. @param key primary key to look up in the dictionary @param defaultValue default boolean value if key is not found @return boolean value from dictionary or default if not applicable
5318 Checks if the file specification is volatile. @return true if the file spec is marked as volatile, false otherwise
5319 Checks if the user property is hidden. @return true if hidden, false otherwise
5320 Checks if metadata encryption is enabled. @return boolean indicating if metadata encryption is active
5321 Determines if the line annotation has a caption. @return true if the line has a caption, false otherwise
5322 Determines if icon should scale to fit annotation. @return true if scaling is enabled, false otherwise
5323 Determines if renaming is enabled. @return true if renaming is allowed, false otherwise
5324 Checks if the transparency group is isolated. @return true if isolated, false otherwise
5325 Checks if the knockout attribute is set. @return true if knockout is enabled, false otherwise
5326 Retrieves anti-aliasing setting from shading dictionary. @return true if anti-aliasing is enabled, false otherwise
5327 Retrieves stroking overprint control setting. @return true if overprint is enabled during stroking, false otherwise
5328 Retrieves automatic stroke adjustment setting. @return true if automatic stroke adjustment is enabled, false otherwise
5329 Retrieves the alpha source flag. @return boolean value of the AIS key from the dictionary or false if not found
5330 Retrieves the text knockout flag. @return true if text should be knocked out, false otherwise (default)
5331 Retrieves the 'H' flag indicating element visibility. @return boolean value of the 'H' flag or true if not found
5332 Checks if the sound action is synchronous. @return true if synchronous, false otherwise
5333 Retrieves whether the sound should repeat. @return true if sound repeats, false otherwise
5334 Retrieves whether sound should be mixed with other sounds. @return true if mixing is enabled, false otherwise
5335 Generates a BufferedImage for a tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for the pattern @param color PDColor for the pattern @param xform AffineTransform for scaling @param anchorRect Rectangle2D defining the anchor area @return BufferedImage representing the tiling pattern @throws IOException if an I/O error occurs
5336 Checks if the line annotation has a caption. @return true if the annotation has a caption, false otherwise
5337 Calculates the anchor rectangle for a tiling pattern. @param pattern the PDTilingPattern object @return Rectangle2D representing the scaled anchor rectangle @throws IOException if pattern bounding box is missing
5338 Retrieves whether the annotation is open. @return true if the annotation is open, false otherwise
5339 Retrieves pre-release status of the digital signature. @return true if in pre-release, false otherwise
5340 Retrieves whether non-EFont warnings are disabled. @return true if non-EFont warnings are disabled, false otherwise
5341 Retrieves the trusted mode status. @return true if trusted mode is enabled, false otherwise
5342 Checks if form fields need to be rendered. @return true if form fields should be rendered, false otherwise
5343 Generates a stencil image using the specified paint. @param paint the Paint object for coloring the mask @return BufferedImage representing the stencil image @throws IOException if an I/O error occurs or if the image is not a stencil
5344 Checks if the fly area is opaque. @return true if fly area is opaque, false otherwise
5345 Determines if the toolbar should be hidden. @return true if the toolbar is set to be hidden, false otherwise
5346 Retrieves raw raster data from a PDF image. @param pdImage the PDImage object to process @return WritableRaster containing image data @throws IOException if an I/O error occurs or image parameters are invalid
5347 Determines if the menu bar should be hidden in the PDF viewer. @return true if the menu bar is hidden, false otherwise
5348 Determines if window UI should be hidden. @return true if window UI is hidden, false otherwise
5349 Converts a PDImage to a BufferedImage with optional clipping and color masking. @param pdImage the PDImage object to convert @param region the Rectangle defining the clipped area @param subsampling the subsampling factor @param colorKey the COSArray representing the color key mask @return BufferedImage with applied transformations or null if invalid input @throws IOException if an I/O error occurs during conversion
5350 Checks if the window should automatically resize to fit the PDF. @return true if window should fit the PDF, false otherwise
5351 Determines if the PDF window should be centered. @return true if window should be centered, false otherwise
5352 Determines if document title should be displayed. @return true if document title is visible, false otherwise
5353 Retrieves the resources associated with this PDF page. @return PDResources object containing page resources or null if not found
5354 Retrieves the page's media box dimensions. @return PDRectangle representing the media box or default U.S. Letter if not found
5355 Retrieves the rotation angle of the page. @return Rotation angle in degrees, multiple of 90, or 0 if not set
5356 Retrieves boolean value by key. @param key primary key to look up @param defaultValue default boolean value if key is not found @return boolean value associated with the key or default value
5357 Sets a flag in the dictionary. @param field key for the flag to modify @param bitFlag specific bit representing the flag @param value true to set the flag, false to clear it
5358 Checks if the file specification is volatile. @return true if the file spec is volatile, false otherwise
5359 Checks if the user property is hidden. @return true if the property is hidden, false otherwise
5360 Retrieves an integer value from a nested dictionary. @param embeddedDictionary the key to access the embedded dictionary @param key the key to look up in the embedded dictionary @param defaultValue value to return if no valid integer is found @return integer value or default if not found
5361 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise (default is true)
5362 Fetches integer value by string key. @param key string representation of the PDF name @return integer value or -1 if not found
5363 Retrieves caption visibility status. @return true if caption is visible, false otherwise
5364 Determines if icons should scale to fit within annotations. @return true if icons should scale; false otherwise
5365 Retrieves integer value by key. @param key primary key to look up in the dictionary @return integer value or default (-1) if not found
5366 Determines if renaming is enabled. @return true if renaming is enabled, false otherwise
5367 Checks if the transparency group is isolated. @return true if isolated, false otherwise
5368 Retrieves integer value by key with default. @param key primary key to look up in the dictionary @param defaultValue value to return if no valid integer is found @return integer value or default if not found
5369 Checks if knockout mode is enabled. @return true if knockout is enabled, false otherwise
5370 Retrieves anti-aliasing setting from shading dictionary. @return true if anti-aliasing is enabled, false otherwise
5371 Checks if a specific flag is set in an integer value associated with a given key. @param field the COSName key to look up in the dictionary @param bitFlag the bit flag to check @return true if the flag is set, false otherwise
5372 Retrieves stroking overprint control setting. @return true if stroking overprint is enabled, false otherwise
5373 Retrieves automatic stroke adjustment setting. @return true if automatic stroke adjustment is enabled, false otherwise
5374 Retrieves the alpha source flag. @return true if alpha source is used, false otherwise
5375 Retrieves the text knockout flag. @return true if text knockout is enabled, false otherwise
5376 Retrieves a COSDictionary representing the specified page. @param pageNum 1-based index of the page to retrieve @param node current node in the page tree @param encountered number of pages already processed @return COSDictionary for the requested page or throws exception if not found
5377 Retrieves the visibility flag of the action. @return true if elements are hidden, false otherwise
5378 Retrieves the count of pages in the PDF document. @return total number of pages or 0 if not specified
5379 Checks if sound playback is synchronous. @return true if synchronous, false otherwise
5380 Retrieves the starting page number. @return starting page number or 1 if not specified
5381 Determines if sound should repeat. @return true if sound repeats, false otherwise
5382 Retrieves the order of the function. @return integer representing the order or default value if not found
5383 Retrieves whether sound should be mixed with other sounds. @return true if mixing is enabled, false otherwise
5384 Checks if the line annotation has a caption. @return true if caption is present, false otherwise
5385 Retrieves the revision number of the PDF element. @return integer value representing the revision number or 0 if not found
5386 Retrieves whether the text annotation is open. @return true if the annotation is open, false otherwise
5387 Retrieves encryption key length. @return key length in bits, default is 40 if not specified
5388 Retrieves the encryption version. @return encryption version as an integer or 0 if not specified
5389 Retrieves pre-release status of the digital signature. @return true if the signature is in pre-release, false otherwise
5390 Retrieves encryption key length. @return key length or default value of 40 if not set
5391 Retrieves non-EFont no warning flag. @return boolean indicating if non-EFont warnings are suppressed
5392 Retrieves the PDF encryption revision. @return encryption revision number or default version if not set
5393 Retrieves trusted mode status from the dictionary. @return true if trusted mode is enabled, false otherwise
5394 Retrieves document permissions. @return integer representing document permissions or default value if not set
5395 Retrieves whether form fields need to appear visually. @return true if visual appearance is required, false otherwise
5396 Retrieves justification setting of the annotation. @return string representation of justification or empty if none set
5397 Checks if the fly area is opaque. @return true if fly area is opaque, false otherwise
5398 Determines if the toolbar should be hidden. @return true if toolbar is hidden, false otherwise
5399 Checks if the menubar is hidden in PDF viewer. @return true if menubar is hidden, false otherwise
5400 Retrieves font descriptor flags. @return integer value representing font flags or default if not found
5401 Determines if window UI should be hidden. @return true if window UI is hidden, false otherwise
5402 Checks if the window should automatically fit the PDF document. @return true if window should fit the document, false otherwise
5403 Determines if the PDF viewer window should be centered. @return true if window should be centered, false otherwise
5404 Creates a PDAbstractPattern instance based on the dictionary. @param dictionary COSDictionary containing pattern properties @param resourceCache ResourceCache for managing resources @return PDAbstractPattern object or throws IOException if unknown type
5405 Determines if document title should be displayed. @return true if document title is enabled, false otherwise
5406 Retrieves the paint type of the tiling pattern. @return integer representing the paint type or default value if not found
5407 Retrieves tiling type of the pattern. @return integer representing tiling type or default value if not found
5408 Creates a PDShading instance based on the given dictionary. @param shadingDictionary COSDictionary containing shading properties @return PDShading object corresponding to the shading type @throws IOException if unknown shading type is encountered
5409 Retrieves bits per flag value. @return integer value or -1 if not found
5410 Retrieves the number of vertices per row. @return integer value representing vertices per row or -1 if not specified
5411 Retrieves the number of bits per color component. @return integer value representing bits per color component or default if not found
5412 Sets a flag in an integer field. @param field COSName representing the key @param bitFlag specific bit to modify @param value true to set, false to clear the bit
5413 Retrieves the number of bits per coordinate. @return int representing bits per coordinate or default value if not set
5414 Retrieves action flags. @return integer value representing action flags or default if not found
5415 Retrieves an integer value from an embedded dictionary. @param embeddedDictionary key to the embedded COSDictionary @param key primary key to look up within the embedded dictionary @param defaultValue default value if key is not found or invalid @return integer value or default if not found or missing
5416 Retrieves action flags. @return integer representing action flags or default value if not found
5417 Retrieves an integer value by key. @param key primary key to look up @return integer value or -1 if key is not found
5418 Retrieves the page number associated with the target directory. @return page number or -1 if not specified
5419 Retrieves annotation index. @return annotation index or -1 if not found
5420 Retrieves an integer value by key with a default of -1. @param key primary key to look up @return integer value or -1 if key is invalid or missing
5421 Retrieves annotation flags. @return integer value representing annotation properties
5422 Retrieves an integer value by key. @param key primary key to look up @param defaultValue default value if key is not found @return integer value or default if key is invalid or missing
5423 Retrieves the quadding mode of the annotation. @return integer representing the quadding mode (0, 1, or 2)
5424 Retrieves rotation angle of the annotation. @return integer representing rotation in degrees (0-359)
5425 Checks if a specific flag is set in the given field. @param field key for the dictionary item to check @param bitFlag the flag to verify @return true if the flag is set, false otherwise
5426 Checks if timestamping is required. @return true if timestamping is required, false otherwise
5427 Retrieves quality factor Q from form dictionary. @return integer value of Q or 0 if not found
5428 Retrieves a COSDictionary representing a page by its 1-based index. @param pageNum the 1-based index of the page to retrieve @param node the current node in the PDF page tree @param encountered number of pages already processed @return COSDictionary of the specified page or throws exception if not found
5429 Retrieves the count of pages in the PDF document. @return integer representing the number of pages or 0 if not specified
5430 Retrieves the starting page number for the label range. @return starting page number or default value of 1
5431 Retrieves the order of the function. @return integer value representing the order or default value 1 if not specified
5432 Retrieves the top index of the list box. @return integer value representing the top index or 0 if not set
5433 Retrieves the revision number of the PDStructureElement. @return integer value representing the revision number or 0 if not found
5434 Retrieves encryption length. @return encryption length as an integer (default is 40)
5435 Retrieves the encryption version. @return encryption version as an integer
5436 Retrieves COS objects by specified type from the document. @param type object type to match @return List of matching COS objects
5437 Retrieves the length of encryption. @return integer value representing encryption length or default 40 if not specified
5438 Retrieves the encryption revision level. @return integer representing the PDF encryption revision
5439 Retrieves the page tree of the PDF document. @return PDPageTree object representing the pages in the document
5440 Retrieves the permissions flags of the PDF document. @return integer representing document permissions
5441 Retrieves the justification of the annotation. @return string representation of justification value
5442 Updates page references in the PDF document. @param cloner utility for cloning PDF objects @param numberTreeAsMap map of number tree entries @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during processing
5443 Retrieves font descriptor flags. @return integer value representing font flags or 0 if not set
5444 Loads and parses an FDF document from a file. @param file the FDF file to load @return FDFDocument containing parsed data @throws IOException if an I/O error occurs during loading or parsing
5445 Loads and parses an FDF document from an input stream. @param input the InputStream containing the FDF data @return FDFDocument object representing the parsed FDF content @throws IOException if an I/O error occurs during loading or parsing
5446 Creates a PDAbstractPattern instance based on the dictionary. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for caching resources @return PDAbstractPattern object or throws IOException if type is unknown
5447 Retrieves the paint type of the tiling pattern. @return integer representing the paint type or default value if not found
5448 Parses a PDF document with lenient mode enabled. @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing or document creation
5449 Removes page-specific resources from the cache. Does not affect inherited resources.
5450 Retrieves the tiling type of the pattern. @return integer representing the tiling type or default value if not found
5451 Creates a PDShading instance based on the provided COSDictionary. @param shadingDictionary dictionary containing shading properties @return PDShading object or throws IOException for unknown types
5452 Retrieves a color space by its COSName. @param name the COSName of the color space @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
5453 Retrieves bits per flag setting. @return integer value of bits per flag or -1 if not found
5454 Retrieves the number of vertices per row. @return integer value representing vertices per row or -1 if not found
5455 Adds or retrieves a PDF font. @param font the font to be added or retrieved @return unique COSName key for the font resource
5456 Retrieves the number of bits per color component. @return integer value representing bits per component or -1 if not set
5457 Adds or retrieves a PDF color space resource. @param colorSpace PDColorSpace object to be added @return unique COSName key for the resource
5458 Retrieves the number of bits per coordinate for shading. @return number of bits per coordinate
5459 Retrieves action flags. @return integer representing action flags
5460 Adds an extended graphics state to the resources. @param extGState the extended graphics state to be added @return unique COSName key for the graphics state resource
5461 Retrieves action flags. @return integer representing action flags
5462 Retrieves the page number associated with this target directory. @return page number or -1 if not specified
5463 Adds a shading to the resources. @param shading PDShading object to be added @return unique COSName key for the shading resource
5464 Retrieves the annotation index from the target directory. @return annotation index or -1 if not found
5465 Adds or retrieves a PDF pattern resource. @param pattern pattern object to be added @return unique COSName key for the pattern resource
5466 Retrieves annotation flags. @return integer value representing annotation properties
5467 Adds a property list to the resources. @param properties property list to be added @return unique COSName key for the resource
5468 Retrieves the quadding mode of the free text annotation. @return an integer representing the quadding mode (0 - left, 1 - center, 2 - right)
5469 Adds an image to the resources. @param image PDImageXObject to be added @return unique COSName key for the image resource
5470 Retrieves the rotation angle of the annotation. @return integer representing rotation in degrees (0-360)
5471 Adds a form XObject to resources. @param form PDFormXObject to be added @return unique COSName key for the form resource
5472 Checks if timestamping is required. @return true if timestamping is required, false otherwise
5473 Adds or retrieves an XObject resource. @param xobject image or form object to be added @param prefix base string for the key @return unique COSName key for the resource
5474 Retrieves the quadding mode of text fields. @return integer representing the quadding mode (left, center, right)
5475 Retrieves the embedded file object. @return PDEmbeddedFile instance or null if not found
5476 Retrieves the embedded DOS file. @return PDEmbeddedFile object or null if not found
5477 Retrieves the embedded file for Mac OS. @return PDEmbeddedFile object or null if not found
5478 Retrieves the embedded file for Unix systems. @return PDEmbeddedFile object or null if not found
5479 Retrieves the embedded file with Unicode name. @return PDEmbeddedFile object or null if not found
5480 Retrieves the top index of the list box. @return integer value representing the top index or default (0) if not set
5481 Retrieves COS objects by primary type. @param type primary type to match @return list of COSObjects matching the given type
5482 Retrieves the page tree of the PDF document. @return PDPageTree object representing the document's pages
5483 Checks if a specific optional content group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
5484 Enables or disables an optional content group by name. @param groupName the name of the optional content group @param enable true to enable, false to disable @return true if the group was found and modified, false otherwise
5485 Recursively updates page references in the PDF structure tree. @param cloner utility for cloning PDF components @param numberTreeAsMap map of objects to process @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during processing
5486 Sets the button value by index. @param index position of the value in export values list @throws IOException if an I/O error occurs
5487 Loads and parses an FDF document from a file. @param file the FDF file to load @return FDFDocument object containing parsed data @throws IOException if I/O error occurs during loading or parsing
5488 Loads and parses an FDF document from an input stream. @param input InputStream containing the FDF data @return FDFDocument object parsed from the input stream @throws IOException if I/O error occurs during parsing
5489 Finds a PDSignatureField with a matching signature object. @param fieldIterator iterator over PDF fields @param sigObject the signature object to match @return the matching PDSignatureField or null if not found
5490 Parses a PDF document with lenient mode enabled. @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing or creation
5491 Removes page-specific resources from the cache. Does not affect inherited resources.
5492 Retrieves the normal appearance stream of a PDF annotation. @param annotation the PDF annotation object @return PDAppearanceStream object or null if not found
5493 Adds fonts from widget resources to AcroForm resources. @param acroFormResources PDResources of the AcroForm @param annotation PDAnnotation widget to process
5494 Retrieves a color space by its COSName. @param name the COSName of the color space @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
5495 Retrieves all on values for the button. @return Set of string representations of on values
5496 Adds or retrieves a font resource. @param font PDFont object to add @return unique COSName key for the font resource
5497 Checks if the checkbox is currently checked. @return true if the checkbox's value matches its on state, false otherwise
5498 Adds or retrieves a color space resource. @param colorSpace the PDColorSpace to manage @return unique COSName key for the color space resource
5499 Checks the checkbox by setting its value to the on state. @throws IOException if an error occurs during the operation
5500 Adds or retrieves an extended graphics state resource. @param extGState the extended graphics state to manage @return unique COSName key for the resource
5501 Returns the index of a given PDPage in the PDF document. @param page PDPage object to find @return index of the page or -1 if not found
5502 Adds or retrieves a shading resource. @param shading PDShading object to manage @return unique COSName key for the shading resource
5503 Adds or retrieves a pattern resource. @param pattern PDAbstractPattern to add @return unique COSName key for the pattern resource
5504 Adds or retrieves a resource key for given properties. @param properties PDPropertyList object to manage @return unique COSName key for the properties
5505 Adds an image to the resources. @param image the PDImageXObject to add @return unique COSName key for the image resource
5506 Sets the parent node and recalculates limits. @param parentNode the new parent node
5507 Adds a form XObject to resources. @param form PDFormXObject to add @return unique COSName key for the form resource
5508 Sets the child nodes for this tree node. @param kids list of child nodes to manage
5509 Sets the names and their corresponding values in the name tree. @param names map of names to values
5510 Adds or retrieves an XObject resource. @param xobject the PDXObject to manage @param prefix key prefix for the resource @return unique COSName key for the XObject
5511 Retrieves the embedded file from the specification. @return PDEmbeddedFile object or null if not found
5512 Initializes page labels for a PDF document using a given dictionary. @param document the PDDocument to apply labels to @param dict the COSDictionary containing label data or null if none provided @throws IOException if an I/O error occurs during initialization
5513 Retrieves the embedded file for DOS. @return PDEmbeddedFile object or null if not found
5514 Retrieves the encode range for a specified parameter. @param paramNum zero-based index of the parameter @return PDRange object representing the encode range or null if not found
5515 Retrieves the embedded file for Mac. @return PDEmbeddedFile object or null if not found
5516 Retrieves the embedded file for Unix systems. @return PDEmbeddedFile object or null if not found
5517 Constructs a PDCalGray instance. Initializes with CALGRAY color space.
5518 Retrieves the embedded file using Unicode key. @return PDEmbeddedFile object or null if not found
5519 Constructs a PDCalRGB instance with default settings.
5520 Initializes a new instance of PDLab for LAB color space.
5521 Constructs a PDCalGray instance from a COSArray. @param array COSArray containing color space parameters
5522 Constructs a PDCalRGB instance from a COSArray. @param rgb array representing RGB components
5523 Constructs a PDLab instance from a COSArray. @param lab LAB color values as COSArray
5524 Checks if an optional content group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
5525 Constructs an AxialShadingContext for rendering axial shading in PDFs. @param shading PDShadingType2 object representing the shading @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if an error occurs during initialization
5526 Enables or disables an optional content group by name. @param groupName the name of the OCG to toggle @param enable true to enable, false to disable @return true if the group was successfully toggled, false otherwise
5527 Sets button value by index. @param index position of the value in export values list @throws IOException if an I/O error occurs
5528 Initializes a RadialShadingContext for PDF rendering. @param shading PDShadingType3 object representing radial shading @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if an error occurs during initialization
5529 Initializes a TriangleBasedShadingContext for PDF rendering. @param shading PDShading object representing the shading @param cm ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an error occurs during initialization
5530 Finds a PDSignatureField matching the given PDSignature. @param fieldIterator iterator over PDF fields @param sigObject PDSignature to match @return PDSignatureField if found, otherwise null
5531 Initializes Type1ShadingContext for PDF rendering. @param shading PDShadingType1 object representing the shading @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an error occurs during initialization
5532 Retrieves the appearance stream of a PDF annotation. @param annotation the PDF annotation to process @return PDAppearanceStream object representing the normal appearance or null if not found
5533 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
5534 Adds fonts from annotation widgets to AcroForm resources. @param acroFormResources resources of the AcroForm @param annotation widget annotation containing appearance stream
5535 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
5536 Retrieves all on values of the button. @return Set of string representations of on values or empty set if none found
5537 Retrieves the string value for a given attribute key. @param name the attribute key to look up @param defaultValue the value to return if the key is not found @return the corresponding string value or the default value if not found
5538 Determines if the checkbox is checked. @return true if the checkbox's value matches its 'on' state, false otherwise
5539 Retrieves the style of the border effect. @return the style as a string, defaulting to "Solid" if not specified
5540 Checks the checkbox by setting its value to the 'on' state. @throws IOException if an I/O error occurs during the operation
5541 Sets the border line properties for a PDF annotation. @param lineWidth width of the border line @param bs border style dictionary @param border COSArray containing border properties @throws IOException if an I/O error occurs
5542 Finds the index of a given PDF page in the page tree. @param page PDPage object to find @return index of the page or -1 if not found
5543 Creates a new PDF document with metadata and settings from the source document. @return A new PDDocument object initialized with source document's properties
5544 Sets the PDF document's version. @param newVersion the new version number to be set
5545 Sets the parent node and recalculates limits. @param parentNode the new parent node in the tree
5546 Retrieves the root of the structure tree. @return PDStructureTreeRoot object or null if not found
5547 Sets the child nodes for this name tree node. @param kids list of child PDNameTreeNode objects
5548 Retrieves child objects of the current structure node. @return List of child objects or empty list if none found
5549 Sets the names and their associated values. @param names map of name-value pairs to be set
5550 Retrieves the PDF encryption settings. @return PDEncryption object or null if not encrypted
5551 Initializes page labels for a PDF document. @param document PDDocument to set labels for @param dict COSDictionary containing label information @throws IOException if an I/O error occurs during initialization
5552 Prepares the decryption process for a PDF document. Initializes encryption and security handler based on document's encryption settings. @throws IOException if an I/O error occurs during decryption setup
5553 Retrieves the Encode range for a specific parameter. @param paramNum parameter index @return PDRange object or null if not applicable
5554 Constructs a new PDCalGray instance. Initializes with CALGRAY color space name.
5555 Constructs a PDCalRGB object with default name.
5556 Initializes a new LAB color space.
5557 Constructs a PDCalGray from a COSArray. @param array the COSArray containing color components and parameters
5558 Constructs a PDCalRGB object from a COSArray. @param rgb array representing RGB color components
5559 Reads and sets the font encoding. Handles predefined CMaps and validates CID mappings. @throws IOException if required CMap is missing or invalid
5560 Initializes LAB color space from given array. @param lab COSArray containing LAB color data
5561 Initializes an AxialShadingContext for PDF rendering. @param shading PDShadingType2 object representing the axial shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle specifying the device bounds @throws IOException if there is an issue with resource setup or calculations
5562 Initializes a RadialShadingContext for PDF rendering. @param shading PDShadingType3 object representing the radial shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle defining the device bounds @throws IOException if there is an issue with resource initialization or processing
5563 Repairs the Length1 value by finding the 'exec' marker. @param bytes byte array containing font data @param length1 initial Length1 value @return corrected Length1 or original if no issues found
5564 Repairs Length2 value if it's out of bounds. @param bytes byte array containing font data @param length1 first length parameter @param length2 second length parameter to be repaired @return corrected Length2 or default value if invalid
5565 Initializes a TriangleBasedShadingContext for PDF rendering. @param shading PDShading object representing the shading @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @throws IOException if there is an issue with color space retrieval or background processing
5566 Constructs a Type1ShadingContext for PDF rendering. @param shading PDShadingType1 object representing the shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @throws IOException if there is an issue with resource management or inverse transform calculation
5567 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
5568 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
5569 Retrieves the fractional display setting. @return string representing the fractional display format or default if not found
5570 Retrieves the thousands separator. @return string representing the thousands separator, default is ","
5571 Retrieves the string value for a given key with a default fallback. @param name the PDF name key to look up @param defaultValue the default value if the key is not found @return the string value or the default value if not found
5572 Retrieves the decimal separator used in number formatting. @return the decimal separator as a string, default is "."
5573 Retrieves the border style. @return String representing the border style or default solid style if not specified
5574 Retrieves label prefix string from COSDictionary. @return decoded label prefix or space if not found
5575 Retrieves label suffix string from COSDictionary. @return decoded label suffix or space if not found
5576 Sets the border line properties for a PDF annotation. @param lineWidth desired width of the line @param bs border style dictionary @param border COSArray containing border properties @throws IOException if an I/O error occurs
5577 Retrieves label position to value setting. @return string representing label position or default suffix if not found
5578 Creates a new PDF document with metadata and settings from the source document. @return PDDocument object initialized with source document's properties @throws IOException if an I/O error occurs during document creation
5579 Retrieves an embedded string value from a COSDictionary. @param embedded key for the embedded dictionary @param key key to retrieve the string value @return decoded string or null if not found
5580 Sets the PDF document version. @param newVersion the desired version number to set
5581 Generates a priority queue of font matches based on font descriptor and CID system info. @param fontDescriptor PDFontDescriptor containing font properties @param cidSystemInfo PDCIDSystemInfo for character set matching @return PriorityQueue of FontMatch objects sorted by match score
5582 Retrieves the root of the structure tree. @return PDStructureTreeRoot object or null if not found
5583 Retrieves and converts child nodes of the current structure node. @return List of child objects or empty list if none found
5584 Retrieves an embedded date from a specified dictionary key. @param embedded the name of the embedded dictionary @param key the key to look up in the dictionary @return Calendar object or null if not found or conversion fails
5585 Retrieves the encryption settings of the PDF document. @return PDEncryption object or null if not encrypted
5586 Prepares document decryption by setting up encryption and access permissions. @throws IOException if an error occurs during decryption setup
5587 Creates a COSInputStream with default decode options. @param filters List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @return COSInputStream with decoded data @throws IOException if an I/O error occurs
5588 Initializes the PDFObjectStreamParser with a COSStream and document. Validates mandatory entries /N and /First. @param stream the COSStream to parse @param document the associated COSDocument @throws IOException if required entries are missing or invalid
5589 Initializes a PDFXrefStreamParser with a COSStream. @param stream COSStream containing XRef data @throws IOException if an I/O error occurs during initialization
5590 Reads and sets up the font encoding. Handles predefined CMaps and custom encodings, checks for CID mappings. @throws IOException if an I/O error occurs during CMap reading
5591 Initializes a PDCIDFontType0 with given dictionary and parent. Handles embedded CFF fonts and substitutes if necessary. @param fontDictionary CID font dictionary @param parent parent Type0Font object @throws IOException if an I/O error occurs
5592 Constructs a PDCIDFontType2 instance. Initializes font with dictionary, parent, and TrueType font. Handles embedded and substituted fonts. @param fontDictionary CID font dictionary @param parent parent Type0Font object @param trueTypeFont associated TrueType font or null @throws IOException if an I/O error occurs
5593 Repairs the Length1 value by finding 'exec' marker. @param bytes byte array containing font data @param length1 initial Length1 value @return corrected Length1 value or original if valid
5594 Reads and parses a CMap from a PDF object. @param base PDF object containing the CMap data (COSName or COSStream) @return parsed CMap object @throws IOException if parsing fails or input is invalid
5595 Repairs Length2 value if it's out of bounds. @param bytes font data as byte array @param length1 first length parameter @param length2 second length parameter to be repaired @return corrected Length2 or recalculated length based on byte array and length1
5596 Retrieves the fractional display setting. @return string representing fractional display or default decimal format
5597 Retrieves thousands separator from number format settings. @return string representing thousands separator, default is ","
5598 Retrieves the decimal separator used in number formatting. @return the decimal separator as a string, default is "."
5599 Retrieves the label prefix string from the COSDictionary. @return The label prefix string, defaulting to a space if not found.
5600 Retrieves the label suffix string from the number format dictionary. @return the label suffix as a string, defaulting to a space if not found
5601 Retrieves label position to value setting. @return string representing label position or default suffix if not found
5602 Retrieves a string value from an embedded dictionary. @param embedded the key for the embedded dictionary @param key the key to look up in the embedded dictionary @return decoded string or null if not found
5603 Retrieves font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object containing font details @param cidSystemInfo CID system information for character set matching @return PriorityQueue of FontMatch objects sorted by similarity score
5604 Constructs a PDAnnotationCircle instance from a COSDictionary. Initializes the circular annotation with the provided dictionary. @param field the underlying COSDictionary for the annotation
5605 Constructs a square annotation from a COSDictionary. @param field the underlying COSDictionary for the annotation
5606 Retrieves a date from an embedded dictionary. @param embedded the key for the embedded dictionary @param key the key for the date value within the embedded dictionary @return Calendar object or null if not found
5607 Constructs a PDAnnotationHighlight instance from a COSDictionary. Initializes the highlight annotation's dictionary. @param dict the underlying COSDictionary for the annotation
5608 Creates a COSInputStream with default decoding options. @param filters list of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @return COSInputStream with decoded data @throws IOException if an I/O error occurs during decoding
5609 Constructs a PDAnnotationSquiggly instance from a COSDictionary. Initializes the squiggly annotation's dictionary. @param dict the underlying COSDictionary for the annotation
5610 Constructs a PDAnnotationStrikeout instance from a COSDictionary. Initializes the strikeout annotation's dictionary. @param dict the underlying COSDictionary for the annotation
5611 Constructs a PDAnnotationUnderline instance from a COSDictionary. Initializes the underline annotation's dictionary. @param dict the underlying COSDictionary for the annotation
5612 Initializes PDFObjectStreamParser with a COSStream and document. @param stream COSStream containing the object stream data @param document COSDocument associated with the PDF @throws IOException if required entries are missing or invalid
5613 Writes the body of a PDF document. @param doc the COSDocument to write @throws IOException if an I/O error occurs
5614 Initializes PDFXrefStreamParser with a given COSStream. @param stream COSStream containing Xref data @throws IOException if I/O error occurs during initialization
5615 Constructs a new PDActionJavaScript with the given JavaScript code. @param js JavaScript code to be executed
5616 Initializes a PDCIDFontType0 with the given font dictionary and parent. Handles CID font parsing and embedding checks. @param fontDictionary PDF font dictionary @param parent PDType0Font parent font @throws IOException if an I/O error occurs during font processing
5617 Initializes a PDCIDFontType2 with the given font dictionary, parent font, and TrueType font. Handles embedded and non-embedded fonts, ensuring integrity and compatibility. @param fontDictionary the font dictionary containing CID font properties @param parent the parent PDType0Font object @param trueTypeFont the TrueTypeFont to use or null if not provided @throws IOException if an I/O error occurs during font processing
5618 Reads and parses a CMap from a given COSBase object. @param base COSName or COSStream representing the CMap source @return parsed CMap object @throws IOException if an I/O error occurs during reading or parsing
5619 Initializes TilingPaint with specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for coloring @param color PDColor used for rendering @param xform AffineTransform for scaling @throws IOException if an I/O error occurs during initialization
5620 Retrieves an opaque image from the PDF image within a specified region and subsampling factor. @param region area of the image to extract @param subsampling factor for reducing image resolution @return BufferedImage representation of the image @throws IOException if I/O error occurs during processing
5621 Converts a PDImage to a BufferedImage with optional color key masking. @param pdImage source PDF image @param colorKey COSArray for color key mask @return BufferedImage representation of PDImage @throws IOException if I/O error occurs during processing
5622 Constructs a circular annotation from a COS dictionary. @param field the COS dictionary representing the annotation
5623 Updates the current resources based on content stream or page resources. @param contentStream the content stream to check for resources @return previous PDResources object
5624 Constructs a square annotation from a COS dictionary. @param field the COS dictionary representing the annotation
5625 Constructs a PDAnnotationHighlight from a COSDictionary. Initializes the highlight annotation with the provided dictionary. @param dict the COSDictionary representing the annotation
5626 Constructs a PDAnnotationSquiggly from a COSDictionary. Initializes the squiggly annotation with the provided dictionary. @param dict the COSDictionary representing the annotation
5627 Constructs a PDAnnotationStrikeout from a COSDictionary. Initializes the strikeout annotation with the provided dictionary. @param dict the COSDictionary representing the annotation
5628 Constructs a PDAnnotationUnderline from a COSDictionary. @param dict the COSDictionary representing the annotation
5629 Writes the body of a PDF document. Handles serialization of root, info, and encryption objects. @param doc COSDocument to write @throws IOException if an I/O error occurs
5630 Calculates affine transform to center the overlay media box on the PDF page. @param page the PDPage object representing the target PDF page @param overlayMediaBox the PDRectangle defining the overlay dimensions @return AffineTransform for positioning the overlay centered on the page
5631 Clips a given rectangle to the page's media box. @param box rectangle to clip @return clipped PDRectangle within media bounds
5632 Constructs a new JavaScript action with specified script. @param js JavaScript code to be executed
5633 Returns the media box of a PDF page, rotated if necessary. @param page PDPage object representing the PDF page @return PDRectangle with adjusted dimensions based on rotation
5634 Checks if the PDF element is marked. @return true if marked, false otherwise
5635 Checks if user properties are used. @return true if UserProperties flag is set, false otherwise
5636 Checks if the PDF element is marked as suspect. @return true if the element is suspect, false otherwise
5637 Determines if mouse position tracking is enabled. @return true if mouse position should be tracked, false otherwise
5638 Retrieves the open state of the popup annotation. @return true if the popup is open, false otherwise
5639 Checks if field delimiter is enabled. @return true if FD is enabled, false otherwise
5640 Sets the visibility of the user property. @param hidden true to hide, false to show
5641 Retrieves non-stroking overprint control setting. @return true if overprint is enabled during non-stroking, false otherwise
5642 Initializes TilingPaint with specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for the pattern @param color PDColor for the pattern @param xform AffineTransform for scaling @throws IOException if an I/O error occurs
5643 Draws an inline image at specified coordinates with given dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or text mode is active
5644 Sets the annotation's visibility. @param invisible true to make annotation invisible, false otherwise
5645 Sets the visibility of the annotation. @param hidden true to hide the annotation, false to show it
5646 Retrieves an opaque image from the PDF document. @param region the Rectangle defining the clipped area @param subsampling the subsampling factor @return BufferedImage of the specified region with applied subsampling or null if invalid input @throws IOException if an I/O error occurs during retrieval
5647 Sets the printed flag of the annotation. @param printed true to mark as printed, false otherwise
5648 Sets the "no zoom" flag for the annotation. @param noZoom true to prevent zooming, false to allow it
5649 Sets the No Rotate flag for the annotation. @param noRotate true to prevent rotation, false otherwise
5650 Sets whether the annotation is visible. @param noView true to hide the annotation, false to show it
5651 Converts PDImage to BufferedImage with color masking. @param pdImage the PDImage object to convert @param colorKey the COSArray representing the color key mask @return BufferedImage with applied color mask or null if invalid input @throws IOException if an I/O error occurs during conversion
5652 Sets the read-only state of the annotation. @param readOnly true to make the annotation read-only, false otherwise
5653 Sets the locked state of the annotation. @param locked true to lock the annotation, false to unlock it
5654 Pushes and returns the current resources for a content stream. @param contentStream the content stream to process @return the previous resources before updating
5655 Sets the 'no view' flag for annotation visibility. @param toggleNoView true to hide annotation, false to show it
5656 Sets whether annotation contents are locked. @param lockedContents true to lock contents, false otherwise
5657 Sets the visibility of the annotation. @param invisible true to make the annotation invisible, false otherwise
5658 Sets the visibility of the annotation. @param hidden true to hide, false to show the annotation
5659 Sets whether the annotation is printable. @param printed true to make annotation printable, false otherwise
5660 Sets the no-zoom flag for the annotation. @param noZoom true to disable zooming, false otherwise
5661 Calculates transformation for centering an overlay. @param page PDF page to apply the overlay on @param overlayMediaBox dimensions of the overlay content @return AffineTransform for centering the overlay
5662 Sets the 'no rotate' flag for the annotation. @param noRotate true to prevent rotation, false otherwise
5663 Clips a given rectangle to the page's media box. @param box rectangle to be clipped @return clipped PDRectangle within media box boundaries
5664 Sets the annotation's visibility. @param noView true to hide the annotation, false to show it
5665 Sets the read-only state of the annotation. @param readOnly true to make the annotation read-only, false otherwise
5666 Retrieves the rotated media box dimensions of a PDF page. @param page PDPage object representing the PDF page @return PDRectangle with adjusted dimensions if page is rotated, otherwise original media box
5667 Sets the lock status of the annotation. @param locked true to lock the annotation, false to unlock it
5668 Checks if the PDF element is marked. @return true if marked, false otherwise
5669 Checks if user properties are used. @return true if user properties are enabled, false otherwise
5670 Toggles the 'no view' flag of the annotation. @param toggleNoView true to hide, false to show the annotation
5671 Checks if the PDF element is marked as suspect. @return true if the element is flagged as suspect, false otherwise
5672 Sets whether the annotation's contents are locked. @param lockedContents true to lock contents, false to unlock
5673 Determines if mouse position tracking is enabled. @return true if tracking is enabled, false otherwise
5674 Sets whether filter is required for digital signature. @param flag true if filter is required, false otherwise
5675 Retrieves the open state of the popup annotation. @return true if the popup is open, false otherwise
5676 Sets whether subfilter is required. @param flag true if subfilter is required, false otherwise
5677 Checks if the number format dictionary has fractional digits. @return true if fractional digits are enabled, false otherwise
5678 Sets whether a digest method is required. @param flag true if digest method is required, false otherwise
5679 Sets whether V is required. @param flag true if V is required, false otherwise
5680 Sets the visibility of the user property. @param hidden true to hide the property, false to show it
5681 Sets whether a reason is required for the digital signature. @param flag true to require a reason, false otherwise
5682 Sets whether legal attestation is required. @param flag true if legal attestation is required, false otherwise
5683 Retrieves non-stroking overprint control setting. @return true if non-stroking overprint is enabled, false otherwise
5684 Sets whether adding revocation info is required. @param flag true to require revocation info, false otherwise
5685 Sets whether the subject field is required. @param flag true to mark as required, false otherwise
5686 Sets whether the issuer field is required. @param flag true to mark as required, false otherwise
5687 Sets whether OID (Object Identifier) is required. @param flag true to mark OID as required, false otherwise
5688 Draws an inline image at specified position and size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
5689 Sets whether subject distinguished name is required. @param flag true to mark as required, false otherwise
5690 Sets visibility of annotation. @param invisible true to hide, false to show
5691 Sets the required flag for key usage. @param flag true to require key usage, false otherwise
5692 Sets the visibility of the annotation. @param hidden true to hide, false to show the annotation
5693 Sets whether URL is required. @param flag true if URL is required, false otherwise
5694 Sets the annotation's printability. @param printed true to make the annotation printable, false otherwise
5695 Sets whether signatures exist in the form. @param signaturesExist true if signatures are present, false otherwise
5696 Sets whether the annotation should prevent zooming. @param noZoom true to disable zoom, false otherwise
5697 Sets the append-only flag for the form. @param appendOnly true to enable append-only mode, false otherwise
5698 Sets the No Rotate flag for the annotation. @param noRotate true to prevent rotation, false otherwise
5699 Enables or disables sorting of choice options. @param sort true to enable sorting, false to disable it
5700 Sets whether the annotation should be visible. @param noView true to hide the annotation, false to show it
5701 Enables or disables multi-selection in the choice field. @param multiSelect true to allow multiple selections, false otherwise
5702 Sets the read-only property of the annotation. @param readOnly true to make the annotation read-only, false otherwise
5703 Enables or disables spell-checking for the choice field. @param doNotSpellCheck true to disable spell-checking, false to enable it
5704 Sets the lock state of the annotation. @param locked true to lock, false to unlock
5705 Sets whether changes should be committed upon selection. @param commitOnSelChange true to commit changes on selection, false otherwise
5706 Sets the annotation's visibility toggle. @param toggleNoView true to hide, false to show the annotation
5707 Sets whether the choice field is a combo box. @param combo true if it's a combo box, false otherwise
5708 Sets the lock state of annotation contents. @param lockedContents true to lock, false to unlock
5709 Sets the editable state of the combo box. @param edit true to make the combo box editable, false otherwise
5710 Sets the visibility of the annotation. @param invisible true to make the annotation invisible, false otherwise
5711 Sets the field as read-only. @param readonly true to make the field read-only, false otherwise
5712 Sets the visibility of the annotation. @param hidden true to hide, false to show the annotation
5713 Sets whether the field is required. @param required true if the field must be filled out, false otherwise
5714 Sets the printed flag of the annotation. @param printed true if the annotation should be printed, false otherwise
5715 Sets the No Export flag for this field. @param noExport true to prevent exporting, false otherwise
5716 Sets the "no zoom" flag for the annotation. @param noZoom true to disable zooming, false otherwise
5717 Constructs a new push button for a PDF form. @param acroForm the AcroForm containing the button
5718 Sets the No Rotate flag for this annotation. @param noRotate true to prevent rotation, false otherwise
5719 Initializes a new radio button field in a PDF form. @param acroForm the AcroForm containing the radio button
5720 Sets the annotation's visibility. @param noView true to hide, false to show the annotation
5721 Sets whether radio buttons operate in unison. @param radiosInUnison true if all selected, false otherwise
5722 Sets the read-only flag of the annotation. @param readOnly true to make the annotation read-only, false otherwise
5723 Sets whether the text field supports multiple lines. @param multiline true to enable multiline input, false otherwise
5724 Sets the locked status of the annotation. @param locked true to lock, false to unlock the annotation
5725 Enables or disables password protection for the text field. @param password true to enable password protection, false otherwise
5726 Sets the 'no view' toggle flag for the annotation. @param toggleNoView true to enable, false to disable the no view setting
5727 Enables or disables file selection capability. @param fileSelect true to enable file selection, false otherwise
5728 Sets the locked contents flag of the annotation. @param lockedContents true to lock, false to unlock
5729 Enables or disables spell-checking for the text field. @param doNotSpellCheck true to disable spell-checking, false to enable it
5730 Sets whether filter is required for digital signature. @param flag true if filter is required, false otherwise
5731 Sets whether subfilter is required. @param flag true if required, false otherwise
5732 Sets whether the text field should not scroll. @param doNotScroll true to prevent scrolling, false otherwise
5733 Sets whether digest method is required. @param flag true if required, false otherwise
5734 Sets the comb flag for the text field. @param comb true to enable comb mode, false otherwise
5735 Sets whether V (signature) is required. @param flag true if V is required, false otherwise
5736 Enables or disables rich text formatting in the text field. @param richText true to enable rich text, false to disable it
5737 Sets whether a reason is required for the digital signature. @param flag true if reason is required, false otherwise
5738 Sets whether legal attestation is required. @param flag true if required, false otherwise
5739 Retrieves an integer value from a nested dictionary. @param embeddedDictionary the key to access the embedded dictionary @param key the key to look up in the embedded dictionary @return integer value or -1 if not found
5740 Sets whether adding revocation info is required. @param flag true to require, false otherwise
5741 Retrieves the denominator from the number format settings. @return integer value of the denominator or -1 if not found
5742 Sets whether the subject field is required. @param flag true if required, false otherwise
5743 Sets whether issuer is required in the certificate. @param flag true if issuer is required, false otherwise
5744 Sets whether OID (Object Identifier) is required. @param flag true if OID is required, false otherwise
5745 Sets whether the subject distinguished name (DN) is required. @param flag true to require, false otherwise
5746 Sets whether key usage is required in the certificate. @param flag true to require key usage, false otherwise
5747 Sets whether URL is required. @param flag true to require URL, false otherwise
5748 Wraps an OutputStream with a PredictorOutputStream for PDF image decoding. @param out underlying output stream for writing data @param decodeParams dictionary containing decoding parameters @return wrapped output stream or original if predictor is not applicable
5749 Sets whether signatures exist in the form. @param signaturesExist true if signatures are present, false otherwise
5750 Retrieves the structure parents of the PDF page. @return integer value representing the structure parents or default (-1) if not found
5751 Removes a page node from the PDF page tree. @param node the COSDictionary representing the page to remove
5752 Sets or clears the append-only flag in the signature. @param appendOnly true to enable, false to disable the append-only mode
5753 Adds a page to the PDF document. @param page PDPage object to be added
5754 Enables or disables sorting of choice field options. @param sort true to enable sorting, false to disable
5755 Enables or disables multi-selection in choice fields. @param multiSelect true to enable, false to disable
5756 Retrieves bits per sample value. @return number of bits used to represent each sample or -1 if not found
5757 Sets whether spell checking is disabled for the choice field. @param doNotSpellCheck true to disable spell checking, false to enable it
5758 Retrieves the Marker Context Identifier (MCID). @return MCID as an integer, or default (-1) if not found
5759 Sets whether changes should be committed upon selection. @param commitOnSelChange true to enable auto-commit, false otherwise
5760 Retrieves the next key in the parent tree. @return integer value representing the next key or default (-1) if not found
5761 Sets whether the choice field is displayed as a combo box. @param combo true for combo box display, false otherwise
5762 Sets the editable state of the combo box. @param edit true to make the combo box editable, false otherwise
5763 Retrieves the MCID (Marked Content Identifier) of the marked content. @return MCID as an integer, or -1 if properties are not available
5764 Sets the read-only state of the field. @param readonly true to make the field read-only, false otherwise
5765 Sets whether the field is required. @param required true if the field must be filled out; false otherwise
5766 Sets or clears the "no export" flag. @param noExport true to prevent field from being exported, false otherwise
5767 Creates a PDImageXObject from a TIFF image. @param document PDF document to associate with the image @param reader source of the image data @param number image number in the TIFF file @return PDImageXObject or null if creation fails @throws IOException if an I/O error occurs
5768 Initializes a new push button within a PDF form. @param acroForm the form containing the button
5769 Retrieves line cap style. @return integer representing line cap style or default (-1) if not found
5770 Initializes a radio button field in a PDF form. @param acroForm the form containing the radio button
5771 Retrieves line join style. @return integer representing line join style or default (-1) if not found
5772 Sets whether radio buttons operate in unison. @param radiosInUnison true if radios should act as a group
5773 Retrieves the structure parent index of the annotation. @return integer value representing the structure parent or -1 if not found
5774 Enables or disables multiline text input. @param multiline true to allow multiple lines, false otherwise
5775 Retrieves the P (Permissions) value from the digital signature configuration. @return integer representing permissions or default (-1) if not found
5776 Enables or disables password protection for the text field. @param password true to enable password protection, false otherwise
5777 Retrieves the maximum length of the text field. @return integer representing the maximum number of characters allowed
5778 Enables or disables file selection in the text field. @param fileSelect true to enable file selection, false otherwise
5779 Retrieves integer value by key with default. @param name primary key to look up in the dictionary @param defaultValue value to return if no valid integer is found @return integer value or default if not found
5780 Enables or disables spell-checking for the text field. @param doNotSpellCheck true to disable spell-checking, false to enable
5781 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
5782 Sets whether the text field should prevent scrolling. @param doNotScroll true to disable scrolling, false otherwise
5783 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
5784 Sets the 'comb' property of the text field. @param comb true to enable comb input, false otherwise
5785 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
5786 Enables or disables rich text formatting. @param richText true to enable rich text, false otherwise
5787 Checks if the annotation disables zooming. @return true if no zoom is allowed, false otherwise
5788 Checks if the annotation should not be rotated. @return true if no rotate flag is set, false otherwise
5789 Retrieves an integer value from an embedded dictionary. @param embeddedDictionary key to the embedded COSDictionary @param key primary key to look up within the embedded dictionary @return integer value or default (-1) if not found or missing
5790 Checks if annotation should not be displayed. @return true if no view flag is set, false otherwise
5791 Retrieves the denominator from the number format settings. @return integer value representing the denominator or -1 if not found
5792 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
5793 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
5794 Checks if the annotation should not be displayed. @return true if no view flag is set, false otherwise
5795 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
5796 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
5797 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
5798 Wraps the output stream with a PredictorOutputStream if predictor algorithm is specified. @param out underlying OutputStream for writing data @param decodeParams dictionary containing decoding parameters @return wrapped OutputStream or original if no valid predictor
5799 Checks if the annotation is printed. @return true if the annotation is marked as printable, false otherwise
5800 Retrieves the structure parent index of the page. @return integer value representing the structure parent or -1 if not set
5801 Checks if the annotation disables zooming. @return true if zooming is disabled, false otherwise
5802 Removes a page node from the PDF page tree. @param node the COSDictionary representing the page to remove
5803 Checks if the annotation should not be rotated. @return true if no rotate flag is set, false otherwise
5804 Adds a page to the PDF document's page tree. @param page PDPage object to be added
5805 Checks if the annotation should not be visible. @return true if the annotation is set to no view, false otherwise
5806 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
5807 Retrieves the number of bits per sample. @return integer value representing bits per sample or -1 if not found
5808 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
5809 Retrieves the Marker Context Identifier (MCID) of the marked content. @return integer value representing MCID or -1 if not found
5810 Checks if the annotation's "no view" toggle flag is set. @return true if the toggle no view flag is enabled, false otherwise
5811 Retrieves the next key in the parent tree. @return integer value representing the next key or -1 if not found
5812 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
5813 Retrieves the Marked Content ID. @return MCID value or -1 if properties are missing
5814 Checks if filter is required for digital signature. @return true if filter is required, false otherwise
5815 Checks if subfilter is required for digital signature. @return true if subfilter flag is set, false otherwise
5816 Checks if digest method is required for digital signature. @return true if digest method is mandatory, false otherwise
5817 Creates a PDImageXObject from a TIFF image. @param document PDDocument to which the image belongs @param reader RandomAccessRead for reading TIFF data @param number page number in the TIFF file @return PDImageXObject or null if no data found @throws IOException if I/O operations fail
5818 Checks if the "V" flag is required. @return true if the "V" flag is set, false otherwise
5819 Retrieves the line cap style. @return integer representing the line cap style or -1 if not set
5820 Checks if a reason is required for the digital signature. @return true if reason is required, false otherwise
5821 Retrieves the line join style. @return integer representing the line join style or -1 if not found
5822 Checks if legal attestation is required. @return true if legal attestation is required, false otherwise
5823 Retrieves the structure parent index of the annotation. @return integer value representing the structure parent or -1 if not set
5824 Checks if adding revision information is required. @return true if revision info is required, false otherwise
5825 Checks if subject field is required. @return true if subject is mandatory, false otherwise
5826 Retrieves the P value from the digital signature configuration. @return an integer representing the P value or -1 if not found
5827 Checks if issuer information is required. @return true if issuer is required, false otherwise
5828 Retrieves the maximum length constraint of the text field. @return integer value representing the maximum length or -1 if not set
5829 Checks if OID (Object Identifier) is required. @return true if OID is marked as required, false otherwise
5830 Retrieves an integer value by attribute name. @param name attribute key to look up @param defaultValue default value if key is not found @return integer value or default if key is invalid or missing
5831 Checks if the subject distinguished name (DN) is required. @return true if subject DN is required, false otherwise
5832 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
5833 Checks if key usage is required in the certificate. @return true if key usage is required, false otherwise
5834 Checks if the annotation is hidden. @return true if hidden, false otherwise
5835 Checks if the URL field is required. @return true if URL is required, false otherwise
5836 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
5837 Checks if signatures exist in the form. @return true if signatures are present, false otherwise
5838 Checks if the annotation disables zooming. @return true if no zoom flag is set, false otherwise
5839 Checks if the form is in append-only mode. @return true if append-only flag is set, false otherwise
5840 Checks if the annotation should not be rotated. @return true if no rotate flag is set, false otherwise
5841 Determines if this button is a push button. @return true if the button is a push button, false otherwise
5842 Checks if the annotation should not be displayed. @return true if the annotation is hidden, false otherwise
5843 Determines if this button is a radio button. @return true if the button is a radio button, false otherwise
5844 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
5845 Checks if sorting is enabled for the choice field. @return true if sorting is enabled, false otherwise
5846 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
5847 Determines if the choice field allows multiple selections. @return true if multi-select is enabled, false otherwise
5848 Checks if the annotation's "no view" toggle flag is set. @return true if the flag is set, false otherwise
5849 Checks if spell-checking is disabled for the choice field. @return true if spell-checking is disabled, false otherwise
5850 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
5851 Checks if changes to the choice field are committed upon selection. @return true if commit on select change is enabled, false otherwise
5852 Checks if the annotation is invisible. @return true if invisible, false otherwise
5853 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
5854 Checks if the choice field is a combo box. @return true if it's a combo box, false otherwise
5855 Checks if the annotation is printed. @return true if the annotation is marked as printable, false otherwise
5856 Determines if the combo box is editable. @return true if the edit flag is set, false otherwise
5857 Checks if the annotation disables zooming. @return true if no zoom is allowed, false otherwise
5858 Checks if the field is read-only. @return true if the field is read-only, false otherwise
5859 Checks if the annotation should not be rotated. @return true if no rotate flag is set, false otherwise
5860 Checks if the field is required. @return true if the field is marked as required, false otherwise
5861 Checks if the annotation should not be visible. @return true if no-view flag is set, false otherwise
5862 Checks if the field should not be exported. @return true if the no-export flag is set, false otherwise
5863 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
5864 Checks if radio buttons are set to operate in unison. @return true if radios are in unison, false otherwise
5865 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
5866 Checks if the text field supports multiline input. @return true if multiline is enabled, false otherwise
5867 Checks if the annotation should not be visible in the view. @return true if the annotation is set to be hidden, false otherwise
5868 Checks if the text field is password protected. @return true if password protection is enabled, false otherwise
5869 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
5870 Checks if the text field supports file selection. @return true if file select is enabled, false otherwise
5871 Checks if filter is required for digital signature. @return true if filter is required, false otherwise
5872 Determines if spell checking is disabled for this text field. @return true if spell checking is disabled, false otherwise
5873 Checks if subfilter is required for digital signature. @return true if subfilter is required, false otherwise
5874 Checks if text field should not scroll. @return true if scrolling is disabled, false otherwise
5875 Checks if digest method is required. @return true if digest method flag is set, false otherwise
5876 Checks if the text field uses comb formatting. @return true if comb formatting is enabled, false otherwise
5877 Checks if V (version) flag is required. @return true if V flag is set, false otherwise
5878 Checks if the text field supports rich text. @return true if rich text is enabled, false otherwise
5879 Checks if reason field is required. @return true if reason is required, false otherwise
5880 Retrieves a page by index. @param index 0-based index of the page to retrieve @return PDPage object or throws exception if not found
5881 Checks if legal attestation is required. @return true if legal attestation is required, false otherwise
5882 Retrieves the total number of pages in the PDF document. @return count of pages or 0 if not specified
5883 Checks if adding revocation info is required. @return true if revocation info is required, false otherwise
5884 Checks if subject attribute is required. @return true if subject is mandatory, false otherwise
5885 Adds an attribute to the PDF structure element. @param attributeObject the attribute to add
5886 Checks if issuer information is required. @return true if issuer is mandatory, false otherwise
5887 Updates the revision number for a changed attribute. @param attributeObject the attribute that has changed
5888 Checks if OID (Object Identifier) is required. @return true if OID is required, false otherwise
5889 Adds a class name to the PDF element's structure. @param className the class name to add
5890 Checks if subject distinguished name (DN) is required. @return true if subject DN is required, false otherwise
5891 Increments the revision number of the structure element by one.
5892 Checks if key usage is required. @return true if key usage flag is set, false otherwise
5893 Checks if URL attribute is required. @return true if URL flag is set, false otherwise
5894 Checks if signatures exist in the form. @return true if signatures are present, false otherwise
5895 Checks if the signature field is append-only. @return true if append-only flag is set, false otherwise
5896 Determines if the button is a push button. @return true if the button is a push button, false otherwise
5897 Determines if this button is a radio button. @return true if the button is a radio button, false otherwise
5898 Checks if sorting is enabled for the choice field. @return true if sorting is enabled, false otherwise
5899 This code snippet is part of a larger program that deals with PDF encryption. It specifically handles the decryption process for encrypted PDF files using a private key and certificate. Here's a breakdown of what this code does: 1. It iterates over an array of `RecipientInfo` objects, which contain information about who can decrypt the file. 2. For each recipient, it checks if the provided certificate matches the one in the `RecipientInfo` object. 3. If a match is found, it uses the private key to unwrap the encrypted content and get the enveloped data. 4. It then extracts the access permissions from this data and sets them for the current user. 5. It creates a SHA1 hash of the seed (the first 20 bytes of the enveloped data) and the recipient information, which is used as the encryption key. 6. Finally, it sets the encryption key based on this hash. This code is quite complex and deals with many low-level details of PDF encryption, including handling different versions of the encryption algorithm and dealing with potential exceptions that could arise during the decryption process.
5900 Checks if the choice field supports multi-selection. @return true if multi-select is enabled, false otherwise
5901 Retrieves the owner encryption key. @return byte array containing the owner key or null if not set @throws IOException if an error occurs during retrieval
5902 Checks if spell-checking is disabled for the choice field. @return true if spell-checking is disabled, false otherwise
5903 Retrieves and processes the user encryption key. @return byte array of the user key or null if not found @throws IOException if an I/O error occurs
5904 Checks if changes are committed upon selection change. @return true if commit on select is enabled, false otherwise
5905 Checks if the choice field is a combo box. @return true if it's a combo box, false otherwise
5906 Calculates the displacement vector for a character. @param code character code @return Vector representing horizontal and vertical displacement @throws IOException if an error occurs during font processing
5907 Checks if the combo box allows editing. @return true if editable, false otherwise
5908 Calculates total width of a string in PDF units. @param text input string to measure @return total width in PDF units @throws IOException if an I/O error occurs during processing
5909 Determines if the field is read-only. @return true if the field is read-only, false otherwise
5910 Checks if the field is required. @return true if the field is marked as required, false otherwise
5911 Checks if the field should not be exported. @return true if no-export flag is set, false otherwise
5912 Checks if radio buttons are set to operate in unison. @return true if radios in unison, false otherwise
5913 Retrieves a PDAbstractPattern by name. @param name the pattern's COSName @return PDAbstractPattern object or null if not found @throws IOException if an error occurs during pattern creation
5914 Checks if the text field allows multiline input. @return true if multiline is enabled, false otherwise
5915 Determines if the text field is password protected. @return true if password protection is enabled, false otherwise
5916 Processes operators from a PDF content stream. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs during processing
5917 Checks if the text field supports file selection. @return true if file select flag is set, false otherwise
5918 Retrieves a PDShading instance by name. @param name the specific shading resource name @return PDShading object or null if not found @throws IOException if an error occurs during shading creation
5919 Determines if spell-checking is disabled for this text field. @return true if spell-checking is disabled, false otherwise
5920 Determines if the text field should not scroll. @return true if scrolling is disabled, false otherwise
5921 Retrieves the shading pattern associated with this resource. @return PDShading object representing the shading pattern, or null if not found @throws IOException if an error occurs while creating the shading instance
5922 Checks if the text field uses comb formatting. @return true if comb formatting is enabled, false otherwise
5923 Retrieves the number of bits per color component. Initializes from COS object if not already set. @return integer value representing bits per color component or default if not found
5924 Checks if the text field supports rich text. @return true if rich text is enabled, false otherwise
5925 Retrieves the number of bits per color component for shading. @return integer value representing bits per color component or default if not found
5926 Retrieves a PDF page by its index. @param index 0-based index of the page to retrieve @return PDPage object representing the specified page
5927 Retrieves the number of bits per coordinate. @return int representing bits per coordinate or default value if not set
5928 Returns the total number of pages in the PDF document. @return integer representing the page count
5929 Retrieves the number of bits per coordinate for shading. @return int representing bits per coordinate or default value if not set
5930 Adds an attribute to the structure element. @param attributeObject the PDAttributeObject to add
5931 Updates the revision number in the attribute list. @param attributeObject the attribute object to check and update
5932 Adds a class name to the PDStructureElement. @param className the class name to add
5933 Creates a PDField based on the field type in the COSDictionary. @param form the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any @return PDField instance or null if unsupported field type
5934 Increments the revision number of the PDF structure element.
5935 Initializes a new PDFPrintable instance. @param document PDF document to be printed @param scaling option for page scaling @param showPageBorder flag to display page borders @param dpi dots per inch for rendering quality @param center flag to center pages during printing @param renderer PDFRenderer object for rendering pages
5936 Initializes a new PDFRenderer instance. @param document PDDocument object containing the PDF content
5937 Loads and parses an FDF document from a file. @param filename path to the FDF file @return FDFDocument containing parsed data @throws IOException if an I/O error occurs during loading or parsing
5938 This code snippet is a part of a larger encryption/decryption process in Java, specifically dealing with PDF encryption. The method `decrypt` appears to be decrypting the encrypted data using a private key and handling various versions of encryption algorithms. Here's a step-by-step breakdown: 1. It first initializes some variables: `envelopedData`, `foundRecipient`, and `extraInfo`. 2. Then, it iterates over an array of recipient information (`array`). For each recipient, it checks if the certificate matches the private key. If it does, it sets `envelopedData` to the content decrypted with this key. 3. After finding a matching recipient or exhausting all possibilities, it checks if the enveloped data is 24 bytes long. If not, it throws an IOException. 4. It then extracts access permissions from the last 4 bytes of the enveloped data and sets them as the current access permission. 5. The next step involves creating a SHA1 hash of the seed (first 20 bytes) and all recipient information. Depending on the encryption version, it might append additional bytes to this input before hashing. 6. Finally, it uses this hash to derive the encryption key. If the encryption version is 4 or 5, it also checks if AES encryption is used by looking at the crypt filter method in the default crypt filter dictionary. 7. Any exceptions thrown during this process are caught and rethrown as IOExceptions.
5939 Retrieves the owner encryption key. @return byte array containing the owner key or null if not found @throws IOException if an I/O error occurs
5940 Loads a PDF document from a byte array. @param input byte array containing the PDF data @param password password for decrypting the PDF (optional) @param keyStore input stream for the keystore (if encrypted) @param alias alias for the key in the keystore @param streamCacheCreateFunction factory for creating stream caches @return PDDocument object representing the loaded PDF @throws IOException if an error occurs during loading or document creation
5941 Retrieves the user encryption key. @return byte array containing the user key or null if not found @throws IOException if an I/O error occurs
5942 Calculates character displacement vector. @param code character code @return Vector representing horizontal displacement in PDF units @throws IOException if an I/O error occurs
5943 Calculates the total width of a string in PDF units. @param text the input string to measure @return total width of the string in PDF units @throws IOException if an I/O error occurs during processing
5944 Loads and parses a PDF document from a random access read source. @param randomAccessRead source for the PDF file @param password decryption password for the PDF @param keyStore input stream for the keystore (if encrypted) @param alias alias for the key in the keystore @param streamCacheCreateFunction factory for creating stream caches @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
5945 Retrieves a PDAbstractPattern by name. @param name the name of the pattern resource @return PDAbstractPattern object or throws IOException if not found
5946 Processes operators from a PDF content stream. @param contentStream PDContentStream object containing the content to process @throws IOException if an I/O error occurs during processing
5947 Retrieves a PDShading object by name. @param name key identifying the specific shading resource @return PDShading object or throws IOException for unknown types
5948 Retrieves the shading pattern. @return PDShading object or throws IOException for unknown types
5949 Retrieves the number of bits per color component. @return integer value representing bits per component or -1 if not set
5950 Retrieves the number of bits per color component. @return integer value representing bits per component or -1 if not set
5951 Retrieves the number of bits per coordinate for shading. @return number of bits per coordinate
5952 Retrieves the number of bits per coordinate for shading. @return number of bits per coordinate
5953 Sets the stroking color space to DeviceRGB. @param operator PDF operator being processed @param arguments list of operands for the operator @throws IOException if an I/O error occurs
5954 Retrieves an XObject by name from the PDF resources. @param name the name of the XObject resource @return PDXObject instance or null if not found @throws IOException if an error occurs during retrieval
5955 Creates a PDField instance based on the field type. @param form the PDAcroForm containing the field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField in the hierarchy @return PDField object or null if unsupported field type
5956 Sets the current font and size for text rendering. @param font the PDFont to use @param fontSize the font size in points @throws IOException if an I/O error occurs
5957 Sets graphics state parameters. @param state the extended graphics state to apply @throws IOException if writing fails
5958 Fills the current path using a specified shading. @param shading PDShading object to be used for filling @throws IOException if an I/O error occurs during writing
5959 Initializes a new PDFPrintable instance. @param document the PDDocument to be printed @param scaling the scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering quality @param center flag to indicate if pages should be centered during printing @param renderer the PDFRenderer used for rendering pages
5960 Begins a marked content sequence with a tag and property list. @param tag the COSName representing the mark tag @param propertyList the PDPropertyList containing properties @throws IOException if writing fails
5961 Initializes the PDFRenderer with a given PDDocument. @param document PDDocument to be rendered
5962 Sets a marked content point with properties in the PDF. @param tag unique identifier for the marked content @param propertyList properties associated with the marked content @throws IOException if writing fails
5963 Loads and parses an FDF document from a file. @param filename the path to the FDF file @return FDFDocument object containing parsed data @throws IOException if I/O error occurs during loading or parsing
5964 Draws an image at specified position and size. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs or text mode is active
5965 Loads a PDF document from byte array. @param input byte array containing the PDF data @param password decryption password for protected documents @param keyStore InputStream containing keystore data @param alias alias for the key in the keystore @param streamCacheCreateFunction factory function for creating stream cache @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading or parsing
5966 Draws an image at a specified position using a transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling the image @throws IOException if an I/O error occurs or text mode is active
5967 Draws a form XObject on the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing
5968 Loads and parses a PDF document from a RandomAccessRead source. @param randomAccessRead PDF file source @param password decryption password for protected documents @param keyStore InputStream containing keystore data @param alias alias for the key in the keystore @param streamCacheCreateFunction factory function for creating stream cache @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
5969 Checks if an optional content group by name is enabled. @param groupName the name of the optional content group @return true if the group is enabled, false otherwise
5970 Checks if an optional content group is enabled in the PDF document. @param group the PDOptionalContentGroup to check @return true if the group is enabled or no OC properties exist, false otherwise
5971 Validates button value. @param value string representation of the value to check @throws IllegalArgumentException if value is invalid
5972 Processes RGB color setting for stroking in PDF. @param operator the PDF operator being processed @param arguments list of operands for the operator @throws IOException if an I/O error occurs
5973 Retrieves an XObject by name. @param name the name of the XObject to retrieve @return PDXObject instance or null if not found @throws IOException if an error occurs during retrieval
5974 Sets the current font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
5975 Sets graphics state parameters. @param state PDExtendedGraphicsState to apply @throws IOException if I/O error occurs
5976 Applies a shading effect to the PDF content. @param shading PDShading object defining the shading effect @throws IOException if an I/O error occurs or if called within text mode
5977 Begins a marked content sequence in the PDF. @param tag COSName representing the markup content type @param propertyList PDPropertyList containing additional properties @throws IOException if an I/O error occurs
5978 Fixes page destinations in the destination document. @param destinationDocument PDF document to update destinations
5979 Retrieves page labels for the PDF document. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs during retrieval
5980 Sets a marked content point with properties in the PDF stream. @param tag COSName of the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs
5981 Draws an image at specified position and size. @param image the PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
5982 Draws an image on the PDF using a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs or if called within text mode
5983 Draws a form XObject on the PDF stream. @param form PDFormXObject to draw @throws IOException if an I/O error occurs or if called within a text block
5984 Constructor for GouraudShadingContext. Initializes the context with necessary parameters for PDF rendering. @param shading PDShading object representing the shading @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an error occurs during initialization
5985 Creates a new PDF document if splitting is required or no destination doc exists. Initializes maps for page and annotation dictionaries.
5986 Writes the header of a PDF document. @param doc the COSDocument to write the header for @throws IOException if an I/O error occurs
5987 Sets the optional content properties for the document. @param ocProperties the new optional content properties
5988 Checks if an optional content group by name is enabled. @param groupName the name of the optional content group @return true if the group is enabled, false otherwise
5989 Retrieves the role map from the PDF structure. @return Map containing role mappings or an empty map if not found
5990 Checks if an optional content group is enabled in the PDF document. @param group the PDOptionalContentGroup to check @return true if the group is enabled or no OC properties exist, false otherwise
5991 Validates button value. @param value to be validated @throws IllegalArgumentException if value is invalid
5992 Writes a PDF document with optional signing. @param doc PDDocument to write @param signInterface Signature interface for document signing @throws IOException if an I/O error occurs
5993 Adds a PDF object to the pool. Handles compression and checks for existing objects. @param key unique identifier for the object @param base the COSBase object to add @return the actual COSBase object added or null if not added
5994 Applies a protection policy to the PDF document. @param policy the ProtectionPolicy to apply @throws IOException if no suitable security handler is found
5995 Prepares a PDF document for encryption using public key cryptography. @param doc the PDDocument to be encrypted @throws IOException if an I/O error occurs during encryption
5996 Retrieves the glyph name for a given character code. @param code character code point @return glyph name or ".notdef" if not found
5997 Converts character code to glyph index. @param code character code to convert @return glyph index or 0 if not found @throws IOException if an I/O error occurs
5998 Fixes page destinations in the destination document. @param destinationDocument the PDF document to fix destinations for
5999 Retrieves the Mac OS subtype of the embedded file. @return Mac OS subtype string or null if not found
6000 Retrieves page labels from the PDF document. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs during retrieval
6001 Retrieves the Mac creator attribute of the embedded file. @return Mac creator string or null if not found
6002 Retrieves the Mac resource fork of the embedded file. @return decoded string of Mac resource fork or null if not found
6003 Retrieves a CID font mapping based on base font and font descriptor. @param baseFont the PostScript name of the base font @param fontDescriptor PDFontDescriptor containing font properties @param cidSystemInfo PDCIDSystemInfo for character set matching @return CIDFontMapping object or null if not found
6004 Creates a decoded input stream using default decode options. @return COSInputStream with decoded data @throws IOException if an I/O error occurs or stream is improperly initialized
6005 Searches for object streams using brute force method. @param xrefTable cross-reference table to update with found offsets @throws IOException if an I/O error occurs during parsing
6006 Initializes a GouraudShadingContext for PDF rendering. @param shading PDShading object representing the shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @throws IOException if there is an issue with color space retrieval or background processing
6007 Parses and retrieves a COSBase object from an object stream. @param objstmObjNr number of the object stream @param key unique identifier for the object to retrieve @return parsed COSBase object or null if not found @throws IOException if parsing fails
6008 Creates a new PDF document if splitting is necessary. @throws IOException if an error occurs during document creation
6009 Parses an indirect object stream in a PDF. @param objByteOffset byte offset of the object @param isStandalone flag indicating if it's a standalone xref @return previous cross-reference table offset or -1 if not found @throws IOException if parsing fails
6010 Writes the PDF header to the document. @param doc the COSDocument to write the header to @throws IOException if an I/O error occurs
6011 Retrieves the content stream of the PDF page. @return InputStream representing the page's contents or an empty stream if none found @throws IOException if an I/O error occurs while accessing the content stream
6012 Sets the optional content properties for the PDF. @param ocProperties PDOptionalContentProperties object to set
6013 Retrieves the role map from the PDF structure tree. @return Map containing role mappings or an empty map if not found
6014 Constructs a PDCIDFontType2 instance. @param fontDictionary CID font dictionary @param parent parent Type0Font object @throws IOException if an I/O error occurs
6015 Retrieves the CID font instance. @return PDCIDFontType2 object representing the embedded CID font @throws IOException if an I/O error occurs during font retrieval
6016 Writes a PDF document with optional signing. @param doc the PDDocument to write @param signInterface the signature interface for signing (can be null) @throws IOException if an I/O error occurs
6017 Adds a PDF object to the compression pool. @param key unique identifier for the COSBase object @param base the COSBase object to add @return the actual COSBase object added or null if not added
6018 Protects the PDF document with specified security policy. @param policy protection policy to apply @throws IOException if no suitable security handler is found or an I/O error occurs
6019 Prepares a PDF document for encryption using public key cryptography. @param doc the PDDocument to encrypt @throws IOException if an I/O error occurs during encryption setup
6020 Retrieves the glyph name for a given character code. @param code character code to find the glyph name for @return glyph name as a UniName string, or ".notdef" if not found
6021 Converts character code to glyph index. @param code character code to convert @return glyph index or 0 if not found
6022 Retrieves the Mac OS subtype of the embedded file. @return Mac subtype string or null if not found
6023 Retrieves the Mac OS creator of the embedded file. @return Creator string or null if not found
6024 Creates a PDAnnotation instance based on the given COSBase. @param base the underlying COSBase for the annotation @return PDAnnotation object or throws IOException if unsupported type
6025 Retrieves the Mac OS resource fork data. @return the resource fork data as a string or null if not found
6026 Maps a CID font based on base font name and descriptor. Tries OTF/TTF matches, then checks character collection for substitutes. @param baseFont base font name @param fontDescriptor font descriptor details @param cidSystemInfo CID system information for character set matching @return CIDFontMapping object or null if not found
6027 Creates a decoded input stream using default decode options. @return COSInputStream with decoded data @throws IOException if an I/O error occurs during stream creation or decoding
6028 Constructs TilingPaint with specified PageDrawer and tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param xform AffineTransform for scaling @throws IOException if an I/O error occurs during initialization
6029 Searches for object streams in a PDF using brute force. @param xrefTable cross-reference table mapping COSObjectKey to offsets @throws IOException if an I/O error occurs during parsing
6030 Parses a COSBase object from a PDF object stream. @param objstmObjNr number of the object stream @param key unique identifier for the COSObject @return parsed COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
6031 Retrieves an opaque image from the PDF image. @return BufferedImage representation of the image @throws IOException if I/O error occurs during processing
6032 Parses an XRef object stream from a PDF. @param objByteOffset byte offset of the object in the PDF @param isStandalone indicates if the XRef stream is standalone @return byte offset to the previous cross-reference section or -1 if not found @throws IOException if I/O error occurs during parsing
6033 Retrieves the contents of the PDF page. @return InputStream containing the page's content or an empty stream if none exists @throws IOException if an I/O error occurs
6034 Constructs a PDPageContentStream for writing to a PDF page. @param document the PDDocument to add content to @param sourcePage the PDPage where content will be added @param appendContent mode specifying how to handle existing content (OVERWRITE, PREPEND) @param compress whether to compress the output stream @param resetContext whether to reset graphics context before appending @throws IOException if an I/O error occurs
6035 Constructs a PDCIDFontType2 with specified font dictionary and parent font. @param fontDictionary the font dictionary containing CID font properties @param parent the parent PDType0Font object @throws IOException if an I/O error occurs during font processing
6036 Retrieves the CID font embedded in the PDF. @return PDCIDFontType2 object representing the embedded CID font @throws IOException if an I/O error occurs during font processing
6037 Retrieves the page's crop box, clipping it to the media box if necessary. @return PDRectangle representing the crop box or media box if not defined
6038 Draws an image at specified coordinates using its default dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6039 Draws an inline image at specified coordinates with given dimensions. Throws IllegalStateException if called within a text block. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or text mode is active
6040 Draws an inline image at specified coordinates with given dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or text mode is active
6041 Draws an inline image at specified coordinates with given dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or text mode is active
6042 Creates a PDAnnotation based on the provided COSBase. @param base the COSBase object representing the annotation @return a PDAnnotation subclass instance or throws IOException if unsupported
6043 Draws an inline image at specified coordinates with given dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or text mode is active
6044 Initializes TilingPaint with specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param xform AffineTransform for scaling @throws IOException if an I/O error occurs
6045 This code snippet appears to be a method in Java that processes an XML element representing a markup annotation and sets various properties of a PDF annotation object. The method uses the Apache PDFBox library, which is a popular open-source library for working with PDF documents in Java. The method starts by extracting attributes from the XML element using `element.getAttribute()`. It then validates these attributes and throws exceptions if they are missing or invalid. For example, it checks that the 'rect' attribute contains exactly four numbers separated by commas. It sets properties of the annotation object such as name, rectangle, title, creation date, opacity, subject, intent, contents, rich contents, border style, and border effect. Some of these properties are optional, so the method includes conditional statements to handle missing attributes gracefully. The code also uses XPath expressions to evaluate certain parts of the XML element. It sets the contents of the annotation based on the first 'contents' child element found in the XML. If a 'contents-richtext' child element is present, it extracts its text content and sets both the rich contents and plain text contents. Finally, the method configures the border style of the annotation by setting its width, style (such as dashed or beveled), and dash pattern if applicable. It also creates a border effect dictionary for cloud-style borders with an optional intensity value.
6046 Retrieves the entire opaque image from the PDF document. @return BufferedImage of the full image or null if invalid input @throws IOException if an I/O error occurs during retrieval
6047 Decodes JPEG2000 image data from input stream and writes to output stream. @param encoded InputStream containing encoded JPEG2000 data @param decoded OutputStream for the decoded image data @param parameters COSDictionary with decoding parameters @param index unused parameter @param options DecodeOptions for the decoding process @return DecodeResult object containing decoding results @throws IOException if an I/O error occurs during decoding
6048 Initializes a PDPageContentStream for writing to a PDF page. @param document the PDDocument containing the page @param sourcePage the PDPage to write content to @param appendContent mode specifying how to handle existing content (OVERWRITE, PREPEND) @param compress whether to compress the stream @param resetContext whether to reset graphics context before writing @throws IOException if an I/O error occurs
6049 Retrieves the page's crop box dimensions. @return PDRectangle representing the crop box or media box if not set
6050 Decodes LZW-encoded data from input stream to output stream. @param encoded input stream containing LZW-encoded data @param decoded output stream for the decompressed data @param parameters COSDictionary with decoding settings @param index index of the filter in the filter array @return DecodeResult object containing decoding parameters @throws IOException if an I/O error occurs during decoding
6051 Removes page at specified index. @param index 0-based index of the page to remove
6052 Removes a page from the PDF document. @param page PDPage object to be removed
6053 Adds a page to the PDF document. @param page PDPage object to be added
6054 Draws an inline image at the specified position using its original size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs
6055 Inserts a new page before an existing page in the PDF document. @param newPage the page to be inserted @param nextPage the page after which the new page will be inserted @throws IllegalArgumentException if nextPage is not found in the page tree
6056 Draws an inline image at specified position and size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or text mode is active
6057 Inserts a new page after the specified previous page in the PDF document. @param newPage the PDPage to be inserted @param prevPage the PDPage after which the new page will be inserted
6058 Draws an inline image at specified position and size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or drawing is attempted within text mode
6059 Appends a marked content element as a child. @param markedContent the PDMarkedContent to append @throws IllegalArgumentException if MCID is negative or doesn't exist
6060 Draws an inline image at specified position and size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or if in text mode
6061 Fetches and sets the UCS2 CMap for the font. Handles composite fonts with predefined or descendant CIDFonts. @throws IOException if an I/O error occurs while fetching the CMap
6062 Creates a PDImageXObject from a byte array containing TIFF image data. @param document PDF document to associate with the image @param byteArray byte array containing TIFF image data @param number image number in the TIFF file @return PDImageXObject or null if creation fails @throws IOException if an I/O error occurs
6063 Draws an inline image at specified position and size within a PDF pattern. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or drawing within text block
6064 Creates a PDImageXObject from a TIFF file. @param document PDF document to associate with the image @param file source TIFF file @param number image number in the TIFF file @return PDImageXObject or null if creation fails @throws IOException if an I/O error occurs
6065 Sets the display options for a choice field. @param displayValues list of string values to be displayed
6066 Sets the options for a choice field with export and display values. @param exportValues list of export values @param displayValues list of display values
6067 Sets selected option indices for multi-select choice fields. @param values list of selected option indices @throws IllegalArgumentException if field does not allow multiple selections
6068 It seems like you're trying to parse and set various attributes for a markup annotation in a PDF document using Java. The code snippet provided is a method that takes an XML element as input, extracts attributes from it, and sets them to the corresponding properties of a markup annotation object. Here's a brief explanation of what each part does: 1. It sets the name of the annotation using the "name" attribute from the XML element. 2. It checks if the "rect" attribute exists and splits its value by commas into four parts, which represent the coordinates of a rectangle. If there are not exactly four numbers, it throws an IOException. 3. It converts these string values to float and sets them as the rectangle for the annotation. 4. It sets other properties like title, creation date, opacity, subject, intent, contents, rich contents, border style, and border effect based on the attributes from the XML element. Please note that this code snippet assumes you have a proper setup of libraries and classes (like PDRectangle, PDBorderStyleDictionary, etc.) which are not included in your question. You should replace these with actual class names and methods according to your project's structure.
6069 Determines if the text field should use comb formatting. @return true if comb formatting is applicable, false otherwise
6070 Decodes JPEG2000 image data from input stream to output stream. @param encoded input stream containing JPEG2000 data @param decoded output stream for decoded image data @param parameters COSDictionary with decoding settings @param index index of the filter (unused) @param options decoding options @return DecodeResult object containing decoded parameters and results @throws IOException if I/O error occurs during decoding
6071 Retrieves a page by index from the PDF document. @param pageIndex 0-based index of the page to retrieve @return PDPage object or throws exception if not found
6072 Initializes a new PageExtractor with the specified PDF document. @param sourceDocument the PDF document to extract pages from
6073 Initializes a new PDFPageable instance. @param document the PDDocument to be paginated and printed @param orientation page orientation setting (e.g., portrait, landscape) @param showPageBorder flag to determine if page borders should be visible @param dpi dots per inch for rendering quality @param center flag to center content on pages
6074 Decodes LZW-encoded data from input stream to output stream. @param encoded compressed data input stream @param decoded output stream for decompressed data @param parameters COSDictionary containing decoding settings @param index specific parameter set index @return DecodeResult object with parameters @throws IOException if I/O error occurs during decoding
6075 Removes a page by its 1-based index. @param index the 1-based index of the page to remove
6076 Notifies the associated structure element of a change.
6077 Removes a specified page from the PDF document. @param page PDPage object to be removed
6078 Adds a new page to the PDF document. @param page PDPage object representing the page to be added
6079 Inserts a new page before an existing page in the PDF document. @param newPage the page to be inserted @param nextPage the page after which the new page will be inserted
6080 Inserts a new page after an existing page in the PDF document. @param newPage the page to be inserted @param prevPage the page after which the new page will be inserted @throws IllegalArgumentException if the previous page is not found in its parent's kids array
6081 Appends a marked content element as a child. @param markedContent the PDMarkedContent instance to append @throws IllegalArgumentException if MCID is negative or missing
6082 This code snippet appears to be part of a larger program that deals with PDF encryption and decryption. It seems to be checking the type of encryption method used (AESV2 or AESV3) and sets the appropriate key length based on this. If the encryption method is AESV2, it sets the key length to 128 bits (or 16 bytes). If the encryption method is AESV3, it sets the key length to 256 bits (or 32 bytes). It also checks if the document's metadata should be encrypted and gets the user and owner keys from the encryption object. If the PDF revision is 5 or 6, it uses UTF-8 encoding for passwords instead of ISO-8859-1. It also retrieves the user and owner encryption keys in this case. For PDF revision 6, it performs a SASLprep query on the password to ensure it's properly formatted. The code then checks if the provided password is either the owner or user password. If it's the owner password, it sets the access permissions accordingly and computes the encrypted key using the owner key and other parameters. If it's the user password, it also sets the access permissions but marks them as read-only and computes the encrypted key using the user key. Finally, if the PDF revision is 4 and the length of the encrypted key is less than 16 bytes, it pads the key to this length. It then sets the encryption key and validates the permissions if the PDF revision is 5 or 6.
6083 Fetches and sets the UCS-2 CMap for the font. Handles composite fonts with predefined CMaps or descendant CIDFonts using specific character collections.
6084 Retrieves the width of the space character in PDF units. Uses various methods to determine the width, falling back to average font width if necessary. @return Width of the space character as a float
6085 Creates a PDImageXObject from a byte array. @param document PDDocument to which the image belongs @param byteArray image data as a byte array @param number page number in the TIFF file @return PDImageXObject or null if no data found @throws IOException if I/O operations fail
6086 Creates a PDImageXObject from a TIFF file. @param document PDDocument to which the image belongs @param file TIFF file containing the image data @param number page number in the TIFF file @return PDImageXObject or null if no data found @throws IOException if I/O operations fail
6087 Inserts generated appearance for a combination field. @param contents content stream to write appearance @param appearanceStream appearance stream of the field @param font font used for text rendering @param fontSize size of the font @throws IOException if an I/O error occurs
6088 Sets the display options for a choice field. @param displayValues list of string values to be set as options
6089 Sets the options for a choice field. @param exportValues list of values to be exported @param displayValues list of values to be displayed
6090 Sets selected options by index for multi-select choice fields. @param values list of indices representing selected options
6091 Determines if the font is fixed pitch. @return true if the font is fixed pitch, false otherwise
6092 Checks if the font has serif style. @return true if the font is serif, false otherwise
6093 Checks if the font is symbolic. @return true if the font is symbolic, false otherwise
6094 Determines if the text field should use comb formatting. @return true if comb formatting is applicable, false otherwise
6095 Checks if the font is a script font. @return true if the font is a script, false otherwise
6096 Retrieves a PDF page by its index. @param pageIndex 0-based index of the page to retrieve @return PDPage object representing the specified page
6097 Checks if the font is non-symbolic. @return true if the font is non-symbolic, false otherwise
6098 Initializes a new PageExtractor with a given PDF document. @param sourceDocument the PDF document to extract pages from
6099 Checks if the font style is italic. @return true if the font is italic, false otherwise
6100 Checks if the font is all capital. @return true if the 'All Cap' flag is set, false otherwise
6101 Initializes a new PDFPageable instance. @param document the PDF document to be paginated and printed @param orientation page orientation (e.g., portrait, landscape) @param showPageBorder flag indicating whether to display page borders @param dpi dots per inch for rendering quality @param center flag indicating whether to center content on pages
6102 Determines if the font supports small caps. @return true if small caps are enabled, false otherwise
6103 Checks if the font should be forced to bold. @return true if force bold flag is set, false otherwise
6104 Notifies the associated structure element of a change.
6105 Sets or clears the fixed pitch flag. @param flag true to set fixed pitch, false otherwise
6106 Sets or clears the serif flag in font descriptor. @param flag true to enable serif, false to disable
6107 Sets or clears the symbolic flag. @param flag true to mark as symbolic, false otherwise
6108 Sets or clears the script flag. @param flag true to enable script, false to disable
6109 Sets or clears the non-symbolic font flag. @param flag true to mark as non-symbolic, false otherwise
6110 Sets or clears the italic flag. @param flag true to enable italic style, false otherwise
6111 Sets or clears the all-caps flag. @param flag true to enable all caps, false otherwise
6112 Sets or clears the small cap font attribute. @param flag true to enable small caps, false to disable
6113 Sets or clears the force bold flag. @param flag true to force bold, false otherwise
6114 This is a code snippet from the Apache PDFBox library, which is used for creating and modifying PDF documents. The function seems to be responsible for handling password decryption in a PDF document. Here's a breakdown of what it does: 1. It first checks if the `stdCryptFilterDictionary` is not null. If it's not, it gets the crypt filter method from this dictionary. 2. Depending on the crypt filter method (AESV2 or AESV3), it sets the `dicLength` to 16 or 32 bytes (for 128-bit and 256-bit encryption respectively) and calls `setAES(true)`. 3. If the `encryption` object contains a key length, it checks if this is less than the default key length for AESV2 or AESV3. If so, it logs a warning and uses the provided key length instead. 4. It then gets the document ID bytes, whether metadata encryption is enabled, user and owner keys, and sets the password charset to ISO-8859-1 unless the dictionary revision is 5 or 6, in which case it's set to UTF-8. 5. If the dictionary revision is 6, it applies a SASLprep query to the password. 6. It then checks if the provided password matches either the user or owner key. If it does, it sets the current access permission and computes the encrypted key. 7. Finally, it validates permissions if the dictionary revision is 5 or 6. Note: This code snippet is quite complex and involves many cryptographic operations and checks. It's important to understand these before modifying or using them in your own projects.
6115 Retrieves a PDAbstractPattern by its associated PDColor. @param color the PDColor object containing the pattern name @return PDAbstractPattern object or null if not found @throws IOException if an error occurs during pattern creation or retrieval
6116 Processes a PDF transparency group. @param group PDTransparencyGroup to render @throws IOException if I/O error occurs during processing
6117 Processes a Type 3 character stream for rendering. @param charProc the character procedure to render @param textRenderingMatrix the initial text rendering matrix @throws IOException if an I/O error occurs
6118 Retrieves the width of a space character in PDF units. Uses various methods to determine the width, falling back to average font width if necessary. @return Width of the space character or 250 if undeterminable
6119 Processes annotation appearance by adjusting graphics state and rendering content. @param annotation the annotation to process @param appearance the appearance stream of the annotation @throws IOException if an I/O error occurs during processing
6120 Processes a tiling pattern by rendering its content. @param tilingPattern the pattern to process @param color the color for non-colored patterns @param colorSpace the color space for the pattern @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs during processing
6121 Inserts generated combination appearance for a text field. @param contents content stream to write appearance @param appearanceStream appearance stream of the field @param font font used for text rendering @param fontSize size of the font @throws IOException if an I/O error occurs
6122 Processes a PDF content stream, updating resources, graphics state, and clipping. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs during processing
6123 Checks if the font is fixed pitch. @return true if the font has fixed pitch, false otherwise
6124 Determines if the font has serif style. @return true if the font is serif, false otherwise
6125 Checks if the font is symbolic. @return true if the font is symbolic, false otherwise
6126 Checks if the font is script. @return true if the script flag bit is set, false otherwise
6127 Creates a PDField instance from a COSDictionary. @param form the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField if any @return PDField instance or null if unsupported field type
6128 Checks if the font is non-symbolic. @return true if the font is non-symbolic, false otherwise
6129 Determines if the font style is italic. @return true if the italic flag is set, false otherwise
6130 Constructs a PDFPrintable with specified options. @param document PDF document to be printed @param scaling page scaling option @param showPageBorder flag to display page borders @param dpi rendering quality in dots per inch @param center flag to center pages during printing
6131 Checks if the font is all capital. @return true if the font is set to all caps, false otherwise
6132 Checks if the font supports small caps. @return true if small caps are supported, false otherwise
6133 Checks if the font is forced to be bold. @return true if force bold flag is set, false otherwise
6134 Loads a PDF document from a byte array. @param input byte array containing the PDF data @param password password for decrypting the PDF (optional) @param keyStore input stream for the keystore (if encrypted) @param alias alias for the key in the keystore @return PDDocument object representing the loaded PDF @throws IOException if an error occurs during loading or document creation
6135 Sets or clears the fixed pitch flag in the font descriptor. @param flag true to set as fixed pitch, false otherwise
6136 Sets or clears the serif flag in the font descriptor. @param flag true to enable serif style, false otherwise
6137 Sets or clears the symbolic flag in the font descriptor. @param flag true to mark the font as symbolic, false otherwise
6138 Loads and parses a PDF document from a file. @param file source PDF file @param password decryption password for the PDF @param keyStore input stream for the keystore (if encrypted) @param alias alias for the key in the keystore @param streamCacheCreateFunction factory for creating stream caches @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6139 Sets or clears the script flag in the font descriptor. @param flag true to enable script, false to disable it
6140 Loads and parses a PDF document from a random access read source. @param randomAccessRead source for the PDF file @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6141 Sets the non-symbolic flag in the font descriptor. @param flag true to indicate non-symbolic characters, false otherwise
6142 Sets or clears the italic style flag. @param flag true to set italic, false to clear it
6143 Sets or clears the all-cap flag in the font descriptor. @param flag true to enable all caps, false to disable
6144 Loads and parses a PDF document from a random access read source. @param randomAccessRead source for the PDF file @param streamCacheCreateFunction factory for creating stream caches @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6145 Sets or clears the small cap flag in the font descriptor. @param flag true to enable small caps, false to disable
6146 Forces or unforces bold style for the font. @param flag true to force bold, false otherwise
6147 Loads and parses a PDF document from a random access read source. @param randomAccessRead source for the PDF file @param password decryption password for the PDF @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6148 Retrieves a PDAbstractPattern by its associated color. @param color the PDColor object containing the pattern name @return PDAbstractPattern object or throws IOException if not found
6149 Processes a transparency group in the PDF document. @param group PDTransparencyGroup object to process @throws IOException if an I/O error occurs during processing
6150 Loads and parses a PDF document from a random access read source. @param randomAccessRead source for the PDF file @param password decryption password for the PDF @param keyStore input stream for the keystore (if encrypted) @param alias alias for the key in the keystore @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6151 Processes a Type 3 character stream for rendering. @param charProc the character procedure to process @param textRenderingMatrix matrix defining initial text rendering transformation @throws IOException if an I/O error occurs during processing
6152 Loads and parses a PDF document from a random access read source. @param randomAccessRead source for the PDF file @param password decryption password for the PDF @param streamCacheCreateFunction factory for creating stream caches @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6153 Processes an annotation's appearance stream. @param annotation the annotation to process @param appearance the appearance stream of the annotation @throws IOException if an I/O error occurs during processing
6154 Sets visual signature from a PDF file. @param file PDF file containing the visual signature @throws IOException if an I/O error occurs during setup
6155 Sets visual signature from input stream. @param is input stream containing the signature image @throws IOException if an I/O error occurs during initialization
6156 Processes a tiling pattern by rendering its content. @param tilingPattern the pattern to process @param color the color for non-colored patterns @param colorSpace the color space for the pattern @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs during processing
6157 Processes a PDF content stream. @param contentStream the PDContentStream to process @throws IOException if an I/O error occurs during processing
6158 Creates a PDField instance from a dictionary. @param form the PDAcroForm containing the field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField in the hierarchy @return PDField object or null if unsupported field type
6159 Sets the current font and size for text rendering. @param font the PDFont to use @param fontSize the font size in points @throws IOException if an I/O error occurs
6160 Constructs a PDFPrintable instance with default renderer. @param document the PDDocument to be printed @param scaling the scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering quality @param center flag to indicate if pages should be centered during printing
6161 Sets the current font and size for text rendering. @param font the PDFont to use @param fontSize the font size in points @throws IOException if an I/O error occurs
6162 Sets the current font and size for text rendering. @param font the PDFont to use @param fontSize the font size in points @throws IOException if an I/O error occurs
6163 Loads a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for protected documents @param keyStore InputStream containing keystore data @param alias alias for the key in the keystore @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading or parsing
6164 Sets the current font and size for text rendering. @param font the PDFont to use @param fontSize the font size in points @throws IOException if an I/O error occurs
6165 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
6166 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for protected documents @param keyStore InputStream containing keystore data @param alias alias for the key in the keystore @param streamCacheCreateFunction factory function for creating stream cache @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6167 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during operation
6168 Sets graphics state parameters. @param state the extended graphics state to apply @throws IOException if writing fails
6169 Loads and parses a PDF document from a RandomAccessRead source. @param randomAccessRead PDF file source @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6170 Sets graphics state parameters for PDF form. @param state the extended graphics state to apply @throws IOException if writing fails
6171 Sets graphics state parameters. @param state the extended graphics state to apply @throws IOException if writing fails
6172 Loads and parses a PDF document from a RandomAccessRead source. @param randomAccessRead PDF file source @param streamCacheCreateFunction factory function for creating stream cache @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6173 Sets graphics state parameters. @param state the extended graphics state to apply @throws IOException if writing fails
6174 Loads and parses a PDF document from a RandomAccessRead source. @param randomAccessRead PDF file source @param password decryption password for protected documents @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6175 Fills the current path using a specified shading. @param shading PDShading object to be used for filling @throws IOException if an I/O error occurs during writing or text mode is active
6176 Fills the current path with a specified shading. @param shading PDShading object to be used for filling @throws IOException if an I/O error occurs during writing or if called within text mode
6177 Loads and parses a PDF document from a RandomAccessRead source. @param randomAccessRead PDF file source @param password decryption password for protected documents @param keyStore InputStream containing keystore data @param alias alias for the key in the keystore @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6178 Applies a shading pattern to the current path. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during writing
6179 Fills the current path using a specified shading. @param shading PDShading object to be used for filling @throws IOException if an I/O error occurs during writing or if called within a text block
6180 Loads and parses a PDF document from a RandomAccessRead source. @param randomAccessRead PDF file source @param password decryption password for protected documents @param streamCacheCreateFunction factory function for creating stream cache @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6181 Sets visual signature from a PDF file. @param file PDF file containing the signature @throws IOException if an I/O error occurs
6182 Begins a marked content sequence in the PDF. @param tag COSName representing the mark tag @param propertyList PDPropertyList containing properties @throws IOException if writing fails
6183 Sets visual signature from input stream. @param is InputStream containing the signature image @throws IOException if I/O error occurs during initialization
6184 Begins a marked content sequence with a tag and property list. @param tag the COSName representing the mark tag @param propertyList the PDPropertyList containing properties @throws IOException if writing fails
6185 Begins a marked content sequence with a tag and property list. @param tag the COSName representing the mark tag @param propertyList the PDPropertyList containing properties @throws IOException if writing fails
6186 Begins a marked content sequence with a tag and property list. @param tag the COSName representing the mark tag @param propertyList the PDPropertyList containing properties @throws IOException if writing fails
6187 Sets a marked content point with properties in the PDF. @param tag unique identifier for the marked content @param propertyList properties associated with the marked content @throws IOException if writing fails
6188 Sets a marked content point with properties in the PDF. @param tag unique identifier for the marked content @param propertyList properties associated with the marked content @throws IOException if writing fails
6189 Sets a marked content point with properties in the PDF. @param tag unique identifier for the marked content @param propertyList properties associated with the marked content @throws IOException if writing fails
6190 Sets the current font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
6191 Sets a marked content point with properties in the PDF. @param tag unique identifier for the marked content @param propertyList properties associated with the marked content @throws IOException if writing fails
6192 Sets the current font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
6193 Sets the current font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
6194 Draws an image at specified position and size. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs or text mode is active
6195 Sets the current font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
6196 Sets the stroking color for PDF rendering. @param color PDColor object representing the new stroking color @throws IOException if an I/O error occurs
6197 Draws an image on the PDF form at specified position and size. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs or text mode is active
6198 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
6199 Sets graphics state parameters in the content stream. @param state PDExtendedGraphicsState to apply @throws IOException if I/O error occurs
6200 Draws an image at specified position and size on the PDF page. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs or text mode is active
6201 Applies graphics state parameters to the content stream. @param state PDExtendedGraphicsState to apply @throws IOException if I/O error occurs
6202 Sets graphics state parameters for PDF content. @param state PDExtendedGraphicsState to apply @throws IOException if I/O error occurs
6203 Draws an image at specified position and size within a PDF pattern content stream. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs or text mode is active
6204 Sets graphics state parameters for pattern rendering. @param state PDExtendedGraphicsState to apply @throws IOException if I/O error occurs
6205 Applies a shading effect to the PDF content. @param shading PDShading object defining the shading effect @throws IOException if an I/O error occurs or if called within text mode
6206 Draws an image at a specified position using a transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling the image @throws IOException if an I/O error occurs or text mode is active
6207 Applies a shading effect to the PDF content. @param shading PDShading object defining the shading effect @throws IOException if an I/O error occurs or if called within text mode
6208 Draws an image at a specified position using a transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling the image @throws IOException if an I/O error occurs or text mode is active
6209 Applies a shading effect to the PDF content. @param shading PDShading object defining the shading effect @throws IOException if an I/O error occurs or if called within text mode
6210 Draws an image on the PDF page at a specified position using a transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling the image @throws IOException if an I/O error occurs or text mode is active
6211 Applies a shading effect to the PDF content. @param shading PDShading object defining the shading effect @throws IOException if an I/O error occurs or if called within text mode
6212 Draws an image at a specified position using a transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling the image @throws IOException if an I/O error occurs or text mode is active
6213 Begins a marked content sequence in the PDF. @param tag COSName representing the markup content type @param propertyList PDPropertyList containing additional properties @throws IOException if an I/O error occurs
6214 Draws a form XObject on the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing or text mode is active
6215 Begins a marked content sequence in the PDF. @param tag COSName representing the markup content type @param propertyList PDPropertyList containing additional properties @throws IOException if an I/O error occurs
6216 Draws a form XObject on the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing or text mode is active
6217 Begins a marked content sequence in the PDF. @param tag COSName representing the markup content type @param propertyList PDPropertyList containing additional properties @throws IOException if an I/O error occurs
6218 Draws a form XObject on the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing or text mode is active
6219 Begins a marked content sequence in the PDF. @param tag COSName representing the markup content type @param propertyList PDPropertyList containing additional properties @throws IOException if an I/O error occurs
6220 Draws a form XObject on the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing or if called within a text block
6221 Sets a marked content point with properties in the PDF stream. @param tag COSName of the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs
6222 Prepares a PDF document for encryption. @param document the PDDocument to be encrypted @throws IOException if cryptographic operations fail
6223 Sets a marked content point with properties in the PDF stream. @param tag COSName of the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs
6224 Sets default value for the button. @param value string representation of the default value
6225 Sets a marked content point with properties in the PDF stream. @param tag COSName of the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs
6226 Sets button value and updates state. @param value new value for the button @throws IOException if an I/O error occurs
6227 Sets a marked content point with properties in the PDF stream. @param tag COSName of the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs
6228 Imports optional content properties from a source document to the target document. @param srcDoc source PDF document containing OC properties @throws IOException if an I/O error occurs during processing
6229 Draws an image at a specified position and size. @param image the PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or drawing within text mode
6230 Builds and embeds a subset of a Type 2 CID font into a PDF. @param ttfSubset input stream for the TTF subset data @param tag prefix to be added to the font name @param gidToCid mapping from GID to CID for subsetting @throws IOException if I/O error occurs during font embedding
6231 Retrieves the standard structure type of a PDF element. @return the mapped standard structure type as a string or original type if not found
6232 Writes a PDF document without signing. @param doc PDDocument to write @throws IOException if an I/O error occurs
6233 Draws an image on the PDF form at specified position and size. @param image PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or drawImage is called within a text block
6234 Saves the PDF document incrementally with optional signing. @param output target output stream for writing @throws IOException if an I/O error occurs
6235 Draws an image on the PDF page at specified position and size. @param image PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or if called within a text block
6236 Saves the PDF document incrementally to an output stream. @param output target output stream for writing @param objectsToWrite set of COSDictionary objects to write @throws IOException if an I/O error occurs
6237 Adds PDF object structure to the pool. Handles compression and recursive addition for nested objects. @param current the COSBase object to process @throws IOException if an I/O error occurs
6238 Draws an image at a specified position and size within the PDF content stream. @param image PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @param width width of the image @param height height of the image @throws IOException if an I/O error occurs or if called within a text block
6239 Draws an image on the PDF using a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs or if called within text mode
6240 Draws an image on the PDF using a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if called within text mode or other I/O errors occur
6241 Draws an image on the PDF using a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if called within text mode or I/O error occurs
6242 Draws an image on the PDF using a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs or if called within text mode
6243 Draws a form XObject on the PDF stream. @param form PDFormXObject to draw @throws IOException if an I/O error occurs or if called within a text block
6244 Converts stream content to text string. @return decoded text from stream or empty string on error
6245 Draws a form XObject on the PDF stream. @param form PDFormXObject to draw @throws IOException if an I/O error occurs or if called within a text block
6246 Draws a form XObject on the PDF stream. @param form PDFormXObject to draw @throws IOException if an I/O error occurs or if called within a text block
6247 Draws a form XObject on the PDF stream. @param form PDFormXObject to draw @throws IOException if an I/O error occurs or if called within a text block
6248 Prepares a PDF document for encryption by setting up the encryption dictionary. @param document PDDocument to be encrypted @throws IOException if cryptographic operations fail
6249 Creates a decoded input stream using default decode options. @return COSInputStream with decoded data @throws IOException if an I/O error occurs or stream is improperly initialized
6250 Sets default button value. @param value new default value for the button
6251 Sets button value and updates state. @param value new value for the button @throws IOException if an I/O error occurs
6252 Collects and processes patches from a PDF shading dictionary. @param xform additional affine transform @param matrix transformation matrix @param controlPoints number of control points in the patch @return List of Patch objects or empty if no valid patches found @throws IOException if an I/O error occurs during processing
6253 Imports optional content properties from a source document to the target document. @param srcDoc the source PDF document containing OC properties @throws IOException if an I/O error occurs during import
6254 Builds a subset of Type 2 CID font and updates necessary mappings. @param ttfSubset input stream for the TTF subset data @param tag prefix to add to the font name @param gidToCid mapping from GID to CID @throws IOException if an I/O error occurs during processing
6255 Retrieves the standard structure type of a PDF element. @return the mapped structure type as a string, or original type if not found
6256 Writes a PDF document without signing. @param doc the PDDocument to write @throws IOException if an I/O error occurs
6257 Saves the PDF document incrementally to an output stream. @param output target output stream for writing the updated PDF @throws IOException if an I/O error occurs during saving
6258 Rebuilds the PDF trailer using cross-reference table. @param xrefTable map of COSObjectKey to byte offsets @return COSDictionary containing rebuilt trailer information @throws IOException if an I/O error occurs during processing
6259 Saves the PDF document incrementally with specified objects. @param output target output stream for writing @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs
6260 Parses a PDF object dynamically by key. @param objKey unique identifier for the object @param requireExistingNotCompressedObj flag to enforce existence and non-compression @return COSBase representing the parsed object or null if not found @throws IOException if parsing fails
6261 Adds PDF object structure to the compression pool. Handles COSStream, COSDictionary, COSArray, and COSObject types. Recursively adds nested elements if applicable. @param current the COSBase object to process @throws IOException if an I/O error occurs
6262 Parses the cross-reference (xref) table and trailers for a given PDF document starting from the specified offset. This method processes the xref chain by following the PREV pointers in each trailer. It validates and corrects any incorrect offsets found during parsing. The method handles both traditional xref tables and xref streams, including hybrid xrefs where both are present. After parsing, it ensures that all referenced objects have valid offsets and updates the document with the parsed xref table and trailer information. It also sets the highest XRef object number to prevent reuse during incremental saves. @param document The PDF document for which to parse the xref table. @param startXRefOffset The starting offset from where the parsing should begin. @return The final trailer dictionary after processing all xref tables and streams. @throws IOException If an I/O error occurs during parsing or if a loop is detected in the PREV chain.
6263 Creates a descendant CID font from a COS dictionary. @param dictionary the font dictionary @param parent the parent Type0Font object @return PDCIDFont instance based on the subtype @throws IOException if invalid font type or I/O error occurs
6264 Converts stream content to text string. @return decoded text string or empty if error occurs
6265 Retrieves annotations on the page that match the filter. @param annotationFilter criteria for filtering annotations @return List of matching PDAnnotation objects @throws IOException if an I/O error occurs
6266 Retrieves the referenced PDF object. @return COSObjectable instance or null if not found
6267 Retrieves the annotation in reply to this one. @return PDAnnotation object or null if no reply exists
6268 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found or type mismatch
6269 Creates a decoded input stream using default decode options. @return COSInputStream with decoded data @throws IOException if an I/O error occurs during stream creation or decoding
6270 Collects patches from the PDF shading stream. @param xform additional affine transform @param matrix transformation matrix @param controlPoints number of control points for each patch @return List of Patch objects or empty list if no patches found @throws IOException on I/O errors
6271 Constructs a PDPageContentStream for writing to a PDF page. @param document the PDDocument to add content to @param sourcePage the PDPage where content will be added @throws IOException if an I/O error occurs
6272 Constructs a PDPageContentStream for writing to a PDF page. @param document the PDDocument to add content to @param sourcePage the PDPage where content will be added @param appendContent mode specifying how to handle existing content (OVERWRITE, PREPEND) @param compress whether to compress the output stream @throws IOException if an I/O error occurs
6273 Initializes the current page for rendering. @param page PDF page to be initialized @throws IllegalArgumentException if the page is null
6274 Rebuilds the PDF trailer using cross-reference table. @param xrefTable map of COSObjectKey to their byte offsets in the PDF @return COSDictionary containing the rebuilt trailer @throws IOException if an I/O error occurs during parsing
6275 Retrieves the page's bleed box, clipping it to the media box if necessary. @return PDRectangle representing the bleed box or cropped box if not defined
6276 Parses a PDF object dynamically. @param objKey unique identifier for the COS object @param requireExistingNotCompressedObj flag to enforce existence and non-compression @return parsed COSBase object or null if not found @throws IOException if parsing fails
6277 Retrieves the page's trim box, clipping it to the media box if necessary. @return PDRectangle representing the trim box or media box if not defined
6278 Retrieves the page's art box, clipping it to the media box if necessary. @return PDRectangle representing the art box or cropped box if not defined
6279 Retrieves the rotated crop box of a PDF page. @param page PDPage object representing the PDF page @return PDRectangle with adjusted dimensions if rotated, otherwise original crop box
6280 Draws an image at specified coordinates using its default dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6281 Draws an image at specified coordinates using its default dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6282 Draws an image at specified coordinates using its original dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6283 Draws an image at specified coordinates with its original size. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6284 Initializes a FDFAnnotationCaret from an XML element. @param element XML element containing annotation data @throws IOException if fringe attribute format is incorrect
6285 Constructs a circular annotation from an XML element. @param element XML element representing the circle annotation @throws IOException if there's an issue with fringe initialization
6286 Constructs a file attachment annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an error processing the element
6287 Initializes a free text annotation from an XML element. @param element XML element containing annotation data @throws IOException if there's an error processing the XML or initializing components
6288 Initializes an FDFAnnotationInk from an XML element. @param element XML element representing the annotation @throws IOException if required elements are missing or invalid
6289 Constructs a line annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
6290 Initializes FDFAnnotationLink from XML element. Parses URI and sets action for annotation. @param element XML element representing the annotation @throws IOException if an error occurs during initialization
6291 Constructs a polygon annotation from an XML element. @param element XML element containing polygon data @throws IOException if vertex initialization fails
6292 Initializes a polyline annotation from an XML element. @param element XML element containing annotation data @throws IOException if vertex initialization fails
6293 Constructs an FDFAnnotationSound from an XML element. @param element the XML element representing the sound annotation @throws IOException if there is an error processing the XML
6294 Constructs a FDFAnnotationSquare from an XML element. @param element XML element containing annotation data @throws IOException if annotation data is invalid
6295 Constructs a FDFAnnotationStamp from an XML element. @param element XML element defining the stamp annotation @throws IOException if parsing fails
6296 Parses the cross-reference (xref) tables and object streams from a PDF document starting at the specified offset. This method reads through the xref chain, which may include multiple xref tables and/or object streams, using the PREV reference to navigate back through the document. It validates each xref offset, handles potential loops, and processes both traditional xref tables and xref streams. The method also checks the offsets of all referenced objects for consistency. @param document The PDF document to parse the xref from. @param startXRefOffset The initial offset in the document where the parsing should start. @return The trailer dictionary associated with the parsed xref chain. @throws IOException If an I/O error occurs during parsing or if a loop is detected in the xref chain.
6297 Constructs a text annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an error processing the element
6298 Constructs a text markup annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
6299 Creates a descendant CID font from a COS dictionary. @param dictionary the COS dictionary containing font properties @param parent the parent PDType0Font object @return PDCIDFont instance based on the font subtype @throws IOException if an I/O error occurs or invalid font type is found
6300 Retrieves annotations from the page. @param annotationFilter filter to apply to annotations @return List of PDAnnotation objects that match the filter @throws IOException if an error occurs during annotation creation
6301 Removes a page from the PDF document. @param pageNumber 1-based index of the page to remove
6302 Retrieves the referenced PDF object. @return COSObjectable instance or null if not found
6303 Removes a specified page from the PDF document. @param page PDPage object to be removed from the document
6304 Retrieves the annotation this one is a reply to. @return PDAnnotation object or null if not found @throws IOException if an error occurs during retrieval
6305 Imports a page from another PDF document. @param page PDPage object to import @return Imported PDPage object @throws IOException if an I/O error occurs
6306 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found or invalid
6307 Creates a PDImageXObject from a TIFF byte array. @param document PDF document to associate with the image @param byteArray byte array containing TIFF image data @return PDImageXObject or null if creation fails @throws IOException if an I/O error occurs
6308 Creates a PDImageXObject from a TIFF file. @param document PDF document to associate with the image @param file source TIFF file @return PDImageXObject or null if creation fails @throws IOException if an I/O error occurs
6309 Sets the value of a single-select choice field. @param value the selected option as a string @throws IOException if an error occurs during setting the value
6310 Updates selected option indices for multi-select choice fields. Converts string values to their corresponding indices and sorts them. @param values list of selected option values @param options list of all available option values
6311 Creates a PDPageContentStream for writing to a PDF page. @param document the PDDocument containing the page @param sourcePage the PDPage to write content to @throws IOException if an I/O error occurs
6312 Constructs a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed
6313 Initializes a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed @param orientation page orientation setting (e.g., portrait, landscape)
6314 Creates a PDPageContentStream for writing to a PDF page. @param document the PDDocument containing the page @param sourcePage the PDPage to write content to @param appendContent mode specifying how to handle existing content (OVERWRITE, PREPEND) @param compress whether to compress the stream @throws IOException if an I/O error occurs
6315 Initializes a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed @param orientation page orientation setting (e.g., portrait, landscape) @param showPageBorder flag to determine if page borders should be visible
6316 Initializes the current page for rendering. @param page PDPage object to be initialized @throws IllegalArgumentException if page is null
6317 Initializes a new PDFPageable instance with centered content. @param document the PDDocument to be paginated and printed @param orientation page orientation setting (e.g., portrait, landscape) @param showPageBorder flag to determine if page borders should be visible @param dpi dots per inch for rendering quality
6318 Retrieves a map of page labels to their corresponding indices. @return Map where keys are page labels and values are page indices
6319 Retrieves the page's bleed box dimensions. @return PDRectangle representing the bleed box or crop box if not set
6320 Retrieves page labels by their indices. @return array of page labels corresponding to each index
6321 Retrieves the page's trim box dimensions. @return PDRectangle representing the trim box or media box if not set
6322 Checks for value change and notifies associated structure element. @param oldBase previous attribute base value @param newBase current attribute base value
6323 Retrieves the page's art box dimensions, clipping to media box if not set. @return PDRectangle representing the art box or crop box if art box is not defined
6324 Returns the rotated crop box of a PDF page. @param page PDPage object to retrieve the crop box from @return PDRectangle representing the rotated crop box
6325 Draws an inline image at the specified position using its original size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs
6326 Draws an inline image at the specified position using its original size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs
6327 It seems like you have a code snippet from a Java class that deals with PDF text extraction and manipulation. The function appears to be handling the positioning and rendering of text within a PDF document. Here is a brief explanation of what each part does: 1. It calculates the combined displacement (`tx` and `ty`) for the text based on the font size, horizontal scaling, and vertical displacement. 2. It creates a translation matrix (`td`) using the calculated displacements. 3. It multiplies this translation matrix with the current text rendering matrix (`textMatrix`) and the current transformation matrix (`ctm`) to get the next text rendering matrix (`nextTextRenderingMatrix`). 4. It calculates the width (`dxDisplay`) and height (`dyDisplay`) of the text in display units. 5. It then deals with space widths, trying to get the space width from the font. If this fails, it uses the average font width as a fallback. 6. The space width is then transformed into display units. 7. It maps the character code to Unicode using an additional glyph list for Unicode mapping. 8. If no Unicode mapping is available, it coerces the character code into Unicode. 9. Finally, it processes the text position by creating a `TextPosition` object and passing it to a method called `processTextPosition`. Please note that this is a simplified explanation and there might be more going on in the actual implementation. Also, please ensure you have the necessary imports and class definitions for this code to work correctly.
6328 Draws an inline image at the specified position using its original size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs
6329 Splits paragraph text into lines based on font and width constraints. @param font PDF font for rendering text @param fontSize size of the font @param width maximum line width in PDF units @return List of Line objects representing formatted text lines @throws IOException if an I/O error occurs during processing
6330 Draws an inline image at the specified position using its original size. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs
6331 Retrieves the symbolic flag of the font. @return Boolean indicating if the font is symbolic, or null if descriptor is unavailable
6332 Initializes a caret annotation from an XML element. @param element XML element representing the caret annotation @throws IOException if there's an issue with initializing the fringe rectangle
6333 Determines a fallback font name based on the font descriptor. @param fontDescriptor PDFontDescriptor object describing the font @return Fallback font name as a string
6334 Initializes a circular annotation from an XML element. @param element XML element containing annotation data @throws IOException if initialization fails due to invalid data
6335 Constructs an FDF file attachment annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an error processing the element
6336 Builds a PDFontDescriptor for a Type 1 font. @param type1 the Type 1 font to describe @return PDFontDescriptor with font metrics and properties set @throws IOException if an I/O error occurs
6337 Initializes a free text annotation from an XML element. @param element XML element containing annotation data @throws IOException if there is an error processing the XML
6338 Builds a PDFontDescriptor from FontMetrics. @param metrics font metrics to extract descriptor information from @return constructed PDFontDescriptor object
6339 Initializes an FDFAnnotationInk from an XML element. @param element XML element representing the annotation @throws IOException if required elements are missing or parsing fails
6340 Creates a PDFontDescriptor for a TrueType font. @param ttf TrueTypeFont object to process @return PDFontDescriptor with font metrics and properties set @throws IOException if required tables are missing in the font
6341 Constructs a line annotation from an XML element. @param element XML element containing line annotation data @throws IOException if required attributes are missing or invalid
6342 Retrieves the Paint object for a given PDColor. Handles different color spaces and patterns. @param color PDColor to convert to Paint @return Paint object representing the color @throws IOException if an error occurs during pattern creation or retrieval
6343 Constructs an FDFAnnotationLink from an XML element. @param element XML element representing the annotation link @throws IOException if an I/O error occurs
6344 Constructs a polygon annotation from an XML element. @param element XML element containing annotation data @throws IOException if vertex initialization fails or color is malformed
6345 Constructs a polyline annotation from an XML element. @param element XML element containing annotation data @throws IOException if vertex initialization fails
6346 Renders a PDF transparency group. @param form PDTransparencyGroup to be rendered @throws IOException if I/O error occurs during rendering
6347 Initializes sound annotation from XML element. @param element XML element containing annotation data @throws IOException if there's an issue processing the element
6348 Processes a PDF transparency group with a soft mask. @param group PDTransparencyGroup to render @throws IOException if I/O error occurs during processing
6349 Constructs a square annotation from an XML element. @param element XML element containing annotation properties @throws IOException if invalid data is encountered
6350 Constructs a FDFAnnotationStamp from an XML element. @param element XML element defining the annotation properties @throws IOException if parsing or setting attributes fails
6351 Renders a Type 3 glyph from the given font. @param textRenderingMatrix current text rendering matrix @param font PDType3Font containing character procedures @param code font code of the glyph to render @param displacement vector for additional positioning @throws IOException if an I/O error occurs
6352 Constructs a text annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an issue processing the XML attributes
6353 Displays a PDF annotation by processing its appearance. @param annotation the PDF annotation to display @throws IOException if an I/O error occurs during rendering
6354 Constructs a text markup annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
6355 Processes a tiling pattern using its default matrix. @param tilingPattern the pattern to process @param color the color for non-colored patterns @param colorSpace the color space for the pattern @throws IOException if an I/O error occurs during processing
6356 Renders a form XObject on the current page. @param form PDF form object to render @throws IOException if an I/O error occurs during rendering
6357 Removes a page from the PDF document by its 1-based index. @param pageNumber the 1-based index of the page to remove
6358 Removes a specified page from the PDF document. @param page PDPage object to be removed
6359 Retrieves all interactive fields in the PDF form. @return List of PDField objects representing the form fields
6360 Imports a page from another PDF document. @param page PDPage object to import @return Imported PDPage object @throws IOException if an I/O error occurs
6361 Recursively finds a child field by its name. @param name array of field names in hierarchy @param nameIndex current index in the name array @return PDField instance or null if not found
6362 Retrieves child fields of the non-terminal field. @return List of PDField objects representing child fields
6363 Creates a PDImageXObject from a byte array. @param document PDDocument to which the image belongs @param byteArray image data as a byte array @return PDImageXObject or null if no data found @throws IOException if I/O operations fail
6364 Creates a PDImageXObject from a TIFF file. @param document PDDocument to which the image belongs @param file TIFF file containing the image data @return PDImageXObject or null if no data found @throws IOException if I/O operations fail
6365 Constructs a PDFPrintable with specified options. @param document PDF document to be printed @param scaling page scaling option @param showPageBorder flag to display page borders @param dpi rendering quality in dots per inch
6366 Sets the value of a single-valued choice field. @param value string to be set as the field's value @throws IOException if an I/O error occurs
6367 Updates selected options by index for multi-select choice fields. @param values list of option values to select @param options list of all available options
6368 Loads a PDF document from a byte array. @param input byte array containing the PDF data @param password password for decrypting the PDF (optional) @return PDDocument object representing the loaded PDF @throws IOException if an error occurs during loading or document creation
6369 Creates a new PDFPageable instance with default settings. @param document the PDF document to be paginated and printed
6370 Constructs a new PDFPageable instance with default settings. @param document the PDF document to be paginated and printed @param orientation page orientation (e.g., portrait, landscape)
6371 Loads and parses a PDF document from a file. @param file source PDF file @param streamCacheCreateFunction factory for creating stream caches @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6372 Initializes a new PDFPageable instance with default rendering quality. @param document the PDF document to be paginated and printed @param orientation page orientation (e.g., portrait, landscape) @param showPageBorder flag indicating whether to display page borders
6373 Loads and parses a PDF document from a file. @param file source PDF file @param password decryption password for the PDF @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6374 Constructs a new PDFPageable instance with centered content. @param document the PDF document to be paginated and printed @param orientation page orientation (e.g., portrait, landscape) @param showPageBorder flag indicating whether to display page borders @param dpi dots per inch for rendering quality
6375 Loads and parses a PDF document from a file. @param file source PDF file @param password decryption password for the PDF (optional) @param streamCacheCreateFunction factory for creating stream caches @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6376 Retrieves a map of page labels to their indices. @return Map where keys are page labels and values are corresponding page indices
6377 Retrieves page labels by indices. @return array of page labels corresponding to their indices
6378 Loads and parses a PDF document from a file. @param file source PDF file @param password decryption password for the PDF @param keyStore input stream for the keystore (if encrypted) @param alias alias for the key in the keystore @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6379 Potentially notifies of a change in attribute value. @param oldBase previous base object of the attribute @param newBase current base object of the attribute
6380 Sets visual signature using properties. @param visSignatureProperties object containing signature details @throws IOException if an I/O error occurs during initialization
6381 Sets the stroking color for PDF content from a Java Color object. @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
6382 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
6383 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
6384 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
6385 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
6386 Sets the non-stroking color for PDF content using a Java Color object. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during operation
6387 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during operation
6388 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during operation
6389 The provided code snippet appears to be a part of Apache PDFBox library which is used for processing and extracting information from PDF files. The function seems to handle the rendering of text in a PDF document, taking into account various factors such as font size, scaling, and spacing. Here's a brief explanation of what each section does: 1. **Displacement Calculation**: This part calculates the displacement of the text based on the `displacementX` and `displacementY` values, which are multiplied by the font size and horizontal scaling to get the actual offset in display units. 2. **Matrix Operations**: It creates a translation matrix (`td`) using the calculated displacement values and then multiplies this with the existing `textMatrix` and `ctm` (current transformation matrix) to get the new text rendering matrix. 3. **Width and Height Calculation**: The width and height of the text are calculated based on the difference in x and y coordinates before and after applying the text rendering matrix, as well as the font height. 4. **Space Width Calculation**: This section calculates the space width for the current font. It first tries to get the space width directly from the font, if that fails it uses the average font width scaled down by 20%, and finally defaults to a value of 1.0 if all else fails. 5. **Unicode Mapping**: The code attempts to map the character code to a Unicode string using the font's `toUnicode` method. If this fails (i.e., no mapping is available), it simply converts the character code to its corresponding ASCII character. 6. **Text Processing**: Finally, the function processes the text position by creating a new `TextPosition` object and passing it to the `processTextPosition` method along with various parameters such as page rotation, page size, text rendering matrix, coordinates, font size, etc. This code is quite complex due to the intricacies of PDF rendering and text extraction. It's important to note that PDFBox (and similar libraries) are designed to handle a wide range of PDF documents, which can vary greatly in their structure and formatting.
6390 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during operation
6391 Splits paragraph text into lines based on font and width constraints. @param font PDFont used for rendering text @param fontSize size of the font in points @param width maximum line width in PDF units @return List of Line objects representing formatted text lines @throws IOException if an I/O error occurs during processing
6392 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during operation
6393 Retrieves the symbolic flag of the font. @return Boolean value indicating if the font is symbolic, or null if font descriptor is missing
6394 Imports a page from a source document as a form XObject. @param sourceDoc the source PDF document containing the page @param page the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during processing
6395 Determines a fallback font name based on font descriptor properties. @param fontDescriptor the PDFontDescriptor object containing font details @return the fallback font name as a string
6396 Writes a PDF document from a COSDocument. @param doc the COSDocument to serialize @throws IOException if an I/O error occurs during writing
6397 Constructs a PDFontDescriptor from a Type1Font. @param type1 the source Type1Font @return a configured PDFontDescriptor @throws IOException if an I/O error occurs
6398 Builds a PDFontDescriptor using font metrics. @param metrics FontMetrics object containing font details @return Configured PDFontDescriptor instance
6399 Saves the PDF document to an output stream with specified compression. @param output OutputStream to write the PDF data to @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs or document is closed
6400 Creates a PDFontDescriptor for a TrueType font. @param ttf TrueTypeFont object to process @return PDFontDescriptor with configured properties @throws IOException if required tables are missing
6401 Initializes the COSWriterCompressionPool with a PDF document and compression parameters. @param document PDDocument representing the PDF to be processed @param parameters CompressParameters for configuring compression settings @throws IOException if an I/O error occurs during initialization
6402 Retrieves the Paint object for a given PDColor. @param color PDColor to convert to Paint @return Paint object representing the color or pattern @throws IOException if an I/O error occurs
6403 Processes and displays a transparency group from a PDF. @param form PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
6404 Retrieves string representation from COSBase. @param base COSBase object to process @return String value or empty if null or unsupported type
6405 Processes a transparency group in the PDF document. @param group PDTransparencyGroup object to process @throws IOException if an I/O error occurs during processing
6406 Retrieves the value of the field. Handles different COSBase types and converts them to appropriate string representations. @return The value as a string or list of strings, or null if not found @throws IOException if an error occurs during conversion
6407 Retrieves rich text value of the field. @return rich text as string or null if not found
6408 Renders a Type 3 glyph using its character procedure. @param textRenderingMatrix matrix defining initial text rendering transformation @param font the PDType3Font containing the glyph @param code font code of the glyph to render @param displacement vector for additional positioning adjustments @throws IOException if an I/O error occurs during rendering
6409 Retrieves the "Before" JavaScript action from the dictionary. @return The JavaScript code as a string or null if not found
6410 Renders a PDF annotation. @param annotation the annotation to render @throws IOException if an I/O error occurs during rendering
6411 Retrieves the "After" JavaScript action. @return the JavaScript code as a string or null if not found
6412 Retrieves JavaScript action associated with the PDF element. @return JavaScript code as a string or null if not found
6413 Processes a tiling pattern using its default matrix. @param tilingPattern the pattern to process @param color the color for non-colored patterns @param colorSpace the color space for the pattern @throws IOException if an I/O error occurs during processing
6414 Retrieves rich contents of the annotation. @return decoded string from COSString or COSStream, null if not found
6415 Renders a PDF form object on the current page. @param form the PDFormXObject to render @throws IOException if an I/O error occurs during rendering
6416 Retrieves string representation from COSBase. @param base COSBase object to process @return String value or empty if not a COSString or COSStream
6417 Retrieves all fields from the PDF form. @return List of PDField objects representing form fields
6418 Creates a layout page for PDF manipulation. @param page the original PDF page to be processed @return a new LayoutPage with combined content and resources @throws IOException if I/O error occurs during stream processing
6419 Recursively finds a child field by name in the AcroForm structure. @param name array of field names to traverse @param nameIndex current index in the name array @return PDField object if found, otherwise null
6420 Converts PDF stream to a byte array. @return byte array containing stream data @throws IOException if an I/O error occurs during conversion
6421 Retrieves child fields of the non-terminal field. @return List of PDField objects representing child fields
6422 Initializes and retrieves the sample array for interpolation. @return 2D array containing sample values or null if an error occurs
6423 Loads ICC profile for color space management. Handles sRGB profiles and alternate color spaces on failure. @throws IOException if an I/O error occurs
6424 Constructs a PDFPrintable instance with default centering. @param document the PDDocument to be printed @param scaling the scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering quality
6425 Loads a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for protected documents @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading or parsing
6426 Loads and parses a PDF document from a file. @param file PDF file to load @param streamCacheCreateFunction factory function for creating stream cache @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6427 Initializes a PatchMeshesShadingContext for PDF rendering. @param shading PDMeshBasedShadingType object representing the shading @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints number of control points in the patch @throws IOException if an error occurs during initialization or processing
6428 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for protected documents @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6429 Initializes Type4ShadingContext with shading parameters. @param shading PDShadingType4 object for shading details @param cm ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix additional transformation matrix @param deviceBounds rectangle defining the device area @throws IOException if an error occurs during initialization
6430 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for protected documents @param streamCacheCreateFunction factory function for creating stream cache @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6431 Initializes Type5 shading context. @param shading PDShadingType5 object for shading @param cm ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix additional transformation matrix @param deviceBounds rendering area bounds @throws IOException if an error occurs during initialization
6432 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for protected documents @param keyStore InputStream containing keystore data @param alias alias for the key in the keystore @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6433 Sets visual signature using properties. @param visSignatureProperties object containing signature details @throws IOException if I/O error occurs during initialization
6434 Sets the stroking color using a Java Color object. @param color Java Color object representing the new stroking color @throws IOException if an I/O error occurs
6435 Sets the stroking color for PDF rendering. @param color PDColor object representing the new stroking color @throws IOException if an I/O error occurs
6436 Retrieves the PDF trailer dictionary. Handles parsing and rebuilding if necessary. @return COSDictionary representing the trailer @throws IOException if an I/O error occurs
6437 Sets the stroking color for PDF rendering. @param color PDColor object representing the new stroking color @throws IOException if an I/O error occurs
6438 Sets the stroking color for PDF rendering. @param color PDColor object representing the new stroking color @throws IOException if an I/O error occurs during operation
6439 Renders a form XObject onto the current page. @param form PDFormXObject to render @throws IOException if an I/O error occurs during rendering
6440 Sets the stroking color for PDF rendering. @param color PDColor object representing the new stroking color @throws IOException if an I/O error occurs
6441 Begins a marked content sequence, checking for hidden optional content groups. @param tag the marked content tag @param properties dictionary containing properties of the marked content
6442 Sets the non-stroking color for PDF content. @param color Java Color object representing the color to set @throws IOException if an I/O error occurs during writing
6443 Retrieves all annotations on the page. @return List of PDAnnotation objects @throws IOException if an I/O error occurs
6444 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
6445 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
6446 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
6447 Appends a form as a new layer to the target page. @param targetPage the page to append the form to @param form the PDFormXObject to add as a layer @param transform the transformation matrix for positioning the form @param layerName the name of the new optional content group (layer) @return the created PDOptionalContentGroup representing the layer @throws IOException if an I/O error occurs
6448 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
6449 Processes a PDF page for rendering. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
6450 Imports a PDF page as a form XObject. @param sourceDoc the source document containing the page @param page the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during import
6451 Writes a PDF document from a COSDocument. @param doc the underlying COSDocument to write @throws IOException if an I/O error occurs
6452 Processes a child content stream for rendering. @param contentStream PDF content stream to be processed @param page PDF page associated with the content stream @throws IOException if an I/O error occurs during processing @throws IllegalStateException if page is already being processed
6453 Retrieves the page format for a given PDF page index. @param pageIndex 0-based index of the PDF page @return PageFormat object with adjusted orientation and size
6454 Saves the PDF document to an output stream. @param output OutputStream to write the PDF data to @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs or the document is closed
6455 Constructs a highlight annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
6456 Initializes the COSWriterCompressionPool with a PDF document and compression parameters. @param document PDDocument to be compressed @param parameters CompressParameters for compression settings, defaults if null @throws IOException if an I/O error occurs during initialization
6457 Constructs a squiggly annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
6458 Initializes a strikeout annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
6459 Initializes an underline annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
6460 Sets the selected values for a multi-select choice field. @param values list of selected option values @throws IOException if an I/O error occurs
6461 Retrieves string representation from COSBase. @param base the COSBase object to process @return string value or empty if not applicable
6462 Formats and displays text content with optional line wrapping. @throws IOException if an I/O error occurs during processing
6463 Retrieves the value of a form field. @return The value as Object, or null if not found @throws IOException if an error occurs during retrieval
6464 Retrieves rich text value from the field dictionary. @return rich text as a string or null if not found
6465 Calculates the appropriate font size for a given PDF font and content rectangle. @param font PDFont object representing the font to be used @param contentRect PDRectangle defining the area where text will be placed @return Calculated font size in points @throws IOException if an I/O error occurs during processing
6466 Retrieves JavaScript action before field modification. @return the JavaScript code or null if not found
6467 Reads and sets the font encoding. Handles different types of encoding dictionaries and names. Assigns a glyph list based on the standard 14 font name.
6468 Retrieves the "After" JavaScript action from the dictionary. @return the script as a string, or null if not found or not a valid type
6469 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic, or null if unsure
6470 Retrieves JavaScript action as string. @return JavaScript code or null if not found
6471 Retrieves rich content of the annotation. @return Rich content as a string or null if not available
6472 Retrieves a TrueType font by base name or descriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object describing the font @return FontMapping containing TrueTypeFont and fallback status
6473 Retrieves string from COSBase, handling both COSString and COSStream. @param base the COSBase object to process @return decoded string or empty if unsupported type
6474 Retrieves a FontBoxFont for a given base font and descriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object describing the font @return FontMapping containing the FontBoxFont and a boolean indicating if it's a fallback
6475 Embeds a Type 1 font into a PDF document. @param doc PDDocument to embed the font into @param dict COSDictionary for font properties @param pfbStream InputStream containing PFB data @param encoding font encoding, may be null @throws IOException if I/O error occurs
6476 Creates a LayoutPage from a PDF page. @param page PDPage object to be converted @return LayoutPage with combined content and resources @throws IOException if an I/O error occurs
6477 Constructs a PDFont object for a given font name. @param baseFont the base font name @throws IllegalArgumentException if no AFM data is found for the font
6478 Converts PDF stream to a byte array. @return byte array containing stream data @throws IOException if an I/O error occurs during conversion
6479 Retrieves and initializes sample data for interpolation. @return 2D array of integers representing sample values
6480 Loads ICC profile and sets up color space. @throws IOException if I/O error occurs during profile loading or alternate color space initialization
6481 Initializes TrueType font embedding in a PDF document. @param document PDDocument to embed the font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param embedSubset true if subset embedding is to be used @throws IOException if embedding is not permitted or fails
6482 Renders a glyph from the specified font at given coordinates. @param textRenderingMatrix transformation matrix for text rendering @param font the PDF font to use @param code character code of the glyph @param displacement vector for additional positioning @throws IOException if an I/O error occurs during processing
6483 Initializes a PatchMeshesShadingContext for PDF rendering. @param shading PDMeshBasedShadingType object representing the mesh-based shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle specifying the device bounds @param controlPoints number of control points for each patch @throws IOException if there is an issue with patch collection or pixel table creation
6484 Exports form data to an FDF document. @return FDFDocument containing form field data @throws IOException if an I/O error occurs
6485 Checks if XFA content is dynamic. @return true if XFA is present and no fields exist, false otherwise
6486 Initializes Type4ShadingContext with given parameters. @param shading PDShadingType4 object for shading context @param cm ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle representing the device area @throws IOException if there is an issue with initialization
6487 Initializes a Type5ShadingContext for PDF rendering. @param shading PDShadingType5 object representing the shading @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle specifying the pixel area @throws IOException if there is an issue with color space retrieval or background processing
6488 Constructs a PDFPrintable with specified options. @param document PDF document to be printed @param scaling page scaling option @param showPageBorder flag to display page borders
6489 Loads a PDF document from a byte array without encryption. @param input byte array containing the PDF data @return PDDocument object representing the loaded PDF @throws IOException if an error occurs during loading or document creation
6490 Loads and parses PDF from a file using specified password. @param file source PDF file @param password decryption password for the PDF @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6491 Retrieves the PDF trailer dictionary. Attempts to parse the xref table; if unsuccessful, rebuilds the trailer in lenient mode. @return COSDictionary representing the PDF trailer @throws IOException if an I/O error occurs during parsing or rebuilding
6492 Loads and parses a PDF document from a file. @param file source PDF file @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6493 Sets the stroking color using a Java Color object. @param color Java Color object representing the stroke color @throws IOException if an I/O error occurs during writing
6494 Renders a form XObject on the current page. @param form PDFormXObject to render @throws IOException if an I/O error occurs during rendering
6495 Sets the stroking color using a Java Color object. @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
6496 Begins a marked content sequence. @param tag the content tag name @param properties optional content properties
6497 Sets the stroking color for PDF content. @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
6498 Retrieves all annotations from the page. @return List of PDAnnotation objects @throws IOException if an error occurs during annotation creation
6499 Sets the stroking color for PDF content. @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
6500 Sets the non-stroking color for PDF content. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during operation
6501 Appends a form as a new layer to a target page. @param targetPage the page to append the form to @param form the PDFormXObject to add as a layer @param transform the AffineTransform for positioning the form @param layerName the name of the new optional content group (layer) @return the created PDOptionalContentGroup object @throws IOException if an I/O error occurs
6502 Sets the non-stroking color for PDF content using a Java Color object. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during operation
6503 Sets the non-stroking color for PDF content using a Java Color object. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during operation
6504 Processes a PDF page for rendering. @param page PDPage object to be processed @throws IOException if an I/O error occurs during processing
6505 Sets the non-stroking color for PDF content. @param color Java Color object representing desired color @throws IOException if an I/O error occurs during operation
6506 Processes a child content stream for rendering. @param contentStream the PDContentStream to process @param page the PDPage associated with the content stream @throws IOException if an I/O error occurs during processing @throws IllegalStateException if page is already being processed
6507 Initializes appearance content for a PDF form field widget. @param widget the form field widget to process @param appearanceCharacteristics visual characteristics of the annotation @param appearanceStream stream where appearance data is written @throws IOException if an I/O error occurs during processing
6508 Retrieves page format for a given PDF page index. @param pageIndex 0-based index of the PDF page @return PageFormat object configured for printing
6509 Writes font settings to the appearance content stream. @param contents PDAppearanceContentStream object to write to @param zeroFontSize default font size if current size is zero @throws IOException if an I/O error occurs during operation
6510 Constructs a highlight annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
6511 Constructs a squiggly annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
6512 Imports a page from the PDF document as a form XObject. @param sourceDoc the source PDF document containing the page @param pageNumber 1-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during processing
6513 Initializes a strikeout annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
6514 Saves the PDF document to an output stream with default compression. @param output OutputStream to write the PDF data to @throws IOException if an I/O error occurs or document is closed
6515 Constructs an underline annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
6516 Sets selected values for a multi-select choice field. @param values list of option values to select @throws IOException if an I/O error occurs
6517 Saves the PDF document to a specified file with compression. @param file File where the PDF will be saved @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs or document is closed
6518 Formats and displays text content with specified alignment and wrapping. @throws IOException if an I/O error occurs during processing
6519 Writes the PDF body with compression. @param document the COSDocument to write @throws IOException if an I/O error occurs
6520 Calculates the appropriate font size for text within a PDF form field. @param font the font to be used for rendering @param contentRect the rectangle defining the area available for text @return calculated font size as a float @throws IOException if an I/O error occurs during processing
6521 Retrieves rich content of the annotation. @return String representation of rich contents or empty if null
6522 Reads and assigns the encoding for the font. Handles different types of encoding dictionaries and names. Assigns a fallback encoding if necessary.
6523 Writes the field and its children to XML. @param output Writer to write XML data @throws IOException if an error occurs during writing
6524 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic, or null if unsure
6525 Retrieves rich text value of the variable text field. @return Rich text value as a string or empty if not set
6526 Retrieves a TrueType font by base name or descriptor. @param baseFont the base font name @param fontDescriptor the PDFontDescriptor object containing font details @return FontMapping with TrueTypeFont and fallback status
6527 Retrieves and processes the first page of the PDF document. @param doc the PDF document to process @return a LayoutPage object for the first page @throws IOException if I/O error occurs during processing
6528 Retrieves a FontBoxFont by base font name or fallback. @param baseFont base font name to search for @param fontDescriptor PDFontDescriptor containing font details @return FontMapping object with found font and boolean indicating if it's a fallback
6529 Initializes a PDFunctionType4 from a COSBase object. @param functionStream the underlying COSBase object representing the function stream @throws IOException if an I/O error occurs during initialization
6530 Embeds a Type 1 font into a PDF document. @param doc PDDocument to embed the font into @param dict COSDictionary for storing font properties @param pfbStream InputStream containing PFB font data @param encoding Font encoding, or null for default @throws IOException if I/O error occurs during embedding
6531 Initializes a PDFont with the specified base font. @param baseFont FontName object representing the base font @throws IllegalArgumentException if no AFM data is available for the font
6532 Performs recursive interpolation based on given coordinates and step index. @param coord array of coordinates for interpolation @param step current step index in the interpolation process @return interpolated float values as an array
6533 Initializes a PDICCBased object with an ICC profile array. @param iccArray COSArray containing ICC profile information @throws IOException if an I/O error occurs during initialization
6534 Initializes TrueType font embedding for a PDF document. @param document PDDocument to embed the font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param embedSubset boolean indicating if subset embedding is used @throws IOException if font cannot be embedded or unsupported
6535 Renders a glyph from the specified font at given position. @param textRenderingMatrix transformation matrix for text rendering @param font the font containing the glyph @param code character code of the glyph @param displacement vector for additional positioning @throws IOException if an I/O error occurs during rendering
6536 Initializes a Type6ShadingContext for PDF rendering. @param shading PDShadingType6 object representing the shading @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if an error occurs during initialization or processing
6537 Exports form data to an FDF document. @return FDFDocument containing the exported form fields @throws IOException if an I/O error occurs
6538 Checks if XFA is dynamic by verifying its presence and absence of form fields. @return true if XFA is dynamic, false otherwise
6539 Initializes a Type7ShadingContext for PDF rendering. @param shading PDShadingType7 object representing the shading @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if an error occurs during initialization or processing
6540 Constructs a PDFPrintable instance with default rasterization setting. @param document the PDDocument to be printed @param scaling the scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown
6541 Loads a PDF document from a byte array without password protection. @param input byte array containing the PDF data @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading or parsing
6542 Retrieves bytes from XFA resource. Handles both single and split XFA parts. @return byte array of XFA data or empty if not found @throws IOException if I/O error occurs during retrieval
6543 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for protected documents @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6544 Updates structure parent entries for a PDF page. @param page PDPage object to update @param structParentOffset offset to adjust structure parents @throws IOException if an I/O error occurs
6545 Loads and parses a PDF document from a file. @param file PDF file to load @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6546 Sets the stroking color using a Java Color object. @param color Java Color object representing the new stroking color @throws IOException if an I/O error occurs
6547 Sets the stroking color for PDF graphics. @param color Java Color object representing the new stroking color @throws IOException if an I/O error occurs while setting the color
6548 Sets the stroking color using a Java Color object. Converts RGB values to PDF compatible format and applies the color. @param color Java Color object representing the new stroking color @throws IOException if an I/O error occurs while setting the color
6549 Sets the stroking color using a Java Color object. @param color Java Color object representing the new stroking color @throws IOException if an I/O error occurs
6550 Sets the non-stroking color for PDF content. @param color Java Color object representing the color to set @throws IOException if an I/O error occurs during writing
6551 Sets non-stroking color using a Java Color object. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing
6552 This Java method `cloneStructureTree` clones the structure tree from a source PDF document to a destination PDF document. The method performs several tasks: 1. It retrieves the structure tree root from the source document's catalog. 2. If the source structure tree is null, it returns immediately as there is nothing to clone. 3. It initializes a dictionary map (`structDictMap`) for keeping track of cloned dictionaries. 4. It creates a new `PDStructureTreeRoot` object for the destination document. 5. It clones the `/K` entry from the source structure tree root and sets it in the destination structure tree root, also populating the dictionary map. 6. It transfers the parent tree using the dictionary map because all dictionaries are found within the `/K` structure. 7. For each page in the destination document's page tree, it clones the corresponding tree elements from the source parent tree if they exist, taking into account annotations and appearance streams. 8. It processes resources associated with pages and annotations to ensure that all necessary elements are cloned correctly. 9. It sets the numbers for the destination number tree node based on the cloned tree elements. 10. It retrieves the upper limit of the destination number tree and sets the next key for the parent tree accordingly. 11. It clones the class map, role map, and ID tree from the source structure tree root to the destination structure tree root. 12. Finally, it sets the cloned structure tree root in the destination document's catalog. This method ensures that the structural elements of the PDF document, including annotations, resources, and tree structures, are properly cloned to the new document while maintaining their relationships and attributes.
6553 Sets the non-stroking color for PDF content. Converts Java Color to PDColor and applies it. @param color Java Color object representing the color to set @throws IOException if an I/O error occurs during writing
6554 Sets the non-stroking color using a Java Color object. Converts RGB values to PDF-compatible format and applies the color. @param color Java Color object representing the color to set @throws IOException if an I/O error occurs during writing
6555 Initializes PDF form field appearance. @param widget annotation widget for the form field @param appearanceCharacteristics appearance characteristics dictionary @param appearanceStream appearance stream to write content to @throws IOException if an I/O error occurs during processing
6556 Writes font settings to the appearance content stream. @param contents PDAppearanceContentStream object for writing @param zeroFontSize fallback font size if current is zero @throws IOException if an I/O error occurs during writing
6557 The provided code snippet appears to be part of a larger program that deals with PDF documents. It's specifically handling the cloning and fixing of annotations within a PDF document. Here is what each section does: 1. The first loop iterates over all annotations in the source document. For each annotation, it checks if it's an instance of `PDAnnotationLink`. If so, it clones the link action and destination. It also handles named destinations by finding their corresponding page in the source document. 2. After cloning the destination, it checks if it's a `PDPageDestination`. If so, it clones the destination array and creates a new `PDPageDestination` object. It then puts this new destination into a map (`destToFixMap`) for later use. 3. If the annotation is an instance of `PDAnnotationWidget`, it removes the `/Parent` reference to avoid orphan pages. 4. Finally, if the annotation has a page associated with it, it sets the cloned annotation's page to the imported document. 5. The second loop handles markup and popup annotations, which reference other annotations. It clones these references and fixes them accordingly. 6. After all annotations have been processed, it sets the cloned annotations on the imported document. This code is likely part of a PDF merging or splitting tool where annotations need to be preserved and properly linked between documents.
6558 Imports a PDF page from the specified document as a form XObject. @param sourceDoc the source document containing the page @param pageNumber 0-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during import
6559 Saves the PDF document to an output stream with default compression. @param output OutputStream to write the PDF data to @throws IOException if an I/O error occurs or the document is closed
6560 Builds a map of PDF pages to their form widget annotations. @param fields list of PDField objects representing form fields @param pages PDPageTree object containing all pages in the document @return Map mapping COSDictionary (page) to Set of COSDictionary (widgets) @throws IOException if an I/O error occurs
6561 Processes a PDF page, setting rotation and handling translations. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
6562 Saves the PDF document to a specified file. @param file File to write the PDF data to @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs or the document is closed
6563 Constructs an FDFDictionary from XML. @param fdfXML XML element representing the FDF document
6564 Writes the PDF body with compression enabled. @param document COSDocument to write @throws IOException if an I/O error occurs
6565 Imports FDF field data into the PDF form field. @param fdfField FDFField object containing import data @throws IOException if an error occurs during import
6566 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic; defaults to true if unsure
6567 Retrieves rich content of the annotation. @return string representation of rich content or empty if not applicable
6568 Writes the field and its children to XML. @param output Writer object to write XML data @throws IOException if an error occurs during writing
6569 Constructs a PDType1Font object. @param doc PDDocument to associate the font with @param pfbIn InputStream containing PFB data @param encoding font encoding, may be null @throws IOException if I/O error occurs during font embedding
6570 Retrieves rich text value from PDF variable text field. @return decoded rich text string or empty if not found
6571 Constructs a PDSimpleFont instance. @param baseFont the base font name
6572 Initializes a PDFont object with the provided dictionary. @param fontDictionary the COSDictionary containing font data
6573 Retrieves and processes the first page of a PDF document as a layout page. @param doc PDDocument object containing the PDF pages @return LayoutPage representation of the first page @throws IOException if an I/O error occurs during processing
6574 Initializes a PDCIDFontType2Embedder for embedding CID fonts. @param document the PDF document to embed into @param dict the font dictionary @param ttf the TrueType font @param embedSubset whether to subset the font @param parent the parent Type 0 font @param vertical whether to support vertical text @throws IOException if an I/O error occurs during embedding
6575 Initializes PDFunctionType4 with a given COSBase object. @param functionStream COSBase representing the PDF function stream @throws IOException if an I/O error occurs during initialization
6576 Embeds a TrueType font into a PDF document. @param document PDDocument to embed the font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @throws IOException if embedding fails
6577 Performs recursive interpolation based on given coordinates and step. @param coord coordinate vector for indexing @param step current step index in the interpolation process @return interpolated float values as an array
6578 Determines if XFA content in the form is dynamic. @param acroForm PDF AcroForm object to check @return true if XFA is dynamic and has no fields, false otherwise
6579 Initializes a PDICCBased object using an ICC profile array. @param iccArray COSArray containing ICC profile data @throws IOException if I/O error occurs during initialization
6580 Constructs a PDFPrintable with specified options. @param document PDF document to be printed @param scaling page scaling option
6581 Loads and parses a PDF document from a file. @param file source PDF file @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6582 Initializes a Type6ShadingContext for PDF rendering. @param shading PDShadingType6 object representing the type 6 shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle specifying the device bounds @throws IOException if there is an issue with initialization
6583 Initializes Type7ShadingContext for PDF rendering. @param shading PDShadingType7 object representing the shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle specifying the device bounds @throws IOException if there is an issue with patch collection or pixel table creation
6584 This code snippet is from a Java class that appears to be part of the Apache PDFBox library, which is used for creating and manipulating PDF documents. The method in question seems to deal with generating appearances for form fields within a PDF document. The method `generateAppearanceStream` takes several parameters including the field object (`field`), value to display (`value`), content rectangle (`contentRect`), clip rectangle (`clipRect`), default appearance string (`defaultAppearanceString`), and some other settings like whether to comb or multiline. Here's a brief overview of what happens in this method: 1. It first checks if the field has a font resource associated with it. If not, it tries to load one from a specified font file. 2. It then calculates the font size based on whether it's set to automatic (0) or explicitly defined. 3. For listbox fields, it generates highlights for selected options. 4. It starts writing text content by setting up the text state with the appropriate font and color from the default appearance string. 5. It calculates the y-position of the baseline considering the font metrics like cap height and descent. 6. Depending on whether the field is multiline or a comb box, it handles these cases differently. 7. For regular fields, it formats the plain text content into the given rectangle, respecting line wrapping and alignment settings. The method ends by restoring any previously saved graphics state to ensure that other parts of the PDF document aren't affected by changes made here.
6585 Saves the PDF document to a specified file using default compression. @param file File where the PDF will be saved @throws IOException if an I/O error occurs or document is closed
6586 Saves the PDF document to a specified file with compression. @param fileName path where the PDF will be saved @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs or document is closed
6587 Extracts bytes from XFA resource. @return byte array containing XFA data @throws IOException if an I/O error occurs during extraction
6588 Writes FDF document details to XML. @param output Writer to write XML data @throws IOException if an error occurs during writing
6589 Updates structure parent entries for a PDF page. @param page the PDPage to update @param structParentOffset offset to apply to structure parents and annotations @throws IOException if an error occurs during annotation handling
6590 Creates a PDFunction instance based on the given COSBase. @param function COSBase object representing the PDF function @return PDFunction object or throws IOException for invalid input
6591 Initiates recursive interpolation process. @return interpolated float values as an array
6592 Creates a PDICCBased color space from an ICC profile array. @param iccArray COSArray containing ICC profile information @param resources PDResources for managing resources @return PDICCBased object or new instance if not found in cache @throws IOException if an I/O error occurs during creation
6593 Creates a PDImageXObject from a BufferedImage for PDF inclusion. Handles grayscale and RGB images, using predictor encoding if enabled. @param document PDDocument to associate with the image @param image BufferedImage to be processed @return PDImageXObject instance ready for PDF embedding @throws IOException if an I/O error occurs during processing
6594 Extracts and converts the matte array from a soft mask image. @param softMask PDImageXObject representing the soft mask @return float[] containing RGB values or null if invalid @throws IOException if an error occurs during processing
6595 This Java method `cloneStructureTree` is responsible for cloning the structure tree from a source PDF document to a destination PDF document. The method follows these steps: 1. It retrieves the structure tree root (`PDStructureTreeRoot`) from the source document's document catalog. 2. If no structure tree exists in the source document, it simply returns without doing anything. 3. A new `HashMap` is created to map source objects to destination objects during cloning. 4. A new `PDStructureTreeRoot` object is instantiated for the destination document. 5. The method clones the `/K` key from the source structure tree to the destination structure tree, filling the mapping dictionary in the process. 6. It transfers the parent tree from the source structure tree to the destination structure tree using the previously created mapping dictionary. This involves iterating over each page and its annotations in the destination document, cloning the corresponding tree elements from the source structure tree if they exist. 7. The method processes resources associated with pages and annotations, ensuring that any referenced objects are also cloned. 8. It creates a new `PDNumberTreeNode` for the parent tree in the destination structure tree, setting its numbers using the cloned map. 9. If an upper limit exists for the parent tree, it sets the next key for the parent tree to be one more than this upper limit. 10. The method clones the class map from the source structure tree to the destination structure tree. 11. It clones both the role map and the ID tree from the source structure tree to the destination structure tree. 12. Finally, it sets the cloned structure tree root as the document catalog's structure tree root for the destination document. This method ensures that the logical structure of the source PDF is accurately replicated in the destination PDF, preserving relationships between elements and maintaining consistency across the document.
6596 Draws an image at specified position using its original size. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6597 Retrieves and parses XFA document from PDF resource. @return parsed XML Document object @throws IOException if I/O error occurs during retrieval or parsing
6598 This code snippet appears to be part of a larger program that deals with PDF document manipulation. It specifically focuses on cloning annotations from one PDF page to another. Here's a breakdown of what the code does: 1. It first clones all annotations from the source page (`annotation`) and stores them in `clonedAnnotations`. 2. For each cloned annotation, it checks if the annotation is an instance of `PDAnnotationLink`. If so, it retrieves the destination associated with the link. 3. If the destination is a named destination (an instance of `PDNamedDestination`), it resolves this name to a page in the source document's catalog and updates the destination accordingly. 4. If the destination is a page destination (`PDPageDestination`), it clones the destination, associates it with the cloned annotation, and stores this association for later use. 5. It then checks if the cloned annotation is an instance of `PDAnnotationWidget` and contains a `/Parent` key. If so, it removes this key to prevent orphan pages. 6. It sets the page of the cloned annotation to the imported page (`imported`). 7. After all annotations have been processed, it iterates over them again to handle markup and popup annotations that reference other annotations. 8. For each markup annotation with a popup, it tries to find a corresponding cloned popup in `annotDictMap`. If found, it updates the reference; otherwise, it clones the popup, associates it with the markup annotation, and stores this association for later use. 9. For each popup annotation with a parent, it tries to find a corresponding cloned parent in `annotDictMap` and updates the reference. 10. Finally, it sets the annotations of the imported page to the cloned annotations. This code is likely used as part of a larger PDF splitting or merging process, where annotations from one page need to be transferred to another while preserving their functionality and integrity.
6599 Renders a PDF page with annotations onto the specified graphics context. @param g Graphics2D object for rendering @param pageSize dimensions of the PDF page @throws IOException if an I/O error occurs during rendering
6600 Processes a PDF page for splitting. Creates new document if necessary, imports page, and handles resources and annotations.
6601 Builds a map of PDF pages to their widget annotations. @param fields list of form fields containing widgets @param pages PDPageTree object representing the PDF document's pages @return Map mapping COSDictionary (representing page) to Set of COSDictionary (widget annotations) @throws IOException if an error occurs during annotation processing
6602 Processes a PDF page to extract marked content. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
6603 Processes a PDF page for rendering. @param page PDPage object to be processed @throws IOException if an I/O error occurs during processing
6604 Processes a PDF page for text extraction. @param page the PDPage to process @throws IOException if an I/O error occurs during processing
6605 Constructs an FDFDictionary from XML. @param fdfXML XML element representing the FDF document
6606 Constructs an FDF catalog from an XML element. @param element XML element representing the FDF document
6607 Imports field data from FDF into the PDF form. @param fdfField FDFField object containing import data @throws IOException if an I/O error occurs or unknown type is encountered
6608 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic; defaults to true if unsure
6609 Constructs a PDType1Font object by embedding a Type 1 font. @param doc PDDocument to embed the font into @param pfbIn InputStream containing PFB font data @param encoding Font encoding, or null for default @throws IOException if I/O error occurs during embedding
6610 Constructs a PDType1Font object with default encoding. @param doc PDDocument to associate the font with @param pfbIn InputStream containing PFB data @throws IOException if I/O error occurs during font embedding
6611 Constructs a PDSimpleFont instance with the specified base font. @param baseFont FontName object representing the base font
6612 Constructs a PDType1Font instance with the specified base font. @param baseFont the FontName representing the base font
6613 Initializes a PDFont from a COSDictionary. @param fontDictionary the dictionary containing font information
6614 Constructs a PDSimpleFont instance. @param fontDictionary COSDictionary containing font data
6615 Initializes a PDType0Font from a font dictionary. @param fontDictionary the COSDictionary containing font data @throws IOException if required font data is missing or invalid
6616 Constructs a PDCIDFontType2Embedder for embedding CID fonts. @param document PDF document to embed font into @param dict dictionary for the font @param ttf TrueTypeFont object @param embedSubset boolean indicating if subset embedding is used @param parent PDType0Font parent font @param vertical boolean indicating vertical text support @throws IOException if an I/O error occurs during font creation
6617 Initializes a PDType0Font with TrueType font data. @param document PDF document to embed into @param ttf TrueType font object @param embedSubset whether to subset the font @param closeTTF whether to manage font closure @param vertical whether to support vertical text @throws IOException if an I/O error occurs during initialization
6618 Constructs a PDTrueTypeFontEmbedder for embedding TrueType fonts in PDF. @param document PDDocument to embed the font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @throws IOException if font cannot be embedded or unsupported
6619 Determines if the given PDF AcroForm has dynamic XFA. @param acroForm the PDF AcroForm to check @return true if XFA is dynamic, false otherwise
6620 Initializes a PDTrueTypeFont instance. @param document PDDocument to embed the font into @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @param closeTTF flag indicating if TTF should be closed after embedding @throws IOException if font embedding fails
6621 Returns an iterator over PDField objects in the PDAcroForm. @return Iterator<PDField> for iterating through form fields
6622 Constructs a PDFPrintable instance with default settings. @param document the PDDocument to be printed @param scaling the scaling option for rendering
6623 Constructs a PDFPrintable with default SHRINK_TO_FIT scaling. @param document PDF document to be printed
6624 Saves the PDF document to a specified file. @param fileName path where the PDF will be saved @throws IOException if an I/O error occurs or document is closed
6625 Deprecated. Loads and parses a PDF document from a file. @param file PDF file to load @return PDDocument object representing the parsed PDF @throws IOException if an I/O error occurs during loading or parsing
6626 Writes FDF catalog details to XML. @param output Writer to write XML data @throws IOException if an error occurs during writing
6627 Evaluates input through a stitching function. @param input array of input values @return evaluated output value as float array @throws IOException if an error occurs during evaluation
6628 Initializes a DeviceN color space. @param deviceN COSArray representing the DeviceN color space @param resources PDF resources for color management @throws IOException if there's an error during initialization
6629 Retrieves the tint transformation function. Initializes it if not already created. @return PDFunction object representing the tint transform or throws IOException for invalid input
6630 Initializes a PDSeparation object. @param separation COSArray containing separation data @param resources PDResources for color space creation @throws IOException if there's an issue with tint transform or alternate colorspace
6631 Retrieves the shading function. @return PDFunction object or throws IOException for invalid input
6632 Retrieves the functions array from the shading dictionary. @return PDFunction[] containing the shading functions @throws IOException if the /Function element is invalid
6633 Retrieves the transfer function for the soft mask. @return PDFunction object representing the transfer function or null if not set @throws IOException if there is an error creating the PDFunction
6634 The code snippet you provided appears to be part of a larger Java class that deals with the appearance and rendering of form fields in a PDF document. It specifically handles the creation of an appearance stream for a form field, which is used to visually represent the field's value. Here's a breakdown of what the code does: 1. **Font Handling**: The code checks if the font file exists and loads it. If the font is already present in the default resources of the PDF document, it logs a warning and uses that font; otherwise, it adds the new font to the resources. 2. **Font Size Calculation**: It calculates the font size based on the field's appearance characteristics. If the font size is set to 0 (which means auto-size), it calculates an appropriate font size using the `calculateFontSize` method. 3. **Handling Listboxes**: For listbox fields, it generates a highlight rectangle for selected options by calling `insertGeneratedListboxSelectionHighlight`. 4. **Text Output**: The code begins text output and writes the font and color from the `/DA` string with the calculated font size. 5. **Y-Position Calculation**: It calculates the y-position of the baseline based on various factors such as the height of the content rectangle, the font's bounding box, and whether the field is multiline or not. 6. **Comb Handling**: If the field is a comb (which means it should display like a table with individual characters), it handles this by calling `insertGeneratedCombAppearance`. 7. **Listbox Appearance**: For listbox fields, it generates the appearance by calling `insertGeneratedListboxAppearance`. 8. **Text Formatting**: For regular text fields, it uses a `PlainTextFormatter` to format and display the text content within the specified rectangle, considering factors like line wrapping and alignment. 9. **End of Text Output**: Finally, it ends the text output and restores the graphics state. This code is part of a larger library or framework for working with PDF documents, likely Apache PDFBox, based on the method names and classes used (e.g., `PDTextField`, `PDListBox`).
6635 Saves the PDF document to a specified file with default compression. @param file File to write the PDF data to @throws IOException if an I/O error occurs or the document is closed
6636 Constructs a PDIndexed object. @param indexedArray PDF array containing color space data @param resources associated resources for color space initialization @throws IOException if an I/O error occurs during color table reading or initialization
6637 Saves the PDF document to the specified file. @param fileName path where the PDF will be saved @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs or the document is closed
6638 Evaluates input values using linear interpolation. @param input array of input float values @return array of interpolated output float values @throws IOException if decoding fails or missing ranges
6639 Builds a PDF image object from PNG data. @param document PDDocument to add the image object @param state PNG conversion state with image properties @return PDImageXObject or null if creation fails @throws IOException if I/O operations fail
6640 Writes FDF document properties and form fields to XML. @param output Writer object to write XML data @throws IOException if an error occurs during writing
6641 Creates a PDFunction based on the given COSBase object. @param function COSBase representing the PDF function stream @return PDFunction instance or throws IOException if invalid type
6642 Creates a PDImageXObject from a file based on its extension. Supports JPEG, TIFF, GIF, BMP, and PNG formats. @param file source image file @param doc PDF document to associate with the image @return PDImageXObject instance or throws IllegalArgumentException if unsupported format @throws IOException if an I/O error occurs during processing
6643 Initiates recursive interpolation process. @return interpolated float values as an array
6644 Creates a PDImageXObject from a file by detecting its content. @param file source image file @param doc PDF document to associate with the image @return PDImageXObject instance for PDF embedding @throws IOException if an I/O error occurs during processing
6645 Creates a PDICCBased object from an ICC profile array. @param iccArray COSArray containing ICC profile data @param resources PDResources for resource management @return PDICCBased color space instance @throws IOException if I/O error occurs during creation
6646 Retrieves an image from the PDF with optional region clipping and subsampling. @param region area to clip the image (null for full image) @param subsampling factor to reduce image resolution @return BufferedImage of the extracted image @throws IOException if I/O error occurs during processing
6647 Creates a PDImageXObject from a BufferedImage for PDF inclusion. @param document PDDocument to which the image belongs @param image source BufferedImage to convert @return PDImageXObject instance ready for PDF inclusion @throws IOException if I/O operations fail
6648 Draws an image at specified position using its original size. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6649 Extracts and processes the matte array from a soft mask image. @param softMask PDImageXObject representing the soft mask @return float[] containing RGB values or null if processing fails @throws IOException if an I/O error occurs during processing
6650 Draws an image at specified position using its original size. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6651 Draws an image at specified position using its original dimensions. @param image the PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @throws IOException if an I/O error occurs
6652 Draws an image at specified position using its original size. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6653 Draws an image at specified position using its original size. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs or text mode is active
6654 Renders a PDF page as an image. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @param imageType desired image type (e.g., ARGB) @param destination output destination for rendered image @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6655 Renders a specified PDF page to a Graphics2D context. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX scale factor along X-axis @param scaleY scale factor along Y-axis @param destination where the rendered image is stored @throws IOException if an I/O error occurs during rendering
6656 Processes pages within the specified range for splitting. @throws IOException if an I/O error occurs during page processing
6657 Retrieves and parses XFA document. @return parsed XML Document object @throws IOException if parsing fails
6658 Processes all pages in a PDF document for text extraction. @param pages PDPageTree containing the pages to process @throws IOException if an I/O error occurs during processing
6659 Renders a PDF page onto the specified graphics context. @param g Graphics2D object to draw on @param pageSize size of the page to render @throws IOException if an I/O error occurs during rendering
6660 Constructs an FDFDocument from a given XML document. @param doc the XML Document containing FDF data @throws IOException if the root element is not 'xfdf'
6661 Processes a PDF page for splitting. @param page PDPage object to process @throws IOException if an error occurs during processing
6662 Retrieves the default Helvetica font. @return PDType1Font instance of Helvetica or null if not created
6663 Processes a PDF page by setting rotation and handling crop box. @param page PDPage object to be processed @throws IOException if an I/O error occurs during processing
6664 Processes a PDF page for text extraction. @param page PDPage object to be processed @throws IOException if an I/O error occurs during processing
6665 Retrieves or creates a FontBoxFont instance for the specified base name. @param baseName the FontName representing the base font @return FontBoxFont object associated with the base name
6666 Constructs an FDF catalog from an XML element. @param element XML element representing the FDF document
6667 Initializes a PDTrueTypeFont with the given font dictionary. @param fontDictionary COSDictionary containing font data @throws IOException if an I/O error occurs during font processing
6668 Constructs a PDType1CFont instance from a COSDictionary. @param fontDictionary COSDictionary containing font data @throws IOException if an I/O error occurs during font processing
6669 Constructs a PDType1Font instance from a COSDictionary. @param fontDictionary COSDictionary containing font data
6670 Constructs a PDType1Font object by embedding a Type 1 font with default encoding. @param doc PDDocument to embed the font into @param pfbIn InputStream containing PFB font data @throws IOException if I/O error occurs during embedding
6671 Constructs a Type 3 font from a COSDictionary. @param fontDictionary COSDictionary containing font data @param resourceCache ResourceCache for managing font resources @throws IOException if an I/O error occurs during encoding setup
6672 Constructs a PDType1Font instance with the specified base font. @param baseFont FontName object representing the base font
6673 Constructs a PDSimpleFont instance from a COSDictionary. @param fontDictionary dictionary containing font information
6674 Loads a Type 0 font from a PDF document. @param doc PDF document to load the font into @param randomAccessRead source of TrueType font data @param embedSubset whether to subset the font @param vertical whether to support vertical text @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
6675 Constructs a PDType0Font from a COS dictionary. Initializes font properties and checks for valid descendants. @param fontDictionary the dictionary containing font information @throws IOException if an I/O error occurs or invalid font data is found
6676 Loads a Type 0 font into a PDF document. @param doc PDF document to load the font into @param ttf TrueType font object @param embedSubset whether to subset the font @return PDType0Font instance @throws IOException if an I/O error occurs during loading
6677 Initializes a PDType0Font for embedding TrueType fonts in PDF documents. @param document PDF document to embed font into @param ttf TrueTypeFont object @param embedSubset boolean indicating if subset embedding is used @param closeTTF boolean indicating if TTF should be closed after processing @param vertical boolean indicating vertical text support @throws IOException if an I/O error occurs during font initialization
6678 Loads a vertical Type 0 font into a PDF document. @param doc PDF document to embed the font into @param ttf TrueType font object @param embedSubset whether to subset the font @return PDType0Font instance configured for vertical text @throws IOException if an I/O error occurs during loading
6679 Initializes a PDTrueTypeFont instance for embedding in a PDF. @param document PDDocument to embed the font into @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @param closeTTF flag indicating if the TTF should be closed after processing @throws IOException if font cannot be embedded or unsupported
6680 Loads a TrueType font into a PDF document. @param doc PDDocument to embed the font into @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @return PDTrueTypeFont instance @throws IOException if font embedding fails
6681 Returns an iterator for PDF form fields. @return Iterator over PDField objects in the form
6682 Constructs a PDFPrintable instance with default scaling. @param document the PDDocument to be printed
6683 Loads a TrueType font from a PDF document. @param doc PDDocument to embed the font into @param randomAccessRead source of the font data @param encoding character encoding for the font @return PDTrueTypeFont instance or throws IOException if embedding fails
6684 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects representing signature fields
6685 Saves the PDF document to a specified file. @param fileName path to the file where the PDF will be saved @throws IOException if an I/O error occurs or the document is closed
6686 Refreshes the appearances of all terminal fields in the form. Iterates through each field and constructs its appearance if it's a PDTerminalField.
6687 Returns an iterator over all PDField objects in the PDAcroForm. @return Iterator<PDField> for iterating through form fields
6688 Enables or disables caching of form fields. @param cache true to enable caching, false to disable
6689 Writes FDF data to XML format. @param output Writer object for writing XML data @throws IOException if an error occurs during writing
6690 Retrieves a form field by its fully qualified name. @param fullyQualifiedName unique identifier for the field @return PDField object or null if not found
6691 Evaluates a stitching function based on input. @param input array of input values @return evaluated result as float array @throws IOException if function evaluation fails
6692 Applies overlays to specific pages of a PDF document. @param specificPageOverlayMap map of page numbers and corresponding overlay paths @return modified PDDocument with applied overlays @throws IOException if an I/O error occurs during processing
6693 Initializes a PDDeviceN object with given DeviceN array and resources. @param deviceN COSArray representing the DeviceN color space data @param resources PDResources for resource management @throws IOException if there's an error creating alternate color space or tint transform
6694 Applies overlays to specific pages of the input PDF document. @param specificPageOverlayDocumentMap map of page numbers and overlay documents @return the modified PDDocument with applied overlays @throws IOException if I/O error occurs during processing
6695 Retrieves the tint transformation function. Initializes and caches the tint transform if not already created. @return PDFunction representing the tint transformation or null if missing @throws IOException if there is an error creating the function
6696 Writes FDF document data to XML format. @param output Writer to write XML data @throws IOException if an error occurs during writing
6697 Initializes a PDSeparation with given separation array and resources. @param separation COSArray representing the separation color space data @param resources PDResources for resource management @throws IOException if tint transform has invalid output parameters
6698 Retrieves the shading function. @return PDFunction instance or throws IOException if invalid type
6699 Evaluates shading functions with given input. @param input array of input values for the function @return float[] containing evaluated results, clamped between 0 and 1 @throws IOException if an error occurs during function evaluation
6700 Retrieves the array of PDFunctions from the shading dictionary. @return Array of PDFunction objects representing the functions used in shading @throws IOException if /Function element is neither a dictionary nor an array
6701 Retrieves the transfer function associated with the soft mask. @return PDFunction instance or null if not found @throws IOException if an error occurs during function creation
6702 Initializes an indexed color space from a PDF array. @param indexedArray PDF array representing the indexed color space @param resources resource dictionary for resolving color spaces @throws IOException if an I/O error occurs during initialization
6703 Creates a PDColorSpace instance based on the provided COSBase object and resources. This method handles different types of color space definitions, including built-in types, default resources, arrays, and dictionaries. It throws an IOException if the input is invalid or if required resources are missing. @param colorSpace The COSBase object representing the color space definition. @param resources The resource dictionary containing additional color spaces. @param wasDefault A flag indicating whether this method was called to resolve a default color space. @return A PDColorSpace instance corresponding to the provided color space definition. @throws IOException If the input is invalid or required resources are missing.
6704 Evaluates input values through linear interpolation. @param input array of input float values @return array of interpolated output float values @throws IOException if decoding fails or required ranges are missing
6705 Constructs a PDIndexed object with default resources. @param indexedArray PDF array containing color space data @throws IOException if an I/O error occurs during initialization
6706 Builds a PDF image object from PNG data. @param document PDDocument instance for the image @param state PNG conversion state containing image data @return PDImageXObject or null if conversion fails @throws IOException on I/O errors during processing
6707 Creates a PDImageXObject from an image file. @param imagePath path to the source image file @param doc PDF document to associate with the image @return PDImageXObject instance or throws IllegalArgumentException if unsupported format @throws IOException if an I/O error occurs during processing
6708 Retrieves the full image from the PDF without clipping or subsampling. @return BufferedImage of the entire image @throws IOException if I/O error occurs during processing
6709 Creates a PDImageXObject from a file based on its extension. @param file the image file to process @param doc the PDF document to add the image to @return PDImageXObject representing the image @throws IOException if an I/O error occurs or unsupported format is used
6710 Renders a PDF page as an image using the specified parameters. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @param imageType desired image type (e.g., ARGB) @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6711 Creates a PDImageXObject from a file by detecting its content. @param file the image file to process @param doc the PDF document to add the image @return PDImageXObject instance for PDF inclusion @throws IOException if I/O operations fail or unsupported image type is detected
6712 Retrieves a BufferedImage of the image within a specified region and subsampling factor. Handles caching, masks, and JPEG2000 SMaskInData scenarios. @param region the Rectangle defining the clipped area or null for full image @param subsampling the subsampling factor @return BufferedImage of the specified region with applied transformations @throws IOException if an I/O error occurs during retrieval
6713 Renders a specified PDF page to a Graphics2D context using default destination. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX scale factor along X-axis @param scaleY scale factor along Y-axis @throws IOException if an I/O error occurs during rendering
6714 Draws an image at specified position using its original dimensions. @param image the PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @throws IOException if an I/O error occurs
6715 Splits a PDF document into multiple smaller documents. @param document the source PDF document to split @return list of split PDDocument objects @throws IOException if an I/O error occurs during splitting
6716 Draws an image at specified position using its original dimensions. @param image the PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @throws IOException if an I/O error occurs
6717 Extracts and writes text from a PDF document to an output stream. @param doc PDDocument object containing the PDF content @param outputStream Writer for the extracted text output @throws IOException if an I/O error occurs during processing
6718 Draws an image at specified position using its original dimensions. @param image the PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @throws IOException if an I/O error occurs
6719 Loads an XFDF document from an input stream. @param input stream containing XFDF data @return FDFDocument object parsed from the input stream @throws IOException if parsing fails
6720 Draws an image at a specified position using its original dimensions. @param image the PDImageXObject to draw @param x left coordinate of the image @param y bottom coordinate of the image @throws IOException if an I/O error occurs
6721 Renders text from a byte array using current font and text state. @param string byte array containing text to render @throws IOException if an I/O error occurs during processing
6722 Renders a PDF page as an image. @param pageIndex index of the page to render @param scale scaling factor for the rendered image @param imageType desired image type (e.g., ARGB) @param destination where to render the image @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6723 Retrieves the glyph path for a given font and glyph name. @param baseName the FontName representing the base font @param glyphName the name of the glyph to retrieve @return GeneralPath object representing the glyph's outline, or an empty path if not found @throws IOException if an I/O error occurs during retrieval
6724 Constructs a PDMMType1Font instance from a COSDictionary. @param fontDictionary COSDictionary containing font data
6725 Renders a specified PDF page to a graphics context. @param pageIndex 0-based index of the page to render @param graphics Graphics2D object for rendering @param scaleX scaling factor along X-axis @param scaleY scaling factor along Y-axis @param destination RenderDestination specifying output location @throws IOException if an I/O error occurs during rendering
6726 Processes pages within a specified range for splitting. @throws IOException if an error occurs during page processing
6727 Constructs a Type 3 font from a COSDictionary. @param fontDictionary COSDictionary containing font data @throws IOException if an I/O error occurs during encoding setup
6728 Processes all pages in a PDF document for text extraction. @param pages PDPageTree containing the pages to be processed @throws IOException if an I/O error occurs during processing
6729 Loads a Type 0 font from a PDF document. @param doc PDF document to load the font into @param file source TrueType font file @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
6730 Constructs an FDFDocument from a given XML Document. @param doc XML Document representing the FDF data @throws IOException if the root element is not 'xfdf'
6731 Retrieves the default Helvetica font. @return PDType1Font instance of Helvetica
6732 Loads a Type 0 font from an input stream. @param doc PDF document to load the font into @param input source of TrueType font data @param embedSubset whether to subset the font @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
6733 Retrieves or creates a FontBoxFont for the given base font. @param baseName FontName object representing the base font @return FontBoxFont object associated with the base font
6734 Loads a vertical Type 0 font from a PDF document. @param doc PDF document to load the font into @param file source TrueType font file @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
6735 Initializes a PDTrueTypeFont from a font dictionary. @param fontDictionary dictionary containing font information @throws IOException if an I/O error occurs during initialization
6736 Loads a vertical TrueType font into a PDF document. @param doc PDF document to load the font into @param input source of TrueType font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
6737 Constructs a PDType1CFont instance from a COSDictionary. @param fontDictionary dictionary containing font information @throws IOException if an I/O error occurs during font parsing
6738 Initializes a PDType1Font from a COSDictionary. @param fontDictionary dictionary containing font information @throws IOException if an I/O error occurs during initialization
6739 Loads a vertical Type 0 font from an input stream. @param doc PDF document to load the font into @param input source of TrueType font data @param embedSubset whether to subset the font @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
6740 Constructs a PDType3Font instance. @param fontDictionary dictionary containing font information @param resourceCache cache for managing font resources @throws IOException if an error occurs during font processing
6741 Loads a TrueType font from a file into a PDF document. @param doc PDDocument to embed the font into @param file source file of the font data @param encoding character encoding for the font @return PDTrueTypeFont instance or throws IOException if embedding fails
6742 Loads and initializes a Type 0 font from a TrueType font file. @param doc PDF document to embed the font into @param randomAccessRead source of the TrueType font data @param embedSubset boolean indicating if subset embedding is used @param vertical boolean indicating vertical text support @return PDType0Font object for the loaded font @throws IOException if an I/O error occurs during loading
6743 Loads a TrueType font from an input stream. @param doc PDDocument to embed the font into @param input source of the font data @param encoding character encoding for the font @return PDTrueTypeFont instance or throws IOException if embedding fails
6744 Retrieves all signature dictionaries from the PDF document. @return List of PDSignature objects representing digital signatures
6745 Loads a Type 0 font into a PDF document. @param doc PDF document to load the font into @param ttf TrueTypeFont object to be embedded @param embedSubset boolean indicating if subset embedding is used @return PDType0Font instance for the given font and document @throws IOException if an I/O error occurs during loading
6746 Loads a vertical Type 0 font for embedding in PDF documents. @param doc PDF document to embed font into @param ttf TrueTypeFont object @param embedSubset boolean indicating if subset embedding is used @return PDType0Font configured for vertical text @throws IOException if an I/O error occurs during font loading
6747 Loads a TrueType font into a PDF document. @param doc PDDocument to load the font into @param ttf TrueTypeFont object to be loaded @param encoding character encoding for the font @return PDTrueTypeFont instance representing the loaded font @throws IOException if font cannot be loaded or unsupported
6748 Loads a TrueType font from a given file and embeds it into the PDF document. @param doc PDDocument to embed the font into @param randomAccessRead file containing the TrueType font @param encoding character encoding for the font @return PDTrueTypeFont instance representing the embedded font @throws IOException if font cannot be loaded or embedded
6749 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects representing signature fields in the document
6750 The code snippet you've provided appears to be a method from a PDF processing library in Java, specifically dealing with adding and managing signature fields within a PDF document. Here's a breakdown of what the code does: 1. **Initialization**: It starts by setting the `acroForm` object to need an update. 2. **Signature Field Handling**: - It tries to find an existing signature field in the form. If found, it updates its value and marks it for update. - If no existing signature field is found, it creates a new one, sets its value (the signature), and adds it to the form. 3. **Widget Setup**: For the first widget of the signature field, it ensures that it's printed and not hidden or invisible. 4. **Form Field Update**: - It updates the AcroForm fields list, marking the `acroForm` object as a direct object. - It sets flags for signatures existing and the form being append-only. 5. **Visual Signature Handling**: Depending on whether a visual signature is provided, it prepares either a visible or non-visible signature. 6. **Annotation Addition**: - If the page isn't null, it adds the annotation widget to the page's annotations list. - It ensures that the `/Annots` array in the page object is marked for update and reassigns it to make sure changes are saved correctly. This method is crucial for adding digital signatures to PDF documents programmatically, ensuring that all necessary fields and flags are set according to the PDF/A-1 standard or other requirements.
6751 Refreshes the appearances of all terminal fields in the form. Iterates through each field and constructs its appearance if it's a terminal field.
6752 Returns an iterator for fields in this PDF form. @return Iterator over PDField objects
6753 Enables or disables caching of form fields. @param cache true to enable caching, false to disable
6754 Imports form data from an FDF document into the PDF form. @param fdf FDFDocument containing form data to import @throws IOException if an error occurs during import
6755 Retrieves a form field by its fully qualified name. @param fullyQualifiedName the complete name of the field, including parent names @return PDField object if found, otherwise null
6756 Saves FDF document as XFDF in XML format. @param output Writer to write XML data @throws IOException if an error occurs during writing or closing the writer
6757 Applies overlays to specific pages of a PDF document. @param specificPageOverlayMap map of page numbers to overlay file paths @return PDDocument with applied overlays @throws IOException if an I/O error occurs during processing
6758 Evaluates shading function with a single input value. @param inputValue the input value for the function @return evaluated result as an array of floats, clamped between 0 and 1 @throws IOException if an error occurs during function evaluation
6759 Overlays documents onto specified pages of the main PDF. @param specificPageOverlayDocumentMap map of page numbers to overlay documents @return PDDocument with overlays applied @throws IOException if an I/O error occurs during processing
6760 Evaluates shading function and converts to RGB. @param values input values for the shading function @return RGB color value as an integer @throws IOException if evaluation fails
6761 Writes FDF document data to XML format. @param output Writer for writing XML data @throws IOException if an error occurs during writing
6762 Evaluates the shading function with given input. @param input array of input values for the function @return array of output values after evaluating functions @throws IOException if error occurs during function evaluation
6763 Retrieves the non-stroking paint with applied soft mask. @throws IOException if an error occurs during processing
6764 Renders a transparency group onto the specified graphics context. @param form PDTransparencyGroup to render @param graphics Graphics2D context for rendering @throws IOException if an error occurs during processing
6765 Creates an instance of PDColorSpace based on the provided COSBase object. This method handles various types of COSBase objects to instantiate the appropriate PDColorSpace subclass. It supports direct names, arrays (with specific color space type as the first element), and dictionaries containing a /ColorSpace entry. The method also checks for default color spaces in the provided resources and throws exceptions if required resources are missing or if there is an invalid color space kind. @param colorSpace A COSBase object representing the color space to be created. @param resources A PDResources object containing additional resources that might be needed (e.g., for patterns). @param wasDefault A boolean indicating whether this method was called recursively from a default color space check. @return An instance of PDColorSpace corresponding to the provided COSBase object. @throws IOException If an invalid color space kind is encountered or if required resources are missing.
6766 Initializes an indexed color space from a PDF array. @param indexedArray PDF array representing the indexed color space @throws IOException if an I/O error occurs during initialization
6767 Renders a PDF page as an image with default RGB format. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6768 Renders a PDF page as an image with specified DPI. @param pageIndex index of the PDF page to render @param dpi desired dots per inch for rendering @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6769 Creates a PDImageXObject from an image file path. @param imagePath the path to the image file @param doc the PDF document to add the image to @return PDImageXObject representing the image @throws IOException if an I/O error occurs or unsupported format is used
6770 Retrieves the full image with default settings. @return BufferedImage of the entire image @throws IOException if an I/O error occurs during retrieval
6771 Renders a PDF page as an image with specified DPI. @param pageIndex index of the PDF page to render @param dpi desired dots per inch for rendering @param imageType desired image type (e.g., ARGB) @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6772 Renders a PDF page as an image with specified settings. @param pageIndex index of the page to render @param scale scaling factor for the rendered image @param imageType desired image type (e.g., ARGB) @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6773 Renders a specified PDF page to a Graphics2D context using uniform scaling. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scale uniform scale factor for both axes @throws IOException if an I/O error occurs during rendering
6774 Extracts a range of pages from the source PDF. @return PDDocument containing extracted pages or an empty document if invalid range @throws IOException if I/O error occurs during extraction
6775 Extracts text from a PDF document. @param doc PDDocument object containing the PDF content @return String of extracted text @throws IOException if an I/O error occurs during processing
6776 Renders a specified PDF page to a graphics context with default destination. @param pageIndex 0-based index of the page to render @param graphics Graphics2D object for rendering @param scaleX scaling factor along X-axis @param scaleY scaling factor along Y-axis @throws IOException if an I/O error occurs during rendering
6777 Loads an XFDF document from a file. @param filename path to the XFDF file @return FDFDocument object parsed from the file @throws IOException if parsing fails
6778 Splits a PDF document into multiple smaller documents. @param document the source PDF document to split @return list of PDDocument objects representing split documents @throws IOException if an error occurs during splitting
6779 Loads an XFDF document from a file. @param file the XFDF file to be loaded @return FDFDocument object parsed from the file @throws IOException if parsing fails
6780 Renders text from a byte array. @param string byte array containing text to render @throws IOException if an I/O error occurs during processing
6781 Writes extracted text from a PDF document to an output stream. @param doc PDDocument instance containing the PDF content @param outputStream Writer for writing the extracted text @throws IOException if an I/O error occurs during processing
6782 Loads an XFDF document from an input stream. @param input stream containing XFDF data @return FDFDocument object @throws IOException if parsing fails
6783 Renders text strings from a COSArray, handling both numbers and strings. @param array COSArray containing text objects @throws IOException if an I/O error occurs during rendering
6784 Renders text from a byte array using current font and graphics state. @param string byte array containing text data to render @throws IOException if an I/O error occurs during rendering
6785 Creates a PDFont object from a given COS dictionary. @param dictionary the COSDictionary containing font data @param resourceCache cache for shared resources @return PDFont object or null if unsupported type @throws IOException if an I/O error occurs during font creation
6786 Loads a Type 0 font from an input stream with default subsetting enabled. @param doc PDF document to load the font into @param input source of TrueType font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
6787 Retrieves the glyph path for a given font name and glyph. @param baseName FontName object representing the base font @param glyphName the glyph name @return GeneralPath object representing the glyph's path or an empty path if not found
6788 Retrieves the last digital signature from the PDF document. @return PDSignature object or null if no signatures exist
6789 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary dictionary containing font information @throws IOException if an I/O error occurs during initialization
6790 Prepares the PDF document for incremental external signing. @param output stream to write the unsigned PDF content @return ExternalSigningSupport object for signing @throws IOException if an I/O error occurs
6791 Constructs a PDType3Font instance with default resource cache. @param fontDictionary dictionary containing font information @throws IOException if an error occurs during font processing
6792 Flattens specified form fields in a PDF document. @param fields list of PDField objects to flatten @param refreshAppearances flag indicating whether to refresh field appearances @throws IOException if an I/O error occurs during flattening
6793 Loads and initializes a Type 0 font from a TrueType font file. @param doc PDF document to embed the font into @param file source file of the TrueType font data @return PDType0Font object for the loaded font @throws IOException if an I/O error occurs during loading
6794 Adds a signature to the PDF document. @param sigObject digital signature object @param options signature options @throws IOException if an I/O error occurs
6795 Loads a Type 0 font from an input stream. @param doc PDF document to embed the font into @param input source of the TrueType font data @param embedSubset boolean indicating if subset embedding is used @return PDType0Font object for the loaded font @throws IOException if an I/O error occurs during loading
6796 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for signing the document @throws IOException if an I/O error occurs
6797 Loads a vertical Type 0 font from a file. @param doc PDF document to embed the font into @param file source TrueType font file @return PDType0Font object for the loaded font @throws IOException if an I/O error occurs during loading
6798 Saves FDF document as XFDF in XML format to a file. @param fileName destination file for the XFDF data @throws IOException if an error occurs during writing or closing the file
6799 Loads and initializes a vertical TrueType font for embedding in a PDF. @param doc PDF document to embed the font into @param input source of the TrueType font data @return PDType0Font object configured for vertical text @throws IOException if an I/O error occurs during loading
6800 Loads a vertical Type 0 font from an input stream. @param doc PDF document to embed the font into @param input source of the TrueType font data @param embedSubset boolean indicating if subset embedding is used @return PDType0Font object for the loaded font @throws IOException if an I/O error occurs during loading
6801 Loads a TrueType font from a specified file and embeds it into the PDF document. @param doc PDDocument to embed the font into @param file file containing the TrueType font @param encoding character encoding for the font @return PDTrueTypeFont instance representing the embedded font @throws IOException if font cannot be loaded or embedded
6802 Draws a glyph onto the PDF page. @param path the GeneralPath representing the glyph's shape @param font the PDFont used for rendering the glyph @param code the character code of the glyph @param displacement the vector displacement for the glyph @param at the AffineTransform applied to the glyph @throws IOException if an error occurs during drawing
6803 Loads a TrueType font from an input stream and embeds it into the PDF document. @param doc PDDocument to embed the font into @param input InputStream containing the TrueType font @param encoding character encoding for the font @return PDTrueTypeFont instance representing the embedded font @throws IOException if font cannot be loaded or embedded
6804 Retrieves all signature dictionaries from the PDF document. @return List of PDSignature objects representing digital signatures in the document
6805 This code snippet is from a PDFBox library in Java. It's used to add or update a digital signature field in a PDF document. Here's a breakdown of what it does: 1. It first checks if the AcroForm (the interactive form part) needs to be updated. 2. Then, it searches for an existing signature field in the PDF. If it can't find one, it creates a new one and sets its value to the provided signature object. 3. The code then configures the widget associated with the signature field. It sets the printed flag to true to ensure that the signature is visible when printed. 4. It updates the AcroForm fields list to include the new or updated signature field. 5. Depending on whether a visual (graphical) representation of the signature was provided, it either prepares a non-visible or visible digital signature. 6. Finally, if a page was specified for the signature, it adds the signature annotation to that page's annotations list and marks the page as needing an update. This process is crucial when you want to digitally sign a PDF document programmatically using Java.
6806 Builds an indexed PNG image for PDF conversion. @param doc PDDocument to add the image object @param state PNG conversion state with image properties @return PDImageXObject or null if creation fails @throws IOException if I/O operations fail
6807 Renders a PDF page as an image with default scaling. @param pageIndex index of the PDF page to render @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6808 Imports form data from an FDF document into the PDF form. @param fdf FDFDocument containing form data to import @throws IOException if an I/O error occurs during import
6809 Renders a specified PDF page to a Graphics2D context. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @throws IOException if an I/O error occurs during rendering
6810 Saves FDF document as XFDF in XML format. @param output Writer for writing XML data @throws IOException if an error occurs during writing or closing the writer
6811 Evaluates shading function with single input value. @param inputValue single input value for the function @return array of output values after evaluating function @throws IOException if error occurs during evaluation
6812 Evaluates shading function and converts to RGB. @param values input values for the shading function @return RGB color value @throws IOException if error occurs during evaluation
6813 Retrieves a PDFont by name from the resources. @param name the COSName of the font resource @return the PDFont object or null if not found @throws IOException if an I/O error occurs during retrieval
6814 Creates a PDFont object from a COS dictionary. @param dictionary the COSDictionary containing font data @return PDFont object or null if unsupported type @throws IOException if an I/O error occurs during font creation
6815 Retrieves the non-stroking paint with applied soft mask. @return Paint object for non-stroking operations @throws IOException if an error occurs during processing
6816 Flattens all form fields in the PDF document. Does not support flattening dynamic XFA forms. @throws IOException if an I/O error occurs during flattening
6817 Adds a signature to the PDF document with default options. @param sigObject digital signature object @throws IOException if an I/O error occurs
6818 Renders a transparency group onto the specified graphics context. @param form PDF transparency group to render @param graphics target graphics context for rendering @throws IOException if an error occurs during processing
6819 Saves FDF document as XFDF in XML format to a specified file. @param fileName path to the destination file for the XFDF data @throws IOException if an error occurs during writing or closing the file
6820 Calculates pixel values for a list of shaded triangles. @param triangleList list of ShadedTriangle objects @param array 2D integer array to store RGB values @param deviceBounds Rectangle defining the rendering area @throws IOException if shading function evaluation fails
6821 Renders a PDF page as an RGB image. @param pageIndex index of the page to render @param scale scaling factor for the rendered image @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6822 Renders a PDF page as an image with specified DPI. @param pageIndex index of the page to render @param dpi dots per inch for the rendered image @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6823 Fills and strokes the current path on the PDF page. @param windingRule rule for determining interior of the path @throws IOException if an error occurs during rendering
6824 Renders a PDF page as an image with specified DPI. @param pageIndex index of the page to render @param dpi desired dots per inch for the rendered image @param imageType desired image type (e.g., ARGB) @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6825 Converts a PNG image to a PDF-compatible PDImageXObject. Validates image properties and handles different color types. @param doc PDDocument to add the image object @param state PNG conversion state with image properties @return PDImageXObject or null if conversion fails @throws IOException if I/O operations fail
6826 Renders a specified PDF page to a graphics context with uniform scaling. @param pageIndex 0-based index of the page to render @param graphics Graphics2D object for rendering @param scale uniform scaling factor for both axes @throws IOException if an I/O error occurs during rendering
6827 Extracts a range of pages from the source PDF document. @return PDDocument containing the extracted pages or an empty document if no valid range @throws IOException if an error occurs during extraction
6828 Extracts text from a PDF document. @param doc PDDocument instance containing the PDF content @return String of extracted text @throws IOException if an I/O error occurs during processing
6829 Processes the "set font" operator operands. @param operands list of COSBase objects representing the operands @throws IOException if an I/O error occurs or operands are invalid
6830 Loads an XFDF document from a file. @param filename path to the XFDF file @return FDFDocument object @throws IOException if parsing fails
6831 Loads an XFDF document from a file. @param file File object containing XFDF data @return FDFDocument object @throws IOException if parsing fails
6832 Copies necessary resources to the appearance stream. Ensures the specified font is available in the stream's resources. @param appearanceStream target appearance stream for resource copying @throws IOException if an I/O error occurs while processing resources
6833 Renders text from a byte array using current font and graphics state. @param string byte array containing text data to render @throws IOException if an I/O error occurs during rendering
6834 Retrieves the PDFont object from the font settings. @return PDFont object or null if not found @throws IOException if an I/O error occurs during font retrieval
6835 Renders text strings from a PDF array, applying adjustments based on font and scaling. @param array COSArray containing text chunks and spacing adjustments @throws IOException if an I/O error occurs during rendering
6836 Creates a PDFont from a COS dictionary. @param dictionary the COS dictionary containing font information @param resourceCache cache for resources @return PDFont object created based on the dictionary @throws IOException if an I/O error occurs or invalid font data is found
6837 Loads a Type 0 font from an input stream with subset embedding. @param doc PDF document to embed the font into @param input source of the TrueType font data @return PDType0Font object for the loaded font @throws IOException if an I/O error occurs during loading
6838 Retrieves the last digital signature from the PDF document. @return PDSignature object or null if no signatures exist
6839 Prepares the document for external signing and writes it to the output stream. @param output stream where the PDF will be written @return ExternalSigningSupport object for handling external signing process @throws IOException if an I/O error occurs during writing or processing
6840 Flattens specified form fields in the PDF document. @param fields list of PDField objects to flatten @param refreshAppearances flag to determine if appearances should be refreshed @throws IOException if an I/O error occurs during flattening
6841 This code is part of a method that merges the contents of one PDF document (srcCatalog) into another (destination). The merging process involves copying pages from the source document to the destination document and handling various aspects such as resources, annotations, structure trees, open actions, mark information, language settings, and viewer preferences. Here's a breakdown of the key steps: 1. **Determine Parent Tree Next Key**: If the source document has a structure tree (`srcStructTree`), it checks for the maximum key in its parent tree map (`srcNumberTreeAsMap`). It then calculates `destParentTreeNextKey`, which is used to avoid overlapping StructParents values when merging. 2. **Initialize Object Mapping**: An object mapping (`objMapping`) is created to keep track of COSObject mappings between the source and destination documents, which is crucial for maintaining references during the merge process. 3. **Copy Pages**: For each page in the source document: - A new page (`newPage`) is created with cloned resources. - If not merging structure trees, it removes any StructParent entries to avoid conflicts. - It copies properties like crop box, media box, rotation, and resources. - If merging structure trees, it updates StructParent values, adds mappings for COSObjects, and clones annotations. 4. **Merge Open Action**: The open action from the source document is merged into the destination document. 5. **Handle Structure Trees**: - Updates page references in the cloner based on the object mapping. - Merges numbers from the source structure tree into the destination structure tree, adjusting keys to avoid overlap. - Creates a new parent tree node for the destination document and sets its properties. - Merges K entries, role map, ID tree, mark information, language settings, and viewer preferences. This method is part of a larger class that likely handles PDF merging operations, ensuring that all necessary aspects are preserved during the merge process.
6842 Adds a digital signature to the PDF document. @param sigObject PDSignature object containing signature details @param options SignatureOptions for configuring the signature appearance and behavior @throws IOException if an I/O error occurs during processing
6843 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature creation @throws IOException if an I/O error occurs during processing
6844 Converts a PNG image to a PDF-compatible PDImageXObject. Parses PNG data, validates the conversion state, and performs the conversion. @param doc PDDocument to add the image object @param imageData byte array containing PNG data @return PDImageXObject or null if conversion fails @throws IOException if I/O operations fail
6845 Processes PDF operators to set font and color. @param operator the PDF operator to be processed @param operands list of COSBase objects representing the operator's operands @throws IOException if an I/O error occurs or operands are invalid
6846 Saves FDF document as XFDF in XML format to a file. @param fileName the target file for saving the XFDF data @throws IOException if an error occurs during writing or closing the file
6847 Sets the appearance content for a widget. Copies resources and updates the appearance stream with generated content. @param widget the annotation widget to update @param appearanceStream the appearance stream to modify @throws IOException if an I/O error occurs
6848 Renders a glyph onto the PDF page. @param path GeneralPath representing the glyph's shape @param font PDFont used for rendering @param code character code of the glyph @param displacement Vector indicating the position and size adjustments @param at AffineTransform for scaling and positioning @throws IOException if an error occurs during drawing
6849 The provided code is iterating over a dictionary (`dict`) that holds various graphics state parameters in a PDF document. Each key in the dictionary represents a specific graphics state parameter, and the corresponding value is used to set the appropriate property on an object `gs` (which likely stands for Graphics State). Here's a breakdown of what each part does: - For every key-value pair in the dictionary: - If the key matches certain predefined COSName constants (like LW, LC, LJ, ML, D, RI, etc.), it sets the corresponding property on the `gs` object. - The properties being set include line width, line cap style, line join style, miter limit, dash pattern, rendering intent, overprint mode, alpha values, and more. - For some properties (like font settings), additional checks or transformations are applied before setting the property. - If a key matches COSName.TR or COSName.TR2, special handling is done due to their precedence rules in PDF specifications. If both TR and TR2 are present, TR2 takes precedence. This code snippet is part of a larger system for parsing and applying graphics state parameters from a PDF document. The use of the `defaultIfNull` method suggests that there's a mechanism to provide default values when certain properties are not explicitly defined in the dictionary.
6850 Merges multiple PDF documents into a single output file. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs during merging
6851 Creates a PDImageXObject from a byte array. @param document PDF document to associate with the image @param byteArray byte array containing image data @param name name of the image file @param customFactory optional custom factory for specific formats @return PDImageXObject instance or null if creation fails @throws IOException if an I/O error occurs during processing
6852 Processes appearance string operators from PDF content. @param content byte array containing PDF data @throws IOException if an I/O error occurs or operands are invalid
6853 Merges PDF documents based on the selected merge mode. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs during merging
6854 Builds an indexed image for PDF conversion. @param doc PDDocument to add the image to @param state PNG conversion state containing image data @return PDImageXObject or null if image cannot be built @throws IOException on I/O errors during processing
6855 Creates a PDImageXObject from a byte array. @param document PDF document to associate with the image @param byteArray byte array containing image data @param name name of the image file @return PDImageXObject instance or null if creation fails @throws IOException if an I/O error occurs during processing
6856 Renders a PDF page as an RGB image at default scale. @param pageIndex index of the page to render @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
6857 Renders a specified PDF page to a graphics context with default scaling. @param pageIndex 0-based index of the page to render @param graphics Graphics2D object for rendering @throws IOException if an I/O error occurs during rendering
6858 Initializes the PDDefaultAppearanceString with appearance and resource settings. @param defaultAppearance COSString containing default appearance details @param defaultResources PDResources for managing resources @throws IOException if required entries are null or invalid
6859 Merges PDF documents with default compression. @param streamCacheCreateFunction function to create stream cache @throws IOException if an I/O error occurs during merging
6860 Retrieves a PDFont by name from the document's resources. @param name the COSName of the font resource @return the PDFont object or null if not found @throws IOException if an I/O error occurs
6861 Retrieves the default appearance string for the text field. @return PDDefaultAppearanceString object representing the appearance settings @throws IOException if issues occur during resource retrieval
6862 Creates a PDFont from a COS dictionary. @param dictionary the COS dictionary containing font information @return PDFont object created based on the dictionary @throws IOException if an I/O error occurs or invalid font data is found
6863 Flattens all form fields in the PDF document. Does not support flattening dynamic XFA forms. @throws IOException if an I/O error occurs during flattening
6864 Adds a digital signature to the PDF document with default options. @param sigObject PDSignature object containing signature details @throws IOException if an I/O error occurs during processing
6865 Saves FDF document as XFDF in XML format to a specified file. @param fileName path to the target file for saving the XFDF data @throws IOException if an error occurs during writing or closing the file
6866 Calculates pixel table for a list of shaded triangles. @param triangleList list of ShadedTriangle objects @param array 2D array to store RGB values @param deviceBounds Rectangle defining the rendering bounds @throws IOException if error occurs during function evaluation
6867 Fills and strokes the current path on a PDF page. @param windingRule rule for determining the interior of the path @throws IOException if an error occurs during rendering
6868 Converts a PNG image to a PDF-compatible PDImageXObject. Validates image properties and handles different color types. @param doc PDDocument for the image @param state PNG conversion state containing image data @return PDImageXObject or null if conversion fails @throws IOException on I/O errors during processing
6869 Processes the set font operator in a PDF content stream. @param operands list of COSBase objects representing operands @throws IOException if an I/O error occurs or required operands are missing
6870 Sets the appearance value for a PDF form field. This method processes the given field value, formats it according to the field's characteristics, and updates the appearance streams of all associated annotation widgets. It handles multiline fields by replacing line breaks with spaces if necessary, ensuring consistent behavior with Adobe Reader. The method iterates over each widget associated with the field, checks for specific conditions (such as missing rectangles or PaperMetaData widgets), and either initializes new appearance streams or updates existing ones. It also considers appearance characteristics and ensures that the complete appearance stream is recreated if necessary. @param apValue The value to be set as the field's appearance. @throws IOException If an I/O error occurs during processing.
6871 Copies necessary resources to the given appearance stream. Ensures the specified font is available in the stream's resources. @param appearanceStream target appearance stream for resource copying
6872 Initializes the AppearanceGeneratorHelper with a text field. Validates AcroForm resources and retrieves default appearance settings. @param field PDVariableText object representing the form field @throws IOException if issues occur during resource validation or appearance retrieval
6873 Retrieves the font object from the font settings. @return PDFont object or null if not found @throws IOException if an I/O error occurs during font creation
6874 This code is a method for merging two PDF documents using Apache PDFBox. The main purpose of this method is to copy pages from the source document (srcCatalog) to the destination document (destCatalog). Here's a breakdown of what the method does: 1. It first checks if there are any structure trees in the source document that need to be merged into the destination document. 2. If so, it creates a mapping between the objects in the source and destination documents. 3. Then, for each page in the source document, it creates a new page in the destination document with the same properties (crop box, media box, rotation, resources). 4. If there are structure trees to merge, it updates the struct parent entries of the new pages so they don't overlap with the existing values. 5. It then adds the new pages to the destination document's page tree. 6. Finally, if there were any structure trees to merge, it updates the references in the destination document's number tree, and merges other elements like open action, mark info, language, viewer preferences, etc. Please note that this code is quite complex and involves many PDFBox classes and methods. If you're not familiar with PDFBox or PDF structures, this might be difficult to understand without further context.
6875 Converts a PNG image to a PDF-compatible PDImageXObject. @param doc PDDocument for the image @param imageData byte array containing PNG data @return PDImageXObject or null if conversion fails @throws IOException on I/O errors during processing
6876 Processes PDF operators for font and color settings. @param operator the PDF operator to process @param operands list of COSBase objects representing operands @throws IOException if an I/O error occurs or required operands are missing
6877 Sets the appearance content for a PDF form widget. @param widget PDAnnotationWidget to configure @param appearanceStream PDAppearanceStream to modify @throws IOException if I/O operations fail
6878 This code snippet appears to be iterating over a dictionary of graphics state parameters in a PDF document. Each key-value pair in the dictionary represents a specific graphics attribute, such as line width, line cap style, font settings, etc. For each key, it checks if the key matches one of several predefined COSName constants (like LW for Line Width, LC for Line Cap, etc.). If there's a match, it calls a corresponding method on an object named 'gs' to set that attribute. The value for this attribute is usually retrieved from another function call, often with some default values provided. For example: - When the key equals COSName.LW (Line Width), it sets the line width using the getLineWidth() method or defaults to 1 if that returns null. - When the key equals COSName.FONT, it gets font settings and applies them to the text state of 'gs'. The code also handles special cases like: - If both TR and TR2 are present in the dictionary, TR2 takes precedence over TR. - For soft masks (COSName.SMASK), it sets an initial transformation matrix based on the current one when the ExtGState is activated. Overall, this loop is responsible for applying all the graphics state settings from the provided dictionary to a given graphics state object ('gs').
6879 Merges multiple PDF documents into a single output file. @param streamCacheCreateFunction function for creating stream caches @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs during merging
6880 Creates a PDImageXObject from a byte array. @param document PDDocument to which the image belongs @param byteArray image data as a byte array @param name image name for error messages @param customFactory optional factory for custom image processing @return PDImageXObject instance or null if unsupported type @throws IOException on I/O errors during processing
6881 Processes appearance string operators for font and color settings. @param content PDF content as a byte array @throws IOException if an I/O error occurs or required operands are missing
6882 Merges PDF documents based on the current merge mode. @param streamCacheCreateFunction function for creating stream caches @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs during merging
6883 Creates a PDImageXObject from a byte array. @param document PDDocument to which the image belongs @param byteArray image data as a byte array @param name image name for error messages @return PDImageXObject instance or null if unsupported type @throws IOException on I/O errors during processing
6884 Initializes PDDefaultAppearanceString with appearance and resources. @param defaultAppearance PDF appearance string @param defaultResources PDF resources @throws IOException if an I/O error occurs or required entries are missing
6885 Merges PDF documents using default compression settings. @param streamCacheCreateFunction function for creating stream caches @throws IOException if an I/O error occurs during merging
6886 Retrieves the default appearance string for the text field. @return PDDefaultAppearanceString object configured with the appearance and resources @throws IOException if an I/O error occurs or required entries are missing
6887 Sets the appearance value for a PDF form widget. @param apValue The appearance value to be set. @throws IOException if I/O operations fail during processing.
6888 Initializes the AppearanceGeneratorHelper with a given text field. Validates and ensures AcroForm resources, retrieves default appearance string. @param field PDVariableText object representing the form field @throws IOException if an I/O error occurs during validation or retrieval
